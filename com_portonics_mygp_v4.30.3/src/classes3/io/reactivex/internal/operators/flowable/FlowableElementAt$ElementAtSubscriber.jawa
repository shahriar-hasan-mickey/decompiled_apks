record `io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.h` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.count` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.defaultValue` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.done` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.errorOnFewer` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.index` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `long` v2 , `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAt$ElementAtSubscriber;.<init>:(Ln/b/c;JLjava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L251d98.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Ln/b/c;)V` @kind direct;
  #L251d9e.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.index` @type ^`long` := v2 @kind wide;
  #L251da2.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.defaultValue` @type ^`java.lang.Object` := v4 @kind object;
  #L251da6.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.errorOnFewer` @type ^`boolean` := v5 @kind boolean;
  #L251daa.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAt$ElementAtSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L251dbc.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L251dc2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L251dc6.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L251dcc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAt$ElementAtSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L251de0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.done` @type ^`boolean` @kind boolean;
  #L251de4.  if v0 != 0 then goto L251e26;
  #L251de8.  v0:= 1I;
  #L251dea.  v2.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L251dee.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.defaultValue` @type ^`java.lang.Object` @kind object;
  #L251df2.  if v0 != 0 then goto L251e20;
  #L251df6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.errorOnFewer` @type ^`boolean` @kind boolean;
  #L251dfa.  if v0 == 0 then goto L251e14;
  #L251dfe.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L251e02.  v1:= new `java.util.NoSuchElementException`;
  #L251e06.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L251e0c.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L251e12.  goto L251e26;
  #L251e14.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L251e18.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L251e1e.  goto L251e26;
  #L251e20.  call `complete`(v2, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L251e26.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAt$ElementAtSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L251e38.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.done` @type ^`boolean` @kind boolean;
  #L251e3c.  if v0 == 0 then goto L251e48;
  #L251e40.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L251e46.  return @kind void;
  #L251e48.  v0:= 1I;
  #L251e4a.  v1.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L251e4e.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L251e52.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L251e58.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAt$ElementAtSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L251e6c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.done` @type ^`boolean` @kind boolean;
  #L251e70.  if v0 == 0 then goto L251e76;
  #L251e74.  return @kind void;
  #L251e76.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.count` @type ^`long` @kind wide;
  #L251e7a.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.index` @type ^`long` @kind wide;
  #L251e7e.  v4:= lcmp(v0, v2);
  #L251e82.  if v4 != 0 then goto L251e9e;
  #L251e86.  v0:= 1I;
  #L251e88.  v5.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L251e8c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L251e90.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L251e96.  call `complete`(v5, v6) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L251e9c.  return @kind void;
  #L251e9e.  v2:= 1L;
  #L251ea2.  v0:= v0 + v2 @kind long;
  #L251ea4.  v5.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.count` @type ^`long` := v0 @kind wide;
  #L251ea8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAt$ElementAtSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L251ebc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L251ec0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L251ec6.  v0:= temp;
  #L251ec8.  if v0 == 0 then goto L251eea;
  #L251ecc.  v2.`io.reactivex.internal.operators.flowable.FlowableElementAt$ElementAtSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L251ed0.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L251ed4.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L251eda.  v0:= 9223372036854775807L;
  #L251ee4.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L251eea.  return @kind void;
}
