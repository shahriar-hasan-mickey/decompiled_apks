record `io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription` @kind class {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription` v0 @kind this, `n.b.c` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArraySubscription;.<init>:(Ln/b/c;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L255178.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L25517e.  v0.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.downstream` @type ^`n.b.c` := v1 @kind object;
  #L255182.  return @kind void;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArraySubscription;.fastPath:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L255194.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.array` @type ^`java.lang.Object`[] @kind object;
  #L255198.  v1:= length @variable v0;
  #L25519a.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.downstream` @type ^`n.b.c` @kind object;
  #L25519e.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @type ^`int`;
  #L2551a2.  if v3 == v1 then goto L2551da;
  #L2551a6.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L2551aa.  if v4 == 0 then goto L2551b0;
  #L2551ae.  return @kind void;
  #L2551b0.  v4:= v0[v3] @kind object;
  #L2551b4.  if v4 != 0 then goto L2551ce;
  #L2551b8.  v0:= new `java.lang.NullPointerException`;
  #L2551bc.  v1:= "array element is null" @kind object;
  #L2551c0.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2551c6.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2551cc.  return @kind void;
  #L2551ce.  call `onNext`(v2, v4) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2551d4.  v3:= v3 + 1;
  #L2551d8.  goto L2551a2;
  #L2551da.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L2551de.  if v0 == 0 then goto L2551e4;
  #L2551e2.  return @kind void;
  #L2551e4.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2551ea.  return @kind void;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription` v10 @kind this, `long` v11 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArraySubscription;.slowPath:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2551fc.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.array` @type ^`java.lang.Object`[] @kind object;
  #L255200.  v1:= length @variable v0;
  #L255202.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @type ^`int`;
  #L255206.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArraySubscription.downstream` @type ^`n.b.c` @kind object;
  #L25520a.  v4:= 0L;
  #L25520e.  v6:= v4 @kind wide;
  #L255210.  v8:= lcmp(v6, v11);
  #L255214.  if v8 == 0 then goto L255256;
  #L255218.  if v2 == v1 then goto L255256;
  #L25521c.  v8:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L255220.  if v8 == 0 then goto L255226;
  #L255224.  return @kind void;
  #L255226.  v8:= v0[v2] @kind object;
  #L25522a.  if v8 != 0 then goto L255244;
  #L25522e.  v11:= new `java.lang.NullPointerException`;
  #L255232.  v12:= "array element is null" @kind object;
  #L255236.  call `<init>`(v11, v12) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25523c.  call `onError`(v3, v11) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L255242.  return @kind void;
  #L255244.  call `onNext`(v3, v8) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25524a.  v8:= 1L;
  #L25524e.  v6:= v6 + v8 @kind long;
  #L255250.  v2:= v2 + 1;
  #L255254.  goto L255210;
  #L255256.  if v2 != v1 then goto L25526a;
  #L25525a.  v11:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25525e.  if v11 != 0 then goto L255268;
  #L255262.  call `onComplete`(v3) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L255268.  return @kind void;
  #L25526a.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L255270.  v11:= temp @kind wide;
  #L255272.  v8:= lcmp(v6, v11);
  #L255276.  if v8 != 0 then goto L255210;
  #L25527a.  v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @type ^`int` := v2;
  #L25527e.  v11:= -v6 @kind long;
  #L255280.  call temp:= `addAndGet`(v10, v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L255286.  v11:= temp @kind wide;
  #L255288.  v6:= lcmp(v11, v4);
  #L25528c.  if v6 != 0 then goto L25520e;
  #L255290.  return @kind void;
}
