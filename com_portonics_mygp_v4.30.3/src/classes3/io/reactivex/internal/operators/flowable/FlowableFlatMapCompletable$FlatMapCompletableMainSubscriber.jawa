record `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.h` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.delayErrors` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.maxConcurrency` @AccessFlag FINAL;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.set` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/k;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2532a8.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L2532ae.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L2532b2.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L2532b6.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L2532ba.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L2532be.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L2532c4.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L2532c8.  v1:= new `io.reactivex.disposables.a`;
  #L2532cc.  call `<init>`(v1) @signature `Lio/reactivex/disposables/a;.<init>:()V` @kind direct;
  #L2532d2.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.set` @type ^`io.reactivex.disposables.a` := v1 @kind object;
  #L2532d6.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.maxConcurrency` @type ^`int` := v4;
  #L2532da.  v1:= 1I;
  #L2532dc.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L2532e2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2532f4.  v0:= 1I;
  #L2532f6.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L2532fa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2532fe.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L253304.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L253308.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L25330e.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;

  #L253320.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber$InnerConsumer` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.innerComplete:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber$InnerConsumer;)V` @AccessFlag  {
    temp;
    v0;

  #L253334.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L253338.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L25333e.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.onComplete:()V` @kind virtual;
  #L253344.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber$InnerConsumer` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.innerError:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber$InnerConsumer;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L253358.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L25335c.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L253362.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L253368.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L253268.  v0:= 1I;
  #L25326a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L25337c.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L253382.  v0:= temp;
  #L253384.  if v0 != 0 then goto L2533b0;
  #L253388.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25338c.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L253392.  v0:= temp @kind object;
  #L253394.  if v0 == 0 then goto L2533a4;
  #L253398.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25339c.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2533a2.  goto L2533cc;
  #L2533a4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2533a8.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2533ae.  goto L2533cc;
  #L2533b0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.maxConcurrency` @type ^`int`;
  #L2533b4.  v1:= 2147483647I;
  #L2533ba.  if v0 == v1 then goto L2533cc;
  #L2533be.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2533c2.  v1:= 1L;
  #L2533c6.  call `request`(v0, v1) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2533cc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2533e0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2533e4.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2533ea.  v0:= temp;
  #L2533ec.  if v0 == 0 then goto L253466;
  #L2533f0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L2533f4.  if v3 == 0 then goto L25343a;
  #L2533f8.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L2533fe.  v3:= temp;
  #L253400.  if v3 != 0 then goto L25341c;
  #L253404.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L253408.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L25340e.  v3:= temp @kind object;
  #L253410.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L253414.  call `onError`(v0, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25341a.  goto L25346c;
  #L25341c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.maxConcurrency` @type ^`int`;
  #L253420.  v0:= 2147483647I;
  #L253426.  if v3 == v0 then goto L25346c;
  #L25342a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25342e.  v0:= 1L;
  #L253432.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L253438.  goto L25346c;
  #L25343a.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.cancel:()V` @kind virtual;
  #L253440.  v3:= 0I;
  #L253442.  call temp:= `getAndSet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L253448.  v3:= temp;
  #L25344a.  if v3 <= 0 then goto L25346c;
  #L25344e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L253452.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L253458.  v3:= temp @kind object;
  #L25345a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25345e.  call `onError`(v0, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L253464.  goto L25346c;
  #L253466.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25346c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L253480.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L253484.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L25348a.  v3:= temp @kind object;
  #L25348c.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L253490.  call temp:= `e`(v3, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L253496.  v3:= temp @kind object;
  #L253498.  v3:= (`io.reactivex.c`) v3 @kind object;
  #L25349c.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2534a2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber$InnerConsumer`;
  #L2534a6.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber$InnerConsumer;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;)V` @kind direct;
  #L2534ac.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L2534b0.  if v1 != 0 then goto L2534ca;
  #L2534b4.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L2534b8.  call temp:= `b`(v1, v0) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2534be.  v1:= temp;
  #L2534c0.  if v1 == 0 then goto L2534ca;
  #L2534c4.  call `b`(v3, v0) @signature `Lio/reactivex/c;.b:(Lio/reactivex/b;)V` @kind interface;
  #L2534ca.  return @kind void;
  #L2534cc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2534ce.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2534d4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2534d8.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L2534de.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2534e4.  return @kind void;
  catch `java.lang.Throwable` @[L253480..L25349c] goto L2534cc;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L253504.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L253508.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25350e.  v0:= temp;
  #L253510.  if v0 == 0 then goto L25354a;
  #L253514.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L253518.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25351c.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L253522.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber.maxConcurrency` @type ^`int`;
  #L253526.  v1:= 2147483647I;
  #L25352c.  if v0 != v1 then goto L253542;
  #L253530.  v0:= 9223372036854775807L;
  #L25353a.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L253540.  goto L25354a;
  #L253542.  v0:= (`long`) v0 @kind i2l;
  #L253544.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25354a.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L253294.  v0:= 0I;
  #L253296.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L25355c.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L25327c.  v1:= v1 ^& 2;
  #L253280.  return v1;
}
