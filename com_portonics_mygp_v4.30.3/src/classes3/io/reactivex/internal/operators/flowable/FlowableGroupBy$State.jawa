record `io.reactivex.internal.operators.flowable.FlowableGroupBy$State` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `n.b.b` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.actual` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.cancelled` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.error` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.key` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.once` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.outputFused` @AccessFlag ;
  `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.parent` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.produced` @AccessFlag ;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableGroupBy$State.requested` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$State.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v1 @kind this, `int` v2 , `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v3 @kind object, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.<init>:(ILio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L25657c.  call `<init>`(v1) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L256582.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L256586.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25658c.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L256590.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L256594.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L25659a.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L25659e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2565a2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2565a8.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L2565ac.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L2565b0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L2565b6.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L2565ba.  v0:= new `io.reactivex.internal.queue.a`;
  #L2565be.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L2565c4.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.a` := v0 @kind object;
  #L2565c8.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` := v3 @kind object;
  #L2565cc.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.key` @type ^`java.lang.Object` := v4 @kind object;
  #L2565d0.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.delayError` @type ^`boolean` := v5 @kind boolean;
  #L2565d4.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2565e8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L2565ec.  v1:= 0I;
  #L2565ee.  v2:= 1I;
  #L2565f0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L2565f6.  v0:= temp;
  #L2565f8.  if v0 == 0 then goto L25660a;
  #L2565fc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L256600.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.key` @type ^`java.lang.Object` @kind object;
  #L256604.  call `cancel`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L25660a.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v2 @kind this, `boolean` v3 , `boolean` v4 , `n.b.c` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.checkTerminated:(ZZLn/b/c;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L25646c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L256470.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L256476.  v0:= temp;
  #L256478.  v1:= 1I;
  #L25647a.  if v0 == 0 then goto L25648a;
  #L25647e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L256482.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L256488.  return v1;
  #L25648a.  if v3 == 0 then goto L2564d4;
  #L25648e.  if v6 == 0 then goto L2564ae;
  #L256492.  if v4 == 0 then goto L2564d4;
  #L256496.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.error` @type ^`java.lang.Throwable` @kind object;
  #L25649a.  if v3 == 0 then goto L2564a6;
  #L25649e.  call `onError`(v5, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2564a4.  goto L2564ac;
  #L2564a6.  call `onComplete`(v5) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2564ac.  return v1;
  #L2564ae.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.error` @type ^`java.lang.Throwable` @kind object;
  #L2564b2.  if v3 == 0 then goto L2564c8;
  #L2564b6.  v4:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L2564ba.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L2564c0.  call `onError`(v5, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2564c6.  return v1;
  #L2564c8.  if v4 == 0 then goto L2564d4;
  #L2564cc.  call `onComplete`(v5) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2564d2.  return v1;
  #L2564d4.  v3:= 0I;
  #L2564d6.  return v3;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25661c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L256620.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L256626.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L256638.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25663e.  v0:= temp;
  #L256640.  if v0 == 0 then goto L256646;
  #L256644.  return @kind void;
  #L256646.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.outputFused` @type ^`boolean` @kind boolean;
  #L25664a.  if v0 == 0 then goto L256656;
  #L25664e.  call `drainFused`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drainFused:()V` @kind virtual;
  #L256654.  goto L25665c;
  #L256656.  call `drainNormal`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drainNormal:()V` @kind virtual;
  #L25665c.  return @kind void;
}
procedure `void` `drainFused`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drainFused:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L256670.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L256674.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L256678.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25667e.  v1:= temp @kind object;
  #L256680.  v1:= (`n.b.c`) v1 @kind object;
  #L256684.  v2:= 1I;
  #L256686.  if v1 == 0 then goto L2566ec;
  #L25668a.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L25668e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L256694.  v3:= temp;
  #L256696.  if v3 == 0 then goto L2566a2;
  #L25669a.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L2566a0.  return @kind void;
  #L2566a2.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.done` @type ^`boolean` @kind boolean;
  #L2566a6.  if v3 == 0 then goto L2566c8;
  #L2566aa.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.delayError` @type ^`boolean` @kind boolean;
  #L2566ae.  if v4 != 0 then goto L2566c8;
  #L2566b2.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.error` @type ^`java.lang.Throwable` @kind object;
  #L2566b6.  if v4 == 0 then goto L2566c8;
  #L2566ba.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L2566c0.  call `onError`(v1, v4) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2566c6.  return @kind void;
  #L2566c8.  v4:= 0I;
  #L2566ca.  call `onNext`(v1, v4) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2566d0.  if v3 == 0 then goto L2566ec;
  #L2566d4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.error` @type ^`java.lang.Throwable` @kind object;
  #L2566d8.  if v0 == 0 then goto L2566e4;
  #L2566dc.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2566e2.  goto L2566ea;
  #L2566e4.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2566ea.  return @kind void;
  #L2566ec.  v2:= -v2 @kind int;
  #L2566ee.  call temp:= `addAndGet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L2566f4.  v2:= temp;
  #L2566f6.  if v2 != 0 then goto L2566fc;
  #L2566fa.  return @kind void;
  #L2566fc.  if v1 != 0 then goto L256686;
  #L256700.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L256704.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25670a.  v1:= temp @kind object;
  #L25670c.  v1:= (`n.b.c`) v1 @kind object;
  #L256710.  goto L256686;
}
procedure `void` `drainNormal`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drainNormal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L256724.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L256728.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.delayError` @type ^`boolean` @kind boolean;
  #L25672c.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L256730.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L256736.  v2:= temp @kind object;
  #L256738.  v2:= (`n.b.c`) v2 @kind object;
  #L25673c.  v3:= 1I;
  #L25673e.  v4:= 1I;
  #L256740.  if v2 == 0 then goto L2567ec;
  #L256744.  v5:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L256748.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25674e.  v5:= temp @kind wide;
  #L256750.  v7:= 0L;
  #L256754.  v9:= v7 @kind wide;
  #L256756.  v11:= lcmp(v9, v5);
  #L25675a.  if v11 == 0 then goto L256796;
  #L25675e.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.done` @type ^`boolean` @kind boolean;
  #L256762.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L256768.  v12:= temp @kind object;
  #L25676a.  if v12 != 0 then goto L256772;
  #L25676e.  v13:= 1I;
  #L256770.  goto L256774;
  #L256772.  v13:= 0I;
  #L256774.  call temp:= `checkTerminated`(v14, v11, v13, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.checkTerminated:(ZZLn/b/c;Z)Z` @kind virtual;
  #L25677a.  v11:= temp;
  #L25677c.  if v11 == 0 then goto L256782;
  #L256780.  return @kind void;
  #L256782.  if v13 == 0 then goto L256788;
  #L256786.  goto L256796;
  #L256788.  call `onNext`(v2, v12) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25678e.  v11:= 1L;
  #L256792.  v9:= v9 + v11 @kind long;
  #L256794.  goto L256756;
  #L256796.  v11:= lcmp(v9, v5);
  #L25679a.  if v11 != 0 then goto L2567b8;
  #L25679e.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.done` @type ^`boolean` @kind boolean;
  #L2567a2.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L2567a8.  v12:= temp;
  #L2567aa.  call temp:= `checkTerminated`(v14, v11, v12, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.checkTerminated:(ZZLn/b/c;Z)Z` @kind virtual;
  #L2567b0.  v11:= temp;
  #L2567b2.  if v11 == 0 then goto L2567b8;
  #L2567b6.  return @kind void;
  #L2567b8.  v11:= lcmp(v9, v7);
  #L2567bc.  if v11 == 0 then goto L2567ec;
  #L2567c0.  v7:= 9223372036854775807L;
  #L2567ca.  v11:= lcmp(v5, v7);
  #L2567ce.  if v11 == 0 then goto L2567de;
  #L2567d2.  v5:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2567d6.  v6:= -v9 @kind long;
  #L2567d8.  call temp:= `addAndGet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L2567de.  v5:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L2567e2.  v5:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2567e6.  call `request`(v5, v9) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2567ec.  v4:= -v4 @kind int;
  #L2567ee.  call temp:= `addAndGet`(v14, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L2567f4.  v4:= temp;
  #L2567f6.  if v4 != 0 then goto L2567fc;
  #L2567fa.  return @kind void;
  #L2567fc.  if v2 != 0 then goto L256740;
  #L256800.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L256804.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25680a.  v2:= temp @kind object;
  #L25680c.  v2:= (`n.b.c`) v2 @kind object;
  #L256810.  goto L256740;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2564e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L2564ec.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L2564f2.  v0:= temp;
  #L2564f4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L256824.  v0:= 1I;
  #L256826.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.done` @type ^`boolean` := v0 @kind boolean;
  #L25682a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drain:()V` @kind virtual;
  #L256830.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L256844.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L256848.  v1:= 1I;
  #L25684a.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.done` @type ^`boolean` := v1 @kind boolean;
  #L25684e.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drain:()V` @kind virtual;
  #L256854.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L256868.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L25686c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L256872.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drain:()V` @kind virtual;
  #L256878.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25652c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L256530.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L256536.  v0:= temp @kind object;
  #L256538.  if v0 == 0 then goto L25654a;
  #L25653c.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.produced` @type ^`int`;
  #L256540.  v1:= v1 + 1;
  #L256544.  v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.produced` @type ^`int` := v1;
  #L256548.  return v0 @kind object;
  #L25654a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.produced` @type ^`int`;
  #L25654e.  if v0 == 0 then goto L256568;
  #L256552.  v1:= 0I;
  #L256554.  v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.produced` @type ^`int` := v1;
  #L256558.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L25655c.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`n.b.d` @kind object;
  #L256560.  v2:= (`long`) v0 @kind i2l;
  #L256562.  call `request`(v1, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L256568.  v0:= 0I;
  #L25656a.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25688c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L256892.  v0:= temp;
  #L256894.  if v0 == 0 then goto L2568a8;
  #L256898.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25689c.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L2568a2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drain:()V` @kind virtual;
  #L2568a8.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L256508.  v0:= 2I;
  #L25650a.  v2:= v2 ^& v0 @kind int;
  #L25650c.  if v2 == 0 then goto L256518;
  #L256510.  v2:= 1I;
  #L256512.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L256516.  return v0;
  #L256518.  v2:= 0I;
  #L25651a.  return v2;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$State` v3 @kind this, `n.b.c` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.subscribe:(Ln/b/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2568bc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L2568c0.  v1:= 0I;
  #L2568c2.  v2:= 1I;
  #L2568c4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L2568ca.  v0:= temp;
  #L2568cc.  if v0 == 0 then goto L2568e8;
  #L2568d0.  call `onSubscribe`(v4, v3) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L2568d6.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$State.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2568da.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2568e0.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$State;.drain:()V` @kind virtual;
  #L2568e6.  goto L2568fc;
  #L2568e8.  v0:= new `java.lang.IllegalStateException`;
  #L2568ec.  v1:= "Only one Subscriber allowed!" @kind object;
  #L2568f0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2568f6.  call `error`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Ln/b/c;)V` @kind static;
  #L2568fc.  return @kind void;
}
