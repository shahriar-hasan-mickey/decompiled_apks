record `io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` @kind class {
  `int` `io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.limit` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @AccessFlag FINAL;
  `io.reactivex.x` `io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.unit` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer` v0 @kind this, `int` v1 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.x` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/x;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25cf18.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.<init>:()V` @kind direct;
  #L25cf1e.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.x` := v5 @kind object;
  #L25cf22.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.limit` @type ^`int` := v1;
  #L25cf26.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` := v2 @kind wide;
  #L25cf2a.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L25cf2e.  return @kind void;
}
procedure `java.lang.Object` `enterTransform`(`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25cec8.  v0:= new `io.reactivex.h0.j`;
  #L25cecc.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.x` @kind object;
  #L25ced0.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L25ced4.  call temp:= `b`(v1, v2) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L25ceda.  v1:= temp @kind wide;
  #L25cedc.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L25cee0.  call `<init>`(v0, v5, v1, v3) @signature `Lio/reactivex/h0/j;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L25cee6.  return v0 @kind object;
}
procedure `io.reactivex.internal.operators.flowable.FlowableReplay$Node` `getHead`(`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer` v8 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.getHead:()Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L25ce2c.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.x` @kind object;
  #L25ce30.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L25ce34.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L25ce3a.  v0:= temp @kind wide;
  #L25ce3c.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L25ce40.  v0:= v0 - v2 @kind long;
  #L25ce42.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25ce48.  v2:= temp @kind object;
  #L25ce4a.  v2:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v2 @kind object;
  #L25ce4e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25ce54.  v3:= temp @kind object;
  #L25ce56.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v3 @kind object;
  #L25ce5a.  v7:= v3 @kind object;
  #L25ce5c.  v3:= v2 @kind object;
  #L25ce5e.  v2:= v7 @kind object;
  #L25ce60.  if v2 != 0 then goto L25ce66;
  #L25ce64.  goto L25ceb6;
  #L25ce66.  v4:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L25ce6a.  v4:= (`io.reactivex.h0.j`) v4 @kind object;
  #L25ce6e.  call temp:= `b`(v4) @signature `Lio/reactivex/h0/j;.b:()Ljava/lang/Object;` @kind virtual;
  #L25ce74.  v5:= temp @kind object;
  #L25ce76.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L25ce7c.  v5:= temp;
  #L25ce7e.  if v5 != 0 then goto L25ceb6;
  #L25ce82.  call temp:= `b`(v4) @signature `Lio/reactivex/h0/j;.b:()Ljava/lang/Object;` @kind virtual;
  #L25ce88.  v5:= temp @kind object;
  #L25ce8a.  call temp:= `isError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L25ce90.  v5:= temp;
  #L25ce92.  if v5 == 0 then goto L25ce98;
  #L25ce96.  goto L25ceb6;
  #L25ce98.  call temp:= `a`(v4) @signature `Lio/reactivex/h0/j;.a:()J` @kind virtual;
  #L25ce9e.  v4:= temp @kind wide;
  #L25cea0.  v6:= lcmp(v4, v0);
  #L25cea4.  if v6 > 0 then goto L25ceb6;
  #L25cea8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25ceae.  v3:= temp @kind object;
  #L25ceb0.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v3 @kind object;
  #L25ceb4.  goto L25ce5a;
  #L25ceb6.  return v3 @kind object;
}
procedure `java.lang.Object` `leaveTransform`(`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L25cef8.  v1:= (`io.reactivex.h0.j`) v1 @kind object;
  #L25cefc.  call temp:= `b`(v1) @signature `Lio/reactivex/h0/j;.b:()Ljava/lang/Object;` @kind virtual;
  #L25cf02.  v1:= temp @kind object;
  #L25cf04.  return v1 @kind object;
}
procedure `void` `truncate`(`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.truncate:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L25cf40.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.x` @kind object;
  #L25cf44.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L25cf48.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L25cf4e.  v0:= temp @kind wide;
  #L25cf50.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L25cf54.  v0:= v0 - v2 @kind long;
  #L25cf56.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25cf5c.  v2:= temp @kind object;
  #L25cf5e.  v2:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v2 @kind object;
  #L25cf62.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25cf68.  v3:= temp @kind object;
  #L25cf6a.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v3 @kind object;
  #L25cf6e.  v4:= 0I;
  #L25cf70.  v8:= v3 @kind object;
  #L25cf72.  v3:= v2 @kind object;
  #L25cf74.  v2:= v8 @kind object;
  #L25cf76.  if v2 == 0 then goto L25cfd6;
  #L25cf7a.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L25cf7e.  v6:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.limit` @type ^`int`;
  #L25cf82.  if v5 <= v6 then goto L25cfa0;
  #L25cf86.  v4:= v4 + 1;
  #L25cf8a.  v5:= v5 + -1;
  #L25cf8e.  v9.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int` := v5;
  #L25cf92.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25cf98.  v3:= temp @kind object;
  #L25cf9a.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v3 @kind object;
  #L25cf9e.  goto L25cf70;
  #L25cfa0.  v5:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L25cfa4.  v5:= (`io.reactivex.h0.j`) v5 @kind object;
  #L25cfa8.  call temp:= `a`(v5) @signature `Lio/reactivex/h0/j;.a:()J` @kind virtual;
  #L25cfae.  v5:= temp @kind wide;
  #L25cfb0.  v7:= lcmp(v5, v0);
  #L25cfb4.  if v7 > 0 then goto L25cfd6;
  #L25cfb8.  v4:= v4 + 1;
  #L25cfbc.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L25cfc0.  v3:= v3 + -1;
  #L25cfc4.  v9.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int` := v3;
  #L25cfc8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25cfce.  v3:= temp @kind object;
  #L25cfd0.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v3 @kind object;
  #L25cfd4.  goto L25cf70;
  #L25cfd6.  if v4 == 0 then goto L25cfe0;
  #L25cfda.  call `setFirst`(v9, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @kind virtual;
  #L25cfe0.  return @kind void;
}
procedure `void` `truncateFinal`(`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$SizeAndTimeBoundReplayBuffer;.truncateFinal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L25cff4.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.scheduler` @type ^`io.reactivex.x` @kind object;
  #L25cff8.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L25cffc.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L25d002.  v0:= temp @kind wide;
  #L25d004.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$SizeAndTimeBoundReplayBuffer.maxAge` @type ^`long` @kind wide;
  #L25d008.  v0:= v0 - v2 @kind long;
  #L25d00a.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25d010.  v2:= temp @kind object;
  #L25d012.  v2:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v2 @kind object;
  #L25d016.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25d01c.  v3:= temp @kind object;
  #L25d01e.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v3 @kind object;
  #L25d022.  v4:= 0I;
  #L25d024.  v9:= v3 @kind object;
  #L25d026.  v3:= v2 @kind object;
  #L25d028.  v2:= v9 @kind object;
  #L25d02a.  if v2 == 0 then goto L25d06c;
  #L25d02e.  v5:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L25d032.  v6:= 1I;
  #L25d034.  if v5 <= v6 then goto L25d06c;
  #L25d038.  v5:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L25d03c.  v5:= (`io.reactivex.h0.j`) v5 @kind object;
  #L25d040.  call temp:= `a`(v5) @signature `Lio/reactivex/h0/j;.a:()J` @kind virtual;
  #L25d046.  v7:= temp @kind wide;
  #L25d048.  v5:= lcmp(v7, v0);
  #L25d04c.  if v5 > 0 then goto L25d06c;
  #L25d050.  v4:= v4 + 1;
  #L25d054.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L25d058.  v3:= v3 - v6 @kind int;
  #L25d05a.  v10.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int` := v3;
  #L25d05e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25d064.  v3:= temp @kind object;
  #L25d066.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v3 @kind object;
  #L25d06a.  goto L25d024;
  #L25d06c.  if v4 == 0 then goto L25d076;
  #L25d070.  call `setFirst`(v10, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @kind virtual;
  #L25d076.  return @kind void;
}
