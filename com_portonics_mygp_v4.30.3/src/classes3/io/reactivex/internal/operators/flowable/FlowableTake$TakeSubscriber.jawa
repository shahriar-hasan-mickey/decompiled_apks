record `io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.done` @AccessFlag ;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.limit` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.remaining` @AccessFlag ;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.<init>:(Ln/b/c;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25fc28.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L25fc2e.  v0.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25fc32.  v0.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.limit` @type ^`long` := v2 @kind wide;
  #L25fc36.  v0.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L25fc3a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25fc4c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25fc50.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25fc56.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25fc68.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.done` @type ^`boolean` @kind boolean;
  #L25fc6c.  if v0 != 0 then goto L25fc80;
  #L25fc70.  v0:= 1I;
  #L25fc72.  v1.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25fc76.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25fc7a.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25fc80.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25fc94.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.done` @type ^`boolean` @kind boolean;
  #L25fc98.  if v0 != 0 then goto L25fcb8;
  #L25fc9c.  v0:= 1I;
  #L25fc9e.  v1.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25fca2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25fca6.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25fcac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25fcb0.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25fcb6.  goto L25fcbe;
  #L25fcb8.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25fcbe.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L25fcd0.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.done` @type ^`boolean` @kind boolean;
  #L25fcd4.  if v0 != 0 then goto L25fd20;
  #L25fcd8.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.remaining` @type ^`long` @kind wide;
  #L25fcdc.  v2:= 1L;
  #L25fce0.  v2:= v0 - v2 @kind long;
  #L25fce4.  v7.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L25fce8.  v4:= 0L;
  #L25fcec.  v6:= lcmp(v0, v4);
  #L25fcf0.  if v6 <= 0 then goto L25fd20;
  #L25fcf4.  v0:= lcmp(v2, v4);
  #L25fcf8.  if v0 != 0 then goto L25fd00;
  #L25fcfc.  v0:= 1I;
  #L25fcfe.  goto L25fd02;
  #L25fd00.  v0:= 0I;
  #L25fd02.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25fd06.  call `onNext`(v1, v8) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25fd0c.  if v0 == 0 then goto L25fd20;
  #L25fd10.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25fd14.  call `cancel`(v8) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25fd1a.  call `onComplete`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.onComplete:()V` @kind virtual;
  #L25fd20.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber` v5 @kind this, `n.b.d` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25fd34.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25fd38.  call temp:= `validate`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25fd3e.  v0:= temp;
  #L25fd40.  if v0 == 0 then goto L25fd7a;
  #L25fd44.  v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.upstream` @type ^`n.b.d` := v6 @kind object;
  #L25fd48.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.limit` @type ^`long` @kind wide;
  #L25fd4c.  v2:= 0L;
  #L25fd50.  v4:= lcmp(v0, v2);
  #L25fd54.  if v4 != 0 then goto L25fd70;
  #L25fd58.  call `cancel`(v6) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25fd5e.  v6:= 1I;
  #L25fd60.  v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.done` @type ^`boolean` := v6 @kind boolean;
  #L25fd64.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25fd68.  call `complete`(v6) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Ln/b/c;)V` @kind static;
  #L25fd6e.  goto L25fd7a;
  #L25fd70.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25fd74.  call `onSubscribe`(v6, v5) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25fd7a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$TakeSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L25fd8c.  call temp:= `validate`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25fd92.  v0:= temp;
  #L25fd94.  if v0 != 0 then goto L25fd9a;
  #L25fd98.  return @kind void;
  #L25fd9a.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L25fda0.  v0:= temp;
  #L25fda2.  if v0 != 0 then goto L25fdd8;
  #L25fda6.  v0:= 0I;
  #L25fda8.  v1:= 1I;
  #L25fdaa.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L25fdb0.  v0:= temp;
  #L25fdb2.  if v0 == 0 then goto L25fdd8;
  #L25fdb6.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.limit` @type ^`long` @kind wide;
  #L25fdba.  v2:= lcmp(v4, v0);
  #L25fdbe.  if v2 < 0 then goto L25fdd8;
  #L25fdc2.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25fdc6.  v0:= 9223372036854775807L;
  #L25fdd0.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25fdd6.  return @kind void;
  #L25fdd8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTake$TakeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25fddc.  call `request`(v0, v4) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25fde2.  return @kind void;
}
