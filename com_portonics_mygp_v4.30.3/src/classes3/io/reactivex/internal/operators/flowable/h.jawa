record `io.reactivex.internal.operators.flowable.h` @kind class @AccessFlag FINAL extends `io.reactivex.h` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.j` `io.reactivex.internal.operators.flowable.h.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.h.c` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.h.d` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.h.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.h.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.h` v0 @kind this, `io.reactivex.j` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/h;.<init>:(Lio/reactivex/j;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L251f20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L251f26.  v0.`io.reactivex.internal.operators.flowable.h.b` @type ^`io.reactivex.j` := v1 @kind object;
  #L251f2a.  v0.`io.reactivex.internal.operators.flowable.h.c` @type ^`long` := v2 @kind wide;
  #L251f2e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.h` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/h;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L251f40.  v0:= v1.`io.reactivex.internal.operators.flowable.h.d` @type ^`n.b.d` @kind object;
  #L251f44.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L251f4a.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L251f4e.  v1.`io.reactivex.internal.operators.flowable.h.d` @type ^`n.b.d` := v0 @kind object;
  #L251f52.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.h` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/h;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L251efc.  v0:= v2.`io.reactivex.internal.operators.flowable.h.d` @type ^`n.b.d` @kind object;
  #L251f00.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L251f04.  if v0 != v1 then goto L251f0c;
  #L251f08.  v0:= 1I;
  #L251f0a.  goto L251f0e;
  #L251f0c.  v0:= 0I;
  #L251f0e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.h` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/h;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L251f64.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L251f68.  v1.`io.reactivex.internal.operators.flowable.h.d` @type ^`n.b.d` := v0 @kind object;
  #L251f6c.  v0:= v1.`io.reactivex.internal.operators.flowable.h.f` @type ^`boolean` @kind boolean;
  #L251f70.  if v0 != 0 then goto L251f84;
  #L251f74.  v0:= 1I;
  #L251f76.  v1.`io.reactivex.internal.operators.flowable.h.f` @type ^`boolean` := v0 @kind boolean;
  #L251f7a.  v0:= v1.`io.reactivex.internal.operators.flowable.h.b` @type ^`io.reactivex.j` @kind object;
  #L251f7e.  call `onComplete`(v0) @signature `Lio/reactivex/j;.onComplete:()V` @kind interface;
  #L251f84.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.h` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/h;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L251f98.  v0:= v1.`io.reactivex.internal.operators.flowable.h.f` @type ^`boolean` @kind boolean;
  #L251f9c.  if v0 == 0 then goto L251fa8;
  #L251fa0.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L251fa6.  return @kind void;
  #L251fa8.  v0:= 1I;
  #L251faa.  v1.`io.reactivex.internal.operators.flowable.h.f` @type ^`boolean` := v0 @kind boolean;
  #L251fae.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L251fb2.  v1.`io.reactivex.internal.operators.flowable.h.d` @type ^`n.b.d` := v0 @kind object;
  #L251fb6.  v0:= v1.`io.reactivex.internal.operators.flowable.h.b` @type ^`io.reactivex.j` @kind object;
  #L251fba.  call `onError`(v0, v2) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L251fc0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.h` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/h;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L251fd4.  v0:= v5.`io.reactivex.internal.operators.flowable.h.f` @type ^`boolean` @kind boolean;
  #L251fd8.  if v0 == 0 then goto L251fde;
  #L251fdc.  return @kind void;
  #L251fde.  v0:= v5.`io.reactivex.internal.operators.flowable.h.e` @type ^`long` @kind wide;
  #L251fe2.  v2:= v5.`io.reactivex.internal.operators.flowable.h.c` @type ^`long` @kind wide;
  #L251fe6.  v4:= lcmp(v0, v2);
  #L251fea.  if v4 != 0 then goto L252012;
  #L251fee.  v0:= 1I;
  #L251ff0.  v5.`io.reactivex.internal.operators.flowable.h.f` @type ^`boolean` := v0 @kind boolean;
  #L251ff4.  v0:= v5.`io.reactivex.internal.operators.flowable.h.d` @type ^`n.b.d` @kind object;
  #L251ff8.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L251ffe.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L252002.  v5.`io.reactivex.internal.operators.flowable.h.d` @type ^`n.b.d` := v0 @kind object;
  #L252006.  v0:= v5.`io.reactivex.internal.operators.flowable.h.b` @type ^`io.reactivex.j` @kind object;
  #L25200a.  call `onSuccess`(v0, v6) @signature `Lio/reactivex/j;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L252010.  return @kind void;
  #L252012.  v2:= 1L;
  #L252016.  v0:= v0 + v2 @kind long;
  #L252018.  v5.`io.reactivex.internal.operators.flowable.h.e` @type ^`long` := v0 @kind wide;
  #L25201c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.h` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/h;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L252030.  v0:= v2.`io.reactivex.internal.operators.flowable.h.d` @type ^`n.b.d` @kind object;
  #L252034.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25203a.  v0:= temp;
  #L25203c.  if v0 == 0 then goto L25205e;
  #L252040.  v2.`io.reactivex.internal.operators.flowable.h.d` @type ^`n.b.d` := v3 @kind object;
  #L252044.  v0:= v2.`io.reactivex.internal.operators.flowable.h.b` @type ^`io.reactivex.j` @kind object;
  #L252048.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/j;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L25204e.  v0:= 9223372036854775807L;
  #L252058.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25205e.  return @kind void;
}
