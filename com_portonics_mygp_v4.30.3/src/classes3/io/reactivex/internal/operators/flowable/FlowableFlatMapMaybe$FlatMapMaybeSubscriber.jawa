record `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.delayErrors` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.maxConcurrency` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/k;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2539f0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L2539f6.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L2539fa.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L2539fe.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L253a02.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.maxConcurrency` @type ^`int` := v4;
  #L253a06.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L253a0a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L253a10.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L253a14.  v1:= new `io.reactivex.disposables.a`;
  #L253a18.  call `<init>`(v1) @signature `Lio/reactivex/disposables/a;.<init>:()V` @kind direct;
  #L253a1e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @type ^`io.reactivex.disposables.a` := v1 @kind object;
  #L253a22.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L253a26.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L253a2c.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L253a30.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L253a34.  v2:= 1I;
  #L253a36.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L253a3c.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L253a40.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L253a44.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L253a4a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L253a4e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L253a60.  v0:= 1I;
  #L253a62.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L253a66.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L253a6a.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L253a70.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L253a74.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L253a7a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.clear:()V` @AccessFlag  {
    temp;
    v0;

  #L253a8c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L253a90.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L253a96.  v0:= temp @kind object;
  #L253a98.  v0:= (`io.reactivex.internal.queue.a`) v0 @kind object;
  #L253a9c.  if v0 == 0 then goto L253aa6;
  #L253aa0.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L253aa6.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L253ab8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L253abe.  v0:= temp;
  #L253ac0.  if v0 != 0 then goto L253aca;
  #L253ac4.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drainLoop:()V` @kind virtual;
  #L253aca.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v15 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L253adc.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L253ae0.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L253ae4.  v2:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L253ae8.  v3:= 1I;
  #L253aea.  v4:= 1I;
  #L253aec.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L253af0.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L253af6.  v5:= temp @kind wide;
  #L253af8.  v7:= 0L;
  #L253afc.  v9:= v7 @kind wide;
  #L253afe.  v11:= 0I;
  #L253b00.  v12:= lcmp(v9, v5);
  #L253b04.  if v12 == 0 then goto L253bc2;
  #L253b08.  v12:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L253b0c.  if v12 == 0 then goto L253b18;
  #L253b10.  call `clear`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.clear:()V` @kind virtual;
  #L253b16.  return @kind void;
  #L253b18.  v12:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L253b1c.  if v12 != 0 then goto L253b4e;
  #L253b20.  v12:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L253b24.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L253b2a.  v12:= temp @kind object;
  #L253b2c.  v12:= (`java.lang.Throwable`) v12 @kind object;
  #L253b30.  if v12 == 0 then goto L253b4e;
  #L253b34.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L253b38.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L253b3e.  v1:= temp @kind object;
  #L253b40.  call `clear`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.clear:()V` @kind virtual;
  #L253b46.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L253b4c.  return @kind void;
  #L253b4e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L253b54.  v12:= temp;
  #L253b56.  if v12 != 0 then goto L253b5e;
  #L253b5a.  v12:= 1I;
  #L253b5c.  goto L253b60;
  #L253b5e.  v12:= 0I;
  #L253b60.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L253b66.  v13:= temp @kind object;
  #L253b68.  v13:= (`io.reactivex.internal.queue.a`) v13 @kind object;
  #L253b6c.  if v13 == 0 then goto L253b7a;
  #L253b70.  call temp:= `poll`(v13) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L253b76.  v13:= temp @kind object;
  #L253b78.  goto L253b7c;
  #L253b7a.  v13:= 0I;
  #L253b7c.  if v13 != 0 then goto L253b84;
  #L253b80.  v14:= 1I;
  #L253b82.  goto L253b86;
  #L253b84.  v14:= 0I;
  #L253b86.  if v12 == 0 then goto L253bae;
  #L253b8a.  if v14 == 0 then goto L253bae;
  #L253b8e.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L253b92.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L253b98.  v1:= temp @kind object;
  #L253b9a.  if v1 == 0 then goto L253ba6;
  #L253b9e.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L253ba4.  goto L253bac;
  #L253ba6.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L253bac.  return @kind void;
  #L253bae.  if v14 == 0 then goto L253bb4;
  #L253bb2.  goto L253bc2;
  #L253bb4.  call `onNext`(v0, v13) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L253bba.  v11:= 1L;
  #L253bbe.  v9:= v9 + v11 @kind long;
  #L253bc0.  goto L253afe;
  #L253bc2.  v12:= lcmp(v9, v5);
  #L253bc6.  if v12 != 0 then goto L253c68;
  #L253bca.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L253bce.  if v5 == 0 then goto L253bda;
  #L253bd2.  call `clear`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.clear:()V` @kind virtual;
  #L253bd8.  return @kind void;
  #L253bda.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L253bde.  if v5 != 0 then goto L253c10;
  #L253be2.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L253be6.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L253bec.  v5:= temp @kind object;
  #L253bee.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L253bf2.  if v5 == 0 then goto L253c10;
  #L253bf6.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L253bfa.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L253c00.  v1:= temp @kind object;
  #L253c02.  call `clear`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.clear:()V` @kind virtual;
  #L253c08.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L253c0e.  return @kind void;
  #L253c10.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L253c16.  v5:= temp;
  #L253c18.  if v5 != 0 then goto L253c20;
  #L253c1c.  v5:= 1I;
  #L253c1e.  goto L253c22;
  #L253c20.  v5:= 0I;
  #L253c22.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L253c28.  v6:= temp @kind object;
  #L253c2a.  v6:= (`io.reactivex.internal.queue.a`) v6 @kind object;
  #L253c2e.  if v6 == 0 then goto L253c3e;
  #L253c32.  call temp:= `isEmpty`(v6) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L253c38.  v6:= temp;
  #L253c3a.  if v6 == 0 then goto L253c40;
  #L253c3e.  v11:= 1I;
  #L253c40.  if v5 == 0 then goto L253c68;
  #L253c44.  if v11 == 0 then goto L253c68;
  #L253c48.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L253c4c.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L253c52.  v1:= temp @kind object;
  #L253c54.  if v1 == 0 then goto L253c60;
  #L253c58.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L253c5e.  goto L253c66;
  #L253c60.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L253c66.  return @kind void;
  #L253c68.  v5:= lcmp(v9, v7);
  #L253c6c.  if v5 == 0 then goto L253c92;
  #L253c70.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L253c74.  call temp:= `e`(v5, v9) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L253c7a.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.maxConcurrency` @type ^`int`;
  #L253c7e.  v6:= 2147483647I;
  #L253c84.  if v5 == v6 then goto L253c92;
  #L253c88.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L253c8c.  call `request`(v5, v9) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L253c92.  v4:= -v4 @kind int;
  #L253c94.  call temp:= `addAndGet`(v15, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L253c9a.  v4:= temp;
  #L253c9c.  if v4 != 0 then goto L253aec;
  #L253ca0.  return @kind void;
}
procedure `io.reactivex.internal.queue.a` `getOrCreateQueue`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.getOrCreateQueue:()Lio/reactivex/internal/queue/a;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2539a4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2539a8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2539ae.  v0:= temp @kind object;
  #L2539b0.  v0:= (`io.reactivex.internal.queue.a`) v0 @kind object;
  #L2539b4.  if v0 == 0 then goto L2539ba;
  #L2539b8.  return v0 @kind object;
  #L2539ba.  v0:= new `io.reactivex.internal.queue.a`;
  #L2539be.  call temp:= `a`() @signature `Lio/reactivex/e;.a:()I` @kind static;
  #L2539c4.  v1:= temp;
  #L2539c6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L2539cc.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2539d0.  v2:= 0I;
  #L2539d2.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2539d8.  v1:= temp;
  #L2539da.  if v1 == 0 then goto L2539a4;
  #L2539de.  return v0 @kind object;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v5 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.innerComplete:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L253cb4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L253cb8.  call temp:= `c`(v0, v6) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L253cbe.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L253cc4.  v6:= temp;
  #L253cc6.  v0:= 1L;
  #L253cca.  v2:= 2147483647I;
  #L253cd0.  if v6 != 0 then goto L253d6a;
  #L253cd4.  v6:= 0I;
  #L253cd6.  v3:= 1I;
  #L253cd8.  call temp:= `compareAndSet`(v5, v6, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L253cde.  v4:= temp;
  #L253ce0.  if v4 == 0 then goto L253d6a;
  #L253ce4.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L253ce8.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L253cee.  v4:= temp;
  #L253cf0.  if v4 != 0 then goto L253cf6;
  #L253cf4.  v6:= 1I;
  #L253cf6.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L253cfa.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L253d00.  v3:= temp @kind object;
  #L253d02.  v3:= (`io.reactivex.internal.queue.a`) v3 @kind object;
  #L253d06.  if v6 == 0 then goto L253d42;
  #L253d0a.  if v3 == 0 then goto L253d1a;
  #L253d0e.  call temp:= `isEmpty`(v3) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L253d14.  v6:= temp;
  #L253d16.  if v6 == 0 then goto L253d42;
  #L253d1a.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L253d1e.  call temp:= `terminate`(v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L253d24.  v6:= temp @kind object;
  #L253d26.  if v6 == 0 then goto L253d36;
  #L253d2a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L253d2e.  call `onError`(v0, v6) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L253d34.  goto L253d40;
  #L253d36.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L253d3a.  call `onComplete`(v6) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L253d40.  return @kind void;
  #L253d42.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.maxConcurrency` @type ^`int`;
  #L253d46.  if v6 == v2 then goto L253d54;
  #L253d4a.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L253d4e.  call `request`(v6, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L253d54.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L253d5a.  v6:= temp;
  #L253d5c.  if v6 != 0 then goto L253d62;
  #L253d60.  return @kind void;
  #L253d62.  call `drainLoop`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drainLoop:()V` @kind virtual;
  #L253d68.  goto L253d8c;
  #L253d6a.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L253d6e.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L253d74.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.maxConcurrency` @type ^`int`;
  #L253d78.  if v6 == v2 then goto L253d86;
  #L253d7c.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L253d80.  call `request`(v6, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L253d86.  call `drain`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L253d8c.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v2 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.innerError:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L253da0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L253da4.  call temp:= `c`(v0, v3) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L253daa.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L253dae.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L253db4.  v3:= temp;
  #L253db6.  if v3 == 0 then goto L253e06;
  #L253dba.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L253dbe.  if v3 != 0 then goto L253dd8;
  #L253dc2.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L253dc6.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L253dcc.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L253dd0.  call `dispose`(v3) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L253dd6.  goto L253df4;
  #L253dd8.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.maxConcurrency` @type ^`int`;
  #L253ddc.  v4:= 2147483647I;
  #L253de2.  if v3 == v4 then goto L253df4;
  #L253de6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L253dea.  v0:= 1L;
  #L253dee.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L253df4.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L253df8.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L253dfe.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L253e04.  goto L253e0c;
  #L253e06.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L253e0c.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v5 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.innerSuccess:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L253e20.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L253e24.  call temp:= `c`(v0, v6) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L253e2a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L253e30.  v6:= temp;
  #L253e32.  if v6 != 0 then goto L253f14;
  #L253e36.  v6:= 0I;
  #L253e38.  v0:= 1I;
  #L253e3a.  call temp:= `compareAndSet`(v5, v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L253e40.  v1:= temp;
  #L253e42.  if v1 == 0 then goto L253f14;
  #L253e46.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L253e4a.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L253e50.  v1:= temp;
  #L253e52.  if v1 != 0 then goto L253e58;
  #L253e56.  v6:= 1I;
  #L253e58.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L253e5c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L253e62.  v0:= temp @kind wide;
  #L253e64.  v2:= 0L;
  #L253e68.  v4:= lcmp(v0, v2);
  #L253e6c.  if v4 == 0 then goto L253eee;
  #L253e70.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L253e74.  call `onNext`(v0, v7) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L253e7a.  v7:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L253e7e.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L253e84.  v7:= temp @kind object;
  #L253e86.  v7:= (`io.reactivex.internal.queue.a`) v7 @kind object;
  #L253e8a.  if v6 == 0 then goto L253ec6;
  #L253e8e.  if v7 == 0 then goto L253e9e;
  #L253e92.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L253e98.  v6:= temp;
  #L253e9a.  if v6 == 0 then goto L253ec6;
  #L253e9e.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L253ea2.  call temp:= `terminate`(v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L253ea8.  v6:= temp @kind object;
  #L253eaa.  if v6 == 0 then goto L253eba;
  #L253eae.  v7:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L253eb2.  call `onError`(v7, v6) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L253eb8.  goto L253ec4;
  #L253eba.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L253ebe.  call `onComplete`(v6) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L253ec4.  return @kind void;
  #L253ec6.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L253eca.  v0:= 1L;
  #L253ece.  call temp:= `e`(v6, v0) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L253ed4.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.maxConcurrency` @type ^`int`;
  #L253ed8.  v7:= 2147483647I;
  #L253ede.  if v6 == v7 then goto L253f00;
  #L253ee2.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L253ee6.  call `request`(v6, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L253eec.  goto L253f00;
  #L253eee.  call temp:= `getOrCreateQueue`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.getOrCreateQueue:()Lio/reactivex/internal/queue/a;` @kind virtual;
  #L253ef4.  v6:= temp @kind object;
  #L253ef6.  @monitorenter v6
  #L253ef8.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L253efe.  @monitorexit v6
  #L253f00.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L253f06.  v6:= temp;
  #L253f08.  if v6 != 0 then goto L253f3e;
  #L253f0c.  return @kind void;
  #L253f0e.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L253f10.  @monitorexit v6
  #L253f12.  throw v7;
  #L253f14.  call temp:= `getOrCreateQueue`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.getOrCreateQueue:()Lio/reactivex/internal/queue/a;` @kind virtual;
  #L253f1a.  v6:= temp @kind object;
  #L253f1c.  @monitorenter v6
  #L253f1e.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L253f24.  @monitorexit v6
  #L253f26.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L253f2a.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L253f30.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L253f36.  v6:= temp;
  #L253f38.  if v6 == 0 then goto L253f3e;
  #L253f3c.  return @kind void;
  #L253f3e.  call `drainLoop`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drainLoop:()V` @kind virtual;
  #L253f44.  return @kind void;
  #L253f46.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L253f48.  @monitorexit v6
  #L253f4a.  throw v7;
  catch `java.lang.Throwable` @[L253ef8..L253f00] goto L253f0e;
  catch `java.lang.Throwable` @[L253f10..L253f12] goto L253f0e;
  catch `java.lang.Throwable` @[L253f1e..L253f26] goto L253f46;
  catch `java.lang.Throwable` @[L253f48..L253f4a] goto L253f46;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L253f84.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L253f88.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L253f8e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L253f94.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L253fa8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L253fac.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L253fb2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L253fb6.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L253fbc.  v0:= temp;
  #L253fbe.  if v0 == 0 then goto L253fdc;
  #L253fc2.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L253fc6.  if v2 != 0 then goto L253fd4;
  #L253fca.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L253fce.  call `dispose`(v2) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L253fd4.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L253fda.  goto L253fe2;
  #L253fdc.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L253fe2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L253ff4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L253ff8.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L253ffe.  v3:= temp @kind object;
  #L254000.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L254004.  call temp:= `e`(v3, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L25400a.  v3:= temp @kind object;
  #L25400c.  v3:= (`io.reactivex.k`) v3 @kind object;
  #L254010.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L254014.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25401a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver`;
  #L25401e.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber$InnerObserver;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;)V` @kind direct;
  #L254024.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L254028.  if v1 != 0 then goto L254042;
  #L25402c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L254030.  call temp:= `b`(v1, v0) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L254036.  v1:= temp;
  #L254038.  if v1 == 0 then goto L254042;
  #L25403c.  call `b`(v3, v0) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L254042.  return @kind void;
  #L254044.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L254046.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25404c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L254050.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L254056.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L25405c.  return @kind void;
  catch `java.lang.Throwable` @[L253ff4..L254010] goto L254044;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25407c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L254080.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L254086.  v0:= temp;
  #L254088.  if v0 == 0 then goto L2540c2;
  #L25408c.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L254090.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L254094.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25409a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.maxConcurrency` @type ^`int`;
  #L25409e.  v1:= 2147483647I;
  #L2540a4.  if v0 != v1 then goto L2540ba;
  #L2540a8.  v0:= 9223372036854775807L;
  #L2540b2.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2540b8.  goto L2540c2;
  #L2540ba.  v0:= (`long`) v0 @kind i2l;
  #L2540bc.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2540c2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2540d4.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L2540da.  v0:= temp;
  #L2540dc.  if v0 == 0 then goto L2540f0;
  #L2540e0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2540e4.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L2540ea.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.drain:()V` @kind virtual;
  #L2540f0.  return @kind void;
}
