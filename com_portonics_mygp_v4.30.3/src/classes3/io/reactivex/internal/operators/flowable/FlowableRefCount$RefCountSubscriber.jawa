record `io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` `io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.connection` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableRefCount` `io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.parent` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.internal.operators.flowable.FlowableRefCount` v2 @kind object, `io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.<init>:(Ln/b/c;Lio/reactivex/internal/operators/flowable/FlowableRefCount;Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefConnection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25bdac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L25bdb2.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25bdb6.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.connection` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$RefConnection` := v3 @kind object;
  #L25bdba.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25bdcc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25bdd0.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25bdd6.  v0:= 0I;
  #L25bdd8.  v1:= 1I;
  #L25bdda.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L25bde0.  v0:= temp;
  #L25bde2.  if v0 != 0 then goto L25bde8;
  #L25bde6.  return @kind void;
  #L25bde8.  v0:= 0I;
  #L25bdea.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25bdfc.  v0:= 0I;
  #L25bdfe.  v1:= 1I;
  #L25be00.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L25be06.  v0:= temp;
  #L25be08.  if v0 != 0 then goto L25be0e;
  #L25be0c.  return @kind void;
  #L25be0e.  v0:= 0I;
  #L25be10.  throw v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25be24.  v0:= 0I;
  #L25be26.  v1:= 1I;
  #L25be28.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L25be2e.  v0:= temp;
  #L25be30.  if v0 != 0 then goto L25be3c;
  #L25be34.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25be3a.  return @kind void;
  #L25be3c.  v3:= 0I;
  #L25be3e.  throw v3;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25be50.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25be54.  call `onNext`(v0, v2) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25be5a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25be6c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25be70.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25be76.  v0:= temp;
  #L25be78.  if v0 == 0 then goto L25be8a;
  #L25be7c.  v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.upstream` @type ^`n.b.d` := v2 @kind object;
  #L25be80.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25be84.  call `onSubscribe`(v2, v1) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25be8a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$RefCountSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25be9c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$RefCountSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25bea0.  call `request`(v0, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25bea6.  return @kind void;
}
