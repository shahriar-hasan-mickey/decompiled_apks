record `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.buffer` @AccessFlag ;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.bufferSupplier` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.done` @AccessFlag ;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.index` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.size` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.skip` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.<init>:(Ln/b/c;IILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24d464.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L24d46a.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L24d46e.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.size` @type ^`int` := v2;
  #L24d472.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.skip` @type ^`int` := v3;
  #L24d476.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L24d47a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24d48c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24d490.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L24d496.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24d4a8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.done` @type ^`boolean` @kind boolean;
  #L24d4ac.  if v0 == 0 then goto L24d4b2;
  #L24d4b0.  return @kind void;
  #L24d4b2.  v0:= 1I;
  #L24d4b4.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L24d4b8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L24d4bc.  v1:= 0I;
  #L24d4be.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.buffer` @type ^`java.util.Collection` := v1 @kind object;
  #L24d4c2.  if v0 == 0 then goto L24d4d0;
  #L24d4c6.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24d4ca.  call `onNext`(v1, v0) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L24d4d0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24d4d4.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L24d4da.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24d4ec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.done` @type ^`boolean` @kind boolean;
  #L24d4f0.  if v0 == 0 then goto L24d4fc;
  #L24d4f4.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24d4fa.  return @kind void;
  #L24d4fc.  v0:= 1I;
  #L24d4fe.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L24d502.  v0:= 0I;
  #L24d504.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L24d508.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24d50c.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24d512.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24d524.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.done` @type ^`boolean` @kind boolean;
  #L24d528.  if v0 == 0 then goto L24d52e;
  #L24d52c.  return @kind void;
  #L24d52e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.buffer` @type ^`java.util.Collection` @kind object;
  #L24d532.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.index` @type ^`int`;
  #L24d536.  v2:= v1 + 1;
  #L24d53a.  if v1 != 0 then goto L24d576;
  #L24d53e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L24d542.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L24d548.  v0:= temp @kind object;
  #L24d54a.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L24d54e.  call temp:= `e`(v0, v1) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L24d554.  v0:= temp @kind object;
  #L24d556.  v0:= (`java.util.Collection`) v0 @kind object;
  #L24d55a.  v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.buffer` @type ^`java.util.Collection` := v0 @kind object;
  #L24d55e.  goto L24d576;
  #L24d560.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24d562.  call `b`(v4) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24d568.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.cancel:()V` @kind virtual;
  #L24d56e.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L24d574.  return @kind void;
  #L24d576.  if v0 == 0 then goto L24d5a0;
  #L24d57a.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24d580.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L24d586.  v4:= temp;
  #L24d588.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.size` @type ^`int`;
  #L24d58c.  if v4 != v1 then goto L24d5a0;
  #L24d590.  v4:= 0I;
  #L24d592.  v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.buffer` @type ^`java.util.Collection` := v4 @kind object;
  #L24d596.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24d59a.  call `onNext`(v4, v0) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L24d5a0.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.skip` @type ^`int`;
  #L24d5a4.  if v2 != v4 then goto L24d5aa;
  #L24d5a8.  v2:= 0I;
  #L24d5aa.  v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.index` @type ^`int` := v2;
  #L24d5ae.  return @kind void;
  catch `java.lang.Throwable` @[L24d53e..L24d55a] goto L24d560;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24d5cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24d5d0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L24d5d6.  v0:= temp;
  #L24d5d8.  if v0 == 0 then goto L24d5ea;
  #L24d5dc.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.upstream` @type ^`n.b.d` := v2 @kind object;
  #L24d5e0.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24d5e4.  call `onSubscribe`(v2, v1) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L24d5ea.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferSkipSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24d5fc.  call temp:= `validate`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L24d602.  v0:= temp;
  #L24d604.  if v0 == 0 then goto L24d678;
  #L24d608.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L24d60e.  v0:= temp;
  #L24d610.  if v0 != 0 then goto L24d660;
  #L24d614.  v0:= 0I;
  #L24d616.  v1:= 1I;
  #L24d618.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L24d61e.  v0:= temp;
  #L24d620.  if v0 == 0 then goto L24d660;
  #L24d624.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.size` @type ^`int`;
  #L24d628.  v0:= (`long`) v0 @kind i2l;
  #L24d62a.  call temp:= `d`(v7, v0) @signature `Lio/reactivex/internal/util/b;.d:(JJ)J` @kind static;
  #L24d630.  v0:= temp @kind wide;
  #L24d632.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.skip` @type ^`int`;
  #L24d636.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.size` @type ^`int`;
  #L24d63a.  v2:= v2 - v3 @kind int;
  #L24d63c.  v2:= (`long`) v2 @kind i2l;
  #L24d63e.  v4:= 1L;
  #L24d642.  v7:= v7 - v4 @kind long;
  #L24d644.  call temp:= `d`(v2, v7) @signature `Lio/reactivex/internal/util/b;.d:(JJ)J` @kind static;
  #L24d64a.  v7:= temp @kind wide;
  #L24d64c.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24d650.  call temp:= `c`(v0, v7) @signature `Lio/reactivex/internal/util/b;.c:(JJ)J` @kind static;
  #L24d656.  v7:= temp @kind wide;
  #L24d658.  call `request`(v2, v7) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24d65e.  goto L24d678;
  #L24d660.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24d664.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber.skip` @type ^`int`;
  #L24d668.  v1:= (`long`) v1 @kind i2l;
  #L24d66a.  call temp:= `d`(v1, v7) @signature `Lio/reactivex/internal/util/b;.d:(JJ)J` @kind static;
  #L24d670.  v7:= temp @kind wide;
  #L24d672.  call `request`(v0, v7) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24d678.  return @kind void;
}
