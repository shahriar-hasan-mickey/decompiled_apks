record `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.e0.a.a` @kind interface, `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.error` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.gate` @AccessFlag VOLATILE;
  `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.other` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.requested` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v0 @kind this, `n.b.c` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.<init>:(Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25f170.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L25f176.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25f17a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L25f17e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25f184.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L25f188.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L25f18c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25f192.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L25f196.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber`;
  #L25f19a.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;)V` @kind direct;
  #L25f1a0.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber` := v1 @kind object;
  #L25f1a4.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L25f1a8.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L25f1ae.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L25f1b2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25f1c4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25f1c8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25f1ce.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber` @kind object;
  #L25f1d2.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25f1d8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25f1ec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber` @kind object;
  #L25f1f0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25f1f6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25f1fa.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25f1fe.  call `b`(v0, v2, v1) @signature `Lio/reactivex/internal/util/g;.b:(Ln/b/c;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L25f204.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25f218.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber` @kind object;
  #L25f21c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25f222.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25f226.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25f22a.  call `d`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.d:(Ln/b/c;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L25f230.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25f244.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L25f24a.  v3:= temp;
  #L25f24c.  if v3 != 0 then goto L25f26a;
  #L25f250.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25f254.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25f25a.  v3:= temp @kind object;
  #L25f25c.  v3:= (`n.b.d`) v3 @kind object;
  #L25f260.  v0:= 1L;
  #L25f264.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25f26a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25f27c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25f280.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25f284.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Ln/b/d;)Z` @kind static;
  #L25f28a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25f29c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25f2a0.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25f2a4.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L25f2aa.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25f140.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.gate` @type ^`boolean` @kind boolean;
  #L25f144.  if v0 == 0 then goto L25f15a;
  #L25f148.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25f14c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25f150.  call `f`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.f:(Ln/b/c;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L25f156.  v3:= 1I;
  #L25f158.  return v3;
  #L25f15a.  v3:= 0I;
  #L25f15c.  return v3;
}
