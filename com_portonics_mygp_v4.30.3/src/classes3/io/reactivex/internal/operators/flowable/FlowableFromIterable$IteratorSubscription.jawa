record `io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` @kind class {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription` v0 @kind this, `n.b.c` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorSubscription;.<init>:(Ln/b/c;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25572c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L255732.  v0.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.downstream` @type ^`n.b.c` := v1 @kind object;
  #L255736.  return @kind void;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorSubscription;.fastPath:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L255748.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.it` @type ^`java.util.Iterator` @kind object;
  #L25574c.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.downstream` @type ^`n.b.c` @kind object;
  #L255750.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L255754.  if v2 == 0 then goto L25575a;
  #L255758.  return @kind void;
  #L25575a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L255760.  v2:= temp @kind object;
  #L255762.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L255766.  if v3 == 0 then goto L25576c;
  #L25576a.  return @kind void;
  #L25576c.  if v2 != 0 then goto L255786;
  #L255770.  v0:= new `java.lang.NullPointerException`;
  #L255774.  v2:= "Iterator.next() returned a null value" @kind object;
  #L255778.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25577e.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L255784.  return @kind void;
  #L255786.  call `onNext`(v1, v2) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25578c.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L255790.  if v2 == 0 then goto L255796;
  #L255794.  return @kind void;
  #L255796.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L25579c.  v2:= temp;
  #L25579e.  if v2 != 0 then goto L255750;
  #L2557a2.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L2557a6.  if v0 != 0 then goto L2557b0;
  #L2557aa.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2557b0.  return @kind void;
  #L2557b2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2557b4.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2557ba.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2557c0.  return @kind void;
  #L2557c2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2557c4.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2557ca.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2557d0.  return @kind void;
  catch `java.lang.Throwable` @[L25575a..L255762] goto L2557c2;
  catch `java.lang.Throwable` @[L255796..L25579e] goto L2557b2;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription` v8 @kind this, `long` v9 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorSubscription;.slowPath:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2557fc.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.it` @type ^`java.util.Iterator` @kind object;
  #L255800.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription.downstream` @type ^`n.b.c` @kind object;
  #L255804.  v2:= 0L;
  #L255808.  v4:= v2 @kind wide;
  #L25580a.  v6:= lcmp(v4, v9);
  #L25580e.  if v6 == 0 then goto L25589c;
  #L255812.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L255816.  if v6 == 0 then goto L25581c;
  #L25581a.  return @kind void;
  #L25581c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L255822.  v6:= temp @kind object;
  #L255824.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L255828.  if v7 == 0 then goto L25582e;
  #L25582c.  return @kind void;
  #L25582e.  if v6 != 0 then goto L255848;
  #L255832.  v9:= new `java.lang.NullPointerException`;
  #L255836.  v10:= "Iterator.next() returned a null value" @kind object;
  #L25583a.  call `<init>`(v9, v10) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L255840.  call `onError`(v1, v9) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L255846.  return @kind void;
  #L255848.  call `onNext`(v1, v6) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25584e.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L255852.  if v6 == 0 then goto L255858;
  #L255856.  return @kind void;
  #L255858.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L25585e.  v6:= temp;
  #L255860.  if v6 != 0 then goto L255874;
  #L255864.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L255868.  if v9 != 0 then goto L255872;
  #L25586c.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L255872.  return @kind void;
  #L255874.  v6:= 1L;
  #L255878.  v4:= v4 + v6 @kind long;
  #L25587a.  goto L25580a;
  #L25587c.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25587e.  call `b`(v9) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L255884.  call `onError`(v1, v9) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25588a.  return @kind void;
  #L25588c.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25588e.  call `b`(v9) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L255894.  call `onError`(v1, v9) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25589a.  return @kind void;
  #L25589c.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2558a2.  v9:= temp @kind wide;
  #L2558a4.  v6:= lcmp(v4, v9);
  #L2558a8.  if v6 != 0 then goto L25580a;
  #L2558ac.  v9:= -v4 @kind long;
  #L2558ae.  call temp:= `addAndGet`(v8, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L2558b4.  v9:= temp @kind wide;
  #L2558b6.  v4:= lcmp(v9, v2);
  #L2558ba.  if v4 != 0 then goto L255808;
  #L2558be.  return @kind void;
  catch `java.lang.Throwable` @[L25581c..L255824] goto L25588c;
  catch `java.lang.Throwable` @[L255858..L255860] goto L25587c;
}
