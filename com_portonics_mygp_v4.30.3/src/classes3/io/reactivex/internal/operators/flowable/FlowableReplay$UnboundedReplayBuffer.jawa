record `io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer` @kind class @AccessFlag FINAL extends `java.util.ArrayList` @kind class, `io.reactivex.internal.operators.flowable.y` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.size` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$UnboundedReplayBuffer;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25d0c8.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L25d0ce.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$UnboundedReplayBuffer;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25d0e0.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L25d0e6.  v0:= temp @kind object;
  #L25d0e8.  call temp:= `add`(v1, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L25d0ee.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.size` @type ^`int`;
  #L25d0f2.  v0:= v0 + 1;
  #L25d0f6.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.size` @type ^`int` := v0;
  #L25d0fa.  return @kind void;
}
procedure `void` `error`(`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$UnboundedReplayBuffer;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L25d10c.  call temp:= `error`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L25d112.  v1:= temp @kind object;
  #L25d114.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L25d11a.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.size` @type ^`int`;
  #L25d11e.  v1:= v1 + 1;
  #L25d122.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.size` @type ^`int` := v1;
  #L25d126.  return @kind void;
}
procedure `void` `next`(`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$UnboundedReplayBuffer;.next:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L25d138.  call temp:= `next`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L25d13e.  v1:= temp @kind object;
  #L25d140.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L25d146.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.size` @type ^`int`;
  #L25d14a.  v1:= v1 + 1;
  #L25d14e.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.size` @type ^`int` := v1;
  #L25d152.  return @kind void;
}
procedure `void` `replay`(`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer` v14 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v15 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$UnboundedReplayBuffer;.replay:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L25d164.  @monitorenter v15
  #L25d166.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.emitting` @type ^`boolean` @kind boolean;
  #L25d16a.  v1:= 1I;
  #L25d16c.  if v0 == 0 then goto L25d178;
  #L25d170.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.missed` @type ^`boolean` := v1 @kind boolean;
  #L25d174.  @monitorexit v15
  #L25d176.  return @kind void;
  #L25d178.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.emitting` @type ^`boolean` := v1 @kind boolean;
  #L25d17c.  @monitorexit v15
  #L25d17e.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.child` @type ^`n.b.c` @kind object;
  #L25d182.  call temp:= `isDisposed`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.isDisposed:()Z` @kind virtual;
  #L25d188.  v1:= temp;
  #L25d18a.  if v1 == 0 then goto L25d190;
  #L25d18e.  return @kind void;
  #L25d190.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableReplay$UnboundedReplayBuffer.size` @type ^`int`;
  #L25d194.  call temp:= `index`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.index:()Ljava/lang/Object;` @kind virtual;
  #L25d19a.  v2:= temp @kind object;
  #L25d19c.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L25d1a0.  v3:= 0I;
  #L25d1a2.  if v2 == 0 then goto L25d1b0;
  #L25d1a6.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L25d1ac.  v2:= temp;
  #L25d1ae.  goto L25d1b2;
  #L25d1b0.  v2:= 0I;
  #L25d1b2.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25d1b8.  v4:= temp @kind wide;
  #L25d1ba.  v6:= 0L;
  #L25d1be.  v8:= v4 @kind wide;
  #L25d1c0.  v10:= v6 @kind wide;
  #L25d1c2.  v12:= lcmp(v8, v6);
  #L25d1c6.  if v12 == 0 then goto L25d22e;
  #L25d1ca.  if v2 >= v1 then goto L25d22e;
  #L25d1ce.  call temp:= `get`(v14, v2) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L25d1d4.  v12:= temp @kind object;
  #L25d1d6.  call temp:= `accept`(v12, v0) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Ln/b/c;)Z` @kind static;
  #L25d1dc.  v12:= temp;
  #L25d1de.  if v12 == 0 then goto L25d1e4;
  #L25d1e2.  return @kind void;
  #L25d1e4.  call temp:= `isDisposed`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.isDisposed:()Z` @kind virtual;
  #L25d1ea.  v12:= temp;
  #L25d1ec.  if v12 == 0 then goto L25d1f2;
  #L25d1f0.  return @kind void;
  #L25d1f2.  v2:= v2 + 1;
  #L25d1f6.  v12:= 1L;
  #L25d1fa.  v8:= v8 - v12 @kind long;
  #L25d1fc.  v10:= v10 + v12 @kind long;
  #L25d1fe.  goto L25d1c2;
  #L25d200.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25d202.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25d208.  call `dispose`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.dispose:()V` @kind virtual;
  #L25d20e.  call temp:= `isError`(v12) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L25d214.  v15:= temp;
  #L25d216.  if v15 != 0 then goto L25d22c;
  #L25d21a.  call temp:= `isComplete`(v12) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L25d220.  v15:= temp;
  #L25d222.  if v15 != 0 then goto L25d22c;
  #L25d226.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25d22c.  return @kind void;
  #L25d22e.  v1:= lcmp(v10, v6);
  #L25d232.  if v1 == 0 then goto L25d25a;
  #L25d236.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L25d23c.  v1:= temp @kind object;
  #L25d23e.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @type ^`java.lang.Object` := v1 @kind object;
  #L25d242.  v1:= 9223372036854775807L;
  #L25d24c.  v6:= lcmp(v4, v1);
  #L25d250.  if v6 == 0 then goto L25d25a;
  #L25d254.  call temp:= `produced`(v15, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.produced:(J)J` @kind virtual;
  #L25d25a.  @monitorenter v15
  #L25d25c.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.missed` @type ^`boolean` @kind boolean;
  #L25d260.  if v1 != 0 then goto L25d26c;
  #L25d264.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.emitting` @type ^`boolean` := v3 @kind boolean;
  #L25d268.  @monitorexit v15
  #L25d26a.  return @kind void;
  #L25d26c.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.missed` @type ^`boolean` := v3 @kind boolean;
  #L25d270.  @monitorexit v15
  #L25d272.  goto L25d182;
  #L25d274.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25d276.  @monitorexit v15
  #L25d278.  throw v0;
  #L25d27a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25d27c.  @monitorexit v15
  #L25d27e.  goto L25d282;
  #L25d280.  throw v0;
  #L25d282.  goto L25d280;
  catch `java.lang.Throwable` @[L25d166..L25d17e] goto L25d27a;
  catch `java.lang.Throwable` @[L25d1d6..L25d1de] goto L25d200;
  catch `java.lang.Throwable` @[L25d25c..L25d278] goto L25d274;
  catch `java.lang.Throwable` @[L25d27c..L25d27e] goto L25d27a;
}
