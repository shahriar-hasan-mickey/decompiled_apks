record `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.b` @kind interface, `io.reactivex.internal.operators.flowable.c0` @kind interface {
  `io.reactivex.d0.d` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.comparer` @AccessFlag FINAL;
  `io.reactivex.z` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.v1` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.v2` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator` v0 @kind this, `io.reactivex.z` v1 @kind object, `int` v2 , `io.reactivex.d0.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.<init>:(Lio/reactivex/z;ILio/reactivex/d0/d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25e778.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L25e77e.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` := v1 @kind object;
  #L25e782.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.comparer` @type ^`io.reactivex.d0.d` := v3 @kind object;
  #L25e786.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber`;
  #L25e78a.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/c0;I)V` @kind direct;
  #L25e790.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` := v1 @kind object;
  #L25e794.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber`;
  #L25e798.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/c0;I)V` @kind direct;
  #L25e79e.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` := v1 @kind object;
  #L25e7a2.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L25e7a6.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L25e7ac.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L25e7b0.  return @kind void;
}
procedure `void` `cancelAndClear`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.cancelAndClear:()V` @AccessFlag  {
    temp;
    v0;

  #L25e7c4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e7c8.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.cancel:()V` @kind virtual;
  #L25e7ce.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e7d2.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L25e7d8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e7dc.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.cancel:()V` @kind virtual;
  #L25e7e2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e7e6.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L25e7ec.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25e800.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e804.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.cancel:()V` @kind virtual;
  #L25e80a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e80e.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.cancel:()V` @kind virtual;
  #L25e814.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25e81a.  v0:= temp;
  #L25e81c.  if v0 != 0 then goto L25e834;
  #L25e820.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e824.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L25e82a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e82e.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L25e834.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L25e848.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25e84e.  v0:= temp;
  #L25e850.  if v0 == 0 then goto L25e856;
  #L25e854.  return @kind void;
  #L25e856.  v0:= 1I;
  #L25e858.  v1:= 1I;
  #L25e85a.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e85e.  v2:= v2.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L25e862.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e866.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L25e86a.  if v2 == 0 then goto L25ea38;
  #L25e86e.  if v3 == 0 then goto L25ea38;
  #L25e872.  call temp:= `isDisposed`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.isDisposed:()Z` @kind virtual;
  #L25e878.  v4:= temp;
  #L25e87a.  if v4 == 0 then goto L25e894;
  #L25e87e.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e882.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L25e888.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e88c.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L25e892.  return @kind void;
  #L25e894.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25e898.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25e89e.  v4:= temp @kind object;
  #L25e8a0.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L25e8a4.  if v4 == 0 then goto L25e8c6;
  #L25e8a8.  call `cancelAndClear`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L25e8ae.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L25e8b2.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25e8b6.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L25e8bc.  v1:= temp @kind object;
  #L25e8be.  call `onError`(v0, v1) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25e8c4.  return @kind void;
  #L25e8c6.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e8ca.  v4:= v4.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.done` @type ^`boolean` @kind boolean;
  #L25e8ce.  v5:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.v1` @type ^`java.lang.Object` @kind object;
  #L25e8d2.  if v5 != 0 then goto L25e914;
  #L25e8d6.  call temp:= `poll`(v2) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L25e8dc.  v5:= temp @kind object;
  #L25e8de.  v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.v1` @type ^`java.lang.Object` := v5 @kind object;
  #L25e8e2.  goto L25e914;
  #L25e8e4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25e8e6.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25e8ec.  call `cancelAndClear`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L25e8f2.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25e8f6.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L25e8fc.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L25e900.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25e904.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L25e90a.  v1:= temp @kind object;
  #L25e90c.  call `onError`(v0, v1) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25e912.  return @kind void;
  #L25e914.  v6:= 0I;
  #L25e916.  if v5 != 0 then goto L25e91e;
  #L25e91a.  v7:= 1I;
  #L25e91c.  goto L25e920;
  #L25e91e.  v7:= 0I;
  #L25e920.  v8:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e924.  v8:= v8.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.done` @type ^`boolean` @kind boolean;
  #L25e928.  v9:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.v2` @type ^`java.lang.Object` @kind object;
  #L25e92c.  if v9 != 0 then goto L25e96e;
  #L25e930.  call temp:= `poll`(v3) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L25e936.  v9:= temp @kind object;
  #L25e938.  v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.v2` @type ^`java.lang.Object` := v9 @kind object;
  #L25e93c.  goto L25e96e;
  #L25e93e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25e940.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25e946.  call `cancelAndClear`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L25e94c.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25e950.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L25e956.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L25e95a.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25e95e.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L25e964.  v1:= temp @kind object;
  #L25e966.  call `onError`(v0, v1) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25e96c.  return @kind void;
  #L25e96e.  if v9 != 0 then goto L25e974;
  #L25e972.  v6:= 1I;
  #L25e974.  if v4 == 0 then goto L25e994;
  #L25e978.  if v8 == 0 then goto L25e994;
  #L25e97c.  if v7 == 0 then goto L25e994;
  #L25e980.  if v6 == 0 then goto L25e994;
  #L25e984.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L25e988.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L25e98c.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L25e992.  return @kind void;
  #L25e994.  if v4 == 0 then goto L25e9b6;
  #L25e998.  if v8 == 0 then goto L25e9b6;
  #L25e99c.  if v7 == v6 then goto L25e9b6;
  #L25e9a0.  call `cancelAndClear`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L25e9a6.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L25e9aa.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L25e9ae.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L25e9b4.  return @kind void;
  #L25e9b6.  if v7 != 0 then goto L25ea8c;
  #L25e9ba.  if v6 == 0 then goto L25e9c0;
  #L25e9be.  goto L25ea8c;
  #L25e9c0.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.comparer` @type ^`io.reactivex.d0.d` @kind object;
  #L25e9c4.  call temp:= `a`(v4, v5, v9) @signature `Lio/reactivex/d0/d;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L25e9ca.  v4:= temp;
  #L25e9cc.  if v4 != 0 then goto L25e9e6;
  #L25e9d0.  call `cancelAndClear`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L25e9d6.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L25e9da.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L25e9de.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L25e9e4.  return @kind void;
  #L25e9e6.  v4:= 0I;
  #L25e9e8.  v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.v1` @type ^`java.lang.Object` := v4 @kind object;
  #L25e9ec.  v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.v2` @type ^`java.lang.Object` := v4 @kind object;
  #L25e9f0.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e9f4.  call `request`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.request:()V` @kind virtual;
  #L25e9fa.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e9fe.  call `request`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.request:()V` @kind virtual;
  #L25ea04.  goto L25e872;
  #L25ea08.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25ea0a.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25ea10.  call `cancelAndClear`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L25ea16.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25ea1a.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L25ea20.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L25ea24.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25ea28.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L25ea2e.  v1:= temp @kind object;
  #L25ea30.  call `onError`(v0, v1) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25ea36.  return @kind void;
  #L25ea38.  call temp:= `isDisposed`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.isDisposed:()Z` @kind virtual;
  #L25ea3e.  v2:= temp;
  #L25ea40.  if v2 == 0 then goto L25ea5a;
  #L25ea44.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25ea48.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L25ea4e.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25ea52.  call `clear`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @kind virtual;
  #L25ea58.  return @kind void;
  #L25ea5a.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25ea5e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25ea64.  v2:= temp @kind object;
  #L25ea66.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L25ea6a.  if v2 == 0 then goto L25ea8c;
  #L25ea6e.  call `cancelAndClear`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.cancelAndClear:()V` @kind virtual;
  #L25ea74.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L25ea78.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25ea7c.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L25ea82.  v1:= temp @kind object;
  #L25ea84.  call `onError`(v0, v1) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25ea8a.  return @kind void;
  #L25ea8c.  v1:= -v1 @kind int;
  #L25ea8e.  call temp:= `addAndGet`(v10, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L25ea94.  v1:= temp;
  #L25ea96.  if v1 != 0 then goto L25e85a;
  #L25ea9a.  return @kind void;
  catch `java.lang.Throwable` @[L25e8d6..L25e8de] goto L25e8e4;
  catch `java.lang.Throwable` @[L25e930..L25e938] goto L25e93e;
  catch `java.lang.Throwable` @[L25e9c0..L25e9cc] goto L25ea08;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25eacc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25ead0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L25ead6.  v0:= temp;
  #L25ead8.  if v0 == 0 then goto L25eae4;
  #L25eadc.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.drain:()V` @kind virtual;
  #L25eae2.  goto L25eaea;
  #L25eae4.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25eaea.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25e74c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25e750.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25e756.  v0:= temp @kind object;
  #L25e758.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L25e75c.  if v0 != v1 then goto L25e764;
  #L25e760.  v0:= 1I;
  #L25e762.  goto L25e766;
  #L25e764.  v0:= 0I;
  #L25e766.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator` v1 @kind this, `n.b.b` v2 @kind object, `n.b.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$EqualCoordinator;.subscribe:(Ln/b/b;Ln/b/b;)V` @AccessFlag  {
    temp;
    v0;

  #L25eafc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.first` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25eb00.  call `subscribe`(v2, v0) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L25eb06.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator.second` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind object;
  #L25eb0a.  call `subscribe`(v3, v2) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L25eb10.  return @kind void;
}
