record `io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription` @kind class {
  `io.reactivex.e0.a.a` `io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription` v0 @kind this, `io.reactivex.e0.a.a` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$RangeConditionalSubscription;.<init>:(Lio/reactivex/e0/a/a;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25b68c.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.<init>:(II)V` @kind direct;
  #L25b692.  v0.`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.downstream` @type ^`io.reactivex.e0.a.a` := v1 @kind object;
  #L25b696.  return @kind void;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$RangeConditionalSubscription;.fastPath:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25b6a8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.end` @type ^`int`;
  #L25b6ac.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L25b6b0.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.index` @type ^`int`;
  #L25b6b4.  if v2 == v0 then goto L25b6d6;
  #L25b6b8.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25b6bc.  if v3 == 0 then goto L25b6c2;
  #L25b6c0.  return @kind void;
  #L25b6c2.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L25b6c8.  v3:= temp @kind object;
  #L25b6ca.  call temp:= `tryOnNext`(v1, v3) @signature `Lio/reactivex/e0/a/a;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L25b6d0.  v2:= v2 + 1;
  #L25b6d4.  goto L25b6b4;
  #L25b6d6.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25b6da.  if v0 == 0 then goto L25b6e0;
  #L25b6de.  return @kind void;
  #L25b6e0.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25b6e6.  return @kind void;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$RangeConditionalSubscription;.slowPath:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L25b6f8.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.end` @type ^`int`;
  #L25b6fc.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.index` @type ^`int`;
  #L25b700.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L25b704.  v3:= 0L;
  #L25b708.  v5:= v3 @kind wide;
  #L25b70a.  v7:= lcmp(v5, v10);
  #L25b70e.  if v7 == 0 then goto L25b740;
  #L25b712.  if v1 == v0 then goto L25b740;
  #L25b716.  v7:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25b71a.  if v7 == 0 then goto L25b720;
  #L25b71e.  return @kind void;
  #L25b720.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L25b726.  v7:= temp @kind object;
  #L25b728.  call temp:= `tryOnNext`(v2, v7) @signature `Lio/reactivex/e0/a/a;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L25b72e.  v7:= temp;
  #L25b730.  if v7 == 0 then goto L25b73a;
  #L25b734.  v7:= 1L;
  #L25b738.  v5:= v5 + v7 @kind long;
  #L25b73a.  v1:= v1 + 1;
  #L25b73e.  goto L25b70a;
  #L25b740.  if v1 != v0 then goto L25b754;
  #L25b744.  v10:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25b748.  if v10 != 0 then goto L25b752;
  #L25b74c.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25b752.  return @kind void;
  #L25b754.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25b75a.  v10:= temp @kind wide;
  #L25b75c.  v7:= lcmp(v5, v10);
  #L25b760.  if v7 != 0 then goto L25b70a;
  #L25b764.  v9.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.index` @type ^`int` := v1;
  #L25b768.  v10:= -v5 @kind long;
  #L25b76a.  call temp:= `addAndGet`(v9, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L25b770.  v10:= temp @kind wide;
  #L25b772.  v5:= lcmp(v10, v3);
  #L25b776.  if v5 != 0 then goto L25b708;
  #L25b77a.  return @kind void;
}
