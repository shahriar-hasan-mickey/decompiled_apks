record `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface, `java.lang.Runnable` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.nonScheduledRequests` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.requested` @AccessFlag FINAL;
  `n.b.b` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.source` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.upstream` @AccessFlag FINAL;
  `io.reactivex.x$a` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.x$a` v2 @kind object, `n.b.b` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.<init>:(Ln/b/c;Lio/reactivex/x$a;Ln/b/b;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25f2fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25f302.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25f306.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.worker` @type ^`io.reactivex.x$a` := v2 @kind object;
  #L25f30a.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.source` @type ^`n.b.b` := v3 @kind object;
  #L25f30e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L25f312.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25f318.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L25f31c.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L25f320.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25f326.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L25f32a.  v1:= v4 ^~ 1;
  #L25f32e.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.nonScheduledRequests` @type ^`boolean` := v1 @kind boolean;
  #L25f332.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25f344.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25f348.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25f34e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L25f352.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L25f358.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25f36c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25f370.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25f376.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L25f37a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L25f380.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25f394.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25f398.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25f39e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L25f3a2.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L25f3a8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25f3bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25f3c0.  call `onNext`(v0, v2) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25f3c6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v5 @kind this, `n.b.d` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25f3d8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25f3dc.  call temp:= `setOnce`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L25f3e2.  v0:= temp;
  #L25f3e4.  if v0 == 0 then goto L25f406;
  #L25f3e8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25f3ec.  v1:= 0L;
  #L25f3f0.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L25f3f6.  v3:= temp @kind wide;
  #L25f3f8.  v0:= lcmp(v3, v1);
  #L25f3fc.  if v0 == 0 then goto L25f406;
  #L25f400.  call `requestUpstream`(v5, v3, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.requestUpstream:(JLn/b/d;)V` @kind virtual;
  #L25f406.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25f418.  call temp:= `validate`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25f41e.  v0:= temp;
  #L25f420.  if v0 == 0 then goto L25f47c;
  #L25f424.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25f428.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25f42e.  v0:= temp @kind object;
  #L25f430.  v0:= (`n.b.d`) v0 @kind object;
  #L25f434.  if v0 == 0 then goto L25f440;
  #L25f438.  call `requestUpstream`(v4, v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.requestUpstream:(JLn/b/d;)V` @kind virtual;
  #L25f43e.  goto L25f47c;
  #L25f440.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25f444.  call temp:= `a`(v0, v5) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25f44a.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25f44e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25f454.  v5:= temp @kind object;
  #L25f456.  v5:= (`n.b.d`) v5 @kind object;
  #L25f45a.  if v5 == 0 then goto L25f47c;
  #L25f45e.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25f462.  v0:= 0L;
  #L25f466.  call temp:= `getAndSet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L25f46c.  v2:= temp @kind wide;
  #L25f46e.  v6:= lcmp(v2, v0);
  #L25f472.  if v6 == 0 then goto L25f47c;
  #L25f476.  call `requestUpstream`(v4, v2, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.requestUpstream:(JLn/b/d;)V` @kind virtual;
  #L25f47c.  return @kind void;
}
procedure `void` `requestUpstream`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v2 @kind this, `long` v3 , `n.b.d` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.requestUpstream:(JLn/b/d;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L25f490.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.nonScheduledRequests` @type ^`boolean` @kind boolean;
  #L25f494.  if v0 != 0 then goto L25f4c4;
  #L25f498.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L25f49e.  v0:= temp @kind object;
  #L25f4a0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25f4a6.  v1:= temp @kind object;
  #L25f4a8.  if v0 != v1 then goto L25f4ae;
  #L25f4ac.  goto L25f4c4;
  #L25f4ae.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L25f4b2.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber$a`;
  #L25f4b6.  call `<init>`(v1, v5, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber$a;.<init>:(Ln/b/d;J)V` @kind direct;
  #L25f4bc.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/x$a;.b:(Ljava/lang/Runnable;)Lio/reactivex/disposables/b;` @kind virtual;
  #L25f4c2.  goto L25f4ca;
  #L25f4c4.  call `request`(v5, v3) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25f4ca.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25f4dc.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L25f4e2.  v0:= temp @kind object;
  #L25f4e4.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L25f4ea.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.source` @type ^`n.b.b` @kind object;
  #L25f4ee.  v1:= 0I;
  #L25f4f0.  v2.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.source` @type ^`n.b.b` := v1 @kind object;
  #L25f4f4.  call `subscribe`(v0, v2) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L25f4fa.  return @kind void;
}
