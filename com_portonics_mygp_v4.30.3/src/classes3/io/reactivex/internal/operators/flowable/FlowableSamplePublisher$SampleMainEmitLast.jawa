record `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.done` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast` v0 @kind this, `n.b.c` v1 @kind object, `n.b.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SampleMainEmitLast;.<init>:(Ln/b/c;Ln/b/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25d634.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.<init>:(Ln/b/c;Ln/b/b;)V` @kind direct;
  #L25d63a.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L25d63e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L25d644.  v0.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L25d648.  return @kind void;
}
procedure `void` `completeMain`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SampleMainEmitLast;.completeMain:()V` @AccessFlag  {
    temp;
    v0;

  #L25d65c.  v0:= 1I;
  #L25d65e.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.done` @type ^`boolean` := v0 @kind boolean;
  #L25d662.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L25d666.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25d66c.  v0:= temp;
  #L25d66e.  if v0 != 0 then goto L25d682;
  #L25d672.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.emit:()V` @kind virtual;
  #L25d678.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d67c.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25d682.  return @kind void;
}
procedure `void` `completeOther`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SampleMainEmitLast;.completeOther:()V` @AccessFlag  {
    temp;
    v0;

  #L25d694.  v0:= 1I;
  #L25d696.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.done` @type ^`boolean` := v0 @kind boolean;
  #L25d69a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L25d69e.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25d6a4.  v0:= temp;
  #L25d6a6.  if v0 != 0 then goto L25d6ba;
  #L25d6aa.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.emit:()V` @kind virtual;
  #L25d6b0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d6b4.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25d6ba.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SampleMainEmitLast;.run:()V` @AccessFlag  {
    temp;
    v0;

  #L25d6cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L25d6d0.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25d6d6.  v0:= temp;
  #L25d6d8.  if v0 != 0 then goto L25d706;
  #L25d6dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.done` @type ^`boolean` @kind boolean;
  #L25d6e0.  call `emit`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.emit:()V` @kind virtual;
  #L25d6e6.  if v0 == 0 then goto L25d6f6;
  #L25d6ea.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d6ee.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25d6f4.  return @kind void;
  #L25d6f6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SampleMainEmitLast.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L25d6fa.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L25d700.  v0:= temp;
  #L25d702.  if v0 != 0 then goto L25d6dc;
  #L25d706.  return @kind void;
}
