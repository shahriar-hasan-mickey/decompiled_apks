record `io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.index` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.missedRequested` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.b` `io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.parent` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.won` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.b` v1 @kind object, `int` v2 , `n.b.c` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/b;ILn/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24cf58.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L24cf5e.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L24cf62.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L24cf68.  v0.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L24cf6c.  v0.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.index` @type ^`int` := v2;
  #L24cf70.  v0.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.downstream` @type ^`n.b.c` := v3 @kind object;
  #L24cf74.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L24cf88.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24cf8e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24cfa0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.won` @type ^`boolean` @kind boolean;
  #L24cfa4.  if v0 == 0 then goto L24cfb4;
  #L24cfa8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24cfac.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L24cfb2.  return @kind void;
  #L24cfb4.  v0:= 0I;
  #L24cfb6.  throw v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24cfc8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.won` @type ^`boolean` @kind boolean;
  #L24cfcc.  if v0 == 0 then goto L24cfdc;
  #L24cfd0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24cfd4.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24cfda.  return @kind void;
  #L24cfdc.  v2:= 0I;
  #L24cfde.  throw v2;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24cff0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.won` @type ^`boolean` @kind boolean;
  #L24cff4.  if v0 == 0 then goto L24d004;
  #L24cff8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24cffc.  call `onNext`(v0, v2) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L24d002.  return @kind void;
  #L24d004.  v2:= 0I;
  #L24d006.  throw v2;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24d018.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L24d01c.  call temp:= `deferredSetOnce`(v1, v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Ln/b/d;)Z` @kind static;
  #L24d022.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$AmbInnerSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24d034.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAmb$AmbInnerSubscriber.missedRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L24d038.  call `deferredRequest`(v1, v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L24d03e.  return @kind void;
}
