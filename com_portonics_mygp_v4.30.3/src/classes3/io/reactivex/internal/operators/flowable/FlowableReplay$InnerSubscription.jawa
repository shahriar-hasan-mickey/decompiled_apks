record `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `n.b.d` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.child` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.emitting` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.missed` @AccessFlag ;
  `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.parent` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.totalRequested` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.CANCELLED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` v1 @kind object, `n.b.c` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25c92c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25c932.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` := v1 @kind object;
  #L25c936.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.child` @type ^`n.b.c` := v2 @kind object;
  #L25c93a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L25c93e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25c944.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.totalRequested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L25c948.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L25c95c.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.dispose:()V` @kind virtual;
  #L25c962.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25c974.  v0:= -9223372036854775808L;
  #L25c978.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L25c97e.  v2:= temp @kind wide;
  #L25c980.  v4:= lcmp(v2, v0);
  #L25c984.  if v4 == 0 then goto L25c9a2;
  #L25c988.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` @kind object;
  #L25c98c.  call `remove`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.remove:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @kind virtual;
  #L25c992.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` @kind object;
  #L25c996.  call `manageRequests`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.manageRequests:()V` @kind virtual;
  #L25c99c.  v0:= 0I;
  #L25c99e.  v5.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @type ^`java.lang.Object` := v0 @kind object;
  #L25c9a2.  return @kind void;
}
procedure `java.lang.Object` `index`(`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.index:()Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L25c8f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @type ^`java.lang.Object` @kind object;
  #L25c8fc.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25c8cc.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25c8d2.  v0:= temp @kind wide;
  #L25c8d4.  v2:= -9223372036854775808L;
  #L25c8d8.  v4:= lcmp(v0, v2);
  #L25c8dc.  if v4 != 0 then goto L25c8e4;
  #L25c8e0.  v0:= 1I;
  #L25c8e2.  goto L25c8e6;
  #L25c8e4.  v0:= 0I;
  #L25c8e6.  return v0;
}
procedure `long` `produced`(`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.produced:(J)J` @AccessFlag PUBLIC {
    temp;

  #L25c910.  call temp:= `f`(v0, v1) @signature `Lio/reactivex/internal/util/b;.f:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25c916.  v1:= temp @kind wide;
  #L25c918.  return v1 @kind wide;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25c9b4.  call temp:= `validate`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25c9ba.  v0:= temp;
  #L25c9bc.  if v0 == 0 then goto L25c9f6;
  #L25c9c0.  call temp:= `b`(v5, v6) @signature `Lio/reactivex/internal/util/b;.b:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25c9c6.  v0:= temp @kind wide;
  #L25c9c8.  v2:= -9223372036854775808L;
  #L25c9cc.  v4:= lcmp(v0, v2);
  #L25c9d0.  if v4 == 0 then goto L25c9f6;
  #L25c9d4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.totalRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25c9d8.  call temp:= `a`(v0, v6) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25c9de.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` @kind object;
  #L25c9e2.  call `manageRequests`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$ReplaySubscriber;.manageRequests:()V` @kind virtual;
  #L25c9e8.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber` @kind object;
  #L25c9ec.  v6:= v6.`io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber.buffer` @type ^`io.reactivex.internal.operators.flowable.y` @kind object;
  #L25c9f0.  call `replay`(v6, v5) @signature `Lio/reactivex/internal/operators/flowable/y;.replay:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @kind interface;
  #L25c9f6.  return @kind void;
}
