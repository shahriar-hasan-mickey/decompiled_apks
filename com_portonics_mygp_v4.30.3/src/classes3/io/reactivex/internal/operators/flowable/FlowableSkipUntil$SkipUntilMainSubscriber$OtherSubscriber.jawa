record `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25f080.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` := v1 @kind object;
  #L25f084.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25f08a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25f09c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` @kind object;
  #L25f0a0.  v1:= 1I;
  #L25f0a2.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.gate` @type ^`boolean` := v1 @kind boolean;
  #L25f0a6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L25f0b8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` @kind object;
  #L25f0bc.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25f0c0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25f0c6.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` @kind object;
  #L25f0ca.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25f0ce.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25f0d2.  call `d`(v1, v4, v0, v2) @signature `Lio/reactivex/internal/util/g;.d:(Ln/b/c;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L25f0d8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25f0ec.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber` @kind object;
  #L25f0f0.  v0:= 1I;
  #L25f0f2.  v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber.gate` @type ^`boolean` := v0 @kind boolean;
  #L25f0f6.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25f0fc.  v2:= temp @kind object;
  #L25f0fe.  v2:= (`n.b.d`) v2 @kind object;
  #L25f102.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25f108.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$SkipUntilMainSubscriber$OtherSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25f11c.  v0:= 9223372036854775807L;
  #L25f126.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;J)Z` @kind static;
  #L25f12c.  return @kind void;
}
