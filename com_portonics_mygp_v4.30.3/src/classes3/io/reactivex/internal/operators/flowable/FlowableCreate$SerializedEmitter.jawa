record `io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.f` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.done` @AccessFlag VOLATILE;
  `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` `io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.error` @AccessFlag FINAL;
  `io.reactivex.e0.a.i` `io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.queue` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2507b4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L2507ba.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` := v2 @kind object;
  #L2507be.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L2507c2.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L2507c8.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L2507cc.  v2:= new `io.reactivex.internal.queue.a`;
  #L2507d0.  v0:= 16I;
  #L2507d4.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L2507da.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.queue` @type ^`io.reactivex.e0.a.i` := v2 @kind object;
  #L2507de.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L2507f0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2507f6.  v0:= temp;
  #L2507f8.  if v0 != 0 then goto L250802;
  #L2507fc.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.drainLoop:()V` @kind virtual;
  #L250802.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v8 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L250814.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L250818.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L25081c.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L250820.  v3:= 1I;
  #L250822.  v4:= 1I;
  #L250824.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L25082a.  v5:= temp;
  #L25082c.  if v5 == 0 then goto L250838;
  #L250830.  call `clear`(v1) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L250836.  return @kind void;
  #L250838.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25083e.  v5:= temp @kind object;
  #L250840.  if v5 == 0 then goto L25085a;
  #L250844.  call `clear`(v1) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L25084a.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L250850.  v1:= temp @kind object;
  #L250852.  call `onError`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L250858.  return @kind void;
  #L25085a.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.done` @type ^`boolean` @kind boolean;
  #L25085e.  call temp:= `poll`(v1) @signature `Lio/reactivex/e0/a/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L250864.  v6:= temp @kind object;
  #L250866.  if v6 != 0 then goto L25086e;
  #L25086a.  v7:= 1I;
  #L25086c.  goto L250870;
  #L25086e.  v7:= 0I;
  #L250870.  if v5 == 0 then goto L250880;
  #L250874.  if v7 == 0 then goto L250880;
  #L250878.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onComplete:()V` @kind virtual;
  #L25087e.  return @kind void;
  #L250880.  if v7 == 0 then goto L250894;
  #L250884.  v4:= -v4 @kind int;
  #L250886.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L25088c.  v4:= temp;
  #L25088e.  if v4 != 0 then goto L250824;
  #L250892.  return @kind void;
  #L250894.  call `onNext`(v0, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L25089a.  goto L250824;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2506e0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L2506e4.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L2506ea.  v0:= temp;
  #L2506ec.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2508ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L2508b0.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L2508b6.  v0:= temp;
  #L2508b8.  if v0 != 0 then goto L2508d2;
  #L2508bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.done` @type ^`boolean` @kind boolean;
  #L2508c0.  if v0 == 0 then goto L2508c6;
  #L2508c4.  goto L2508d2;
  #L2508c6.  v0:= 1I;
  #L2508c8.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.done` @type ^`boolean` := v0 @kind boolean;
  #L2508cc.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.drain:()V` @kind virtual;
  #L2508d2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2508e4.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2508ea.  v0:= temp;
  #L2508ec.  if v0 != 0 then goto L2508f6;
  #L2508f0.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2508f6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L250908.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L25090c.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L250912.  v0:= temp;
  #L250914.  if v0 != 0 then goto L25099a;
  #L250918.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.done` @type ^`boolean` @kind boolean;
  #L25091c.  if v0 == 0 then goto L250922;
  #L250920.  goto L25099a;
  #L250922.  if v3 != 0 then goto L25093c;
  #L250926.  v3:= new `java.lang.NullPointerException`;
  #L25092a.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L25092e.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L250934.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L25093a.  return @kind void;
  #L25093c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L250942.  v0:= temp;
  #L250944.  if v0 != 0 then goto L250970;
  #L250948.  v0:= 0I;
  #L25094a.  v1:= 1I;
  #L25094c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L250952.  v0:= temp;
  #L250954.  if v0 == 0 then goto L250970;
  #L250958.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L25095c.  call `onNext`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L250962.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L250968.  v3:= temp;
  #L25096a.  if v3 != 0 then goto L25098c;
  #L25096e.  return @kind void;
  #L250970.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L250974.  @monitorenter v0
  #L250976.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L25097c.  @monitorexit v0
  #L25097e.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L250984.  v3:= temp;
  #L250986.  if v3 == 0 then goto L25098c;
  #L25098a.  return @kind void;
  #L25098c.  call `drainLoop`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.drainLoop:()V` @kind virtual;
  #L250992.  return @kind void;
  #L250994.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L250996.  @monitorexit v0
  #L250998.  throw v3;
  #L25099a.  return @kind void;
  catch `java.lang.Throwable` @[L250976..L25097e] goto L250994;
  catch `java.lang.Throwable` @[L250996..L250998] goto L250994;
}
procedure `long` `requested`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.requested:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L250794.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L250798.  call temp:= `requested`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.requested:()J` @kind virtual;
  #L25079e.  v0:= temp @kind wide;
  #L2507a0.  return v0 @kind wide;
}
procedure `io.reactivex.f` `serialize`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.serialize:()Lio/reactivex/f;` @AccessFlag PUBLIC {
    temp;

  #L250760.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v1 @kind this, `io.reactivex.d0.f` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.setCancellable:(Lio/reactivex/d0/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2509c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L2509c4.  call `setCancellable`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.setCancellable:(Lio/reactivex/d0/f;)V` @kind virtual;
  #L2509ca.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.setDisposable:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2509dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L2509e0.  call `setDisposable`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.setDisposable:(Lio/reactivex/disposables/b;)V` @kind virtual;
  #L2509e6.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250774.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L250778.  call temp:= `toString`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.toString:()Ljava/lang/String;` @kind virtual;
  #L25077e.  v0:= temp @kind object;
  #L250780.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L250700.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.emitter` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind object;
  #L250704.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L25070a.  v0:= temp;
  #L25070c.  v1:= 0I;
  #L25070e.  if v0 != 0 then goto L25074c;
  #L250712.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.done` @type ^`boolean` @kind boolean;
  #L250716.  if v0 == 0 then goto L25071c;
  #L25071a.  goto L25074c;
  #L25071c.  if v3 != 0 then goto L25072e;
  #L250720.  v3:= new `java.lang.NullPointerException`;
  #L250724.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L250728.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25072e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L250732.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L250738.  v3:= temp;
  #L25073a.  if v3 == 0 then goto L25074c;
  #L25073e.  v3:= 1I;
  #L250740.  v2.`io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter.done` @type ^`boolean` := v3 @kind boolean;
  #L250744.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.drain:()V` @kind virtual;
  #L25074a.  return v3;
  #L25074c.  return v1;
}
