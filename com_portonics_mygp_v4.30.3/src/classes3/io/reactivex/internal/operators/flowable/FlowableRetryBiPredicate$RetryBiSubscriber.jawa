record `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.d` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.predicate` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.produced` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.retries` @AccessFlag ;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.sa` @AccessFlag FINAL;
  `n.b.b` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.source` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.d` v2 @kind object, `io.reactivex.internal.subscriptions.SubscriptionArbiter` v3 @kind object, `n.b.b` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$RetryBiSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/d;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;Ln/b/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25d2c0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L25d2c6.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25d2ca.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v3 @kind object;
  #L25d2ce.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.source` @type ^`n.b.b` := v4 @kind object;
  #L25d2d2.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.predicate` @type ^`io.reactivex.d0.d` := v2 @kind object;
  #L25d2d6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$RetryBiSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25d2e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d2ec.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25d2f2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$RetryBiSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L25d304.  v0:= 1I;
  #L25d306.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.predicate` @type ^`io.reactivex.d0.d` @kind object;
  #L25d30a.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.retries` @type ^`int`;
  #L25d30e.  v2:= v2 + v0 @kind int;
  #L25d310.  v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.retries` @type ^`int` := v2;
  #L25d314.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L25d31a.  v2:= temp @kind object;
  #L25d31c.  call temp:= `a`(v1, v2, v7) @signature `Lio/reactivex/d0/d;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L25d322.  v0:= temp;
  #L25d324.  if v0 != 0 then goto L25d334;
  #L25d328.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d32c.  call `onError`(v0, v7) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25d332.  return @kind void;
  #L25d334.  call `subscribeNext`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$RetryBiSubscriber;.subscribeNext:()V` @kind virtual;
  #L25d33a.  return @kind void;
  #L25d33c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25d33e.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25d344.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d348.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L25d34c.  v4:= 2I;
  #L25d34e.  v4:= new `java.lang.Throwable`[v4];
  #L25d352.  v5:= 0I;
  #L25d354.  v4[v5]:= v7 @kind object;
  #L25d358.  v4[v0]:= v1 @kind object;
  #L25d35c.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L25d362.  call `onError`(v2, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25d368.  return @kind void;
  catch `java.lang.Throwable` @[L25d306..L25d324] goto L25d33c;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$RetryBiSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25d388.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.produced` @type ^`long` @kind wide;
  #L25d38c.  v2:= 1L;
  #L25d390.  v0:= v0 + v2 @kind long;
  #L25d392.  v4.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L25d396.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d39a.  call `onNext`(v0, v5) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25d3a0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$RetryBiSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25d3b4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L25d3b8.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Ln/b/d;)V` @kind virtual;
  #L25d3be.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$RetryBiSubscriber;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L25d3d0.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25d3d6.  v0:= temp;
  #L25d3d8.  if v0 != 0 then goto L25d426;
  #L25d3dc.  v0:= 1I;
  #L25d3de.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L25d3e2.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L25d3e8.  v1:= temp;
  #L25d3ea.  if v1 == 0 then goto L25d3f0;
  #L25d3ee.  return @kind void;
  #L25d3f0.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.produced` @type ^`long` @kind wide;
  #L25d3f4.  v3:= 0L;
  #L25d3f8.  v5:= lcmp(v1, v3);
  #L25d3fc.  if v5 == 0 then goto L25d40e;
  #L25d400.  v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.produced` @type ^`long` := v3 @kind wide;
  #L25d404.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L25d408.  call `produced`(v3, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L25d40e.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber.source` @type ^`n.b.b` @kind object;
  #L25d412.  call `subscribe`(v1, v6) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L25d418.  v0:= -v0 @kind int;
  #L25d41a.  call temp:= `addAndGet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L25d420.  v0:= temp;
  #L25d422.  if v0 != 0 then goto L25d3de;
  #L25d426.  return @kind void;
}
