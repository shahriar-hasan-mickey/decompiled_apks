record `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.done` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.parent` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.prefetch` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.produced` @AccessFlag ;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.queue` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.sourceMode` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L263d5c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L263d62.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` := v1 @kind object;
  #L263d66.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.prefetch` @type ^`int` := v2;
  #L263d6a.  v1:= v2 ^> 2;
  #L263d6e.  v2:= v2 - v1 @kind int;
  #L263d70.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.limit` @type ^`int` := v2;
  #L263d74.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L263d88.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L263d8e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L263da0.  v0:= 1I;
  #L263da2.  v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L263da6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` @kind object;
  #L263daa.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.drain:()V` @kind virtual;
  #L263db0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L263dc4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` @kind object;
  #L263dc8.  call `error`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.error:(Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L263dce.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L263de0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.sourceMode` @type ^`int`;
  #L263de4.  v1:= 2I;
  #L263de6.  if v0 == v1 then goto L263df4;
  #L263dea.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L263dee.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L263df4.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` @kind object;
  #L263df8.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.drain:()V` @kind virtual;
  #L263dfe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` v3 @kind this, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L263e10.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L263e16.  v0:= temp;
  #L263e18.  if v0 == 0 then goto L263e8c;
  #L263e1c.  v0:= instanceof @variable v4 @type ^`io.reactivex.e0.a.g` @kind boolean;
  #L263e20.  if v0 == 0 then goto L263e6e;
  #L263e24.  v0:= v4 @kind object;
  #L263e26.  v0:= (`io.reactivex.e0.a.g`) v0 @kind object;
  #L263e2a.  v1:= 7I;
  #L263e2c.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L263e32.  v1:= temp;
  #L263e34.  v2:= 1I;
  #L263e36.  if v1 != v2 then goto L263e52;
  #L263e3a.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.sourceMode` @type ^`int` := v1;
  #L263e3e.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L263e42.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L263e46.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` @kind object;
  #L263e4a.  call `drain`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.drain:()V` @kind virtual;
  #L263e50.  return @kind void;
  #L263e52.  v2:= 2I;
  #L263e54.  if v1 != v2 then goto L263e6e;
  #L263e58.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.sourceMode` @type ^`int` := v1;
  #L263e5c.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L263e60.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.prefetch` @type ^`int`;
  #L263e64.  v0:= (`long`) v0 @kind i2l;
  #L263e66.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L263e6c.  return @kind void;
  #L263e6e.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L263e72.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.prefetch` @type ^`int`;
  #L263e76.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L263e7c.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L263e80.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.prefetch` @type ^`int`;
  #L263e84.  v0:= (`long`) v0 @kind i2l;
  #L263e86.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L263e8c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L263ea0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.sourceMode` @type ^`int`;
  #L263ea4.  v1:= 1I;
  #L263ea6.  if v0 == v1 then goto L263ede;
  #L263eaa.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.produced` @type ^`long` @kind wide;
  #L263eae.  v0:= v0 + v4 @kind long;
  #L263eb0.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.limit` @type ^`int`;
  #L263eb4.  v4:= (`long`) v4 @kind i2l;
  #L263eb6.  v2:= lcmp(v0, v4);
  #L263eba.  if v2 < 0 then goto L263eda;
  #L263ebe.  v4:= 0L;
  #L263ec2.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.produced` @type ^`long` := v4 @kind wide;
  #L263ec6.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L263ecc.  v4:= temp @kind object;
  #L263ece.  v4:= (`n.b.d`) v4 @kind object;
  #L263ed2.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L263ed8.  goto L263ede;
  #L263eda.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L263ede.  return @kind void;
}
