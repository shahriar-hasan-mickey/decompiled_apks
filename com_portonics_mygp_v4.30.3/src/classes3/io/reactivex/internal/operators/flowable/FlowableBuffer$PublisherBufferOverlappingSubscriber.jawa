record `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface, `io.reactivex.d0.e` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.bufferSupplier` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.buffers` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.done` @AccessFlag ;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.index` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.once` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.produced` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.size` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.skip` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.<init>:(Ln/b/c;IILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24d1b4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L24d1ba.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L24d1be.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.size` @type ^`int` := v2;
  #L24d1c2.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.skip` @type ^`int` := v3;
  #L24d1c6.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L24d1ca.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L24d1ce.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L24d1d4.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L24d1d8.  v1:= new `java.util.ArrayDeque`;
  #L24d1dc.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L24d1e2.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.buffers` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L24d1e6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24d1f8.  v0:= 1I;
  #L24d1fa.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L24d1fe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24d202.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L24d208.  return @kind void;
}
procedure `boolean` `getAsBoolean`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.getAsBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24d19c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L24d1a0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24d21c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.done` @type ^`boolean` @kind boolean;
  #L24d220.  if v0 == 0 then goto L24d226;
  #L24d224.  return @kind void;
  #L24d226.  v0:= 1I;
  #L24d228.  v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L24d22c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.produced` @type ^`long` @kind wide;
  #L24d230.  v2:= 0L;
  #L24d234.  v4:= lcmp(v0, v2);
  #L24d238.  if v4 == 0 then goto L24d242;
  #L24d23c.  call temp:= `e`(v5, v0) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L24d242.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24d246.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L24d24a.  call `e`(v0, v1, v5, v5) @signature `Lio/reactivex/internal/util/k;.e:(Ln/b/c;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/d0/e;)V` @kind static;
  #L24d250.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24d264.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.done` @type ^`boolean` @kind boolean;
  #L24d268.  if v0 == 0 then goto L24d274;
  #L24d26c.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24d272.  return @kind void;
  #L24d274.  v0:= 1I;
  #L24d276.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L24d27a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L24d27e.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L24d284.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24d288.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24d28e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L24d2a0.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.done` @type ^`boolean` @kind boolean;
  #L24d2a4.  if v0 == 0 then goto L24d2aa;
  #L24d2a8.  return @kind void;
  #L24d2aa.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L24d2ae.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.index` @type ^`int`;
  #L24d2b2.  v2:= v1 + 1;
  #L24d2b6.  if v1 != 0 then goto L24d2f4;
  #L24d2ba.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L24d2be.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L24d2c4.  v1:= temp @kind object;
  #L24d2c6.  v3:= "The bufferSupplier returned a null buffer" @kind object;
  #L24d2ca.  call temp:= `e`(v1, v3) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L24d2d0.  v1:= temp @kind object;
  #L24d2d2.  v1:= (`java.util.Collection`) v1 @kind object;
  #L24d2d6.  call temp:= `offer`(v0, v1) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L24d2dc.  goto L24d2f4;
  #L24d2de.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24d2e0.  call `b`(v8) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24d2e6.  call `cancel`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.cancel:()V` @kind virtual;
  #L24d2ec.  call `onError`(v7, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L24d2f2.  return @kind void;
  #L24d2f4.  call temp:= `peek`(v0) @signature `Ljava/util/ArrayDeque;.peek:()Ljava/lang/Object;` @kind virtual;
  #L24d2fa.  v1:= temp @kind object;
  #L24d2fc.  v1:= (`java.util.Collection`) v1 @kind object;
  #L24d300.  if v1 == 0 then goto L24d33c;
  #L24d304.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L24d30a.  v3:= temp;
  #L24d30c.  v3:= v3 + 1;
  #L24d310.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.size` @type ^`int`;
  #L24d314.  if v3 != v4 then goto L24d33c;
  #L24d318.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L24d31e.  call temp:= `add`(v1, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24d324.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.produced` @type ^`long` @kind wide;
  #L24d328.  v5:= 1L;
  #L24d32c.  v3:= v3 + v5 @kind long;
  #L24d32e.  v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.produced` @type ^`long` := v3 @kind wide;
  #L24d332.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24d336.  call `onNext`(v3, v1) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L24d33c.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L24d342.  v0:= temp @kind object;
  #L24d344.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L24d34a.  v1:= temp;
  #L24d34c.  if v1 == 0 then goto L24d364;
  #L24d350.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L24d356.  v1:= temp @kind object;
  #L24d358.  v1:= (`java.util.Collection`) v1 @kind object;
  #L24d35c.  call temp:= `add`(v1, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24d362.  goto L24d344;
  #L24d364.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.skip` @type ^`int`;
  #L24d368.  if v2 != v8 then goto L24d36e;
  #L24d36c.  v2:= 0I;
  #L24d36e.  v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.index` @type ^`int` := v2;
  #L24d372.  return @kind void;
  catch `java.lang.Throwable` @[L24d2ba..L24d2d6] goto L24d2de;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24d390.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24d394.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L24d39a.  v0:= temp;
  #L24d39c.  if v0 == 0 then goto L24d3ae;
  #L24d3a0.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.upstream` @type ^`n.b.d` := v2 @kind object;
  #L24d3a4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24d3a8.  call `onSubscribe`(v2, v1) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L24d3ae.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber` v7 @kind this, `long` v8 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$PublisherBufferOverlappingSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L24d3c0.  call temp:= `validate`(v8) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L24d3c6.  v0:= temp;
  #L24d3c8.  if v0 == 0 then goto L24d452;
  #L24d3cc.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24d3d0.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.buffers` @type ^`java.util.ArrayDeque` @kind object;
  #L24d3d4.  v1:= v8 @kind wide;
  #L24d3d6.  v5:= v7 @kind object;
  #L24d3d8.  v6:= v7 @kind object;
  #L24d3da.  call temp:= `g`(v1, v3, v4, v5, v6) @signature `Lio/reactivex/internal/util/k;.g:(JLn/b/c;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/d0/e;)Z` @kind static;
  #L24d3e0.  v0:= temp;
  #L24d3e2.  if v0 == 0 then goto L24d3e8;
  #L24d3e6.  return @kind void;
  #L24d3e8.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L24d3ec.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L24d3f2.  v0:= temp;
  #L24d3f4.  if v0 != 0 then goto L24d43a;
  #L24d3f8.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L24d3fc.  v1:= 0I;
  #L24d3fe.  v2:= 1I;
  #L24d400.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L24d406.  v0:= temp;
  #L24d408.  if v0 == 0 then goto L24d43a;
  #L24d40c.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.skip` @type ^`int`;
  #L24d410.  v0:= (`long`) v0 @kind i2l;
  #L24d412.  v2:= 1L;
  #L24d416.  v8:= v8 - v2 @kind long;
  #L24d418.  call temp:= `d`(v0, v8) @signature `Lio/reactivex/internal/util/b;.d:(JJ)J` @kind static;
  #L24d41e.  v8:= temp @kind wide;
  #L24d420.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.size` @type ^`int`;
  #L24d424.  v0:= (`long`) v0 @kind i2l;
  #L24d426.  call temp:= `c`(v0, v8) @signature `Lio/reactivex/internal/util/b;.c:(JJ)J` @kind static;
  #L24d42c.  v8:= temp @kind wide;
  #L24d42e.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24d432.  call `request`(v0, v8) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24d438.  goto L24d452;
  #L24d43a.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.skip` @type ^`int`;
  #L24d43e.  v0:= (`long`) v0 @kind i2l;
  #L24d440.  call temp:= `d`(v0, v8) @signature `Lio/reactivex/internal/util/b;.d:(JJ)J` @kind static;
  #L24d446.  v8:= temp @kind wide;
  #L24d448.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24d44c.  call `request`(v0, v8) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24d452.  return @kind void;
}
