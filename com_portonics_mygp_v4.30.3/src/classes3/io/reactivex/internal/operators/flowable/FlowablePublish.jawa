record `io.reactivex.internal.operators.flowable.FlowablePublish` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.c0.a` @kind class {
  `io.reactivex.e` `io.reactivex.internal.operators.flowable.FlowablePublish.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublish.e` @AccessFlag FINAL;
  `n.b.b` `io.reactivex.internal.operators.flowable.FlowablePublish.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublish` v0 @kind this, `n.b.b` v1 @kind object, `io.reactivex.e` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.<init>:(Ln/b/b;Lio/reactivex/e;Ljava/util/concurrent/atomic/AtomicReference;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L25b45c.  call `<init>`(v0) @signature `Lio/reactivex/c0/a;.<init>:()V` @kind direct;
  #L25b462.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish.f` @type ^`n.b.b` := v1 @kind object;
  #L25b466.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish.c` @type ^`io.reactivex.e` := v2 @kind object;
  #L25b46a.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L25b46e.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish.e` @type ^`int` := v4;
  #L25b472.  return @kind void;
}
procedure `io.reactivex.c0.a` `L`(`io.reactivex.e` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.L:(Lio/reactivex/e;I)Lio/reactivex/c0/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L25b424.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L25b428.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25b42e.  v1:= new `io.reactivex.internal.operators.flowable.w`;
  #L25b432.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/w;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L25b438.  v2:= new `io.reactivex.internal.operators.flowable.FlowablePublish`;
  #L25b43c.  call `<init>`(v2, v1, v3, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.<init>:(Ln/b/b;Lio/reactivex/e;Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L25b442.  call temp:= `p`(v2) @signature `Lio/reactivex/g0/a;.p:(Lio/reactivex/c0/a;)Lio/reactivex/c0/a;` @kind static;
  #L25b448.  v3:= temp @kind object;
  #L25b44a.  return v3 @kind object;
}
procedure `void` `H`(`io.reactivex.internal.operators.flowable.FlowablePublish` v1 @kind this, `n.b.c` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.H:(Ln/b/c;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L25b53c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish.f` @type ^`n.b.b` @kind object;
  #L25b540.  call `subscribe`(v0, v2) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L25b546.  return @kind void;
}
procedure `void` `K`(`io.reactivex.internal.operators.flowable.FlowablePublish` v4 @kind this, `io.reactivex.d0.g` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.K:(Lio/reactivex/d0/g;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25b484.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25b488.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25b48e.  v0:= temp @kind object;
  #L25b490.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber`) v0 @kind object;
  #L25b494.  if v0 == 0 then goto L25b4a4;
  #L25b498.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.isDisposed:()Z` @kind virtual;
  #L25b49e.  v1:= temp;
  #L25b4a0.  if v1 == 0 then goto L25b4ca;
  #L25b4a4.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber`;
  #L25b4a8.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25b4ac.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.e` @type ^`int`;
  #L25b4b0.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L25b4b6.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25b4ba.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L25b4c0.  v0:= temp;
  #L25b4c2.  if v0 != 0 then goto L25b4c8;
  #L25b4c6.  goto L25b484;
  #L25b4c8.  v0:= v1 @kind object;
  #L25b4ca.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L25b4ce.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L25b4d4.  v1:= temp;
  #L25b4d6.  v2:= 1I;
  #L25b4d8.  v3:= 0I;
  #L25b4da.  if v1 != 0 then goto L25b4f0;
  #L25b4de.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L25b4e2.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L25b4e8.  v1:= temp;
  #L25b4ea.  if v1 == 0 then goto L25b4f0;
  #L25b4ee.  goto L25b4f2;
  #L25b4f0.  v2:= 0I;
  #L25b4f2.  call `accept`(v5, v0) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L25b4f8.  if v2 == 0 then goto L25b506;
  #L25b4fc.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.c` @type ^`io.reactivex.e` @kind object;
  #L25b500.  call `G`(v5, v0) @signature `Lio/reactivex/e;.G:(Lio/reactivex/h;)V` @kind virtual;
  #L25b506.  return @kind void;
  #L25b508.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25b50a.  call `b`(v5) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25b510.  call temp:= `e`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.e:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L25b516.  v5:= temp @kind object;
  #L25b518.  goto L25b51c;
  #L25b51a.  throw v5;
  #L25b51c.  goto L25b51a;
  catch `java.lang.Throwable` @[L25b4f2..L25b4f8] goto L25b508;
}
