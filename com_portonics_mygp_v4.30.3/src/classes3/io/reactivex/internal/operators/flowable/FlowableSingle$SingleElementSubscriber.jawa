record `io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.h` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.defaultValue` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.done` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.failOnEmpty` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `java.lang.Object` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$SingleElementSubscriber;.<init>:(Ln/b/c;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25eb24.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Ln/b/c;)V` @kind direct;
  #L25eb2a.  v0.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.defaultValue` @type ^`java.lang.Object` := v2 @kind object;
  #L25eb2e.  v0.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.failOnEmpty` @type ^`boolean` := v3 @kind boolean;
  #L25eb32.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$SingleElementSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25eb44.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L25eb4a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25eb4e.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25eb54.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$SingleElementSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25eb68.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.done` @type ^`boolean` @kind boolean;
  #L25eb6c.  if v0 == 0 then goto L25eb72;
  #L25eb70.  return @kind void;
  #L25eb72.  v0:= 1I;
  #L25eb74.  v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25eb78.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L25eb7c.  v1:= 0I;
  #L25eb7e.  v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v1 @kind object;
  #L25eb82.  if v0 != 0 then goto L25eb8a;
  #L25eb86.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.defaultValue` @type ^`java.lang.Object` @kind object;
  #L25eb8a.  if v0 != 0 then goto L25ebb8;
  #L25eb8e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.failOnEmpty` @type ^`boolean` @kind boolean;
  #L25eb92.  if v0 == 0 then goto L25ebac;
  #L25eb96.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L25eb9a.  v1:= new `java.util.NoSuchElementException`;
  #L25eb9e.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L25eba4.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25ebaa.  goto L25ebbe;
  #L25ebac.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L25ebb0.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25ebb6.  goto L25ebbe;
  #L25ebb8.  call `complete`(v2, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L25ebbe.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$SingleElementSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25ebd0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.done` @type ^`boolean` @kind boolean;
  #L25ebd4.  if v0 == 0 then goto L25ebe0;
  #L25ebd8.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25ebde.  return @kind void;
  #L25ebe0.  v0:= 1I;
  #L25ebe2.  v1.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25ebe6.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L25ebea.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25ebf0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$SingleElementSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25ec04.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.done` @type ^`boolean` @kind boolean;
  #L25ec08.  if v0 == 0 then goto L25ec0e;
  #L25ec0c.  return @kind void;
  #L25ec0e.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L25ec12.  if v0 == 0 then goto L25ec40;
  #L25ec16.  v3:= 1I;
  #L25ec18.  v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.done` @type ^`boolean` := v3 @kind boolean;
  #L25ec1c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25ec20.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25ec26.  v3:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L25ec2a.  v0:= new `java.lang.IllegalArgumentException`;
  #L25ec2e.  v1:= "Sequence contains more than one element!" @kind object;
  #L25ec32.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25ec38.  call `onError`(v3, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25ec3e.  return @kind void;
  #L25ec40.  v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v3 @kind object;
  #L25ec44.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$SingleElementSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25ec58.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25ec5c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25ec62.  v0:= temp;
  #L25ec64.  if v0 == 0 then goto L25ec86;
  #L25ec68.  v2.`io.reactivex.internal.operators.flowable.FlowableSingle$SingleElementSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L25ec6c.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L25ec70.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25ec76.  v0:= 9223372036854775807L;
  #L25ec80.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25ec86.  return @kind void;
}
