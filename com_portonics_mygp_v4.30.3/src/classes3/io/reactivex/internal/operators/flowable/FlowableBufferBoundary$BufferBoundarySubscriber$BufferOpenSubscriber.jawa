record `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24d6b4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L24d6ba.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` := v1 @kind object;
  #L24d6be.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L24d6d0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24d6d6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24d68c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24d692.  v0:= temp @kind object;
  #L24d694.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L24d698.  if v0 != v1 then goto L24d6a0;
  #L24d69c.  v0:= 1I;
  #L24d69e.  goto L24d6a2;
  #L24d6a0.  v0:= 0I;
  #L24d6a2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24d6e8.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L24d6ec.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L24d6f2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` @kind object;
  #L24d6f6.  call `openComplete`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.openComplete:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;)V` @kind virtual;
  #L24d6fc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24d710.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L24d714.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L24d71a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` @kind object;
  #L24d71e.  call `boundaryError`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.boundaryError:(Lio/reactivex/disposables/b;Ljava/lang/Throwable;)V` @kind virtual;
  #L24d724.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24d738.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` @kind object;
  #L24d73c.  call `open`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.open:(Ljava/lang/Object;)V` @kind virtual;
  #L24d742.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24d754.  v0:= 9223372036854775807L;
  #L24d75e.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;J)Z` @kind static;
  #L24d764.  return @kind void;
}
