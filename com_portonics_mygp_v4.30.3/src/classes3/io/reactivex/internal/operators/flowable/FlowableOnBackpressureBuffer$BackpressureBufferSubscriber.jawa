record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.h` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.error` @AccessFlag ;
  `io.reactivex.d0.a` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.onOverflow` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @AccessFlag ;
  `io.reactivex.e0.a.i` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.requested` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this, `n.b.c` v2 @kind object, `int` v3 , `boolean` v4 , `boolean` v5 , `io.reactivex.d0.a` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.<init>:(Ln/b/c;IZZLio/reactivex/d0/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L259b88.  call `<init>`(v1) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L259b8e.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L259b92.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L259b98.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L259b9c.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L259ba0.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.onOverflow` @type ^`io.reactivex.d0.a` := v6 @kind object;
  #L259ba4.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.delayError` @type ^`boolean` := v5 @kind boolean;
  #L259ba8.  if v4 == 0 then goto L259bb8;
  #L259bac.  v2:= new `io.reactivex.internal.queue.a`;
  #L259bb0.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L259bb6.  goto L259bc2;
  #L259bb8.  v2:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L259bbc.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L259bc2.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.e0.a.i` := v2 @kind object;
  #L259bc6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L259bd8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L259bdc.  if v0 != 0 then goto L259c06;
  #L259be0.  v0:= 1I;
  #L259be2.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L259be6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L259bea.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L259bf0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L259bf6.  v0:= temp;
  #L259bf8.  if v0 != 0 then goto L259c06;
  #L259bfc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L259c00.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L259c06.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v2 @kind this, `boolean` v3 , `boolean` v4 , `n.b.c` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.checkTerminated:(ZZLn/b/c;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L259aac.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L259ab0.  v1:= 1I;
  #L259ab2.  if v0 == 0 then goto L259ac2;
  #L259ab6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L259aba.  call `clear`(v3) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L259ac0.  return v1;
  #L259ac2.  if v3 == 0 then goto L259b10;
  #L259ac6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.delayError` @type ^`boolean` @kind boolean;
  #L259aca.  if v3 == 0 then goto L259aea;
  #L259ace.  if v4 == 0 then goto L259b10;
  #L259ad2.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L259ad6.  if v3 == 0 then goto L259ae2;
  #L259ada.  call `onError`(v5, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L259ae0.  goto L259ae8;
  #L259ae2.  call `onComplete`(v5) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L259ae8.  return v1;
  #L259aea.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L259aee.  if v3 == 0 then goto L259b04;
  #L259af2.  v4:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L259af6.  call `clear`(v4) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L259afc.  call `onError`(v5, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L259b02.  return v1;
  #L259b04.  if v4 == 0 then goto L259b10;
  #L259b08.  call `onComplete`(v5) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L259b0e.  return v1;
  #L259b10.  v3:= 0I;
  #L259b12.  return v3;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L259c18.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L259c1c.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L259c22.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L259c34.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L259c3a.  v0:= temp;
  #L259c3c.  if v0 != 0 then goto L259d0e;
  #L259c40.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L259c44.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L259c48.  v2:= 1I;
  #L259c4a.  v3:= 1I;
  #L259c4c.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @type ^`boolean` @kind boolean;
  #L259c50.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L259c56.  v5:= temp;
  #L259c58.  call temp:= `checkTerminated`(v13, v4, v5, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.checkTerminated:(ZZLn/b/c;)Z` @kind virtual;
  #L259c5e.  v4:= temp;
  #L259c60.  if v4 == 0 then goto L259c66;
  #L259c64.  return @kind void;
  #L259c66.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L259c6a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L259c70.  v4:= temp @kind wide;
  #L259c72.  v6:= 0L;
  #L259c76.  v8:= v6 @kind wide;
  #L259c78.  v10:= lcmp(v8, v4);
  #L259c7c.  if v10 == 0 then goto L259cb8;
  #L259c80.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @type ^`boolean` @kind boolean;
  #L259c84.  call temp:= `poll`(v0) @signature `Lio/reactivex/e0/a/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L259c8a.  v11:= temp @kind object;
  #L259c8c.  if v11 != 0 then goto L259c94;
  #L259c90.  v12:= 1I;
  #L259c92.  goto L259c96;
  #L259c94.  v12:= 0I;
  #L259c96.  call temp:= `checkTerminated`(v13, v10, v12, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.checkTerminated:(ZZLn/b/c;)Z` @kind virtual;
  #L259c9c.  v10:= temp;
  #L259c9e.  if v10 == 0 then goto L259ca4;
  #L259ca2.  return @kind void;
  #L259ca4.  if v12 == 0 then goto L259caa;
  #L259ca8.  goto L259cb8;
  #L259caa.  call `onNext`(v1, v11) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L259cb0.  v10:= 1L;
  #L259cb4.  v8:= v8 + v10 @kind long;
  #L259cb6.  goto L259c78;
  #L259cb8.  v10:= lcmp(v8, v4);
  #L259cbc.  if v10 != 0 then goto L259cda;
  #L259cc0.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @type ^`boolean` @kind boolean;
  #L259cc4.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L259cca.  v11:= temp;
  #L259ccc.  call temp:= `checkTerminated`(v13, v10, v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.checkTerminated:(ZZLn/b/c;)Z` @kind virtual;
  #L259cd2.  v10:= temp;
  #L259cd4.  if v10 == 0 then goto L259cda;
  #L259cd8.  return @kind void;
  #L259cda.  v10:= lcmp(v8, v6);
  #L259cde.  if v10 == 0 then goto L259d00;
  #L259ce2.  v6:= 9223372036854775807L;
  #L259cec.  v10:= lcmp(v4, v6);
  #L259cf0.  if v10 == 0 then goto L259d00;
  #L259cf4.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L259cf8.  v5:= -v8 @kind long;
  #L259cfa.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L259d00.  v3:= -v3 @kind int;
  #L259d02.  call temp:= `addAndGet`(v13, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L259d08.  v3:= temp;
  #L259d0a.  if v3 != 0 then goto L259c4c;
  #L259d0e.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L259b24.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L259b28.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L259b2e.  v0:= temp;
  #L259b30.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L259d20.  v0:= 1I;
  #L259d22.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L259d26.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L259d2a.  if v0 == 0 then goto L259d3a;
  #L259d2e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L259d32.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L259d38.  goto L259d40;
  #L259d3a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.drain:()V` @kind virtual;
  #L259d40.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L259d54.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L259d58.  v0:= 1I;
  #L259d5a.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L259d5e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L259d62.  if v0 == 0 then goto L259d72;
  #L259d66.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L259d6a.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L259d70.  goto L259d78;
  #L259d72.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.drain:()V` @kind virtual;
  #L259d78.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L259d8c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L259d90.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L259d96.  v2:= temp;
  #L259d98.  if v2 != 0 then goto L259dd6;
  #L259d9c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L259da0.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L259da6.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L259daa.  v0:= "Buffer is full" @kind object;
  #L259dae.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L259db4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.onOverflow` @type ^`io.reactivex.d0.a` @kind object;
  #L259db8.  call `run`(v0) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L259dbe.  goto L259dce;
  #L259dc0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L259dc2.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L259dc8.  call temp:= `initCause`(v2, v0) @signature `Ljava/lang/RuntimeException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L259dce.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L259dd4.  return @kind void;
  #L259dd6.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L259dda.  if v2 == 0 then goto L259dec;
  #L259dde.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L259de2.  v0:= 0I;
  #L259de4.  call `onNext`(v2, v0) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L259dea.  goto L259df2;
  #L259dec.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.drain:()V` @kind virtual;
  #L259df2.  return @kind void;
  catch `java.lang.Throwable` @[L259db4..L259dbe] goto L259dc0;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L259e10.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L259e14.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L259e1a.  v0:= temp;
  #L259e1c.  if v0 == 0 then goto L259e3e;
  #L259e20.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L259e24.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L259e28.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L259e2e.  v0:= 9223372036854775807L;
  #L259e38.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L259e3e.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L259b68.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L259b6c.  call temp:= `poll`(v0) @signature `Lio/reactivex/e0/a/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L259b72.  v0:= temp @kind object;
  #L259b74.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L259e50.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L259e54.  if v0 != 0 then goto L259e74;
  #L259e58.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L259e5e.  v0:= temp;
  #L259e60.  if v0 == 0 then goto L259e74;
  #L259e64.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L259e68.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L259e6e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.drain:()V` @kind virtual;
  #L259e74.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$BackpressureBufferSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L259b44.  v0:= 2I;
  #L259b46.  v2:= v2 ^& v0 @kind int;
  #L259b48.  if v2 == 0 then goto L259b54;
  #L259b4c.  v2:= 1I;
  #L259b4e.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L259b52.  return v0;
  #L259b54.  v2:= 0I;
  #L259b56.  return v2;
}
