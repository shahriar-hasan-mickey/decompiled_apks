record `io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.d` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.d0.g` `io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.disposeState` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.c` `io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.generator` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.hasNext` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.terminate` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.c` v2 @kind object, `io.reactivex.d0.g` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.<init>:(Ln/b/c;Lio/reactivex/d0/c;Lio/reactivex/d0/g;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L255abc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L255ac2.  v0.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.downstream` @type ^`n.b.c` := v1 @kind object;
  #L255ac6.  v0.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.generator` @type ^`io.reactivex.d0.c` := v2 @kind object;
  #L255aca.  v0.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.disposeState` @type ^`io.reactivex.d0.g` := v3 @kind object;
  #L255ace.  v0.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @type ^`java.lang.Object` := v4 @kind object;
  #L255ad2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.a:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L255b2c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.disposeState` @type ^`io.reactivex.d0.g` @kind object;
  #L255b30.  call `accept`(v0, v2) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L255b36.  goto L255b46;
  #L255b38.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L255b3a.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L255b40.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L255b46.  return @kind void;
  catch `java.lang.Throwable` @[L255b2c..L255b36] goto L255b38;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L255ae4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L255ae8.  if v0 != 0 then goto L255b1a;
  #L255aec.  v0:= 1I;
  #L255aee.  v5.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L255af2.  v0:= 1L;
  #L255af6.  call temp:= `a`(v5, v0) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L255afc.  v0:= temp @kind wide;
  #L255afe.  v2:= 0L;
  #L255b02.  v4:= lcmp(v0, v2);
  #L255b06.  if v4 != 0 then goto L255b1a;
  #L255b0a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @type ^`java.lang.Object` @kind object;
  #L255b0e.  v1:= 0I;
  #L255b10.  v5.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @type ^`java.lang.Object` := v1 @kind object;
  #L255b14.  call `a`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.a:(Ljava/lang/Object;)V` @kind direct;
  #L255b1a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L255b64.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.terminate` @type ^`boolean` @kind boolean;
  #L255b68.  if v0 != 0 then goto L255b7c;
  #L255b6c.  v0:= 1I;
  #L255b6e.  v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.terminate` @type ^`boolean` := v0 @kind boolean;
  #L255b72.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.downstream` @type ^`n.b.c` @kind object;
  #L255b76.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L255b7c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L255b90.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.terminate` @type ^`boolean` @kind boolean;
  #L255b94.  if v0 == 0 then goto L255ba0;
  #L255b98.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L255b9e.  goto L255bc2;
  #L255ba0.  if v2 != 0 then goto L255bb2;
  #L255ba4.  v2:= new `java.lang.NullPointerException`;
  #L255ba8.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L255bac.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L255bb2.  v0:= 1I;
  #L255bb4.  v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.terminate` @type ^`boolean` := v0 @kind boolean;
  #L255bb8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.downstream` @type ^`n.b.c` @kind object;
  #L255bbc.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L255bc2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L255bd4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.terminate` @type ^`boolean` @kind boolean;
  #L255bd8.  if v0 != 0 then goto L255c24;
  #L255bdc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.hasNext` @type ^`boolean` @kind boolean;
  #L255be0.  if v0 == 0 then goto L255bfa;
  #L255be4.  v2:= new `java.lang.IllegalStateException`;
  #L255be8.  v0:= "onNext already called in this generate turn" @kind object;
  #L255bec.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L255bf2.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L255bf8.  goto L255c24;
  #L255bfa.  if v2 != 0 then goto L255c14;
  #L255bfe.  v2:= new `java.lang.NullPointerException`;
  #L255c02.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L255c06.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L255c0c.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L255c12.  goto L255c24;
  #L255c14.  v0:= 1I;
  #L255c16.  v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.hasNext` @type ^`boolean` := v0 @kind boolean;
  #L255c1a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.downstream` @type ^`n.b.c` @kind object;
  #L255c1e.  call `onNext`(v0, v2) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L255c24.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L255c38.  call temp:= `validate`(v10) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L255c3e.  v0:= temp;
  #L255c40.  if v0 != 0 then goto L255c46;
  #L255c44.  return @kind void;
  #L255c46.  call temp:= `a`(v9, v10) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L255c4c.  v0:= temp @kind wide;
  #L255c4e.  v2:= 0L;
  #L255c52.  v4:= lcmp(v0, v2);
  #L255c56.  if v4 == 0 then goto L255c5c;
  #L255c5a.  return @kind void;
  #L255c5c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @type ^`java.lang.Object` @kind object;
  #L255c60.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.generator` @type ^`io.reactivex.d0.c` @kind object;
  #L255c64.  v4:= v2 @kind wide;
  #L255c66.  v6:= lcmp(v4, v10);
  #L255c6a.  if v6 == 0 then goto L255cd2;
  #L255c6e.  v6:= v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L255c72.  v7:= 0I;
  #L255c74.  if v6 == 0 then goto L255c84;
  #L255c78.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @type ^`java.lang.Object` := v7 @kind object;
  #L255c7c.  call `a`(v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.a:(Ljava/lang/Object;)V` @kind direct;
  #L255c82.  return @kind void;
  #L255c84.  v6:= 0I;
  #L255c86.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.hasNext` @type ^`boolean` := v6 @kind boolean;
  #L255c8a.  v6:= 1I;
  #L255c8c.  call temp:= `apply`(v1, v0, v9) @signature `Lio/reactivex/d0/c;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L255c92.  v0:= temp @kind object;
  #L255c94.  v8:= v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.terminate` @type ^`boolean` @kind boolean;
  #L255c98.  if v8 == 0 then goto L255cac;
  #L255c9c.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.cancelled` @type ^`boolean` := v6 @kind boolean;
  #L255ca0.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @type ^`java.lang.Object` := v7 @kind object;
  #L255ca4.  call `a`(v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.a:(Ljava/lang/Object;)V` @kind direct;
  #L255caa.  return @kind void;
  #L255cac.  v6:= 1L;
  #L255cb0.  v4:= v4 + v6 @kind long;
  #L255cb2.  goto L255c66;
  #L255cb4.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L255cb6.  call `b`(v10) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L255cbc.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.cancelled` @type ^`boolean` := v6 @kind boolean;
  #L255cc0.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @type ^`java.lang.Object` := v7 @kind object;
  #L255cc4.  call `onError`(v9, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L255cca.  call `a`(v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$GeneratorSubscription;.a:(Ljava/lang/Object;)V` @kind direct;
  #L255cd0.  return @kind void;
  #L255cd2.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L255cd8.  v10:= temp @kind wide;
  #L255cda.  v6:= lcmp(v4, v10);
  #L255cde.  if v6 != 0 then goto L255c66;
  #L255ce2.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription.state` @type ^`java.lang.Object` := v0 @kind object;
  #L255ce6.  v10:= -v4 @kind long;
  #L255ce8.  call temp:= `addAndGet`(v9, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L255cee.  v10:= temp @kind wide;
  #L255cf0.  v4:= lcmp(v10, v2);
  #L255cf4.  if v4 != 0 then goto L255c64;
  #L255cf8.  return @kind void;
  catch `java.lang.Throwable` @[L255c8c..L255c94] goto L255cb4;
}
