record `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.a` @kind class {
  `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.d` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.f` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.g` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v2 @kind object, `long` v3 , `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;JLjava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L250ac4.  call `<init>`(v1) @signature `Lio/reactivex/subscribers/a;.<init>:()V` @kind direct;
  #L250aca.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L250ace.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L250ad4.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L250ad8.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` := v2 @kind object;
  #L250adc.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.d` @type ^`long` := v3 @kind wide;
  #L250ae0.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.e` @type ^`java.lang.Object` := v5 @kind object;
  #L250ae4.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L250af8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L250afc.  v1:= 0I;
  #L250afe.  v2:= 1I;
  #L250b00.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L250b06.  v0:= temp;
  #L250b08.  if v0 == 0 then goto L250b1e;
  #L250b0c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` @kind object;
  #L250b10.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.d` @type ^`long` @kind wide;
  #L250b14.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.e` @type ^`java.lang.Object` @kind object;
  #L250b18.  call `emit`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.emit:(JLjava/lang/Object;)V` @kind virtual;
  #L250b1e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250b30.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.f` @type ^`boolean` @kind boolean;
  #L250b34.  if v0 == 0 then goto L250b3a;
  #L250b38.  return @kind void;
  #L250b3a.  v0:= 1I;
  #L250b3c.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.f` @type ^`boolean` := v0 @kind boolean;
  #L250b40.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$a;.c:()V` @kind virtual;
  #L250b46.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250b58.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.f` @type ^`boolean` @kind boolean;
  #L250b5c.  if v0 == 0 then goto L250b68;
  #L250b60.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L250b66.  return @kind void;
  #L250b68.  v0:= 1I;
  #L250b6a.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.f` @type ^`boolean` := v0 @kind boolean;
  #L250b6e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` @kind object;
  #L250b72.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L250b78.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L250b8c.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.f` @type ^`boolean` @kind boolean;
  #L250b90.  if v1 == 0 then goto L250b96;
  #L250b94.  return @kind void;
  #L250b96.  v1:= 1I;
  #L250b98.  v0.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a.f` @type ^`boolean` := v1 @kind boolean;
  #L250b9c.  call `a`(v0) @signature `Lio/reactivex/subscribers/a;.a:()V` @kind virtual;
  #L250ba2.  call `c`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$a;.c:()V` @kind virtual;
  #L250ba8.  return @kind void;
}
