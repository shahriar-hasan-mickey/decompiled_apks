record `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.h` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableConcatMap$a` `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.parent` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.produced` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableConcatMap$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableConcatMap$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L24f1dc.  v0:= 0I;
  #L24f1de.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L24f1e4.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$a` := v2 @kind object;
  #L24f1e8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24f1fc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.produced` @type ^`long` @kind wide;
  #L24f200.  v2:= 0L;
  #L24f204.  v4:= lcmp(v0, v2);
  #L24f208.  if v4 == 0 then goto L24f216;
  #L24f20c.  v5.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.produced` @type ^`long` := v2 @kind wide;
  #L24f210.  call `produced`(v5, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L24f216.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$a` @kind object;
  #L24f21a.  call `innerComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$a;.innerComplete:()V` @kind interface;
  #L24f220.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24f234.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.produced` @type ^`long` @kind wide;
  #L24f238.  v2:= 0L;
  #L24f23c.  v4:= lcmp(v0, v2);
  #L24f240.  if v4 == 0 then goto L24f24e;
  #L24f244.  v5.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.produced` @type ^`long` := v2 @kind wide;
  #L24f248.  call `produced`(v5, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L24f24e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$a` @kind object;
  #L24f252.  call `innerError`(v0, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$a;.innerError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24f258.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24f26c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.produced` @type ^`long` @kind wide;
  #L24f270.  v2:= 1L;
  #L24f274.  v0:= v0 + v2 @kind long;
  #L24f276.  v4.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.produced` @type ^`long` := v0 @kind wide;
  #L24f27a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$a` @kind object;
  #L24f27e.  call `innerNext`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$a;.innerNext:(Ljava/lang/Object;)V` @kind interface;
  #L24f284.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` v0 @kind this, `n.b.d` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapInner;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;

  #L24f298.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Ln/b/d;)V` @kind virtual;
  #L24f29e.  return @kind void;
}
