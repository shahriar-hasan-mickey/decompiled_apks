record `io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` @kind class @AccessFlag FINAL extends `java.util.ArrayDeque` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.count` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.requested` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.upstream` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` v1 @kind this, `n.b.c` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.<init>:(Ln/b/c;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L25fdf4.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L25fdfa.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L25fdfe.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25fe04.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L25fe08.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L25fe0c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L25fe12.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L25fe16.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L25fe1a.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.count` @type ^`int` := v3;
  #L25fe1e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25fe30.  v0:= 1I;
  #L25fe32.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L25fe36.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25fe3a.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25fe40.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L25fe54.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L25fe58.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25fe5e.  v0:= temp;
  #L25fe60.  if v0 != 0 then goto L25fef8;
  #L25fe64.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25fe68.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25fe6c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25fe72.  v1:= temp @kind wide;
  #L25fe74.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L25fe78.  if v3 == 0 then goto L25fe7e;
  #L25fe7c.  return @kind void;
  #L25fe7e.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.done` @type ^`boolean` @kind boolean;
  #L25fe82.  if v3 == 0 then goto L25fee8;
  #L25fe86.  v3:= 0L;
  #L25fe8a.  v5:= v3 @kind wide;
  #L25fe8c.  v7:= lcmp(v5, v1);
  #L25fe90.  if v7 == 0 then goto L25fec0;
  #L25fe94.  v7:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L25fe98.  if v7 == 0 then goto L25fe9e;
  #L25fe9c.  return @kind void;
  #L25fe9e.  call temp:= `poll`(v9) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L25fea4.  v7:= temp @kind object;
  #L25fea6.  if v7 != 0 then goto L25feb2;
  #L25feaa.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25feb0.  return @kind void;
  #L25feb2.  call `onNext`(v0, v7) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25feb8.  v7:= 1L;
  #L25febc.  v5:= v5 + v7 @kind long;
  #L25febe.  goto L25fe8c;
  #L25fec0.  v7:= lcmp(v5, v3);
  #L25fec4.  if v7 == 0 then goto L25fee8;
  #L25fec8.  v3:= 9223372036854775807L;
  #L25fed2.  v7:= lcmp(v1, v3);
  #L25fed6.  if v7 == 0 then goto L25fee8;
  #L25feda.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25fede.  v2:= -v5 @kind long;
  #L25fee0.  call temp:= `addAndGet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L25fee6.  v1:= temp @kind wide;
  #L25fee8.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L25feec.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L25fef2.  v3:= temp;
  #L25fef4.  if v3 != 0 then goto L25fe74;
  #L25fef8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25ff0c.  v0:= 1I;
  #L25ff0e.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25ff12.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.drain:()V` @kind virtual;
  #L25ff18.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25ff2c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25ff30.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25ff36.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25ff48.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.count` @type ^`int`;
  #L25ff4c.  call temp:= `size`(v2) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L25ff52.  v1:= temp;
  #L25ff54.  if v0 != v1 then goto L25ff5e;
  #L25ff58.  call temp:= `poll`(v2) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L25ff5e.  call temp:= `offer`(v2, v3) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L25ff64.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25ff78.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25ff7c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25ff82.  v0:= temp;
  #L25ff84.  if v0 == 0 then goto L25ffa6;
  #L25ff88.  v2.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L25ff8c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25ff90.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25ff96.  v0:= 9223372036854775807L;
  #L25ffa0.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25ffa6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25ffb8.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25ffbe.  v0:= temp;
  #L25ffc0.  if v0 == 0 then goto L25ffd4;
  #L25ffc4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$TakeLastSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25ffc8.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25ffce.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$TakeLastSubscriber;.drain:()V` @kind virtual;
  #L25ffd4.  return @kind void;
}
