record `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.internal.operators.flowable.f0` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.consumed` @AccessFlag ;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.downstream` @AccessFlag FINAL;
  `n.b.b` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.fallback` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.index` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.task` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.timeout` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.unit` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.upstream` @AccessFlag FINAL;
  `io.reactivex.x$a` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` v1 @kind this, `n.b.c` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.x$a` v6 @kind object, `n.b.b` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.<init>:(Ln/b/c;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x$a;Ln/b/b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L261328.  v0:= 1I;
  #L26132a.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L261330.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L261334.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.timeout` @type ^`long` := v3 @kind wide;
  #L261338.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L26133c.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.worker` @type ^`io.reactivex.x$a` := v6 @kind object;
  #L261340.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.fallback` @type ^`n.b.b` := v7 @kind object;
  #L261344.  v2:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L261348.  call `<init>`(v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L26134e.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v2 @kind object;
  #L261352.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L261356.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26135c.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L261360.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L261364.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L26136a.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L26136e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L261380.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind super;
  #L261386.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L26138a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L261390.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2613a4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2613a8.  v1:= 9223372036854775807L;
  #L2613b2.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L2613b8.  v3:= temp @kind wide;
  #L2613ba.  v0:= lcmp(v3, v1);
  #L2613be.  if v0 == 0 then goto L2613e0;
  #L2613c2.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L2613c6.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L2613cc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2613d0.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2613d6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L2613da.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2613e0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2613f4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2613f8.  v1:= 9223372036854775807L;
  #L261402.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L261408.  v3:= temp @kind wide;
  #L26140a.  v0:= lcmp(v3, v1);
  #L26140e.  if v0 == 0 then goto L261432;
  #L261412.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L261416.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L26141c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261420.  call `onError`(v0, v6) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L261426.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L26142a.  call `dispose`(v6) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L261430.  goto L261438;
  #L261432.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L261438.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L26144c.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L261450.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L261456.  v0:= temp @kind wide;
  #L261458.  v2:= 9223372036854775807L;
  #L261462.  v4:= lcmp(v0, v2);
  #L261466.  if v4 == 0 then goto L2614b4;
  #L26146a.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L26146e.  v3:= 1L;
  #L261472.  v5:= v0 + v3 @kind long;
  #L261476.  call temp:= `compareAndSet`(v2, v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L26147c.  v0:= temp;
  #L26147e.  if v0 != 0 then goto L261484;
  #L261482.  goto L2614b4;
  #L261484.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L261488.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26148e.  v0:= temp @kind object;
  #L261490.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L261494.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L26149a.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.consumed` @type ^`long` @kind wide;
  #L26149e.  v0:= v0 + v3 @kind long;
  #L2614a0.  v7.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.consumed` @type ^`long` := v0 @kind wide;
  #L2614a4.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2614a8.  call `onNext`(v0, v8) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2614ae.  call `startTimeout`(v7, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.startTimeout:(J)V` @kind virtual;
  #L2614b4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2614c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2614cc.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L2614d2.  v0:= temp;
  #L2614d4.  if v0 == 0 then goto L2614de;
  #L2614d8.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Ln/b/d;)V` @kind virtual;
  #L2614de.  return @kind void;
}
procedure `void` `onTimeout`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.onTimeout:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2614f0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2614f4.  v1:= 9223372036854775807L;
  #L2614fe.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L261504.  v4:= temp;
  #L261506.  if v4 == 0 then goto L261552;
  #L26150a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26150e.  call temp:= `cancel`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L261514.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.consumed` @type ^`long` @kind wide;
  #L261518.  v0:= 0L;
  #L26151c.  v2:= lcmp(v4, v0);
  #L261520.  if v2 == 0 then goto L26152a;
  #L261524.  call `produced`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L26152a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.fallback` @type ^`n.b.b` @kind object;
  #L26152e.  v5:= 0I;
  #L261530.  v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.fallback` @type ^`n.b.b` := v5 @kind object;
  #L261534.  v5:= new `io.reactivex.internal.operators.flowable.e0`;
  #L261538.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L26153c.  call `<init>`(v5, v0, v3) @signature `Lio/reactivex/internal/operators/flowable/e0;.<init>:(Ln/b/c;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;)V` @kind direct;
  #L261542.  call `subscribe`(v4, v5) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L261548.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L26154c.  call `dispose`(v4) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L261552.  return @kind void;
}
procedure `void` `startTimeout`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$TimeoutFallbackSubscriber;.startTimeout:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L261564.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L261568.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L26156c.  v2:= new `io.reactivex.internal.operators.flowable.g0`;
  #L261570.  call `<init>`(v2, v5, v4) @signature `Lio/reactivex/internal/operators/flowable/g0;.<init>:(JLio/reactivex/internal/operators/flowable/f0;)V` @kind direct;
  #L261576.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.timeout` @type ^`long` @kind wide;
  #L26157a.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L26157e.  call temp:= `c`(v1, v2, v5, v3) @signature `Lio/reactivex/x$a;.c:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/b;` @kind virtual;
  #L261584.  v5:= temp @kind object;
  #L261586.  call temp:= `replace`(v0, v5) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L26158c.  return @kind void;
}
