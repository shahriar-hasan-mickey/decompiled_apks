record `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.h` @kind interface, `java.lang.Runnable` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.limit` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.outputFused` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.prefetch` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.produced` @AccessFlag ;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @AccessFlag ;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @AccessFlag ;
  `io.reactivex.x$a` `io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v0 @kind this, `io.reactivex.x$a` v1 @kind object, `boolean` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.<init>:(Lio/reactivex/x$a;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2590d0.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L2590d6.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.x$a` := v1 @kind object;
  #L2590da.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.delayError` @type ^`boolean` := v2 @kind boolean;
  #L2590de.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.prefetch` @type ^`int` := v3;
  #L2590e2.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L2590e6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L2590ec.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L2590f0.  v1:= v3 ^> 2;
  #L2590f4.  v3:= v3 - v1 @kind int;
  #L2590f6.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.limit` @type ^`int` := v3;
  #L2590fa.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L25910c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L259110.  if v0 == 0 then goto L259116;
  #L259114.  return @kind void;
  #L259116.  v0:= 1I;
  #L259118.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L25911c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L259120.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L259126.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L25912a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L259130.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L259136.  v0:= temp;
  #L259138.  if v0 != 0 then goto L259146;
  #L25913c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L259140.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L259146.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v2 @kind this, `boolean` v3 , `boolean` v4 , `n.b.c` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.checkTerminated:(ZZLn/b/c;)Z` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L258ff0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L258ff4.  v1:= 1I;
  #L258ff6.  if v0 == 0 then goto L259002;
  #L258ffa.  call `clear`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.clear:()V` @kind virtual;
  #L259000.  return v1;
  #L259002.  if v3 == 0 then goto L259076;
  #L259006.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.delayError` @type ^`boolean` @kind boolean;
  #L25900a.  if v3 == 0 then goto L259038;
  #L25900e.  if v4 == 0 then goto L259076;
  #L259012.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L259016.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L25901a.  if v3 == 0 then goto L259026;
  #L25901e.  call `onError`(v5, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L259024.  goto L25902c;
  #L259026.  call `onComplete`(v5) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25902c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L259030.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L259036.  return v1;
  #L259038.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L25903c.  if v3 == 0 then goto L25905c;
  #L259040.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L259044.  call `clear`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.clear:()V` @kind virtual;
  #L25904a.  call `onError`(v5, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L259050.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L259054.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L25905a.  return v1;
  #L25905c.  if v4 == 0 then goto L259076;
  #L259060.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L259064.  call `onComplete`(v5) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25906a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L25906e.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L259074.  return v1;
  #L259076.  v3:= 0I;
  #L259078.  return v3;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L259158.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L25915c.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L259162.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L25908c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L259090.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L259096.  v0:= temp;
  #L259098.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L259174.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L259178.  if v0 != 0 then goto L259188;
  #L25917c.  v0:= 1I;
  #L25917e.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L259182.  call `trySchedule`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.trySchedule:()V` @kind virtual;
  #L259188.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L25919c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L2591a0.  if v0 == 0 then goto L2591ac;
  #L2591a4.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2591aa.  return @kind void;
  #L2591ac.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L2591b0.  v2:= 1I;
  #L2591b2.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L2591b6.  call `trySchedule`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.trySchedule:()V` @kind virtual;
  #L2591bc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2591d0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L2591d4.  if v0 == 0 then goto L2591da;
  #L2591d8.  return @kind void;
  #L2591da.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @type ^`int`;
  #L2591de.  v1:= 2I;
  #L2591e0.  if v0 != v1 then goto L2591ec;
  #L2591e4.  call `trySchedule`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.trySchedule:()V` @kind virtual;
  #L2591ea.  return @kind void;
  #L2591ec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L2591f0.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L2591f6.  v3:= temp;
  #L2591f8.  if v3 != 0 then goto L25921e;
  #L2591fc.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L259200.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L259206.  v3:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L25920a.  v0:= "Queue is full?!" @kind object;
  #L25920e.  call `<init>`(v3, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L259214.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.error` @type ^`java.lang.Throwable` := v3 @kind object;
  #L259218.  v3:= 1I;
  #L25921a.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.done` @type ^`boolean` := v3 @kind boolean;
  #L25921e.  call `trySchedule`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.trySchedule:()V` @kind virtual;
  #L259224.  return @kind void;
}
procedure `void` `onSubscribe`(`n.b.d` v0 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {

  # return;
}
procedure `java.lang.Object` `poll`() @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {

  # return;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L259238.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25923e.  v0:= temp;
  #L259240.  if v0 == 0 then goto L259254;
  #L259244.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L259248.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25924e.  call `trySchedule`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.trySchedule:()V` @kind virtual;
  #L259254.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2590ac.  v0:= 2I;
  #L2590ae.  v2:= v2 ^& v0 @kind int;
  #L2590b0.  if v2 == 0 then goto L2590bc;
  #L2590b4.  v2:= 1I;
  #L2590b6.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L2590ba.  return v0;
  #L2590bc.  v2:= 0I;
  #L2590be.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L259268.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L25926c.  if v0 == 0 then goto L259278;
  #L259270.  call `runBackfused`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.runBackfused:()V` @kind virtual;
  #L259276.  goto L259290;
  #L259278.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.sourceMode` @type ^`int`;
  #L25927c.  v1:= 1I;
  #L25927e.  if v0 != v1 then goto L25928a;
  #L259282.  call `runSync`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.runSync:()V` @kind virtual;
  #L259288.  goto L259290;
  #L25928a.  call `runAsync`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.runAsync:()V` @kind virtual;
  #L259290.  return @kind void;
}
procedure `void` `runAsync`() @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.runAsync:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `runBackfused`() @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.runBackfused:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `runSync`() @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.runSync:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `trySchedule`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$BaseObserveOnSubscriber;.trySchedule:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L2592a4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2592aa.  v0:= temp;
  #L2592ac.  if v0 == 0 then goto L2592b2;
  #L2592b0.  return @kind void;
  #L2592b2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L2592b6.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/x$a;.b:(Ljava/lang/Runnable;)Lio/reactivex/disposables/b;` @kind virtual;
  #L2592bc.  return @kind void;
}
