record `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.emitted` @AccessFlag ;
  `io.reactivex.internal.operators.flowable.x` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.internal.operators.flowable.x` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;.<init>:(Ln/b/c;Lio/reactivex/internal/operators/flowable/x;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25b3b4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25b3ba.  v0.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25b3be.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25b3d0.  v0:= -9223372036854775808L;
  #L25b3d4.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L25b3da.  v2:= temp @kind wide;
  #L25b3dc.  v4:= lcmp(v2, v0);
  #L25b3e0.  if v4 != 0 then goto L25b3e6;
  #L25b3e4.  return @kind void;
  #L25b3e6.  v0:= 0I;
  #L25b3e8.  throw v0;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25b388.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25b38e.  v0:= temp @kind wide;
  #L25b390.  v2:= -9223372036854775808L;
  #L25b394.  v4:= lcmp(v0, v2);
  #L25b398.  if v4 != 0 then goto L25b3a0;
  #L25b39c.  v0:= 1I;
  #L25b39e.  goto L25b3a2;
  #L25b3a0.  v0:= 0I;
  #L25b3a2.  return v0;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$MulticastSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25b3fc.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25b402.  v0:= temp;
  #L25b404.  if v0 != 0 then goto L25b40a;
  #L25b408.  return @kind void;
  #L25b40a.  call temp:= `b`(v1, v2) @signature `Lio/reactivex/internal/util/b;.b:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25b410.  v2:= 0I;
  #L25b412.  throw v2;
}
