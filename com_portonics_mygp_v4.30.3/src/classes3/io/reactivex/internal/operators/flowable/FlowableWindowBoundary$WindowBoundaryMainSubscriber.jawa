record `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.internal.operators.flowable.j0` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.boundarySubscriber` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.capacityHint` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.internal.queue.MpscLinkedQueue` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.requested` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.stopWindows` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.upstream` @AccessFlag FINAL;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.window` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.windows` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.NEXT_WINDOW` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L262918.  v0:= new `java.lang.Object`;
  #L26291c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L262922.  `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.NEXT_WINDOW` @type ^`java.lang.Object` := v0 @kind object;
  #L262926.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.<init>:(Ln/b/c;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L262938.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L26293e.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L262942.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.capacityHint` @type ^`int` := v2;
  #L262946.  v1:= new `io.reactivex.internal.operators.flowable.j0`;
  #L26294a.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/j0;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;)V` @kind direct;
  #L262950.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`io.reactivex.internal.operators.flowable.j0` := v1 @kind object;
  #L262954.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L262958.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26295e.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L262962.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L262966.  v2:= 1I;
  #L262968.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L26296e.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L262972.  v1:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L262976.  call `<init>`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L26297c.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` := v1 @kind object;
  #L262980.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L262984.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L26298a.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L26298e.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L262992.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L262998.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L26299c.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L2629a0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L2629a6.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L2629aa.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2629bc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L2629c0.  v1:= 0I;
  #L2629c2.  v2:= 1I;
  #L2629c4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L2629ca.  v0:= temp;
  #L2629cc.  if v0 == 0 then goto L2629f4;
  #L2629d0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`io.reactivex.internal.operators.flowable.j0` @kind object;
  #L2629d4.  call `dispose`(v0) @signature `Lio/reactivex/subscribers/a;.dispose:()V` @kind virtual;
  #L2629da.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L2629de.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L2629e4.  v0:= temp;
  #L2629e6.  if v0 != 0 then goto L2629f4;
  #L2629ea.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2629ee.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2629f4.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v12 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L262a08.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L262a0e.  v0:= temp;
  #L262a10.  if v0 == 0 then goto L262a16;
  #L262a14.  return @kind void;
  #L262a16.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L262a1a.  v1:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L262a1e.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L262a22.  v3:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.emitted` @type ^`long` @kind wide;
  #L262a26.  v5:= 1I;
  #L262a28.  v6:= 1I;
  #L262a2a.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L262a2e.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L262a34.  v7:= temp;
  #L262a36.  v8:= 0I;
  #L262a38.  if v7 != 0 then goto L262a48;
  #L262a3c.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L262a42.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L262a46.  return @kind void;
  #L262a48.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L262a4c.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.done` @type ^`boolean` @kind boolean;
  #L262a50.  if v9 == 0 then goto L262a84;
  #L262a54.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L262a5a.  v10:= temp @kind object;
  #L262a5c.  if v10 == 0 then goto L262a84;
  #L262a60.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L262a66.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L262a6c.  v1:= temp @kind object;
  #L262a6e.  if v7 == 0 then goto L262a7c;
  #L262a72.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L262a76.  call `onError`(v7, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L262a7c.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L262a82.  return @kind void;
  #L262a84.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L262a8a.  v10:= temp @kind object;
  #L262a8c.  if v10 != 0 then goto L262a94;
  #L262a90.  v11:= 1I;
  #L262a92.  goto L262a96;
  #L262a94.  v11:= 0I;
  #L262a96.  if v9 == 0 then goto L262ad6;
  #L262a9a.  if v11 == 0 then goto L262ad6;
  #L262a9e.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L262aa4.  v1:= temp @kind object;
  #L262aa6.  if v1 != 0 then goto L262ac0;
  #L262aaa.  if v7 == 0 then goto L262ab8;
  #L262aae.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L262ab2.  call `onComplete`(v7) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L262ab8.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L262abe.  goto L262ad4;
  #L262ac0.  if v7 == 0 then goto L262ace;
  #L262ac4.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L262ac8.  call `onError`(v7, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L262ace.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L262ad4.  return @kind void;
  #L262ad6.  if v11 == 0 then goto L262aee;
  #L262ada.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.emitted` @type ^`long` := v3 @kind wide;
  #L262ade.  v6:= -v6 @kind int;
  #L262ae0.  call temp:= `addAndGet`(v12, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L262ae6.  v6:= temp;
  #L262ae8.  if v6 != 0 then goto L262a2a;
  #L262aec.  return @kind void;
  #L262aee.  v9:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L262af2.  if v10 == v9 then goto L262afe;
  #L262af6.  call `onNext`(v7, v10) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L262afc.  goto L262a2a;
  #L262afe.  if v7 == 0 then goto L262b0c;
  #L262b02.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L262b06.  call `onComplete`(v7) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L262b0c.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.stopWindows` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L262b10.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L262b16.  v7:= temp;
  #L262b18.  if v7 != 0 then goto L262a2a;
  #L262b1c.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.capacityHint` @type ^`int`;
  #L262b20.  call temp:= `L`(v7, v12) @signature `Lio/reactivex/processors/UnicastProcessor;.L:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L262b26.  v7:= temp @kind object;
  #L262b28.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v7 @kind object;
  #L262b2c.  v8:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L262b30.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L262b36.  v8:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L262b3a.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L262b40.  v8:= temp @kind wide;
  #L262b42.  v10:= lcmp(v3, v8);
  #L262b46.  if v10 == 0 then goto L262b5a;
  #L262b4a.  v8:= 1L;
  #L262b4e.  v3:= v3 + v8 @kind long;
  #L262b50.  call `onNext`(v0, v7) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L262b56.  goto L262a2a;
  #L262b5a.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L262b5e.  call temp:= `cancel`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L262b64.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`io.reactivex.internal.operators.flowable.j0` @kind object;
  #L262b68.  call `dispose`(v7) @signature `Lio/reactivex/subscribers/a;.dispose:()V` @kind virtual;
  #L262b6e.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L262b72.  v8:= "Could not deliver a window due to lack of requests" @kind object;
  #L262b76.  call `<init>`(v7, v8) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L262b7c.  call temp:= `addThrowable`(v2, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L262b82.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v5 @kind boolean;
  #L262b86.  goto L262a2a;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.innerComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L262b9c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L262ba0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L262ba6.  v0:= 1I;
  #L262ba8.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L262bac.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L262bb2.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L262bc4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L262bc8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L262bce.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L262bd2.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L262bd8.  v0:= temp;
  #L262bda.  if v0 == 0 then goto L262bec;
  #L262bde.  v2:= 1I;
  #L262be0.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L262be4.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L262bea.  goto L262bf2;
  #L262bec.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L262bf2.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.innerNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L262c04.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L262c08.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.NEXT_WINDOW` @type ^`java.lang.Object` @kind object;
  #L262c0c.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L262c12.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L262c18.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L262c2c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`io.reactivex.internal.operators.flowable.j0` @kind object;
  #L262c30.  call `dispose`(v0) @signature `Lio/reactivex/subscribers/a;.dispose:()V` @kind virtual;
  #L262c36.  v0:= 1I;
  #L262c38.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L262c3c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L262c42.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L262c54.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.boundarySubscriber` @type ^`io.reactivex.internal.operators.flowable.j0` @kind object;
  #L262c58.  call `dispose`(v0) @signature `Lio/reactivex/subscribers/a;.dispose:()V` @kind virtual;
  #L262c5e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L262c62.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L262c68.  v0:= temp;
  #L262c6a.  if v0 == 0 then goto L262c7c;
  #L262c6e.  v2:= 1I;
  #L262c70.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L262c74.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L262c7a.  goto L262c82;
  #L262c7c.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L262c82.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L262c94.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.queue` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L262c98.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L262c9e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.drain:()V` @kind virtual;
  #L262ca4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v3 @kind this, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L262cb8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L262cbc.  v1:= 9223372036854775807L;
  #L262cc6.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;J)Z` @kind static;
  #L262ccc.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L262ce0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L262ce4.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L262cea.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$WindowBoundaryMainSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L262cfc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.windows` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L262d00.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L262d06.  v0:= temp;
  #L262d08.  if v0 != 0 then goto L262d16;
  #L262d0c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$WindowBoundaryMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L262d10.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L262d16.  return @kind void;
}
