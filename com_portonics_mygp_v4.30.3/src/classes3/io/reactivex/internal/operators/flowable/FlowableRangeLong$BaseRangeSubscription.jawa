record `io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.BasicQueueSubscription` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.cancelled` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.end` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` v0 @kind this, `long` v1 , `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.<init>:(JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25b91c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicQueueSubscription;.<init>:()V` @kind direct;
  #L25b922.  v0.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @type ^`long` := v1 @kind wide;
  #L25b926.  v0.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.end` @type ^`long` := v3 @kind wide;
  #L25b92a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L25b93c.  v0:= 1I;
  #L25b93e.  v1.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L25b942.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L25b954.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.end` @type ^`long` @kind wide;
  #L25b958.  v2.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @type ^`long` := v0 @kind wide;
  #L25b95c.  return @kind void;
}
procedure `void` `fastPath`() @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.fastPath:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25b888.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @type ^`long` @kind wide;
  #L25b88c.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.end` @type ^`long` @kind wide;
  #L25b890.  v4:= lcmp(v0, v2);
  #L25b894.  if v4 != 0 then goto L25b89c;
  #L25b898.  v0:= 1I;
  #L25b89a.  goto L25b89e;
  #L25b89c.  v0:= 0I;
  #L25b89e.  return v0;
}
procedure `java.lang.Long` `poll`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.poll:()Ljava/lang/Long;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25b8c8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @type ^`long` @kind wide;
  #L25b8cc.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.end` @type ^`long` @kind wide;
  #L25b8d0.  v4:= lcmp(v0, v2);
  #L25b8d4.  if v4 != 0 then goto L25b8dc;
  #L25b8d8.  v0:= 0I;
  #L25b8da.  return v0 @kind object;
  #L25b8dc.  v2:= 1L;
  #L25b8e0.  v2:= v2 + v0 @kind long;
  #L25b8e2.  v5.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @type ^`long` := v2 @kind wide;
  #L25b8e6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L25b8ec.  v0:= temp @kind object;
  #L25b8ee.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L25b900.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.poll:()Ljava/lang/Long;` @kind virtual;
  #L25b906.  v0:= temp @kind object;
  #L25b908.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25b970.  call temp:= `validate`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25b976.  v0:= temp;
  #L25b978.  if v0 == 0 then goto L25b9b0;
  #L25b97c.  call temp:= `a`(v5, v6) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25b982.  v0:= temp @kind wide;
  #L25b984.  v2:= 0L;
  #L25b988.  v4:= lcmp(v0, v2);
  #L25b98c.  if v4 != 0 then goto L25b9b0;
  #L25b990.  v0:= 9223372036854775807L;
  #L25b99a.  v2:= lcmp(v6, v0);
  #L25b99e.  if v2 != 0 then goto L25b9aa;
  #L25b9a2.  call `fastPath`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.fastPath:()V` @kind virtual;
  #L25b9a8.  goto L25b9b0;
  #L25b9aa.  call `slowPath`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.slowPath:(J)V` @kind virtual;
  #L25b9b0.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L25b8b0.  v1:= v1 ^& 1;
  #L25b8b4.  return v1;
}
procedure `void` `slowPath`(`long` v0 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.slowPath:(J)V` @AccessFlag ABSTRACT {

  # return;
}
