record `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.other` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.requested` @AccessFlag FINAL;
  `n.b.b` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.sampler` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v1 @kind this, `n.b.c` v2 @kind object, `n.b.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.<init>:(Ln/b/c;Ln/b/b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L25d780.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25d786.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L25d78a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25d790.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L25d794.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L25d798.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25d79e.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L25d7a2.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L25d7a6.  v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.sampler` @type ^`n.b.b` := v3 @kind object;
  #L25d7aa.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25d7bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25d7c0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25d7c6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25d7ca.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25d7d0.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25d7e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25d7e8.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25d7ee.  call `completeOther`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.completeOther:()V` @kind virtual;
  #L25d7f4.  return @kind void;
}
procedure `void` `completeMain`() @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.completeMain:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `completeOther`() @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.completeOther:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `emit`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.emit:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L25d808.  v0:= 0I;
  #L25d80a.  call temp:= `getAndSet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25d810.  v0:= temp @kind object;
  #L25d812.  if v0 == 0 then goto L25d866;
  #L25d816.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25d81a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25d820.  v1:= temp @kind wide;
  #L25d822.  v3:= 0L;
  #L25d826.  v5:= lcmp(v1, v3);
  #L25d82a.  if v5 == 0 then goto L25d848;
  #L25d82e.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d832.  call `onNext`(v1, v0) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25d838.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25d83c.  v1:= 1L;
  #L25d840.  call temp:= `e`(v0, v1) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25d846.  goto L25d866;
  #L25d848.  call `cancel`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.cancel:()V` @kind virtual;
  #L25d84e.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d852.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L25d856.  v2:= "Couldn't emit value due to lack of requests!" @kind object;
  #L25d85a.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25d860.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25d866.  return @kind void;
}
procedure `void` `error`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25d878.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25d87c.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25d882.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d886.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25d88c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25d8a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25d8a4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25d8aa.  call `completeMain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.completeMain:()V` @kind virtual;
  #L25d8b0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25d8c4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25d8c8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25d8ce.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d8d2.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25d8d8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L25d8ec.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L25d8f2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25d904.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25d908.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25d90e.  v0:= temp;
  #L25d910.  if v0 == 0 then goto L25d956;
  #L25d914.  v2.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L25d918.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d91c.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25d922.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25d926.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25d92c.  v0:= temp @kind object;
  #L25d92e.  if v0 != 0 then goto L25d956;
  #L25d932.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.sampler` @type ^`n.b.b` @kind object;
  #L25d936.  v1:= new `io.reactivex.internal.operators.flowable.z`;
  #L25d93a.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/z;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;)V` @kind direct;
  #L25d940.  call `subscribe`(v0, v1) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L25d946.  v0:= 9223372036854775807L;
  #L25d950.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25d956.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25d968.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25d96e.  v0:= temp;
  #L25d970.  if v0 == 0 then goto L25d97e;
  #L25d974.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25d978.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25d97e.  return @kind void;
}
procedure `void` `run`() @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.run:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `setOther`(`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber` v3 @kind this, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher$SamplePublisherSubscriber;.setOther:(Ln/b/d;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L25d990.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25d994.  v1:= 9223372036854775807L;
  #L25d99e.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;J)Z` @kind static;
  #L25d9a4.  return @kind void;
}
