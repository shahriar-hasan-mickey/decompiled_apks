record `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.internal.operators.flowable.d0` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.consumed` @AccessFlag ;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.downstream` @AccessFlag FINAL;
  `n.b.b` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.fallback` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.itemTimeoutIndicator` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v1 @kind this, `n.b.c` v2 @kind object, `io.reactivex.d0.k` v3 @kind object, `n.b.b` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/k;Ln/b/b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L260c90.  v0:= 1I;
  #L260c92.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L260c98.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L260c9c.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.itemTimeoutIndicator` @type ^`io.reactivex.d0.k` := v3 @kind object;
  #L260ca0.  v2:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L260ca4.  call `<init>`(v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L260caa.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v2 @kind object;
  #L260cae.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L260cb2.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L260cb8.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L260cbc.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.fallback` @type ^`n.b.b` := v4 @kind object;
  #L260cc0.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L260cc4.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L260cca.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L260cce.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L260ce0.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind super;
  #L260ce6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L260cea.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L260cf0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L260d04.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L260d08.  v1:= 9223372036854775807L;
  #L260d12.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L260d18.  v3:= temp @kind wide;
  #L260d1a.  v0:= lcmp(v3, v1);
  #L260d1e.  if v0 == 0 then goto L260d40;
  #L260d22.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L260d26.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L260d2c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L260d30.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L260d36.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L260d3a.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L260d40.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L260d54.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L260d58.  v1:= 9223372036854775807L;
  #L260d62.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L260d68.  v3:= temp @kind wide;
  #L260d6a.  v0:= lcmp(v3, v1);
  #L260d6e.  if v0 == 0 then goto L260d92;
  #L260d72.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L260d76.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L260d7c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L260d80.  call `onError`(v0, v6) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L260d86.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L260d8a.  call `dispose`(v6) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L260d90.  goto L260d98;
  #L260d92.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L260d98.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L260dac.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L260db0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L260db6.  v0:= temp @kind wide;
  #L260db8.  v2:= 9223372036854775807L;
  #L260dc2.  v4:= lcmp(v0, v2);
  #L260dc6.  if v4 == 0 then goto L260e82;
  #L260dca.  v4:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L260dce.  v5:= 1L;
  #L260dd2.  v7:= v0 + v5 @kind long;
  #L260dd6.  call temp:= `compareAndSet`(v4, v0, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L260ddc.  v0:= temp;
  #L260dde.  if v0 != 0 then goto L260de4;
  #L260de2.  goto L260e82;
  #L260de4.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L260de8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L260dee.  v0:= temp @kind object;
  #L260df0.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L260df4.  if v0 == 0 then goto L260dfe;
  #L260df8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L260dfe.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.consumed` @type ^`long` @kind wide;
  #L260e02.  v0:= v0 + v5 @kind long;
  #L260e04.  v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.consumed` @type ^`long` := v0 @kind wide;
  #L260e08.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L260e0c.  call `onNext`(v0, v10) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L260e12.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.itemTimeoutIndicator` @type ^`io.reactivex.d0.k` @kind object;
  #L260e16.  call temp:= `apply`(v0, v10) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L260e1c.  v10:= temp @kind object;
  #L260e1e.  v0:= "The itemTimeoutIndicator returned a null Publisher." @kind object;
  #L260e22.  call temp:= `e`(v10, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L260e28.  v10:= temp @kind object;
  #L260e2a.  v10:= (`n.b.b`) v10 @kind object;
  #L260e2e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer`;
  #L260e32.  call `<init>`(v0, v7, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutConsumer;.<init>:(JLio/reactivex/internal/operators/flowable/d0;)V` @kind direct;
  #L260e38.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L260e3c.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L260e42.  v1:= temp;
  #L260e44.  if v1 == 0 then goto L260e4e;
  #L260e48.  call `subscribe`(v10, v0) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L260e4e.  return @kind void;
  #L260e50.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L260e52.  call `b`(v10) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L260e58.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L260e5c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L260e62.  v0:= temp @kind object;
  #L260e64.  v0:= (`n.b.d`) v0 @kind object;
  #L260e68.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L260e6e.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L260e72.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L260e78.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L260e7c.  call `onError`(v0, v10) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L260e82.  return @kind void;
  catch `java.lang.Throwable` @[L260e12..L260e2e] goto L260e50;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L260ea0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L260ea4.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L260eaa.  v0:= temp;
  #L260eac.  if v0 == 0 then goto L260eb6;
  #L260eb0.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Ln/b/d;)V` @kind virtual;
  #L260eb6.  return @kind void;
}
procedure `void` `onTimeout`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.onTimeout:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L260ec8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L260ecc.  v1:= 9223372036854775807L;
  #L260ed6.  call temp:= `compareAndSet`(v0, v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L260edc.  v5:= temp;
  #L260ede.  if v5 == 0 then goto L260f20;
  #L260ee2.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L260ee6.  call temp:= `cancel`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L260eec.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.fallback` @type ^`n.b.b` @kind object;
  #L260ef0.  v6:= 0I;
  #L260ef2.  v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.fallback` @type ^`n.b.b` := v6 @kind object;
  #L260ef6.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.consumed` @type ^`long` @kind wide;
  #L260efa.  v2:= 0L;
  #L260efe.  v6:= lcmp(v0, v2);
  #L260f02.  if v6 == 0 then goto L260f0c;
  #L260f06.  call `produced`(v4, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L260f0c.  v6:= new `io.reactivex.internal.operators.flowable.e0`;
  #L260f10.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L260f14.  call `<init>`(v6, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/e0;.<init>:(Ln/b/c;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;)V` @kind direct;
  #L260f1a.  call `subscribe`(v5, v6) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L260f20.  return @kind void;
}
procedure `void` `onTimeoutError`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v3 @kind this, `long` v4 , `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.onTimeoutError:(JLjava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L260f34.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.index` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L260f38.  v1:= 9223372036854775807L;
  #L260f42.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L260f48.  v4:= temp;
  #L260f4a.  if v4 == 0 then goto L260f64;
  #L260f4e.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L260f52.  call temp:= `cancel`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L260f58.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L260f5c.  call `onError`(v4, v6) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L260f62.  goto L260f6a;
  #L260f64.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L260f6a.  return @kind void;
}
procedure `void` `startFirstTimeout`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber` v3 @kind this, `n.b.b` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutFallbackSubscriber;.startFirstTimeout:(Ln/b/b;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L260f7c.  if v4 == 0 then goto L260fa4;
  #L260f80.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer`;
  #L260f84.  v1:= 0L;
  #L260f88.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutConsumer;.<init>:(JLio/reactivex/internal/operators/flowable/d0;)V` @kind direct;
  #L260f8e.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L260f92.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L260f98.  v1:= temp;
  #L260f9a.  if v1 == 0 then goto L260fa4;
  #L260f9e.  call `subscribe`(v4, v0) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L260fa4.  return @kind void;
}
