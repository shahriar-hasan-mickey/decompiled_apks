record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.cancelled` @AccessFlag VOLATILE;
  `java.util.Deque` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.deque` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.error` @AccessFlag ;
  `io.reactivex.d0.a` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.onOverflow` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.BackpressureOverflowStrategy` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.strategy` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.a` v2 @kind object, `io.reactivex.BackpressureOverflowStrategy` v3 @kind object, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/a;Lio/reactivex/BackpressureOverflowStrategy;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L259ef0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L259ef6.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L259efa.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.onOverflow` @type ^`io.reactivex.d0.a` := v2 @kind object;
  #L259efe.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.strategy` @type ^`io.reactivex.BackpressureOverflowStrategy` := v3 @kind object;
  #L259f02.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.bufferSize` @type ^`long` := v4 @kind wide;
  #L259f06.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L259f0a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L259f10.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L259f14.  v1:= new `java.util.ArrayDeque`;
  #L259f18.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L259f1e.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.deque` @type ^`java.util.Deque` := v1 @kind object;
  #L259f22.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L259f34.  v0:= 1I;
  #L259f36.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L259f3a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.upstream` @type ^`n.b.d` @kind object;
  #L259f3e.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L259f44.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L259f4a.  v0:= temp;
  #L259f4c.  if v0 != 0 then goto L259f5a;
  #L259f50.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.deque` @type ^`java.util.Deque` @kind object;
  #L259f54.  call `clear`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.clear:(Ljava/util/Deque;)V` @kind virtual;
  #L259f5a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v1 @kind this, `java.util.Deque` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.clear:(Ljava/util/Deque;)V` @AccessFlag  {
    temp;
    v0;

  #L259f6c.  @monitorenter v2
  #L259f6e.  call `clear`(v2) @signature `Ljava/util/Deque;.clear:()V` @kind interface;
  #L259f74.  @monitorexit v2
  #L259f76.  return @kind void;
  #L259f78.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L259f7a.  @monitorexit v2
  #L259f7c.  throw v0;
  catch `java.lang.Throwable` @[L259f6e..L259f7c] goto L259f78;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L259f9c.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L259fa2.  v0:= temp;
  #L259fa4.  if v0 == 0 then goto L259faa;
  #L259fa8.  return @kind void;
  #L259faa.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.deque` @type ^`java.util.Deque` @kind object;
  #L259fae.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L259fb2.  v2:= 1I;
  #L259fb4.  v3:= 1I;
  #L259fb6.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L259fba.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L259fc0.  v4:= temp @kind wide;
  #L259fc2.  v6:= 0L;
  #L259fc6.  v8:= v6 @kind wide;
  #L259fc8.  v10:= lcmp(v8, v4);
  #L259fcc.  if v10 == 0 then goto L25a03a;
  #L259fd0.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L259fd4.  if v10 == 0 then goto L259fe0;
  #L259fd8.  call `clear`(v13, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.clear:(Ljava/util/Deque;)V` @kind virtual;
  #L259fde.  return @kind void;
  #L259fe0.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.done` @type ^`boolean` @kind boolean;
  #L259fe4.  @monitorenter v0
  #L259fe6.  call temp:= `poll`(v0) @signature `Ljava/util/Deque;.poll:()Ljava/lang/Object;` @kind interface;
  #L259fec.  v11:= temp @kind object;
  #L259fee.  @monitorexit v0
  #L259ff0.  if v11 != 0 then goto L259ff8;
  #L259ff4.  v12:= 1I;
  #L259ff6.  goto L259ffa;
  #L259ff8.  v12:= 0I;
  #L259ffa.  if v10 == 0 then goto L25a020;
  #L259ffe.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L25a002.  if v10 == 0 then goto L25a014;
  #L25a006.  call `clear`(v13, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.clear:(Ljava/util/Deque;)V` @kind virtual;
  #L25a00c.  call `onError`(v1, v10) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25a012.  return @kind void;
  #L25a014.  if v12 == 0 then goto L25a020;
  #L25a018.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25a01e.  return @kind void;
  #L25a020.  if v12 == 0 then goto L25a026;
  #L25a024.  goto L25a03a;
  #L25a026.  call `onNext`(v1, v11) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25a02c.  v10:= 1L;
  #L25a030.  v8:= v8 + v10 @kind long;
  #L25a032.  goto L259fc8;
  #L25a034.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25a036.  @monitorexit v0
  #L25a038.  throw v1;
  #L25a03a.  v10:= lcmp(v8, v4);
  #L25a03e.  if v10 != 0 then goto L25a08e;
  #L25a042.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L25a046.  if v4 == 0 then goto L25a052;
  #L25a04a.  call `clear`(v13, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.clear:(Ljava/util/Deque;)V` @kind virtual;
  #L25a050.  return @kind void;
  #L25a052.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.done` @type ^`boolean` @kind boolean;
  #L25a056.  @monitorenter v0
  #L25a058.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L25a05e.  v5:= temp;
  #L25a060.  @monitorexit v0
  #L25a062.  if v4 == 0 then goto L25a08e;
  #L25a066.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L25a06a.  if v4 == 0 then goto L25a07c;
  #L25a06e.  call `clear`(v13, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.clear:(Ljava/util/Deque;)V` @kind virtual;
  #L25a074.  call `onError`(v1, v4) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25a07a.  return @kind void;
  #L25a07c.  if v5 == 0 then goto L25a08e;
  #L25a080.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25a086.  return @kind void;
  #L25a088.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25a08a.  @monitorexit v0
  #L25a08c.  throw v1;
  #L25a08e.  v4:= lcmp(v8, v6);
  #L25a092.  if v4 == 0 then goto L25a0a0;
  #L25a096.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25a09a.  call temp:= `e`(v4, v8) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25a0a0.  v3:= -v3 @kind int;
  #L25a0a2.  call temp:= `addAndGet`(v13, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L25a0a8.  v3:= temp;
  #L25a0aa.  if v3 != 0 then goto L259fb6;
  #L25a0ae.  return @kind void;
  catch `java.lang.Throwable` @[L259fe6..L259ff0] goto L25a034;
  catch `java.lang.Throwable` @[L25a036..L25a038] goto L25a034;
  catch `java.lang.Throwable` @[L25a058..L25a062] goto L25a088;
  catch `java.lang.Throwable` @[L25a08a..L25a08c] goto L25a088;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25a0e8.  v0:= 1I;
  #L25a0ea.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25a0ee.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.drain:()V` @kind virtual;
  #L25a0f4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25a108.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.done` @type ^`boolean` @kind boolean;
  #L25a10c.  if v0 == 0 then goto L25a118;
  #L25a110.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25a116.  return @kind void;
  #L25a118.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L25a11c.  v2:= 1I;
  #L25a11e.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L25a122.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.drain:()V` @kind virtual;
  #L25a128.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L25a13c.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.done` @type ^`boolean` @kind boolean;
  #L25a140.  if v0 == 0 then goto L25a146;
  #L25a144.  return @kind void;
  #L25a146.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.deque` @type ^`java.util.Deque` @kind object;
  #L25a14a.  @monitorenter v0
  #L25a14c.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L25a152.  v1:= temp;
  #L25a154.  v1:= (`long`) v1 @kind i2l;
  #L25a156.  v3:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.bufferSize` @type ^`long` @kind wide;
  #L25a15a.  v5:= 0I;
  #L25a15c.  v6:= 1I;
  #L25a15e.  v7:= lcmp(v1, v3);
  #L25a162.  if v7 != 0 then goto L25a1a4;
  #L25a166.  v1:= `@@io.reactivex.internal.operators.flowable.v.a` @type ^`int`[] @kind object;
  #L25a16a.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.strategy` @type ^`io.reactivex.BackpressureOverflowStrategy` @kind object;
  #L25a16e.  call temp:= `ordinal`(v2) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L25a174.  v2:= temp;
  #L25a176.  v1:= v1[v2];
  #L25a17a.  if v1 == v6 then goto L25a194;
  #L25a17e.  v2:= 2I;
  #L25a180.  if v1 == v2 then goto L25a186;
  #L25a184.  goto L25a1ac;
  #L25a186.  call temp:= `poll`(v0) @signature `Ljava/util/Deque;.poll:()Ljava/lang/Object;` @kind interface;
  #L25a18c.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L25a192.  goto L25a1a0;
  #L25a194.  call temp:= `pollLast`(v0) @signature `Ljava/util/Deque;.pollLast:()Ljava/lang/Object;` @kind interface;
  #L25a19a.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L25a1a0.  v5:= 1I;
  #L25a1a2.  goto L25a1aa;
  #L25a1a4.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L25a1aa.  v6:= 0I;
  #L25a1ac.  @monitorexit v0
  #L25a1ae.  if v5 == 0 then goto L25a1dc;
  #L25a1b2.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.onOverflow` @type ^`io.reactivex.d0.a` @kind object;
  #L25a1b6.  if v9 == 0 then goto L25a202;
  #L25a1ba.  call `run`(v9) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L25a1c0.  goto L25a202;
  #L25a1c2.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25a1c4.  call `b`(v9) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25a1ca.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25a1ce.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25a1d4.  call `onError`(v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L25a1da.  goto L25a202;
  #L25a1dc.  if v6 == 0 then goto L25a1fc;
  #L25a1e0.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25a1e4.  call `cancel`(v9) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25a1ea.  v9:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L25a1ee.  call `<init>`(v9) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L25a1f4.  call `onError`(v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L25a1fa.  goto L25a202;
  #L25a1fc.  call `drain`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.drain:()V` @kind virtual;
  #L25a202.  return @kind void;
  #L25a204.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25a206.  @monitorexit v0
  #L25a208.  throw v9;
  catch `java.lang.Throwable` @[L25a14c..L25a1ae] goto L25a204;
  catch `java.lang.Throwable` @[L25a1ba..L25a1c0] goto L25a1c2;
  catch `java.lang.Throwable` @[L25a206..L25a208] goto L25a204;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25a23c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25a240.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25a246.  v0:= temp;
  #L25a248.  if v0 == 0 then goto L25a26a;
  #L25a24c.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L25a250.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25a254.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25a25a.  v0:= 9223372036854775807L;
  #L25a264.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25a26a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25a27c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25a282.  v0:= temp;
  #L25a284.  if v0 == 0 then goto L25a298;
  #L25a288.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25a28c.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25a292.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber;.drain:()V` @kind virtual;
  #L25a298.  return @kind void;
}
