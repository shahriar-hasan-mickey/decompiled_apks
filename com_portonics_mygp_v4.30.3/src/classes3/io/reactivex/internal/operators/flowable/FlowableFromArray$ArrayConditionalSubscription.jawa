record `io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription` @kind class {
  `io.reactivex.e0.a.a` `io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription` v0 @kind this, `io.reactivex.e0.a.a` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArrayConditionalSubscription;.<init>:(Lio/reactivex/e0/a/a;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L255048.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$BaseArraySubscription;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L25504e.  v0.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.downstream` @type ^`io.reactivex.e0.a.a` := v1 @kind object;
  #L255052.  return @kind void;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArrayConditionalSubscription;.fastPath:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L255064.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.array` @type ^`java.lang.Object`[] @kind object;
  #L255068.  v1:= length @variable v0;
  #L25506a.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L25506e.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @type ^`int`;
  #L255072.  if v3 == v1 then goto L2550aa;
  #L255076.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25507a.  if v4 == 0 then goto L255080;
  #L25507e.  return @kind void;
  #L255080.  v4:= v0[v3] @kind object;
  #L255084.  if v4 != 0 then goto L25509e;
  #L255088.  v0:= new `java.lang.NullPointerException`;
  #L25508c.  v1:= "array element is null" @kind object;
  #L255090.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L255096.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25509c.  return @kind void;
  #L25509e.  call temp:= `tryOnNext`(v2, v4) @signature `Lio/reactivex/e0/a/a;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L2550a4.  v3:= v3 + 1;
  #L2550a8.  goto L255072;
  #L2550aa.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L2550ae.  if v0 == 0 then goto L2550b4;
  #L2550b2.  return @kind void;
  #L2550b4.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2550ba.  return @kind void;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription` v10 @kind this, `long` v11 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$ArrayConditionalSubscription;.slowPath:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2550cc.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.array` @type ^`java.lang.Object`[] @kind object;
  #L2550d0.  v1:= length @variable v0;
  #L2550d2.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @type ^`int`;
  #L2550d6.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L2550da.  v4:= 0L;
  #L2550de.  v6:= v4 @kind wide;
  #L2550e0.  v8:= lcmp(v6, v11);
  #L2550e4.  if v8 == 0 then goto L25512c;
  #L2550e8.  if v2 == v1 then goto L25512c;
  #L2550ec.  v8:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L2550f0.  if v8 == 0 then goto L2550f6;
  #L2550f4.  return @kind void;
  #L2550f6.  v8:= v0[v2] @kind object;
  #L2550fa.  if v8 != 0 then goto L255114;
  #L2550fe.  v11:= new `java.lang.NullPointerException`;
  #L255102.  v12:= "array element is null" @kind object;
  #L255106.  call `<init>`(v11, v12) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25510c.  call `onError`(v3, v11) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L255112.  return @kind void;
  #L255114.  call temp:= `tryOnNext`(v3, v8) @signature `Lio/reactivex/e0/a/a;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L25511a.  v8:= temp;
  #L25511c.  if v8 == 0 then goto L255126;
  #L255120.  v8:= 1L;
  #L255124.  v6:= v6 + v8 @kind long;
  #L255126.  v2:= v2 + 1;
  #L25512a.  goto L2550e0;
  #L25512c.  if v2 != v1 then goto L255140;
  #L255130.  v11:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.cancelled` @type ^`boolean` @kind boolean;
  #L255134.  if v11 != 0 then goto L25513e;
  #L255138.  call `onComplete`(v3) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25513e.  return @kind void;
  #L255140.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L255146.  v11:= temp @kind wide;
  #L255148.  v8:= lcmp(v6, v11);
  #L25514c.  if v8 != 0 then goto L2550e0;
  #L255150.  v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription.index` @type ^`int` := v2;
  #L255154.  v11:= -v6 @kind long;
  #L255156.  call temp:= `addAndGet`(v10, v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L25515c.  v11:= temp @kind wide;
  #L25515e.  v6:= lcmp(v11, v4);
  #L255162.  if v6 != 0 then goto L2550de;
  #L255166.  return @kind void;
}
