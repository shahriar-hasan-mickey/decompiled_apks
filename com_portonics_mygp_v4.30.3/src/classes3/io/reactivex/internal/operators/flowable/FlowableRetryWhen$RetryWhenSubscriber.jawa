record `io.reactivex.internal.operators.flowable.FlowableRetryWhen$RetryWhenSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` @kind class {
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRetryWhen$RetryWhenSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRetryWhen$RetryWhenSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.processors.a` v2 @kind object, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryWhen$RetryWhenSubscriber;.<init>:(Ln/b/c;Lio/reactivex/processors/a;Ln/b/d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25d5dc.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.<init>:(Ln/b/c;Lio/reactivex/processors/a;Ln/b/d;)V` @kind direct;
  #L25d5e2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRetryWhen$RetryWhenSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryWhen$RetryWhenSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25d5f4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.receiver` @type ^`n.b.d` @kind object;
  #L25d5f8.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25d5fe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d602.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25d608.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRetryWhen$RetryWhenSubscriber` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryWhen$RetryWhenSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L25d61c.  call `again`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.again:(Ljava/lang/Object;)V` @kind virtual;
  #L25d622.  return @kind void;
}
