record `io.reactivex.internal.operators.flowable.f` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.b` @kind class {
  `io.reactivex.d0.g` `io.reactivex.internal.operators.flowable.f.g` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.operators.flowable.f.h` @AccessFlag FINAL;
  `io.reactivex.d0.a` `io.reactivex.internal.operators.flowable.f.i` @AccessFlag FINAL;
  `io.reactivex.d0.a` `io.reactivex.internal.operators.flowable.f.j` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.f` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.g` v2 @kind object, `io.reactivex.d0.g` v3 @kind object, `io.reactivex.d0.a` v4 @kind object, `io.reactivex.d0.a` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/f;.<init>:(Ln/b/c;Lio/reactivex/d0/g;Lio/reactivex/d0/g;Lio/reactivex/d0/a;Lio/reactivex/d0/a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L251b64.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/b;.<init>:(Ln/b/c;)V` @kind direct;
  #L251b6a.  v0.`io.reactivex.internal.operators.flowable.f.g` @type ^`io.reactivex.d0.g` := v2 @kind object;
  #L251b6e.  v0.`io.reactivex.internal.operators.flowable.f.h` @type ^`io.reactivex.d0.g` := v3 @kind object;
  #L251b72.  v0.`io.reactivex.internal.operators.flowable.f.i` @type ^`io.reactivex.d0.a` := v4 @kind object;
  #L251b76.  v0.`io.reactivex.internal.operators.flowable.f.j` @type ^`io.reactivex.d0.a` := v5 @kind object;
  #L251b7a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.f` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/f;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L251b8c.  v0:= v1.`io.reactivex.internal.subscribers.b.e` @type ^`boolean` @kind boolean;
  #L251b90.  if v0 == 0 then goto L251b96;
  #L251b94.  return @kind void;
  #L251b96.  v0:= v1.`io.reactivex.internal.operators.flowable.f.i` @type ^`io.reactivex.d0.a` @kind object;
  #L251b9a.  call `run`(v0) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L251ba0.  v0:= 1I;
  #L251ba2.  v1.`io.reactivex.internal.subscribers.b.e` @type ^`boolean` := v0 @kind boolean;
  #L251ba6.  v0:= v1.`io.reactivex.internal.subscribers.b.b` @type ^`n.b.c` @kind object;
  #L251baa.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L251bb0.  v0:= v1.`io.reactivex.internal.operators.flowable.f.j` @type ^`io.reactivex.d0.a` @kind object;
  #L251bb4.  call `run`(v0) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L251bba.  goto L251bca;
  #L251bbc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L251bbe.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L251bc4.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L251bca.  return @kind void;
  #L251bcc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L251bce.  call `c`(v1, v0) @signature `Lio/reactivex/internal/subscribers/b;.c:(Ljava/lang/Throwable;)V` @kind virtual;
  #L251bd4.  return @kind void;
  catch `java.lang.Throwable` @[L251b96..L251ba0] goto L251bcc;
  catch `java.lang.Throwable` @[L251bb0..L251bba] goto L251bbc;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.f` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/f;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L251c00.  v0:= v6.`io.reactivex.internal.subscribers.b.e` @type ^`boolean` @kind boolean;
  #L251c04.  if v0 == 0 then goto L251c10;
  #L251c08.  call `t`(v7) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L251c0e.  return @kind void;
  #L251c10.  v0:= 1I;
  #L251c12.  v6.`io.reactivex.internal.subscribers.b.e` @type ^`boolean` := v0 @kind boolean;
  #L251c16.  v1:= 0I;
  #L251c18.  v2:= v6.`io.reactivex.internal.operators.flowable.f.h` @type ^`io.reactivex.d0.g` @kind object;
  #L251c1c.  call `accept`(v2, v7) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L251c22.  goto L251c50;
  #L251c24.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L251c26.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L251c2c.  v3:= v6.`io.reactivex.internal.subscribers.b.b` @type ^`n.b.c` @kind object;
  #L251c30.  v4:= new `io.reactivex.exceptions.CompositeException`;
  #L251c34.  v5:= 2I;
  #L251c36.  v5:= new `java.lang.Throwable`[v5];
  #L251c3a.  v5[v1]:= v7 @kind object;
  #L251c3e.  v5[v0]:= v2 @kind object;
  #L251c42.  call `<init>`(v4, v5) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L251c48.  call `onError`(v3, v4) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L251c4e.  v0:= 0I;
  #L251c50.  if v0 == 0 then goto L251c5e;
  #L251c54.  v0:= v6.`io.reactivex.internal.subscribers.b.b` @type ^`n.b.c` @kind object;
  #L251c58.  call `onError`(v0, v7) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L251c5e.  v7:= v6.`io.reactivex.internal.operators.flowable.f.j` @type ^`io.reactivex.d0.a` @kind object;
  #L251c62.  call `run`(v7) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L251c68.  goto L251c78;
  #L251c6a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L251c6c.  call `b`(v7) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L251c72.  call `t`(v7) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L251c78.  return @kind void;
  catch `java.lang.Throwable` @[L251c18..L251c22] goto L251c24;
  catch `java.lang.Throwable` @[L251c5e..L251c68] goto L251c6a;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/f;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L251ca4.  v0:= v1.`io.reactivex.internal.subscribers.b.e` @type ^`boolean` @kind boolean;
  #L251ca8.  if v0 == 0 then goto L251cae;
  #L251cac.  return @kind void;
  #L251cae.  v0:= v1.`io.reactivex.internal.subscribers.b.f` @type ^`int`;
  #L251cb2.  if v0 == 0 then goto L251cc4;
  #L251cb6.  v2:= v1.`io.reactivex.internal.subscribers.b.b` @type ^`n.b.c` @kind object;
  #L251cba.  v0:= 0I;
  #L251cbc.  call `onNext`(v2, v0) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L251cc2.  return @kind void;
  #L251cc4.  v0:= v1.`io.reactivex.internal.operators.flowable.f.g` @type ^`io.reactivex.d0.g` @kind object;
  #L251cc8.  call `accept`(v0, v2) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L251cce.  v0:= v1.`io.reactivex.internal.subscribers.b.b` @type ^`n.b.c` @kind object;
  #L251cd2.  call `onNext`(v0, v2) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L251cd8.  return @kind void;
  #L251cda.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L251cdc.  call `c`(v1, v2) @signature `Lio/reactivex/internal/subscribers/b;.c:(Ljava/lang/Throwable;)V` @kind virtual;
  #L251ce2.  return @kind void;
  catch `java.lang.Throwable` @[L251cc4..L251cce] goto L251cda;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.f` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/f;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L251a54.  v0:= 0I;
  #L251a56.  v1:= 2I;
  #L251a58.  v2:= 1I;
  #L251a5a.  v3:= v6.`io.reactivex.internal.subscribers.b.d` @type ^`io.reactivex.e0.a.g` @kind object;
  #L251a5e.  call temp:= `poll`(v3) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L251a64.  v3:= temp @kind object;
  #L251a66.  if v3 == 0 then goto L251ac4;
  #L251a6a.  v4:= v6.`io.reactivex.internal.operators.flowable.f.g` @type ^`io.reactivex.d0.g` @kind object;
  #L251a6e.  call `accept`(v4, v3) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L251a74.  v0:= v6.`io.reactivex.internal.operators.flowable.f.j` @type ^`io.reactivex.d0.a` @kind object;
  #L251a78.  call `run`(v0) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L251a7e.  goto L251ae0;
  #L251a80.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L251a82.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L251a88.  v4:= v6.`io.reactivex.internal.operators.flowable.f.h` @type ^`io.reactivex.d0.g` @kind object;
  #L251a8c.  call `accept`(v4, v3) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L251a92.  call temp:= `c`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.c:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @kind static;
  #L251a98.  v0:= temp @kind object;
  #L251a9a.  throw v0;
  #L251a9c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L251a9e.  v5:= new `io.reactivex.exceptions.CompositeException`;
  #L251aa2.  v1:= new `java.lang.Throwable`[v1];
  #L251aa6.  v1[v0]:= v3 @kind object;
  #L251aaa.  v1[v2]:= v4 @kind object;
  #L251aae.  call `<init>`(v5, v1) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L251ab4.  throw v5;
  #L251ab6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L251ab8.  v1:= v6.`io.reactivex.internal.operators.flowable.f.j` @type ^`io.reactivex.d0.a` @kind object;
  #L251abc.  call `run`(v1) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L251ac2.  throw v0;
  #L251ac4.  v0:= v6.`io.reactivex.internal.subscribers.b.f` @type ^`int`;
  #L251ac8.  if v0 != v2 then goto L251ae0;
  #L251acc.  v0:= v6.`io.reactivex.internal.operators.flowable.f.i` @type ^`io.reactivex.d0.a` @kind object;
  #L251ad0.  call `run`(v0) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L251ad6.  v0:= v6.`io.reactivex.internal.operators.flowable.f.j` @type ^`io.reactivex.d0.a` @kind object;
  #L251ada.  call `run`(v0) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L251ae0.  return v3 @kind object;
  #L251ae2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L251ae4.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L251aea.  v4:= v6.`io.reactivex.internal.operators.flowable.f.h` @type ^`io.reactivex.d0.g` @kind object;
  #L251aee.  call `accept`(v4, v3) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L251af4.  call temp:= `c`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.c:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @kind static;
  #L251afa.  v0:= temp @kind object;
  #L251afc.  throw v0;
  #L251afe.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L251b00.  v5:= new `io.reactivex.exceptions.CompositeException`;
  #L251b04.  v1:= new `java.lang.Throwable`[v1];
  #L251b08.  v1[v0]:= v3 @kind object;
  #L251b0c.  v1[v2]:= v4 @kind object;
  #L251b10.  call `<init>`(v5, v1) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L251b16.  throw v5;
  catch `java.lang.Throwable` @[L251a5a..L251a66] goto L251ae2;
  catch `java.lang.Throwable` @[L251a6a..L251a74] goto L251a80;
  catch `java.lang.Throwable` @[L251a82..L251a88] goto L251ab6;
  catch `java.lang.Throwable` @[L251a88..L251a92] goto L251a9c;
  catch `java.lang.Throwable` @[L251a92..L251ab6] goto L251ab6;
  catch `java.lang.Throwable` @[L251aea..L251af4] goto L251afe;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.f` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/f;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L251a38.  call temp:= `d`(v0, v1) @signature `Lio/reactivex/internal/subscribers/b;.d:(I)I` @kind virtual;
  #L251a3e.  v1:= temp;
  #L251a40.  return v1;
}
