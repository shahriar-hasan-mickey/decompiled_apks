record `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.done` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.fusionMode` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.id` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.produced` @AccessFlag ;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.queue` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25247c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L252482.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.id` @type ^`long` := v2 @kind wide;
  #L252486.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` := v1 @kind object;
  #L25248a.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber.bufferSize` @type ^`int`;
  #L25248e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.bufferSize` @type ^`int` := v1;
  #L252492.  v1:= v1 ^> 2;
  #L252496.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.limit` @type ^`int` := v1;
  #L25249a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L2524ac.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2524b2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L252454.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25245a.  v0:= temp @kind object;
  #L25245c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L252460.  if v0 != v1 then goto L252468;
  #L252464.  v0:= 1I;
  #L252466.  goto L25246a;
  #L252468.  v0:= 0I;
  #L25246a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2524c4.  v0:= 1I;
  #L2524c6.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L2524ca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` @kind object;
  #L2524ce.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.drain:()V` @kind virtual;
  #L2524d4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2524e8.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L2524ec.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2524f2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` @kind object;
  #L2524f6.  call `innerError`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.innerError:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L2524fc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L252510.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.fusionMode` @type ^`int`;
  #L252514.  v1:= 2I;
  #L252516.  if v0 == v1 then goto L252526;
  #L25251a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` @kind object;
  #L25251e.  call `tryEmit`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.tryEmit:(Ljava/lang/Object;Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;)V` @kind virtual;
  #L252524.  goto L252530;
  #L252526.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` @kind object;
  #L25252a.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.drain:()V` @kind virtual;
  #L252530.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v3 @kind this, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L252544.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L25254a.  v0:= temp;
  #L25254c.  if v0 == 0 then goto L2525a0;
  #L252550.  v0:= instanceof @variable v4 @type ^`io.reactivex.e0.a.g` @kind boolean;
  #L252554.  if v0 == 0 then goto L252594;
  #L252558.  v0:= v4 @kind object;
  #L25255a.  v0:= (`io.reactivex.e0.a.g`) v0 @kind object;
  #L25255e.  v1:= 7I;
  #L252560.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L252566.  v1:= temp;
  #L252568.  v2:= 1I;
  #L25256a.  if v1 != v2 then goto L252586;
  #L25256e.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.fusionMode` @type ^`int` := v1;
  #L252572.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L252576.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L25257a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber` @kind object;
  #L25257e.  call `drain`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$MergeSubscriber;.drain:()V` @kind virtual;
  #L252584.  return @kind void;
  #L252586.  v2:= 2I;
  #L252588.  if v1 != v2 then goto L252594;
  #L25258c.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.fusionMode` @type ^`int` := v1;
  #L252590.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L252594.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.bufferSize` @type ^`int`;
  #L252598.  v0:= (`long`) v0 @kind i2l;
  #L25259a.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2525a0.  return @kind void;
}
procedure `void` `requestMore`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$InnerSubscriber;.requestMore:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2525b4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.fusionMode` @type ^`int`;
  #L2525b8.  v1:= 1I;
  #L2525ba.  if v0 == v1 then goto L2525f2;
  #L2525be.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.produced` @type ^`long` @kind wide;
  #L2525c2.  v0:= v0 + v4 @kind long;
  #L2525c4.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.limit` @type ^`int`;
  #L2525c8.  v4:= (`long`) v4 @kind i2l;
  #L2525ca.  v2:= lcmp(v0, v4);
  #L2525ce.  if v2 < 0 then goto L2525ee;
  #L2525d2.  v4:= 0L;
  #L2525d6.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.produced` @type ^`long` := v4 @kind wide;
  #L2525da.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2525e0.  v4:= temp @kind object;
  #L2525e2.  v4:= (`n.b.d`) v4 @kind object;
  #L2525e6.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2525ec.  goto L2525f2;
  #L2525ee.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$InnerSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L2525f2.  return @kind void;
}
