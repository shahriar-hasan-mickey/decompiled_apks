record `io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber` @kind class @AccessFlag FINAL extends `java.util.ArrayDeque` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.downstream` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.skip` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.<init>:(Ln/b/c;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25ec98.  call `<init>`(v0, v2) @signature `Ljava/util/ArrayDeque;.<init>:(I)V` @kind direct;
  #L25ec9e.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25eca2.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.skip` @type ^`int` := v2;
  #L25eca6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25ecb8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25ecbc.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25ecc2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25ecd4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25ecd8.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25ecde.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25ecf0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25ecf4.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25ecfa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L25ed0c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.skip` @type ^`int`;
  #L25ed10.  call temp:= `size`(v3) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L25ed16.  v1:= temp;
  #L25ed18.  if v0 != v1 then goto L25ed30;
  #L25ed1c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25ed20.  call temp:= `poll`(v3) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L25ed26.  v1:= temp @kind object;
  #L25ed28.  call `onNext`(v0, v1) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25ed2e.  goto L25ed3e;
  #L25ed30.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25ed34.  v1:= 1L;
  #L25ed38.  call `request`(v0, v1) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25ed3e.  call temp:= `offer`(v3, v4) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L25ed44.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25ed58.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25ed5c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25ed62.  v0:= temp;
  #L25ed64.  if v0 == 0 then goto L25ed76;
  #L25ed68.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.upstream` @type ^`n.b.d` := v2 @kind object;
  #L25ed6c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25ed70.  call `onSubscribe`(v2, v1) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25ed76.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast$SkipLastSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25ed88.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLast$SkipLastSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25ed8c.  call `request`(v0, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25ed92.  return @kind void;
}
