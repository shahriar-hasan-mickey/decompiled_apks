record `io.reactivex.internal.operators.flowable.FlowableReplay$Node` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class {
  `long` `io.reactivex.internal.operators.flowable.FlowableReplay$Node.index` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$Node.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$Node` v0 @kind this, `java.lang.Object` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.<init>:(Ljava/lang/Object;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25ca08.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25ca0e.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` := v1 @kind object;
  #L25ca12.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.index` @type ^`long` := v2 @kind wide;
  #L25ca16.  return @kind void;
}
