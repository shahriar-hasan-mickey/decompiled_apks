record `io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `io.reactivex.d0.g` `io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.disposer` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.eager` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.resource` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.d0.g` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.<init>:(Ln/b/c;Ljava/lang/Object;Lio/reactivex/d0/g;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L261dcc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L261dd2.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L261dd6.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.resource` @type ^`java.lang.Object` := v2 @kind object;
  #L261dda.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.disposer` @type ^`io.reactivex.d0.g` := v3 @kind object;
  #L261dde.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.eager` @type ^`boolean` := v4 @kind boolean;
  #L261de2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L261df4.  call `disposeAfter`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.disposeAfter:()V` @kind virtual;
  #L261dfa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L261dfe.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L261e04.  return @kind void;
}
procedure `void` `disposeAfter`(`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.disposeAfter:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L261e18.  v0:= 0I;
  #L261e1a.  v1:= 1I;
  #L261e1c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L261e22.  v0:= temp;
  #L261e24.  if v0 == 0 then goto L261e46;
  #L261e28.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.disposer` @type ^`io.reactivex.d0.g` @kind object;
  #L261e2c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.resource` @type ^`java.lang.Object` @kind object;
  #L261e30.  call `accept`(v0, v1) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L261e36.  goto L261e46;
  #L261e38.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L261e3a.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L261e40.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L261e46.  return @kind void;
  catch `java.lang.Throwable` @[L261e28..L261e36] goto L261e38;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L261e64.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.eager` @type ^`boolean` @kind boolean;
  #L261e68.  if v0 == 0 then goto L261eb6;
  #L261e6c.  v0:= 0I;
  #L261e6e.  v1:= 1I;
  #L261e70.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L261e76.  v0:= temp;
  #L261e78.  if v0 == 0 then goto L261ea0;
  #L261e7c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.disposer` @type ^`io.reactivex.d0.g` @kind object;
  #L261e80.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.resource` @type ^`java.lang.Object` @kind object;
  #L261e84.  call `accept`(v0, v1) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L261e8a.  goto L261ea0;
  #L261e8c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L261e8e.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L261e94.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261e98.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L261e9e.  return @kind void;
  #L261ea0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L261ea4.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L261eaa.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261eae.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L261eb4.  goto L261ed0;
  #L261eb6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261eba.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L261ec0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L261ec4.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L261eca.  call `disposeAfter`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.disposeAfter:()V` @kind virtual;
  #L261ed0.  return @kind void;
  catch `java.lang.Throwable` @[L261e7c..L261e8a] goto L261e8c;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L261ef0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.eager` @type ^`boolean` @kind boolean;
  #L261ef4.  if v0 == 0 then goto L261f60;
  #L261ef8.  v0:= 0I;
  #L261efa.  v1:= 0I;
  #L261efc.  v2:= 1I;
  #L261efe.  call temp:= `compareAndSet`(v6, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L261f04.  v3:= temp;
  #L261f06.  if v3 == 0 then goto L261f22;
  #L261f0a.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.disposer` @type ^`io.reactivex.d0.g` @kind object;
  #L261f0e.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.resource` @type ^`java.lang.Object` @kind object;
  #L261f12.  call `accept`(v3, v4) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L261f18.  goto L261f22;
  #L261f1a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L261f1c.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L261f22.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L261f26.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L261f2c.  if v0 == 0 then goto L261f54;
  #L261f30.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261f34.  v4:= new `io.reactivex.exceptions.CompositeException`;
  #L261f38.  v5:= 2I;
  #L261f3a.  v5:= new `java.lang.Throwable`[v5];
  #L261f3e.  v5[v1]:= v7 @kind object;
  #L261f42.  v5[v2]:= v0 @kind object;
  #L261f46.  call `<init>`(v4, v5) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L261f4c.  call `onError`(v3, v4) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L261f52.  goto L261f7a;
  #L261f54.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261f58.  call `onError`(v0, v7) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L261f5e.  goto L261f7a;
  #L261f60.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261f64.  call `onError`(v0, v7) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L261f6a.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L261f6e.  call `cancel`(v7) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L261f74.  call `disposeAfter`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.disposeAfter:()V` @kind virtual;
  #L261f7a.  return @kind void;
  catch `java.lang.Throwable` @[L261f0a..L261f18] goto L261f1a;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L261f98.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261f9c.  call `onNext`(v0, v2) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L261fa2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L261fb4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L261fb8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L261fbe.  v0:= temp;
  #L261fc0.  if v0 == 0 then goto L261fd2;
  #L261fc4.  v1.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @type ^`n.b.d` := v2 @kind object;
  #L261fc8.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261fcc.  call `onSubscribe`(v2, v1) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L261fd2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$UsingSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L261fe4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L261fe8.  call `request`(v0, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L261fee.  return @kind void;
}
