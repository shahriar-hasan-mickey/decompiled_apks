record `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `n.b.d` @kind interface, `io.reactivex.internal.operators.flowable.q` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.active` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.leftEnd` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.leftIndex` @AccessFlag ;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @AccessFlag FINAL;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.requested` @AccessFlag FINAL;
  `io.reactivex.d0.c` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.resultSelector` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rightEnd` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rightIndex` @AccessFlag ;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rights` @AccessFlag FINAL;
}
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.LEFT_CLOSE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.LEFT_VALUE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.RIGHT_CLOSE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.RIGHT_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L256910.  v0:= 1I;
  #L256912.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L256918.  v0:= temp @kind object;
  #L25691a.  `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.LEFT_VALUE` @type ^`java.lang.Integer` := v0 @kind object;
  #L25691e.  v0:= 2I;
  #L256920.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L256926.  v0:= temp @kind object;
  #L256928.  `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.RIGHT_VALUE` @type ^`java.lang.Integer` := v0 @kind object;
  #L25692c.  v0:= 3I;
  #L25692e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L256934.  v0:= temp @kind object;
  #L256936.  `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.LEFT_CLOSE` @type ^`java.lang.Integer` := v0 @kind object;
  #L25693a.  v0:= 4I;
  #L25693c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L256942.  v0:= temp @kind object;
  #L256944.  `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.RIGHT_CLOSE` @type ^`java.lang.Integer` := v0 @kind object;
  #L256948.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this, `n.b.c` v2 @kind object, `io.reactivex.d0.k` v3 @kind object, `io.reactivex.d0.k` v4 @kind object, `io.reactivex.d0.c` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.<init>:(Ln/b/c;Lio/reactivex/d0/k;Lio/reactivex/d0/k;Lio/reactivex/d0/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L25695c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L256962.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.downstream` @type ^`n.b.c` := v2 @kind object;
  #L256966.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L25696a.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L256970.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L256974.  v2:= new `io.reactivex.disposables.a`;
  #L256978.  call `<init>`(v2) @signature `Lio/reactivex/disposables/a;.<init>:()V` @kind direct;
  #L25697e.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @type ^`io.reactivex.disposables.a` := v2 @kind object;
  #L256982.  v2:= new `io.reactivex.internal.queue.a`;
  #L256986.  call temp:= `a`() @signature `Lio/reactivex/e;.a:()I` @kind static;
  #L25698c.  v0:= temp;
  #L25698e.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L256994.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.queue` @type ^`io.reactivex.internal.queue.a` := v2 @kind object;
  #L256998.  v2:= new `java.util.LinkedHashMap`;
  #L25699c.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L2569a2.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @type ^`java.util.Map` := v2 @kind object;
  #L2569a6.  v2:= new `java.util.LinkedHashMap`;
  #L2569aa.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L2569b0.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rights` @type ^`java.util.Map` := v2 @kind object;
  #L2569b4.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2569b8.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2569be.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L2569c2.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.leftEnd` @type ^`io.reactivex.d0.k` := v3 @kind object;
  #L2569c6.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rightEnd` @type ^`io.reactivex.d0.k` := v4 @kind object;
  #L2569ca.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.resultSelector` @type ^`io.reactivex.d0.c` := v5 @kind object;
  #L2569ce.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L2569d2.  v3:= 2I;
  #L2569d4.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L2569da.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.active` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L2569de.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2569f0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L2569f4.  if v0 == 0 then goto L2569fa;
  #L2569f8.  return @kind void;
  #L2569fa.  v0:= 1I;
  #L2569fc.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L256a00.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.cancelAll:()V` @kind virtual;
  #L256a06.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L256a0c.  v0:= temp;
  #L256a0e.  if v0 != 0 then goto L256a1c;
  #L256a12.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L256a16.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L256a1c.  return @kind void;
}
procedure `void` `cancelAll`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.cancelAll:()V` @AccessFlag  {
    temp;
    v0;

  #L256a30.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L256a34.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L256a3a.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L256a4c.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L256a52.  v0:= temp;
  #L256a54.  if v0 == 0 then goto L256a5a;
  #L256a58.  return @kind void;
  #L256a5a.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L256a5e.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.downstream` @type ^`n.b.c` @kind object;
  #L256a62.  v2:= 1I;
  #L256a64.  v3:= 1I;
  #L256a66.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L256a6a.  if v4 == 0 then goto L256a76;
  #L256a6e.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L256a74.  return @kind void;
  #L256a76.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L256a7a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L256a80.  v4:= temp @kind object;
  #L256a82.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L256a86.  if v4 == 0 then goto L256a9e;
  #L256a8a.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L256a90.  call `cancelAll`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.cancelAll:()V` @kind virtual;
  #L256a96.  call `errorAll`(v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.errorAll:(Ln/b/c;)V` @kind virtual;
  #L256a9c.  return @kind void;
  #L256a9e.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L256aa2.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L256aa8.  v4:= temp;
  #L256aaa.  v5:= 0I;
  #L256aac.  if v4 != 0 then goto L256ab4;
  #L256ab0.  v4:= 1I;
  #L256ab2.  goto L256ab6;
  #L256ab4.  v4:= 0I;
  #L256ab6.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L256abc.  v6:= temp @kind object;
  #L256abe.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L256ac2.  if v6 != 0 then goto L256aca;
  #L256ac6.  v7:= 1I;
  #L256ac8.  goto L256acc;
  #L256aca.  v7:= 0I;
  #L256acc.  if v4 == 0 then goto L256b2e;
  #L256ad0.  if v7 == 0 then goto L256b2e;
  #L256ad4.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L256ad8.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L256ade.  v0:= temp @kind object;
  #L256ae0.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L256ae6.  v0:= temp @kind object;
  #L256ae8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L256aee.  v2:= temp;
  #L256af0.  if v2 == 0 then goto L256b08;
  #L256af4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L256afa.  v2:= temp @kind object;
  #L256afc.  v2:= (`io.reactivex.processors.UnicastProcessor`) v2 @kind object;
  #L256b00.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L256b06.  goto L256ae8;
  #L256b08.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L256b0c.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L256b12.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rights` @type ^`java.util.Map` @kind object;
  #L256b16.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L256b1c.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L256b20.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L256b26.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L256b2c.  return @kind void;
  #L256b2e.  if v7 == 0 then goto L256b42;
  #L256b32.  v3:= -v3 @kind int;
  #L256b34.  call temp:= `addAndGet`(v11, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L256b3a.  v3:= temp;
  #L256b3c.  if v3 != 0 then goto L256a66;
  #L256b40.  return @kind void;
  #L256b42.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L256b48.  v4:= temp @kind object;
  #L256b4a.  v7:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.LEFT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L256b4e.  if v6 != v7 then goto L256c74;
  #L256b52.  call temp:= `K`() @signature `Lio/reactivex/processors/UnicastProcessor;.K:()Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L256b58.  v5:= temp @kind object;
  #L256b5a.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.leftIndex` @type ^`int`;
  #L256b5e.  v7:= v6 + 1;
  #L256b62.  v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.leftIndex` @type ^`int` := v7;
  #L256b66.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L256b6a.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L256b70.  v8:= temp @kind object;
  #L256b72.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L256b78.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.leftEnd` @type ^`io.reactivex.d0.k` @kind object;
  #L256b7c.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L256b82.  v7:= temp @kind object;
  #L256b84.  v8:= "The leftEnd returned a null Publisher" @kind object;
  #L256b88.  call temp:= `e`(v7, v8) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L256b8e.  v7:= temp @kind object;
  #L256b90.  v7:= (`n.b.b`) v7 @kind object;
  #L256b94.  v8:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber`;
  #L256b98.  call `<init>`(v8, v11, v2, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/q;ZI)V` @kind direct;
  #L256b9e.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L256ba2.  call temp:= `b`(v6, v8) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L256ba8.  call `subscribe`(v7, v8) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L256bae.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L256bb2.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L256bb8.  v6:= temp @kind object;
  #L256bba.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L256bbe.  if v6 == 0 then goto L256bd6;
  #L256bc2.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L256bc8.  call `cancelAll`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.cancelAll:()V` @kind virtual;
  #L256bce.  call `errorAll`(v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.errorAll:(Ln/b/c;)V` @kind virtual;
  #L256bd4.  return @kind void;
  #L256bd6.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.resultSelector` @type ^`io.reactivex.d0.c` @kind object;
  #L256bda.  call temp:= `apply`(v6, v4, v5) @signature `Lio/reactivex/d0/c;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L256be0.  v4:= temp @kind object;
  #L256be2.  v6:= "The resultSelector returned a null value" @kind object;
  #L256be6.  call temp:= `e`(v4, v6) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L256bec.  v4:= temp @kind object;
  #L256bee.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L256bf2.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L256bf8.  v6:= temp @kind wide;
  #L256bfa.  v8:= 0L;
  #L256bfe.  v10:= lcmp(v6, v8);
  #L256c02.  if v10 == 0 then goto L256c4a;
  #L256c06.  call `onNext`(v1, v4) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L256c0c.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L256c10.  v6:= 1L;
  #L256c14.  call temp:= `e`(v4, v6) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L256c1a.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rights` @type ^`java.util.Map` @kind object;
  #L256c1e.  call temp:= `values`(v4) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L256c24.  v4:= temp @kind object;
  #L256c26.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L256c2c.  v4:= temp @kind object;
  #L256c2e.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L256c34.  v6:= temp;
  #L256c36.  if v6 == 0 then goto L256a66;
  #L256c3a.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L256c40.  v6:= temp @kind object;
  #L256c42.  call `onNext`(v5, v6) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L256c48.  goto L256c2e;
  #L256c4a.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L256c4e.  v3:= "Could not emit value due to lack of requests" @kind object;
  #L256c52.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L256c58.  call `fail`(v11, v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.fail:(Ljava/lang/Throwable;Ln/b/c;Lio/reactivex/e0/a/j;)V` @kind virtual;
  #L256c5e.  return @kind void;
  #L256c60.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L256c62.  call `fail`(v11, v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.fail:(Ljava/lang/Throwable;Ln/b/c;Lio/reactivex/e0/a/j;)V` @kind virtual;
  #L256c68.  return @kind void;
  #L256c6a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L256c6c.  call `fail`(v11, v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.fail:(Ljava/lang/Throwable;Ln/b/c;Lio/reactivex/e0/a/j;)V` @kind virtual;
  #L256c72.  return @kind void;
  #L256c74.  v7:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.RIGHT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L256c78.  if v6 != v7 then goto L256d36;
  #L256c7c.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rightIndex` @type ^`int`;
  #L256c80.  v7:= v6 + 1;
  #L256c84.  v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rightIndex` @type ^`int` := v7;
  #L256c88.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rights` @type ^`java.util.Map` @kind object;
  #L256c8c.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L256c92.  v8:= temp @kind object;
  #L256c94.  call temp:= `put`(v7, v8, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L256c9a.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rightEnd` @type ^`io.reactivex.d0.k` @kind object;
  #L256c9e.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L256ca4.  v7:= temp @kind object;
  #L256ca6.  v8:= "The rightEnd returned a null Publisher" @kind object;
  #L256caa.  call temp:= `e`(v7, v8) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L256cb0.  v7:= temp @kind object;
  #L256cb2.  v7:= (`n.b.b`) v7 @kind object;
  #L256cb6.  v8:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber`;
  #L256cba.  call `<init>`(v8, v11, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/q;ZI)V` @kind direct;
  #L256cc0.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L256cc4.  call temp:= `b`(v5, v8) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L256cca.  call `subscribe`(v7, v8) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L256cd0.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L256cd4.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L256cda.  v5:= temp @kind object;
  #L256cdc.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L256ce0.  if v5 == 0 then goto L256cf8;
  #L256ce4.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L256cea.  call `cancelAll`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.cancelAll:()V` @kind virtual;
  #L256cf0.  call `errorAll`(v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.errorAll:(Ln/b/c;)V` @kind virtual;
  #L256cf6.  return @kind void;
  #L256cf8.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L256cfc.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L256d02.  v5:= temp @kind object;
  #L256d04.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L256d0a.  v5:= temp @kind object;
  #L256d0c.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L256d12.  v6:= temp;
  #L256d14.  if v6 == 0 then goto L256a66;
  #L256d18.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L256d1e.  v6:= temp @kind object;
  #L256d20.  v6:= (`io.reactivex.processors.UnicastProcessor`) v6 @kind object;
  #L256d24.  call `onNext`(v6, v4) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L256d2a.  goto L256d0c;
  #L256d2c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L256d2e.  call `fail`(v11, v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.fail:(Ljava/lang/Throwable;Ln/b/c;Lio/reactivex/e0/a/j;)V` @kind virtual;
  #L256d34.  return @kind void;
  #L256d36.  v5:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.LEFT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L256d3a.  if v6 != v5 then goto L256d76;
  #L256d3e.  v4:= (`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber`) v4 @kind object;
  #L256d42.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L256d46.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.index` @type ^`int`;
  #L256d4a.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L256d50.  v6:= temp @kind object;
  #L256d52.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L256d58.  v5:= temp @kind object;
  #L256d5a.  v5:= (`io.reactivex.processors.UnicastProcessor`) v5 @kind object;
  #L256d5e.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L256d62.  call temp:= `a`(v6, v4) @signature `Lio/reactivex/disposables/a;.a:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L256d68.  if v5 == 0 then goto L256a66;
  #L256d6c.  call `onComplete`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L256d72.  goto L256a66;
  #L256d76.  v5:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.RIGHT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L256d7a.  if v6 != v5 then goto L256a66;
  #L256d7e.  v4:= (`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber`) v4 @kind object;
  #L256d82.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rights` @type ^`java.util.Map` @kind object;
  #L256d86.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.index` @type ^`int`;
  #L256d8a.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L256d90.  v6:= temp @kind object;
  #L256d92.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L256d98.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L256d9c.  call temp:= `a`(v5, v4) @signature `Lio/reactivex/disposables/a;.a:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L256da2.  goto L256a66;
  catch `java.lang.Throwable` @[L256b78..L256b94] goto L256c6a;
  catch `java.lang.Throwable` @[L256bd6..L256bee] goto L256c60;
  catch `java.lang.Throwable` @[L256c9a..L256cb6] goto L256d2c;
}
procedure `void` `errorAll`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v3 @kind this, `n.b.c` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.errorAll:(Ln/b/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L256ddc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L256de0.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L256de6.  v0:= temp @kind object;
  #L256de8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L256dec.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L256df2.  v1:= temp @kind object;
  #L256df4.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L256dfa.  v1:= temp @kind object;
  #L256dfc.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L256e02.  v2:= temp;
  #L256e04.  if v2 == 0 then goto L256e1c;
  #L256e08.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L256e0e.  v2:= temp @kind object;
  #L256e10.  v2:= (`io.reactivex.processors.UnicastProcessor`) v2 @kind object;
  #L256e14.  call `onError`(v2, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L256e1a.  goto L256dfc;
  #L256e1c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L256e20.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L256e26.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.rights` @type ^`java.util.Map` @kind object;
  #L256e2a.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L256e30.  call `onError`(v4, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L256e36.  return @kind void;
}
procedure `void` `fail`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this, `java.lang.Throwable` v2 @kind object, `n.b.c` v3 @kind object, `io.reactivex.e0.a.j` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.fail:(Ljava/lang/Throwable;Ln/b/c;Lio/reactivex/e0/a/j;)V` @AccessFlag  {
    temp;
    v0;

  #L256e48.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L256e4e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L256e52.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L256e58.  call `clear`(v4) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L256e5e.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.cancelAll:()V` @kind virtual;
  #L256e64.  call `errorAll`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.errorAll:(Ln/b/c;)V` @kind virtual;
  #L256e6a.  return @kind void;
}
procedure `void` `innerClose`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this, `boolean` v2 , `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.innerClose:(ZLio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L256e7c.  @monitorenter v1
  #L256e7e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L256e82.  if v2 == 0 then goto L256e8c;
  #L256e86.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.LEFT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L256e8a.  goto L256e90;
  #L256e8c.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.RIGHT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L256e90.  call temp:= `l`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/a;.l:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L256e96.  @monitorexit v1
  #L256e98.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.drain:()V` @kind virtual;
  #L256e9e.  return @kind void;
  #L256ea0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L256ea2.  @monitorexit v1
  #L256ea4.  throw v2;
  catch `java.lang.Throwable` @[L256e7e..L256e98] goto L256ea0;
  catch `java.lang.Throwable` @[L256ea2..L256ea4] goto L256ea0;
}
procedure `void` `innerCloseError`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.innerCloseError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L256ecc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L256ed0.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L256ed6.  v0:= temp;
  #L256ed8.  if v0 == 0 then goto L256ee4;
  #L256edc.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.drain:()V` @kind virtual;
  #L256ee2.  goto L256eea;
  #L256ee4.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L256eea.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.innerComplete:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L256efc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L256f00.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L256f06.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L256f0a.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L256f10.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.drain:()V` @kind virtual;
  #L256f16.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L256f28.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L256f2c.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L256f32.  v0:= temp;
  #L256f34.  if v0 == 0 then goto L256f4a;
  #L256f38.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L256f3c.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L256f42.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.drain:()V` @kind virtual;
  #L256f48.  goto L256f50;
  #L256f4a.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L256f50.  return @kind void;
}
procedure `void` `innerValue`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.innerValue:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L256f64.  @monitorenter v1
  #L256f66.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L256f6a.  if v2 == 0 then goto L256f74;
  #L256f6e.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.LEFT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L256f72.  goto L256f78;
  #L256f74.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.RIGHT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L256f78.  call temp:= `l`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/a;.l:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L256f7e.  @monitorexit v1
  #L256f80.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.drain:()V` @kind virtual;
  #L256f86.  return @kind void;
  #L256f88.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L256f8a.  @monitorexit v1
  #L256f8c.  throw v2;
  catch `java.lang.Throwable` @[L256f66..L256f80] goto L256f88;
  catch `java.lang.Throwable` @[L256f8a..L256f8c] goto L256f88;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$GroupJoinSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L256fb4.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L256fba.  v0:= temp;
  #L256fbc.  if v0 == 0 then goto L256fca;
  #L256fc0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L256fc4.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L256fca.  return @kind void;
}
