record `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.index` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.isLeft` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.q` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.q` v1 @kind object, `boolean` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/q;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L257004.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25700a.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.q` := v1 @kind object;
  #L25700e.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.isLeft` @type ^`boolean` := v2 @kind boolean;
  #L257012.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.index` @type ^`int` := v3;
  #L257016.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L257028.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25702e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L256fdc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L256fe2.  v0:= temp @kind object;
  #L256fe4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L256fe8.  if v0 != v1 then goto L256ff0;
  #L256fec.  v0:= 1I;
  #L256fee.  goto L256ff2;
  #L256ff0.  v0:= 0I;
  #L256ff2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L257040.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.q` @kind object;
  #L257044.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.isLeft` @type ^`boolean` @kind boolean;
  #L257048.  call `innerClose`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/q;.innerClose:(ZLio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;)V` @kind interface;
  #L25704e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L257060.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.q` @kind object;
  #L257064.  call `innerCloseError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/q;.innerCloseError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25706a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25707c.  call temp:= `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L257082.  v2:= temp;
  #L257084.  if v2 == 0 then goto L257096;
  #L257088.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.q` @kind object;
  #L25708c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.isLeft` @type ^`boolean` @kind boolean;
  #L257090.  call `innerClose`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/q;.innerClose:(ZLio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;)V` @kind interface;
  #L257096.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2570a8.  v0:= 9223372036854775807L;
  #L2570b2.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;J)Z` @kind static;
  #L2570b8.  return @kind void;
}
