record `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.consumed` @AccessFlag ;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.emitted` @AccessFlag ;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.error` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.limit` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainDone` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainSubscription` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherObserver` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherState` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.prefetch` @AccessFlag FINAL;
  `io.reactivex.e0.a.i` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.requested` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @AccessFlag ;
}
global `int` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.OTHER_STATE_CONSUMED_OR_EMPTY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.OTHER_STATE_HAS_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v1 @kind this, `n.b.c` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.<init>:(Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L258b24.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L258b2a.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.downstream` @type ^`n.b.c` := v2 @kind object;
  #L258b2e.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L258b32.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L258b38.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L258b3c.  v2:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver`;
  #L258b40.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;)V` @kind direct;
  #L258b46.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver` := v2 @kind object;
  #L258b4a.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L258b4e.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L258b54.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L258b58.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L258b5c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L258b62.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L258b66.  call temp:= `a`() @signature `Lio/reactivex/e;.a:()I` @kind static;
  #L258b6c.  v2:= temp;
  #L258b6e.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.prefetch` @type ^`int` := v2;
  #L258b72.  v0:= v2 ^> 2;
  #L258b76.  v2:= v2 - v0 @kind int;
  #L258b78.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.limit` @type ^`int` := v2;
  #L258b7c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L258b90.  v0:= 1I;
  #L258b92.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L258b96.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L258b9a.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L258ba0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherObserver` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver` @kind object;
  #L258ba4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L258baa.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L258bb0.  v0:= temp;
  #L258bb2.  if v0 != 0 then goto L258bc0;
  #L258bb6.  v0:= 0I;
  #L258bb8.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v0 @kind object;
  #L258bbc.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v0 @kind object;
  #L258bc0.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L258bd4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L258bda.  v0:= temp;
  #L258bdc.  if v0 != 0 then goto L258be6;
  #L258be0.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L258be6.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L258bf8.  v0:= v17 @kind object;
  #L258bfc.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.downstream` @type ^`n.b.c` @kind object;
  #L258c00.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.emitted` @type ^`long` @kind wide;
  #L258c04.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.consumed` @type ^`int`;
  #L258c08.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.limit` @type ^`int`;
  #L258c0c.  v6:= 1I;
  #L258c0e.  v7:= 1I;
  #L258c10.  v8:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L258c14.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L258c1a.  v8:= temp @kind wide;
  #L258c1c.  v11:= 2I;
  #L258c1e.  v12:= 0I;
  #L258c20.  v13:= lcmp(v2, v8);
  #L258c24.  if v13 == 0 then goto L258cfa;
  #L258c28.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.cancelled` @type ^`boolean` @kind boolean;
  #L258c2c.  if v13 == 0 then goto L258c3a;
  #L258c30.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L258c34.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v12 @kind object;
  #L258c38.  return @kind void;
  #L258c3a.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L258c3e.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L258c44.  v13:= temp @kind object;
  #L258c46.  if v13 == 0 then goto L258c66;
  #L258c4a.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L258c4e.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v12 @kind object;
  #L258c52.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L258c56.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L258c5c.  v2:= temp @kind object;
  #L258c5e.  call `onError`(v1, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L258c64.  return @kind void;
  #L258c66.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherState` @type ^`int`;
  #L258c6a.  v14:= 1L;
  #L258c6e.  if v13 != v6 then goto L258c88;
  #L258c72.  v10:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` @kind object;
  #L258c76.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L258c7a.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherState` @type ^`int` := v11;
  #L258c7e.  call `onNext`(v1, v10) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L258c84.  v2:= v2 + v14 @kind long;
  #L258c86.  goto L258c1c;
  #L258c88.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainDone` @type ^`boolean` @kind boolean;
  #L258c8c.  v10:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L258c90.  if v10 == 0 then goto L258c9e;
  #L258c94.  call temp:= `poll`(v10) @signature `Lio/reactivex/e0/a/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L258c9a.  v10:= temp @kind object;
  #L258c9c.  goto L258ca0;
  #L258c9e.  v10:= v12 @kind object;
  #L258ca0.  if v10 != 0 then goto L258caa;
  #L258ca4.  v16:= 1I;
  #L258ca8.  goto L258cae;
  #L258caa.  v16:= 0I;
  #L258cae.  if v6 == 0 then goto L258cc6;
  #L258cb2.  if v16 == 0 then goto L258cc6;
  #L258cb6.  if v13 != v11 then goto L258cc6;
  #L258cba.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v12 @kind object;
  #L258cbe.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L258cc4.  return @kind void;
  #L258cc6.  if v16 == 0 then goto L258ccc;
  #L258cca.  goto L258cfa;
  #L258ccc.  call `onNext`(v1, v10) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L258cd2.  v2:= v2 + v14 @kind long;
  #L258cd4.  v4:= v4 + 1;
  #L258cd8.  if v4 != v5 then goto L258cf6;
  #L258cdc.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L258ce0.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L258ce6.  v4:= temp @kind object;
  #L258ce8.  v4:= (`n.b.d`) v4 @kind object;
  #L258cec.  v10:= (`long`) v5 @kind i2l;
  #L258cee.  call `request`(v4, v10) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L258cf4.  v4:= 0I;
  #L258cf6.  v6:= 1I;
  #L258cf8.  goto L258c1c;
  #L258cfa.  v6:= lcmp(v2, v8);
  #L258cfe.  if v6 != 0 then goto L258d7c;
  #L258d02.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.cancelled` @type ^`boolean` @kind boolean;
  #L258d06.  if v6 == 0 then goto L258d14;
  #L258d0a.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L258d0e.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v12 @kind object;
  #L258d12.  return @kind void;
  #L258d14.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L258d18.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L258d1e.  v6:= temp @kind object;
  #L258d20.  if v6 == 0 then goto L258d40;
  #L258d24.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v12 @kind object;
  #L258d28.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v12 @kind object;
  #L258d2c.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L258d30.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L258d36.  v2:= temp @kind object;
  #L258d38.  call `onError`(v1, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L258d3e.  return @kind void;
  #L258d40.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainDone` @type ^`boolean` @kind boolean;
  #L258d44.  v8:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L258d48.  if v8 == 0 then goto L258d5e;
  #L258d4c.  call temp:= `isEmpty`(v8) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L258d52.  v8:= temp;
  #L258d54.  if v8 == 0 then goto L258d5a;
  #L258d58.  goto L258d5e;
  #L258d5a.  v10:= 0I;
  #L258d5c.  goto L258d60;
  #L258d5e.  v10:= 1I;
  #L258d60.  if v6 == 0 then goto L258d7c;
  #L258d64.  if v10 == 0 then goto L258d7c;
  #L258d68.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherState` @type ^`int`;
  #L258d6c.  if v6 != v11 then goto L258d7c;
  #L258d70.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v12 @kind object;
  #L258d74.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L258d7a.  return @kind void;
  #L258d7c.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.emitted` @type ^`long` := v2 @kind wide;
  #L258d80.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.consumed` @type ^`int` := v4;
  #L258d84.  v6:= -v7 @kind int;
  #L258d86.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L258d8c.  v7:= temp;
  #L258d8e.  if v7 != 0 then goto L258d94;
  #L258d92.  return @kind void;
  #L258d94.  v6:= 1I;
  #L258d96.  goto L258c10;
}
procedure `io.reactivex.e0.a.i` `getOrCreateQueue`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/e0/a/i;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L258af4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L258af8.  if v0 != 0 then goto L258b12;
  #L258afc.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L258b00.  call temp:= `a`() @signature `Lio/reactivex/e;.a:()I` @kind static;
  #L258b06.  v1:= temp;
  #L258b08.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L258b0e.  v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` := v0 @kind object;
  #L258b12.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L258dac.  v0:= 1I;
  #L258dae.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainDone` @type ^`boolean` := v0 @kind boolean;
  #L258db2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drain:()V` @kind virtual;
  #L258db8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L258dcc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L258dd0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L258dd6.  v0:= temp;
  #L258dd8.  if v0 == 0 then goto L258dee;
  #L258ddc.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L258de0.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L258de6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drain:()V` @kind virtual;
  #L258dec.  goto L258df4;
  #L258dee.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L258df4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L258e08.  v0:= 0I;
  #L258e0a.  v1:= 1I;
  #L258e0c.  call temp:= `compareAndSet`(v7, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L258e12.  v2:= temp;
  #L258e14.  if v2 == 0 then goto L258eb0;
  #L258e18.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.emitted` @type ^`long` @kind wide;
  #L258e1c.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L258e20.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L258e26.  v4:= temp @kind wide;
  #L258e28.  v6:= lcmp(v4, v2);
  #L258e2c.  if v6 == 0 then goto L258e94;
  #L258e30.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L258e34.  if v4 == 0 then goto L258e4e;
  #L258e38.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L258e3e.  v5:= temp;
  #L258e40.  if v5 == 0 then goto L258e46;
  #L258e44.  goto L258e4e;
  #L258e46.  call temp:= `offer`(v4, v8) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L258e4c.  goto L258ea2;
  #L258e4e.  v4:= 1L;
  #L258e52.  v2:= v2 + v4 @kind long;
  #L258e54.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.emitted` @type ^`long` := v2 @kind wide;
  #L258e58.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.downstream` @type ^`n.b.c` @kind object;
  #L258e5c.  call `onNext`(v2, v8) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L258e62.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.consumed` @type ^`int`;
  #L258e66.  v8:= v8 + v1 @kind int;
  #L258e68.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.limit` @type ^`int`;
  #L258e6c.  if v8 != v1 then goto L258e8e;
  #L258e70.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.consumed` @type ^`int` := v0;
  #L258e74.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L258e78.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L258e7e.  v0:= temp @kind object;
  #L258e80.  v0:= (`n.b.d`) v0 @kind object;
  #L258e84.  v1:= (`long`) v8 @kind i2l;
  #L258e86.  call `request`(v0, v1) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L258e8c.  goto L258ea2;
  #L258e8e.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.consumed` @type ^`int` := v8;
  #L258e92.  goto L258ea2;
  #L258e94.  call temp:= `getOrCreateQueue`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/e0/a/i;` @kind virtual;
  #L258e9a.  v0:= temp @kind object;
  #L258e9c.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L258ea2.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L258ea8.  v8:= temp;
  #L258eaa.  if v8 != 0 then goto L258ecc;
  #L258eae.  return @kind void;
  #L258eb0.  call temp:= `getOrCreateQueue`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.getOrCreateQueue:()Lio/reactivex/e0/a/i;` @kind virtual;
  #L258eb6.  v0:= temp @kind object;
  #L258eb8.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L258ebe.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L258ec4.  v8:= temp;
  #L258ec6.  if v8 == 0 then goto L258ecc;
  #L258eca.  return @kind void;
  #L258ecc.  call `drainLoop`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L258ed2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v3 @kind this, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L258ee4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L258ee8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.prefetch` @type ^`int`;
  #L258eec.  v1:= (`long`) v1 @kind i2l;
  #L258eee.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;J)Z` @kind static;
  #L258ef4.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L258f08.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L258f0c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L258f12.  v0:= temp;
  #L258f14.  if v0 == 0 then goto L258f2a;
  #L258f18.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.mainSubscription` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L258f1c.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L258f22.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drain:()V` @kind virtual;
  #L258f28.  goto L258f30;
  #L258f2a.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L258f30.  return @kind void;
}
procedure `void` `otherSuccess`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.otherSuccess:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L258f44.  v0:= 0I;
  #L258f46.  v1:= 1I;
  #L258f48.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L258f4e.  v0:= temp;
  #L258f50.  if v0 == 0 then goto L258f9e;
  #L258f54.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.emitted` @type ^`long` @kind wide;
  #L258f58.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L258f5c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L258f62.  v4:= temp @kind wide;
  #L258f64.  v0:= lcmp(v4, v2);
  #L258f68.  if v0 == 0 then goto L258f88;
  #L258f6c.  v0:= 1L;
  #L258f70.  v2:= v2 + v0 @kind long;
  #L258f72.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.emitted` @type ^`long` := v2 @kind wide;
  #L258f76.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.downstream` @type ^`n.b.c` @kind object;
  #L258f7a.  call `onNext`(v0, v7) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L258f80.  v7:= 2I;
  #L258f82.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherState` @type ^`int` := v7;
  #L258f86.  goto L258fb4;
  #L258f88.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v7 @kind object;
  #L258f8c.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherState` @type ^`int` := v1;
  #L258f90.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L258f96.  v7:= temp;
  #L258f98.  if v7 != 0 then goto L258fb4;
  #L258f9c.  return @kind void;
  #L258f9e.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.singleItem` @type ^`java.lang.Object` := v7 @kind object;
  #L258fa2.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.otherState` @type ^`int` := v1;
  #L258fa6.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L258fac.  v7:= temp;
  #L258fae.  if v7 == 0 then goto L258fb4;
  #L258fb2.  return @kind void;
  #L258fb4.  call `drainLoop`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drainLoop:()V` @kind virtual;
  #L258fba.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L258fcc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L258fd0.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L258fd6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.drain:()V` @kind virtual;
  #L258fdc.  return @kind void;
}
