record `io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` @kind class, `io.reactivex.z` @kind interface {
  `io.reactivex.a0` `io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.other` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.otherDisposable` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.a0` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle$ConcatWithSubscriber;.<init>:(Ln/b/c;Lio/reactivex/a0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24fbb8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.<init>:(Ln/b/c;)V` @kind direct;
  #L24fbbe.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.other` @type ^`io.reactivex.a0` := v2 @kind object;
  #L24fbc2.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L24fbc6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L24fbcc.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.otherDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L24fbd0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle$ConcatWithSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24fbe4.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.cancel:()V` @kind super;
  #L24fbea.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.otherDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24fbee.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24fbf4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle$ConcatWithSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24fc08.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L24fc0c.  v2.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`n.b.d` := v0 @kind object;
  #L24fc10.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.other` @type ^`io.reactivex.a0` @kind object;
  #L24fc14.  v1:= 0I;
  #L24fc16.  v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.other` @type ^`io.reactivex.a0` := v1 @kind object;
  #L24fc1a.  call `b`(v0, v2) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L24fc20.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle$ConcatWithSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24fc34.  v0:= v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24fc38.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24fc3e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle$ConcatWithSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24fc50.  v0:= v4.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.produced` @type ^`long` @kind wide;
  #L24fc54.  v2:= 1L;
  #L24fc58.  v0:= v0 + v2 @kind long;
  #L24fc5a.  v4.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L24fc5e.  v0:= v4.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24fc62.  call `onNext`(v0, v5) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L24fc68.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle$ConcatWithSubscriber;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24fc7c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber.otherDisposable` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24fc80.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L24fc86.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle$ConcatWithSubscriber;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L24fc98.  call `complete`(v0, v1) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L24fc9e.  return @kind void;
}
