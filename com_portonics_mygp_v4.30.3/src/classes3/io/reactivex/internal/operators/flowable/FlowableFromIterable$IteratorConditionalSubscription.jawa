record `io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` @kind class {
  `io.reactivex.e0.a.a` `io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription` v0 @kind this, `io.reactivex.e0.a.a` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorConditionalSubscription;.<init>:(Lio/reactivex/e0/a/a;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L255568.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L25556e.  v0.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.downstream` @type ^`io.reactivex.e0.a.a` := v1 @kind object;
  #L255572.  return @kind void;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorConditionalSubscription;.fastPath:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L255584.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.it` @type ^`java.util.Iterator` @kind object;
  #L255588.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L25558c.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L255590.  if v2 == 0 then goto L255596;
  #L255594.  return @kind void;
  #L255596.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L25559c.  v2:= temp @kind object;
  #L25559e.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L2555a2.  if v3 == 0 then goto L2555a8;
  #L2555a6.  return @kind void;
  #L2555a8.  if v2 != 0 then goto L2555c2;
  #L2555ac.  v0:= new `java.lang.NullPointerException`;
  #L2555b0.  v2:= "Iterator.next() returned a null value" @kind object;
  #L2555b4.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2555ba.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2555c0.  return @kind void;
  #L2555c2.  call temp:= `tryOnNext`(v1, v2) @signature `Lio/reactivex/e0/a/a;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L2555c8.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L2555cc.  if v2 == 0 then goto L2555d2;
  #L2555d0.  return @kind void;
  #L2555d2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2555d8.  v2:= temp;
  #L2555da.  if v2 != 0 then goto L25558c;
  #L2555de.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L2555e2.  if v0 != 0 then goto L2555ec;
  #L2555e6.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2555ec.  return @kind void;
  #L2555ee.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2555f0.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2555f6.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2555fc.  return @kind void;
  #L2555fe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L255600.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L255606.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25560c.  return @kind void;
  catch `java.lang.Throwable` @[L255596..L25559e] goto L2555fe;
  catch `java.lang.Throwable` @[L2555d2..L2555da] goto L2555ee;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription` v8 @kind this, `long` v9 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorConditionalSubscription;.slowPath:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L255638.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.it` @type ^`java.util.Iterator` @kind object;
  #L25563c.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L255640.  v2:= 0L;
  #L255644.  v4:= v2 @kind wide;
  #L255646.  v6:= lcmp(v4, v9);
  #L25564a.  if v6 == 0 then goto L2556de;
  #L25564e.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L255652.  if v6 == 0 then goto L255658;
  #L255656.  return @kind void;
  #L255658.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L25565e.  v6:= temp @kind object;
  #L255660.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L255664.  if v7 == 0 then goto L25566a;
  #L255668.  return @kind void;
  #L25566a.  if v6 != 0 then goto L255684;
  #L25566e.  v9:= new `java.lang.NullPointerException`;
  #L255672.  v10:= "Iterator.next() returned a null value" @kind object;
  #L255676.  call `<init>`(v9, v10) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25567c.  call `onError`(v1, v9) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L255682.  return @kind void;
  #L255684.  call temp:= `tryOnNext`(v1, v6) @signature `Lio/reactivex/e0/a/a;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L25568a.  v6:= temp;
  #L25568c.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L255690.  if v7 == 0 then goto L255696;
  #L255694.  return @kind void;
  #L255696.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L25569c.  v7:= temp;
  #L25569e.  if v7 != 0 then goto L2556b2;
  #L2556a2.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L2556a6.  if v9 != 0 then goto L2556b0;
  #L2556aa.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2556b0.  return @kind void;
  #L2556b2.  if v6 == 0 then goto L255646;
  #L2556b6.  v6:= 1L;
  #L2556ba.  v4:= v4 + v6 @kind long;
  #L2556bc.  goto L255646;
  #L2556be.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2556c0.  call `b`(v9) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2556c6.  call `onError`(v1, v9) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2556cc.  return @kind void;
  #L2556ce.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2556d0.  call `b`(v9) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2556d6.  call `onError`(v1, v9) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2556dc.  return @kind void;
  #L2556de.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2556e4.  v9:= temp @kind wide;
  #L2556e6.  v6:= lcmp(v4, v9);
  #L2556ea.  if v6 != 0 then goto L255646;
  #L2556ee.  v9:= -v4 @kind long;
  #L2556f0.  call temp:= `addAndGet`(v8, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L2556f6.  v9:= temp @kind wide;
  #L2556f8.  v4:= lcmp(v9, v2);
  #L2556fc.  if v4 != 0 then goto L255644;
  #L255700.  return @kind void;
  catch `java.lang.Throwable` @[L255658..L255660] goto L2556ce;
  catch `java.lang.Throwable` @[L255696..L25569e] goto L2556be;
}
