record `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.cancelled` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.count` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.error` @AccessFlag ;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.x` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.scheduler` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.time` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.unit` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v1 @kind this, `n.b.c` v2 @kind object, `long` v3 , `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object, `io.reactivex.x` v8 @kind object, `int` v9 , `boolean` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.<init>:(Ln/b/c;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/x;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L26013c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L260142.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L260146.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L26014c.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L260150.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L260154.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.count` @type ^`long` := v3 @kind wide;
  #L260158.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.time` @type ^`long` := v5 @kind wide;
  #L26015c.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v7 @kind object;
  #L260160.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.scheduler` @type ^`io.reactivex.x` := v8 @kind object;
  #L260164.  v2:= new `io.reactivex.internal.queue.a`;
  #L260168.  call `<init>`(v2, v9) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L26016e.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.a` := v2 @kind object;
  #L260172.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.delayError` @type ^`boolean` := v10 @kind boolean;
  #L260176.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L260188.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L26018c.  if v0 != 0 then goto L2601b6;
  #L260190.  v0:= 1I;
  #L260192.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L260196.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L26019a.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L2601a0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2601a6.  v0:= temp;
  #L2601a8.  if v0 != 0 then goto L2601b6;
  #L2601ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L2601b0.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L2601b6.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v2 @kind this, `boolean` v3 , `n.b.c` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.checkTerminated:(ZLn/b/c;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2600cc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L2600d0.  v1:= 1I;
  #L2600d2.  if v0 == 0 then goto L2600e2;
  #L2600d6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L2600da.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L2600e0.  return v1;
  #L2600e2.  if v5 == 0 then goto L260102;
  #L2600e6.  if v3 == 0 then goto L260128;
  #L2600ea.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L2600ee.  if v3 == 0 then goto L2600fa;
  #L2600f2.  call `onError`(v4, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2600f8.  goto L260100;
  #L2600fa.  call `onComplete`(v4) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L260100.  return v1;
  #L260102.  v5:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L260106.  if v5 == 0 then goto L26011c;
  #L26010a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L26010e.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L260114.  call `onError`(v4, v5) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26011a.  return v1;
  #L26011c.  if v3 == 0 then goto L260128;
  #L260120.  call `onComplete`(v4) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L260126.  return v1;
  #L260128.  v3:= 0I;
  #L26012a.  return v3;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L2601c8.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2601ce.  v0:= temp;
  #L2601d0.  if v0 == 0 then goto L2601d6;
  #L2601d4.  return @kind void;
  #L2601d6.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2601da.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L2601de.  v2:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.delayError` @type ^`boolean` @kind boolean;
  #L2601e2.  v3:= 1I;
  #L2601e4.  v4:= 1I;
  #L2601e6.  v5:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.done` @type ^`boolean` @kind boolean;
  #L2601ea.  if v5 == 0 then goto L26026e;
  #L2601ee.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L2601f4.  v5:= temp;
  #L2601f6.  call temp:= `checkTerminated`(v13, v5, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.checkTerminated:(ZLn/b/c;Z)Z` @kind virtual;
  #L2601fc.  v5:= temp;
  #L2601fe.  if v5 == 0 then goto L260204;
  #L260202.  return @kind void;
  #L260204.  v5:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L260208.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L26020e.  v5:= temp @kind wide;
  #L260210.  v7:= 0L;
  #L260214.  v9:= v7 @kind wide;
  #L260216.  call temp:= `peek`(v1) @signature `Lio/reactivex/internal/queue/a;.peek:()Ljava/lang/Object;` @kind virtual;
  #L26021c.  v11:= temp @kind object;
  #L26021e.  if v11 != 0 then goto L260226;
  #L260222.  v11:= 1I;
  #L260224.  goto L260228;
  #L260226.  v11:= 0I;
  #L260228.  call temp:= `checkTerminated`(v13, v11, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.checkTerminated:(ZLn/b/c;Z)Z` @kind virtual;
  #L26022e.  v11:= temp;
  #L260230.  if v11 == 0 then goto L260236;
  #L260234.  return @kind void;
  #L260236.  v11:= lcmp(v5, v9);
  #L26023a.  if v11 != 0 then goto L260252;
  #L26023e.  v5:= lcmp(v9, v7);
  #L260242.  if v5 == 0 then goto L26026e;
  #L260246.  v5:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L26024a.  call temp:= `e`(v5, v9) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L260250.  goto L26026e;
  #L260252.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L260258.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L26025e.  v11:= temp @kind object;
  #L260260.  call `onNext`(v0, v11) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L260266.  v11:= 1L;
  #L26026a.  v9:= v9 + v11 @kind long;
  #L26026c.  goto L260216;
  #L26026e.  v4:= -v4 @kind int;
  #L260270.  call temp:= `addAndGet`(v13, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L260276.  v4:= temp;
  #L260278.  if v4 != 0 then goto L2601e6;
  #L26027c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L260290.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.scheduler` @type ^`io.reactivex.x` @kind object;
  #L260294.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L260298.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L26029e.  v0:= temp @kind wide;
  #L2602a0.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L2602a4.  call `trim`(v3, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.trim:(JLio/reactivex/internal/queue/a;)V` @kind virtual;
  #L2602aa.  v0:= 1I;
  #L2602ac.  v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L2602b0.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.drain:()V` @kind virtual;
  #L2602b6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2602c8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.delayError` @type ^`boolean` @kind boolean;
  #L2602cc.  if v0 == 0 then goto L2602ea;
  #L2602d0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.scheduler` @type ^`io.reactivex.x` @kind object;
  #L2602d4.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2602d8.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L2602de.  v0:= temp @kind wide;
  #L2602e0.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L2602e4.  call `trim`(v3, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.trim:(JLio/reactivex/internal/queue/a;)V` @kind virtual;
  #L2602ea.  v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.error` @type ^`java.lang.Throwable` := v4 @kind object;
  #L2602ee.  v4:= 1I;
  #L2602f0.  v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.done` @type ^`boolean` := v4 @kind boolean;
  #L2602f4.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.drain:()V` @kind virtual;
  #L2602fa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L26030c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L260310.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.scheduler` @type ^`io.reactivex.x` @kind object;
  #L260314.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L260318.  call temp:= `b`(v1, v2) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L26031e.  v1:= temp @kind wide;
  #L260320.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L260326.  v3:= temp @kind object;
  #L260328.  call temp:= `l`(v0, v3, v5) @signature `Lio/reactivex/internal/queue/a;.l:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L26032e.  call `trim`(v4, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.trim:(JLio/reactivex/internal/queue/a;)V` @kind virtual;
  #L260334.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L260348.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L26034c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L260352.  v0:= temp;
  #L260354.  if v0 == 0 then goto L260376;
  #L260358.  v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L26035c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L260360.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L260366.  v0:= 9223372036854775807L;
  #L260370.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L260376.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L260388.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L26038e.  v0:= temp;
  #L260390.  if v0 == 0 then goto L2603a4;
  #L260394.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L260398.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L26039e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.drain:()V` @kind virtual;
  #L2603a4.  return @kind void;
}
procedure `void` `trim`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber` v11 @kind this, `long` v12 , `io.reactivex.internal.queue.a` v14 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$TakeLastTimedSubscriber;.trim:(JLio/reactivex/internal/queue/a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2603b8.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.time` @type ^`long` @kind wide;
  #L2603bc.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$TakeLastTimedSubscriber.count` @type ^`long` @kind wide;
  #L2603c0.  v4:= 1I;
  #L2603c2.  v5:= 9223372036854775807L;
  #L2603cc.  v7:= lcmp(v2, v5);
  #L2603d0.  if v7 != 0 then goto L2603d8;
  #L2603d4.  v5:= 1I;
  #L2603d6.  goto L2603da;
  #L2603d8.  v5:= 0I;
  #L2603da.  call temp:= `isEmpty`(v14) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L2603e0.  v6:= temp;
  #L2603e2.  if v6 != 0 then goto L26042c;
  #L2603e6.  call temp:= `peek`(v14) @signature `Lio/reactivex/internal/queue/a;.peek:()Ljava/lang/Object;` @kind virtual;
  #L2603ec.  v6:= temp @kind object;
  #L2603ee.  v6:= (`java.lang.Long`) v6 @kind object;
  #L2603f2.  call temp:= `longValue`(v6) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L2603f8.  v6:= temp @kind wide;
  #L2603fa.  v8:= v12 - v0 @kind long;
  #L2603fe.  v10:= lcmp(v6, v8);
  #L260402.  if v10 < 0 then goto L26041e;
  #L260406.  if v5 != 0 then goto L26042c;
  #L26040a.  call temp:= `n`(v14) @signature `Lio/reactivex/internal/queue/a;.n:()I` @kind virtual;
  #L260410.  v6:= temp;
  #L260412.  v6:= v6 ^> v4 @kind int;
  #L260414.  v6:= (`long`) v6 @kind i2l;
  #L260416.  v8:= lcmp(v6, v2);
  #L26041a.  if v8 <= 0 then goto L26042c;
  #L26041e.  call temp:= `poll`(v14) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L260424.  call temp:= `poll`(v14) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L26042a.  goto L2603da;
  #L26042c.  return @kind void;
}
