record `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface, `io.reactivex.internal.operators.flowable.d0` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.itemTimeoutIndicator` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.task` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.k` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L260fb8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L260fbe.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L260fc2.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.itemTimeoutIndicator` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L260fc6.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L260fca.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L260fd0.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L260fd4.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L260fd8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L260fde.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L260fe2.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L260fe6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L260fec.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L260ff0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L261004.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L261008.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26100e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L261012.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L261018.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L26102c.  v0:= 9223372036854775807L;
  #L261036.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L26103c.  v2:= temp @kind wide;
  #L26103e.  v4:= lcmp(v2, v0);
  #L261042.  if v4 == 0 then goto L26105a;
  #L261046.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L26104a.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L261050.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261054.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L26105a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L26106c.  v0:= 9223372036854775807L;
  #L261076.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L26107c.  v2:= temp @kind wide;
  #L26107e.  v4:= lcmp(v2, v0);
  #L261082.  if v4 == 0 then goto L26109c;
  #L261086.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L26108a.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L261090.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261094.  call `onError`(v0, v6) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L26109a.  goto L2610a2;
  #L26109c.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2610a2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2610b4.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2610ba.  v0:= temp @kind wide;
  #L2610bc.  v2:= 9223372036854775807L;
  #L2610c6.  v4:= lcmp(v0, v2);
  #L2610ca.  if v4 == 0 then goto L261172;
  #L2610ce.  v4:= 1L;
  #L2610d2.  v4:= v4 + v0 @kind long;
  #L2610d4.  call temp:= `compareAndSet`(v6, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L2610da.  v0:= temp;
  #L2610dc.  if v0 != 0 then goto L2610e2;
  #L2610e0.  goto L261172;
  #L2610e2.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L2610e6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2610ec.  v0:= temp @kind object;
  #L2610ee.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2610f2.  if v0 == 0 then goto L2610fc;
  #L2610f6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2610fc.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261100.  call `onNext`(v0, v7) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L261106.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.itemTimeoutIndicator` @type ^`io.reactivex.d0.k` @kind object;
  #L26110a.  call temp:= `apply`(v0, v7) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L261110.  v7:= temp @kind object;
  #L261112.  v0:= "The itemTimeoutIndicator returned a null Publisher." @kind object;
  #L261116.  call temp:= `e`(v7, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L26111c.  v7:= temp @kind object;
  #L26111e.  v7:= (`n.b.b`) v7 @kind object;
  #L261122.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer`;
  #L261126.  call `<init>`(v0, v4, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutConsumer;.<init>:(JLio/reactivex/internal/operators/flowable/d0;)V` @kind direct;
  #L26112c.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L261130.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L261136.  v1:= temp;
  #L261138.  if v1 == 0 then goto L261142;
  #L26113c.  call `subscribe`(v7, v0) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L261142.  return @kind void;
  #L261144.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L261146.  call `b`(v7) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L26114c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L261150.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L261156.  v0:= temp @kind object;
  #L261158.  v0:= (`n.b.d`) v0 @kind object;
  #L26115c.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L261162.  call temp:= `getAndSet`(v6, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L261168.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L26116c.  call `onError`(v0, v7) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L261172.  return @kind void;
  catch `java.lang.Throwable` @[L261106..L261122] goto L261144;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L261190.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L261194.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L261198.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Ln/b/d;)Z` @kind static;
  #L26119e.  return @kind void;
}
procedure `void` `onTimeout`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.onTimeout:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2611b0.  v0:= 9223372036854775807L;
  #L2611ba.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L2611c0.  v3:= temp;
  #L2611c2.  if v3 == 0 then goto L2611e4;
  #L2611c6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2611ca.  call temp:= `cancel`(v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2611d0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2611d4.  v4:= new `java.util.concurrent.TimeoutException`;
  #L2611d8.  call `<init>`(v4) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L2611de.  call `onError`(v3, v4) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2611e4.  return @kind void;
}
procedure `void` `onTimeoutError`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v2 @kind this, `long` v3 , `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.onTimeoutError:(JLjava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2611f8.  v0:= 9223372036854775807L;
  #L261202.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L261208.  v3:= temp;
  #L26120a.  if v3 == 0 then goto L261224;
  #L26120e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L261212.  call temp:= `cancel`(v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L261218.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L26121c.  call `onError`(v3, v5) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L261222.  goto L26122a;
  #L261224.  call `t`(v5) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L26122a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26123c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L261240.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L261244.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L26124a.  return @kind void;
}
procedure `void` `startFirstTimeout`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber` v3 @kind this, `n.b.b` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutSubscriber;.startFirstTimeout:(Ln/b/b;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L26125c.  if v4 == 0 then goto L261284;
  #L261260.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer`;
  #L261264.  v1:= 0L;
  #L261268.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutConsumer;.<init>:(JLio/reactivex/internal/operators/flowable/d0;)V` @kind direct;
  #L26126e.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L261272.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L261278.  v1:= temp;
  #L26127a.  if v1 == 0 then goto L261284;
  #L26127e.  call `subscribe`(v4, v0) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L261284.  return @kind void;
}
