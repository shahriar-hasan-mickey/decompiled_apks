record `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L260440.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` := v1 @kind object;
  #L260444.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26044a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L26045c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` @kind object;
  #L260460.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L260464.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26046a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` @kind object;
  #L26046e.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L260472.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L260476.  call `b`(v1, v0, v2) @signature `Lio/reactivex/internal/util/g;.b:(Ln/b/c;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L26047c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L260490.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` @kind object;
  #L260494.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L260498.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26049e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber.this$0` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` @kind object;
  #L2604a2.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2604a6.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2604aa.  call `d`(v1, v4, v0, v2) @signature `Lio/reactivex/internal/util/g;.d:(Ln/b/c;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L2604b0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L2604c4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2604ca.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber;.onComplete:()V` @kind virtual;
  #L2604d0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2604e4.  v0:= 9223372036854775807L;
  #L2604ee.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;J)Z` @kind static;
  #L2604f4.  return @kind void;
}
