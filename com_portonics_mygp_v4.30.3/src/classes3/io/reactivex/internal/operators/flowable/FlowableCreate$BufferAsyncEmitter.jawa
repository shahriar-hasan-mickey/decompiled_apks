record `io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.error` @AccessFlag ;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter` v0 @kind this, `n.b.c` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.<init>:(Ln/b/c;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L250118.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.<init>:(Ln/b/c;)V` @kind direct;
  #L25011e.  v1:= new `io.reactivex.internal.queue.a`;
  #L250122.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L250128.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.queue` @type ^`io.reactivex.internal.queue.a` := v1 @kind object;
  #L25012c.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L250130.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L250136.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L25013a.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L25014c.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L250150.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L250156.  v0:= temp;
  #L250158.  if v0 == 0 then goto L25015e;
  #L25015c.  return @kind void;
  #L25015e.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.downstream` @type ^`n.b.c` @kind object;
  #L250162.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L250166.  v2:= 1I;
  #L250168.  v3:= 1I;
  #L25016a.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L250170.  v4:= temp @kind wide;
  #L250172.  v6:= 0L;
  #L250176.  v8:= v6 @kind wide;
  #L250178.  v10:= lcmp(v8, v4);
  #L25017c.  if v10 == 0 then goto L2501de;
  #L250180.  call temp:= `isCancelled`(v13) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L250186.  v10:= temp;
  #L250188.  if v10 == 0 then goto L250194;
  #L25018c.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L250192.  return @kind void;
  #L250194.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L250198.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L25019e.  v11:= temp @kind object;
  #L2501a0.  if v11 != 0 then goto L2501a8;
  #L2501a4.  v12:= 1I;
  #L2501a6.  goto L2501aa;
  #L2501a8.  v12:= 0I;
  #L2501aa.  if v10 == 0 then goto L2501ca;
  #L2501ae.  if v12 == 0 then goto L2501ca;
  #L2501b2.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.error` @type ^`java.lang.Throwable` @kind object;
  #L2501b6.  if v0 == 0 then goto L2501c2;
  #L2501ba.  call temp:= `error`(v13, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.error:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2501c0.  goto L2501c8;
  #L2501c2.  call `complete`(v13) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.complete:()V` @kind virtual;
  #L2501c8.  return @kind void;
  #L2501ca.  if v12 == 0 then goto L2501d0;
  #L2501ce.  goto L2501de;
  #L2501d0.  call `onNext`(v0, v11) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2501d6.  v10:= 1L;
  #L2501da.  v8:= v8 + v10 @kind long;
  #L2501dc.  goto L250178;
  #L2501de.  v10:= lcmp(v8, v4);
  #L2501e2.  if v10 != 0 then goto L250226;
  #L2501e6.  call temp:= `isCancelled`(v13) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L2501ec.  v4:= temp;
  #L2501ee.  if v4 == 0 then goto L2501fa;
  #L2501f2.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L2501f8.  return @kind void;
  #L2501fa.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L2501fe.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L250204.  v5:= temp;
  #L250206.  if v4 == 0 then goto L250226;
  #L25020a.  if v5 == 0 then goto L250226;
  #L25020e.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.error` @type ^`java.lang.Throwable` @kind object;
  #L250212.  if v0 == 0 then goto L25021e;
  #L250216.  call temp:= `error`(v13, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.error:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L25021c.  goto L250224;
  #L25021e.  call `complete`(v13) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.complete:()V` @kind virtual;
  #L250224.  return @kind void;
  #L250226.  v4:= lcmp(v8, v6);
  #L25022a.  if v4 == 0 then goto L250234;
  #L25022e.  call temp:= `e`(v13, v8) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L250234.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L250238.  v3:= -v3 @kind int;
  #L25023a.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L250240.  v3:= temp;
  #L250242.  if v3 != 0 then goto L25016a;
  #L250246.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250258.  v0:= 1I;
  #L25025a.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.done` @type ^`boolean` := v0 @kind boolean;
  #L25025e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.drain:()V` @kind virtual;
  #L250264.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250278.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L25027c.  if v0 != 0 then goto L2502b8;
  #L250280.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L250286.  v0:= temp;
  #L250288.  if v0 == 0 then goto L25028e;
  #L25028c.  goto L2502b8;
  #L25028e.  if v2 != 0 then goto L2502a8;
  #L250292.  v2:= new `java.lang.NullPointerException`;
  #L250296.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L25029a.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2502a0.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2502a6.  return @kind void;
  #L2502a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L2502ac.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L2502b2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.drain:()V` @kind virtual;
  #L2502b8.  return @kind void;
}
procedure `void` `onRequested`(`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.onRequested:()V` @AccessFlag  {
    temp;

  #L2502cc.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.drain:()V` @kind virtual;
  #L2502d2.  return @kind void;
}
procedure `void` `onUnsubscribed`(`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.onUnsubscribed:()V` @AccessFlag  {
    temp;
    v0;

  #L2502e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L2502e8.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2502ee.  v0:= temp;
  #L2502f0.  if v0 != 0 then goto L2502fe;
  #L2502f4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L2502f8.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L2502fe.  return @kind void;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2500c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L2500cc.  if v0 != 0 then goto L250102;
  #L2500d0.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L2500d6.  v0:= temp;
  #L2500d8.  if v0 == 0 then goto L2500de;
  #L2500dc.  goto L250102;
  #L2500de.  if v2 != 0 then goto L2500f0;
  #L2500e2.  v2:= new `java.lang.NullPointerException`;
  #L2500e6.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L2500ea.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2500f0.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L2500f4.  v2:= 1I;
  #L2500f6.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BufferAsyncEmitter.done` @type ^`boolean` := v2 @kind boolean;
  #L2500fa.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BufferAsyncEmitter;.drain:()V` @kind virtual;
  #L250100.  return v2;
  #L250102.  v2:= 0I;
  #L250104.  return v2;
}
