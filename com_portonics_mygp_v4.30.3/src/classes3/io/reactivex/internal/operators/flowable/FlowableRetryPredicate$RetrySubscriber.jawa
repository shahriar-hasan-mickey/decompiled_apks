record `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.m` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.predicate` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.produced` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.remaining` @AccessFlag ;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.sa` @AccessFlag FINAL;
  `n.b.b` `io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.source` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber` v0 @kind this, `n.b.c` v1 @kind object, `long` v2 , `io.reactivex.d0.m` v4 @kind object, `io.reactivex.internal.subscriptions.SubscriptionArbiter` v5 @kind object, `n.b.b` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.<init>:(Ln/b/c;JLio/reactivex/d0/m;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;Ln/b/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25d438.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L25d43e.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25d442.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v5 @kind object;
  #L25d446.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.source` @type ^`n.b.b` := v6 @kind object;
  #L25d44a.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.predicate` @type ^`io.reactivex.d0.m` := v4 @kind object;
  #L25d44e.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L25d452.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25d464.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d468.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25d46e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25d480.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.remaining` @type ^`long` @kind wide;
  #L25d484.  v2:= 9223372036854775807L;
  #L25d48e.  v4:= lcmp(v0, v2);
  #L25d492.  if v4 == 0 then goto L25d4a2;
  #L25d496.  v2:= 1L;
  #L25d49a.  v2:= v0 - v2 @kind long;
  #L25d49e.  v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L25d4a2.  v2:= 0L;
  #L25d4a6.  v4:= lcmp(v0, v2);
  #L25d4aa.  if v4 != 0 then goto L25d4ba;
  #L25d4ae.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d4b2.  call `onError`(v0, v6) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25d4b8.  goto L25d4dc;
  #L25d4ba.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.predicate` @type ^`io.reactivex.d0.m` @kind object;
  #L25d4be.  call temp:= `test`(v0, v6) @signature `Lio/reactivex/d0/m;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L25d4c4.  v0:= temp;
  #L25d4c6.  if v0 != 0 then goto L25d4d6;
  #L25d4ca.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d4ce.  call `onError`(v0, v6) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25d4d4.  return @kind void;
  #L25d4d6.  call `subscribeNext`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.subscribeNext:()V` @kind virtual;
  #L25d4dc.  return @kind void;
  #L25d4de.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25d4e0.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25d4e6.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d4ea.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L25d4ee.  v3:= 2I;
  #L25d4f0.  v3:= new `java.lang.Throwable`[v3];
  #L25d4f4.  v4:= 0I;
  #L25d4f6.  v3[v4]:= v6 @kind object;
  #L25d4fa.  v6:= 1I;
  #L25d4fc.  v3[v6]:= v0 @kind object;
  #L25d500.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L25d506.  call `onError`(v1, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25d50c.  return @kind void;
  catch `java.lang.Throwable` @[L25d4ba..L25d4c6] goto L25d4de;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25d52c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.produced` @type ^`long` @kind wide;
  #L25d530.  v2:= 1L;
  #L25d534.  v0:= v0 + v2 @kind long;
  #L25d536.  v4.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.produced` @type ^`long` := v0 @kind wide;
  #L25d53a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25d53e.  call `onNext`(v0, v5) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25d544.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25d558.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L25d55c.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Ln/b/d;)V` @kind virtual;
  #L25d562.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate$RetrySubscriber;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L25d574.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25d57a.  v0:= temp;
  #L25d57c.  if v0 != 0 then goto L25d5ca;
  #L25d580.  v0:= 1I;
  #L25d582.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L25d586.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L25d58c.  v1:= temp;
  #L25d58e.  if v1 == 0 then goto L25d594;
  #L25d592.  return @kind void;
  #L25d594.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.produced` @type ^`long` @kind wide;
  #L25d598.  v3:= 0L;
  #L25d59c.  v5:= lcmp(v1, v3);
  #L25d5a0.  if v5 == 0 then goto L25d5b2;
  #L25d5a4.  v6.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.produced` @type ^`long` := v3 @kind wide;
  #L25d5a8.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L25d5ac.  call `produced`(v3, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L25d5b2.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber.source` @type ^`n.b.b` @kind object;
  #L25d5b6.  call `subscribe`(v1, v6) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L25d5bc.  v0:= -v0 @kind int;
  #L25d5be.  call temp:= `addAndGet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L25d5c4.  v0:= temp;
  #L25d5c6.  if v0 != 0 then goto L25d582;
  #L25d5ca.  return @kind void;
}
