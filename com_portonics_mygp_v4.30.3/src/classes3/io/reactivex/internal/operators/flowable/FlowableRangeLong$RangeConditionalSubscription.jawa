record `io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription` @kind class {
  `io.reactivex.e0.a.a` `io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription` v0 @kind this, `io.reactivex.e0.a.a` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$RangeConditionalSubscription;.<init>:(Lio/reactivex/e0/a/a;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25b9c4.  call `<init>`(v0, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$BaseRangeSubscription;.<init>:(JJ)V` @kind direct;
  #L25b9ca.  v0.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.downstream` @type ^`io.reactivex.e0.a.a` := v1 @kind object;
  #L25b9ce.  return @kind void;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$RangeConditionalSubscription;.fastPath:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L25b9e0.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.end` @type ^`long` @kind wide;
  #L25b9e4.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L25b9e8.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @type ^`long` @kind wide;
  #L25b9ec.  v5:= lcmp(v3, v0);
  #L25b9f0.  if v5 == 0 then goto L25ba14;
  #L25b9f4.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25b9f8.  if v5 == 0 then goto L25b9fe;
  #L25b9fc.  return @kind void;
  #L25b9fe.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L25ba04.  v5:= temp @kind object;
  #L25ba06.  call temp:= `tryOnNext`(v2, v5) @signature `Lio/reactivex/e0/a/a;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L25ba0c.  v5:= 1L;
  #L25ba10.  v3:= v3 + v5 @kind long;
  #L25ba12.  goto L25b9ec;
  #L25ba14.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25ba18.  if v0 == 0 then goto L25ba1e;
  #L25ba1c.  return @kind void;
  #L25ba1e.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25ba24.  return @kind void;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription` v12 @kind this, `long` v13 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$RangeConditionalSubscription;.slowPath:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L25ba38.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.end` @type ^`long` @kind wide;
  #L25ba3c.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @type ^`long` @kind wide;
  #L25ba40.  v4:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L25ba44.  v5:= 0L;
  #L25ba48.  v7:= v5 @kind wide;
  #L25ba4a.  v9:= lcmp(v7, v13);
  #L25ba4e.  if v9 == 0 then goto L25ba82;
  #L25ba52.  v9:= lcmp(v2, v0);
  #L25ba56.  if v9 == 0 then goto L25ba82;
  #L25ba5a.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25ba5e.  if v9 == 0 then goto L25ba64;
  #L25ba62.  return @kind void;
  #L25ba64.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L25ba6a.  v9:= temp @kind object;
  #L25ba6c.  call temp:= `tryOnNext`(v4, v9) @signature `Lio/reactivex/e0/a/a;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L25ba72.  v9:= temp;
  #L25ba74.  v10:= 1L;
  #L25ba78.  if v9 == 0 then goto L25ba7e;
  #L25ba7c.  v7:= v7 + v10 @kind long;
  #L25ba7e.  v2:= v2 + v10 @kind long;
  #L25ba80.  goto L25ba4a;
  #L25ba82.  v13:= lcmp(v2, v0);
  #L25ba86.  if v13 != 0 then goto L25ba9a;
  #L25ba8a.  v13:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25ba8e.  if v13 != 0 then goto L25ba98;
  #L25ba92.  call `onComplete`(v4) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25ba98.  return @kind void;
  #L25ba9a.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25baa0.  v13:= temp @kind wide;
  #L25baa2.  v9:= lcmp(v7, v13);
  #L25baa6.  if v9 != 0 then goto L25ba4a;
  #L25baaa.  v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription.index` @type ^`long` := v2 @kind wide;
  #L25baae.  v13:= -v7 @kind long;
  #L25bab0.  call temp:= `addAndGet`(v12, v13) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L25bab6.  v13:= temp @kind wide;
  #L25bab8.  v7:= lcmp(v13, v5);
  #L25babc.  if v7 != 0 then goto L25ba48;
  #L25bac0.  return @kind void;
}
