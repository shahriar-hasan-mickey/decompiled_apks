record `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.h` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.allowFatal` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.done` @AccessFlag ;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.nextSupplier` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.once` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.produced` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber` v1 @kind this, `n.b.c` v2 @kind object, `io.reactivex.d0.k` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$OnErrorNextSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/k;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L25a92c.  v0:= 0I;
  #L25a92e.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L25a934.  v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L25a938.  v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.nextSupplier` @type ^`io.reactivex.d0.k` := v3 @kind object;
  #L25a93c.  v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.allowFatal` @type ^`boolean` := v4 @kind boolean;
  #L25a940.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$OnErrorNextSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25a954.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.done` @type ^`boolean` @kind boolean;
  #L25a958.  if v0 == 0 then goto L25a95e;
  #L25a95c.  return @kind void;
  #L25a95e.  v0:= 1I;
  #L25a960.  v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25a964.  v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.once` @type ^`boolean` := v0 @kind boolean;
  #L25a968.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25a96c.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25a972.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$OnErrorNextSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L25a984.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.once` @type ^`boolean` @kind boolean;
  #L25a988.  if v0 == 0 then goto L25a9a8;
  #L25a98c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.done` @type ^`boolean` @kind boolean;
  #L25a990.  if v0 == 0 then goto L25a99c;
  #L25a994.  call `t`(v7) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25a99a.  return @kind void;
  #L25a99c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25a9a0.  call `onError`(v0, v7) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25a9a6.  return @kind void;
  #L25a9a8.  v0:= 1I;
  #L25a9aa.  v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.once` @type ^`boolean` := v0 @kind boolean;
  #L25a9ae.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.allowFatal` @type ^`boolean` @kind boolean;
  #L25a9b2.  if v1 == 0 then goto L25a9ca;
  #L25a9b6.  v1:= instanceof @variable v7 @type ^`java.lang.Exception` @kind boolean;
  #L25a9ba.  if v1 != 0 then goto L25a9ca;
  #L25a9be.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25a9c2.  call `onError`(v0, v7) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25a9c8.  return @kind void;
  #L25a9ca.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.nextSupplier` @type ^`io.reactivex.d0.k` @kind object;
  #L25a9ce.  call temp:= `apply`(v1, v7) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L25a9d4.  v1:= temp @kind object;
  #L25a9d6.  v2:= "The nextSupplier returned a null Publisher" @kind object;
  #L25a9da.  call temp:= `e`(v1, v2) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L25a9e0.  v1:= temp @kind object;
  #L25a9e2.  v1:= (`n.b.b`) v1 @kind object;
  #L25a9e6.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.produced` @type ^`long` @kind wide;
  #L25a9ea.  v4:= 0L;
  #L25a9ee.  v7:= lcmp(v2, v4);
  #L25a9f2.  if v7 == 0 then goto L25a9fc;
  #L25a9f6.  call `produced`(v6, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L25a9fc.  call `subscribe`(v1, v6) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L25aa02.  return @kind void;
  #L25aa04.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25aa06.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25aa0c.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25aa10.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L25aa14.  v4:= 2I;
  #L25aa16.  v4:= new `java.lang.Throwable`[v4];
  #L25aa1a.  v5:= 0I;
  #L25aa1c.  v4[v5]:= v7 @kind object;
  #L25aa20.  v4[v0]:= v1 @kind object;
  #L25aa24.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L25aa2a.  call `onError`(v2, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25aa30.  return @kind void;
  catch `java.lang.Throwable` @[L25a9ca..L25a9e6] goto L25aa04;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$OnErrorNextSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25aa50.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.done` @type ^`boolean` @kind boolean;
  #L25aa54.  if v0 == 0 then goto L25aa5a;
  #L25aa58.  return @kind void;
  #L25aa5a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.once` @type ^`boolean` @kind boolean;
  #L25aa5e.  if v0 != 0 then goto L25aa70;
  #L25aa62.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.produced` @type ^`long` @kind wide;
  #L25aa66.  v2:= 1L;
  #L25aa6a.  v0:= v0 + v2 @kind long;
  #L25aa6c.  v4.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L25aa70.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25aa74.  call `onNext`(v0, v5) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25aa7a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber` v0 @kind this, `n.b.d` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$OnErrorNextSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;

  #L25aa8c.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Ln/b/d;)V` @kind virtual;
  #L25aa92.  return @kind void;
}
