record `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.combiner` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.completedSources` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.error` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.latest` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.nonEmptySources` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.outputFused` @AccessFlag ;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.requested` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`[] `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.subscribers` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v1 @kind this, `n.b.c` v2 @kind object, `io.reactivex.d0.k` v3 @kind object, `int` v4 , `int` v5 , `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.<init>:(Ln/b/c;Lio/reactivex/d0/k;IIZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L24e170.  call `<init>`(v1) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L24e176.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.downstream` @type ^`n.b.c` := v2 @kind object;
  #L24e17a.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.combiner` @type ^`io.reactivex.d0.k` := v3 @kind object;
  #L24e17e.  v2:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`[v4];
  #L24e182.  v3:= 0I;
  #L24e184.  if v3 >= v4 then goto L24e19c;
  #L24e188.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`;
  #L24e18c.  call `<init>`(v0, v1, v3, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;II)V` @kind direct;
  #L24e192.  v2[v3]:= v0 @kind object;
  #L24e196.  v3:= v3 + 1;
  #L24e19a.  goto L24e184;
  #L24e19c.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`[] := v2 @kind object;
  #L24e1a0.  v2:= new `java.lang.Object`[v4];
  #L24e1a4.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.latest` @type ^`java.lang.Object`[] := v2 @kind object;
  #L24e1a8.  v2:= new `io.reactivex.internal.queue.a`;
  #L24e1ac.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L24e1b2.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @type ^`io.reactivex.internal.queue.a` := v2 @kind object;
  #L24e1b6.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L24e1ba.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L24e1c0.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L24e1c4.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L24e1c8.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L24e1ce.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L24e1d2.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.delayErrors` @type ^`boolean` := v6 @kind boolean;
  #L24e1d6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24e1e8.  v0:= 1I;
  #L24e1ea.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L24e1ee.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancelAll:()V` @kind virtual;
  #L24e1f4.  return @kind void;
}
procedure `void` `cancelAll`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancelAll:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24e208.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`[] @kind object;
  #L24e20c.  v1:= length @variable v0;
  #L24e20e.  v2:= 0I;
  #L24e210.  if v2 >= v1 then goto L24e224;
  #L24e214.  v3:= v0[v2] @kind object;
  #L24e218.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.cancel:()V` @kind virtual;
  #L24e21e.  v2:= v2 + 1;
  #L24e222.  goto L24e210;
  #L24e224.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v2 @kind this, `boolean` v3 , `boolean` v4 , `n.b.c` v5 @kind object, `io.reactivex.internal.queue.a` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.checkTerminated:(ZZLn/b/c;Lio/reactivex/internal/queue/a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L24e024.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L24e028.  v1:= 1I;
  #L24e02a.  if v0 == 0 then goto L24e03c;
  #L24e02e.  call `cancelAll`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancelAll:()V` @kind virtual;
  #L24e034.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L24e03a.  return v1;
  #L24e03c.  if v3 == 0 then goto L24e0b8;
  #L24e040.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.delayErrors` @type ^`boolean` @kind boolean;
  #L24e044.  if v3 == 0 then goto L24e07a;
  #L24e048.  if v4 == 0 then goto L24e0b8;
  #L24e04c.  call `cancelAll`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancelAll:()V` @kind virtual;
  #L24e052.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24e056.  call temp:= `b`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L24e05c.  v3:= temp @kind object;
  #L24e05e.  if v3 == 0 then goto L24e072;
  #L24e062.  v4:= `@@io.reactivex.internal.util.ExceptionHelper.a` @type ^`java.lang.Throwable` @kind object;
  #L24e066.  if v3 == v4 then goto L24e072;
  #L24e06a.  call `onError`(v5, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24e070.  goto L24e078;
  #L24e072.  call `onComplete`(v5) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L24e078.  return v1;
  #L24e07a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24e07e.  call temp:= `b`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L24e084.  v3:= temp @kind object;
  #L24e086.  if v3 == 0 then goto L24e0a6;
  #L24e08a.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.a` @type ^`java.lang.Throwable` @kind object;
  #L24e08e.  if v3 == v0 then goto L24e0a6;
  #L24e092.  call `cancelAll`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancelAll:()V` @kind virtual;
  #L24e098.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L24e09e.  call `onError`(v5, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24e0a4.  return v1;
  #L24e0a6.  if v4 == 0 then goto L24e0b8;
  #L24e0aa.  call `cancelAll`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancelAll:()V` @kind virtual;
  #L24e0b0.  call `onComplete`(v5) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L24e0b6.  return v1;
  #L24e0b8.  v3:= 0I;
  #L24e0ba.  return v3;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24e238.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L24e23c.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L24e242.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L24e254.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L24e25a.  v0:= temp;
  #L24e25c.  if v0 == 0 then goto L24e262;
  #L24e260.  return @kind void;
  #L24e262.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.outputFused` @type ^`boolean` @kind boolean;
  #L24e266.  if v0 == 0 then goto L24e272;
  #L24e26a.  call `drainOutput`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drainOutput:()V` @kind virtual;
  #L24e270.  goto L24e278;
  #L24e272.  call `drainAsync`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drainAsync:()V` @kind virtual;
  #L24e278.  return @kind void;
}
procedure `void` `drainAsync`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drainAsync:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L24e28c.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.downstream` @type ^`n.b.c` @kind object;
  #L24e290.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L24e294.  v2:= 1I;
  #L24e296.  v3:= 1I;
  #L24e298.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L24e29c.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L24e2a2.  v4:= temp @kind wide;
  #L24e2a4.  v6:= 0L;
  #L24e2a8.  v8:= v6 @kind wide;
  #L24e2aa.  v10:= lcmp(v8, v4);
  #L24e2ae.  if v10 == 0 then goto L24e344;
  #L24e2b2.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.done` @type ^`boolean` @kind boolean;
  #L24e2b6.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L24e2bc.  v11:= temp @kind object;
  #L24e2be.  if v11 != 0 then goto L24e2c6;
  #L24e2c2.  v12:= 1I;
  #L24e2c4.  goto L24e2c8;
  #L24e2c6.  v12:= 0I;
  #L24e2c8.  call temp:= `checkTerminated`(v13, v10, v12, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.checkTerminated:(ZZLn/b/c;Lio/reactivex/internal/queue/a;)Z` @kind virtual;
  #L24e2ce.  v10:= temp;
  #L24e2d0.  if v10 == 0 then goto L24e2d6;
  #L24e2d4.  return @kind void;
  #L24e2d6.  if v12 == 0 then goto L24e2dc;
  #L24e2da.  goto L24e344;
  #L24e2dc.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L24e2e2.  v10:= temp @kind object;
  #L24e2e4.  v10:= (`java.lang.Object`[]) v10 @kind object;
  #L24e2e8.  v12:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.combiner` @type ^`io.reactivex.d0.k` @kind object;
  #L24e2ec.  call temp:= `apply`(v12, v10) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L24e2f2.  v10:= temp @kind object;
  #L24e2f4.  v12:= "The combiner returned a null value" @kind object;
  #L24e2f8.  call temp:= `e`(v10, v12) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L24e2fe.  v10:= temp @kind object;
  #L24e300.  call `onNext`(v0, v10) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L24e306.  v11:= (`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`) v11 @kind object;
  #L24e30a.  call `requestOne`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.requestOne:()V` @kind virtual;
  #L24e310.  v10:= 1L;
  #L24e314.  v8:= v8 + v10 @kind long;
  #L24e316.  goto L24e2aa;
  #L24e318.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24e31a.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24e320.  call `cancelAll`(v13) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancelAll:()V` @kind virtual;
  #L24e326.  v2:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24e32a.  call temp:= `a`(v2, v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L24e330.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24e334.  call temp:= `b`(v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L24e33a.  v1:= temp @kind object;
  #L24e33c.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24e342.  return @kind void;
  #L24e344.  v10:= lcmp(v8, v4);
  #L24e348.  if v10 != 0 then goto L24e366;
  #L24e34c.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.done` @type ^`boolean` @kind boolean;
  #L24e350.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L24e356.  v11:= temp;
  #L24e358.  call temp:= `checkTerminated`(v13, v10, v11, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.checkTerminated:(ZZLn/b/c;Lio/reactivex/internal/queue/a;)Z` @kind virtual;
  #L24e35e.  v10:= temp;
  #L24e360.  if v10 == 0 then goto L24e366;
  #L24e364.  return @kind void;
  #L24e366.  v10:= lcmp(v8, v6);
  #L24e36a.  if v10 == 0 then goto L24e38c;
  #L24e36e.  v6:= 9223372036854775807L;
  #L24e378.  v10:= lcmp(v4, v6);
  #L24e37c.  if v10 == 0 then goto L24e38c;
  #L24e380.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L24e384.  v5:= -v8 @kind long;
  #L24e386.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L24e38c.  v3:= -v3 @kind int;
  #L24e38e.  call temp:= `addAndGet`(v13, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L24e394.  v3:= temp;
  #L24e396.  if v3 != 0 then goto L24e298;
  #L24e39a.  return @kind void;
  catch `java.lang.Throwable` @[L24e2e8..L24e300] goto L24e318;
}
procedure `void` `drainOutput`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drainOutput:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24e3b8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.downstream` @type ^`n.b.c` @kind object;
  #L24e3bc.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L24e3c0.  v2:= 1I;
  #L24e3c2.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L24e3c6.  if v3 == 0 then goto L24e3d2;
  #L24e3ca.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L24e3d0.  return @kind void;
  #L24e3d2.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24e3d6.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24e3dc.  v3:= temp @kind object;
  #L24e3de.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L24e3e2.  if v3 == 0 then goto L24e3f4;
  #L24e3e6.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L24e3ec.  call `onError`(v0, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24e3f2.  return @kind void;
  #L24e3f4.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.done` @type ^`boolean` @kind boolean;
  #L24e3f8.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L24e3fe.  v4:= temp;
  #L24e400.  if v4 != 0 then goto L24e40c;
  #L24e404.  v5:= 0I;
  #L24e406.  call `onNext`(v0, v5) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L24e40c.  if v3 == 0 then goto L24e41c;
  #L24e410.  if v4 == 0 then goto L24e41c;
  #L24e414.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L24e41a.  return @kind void;
  #L24e41c.  v2:= -v2 @kind int;
  #L24e41e.  call temp:= `addAndGet`(v6, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L24e424.  v2:= temp;
  #L24e426.  if v2 != 0 then goto L24e3c2;
  #L24e42a.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.innerComplete:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L24e43c.  @monitorenter v2
  #L24e43e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.latest` @type ^`java.lang.Object`[] @kind object;
  #L24e442.  v3:= v0[v3] @kind object;
  #L24e446.  v1:= 1I;
  #L24e448.  if v3 == 0 then goto L24e466;
  #L24e44c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.completedSources` @type ^`int`;
  #L24e450.  v3:= v3 + v1 @kind int;
  #L24e452.  v0:= length @variable v0;
  #L24e454.  if v3 != v0 then goto L24e45e;
  #L24e458.  v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.done` @type ^`boolean` := v1 @kind boolean;
  #L24e45c.  goto L24e46a;
  #L24e45e.  v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.completedSources` @type ^`int` := v3;
  #L24e462.  @monitorexit v2
  #L24e464.  return @kind void;
  #L24e466.  v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.done` @type ^`boolean` := v1 @kind boolean;
  #L24e46a.  @monitorexit v2
  #L24e46c.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drain:()V` @kind virtual;
  #L24e472.  return @kind void;
  #L24e474.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24e476.  @monitorexit v2
  #L24e478.  throw v3;
  catch `java.lang.Throwable` @[L24e43e..L24e46c] goto L24e474;
  catch `java.lang.Throwable` @[L24e476..L24e478] goto L24e474;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.innerError:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L24e4a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24e4a4.  call temp:= `a`(v0, v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L24e4aa.  v0:= temp;
  #L24e4ac.  if v0 == 0 then goto L24e4d4;
  #L24e4b0.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.delayErrors` @type ^`boolean` @kind boolean;
  #L24e4b4.  if v3 != 0 then goto L24e4cc;
  #L24e4b8.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.cancelAll:()V` @kind virtual;
  #L24e4be.  v2:= 1I;
  #L24e4c0.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.done` @type ^`boolean` := v2 @kind boolean;
  #L24e4c4.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drain:()V` @kind virtual;
  #L24e4ca.  goto L24e4da;
  #L24e4cc.  call `innerComplete`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.innerComplete:(I)V` @kind virtual;
  #L24e4d2.  goto L24e4da;
  #L24e4d4.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24e4da.  return @kind void;
}
procedure `void` `innerValue`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v3 @kind this, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.innerValue:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L24e4ec.  @monitorenter v3
  #L24e4ee.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.latest` @type ^`java.lang.Object`[] @kind object;
  #L24e4f2.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.nonEmptySources` @type ^`int`;
  #L24e4f6.  v2:= v0[v4] @kind object;
  #L24e4fa.  if v2 != 0 then goto L24e506;
  #L24e4fe.  v1:= v1 + 1;
  #L24e502.  v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.nonEmptySources` @type ^`int` := v1;
  #L24e506.  v0[v4]:= v5 @kind object;
  #L24e50a.  v5:= length @variable v0;
  #L24e50c.  if v5 != v1 then goto L24e52e;
  #L24e510.  v5:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L24e514.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`[] @kind object;
  #L24e518.  v1:= v1[v4] @kind object;
  #L24e51c.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L24e522.  v0:= temp @kind object;
  #L24e524.  call temp:= `l`(v5, v1, v0) @signature `Lio/reactivex/internal/queue/a;.l:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L24e52a.  v5:= 0I;
  #L24e52c.  goto L24e530;
  #L24e52e.  v5:= 1I;
  #L24e530.  @monitorexit v3
  #L24e532.  if v5 == 0 then goto L24e546;
  #L24e536.  v5:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`[] @kind object;
  #L24e53a.  v4:= v5[v4] @kind object;
  #L24e53e.  call `requestOne`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.requestOne:()V` @kind virtual;
  #L24e544.  goto L24e54c;
  #L24e546.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drain:()V` @kind virtual;
  #L24e54c.  return @kind void;
  #L24e54e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24e550.  @monitorexit v3
  #L24e552.  throw v4;
  catch `java.lang.Throwable` @[L24e4ee..L24e532] goto L24e54e;
  catch `java.lang.Throwable` @[L24e550..L24e552] goto L24e54e;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24e0cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L24e0d0.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L24e0d6.  v0:= temp;
  #L24e0d8.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24e118.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L24e11c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L24e122.  v0:= temp @kind object;
  #L24e124.  if v0 != 0 then goto L24e12c;
  #L24e128.  v0:= 0I;
  #L24e12a.  return v0 @kind object;
  #L24e12c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L24e130.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L24e136.  v1:= temp @kind object;
  #L24e138.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L24e13c.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.combiner` @type ^`io.reactivex.d0.k` @kind object;
  #L24e140.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L24e146.  v1:= temp @kind object;
  #L24e148.  v2:= "The combiner returned a null value" @kind object;
  #L24e14c.  call temp:= `e`(v1, v2) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L24e152.  v1:= temp @kind object;
  #L24e154.  v0:= (`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`) v0 @kind object;
  #L24e158.  call `requestOne`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.requestOne:()V` @kind virtual;
  #L24e15e.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24e578.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L24e57e.  v0:= temp;
  #L24e580.  if v0 == 0 then goto L24e594;
  #L24e584.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L24e588.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L24e58e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.drain:()V` @kind virtual;
  #L24e594.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24e0ec.  v0:= v3 ^& 4;
  #L24e0f0.  v1:= 0I;
  #L24e0f2.  if v0 == 0 then goto L24e0f8;
  #L24e0f6.  return v1;
  #L24e0f8.  v3:= v3 ^& 2;
  #L24e0fc.  if v3 == 0 then goto L24e102;
  #L24e100.  v1:= 1I;
  #L24e102.  v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.outputFused` @type ^`boolean` := v1 @kind boolean;
  #L24e106.  return v3;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v4 @kind this, `n.b.b`[] v5 @kind object, `int` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.subscribe:([Ln/b/b;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24e5a8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber`[] @kind object;
  #L24e5ac.  v1:= 0I;
  #L24e5ae.  if v1 >= v6 then goto L24e5d8;
  #L24e5b2.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.done` @type ^`boolean` @kind boolean;
  #L24e5b6.  if v2 != 0 then goto L24e5d8;
  #L24e5ba.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L24e5be.  if v2 == 0 then goto L24e5c4;
  #L24e5c2.  goto L24e5d8;
  #L24e5c4.  v2:= v5[v1] @kind object;
  #L24e5c8.  v3:= v0[v1] @kind object;
  #L24e5cc.  call `subscribe`(v2, v3) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L24e5d2.  v1:= v1 + 1;
  #L24e5d6.  goto L24e5ae;
  #L24e5d8.  return @kind void;
}
