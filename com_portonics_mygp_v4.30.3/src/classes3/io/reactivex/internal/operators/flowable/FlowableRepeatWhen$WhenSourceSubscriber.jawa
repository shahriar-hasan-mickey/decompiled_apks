record `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.h` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.downstream` @AccessFlag PROTECTED_FINAL;
  `io.reactivex.processors.a` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.processor` @AccessFlag PROTECTED_FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.produced` @AccessFlag PRIVATE;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.receiver` @AccessFlag PROTECTED_FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` v1 @kind this, `n.b.c` v2 @kind object, `io.reactivex.processors.a` v3 @kind object, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.<init>:(Ln/b/c;Lio/reactivex/processors/a;Ln/b/d;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L25c2e8.  v0:= 0I;
  #L25c2ea.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L25c2f0.  v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L25c2f4.  v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.processor` @type ^`io.reactivex.processors.a` := v3 @kind object;
  #L25c2f8.  v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.receiver` @type ^`n.b.d` := v4 @kind object;
  #L25c2fc.  return @kind void;
}
procedure `void` `again`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.again:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25c310.  v0:= `@@io.reactivex.internal.subscriptions.EmptySubscription.INSTANCE` @type ^`io.reactivex.internal.subscriptions.EmptySubscription` @kind object;
  #L25c314.  call `setSubscription`(v5, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Ln/b/d;)V` @kind virtual;
  #L25c31a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.produced` @type ^`long` @kind wide;
  #L25c31e.  v2:= 0L;
  #L25c322.  v4:= lcmp(v0, v2);
  #L25c326.  if v4 == 0 then goto L25c334;
  #L25c32a.  v5.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L25c32e.  call `produced`(v5, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L25c334.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.receiver` @type ^`n.b.d` @kind object;
  #L25c338.  v1:= 1L;
  #L25c33c.  call `request`(v0, v1) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25c342.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.processor` @type ^`io.reactivex.processors.a` @kind object;
  #L25c346.  call `onNext`(v0, v6) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25c34c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L25c360.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind super;
  #L25c366.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.receiver` @type ^`n.b.d` @kind object;
  #L25c36a.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25c370.  return @kind void;
}
procedure `void` `onComplete`() @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.onComplete:()V` @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {

  # return;
}
procedure `void` `onError`(`java.lang.Throwable` v0 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {

  # return;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25c384.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.produced` @type ^`long` @kind wide;
  #L25c388.  v2:= 1L;
  #L25c38c.  v0:= v0 + v2 @kind long;
  #L25c38e.  v4.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L25c392.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25c396.  call `onNext`(v0, v5) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25c39c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` v0 @kind this, `n.b.d` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L25c3b0.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Ln/b/d;)V` @kind virtual;
  #L25c3b6.  return @kind void;
}
