record `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber` @kind class {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.<init>:(Ln/b/c;Lio/reactivex/d0/k;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24ee1c.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$BaseConcatMapSubscriber;.<init>:(Lio/reactivex/d0/k;I)V` @kind direct;
  #L24ee22.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`n.b.c` := v1 @kind object;
  #L24ee26.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L24ee2a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L24ee30.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L24ee34.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ee48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L24ee4c.  if v0 != 0 then goto L24ee6a;
  #L24ee50.  v0:= 1I;
  #L24ee52.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L24ee56.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L24ee5a.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L24ee60.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24ee64.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L24ee6a.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L24ee7c.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L24ee80.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L24ee86.  v0:= temp;
  #L24ee88.  if v0 != 0 then goto L24f062;
  #L24ee8c.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L24ee90.  if v0 == 0 then goto L24ee96;
  #L24ee94.  return @kind void;
  #L24ee96.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.active` @type ^`boolean` @kind boolean;
  #L24ee9a.  if v0 != 0 then goto L24f052;
  #L24ee9e.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.done` @type ^`boolean` @kind boolean;
  #L24eea2.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L24eea6.  call temp:= `poll`(v1) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L24eeac.  v1:= temp @kind object;
  #L24eeae.  v2:= 0I;
  #L24eeb0.  v3:= 1I;
  #L24eeb2.  if v1 != 0 then goto L24eeba;
  #L24eeb6.  v4:= 1I;
  #L24eeb8.  goto L24eebc;
  #L24eeba.  v4:= 0I;
  #L24eebc.  if v0 == 0 then goto L24eed0;
  #L24eec0.  if v4 == 0 then goto L24eed0;
  #L24eec4.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`n.b.c` @kind object;
  #L24eec8.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L24eece.  return @kind void;
  #L24eed0.  if v4 != 0 then goto L24f052;
  #L24eed4.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L24eed8.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L24eede.  v0:= temp @kind object;
  #L24eee0.  v1:= "The mapper returned a null Publisher" @kind object;
  #L24eee4.  call temp:= `e`(v0, v1) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L24eeea.  v0:= temp @kind object;
  #L24eeec.  v0:= (`n.b.b`) v0 @kind object;
  #L24eef0.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.sourceMode` @type ^`int`;
  #L24eef4.  if v1 == v3 then goto L24ef1c;
  #L24eef8.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.consumed` @type ^`int`;
  #L24eefc.  v1:= v1 + v3 @kind int;
  #L24eefe.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.limit` @type ^`int`;
  #L24ef02.  if v1 != v4 then goto L24ef18;
  #L24ef06.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.consumed` @type ^`int` := v2;
  #L24ef0a.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24ef0e.  v5:= (`long`) v1 @kind i2l;
  #L24ef10.  call `request`(v4, v5) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24ef16.  goto L24ef1c;
  #L24ef18.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.consumed` @type ^`int` := v1;
  #L24ef1c.  v1:= instanceof @variable v0 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L24ef20.  if v1 == 0 then goto L24efda;
  #L24ef24.  v0:= (`java.util.concurrent.Callable`) v0 @kind object;
  #L24ef28.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L24ef2e.  v0:= temp @kind object;
  #L24ef30.  if v0 != 0 then goto L24ef36;
  #L24ef34.  goto L24ee8c;
  #L24ef36.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L24ef3a.  call temp:= `isUnbounded`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isUnbounded:()Z` @kind virtual;
  #L24ef40.  v1:= temp;
  #L24ef42.  if v1 == 0 then goto L24ef8c;
  #L24ef46.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L24ef4c.  v1:= temp;
  #L24ef4e.  if v1 != 0 then goto L24ee8c;
  #L24ef52.  call temp:= `compareAndSet`(v7, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L24ef58.  v1:= temp;
  #L24ef5a.  if v1 == 0 then goto L24ee8c;
  #L24ef5e.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`n.b.c` @kind object;
  #L24ef62.  call `onNext`(v1, v0) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L24ef68.  call temp:= `compareAndSet`(v7, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L24ef6e.  v0:= temp;
  #L24ef70.  if v0 != 0 then goto L24ee8c;
  #L24ef74.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`n.b.c` @kind object;
  #L24ef78.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24ef7c.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L24ef82.  v1:= temp @kind object;
  #L24ef84.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24ef8a.  return @kind void;
  #L24ef8c.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.active` @type ^`boolean` := v3 @kind boolean;
  #L24ef90.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L24ef94.  v2:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap$b`;
  #L24ef98.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$b;.<init>:(Ljava/lang/Object;Ln/b/c;)V` @kind direct;
  #L24ef9e.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Ln/b/d;)V` @kind virtual;
  #L24efa4.  goto L24f052;
  #L24efa6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24efa8.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24efae.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24efb2.  call `cancel`(v1) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L24efb8.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24efbc.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L24efc2.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`n.b.c` @kind object;
  #L24efc6.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24efca.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L24efd0.  v1:= temp @kind object;
  #L24efd2.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24efd8.  return @kind void;
  #L24efda.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.active` @type ^`boolean` := v3 @kind boolean;
  #L24efde.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L24efe2.  call `subscribe`(v0, v1) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L24efe8.  goto L24f052;
  #L24efea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24efec.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24eff2.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24eff6.  call `cancel`(v1) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L24effc.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24f000.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L24f006.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`n.b.c` @kind object;
  #L24f00a.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24f00e.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L24f014.  v1:= temp @kind object;
  #L24f016.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24f01c.  return @kind void;
  #L24f01e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24f020.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24f026.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24f02a.  call `cancel`(v1) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L24f030.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24f034.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L24f03a.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`n.b.c` @kind object;
  #L24f03e.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24f042.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L24f048.  v1:= temp @kind object;
  #L24f04a.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24f050.  return @kind void;
  #L24f052.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L24f056.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L24f05c.  v0:= temp;
  #L24f05e.  if v0 != 0 then goto L24ee8c;
  #L24f062.  return @kind void;
  catch `java.lang.Throwable` @[L24eea2..L24eeae] goto L24f01e;
  catch `java.lang.Throwable` @[L24eed4..L24eef0] goto L24efea;
  catch `java.lang.Throwable` @[L24ef28..L24ef30] goto L24efa6;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24f098.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24f09c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L24f0a2.  v0:= temp;
  #L24f0a4.  if v0 == 0 then goto L24f0d6;
  #L24f0a8.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24f0ac.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L24f0b2.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L24f0b8.  v2:= temp;
  #L24f0ba.  if v2 != 0 then goto L24f0dc;
  #L24f0be.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`n.b.c` @kind object;
  #L24f0c2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24f0c6.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L24f0cc.  v0:= temp @kind object;
  #L24f0ce.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24f0d4.  goto L24f0dc;
  #L24f0d6.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24f0dc.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.innerNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24f0f0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L24f0f6.  v0:= temp;
  #L24f0f8.  if v0 != 0 then goto L24f13a;
  #L24f0fc.  v0:= 0I;
  #L24f0fe.  v1:= 1I;
  #L24f100.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L24f106.  v2:= temp;
  #L24f108.  if v2 == 0 then goto L24f13a;
  #L24f10c.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`n.b.c` @kind object;
  #L24f110.  call `onNext`(v2, v4) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L24f116.  call temp:= `compareAndSet`(v3, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L24f11c.  v4:= temp;
  #L24f11e.  if v4 == 0 then goto L24f124;
  #L24f122.  return @kind void;
  #L24f124.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`n.b.c` @kind object;
  #L24f128.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24f12c.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L24f132.  v0:= temp @kind object;
  #L24f134.  call `onError`(v4, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24f13a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24f14c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24f150.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L24f156.  v0:= temp;
  #L24f158.  if v0 == 0 then goto L24f18a;
  #L24f15c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L24f160.  call `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L24f166.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L24f16c.  v2:= temp;
  #L24f16e.  if v2 != 0 then goto L24f190;
  #L24f172.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`n.b.c` @kind object;
  #L24f176.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24f17a.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L24f180.  v0:= temp @kind object;
  #L24f182.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24f188.  goto L24f190;
  #L24f18a.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24f190.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24f1a4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber.inner` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner` @kind object;
  #L24f1a8.  call `request`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.request:(J)V` @kind virtual;
  #L24f1ae.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$ConcatMapImmediate;.subscribeActual:()V` @AccessFlag  {
    temp;
    v0;

  #L24f1c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapImmediate.downstream` @type ^`n.b.c` @kind object;
  #L24f1c4.  call `onSubscribe`(v0, v1) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L24f1ca.  return @kind void;
}
