record `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debounceSelector` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debouncer` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.done` @AccessFlag ;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.index` @AccessFlag VOLATILE;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v1 @kind this, `n.b.c` v2 @kind object, `io.reactivex.d0.k` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/k;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L250bbc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L250bc2.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L250bc6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L250bcc.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debouncer` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L250bd0.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L250bd4.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debounceSelector` @type ^`io.reactivex.d0.k` := v3 @kind object;
  #L250bd8.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250bec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L250bf0.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L250bf6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debouncer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L250bfa.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L250c00.  return @kind void;
}
procedure `void` `emit`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v3 @kind this, `long` v4 , `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.emit:(JLjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L250c14.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.index` @type ^`long` @kind wide;
  #L250c18.  v2:= lcmp(v4, v0);
  #L250c1c.  if v2 != 0 then goto L250c68;
  #L250c20.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L250c26.  v4:= temp @kind wide;
  #L250c28.  v0:= 0L;
  #L250c2c.  v2:= lcmp(v4, v0);
  #L250c30.  if v2 == 0 then goto L250c4a;
  #L250c34.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L250c38.  call `onNext`(v4, v6) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L250c3e.  v4:= 1L;
  #L250c42.  call temp:= `e`(v3, v4) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L250c48.  goto L250c68;
  #L250c4a.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.cancel:()V` @kind virtual;
  #L250c50.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L250c54.  v5:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L250c58.  v6:= "Could not deliver value due to lack of requests" @kind object;
  #L250c5c.  call `<init>`(v5, v6) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L250c62.  call `onError`(v4, v5) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L250c68.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L250c7c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.done` @type ^`boolean` @kind boolean;
  #L250c80.  if v0 == 0 then goto L250c86;
  #L250c84.  return @kind void;
  #L250c86.  v0:= 1I;
  #L250c88.  v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L250c8c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debouncer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L250c90.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L250c96.  v0:= temp @kind object;
  #L250c98.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L250c9c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L250ca2.  v1:= temp;
  #L250ca4.  if v1 != 0 then goto L250cc6;
  #L250ca8.  v0:= (`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a`) v0 @kind object;
  #L250cac.  call `c`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$a;.c:()V` @kind virtual;
  #L250cb2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debouncer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L250cb6.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L250cbc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L250cc0.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L250cc6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250cd8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debouncer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L250cdc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L250ce2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L250ce6.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L250cec.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L250d00.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.done` @type ^`boolean` @kind boolean;
  #L250d04.  if v0 == 0 then goto L250d0a;
  #L250d08.  return @kind void;
  #L250d0a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.index` @type ^`long` @kind wide;
  #L250d0e.  v2:= 1L;
  #L250d12.  v0:= v0 + v2 @kind long;
  #L250d14.  v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.index` @type ^`long` := v0 @kind wide;
  #L250d18.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debouncer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L250d1c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L250d22.  v2:= temp @kind object;
  #L250d24.  v2:= (`io.reactivex.disposables.b`) v2 @kind object;
  #L250d28.  if v2 == 0 then goto L250d32;
  #L250d2c.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L250d32.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debounceSelector` @type ^`io.reactivex.d0.k` @kind object;
  #L250d36.  call temp:= `apply`(v3, v6) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L250d3c.  v3:= temp @kind object;
  #L250d3e.  v4:= "The publisher supplied is null" @kind object;
  #L250d42.  call temp:= `e`(v3, v4) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L250d48.  v3:= temp @kind object;
  #L250d4a.  v3:= (`n.b.b`) v3 @kind object;
  #L250d4e.  v4:= new `io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber$a`;
  #L250d52.  call `<init>`(v4, v5, v0, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;JLjava/lang/Object;)V` @kind direct;
  #L250d58.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.debouncer` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L250d5c.  call temp:= `compareAndSet`(v6, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L250d62.  v6:= temp;
  #L250d64.  if v6 == 0 then goto L250d6e;
  #L250d68.  call `subscribe`(v3, v4) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L250d6e.  return @kind void;
  #L250d70.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L250d72.  call `b`(v6) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L250d78.  call `cancel`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.cancel:()V` @kind virtual;
  #L250d7e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L250d82.  call `onError`(v0, v6) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L250d88.  return @kind void;
  catch `java.lang.Throwable` @[L250d32..L250d4e] goto L250d70;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L250da8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L250dac.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L250db2.  v0:= temp;
  #L250db4.  if v0 == 0 then goto L250dd6;
  #L250db8.  v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L250dbc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L250dc0.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L250dc6.  v0:= 9223372036854775807L;
  #L250dd0.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L250dd6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$DebounceSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250de8.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L250dee.  v0:= temp;
  #L250df0.  if v0 == 0 then goto L250dfa;
  #L250df4.  call temp:= `a`(v1, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L250dfa.  return @kind void;
}
