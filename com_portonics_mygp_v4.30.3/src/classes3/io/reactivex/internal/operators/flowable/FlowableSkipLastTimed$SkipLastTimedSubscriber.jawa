record `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.error` @AccessFlag ;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.x` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.scheduler` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.time` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.unit` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber` v1 @kind this, `n.b.c` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.x` v6 @kind object, `int` v7 , `boolean` v8 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$SkipLastTimedSubscriber;.<init>:(Ln/b/c;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L25ee18.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L25ee1e.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L25ee22.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25ee28.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L25ee2c.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L25ee30.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.time` @type ^`long` := v3 @kind wide;
  #L25ee34.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L25ee38.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.scheduler` @type ^`io.reactivex.x` := v6 @kind object;
  #L25ee3c.  v2:= new `io.reactivex.internal.queue.a`;
  #L25ee40.  call `<init>`(v2, v7) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L25ee46.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.a` := v2 @kind object;
  #L25ee4a.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.delayError` @type ^`boolean` := v8 @kind boolean;
  #L25ee4e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$SkipLastTimedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25ee60.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L25ee64.  if v0 != 0 then goto L25ee8e;
  #L25ee68.  v0:= 1I;
  #L25ee6a.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L25ee6e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25ee72.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25ee78.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25ee7e.  v0:= temp;
  #L25ee80.  if v0 != 0 then goto L25ee8e;
  #L25ee84.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L25ee88.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L25ee8e.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber` v2 @kind this, `boolean` v3 , `boolean` v4 , `n.b.c` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$SkipLastTimedSubscriber;.checkTerminated:(ZZLn/b/c;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L25eda4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L25eda8.  v1:= 1I;
  #L25edaa.  if v0 == 0 then goto L25edba;
  #L25edae.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L25edb2.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L25edb8.  return v1;
  #L25edba.  if v3 == 0 then goto L25ee04;
  #L25edbe.  if v6 == 0 then goto L25edde;
  #L25edc2.  if v4 == 0 then goto L25ee04;
  #L25edc6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L25edca.  if v3 == 0 then goto L25edd6;
  #L25edce.  call `onError`(v5, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25edd4.  goto L25eddc;
  #L25edd6.  call `onComplete`(v5) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25eddc.  return v1;
  #L25edde.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L25ede2.  if v3 == 0 then goto L25edf8;
  #L25ede6.  v4:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L25edea.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L25edf0.  call `onError`(v5, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25edf6.  return v1;
  #L25edf8.  if v4 == 0 then goto L25ee04;
  #L25edfc.  call `onComplete`(v5) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25ee02.  return v1;
  #L25ee04.  v3:= 0I;
  #L25ee06.  return v3;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber` v23 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$SkipLastTimedSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L25eea0.  v0:= v23 @kind object;
  #L25eea4.  call temp:= `getAndIncrement`(v23) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25eeaa.  v1:= temp;
  #L25eeac.  if v1 == 0 then goto L25eeb2;
  #L25eeb0.  return @kind void;
  #L25eeb2.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25eeb6.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L25eeba.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.delayError` @type ^`boolean` @kind boolean;
  #L25eebe.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L25eec2.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.scheduler` @type ^`io.reactivex.x` @kind object;
  #L25eec6.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.time` @type ^`long` @kind wide;
  #L25eeca.  v9:= 1I;
  #L25eecc.  v10:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25eed0.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25eed6.  v10:= temp @kind wide;
  #L25eed8.  v14:= 0L;
  #L25eedc.  v16:= lcmp(v14, v10);
  #L25eee0.  if v16 == 0 then goto L25ef5a;
  #L25eee4.  v8:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.done` @type ^`boolean` @kind boolean;
  #L25eee8.  call temp:= `peek`(v2) @signature `Lio/reactivex/internal/queue/a;.peek:()Ljava/lang/Object;` @kind virtual;
  #L25eeee.  v17:= temp @kind object;
  #L25eef0.  v17:= (`java.lang.Long`) v17 @kind object;
  #L25eef4.  if v17 != 0 then goto L25eefe;
  #L25eef8.  v18:= 1I;
  #L25eefc.  goto L25ef02;
  #L25eefe.  v18:= 0I;
  #L25ef02.  call temp:= `b`(v5, v4) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L25ef08.  v19:= temp @kind wide;
  #L25ef0a.  if v18 != 0 then goto L25ef26;
  #L25ef0e.  call temp:= `longValue`(v17) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L25ef14.  v21:= temp @kind wide;
  #L25ef16.  v19:= v19 - v6 @kind long;
  #L25ef1a.  v17:= lcmp(v21, v19);
  #L25ef1e.  if v17 <= 0 then goto L25ef26;
  #L25ef22.  v12:= 1I;
  #L25ef24.  goto L25ef2a;
  #L25ef26.  v12:= v18;
  #L25ef2a.  call temp:= `checkTerminated`(v0, v8, v12, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$SkipLastTimedSubscriber;.checkTerminated:(ZZLn/b/c;Z)Z` @kind virtual;
  #L25ef30.  v8:= temp;
  #L25ef32.  if v8 == 0 then goto L25ef38;
  #L25ef36.  return @kind void;
  #L25ef38.  if v12 == 0 then goto L25ef3e;
  #L25ef3c.  goto L25ef5a;
  #L25ef3e.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L25ef44.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L25ef4a.  v8:= temp @kind object;
  #L25ef4c.  call `onNext`(v1, v8) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25ef52.  v12:= 1L;
  #L25ef56.  v14:= v14 + v12 @kind long;
  #L25ef58.  goto L25eedc;
  #L25ef5a.  v10:= 0L;
  #L25ef5e.  v8:= lcmp(v14, v10);
  #L25ef62.  if v8 == 0 then goto L25ef70;
  #L25ef66.  v8:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25ef6a.  call temp:= `e`(v8, v14) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25ef70.  v8:= -v9 @kind int;
  #L25ef72.  call temp:= `addAndGet`(v0, v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L25ef78.  v9:= temp;
  #L25ef7a.  if v9 != 0 then goto L25eecc;
  #L25ef7e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$SkipLastTimedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25ef90.  v0:= 1I;
  #L25ef92.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25ef96.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$SkipLastTimedSubscriber;.drain:()V` @kind virtual;
  #L25ef9c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$SkipLastTimedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L25efb0.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L25efb4.  v1:= 1I;
  #L25efb6.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.done` @type ^`boolean` := v1 @kind boolean;
  #L25efba.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$SkipLastTimedSubscriber;.drain:()V` @kind virtual;
  #L25efc0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$SkipLastTimedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L25efd4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.scheduler` @type ^`io.reactivex.x` @kind object;
  #L25efd8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L25efdc.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/x;.b:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L25efe2.  v0:= temp @kind wide;
  #L25efe4.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L25efe8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L25efee.  v0:= temp @kind object;
  #L25eff0.  call temp:= `l`(v2, v0, v4) @signature `Lio/reactivex/internal/queue/a;.l:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L25eff6.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$SkipLastTimedSubscriber;.drain:()V` @kind virtual;
  #L25effc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$SkipLastTimedSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25f010.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25f014.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25f01a.  v0:= temp;
  #L25f01c.  if v0 == 0 then goto L25f03e;
  #L25f020.  v2.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L25f024.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25f028.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25f02e.  v0:= 9223372036854775807L;
  #L25f038.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25f03e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$SkipLastTimedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25f050.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25f056.  v0:= temp;
  #L25f058.  if v0 == 0 then goto L25f06c;
  #L25f05c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$SkipLastTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25f060.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25f066.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$SkipLastTimedSubscriber;.drain:()V` @kind virtual;
  #L25f06c.  return @kind void;
}
