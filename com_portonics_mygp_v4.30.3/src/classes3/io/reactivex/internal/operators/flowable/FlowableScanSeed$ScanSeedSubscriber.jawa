record `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `io.reactivex.d0.c` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.accumulator` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.consumed` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.error` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.limit` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.prefetch` @AccessFlag FINAL;
  `io.reactivex.e0.a.i` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.requested` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.upstream` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.value` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.c` v2 @kind object, `java.lang.Object` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/c;Ljava/lang/Object;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25dec4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L25deca.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25dece.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.accumulator` @type ^`io.reactivex.d0.c` := v2 @kind object;
  #L25ded2.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.value` @type ^`java.lang.Object` := v3 @kind object;
  #L25ded6.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.prefetch` @type ^`int` := v4;
  #L25deda.  v1:= v4 ^> 2;
  #L25dede.  v1:= v4 - v1 @kind int;
  #L25dee2.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.limit` @type ^`int` := v1;
  #L25dee6.  v1:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L25deea.  call `<init>`(v1, v4) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L25def0.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.queue` @type ^`io.reactivex.e0.a.i` := v1 @kind object;
  #L25def4.  call temp:= `offer`(v1, v3) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L25defa.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L25defe.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25df04.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L25df08.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25df1c.  v0:= 1I;
  #L25df1e.  v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L25df22.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25df26.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25df2c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25df32.  v0:= temp;
  #L25df34.  if v0 != 0 then goto L25df42;
  #L25df38.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L25df3c.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L25df42.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L25df54.  v0:= v17 @kind object;
  #L25df58.  call temp:= `getAndIncrement`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25df5e.  v1:= temp;
  #L25df60.  if v1 == 0 then goto L25df66;
  #L25df64.  return @kind void;
  #L25df66.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25df6a.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L25df6e.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.limit` @type ^`int`;
  #L25df72.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.consumed` @type ^`int`;
  #L25df76.  v5:= 1I;
  #L25df78.  v6:= 1I;
  #L25df7a.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25df7e.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25df84.  v7:= temp @kind wide;
  #L25df86.  v9:= 0L;
  #L25df8a.  v11:= v9 @kind wide;
  #L25df8c.  v13:= lcmp(v11, v7);
  #L25df90.  if v13 == 0 then goto L25e014;
  #L25df94.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L25df98.  if v13 == 0 then goto L25dfa4;
  #L25df9c.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L25dfa2.  return @kind void;
  #L25dfa4.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.done` @type ^`boolean` @kind boolean;
  #L25dfa8.  if v13 == 0 then goto L25dfc2;
  #L25dfac.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L25dfb0.  if v14 == 0 then goto L25dfc2;
  #L25dfb4.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L25dfba.  call `onError`(v1, v14) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25dfc0.  return @kind void;
  #L25dfc2.  call temp:= `poll`(v2) @signature `Lio/reactivex/e0/a/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L25dfc8.  v14:= temp @kind object;
  #L25dfca.  v15:= 0I;
  #L25dfcc.  if v14 != 0 then goto L25dfd6;
  #L25dfd0.  v16:= 1I;
  #L25dfd4.  goto L25dfda;
  #L25dfd6.  v16:= 0I;
  #L25dfda.  if v13 == 0 then goto L25dfea;
  #L25dfde.  if v16 == 0 then goto L25dfea;
  #L25dfe2.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25dfe8.  return @kind void;
  #L25dfea.  if v16 == 0 then goto L25dff0;
  #L25dfee.  goto L25e014;
  #L25dff0.  call `onNext`(v1, v14) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25dff6.  v13:= 1L;
  #L25dffa.  v11:= v11 + v13 @kind long;
  #L25dffc.  v4:= v4 + 1;
  #L25e000.  if v4 != v3 then goto L25df8c;
  #L25e004.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25e008.  v13:= (`long`) v3 @kind i2l;
  #L25e00a.  call `request`(v4, v13) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25e010.  v4:= 0I;
  #L25e012.  goto L25df8c;
  #L25e014.  v13:= lcmp(v11, v7);
  #L25e018.  if v13 != 0 then goto L25e04e;
  #L25e01c.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.done` @type ^`boolean` @kind boolean;
  #L25e020.  if v7 == 0 then goto L25e04e;
  #L25e024.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L25e028.  if v7 == 0 then goto L25e03a;
  #L25e02c.  call `clear`(v2) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L25e032.  call `onError`(v1, v7) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25e038.  return @kind void;
  #L25e03a.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L25e040.  v7:= temp;
  #L25e042.  if v7 == 0 then goto L25e04e;
  #L25e046.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25e04c.  return @kind void;
  #L25e04e.  v7:= lcmp(v11, v9);
  #L25e052.  if v7 == 0 then goto L25e060;
  #L25e056.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25e05a.  call temp:= `e`(v7, v11) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25e060.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.consumed` @type ^`int` := v4;
  #L25e064.  v6:= -v6 @kind int;
  #L25e066.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L25e06c.  v6:= temp;
  #L25e06e.  if v6 != 0 then goto L25df7a;
  #L25e072.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25e084.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.done` @type ^`boolean` @kind boolean;
  #L25e088.  if v0 == 0 then goto L25e08e;
  #L25e08c.  return @kind void;
  #L25e08e.  v0:= 1I;
  #L25e090.  v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25e094.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.drain:()V` @kind virtual;
  #L25e09a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25e0ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.done` @type ^`boolean` @kind boolean;
  #L25e0b0.  if v0 == 0 then goto L25e0bc;
  #L25e0b4.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25e0ba.  return @kind void;
  #L25e0bc.  v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L25e0c0.  v2:= 1I;
  #L25e0c2.  v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L25e0c6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.drain:()V` @kind virtual;
  #L25e0cc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25e0e0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.done` @type ^`boolean` @kind boolean;
  #L25e0e4.  if v0 == 0 then goto L25e0ea;
  #L25e0e8.  return @kind void;
  #L25e0ea.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L25e0ee.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.accumulator` @type ^`io.reactivex.d0.c` @kind object;
  #L25e0f2.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/d0/c;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L25e0f8.  v3:= temp @kind object;
  #L25e0fa.  v0:= "The accumulator returned a null value" @kind object;
  #L25e0fe.  call temp:= `e`(v3, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L25e104.  v3:= temp @kind object;
  #L25e106.  v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.value` @type ^`java.lang.Object` := v3 @kind object;
  #L25e10a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L25e10e.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L25e114.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.drain:()V` @kind virtual;
  #L25e11a.  return @kind void;
  #L25e11c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25e11e.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25e124.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25e128.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25e12e.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L25e134.  return @kind void;
  catch `java.lang.Throwable` @[L25e0ee..L25e106] goto L25e11c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25e154.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25e158.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25e15e.  v0:= temp;
  #L25e160.  if v0 == 0 then goto L25e182;
  #L25e164.  v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L25e168.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25e16c.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25e172.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.prefetch` @type ^`int`;
  #L25e176.  v0:= v0 + -1;
  #L25e17a.  v0:= (`long`) v0 @kind i2l;
  #L25e17c.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25e182.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25e194.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25e19a.  v0:= temp;
  #L25e19c.  if v0 == 0 then goto L25e1b0;
  #L25e1a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$ScanSeedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25e1a4.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25e1aa.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$ScanSeedSubscriber;.drain:()V` @kind virtual;
  #L25e1b0.  return @kind void;
}
