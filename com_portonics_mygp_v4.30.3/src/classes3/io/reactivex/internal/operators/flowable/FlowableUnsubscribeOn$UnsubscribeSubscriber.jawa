record `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.x` `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.scheduler` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.x` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.<init>:(Ln/b/c;Lio/reactivex/x;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L261ca8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L261cae.  v0.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L261cb2.  v0.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.scheduler` @type ^`io.reactivex.x` := v2 @kind object;
  #L261cb6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L261cc8.  v0:= 0I;
  #L261cca.  v1:= 1I;
  #L261ccc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L261cd2.  v0:= temp;
  #L261cd4.  if v0 == 0 then goto L261cec;
  #L261cd8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.scheduler` @type ^`io.reactivex.x` @kind object;
  #L261cdc.  v1:= new `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber$a`;
  #L261ce0.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;)V` @kind direct;
  #L261ce6.  call temp:= `c`(v0, v1) @signature `Lio/reactivex/x;.c:(Ljava/lang/Runnable;)Lio/reactivex/disposables/b;` @kind virtual;
  #L261cec.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L261d00.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L261d06.  v0:= temp;
  #L261d08.  if v0 != 0 then goto L261d16;
  #L261d0c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261d10.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L261d16.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L261d28.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L261d2e.  v0:= temp;
  #L261d30.  if v0 == 0 then goto L261d3c;
  #L261d34.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L261d3a.  return @kind void;
  #L261d3c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261d40.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L261d46.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L261d58.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L261d5e.  v0:= temp;
  #L261d60.  if v0 != 0 then goto L261d6e;
  #L261d64.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261d68.  call `onNext`(v0, v2) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L261d6e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L261d80.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L261d84.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L261d8a.  v0:= temp;
  #L261d8c.  if v0 == 0 then goto L261d9e;
  #L261d90.  v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.upstream` @type ^`n.b.d` := v2 @kind object;
  #L261d94.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L261d98.  call `onSubscribe`(v2, v1) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L261d9e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L261db0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$UnsubscribeSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L261db4.  call `request`(v0, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L261dba.  return @kind void;
}
