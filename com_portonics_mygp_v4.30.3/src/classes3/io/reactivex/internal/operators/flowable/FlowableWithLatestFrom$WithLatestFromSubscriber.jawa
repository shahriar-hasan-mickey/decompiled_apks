record `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.e0.a.a` @kind interface, `n.b.d` @kind interface {
  `io.reactivex.d0.c` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.combiner` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.other` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.requested` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v1 @kind this, `n.b.c` v2 @kind object, `io.reactivex.d0.c` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L263334.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26333a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L26333e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L263344.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L263348.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L26334c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L263352.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L263356.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L26335a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L263360.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L263364.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L263368.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.combiner` @type ^`io.reactivex.d0.c` := v3 @kind object;
  #L26336c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L263380.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L263384.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26338a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26338e.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L263394.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2633a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2633ac.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2633b2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2633b6.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2633bc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2633d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2633d4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2633da.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2633de.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2633e4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2633f8.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L2633fe.  v3:= temp;
  #L263400.  if v3 != 0 then goto L26341e;
  #L263404.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L263408.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L26340e.  v3:= temp @kind object;
  #L263410.  v3:= (`n.b.d`) v3 @kind object;
  #L263414.  v0:= 1L;
  #L263418.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L26341e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L263430.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L263434.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L263438.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Ln/b/d;)Z` @kind static;
  #L26343e.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L263450.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L263454.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26345a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L26345e.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L263464.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L263478.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L26347c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L263480.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L263486.  return @kind void;
}
procedure `boolean` `setOther`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.setOther:(Ln/b/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2632a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.other` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2632ac.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L2632b2.  v2:= temp;
  #L2632b4.  return v2;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2632c8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2632ce.  v0:= temp @kind object;
  #L2632d0.  v1:= 0I;
  #L2632d2.  if v0 == 0 then goto L263314;
  #L2632d6.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.combiner` @type ^`io.reactivex.d0.c` @kind object;
  #L2632da.  call temp:= `apply`(v2, v4, v0) @signature `Lio/reactivex/d0/c;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2632e0.  v4:= temp @kind object;
  #L2632e2.  v0:= "The combiner returned a null value" @kind object;
  #L2632e6.  call temp:= `e`(v4, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2632ec.  v4:= temp @kind object;
  #L2632ee.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2632f2.  call `onNext`(v0, v4) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2632f8.  v4:= 1I;
  #L2632fa.  return v4;
  #L2632fc.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2632fe.  call `b`(v4) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L263304.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$WithLatestFromSubscriber;.cancel:()V` @kind virtual;
  #L26330a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L26330e.  call `onError`(v0, v4) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L263314.  return v1;
  catch `java.lang.Throwable` @[L2632d6..L2632ee] goto L2632fc;
}
