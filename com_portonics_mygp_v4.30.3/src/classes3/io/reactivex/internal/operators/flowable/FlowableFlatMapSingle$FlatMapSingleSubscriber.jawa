record `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.delayErrors` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.maxConcurrency` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.set` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/k;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L254254.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L25425a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25425e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L254262.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L254266.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.maxConcurrency` @type ^`int` := v4;
  #L25426a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L25426e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L254274.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L254278.  v1:= new `io.reactivex.disposables.a`;
  #L25427c.  call `<init>`(v1) @signature `Lio/reactivex/disposables/a;.<init>:()V` @kind direct;
  #L254282.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.set` @type ^`io.reactivex.disposables.a` := v1 @kind object;
  #L254286.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L25428a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L254290.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L254294.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L254298.  v2:= 1I;
  #L25429a.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L2542a0.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L2542a4.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2542a8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2542ae.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L2542b2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2542c4.  v0:= 1I;
  #L2542c6.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L2542ca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2542ce.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L2542d4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L2542d8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L2542de.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.clear:()V` @AccessFlag  {
    temp;
    v0;

  #L2542f0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2542f4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2542fa.  v0:= temp @kind object;
  #L2542fc.  v0:= (`io.reactivex.internal.queue.a`) v0 @kind object;
  #L254300.  if v0 == 0 then goto L25430a;
  #L254304.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L25430a.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L25431c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L254322.  v0:= temp;
  #L254324.  if v0 != 0 then goto L25432e;
  #L254328.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.drainLoop:()V` @kind virtual;
  #L25432e.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v15 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L254340.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L254344.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L254348.  v2:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25434c.  v3:= 1I;
  #L25434e.  v4:= 1I;
  #L254350.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L254354.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25435a.  v5:= temp @kind wide;
  #L25435c.  v7:= 0L;
  #L254360.  v9:= v7 @kind wide;
  #L254362.  v11:= 0I;
  #L254364.  v12:= lcmp(v9, v5);
  #L254368.  if v12 == 0 then goto L254426;
  #L25436c.  v12:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L254370.  if v12 == 0 then goto L25437c;
  #L254374.  call `clear`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.clear:()V` @kind virtual;
  #L25437a.  return @kind void;
  #L25437c.  v12:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L254380.  if v12 != 0 then goto L2543b2;
  #L254384.  v12:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L254388.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25438e.  v12:= temp @kind object;
  #L254390.  v12:= (`java.lang.Throwable`) v12 @kind object;
  #L254394.  if v12 == 0 then goto L2543b2;
  #L254398.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25439c.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2543a2.  v1:= temp @kind object;
  #L2543a4.  call `clear`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.clear:()V` @kind virtual;
  #L2543aa.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2543b0.  return @kind void;
  #L2543b2.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2543b8.  v12:= temp;
  #L2543ba.  if v12 != 0 then goto L2543c2;
  #L2543be.  v12:= 1I;
  #L2543c0.  goto L2543c4;
  #L2543c2.  v12:= 0I;
  #L2543c4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2543ca.  v13:= temp @kind object;
  #L2543cc.  v13:= (`io.reactivex.internal.queue.a`) v13 @kind object;
  #L2543d0.  if v13 == 0 then goto L2543de;
  #L2543d4.  call temp:= `poll`(v13) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L2543da.  v13:= temp @kind object;
  #L2543dc.  goto L2543e0;
  #L2543de.  v13:= 0I;
  #L2543e0.  if v13 != 0 then goto L2543e8;
  #L2543e4.  v14:= 1I;
  #L2543e6.  goto L2543ea;
  #L2543e8.  v14:= 0I;
  #L2543ea.  if v12 == 0 then goto L254412;
  #L2543ee.  if v14 == 0 then goto L254412;
  #L2543f2.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2543f6.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2543fc.  v1:= temp @kind object;
  #L2543fe.  if v1 == 0 then goto L25440a;
  #L254402.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L254408.  goto L254410;
  #L25440a.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L254410.  return @kind void;
  #L254412.  if v14 == 0 then goto L254418;
  #L254416.  goto L254426;
  #L254418.  call `onNext`(v0, v13) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25441e.  v11:= 1L;
  #L254422.  v9:= v9 + v11 @kind long;
  #L254424.  goto L254362;
  #L254426.  v12:= lcmp(v9, v5);
  #L25442a.  if v12 != 0 then goto L2544cc;
  #L25442e.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L254432.  if v5 == 0 then goto L25443e;
  #L254436.  call `clear`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.clear:()V` @kind virtual;
  #L25443c.  return @kind void;
  #L25443e.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L254442.  if v5 != 0 then goto L254474;
  #L254446.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25444a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L254450.  v5:= temp @kind object;
  #L254452.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L254456.  if v5 == 0 then goto L254474;
  #L25445a.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25445e.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L254464.  v1:= temp @kind object;
  #L254466.  call `clear`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.clear:()V` @kind virtual;
  #L25446c.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L254472.  return @kind void;
  #L254474.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L25447a.  v5:= temp;
  #L25447c.  if v5 != 0 then goto L254484;
  #L254480.  v5:= 1I;
  #L254482.  goto L254486;
  #L254484.  v5:= 0I;
  #L254486.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25448c.  v6:= temp @kind object;
  #L25448e.  v6:= (`io.reactivex.internal.queue.a`) v6 @kind object;
  #L254492.  if v6 == 0 then goto L2544a2;
  #L254496.  call temp:= `isEmpty`(v6) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L25449c.  v6:= temp;
  #L25449e.  if v6 == 0 then goto L2544a4;
  #L2544a2.  v11:= 1I;
  #L2544a4.  if v5 == 0 then goto L2544cc;
  #L2544a8.  if v11 == 0 then goto L2544cc;
  #L2544ac.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2544b0.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2544b6.  v1:= temp @kind object;
  #L2544b8.  if v1 == 0 then goto L2544c4;
  #L2544bc.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2544c2.  goto L2544ca;
  #L2544c4.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2544ca.  return @kind void;
  #L2544cc.  v5:= lcmp(v9, v7);
  #L2544d0.  if v5 == 0 then goto L2544f6;
  #L2544d4.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2544d8.  call temp:= `e`(v5, v9) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L2544de.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.maxConcurrency` @type ^`int`;
  #L2544e2.  v6:= 2147483647I;
  #L2544e8.  if v5 == v6 then goto L2544f6;
  #L2544ec.  v5:= v15.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2544f0.  call `request`(v5, v9) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2544f6.  v4:= -v4 @kind int;
  #L2544f8.  call temp:= `addAndGet`(v15, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L2544fe.  v4:= temp;
  #L254500.  if v4 != 0 then goto L254350;
  #L254504.  return @kind void;
}
procedure `io.reactivex.internal.queue.a` `getOrCreateQueue`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.getOrCreateQueue:()Lio/reactivex/internal/queue/a;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L254208.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25420c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L254212.  v0:= temp @kind object;
  #L254214.  v0:= (`io.reactivex.internal.queue.a`) v0 @kind object;
  #L254218.  if v0 == 0 then goto L25421e;
  #L25421c.  return v0 @kind object;
  #L25421e.  v0:= new `io.reactivex.internal.queue.a`;
  #L254222.  call temp:= `a`() @signature `Lio/reactivex/e;.a:()I` @kind static;
  #L254228.  v1:= temp;
  #L25422a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L254230.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L254234.  v2:= 0I;
  #L254236.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L25423c.  v1:= temp;
  #L25423e.  if v1 == 0 then goto L254208;
  #L254242.  return v0 @kind object;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v2 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber$InnerObserver` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.innerError:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber$InnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L254518.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L25451c.  call temp:= `c`(v0, v3) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L254522.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L254526.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L25452c.  v3:= temp;
  #L25452e.  if v3 == 0 then goto L25457e;
  #L254532.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L254536.  if v3 != 0 then goto L254550;
  #L25453a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25453e.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L254544.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L254548.  call `dispose`(v3) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L25454e.  goto L25456c;
  #L254550.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.maxConcurrency` @type ^`int`;
  #L254554.  v4:= 2147483647I;
  #L25455a.  if v3 == v4 then goto L25456c;
  #L25455e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L254562.  v0:= 1L;
  #L254566.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25456c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L254570.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L254576.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L25457c.  goto L254584;
  #L25457e.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L254584.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v5 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber$InnerObserver` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.innerSuccess:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber$InnerObserver;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L254598.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L25459c.  call temp:= `c`(v0, v6) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2545a2.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2545a8.  v6:= temp;
  #L2545aa.  if v6 != 0 then goto L25468c;
  #L2545ae.  v6:= 0I;
  #L2545b0.  v0:= 1I;
  #L2545b2.  call temp:= `compareAndSet`(v5, v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L2545b8.  v1:= temp;
  #L2545ba.  if v1 == 0 then goto L25468c;
  #L2545be.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L2545c2.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L2545c8.  v1:= temp;
  #L2545ca.  if v1 != 0 then goto L2545d0;
  #L2545ce.  v6:= 1I;
  #L2545d0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2545d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2545da.  v0:= temp @kind wide;
  #L2545dc.  v2:= 0L;
  #L2545e0.  v4:= lcmp(v0, v2);
  #L2545e4.  if v4 == 0 then goto L254666;
  #L2545e8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2545ec.  call `onNext`(v0, v7) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2545f2.  v7:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2545f6.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2545fc.  v7:= temp @kind object;
  #L2545fe.  v7:= (`io.reactivex.internal.queue.a`) v7 @kind object;
  #L254602.  if v6 == 0 then goto L25463e;
  #L254606.  if v7 == 0 then goto L254616;
  #L25460a.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L254610.  v6:= temp;
  #L254612.  if v6 == 0 then goto L25463e;
  #L254616.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25461a.  call temp:= `terminate`(v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L254620.  v6:= temp @kind object;
  #L254622.  if v6 == 0 then goto L254632;
  #L254626.  v7:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25462a.  call `onError`(v7, v6) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L254630.  goto L25463c;
  #L254632.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L254636.  call `onComplete`(v6) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25463c.  return @kind void;
  #L25463e.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L254642.  v0:= 1L;
  #L254646.  call temp:= `e`(v6, v0) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25464c.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.maxConcurrency` @type ^`int`;
  #L254650.  v7:= 2147483647I;
  #L254656.  if v6 == v7 then goto L254678;
  #L25465a.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25465e.  call `request`(v6, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L254664.  goto L254678;
  #L254666.  call temp:= `getOrCreateQueue`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.getOrCreateQueue:()Lio/reactivex/internal/queue/a;` @kind virtual;
  #L25466c.  v6:= temp @kind object;
  #L25466e.  @monitorenter v6
  #L254670.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L254676.  @monitorexit v6
  #L254678.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L25467e.  v6:= temp;
  #L254680.  if v6 != 0 then goto L2546b6;
  #L254684.  return @kind void;
  #L254686.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L254688.  @monitorexit v6
  #L25468a.  throw v7;
  #L25468c.  call temp:= `getOrCreateQueue`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.getOrCreateQueue:()Lio/reactivex/internal/queue/a;` @kind virtual;
  #L254692.  v6:= temp @kind object;
  #L254694.  @monitorenter v6
  #L254696.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L25469c.  @monitorexit v6
  #L25469e.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L2546a2.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L2546a8.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2546ae.  v6:= temp;
  #L2546b0.  if v6 == 0 then goto L2546b6;
  #L2546b4.  return @kind void;
  #L2546b6.  call `drainLoop`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.drainLoop:()V` @kind virtual;
  #L2546bc.  return @kind void;
  #L2546be.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2546c0.  @monitorexit v6
  #L2546c2.  throw v7;
  catch `java.lang.Throwable` @[L254670..L254678] goto L254686;
  catch `java.lang.Throwable` @[L254688..L25468a] goto L254686;
  catch `java.lang.Throwable` @[L254696..L25469e] goto L2546be;
  catch `java.lang.Throwable` @[L2546c0..L2546c2] goto L2546be;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2546fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L254700.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L254706.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L25470c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254720.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L254724.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L25472a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25472e.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L254734.  v0:= temp;
  #L254736.  if v0 == 0 then goto L254754;
  #L25473a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L25473e.  if v2 != 0 then goto L25474c;
  #L254742.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L254746.  call `dispose`(v2) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L25474c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L254752.  goto L25475a;
  #L254754.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25475a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25476c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L254770.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L254776.  v3:= temp @kind object;
  #L254778.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L25477c.  call temp:= `e`(v3, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L254782.  v3:= temp @kind object;
  #L254784.  v3:= (`io.reactivex.a0`) v3 @kind object;
  #L254788.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L25478c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L254792.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber$InnerObserver`;
  #L254796.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber$InnerObserver;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;)V` @kind direct;
  #L25479c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L2547a0.  if v1 != 0 then goto L2547ba;
  #L2547a4.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L2547a8.  call temp:= `b`(v1, v0) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2547ae.  v1:= temp;
  #L2547b0.  if v1 == 0 then goto L2547ba;
  #L2547b4.  call `b`(v3, v0) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L2547ba.  return @kind void;
  #L2547bc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2547be.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2547c4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2547c8.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L2547ce.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2547d4.  return @kind void;
  catch `java.lang.Throwable` @[L25476c..L254788] goto L2547bc;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2547f4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2547f8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L2547fe.  v0:= temp;
  #L254800.  if v0 == 0 then goto L25483a;
  #L254804.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L254808.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25480c.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L254812.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.maxConcurrency` @type ^`int`;
  #L254816.  v1:= 2147483647I;
  #L25481c.  if v0 != v1 then goto L254832;
  #L254820.  v0:= 9223372036854775807L;
  #L25482a.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L254830.  goto L25483a;
  #L254832.  v0:= (`long`) v0 @kind i2l;
  #L254834.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25483a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25484c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L254852.  v0:= temp;
  #L254854.  if v0 == 0 then goto L254868;
  #L254858.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25485c.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L254862.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$FlatMapSingleSubscriber;.drain:()V` @kind virtual;
  #L254868.  return @kind void;
}
