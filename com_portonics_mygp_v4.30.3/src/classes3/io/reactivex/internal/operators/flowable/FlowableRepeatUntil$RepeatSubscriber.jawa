record `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.produced` @AccessFlag ;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.sa` @AccessFlag FINAL;
  `n.b.b` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.source` @AccessFlag FINAL;
  `io.reactivex.d0.e` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.stop` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.e` v2 @kind object, `io.reactivex.internal.subscriptions.SubscriptionArbiter` v3 @kind object, `n.b.b` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$RepeatSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/e;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;Ln/b/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25c000.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L25c006.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25c00a.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v3 @kind object;
  #L25c00e.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.source` @type ^`n.b.b` := v4 @kind object;
  #L25c012.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.stop` @type ^`io.reactivex.d0.e` := v2 @kind object;
  #L25c016.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$RepeatSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25c028.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.stop` @type ^`io.reactivex.d0.e` @kind object;
  #L25c02c.  call temp:= `getAsBoolean`(v0) @signature `Lio/reactivex/d0/e;.getAsBoolean:()Z` @kind interface;
  #L25c032.  v0:= temp;
  #L25c034.  if v0 == 0 then goto L25c044;
  #L25c038.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25c03c.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25c042.  goto L25c04a;
  #L25c044.  call `subscribeNext`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$RepeatSubscriber;.subscribeNext:()V` @kind virtual;
  #L25c04a.  return @kind void;
  #L25c04c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25c04e.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25c054.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25c058.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25c05e.  return @kind void;
  catch `java.lang.Throwable` @[L25c028..L25c034] goto L25c04c;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$RepeatSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25c07c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25c080.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25c086.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$RepeatSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25c098.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.produced` @type ^`long` @kind wide;
  #L25c09c.  v2:= 1L;
  #L25c0a0.  v0:= v0 + v2 @kind long;
  #L25c0a2.  v4.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L25c0a6.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25c0aa.  call `onNext`(v0, v5) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25c0b0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$RepeatSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25c0c4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L25c0c8.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Ln/b/d;)V` @kind virtual;
  #L25c0ce.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$RepeatSubscriber;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L25c0e0.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25c0e6.  v0:= temp;
  #L25c0e8.  if v0 != 0 then goto L25c136;
  #L25c0ec.  v0:= 1I;
  #L25c0ee.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L25c0f2.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L25c0f8.  v1:= temp;
  #L25c0fa.  if v1 == 0 then goto L25c100;
  #L25c0fe.  return @kind void;
  #L25c100.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.produced` @type ^`long` @kind wide;
  #L25c104.  v3:= 0L;
  #L25c108.  v5:= lcmp(v1, v3);
  #L25c10c.  if v5 == 0 then goto L25c11e;
  #L25c110.  v6.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.produced` @type ^`long` := v3 @kind wide;
  #L25c114.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L25c118.  call `produced`(v3, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L25c11e.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber.source` @type ^`n.b.b` @kind object;
  #L25c122.  call `subscribe`(v1, v6) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L25c128.  v0:= -v0 @kind int;
  #L25c12a.  call temp:= `addAndGet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L25c130.  v0:= temp;
  #L25c132.  if v0 != 0 then goto L25c0ee;
  #L25c136.  return @kind void;
}
