record `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.bufferSize` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.current` @AccessFlag FINAL;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.queue` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.shouldConnect` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.sourceMode` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.upstream` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.EMPTY` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.TERMINATED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L25ae00.  v0:= 0I;
  #L25ae02.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[v0];
  #L25ae06.  `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] := v1 @kind object;
  #L25ae0a.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[v0];
  #L25ae0e.  `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] := v0 @kind object;
  #L25ae12.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v2 @kind this, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L25ae24.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L25ae2a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L25ae2e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25ae34.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L25ae38.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L25ae3c.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] @kind object;
  #L25ae40.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L25ae46.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L25ae4a.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L25ae4e.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L25ae52.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L25ae58.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.shouldConnect` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L25ae5c.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.bufferSize` @type ^`int` := v4;
  #L25ae60.  return @kind void;
}
procedure `boolean` `add`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.add:(Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25accc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25acd0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25acd6.  v0:= temp @kind object;
  #L25acd8.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[]) v0 @kind object;
  #L25acdc.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] @kind object;
  #L25ace0.  v2:= 0I;
  #L25ace2.  if v0 != v1 then goto L25ace8;
  #L25ace6.  return v2;
  #L25ace8.  v1:= length @variable v0;
  #L25acea.  v3:= v1 + 1;
  #L25acee.  v3:= new `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[v3];
  #L25acf2.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L25acf8.  v3[v1]:= v5 @kind object;
  #L25acfc.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25ad00.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L25ad06.  v0:= temp;
  #L25ad08.  if v0 == 0 then goto L25accc;
  #L25ad0c.  v5:= 1I;
  #L25ad0e.  return v5;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.checkTerminated:(Ljava/lang/Object;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25ad20.  v0:= 0I;
  #L25ad22.  if v5 == 0 then goto L25adc2;
  #L25ad26.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L25ad2c.  v1:= temp;
  #L25ad2e.  v2:= 0I;
  #L25ad30.  v3:= 1I;
  #L25ad32.  if v1 == 0 then goto L25ad74;
  #L25ad36.  if v6 == 0 then goto L25adc2;
  #L25ad3a.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25ad3e.  call temp:= `compareAndSet`(v5, v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L25ad44.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25ad48.  v6:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] @kind object;
  #L25ad4c.  call temp:= `getAndSet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25ad52.  v5:= temp @kind object;
  #L25ad54.  v5:= (`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[]) v5 @kind object;
  #L25ad58.  v6:= length @variable v5;
  #L25ad5a.  if v0 >= v6 then goto L25ad72;
  #L25ad5e.  v1:= v5[v0] @kind object;
  #L25ad62.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.child` @type ^`n.b.c` @kind object;
  #L25ad66.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25ad6c.  v0:= v0 + 1;
  #L25ad70.  goto L25ad5a;
  #L25ad72.  return v3;
  #L25ad74.  call temp:= `getError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L25ad7a.  v5:= temp @kind object;
  #L25ad7c.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25ad80.  call temp:= `compareAndSet`(v6, v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L25ad86.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25ad8a.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] @kind object;
  #L25ad8e.  call temp:= `getAndSet`(v6, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25ad94.  v6:= temp @kind object;
  #L25ad96.  v6:= (`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[]) v6 @kind object;
  #L25ad9a.  v1:= length @variable v6;
  #L25ad9c.  if v1 == 0 then goto L25adba;
  #L25ada0.  v1:= length @variable v6;
  #L25ada2.  if v0 >= v1 then goto L25adc0;
  #L25ada6.  v2:= v6[v0] @kind object;
  #L25adaa.  v2:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.child` @type ^`n.b.c` @kind object;
  #L25adae.  call `onError`(v2, v5) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25adb4.  v0:= v0 + 1;
  #L25adb8.  goto L25ada2;
  #L25adba.  call `t`(v5) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25adc0.  return v3;
  #L25adc2.  return v0;
}
procedure `void` `dispatch`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v25 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.dispatch:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;
    v24;

  #L25ae74.  v1:= v25 @kind object;
  #L25ae78.  call temp:= `getAndIncrement`(v25) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25ae7e.  v0:= temp;
  #L25ae80.  if v0 == 0 then goto L25ae86;
  #L25ae84.  return @kind void;
  #L25ae86.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25ae8a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25ae90.  v0:= temp @kind object;
  #L25ae92.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[]) v0 @kind object;
  #L25ae96.  v3:= 1I;
  #L25ae98.  v4:= v0 @kind object;
  #L25ae9a.  v5:= 1I;
  #L25ae9c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` @kind object;
  #L25aea0.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L25aea4.  if v6 == 0 then goto L25aeba;
  #L25aea8.  call temp:= `isEmpty`(v6) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L25aeae.  v8:= temp;
  #L25aeb0.  if v8 == 0 then goto L25aeb6;
  #L25aeb4.  goto L25aeba;
  #L25aeb6.  v8:= 0I;
  #L25aeb8.  goto L25aebc;
  #L25aeba.  v8:= 1I;
  #L25aebc.  call temp:= `checkTerminated`(v1, v0, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.checkTerminated:(Ljava/lang/Object;Z)Z` @kind virtual;
  #L25aec2.  v0:= temp;
  #L25aec4.  if v0 == 0 then goto L25aeca;
  #L25aec8.  return @kind void;
  #L25aeca.  if v8 != 0 then goto L25b11c;
  #L25aece.  v0:= length @variable v4;
  #L25aed0.  v9:= length @variable v4;
  #L25aed2.  v12:= 0I;
  #L25aed4.  v13:= 0I;
  #L25aed6.  v14:= 9223372036854775807L;
  #L25aee0.  v16:= -9223372036854775808L;
  #L25aee4.  if v12 >= v9 then goto L25af18;
  #L25aee8.  v7:= v4[v12] @kind object;
  #L25aeec.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25aef2.  v18:= temp @kind wide;
  #L25aef4.  v20:= lcmp(v18, v16);
  #L25aef8.  if v20 == 0 then goto L25af0e;
  #L25aefc.  v10:= v7.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.emitted` @type ^`long` @kind wide;
  #L25af00.  v10:= v18 - v10 @kind long;
  #L25af04.  call temp:= `min`(v14, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L25af0a.  v14:= temp @kind wide;
  #L25af0c.  goto L25af12;
  #L25af0e.  v13:= v13 + 1;
  #L25af12.  v12:= v12 + 1;
  #L25af16.  goto L25aee0;
  #L25af18.  v9:= 1L;
  #L25af1c.  if v0 != v13 then goto L25af94;
  #L25af20.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` @kind object;
  #L25af24.  call temp:= `poll`(v6) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L25af2a.  v7:= temp @kind object;
  #L25af2c.  goto L25af5c;
  #L25af2e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25af30.  v6:= v0 @kind object;
  #L25af32.  call `b`(v6) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25af38.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25af3c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25af42.  v0:= temp @kind object;
  #L25af44.  v0:= (`n.b.d`) v0 @kind object;
  #L25af48.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25af4e.  call temp:= `error`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L25af54.  v0:= temp @kind object;
  #L25af56.  v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` := v0 @kind object;
  #L25af5a.  v7:= 0I;
  #L25af5c.  if v7 != 0 then goto L25af64;
  #L25af60.  v7:= 1I;
  #L25af62.  goto L25af66;
  #L25af64.  v7:= 0I;
  #L25af66.  call temp:= `checkTerminated`(v1, v0, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.checkTerminated:(Ljava/lang/Object;Z)Z` @kind virtual;
  #L25af6c.  v0:= temp;
  #L25af6e.  if v0 == 0 then goto L25af74;
  #L25af72.  return @kind void;
  #L25af74.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.sourceMode` @type ^`int`;
  #L25af78.  if v0 == v3 then goto L25ae9c;
  #L25af7c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25af80.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25af86.  v0:= temp @kind object;
  #L25af88.  v0:= (`n.b.d`) v0 @kind object;
  #L25af8c.  call `request`(v0, v9) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25af92.  goto L25ae9c;
  #L25af94.  v11:= 0I;
  #L25af96.  v12:= (`long`) v11 @kind i2l;
  #L25af98.  v0:= lcmp(v12, v14);
  #L25af9c.  if v0 >= 0 then goto L25b0e0;
  #L25afa0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` @kind object;
  #L25afa4.  call temp:= `poll`(v6) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L25afaa.  v8:= temp @kind object;
  #L25afac.  goto L25afdc;
  #L25afae.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25afb0.  v8:= v0 @kind object;
  #L25afb2.  call `b`(v8) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25afb8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25afbc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25afc2.  v0:= temp @kind object;
  #L25afc4.  v0:= (`n.b.d`) v0 @kind object;
  #L25afc8.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25afce.  call temp:= `error`(v8) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L25afd4.  v0:= temp @kind object;
  #L25afd6.  v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` := v0 @kind object;
  #L25afda.  v8:= 0I;
  #L25afdc.  if v8 != 0 then goto L25afe4;
  #L25afe0.  v7:= 1I;
  #L25afe2.  goto L25afe6;
  #L25afe4.  v7:= 0I;
  #L25afe6.  call temp:= `checkTerminated`(v1, v0, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.checkTerminated:(Ljava/lang/Object;Z)Z` @kind virtual;
  #L25afec.  v0:= temp;
  #L25afee.  if v0 == 0 then goto L25aff4;
  #L25aff2.  return @kind void;
  #L25aff4.  if v7 == 0 then goto L25affe;
  #L25aff8.  v8:= v7;
  #L25affa.  goto L25b0e0;
  #L25affe.  call temp:= `getValue`(v8) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L25b004.  v0:= temp @kind object;
  #L25b006.  v8:= length @variable v4;
  #L25b008.  v12:= 0I;
  #L25b00a.  v13:= 0I;
  #L25b00c.  if v12 >= v8 then goto L25b078;
  #L25b010.  v3:= v4[v12] @kind object;
  #L25b014.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25b01a.  v22:= temp @kind wide;
  #L25b01c.  v24:= lcmp(v22, v16);
  #L25b020.  if v24 == 0 then goto L25b054;
  #L25b024.  v20:= 9223372036854775807L;
  #L25b02e.  v24:= lcmp(v22, v20);
  #L25b032.  v22:= v6 @kind object;
  #L25b036.  v23:= v7;
  #L25b03a.  if v24 == 0 then goto L25b048;
  #L25b03e.  v6:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.emitted` @type ^`long` @kind wide;
  #L25b042.  v6:= v6 + v9 @kind long;
  #L25b044.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.emitted` @type ^`long` := v6 @kind wide;
  #L25b048.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.child` @type ^`n.b.c` @kind object;
  #L25b04c.  call `onNext`(v3, v0) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25b052.  goto L25b068;
  #L25b054.  v22:= v6 @kind object;
  #L25b058.  v23:= v7;
  #L25b05c.  v20:= 9223372036854775807L;
  #L25b066.  v13:= 1I;
  #L25b068.  v12:= v12 + 1;
  #L25b06c.  v6:= v22 @kind object;
  #L25b070.  v7:= v23;
  #L25b074.  v3:= 1I;
  #L25b076.  goto L25b00c;
  #L25b078.  v22:= v6 @kind object;
  #L25b07c.  v23:= v7;
  #L25b080.  v20:= 9223372036854775807L;
  #L25b08a.  v11:= v11 + 1;
  #L25b08e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25b094.  v0:= temp @kind object;
  #L25b096.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[]) v0 @kind object;
  #L25b09a.  if v13 != 0 then goto L25b0b2;
  #L25b09e.  if v0 == v4 then goto L25b0a4;
  #L25b0a2.  goto L25b0b2;
  #L25b0a4.  v6:= v22 @kind object;
  #L25b0a8.  v8:= v23;
  #L25b0ac.  v3:= 1I;
  #L25b0ae.  goto L25af96;
  #L25b0b2.  if v11 == 0 then goto L25b0d8;
  #L25b0b6.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.sourceMode` @type ^`int`;
  #L25b0ba.  v4:= 1I;
  #L25b0bc.  if v3 == v4 then goto L25b0d8;
  #L25b0c0.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25b0c4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25b0ca.  v3:= temp @kind object;
  #L25b0cc.  v3:= (`n.b.d`) v3 @kind object;
  #L25b0d0.  v6:= (`long`) v11 @kind i2l;
  #L25b0d2.  call `request`(v3, v6) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25b0d8.  v4:= v0 @kind object;
  #L25b0da.  v3:= 1I;
  #L25b0dc.  goto L25ae9c;
  #L25b0e0.  if v11 == 0 then goto L25b106;
  #L25b0e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.sourceMode` @type ^`int`;
  #L25b0e8.  v3:= 1I;
  #L25b0ea.  if v0 == v3 then goto L25b108;
  #L25b0ee.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25b0f2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25b0f8.  v0:= temp @kind object;
  #L25b0fa.  v0:= (`n.b.d`) v0 @kind object;
  #L25b0fe.  call `request`(v0, v12) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25b104.  goto L25b108;
  #L25b106.  v3:= 1I;
  #L25b108.  v6:= 0L;
  #L25b10c.  v0:= lcmp(v14, v6);
  #L25b110.  if v0 == 0 then goto L25b11c;
  #L25b114.  if v8 != 0 then goto L25b11c;
  #L25b118.  goto L25ae9c;
  #L25b11c.  v0:= -v5 @kind int;
  #L25b11e.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L25b124.  v5:= temp;
  #L25b126.  if v5 != 0 then goto L25b12c;
  #L25b12a.  return @kind void;
  #L25b12c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25b132.  v0:= temp @kind object;
  #L25b134.  v4:= v0 @kind object;
  #L25b136.  v4:= (`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[]) v4 @kind object;
  #L25b13a.  goto L25ae9c;
  catch `java.lang.Throwable` @[L25af24..L25af2c] goto L25af2e;
  catch `java.lang.Throwable` @[L25afa4..L25afac] goto L25afae;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25b168.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25b16c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25b172.  v0:= temp @kind object;
  #L25b174.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] @kind object;
  #L25b178.  if v0 == v1 then goto L25b1a6;
  #L25b17c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25b180.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25b186.  v0:= temp @kind object;
  #L25b188.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[]) v0 @kind object;
  #L25b18c.  if v0 == v1 then goto L25b1a6;
  #L25b190.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25b194.  v1:= 0I;
  #L25b196.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L25b19c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25b1a0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25b1a6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25add4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25add8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25adde.  v0:= temp @kind object;
  #L25ade0.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.TERMINATED` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] @kind object;
  #L25ade4.  if v0 != v1 then goto L25adec;
  #L25ade8.  v0:= 1I;
  #L25adea.  goto L25adee;
  #L25adec.  v0:= 0I;
  #L25adee.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25b1b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` @kind object;
  #L25b1bc.  if v0 != 0 then goto L25b1d2;
  #L25b1c0.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L25b1c6.  v0:= temp @kind object;
  #L25b1c8.  v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` := v0 @kind object;
  #L25b1cc.  call `dispatch`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.dispatch:()V` @kind virtual;
  #L25b1d2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25b1e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` @kind object;
  #L25b1e8.  if v0 != 0 then goto L25b200;
  #L25b1ec.  call temp:= `error`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L25b1f2.  v2:= temp @kind object;
  #L25b1f4.  v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` := v2 @kind object;
  #L25b1f8.  call `dispatch`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.dispatch:()V` @kind virtual;
  #L25b1fe.  goto L25b206;
  #L25b200.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25b206.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25b218.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.sourceMode` @type ^`int`;
  #L25b21c.  if v0 != 0 then goto L25b246;
  #L25b220.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L25b224.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L25b22a.  v2:= temp;
  #L25b22c.  if v2 != 0 then goto L25b246;
  #L25b230.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L25b234.  v0:= "Prefetch queue is full?!" @kind object;
  #L25b238.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25b23e.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L25b244.  return @kind void;
  #L25b246.  call `dispatch`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.dispatch:()V` @kind virtual;
  #L25b24c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v3 @kind this, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L25b260.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25b264.  call temp:= `setOnce`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L25b26a.  v0:= temp;
  #L25b26c.  if v0 == 0 then goto L25b2e4;
  #L25b270.  v0:= instanceof @variable v4 @type ^`io.reactivex.e0.a.g` @kind boolean;
  #L25b274.  if v0 == 0 then goto L25b2c6;
  #L25b278.  v0:= v4 @kind object;
  #L25b27a.  v0:= (`io.reactivex.e0.a.g`) v0 @kind object;
  #L25b27e.  v1:= 7I;
  #L25b280.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L25b286.  v1:= temp;
  #L25b288.  v2:= 1I;
  #L25b28a.  if v1 != v2 then goto L25b2aa;
  #L25b28e.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.sourceMode` @type ^`int` := v1;
  #L25b292.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L25b296.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L25b29c.  v4:= temp @kind object;
  #L25b29e.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.terminalEvent` @type ^`java.lang.Object` := v4 @kind object;
  #L25b2a2.  call `dispatch`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.dispatch:()V` @kind virtual;
  #L25b2a8.  return @kind void;
  #L25b2aa.  v2:= 2I;
  #L25b2ac.  if v1 != v2 then goto L25b2c6;
  #L25b2b0.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.sourceMode` @type ^`int` := v1;
  #L25b2b4.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L25b2b8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.bufferSize` @type ^`int`;
  #L25b2bc.  v0:= (`long`) v0 @kind i2l;
  #L25b2be.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25b2c4.  return @kind void;
  #L25b2c6.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L25b2ca.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.bufferSize` @type ^`int`;
  #L25b2ce.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L25b2d4.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L25b2d8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.bufferSize` @type ^`int`;
  #L25b2dc.  v0:= (`long`) v0 @kind i2l;
  #L25b2de.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25b2e4.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.remove:(Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L25b2f8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25b2fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25b302.  v0:= temp @kind object;
  #L25b304.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[]) v0 @kind object;
  #L25b308.  v1:= length @variable v0;
  #L25b30a.  if v1 != 0 then goto L25b310;
  #L25b30e.  goto L25b374;
  #L25b310.  v2:= -1I;
  #L25b312.  v3:= 0I;
  #L25b314.  v4:= 0I;
  #L25b316.  if v4 >= v1 then goto L25b334;
  #L25b31a.  v5:= v0[v4] @kind object;
  #L25b31e.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L25b324.  v5:= temp;
  #L25b326.  if v5 == 0 then goto L25b32e;
  #L25b32a.  v2:= v4;
  #L25b32c.  goto L25b334;
  #L25b32e.  v4:= v4 + 1;
  #L25b332.  goto L25b316;
  #L25b334.  if v2 >= 0 then goto L25b33a;
  #L25b338.  return @kind void;
  #L25b33a.  v4:= 1I;
  #L25b33c.  if v1 != v4 then goto L25b346;
  #L25b340.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.EMPTY` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[] @kind object;
  #L25b344.  goto L25b364;
  #L25b346.  v5:= v1 + -1;
  #L25b34a.  v5:= new `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber`[v5];
  #L25b34e.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L25b354.  v3:= v2 + 1;
  #L25b358.  v1:= v1 - v2 @kind int;
  #L25b35a.  v1:= v1 - v4 @kind int;
  #L25b35c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L25b362.  v1:= v5 @kind object;
  #L25b364.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber.subscribers` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25b368.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L25b36e.  v0:= temp;
  #L25b370.  if v0 == 0 then goto L25b2f8;
  #L25b374.  return @kind void;
}
