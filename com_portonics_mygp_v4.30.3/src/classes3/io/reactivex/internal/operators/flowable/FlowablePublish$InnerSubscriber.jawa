record `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.child` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` `io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.parent` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber` v0 @kind this, `n.b.c` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;.<init>:(Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25ac30.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25ac36.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.child` @type ^`n.b.c` := v1 @kind object;
  #L25ac3a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25ac4c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25ac52.  v0:= temp @kind wide;
  #L25ac54.  v2:= -9223372036854775808L;
  #L25ac58.  v4:= lcmp(v0, v2);
  #L25ac5c.  if v4 == 0 then goto L25ac84;
  #L25ac60.  call temp:= `getAndSet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L25ac66.  v0:= temp @kind wide;
  #L25ac68.  v4:= lcmp(v0, v2);
  #L25ac6c.  if v4 == 0 then goto L25ac84;
  #L25ac70.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` @kind object;
  #L25ac74.  if v0 == 0 then goto L25ac84;
  #L25ac78.  call `remove`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.remove:(Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;)V` @kind virtual;
  #L25ac7e.  call `dispatch`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.dispatch:()V` @kind virtual;
  #L25ac84.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25ac98.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25ac9e.  v0:= temp;
  #L25aca0.  if v0 == 0 then goto L25acb8;
  #L25aca4.  call temp:= `b`(v1, v2) @signature `Lio/reactivex/internal/util/b;.b:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25acaa.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$InnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$PublishSubscriber` @kind object;
  #L25acae.  if v2 == 0 then goto L25acb8;
  #L25acb2.  call `dispatch`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber;.dispatch:()V` @kind virtual;
  #L25acb8.  return @kind void;
}
