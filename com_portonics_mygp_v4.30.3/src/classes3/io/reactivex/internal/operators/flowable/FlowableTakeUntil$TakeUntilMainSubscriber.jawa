record `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.error` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.other` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.requested` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` v0 @kind this, `n.b.c` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;.<init>:(Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L260508.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L26050e.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L260512.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L260516.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L26051c.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L260520.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L260524.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L26052a.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L26052e.  v1:= new `io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber`;
  #L260532.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;)V` @kind direct;
  #L260538.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` := v1 @kind object;
  #L26053c.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L260540.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L260546.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L26054a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26055c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L260560.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L260566.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` @kind object;
  #L26056a.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L260570.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L260584.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` @kind object;
  #L260588.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L26058e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L260592.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L260596.  call `b`(v0, v2, v1) @signature `Lio/reactivex/internal/util/g;.b:(Ln/b/c;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L26059c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2605b0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.other` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber$OtherSubscriber` @kind object;
  #L2605b4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2605ba.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2605be.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2605c2.  call `d`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.d:(Ln/b/c;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L2605c8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2605dc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2605e0.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2605e4.  call `f`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.f:(Ln/b/c;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L2605ea.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2605fc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L260600.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L260604.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Ln/b/d;)Z` @kind static;
  #L26060a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$TakeUntilMainSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26061c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L260620.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$TakeUntilMainSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L260624.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L26062a.  return @kind void;
}
