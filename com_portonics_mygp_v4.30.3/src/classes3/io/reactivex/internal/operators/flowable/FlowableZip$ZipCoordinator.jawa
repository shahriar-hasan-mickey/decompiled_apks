record `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.cancelled` @AccessFlag VOLATILE;
  `java.lang.Object`[] `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.current` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.delayErrors` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.requested` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber`[] `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.subscribers` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.zipper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `int` v3 , `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.<init>:(Ln/b/c;Lio/reactivex/d0/k;IIZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2638c0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L2638c6.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.downstream` @type ^`n.b.c` := v1 @kind object;
  #L2638ca.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.zipper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L2638ce.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.delayErrors` @type ^`boolean` := v5 @kind boolean;
  #L2638d2.  v1:= new `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber`[v3];
  #L2638d6.  v2:= 0I;
  #L2638d8.  if v2 >= v3 then goto L2638f0;
  #L2638dc.  v5:= new `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber`;
  #L2638e0.  call `<init>`(v5, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;I)V` @kind direct;
  #L2638e6.  v1[v2]:= v5 @kind object;
  #L2638ea.  v2:= v2 + 1;
  #L2638ee.  goto L2638d8;
  #L2638f0.  v2:= new `java.lang.Object`[v3];
  #L2638f4.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.current` @type ^`java.lang.Object`[] := v2 @kind object;
  #L2638f8.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber`[] := v1 @kind object;
  #L2638fc.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L263900.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L263906.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L26390a.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L26390e.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L263914.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L263918.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26392c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L263930.  if v0 != 0 then goto L263940;
  #L263934.  v0:= 1I;
  #L263936.  v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L26393a.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @kind virtual;
  #L263940.  return @kind void;
}
procedure `void` `cancelAll`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L263954.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber`[] @kind object;
  #L263958.  v1:= length @variable v0;
  #L26395a.  v2:= 0I;
  #L26395c.  if v2 >= v1 then goto L263970;
  #L263960.  v3:= v0[v2] @kind object;
  #L263964.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.cancel:()V` @kind virtual;
  #L26396a.  v2:= v2 + 1;
  #L26396e.  goto L26395c;
  #L263970.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L263984.  v1:= v17 @kind object;
  #L263988.  call temp:= `getAndIncrement`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L26398e.  v0:= temp;
  #L263990.  if v0 == 0 then goto L263996;
  #L263994.  return @kind void;
  #L263996.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.downstream` @type ^`n.b.c` @kind object;
  #L26399a.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber`[] @kind object;
  #L26399e.  v4:= length @variable v3;
  #L2639a0.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.current` @type ^`java.lang.Object`[] @kind object;
  #L2639a4.  v7:= 1I;
  #L2639a6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2639aa.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2639b0.  v8:= temp @kind wide;
  #L2639b2.  v12:= 0L;
  #L2639b6.  v14:= 0I;
  #L2639b8.  v0:= lcmp(v8, v12);
  #L2639bc.  if v0 == 0 then goto L263b1e;
  #L2639c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L2639c4.  if v0 == 0 then goto L2639ca;
  #L2639c8.  return @kind void;
  #L2639ca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.delayErrors` @type ^`boolean` @kind boolean;
  #L2639ce.  if v0 != 0 then goto L2639fc;
  #L2639d2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2639d6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2639dc.  v0:= temp @kind object;
  #L2639de.  if v0 == 0 then goto L2639fc;
  #L2639e2.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @kind virtual;
  #L2639e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2639ec.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2639f2.  v0:= temp @kind object;
  #L2639f4.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2639fa.  return @kind void;
  #L2639fc.  v0:= 0I;
  #L2639fe.  v6:= 0I;
  #L263a00.  if v6 >= v4 then goto L263ab6;
  #L263a04.  v15:= v3[v6] @kind object;
  #L263a08.  v16:= v5[v6] @kind object;
  #L263a0c.  if v16 != 0 then goto L263ab0;
  #L263a10.  v10:= v15.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.done` @type ^`boolean` @kind boolean;
  #L263a14.  v11:= v15.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L263a18.  if v11 == 0 then goto L263a26;
  #L263a1c.  call temp:= `poll`(v11) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L263a22.  v11:= temp @kind object;
  #L263a24.  goto L263a28;
  #L263a26.  v11:= v14 @kind object;
  #L263a28.  if v11 != 0 then goto L263a30;
  #L263a2c.  v15:= 1I;
  #L263a2e.  goto L263a32;
  #L263a30.  v15:= 0I;
  #L263a32.  if v10 == 0 then goto L263a70;
  #L263a36.  if v15 == 0 then goto L263a70;
  #L263a3a.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @kind virtual;
  #L263a40.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L263a44.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L263a4a.  v0:= temp @kind object;
  #L263a4c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L263a50.  if v0 == 0 then goto L263a68;
  #L263a54.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L263a58.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L263a5e.  v0:= temp @kind object;
  #L263a60.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L263a66.  goto L263a6e;
  #L263a68.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L263a6e.  return @kind void;
  #L263a70.  if v15 != 0 then goto L263aae;
  #L263a74.  v5[v6]:= v11 @kind object;
  #L263a78.  goto L263ab0;
  #L263a7a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L263a7c.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L263a82.  v10:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L263a86.  call temp:= `addThrowable`(v10, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L263a8c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.delayErrors` @type ^`boolean` @kind boolean;
  #L263a90.  if v0 != 0 then goto L263aae;
  #L263a94.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @kind virtual;
  #L263a9a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L263a9e.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L263aa4.  v0:= temp @kind object;
  #L263aa6.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L263aac.  return @kind void;
  #L263aae.  v0:= 1I;
  #L263ab0.  v6:= v6 + 1;
  #L263ab4.  goto L263a00;
  #L263ab6.  if v0 == 0 then goto L263abc;
  #L263aba.  goto L263b1e;
  #L263abc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.zipper` @type ^`io.reactivex.d0.k` @kind object;
  #L263ac0.  call temp:= `clone`(v5) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L263ac6.  v6:= temp @kind object;
  #L263ac8.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L263ace.  v0:= temp @kind object;
  #L263ad0.  v6:= "The zipper returned a null value" @kind object;
  #L263ad4.  call temp:= `e`(v0, v6) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L263ada.  v0:= temp @kind object;
  #L263adc.  call `onNext`(v2, v0) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L263ae2.  v10:= 1L;
  #L263ae6.  v12:= v12 + v10 @kind long;
  #L263ae8.  call `fill`(v5, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L263aee.  goto L2639b6;
  #L263af2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L263af4.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L263afa.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @kind virtual;
  #L263b00.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L263b04.  call temp:= `addThrowable`(v3, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L263b0a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L263b0e.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L263b14.  v0:= temp @kind object;
  #L263b16.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L263b1c.  return @kind void;
  #L263b1e.  v0:= lcmp(v8, v12);
  #L263b22.  if v0 != 0 then goto L263c18;
  #L263b26.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L263b2a.  if v0 == 0 then goto L263b30;
  #L263b2e.  return @kind void;
  #L263b30.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.delayErrors` @type ^`boolean` @kind boolean;
  #L263b34.  if v0 != 0 then goto L263b62;
  #L263b38.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L263b3c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L263b42.  v0:= temp @kind object;
  #L263b44.  if v0 == 0 then goto L263b62;
  #L263b48.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @kind virtual;
  #L263b4e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L263b52.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L263b58.  v0:= temp @kind object;
  #L263b5a.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L263b60.  return @kind void;
  #L263b62.  v6:= 0I;
  #L263b64.  if v6 >= v4 then goto L263c18;
  #L263b68.  v0:= v3[v6] @kind object;
  #L263b6c.  v10:= v5[v6] @kind object;
  #L263b70.  if v10 != 0 then goto L263c12;
  #L263b74.  v10:= v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.done` @type ^`boolean` @kind boolean;
  #L263b78.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L263b7c.  if v0 == 0 then goto L263b8a;
  #L263b80.  call temp:= `poll`(v0) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L263b86.  v0:= temp @kind object;
  #L263b88.  goto L263b8c;
  #L263b8a.  v0:= v14 @kind object;
  #L263b8c.  if v0 != 0 then goto L263b94;
  #L263b90.  v11:= 1I;
  #L263b92.  goto L263b96;
  #L263b94.  v11:= 0I;
  #L263b96.  if v10 == 0 then goto L263bd4;
  #L263b9a.  if v11 == 0 then goto L263bd4;
  #L263b9e.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @kind virtual;
  #L263ba4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L263ba8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L263bae.  v0:= temp @kind object;
  #L263bb0.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L263bb4.  if v0 == 0 then goto L263bcc;
  #L263bb8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L263bbc.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L263bc2.  v0:= temp @kind object;
  #L263bc4.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L263bca.  goto L263bd2;
  #L263bcc.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L263bd2.  return @kind void;
  #L263bd4.  if v11 != 0 then goto L263c12;
  #L263bd8.  v5[v6]:= v0 @kind object;
  #L263bdc.  goto L263c12;
  #L263bde.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L263be0.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L263be6.  v10:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L263bea.  call temp:= `addThrowable`(v10, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L263bf0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.delayErrors` @type ^`boolean` @kind boolean;
  #L263bf4.  if v0 != 0 then goto L263c12;
  #L263bf8.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.cancelAll:()V` @kind virtual;
  #L263bfe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L263c02.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L263c08.  v0:= temp @kind object;
  #L263c0a.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L263c10.  return @kind void;
  #L263c12.  v6:= v6 + 1;
  #L263c16.  goto L263b64;
  #L263c18.  v10:= 0L;
  #L263c1c.  v0:= lcmp(v12, v10);
  #L263c20.  if v0 == 0 then goto L263c5a;
  #L263c24.  v0:= length @variable v3;
  #L263c26.  v15:= 0I;
  #L263c28.  if v15 >= v0 then goto L263c3c;
  #L263c2c.  v6:= v3[v15] @kind object;
  #L263c30.  call `request`(v6, v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;.request:(J)V` @kind virtual;
  #L263c36.  v15:= v15 + 1;
  #L263c3a.  goto L263c28;
  #L263c3c.  v10:= 9223372036854775807L;
  #L263c46.  v0:= lcmp(v8, v10);
  #L263c4a.  if v0 == 0 then goto L263c5a;
  #L263c4e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L263c52.  v8:= -v12 @kind long;
  #L263c54.  call temp:= `addAndGet`(v0, v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L263c5a.  v0:= -v7 @kind int;
  #L263c5c.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L263c62.  v7:= temp;
  #L263c64.  if v7 != 0 then goto L2639a6;
  #L263c68.  return @kind void;
  catch `java.lang.Throwable` @[L263a10..L263a78] goto L263a7a;
  catch `java.lang.Throwable` @[L263abc..L263adc] goto L263af2;
  catch `java.lang.Throwable` @[L263b74..L263bdc] goto L263bde;
}
procedure `void` `error`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.error:(Lio/reactivex/internal/operators/flowable/FlowableZip$ZipSubscriber;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L263ca0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L263ca4.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L263caa.  v0:= temp;
  #L263cac.  if v0 == 0 then goto L263cbe;
  #L263cb0.  v3:= 1I;
  #L263cb2.  v2.`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber.done` @type ^`boolean` := v3 @kind boolean;
  #L263cb6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.drain:()V` @kind virtual;
  #L263cbc.  goto L263cc4;
  #L263cbe.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L263cc4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L263cd8.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L263cde.  v0:= temp;
  #L263ce0.  if v0 == 0 then goto L263cf4;
  #L263ce4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L263ce8.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L263cee.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.drain:()V` @kind virtual;
  #L263cf4.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator` v4 @kind this, `n.b.b`[] v5 @kind object, `int` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$ZipCoordinator;.subscribe:([Ln/b/b;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L263d08.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.subscribers` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber`[] @kind object;
  #L263d0c.  v1:= 0I;
  #L263d0e.  if v1 >= v6 then goto L263d48;
  #L263d12.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.cancelled` @type ^`boolean` @kind boolean;
  #L263d16.  if v2 != 0 then goto L263d48;
  #L263d1a.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.delayErrors` @type ^`boolean` @kind boolean;
  #L263d1e.  if v2 != 0 then goto L263d34;
  #L263d22.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L263d26.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L263d2c.  v2:= temp @kind object;
  #L263d2e.  if v2 == 0 then goto L263d34;
  #L263d32.  goto L263d48;
  #L263d34.  v2:= v5[v1] @kind object;
  #L263d38.  v3:= v0[v1] @kind object;
  #L263d3c.  call `subscribe`(v2, v3) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L263d42.  v1:= v1 + 1;
  #L263d46.  goto L263d0e;
  #L263d48.  return @kind void;
}
