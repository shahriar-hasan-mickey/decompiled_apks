record `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface, `java.lang.Runnable` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.bufferSize` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.firstRequest` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.index` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.once` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.size` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.skip` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.upstream` @AccessFlag ;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.window` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` v1 @kind this, `n.b.c` v2 @kind object, `long` v3 , `long` v5 , `int` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.<init>:(Ln/b/c;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L262634.  v0:= 1I;
  #L262636.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L26263c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L262640.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.size` @type ^`long` := v3 @kind wide;
  #L262644.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.skip` @type ^`long` := v5 @kind wide;
  #L262648.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L26264c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L262652.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L262656.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L26265a.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L262660.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.firstRequest` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L262664.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.bufferSize` @type ^`int` := v7;
  #L262668.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L26267c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L262680.  v1:= 0I;
  #L262682.  v2:= 1I;
  #L262684.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L26268a.  v0:= temp;
  #L26268c.  if v0 == 0 then goto L262696;
  #L262690.  call `run`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.run:()V` @kind virtual;
  #L262696.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2626a8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L2626ac.  if v0 == 0 then goto L2626bc;
  #L2626b0.  v1:= 0I;
  #L2626b2.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L2626b6.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2626bc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2626c0.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2626c6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2626d8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L2626dc.  if v0 == 0 then goto L2626ec;
  #L2626e0.  v1:= 0I;
  #L2626e2.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L2626e6.  call `onError`(v0, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2626ec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2626f0.  call `onError`(v0, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2626f6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L262708.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.index` @type ^`long` @kind wide;
  #L26270c.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L262710.  v3:= 0L;
  #L262714.  v5:= lcmp(v0, v3);
  #L262718.  if v5 != 0 then goto L26273c;
  #L26271c.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L262722.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.bufferSize` @type ^`int`;
  #L262726.  call temp:= `L`(v2, v7) @signature `Lio/reactivex/processors/UnicastProcessor;.L:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L26272c.  v2:= temp @kind object;
  #L26272e.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v2 @kind object;
  #L262732.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L262736.  call `onNext`(v5, v2) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L26273c.  v5:= 1L;
  #L262740.  v0:= v0 + v5 @kind long;
  #L262742.  if v2 == 0 then goto L26274c;
  #L262746.  call `onNext`(v2, v8) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L26274c.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.size` @type ^`long` @kind wide;
  #L262750.  v8:= lcmp(v0, v5);
  #L262754.  if v8 != 0 then goto L262764;
  #L262758.  v8:= 0I;
  #L26275a.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L26275e.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L262764.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.skip` @type ^`long` @kind wide;
  #L262768.  v8:= lcmp(v0, v5);
  #L26276c.  if v8 != 0 then goto L262776;
  #L262770.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.index` @type ^`long` := v3 @kind wide;
  #L262774.  goto L26277a;
  #L262776.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.index` @type ^`long` := v0 @kind wide;
  #L26277a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26278c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L262790.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L262796.  v0:= temp;
  #L262798.  if v0 == 0 then goto L2627aa;
  #L26279c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.upstream` @type ^`n.b.d` := v2 @kind object;
  #L2627a0.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2627a4.  call `onSubscribe`(v2, v1) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L2627aa.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2627bc.  call temp:= `validate`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L2627c2.  v0:= temp;
  #L2627c4.  if v0 == 0 then goto L26283a;
  #L2627c8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.firstRequest` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L2627cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L2627d2.  v0:= temp;
  #L2627d4.  if v0 != 0 then goto L262824;
  #L2627d8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.firstRequest` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L2627dc.  v1:= 0I;
  #L2627de.  v2:= 1I;
  #L2627e0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L2627e6.  v0:= temp;
  #L2627e8.  if v0 == 0 then goto L262824;
  #L2627ec.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.size` @type ^`long` @kind wide;
  #L2627f0.  call temp:= `d`(v0, v7) @signature `Lio/reactivex/internal/util/b;.d:(JJ)J` @kind static;
  #L2627f6.  v0:= temp @kind wide;
  #L2627f8.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.skip` @type ^`long` @kind wide;
  #L2627fc.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.size` @type ^`long` @kind wide;
  #L262800.  v2:= v2 - v4 @kind long;
  #L262802.  v4:= 1L;
  #L262806.  v7:= v7 - v4 @kind long;
  #L262808.  call temp:= `d`(v2, v7) @signature `Lio/reactivex/internal/util/b;.d:(JJ)J` @kind static;
  #L26280e.  v7:= temp @kind wide;
  #L262810.  call temp:= `c`(v0, v7) @signature `Lio/reactivex/internal/util/b;.c:(JJ)J` @kind static;
  #L262816.  v7:= temp @kind wide;
  #L262818.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L26281c.  call `request`(v0, v7) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L262822.  goto L26283a;
  #L262824.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.skip` @type ^`long` @kind wide;
  #L262828.  call temp:= `d`(v0, v7) @signature `Lio/reactivex/internal/util/b;.d:(JJ)J` @kind static;
  #L26282e.  v7:= temp @kind wide;
  #L262830.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L262834.  call `request`(v0, v7) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L26283a.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowSkipSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26284c.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L262852.  v0:= temp;
  #L262854.  if v0 != 0 then goto L262862;
  #L262858.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowSkipSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L26285c.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L262862.  return @kind void;
}
