record `io.reactivex.internal.operators.flowable.o` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.e` @kind class {
  `io.reactivex.n` `io.reactivex.internal.operators.flowable.o.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.o` v0 @kind this, `io.reactivex.n` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/o;.<init>:(Lio/reactivex/n;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L255a78.  call `<init>`(v0) @signature `Lio/reactivex/e;.<init>:()V` @kind direct;
  #L255a7e.  v0.`io.reactivex.internal.operators.flowable.o.c` @type ^`io.reactivex.n` := v1 @kind object;
  #L255a82.  return @kind void;
}
procedure `void` `H`(`io.reactivex.internal.operators.flowable.o` v2 @kind this, `n.b.c` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/o;.H:(Ln/b/c;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L255a94.  v0:= v2.`io.reactivex.internal.operators.flowable.o.c` @type ^`io.reactivex.n` @kind object;
  #L255a98.  v1:= new `io.reactivex.internal.operators.flowable.n`;
  #L255a9c.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/n;.<init>:(Ln/b/c;)V` @kind direct;
  #L255aa2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/n;.subscribe:(Lio/reactivex/t;)V` @kind virtual;
  #L255aa8.  return @kind void;
}
