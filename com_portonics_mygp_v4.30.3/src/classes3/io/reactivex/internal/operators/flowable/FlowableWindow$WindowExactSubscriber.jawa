record `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface, `java.lang.Runnable` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.bufferSize` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.index` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.once` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.size` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.upstream` @AccessFlag ;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.window` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` v1 @kind this, `n.b.c` v2 @kind object, `long` v3 , `int` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.<init>:(Ln/b/c;JI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L262000.  v0:= 1I;
  #L262002.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L262008.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L26200c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.size` @type ^`long` := v3 @kind wide;
  #L262010.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L262014.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L26201a.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L26201e.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.bufferSize` @type ^`int` := v5;
  #L262022.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L262034.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L262038.  v1:= 0I;
  #L26203a.  v2:= 1I;
  #L26203c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L262042.  v0:= temp;
  #L262044.  if v0 == 0 then goto L26204e;
  #L262048.  call `run`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.run:()V` @kind virtual;
  #L26204e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L262060.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L262064.  if v0 == 0 then goto L262074;
  #L262068.  v1:= 0I;
  #L26206a.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L26206e.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L262074.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L262078.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L26207e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L262090.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L262094.  if v0 == 0 then goto L2620a4;
  #L262098.  v1:= 0I;
  #L26209a.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L26209e.  call `onError`(v0, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2620a4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2620a8.  call `onError`(v0, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2620ae.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2620c0.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.index` @type ^`long` @kind wide;
  #L2620c4.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L2620c8.  v3:= 0L;
  #L2620cc.  v5:= lcmp(v0, v3);
  #L2620d0.  if v5 != 0 then goto L2620f4;
  #L2620d4.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2620da.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.bufferSize` @type ^`int`;
  #L2620de.  call temp:= `L`(v2, v7) @signature `Lio/reactivex/processors/UnicastProcessor;.L:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L2620e4.  v2:= temp @kind object;
  #L2620e6.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v2 @kind object;
  #L2620ea.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2620ee.  call `onNext`(v5, v2) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2620f4.  v5:= 1L;
  #L2620f8.  v0:= v0 + v5 @kind long;
  #L2620fa.  call `onNext`(v2, v8) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L262100.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.size` @type ^`long` @kind wide;
  #L262104.  v8:= lcmp(v0, v5);
  #L262108.  if v8 != 0 then goto L26211e;
  #L26210c.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.index` @type ^`long` := v3 @kind wide;
  #L262110.  v8:= 0I;
  #L262112.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.window` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L262116.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L26211c.  goto L262122;
  #L26211e.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.index` @type ^`long` := v0 @kind wide;
  #L262122.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L262134.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L262138.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L26213e.  v0:= temp;
  #L262140.  if v0 == 0 then goto L262152;
  #L262144.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.upstream` @type ^`n.b.d` := v2 @kind object;
  #L262148.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L26214c.  call `onSubscribe`(v2, v1) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L262152.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L262164.  call temp:= `validate`(v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L26216a.  v0:= temp;
  #L26216c.  if v0 == 0 then goto L262186;
  #L262170.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.size` @type ^`long` @kind wide;
  #L262174.  call temp:= `d`(v0, v3) @signature `Lio/reactivex/internal/util/b;.d:(JJ)J` @kind static;
  #L26217a.  v3:= temp @kind wide;
  #L26217c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L262180.  call `request`(v0, v3) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L262186.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$WindowExactSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L262198.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L26219e.  v0:= temp;
  #L2621a0.  if v0 != 0 then goto L2621ae;
  #L2621a4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$WindowExactSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2621a8.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L2621ae.  return @kind void;
}
