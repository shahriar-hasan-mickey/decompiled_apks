record `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.requested` @AccessFlag FINAL;
  `n.b.b` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.source` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.subscriber` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver` v0 @kind this, `n.b.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.<init>:(Ln/b/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25c1ac.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L25c1b2.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.source` @type ^`n.b.b` := v1 @kind object;
  #L25c1b6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L25c1ba.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25c1c0.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L25c1c4.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L25c1c8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25c1ce.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L25c1d2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25c1e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25c1e8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25c1ee.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25c200.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.subscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` @kind object;
  #L25c204.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.cancel:()V` @kind virtual;
  #L25c20a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.subscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` @kind object;
  #L25c20e.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25c212.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25c218.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25c22c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.subscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` @kind object;
  #L25c230.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenSourceSubscriber;.cancel:()V` @kind virtual;
  #L25c236.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.subscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` @kind object;
  #L25c23a.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25c23e.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25c244.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25c258.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25c25e.  v2:= temp;
  #L25c260.  if v2 != 0 then goto L25c294;
  #L25c264.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25c268.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25c26e.  v2:= temp @kind object;
  #L25c270.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L25c274.  if v2 != v0 then goto L25c27a;
  #L25c278.  return @kind void;
  #L25c27a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.source` @type ^`n.b.b` @kind object;
  #L25c27e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.subscriber` @type ^`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenSourceSubscriber` @kind object;
  #L25c282.  call `subscribe`(v2, v0) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L25c288.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L25c28e.  v2:= temp;
  #L25c290.  if v2 != 0 then goto L25c264;
  #L25c294.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25c2a8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25c2ac.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25c2b0.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Ln/b/d;)Z` @kind static;
  #L25c2b6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$WhenReceiver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25c2c8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25c2cc.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$WhenReceiver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25c2d0.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L25c2d6.  return @kind void;
}
