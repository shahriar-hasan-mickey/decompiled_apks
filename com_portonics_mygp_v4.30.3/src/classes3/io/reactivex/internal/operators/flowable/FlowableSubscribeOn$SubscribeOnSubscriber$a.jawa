record `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber$a` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber$a.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber$a` v0 @kind this, `n.b.d` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber$a;.<init>:(Ln/b/d;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25f2bc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L25f2c2.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber$a.b` @type ^`n.b.d` := v1 @kind object;
  #L25f2c6.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber$a.c` @type ^`long` := v2 @kind wide;
  #L25f2ca.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$SubscribeOnSubscriber$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L25f2dc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber$a.b` @type ^`n.b.d` @kind object;
  #L25f2e0.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber$a.c` @type ^`long` @kind wide;
  #L25f2e4.  call `request`(v0, v1) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25f2ea.  return @kind void;
}
