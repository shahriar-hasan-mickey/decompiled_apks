record `io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `n.b.d` @kind interface, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.count` @AccessFlag ;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.end` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.resource` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber` v1 @kind this, `n.b.c` v2 @kind object, `long` v3 , `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableIntervalRange$IntervalRangeSubscriber;.<init>:(Ln/b/c;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2573b8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L2573be.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2573c2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2573c8.  v1.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L2573cc.  v1.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L2573d0.  v1.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.count` @type ^`long` := v3 @kind wide;
  #L2573d4.  v1.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.end` @type ^`long` := v5 @kind wide;
  #L2573d8.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableIntervalRange$IntervalRangeSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2573ec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2573f0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2573f6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableIntervalRange$IntervalRangeSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L257408.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25740e.  v0:= temp;
  #L257410.  if v0 == 0 then goto L25741a;
  #L257414.  call temp:= `a`(v1, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25741a.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber` v8 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableIntervalRange$IntervalRangeSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L25742c.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L257430.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L257436.  v0:= temp @kind object;
  #L257438.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L25743c.  if v0 == v1 then goto L25750e;
  #L257440.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L257446.  v2:= temp @kind wide;
  #L257448.  v4:= 0L;
  #L25744c.  v0:= lcmp(v2, v4);
  #L257450.  if v0 == 0 then goto L2574c0;
  #L257454.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.count` @type ^`long` @kind wide;
  #L257458.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25745c.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L257462.  v6:= temp @kind object;
  #L257464.  call `onNext`(v0, v6) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25746a.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.end` @type ^`long` @kind wide;
  #L25746e.  v0:= lcmp(v4, v6);
  #L257472.  if v0 != 0 then goto L25749c;
  #L257476.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25747a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L257480.  v0:= temp @kind object;
  #L257482.  if v0 == v1 then goto L257490;
  #L257486.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25748a.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L257490.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L257494.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25749a.  return @kind void;
  #L25749c.  v0:= 1L;
  #L2574a0.  v4:= v4 + v0 @kind long;
  #L2574a2.  v8.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.count` @type ^`long` := v4 @kind wide;
  #L2574a6.  v0:= 9223372036854775807L;
  #L2574b0.  v4:= lcmp(v2, v0);
  #L2574b4.  if v4 == 0 then goto L25750e;
  #L2574b8.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L2574be.  goto L25750e;
  #L2574c0.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2574c4.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L2574c8.  v2:= new `java.lang.StringBuilder`;
  #L2574cc.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2574d2.  v3:= "Can't deliver value " @kind object;
  #L2574d6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2574dc.  v3:= v8.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.count` @type ^`long` @kind wide;
  #L2574e0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2574e6.  v3:= " due to lack of requests" @kind object;
  #L2574ea.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2574f0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2574f6.  v2:= temp @kind object;
  #L2574f8.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2574fe.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L257504.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L257508.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25750e.  return @kind void;
}
procedure `void` `setResource`(`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableIntervalRange$IntervalRangeSubscriber;.setResource:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L257520.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableIntervalRange$IntervalRangeSubscriber.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L257524.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L25752a.  return @kind void;
}
