record `io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @AccessFlag ;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.<init>:(Ln/b/c;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L257c8c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L257c92.  v0.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L257c96.  v0.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L257c9a.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L257ca0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L257cb4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L257cb8.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L257cbe.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L257cd0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @type ^`long` @kind wide;
  #L257cd4.  v2:= 0L;
  #L257cd8.  v4:= lcmp(v0, v2);
  #L257cdc.  if v4 <= 0 then goto L257cee;
  #L257ce0.  v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L257ce4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L257ce8.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L257cee.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L257d00.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @type ^`long` @kind wide;
  #L257d04.  v2:= 0L;
  #L257d08.  v4:= lcmp(v0, v2);
  #L257d0c.  if v4 <= 0 then goto L257d20;
  #L257d10.  v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L257d14.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L257d18.  call `onError`(v0, v6) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L257d1e.  goto L257d26;
  #L257d20.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L257d26.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L257d38.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @type ^`long` @kind wide;
  #L257d3c.  v2:= 0L;
  #L257d40.  v4:= lcmp(v0, v2);
  #L257d44.  if v4 <= 0 then goto L257d78;
  #L257d48.  v4:= 1L;
  #L257d4c.  v0:= v0 - v4 @kind long;
  #L257d4e.  v6.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @type ^`long` := v0 @kind wide;
  #L257d52.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L257d56.  call `onNext`(v4, v7) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L257d5c.  v7:= lcmp(v0, v2);
  #L257d60.  if v7 != 0 then goto L257d78;
  #L257d64.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L257d68.  call `cancel`(v7) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L257d6e.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L257d72.  call `onComplete`(v7) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L257d78.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber` v5 @kind this, `n.b.d` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L257d8c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L257d90.  call temp:= `validate`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L257d96.  v0:= temp;
  #L257d98.  if v0 == 0 then goto L257dcc;
  #L257d9c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.remaining` @type ^`long` @kind wide;
  #L257da0.  v2:= 0L;
  #L257da4.  v4:= lcmp(v0, v2);
  #L257da8.  if v4 != 0 then goto L257dbe;
  #L257dac.  call `cancel`(v6) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L257db2.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L257db6.  call `complete`(v6) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Ln/b/c;)V` @kind static;
  #L257dbc.  goto L257dcc;
  #L257dbe.  v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.upstream` @type ^`n.b.d` := v6 @kind object;
  #L257dc2.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L257dc6.  call `onSubscribe`(v6, v5) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L257dcc.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$LimitSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L257de0.  call temp:= `validate`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L257de6.  v0:= temp;
  #L257de8.  if v0 == 0 then goto L257e2a;
  #L257dec.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L257df2.  v0:= temp @kind wide;
  #L257df4.  v2:= 0L;
  #L257df8.  v4:= lcmp(v0, v2);
  #L257dfc.  if v4 != 0 then goto L257e02;
  #L257e00.  goto L257e2a;
  #L257e02.  v2:= lcmp(v0, v7);
  #L257e06.  if v2 > 0 then goto L257e0e;
  #L257e0a.  v2:= v0 @kind wide;
  #L257e0c.  goto L257e10;
  #L257e0e.  v2:= v7 @kind wide;
  #L257e10.  v4:= v0 - v2 @kind long;
  #L257e14.  call temp:= `compareAndSet`(v6, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L257e1a.  v0:= temp;
  #L257e1c.  if v0 == 0 then goto L257dec;
  #L257e20.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableLimit$LimitSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L257e24.  call `request`(v7, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L257e2a.  return @kind void;
}
