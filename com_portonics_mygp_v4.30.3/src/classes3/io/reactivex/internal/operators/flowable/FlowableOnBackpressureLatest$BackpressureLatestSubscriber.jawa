record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.cancelled` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.current` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.requested` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v1 @kind this, `n.b.c` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.<init>:(Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L25a6c8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L25a6ce.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L25a6d2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25a6d8.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L25a6dc.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L25a6e0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25a6e6.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L25a6ea.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L25a6ee.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25a700.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L25a704.  if v0 != 0 then goto L25a730;
  #L25a708.  v0:= 1I;
  #L25a70a.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L25a70e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25a712.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25a718.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25a71e.  v0:= temp;
  #L25a720.  if v0 != 0 then goto L25a730;
  #L25a724.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25a728.  v1:= 0I;
  #L25a72a.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L25a730.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v3 @kind this, `boolean` v4 , `boolean` v5 , `n.b.c` v6 @kind object, `java.util.concurrent.atomic.AtomicReference` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.checkTerminated:(ZZLn/b/c;Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L25a678.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L25a67c.  v1:= 0I;
  #L25a67e.  v2:= 1I;
  #L25a680.  if v0 == 0 then goto L25a68c;
  #L25a684.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L25a68a.  return v2;
  #L25a68c.  if v4 == 0 then goto L25a6b2;
  #L25a690.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L25a694.  if v4 == 0 then goto L25a6a6;
  #L25a698.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L25a69e.  call `onError`(v6, v4) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25a6a4.  return v2;
  #L25a6a6.  if v5 == 0 then goto L25a6b2;
  #L25a6aa.  call `onComplete`(v6) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25a6b0.  return v2;
  #L25a6b2.  v4:= 0I;
  #L25a6b4.  return v4;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L25a744.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25a74a.  v0:= temp;
  #L25a74c.  if v0 == 0 then goto L25a752;
  #L25a750.  return @kind void;
  #L25a752.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25a756.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25a75a.  v2:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25a75e.  v3:= 1I;
  #L25a760.  v4:= 1I;
  #L25a762.  v5:= 0L;
  #L25a766.  v7:= v5 @kind wide;
  #L25a768.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25a76e.  v9:= temp @kind wide;
  #L25a770.  v11:= 0I;
  #L25a772.  v12:= lcmp(v7, v9);
  #L25a776.  if v12 == 0 then goto L25a7b4;
  #L25a77a.  v9:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.done` @type ^`boolean` @kind boolean;
  #L25a77e.  v10:= 0I;
  #L25a780.  call temp:= `getAndSet`(v2, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25a786.  v10:= temp @kind object;
  #L25a788.  if v10 != 0 then goto L25a790;
  #L25a78c.  v12:= 1I;
  #L25a78e.  goto L25a792;
  #L25a790.  v12:= 0I;
  #L25a792.  call temp:= `checkTerminated`(v13, v9, v12, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.checkTerminated:(ZZLn/b/c;Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind virtual;
  #L25a798.  v9:= temp;
  #L25a79a.  if v9 == 0 then goto L25a7a0;
  #L25a79e.  return @kind void;
  #L25a7a0.  if v12 == 0 then goto L25a7a6;
  #L25a7a4.  goto L25a7b4;
  #L25a7a6.  call `onNext`(v0, v10) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25a7ac.  v9:= 1L;
  #L25a7b0.  v7:= v7 + v9 @kind long;
  #L25a7b2.  goto L25a768;
  #L25a7b4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25a7ba.  v9:= temp @kind wide;
  #L25a7bc.  v12:= lcmp(v7, v9);
  #L25a7c0.  if v12 != 0 then goto L25a7e4;
  #L25a7c4.  v9:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.done` @type ^`boolean` @kind boolean;
  #L25a7c8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25a7ce.  v10:= temp @kind object;
  #L25a7d0.  if v10 != 0 then goto L25a7d6;
  #L25a7d4.  v11:= 1I;
  #L25a7d6.  call temp:= `checkTerminated`(v13, v9, v11, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.checkTerminated:(ZZLn/b/c;Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind virtual;
  #L25a7dc.  v9:= temp;
  #L25a7de.  if v9 == 0 then goto L25a7e4;
  #L25a7e2.  return @kind void;
  #L25a7e4.  v9:= lcmp(v7, v5);
  #L25a7e8.  if v9 == 0 then goto L25a7f2;
  #L25a7ec.  call temp:= `e`(v1, v7) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25a7f2.  v4:= -v4 @kind int;
  #L25a7f4.  call temp:= `addAndGet`(v13, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L25a7fa.  v4:= temp;
  #L25a7fc.  if v4 != 0 then goto L25a762;
  #L25a800.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25a814.  v0:= 1I;
  #L25a816.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25a81a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.drain:()V` @kind virtual;
  #L25a820.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L25a834.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L25a838.  v1:= 1I;
  #L25a83a.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.done` @type ^`boolean` := v1 @kind boolean;
  #L25a83e.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.drain:()V` @kind virtual;
  #L25a844.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25a858.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.current` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25a85c.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L25a862.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.drain:()V` @kind virtual;
  #L25a868.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25a87c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25a880.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25a886.  v0:= temp;
  #L25a888.  if v0 == 0 then goto L25a8aa;
  #L25a88c.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L25a890.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25a894.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25a89a.  v0:= 9223372036854775807L;
  #L25a8a4.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25a8aa.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25a8bc.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25a8c2.  v0:= temp;
  #L25a8c4.  if v0 == 0 then goto L25a8d8;
  #L25a8c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$BackpressureLatestSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25a8cc.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25a8d2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$BackpressureLatestSubscriber;.drain:()V` @kind virtual;
  #L25a8d8.  return @kind void;
}
