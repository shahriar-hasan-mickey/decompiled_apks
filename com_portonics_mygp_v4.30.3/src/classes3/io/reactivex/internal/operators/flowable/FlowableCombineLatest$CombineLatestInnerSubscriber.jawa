record `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.index` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.parent` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.prefetch` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.produced` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24e5ec.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L24e5f2.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` := v1 @kind object;
  #L24e5f6.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.index` @type ^`int` := v2;
  #L24e5fa.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.prefetch` @type ^`int` := v3;
  #L24e5fe.  v1:= v3 ^> 2;
  #L24e602.  v3:= v3 - v1 @kind int;
  #L24e604.  v0.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.limit` @type ^`int` := v3;
  #L24e608.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L24e61c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24e622.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24e634.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` @kind object;
  #L24e638.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.index` @type ^`int`;
  #L24e63c.  call `innerComplete`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.innerComplete:(I)V` @kind virtual;
  #L24e642.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24e654.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` @kind object;
  #L24e658.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.index` @type ^`int`;
  #L24e65c.  call `innerError`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.innerError:(ILjava/lang/Throwable;)V` @kind virtual;
  #L24e662.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24e674.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator` @kind object;
  #L24e678.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.index` @type ^`int`;
  #L24e67c.  call `innerValue`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestCoordinator;.innerValue:(ILjava/lang/Object;)V` @kind virtual;
  #L24e682.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24e694.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.prefetch` @type ^`int`;
  #L24e698.  v0:= (`long`) v0 @kind i2l;
  #L24e69a.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;J)Z` @kind static;
  #L24e6a0.  return @kind void;
}
procedure `void` `requestOne`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$CombineLatestInnerSubscriber;.requestOne:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24e6b4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.produced` @type ^`int`;
  #L24e6b8.  v0:= v0 + 1;
  #L24e6bc.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.limit` @type ^`int`;
  #L24e6c0.  if v0 != v1 then goto L24e6e0;
  #L24e6c4.  v1:= 0I;
  #L24e6c6.  v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.produced` @type ^`int` := v1;
  #L24e6ca.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24e6d0.  v1:= temp @kind object;
  #L24e6d2.  v1:= (`n.b.d`) v1 @kind object;
  #L24e6d6.  v2:= (`long`) v0 @kind i2l;
  #L24e6d8.  call `request`(v1, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24e6de.  goto L24e6e4;
  #L24e6e0.  v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestInnerSubscriber.produced` @type ^`int` := v0;
  #L24e6e4.  return @kind void;
}
