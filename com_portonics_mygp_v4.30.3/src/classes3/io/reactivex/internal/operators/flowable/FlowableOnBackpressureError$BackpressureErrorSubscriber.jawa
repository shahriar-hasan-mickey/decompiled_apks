record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @AccessFlag ;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.downstream` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v0 @kind this, `n.b.c` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.<init>:(Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25a4e0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25a4e6.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25a4ea.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25a4fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25a500.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25a506.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25a518.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @type ^`boolean` @kind boolean;
  #L25a51c.  if v0 == 0 then goto L25a522;
  #L25a520.  return @kind void;
  #L25a522.  v0:= 1I;
  #L25a524.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25a528.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25a52c.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25a532.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25a544.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @type ^`boolean` @kind boolean;
  #L25a548.  if v0 == 0 then goto L25a554;
  #L25a54c.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25a552.  return @kind void;
  #L25a554.  v0:= 1I;
  #L25a556.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25a55a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25a55e.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25a564.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25a578.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.done` @type ^`boolean` @kind boolean;
  #L25a57c.  if v0 == 0 then goto L25a582;
  #L25a580.  return @kind void;
  #L25a582.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25a588.  v0:= temp @kind wide;
  #L25a58a.  v2:= 0L;
  #L25a58e.  v4:= lcmp(v0, v2);
  #L25a592.  if v4 == 0 then goto L25a5ac;
  #L25a596.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25a59a.  call `onNext`(v0, v6) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25a5a0.  v0:= 1L;
  #L25a5a4.  call temp:= `e`(v5, v0) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25a5aa.  goto L25a5c0;
  #L25a5ac.  v6:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L25a5b0.  v0:= "could not emit value due to lack of requests" @kind object;
  #L25a5b4.  call `<init>`(v6, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25a5ba.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L25a5c0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25a5d4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25a5d8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25a5de.  v0:= temp;
  #L25a5e0.  if v0 == 0 then goto L25a602;
  #L25a5e4.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L25a5e8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25a5ec.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25a5f2.  v0:= 9223372036854775807L;
  #L25a5fc.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25a602.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureError$BackpressureErrorSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureError$BackpressureErrorSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25a614.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25a61a.  v0:= temp;
  #L25a61c.  if v0 == 0 then goto L25a626;
  #L25a620.  call temp:= `a`(v1, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25a626.  return @kind void;
}
