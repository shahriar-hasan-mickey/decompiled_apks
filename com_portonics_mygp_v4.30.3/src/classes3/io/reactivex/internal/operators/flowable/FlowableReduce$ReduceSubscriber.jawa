record `io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.h` @kind interface {
  `io.reactivex.d0.c` `io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.reducer` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.c` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduce$ReduceSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25bbdc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Ln/b/c;)V` @kind direct;
  #L25bbe2.  v0.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.reducer` @type ^`io.reactivex.d0.c` := v2 @kind object;
  #L25bbe6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduce$ReduceSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25bbf8.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L25bbfe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25bc02.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25bc08.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L25bc0c.  v1.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`n.b.d` := v0 @kind object;
  #L25bc10.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduce$ReduceSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25bc24.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25bc28.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L25bc2c.  if v0 != v1 then goto L25bc32;
  #L25bc30.  return @kind void;
  #L25bc32.  v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`n.b.d` := v1 @kind object;
  #L25bc36.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L25bc3a.  if v0 == 0 then goto L25bc46;
  #L25bc3e.  call `complete`(v2, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L25bc44.  goto L25bc50;
  #L25bc46.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L25bc4a.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25bc50.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduce$ReduceSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25bc64.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25bc68.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L25bc6c.  if v0 != v1 then goto L25bc78;
  #L25bc70.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25bc76.  return @kind void;
  #L25bc78.  v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`n.b.d` := v1 @kind object;
  #L25bc7c.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L25bc80.  call `onError`(v0, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25bc86.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduce$ReduceSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25bc98.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25bc9c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L25bca0.  if v0 != v1 then goto L25bca6;
  #L25bca4.  return @kind void;
  #L25bca6.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L25bcaa.  if v0 != 0 then goto L25bcb4;
  #L25bcae.  v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v3 @kind object;
  #L25bcb2.  goto L25bcea;
  #L25bcb4.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.reducer` @type ^`io.reactivex.d0.c` @kind object;
  #L25bcb8.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/d0/c;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L25bcbe.  v3:= temp @kind object;
  #L25bcc0.  v0:= "The reducer returned a null value" @kind object;
  #L25bcc4.  call temp:= `e`(v3, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L25bcca.  v3:= temp @kind object;
  #L25bccc.  v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v3 @kind object;
  #L25bcd0.  goto L25bcea;
  #L25bcd2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25bcd4.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25bcda.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25bcde.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25bce4.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduce$ReduceSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L25bcea.  return @kind void;
  catch `java.lang.Throwable` @[L25bcb4..L25bcd0] goto L25bcd2;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduce$ReduceSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25bd08.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25bd0c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25bd12.  v0:= temp;
  #L25bd14.  if v0 == 0 then goto L25bd36;
  #L25bd18.  v2.`io.reactivex.internal.operators.flowable.FlowableReduce$ReduceSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L25bd1c.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L25bd20.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25bd26.  v0:= 9223372036854775807L;
  #L25bd30.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25bd36.  return @kind void;
}
