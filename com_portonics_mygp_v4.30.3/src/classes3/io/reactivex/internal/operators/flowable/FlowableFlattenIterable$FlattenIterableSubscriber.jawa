record `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.h` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.consumed` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.prefetch` @AccessFlag FINAL;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.requested` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/k;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L254a60.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L254a66.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L254a6a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L254a6e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.prefetch` @type ^`int` := v3;
  #L254a72.  v1:= v3 ^> 2;
  #L254a76.  v3:= v3 - v1 @kind int;
  #L254a78.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.limit` @type ^`int` := v3;
  #L254a7c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L254a80.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L254a86.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L254a8a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L254a8e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L254a94.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L254a98.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254aac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L254ab0.  if v0 != 0 then goto L254ada;
  #L254ab4.  v0:= 1I;
  #L254ab6.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L254aba.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L254abe.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L254ac4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L254aca.  v0:= temp;
  #L254acc.  if v0 != 0 then goto L254ada;
  #L254ad0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L254ad4.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L254ada.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v3 @kind this, `boolean` v4 , `boolean` v5 , `n.b.c` v6 @kind object, `io.reactivex.e0.a.j` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.checkTerminated:(ZZLn/b/c;Lio/reactivex/e0/a/j;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L254918.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L25491c.  v1:= 0I;
  #L25491e.  v2:= 1I;
  #L254920.  if v0 == 0 then goto L254930;
  #L254924.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v1 @kind object;
  #L254928.  call `clear`(v7) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L25492e.  return v2;
  #L254930.  if v4 == 0 then goto L254972;
  #L254934.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L254938.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25493e.  v4:= temp @kind object;
  #L254940.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L254944.  if v4 == 0 then goto L254966;
  #L254948.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25494c.  call temp:= `b`(v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L254952.  v4:= temp @kind object;
  #L254954.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v1 @kind object;
  #L254958.  call `clear`(v7) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L25495e.  call `onError`(v6, v4) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L254964.  return v2;
  #L254966.  if v5 == 0 then goto L254972;
  #L25496a.  call `onComplete`(v6) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L254970.  return v2;
  #L254972.  v4:= 0I;
  #L254974.  return v4;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254aec.  v0:= 0I;
  #L254aee.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v0 @kind object;
  #L254af2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L254af6.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L254afc.  return @kind void;
}
procedure `void` `consumedOne`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v3 @kind this, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.consumedOne:(Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L254b10.  if v4 == 0 then goto L254b3c;
  #L254b14.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.consumed` @type ^`int`;
  #L254b18.  v4:= v4 + 1;
  #L254b1c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.limit` @type ^`int`;
  #L254b20.  if v4 != v0 then goto L254b38;
  #L254b24.  v0:= 0I;
  #L254b26.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.consumed` @type ^`int` := v0;
  #L254b2a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L254b2e.  v1:= (`long`) v4 @kind i2l;
  #L254b30.  call `request`(v0, v1) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L254b36.  goto L254b3c;
  #L254b38.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.consumed` @type ^`int` := v4;
  #L254b3c.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v18 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L254b50.  v1:= v18 @kind object;
  #L254b54.  call temp:= `getAndIncrement`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L254b5a.  v0:= temp;
  #L254b5c.  if v0 == 0 then goto L254b62;
  #L254b60.  return @kind void;
  #L254b62.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L254b66.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L254b6a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @type ^`int`;
  #L254b6e.  v4:= 0I;
  #L254b70.  v5:= 1I;
  #L254b72.  if v0 == v5 then goto L254b7a;
  #L254b76.  v0:= 1I;
  #L254b78.  goto L254b7c;
  #L254b7a.  v0:= 0I;
  #L254b7c.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` @kind object;
  #L254b80.  v7:= 0I;
  #L254b82.  v8:= 1I;
  #L254b84.  if v6 != 0 then goto L254c50;
  #L254b88.  v9:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L254b8c.  call temp:= `poll`(v3) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L254b92.  v10:= temp @kind object;
  #L254b94.  if v10 != 0 then goto L254b9c;
  #L254b98.  v11:= 1I;
  #L254b9a.  goto L254b9e;
  #L254b9c.  v11:= 0I;
  #L254b9e.  call temp:= `checkTerminated`(v1, v9, v11, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.checkTerminated:(ZZLn/b/c;Lio/reactivex/e0/a/j;)Z` @kind virtual;
  #L254ba4.  v9:= temp;
  #L254ba6.  if v9 == 0 then goto L254bac;
  #L254baa.  return @kind void;
  #L254bac.  if v10 == 0 then goto L254c50;
  #L254bb0.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L254bb4.  call temp:= `apply`(v6, v10) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L254bba.  v6:= temp @kind object;
  #L254bbc.  v6:= (`java.lang.Iterable`) v6 @kind object;
  #L254bc0.  call temp:= `iterator`(v6) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L254bc6.  v6:= temp @kind object;
  #L254bc8.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L254bce.  v9:= temp;
  #L254bd0.  if v9 != 0 then goto L254bde;
  #L254bd4.  call `consumedOne`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.consumedOne:(Z)V` @kind virtual;
  #L254bda.  v6:= v7 @kind object;
  #L254bdc.  goto L254b84;
  #L254bde.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v6 @kind object;
  #L254be2.  goto L254c50;
  #L254be4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L254be6.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L254bec.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L254bf0.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L254bf6.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L254bfa.  call temp:= `a`(v3, v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L254c00.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L254c04.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L254c0a.  v0:= temp @kind object;
  #L254c0c.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L254c12.  return @kind void;
  #L254c14.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L254c16.  v4:= v0 @kind object;
  #L254c18.  call `b`(v4) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L254c1e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L254c22.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L254c28.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L254c2c.  call temp:= `a`(v0, v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L254c32.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L254c36.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L254c3c.  v0:= temp @kind object;
  #L254c3e.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v7 @kind object;
  #L254c42.  call `clear`(v3) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L254c48.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L254c4e.  return @kind void;
  #L254c50.  if v6 == 0 then goto L254d98;
  #L254c54.  v9:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L254c58.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L254c5e.  v9:= temp @kind wide;
  #L254c60.  v11:= 0L;
  #L254c64.  v13:= v11 @kind wide;
  #L254c66.  v15:= lcmp(v13, v9);
  #L254c6a.  if v15 == 0 then goto L254d3c;
  #L254c6e.  v15:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L254c72.  call temp:= `checkTerminated`(v1, v15, v4, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.checkTerminated:(ZZLn/b/c;Lio/reactivex/e0/a/j;)Z` @kind virtual;
  #L254c78.  v15:= temp;
  #L254c7a.  if v15 == 0 then goto L254c80;
  #L254c7e.  return @kind void;
  #L254c80.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L254c86.  v15:= temp @kind object;
  #L254c88.  v5:= "The iterator returned a null value" @kind object;
  #L254c8c.  call temp:= `e`(v15, v5) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L254c92.  v5:= temp @kind object;
  #L254c94.  call `onNext`(v2, v5) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L254c9a.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L254c9e.  call temp:= `checkTerminated`(v1, v5, v4, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.checkTerminated:(ZZLn/b/c;Lio/reactivex/e0/a/j;)Z` @kind virtual;
  #L254ca4.  v5:= temp;
  #L254ca6.  if v5 == 0 then goto L254cac;
  #L254caa.  return @kind void;
  #L254cac.  v16:= 1L;
  #L254cb0.  v13:= v13 + v16 @kind long;
  #L254cb4.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L254cba.  v5:= temp;
  #L254cbc.  if v5 != 0 then goto L254cce;
  #L254cc0.  call `consumedOne`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.consumedOne:(Z)V` @kind virtual;
  #L254cc6.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v7 @kind object;
  #L254cca.  v6:= v7 @kind object;
  #L254ccc.  goto L254d3c;
  #L254cce.  v5:= 1I;
  #L254cd0.  goto L254c66;
  #L254cd2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L254cd4.  v3:= v0 @kind object;
  #L254cd6.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L254cdc.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v7 @kind object;
  #L254ce0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L254ce4.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L254cea.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L254cee.  call temp:= `a`(v0, v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L254cf4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L254cf8.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L254cfe.  v0:= temp @kind object;
  #L254d00.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L254d06.  return @kind void;
  #L254d08.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L254d0a.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L254d10.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v7 @kind object;
  #L254d14.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L254d18.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L254d1e.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L254d22.  call temp:= `a`(v3, v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L254d28.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L254d2c.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L254d32.  v0:= temp @kind object;
  #L254d34.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L254d3a.  return @kind void;
  #L254d3c.  v5:= lcmp(v13, v9);
  #L254d40.  if v5 != 0 then goto L254d6c;
  #L254d44.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L254d48.  call temp:= `isEmpty`(v3) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L254d4e.  v15:= temp;
  #L254d50.  if v15 == 0 then goto L254d5c;
  #L254d54.  if v6 != 0 then goto L254d5c;
  #L254d58.  v15:= 1I;
  #L254d5a.  goto L254d5e;
  #L254d5c.  v15:= 0I;
  #L254d5e.  call temp:= `checkTerminated`(v1, v5, v15, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.checkTerminated:(ZZLn/b/c;Lio/reactivex/e0/a/j;)Z` @kind virtual;
  #L254d64.  v5:= temp;
  #L254d66.  if v5 == 0 then goto L254d6c;
  #L254d6a.  return @kind void;
  #L254d6c.  v5:= lcmp(v13, v11);
  #L254d70.  if v5 == 0 then goto L254d92;
  #L254d74.  v11:= 9223372036854775807L;
  #L254d7e.  v5:= lcmp(v9, v11);
  #L254d82.  if v5 == 0 then goto L254d92;
  #L254d86.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L254d8a.  v9:= -v13 @kind long;
  #L254d8c.  call temp:= `addAndGet`(v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L254d92.  if v6 != 0 then goto L254d98;
  #L254d96.  goto L254da8;
  #L254d98.  v5:= -v8 @kind int;
  #L254d9a.  call temp:= `addAndGet`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L254da0.  v8:= temp;
  #L254da2.  if v8 != 0 then goto L254da8;
  #L254da6.  return @kind void;
  #L254da8.  v5:= 1I;
  #L254daa.  goto L254b84;
  catch `java.lang.Throwable` @[L254b8c..L254b94] goto L254c14;
  catch `java.lang.Throwable` @[L254bb0..L254bd0] goto L254be4;
  catch `java.lang.Throwable` @[L254c80..L254c94] goto L254d08;
  catch `java.lang.Throwable` @[L254cb4..L254cbc] goto L254cd2;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254988.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` @kind object;
  #L25498c.  if v0 != 0 then goto L2549a4;
  #L254990.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L254994.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L25499a.  v0:= temp;
  #L25499c.  if v0 == 0 then goto L2549a4;
  #L2549a0.  v0:= 1I;
  #L2549a2.  goto L2549a6;
  #L2549a4.  v0:= 0I;
  #L2549a6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254dec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L254df0.  if v0 == 0 then goto L254df6;
  #L254df4.  return @kind void;
  #L254df6.  v0:= 1I;
  #L254df8.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L254dfc.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.drain:()V` @kind virtual;
  #L254e02.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254e14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L254e18.  if v0 != 0 then goto L254e3a;
  #L254e1c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L254e20.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L254e26.  v0:= temp;
  #L254e28.  if v0 == 0 then goto L254e3a;
  #L254e2c.  v2:= 1I;
  #L254e2e.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L254e32.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.drain:()V` @kind virtual;
  #L254e38.  goto L254e40;
  #L254e3a.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L254e40.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254e54.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` @kind boolean;
  #L254e58.  if v0 == 0 then goto L254e5e;
  #L254e5c.  return @kind void;
  #L254e5e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @type ^`int`;
  #L254e62.  if v0 != 0 then goto L254e8c;
  #L254e66.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L254e6a.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L254e70.  v2:= temp;
  #L254e72.  if v2 != 0 then goto L254e8c;
  #L254e76.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L254e7a.  v0:= "Queue is full?!" @kind object;
  #L254e7e.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L254e84.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L254e8a.  return @kind void;
  #L254e8c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.drain:()V` @kind virtual;
  #L254e92.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v3 @kind this, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L254ea4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L254ea8.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L254eae.  v0:= temp;
  #L254eb0.  if v0 == 0 then goto L254f3c;
  #L254eb4.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.upstream` @type ^`n.b.d` := v4 @kind object;
  #L254eb8.  v0:= instanceof @variable v4 @type ^`io.reactivex.e0.a.g` @kind boolean;
  #L254ebc.  if v0 == 0 then goto L254f14;
  #L254ec0.  v0:= v4 @kind object;
  #L254ec2.  v0:= (`io.reactivex.e0.a.g`) v0 @kind object;
  #L254ec6.  v1:= 3I;
  #L254ec8.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L254ece.  v1:= temp;
  #L254ed0.  v2:= 1I;
  #L254ed2.  if v1 != v2 then goto L254eee;
  #L254ed6.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @type ^`int` := v1;
  #L254eda.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L254ede.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L254ee2.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L254ee6.  call `onSubscribe`(v4, v3) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L254eec.  return @kind void;
  #L254eee.  v2:= 2I;
  #L254ef0.  if v1 != v2 then goto L254f14;
  #L254ef4.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @type ^`int` := v1;
  #L254ef8.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L254efc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L254f00.  call `onSubscribe`(v0, v3) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L254f06.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.prefetch` @type ^`int`;
  #L254f0a.  v0:= (`long`) v0 @kind i2l;
  #L254f0c.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L254f12.  return @kind void;
  #L254f14.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L254f18.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.prefetch` @type ^`int`;
  #L254f1c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L254f22.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L254f26.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L254f2a.  call `onSubscribe`(v0, v3) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L254f30.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.prefetch` @type ^`int`;
  #L254f34.  v0:= (`long`) v0 @kind i2l;
  #L254f36.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L254f3c.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2549e0.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` @kind object;
  #L2549e4.  v1:= 0I;
  #L2549e6.  if v0 != 0 then goto L254a28;
  #L2549ea.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L2549ee.  call temp:= `poll`(v0) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L2549f4.  v0:= temp @kind object;
  #L2549f6.  if v0 != 0 then goto L2549fc;
  #L2549fa.  return v1 @kind object;
  #L2549fc.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L254a00.  call temp:= `apply`(v2, v0) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L254a06.  v0:= temp @kind object;
  #L254a08.  v0:= (`java.lang.Iterable`) v0 @kind object;
  #L254a0c.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L254a12.  v0:= temp @kind object;
  #L254a14.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L254a1a.  v2:= temp;
  #L254a1c.  if v2 != 0 then goto L254a24;
  #L254a20.  v0:= v1 @kind object;
  #L254a22.  goto L2549e6;
  #L254a24.  v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v0 @kind object;
  #L254a28.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L254a2e.  v2:= temp @kind object;
  #L254a30.  v3:= "The iterator returned a null value" @kind object;
  #L254a34.  call temp:= `e`(v2, v3) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L254a3a.  v2:= temp @kind object;
  #L254a3c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L254a42.  v0:= temp;
  #L254a44.  if v0 != 0 then goto L254a4c;
  #L254a48.  v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.current` @type ^`java.util.Iterator` := v1 @kind object;
  #L254a4c.  return v2 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254f50.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L254f56.  v0:= temp;
  #L254f58.  if v0 == 0 then goto L254f6c;
  #L254f5c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L254f60.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L254f66.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.drain:()V` @kind virtual;
  #L254f6c.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$FlattenIterableSubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2549b8.  v0:= 1I;
  #L2549ba.  v2:= v2 ^& v0 @kind int;
  #L2549bc.  if v2 == 0 then goto L2549ca;
  #L2549c0.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber.fusionMode` @type ^`int`;
  #L2549c4.  if v2 != v0 then goto L2549ca;
  #L2549c8.  return v0;
  #L2549ca.  v2:= 0I;
  #L2549cc.  return v2;
}
