record `io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.produced` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.remaining` @AccessFlag ;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.sa` @AccessFlag FINAL;
  `n.b.b` `io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.source` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `long` v2 , `io.reactivex.internal.subscriptions.SubscriptionArbiter` v4 @kind object, `n.b.b` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$RepeatSubscriber;.<init>:(Ln/b/c;JLio/reactivex/internal/subscriptions/SubscriptionArbiter;Ln/b/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25beb8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L25bebe.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25bec2.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v4 @kind object;
  #L25bec6.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.source` @type ^`n.b.b` := v5 @kind object;
  #L25beca.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L25bece.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$RepeatSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25bee0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.remaining` @type ^`long` @kind wide;
  #L25bee4.  v2:= 9223372036854775807L;
  #L25beee.  v4:= lcmp(v0, v2);
  #L25bef2.  if v4 == 0 then goto L25bf02;
  #L25bef6.  v2:= 1L;
  #L25befa.  v2:= v0 - v2 @kind long;
  #L25befe.  v5.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.remaining` @type ^`long` := v2 @kind wide;
  #L25bf02.  v2:= 0L;
  #L25bf06.  v4:= lcmp(v0, v2);
  #L25bf0a.  if v4 == 0 then goto L25bf16;
  #L25bf0e.  call `subscribeNext`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$RepeatSubscriber;.subscribeNext:()V` @kind virtual;
  #L25bf14.  goto L25bf20;
  #L25bf16.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25bf1a.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25bf20.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$RepeatSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25bf34.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25bf38.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25bf3e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$RepeatSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25bf50.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.produced` @type ^`long` @kind wide;
  #L25bf54.  v2:= 1L;
  #L25bf58.  v0:= v0 + v2 @kind long;
  #L25bf5a.  v4.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L25bf5e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25bf62.  call `onNext`(v0, v5) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25bf68.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$RepeatSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25bf7c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L25bf80.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Ln/b/d;)V` @kind virtual;
  #L25bf86.  return @kind void;
}
procedure `void` `subscribeNext`(`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$RepeatSubscriber;.subscribeNext:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L25bf98.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25bf9e.  v0:= temp;
  #L25bfa0.  if v0 != 0 then goto L25bfee;
  #L25bfa4.  v0:= 1I;
  #L25bfa6.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L25bfaa.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L25bfb0.  v1:= temp;
  #L25bfb2.  if v1 == 0 then goto L25bfb8;
  #L25bfb6.  return @kind void;
  #L25bfb8.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.produced` @type ^`long` @kind wide;
  #L25bfbc.  v3:= 0L;
  #L25bfc0.  v5:= lcmp(v1, v3);
  #L25bfc4.  if v5 == 0 then goto L25bfd6;
  #L25bfc8.  v6.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.produced` @type ^`long` := v3 @kind wide;
  #L25bfcc.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.sa` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L25bfd0.  call `produced`(v3, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L25bfd6.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeat$RepeatSubscriber.source` @type ^`n.b.b` @kind object;
  #L25bfda.  call `subscribe`(v1, v6) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L25bfe0.  v0:= -v0 @kind int;
  #L25bfe2.  call temp:= `addAndGet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L25bfe8.  v0:= temp;
  #L25bfea.  if v0 != 0 then goto L25bfa6;
  #L25bfee.  return @kind void;
}
