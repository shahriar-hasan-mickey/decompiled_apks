record `io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription` @kind class {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription` v0 @kind this, `n.b.c` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$RangeSubscription;.<init>:(Ln/b/c;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25b78c.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$BaseRangeSubscription;.<init>:(II)V` @kind direct;
  #L25b792.  v0.`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.downstream` @type ^`n.b.c` := v1 @kind object;
  #L25b796.  return @kind void;
}
procedure `void` `fastPath`(`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$RangeSubscription;.fastPath:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25b7a8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.end` @type ^`int`;
  #L25b7ac.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.downstream` @type ^`n.b.c` @kind object;
  #L25b7b0.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.index` @type ^`int`;
  #L25b7b4.  if v2 == v0 then goto L25b7d6;
  #L25b7b8.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25b7bc.  if v3 == 0 then goto L25b7c2;
  #L25b7c0.  return @kind void;
  #L25b7c2.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L25b7c8.  v3:= temp @kind object;
  #L25b7ca.  call `onNext`(v1, v3) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25b7d0.  v2:= v2 + 1;
  #L25b7d4.  goto L25b7b4;
  #L25b7d6.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25b7da.  if v0 == 0 then goto L25b7e0;
  #L25b7de.  return @kind void;
  #L25b7e0.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25b7e6.  return @kind void;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$RangeSubscription;.slowPath:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L25b7f8.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.end` @type ^`int`;
  #L25b7fc.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.index` @type ^`int`;
  #L25b800.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$RangeSubscription.downstream` @type ^`n.b.c` @kind object;
  #L25b804.  v3:= 0L;
  #L25b808.  v5:= v3 @kind wide;
  #L25b80a.  v7:= lcmp(v5, v10);
  #L25b80e.  if v7 == 0 then goto L25b83a;
  #L25b812.  if v1 == v0 then goto L25b83a;
  #L25b816.  v7:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25b81a.  if v7 == 0 then goto L25b820;
  #L25b81e.  return @kind void;
  #L25b820.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L25b826.  v7:= temp @kind object;
  #L25b828.  call `onNext`(v2, v7) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25b82e.  v7:= 1L;
  #L25b832.  v5:= v5 + v7 @kind long;
  #L25b834.  v1:= v1 + 1;
  #L25b838.  goto L25b80a;
  #L25b83a.  if v1 != v0 then goto L25b84e;
  #L25b83e.  v10:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25b842.  if v10 != 0 then goto L25b84c;
  #L25b846.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L25b84c.  return @kind void;
  #L25b84e.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25b854.  v10:= temp @kind wide;
  #L25b856.  v7:= lcmp(v5, v10);
  #L25b85a.  if v7 != 0 then goto L25b80a;
  #L25b85e.  v9.`io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription.index` @type ^`int` := v1;
  #L25b862.  v10:= -v5 @kind long;
  #L25b864.  call temp:= `addAndGet`(v9, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L25b86a.  v10:= temp @kind wide;
  #L25b86c.  v5:= lcmp(v10, v3);
  #L25b870.  if v5 != 0 then goto L25b808;
  #L25b874.  return @kind void;
}
