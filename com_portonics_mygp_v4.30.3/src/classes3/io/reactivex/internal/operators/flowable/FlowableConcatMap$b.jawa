record `io.reactivex.internal.operators.flowable.FlowableConcatMap$b` @kind class @AccessFlag FINAL extends `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableConcatMap$b.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableConcatMap$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMap$b.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$b` v0 @kind this, `java.lang.Object` v1 @kind object, `n.b.c` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$b;.<init>:(Ljava/lang/Object;Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24f2b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24f2b6.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.c` @type ^`java.lang.Object` := v1 @kind object;
  #L24f2ba.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.b` @type ^`n.b.c` := v2 @kind object;
  #L24f2be.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L24f2d0.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$b` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24f2e4.  v0:= 0L;
  #L24f2e8.  v2:= lcmp(v4, v0);
  #L24f2ec.  if v2 <= 0 then goto L24f312;
  #L24f2f0.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.d` @type ^`boolean` @kind boolean;
  #L24f2f4.  if v4 != 0 then goto L24f312;
  #L24f2f8.  v4:= 1I;
  #L24f2fa.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.d` @type ^`boolean` := v4 @kind boolean;
  #L24f2fe.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.b` @type ^`n.b.c` @kind object;
  #L24f302.  v5:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.c` @type ^`java.lang.Object` @kind object;
  #L24f306.  call `onNext`(v4, v5) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L24f30c.  call `onComplete`(v4) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L24f312.  return @kind void;
}
