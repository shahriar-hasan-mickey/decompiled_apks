record `io.reactivex.internal.operators.flowable.FlowableCache$CacheSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableCache$CacheSubscription.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableCache$CacheSubscription.index` @AccessFlag ;
  `io.reactivex.internal.operators.flowable.FlowableCache$a` `io.reactivex.internal.operators.flowable.FlowableCache$CacheSubscription.node` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableCache$CacheSubscription.offset` @AccessFlag ;
  `io.reactivex.internal.operators.flowable.FlowableCache` `io.reactivex.internal.operators.flowable.FlowableCache$CacheSubscription.parent` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableCache$CacheSubscription.requested` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCache$CacheSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCache$CacheSubscription` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.internal.operators.flowable.FlowableCache` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheSubscription;.<init>:(Ln/b/c;Lio/reactivex/internal/operators/flowable/FlowableCache;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24de74.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L24de7a.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$CacheSubscription.downstream` @type ^`n.b.c` := v1 @kind object;
  #L24de7e.  v1:= 0I;
  #L24de80.  throw v1;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCache$CacheSubscription` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24de94.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableCache$CacheSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L24de98.  v1:= -9223372036854775808L;
  #L24de9c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L24dea2.  v3:= temp @kind wide;
  #L24dea4.  v0:= lcmp(v3, v1);
  #L24dea8.  if v0 != 0 then goto L24deae;
  #L24deac.  return @kind void;
  #L24deae.  v0:= 0I;
  #L24deb0.  throw v0;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableCache$CacheSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$CacheSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24dec4.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L24deca.  v0:= temp;
  #L24decc.  if v0 != 0 then goto L24ded2;
  #L24ded0.  return @kind void;
  #L24ded2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCache$CacheSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L24ded6.  call temp:= `b`(v0, v2) @signature `Lio/reactivex/internal/util/b;.b:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L24dedc.  v2:= 0I;
  #L24dede.  throw v2;
}
