record `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe` v0 @kind this, `io.reactivex.e` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe;.<init>:(Lio/reactivex/e;Lio/reactivex/d0/k;ZI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L254104.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/e;)V` @kind direct;
  #L25410a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe.d` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L25410e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe.e` @type ^`boolean` := v3 @kind boolean;
  #L254112.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe.f` @type ^`int` := v4;
  #L254116.  return @kind void;
}
procedure `void` `H`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe` v5 @kind this, `n.b.c` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe;.H:(Ln/b/c;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L254128.  v0:= v5.`io.reactivex.internal.operators.flowable.a.c` @type ^`io.reactivex.e` @kind object;
  #L25412c.  v1:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber`;
  #L254130.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe.d` @type ^`io.reactivex.d0.k` @kind object;
  #L254134.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe.e` @type ^`boolean` @kind boolean;
  #L254138.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe.f` @type ^`int`;
  #L25413c.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$FlatMapMaybeSubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/k;ZI)V` @kind direct;
  #L254142.  call `G`(v0, v1) @signature `Lio/reactivex/e;.G:(Lio/reactivex/h;)V` @kind virtual;
  #L254148.  return @kind void;
}
