record `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface, `java.lang.Runnable` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.period` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.x` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.scheduler` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.timer` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.unit` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v1 @kind this, `n.b.c` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.x` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.<init>:(Ln/b/c;JLjava/util/concurrent/TimeUnit;Lio/reactivex/x;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L25db30.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25db36.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L25db3a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25db40.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L25db44.  v0:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L25db48.  call `<init>`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L25db4e.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.timer` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v0 @kind object;
  #L25db52.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.downstream` @type ^`n.b.c` := v2 @kind object;
  #L25db56.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.period` @type ^`long` := v3 @kind wide;
  #L25db5a.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L25db5e.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.scheduler` @type ^`io.reactivex.x` := v6 @kind object;
  #L25db62.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25db74.  call `cancelTimer`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.cancelTimer:()V` @kind virtual;
  #L25db7a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25db7e.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25db84.  return @kind void;
}
procedure `void` `cancelTimer`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.cancelTimer:()V` @AccessFlag  {
    temp;
    v0;

  #L25db98.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.timer` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L25db9c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25dba2.  return @kind void;
}
procedure `void` `complete`() @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.complete:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `emit`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.emit:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L25dbb4.  v0:= 0I;
  #L25dbb6.  call temp:= `getAndSet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25dbbc.  v0:= temp @kind object;
  #L25dbbe.  if v0 == 0 then goto L25dc12;
  #L25dbc2.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25dbc6.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25dbcc.  v1:= temp @kind wide;
  #L25dbce.  v3:= 0L;
  #L25dbd2.  v5:= lcmp(v1, v3);
  #L25dbd6.  if v5 == 0 then goto L25dbf4;
  #L25dbda.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25dbde.  call `onNext`(v1, v0) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25dbe4.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25dbe8.  v1:= 1L;
  #L25dbec.  call temp:= `e`(v0, v1) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25dbf2.  goto L25dc12;
  #L25dbf4.  call `cancel`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.cancel:()V` @kind virtual;
  #L25dbfa.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25dbfe.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L25dc02.  v2:= "Couldn't emit value due to lack of requests!" @kind object;
  #L25dc06.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25dc0c.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25dc12.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L25dc24.  call `cancelTimer`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.cancelTimer:()V` @kind virtual;
  #L25dc2a.  call `complete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.complete:()V` @kind virtual;
  #L25dc30.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25dc44.  call `cancelTimer`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.cancelTimer:()V` @kind virtual;
  #L25dc4a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25dc4e.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25dc54.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L25dc68.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L25dc6e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v8 @kind this, `n.b.d` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L25dc80.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25dc84.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25dc8a.  v0:= temp;
  #L25dc8c.  if v0 == 0 then goto L25dcd0;
  #L25dc90.  v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.upstream` @type ^`n.b.d` := v9 @kind object;
  #L25dc94.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25dc98.  call `onSubscribe`(v0, v8) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25dc9e.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.timer` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L25dca2.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.scheduler` @type ^`io.reactivex.x` @kind object;
  #L25dca6.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.period` @type ^`long` @kind wide;
  #L25dcaa.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L25dcae.  v2:= v8 @kind object;
  #L25dcb0.  v3:= v5 @kind wide;
  #L25dcb2.  call temp:= `e`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/x;.e:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/b;` @kind virtual;
  #L25dcb8.  v1:= temp @kind object;
  #L25dcba.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L25dcc0.  v0:= 9223372036854775807L;
  #L25dcca.  call `request`(v9, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25dcd0.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$SampleTimedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25dce4.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25dcea.  v0:= temp;
  #L25dcec.  if v0 == 0 then goto L25dcfa;
  #L25dcf0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25dcf4.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25dcfa.  return @kind void;
}
