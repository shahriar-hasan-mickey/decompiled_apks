record `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.done` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.fusionMode` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.index` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.parent` @AccessFlag FINAL;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.queue` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapSubscriber;JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25f50c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25f512.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber` := v1 @kind object;
  #L25f516.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.index` @type ^`long` := v2 @kind wide;
  #L25f51a.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.bufferSize` @type ^`int` := v4;
  #L25f51e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapInnerSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L25f530.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25f536.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapInnerSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L25f548.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber` @kind object;
  #L25f54c.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.index` @type ^`long` @kind wide;
  #L25f550.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber.unique` @type ^`long` @kind wide;
  #L25f554.  v5:= lcmp(v1, v3);
  #L25f558.  if v5 != 0 then goto L25f568;
  #L25f55c.  v1:= 1I;
  #L25f55e.  v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.done` @type ^`boolean` := v1 @kind boolean;
  #L25f562.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapSubscriber;.drain:()V` @kind virtual;
  #L25f568.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapInnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L25f57c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber` @kind object;
  #L25f580.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.index` @type ^`long` @kind wide;
  #L25f584.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber.unique` @type ^`long` @kind wide;
  #L25f588.  v5:= lcmp(v1, v3);
  #L25f58c.  if v5 != 0 then goto L25f5c0;
  #L25f590.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25f594.  call temp:= `addThrowable`(v1, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L25f59a.  v1:= temp;
  #L25f59c.  if v1 == 0 then goto L25f5c0;
  #L25f5a0.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L25f5a4.  if v7 != 0 then goto L25f5b2;
  #L25f5a8.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L25f5ac.  call `cancel`(v7) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25f5b2.  v7:= 1I;
  #L25f5b4.  v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.done` @type ^`boolean` := v7 @kind boolean;
  #L25f5b8.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapSubscriber;.drain:()V` @kind virtual;
  #L25f5be.  goto L25f5c6;
  #L25f5c0.  call `t`(v7) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L25f5c6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapInnerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L25f5d8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber` @kind object;
  #L25f5dc.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.index` @type ^`long` @kind wide;
  #L25f5e0.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber.unique` @type ^`long` @kind wide;
  #L25f5e4.  v5:= lcmp(v1, v3);
  #L25f5e8.  if v5 != 0 then goto L25f620;
  #L25f5ec.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.fusionMode` @type ^`int`;
  #L25f5f0.  if v1 != 0 then goto L25f61a;
  #L25f5f4.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L25f5f8.  call temp:= `offer`(v1, v7) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L25f5fe.  v7:= temp;
  #L25f600.  if v7 != 0 then goto L25f61a;
  #L25f604.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L25f608.  v0:= "Queue full?!" @kind object;
  #L25f60c.  call `<init>`(v7, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25f612.  call `onError`(v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapInnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L25f618.  return @kind void;
  #L25f61a.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapSubscriber;.drain:()V` @kind virtual;
  #L25f620.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber` v3 @kind this, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapInnerSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L25f634.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L25f63a.  v0:= temp;
  #L25f63c.  if v0 == 0 then goto L25f6b0;
  #L25f640.  v0:= instanceof @variable v4 @type ^`io.reactivex.e0.a.g` @kind boolean;
  #L25f644.  if v0 == 0 then goto L25f692;
  #L25f648.  v0:= v4 @kind object;
  #L25f64a.  v0:= (`io.reactivex.e0.a.g`) v0 @kind object;
  #L25f64e.  v1:= 7I;
  #L25f650.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L25f656.  v1:= temp;
  #L25f658.  v2:= 1I;
  #L25f65a.  if v1 != v2 then goto L25f676;
  #L25f65e.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.fusionMode` @type ^`int` := v1;
  #L25f662.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L25f666.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L25f66a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber` @kind object;
  #L25f66e.  call `drain`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$SwitchMapSubscriber;.drain:()V` @kind virtual;
  #L25f674.  return @kind void;
  #L25f676.  v2:= 2I;
  #L25f678.  if v1 != v2 then goto L25f692;
  #L25f67c.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.fusionMode` @type ^`int` := v1;
  #L25f680.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L25f684.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.bufferSize` @type ^`int`;
  #L25f688.  v0:= (`long`) v0 @kind i2l;
  #L25f68a.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25f690.  return @kind void;
  #L25f692.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L25f696.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.bufferSize` @type ^`int`;
  #L25f69a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L25f6a0.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L25f6a4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber.bufferSize` @type ^`int`;
  #L25f6a8.  v0:= (`long`) v0 @kind i2l;
  #L25f6aa.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25f6b0.  return @kind void;
}
