record `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.delayErrors` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.disposed` @AccessFlag VOLATILE;
  `io.reactivex.b` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.errors` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.mapper` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.maxConcurrency` @AccessFlag FINAL;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.set` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber` v0 @kind this, `io.reactivex.b` v1 @kind object, `io.reactivex.d0.k` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber;.<init>:(Lio/reactivex/b;Lio/reactivex/d0/k;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25363c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L253642.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`io.reactivex.b` := v1 @kind object;
  #L253646.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L25364a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.delayErrors` @type ^`boolean` := v3 @kind boolean;
  #L25364e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L253652.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L253658.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L25365c.  v1:= new `io.reactivex.disposables.a`;
  #L253660.  call `<init>`(v1) @signature `Lio/reactivex/disposables/a;.<init>:()V` @kind direct;
  #L253666.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.set` @type ^`io.reactivex.disposables.a` := v1 @kind object;
  #L25366a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.maxConcurrency` @type ^`int` := v4;
  #L25366e.  v1:= 1I;
  #L253670.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L253676.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L253688.  v0:= 1I;
  #L25368a.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.disposed` @type ^`boolean` := v0 @kind boolean;
  #L25368e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L253692.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L253698.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L25369c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L2536a2.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber$InnerObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber;.innerComplete:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber$InnerObserver;)V` @AccessFlag  {
    temp;
    v0;

  #L2536b4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L2536b8.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2536be.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber;.onComplete:()V` @kind virtual;
  #L2536c4.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber$InnerObserver` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber;.innerError:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber$InnerObserver;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L2536d8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L2536dc.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2536e2.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2536e8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25361c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L253620.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/a;.isDisposed:()Z` @kind virtual;
  #L253626.  v0:= temp;
  #L253628.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2536fc.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L253702.  v0:= temp;
  #L253704.  if v0 != 0 then goto L253730;
  #L253708.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L25370c.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L253712.  v0:= temp @kind object;
  #L253714.  if v0 == 0 then goto L253724;
  #L253718.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L25371c.  call `onError`(v1, v0) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L253722.  goto L25374c;
  #L253724.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L253728.  call `onComplete`(v0) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L25372e.  goto L25374c;
  #L253730.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.maxConcurrency` @type ^`int`;
  #L253734.  v1:= 2147483647I;
  #L25373a.  if v0 == v1 then goto L25374c;
  #L25373e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L253742.  v1:= 1L;
  #L253746.  call `request`(v0, v1) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25374c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L253760.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L253764.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L25376a.  v0:= temp;
  #L25376c.  if v0 == 0 then goto L2537e6;
  #L253770.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.delayErrors` @type ^`boolean` @kind boolean;
  #L253774.  if v3 == 0 then goto L2537ba;
  #L253778.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L25377e.  v3:= temp;
  #L253780.  if v3 != 0 then goto L25379c;
  #L253784.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L253788.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L25378e.  v3:= temp @kind object;
  #L253790.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L253794.  call `onError`(v0, v3) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25379a.  goto L2537ec;
  #L25379c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.maxConcurrency` @type ^`int`;
  #L2537a0.  v0:= 2147483647I;
  #L2537a6.  if v3 == v0 then goto L2537ec;
  #L2537aa.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2537ae.  v0:= 1L;
  #L2537b2.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2537b8.  goto L2537ec;
  #L2537ba.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber;.dispose:()V` @kind virtual;
  #L2537c0.  v3:= 0I;
  #L2537c2.  call temp:= `getAndSet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L2537c8.  v3:= temp;
  #L2537ca.  if v3 <= 0 then goto L2537ec;
  #L2537ce.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2537d2.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2537d8.  v3:= temp @kind object;
  #L2537da.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L2537de.  call `onError`(v0, v3) @signature `Lio/reactivex/b;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2537e4.  goto L2537ec;
  #L2537e6.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2537ec.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L253800.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L253804.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L25380a.  v3:= temp @kind object;
  #L25380c.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L253810.  call temp:= `e`(v3, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L253816.  v3:= temp @kind object;
  #L253818.  v3:= (`io.reactivex.c`) v3 @kind object;
  #L25381c.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L253822.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber$InnerObserver`;
  #L253826.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber$InnerObserver;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber;)V` @kind direct;
  #L25382c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.disposed` @type ^`boolean` @kind boolean;
  #L253830.  if v1 != 0 then goto L25384a;
  #L253834.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.set` @type ^`io.reactivex.disposables.a` @kind object;
  #L253838.  call temp:= `b`(v1, v0) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L25383e.  v1:= temp;
  #L253840.  if v1 == 0 then goto L25384a;
  #L253844.  call `b`(v3, v0) @signature `Lio/reactivex/c;.b:(Lio/reactivex/b;)V` @kind interface;
  #L25384a.  return @kind void;
  #L25384c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25384e.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L253854.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L253858.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25385e.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L253864.  return @kind void;
  catch `java.lang.Throwable` @[L253800..L25381c] goto L25384c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L253884.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L253888.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L25388e.  v0:= temp;
  #L253890.  if v0 == 0 then goto L2538ca;
  #L253894.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L253898.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.downstream` @type ^`io.reactivex.b` @kind object;
  #L25389c.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/b;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L2538a2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber.maxConcurrency` @type ^`int`;
  #L2538a6.  v1:= 2147483647I;
  #L2538ac.  if v0 != v1 then goto L2538c2;
  #L2538b0.  v0:= 9223372036854775807L;
  #L2538ba.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2538c0.  goto L2538ca;
  #L2538c2.  v0:= (`long`) v0 @kind i2l;
  #L2538c4.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2538ca.  return @kind void;
}
