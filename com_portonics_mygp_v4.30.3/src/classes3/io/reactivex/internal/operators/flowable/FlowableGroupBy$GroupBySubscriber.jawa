record `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.h` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.bufferSize` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.cancelled` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.done` @AccessFlag ;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.error` @AccessFlag ;
  `java.util.Queue` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.evictedGroups` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.finished` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groupCount` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.keySelector` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.outputFused` @AccessFlag ;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.requested` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @AccessFlag ;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.valueSelector` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.NULL_KEY` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L255e18.  v0:= new `java.lang.Object`;
  #L255e1c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L255e22.  `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.NULL_KEY` @type ^`java.lang.Object` := v0 @kind object;
  #L255e26.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `n.b.c` v3 @kind object, `io.reactivex.d0.k` v4 @kind object, `io.reactivex.d0.k` v5 @kind object, `int` v6 , `boolean` v7 , `java.util.Map` v8 @kind object, `java.util.Queue` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.<init>:(Ln/b/c;Lio/reactivex/d0/k;Lio/reactivex/d0/k;IZLjava/util/Map;Ljava/util/Queue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L255e38.  call `<init>`(v2) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L255e3e.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L255e42.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L255e48.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L255e4c.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L255e50.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L255e56.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L255e5a.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L255e5e.  v1:= 1I;
  #L255e60.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L255e66.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groupCount` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L255e6a.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.downstream` @type ^`n.b.c` := v3 @kind object;
  #L255e6e.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.keySelector` @type ^`io.reactivex.d0.k` := v4 @kind object;
  #L255e72.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.valueSelector` @type ^`io.reactivex.d0.k` := v5 @kind object;
  #L255e76.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.bufferSize` @type ^`int` := v6;
  #L255e7a.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.delayError` @type ^`boolean` := v7 @kind boolean;
  #L255e7e.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` := v8 @kind object;
  #L255e82.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.evictedGroups` @type ^`java.util.Queue` := v9 @kind object;
  #L255e86.  v3:= new `io.reactivex.internal.queue.a`;
  #L255e8a.  call `<init>`(v3, v6) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L255e90.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @type ^`io.reactivex.internal.queue.a` := v3 @kind object;
  #L255e94.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L255f64.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.evictedGroups` @type ^`java.util.Queue` @kind object;
  #L255f68.  if v0 == 0 then goto L255f9e;
  #L255f6c.  v0:= 0I;
  #L255f6e.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.evictedGroups` @type ^`java.util.Queue` @kind object;
  #L255f72.  call temp:= `poll`(v1) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L255f78.  v1:= temp @kind object;
  #L255f7a.  v1:= (`io.reactivex.internal.operators.flowable.p`) v1 @kind object;
  #L255f7e.  if v1 == 0 then goto L255f8e;
  #L255f82.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/p;.onComplete:()V` @kind virtual;
  #L255f88.  v0:= v0 + 1;
  #L255f8c.  goto L255f6e;
  #L255f8e.  if v0 == 0 then goto L255f9e;
  #L255f92.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groupCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L255f96.  v0:= -v0 @kind int;
  #L255f98.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L255f9e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L255ea8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L255eac.  v1:= 0I;
  #L255eae.  v2:= 1I;
  #L255eb0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L255eb6.  v0:= temp;
  #L255eb8.  if v0 == 0 then goto L255edc;
  #L255ebc.  call `a`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.a:()V` @kind direct;
  #L255ec2.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groupCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L255ec6.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L255ecc.  v0:= temp;
  #L255ece.  if v0 != 0 then goto L255edc;
  #L255ed2.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`n.b.d` @kind object;
  #L255ed6.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L255edc.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L255ef0.  if v2 == 0 then goto L255ef6;
  #L255ef4.  goto L255efa;
  #L255ef6.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.NULL_KEY` @type ^`java.lang.Object` @kind object;
  #L255efa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L255efe.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L255f04.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groupCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L255f08.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L255f0e.  v2:= temp;
  #L255f10.  if v2 != 0 then goto L255f34;
  #L255f14.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`n.b.d` @kind object;
  #L255f18.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L255f1e.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L255f24.  v2:= temp;
  #L255f26.  if v2 != 0 then goto L255f34;
  #L255f2a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L255f2e.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L255f34.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `boolean` v3 , `boolean` v4 , `n.b.c` v5 @kind object, `io.reactivex.internal.queue.a` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.checkTerminated:(ZZLn/b/c;Lio/reactivex/internal/queue/a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L255d18.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L255d1c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L255d22.  v0:= temp;
  #L255d24.  v1:= 1I;
  #L255d26.  if v0 == 0 then goto L255d32;
  #L255d2a.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L255d30.  return v1;
  #L255d32.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.delayError` @type ^`boolean` @kind boolean;
  #L255d36.  if v0 == 0 then goto L255d5a;
  #L255d3a.  if v3 == 0 then goto L255d80;
  #L255d3e.  if v4 == 0 then goto L255d80;
  #L255d42.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L255d46.  if v3 == 0 then goto L255d52;
  #L255d4a.  call `onError`(v5, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L255d50.  goto L255d58;
  #L255d52.  call `onComplete`(v5) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L255d58.  return v1;
  #L255d5a.  if v3 == 0 then goto L255d80;
  #L255d5e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L255d62.  if v3 == 0 then goto L255d74;
  #L255d66.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L255d6c.  call `onError`(v5, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L255d72.  return v1;
  #L255d74.  if v4 == 0 then goto L255d80;
  #L255d78.  call `onComplete`(v5) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L255d7e.  return v1;
  #L255d80.  v3:= 0I;
  #L255d82.  return v3;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L255f48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L255f4c.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L255f52.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L255fb0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L255fb6.  v0:= temp;
  #L255fb8.  if v0 == 0 then goto L255fbe;
  #L255fbc.  return @kind void;
  #L255fbe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.outputFused` @type ^`boolean` @kind boolean;
  #L255fc2.  if v0 == 0 then goto L255fce;
  #L255fc6.  call `drainFused`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drainFused:()V` @kind virtual;
  #L255fcc.  goto L255fd4;
  #L255fce.  call `drainNormal`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drainNormal:()V` @kind virtual;
  #L255fd4.  return @kind void;
}
procedure `void` `drainFused`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drainFused:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L255fe8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L255fec.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L255ff0.  v2:= 1I;
  #L255ff2.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L255ff6.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L255ffc.  v3:= temp;
  #L255ffe.  if v3 == 0 then goto L25600a;
  #L256002.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L256008.  return @kind void;
  #L25600a.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.finished` @type ^`boolean` @kind boolean;
  #L25600e.  if v3 == 0 then goto L256030;
  #L256012.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.delayError` @type ^`boolean` @kind boolean;
  #L256016.  if v4 != 0 then goto L256030;
  #L25601a.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L25601e.  if v4 == 0 then goto L256030;
  #L256022.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L256028.  call `onError`(v1, v4) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25602e.  return @kind void;
  #L256030.  v4:= 0I;
  #L256032.  call `onNext`(v1, v4) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L256038.  if v3 == 0 then goto L256054;
  #L25603c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L256040.  if v0 == 0 then goto L25604c;
  #L256044.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25604a.  goto L256052;
  #L25604c.  call `onComplete`(v1) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L256052.  return @kind void;
  #L256054.  v2:= -v2 @kind int;
  #L256056.  call temp:= `addAndGet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L25605c.  v2:= temp;
  #L25605e.  if v2 != 0 then goto L255ff2;
  #L256062.  return @kind void;
}
procedure `void` `drainNormal`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drainNormal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L256074.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L256078.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L25607c.  v2:= 1I;
  #L25607e.  v3:= 1I;
  #L256080.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L256084.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25608a.  v4:= temp @kind wide;
  #L25608c.  v6:= 0L;
  #L256090.  v8:= v6 @kind wide;
  #L256092.  v10:= lcmp(v8, v4);
  #L256096.  if v10 == 0 then goto L2560d6;
  #L25609a.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.finished` @type ^`boolean` @kind boolean;
  #L25609e.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L2560a4.  v11:= temp @kind object;
  #L2560a6.  v11:= (`io.reactivex.c0.b`) v11 @kind object;
  #L2560aa.  if v11 != 0 then goto L2560b2;
  #L2560ae.  v12:= 1I;
  #L2560b0.  goto L2560b4;
  #L2560b2.  v12:= 0I;
  #L2560b4.  call temp:= `checkTerminated`(v13, v10, v12, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.checkTerminated:(ZZLn/b/c;Lio/reactivex/internal/queue/a;)Z` @kind virtual;
  #L2560ba.  v10:= temp;
  #L2560bc.  if v10 == 0 then goto L2560c2;
  #L2560c0.  return @kind void;
  #L2560c2.  if v12 == 0 then goto L2560c8;
  #L2560c6.  goto L2560d6;
  #L2560c8.  call `onNext`(v1, v11) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2560ce.  v10:= 1L;
  #L2560d2.  v8:= v8 + v10 @kind long;
  #L2560d4.  goto L256092;
  #L2560d6.  v10:= lcmp(v8, v4);
  #L2560da.  if v10 != 0 then goto L2560f8;
  #L2560de.  v10:= v13.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.finished` @type ^`boolean` @kind boolean;
  #L2560e2.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L2560e8.  v11:= temp;
  #L2560ea.  call temp:= `checkTerminated`(v13, v10, v11, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.checkTerminated:(ZZLn/b/c;Lio/reactivex/internal/queue/a;)Z` @kind virtual;
  #L2560f0.  v10:= temp;
  #L2560f2.  if v10 == 0 then goto L2560f8;
  #L2560f6.  return @kind void;
  #L2560f8.  v10:= lcmp(v8, v6);
  #L2560fc.  if v10 == 0 then goto L256128;
  #L256100.  v6:= 9223372036854775807L;
  #L25610a.  v10:= lcmp(v4, v6);
  #L25610e.  if v10 == 0 then goto L25611e;
  #L256112.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L256116.  v5:= -v8 @kind long;
  #L256118.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L25611e.  v4:= v13.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`n.b.d` @kind object;
  #L256122.  call `request`(v4, v8) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L256128.  v3:= -v3 @kind int;
  #L25612a.  call temp:= `addAndGet`(v13, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L256130.  v3:= temp;
  #L256132.  if v3 != 0 then goto L256080;
  #L256136.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L255d94.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L255d98.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L255d9e.  v0:= temp;
  #L255da0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L256148.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.done` @type ^`boolean` @kind boolean;
  #L25614c.  if v0 != 0 then goto L2561ac;
  #L256150.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L256154.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L25615a.  v0:= temp @kind object;
  #L25615c.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L256162.  v0:= temp @kind object;
  #L256164.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L25616a.  v1:= temp;
  #L25616c.  if v1 == 0 then goto L256184;
  #L256170.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L256176.  v1:= temp @kind object;
  #L256178.  v1:= (`io.reactivex.internal.operators.flowable.p`) v1 @kind object;
  #L25617c.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/p;.onComplete:()V` @kind virtual;
  #L256182.  goto L256164;
  #L256184.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L256188.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L25618e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.evictedGroups` @type ^`java.util.Queue` @kind object;
  #L256192.  if v0 == 0 then goto L25619c;
  #L256196.  call `clear`(v0) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L25619c.  v0:= 1I;
  #L25619e.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L2561a2.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.finished` @type ^`boolean` := v0 @kind boolean;
  #L2561a6.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L2561ac.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2561c0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.done` @type ^`boolean` @kind boolean;
  #L2561c4.  if v0 == 0 then goto L2561d0;
  #L2561c8.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2561ce.  return @kind void;
  #L2561d0.  v0:= 1I;
  #L2561d2.  v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L2561d6.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L2561da.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L2561e0.  v1:= temp @kind object;
  #L2561e2.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2561e8.  v1:= temp @kind object;
  #L2561ea.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2561f0.  v2:= temp;
  #L2561f2.  if v2 == 0 then goto L25620a;
  #L2561f6.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2561fc.  v2:= temp @kind object;
  #L2561fe.  v2:= (`io.reactivex.internal.operators.flowable.p`) v2 @kind object;
  #L256202.  call `onError`(v2, v4) @signature `Lio/reactivex/internal/operators/flowable/p;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L256208.  goto L2561ea;
  #L25620a.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L25620e.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L256214.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.evictedGroups` @type ^`java.util.Queue` @kind object;
  #L256218.  if v1 == 0 then goto L256222;
  #L25621c.  call `clear`(v1) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L256222.  v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.error` @type ^`java.lang.Throwable` := v4 @kind object;
  #L256226.  v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.finished` @type ^`boolean` := v0 @kind boolean;
  #L25622a.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L256230.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L256244.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.done` @type ^`boolean` @kind boolean;
  #L256248.  if v0 == 0 then goto L25624e;
  #L25624c.  return @kind void;
  #L25624e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L256252.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.keySelector` @type ^`io.reactivex.d0.k` @kind object;
  #L256256.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L25625c.  v1:= temp @kind object;
  #L25625e.  v2:= 0I;
  #L256260.  if v1 == 0 then goto L256268;
  #L256264.  v3:= v1 @kind object;
  #L256266.  goto L25626c;
  #L256268.  v3:= `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.NULL_KEY` @type ^`java.lang.Object` @kind object;
  #L25626c.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L256270.  call temp:= `get`(v4, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L256276.  v4:= temp @kind object;
  #L256278.  v4:= (`io.reactivex.internal.operators.flowable.p`) v4 @kind object;
  #L25627c.  if v4 != 0 then goto L2562b8;
  #L256280.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.cancelled` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L256284.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L25628a.  v2:= temp;
  #L25628c.  if v2 == 0 then goto L256292;
  #L256290.  return @kind void;
  #L256292.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.bufferSize` @type ^`int`;
  #L256296.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.delayError` @type ^`boolean` @kind boolean;
  #L25629a.  call temp:= `J`(v1, v2, v5, v4) @signature `Lio/reactivex/internal/operators/flowable/p;.J:(Ljava/lang/Object;ILio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;Z)Lio/reactivex/internal/operators/flowable/p;` @kind static;
  #L2562a0.  v4:= temp @kind object;
  #L2562a2.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groups` @type ^`java.util.Map` @kind object;
  #L2562a6.  call temp:= `put`(v1, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2562ac.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.groupCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L2562b0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2562b6.  v2:= 1I;
  #L2562b8.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.valueSelector` @type ^`io.reactivex.d0.k` @kind object;
  #L2562bc.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2562c2.  v6:= temp @kind object;
  #L2562c4.  v1:= "The valueSelector returned null" @kind object;
  #L2562c8.  call temp:= `e`(v6, v1) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2562ce.  v6:= temp @kind object;
  #L2562d0.  call `onNext`(v4, v6) @signature `Lio/reactivex/internal/operators/flowable/p;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L2562d6.  call `a`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.a:()V` @kind direct;
  #L2562dc.  if v2 == 0 then goto L2562ec;
  #L2562e0.  call temp:= `offer`(v0, v4) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L2562e6.  call `drain`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L2562ec.  return @kind void;
  #L2562ee.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2562f0.  call `b`(v6) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2562f6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2562fa.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L256300.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L256306.  return @kind void;
  #L256308.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25630a.  call `b`(v6) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L256310.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`n.b.d` @kind object;
  #L256314.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L25631a.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L256320.  return @kind void;
  catch `java.lang.Throwable` @[L256252..L25625e] goto L256308;
  catch `java.lang.Throwable` @[L2562b8..L2562d0] goto L2562ee;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25634c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`n.b.d` @kind object;
  #L256350.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L256356.  v0:= temp;
  #L256358.  if v0 == 0 then goto L256376;
  #L25635c.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L256360.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L256364.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L25636a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.bufferSize` @type ^`int`;
  #L25636e.  v0:= (`long`) v0 @kind i2l;
  #L256370.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L256376.  return @kind void;
}
procedure `io.reactivex.c0.b` `poll`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.poll:()Lio/reactivex/c0/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L255dd8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L255ddc.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L255de2.  v0:= temp @kind object;
  #L255de4.  v0:= (`io.reactivex.c0.b`) v0 @kind object;
  #L255de8.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L255dfc.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.poll:()Lio/reactivex/c0/b;` @kind virtual;
  #L255e02.  v0:= temp @kind object;
  #L255e04.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L256388.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25638e.  v0:= temp;
  #L256390.  if v0 == 0 then goto L2563a4;
  #L256394.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L256398.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25639e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L2563a4.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L255db4.  v0:= 2I;
  #L255db6.  v2:= v2 ^& v0 @kind int;
  #L255db8.  if v2 == 0 then goto L255dc4;
  #L255dbc.  v2:= 1I;
  #L255dbe.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L255dc2.  return v0;
  #L255dc4.  v2:= 0I;
  #L255dc6.  return v2;
}
