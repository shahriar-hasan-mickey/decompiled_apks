record `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.index` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24dd64.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L24dd6a.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` := v1 @kind object;
  #L24dd6e.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.index` @type ^`long` := v2 @kind wide;
  #L24dd72.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L24dd84.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24dd8a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24dd3c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24dd42.  v0:= temp @kind object;
  #L24dd44.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L24dd48.  if v0 != v1 then goto L24dd50;
  #L24dd4c.  v0:= 1I;
  #L24dd4e.  goto L24dd52;
  #L24dd50.  v0:= 0I;
  #L24dd52.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24dd9c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24dda2.  v0:= temp @kind object;
  #L24dda4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L24dda8.  if v0 == v1 then goto L24ddc0;
  #L24ddac.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L24ddb2.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` @kind object;
  #L24ddb6.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.index` @type ^`long` @kind wide;
  #L24ddba.  call `close`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.close:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;J)V` @kind virtual;
  #L24ddc0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24ddd4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24ddda.  v0:= temp @kind object;
  #L24dddc.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L24dde0.  if v0 == v1 then goto L24ddf6;
  #L24dde4.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L24ddea.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` @kind object;
  #L24ddee.  call `boundaryError`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.boundaryError:(Lio/reactivex/disposables/b;Ljava/lang/Throwable;)V` @kind virtual;
  #L24ddf4.  goto L24ddfc;
  #L24ddf6.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24ddfc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24de10.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24de16.  v3:= temp @kind object;
  #L24de18.  v3:= (`n.b.d`) v3 @kind object;
  #L24de1c.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L24de20.  if v3 == v0 then goto L24de3e;
  #L24de24.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L24de2a.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L24de30.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` @kind object;
  #L24de34.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber.index` @type ^`long` @kind wide;
  #L24de38.  call `close`(v3, v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.close:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;J)V` @kind virtual;
  #L24de3e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24de50.  v0:= 9223372036854775807L;
  #L24de5a.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;J)Z` @kind static;
  #L24de60.  return @kind void;
}
