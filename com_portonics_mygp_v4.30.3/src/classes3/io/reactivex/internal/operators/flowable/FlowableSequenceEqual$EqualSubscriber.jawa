record `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.done` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.c0` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.parent` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.prefetch` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.produced` @AccessFlag ;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.sourceMode` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` v0 @kind this, `io.reactivex.internal.operators.flowable.c0` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/c0;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25e57c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25e582.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.c0` := v1 @kind object;
  #L25e586.  v1:= v2 ^> 2;
  #L25e58a.  v1:= v2 - v1 @kind int;
  #L25e58e.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.limit` @type ^`int` := v1;
  #L25e592.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.prefetch` @type ^`int` := v2;
  #L25e596.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L25e5a8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L25e5ae.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.clear:()V` @AccessFlag  {
    temp;
    v0;

  #L25e5c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L25e5c4.  if v0 == 0 then goto L25e5ce;
  #L25e5c8.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L25e5ce.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25e5e0.  v0:= 1I;
  #L25e5e2.  v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L25e5e6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.c0` @kind object;
  #L25e5ea.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/c0;.drain:()V` @kind interface;
  #L25e5f0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25e604.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.c0` @kind object;
  #L25e608.  call `innerError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/c0;.innerError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25e60e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25e620.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.sourceMode` @type ^`int`;
  #L25e624.  if v0 != 0 then goto L25e64a;
  #L25e628.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L25e62c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L25e632.  v2:= temp;
  #L25e634.  if v2 != 0 then goto L25e64a;
  #L25e638.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L25e63c.  call `<init>`(v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L25e642.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L25e648.  return @kind void;
  #L25e64a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.c0` @kind object;
  #L25e64e.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/c0;.drain:()V` @kind interface;
  #L25e654.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` v3 @kind this, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L25e668.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L25e66e.  v0:= temp;
  #L25e670.  if v0 == 0 then goto L25e6e4;
  #L25e674.  v0:= instanceof @variable v4 @type ^`io.reactivex.e0.a.g` @kind boolean;
  #L25e678.  if v0 == 0 then goto L25e6c6;
  #L25e67c.  v0:= v4 @kind object;
  #L25e67e.  v0:= (`io.reactivex.e0.a.g`) v0 @kind object;
  #L25e682.  v1:= 3I;
  #L25e684.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L25e68a.  v1:= temp;
  #L25e68c.  v2:= 1I;
  #L25e68e.  if v1 != v2 then goto L25e6aa;
  #L25e692.  v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.sourceMode` @type ^`int` := v1;
  #L25e696.  v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L25e69a.  v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L25e69e.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.parent` @type ^`io.reactivex.internal.operators.flowable.c0` @kind object;
  #L25e6a2.  call `drain`(v4) @signature `Lio/reactivex/internal/operators/flowable/c0;.drain:()V` @kind interface;
  #L25e6a8.  return @kind void;
  #L25e6aa.  v2:= 2I;
  #L25e6ac.  if v1 != v2 then goto L25e6c6;
  #L25e6b0.  v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.sourceMode` @type ^`int` := v1;
  #L25e6b4.  v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L25e6b8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.prefetch` @type ^`int`;
  #L25e6bc.  v0:= (`long`) v0 @kind i2l;
  #L25e6be.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25e6c4.  return @kind void;
  #L25e6c6.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L25e6ca.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.prefetch` @type ^`int`;
  #L25e6ce.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L25e6d4.  v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L25e6d8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.prefetch` @type ^`int`;
  #L25e6dc.  v0:= (`long`) v0 @kind i2l;
  #L25e6de.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25e6e4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$EqualSubscriber;.request:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25e6f8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.sourceMode` @type ^`int`;
  #L25e6fc.  v1:= 1I;
  #L25e6fe.  if v0 == v1 then goto L25e73a;
  #L25e702.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.produced` @type ^`long` @kind wide;
  #L25e706.  v2:= 1L;
  #L25e70a.  v0:= v0 + v2 @kind long;
  #L25e70c.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.limit` @type ^`int`;
  #L25e710.  v2:= (`long`) v2 @kind i2l;
  #L25e712.  v4:= lcmp(v0, v2);
  #L25e716.  if v4 < 0 then goto L25e736;
  #L25e71a.  v2:= 0L;
  #L25e71e.  v5.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L25e722.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25e728.  v2:= temp @kind object;
  #L25e72a.  v2:= (`n.b.d`) v2 @kind object;
  #L25e72e.  call `request`(v2, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L25e734.  goto L25e73a;
  #L25e736.  v5.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L25e73a.  return @kind void;
}
