record `io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.h` @kind interface {
  `io.reactivex.d0.b` `io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.collector` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.done` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.u` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.d0.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$CollectSubscriber;.<init>:(Ln/b/c;Ljava/lang/Object;Lio/reactivex/d0/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24def0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Ln/b/c;)V` @kind direct;
  #L24def6.  v0.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.collector` @type ^`io.reactivex.d0.b` := v3 @kind object;
  #L24defa.  v0.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.u` @type ^`java.lang.Object` := v2 @kind object;
  #L24defe.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$CollectSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24df10.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L24df16.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24df1a.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L24df20.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$CollectSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24df34.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.done` @type ^`boolean` @kind boolean;
  #L24df38.  if v0 == 0 then goto L24df3e;
  #L24df3c.  return @kind void;
  #L24df3e.  v0:= 1I;
  #L24df40.  v1.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L24df44.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.u` @type ^`java.lang.Object` @kind object;
  #L24df48.  call `complete`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L24df4e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$CollectSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24df60.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.done` @type ^`boolean` @kind boolean;
  #L24df64.  if v0 == 0 then goto L24df70;
  #L24df68.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24df6e.  return @kind void;
  #L24df70.  v0:= 1I;
  #L24df72.  v1.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L24df76.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L24df7a.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24df80.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$CollectSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24df94.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.done` @type ^`boolean` @kind boolean;
  #L24df98.  if v0 == 0 then goto L24df9e;
  #L24df9c.  return @kind void;
  #L24df9e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.collector` @type ^`io.reactivex.d0.b` @kind object;
  #L24dfa2.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.u` @type ^`java.lang.Object` @kind object;
  #L24dfa6.  call `accept`(v0, v1, v3) @signature `Lio/reactivex/d0/b;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L24dfac.  goto L24dfc6;
  #L24dfae.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24dfb0.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24dfb6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24dfba.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L24dfc0.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$CollectSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L24dfc6.  return @kind void;
  catch `java.lang.Throwable` @[L24df9e..L24dfac] goto L24dfae;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$CollectSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24dfe4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L24dfe8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L24dfee.  v0:= temp;
  #L24dff0.  if v0 == 0 then goto L24e012;
  #L24dff4.  v2.`io.reactivex.internal.operators.flowable.FlowableCollect$CollectSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L24dff8.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L24dffc.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L24e002.  v0:= 9223372036854775807L;
  #L24e00c.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24e012.  return @kind void;
}
