record `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.z` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver$OtherObserver;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L258a88.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L258a8e.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` := v1 @kind object;
  #L258a92.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver$OtherObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L258aa4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` @kind object;
  #L258aa8.  call `otherError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.otherError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L258aae.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver$OtherObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L258ac0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L258ac6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver$OtherObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L258ad8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver.parent` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver` @kind object;
  #L258adc.  call `otherSuccess`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$MergeWithObserver;.otherSuccess:(Ljava/lang/Object;)V` @kind virtual;
  #L258ae2.  return @kind void;
}
