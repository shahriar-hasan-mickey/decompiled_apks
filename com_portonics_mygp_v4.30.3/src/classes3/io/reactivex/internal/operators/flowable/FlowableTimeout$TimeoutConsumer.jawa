record `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer.idx` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.d0` `io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer` v0 @kind this, `long` v1 , `io.reactivex.internal.operators.flowable.d0` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutConsumer;.<init>:(JLio/reactivex/internal/operators/flowable/d0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L260b7c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L260b82.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer.idx` @type ^`long` := v1 @kind wide;
  #L260b86.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer.parent` @type ^`io.reactivex.internal.operators.flowable.d0` := v3 @kind object;
  #L260b8a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutConsumer;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L260b9c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L260ba2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutConsumer;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L260b54.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L260b5a.  v0:= temp @kind object;
  #L260b5c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L260b60.  if v0 != v1 then goto L260b68;
  #L260b64.  v0:= 1I;
  #L260b66.  goto L260b6a;
  #L260b68.  v0:= 0I;
  #L260b6a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutConsumer;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L260bb4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L260bba.  v0:= temp @kind object;
  #L260bbc.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L260bc0.  if v0 == v1 then goto L260bd8;
  #L260bc4.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L260bca.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer.parent` @type ^`io.reactivex.internal.operators.flowable.d0` @kind object;
  #L260bce.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer.idx` @type ^`long` @kind wide;
  #L260bd2.  call `onTimeout`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/f0;.onTimeout:(J)V` @kind interface;
  #L260bd8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutConsumer;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L260bec.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L260bf2.  v0:= temp @kind object;
  #L260bf4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L260bf8.  if v0 == v1 then goto L260c12;
  #L260bfc.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L260c02.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer.parent` @type ^`io.reactivex.internal.operators.flowable.d0` @kind object;
  #L260c06.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer.idx` @type ^`long` @kind wide;
  #L260c0a.  call `onTimeoutError`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/flowable/d0;.onTimeoutError:(JLjava/lang/Throwable;)V` @kind interface;
  #L260c10.  goto L260c18;
  #L260c12.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L260c18.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutConsumer;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L260c2c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L260c32.  v3:= temp @kind object;
  #L260c34.  v3:= (`n.b.d`) v3 @kind object;
  #L260c38.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L260c3c.  if v3 == v0 then goto L260c5a;
  #L260c40.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L260c46.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L260c4c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer.parent` @type ^`io.reactivex.internal.operators.flowable.d0` @kind object;
  #L260c50.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer.idx` @type ^`long` @kind wide;
  #L260c54.  call `onTimeout`(v3, v0) @signature `Lio/reactivex/internal/operators/flowable/f0;.onTimeout:(J)V` @kind interface;
  #L260c5a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutConsumer` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$TimeoutConsumer;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L260c6c.  v0:= 9223372036854775807L;
  #L260c76.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;J)Z` @kind static;
  #L260c7c.  return @kind void;
}
