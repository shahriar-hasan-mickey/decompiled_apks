record `io.reactivex.internal.operators.flowable.FlowableFromIterable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.e` @kind class {
  `java.lang.Iterable` `io.reactivex.internal.operators.flowable.FlowableFromIterable.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromIterable` v0 @kind this, `java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2558e8.  call `<init>`(v0) @signature `Lio/reactivex/e;.<init>:()V` @kind direct;
  #L2558ee.  v0.`io.reactivex.internal.operators.flowable.FlowableFromIterable.c` @type ^`java.lang.Iterable` := v1 @kind object;
  #L2558f2.  return @kind void;
}
procedure `void` `J`(`n.b.c` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.J:(Ln/b/c;Ljava/util/Iterator;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L255904.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L25590a.  v0:= temp;
  #L25590c.  if v0 != 0 then goto L255918;
  #L255910.  call `complete`(v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Ln/b/c;)V` @kind static;
  #L255916.  return @kind void;
  #L255918.  v0:= instanceof @variable v2 @type ^`io.reactivex.e0.a.a` @kind boolean;
  #L25591c.  if v0 == 0 then goto L255938;
  #L255920.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription`;
  #L255924.  v1:= v2 @kind object;
  #L255926.  v1:= (`io.reactivex.e0.a.a`) v1 @kind object;
  #L25592a.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorConditionalSubscription;.<init>:(Lio/reactivex/e0/a/a;Ljava/util/Iterator;)V` @kind direct;
  #L255930.  call `onSubscribe`(v2, v0) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L255936.  goto L255948;
  #L255938.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorSubscription`;
  #L25593c.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$IteratorSubscription;.<init>:(Ln/b/c;Ljava/util/Iterator;)V` @kind direct;
  #L255942.  call `onSubscribe`(v2, v0) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L255948.  return @kind void;
  #L25594a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25594c.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L255952.  call `error`(v3, v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Ln/b/c;)V` @kind static;
  #L255958.  return @kind void;
  catch `java.lang.Throwable` @[L255904..L25590c] goto L25594a;
}
procedure `void` `H`(`io.reactivex.internal.operators.flowable.FlowableFromIterable` v1 @kind this, `n.b.c` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.H:(Ln/b/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L255978.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromIterable.c` @type ^`java.lang.Iterable` @kind object;
  #L25597c.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L255982.  v0:= temp @kind object;
  #L255984.  call `J`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.J:(Ln/b/c;Ljava/util/Iterator;)V` @kind static;
  #L25598a.  return @kind void;
  #L25598c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25598e.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L255994.  call `error`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Ln/b/c;)V` @kind static;
  #L25599a.  return @kind void;
  catch `java.lang.Throwable` @[L255978..L255984] goto L25598c;
}
