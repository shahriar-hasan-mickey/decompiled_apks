record `io.reactivex.internal.operators.flowable.FlowableCreate$MissingEmitter` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind class {
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$MissingEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$MissingEmitter` v0 @kind this, `n.b.c` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$MissingEmitter;.<init>:(Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2505d8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.<init>:(Ln/b/c;)V` @kind direct;
  #L2505de.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$MissingEmitter` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$MissingEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2505f0.  call temp:= `isCancelled`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L2505f6.  v0:= temp;
  #L2505f8.  if v0 == 0 then goto L2505fe;
  #L2505fc.  return @kind void;
  #L2505fe.  if v5 == 0 then goto L250636;
  #L250602.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.downstream` @type ^`n.b.c` @kind object;
  #L250606.  call `onNext`(v0, v5) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25060c.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L250612.  v0:= temp @kind wide;
  #L250614.  v2:= 0L;
  #L250618.  v5:= lcmp(v0, v2);
  #L25061c.  if v5 == 0 then goto L250634;
  #L250620.  v2:= 1L;
  #L250624.  v2:= v0 - v2 @kind long;
  #L250628.  call temp:= `compareAndSet`(v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L25062e.  v5:= temp;
  #L250630.  if v5 == 0 then goto L25060c;
  #L250634.  return @kind void;
  #L250636.  v5:= new `java.lang.NullPointerException`;
  #L25063a.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L25063e.  call `<init>`(v5, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L250644.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L25064a.  return @kind void;
}
