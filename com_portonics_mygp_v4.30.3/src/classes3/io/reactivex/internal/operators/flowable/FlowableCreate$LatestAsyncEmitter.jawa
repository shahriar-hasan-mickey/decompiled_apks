record `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.error` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v0 @kind this, `n.b.c` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.<init>:(Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2503d0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.<init>:(Ln/b/c;)V` @kind direct;
  #L2503d6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2503da.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2503e0.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.queue` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L2503e4.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L2503e8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L2503ee.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L2503f2.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v15 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L250404.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L250408.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L25040e.  v0:= temp;
  #L250410.  if v0 == 0 then goto L250416;
  #L250414.  return @kind void;
  #L250416.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.downstream` @type ^`n.b.c` @kind object;
  #L25041a.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25041e.  v2:= 1I;
  #L250420.  v3:= 1I;
  #L250422.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L250428.  v4:= temp @kind wide;
  #L25042a.  v6:= 0L;
  #L25042e.  v8:= v6 @kind wide;
  #L250430.  v10:= 0I;
  #L250432.  v11:= 0I;
  #L250434.  v12:= lcmp(v8, v4);
  #L250438.  if v12 == 0 then goto L25049a;
  #L25043c.  call temp:= `isCancelled`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L250442.  v12:= temp;
  #L250444.  if v12 == 0 then goto L250450;
  #L250448.  call `lazySet`(v1, v11) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L25044e.  return @kind void;
  #L250450.  v12:= v15.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L250454.  call temp:= `getAndSet`(v1, v11) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25045a.  v13:= temp @kind object;
  #L25045c.  if v13 != 0 then goto L250464;
  #L250460.  v14:= 1I;
  #L250462.  goto L250466;
  #L250464.  v14:= 0I;
  #L250466.  if v12 == 0 then goto L250486;
  #L25046a.  if v14 == 0 then goto L250486;
  #L25046e.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.error` @type ^`java.lang.Throwable` @kind object;
  #L250472.  if v0 == 0 then goto L25047e;
  #L250476.  call temp:= `error`(v15, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.error:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L25047c.  goto L250484;
  #L25047e.  call `complete`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.complete:()V` @kind virtual;
  #L250484.  return @kind void;
  #L250486.  if v14 == 0 then goto L25048c;
  #L25048a.  goto L25049a;
  #L25048c.  call `onNext`(v0, v13) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L250492.  v10:= 1L;
  #L250496.  v8:= v8 + v10 @kind long;
  #L250498.  goto L250430;
  #L25049a.  v12:= lcmp(v8, v4);
  #L25049e.  if v12 != 0 then goto L2504e8;
  #L2504a2.  call temp:= `isCancelled`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L2504a8.  v4:= temp;
  #L2504aa.  if v4 == 0 then goto L2504b6;
  #L2504ae.  call `lazySet`(v1, v11) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2504b4.  return @kind void;
  #L2504b6.  v4:= v15.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L2504ba.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2504c0.  v5:= temp @kind object;
  #L2504c2.  if v5 != 0 then goto L2504c8;
  #L2504c6.  v10:= 1I;
  #L2504c8.  if v4 == 0 then goto L2504e8;
  #L2504cc.  if v10 == 0 then goto L2504e8;
  #L2504d0.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.error` @type ^`java.lang.Throwable` @kind object;
  #L2504d4.  if v0 == 0 then goto L2504e0;
  #L2504d8.  call temp:= `error`(v15, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.error:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2504de.  goto L2504e6;
  #L2504e0.  call `complete`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.complete:()V` @kind virtual;
  #L2504e6.  return @kind void;
  #L2504e8.  v4:= lcmp(v8, v6);
  #L2504ec.  if v4 == 0 then goto L2504f6;
  #L2504f0.  call temp:= `e`(v15, v8) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L2504f6.  v4:= v15.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L2504fa.  v3:= -v3 @kind int;
  #L2504fc.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L250502.  v3:= temp;
  #L250504.  if v3 != 0 then goto L250422;
  #L250508.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25051c.  v0:= 1I;
  #L25051e.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` := v0 @kind boolean;
  #L250522.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.drain:()V` @kind virtual;
  #L250528.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25053c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L250540.  if v0 != 0 then goto L25057c;
  #L250544.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L25054a.  v0:= temp;
  #L25054c.  if v0 == 0 then goto L250552;
  #L250550.  goto L25057c;
  #L250552.  if v2 != 0 then goto L25056c;
  #L250556.  v2:= new `java.lang.NullPointerException`;
  #L25055a.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L25055e.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L250564.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L25056a.  return @kind void;
  #L25056c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L250570.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L250576.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.drain:()V` @kind virtual;
  #L25057c.  return @kind void;
}
procedure `void` `onRequested`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.onRequested:()V` @AccessFlag  {
    temp;

  #L250590.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.drain:()V` @kind virtual;
  #L250596.  return @kind void;
}
procedure `void` `onUnsubscribed`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.onUnsubscribed:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2505a8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L2505ac.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2505b2.  v0:= temp;
  #L2505b4.  if v0 != 0 then goto L2505c4;
  #L2505b8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.queue` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2505bc.  v1:= 0I;
  #L2505be.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2505c4.  return @kind void;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25037c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` @kind boolean;
  #L250380.  if v0 != 0 then goto L2503bc;
  #L250384.  call temp:= `isCancelled`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L25038a.  v0:= temp;
  #L25038c.  if v0 == 0 then goto L250392;
  #L250390.  goto L2503bc;
  #L250392.  if v3 != 0 then goto L2503aa;
  #L250396.  v0:= new `java.lang.NullPointerException`;
  #L25039a.  v1:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L25039e.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2503a4.  call `onError`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2503aa.  v2.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.error` @type ^`java.lang.Throwable` := v3 @kind object;
  #L2503ae.  v3:= 1I;
  #L2503b0.  v2.`io.reactivex.internal.operators.flowable.FlowableCreate$LatestAsyncEmitter.done` @type ^`boolean` := v3 @kind boolean;
  #L2503b4.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$LatestAsyncEmitter;.drain:()V` @kind virtual;
  #L2503ba.  return v3;
  #L2503bc.  v3:= 0I;
  #L2503be.  return v3;
}
