record `io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` @kind class @AccessFlag  extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.internal.operators.flowable.y` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.index` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @AccessFlag ;
  `io.reactivex.internal.operators.flowable.FlowableReplay$Node` `io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.tail` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25c480.  call `<init>`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L25c486.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$Node`;
  #L25c48a.  v1:= 0I;
  #L25c48c.  v2:= 0L;
  #L25c490.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L25c496.  v4.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$Node` := v0 @kind object;
  #L25c49a.  call `set`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L25c4a0.  return @kind void;
}
procedure `void` `addLast`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$Node` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.addLast:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @AccessFlag FINAL {
    temp;
    v0;

  #L25c4b4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$Node` @kind object;
  #L25c4b8.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L25c4be.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$Node` := v2 @kind object;
  #L25c4c2.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L25c4c6.  v2:= v2 + 1;
  #L25c4ca.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int` := v2;
  #L25c4ce.  return @kind void;
}
procedure `void` `collect`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.collect:(Ljava/util/Collection;)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L25c4e0.  call temp:= `getHead`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.getHead:()Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;` @kind virtual;
  #L25c4e6.  v0:= temp @kind object;
  #L25c4e8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25c4ee.  v0:= temp @kind object;
  #L25c4f0.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v0 @kind object;
  #L25c4f4.  if v0 == 0 then goto L25c52e;
  #L25c4f8.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L25c4fc.  call temp:= `leaveTransform`(v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25c502.  v1:= temp @kind object;
  #L25c504.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L25c50a.  v2:= temp;
  #L25c50c.  if v2 != 0 then goto L25c52e;
  #L25c510.  call temp:= `isError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L25c516.  v2:= temp;
  #L25c518.  if v2 == 0 then goto L25c51e;
  #L25c51c.  goto L25c52e;
  #L25c51e.  call temp:= `getValue`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L25c524.  v1:= temp @kind object;
  #L25c526.  call temp:= `add`(v4, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L25c52c.  goto L25c4e8;
  #L25c52e.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L25c540.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L25c546.  v0:= temp @kind object;
  #L25c548.  call temp:= `enterTransform`(v6, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25c54e.  v0:= temp @kind object;
  #L25c550.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$Node`;
  #L25c554.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.index` @type ^`long` @kind wide;
  #L25c558.  v4:= 1L;
  #L25c55c.  v2:= v2 + v4 @kind long;
  #L25c55e.  v6.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.index` @type ^`long` := v2 @kind wide;
  #L25c562.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L25c568.  call `addLast`(v6, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.addLast:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @kind virtual;
  #L25c56e.  call `truncateFinal`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.truncateFinal:()V` @kind virtual;
  #L25c574.  return @kind void;
}
procedure `java.lang.Object` `enterTransform`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L25c458.  return v1 @kind object;
}
procedure `void` `error`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25c588.  call temp:= `error`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L25c58e.  v6:= temp @kind object;
  #L25c590.  call temp:= `enterTransform`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25c596.  v6:= temp @kind object;
  #L25c598.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$Node`;
  #L25c59c.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.index` @type ^`long` @kind wide;
  #L25c5a0.  v3:= 1L;
  #L25c5a4.  v1:= v1 + v3 @kind long;
  #L25c5a6.  v5.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.index` @type ^`long` := v1 @kind wide;
  #L25c5aa.  call `<init>`(v0, v6, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L25c5b0.  call `addLast`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.addLast:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @kind virtual;
  #L25c5b6.  call `truncateFinal`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.truncateFinal:()V` @kind virtual;
  #L25c5bc.  return @kind void;
}
procedure `io.reactivex.internal.operators.flowable.FlowableReplay$Node` `getHead`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.getHead:()Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;` @AccessFlag  {
    temp;
    v0;

  #L25c438.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25c43e.  v0:= temp @kind object;
  #L25c440.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v0 @kind object;
  #L25c444.  return v0 @kind object;
}
procedure `boolean` `hasCompleted`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.hasCompleted:()Z` @AccessFlag  {
    temp;
    v0;

  #L25c3c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$Node` @kind object;
  #L25c3cc.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L25c3d0.  if v0 == 0 then goto L25c3ec;
  #L25c3d4.  call temp:= `leaveTransform`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25c3da.  v0:= temp @kind object;
  #L25c3dc.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L25c3e2.  v0:= temp;
  #L25c3e4.  if v0 == 0 then goto L25c3ec;
  #L25c3e8.  v0:= 1I;
  #L25c3ea.  goto L25c3ee;
  #L25c3ec.  v0:= 0I;
  #L25c3ee.  return v0;
}
procedure `boolean` `hasError`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.hasError:()Z` @AccessFlag  {
    temp;
    v0;

  #L25c400.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.tail` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$Node` @kind object;
  #L25c404.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L25c408.  if v0 == 0 then goto L25c424;
  #L25c40c.  call temp:= `leaveTransform`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25c412.  v0:= temp @kind object;
  #L25c414.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L25c41a.  v0:= temp;
  #L25c41c.  if v0 == 0 then goto L25c424;
  #L25c420.  v0:= 1I;
  #L25c422.  goto L25c426;
  #L25c424.  v0:= 0I;
  #L25c426.  return v0;
}
procedure `java.lang.Object` `leaveTransform`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L25c46c.  return v1 @kind object;
}
procedure `void` `next`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.next:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25c5d0.  call temp:= `next`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L25c5d6.  v6:= temp @kind object;
  #L25c5d8.  call temp:= `enterTransform`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.enterTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25c5de.  v6:= temp @kind object;
  #L25c5e0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$Node`;
  #L25c5e4.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.index` @type ^`long` @kind wide;
  #L25c5e8.  v3:= 1L;
  #L25c5ec.  v1:= v1 + v3 @kind long;
  #L25c5ee.  v5.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.index` @type ^`long` := v1 @kind wide;
  #L25c5f2.  call `<init>`(v0, v6, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L25c5f8.  call `addLast`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.addLast:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @kind virtual;
  #L25c5fe.  call `truncate`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.truncate:()V` @kind virtual;
  #L25c604.  return @kind void;
}
procedure `void` `removeFirst`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.removeFirst:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L25c618.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25c61e.  v0:= temp @kind object;
  #L25c620.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v0 @kind object;
  #L25c624.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25c62a.  v0:= temp @kind object;
  #L25c62c.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v0 @kind object;
  #L25c630.  if v0 == 0 then goto L25c648;
  #L25c634.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L25c638.  v1:= v1 + -1;
  #L25c63c.  v2.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int` := v1;
  #L25c640.  call `setFirst`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @kind virtual;
  #L25c646.  return @kind void;
  #L25c648.  v0:= new `java.lang.IllegalStateException`;
  #L25c64c.  v1:= "Empty list!" @kind object;
  #L25c650.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25c656.  throw v0;
}
procedure `void` `removeSome`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.removeSome:(I)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L25c668.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25c66e.  v0:= temp @kind object;
  #L25c670.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v0 @kind object;
  #L25c674.  if v3 <= 0 then goto L25c696;
  #L25c678.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25c67e.  v0:= temp @kind object;
  #L25c680.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v0 @kind object;
  #L25c684.  v3:= v3 + -1;
  #L25c688.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int`;
  #L25c68c.  v1:= v1 + -1;
  #L25c690.  v2.`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer.size` @type ^`int` := v1;
  #L25c694.  goto L25c674;
  #L25c696.  call `setFirst`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @kind virtual;
  #L25c69c.  return @kind void;
}
procedure `void` `replay`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v14 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription` v15 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.replay:(Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L25c6b0.  @monitorenter v15
  #L25c6b2.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.emitting` @type ^`boolean` @kind boolean;
  #L25c6b6.  v1:= 1I;
  #L25c6b8.  if v0 == 0 then goto L25c6c4;
  #L25c6bc.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.missed` @type ^`boolean` := v1 @kind boolean;
  #L25c6c0.  @monitorexit v15
  #L25c6c2.  return @kind void;
  #L25c6c4.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.emitting` @type ^`boolean` := v1 @kind boolean;
  #L25c6c8.  @monitorexit v15
  #L25c6ca.  call temp:= `isDisposed`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.isDisposed:()Z` @kind virtual;
  #L25c6d0.  v0:= temp;
  #L25c6d2.  v2:= 0I;
  #L25c6d4.  if v0 == 0 then goto L25c6de;
  #L25c6d8.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @type ^`java.lang.Object` := v2 @kind object;
  #L25c6dc.  return @kind void;
  #L25c6de.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25c6e4.  v3:= temp @kind wide;
  #L25c6e6.  v5:= 9223372036854775807L;
  #L25c6f0.  v0:= 0I;
  #L25c6f2.  v7:= lcmp(v3, v5);
  #L25c6f6.  if v7 != 0 then goto L25c6fe;
  #L25c6fa.  v5:= 1I;
  #L25c6fc.  goto L25c700;
  #L25c6fe.  v5:= 0I;
  #L25c700.  call temp:= `index`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.index:()Ljava/lang/Object;` @kind virtual;
  #L25c706.  v6:= temp @kind object;
  #L25c708.  v6:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v6 @kind object;
  #L25c70c.  v7:= 0L;
  #L25c710.  if v6 != 0 then goto L25c72e;
  #L25c714.  call temp:= `getHead`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.getHead:()Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;` @kind virtual;
  #L25c71a.  v6:= temp @kind object;
  #L25c71c.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @type ^`java.lang.Object` := v6 @kind object;
  #L25c720.  v9:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.totalRequested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L25c724.  v10:= v6.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.index` @type ^`long` @kind wide;
  #L25c728.  call temp:= `a`(v9, v10) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25c72e.  v9:= v7 @kind wide;
  #L25c730.  v11:= lcmp(v3, v7);
  #L25c734.  if v11 == 0 then goto L25c7be;
  #L25c738.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25c73e.  v11:= temp @kind object;
  #L25c740.  v11:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v11 @kind object;
  #L25c744.  if v11 == 0 then goto L25c7be;
  #L25c748.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L25c74c.  call temp:= `leaveTransform`(v14, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.leaveTransform:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L25c752.  v6:= temp @kind object;
  #L25c754.  v12:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.child` @type ^`n.b.c` @kind object;
  #L25c758.  call temp:= `accept`(v6, v12) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Ln/b/c;)Z` @kind static;
  #L25c75e.  v12:= temp;
  #L25c760.  if v12 == 0 then goto L25c76a;
  #L25c764.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @type ^`java.lang.Object` := v2 @kind object;
  #L25c768.  return @kind void;
  #L25c76a.  v12:= 1L;
  #L25c76e.  v9:= v9 + v12 @kind long;
  #L25c770.  v3:= v3 - v12 @kind long;
  #L25c772.  call temp:= `isDisposed`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.isDisposed:()Z` @kind virtual;
  #L25c778.  v6:= temp;
  #L25c77a.  if v6 == 0 then goto L25c784;
  #L25c77e.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @type ^`java.lang.Object` := v2 @kind object;
  #L25c782.  return @kind void;
  #L25c784.  v6:= v11 @kind object;
  #L25c786.  goto L25c730;
  #L25c788.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25c78a.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L25c790.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @type ^`java.lang.Object` := v2 @kind object;
  #L25c794.  call `dispose`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.dispose:()V` @kind virtual;
  #L25c79a.  call temp:= `isError`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L25c7a0.  v1:= temp;
  #L25c7a2.  if v1 != 0 then goto L25c7bc;
  #L25c7a6.  call temp:= `isComplete`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L25c7ac.  v1:= temp;
  #L25c7ae.  if v1 != 0 then goto L25c7bc;
  #L25c7b2.  v15:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.child` @type ^`n.b.c` @kind object;
  #L25c7b6.  call `onError`(v15, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L25c7bc.  return @kind void;
  #L25c7be.  v2:= lcmp(v9, v7);
  #L25c7c2.  if v2 == 0 then goto L25c7d4;
  #L25c7c6.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.index` @type ^`java.lang.Object` := v6 @kind object;
  #L25c7ca.  if v5 != 0 then goto L25c7d4;
  #L25c7ce.  call temp:= `produced`(v15, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$InnerSubscription;.produced:(J)J` @kind virtual;
  #L25c7d4.  @monitorenter v15
  #L25c7d6.  v2:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.missed` @type ^`boolean` @kind boolean;
  #L25c7da.  if v2 != 0 then goto L25c7e6;
  #L25c7de.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.emitting` @type ^`boolean` := v0 @kind boolean;
  #L25c7e2.  @monitorexit v15
  #L25c7e4.  return @kind void;
  #L25c7e6.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$InnerSubscription.missed` @type ^`boolean` := v0 @kind boolean;
  #L25c7ea.  @monitorexit v15
  #L25c7ec.  goto L25c6ca;
  #L25c7f0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25c7f2.  @monitorexit v15
  #L25c7f4.  throw v0;
  #L25c7f6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25c7f8.  @monitorexit v15
  #L25c7fa.  goto L25c7fe;
  #L25c7fc.  throw v0;
  #L25c7fe.  goto L25c7fc;
  catch `java.lang.Throwable` @[L25c6b2..L25c6ca] goto L25c7f6;
  catch `java.lang.Throwable` @[L25c754..L25c768] goto L25c788;
  catch `java.lang.Throwable` @[L25c7d6..L25c7f4] goto L25c7f0;
  catch `java.lang.Throwable` @[L25c7f8..L25c7fa] goto L25c7f6;
}
procedure `void` `setFirst`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$Node` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.setFirst:(Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;)V` @AccessFlag FINAL {
    temp;

  #L25c83c.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L25c842.  return @kind void;
}
procedure `void` `trimHead`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.trimHead:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L25c854.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25c85a.  v0:= temp @kind object;
  #L25c85c.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$Node`) v0 @kind object;
  #L25c860.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$Node.value` @type ^`java.lang.Object` @kind object;
  #L25c864.  if v1 == 0 then goto L25c88c;
  #L25c868.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$Node`;
  #L25c86c.  v2:= 0I;
  #L25c86e.  v3:= 0L;
  #L25c872.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$Node;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L25c878.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L25c87e.  v0:= temp @kind object;
  #L25c880.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L25c886.  call `set`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L25c88c.  return @kind void;
}
procedure `void` `truncate`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.truncate:()V` @AccessFlag  {
    temp;

  #L25c8a0.  return @kind void;
}
procedure `void` `truncateFinal`(`io.reactivex.internal.operators.flowable.FlowableReplay$BoundedReplayBuffer` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.truncateFinal:()V` @AccessFlag  {
    temp;

  #L25c8b4.  call `trimHead`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$BoundedReplayBuffer;.trimHead:()V` @kind virtual;
  #L25c8ba.  return @kind void;
}
