record `io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.h` @kind interface {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.delayError` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.downstream` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.errors` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.index` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.produced` @AccessFlag ;
  `n.b.b`[] `io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.sources` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.wip` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber` v1 @kind this, `n.b.b`[] v2 @kind object, `boolean` v3 , `n.b.c` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$ConcatArraySubscriber;.<init>:([Ln/b/b;ZLn/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L24e6f8.  v0:= 0I;
  #L24e6fa.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L24e700.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.downstream` @type ^`n.b.c` := v4 @kind object;
  #L24e704.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.sources` @type ^`n.b.b`[] := v2 @kind object;
  #L24e708.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.delayError` @type ^`boolean` := v3 @kind boolean;
  #L24e70c.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L24e710.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L24e716.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L24e71a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$ConcatArraySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L24e72c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L24e730.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L24e736.  v0:= temp;
  #L24e738.  if v0 != 0 then goto L24e826;
  #L24e73c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.sources` @type ^`n.b.b`[] @kind object;
  #L24e740.  v1:= length @variable v0;
  #L24e742.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.index` @type ^`int`;
  #L24e746.  v3:= 1I;
  #L24e748.  if v2 != v1 then goto L24e79c;
  #L24e74c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.errors` @type ^`java.util.List` @kind object;
  #L24e750.  if v0 == 0 then goto L24e790;
  #L24e754.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L24e75a.  v1:= temp;
  #L24e75c.  if v1 != v3 then goto L24e77a;
  #L24e760.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24e764.  v2:= 0I;
  #L24e766.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L24e76c.  v0:= temp @kind object;
  #L24e76e.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L24e772.  call `onError`(v1, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24e778.  goto L24e79a;
  #L24e77a.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24e77e.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L24e782.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L24e788.  call `onError`(v1, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24e78e.  goto L24e79a;
  #L24e790.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24e794.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L24e79a.  return @kind void;
  #L24e79c.  v4:= v0[v2] @kind object;
  #L24e7a0.  if v4 != 0 then goto L24e7ee;
  #L24e7a4.  v4:= new `java.lang.NullPointerException`;
  #L24e7a8.  v5:= "A Publisher entry is null" @kind object;
  #L24e7ac.  call `<init>`(v4, v5) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24e7b2.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.delayError` @type ^`boolean` @kind boolean;
  #L24e7b6.  if v5 == 0 then goto L24e7e2;
  #L24e7ba.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.errors` @type ^`java.util.List` @kind object;
  #L24e7be.  if v5 != 0 then goto L24e7d6;
  #L24e7c2.  v5:= new `java.util.ArrayList`;
  #L24e7c6.  v6:= v1 - v2 @kind int;
  #L24e7ca.  v6:= v6 + v3 @kind int;
  #L24e7cc.  call `<init>`(v5, v6) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L24e7d2.  v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.errors` @type ^`java.util.List` := v5 @kind object;
  #L24e7d6.  call temp:= `add`(v5, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24e7dc.  v2:= v2 + 1;
  #L24e7e0.  goto L24e746;
  #L24e7e2.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24e7e6.  call `onError`(v0, v4) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24e7ec.  return @kind void;
  #L24e7ee.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.produced` @type ^`long` @kind wide;
  #L24e7f2.  v7:= 0L;
  #L24e7f6.  v3:= lcmp(v5, v7);
  #L24e7fa.  if v3 == 0 then goto L24e808;
  #L24e7fe.  v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.produced` @type ^`long` := v7 @kind wide;
  #L24e802.  call `produced`(v9, v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L24e808.  call `subscribe`(v4, v9) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L24e80e.  v2:= v2 + 1;
  #L24e812.  v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.index` @type ^`int` := v2;
  #L24e816.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.wip` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L24e81a.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L24e820.  v3:= temp;
  #L24e822.  if v3 != 0 then goto L24e746;
  #L24e826.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$ConcatArraySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24e838.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.delayError` @type ^`boolean` @kind boolean;
  #L24e83c.  if v0 == 0 then goto L24e874;
  #L24e840.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.errors` @type ^`java.util.List` @kind object;
  #L24e844.  if v0 != 0 then goto L24e866;
  #L24e848.  v0:= new `java.util.ArrayList`;
  #L24e84c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.sources` @type ^`n.b.b`[] @kind object;
  #L24e850.  v1:= length @variable v1;
  #L24e852.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.index` @type ^`int`;
  #L24e856.  v1:= v1 - v2 @kind int;
  #L24e858.  v1:= v1 + 1;
  #L24e85c.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L24e862.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.errors` @type ^`java.util.List` := v0 @kind object;
  #L24e866.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24e86c.  call `onComplete`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$ConcatArraySubscriber;.onComplete:()V` @kind virtual;
  #L24e872.  goto L24e87e;
  #L24e874.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24e878.  call `onError`(v0, v4) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24e87e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$ConcatArraySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24e890.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.produced` @type ^`long` @kind wide;
  #L24e894.  v2:= 1L;
  #L24e898.  v0:= v0 + v2 @kind long;
  #L24e89a.  v4.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.produced` @type ^`long` := v0 @kind wide;
  #L24e89e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24e8a2.  call `onNext`(v0, v5) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L24e8a8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$ConcatArraySubscriber` v0 @kind this, `n.b.d` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$ConcatArraySubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;

  #L24e8bc.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Ln/b/d;)V` @kind virtual;
  #L24e8c2.  return @kind void;
}
