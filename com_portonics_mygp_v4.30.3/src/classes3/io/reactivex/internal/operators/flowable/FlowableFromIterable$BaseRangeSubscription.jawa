record `io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.BasicQueueSubscription` @kind class {
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @AccessFlag VOLATILE;
  `java.util.Iterator` `io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.it` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.once` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` v0 @kind this, `java.util.Iterator` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.<init>:(Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2554c8.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicQueueSubscription;.<init>:()V` @kind direct;
  #L2554ce.  v0.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.it` @type ^`java.util.Iterator` := v1 @kind object;
  #L2554d2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2554e4.  v0:= 1I;
  #L2554e6.  v1.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L2554ea.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2554fc.  v0:= 0I;
  #L2554fe.  v1.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.it` @type ^`java.util.Iterator` := v0 @kind object;
  #L255502.  return @kind void;
}
procedure `void` `fastPath`() @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.fastPath:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L25542c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.it` @type ^`java.util.Iterator` @kind object;
  #L255430.  if v0 == 0 then goto L255446;
  #L255434.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L25543a.  v0:= temp;
  #L25543c.  if v0 != 0 then goto L255442;
  #L255440.  goto L255446;
  #L255442.  v0:= 0I;
  #L255444.  goto L255448;
  #L255446.  v0:= 1I;
  #L255448.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L255474.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.it` @type ^`java.util.Iterator` @kind object;
  #L255478.  v1:= 0I;
  #L25547a.  if v0 != 0 then goto L255480;
  #L25547e.  return v1 @kind object;
  #L255480.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.once` @type ^`boolean` @kind boolean;
  #L255484.  if v2 != 0 then goto L255490;
  #L255488.  v0:= 1I;
  #L25548a.  v3.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.once` @type ^`boolean` := v0 @kind boolean;
  #L25548e.  goto L25549e;
  #L255490.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L255496.  v0:= temp;
  #L255498.  if v0 != 0 then goto L25549e;
  #L25549c.  return v1 @kind object;
  #L25549e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription.it` @type ^`java.util.Iterator` @kind object;
  #L2554a2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2554a8.  v0:= temp @kind object;
  #L2554aa.  v1:= "Iterator.next() returned a null value" @kind object;
  #L2554ae.  call temp:= `e`(v0, v1) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2554b4.  v0:= temp @kind object;
  #L2554b6.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L255514.  call temp:= `validate`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L25551a.  v0:= temp;
  #L25551c.  if v0 == 0 then goto L255554;
  #L255520.  call temp:= `a`(v5, v6) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L255526.  v0:= temp @kind wide;
  #L255528.  v2:= 0L;
  #L25552c.  v4:= lcmp(v0, v2);
  #L255530.  if v4 != 0 then goto L255554;
  #L255534.  v0:= 9223372036854775807L;
  #L25553e.  v2:= lcmp(v6, v0);
  #L255542.  if v2 != 0 then goto L25554e;
  #L255546.  call `fastPath`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.fastPath:()V` @kind virtual;
  #L25554c.  goto L255554;
  #L25554e.  call `slowPath`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.slowPath:(J)V` @kind virtual;
  #L255554.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L25545c.  v1:= v1 ^& 1;
  #L255460.  return v1;
}
procedure `void` `slowPath`(`long` v0 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$BaseRangeSubscription;.slowPath:(J)V` @AccessFlag ABSTRACT {

  # return;
}
