record `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.f` @kind interface, `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v0 @kind this, `n.b.c` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.<init>:(Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24ff58.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L24ff5e.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.downstream` @type ^`n.b.c` := v1 @kind object;
  #L24ff62.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L24ff66.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L24ff6c.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L24ff70.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L24ff84.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L24ff88.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L24ff8e.  call `onUnsubscribed`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onUnsubscribed:()V` @kind virtual;
  #L24ff94.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.complete:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L24ffa8.  call temp:= `isCancelled`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L24ffae.  v0:= temp;
  #L24ffb0.  if v0 == 0 then goto L24ffb6;
  #L24ffb4.  return @kind void;
  #L24ffb6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.downstream` @type ^`n.b.c` @kind object;
  #L24ffba.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L24ffc0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L24ffc4.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L24ffca.  return @kind void;
  #L24ffcc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24ffce.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L24ffd2.  call `dispose`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L24ffd8.  throw v0;
  catch `java.lang.Throwable` @[L24ffb6..L24ffc0] goto L24ffcc;
}
procedure `boolean` `error`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.error:(Ljava/lang/Throwable;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L24fe38.  if v2 != 0 then goto L24fe4a;
  #L24fe3c.  v2:= new `java.lang.NullPointerException`;
  #L24fe40.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L24fe44.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24fe4a.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @kind virtual;
  #L24fe50.  v0:= temp;
  #L24fe52.  if v0 == 0 then goto L24fe5a;
  #L24fe56.  v2:= 0I;
  #L24fe58.  return v2;
  #L24fe5a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.downstream` @type ^`n.b.c` @kind object;
  #L24fe5e.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24fe64.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L24fe68.  call `dispose`(v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L24fe6e.  v2:= 1I;
  #L24fe70.  return v2;
  #L24fe72.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24fe74.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L24fe78.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L24fe7e.  throw v2;
  catch `java.lang.Throwable` @[L24fe5a..L24fe64] goto L24fe72;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L24fe9c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L24fea0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L24fea6.  v0:= temp;
  #L24fea8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L24fff8.  call `complete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.complete:()V` @kind virtual;
  #L24fffe.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L250010.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L250016.  v0:= temp;
  #L250018.  if v0 != 0 then goto L250022;
  #L25001c.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L250022.  return @kind void;
}
procedure `void` `onNext`(`java.lang.Object` v0 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {

  # return;
}
procedure `void` `onRequested`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onRequested:()V` @AccessFlag  {
    temp;

  #L250034.  return @kind void;
}
procedure `void` `onUnsubscribed`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onUnsubscribed:()V` @AccessFlag  {
    temp;

  #L250048.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L25005c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L250062.  v0:= temp;
  #L250064.  if v0 == 0 then goto L250074;
  #L250068.  call temp:= `a`(v1, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25006e.  call `onRequested`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.onRequested:()V` @kind virtual;
  #L250074.  return @kind void;
}
procedure `long` `requested`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.requested:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L24ff3c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L24ff42.  v0:= temp @kind wide;
  #L24ff44.  return v0 @kind wide;
}
procedure `io.reactivex.f` `serialize`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.serialize:()Lio/reactivex/f;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L24fed8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter`;
  #L24fedc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$SerializedEmitter;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;)V` @kind direct;
  #L24fee2.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this, `io.reactivex.d0.f` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.setCancellable:(Lio/reactivex/d0/f;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L250088.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L25008c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/d0/f;)V` @kind direct;
  #L250092.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.setDisposable:(Lio/reactivex/disposables/b;)V` @kind virtual;
  #L250098.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.setDisposable:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2500ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter.serial` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L2500b0.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2500b6.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24fef4.  v0:= 2I;
  #L24fef6.  v0:= new `java.lang.Object`[v0];
  #L24fefa.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L24ff00.  v1:= temp @kind object;
  #L24ff02.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L24ff08.  v1:= temp @kind object;
  #L24ff0a.  v2:= 0I;
  #L24ff0c.  v0[v2]:= v1 @kind object;
  #L24ff10.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.toString:()Ljava/lang/String;` @kind super;
  #L24ff16.  v1:= temp @kind object;
  #L24ff18.  v2:= 1I;
  #L24ff1a.  v0[v2]:= v1 @kind object;
  #L24ff1e.  v1:= "%s{%s}" @kind object;
  #L24ff22.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L24ff28.  v0:= temp @kind object;
  #L24ff2a.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;

  #L24febc.  call temp:= `error`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$BaseEmitter;.error:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L24fec2.  v1:= temp;
  #L24fec4.  return v1;
}
