record `io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `n.b.d` @kind interface, `io.reactivex.internal.operators.flowable.q` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.active` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.disposables` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.error` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.leftEnd` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.leftIndex` @AccessFlag ;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.lefts` @AccessFlag FINAL;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.requested` @AccessFlag FINAL;
  `io.reactivex.d0.c` `io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.resultSelector` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.rightEnd` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.rightIndex` @AccessFlag ;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.rights` @AccessFlag FINAL;
}
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.LEFT_CLOSE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.LEFT_VALUE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.RIGHT_CLOSE` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.RIGHT_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L25753c.  v0:= 1I;
  #L25753e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L257544.  v0:= temp @kind object;
  #L257546.  `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.LEFT_VALUE` @type ^`java.lang.Integer` := v0 @kind object;
  #L25754a.  v0:= 2I;
  #L25754c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L257552.  v0:= temp @kind object;
  #L257554.  `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.RIGHT_VALUE` @type ^`java.lang.Integer` := v0 @kind object;
  #L257558.  v0:= 3I;
  #L25755a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L257560.  v0:= temp @kind object;
  #L257562.  `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.LEFT_CLOSE` @type ^`java.lang.Integer` := v0 @kind object;
  #L257566.  v0:= 4I;
  #L257568.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L25756e.  v0:= temp @kind object;
  #L257570.  `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.RIGHT_CLOSE` @type ^`java.lang.Integer` := v0 @kind object;
  #L257574.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription` v1 @kind this, `n.b.c` v2 @kind object, `io.reactivex.d0.k` v3 @kind object, `io.reactivex.d0.k` v4 @kind object, `io.reactivex.d0.c` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.<init>:(Ln/b/c;Lio/reactivex/d0/k;Lio/reactivex/d0/k;Lio/reactivex/d0/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L257588.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L25758e.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.downstream` @type ^`n.b.c` := v2 @kind object;
  #L257592.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L257596.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L25759c.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L2575a0.  v2:= new `io.reactivex.disposables.a`;
  #L2575a4.  call `<init>`(v2) @signature `Lio/reactivex/disposables/a;.<init>:()V` @kind direct;
  #L2575aa.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.disposables` @type ^`io.reactivex.disposables.a` := v2 @kind object;
  #L2575ae.  v2:= new `io.reactivex.internal.queue.a`;
  #L2575b2.  call temp:= `a`() @signature `Lio/reactivex/e;.a:()I` @kind static;
  #L2575b8.  v0:= temp;
  #L2575ba.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L2575c0.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.queue` @type ^`io.reactivex.internal.queue.a` := v2 @kind object;
  #L2575c4.  v2:= new `java.util.LinkedHashMap`;
  #L2575c8.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L2575ce.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.lefts` @type ^`java.util.Map` := v2 @kind object;
  #L2575d2.  v2:= new `java.util.LinkedHashMap`;
  #L2575d6.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L2575dc.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.rights` @type ^`java.util.Map` := v2 @kind object;
  #L2575e0.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2575e4.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2575ea.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L2575ee.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.leftEnd` @type ^`io.reactivex.d0.k` := v3 @kind object;
  #L2575f2.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.rightEnd` @type ^`io.reactivex.d0.k` := v4 @kind object;
  #L2575f6.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.resultSelector` @type ^`io.reactivex.d0.c` := v5 @kind object;
  #L2575fa.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L2575fe.  v3:= 2I;
  #L257600.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L257606.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.active` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L25760a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25761c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L257620.  if v0 == 0 then goto L257626;
  #L257624.  return @kind void;
  #L257626.  v0:= 1I;
  #L257628.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L25762c.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.cancelAll:()V` @kind virtual;
  #L257632.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L257638.  v0:= temp;
  #L25763a.  if v0 != 0 then goto L257648;
  #L25763e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L257642.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L257648.  return @kind void;
}
procedure `void` `cancelAll`(`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.cancelAll:()V` @AccessFlag  {
    temp;
    v0;

  #L25765c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L257660.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L257666.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L257678.  v1:= v17 @kind object;
  #L25767c.  call temp:= `getAndIncrement`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L257682.  v0:= temp;
  #L257684.  if v0 == 0 then goto L25768a;
  #L257688.  return @kind void;
  #L25768a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L25768e.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.downstream` @type ^`n.b.c` @kind object;
  #L257692.  v0:= 1I;
  #L257694.  v4:= 1I;
  #L257696.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L25769a.  if v5 == 0 then goto L2576a6;
  #L25769e.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L2576a4.  return @kind void;
  #L2576a6.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2576aa.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2576b0.  v5:= temp @kind object;
  #L2576b2.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L2576b6.  if v5 == 0 then goto L2576ce;
  #L2576ba.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L2576c0.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.cancelAll:()V` @kind virtual;
  #L2576c6.  call `errorAll`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.errorAll:(Ln/b/c;)V` @kind virtual;
  #L2576cc.  return @kind void;
  #L2576ce.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L2576d2.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2576d8.  v5:= temp;
  #L2576da.  v6:= 0I;
  #L2576dc.  if v5 != 0 then goto L2576e4;
  #L2576e0.  v5:= 1I;
  #L2576e2.  goto L2576e6;
  #L2576e4.  v5:= 0I;
  #L2576e6.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L2576ec.  v7:= temp @kind object;
  #L2576ee.  v7:= (`java.lang.Integer`) v7 @kind object;
  #L2576f2.  if v7 != 0 then goto L2576fa;
  #L2576f6.  v8:= 1I;
  #L2576f8.  goto L2576fc;
  #L2576fa.  v8:= 0I;
  #L2576fc.  if v5 == 0 then goto L25772a;
  #L257700.  if v8 == 0 then goto L25772a;
  #L257704.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L257708.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L25770e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.rights` @type ^`java.util.Map` @kind object;
  #L257712.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L257718.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L25771c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L257722.  call `onComplete`(v3) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L257728.  return @kind void;
  #L25772a.  if v8 == 0 then goto L25773e;
  #L25772e.  v4:= -v4 @kind int;
  #L257730.  call temp:= `addAndGet`(v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L257736.  v4:= temp;
  #L257738.  if v4 != 0 then goto L257696;
  #L25773c.  return @kind void;
  #L25773e.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L257744.  v5:= temp @kind object;
  #L257746.  v8:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.LEFT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L25774a.  v9:= 1L;
  #L25774e.  v11:= "Could not emit value due to lack of requests" @kind object;
  #L257752.  v12:= "The resultSelector returned a null value" @kind object;
  #L257756.  if v7 != v8 then goto L25788c;
  #L25775a.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.leftIndex` @type ^`int`;
  #L25775e.  v7:= v6 + 1;
  #L257762.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.leftIndex` @type ^`int` := v7;
  #L257766.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L25776a.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L257770.  v8:= temp @kind object;
  #L257772.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L257778.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.leftEnd` @type ^`io.reactivex.d0.k` @kind object;
  #L25777c.  call temp:= `apply`(v7, v5) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L257782.  v7:= temp @kind object;
  #L257784.  v8:= "The leftEnd returned a null Publisher" @kind object;
  #L257788.  call temp:= `e`(v7, v8) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L25778e.  v7:= temp @kind object;
  #L257790.  v7:= (`n.b.b`) v7 @kind object;
  #L257794.  v8:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber`;
  #L257798.  call `<init>`(v8, v1, v0, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/q;ZI)V` @kind direct;
  #L25779e.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L2577a2.  call temp:= `b`(v6, v8) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2577a8.  call `subscribe`(v7, v8) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L2577ae.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2577b2.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2577b8.  v6:= temp @kind object;
  #L2577ba.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L2577be.  if v6 == 0 then goto L2577d6;
  #L2577c2.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L2577c8.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.cancelAll:()V` @kind virtual;
  #L2577ce.  call `errorAll`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.errorAll:(Ln/b/c;)V` @kind virtual;
  #L2577d4.  return @kind void;
  #L2577d6.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2577da.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2577e0.  v6:= temp @kind wide;
  #L2577e2.  v8:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.rights` @type ^`java.util.Map` @kind object;
  #L2577e6.  call temp:= `values`(v8) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L2577ec.  v8:= temp @kind object;
  #L2577ee.  call temp:= `iterator`(v8) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2577f4.  v8:= temp @kind object;
  #L2577f6.  v13:= 0L;
  #L2577fa.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L257800.  v16:= temp;
  #L257802.  if v16 == 0 then goto L257868;
  #L257806.  call temp:= `next`(v8) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L25780c.  v0:= temp @kind object;
  #L25780e.  v15:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.resultSelector` @type ^`io.reactivex.d0.c` @kind object;
  #L257812.  call temp:= `apply`(v15, v5, v0) @signature `Lio/reactivex/d0/c;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L257818.  v0:= temp @kind object;
  #L25781a.  call temp:= `e`(v0, v12) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L257820.  v0:= temp @kind object;
  #L257822.  v15:= lcmp(v13, v6);
  #L257826.  if v15 == 0 then goto L257836;
  #L25782a.  call `onNext`(v3, v0) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L257830.  v13:= v13 + v9 @kind long;
  #L257832.  v0:= 1I;
  #L257834.  goto L2577fa;
  #L257836.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L25783a.  v4:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L25783e.  call `<init>`(v4, v11) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L257844.  call temp:= `a`(v0, v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L25784a.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L257850.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.cancelAll:()V` @kind virtual;
  #L257856.  call `errorAll`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.errorAll:(Ln/b/c;)V` @kind virtual;
  #L25785c.  return @kind void;
  #L25785e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L257860.  call `fail`(v1, v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.fail:(Ljava/lang/Throwable;Ln/b/c;Lio/reactivex/e0/a/j;)V` @kind virtual;
  #L257866.  return @kind void;
  #L257868.  v5:= 0L;
  #L25786c.  v0:= lcmp(v13, v5);
  #L257870.  if v0 == 0 then goto L257a1c;
  #L257874.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L257878.  call temp:= `e`(v0, v13) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L25787e.  goto L257a1c;
  #L257882.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L257884.  call `fail`(v1, v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.fail:(Ljava/lang/Throwable;Ln/b/c;Lio/reactivex/e0/a/j;)V` @kind virtual;
  #L25788a.  return @kind void;
  #L25788c.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.RIGHT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L257890.  if v7 != v0 then goto L2579c2;
  #L257894.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.rightIndex` @type ^`int`;
  #L257898.  v7:= v0 + 1;
  #L25789c.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.rightIndex` @type ^`int` := v7;
  #L2578a0.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.rights` @type ^`java.util.Map` @kind object;
  #L2578a4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2578aa.  v8:= temp @kind object;
  #L2578ac.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2578b2.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.rightEnd` @type ^`io.reactivex.d0.k` @kind object;
  #L2578b6.  call temp:= `apply`(v7, v5) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2578bc.  v7:= temp @kind object;
  #L2578be.  v8:= "The rightEnd returned a null Publisher" @kind object;
  #L2578c2.  call temp:= `e`(v7, v8) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2578c8.  v7:= temp @kind object;
  #L2578ca.  v7:= (`n.b.b`) v7 @kind object;
  #L2578ce.  v8:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber`;
  #L2578d2.  call `<init>`(v8, v1, v6, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/q;ZI)V` @kind direct;
  #L2578d8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L2578dc.  call temp:= `b`(v0, v8) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2578e2.  call `subscribe`(v7, v8) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L2578e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2578ec.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2578f2.  v0:= temp @kind object;
  #L2578f4.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L2578f8.  if v0 == 0 then goto L257910;
  #L2578fc.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L257902.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.cancelAll:()V` @kind virtual;
  #L257908.  call `errorAll`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.errorAll:(Ln/b/c;)V` @kind virtual;
  #L25790e.  return @kind void;
  #L257910.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L257914.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L25791a.  v6:= temp @kind wide;
  #L25791c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L257920.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L257926.  v0:= temp @kind object;
  #L257928.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L25792e.  v0:= temp @kind object;
  #L257930.  v13:= 0L;
  #L257934.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L25793a.  v8:= temp;
  #L25793c.  if v8 == 0 then goto L2579a0;
  #L257940.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L257946.  v8:= temp @kind object;
  #L257948.  v15:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.resultSelector` @type ^`io.reactivex.d0.c` @kind object;
  #L25794c.  call temp:= `apply`(v15, v8, v5) @signature `Lio/reactivex/d0/c;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L257952.  v8:= temp @kind object;
  #L257954.  call temp:= `e`(v8, v12) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L25795a.  v8:= temp @kind object;
  #L25795c.  v15:= lcmp(v13, v6);
  #L257960.  if v15 == 0 then goto L25796e;
  #L257964.  call `onNext`(v3, v8) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L25796a.  v13:= v13 + v9 @kind long;
  #L25796c.  goto L257934;
  #L25796e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L257972.  v4:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L257976.  call `<init>`(v4, v11) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25797c.  call temp:= `a`(v0, v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L257982.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L257988.  call `cancelAll`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.cancelAll:()V` @kind virtual;
  #L25798e.  call `errorAll`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.errorAll:(Ln/b/c;)V` @kind virtual;
  #L257994.  return @kind void;
  #L257996.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L257998.  call `fail`(v1, v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.fail:(Ljava/lang/Throwable;Ln/b/c;Lio/reactivex/e0/a/j;)V` @kind virtual;
  #L25799e.  return @kind void;
  #L2579a0.  v5:= 0L;
  #L2579a4.  v0:= lcmp(v13, v5);
  #L2579a8.  if v0 == 0 then goto L257a1c;
  #L2579ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2579b0.  call temp:= `e`(v0, v13) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L2579b6.  goto L257a1c;
  #L2579b8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2579ba.  call `fail`(v1, v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.fail:(Ljava/lang/Throwable;Ln/b/c;Lio/reactivex/e0/a/j;)V` @kind virtual;
  #L2579c0.  return @kind void;
  #L2579c2.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.LEFT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L2579c6.  if v7 != v0 then goto L2579f0;
  #L2579ca.  v5:= (`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber`) v5 @kind object;
  #L2579ce.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L2579d2.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.index` @type ^`int`;
  #L2579d6.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2579dc.  v6:= temp @kind object;
  #L2579de.  call temp:= `remove`(v0, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2579e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L2579e8.  call temp:= `a`(v0, v5) @signature `Lio/reactivex/disposables/a;.a:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L2579ee.  goto L257a1c;
  #L2579f0.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.RIGHT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L2579f4.  if v7 != v0 then goto L257a1c;
  #L2579f8.  v5:= (`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber`) v5 @kind object;
  #L2579fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.rights` @type ^`java.util.Map` @kind object;
  #L257a00.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber.index` @type ^`int`;
  #L257a04.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L257a0a.  v6:= temp @kind object;
  #L257a0c.  call temp:= `remove`(v0, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L257a12.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L257a16.  call temp:= `a`(v0, v5) @signature `Lio/reactivex/disposables/a;.a:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L257a1c.  v0:= 1I;
  #L257a1e.  goto L257696;
  catch `java.lang.Throwable` @[L257778..L257794] goto L257882;
  catch `java.lang.Throwable` @[L25780e..L257822] goto L25785e;
  catch `java.lang.Throwable` @[L2578b2..L2578ce] goto L2579b8;
  catch `java.lang.Throwable` @[L257948..L25795c] goto L257996;
}
procedure `void` `errorAll`(`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription` v2 @kind this, `n.b.c` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.errorAll:(Ln/b/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L257a64.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L257a68.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L257a6e.  v0:= temp @kind object;
  #L257a70.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.lefts` @type ^`java.util.Map` @kind object;
  #L257a74.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L257a7a.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.rights` @type ^`java.util.Map` @kind object;
  #L257a7e.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L257a84.  call `onError`(v3, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L257a8a.  return @kind void;
}
procedure `void` `fail`(`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription` v1 @kind this, `java.lang.Throwable` v2 @kind object, `n.b.c` v3 @kind object, `io.reactivex.e0.a.j` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.fail:(Ljava/lang/Throwable;Ln/b/c;Lio/reactivex/e0/a/j;)V` @AccessFlag  {
    temp;
    v0;

  #L257a9c.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L257aa2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L257aa6.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L257aac.  call `clear`(v4) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L257ab2.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.cancelAll:()V` @kind virtual;
  #L257ab8.  call `errorAll`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.errorAll:(Ln/b/c;)V` @kind virtual;
  #L257abe.  return @kind void;
}
procedure `void` `innerClose`(`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription` v1 @kind this, `boolean` v2 , `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.innerClose:(ZLio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightEndSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L257ad0.  @monitorenter v1
  #L257ad2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L257ad6.  if v2 == 0 then goto L257ae0;
  #L257ada.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.LEFT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L257ade.  goto L257ae4;
  #L257ae0.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.RIGHT_CLOSE` @type ^`java.lang.Integer` @kind object;
  #L257ae4.  call temp:= `l`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/a;.l:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L257aea.  @monitorexit v1
  #L257aec.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.drain:()V` @kind virtual;
  #L257af2.  return @kind void;
  #L257af4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L257af6.  @monitorexit v1
  #L257af8.  throw v2;
  catch `java.lang.Throwable` @[L257ad2..L257aec] goto L257af4;
  catch `java.lang.Throwable` @[L257af6..L257af8] goto L257af4;
}
procedure `void` `innerCloseError`(`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.innerCloseError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L257b20.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L257b24.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L257b2a.  v0:= temp;
  #L257b2c.  if v0 == 0 then goto L257b38;
  #L257b30.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.drain:()V` @kind virtual;
  #L257b36.  goto L257b3e;
  #L257b38.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L257b3e.  return @kind void;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.innerComplete:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$LeftRightSubscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L257b50.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.disposables` @type ^`io.reactivex.disposables.a` @kind object;
  #L257b54.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L257b5a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L257b5e.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L257b64.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.drain:()V` @kind virtual;
  #L257b6a.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L257b7c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L257b80.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L257b86.  v0:= temp;
  #L257b88.  if v0 == 0 then goto L257b9e;
  #L257b8c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.active` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L257b90.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L257b96.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.drain:()V` @kind virtual;
  #L257b9c.  goto L257ba4;
  #L257b9e.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L257ba4.  return @kind void;
}
procedure `void` `innerValue`(`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.innerValue:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L257bb8.  @monitorenter v1
  #L257bba.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L257bbe.  if v2 == 0 then goto L257bc8;
  #L257bc2.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.LEFT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L257bc6.  goto L257bcc;
  #L257bc8.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.RIGHT_VALUE` @type ^`java.lang.Integer` @kind object;
  #L257bcc.  call temp:= `l`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/a;.l:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L257bd2.  @monitorexit v1
  #L257bd4.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.drain:()V` @kind virtual;
  #L257bda.  return @kind void;
  #L257bdc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L257bde.  @monitorexit v1
  #L257be0.  throw v2;
  catch `java.lang.Throwable` @[L257bba..L257bd4] goto L257bdc;
  catch `java.lang.Throwable` @[L257bde..L257be0] goto L257bdc;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$JoinSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L257c08.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L257c0e.  v0:= temp;
  #L257c10.  if v0 == 0 then goto L257c1e;
  #L257c14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$JoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L257c18.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L257c1e.  return @kind void;
}
