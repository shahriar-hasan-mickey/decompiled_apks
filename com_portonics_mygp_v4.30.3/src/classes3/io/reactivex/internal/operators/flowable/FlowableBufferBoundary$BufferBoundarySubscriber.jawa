record `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `io.reactivex.d0.k` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferClose` @AccessFlag FINAL;
  `n.b.b` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferOpen` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferSupplier` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.downstream` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.emitted` @AccessFlag ;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.errors` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.index` @AccessFlag ;
  `io.reactivex.internal.queue.a` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.requested` @AccessFlag FINAL;
  `io.reactivex.disposables.a` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v0 @kind this, `n.b.c` v1 @kind object, `n.b.b` v2 @kind object, `io.reactivex.d0.k` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.<init>:(Ln/b/c;Ln/b/b;Lio/reactivex/d0/k;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24d778.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L24d77e.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L24d782.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L24d786.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferOpen` @type ^`n.b.b` := v2 @kind object;
  #L24d78a.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferClose` @type ^`io.reactivex.d0.k` := v3 @kind object;
  #L24d78e.  v1:= new `io.reactivex.internal.queue.a`;
  #L24d792.  call temp:= `a`() @signature `Lio/reactivex/e;.a:()I` @kind static;
  #L24d798.  v2:= temp;
  #L24d79a.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @kind direct;
  #L24d7a0.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.queue` @type ^`io.reactivex.internal.queue.a` := v1 @kind object;
  #L24d7a4.  v1:= new `io.reactivex.disposables.a`;
  #L24d7a8.  call `<init>`(v1) @signature `Lio/reactivex/disposables/a;.<init>:()V` @kind direct;
  #L24d7ae.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.a` := v1 @kind object;
  #L24d7b2.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L24d7b6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L24d7bc.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L24d7c0.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L24d7c4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L24d7ca.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L24d7ce.  v1:= new `java.util.LinkedHashMap`;
  #L24d7d2.  call `<init>`(v1) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L24d7d8.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` := v1 @kind object;
  #L24d7dc.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L24d7e0.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L24d7e6.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L24d7ea.  return @kind void;
}
procedure `void` `boundaryError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.boundaryError:(Lio/reactivex/disposables/b;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L24d7fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24d800.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24d806.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.a` @kind object;
  #L24d80a.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L24d810.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L24d816.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24d828.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24d82c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24d832.  v0:= temp;
  #L24d834.  if v0 == 0 then goto L24d870;
  #L24d838.  v0:= 1I;
  #L24d83a.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L24d83e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.a` @kind object;
  #L24d842.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L24d848.  @monitorenter v1
  #L24d84a.  v0:= 0I;
  #L24d84c.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` := v0 @kind object;
  #L24d850.  @monitorexit v1
  #L24d852.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L24d858.  v0:= temp;
  #L24d85a.  if v0 == 0 then goto L24d870;
  #L24d85e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L24d862.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L24d868.  goto L24d870;
  #L24d86a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24d86c.  @monitorexit v1
  #L24d86e.  throw v0;
  #L24d870.  return @kind void;
  catch `java.lang.Throwable` @[L24d84c..L24d852] goto L24d86a;
  catch `java.lang.Throwable` @[L24d86c..L24d86e] goto L24d86a;
}
procedure `void` `close`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v3 @kind this, `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.close:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L24d898.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.a` @kind object;
  #L24d89c.  call temp:= `c`(v0, v4) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L24d8a2.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.a` @kind object;
  #L24d8a6.  call temp:= `e`(v4) @signature `Lio/reactivex/disposables/a;.e:()I` @kind virtual;
  #L24d8ac.  v4:= temp;
  #L24d8ae.  v0:= 1I;
  #L24d8b0.  if v4 != 0 then goto L24d8c2;
  #L24d8b4.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24d8b8.  call temp:= `cancel`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24d8be.  v4:= 1I;
  #L24d8c0.  goto L24d8c4;
  #L24d8c2.  v4:= 0I;
  #L24d8c4.  @monitorenter v3
  #L24d8c6.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` @kind object;
  #L24d8ca.  if v1 != 0 then goto L24d8d2;
  #L24d8ce.  @monitorexit v3
  #L24d8d0.  return @kind void;
  #L24d8d2.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L24d8d6.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L24d8dc.  v5:= temp @kind object;
  #L24d8de.  call temp:= `remove`(v1, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L24d8e4.  v5:= temp @kind object;
  #L24d8e6.  call temp:= `offer`(v2, v5) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L24d8ec.  @monitorexit v3
  #L24d8ee.  if v4 == 0 then goto L24d8f6;
  #L24d8f2.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L24d8f6.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.drain:()V` @kind virtual;
  #L24d8fc.  return @kind void;
  #L24d8fe.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24d900.  @monitorexit v3
  #L24d902.  throw v4;
  catch `java.lang.Throwable` @[L24d8c6..L24d8ee] goto L24d8fe;
  catch `java.lang.Throwable` @[L24d900..L24d902] goto L24d8fe;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L24d928.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L24d92e.  v0:= temp;
  #L24d930.  if v0 == 0 then goto L24d936;
  #L24d934.  return @kind void;
  #L24d936.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.emitted` @type ^`long` @kind wide;
  #L24d93a.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.downstream` @type ^`n.b.c` @kind object;
  #L24d93e.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L24d942.  v4:= 1I;
  #L24d944.  v5:= 1I;
  #L24d946.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L24d94a.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L24d950.  v6:= temp @kind wide;
  #L24d952.  v8:= lcmp(v0, v6);
  #L24d956.  if v8 == 0 then goto L24d9d6;
  #L24d95a.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L24d95e.  if v8 == 0 then goto L24d96a;
  #L24d962.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L24d968.  return @kind void;
  #L24d96a.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.done` @type ^`boolean` @kind boolean;
  #L24d96e.  if v8 == 0 then goto L24d99c;
  #L24d972.  v9:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24d976.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24d97c.  v9:= temp @kind object;
  #L24d97e.  if v9 == 0 then goto L24d99c;
  #L24d982.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L24d988.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24d98c.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L24d992.  v0:= temp @kind object;
  #L24d994.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24d99a.  return @kind void;
  #L24d99c.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L24d9a2.  v9:= temp @kind object;
  #L24d9a4.  v9:= (`java.util.Collection`) v9 @kind object;
  #L24d9a8.  if v9 != 0 then goto L24d9b0;
  #L24d9ac.  v10:= 1I;
  #L24d9ae.  goto L24d9b2;
  #L24d9b0.  v10:= 0I;
  #L24d9b2.  if v8 == 0 then goto L24d9c2;
  #L24d9b6.  if v10 == 0 then goto L24d9c2;
  #L24d9ba.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L24d9c0.  return @kind void;
  #L24d9c2.  if v10 == 0 then goto L24d9c8;
  #L24d9c6.  goto L24d9d6;
  #L24d9c8.  call `onNext`(v2, v9) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L24d9ce.  v8:= 1L;
  #L24d9d2.  v0:= v0 + v8 @kind long;
  #L24d9d4.  goto L24d952;
  #L24d9d6.  v8:= lcmp(v0, v6);
  #L24d9da.  if v8 != 0 then goto L24da34;
  #L24d9de.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L24d9e2.  if v6 == 0 then goto L24d9ee;
  #L24d9e6.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L24d9ec.  return @kind void;
  #L24d9ee.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.done` @type ^`boolean` @kind boolean;
  #L24d9f2.  if v6 == 0 then goto L24da34;
  #L24d9f6.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24d9fa.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24da00.  v6:= temp @kind object;
  #L24da02.  if v6 == 0 then goto L24da20;
  #L24da06.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @kind virtual;
  #L24da0c.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24da10.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L24da16.  v0:= temp @kind object;
  #L24da18.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L24da1e.  return @kind void;
  #L24da20.  call temp:= `isEmpty`(v3) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L24da26.  v6:= temp;
  #L24da28.  if v6 == 0 then goto L24da34;
  #L24da2c.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L24da32.  return @kind void;
  #L24da34.  v11.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.emitted` @type ^`long` := v0 @kind wide;
  #L24da38.  v5:= -v5 @kind int;
  #L24da3a.  call temp:= `addAndGet`(v11, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L24da40.  v5:= temp;
  #L24da42.  if v5 != 0 then goto L24d946;
  #L24da46.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24da58.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.a` @kind object;
  #L24da5c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L24da62.  @monitorenter v3
  #L24da64.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` @kind object;
  #L24da68.  if v0 != 0 then goto L24da70;
  #L24da6c.  @monitorexit v3
  #L24da6e.  return @kind void;
  #L24da70.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L24da76.  v0:= temp @kind object;
  #L24da78.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L24da7e.  v0:= temp @kind object;
  #L24da80.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L24da86.  v1:= temp;
  #L24da88.  if v1 == 0 then goto L24daa4;
  #L24da8c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L24da92.  v1:= temp @kind object;
  #L24da94.  v1:= (`java.util.Collection`) v1 @kind object;
  #L24da98.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.queue` @type ^`io.reactivex.internal.queue.a` @kind object;
  #L24da9c.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L24daa2.  goto L24da80;
  #L24daa4.  v0:= 0I;
  #L24daa6.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` := v0 @kind object;
  #L24daaa.  @monitorexit v3
  #L24daac.  v0:= 1I;
  #L24daae.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L24dab2.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.drain:()V` @kind virtual;
  #L24dab8.  return @kind void;
  #L24daba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24dabc.  @monitorexit v3
  #L24dabe.  goto L24dac2;
  #L24dac0.  throw v0;
  #L24dac2.  goto L24dac0;
  catch `java.lang.Throwable` @[L24da64..L24daac] goto L24daba;
  catch `java.lang.Throwable` @[L24dabc..L24dabe] goto L24daba;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24dae8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L24daec.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L24daf2.  v0:= temp;
  #L24daf4.  if v0 == 0 then goto L24db20;
  #L24daf8.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.a` @kind object;
  #L24dafc.  call `dispose`(v2) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L24db02.  @monitorenter v1
  #L24db04.  v2:= 0I;
  #L24db06.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` := v2 @kind object;
  #L24db0a.  @monitorexit v1
  #L24db0c.  v2:= 1I;
  #L24db0e.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L24db12.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.drain:()V` @kind virtual;
  #L24db18.  goto L24db26;
  #L24db1a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24db1c.  @monitorexit v1
  #L24db1e.  throw v2;
  #L24db20.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24db26.  return @kind void;
  catch `java.lang.Throwable` @[L24db06..L24db0c] goto L24db1a;
  catch `java.lang.Throwable` @[L24db1c..L24db1e] goto L24db1a;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24db4c.  @monitorenter v2
  #L24db4e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` @kind object;
  #L24db52.  if v0 != 0 then goto L24db5a;
  #L24db56.  @monitorexit v2
  #L24db58.  return @kind void;
  #L24db5a.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L24db60.  v0:= temp @kind object;
  #L24db62.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L24db68.  v0:= temp @kind object;
  #L24db6a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L24db70.  v1:= temp;
  #L24db72.  if v1 == 0 then goto L24db8a;
  #L24db76.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L24db7c.  v1:= temp @kind object;
  #L24db7e.  v1:= (`java.util.Collection`) v1 @kind object;
  #L24db82.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24db88.  goto L24db6a;
  #L24db8a.  @monitorexit v2
  #L24db8c.  return @kind void;
  #L24db8e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24db90.  @monitorexit v2
  #L24db92.  goto L24db96;
  #L24db94.  throw v3;
  #L24db96.  goto L24db94;
  catch `java.lang.Throwable` @[L24db4e..L24db92] goto L24db8e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24dbb4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24dbb8.  call temp:= `setOnce`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L24dbbe.  v0:= temp;
  #L24dbc0.  if v0 == 0 then goto L24dbf2;
  #L24dbc4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber`;
  #L24dbc8.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;)V` @kind direct;
  #L24dbce.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.a` @kind object;
  #L24dbd2.  call temp:= `b`(v1, v0) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L24dbd8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferOpen` @type ^`n.b.b` @kind object;
  #L24dbdc.  call `subscribe`(v1, v0) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L24dbe2.  v0:= 9223372036854775807L;
  #L24dbec.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L24dbf2.  return @kind void;
}
procedure `void` `open`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.open:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24dc04.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferSupplier` @type ^`java.util.concurrent.Callable` @kind object;
  #L24dc08.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L24dc0e.  v0:= temp @kind object;
  #L24dc10.  v1:= "The bufferSupplier returned a null Collection" @kind object;
  #L24dc14.  call temp:= `e`(v0, v1) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L24dc1a.  v0:= temp @kind object;
  #L24dc1c.  v0:= (`java.util.Collection`) v0 @kind object;
  #L24dc20.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.bufferClose` @type ^`io.reactivex.d0.k` @kind object;
  #L24dc24.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L24dc2a.  v6:= temp @kind object;
  #L24dc2c.  v1:= "The bufferClose returned a null Publisher" @kind object;
  #L24dc30.  call temp:= `e`(v6, v1) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L24dc36.  v6:= temp @kind object;
  #L24dc38.  v6:= (`n.b.b`) v6 @kind object;
  #L24dc3c.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.index` @type ^`long` @kind wide;
  #L24dc40.  v3:= 1L;
  #L24dc44.  v3:= v3 + v1 @kind long;
  #L24dc46.  v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.index` @type ^`long` := v3 @kind wide;
  #L24dc4a.  @monitorenter v5
  #L24dc4c.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.buffers` @type ^`java.util.Map` @kind object;
  #L24dc50.  if v3 != 0 then goto L24dc58;
  #L24dc54.  @monitorexit v5
  #L24dc56.  return @kind void;
  #L24dc58.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L24dc5e.  v4:= temp @kind object;
  #L24dc60.  call temp:= `put`(v3, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L24dc66.  @monitorexit v5
  #L24dc68.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferCloseSubscriber`;
  #L24dc6c.  call `<init>`(v0, v5, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferCloseSubscriber;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;J)V` @kind direct;
  #L24dc72.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.a` @kind object;
  #L24dc76.  call temp:= `b`(v1, v0) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L24dc7c.  call `subscribe`(v6, v0) @signature `Ln/b/b;.subscribe:(Ln/b/c;)V` @kind interface;
  #L24dc82.  return @kind void;
  #L24dc84.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24dc86.  @monitorexit v5
  #L24dc88.  throw v6;
  #L24dc8a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24dc8c.  call `b`(v6) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24dc92.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24dc96.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24dc9c.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L24dca2.  return @kind void;
  catch `java.lang.Throwable` @[L24dc04..L24dc3c] goto L24dc8a;
  catch `java.lang.Throwable` @[L24dc4c..L24dc68] goto L24dc84;
  catch `java.lang.Throwable` @[L24dc86..L24dc88] goto L24dc84;
}
procedure `void` `openComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.openComplete:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber$BufferOpenSubscriber;)V` @AccessFlag  {
    temp;
    v0;

  #L24dcd4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.a` @kind object;
  #L24dcd8.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L24dcde.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.subscribers` @type ^`io.reactivex.disposables.a` @kind object;
  #L24dce2.  call temp:= `e`(v2) @signature `Lio/reactivex/disposables/a;.e:()I` @kind virtual;
  #L24dce8.  v2:= temp;
  #L24dcea.  if v2 != 0 then goto L24dd04;
  #L24dcee.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24dcf2.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24dcf8.  v2:= 1I;
  #L24dcfa.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L24dcfe.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.drain:()V` @kind virtual;
  #L24dd04.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24dd18.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L24dd1c.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L24dd22.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$BufferBoundarySubscriber;.drain:()V` @kind virtual;
  #L24dd28.  return @kind void;
}
