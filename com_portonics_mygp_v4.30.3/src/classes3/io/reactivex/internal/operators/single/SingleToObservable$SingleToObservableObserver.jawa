record `io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.DeferredScalarDisposable` @kind class, `io.reactivex.z` @kind interface {
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver` v0 @kind this, `io.reactivex.t` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$SingleToObservableObserver;.<init>:(Lio/reactivex/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L28a02c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.<init>:(Lio/reactivex/t;)V` @kind direct;
  #L28a032.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$SingleToObservableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28a044.  call `dispose`(v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.dispose:()V` @kind super;
  #L28a04a.  v0:= v1.`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L28a04e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L28a054.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$SingleToObservableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L28a068.  call `error`(v0, v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L28a06e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$SingleToObservableObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28a080.  v0:= v1.`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L28a084.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L28a08a.  v0:= temp;
  #L28a08c.  if v0 == 0 then goto L28a09e;
  #L28a090.  v1.`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L28a094.  v2:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L28a098.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L28a09e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$SingleToObservableObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L28a0b0.  call `complete`(v0, v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L28a0b6.  return @kind void;
}
