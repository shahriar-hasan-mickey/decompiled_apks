record `io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.done` @AccessFlag ;
  `io.reactivex.z` `io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.a0` `io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.source` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber` v0 @kind this, `io.reactivex.z` v1 @kind object, `io.reactivex.a0` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.<init>:(Lio/reactivex/z;Lio/reactivex/a0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2881b4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2881ba.  v0.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.downstream` @type ^`io.reactivex.z` := v1 @kind object;
  #L2881be.  v0.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.source` @type ^`io.reactivex.a0` := v2 @kind object;
  #L2881c2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2881d4.  v0:= v1.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2881d8.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L2881de.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2881e4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28818c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L288192.  v0:= temp @kind object;
  #L288194.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L288198.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L28819e.  v0:= temp;
  #L2881a0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2881f8.  v0:= v3.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.done` @type ^`boolean` @kind boolean;
  #L2881fc.  if v0 == 0 then goto L288202;
  #L288200.  return @kind void;
  #L288202.  v0:= 1I;
  #L288204.  v3.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L288208.  v0:= v3.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.source` @type ^`io.reactivex.a0` @kind object;
  #L28820c.  v1:= new `io.reactivex.internal.observers.n`;
  #L288210.  v2:= v3.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.downstream` @type ^`io.reactivex.z` @kind object;
  #L288214.  call `<init>`(v1, v3, v2) @signature `Lio/reactivex/internal/observers/n;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/z;)V` @kind direct;
  #L28821a.  call `b`(v0, v1) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L288220.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288234.  v0:= v1.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.done` @type ^`boolean` @kind boolean;
  #L288238.  if v0 == 0 then goto L288244;
  #L28823c.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L288242.  return @kind void;
  #L288244.  v0:= 1I;
  #L288246.  v1.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L28824a.  v0:= v1.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.downstream` @type ^`io.reactivex.z` @kind object;
  #L28824e.  call `onError`(v0, v2) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L288254.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L288268.  v1:= v0.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L28826c.  call `cancel`(v1) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L288272.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.onComplete:()V` @kind virtual;
  #L288278.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithPublisher$OtherSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28828c.  v0:= v2.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L288290.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L288296.  v0:= temp;
  #L288298.  if v0 == 0 then goto L2882ba;
  #L28829c.  v2.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L2882a0.  v0:= v2.`io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber.downstream` @type ^`io.reactivex.z` @kind object;
  #L2882a4.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/z;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L2882aa.  v0:= 9223372036854775807L;
  #L2882b4.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2882ba.  return @kind void;
}
