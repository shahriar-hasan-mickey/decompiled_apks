record `io.reactivex.internal.operators.single.SingleToObservable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.n` @kind class {
  `io.reactivex.a0` `io.reactivex.internal.operators.single.SingleToObservable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleToObservable` v0 @kind this, `io.reactivex.a0` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable;.<init>:(Lio/reactivex/a0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L28a0e4.  call `<init>`(v0) @signature `Lio/reactivex/n;.<init>:()V` @kind direct;
  #L28a0ea.  v0.`io.reactivex.internal.operators.single.SingleToObservable.b` @type ^`io.reactivex.a0` := v1 @kind object;
  #L28a0ee.  return @kind void;
}
procedure `io.reactivex.z` `w`(`io.reactivex.t` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable;.w:(Lio/reactivex/t;)Lio/reactivex/z;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L28a0c8.  v0:= new `io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver`;
  #L28a0cc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$SingleToObservableObserver;.<init>:(Lio/reactivex/t;)V` @kind direct;
  #L28a0d2.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleToObservable` v1 @kind this, `io.reactivex.t` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable;.subscribeActual:(Lio/reactivex/t;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28a100.  v0:= v1.`io.reactivex.internal.operators.single.SingleToObservable.b` @type ^`io.reactivex.a0` @kind object;
  #L28a104.  call temp:= `w`(v2) @signature `Lio/reactivex/internal/operators/single/SingleToObservable;.w:(Lio/reactivex/t;)Lio/reactivex/z;` @kind static;
  #L28a10a.  v2:= temp @kind object;
  #L28a10c.  call `b`(v0, v2) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L28a112.  return @kind void;
}
