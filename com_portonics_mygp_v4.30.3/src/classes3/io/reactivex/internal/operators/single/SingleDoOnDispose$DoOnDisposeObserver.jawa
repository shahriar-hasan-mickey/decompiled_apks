record `io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.z` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.z` `io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver` v0 @kind this, `io.reactivex.z` v1 @kind object, `io.reactivex.d0.a` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$DoOnDisposeObserver;.<init>:(Lio/reactivex/z;Lio/reactivex/d0/a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2884e0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2884e6.  v0.`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.downstream` @type ^`io.reactivex.z` := v1 @kind object;
  #L2884ea.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2884f0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$DoOnDisposeObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288504.  v0:= 0I;
  #L288506.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L28850c.  v0:= temp @kind object;
  #L28850e.  v0:= (`io.reactivex.d0.a`) v0 @kind object;
  #L288512.  if v0 == 0 then goto L288536;
  #L288516.  call `run`(v0) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L28851c.  goto L28852c;
  #L28851e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L288520.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L288526.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28852c.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L288530.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L288536.  return @kind void;
  catch `java.lang.Throwable` @[L288516..L28851c] goto L28851e;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$DoOnDisposeObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2884c0.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L2884c4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L2884ca.  v0:= temp;
  #L2884cc.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$DoOnDisposeObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288554.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L288558.  call `onError`(v0, v2) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L28855e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$DoOnDisposeObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288570.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L288574.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L28857a.  v0:= temp;
  #L28857c.  if v0 == 0 then goto L28858e;
  #L288580.  v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L288584.  v2:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L288588.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/z;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L28858e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDoOnDispose$DoOnDisposeObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2885a0.  v0:= v1.`io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L2885a4.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L2885aa.  return @kind void;
}
