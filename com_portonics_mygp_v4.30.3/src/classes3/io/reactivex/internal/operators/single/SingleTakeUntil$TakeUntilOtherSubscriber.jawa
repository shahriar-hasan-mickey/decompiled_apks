record `io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface {
  `io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` `io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` v0 @kind this, `io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilOtherSubscriber;.<init>:(Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L289b88.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L289b8e.  v0.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber.parent` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` := v1 @kind object;
  #L289b92.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilOtherSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L289ba4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L289baa.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilOtherSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L289bbc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L289bc2.  v0:= temp @kind object;
  #L289bc4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L289bc8.  if v0 == v1 then goto L289be6;
  #L289bcc.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L289bd2.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber.parent` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` @kind object;
  #L289bd6.  v1:= new `java.util.concurrent.CancellationException`;
  #L289bda.  call `<init>`(v1) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L289be0.  call `otherError`(v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.otherError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L289be6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilOtherSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L289bf8.  v0:= v1.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber.parent` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` @kind object;
  #L289bfc.  call `otherError`(v0, v2) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.otherError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L289c02.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilOtherSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L289c14.  call temp:= `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L289c1a.  v2:= temp;
  #L289c1c.  if v2 == 0 then goto L289c34;
  #L289c20.  v2:= v1.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber.parent` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` @kind object;
  #L289c24.  v0:= new `java.util.concurrent.CancellationException`;
  #L289c28.  call `<init>`(v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L289c2e.  call `otherError`(v2, v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.otherError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L289c34.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilOtherSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L289c48.  v0:= 9223372036854775807L;
  #L289c52.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;J)Z` @kind static;
  #L289c58.  return @kind void;
}
