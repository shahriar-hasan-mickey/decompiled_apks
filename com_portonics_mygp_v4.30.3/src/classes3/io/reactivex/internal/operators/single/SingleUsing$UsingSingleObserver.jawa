record `io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.z` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.d0.g` `io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.disposer` @AccessFlag FINAL;
  `io.reactivex.z` `io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.downstream` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.eager` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver` v0 @kind this, `io.reactivex.z` v1 @kind object, `java.lang.Object` v2 @kind object, `boolean` v3 , `io.reactivex.d0.g` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.<init>:(Lio/reactivex/z;Ljava/lang/Object;ZLio/reactivex/d0/g;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L28a23c.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L28a242.  v0.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.downstream` @type ^`io.reactivex.z` := v1 @kind object;
  #L28a246.  v0.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.eager` @type ^`boolean` := v3 @kind boolean;
  #L28a24a.  v0.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.disposer` @type ^`io.reactivex.d0.g` := v4 @kind object;
  #L28a24e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28a260.  v0:= v1.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L28a264.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L28a26a.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L28a26e.  v1.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.upstream` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L28a272.  call `disposeAfter`(v1) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.disposeAfter:()V` @kind virtual;
  #L28a278.  return @kind void;
}
procedure `void` `disposeAfter`(`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.disposeAfter:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L28a28c.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L28a292.  v0:= temp @kind object;
  #L28a294.  if v0 == v2 then goto L28a2b2;
  #L28a298.  v1:= v2.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.disposer` @type ^`io.reactivex.d0.g` @kind object;
  #L28a29c.  call `accept`(v1, v0) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L28a2a2.  goto L28a2b2;
  #L28a2a4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28a2a6.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28a2ac.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28a2b2.  return @kind void;
  catch `java.lang.Throwable` @[L28a298..L28a2a2] goto L28a2a4;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28a21c.  v0:= v1.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L28a220.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L28a226.  v0:= temp;
  #L28a228.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L28a2d0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L28a2d4.  v4.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.upstream` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L28a2d8.  v0:= v4.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.eager` @type ^`boolean` @kind boolean;
  #L28a2dc.  if v0 == 0 then goto L28a322;
  #L28a2e0.  call temp:= `getAndSet`(v4, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L28a2e6.  v0:= temp @kind object;
  #L28a2e8.  if v0 == v4 then goto L28a320;
  #L28a2ec.  v1:= v4.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.disposer` @type ^`io.reactivex.d0.g` @kind object;
  #L28a2f0.  call `accept`(v1, v0) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L28a2f6.  goto L28a322;
  #L28a2f8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28a2fa.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28a300.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L28a304.  v2:= 2I;
  #L28a306.  v2:= new `java.lang.Throwable`[v2];
  #L28a30a.  v3:= 0I;
  #L28a30c.  v2[v3]:= v5 @kind object;
  #L28a310.  v5:= 1I;
  #L28a312.  v2[v5]:= v0 @kind object;
  #L28a316.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L28a31c.  v5:= v1 @kind object;
  #L28a31e.  goto L28a322;
  #L28a320.  return @kind void;
  #L28a322.  v0:= v4.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L28a326.  call `onError`(v0, v5) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L28a32c.  v5:= v4.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.eager` @type ^`boolean` @kind boolean;
  #L28a330.  if v5 != 0 then goto L28a33a;
  #L28a334.  call `disposeAfter`(v4) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.disposeAfter:()V` @kind virtual;
  #L28a33a.  return @kind void;
  catch `java.lang.Throwable` @[L28a2ec..L28a2f6] goto L28a2f8;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28a358.  v0:= v1.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L28a35c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L28a362.  v0:= temp;
  #L28a364.  if v0 == 0 then goto L28a376;
  #L28a368.  v1.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L28a36c.  v2:= v1.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L28a370.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/z;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L28a376.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28a388.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L28a38c.  v2.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.upstream` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L28a390.  v0:= v2.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.eager` @type ^`boolean` @kind boolean;
  #L28a394.  if v0 == 0 then goto L28a3c4;
  #L28a398.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L28a39e.  v0:= temp @kind object;
  #L28a3a0.  if v0 == v2 then goto L28a3c2;
  #L28a3a4.  v1:= v2.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.disposer` @type ^`io.reactivex.d0.g` @kind object;
  #L28a3a8.  call `accept`(v1, v0) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L28a3ae.  goto L28a3c4;
  #L28a3b0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28a3b2.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28a3b8.  v0:= v2.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L28a3bc.  call `onError`(v0, v3) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L28a3c2.  return @kind void;
  #L28a3c4.  v0:= v2.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L28a3c8.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L28a3ce.  v3:= v2.`io.reactivex.internal.operators.single.SingleUsing$UsingSingleObserver.eager` @type ^`boolean` @kind boolean;
  #L28a3d2.  if v3 != 0 then goto L28a3dc;
  #L28a3d6.  call `disposeAfter`(v2) @signature `Lio/reactivex/internal/operators/single/SingleUsing$UsingSingleObserver;.disposeAfter:()V` @kind virtual;
  #L28a3dc.  return @kind void;
  catch `java.lang.Throwable` @[L28a3a4..L28a3ae] goto L28a3b0;
}
