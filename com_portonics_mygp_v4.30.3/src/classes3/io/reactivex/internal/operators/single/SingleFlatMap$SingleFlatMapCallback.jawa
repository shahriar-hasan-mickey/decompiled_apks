record `io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.z` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.z` `io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback.mapper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback` v0 @kind this, `io.reactivex.z` v1 @kind object, `io.reactivex.d0.k` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMap$SingleFlatMapCallback;.<init>:(Lio/reactivex/z;Lio/reactivex/d0/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L288844.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28884a.  v0.`io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback.downstream` @type ^`io.reactivex.z` := v1 @kind object;
  #L28884e.  v0.`io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L288852.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMap$SingleFlatMapCallback;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L288864.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28886a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMap$SingleFlatMapCallback;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28881c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L288822.  v0:= temp @kind object;
  #L288824.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L288828.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L28882e.  v0:= temp;
  #L288830.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMap$SingleFlatMapCallback;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28887c.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback.downstream` @type ^`io.reactivex.z` @kind object;
  #L288880.  call `onError`(v0, v2) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L288886.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMap$SingleFlatMapCallback;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L288898.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L28889e.  v1:= temp;
  #L2888a0.  if v1 == 0 then goto L2888ae;
  #L2888a4.  v1:= v0.`io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback.downstream` @type ^`io.reactivex.z` @kind object;
  #L2888a8.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/z;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L2888ae.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMap$SingleFlatMapCallback;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2888c0.  v0:= v2.`io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L2888c4.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2888ca.  v3:= temp @kind object;
  #L2888cc.  v0:= "The single returned by the mapper is null" @kind object;
  #L2888d0.  call temp:= `e`(v3, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2888d6.  v3:= temp @kind object;
  #L2888d8.  v3:= (`io.reactivex.a0`) v3 @kind object;
  #L2888dc.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/single/SingleFlatMap$SingleFlatMapCallback;.isDisposed:()Z` @kind virtual;
  #L2888e2.  v0:= temp;
  #L2888e4.  if v0 != 0 then goto L2888fc;
  #L2888e8.  v0:= new `io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback$a`;
  #L2888ec.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback.downstream` @type ^`io.reactivex.z` @kind object;
  #L2888f0.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMap$SingleFlatMapCallback$a;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/z;)V` @kind direct;
  #L2888f6.  call `b`(v3, v0) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L2888fc.  return @kind void;
  #L2888fe.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L288900.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L288906.  v0:= v2.`io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback.downstream` @type ^`io.reactivex.z` @kind object;
  #L28890a.  call `onError`(v0, v3) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L288910.  return @kind void;
  catch `java.lang.Throwable` @[L2888c0..L2888dc] goto L2888fe;
}
