record `io.reactivex.internal.operators.single.SingleCreate$Emitter` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.z` `io.reactivex.internal.operators.single.SingleCreate$Emitter.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleCreate$Emitter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v0 @kind this, `io.reactivex.z` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.<init>:(Lio/reactivex/z;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L287e84.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L287e8a.  v0.`io.reactivex.internal.operators.single.SingleCreate$Emitter.downstream` @type ^`io.reactivex.z` := v1 @kind object;
  #L287e8e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L287ea0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L287ea6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L287da0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L287da6.  v0:= temp @kind object;
  #L287da8.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L287dac.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L287db2.  v0:= temp;
  #L287db4.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L287eb8.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L287ebe.  v0:= temp;
  #L287ec0.  if v0 != 0 then goto L287eca;
  #L287ec4.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L287eca.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L287edc.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L287ee2.  v0:= temp @kind object;
  #L287ee4.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L287ee8.  if v0 == v1 then goto L287f3e;
  #L287eec.  call temp:= `getAndSet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L287ef2.  v0:= temp @kind object;
  #L287ef4.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L287ef8.  if v0 == v1 then goto L287f3e;
  #L287efc.  if v4 != 0 then goto L287f1a;
  #L287f00.  v4:= v3.`io.reactivex.internal.operators.single.SingleCreate$Emitter.downstream` @type ^`io.reactivex.z` @kind object;
  #L287f04.  v1:= new `java.lang.NullPointerException`;
  #L287f08.  v2:= "onSuccess called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L287f0c.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L287f12.  call `onError`(v4, v1) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L287f18.  goto L287f24;
  #L287f1a.  v1:= v3.`io.reactivex.internal.operators.single.SingleCreate$Emitter.downstream` @type ^`io.reactivex.z` @kind object;
  #L287f1e.  call `onSuccess`(v1, v4) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L287f24.  if v0 == 0 then goto L287f3e;
  #L287f28.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L287f2e.  goto L287f3e;
  #L287f30.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L287f32.  if v0 == 0 then goto L287f3c;
  #L287f36.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L287f3c.  throw v4;
  #L287f3e.  return @kind void;
  catch `java.lang.Throwable` @[L287f00..L287f24] goto L287f30;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v1 @kind this, `io.reactivex.d0.f` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.setCancellable:(Lio/reactivex/d0/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L287f5c.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L287f60.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/d0/f;)V` @kind direct;
  #L287f66.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.setDisposable:(Lio/reactivex/disposables/b;)V` @kind virtual;
  #L287f6c.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.setDisposable:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L287f80.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L287f86.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v3 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L287e40.  v0:= 2I;
  #L287e42.  v0:= new `java.lang.Object`[v0];
  #L287e46.  v1:= constclass @type ^`io.reactivex.internal.operators.single.SingleCreate$Emitter` @kind object;
  #L287e4a.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L287e50.  v1:= temp @kind object;
  #L287e52.  v2:= 0I;
  #L287e54.  v0[v2]:= v1 @kind object;
  #L287e58.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.toString:()Ljava/lang/String;` @kind super;
  #L287e5e.  v1:= temp @kind object;
  #L287e60.  v2:= 1I;
  #L287e62.  v0[v2]:= v1 @kind object;
  #L287e66.  v1:= "%s{%s}" @kind object;
  #L287e6a.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L287e70.  v0:= temp @kind object;
  #L287e72.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.single.SingleCreate$Emitter` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCreate$Emitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L287dc8.  if v3 != 0 then goto L287dda;
  #L287dcc.  v3:= new `java.lang.NullPointerException`;
  #L287dd0.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L287dd4.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L287dda.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L287de0.  v0:= temp @kind object;
  #L287de2.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L287de6.  if v0 == v1 then goto L287e20;
  #L287dea.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L287df0.  v0:= temp @kind object;
  #L287df2.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L287df6.  if v0 == v1 then goto L287e20;
  #L287dfa.  v1:= v2.`io.reactivex.internal.operators.single.SingleCreate$Emitter.downstream` @type ^`io.reactivex.z` @kind object;
  #L287dfe.  call `onError`(v1, v3) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L287e04.  if v0 == 0 then goto L287e0e;
  #L287e08.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L287e0e.  v3:= 1I;
  #L287e10.  return v3;
  #L287e12.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L287e14.  if v0 == 0 then goto L287e1e;
  #L287e18.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L287e1e.  throw v3;
  #L287e20.  v3:= 0I;
  #L287e22.  return v3;
  catch `java.lang.Throwable` @[L287dfa..L287e04] goto L287e12;
}
