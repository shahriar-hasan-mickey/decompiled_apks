record `io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.z` @kind interface, `io.reactivex.disposables.b` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.z` `io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.a0` `io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver.source` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver.task` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver` v0 @kind this, `io.reactivex.z` v1 @kind object, `io.reactivex.a0` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleSubscribeOn$SubscribeOnObserver;.<init>:(Lio/reactivex/z;Lio/reactivex/a0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L289954.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28995a.  v0.`io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver.downstream` @type ^`io.reactivex.z` := v1 @kind object;
  #L28995e.  v0.`io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver.source` @type ^`io.reactivex.a0` := v2 @kind object;
  #L289962.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L289966.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L28996c.  v0.`io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L289970.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleSubscribeOn$SubscribeOnObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L289984.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28998a.  v0:= v1.`io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver.task` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L28998e.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L289994.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleSubscribeOn$SubscribeOnObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28992c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L289932.  v0:= temp @kind object;
  #L289934.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L289938.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L28993e.  v0:= temp;
  #L289940.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleSubscribeOn$SubscribeOnObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2899a8.  v0:= v1.`io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L2899ac.  call `onError`(v0, v2) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2899b2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleSubscribeOn$SubscribeOnObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L2899c4.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L2899ca.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleSubscribeOn$SubscribeOnObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2899dc.  v0:= v1.`io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L2899e0.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L2899e6.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleSubscribeOn$SubscribeOnObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2899f8.  v0:= v1.`io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver.source` @type ^`io.reactivex.a0` @kind object;
  #L2899fc.  call `b`(v0, v1) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L289a02.  return @kind void;
}
