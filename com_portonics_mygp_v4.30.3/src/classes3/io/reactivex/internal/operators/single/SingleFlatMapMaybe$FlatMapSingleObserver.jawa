record `io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.z` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.j` `io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.mapper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver` v0 @kind this, `io.reactivex.j` v1 @kind object, `io.reactivex.d0.k` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.<init>:(Lio/reactivex/j;Lio/reactivex/d0/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2890c8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2890ce.  v0.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.downstream` @type ^`io.reactivex.j` := v1 @kind object;
  #L2890d2.  v0.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L2890d6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L2890e8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2890ee.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2890a0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2890a6.  v0:= temp @kind object;
  #L2890a8.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2890ac.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L2890b2.  v0:= temp;
  #L2890b4.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L289100.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L289104.  call `onError`(v0, v2) @signature `Lio/reactivex/j;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L28910a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L28911c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L289122.  v1:= temp;
  #L289124.  if v1 == 0 then goto L289132;
  #L289128.  v1:= v0.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L28912c.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/j;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L289132.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L289144.  v0:= v2.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L289148.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L28914e.  v3:= temp @kind object;
  #L289150.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L289154.  call temp:= `e`(v3, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L28915a.  v3:= temp @kind object;
  #L28915c.  v3:= (`io.reactivex.k`) v3 @kind object;
  #L289160.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.isDisposed:()Z` @kind virtual;
  #L289166.  v0:= temp;
  #L289168.  if v0 != 0 then goto L289180;
  #L28916c.  v0:= new `io.reactivex.internal.operators.single.c`;
  #L289170.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver.downstream` @type ^`io.reactivex.j` @kind object;
  #L289174.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/single/c;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/j;)V` @kind direct;
  #L28917a.  call `b`(v3, v0) @signature `Lio/reactivex/k;.b:(Lio/reactivex/j;)V` @kind interface;
  #L289180.  return @kind void;
  #L289182.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L289184.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28918a.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$FlatMapSingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L289190.  return @kind void;
  catch `java.lang.Throwable` @[L289144..L289160] goto L289182;
}
