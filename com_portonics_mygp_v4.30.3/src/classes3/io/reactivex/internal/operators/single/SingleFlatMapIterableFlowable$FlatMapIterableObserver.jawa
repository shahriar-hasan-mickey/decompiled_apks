record `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.z` @kind interface {
  `boolean` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.it` @AccessFlag VOLATILE;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.mapper` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.outputFused` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.requested` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v0 @kind this, `n.b.c` v1 @kind object, `io.reactivex.d0.k` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.<init>:(Ln/b/c;Lio/reactivex/d0/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L288ac4.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L288aca.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`n.b.c` := v1 @kind object;
  #L288ace.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L288ad2.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L288ad6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L288adc.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L288ae0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288af4.  v0:= 1I;
  #L288af6.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L288afa.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L288afe.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L288b04.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L288b08.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L288b0c.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288b20.  v0:= 0I;
  #L288b22.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v0 @kind object;
  #L288b26.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v11 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L288b38.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L288b3e.  v0:= temp;
  #L288b40.  if v0 == 0 then goto L288b46;
  #L288b44.  return @kind void;
  #L288b46.  v0:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`n.b.c` @kind object;
  #L288b4a.  v1:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L288b4e.  v2:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.outputFused` @type ^`boolean` @kind boolean;
  #L288b52.  if v2 == 0 then goto L288b6a;
  #L288b56.  if v1 == 0 then goto L288b6a;
  #L288b5a.  v1:= 0I;
  #L288b5c.  call `onNext`(v0, v1) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L288b62.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L288b68.  return @kind void;
  #L288b6a.  v2:= 1I;
  #L288b6c.  if v1 == 0 then goto L288c1e;
  #L288b70.  v3:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L288b74.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L288b7a.  v3:= temp @kind wide;
  #L288b7c.  v5:= 9223372036854775807L;
  #L288b86.  v7:= lcmp(v3, v5);
  #L288b8a.  if v7 != 0 then goto L288b96;
  #L288b8e.  call `slowPath`(v11, v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.slowPath:(Ln/b/c;Ljava/util/Iterator;)V` @kind virtual;
  #L288b94.  return @kind void;
  #L288b96.  v5:= 0L;
  #L288b9a.  v7:= v5 @kind wide;
  #L288b9c.  v9:= lcmp(v7, v3);
  #L288ba0.  if v9 == 0 then goto L288c0c;
  #L288ba4.  v9:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L288ba8.  if v9 == 0 then goto L288bae;
  #L288bac.  return @kind void;
  #L288bae.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L288bb4.  v9:= temp @kind object;
  #L288bb6.  v10:= "The iterator returned a null value" @kind object;
  #L288bba.  call temp:= `e`(v9, v10) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L288bc0.  v9:= temp @kind object;
  #L288bc2.  call `onNext`(v0, v9) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L288bc8.  v9:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L288bcc.  if v9 == 0 then goto L288bd2;
  #L288bd0.  return @kind void;
  #L288bd2.  v9:= 1L;
  #L288bd6.  v7:= v7 + v9 @kind long;
  #L288bd8.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L288bde.  v9:= temp;
  #L288be0.  if v9 != 0 then goto L288b9c;
  #L288be4.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L288bea.  return @kind void;
  #L288bec.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L288bee.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L288bf4.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L288bfa.  return @kind void;
  #L288bfc.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L288bfe.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L288c04.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L288c0a.  return @kind void;
  #L288c0c.  v3:= lcmp(v7, v5);
  #L288c10.  if v3 == 0 then goto L288c1e;
  #L288c14.  v3:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L288c18.  call temp:= `e`(v3, v7) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L288c1e.  v2:= -v2 @kind int;
  #L288c20.  call temp:= `addAndGet`(v11, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L288c26.  v2:= temp;
  #L288c28.  if v2 != 0 then goto L288c2e;
  #L288c2c.  return @kind void;
  #L288c2e.  if v1 != 0 then goto L288b6c;
  #L288c32.  v1:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L288c36.  goto L288b6c;
  catch `java.lang.Throwable` @[L288bae..L288bc2] goto L288bfc;
  catch `java.lang.Throwable` @[L288bd8..L288be0] goto L288bec;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288a3c.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L288a40.  if v0 != 0 then goto L288a48;
  #L288a44.  v0:= 1I;
  #L288a46.  goto L288a4a;
  #L288a48.  v0:= 0I;
  #L288a4a.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288c60.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L288c64.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L288c68.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`n.b.c` @kind object;
  #L288c6c.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L288c72.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288c84.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L288c88.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L288c8e.  v0:= temp;
  #L288c90.  if v0 == 0 then goto L288ca2;
  #L288c94.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L288c98.  v2:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`n.b.c` @kind object;
  #L288c9c.  call `onSubscribe`(v2, v1) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L288ca2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288cb4.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L288cb8.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L288cbe.  v2:= temp @kind object;
  #L288cc0.  v2:= (`java.lang.Iterable`) v2 @kind object;
  #L288cc4.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L288cca.  v2:= temp @kind object;
  #L288ccc.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L288cd2.  v0:= temp;
  #L288cd4.  if v0 != 0 then goto L288ce4;
  #L288cd8.  v2:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`n.b.c` @kind object;
  #L288cdc.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L288ce2.  return @kind void;
  #L288ce4.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v2 @kind object;
  #L288ce8.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.drain:()V` @kind virtual;
  #L288cee.  return @kind void;
  #L288cf0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L288cf2.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L288cf8.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.downstream` @type ^`n.b.c` @kind object;
  #L288cfc.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L288d02.  return @kind void;
  catch `java.lang.Throwable` @[L288cb4..L288cd4] goto L288cf0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L288a80.  v0:= v4.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L288a84.  v1:= 0I;
  #L288a86.  if v0 == 0 then goto L288ab0;
  #L288a8a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L288a90.  v2:= temp @kind object;
  #L288a92.  v3:= "The iterator returned a null value" @kind object;
  #L288a96.  call temp:= `e`(v2, v3) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L288a9c.  v2:= temp @kind object;
  #L288a9e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L288aa4.  v0:= temp;
  #L288aa6.  if v0 != 0 then goto L288aae;
  #L288aaa.  v4.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v1 @kind object;
  #L288aae.  return v2 @kind object;
  #L288ab0.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288d20.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L288d26.  v0:= temp;
  #L288d28.  if v0 == 0 then goto L288d3c;
  #L288d2c.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L288d30.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L288d36.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.drain:()V` @kind virtual;
  #L288d3c.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288a5c.  v0:= 2I;
  #L288a5e.  v2:= v2 ^& v0 @kind int;
  #L288a60.  if v2 == 0 then goto L288a6c;
  #L288a64.  v2:= 1I;
  #L288a66.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L288a6a.  return v0;
  #L288a6c.  v2:= 0I;
  #L288a6e.  return v2;
}
procedure `void` `slowPath`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver` v1 @kind this, `n.b.c` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$FlatMapIterableObserver;.slowPath:(Ln/b/c;Ljava/util/Iterator;)V` @AccessFlag  {
    temp;
    v0;

  #L288d50.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L288d54.  if v0 == 0 then goto L288d5a;
  #L288d58.  return @kind void;
  #L288d5a.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L288d60.  v0:= temp @kind object;
  #L288d62.  call `onNext`(v2, v0) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L288d68.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L288d6c.  if v0 == 0 then goto L288d72;
  #L288d70.  return @kind void;
  #L288d72.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L288d78.  v0:= temp;
  #L288d7a.  if v0 != 0 then goto L288d50;
  #L288d7e.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L288d84.  return @kind void;
  #L288d86.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L288d88.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L288d8e.  call `onError`(v2, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L288d94.  return @kind void;
  #L288d96.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L288d98.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L288d9e.  call `onError`(v2, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L288da4.  return @kind void;
  catch `java.lang.Throwable` @[L288d5a..L288d62] goto L288d96;
  catch `java.lang.Throwable` @[L288d72..L288d7a] goto L288d86;
}
