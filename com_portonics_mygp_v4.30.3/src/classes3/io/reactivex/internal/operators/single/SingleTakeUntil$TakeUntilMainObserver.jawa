record `io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.z` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.z` `io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` `io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.other` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` v0 @kind this, `io.reactivex.z` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.<init>:(Lio/reactivex/z;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L289a3c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L289a42.  v0.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.z` := v1 @kind object;
  #L289a46.  v1:= new `io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber`;
  #L289a4a.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilOtherSubscriber;.<init>:(Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;)V` @kind direct;
  #L289a50.  v0.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` := v1 @kind object;
  #L289a54.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L289a68.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L289a6e.  v0:= v1.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` @kind object;
  #L289a72.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilOtherSubscriber;.dispose:()V` @kind virtual;
  #L289a78.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L289a14.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L289a1a.  v0:= temp @kind object;
  #L289a1c.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L289a20.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L289a26.  v0:= temp;
  #L289a28.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L289a8c.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` @kind object;
  #L289a90.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilOtherSubscriber;.dispose:()V` @kind virtual;
  #L289a96.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L289a9c.  v0:= temp @kind object;
  #L289a9e.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L289aa2.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L289aa6.  if v0 == v1 then goto L289ac6;
  #L289aaa.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L289ab0.  v0:= temp @kind object;
  #L289ab2.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L289ab6.  if v0 == v1 then goto L289ac6;
  #L289aba.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L289abe.  call `onError`(v0, v3) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L289ac4.  return @kind void;
  #L289ac6.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L289acc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L289ae0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L289ae6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L289af8.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.other` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber` @kind object;
  #L289afc.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilOtherSubscriber;.dispose:()V` @kind virtual;
  #L289b02.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L289b06.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L289b0c.  v1:= temp @kind object;
  #L289b0e.  v1:= (`io.reactivex.disposables.b`) v1 @kind object;
  #L289b12.  if v1 == v0 then goto L289b20;
  #L289b16.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L289b1a.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L289b20.  return @kind void;
}
procedure `void` `otherError`(`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$TakeUntilMainObserver;.otherError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L289b34.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L289b3a.  v0:= temp @kind object;
  #L289b3c.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L289b40.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L289b44.  if v0 == v1 then goto L289b6e;
  #L289b48.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L289b4e.  v0:= temp @kind object;
  #L289b50.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L289b54.  if v0 == v1 then goto L289b6e;
  #L289b58.  if v0 == 0 then goto L289b62;
  #L289b5c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L289b62.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L289b66.  call `onError`(v0, v3) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L289b6c.  return @kind void;
  #L289b6e.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L289b74.  return @kind void;
}
