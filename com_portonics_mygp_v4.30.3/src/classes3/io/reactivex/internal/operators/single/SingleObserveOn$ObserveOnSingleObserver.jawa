record `io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.z` @kind interface, `io.reactivex.disposables.b` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.z` `io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.error` @AccessFlag ;
  `io.reactivex.x` `io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.scheduler` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.value` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver` v0 @kind this, `io.reactivex.z` v1 @kind object, `io.reactivex.x` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$ObserveOnSingleObserver;.<init>:(Lio/reactivex/z;Lio/reactivex/x;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2896d8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2896de.  v0.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.downstream` @type ^`io.reactivex.z` := v1 @kind object;
  #L2896e2.  v0.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.scheduler` @type ^`io.reactivex.x` := v2 @kind object;
  #L2896e6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$ObserveOnSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L2896f8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2896fe.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$ObserveOnSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2896b0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2896b6.  v0:= temp @kind object;
  #L2896b8.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2896bc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L2896c2.  v0:= temp;
  #L2896c4.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$ObserveOnSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L289710.  v0.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L289714.  v1:= v0.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.scheduler` @type ^`io.reactivex.x` @kind object;
  #L289718.  call temp:= `c`(v1, v0) @signature `Lio/reactivex/x;.c:(Ljava/lang/Runnable;)Lio/reactivex/disposables/b;` @kind virtual;
  #L28971e.  v1:= temp @kind object;
  #L289720.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L289726.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$ObserveOnSingleObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L289738.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L28973e.  v1:= temp;
  #L289740.  if v1 == 0 then goto L28974e;
  #L289744.  v1:= v0.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L289748.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/z;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L28974e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$ObserveOnSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L289760.  v0.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.value` @type ^`java.lang.Object` := v1 @kind object;
  #L289764.  v1:= v0.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.scheduler` @type ^`io.reactivex.x` @kind object;
  #L289768.  call temp:= `c`(v1, v0) @signature `Lio/reactivex/x;.c:(Ljava/lang/Runnable;)Lio/reactivex/disposables/b;` @kind virtual;
  #L28976e.  v1:= temp @kind object;
  #L289770.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L289776.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$ObserveOnSingleObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L289788.  v0:= v2.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L28978c.  if v0 == 0 then goto L28979c;
  #L289790.  v1:= v2.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L289794.  call `onError`(v1, v0) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L28979a.  goto L2897aa;
  #L28979c.  v0:= v2.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L2897a0.  v1:= v2.`io.reactivex.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver.value` @type ^`java.lang.Object` @kind object;
  #L2897a4.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L2897aa.  return @kind void;
}
