record `io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.z` @kind interface {
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver` v0 @kind this, `n.b.c` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$SingleToFlowableObserver;.<init>:(Ln/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L289f48.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Ln/b/c;)V` @kind direct;
  #L289f4e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$SingleToFlowableObserver;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L289f60.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L289f66.  v0:= v1.`io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L289f6a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L289f70.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$SingleToFlowableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L289f84.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L289f88.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L289f8e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$SingleToFlowableObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L289fa0.  v0:= v1.`io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L289fa4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L289faa.  v0:= temp;
  #L289fac.  if v0 == 0 then goto L289fbe;
  #L289fb0.  v1.`io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L289fb4.  v2:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L289fb8.  call `onSubscribe`(v2, v1) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L289fbe.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$SingleToFlowableObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L289fd0.  call `complete`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L289fd6.  return @kind void;
}
