record `io.reactivex.internal.operators.single.SingleToFlowable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.e` @kind class {
  `io.reactivex.a0` `io.reactivex.internal.operators.single.SingleToFlowable.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleToFlowable` v0 @kind this, `io.reactivex.a0` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable;.<init>:(Lio/reactivex/a0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L289fe8.  call `<init>`(v0) @signature `Lio/reactivex/e;.<init>:()V` @kind direct;
  #L289fee.  v0.`io.reactivex.internal.operators.single.SingleToFlowable.c` @type ^`io.reactivex.a0` := v1 @kind object;
  #L289ff2.  return @kind void;
}
procedure `void` `H`(`io.reactivex.internal.operators.single.SingleToFlowable` v2 @kind this, `n.b.c` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable;.H:(Ln/b/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28a004.  v0:= v2.`io.reactivex.internal.operators.single.SingleToFlowable.c` @type ^`io.reactivex.a0` @kind object;
  #L28a008.  v1:= new `io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver`;
  #L28a00c.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$SingleToFlowableObserver;.<init>:(Ln/b/c;)V` @kind direct;
  #L28a012.  call `b`(v0, v1) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L28a018.  return @kind void;
}
