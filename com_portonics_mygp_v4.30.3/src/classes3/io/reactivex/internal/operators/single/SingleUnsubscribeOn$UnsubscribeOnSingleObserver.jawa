record `io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.z` @kind interface, `io.reactivex.disposables.b` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.z` `io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver.ds` @AccessFlag ;
  `io.reactivex.x` `io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver.scheduler` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver` v0 @kind this, `io.reactivex.z` v1 @kind object, `io.reactivex.x` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUnsubscribeOn$UnsubscribeOnSingleObserver;.<init>:(Lio/reactivex/z;Lio/reactivex/x;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L28a14c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28a152.  v0.`io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver.downstream` @type ^`io.reactivex.z` := v1 @kind object;
  #L28a156.  v0.`io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver.scheduler` @type ^`io.reactivex.x` := v2 @kind object;
  #L28a15a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUnsubscribeOn$UnsubscribeOnSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28a16c.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L28a170.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L28a176.  v1:= temp @kind object;
  #L28a178.  v1:= (`io.reactivex.disposables.b`) v1 @kind object;
  #L28a17c.  if v1 == v0 then goto L28a18e;
  #L28a180.  v2.`io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver.ds` @type ^`io.reactivex.disposables.b` := v1 @kind object;
  #L28a184.  v0:= v2.`io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver.scheduler` @type ^`io.reactivex.x` @kind object;
  #L28a188.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/x;.c:(Ljava/lang/Runnable;)Lio/reactivex/disposables/b;` @kind virtual;
  #L28a18e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUnsubscribeOn$UnsubscribeOnSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28a124.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28a12a.  v0:= temp @kind object;
  #L28a12c.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L28a130.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L28a136.  v0:= temp;
  #L28a138.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUnsubscribeOn$UnsubscribeOnSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28a1a0.  v0:= v1.`io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L28a1a4.  call `onError`(v0, v2) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L28a1aa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUnsubscribeOn$UnsubscribeOnSingleObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L28a1bc.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L28a1c2.  v1:= temp;
  #L28a1c4.  if v1 == 0 then goto L28a1d2;
  #L28a1c8.  v1:= v0.`io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L28a1cc.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/z;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L28a1d2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUnsubscribeOn$UnsubscribeOnSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28a1e4.  v0:= v1.`io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L28a1e8.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L28a1ee.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUnsubscribeOn$UnsubscribeOnSingleObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28a200.  v0:= v1.`io.reactivex.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver.ds` @type ^`io.reactivex.disposables.b` @kind object;
  #L28a204.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L28a20a.  return @kind void;
}
