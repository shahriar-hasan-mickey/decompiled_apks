record `io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.done` @AccessFlag ;
  `io.reactivex.z` `io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.a0` `io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.source` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber` v0 @kind this, `io.reactivex.z` v1 @kind object, `io.reactivex.a0` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.<init>:(Lio/reactivex/z;Lio/reactivex/a0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L288090.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L288096.  v0.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.downstream` @type ^`io.reactivex.z` := v1 @kind object;
  #L28809a.  v0.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.source` @type ^`io.reactivex.a0` := v2 @kind object;
  #L28809e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L2880b0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2880b6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288068.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28806e.  v0:= temp @kind object;
  #L288070.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L288074.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L28807a.  v0:= temp;
  #L28807c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2880c8.  v0:= v3.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.done` @type ^`boolean` @kind boolean;
  #L2880cc.  if v0 == 0 then goto L2880d2;
  #L2880d0.  return @kind void;
  #L2880d2.  v0:= 1I;
  #L2880d4.  v3.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L2880d8.  v0:= v3.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.source` @type ^`io.reactivex.a0` @kind object;
  #L2880dc.  v1:= new `io.reactivex.internal.observers.n`;
  #L2880e0.  v2:= v3.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.downstream` @type ^`io.reactivex.z` @kind object;
  #L2880e4.  call `<init>`(v1, v3, v2) @signature `Lio/reactivex/internal/observers/n;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/z;)V` @kind direct;
  #L2880ea.  call `b`(v0, v1) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L2880f0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288104.  v0:= v1.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.done` @type ^`boolean` @kind boolean;
  #L288108.  if v0 == 0 then goto L288114;
  #L28810c.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L288112.  return @kind void;
  #L288114.  v0:= 1I;
  #L288116.  v1.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L28811a.  v0:= v1.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.downstream` @type ^`io.reactivex.z` @kind object;
  #L28811e.  call `onError`(v0, v2) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L288124.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L288138.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28813e.  v1:= temp @kind object;
  #L288140.  v1:= (`io.reactivex.disposables.b`) v1 @kind object;
  #L288144.  call `dispose`(v1) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L28814a.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.onComplete:()V` @kind virtual;
  #L288150.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDelayWithObservable$OtherSubscriber;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L288164.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L28816a.  v1:= temp;
  #L28816c.  if v1 == 0 then goto L28817a;
  #L288170.  v1:= v0.`io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber.downstream` @type ^`io.reactivex.z` @kind object;
  #L288174.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/z;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L28817a.  return @kind void;
}
