record `io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.z` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.z` `io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver` `io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.fallback` @AccessFlag FINAL;
  `io.reactivex.a0` `io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.other` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.task` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.timeout` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.unit` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver` v0 @kind this, `io.reactivex.z` v1 @kind object, `io.reactivex.a0` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.<init>:(Lio/reactivex/z;Lio/reactivex/a0;JLjava/util/concurrent/TimeUnit;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L289d00.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L289d06.  v0.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.downstream` @type ^`io.reactivex.z` := v1 @kind object;
  #L289d0a.  v0.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.other` @type ^`io.reactivex.a0` := v2 @kind object;
  #L289d0e.  v0.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.timeout` @type ^`long` := v3 @kind wide;
  #L289d12.  v0.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.unit` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L289d16.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L289d1a.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L289d20.  v0.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.task` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L289d24.  if v2 == 0 then goto L289d38;
  #L289d28.  v2:= new `io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver`;
  #L289d2c.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver;.<init>:(Lio/reactivex/z;)V` @kind direct;
  #L289d32.  v0.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.fallback` @type ^`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver` := v2 @kind object;
  #L289d36.  goto L289d3e;
  #L289d38.  v1:= 0I;
  #L289d3a.  v0.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.fallback` @type ^`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver` := v1 @kind object;
  #L289d3e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L289d50.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L289d56.  v0:= v1.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.task` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L289d5a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L289d60.  v0:= v1.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.fallback` @type ^`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver` @kind object;
  #L289d64.  if v0 == 0 then goto L289d6e;
  #L289d68.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L289d6e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L289cd8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L289cde.  v0:= temp @kind object;
  #L289ce0.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L289ce4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L289cea.  v0:= temp;
  #L289cec.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L289d80.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L289d86.  v0:= temp @kind object;
  #L289d88.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L289d8c.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L289d90.  if v0 == v1 then goto L289db6;
  #L289d94.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L289d9a.  v0:= temp;
  #L289d9c.  if v0 == 0 then goto L289db6;
  #L289da0.  v0:= v2.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.task` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L289da4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L289daa.  v0:= v2.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L289dae.  call `onError`(v0, v3) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L289db4.  goto L289dbc;
  #L289db6.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L289dbc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L289dd0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L289dd6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L289de8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L289dee.  v0:= temp @kind object;
  #L289df0.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L289df4.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L289df8.  if v0 == v1 then goto L289e1c;
  #L289dfc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L289e02.  v0:= temp;
  #L289e04.  if v0 == 0 then goto L289e1c;
  #L289e08.  v0:= v2.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.task` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L289e0c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L289e12.  v0:= v2.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L289e16.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L289e1c.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver` v5 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$TimeoutMainObserver;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L289e30.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L289e36.  v0:= temp @kind object;
  #L289e38.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L289e3c.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L289e40.  if v0 == v1 then goto L289e98;
  #L289e44.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L289e4a.  v1:= temp;
  #L289e4c.  if v1 == 0 then goto L289e98;
  #L289e50.  if v0 == 0 then goto L289e5a;
  #L289e54.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L289e5a.  v0:= v5.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.other` @type ^`io.reactivex.a0` @kind object;
  #L289e5e.  if v0 != 0 then goto L289e88;
  #L289e62.  v0:= v5.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.downstream` @type ^`io.reactivex.z` @kind object;
  #L289e66.  v1:= new `java.util.concurrent.TimeoutException`;
  #L289e6a.  v2:= v5.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.timeout` @type ^`long` @kind wide;
  #L289e6e.  v4:= v5.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.unit` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L289e72.  call temp:= `d`(v2, v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.d:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L289e78.  v2:= temp @kind object;
  #L289e7a.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L289e80.  call `onError`(v0, v1) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L289e86.  goto L289e98;
  #L289e88.  v1:= 0I;
  #L289e8a.  v5.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.other` @type ^`io.reactivex.a0` := v1 @kind object;
  #L289e8e.  v1:= v5.`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver.fallback` @type ^`io.reactivex.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver` @kind object;
  #L289e92.  call `b`(v0, v1) @signature `Lio/reactivex/a0;.b:(Lio/reactivex/z;)V` @kind interface;
  #L289e98.  return @kind void;
}
