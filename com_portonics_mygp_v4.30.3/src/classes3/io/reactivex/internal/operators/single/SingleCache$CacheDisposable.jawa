record `io.reactivex.internal.operators.single.SingleCache$CacheDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.z` `io.reactivex.internal.operators.single.SingleCache$CacheDisposable.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.single.SingleCache` `io.reactivex.internal.operators.single.SingleCache$CacheDisposable.parent` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleCache$CacheDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleCache$CacheDisposable` v0 @kind this, `io.reactivex.z` v1 @kind object, `io.reactivex.internal.operators.single.SingleCache` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache$CacheDisposable;.<init>:(Lio/reactivex/z;Lio/reactivex/internal/operators/single/SingleCache;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L287d5c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L287d62.  v0.`io.reactivex.internal.operators.single.SingleCache$CacheDisposable.downstream` @type ^`io.reactivex.z` := v1 @kind object;
  #L287d66.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleCache$CacheDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleCache$CacheDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L287d78.  v0:= 0I;
  #L287d7a.  v1:= 1I;
  #L287d7c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L287d82.  v0:= temp;
  #L287d84.  if v0 != 0 then goto L287d8a;
  #L287d88.  return @kind void;
  #L287d8a.  v0:= 0I;
  #L287d8c.  throw v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleCache$CacheDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleCache$CacheDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L287d40.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L287d46.  v0:= temp;
  #L287d48.  return v0;
}
