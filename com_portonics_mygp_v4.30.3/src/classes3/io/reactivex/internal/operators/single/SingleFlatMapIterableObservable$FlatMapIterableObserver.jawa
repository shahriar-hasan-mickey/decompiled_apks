record `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.z` @kind interface {
  `boolean` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.cancelled` @AccessFlag VOLATILE;
  `io.reactivex.t` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.downstream` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.it` @AccessFlag VOLATILE;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.mapper` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.outputFused` @AccessFlag ;
  `io.reactivex.disposables.b` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.d0.k` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.<init>:(Lio/reactivex/t;Lio/reactivex/d0/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L288e70.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L288e76.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L288e7a.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.mapper` @type ^`io.reactivex.d0.k` := v2 @kind object;
  #L288e7e.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288e90.  v0:= 0I;
  #L288e92.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v0 @kind object;
  #L288e96.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288ea8.  v0:= 1I;
  #L288eaa.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L288eae.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L288eb2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L288eb8.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L288ebc.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L288ec0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288dd0.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L288dd4.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288de8.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L288dec.  if v0 != 0 then goto L288df4;
  #L288df0.  v0:= 1I;
  #L288df2.  goto L288df6;
  #L288df4.  v0:= 0I;
  #L288df6.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288ed4.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L288ed8.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L288edc.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L288ee0.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L288ee6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288ef8.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.b` @kind object;
  #L288efc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @kind static;
  #L288f02.  v0:= temp;
  #L288f04.  if v0 == 0 then goto L288f16;
  #L288f08.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.upstream` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L288f0c.  v2:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L288f10.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/t;.onSubscribe:(Lio/reactivex/disposables/b;)V` @kind interface;
  #L288f16.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L288f28.  v0:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L288f2c.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.mapper` @type ^`io.reactivex.d0.k` @kind object;
  #L288f30.  call temp:= `apply`(v1, v3) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L288f36.  v3:= temp @kind object;
  #L288f38.  v3:= (`java.lang.Iterable`) v3 @kind object;
  #L288f3c.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L288f42.  v3:= temp @kind object;
  #L288f44.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L288f4a.  v1:= temp;
  #L288f4c.  if v1 != 0 then goto L288f58;
  #L288f50.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L288f56.  return @kind void;
  #L288f58.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.outputFused` @type ^`boolean` @kind boolean;
  #L288f5c.  if v1 == 0 then goto L288f74;
  #L288f60.  v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v3 @kind object;
  #L288f64.  v3:= 0I;
  #L288f66.  call `onNext`(v0, v3) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L288f6c.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L288f72.  return @kind void;
  #L288f74.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L288f78.  if v1 == 0 then goto L288f7e;
  #L288f7c.  return @kind void;
  #L288f7e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L288f84.  v1:= temp @kind object;
  #L288f86.  call `onNext`(v0, v1) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L288f8c.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.cancelled` @type ^`boolean` @kind boolean;
  #L288f90.  if v1 == 0 then goto L288f96;
  #L288f94.  return @kind void;
  #L288f96.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L288f9c.  v1:= temp;
  #L288f9e.  if v1 != 0 then goto L288f74;
  #L288fa2.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L288fa8.  return @kind void;
  #L288faa.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L288fac.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L288fb2.  call `onError`(v0, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L288fb8.  return @kind void;
  #L288fba.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L288fbc.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L288fc2.  call `onError`(v0, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L288fc8.  return @kind void;
  #L288fca.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L288fcc.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L288fd2.  v0:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.downstream` @type ^`io.reactivex.t` @kind object;
  #L288fd6.  call `onError`(v0, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L288fdc.  return @kind void;
  catch `java.lang.Throwable` @[L288f2c..L288f4c] goto L288fca;
  catch `java.lang.Throwable` @[L288f7e..L288f86] goto L288fba;
  catch `java.lang.Throwable` @[L288f96..L288f9e] goto L288faa;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v4 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L288e2c.  v0:= v4.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` @kind object;
  #L288e30.  v1:= 0I;
  #L288e32.  if v0 == 0 then goto L288e5c;
  #L288e36.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L288e3c.  v2:= temp @kind object;
  #L288e3e.  v3:= "The iterator returned a null value" @kind object;
  #L288e42.  call temp:= `e`(v2, v3) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L288e48.  v2:= temp @kind object;
  #L288e4a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L288e50.  v0:= temp;
  #L288e52.  if v0 != 0 then goto L288e5a;
  #L288e56.  v4.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.it` @type ^`java.util.Iterator` := v1 @kind object;
  #L288e5a.  return v2 @kind object;
  #L288e5c.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$FlatMapIterableObserver;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L288e08.  v0:= 2I;
  #L288e0a.  v2:= v2 ^& v0 @kind int;
  #L288e0c.  if v2 == 0 then goto L288e18;
  #L288e10.  v2:= 1I;
  #L288e12.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L288e16.  return v0;
  #L288e18.  v2:= 0I;
  #L288e1a.  return v2;
}
