record `io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.z` `io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.operators.single.SingleZipArray$ZipSingleObserver`[] `io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.observers` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.values` @AccessFlag FINAL;
  `io.reactivex.d0.k` `io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.zipper` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator` v1 @kind this, `io.reactivex.z` v2 @kind object, `int` v3 , `io.reactivex.d0.k` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.<init>:(Lio/reactivex/z;ILio/reactivex/d0/k;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L28a420.  call `<init>`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L28a426.  v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.z` := v2 @kind object;
  #L28a42a.  v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.zipper` @type ^`io.reactivex.d0.k` := v4 @kind object;
  #L28a42e.  v2:= new `io.reactivex.internal.operators.single.SingleZipArray$ZipSingleObserver`[v3];
  #L28a432.  v4:= 0I;
  #L28a434.  if v4 >= v3 then goto L28a44c;
  #L28a438.  v0:= new `io.reactivex.internal.operators.single.SingleZipArray$ZipSingleObserver`;
  #L28a43c.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipSingleObserver;.<init>:(Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;I)V` @kind direct;
  #L28a442.  v2[v4]:= v0 @kind object;
  #L28a446.  v4:= v4 + 1;
  #L28a44a.  goto L28a434;
  #L28a44c.  v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.single.SingleZipArray$ZipSingleObserver`[] := v2 @kind object;
  #L28a450.  v2:= new `java.lang.Object`[v3];
  #L28a454.  v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.values` @type ^`java.lang.Object`[] := v2 @kind object;
  #L28a458.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator` v4 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L28a46c.  v0:= 0I;
  #L28a46e.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L28a474.  v1:= temp;
  #L28a476.  if v1 <= 0 then goto L28a494;
  #L28a47a.  v1:= v4.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.single.SingleZipArray$ZipSingleObserver`[] @kind object;
  #L28a47e.  v2:= length @variable v1;
  #L28a480.  if v0 >= v2 then goto L28a494;
  #L28a484.  v3:= v1[v0] @kind object;
  #L28a488.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipSingleObserver;.dispose:()V` @kind virtual;
  #L28a48e.  v0:= v0 + 1;
  #L28a492.  goto L28a480;
  #L28a494.  return @kind void;
}
procedure `void` `disposeExcept`(`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.disposeExcept:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L28a4a8.  v0:= v4.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.observers` @type ^`io.reactivex.internal.operators.single.SingleZipArray$ZipSingleObserver`[] @kind object;
  #L28a4ac.  v1:= length @variable v0;
  #L28a4ae.  v2:= 0I;
  #L28a4b0.  if v2 >= v5 then goto L28a4c4;
  #L28a4b4.  v3:= v0[v2] @kind object;
  #L28a4b8.  call `dispose`(v3) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipSingleObserver;.dispose:()V` @kind virtual;
  #L28a4be.  v2:= v2 + 1;
  #L28a4c2.  goto L28a4b0;
  #L28a4c4.  v5:= v5 + 1;
  #L28a4c8.  if v5 >= v1 then goto L28a4d8;
  #L28a4cc.  v2:= v0[v5] @kind object;
  #L28a4d0.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipSingleObserver;.dispose:()V` @kind virtual;
  #L28a4d6.  goto L28a4c4;
  #L28a4d8.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator` v1 @kind this, `java.lang.Throwable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.innerError:(Ljava/lang/Throwable;I)V` @AccessFlag  {
    temp;
    v0;

  #L28a4ec.  v0:= 0I;
  #L28a4ee.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L28a4f4.  v0:= temp;
  #L28a4f6.  if v0 <= 0 then goto L28a50c;
  #L28a4fa.  call `disposeExcept`(v1, v3) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.disposeExcept:(I)V` @kind virtual;
  #L28a500.  v3:= v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L28a504.  call `onError`(v3, v2) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L28a50a.  goto L28a512;
  #L28a50c.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28a512.  return @kind void;
}
procedure `void` `innerSuccess`(`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator` v1 @kind this, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.innerSuccess:(Ljava/lang/Object;I)V` @AccessFlag  {
    temp;
    v0;

  #L28a524.  v0:= v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.values` @type ^`java.lang.Object`[] @kind object;
  #L28a528.  v0[v3]:= v2 @kind object;
  #L28a52c.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L28a532.  v2:= temp;
  #L28a534.  if v2 != 0 then goto L28a572;
  #L28a538.  v2:= v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.zipper` @type ^`io.reactivex.d0.k` @kind object;
  #L28a53c.  v3:= v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.values` @type ^`java.lang.Object`[] @kind object;
  #L28a540.  call temp:= `apply`(v2, v3) @signature `Lio/reactivex/d0/k;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L28a546.  v2:= temp @kind object;
  #L28a548.  v3:= "The zipper returned a null value" @kind object;
  #L28a54c.  call temp:= `e`(v2, v3) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L28a552.  v2:= temp @kind object;
  #L28a554.  v3:= v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L28a558.  call `onSuccess`(v3, v2) @signature `Lio/reactivex/z;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L28a55e.  goto L28a572;
  #L28a560.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28a562.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28a568.  v3:= v1.`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator.downstream` @type ^`io.reactivex.z` @kind object;
  #L28a56c.  call `onError`(v3, v2) @signature `Lio/reactivex/z;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L28a572.  return @kind void;
  catch `java.lang.Throwable` @[L28a538..L28a554] goto L28a560;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleZipArray$ZipCoordinator` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28a3fc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28a402.  v0:= temp;
  #L28a404.  if v0 > 0 then goto L28a40c;
  #L28a408.  v0:= 1I;
  #L28a40a.  goto L28a40e;
  #L28a40c.  v0:= 0I;
  #L28a40e.  return v0;
}
