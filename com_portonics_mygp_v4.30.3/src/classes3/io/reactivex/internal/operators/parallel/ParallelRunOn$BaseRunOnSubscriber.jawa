record `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface, `java.lang.Runnable` @kind interface {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.cancelled` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.consumed` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.done` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.error` @AccessFlag ;
  `int` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.limit` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.prefetch` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscArrayQueue` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.queue` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.requested` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.upstream` @AccessFlag ;
  `io.reactivex.x$a` `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` v1 @kind this, `int` v2 , `io.reactivex.internal.queue.SpscArrayQueue` v3 @kind object, `io.reactivex.x$a` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.<init>:(ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/x$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L287330.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L287336.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L28733a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L287340.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L287344.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.prefetch` @type ^`int` := v2;
  #L287348.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscArrayQueue` := v3 @kind object;
  #L28734c.  v3:= v2 ^> 2;
  #L287350.  v2:= v2 - v3 @kind int;
  #L287352.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.limit` @type ^`int` := v2;
  #L287356.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.worker` @type ^`io.reactivex.x$a` := v4 @kind object;
  #L28735a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L28736c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L287370.  if v0 != 0 then goto L2873a4;
  #L287374.  v0:= 1I;
  #L287376.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L28737a.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L28737e.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L287384.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L287388.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L28738e.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L287394.  v0:= temp;
  #L287396.  if v0 != 0 then goto L2873a4;
  #L28739a.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L28739e.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L2873a4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2873b8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L2873bc.  if v0 == 0 then goto L2873c2;
  #L2873c0.  return @kind void;
  #L2873c2.  v0:= 1I;
  #L2873c4.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L2873c8.  call `schedule`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.schedule:()V` @kind virtual;
  #L2873ce.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2873e0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L2873e4.  if v0 == 0 then goto L2873f0;
  #L2873e8.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2873ee.  return @kind void;
  #L2873f0.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L2873f4.  v2:= 1I;
  #L2873f6.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L2873fa.  call `schedule`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.schedule:()V` @kind virtual;
  #L287400.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L287414.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L287418.  if v0 == 0 then goto L28741e;
  #L28741c.  return @kind void;
  #L28741e.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L287422.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L287428.  v2:= temp;
  #L28742a.  if v2 != 0 then goto L28744e;
  #L28742e.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L287432.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L287438.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L28743c.  v0:= "Queue is full?!" @kind object;
  #L287440.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L287446.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L28744c.  return @kind void;
  #L28744e.  call `schedule`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.schedule:()V` @kind virtual;
  #L287454.  return @kind void;
}
procedure `void` `onSubscribe`(`n.b.d` v0 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {

  # return;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L287468.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L28746e.  v0:= temp;
  #L287470.  if v0 == 0 then goto L287484;
  #L287474.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L287478.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L28747e.  call `schedule`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.schedule:()V` @kind virtual;
  #L287484.  return @kind void;
}
procedure `void` `schedule`(`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.schedule:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L287498.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L28749e.  v0:= temp;
  #L2874a0.  if v0 != 0 then goto L2874ae;
  #L2874a4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L2874a8.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/x$a;.b:(Ljava/lang/Runnable;)Lio/reactivex/disposables/b;` @kind virtual;
  #L2874ae.  return @kind void;
}
