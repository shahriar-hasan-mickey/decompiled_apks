record `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a` @kind class @AccessFlag FINAL extends `n.b.d` @kind interface {
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a` v0 @kind this, `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher$a;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L285e4c.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.d` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` := v1 @kind object;
  #L285e50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L285e56.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.b` @type ^`int` := v2;
  #L285e5a.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.c` @type ^`int` := v3;
  #L285e5e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a` v7 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L285e70.  v0:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.d` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` @kind object;
  #L285e74.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.requests` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L285e78.  v0:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.c` @type ^`int`;
  #L285e7c.  v2:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.b` @type ^`int`;
  #L285e80.  v2:= v2 + v0 @kind int;
  #L285e82.  v3:= 0L;
  #L285e86.  v5:= 1L;
  #L285e8a.  call temp:= `compareAndSet`(v1, v2, v3, v5) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.compareAndSet:(IJJ)Z` @kind virtual;
  #L285e90.  v0:= temp;
  #L285e92.  if v0 == 0 then goto L285ea6;
  #L285e96.  v0:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.d` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` @kind object;
  #L285e9a.  v1:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.c` @type ^`int`;
  #L285e9e.  v1:= v1 + v1 @kind int;
  #L285ea0.  call `cancel`(v0, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.cancel:(I)V` @kind virtual;
  #L285ea6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a` v7 @kind this, `long` v8 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L285eb8.  call temp:= `validate`(v8) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L285ebe.  v0:= temp;
  #L285ec0.  if v0 == 0 then goto L285f28;
  #L285ec4.  v0:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.d` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` @kind object;
  #L285ec8.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.requests` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L285ecc.  v1:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.b` @type ^`int`;
  #L285ed0.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L285ed6.  v3:= temp @kind wide;
  #L285ed8.  v1:= 9223372036854775807L;
  #L285ee2.  v5:= lcmp(v3, v1);
  #L285ee6.  if v5 != 0 then goto L285eec;
  #L285eea.  return @kind void;
  #L285eec.  call temp:= `c`(v3, v8) @signature `Lio/reactivex/internal/util/b;.c:(JJ)J` @kind static;
  #L285ef2.  v5:= temp @kind wide;
  #L285ef4.  v2:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.b` @type ^`int`;
  #L285ef8.  v1:= v0 @kind object;
  #L285efa.  call temp:= `compareAndSet`(v1, v2, v3, v5) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.compareAndSet:(IJJ)Z` @kind virtual;
  #L285f00.  v1:= temp;
  #L285f02.  if v1 == 0 then goto L285ecc;
  #L285f06.  v8:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.d` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` @kind object;
  #L285f0a.  v8:= v8.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscriberCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L285f0e.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L285f14.  v8:= temp;
  #L285f16.  v9:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.c` @type ^`int`;
  #L285f1a.  if v8 != v9 then goto L285f28;
  #L285f1e.  v8:= v7.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a.d` @type ^`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` @kind object;
  #L285f22.  call `drain`(v8) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drain:()V` @kind virtual;
  #L285f28.  return @kind void;
}
