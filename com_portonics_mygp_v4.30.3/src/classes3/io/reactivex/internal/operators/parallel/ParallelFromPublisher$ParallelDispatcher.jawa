record `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.cancelled` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.done` @AccessFlag VOLATILE;
  `long`[] `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.emissions` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.error` @AccessFlag ;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.index` @AccessFlag ;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.limit` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.prefetch` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.produced` @AccessFlag ;
  `io.reactivex.e0.a.j` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.queue` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLongArray` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.requests` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.sourceMode` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscriberCount` @AccessFlag FINAL;
  `n.b.c`[] `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscribers` @AccessFlag FINAL;
  `n.b.d` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.upstream` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v3 @kind this, `n.b.c`[] v4 @kind object, `int` v5 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.<init>:([Ln/b/c;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L285f3c.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L285f42.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L285f46.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L285f4c.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscriberCount` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L285f50.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscribers` @type ^`n.b.c`[] := v4 @kind object;
  #L285f54.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.prefetch` @type ^`int` := v5;
  #L285f58.  v0:= v5 ^> 2;
  #L285f5c.  v5:= v5 - v0 @kind int;
  #L285f5e.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.limit` @type ^`int` := v5;
  #L285f62.  v4:= length @variable v4;
  #L285f64.  v5:= new `java.util.concurrent.atomic.AtomicLongArray`;
  #L285f68.  v0:= v4 + v4 @kind int;
  #L285f6c.  v1:= v0 + 1;
  #L285f70.  call `<init>`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.<init>:(I)V` @kind direct;
  #L285f76.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.requests` @type ^`java.util.concurrent.atomic.AtomicLongArray` := v5 @kind object;
  #L285f7a.  v1:= (`long`) v4 @kind i2l;
  #L285f7c.  call `lazySet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.lazySet:(IJ)V` @kind virtual;
  #L285f82.  v4:= new `long`[v4];
  #L285f86.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.emissions` @type ^`long`[] := v4 @kind object;
  #L285f8a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.cancel:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L285f9c.  v0:= v4.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.requests` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L285fa0.  call temp:= `decrementAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.decrementAndGet:(I)J` @kind virtual;
  #L285fa6.  v0:= temp @kind wide;
  #L285fa8.  v2:= 0L;
  #L285fac.  v5:= lcmp(v0, v2);
  #L285fb0.  if v5 != 0 then goto L285fda;
  #L285fb4.  v5:= 1I;
  #L285fb6.  v4.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.cancelled` @type ^`boolean` := v5 @kind boolean;
  #L285fba.  v5:= v4.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.upstream` @type ^`n.b.d` @kind object;
  #L285fbe.  call `cancel`(v5) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L285fc4.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L285fca.  v5:= temp;
  #L285fcc.  if v5 != 0 then goto L285fda;
  #L285fd0.  v5:= v4.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L285fd4.  call `clear`(v5) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L285fda.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L285fec.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L285ff2.  v0:= temp;
  #L285ff4.  if v0 == 0 then goto L285ffa;
  #L285ff8.  return @kind void;
  #L285ffa.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.sourceMode` @type ^`int`;
  #L285ffe.  v1:= 1I;
  #L286000.  if v0 != v1 then goto L28600c;
  #L286004.  call `drainSync`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drainSync:()V` @kind virtual;
  #L28600a.  goto L286012;
  #L28600c.  call `drainAsync`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drainAsync:()V` @kind virtual;
  #L286012.  return @kind void;
}
procedure `void` `drainAsync`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v19 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drainAsync:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L286024.  v1:= v19 @kind object;
  #L286028.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L28602c.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscribers` @type ^`n.b.c`[] @kind object;
  #L286030.  v3:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.requests` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L286034.  v4:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.emissions` @type ^`long`[] @kind object;
  #L286038.  v5:= length @variable v4;
  #L28603a.  v6:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.index` @type ^`int`;
  #L28603e.  v7:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.produced` @type ^`int`;
  #L286042.  v8:= 1I;
  #L286044.  v9:= 1I;
  #L286046.  v10:= 0I;
  #L286048.  v11:= 0I;
  #L28604a.  v12:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.cancelled` @type ^`boolean` @kind boolean;
  #L28604e.  if v12 == 0 then goto L28605a;
  #L286052.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L286058.  return @kind void;
  #L28605a.  v12:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.done` @type ^`boolean` @kind boolean;
  #L28605e.  if v12 == 0 then goto L286088;
  #L286062.  v13:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.error` @type ^`java.lang.Throwable` @kind object;
  #L286066.  if v13 == 0 then goto L286088;
  #L28606a.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L286070.  v0:= length @variable v2;
  #L286072.  if v10 >= v0 then goto L286086;
  #L286076.  v3:= v2[v10] @kind object;
  #L28607a.  call `onError`(v3, v13) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L286080.  v10:= v10 + 1;
  #L286084.  goto L286072;
  #L286086.  return @kind void;
  #L286088.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L28608e.  v13:= temp;
  #L286090.  if v12 == 0 then goto L2860b0;
  #L286094.  if v13 == 0 then goto L2860b0;
  #L286098.  v0:= length @variable v2;
  #L28609a.  if v10 >= v0 then goto L2860ae;
  #L28609e.  v3:= v2[v10] @kind object;
  #L2860a2.  call `onComplete`(v3) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2860a8.  v10:= v10 + 1;
  #L2860ac.  goto L28609a;
  #L2860ae.  return @kind void;
  #L2860b0.  if v13 == 0 then goto L2860b6;
  #L2860b4.  goto L28615e;
  #L2860b6.  call temp:= `get`(v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L2860bc.  v12:= temp @kind wide;
  #L2860be.  v14:= v4[v6] @kind wide;
  #L2860c2.  v16:= lcmp(v12, v14);
  #L2860c6.  if v16 == 0 then goto L28614e;
  #L2860ca.  v12:= v5 + v6 @kind int;
  #L2860ce.  call temp:= `get`(v3, v12) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L2860d4.  v12:= temp @kind wide;
  #L2860d6.  v16:= 0L;
  #L2860da.  v18:= lcmp(v12, v16);
  #L2860de.  if v18 != 0 then goto L28614e;
  #L2860e2.  call temp:= `poll`(v0) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L2860e8.  v11:= temp @kind object;
  #L2860ea.  if v11 != 0 then goto L2860f0;
  #L2860ee.  goto L28615e;
  #L2860f0.  v12:= v2[v6] @kind object;
  #L2860f4.  call `onNext`(v12, v11) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2860fa.  v11:= 1L;
  #L2860fe.  v14:= v14 + v11 @kind long;
  #L286100.  v4[v6]:= v14 @kind wide;
  #L286104.  v7:= v7 + 1;
  #L286108.  v11:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.limit` @type ^`int`;
  #L28610c.  if v7 != v11 then goto L28611e;
  #L286110.  v11:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.upstream` @type ^`n.b.d` @kind object;
  #L286114.  v12:= (`long`) v7 @kind i2l;
  #L286116.  call `request`(v11, v12) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L28611c.  v7:= 0I;
  #L28611e.  v11:= 0I;
  #L286120.  goto L286150;
  #L286122.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L286124.  v3:= v0 @kind object;
  #L286126.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28612c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.upstream` @type ^`n.b.d` @kind object;
  #L286130.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L286136.  v0:= length @variable v2;
  #L286138.  if v10 >= v0 then goto L28614c;
  #L28613c.  v4:= v2[v10] @kind object;
  #L286140.  call `onError`(v4, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L286146.  v10:= v10 + 1;
  #L28614a.  goto L286138;
  #L28614c.  return @kind void;
  #L28614e.  v11:= v11 + v8 @kind int;
  #L286150.  v6:= v6 + 1;
  #L286154.  if v6 != v5 then goto L28615a;
  #L286158.  v6:= 0I;
  #L28615a.  if v11 != v5 then goto L28604a;
  #L28615e.  call temp:= `get`(v19) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L286164.  v10:= temp;
  #L286166.  if v10 != v9 then goto L286182;
  #L28616a.  v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.index` @type ^`int` := v6;
  #L28616e.  v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.produced` @type ^`int` := v7;
  #L286172.  v9:= -v9 @kind int;
  #L286174.  call temp:= `addAndGet`(v1, v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L28617a.  v9:= temp;
  #L28617c.  if v9 != 0 then goto L286046;
  #L286180.  return @kind void;
  #L286182.  v9:= v10;
  #L286184.  goto L286046;
  catch `java.lang.Throwable` @[L2860e2..L2860ea] goto L286122;
}
procedure `void` `drainSync`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v18 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drainSync:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L2861a4.  v1:= v18 @kind object;
  #L2861a8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L2861ac.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscribers` @type ^`n.b.c`[] @kind object;
  #L2861b0.  v3:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.requests` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L2861b4.  v4:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.emissions` @type ^`long`[] @kind object;
  #L2861b8.  v5:= length @variable v4;
  #L2861ba.  v6:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.index` @type ^`int`;
  #L2861be.  v7:= 1I;
  #L2861c0.  v8:= 1I;
  #L2861c2.  v9:= 0I;
  #L2861c4.  v10:= 0I;
  #L2861c6.  v11:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.cancelled` @type ^`boolean` @kind boolean;
  #L2861ca.  if v11 == 0 then goto L2861d6;
  #L2861ce.  call `clear`(v0) @signature `Lio/reactivex/e0/a/j;.clear:()V` @kind interface;
  #L2861d4.  return @kind void;
  #L2861d6.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L2861dc.  v11:= temp;
  #L2861de.  if v11 == 0 then goto L2861fa;
  #L2861e2.  v0:= length @variable v2;
  #L2861e4.  if v9 >= v0 then goto L2861f8;
  #L2861e8.  v3:= v2[v9] @kind object;
  #L2861ec.  call `onComplete`(v3) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2861f2.  v9:= v9 + 1;
  #L2861f6.  goto L2861e4;
  #L2861f8.  return @kind void;
  #L2861fa.  call temp:= `get`(v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L286200.  v11:= temp @kind wide;
  #L286202.  v13:= v4[v6] @kind wide;
  #L286206.  v15:= lcmp(v11, v13);
  #L28620a.  if v15 == 0 then goto L28628e;
  #L28620e.  v11:= v5 + v6 @kind int;
  #L286212.  call temp:= `get`(v3, v11) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L286218.  v11:= temp @kind wide;
  #L28621a.  v15:= 0L;
  #L28621e.  v17:= lcmp(v11, v15);
  #L286222.  if v17 != 0 then goto L28628e;
  #L286226.  call temp:= `poll`(v0) @signature `Lio/reactivex/e0/a/j;.poll:()Ljava/lang/Object;` @kind interface;
  #L28622c.  v10:= temp @kind object;
  #L28622e.  if v10 != 0 then goto L28624a;
  #L286232.  v0:= length @variable v2;
  #L286234.  if v9 >= v0 then goto L286248;
  #L286238.  v3:= v2[v9] @kind object;
  #L28623c.  call `onComplete`(v3) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L286242.  v9:= v9 + 1;
  #L286246.  goto L286234;
  #L286248.  return @kind void;
  #L28624a.  v11:= v2[v6] @kind object;
  #L28624e.  call `onNext`(v11, v10) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L286254.  v10:= 1L;
  #L286258.  v13:= v13 + v10 @kind long;
  #L28625a.  v4[v6]:= v13 @kind wide;
  #L28625e.  v10:= 0I;
  #L286260.  goto L286290;
  #L286262.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L286264.  v3:= v0 @kind object;
  #L286266.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28626c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.upstream` @type ^`n.b.d` @kind object;
  #L286270.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L286276.  v0:= length @variable v2;
  #L286278.  if v9 >= v0 then goto L28628c;
  #L28627c.  v4:= v2[v9] @kind object;
  #L286280.  call `onError`(v4, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L286286.  v9:= v9 + 1;
  #L28628a.  goto L286278;
  #L28628c.  return @kind void;
  #L28628e.  v10:= v10 + v7 @kind int;
  #L286290.  v6:= v6 + 1;
  #L286294.  if v6 != v5 then goto L28629a;
  #L286298.  v6:= 0I;
  #L28629a.  if v10 != v5 then goto L2861c6;
  #L28629e.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2862a4.  v9:= temp;
  #L2862a6.  if v9 != v8 then goto L2862be;
  #L2862aa.  v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.index` @type ^`int` := v6;
  #L2862ae.  v8:= -v8 @kind int;
  #L2862b0.  call temp:= `addAndGet`(v1, v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L2862b6.  v8:= temp;
  #L2862b8.  if v8 != 0 then goto L2861c2;
  #L2862bc.  return @kind void;
  #L2862be.  v8:= v9;
  #L2862c0.  goto L2861c2;
  catch `java.lang.Throwable` @[L286226..L28622e] goto L286262;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2862e0.  v0:= 1I;
  #L2862e2.  v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.done` @type ^`boolean` := v0 @kind boolean;
  #L2862e6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drain:()V` @kind virtual;
  #L2862ec.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L286300.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.error` @type ^`java.lang.Throwable` := v1 @kind object;
  #L286304.  v1:= 1I;
  #L286306.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.done` @type ^`boolean` := v1 @kind boolean;
  #L28630a.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drain:()V` @kind virtual;
  #L286310.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L286324.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.sourceMode` @type ^`int`;
  #L286328.  if v0 != 0 then goto L28635c;
  #L28632c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L286330.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L286336.  v2:= temp;
  #L286338.  if v2 != 0 then goto L28635c;
  #L28633c.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.upstream` @type ^`n.b.d` @kind object;
  #L286340.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L286346.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L28634a.  v0:= "Queue is full?" @kind object;
  #L28634e.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L286354.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L28635a.  return @kind void;
  #L28635c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drain:()V` @kind virtual;
  #L286362.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v3 @kind this, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L286374.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.upstream` @type ^`n.b.d` @kind object;
  #L286378.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L28637e.  v0:= temp;
  #L286380.  if v0 == 0 then goto L286406;
  #L286384.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.upstream` @type ^`n.b.d` := v4 @kind object;
  #L286388.  v0:= instanceof @variable v4 @type ^`io.reactivex.e0.a.g` @kind boolean;
  #L28638c.  if v0 == 0 then goto L2863e2;
  #L286390.  v0:= v4 @kind object;
  #L286392.  v0:= (`io.reactivex.e0.a.g`) v0 @kind object;
  #L286396.  v1:= 7I;
  #L286398.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L28639e.  v1:= temp;
  #L2863a0.  v2:= 1I;
  #L2863a2.  if v1 != v2 then goto L2863c0;
  #L2863a6.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.sourceMode` @type ^`int` := v1;
  #L2863aa.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L2863ae.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.done` @type ^`boolean` := v2 @kind boolean;
  #L2863b2.  call `setupSubscribers`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.setupSubscribers:()V` @kind virtual;
  #L2863b8.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.drain:()V` @kind virtual;
  #L2863be.  return @kind void;
  #L2863c0.  v2:= 2I;
  #L2863c2.  if v1 != v2 then goto L2863e2;
  #L2863c6.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.sourceMode` @type ^`int` := v1;
  #L2863ca.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L2863ce.  call `setupSubscribers`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.setupSubscribers:()V` @kind virtual;
  #L2863d4.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.prefetch` @type ^`int`;
  #L2863d8.  v0:= (`long`) v0 @kind i2l;
  #L2863da.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2863e0.  return @kind void;
  #L2863e2.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L2863e6.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.prefetch` @type ^`int`;
  #L2863ea.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L2863f0.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L2863f4.  call `setupSubscribers`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.setupSubscribers:()V` @kind virtual;
  #L2863fa.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.prefetch` @type ^`int`;
  #L2863fe.  v0:= (`long`) v0 @kind i2l;
  #L286400.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L286406.  return @kind void;
}
procedure `void` `setupSubscribers`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher` v6 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;.setupSubscribers:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L286418.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscribers` @type ^`n.b.c`[] @kind object;
  #L28641c.  v1:= length @variable v0;
  #L28641e.  v2:= 0I;
  #L286420.  if v2 >= v1 then goto L286454;
  #L286424.  v3:= v6.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.cancelled` @type ^`boolean` @kind boolean;
  #L286428.  if v3 == 0 then goto L28642e;
  #L28642c.  return @kind void;
  #L28642e.  v3:= v6.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher.subscriberCount` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L286432.  v4:= v2 + 1;
  #L286436.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L28643c.  v3:= v0[v2] @kind object;
  #L286440.  v5:= new `io.reactivex.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher$a`;
  #L286444.  call `<init>`(v5, v6, v2, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher$a;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$ParallelDispatcher;II)V` @kind direct;
  #L28644a.  call `onSubscribe`(v3, v5) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L286450.  v2:= v4;
  #L286452.  goto L286420;
  #L286454.  return @kind void;
}
