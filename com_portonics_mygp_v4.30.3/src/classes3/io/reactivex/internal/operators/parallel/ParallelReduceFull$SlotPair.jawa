record `io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class {
  `java.lang.Object` `io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair.first` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair.releaseIndex` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair.second` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$SlotPair;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L287308.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L28730e.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L287312.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L287318.  v1.`io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair.releaseIndex` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L28731c.  return @kind void;
}
procedure `boolean` `releaseSlot`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$SlotPair;.releaseSlot:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2872a8.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair.releaseIndex` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L2872ac.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L2872b2.  v0:= temp;
  #L2872b4.  v1:= 2I;
  #L2872b6.  if v0 != v1 then goto L2872be;
  #L2872ba.  v0:= 1I;
  #L2872bc.  goto L2872c0;
  #L2872be.  v0:= 0I;
  #L2872c0.  return v0;
}
procedure `int` `tryAcquireSlot`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$SlotPair` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$SlotPair;.tryAcquireSlot:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2872d4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2872da.  v0:= temp;
  #L2872dc.  v1:= 2I;
  #L2872de.  if v0 < v1 then goto L2872e6;
  #L2872e2.  v0:= -1I;
  #L2872e4.  return v0;
  #L2872e6.  v1:= v0 + 1;
  #L2872ea.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L2872f0.  v1:= temp;
  #L2872f2.  if v1 == 0 then goto L2872d4;
  #L2872f6.  return v0;
}
