record `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` @kind class {
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription` v0 @kind this, `n.b.c` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.<init>:(Ln/b/c;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L286a94.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.<init>:(Ln/b/c;II)V` @kind direct;
  #L286a9a.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L286aac.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L286ab2.  v0:= temp;
  #L286ab4.  if v0 == 0 then goto L286aba;
  #L286ab8.  return @kind void;
  #L286aba.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.drainLoop:()V` @kind virtual;
  #L286ac0.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription` v18 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L286ad4.  v0:= v18 @kind object;
  #L286ad8.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.subscribers` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber`[] @kind object;
  #L286adc.  v2:= length @variable v1;
  #L286ade.  v3:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.downstream` @type ^`n.b.c` @kind object;
  #L286ae2.  v5:= 1I;
  #L286ae4.  v6:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L286ae8.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L286aee.  v6:= temp @kind wide;
  #L286af0.  v8:= 0L;
  #L286af4.  v10:= v8 @kind wide;
  #L286af6.  v13:= lcmp(v10, v6);
  #L286afa.  if v13 == 0 then goto L286ba2;
  #L286afe.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.cancelled` @type ^`boolean` @kind boolean;
  #L286b02.  if v13 == 0 then goto L286b0e;
  #L286b06.  call `cleanup`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cleanup:()V` @kind virtual;
  #L286b0c.  return @kind void;
  #L286b0e.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L286b12.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L286b18.  v13:= temp @kind object;
  #L286b1a.  v13:= (`java.lang.Throwable`) v13 @kind object;
  #L286b1e.  if v13 == 0 then goto L286b30;
  #L286b22.  call `cleanup`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cleanup:()V` @kind virtual;
  #L286b28.  call `onError`(v3, v13) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L286b2e.  return @kind void;
  #L286b30.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.done` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L286b34.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L286b3a.  v13:= temp;
  #L286b3c.  if v13 != 0 then goto L286b44;
  #L286b40.  v13:= 1I;
  #L286b42.  goto L286b46;
  #L286b44.  v13:= 0I;
  #L286b46.  v14:= 0I;
  #L286b48.  v15:= 1I;
  #L286b4a.  v4:= length @variable v1;
  #L286b4c.  if v14 >= v4 then goto L286b8e;
  #L286b50.  v4:= v1[v14] @kind object;
  #L286b54.  v12:= v4.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L286b58.  if v12 == 0 then goto L286b88;
  #L286b5c.  call temp:= `poll`(v12) @signature `Lio/reactivex/e0/a/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L286b62.  v12:= temp @kind object;
  #L286b64.  if v12 == 0 then goto L286b88;
  #L286b68.  call `onNext`(v3, v12) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L286b6e.  call `requestOne`(v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.requestOne:()V` @kind virtual;
  #L286b74.  v16:= 1L;
  #L286b78.  v10:= v10 + v16 @kind long;
  #L286b7c.  v4:= lcmp(v10, v6);
  #L286b80.  if v4 != 0 then goto L286b86;
  #L286b84.  goto L286ba2;
  #L286b86.  v15:= 0I;
  #L286b88.  v14:= v14 + 1;
  #L286b8c.  goto L286b4a;
  #L286b8e.  if v13 == 0 then goto L286b9e;
  #L286b92.  if v15 == 0 then goto L286b9e;
  #L286b96.  call `onComplete`(v3) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L286b9c.  return @kind void;
  #L286b9e.  if v15 == 0 then goto L286af6;
  #L286ba2.  v4:= lcmp(v10, v6);
  #L286ba6.  if v4 != 0 then goto L286c2c;
  #L286baa.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.cancelled` @type ^`boolean` @kind boolean;
  #L286bae.  if v4 == 0 then goto L286bba;
  #L286bb2.  call `cleanup`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cleanup:()V` @kind virtual;
  #L286bb8.  return @kind void;
  #L286bba.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L286bbe.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L286bc4.  v4:= temp @kind object;
  #L286bc6.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L286bca.  if v4 == 0 then goto L286bdc;
  #L286bce.  call `cleanup`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cleanup:()V` @kind virtual;
  #L286bd4.  call `onError`(v3, v4) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L286bda.  return @kind void;
  #L286bdc.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.done` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L286be0.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L286be6.  v4:= temp;
  #L286be8.  if v4 != 0 then goto L286bf0;
  #L286bec.  v4:= 1I;
  #L286bee.  goto L286bf2;
  #L286bf0.  v4:= 0I;
  #L286bf2.  v12:= 0I;
  #L286bf4.  if v12 >= v2 then goto L286c1a;
  #L286bf8.  v13:= v1[v12] @kind object;
  #L286bfc.  v13:= v13.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L286c00.  if v13 == 0 then goto L286c14;
  #L286c04.  call temp:= `isEmpty`(v13) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L286c0a.  v13:= temp;
  #L286c0c.  if v13 != 0 then goto L286c14;
  #L286c10.  v12:= 0I;
  #L286c12.  goto L286c1c;
  #L286c14.  v12:= v12 + 1;
  #L286c18.  goto L286bf4;
  #L286c1a.  v12:= 1I;
  #L286c1c.  if v4 == 0 then goto L286c2c;
  #L286c20.  if v12 == 0 then goto L286c2c;
  #L286c24.  call `onComplete`(v3) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L286c2a.  return @kind void;
  #L286c2c.  v4:= lcmp(v10, v8);
  #L286c30.  if v4 == 0 then goto L286c52;
  #L286c34.  v8:= 9223372036854775807L;
  #L286c3e.  v4:= lcmp(v6, v8);
  #L286c42.  if v4 == 0 then goto L286c52;
  #L286c46.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L286c4a.  v6:= -v10 @kind long;
  #L286c4c.  call temp:= `addAndGet`(v4, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L286c52.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L286c58.  v4:= temp;
  #L286c5a.  if v4 != v5 then goto L286c6e;
  #L286c5e.  v4:= -v5 @kind int;
  #L286c60.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L286c66.  v4:= temp;
  #L286c68.  if v4 != 0 then goto L286c6e;
  #L286c6c.  return @kind void;
  #L286c6e.  v5:= v4;
  #L286c70.  goto L286ae4;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L286c84.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.done` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L286c88.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L286c8e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.drain:()V` @kind virtual;
  #L286c94.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L286ca8.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L286cac.  v1:= 0I;
  #L286cae.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L286cb4.  v0:= temp;
  #L286cb6.  if v0 == 0 then goto L286cc8;
  #L286cba.  call `cancelAll`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cancelAll:()V` @kind virtual;
  #L286cc0.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.drain:()V` @kind virtual;
  #L286cc6.  goto L286cde;
  #L286cc8.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L286ccc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L286cd2.  v0:= temp @kind object;
  #L286cd4.  if v3 == v0 then goto L286cde;
  #L286cd8.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L286cde.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscription` v6 @kind this, `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.onNext:(Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L286cf0.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L286cf6.  v0:= temp;
  #L286cf8.  v1:= "Queue full?!" @kind object;
  #L286cfc.  if v0 != 0 then goto L286dbe;
  #L286d00.  v0:= 0I;
  #L286d02.  v2:= 1I;
  #L286d04.  call temp:= `compareAndSet`(v6, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L286d0a.  v0:= temp;
  #L286d0c.  if v0 == 0 then goto L286dbe;
  #L286d10.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L286d14.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L286d1a.  v2:= temp @kind wide;
  #L286d1c.  v4:= 0L;
  #L286d20.  v0:= lcmp(v2, v4);
  #L286d24.  if v0 == 0 then goto L286d66;
  #L286d28.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.downstream` @type ^`n.b.c` @kind object;
  #L286d2c.  call `onNext`(v0, v8) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L286d32.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L286d36.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L286d3c.  v0:= temp @kind wide;
  #L286d3e.  v2:= 9223372036854775807L;
  #L286d48.  v8:= lcmp(v0, v2);
  #L286d4c.  if v8 == 0 then goto L286d5a;
  #L286d50.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L286d54.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L286d5a.  v0:= 1L;
  #L286d5e.  call `request`(v7, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.request:(J)V` @kind virtual;
  #L286d64.  goto L286db0;
  #L286d66.  call temp:= `getQueue`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.getQueue:()Lio/reactivex/e0/a/i;` @kind virtual;
  #L286d6c.  v7:= temp @kind object;
  #L286d6e.  call temp:= `offer`(v7, v8) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L286d74.  v7:= temp;
  #L286d76.  if v7 != 0 then goto L286db0;
  #L286d7a.  call `cancelAll`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cancelAll:()V` @kind virtual;
  #L286d80.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L286d84.  call `<init>`(v7, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L286d8a.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L286d8e.  v0:= 0I;
  #L286d90.  call temp:= `compareAndSet`(v8, v0, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L286d96.  v8:= temp;
  #L286d98.  if v8 == 0 then goto L286da8;
  #L286d9c.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.downstream` @type ^`n.b.c` @kind object;
  #L286da0.  call `onError`(v8, v7) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L286da6.  goto L286dae;
  #L286da8.  call `t`(v7) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L286dae.  return @kind void;
  #L286db0.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L286db6.  v7:= temp;
  #L286db8.  if v7 != 0 then goto L286df8;
  #L286dbc.  return @kind void;
  #L286dbe.  call temp:= `getQueue`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.getQueue:()Lio/reactivex/e0/a/i;` @kind virtual;
  #L286dc4.  v7:= temp @kind object;
  #L286dc6.  call temp:= `offer`(v7, v8) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L286dcc.  v7:= temp;
  #L286dce.  if v7 != 0 then goto L286dea;
  #L286dd2.  call `cancelAll`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cancelAll:()V` @kind virtual;
  #L286dd8.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L286ddc.  call `<init>`(v7, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L286de2.  call `onError`(v6, v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L286de8.  return @kind void;
  #L286dea.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L286df0.  v7:= temp;
  #L286df2.  if v7 == 0 then goto L286df8;
  #L286df6.  return @kind void;
  #L286df8.  call `drainLoop`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscription;.drainLoop:()V` @kind virtual;
  #L286dfe.  return @kind void;
}
