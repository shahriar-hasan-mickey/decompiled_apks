record `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.cancelled` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.done` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.errors` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.requested` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber`[] `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.subscribers` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` v2 @kind this, `n.b.c` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.<init>:(Ln/b/c;II)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2865e4.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L2865ea.  v0:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L2865ee.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L2865f4.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` := v0 @kind object;
  #L2865f8.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L2865fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L286602.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L286606.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L28660a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L286610.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.done` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L286614.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.downstream` @type ^`n.b.c` := v3 @kind object;
  #L286618.  v3:= new `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber`[v4];
  #L28661c.  v0:= 0I;
  #L28661e.  if v0 >= v4 then goto L286636;
  #L286622.  v1:= new `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber`;
  #L286626.  call `<init>`(v1, v2, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;I)V` @kind direct;
  #L28662c.  v3[v0]:= v1 @kind object;
  #L286630.  v0:= v0 + 1;
  #L286634.  goto L28661e;
  #L286636.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.subscribers` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber`[] := v3 @kind object;
  #L28663a.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.done` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L28663e.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L286644.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L286658.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.cancelled` @type ^`boolean` @kind boolean;
  #L28665c.  if v0 != 0 then goto L28667e;
  #L286660.  v0:= 1I;
  #L286662.  v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L286666.  call `cancelAll`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cancelAll:()V` @kind virtual;
  #L28666c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L286672.  v0:= temp;
  #L286674.  if v0 != 0 then goto L28667e;
  #L286678.  call `cleanup`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cleanup:()V` @kind virtual;
  #L28667e.  return @kind void;
}
procedure `void` `cancelAll`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` v4 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cancelAll:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L286690.  v0:= v4.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.subscribers` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber`[] @kind object;
  #L286694.  v1:= length @variable v0;
  #L286696.  v2:= 0I;
  #L286698.  if v2 >= v1 then goto L2866ac;
  #L28669c.  v3:= v0[v2] @kind object;
  #L2866a0.  call temp:= `cancel`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.cancel:()Z` @kind virtual;
  #L2866a6.  v2:= v2 + 1;
  #L2866aa.  goto L286698;
  #L2866ac.  return @kind void;
}
procedure `void` `cleanup`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` v5 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cleanup:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2866c0.  v0:= v5.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.subscribers` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber`[] @kind object;
  #L2866c4.  v1:= length @variable v0;
  #L2866c6.  v2:= 0I;
  #L2866c8.  if v2 >= v1 then goto L2866dc;
  #L2866cc.  v3:= v0[v2] @kind object;
  #L2866d0.  v4:= 0I;
  #L2866d2.  v3.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.queue` @type ^`io.reactivex.e0.a.i` := v4 @kind object;
  #L2866d6.  v2:= v2 + 1;
  #L2866da.  goto L2866c8;
  #L2866dc.  return @kind void;
}
procedure `void` `drain`() @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.drain:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `onComplete`() @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.onComplete:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `onError`(`java.lang.Throwable` v0 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.onError:(Ljava/lang/Throwable;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.onNext:(Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;Ljava/lang/Object;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2866f0.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L2866f6.  v0:= temp;
  #L2866f8.  if v0 == 0 then goto L28670c;
  #L2866fc.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L286700.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L286706.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.drain:()V` @kind virtual;
  #L28670c.  return @kind void;
}
