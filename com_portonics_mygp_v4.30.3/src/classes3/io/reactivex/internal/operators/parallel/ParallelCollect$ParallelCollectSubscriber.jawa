record `io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.DeferredScalarSubscriber` @kind class {
  `java.lang.Object` `io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber.collection` @AccessFlag ;
  `io.reactivex.d0.b` `io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber.collector` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber.done` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.d0.b` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect$ParallelCollectSubscriber;.<init>:(Ln/b/c;Ljava/lang/Object;Lio/reactivex/d0/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L285d10.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/DeferredScalarSubscriber;.<init>:(Ln/b/c;)V` @kind direct;
  #L285d16.  v0.`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber.collection` @type ^`java.lang.Object` := v2 @kind object;
  #L285d1a.  v0.`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber.collector` @type ^`io.reactivex.d0.b` := v3 @kind object;
  #L285d1e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect$ParallelCollectSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285d30.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscribers/DeferredScalarSubscriber;.cancel:()V` @kind super;
  #L285d36.  v0:= v1.`io.reactivex.internal.subscribers.DeferredScalarSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L285d3a.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L285d40.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect$ParallelCollectSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L285d54.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber.done` @type ^`boolean` @kind boolean;
  #L285d58.  if v0 == 0 then goto L285d5e;
  #L285d5c.  return @kind void;
  #L285d5e.  v0:= 1I;
  #L285d60.  v2.`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L285d64.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber.collection` @type ^`java.lang.Object` @kind object;
  #L285d68.  v1:= 0I;
  #L285d6a.  v2.`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber.collection` @type ^`java.lang.Object` := v1 @kind object;
  #L285d6e.  call `complete`(v2, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L285d74.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect$ParallelCollectSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285d88.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber.done` @type ^`boolean` @kind boolean;
  #L285d8c.  if v0 == 0 then goto L285d98;
  #L285d90.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L285d96.  return @kind void;
  #L285d98.  v0:= 1I;
  #L285d9a.  v1.`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L285d9e.  v0:= 0I;
  #L285da0.  v1.`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber.collection` @type ^`java.lang.Object` := v0 @kind object;
  #L285da4.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L285da8.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L285dae.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect$ParallelCollectSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L285dc0.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber.done` @type ^`boolean` @kind boolean;
  #L285dc4.  if v0 == 0 then goto L285dca;
  #L285dc8.  return @kind void;
  #L285dca.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber.collector` @type ^`io.reactivex.d0.b` @kind object;
  #L285dce.  v1:= v2.`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber.collection` @type ^`java.lang.Object` @kind object;
  #L285dd2.  call `accept`(v0, v1, v3) @signature `Lio/reactivex/d0/b;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L285dd8.  goto L285dee;
  #L285dda.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L285ddc.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L285de2.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect$ParallelCollectSubscriber;.cancel:()V` @kind virtual;
  #L285de8.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect$ParallelCollectSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L285dee.  return @kind void;
  catch `java.lang.Throwable` @[L285dca..L285dd8] goto L285dda;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelCollect$ParallelCollectSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect$ParallelCollectSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L285e0c.  v0:= v2.`io.reactivex.internal.subscribers.DeferredScalarSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L285e10.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L285e16.  v0:= temp;
  #L285e18.  if v0 == 0 then goto L285e3a;
  #L285e1c.  v2.`io.reactivex.internal.subscribers.DeferredScalarSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L285e20.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L285e24.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L285e2a.  v0:= 9223372036854775807L;
  #L285e34.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L285e3a.  return @kind void;
}
