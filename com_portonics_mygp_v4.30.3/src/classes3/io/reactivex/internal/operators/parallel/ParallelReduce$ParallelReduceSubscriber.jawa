record `io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.DeferredScalarSubscriber` @kind class {
  `java.lang.Object` `io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.accumulator` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.done` @AccessFlag ;
  `io.reactivex.d0.c` `io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.reducer` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.d0.c` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.<init>:(Ln/b/c;Ljava/lang/Object;Lio/reactivex/d0/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L286e10.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/DeferredScalarSubscriber;.<init>:(Ln/b/c;)V` @kind direct;
  #L286e16.  v0.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.accumulator` @type ^`java.lang.Object` := v2 @kind object;
  #L286e1a.  v0.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.reducer` @type ^`io.reactivex.d0.c` := v3 @kind object;
  #L286e1e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L286e30.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscribers/DeferredScalarSubscriber;.cancel:()V` @kind super;
  #L286e36.  v0:= v1.`io.reactivex.internal.subscribers.DeferredScalarSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L286e3a.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L286e40.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L286e54.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.done` @type ^`boolean` @kind boolean;
  #L286e58.  if v0 != 0 then goto L286e72;
  #L286e5c.  v0:= 1I;
  #L286e5e.  v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L286e62.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.accumulator` @type ^`java.lang.Object` @kind object;
  #L286e66.  v1:= 0I;
  #L286e68.  v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.accumulator` @type ^`java.lang.Object` := v1 @kind object;
  #L286e6c.  call `complete`(v2, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L286e72.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L286e84.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.done` @type ^`boolean` @kind boolean;
  #L286e88.  if v0 == 0 then goto L286e94;
  #L286e8c.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L286e92.  return @kind void;
  #L286e94.  v0:= 1I;
  #L286e96.  v1.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L286e9a.  v0:= 0I;
  #L286e9c.  v1.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.accumulator` @type ^`java.lang.Object` := v0 @kind object;
  #L286ea0.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L286ea4.  call `onError`(v0, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L286eaa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L286ebc.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.done` @type ^`boolean` @kind boolean;
  #L286ec0.  if v0 != 0 then goto L286efa;
  #L286ec4.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.reducer` @type ^`io.reactivex.d0.c` @kind object;
  #L286ec8.  v1:= v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.accumulator` @type ^`java.lang.Object` @kind object;
  #L286ecc.  call temp:= `apply`(v0, v1, v3) @signature `Lio/reactivex/d0/c;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L286ed2.  v3:= temp @kind object;
  #L286ed4.  v0:= "The reducer returned a null value" @kind object;
  #L286ed8.  call temp:= `e`(v3, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L286ede.  v3:= temp @kind object;
  #L286ee0.  v2.`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber.accumulator` @type ^`java.lang.Object` := v3 @kind object;
  #L286ee4.  goto L286efa;
  #L286ee6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L286ee8.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L286eee.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.cancel:()V` @kind virtual;
  #L286ef4.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L286efa.  return @kind void;
  catch `java.lang.Throwable` @[L286ec4..L286ee0] goto L286ee6;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelReduce$ParallelReduceSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce$ParallelReduceSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L286f18.  v0:= v2.`io.reactivex.internal.subscribers.DeferredScalarSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L286f1c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L286f22.  v0:= temp;
  #L286f24.  if v0 == 0 then goto L286f46;
  #L286f28.  v2.`io.reactivex.internal.subscribers.DeferredScalarSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L286f2c.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L286f30.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L286f36.  v0:= 9223372036854775807L;
  #L286f40.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L286f46.  return @kind void;
}
