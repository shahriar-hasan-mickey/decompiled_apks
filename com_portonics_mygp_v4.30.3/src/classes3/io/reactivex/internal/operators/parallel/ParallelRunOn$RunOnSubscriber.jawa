record `io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` @kind class {
  `n.b.c` `io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber` v0 @kind this, `n.b.c` v1 @kind object, `int` v2 , `io.reactivex.internal.queue.SpscArrayQueue` v3 @kind object, `io.reactivex.x$a` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnSubscriber;.<init>:(Ln/b/c;ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/x$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2876b4.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.<init>:(ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/x$a;)V` @kind direct;
  #L2876ba.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L2876be.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2876d0.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2876d4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L2876da.  v0:= temp;
  #L2876dc.  if v0 == 0 then goto L2876fa;
  #L2876e0.  v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L2876e4.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L2876e8.  call `onSubscribe`(v0, v2) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L2876ee.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.prefetch` @type ^`int`;
  #L2876f2.  v0:= (`long`) v0 @kind i2l;
  #L2876f4.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2876fa.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber` v17 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L28770c.  v0:= v17 @kind object;
  #L287710.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.consumed` @type ^`int`;
  #L287714.  v2:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L287718.  v3:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L28771c.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.limit` @type ^`int`;
  #L287720.  v6:= 1I;
  #L287722.  v7:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L287726.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L28772c.  v7:= temp @kind wide;
  #L28772e.  v9:= 0L;
  #L287732.  v11:= v9 @kind wide;
  #L287734.  v13:= lcmp(v11, v7);
  #L287738.  if v13 == 0 then goto L2877de;
  #L28773c.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L287740.  if v13 == 0 then goto L28774c;
  #L287744.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L28774a.  return @kind void;
  #L28774c.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L287750.  if v13 == 0 then goto L287774;
  #L287754.  v14:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L287758.  if v14 == 0 then goto L287774;
  #L28775c.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L287762.  call `onError`(v3, v14) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L287768.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L28776c.  call `dispose`(v1) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L287772.  return @kind void;
  #L287774.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L28777a.  v14:= temp @kind object;
  #L28777c.  v15:= 0I;
  #L28777e.  if v14 != 0 then goto L287788;
  #L287782.  v16:= 1I;
  #L287786.  goto L28778c;
  #L287788.  v16:= 0I;
  #L28778c.  if v13 == 0 then goto L2877a6;
  #L287790.  if v16 == 0 then goto L2877a6;
  #L287794.  call `onComplete`(v3) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L28779a.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L28779e.  call `dispose`(v1) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2877a4.  return @kind void;
  #L2877a6.  if v16 == 0 then goto L2877ac;
  #L2877aa.  goto L2877de;
  #L2877ac.  call `onNext`(v3, v14) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2877b2.  v13:= 1L;
  #L2877b6.  v11:= v11 + v13 @kind long;
  #L2877b8.  v1:= v1 + 1;
  #L2877bc.  if v1 != v4 then goto L2877d4;
  #L2877c0.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2877c4.  v16:= v6;
  #L2877c8.  v5:= (`long`) v1 @kind i2l;
  #L2877ca.  call `request`(v13, v5) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2877d0.  v1:= 0I;
  #L2877d2.  goto L2877d8;
  #L2877d4.  v16:= v6;
  #L2877d8.  v6:= v16;
  #L2877dc.  goto L287734;
  #L2877de.  v16:= v6;
  #L2877e2.  v5:= lcmp(v11, v7);
  #L2877e6.  if v5 != 0 then goto L287840;
  #L2877ea.  v5:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L2877ee.  if v5 == 0 then goto L2877fa;
  #L2877f2.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L2877f8.  return @kind void;
  #L2877fa.  v5:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L2877fe.  if v5 == 0 then goto L287840;
  #L287802.  v5:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L287806.  if v5 == 0 then goto L287822;
  #L28780a.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L287810.  call `onError`(v3, v5) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L287816.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L28781a.  call `dispose`(v1) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L287820.  return @kind void;
  #L287822.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L287828.  v5:= temp;
  #L28782a.  if v5 == 0 then goto L287840;
  #L28782e.  call `onComplete`(v3) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L287834.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L287838.  call `dispose`(v1) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L28783e.  return @kind void;
  #L287840.  v5:= lcmp(v11, v9);
  #L287844.  if v5 == 0 then goto L287866;
  #L287848.  v5:= 9223372036854775807L;
  #L287852.  v9:= lcmp(v7, v5);
  #L287856.  if v9 == 0 then goto L287866;
  #L28785a.  v5:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L28785e.  v6:= -v11 @kind long;
  #L287860.  call temp:= `addAndGet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L287866.  call temp:= `get`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28786c.  v5:= temp;
  #L28786e.  v6:= v16;
  #L287872.  if v5 != v6 then goto L28788a;
  #L287876.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.consumed` @type ^`int` := v1;
  #L28787a.  v5:= -v6 @kind int;
  #L28787c.  call temp:= `addAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L287882.  v5:= temp;
  #L287884.  if v5 != 0 then goto L28788a;
  #L287888.  return @kind void;
  #L28788a.  v6:= v5;
  #L28788c.  goto L287722;
}
