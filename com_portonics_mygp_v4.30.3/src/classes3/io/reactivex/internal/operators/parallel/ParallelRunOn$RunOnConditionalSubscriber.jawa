record `io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber` @kind class {
  `io.reactivex.e0.a.a` `io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.downstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber` v0 @kind this, `io.reactivex.e0.a.a` v1 @kind object, `int` v2 , `io.reactivex.internal.queue.SpscArrayQueue` v3 @kind object, `io.reactivex.x$a` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnConditionalSubscriber;.<init>:(Lio/reactivex/e0/a/a;ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/x$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2874c0.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$BaseRunOnSubscriber;.<init>:(ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/x$a;)V` @kind direct;
  #L2874c6.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.downstream` @type ^`io.reactivex.e0.a.a` := v1 @kind object;
  #L2874ca.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnConditionalSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2874dc.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2874e0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L2874e6.  v0:= temp;
  #L2874e8.  if v0 == 0 then goto L287506;
  #L2874ec.  v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.upstream` @type ^`n.b.d` := v3 @kind object;
  #L2874f0.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L2874f4.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/h;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L2874fa.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.prefetch` @type ^`int`;
  #L2874fe.  v0:= (`long`) v0 @kind i2l;
  #L287500.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L287506.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber` v17 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$RunOnConditionalSubscriber;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L287518.  v0:= v17 @kind object;
  #L28751c.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.consumed` @type ^`int`;
  #L287520.  v2:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.queue` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L287524.  v3:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber.downstream` @type ^`io.reactivex.e0.a.a` @kind object;
  #L287528.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.limit` @type ^`int`;
  #L28752c.  v6:= 1I;
  #L28752e.  v7:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L287532.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L287538.  v7:= temp @kind wide;
  #L28753a.  v9:= 0L;
  #L28753e.  v11:= v9 @kind wide;
  #L287540.  v13:= lcmp(v11, v7);
  #L287544.  if v13 == 0 then goto L2875f0;
  #L287548.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L28754c.  if v13 == 0 then goto L287558;
  #L287550.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L287556.  return @kind void;
  #L287558.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L28755c.  if v13 == 0 then goto L287580;
  #L287560.  v14:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L287564.  if v14 == 0 then goto L287580;
  #L287568.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L28756e.  call `onError`(v3, v14) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L287574.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L287578.  call `dispose`(v1) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L28757e.  return @kind void;
  #L287580.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L287586.  v14:= temp @kind object;
  #L287588.  v15:= 0I;
  #L28758a.  if v14 != 0 then goto L287594;
  #L28758e.  v16:= 1I;
  #L287592.  goto L287598;
  #L287594.  v16:= 0I;
  #L287598.  if v13 == 0 then goto L2875b2;
  #L28759c.  if v16 == 0 then goto L2875b2;
  #L2875a0.  call `onComplete`(v3) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2875a6.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L2875aa.  call `dispose`(v1) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2875b0.  return @kind void;
  #L2875b2.  if v16 == 0 then goto L2875b8;
  #L2875b6.  goto L2875f0;
  #L2875b8.  call temp:= `tryOnNext`(v3, v14) @signature `Lio/reactivex/e0/a/a;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L2875be.  v13:= temp;
  #L2875c0.  if v13 == 0 then goto L2875ca;
  #L2875c4.  v13:= 1L;
  #L2875c8.  v11:= v11 + v13 @kind long;
  #L2875ca.  v1:= v1 + 1;
  #L2875ce.  if v1 != v4 then goto L2875e6;
  #L2875d2.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L2875d6.  v16:= v6;
  #L2875da.  v5:= (`long`) v1 @kind i2l;
  #L2875dc.  call `request`(v13, v5) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2875e2.  v1:= 0I;
  #L2875e4.  goto L2875ea;
  #L2875e6.  v16:= v6;
  #L2875ea.  v6:= v16;
  #L2875ee.  goto L287540;
  #L2875f0.  v16:= v6;
  #L2875f4.  v5:= lcmp(v11, v7);
  #L2875f8.  if v5 != 0 then goto L287652;
  #L2875fc.  v5:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L287600.  if v5 == 0 then goto L28760c;
  #L287604.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L28760a.  return @kind void;
  #L28760c.  v5:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.done` @type ^`boolean` @kind boolean;
  #L287610.  if v5 == 0 then goto L287652;
  #L287614.  v5:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L287618.  if v5 == 0 then goto L287634;
  #L28761c.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L287622.  call `onError`(v3, v5) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L287628.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L28762c.  call `dispose`(v1) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L287632.  return @kind void;
  #L287634.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L28763a.  v5:= temp;
  #L28763c.  if v5 == 0 then goto L287652;
  #L287640.  call `onComplete`(v3) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L287646.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.worker` @type ^`io.reactivex.x$a` @kind object;
  #L28764a.  call `dispose`(v1) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L287650.  return @kind void;
  #L287652.  v5:= lcmp(v11, v9);
  #L287656.  if v5 == 0 then goto L287678;
  #L28765a.  v5:= 9223372036854775807L;
  #L287664.  v9:= lcmp(v7, v5);
  #L287668.  if v9 == 0 then goto L287678;
  #L28766c.  v5:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L287670.  v6:= -v11 @kind long;
  #L287672.  call temp:= `addAndGet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L287678.  call temp:= `get`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28767e.  v5:= temp;
  #L287680.  v6:= v16;
  #L287684.  if v5 != v6 then goto L28769c;
  #L287688.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$BaseRunOnSubscriber.consumed` @type ^`int` := v1;
  #L28768c.  v5:= -v6 @kind int;
  #L28768e.  call temp:= `addAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L287694.  v5:= temp;
  #L287696.  if v5 != 0 then goto L28769c;
  #L28769a.  return @kind void;
  #L28769c.  v6:= v5;
  #L28769e.  goto L28752e;
}
