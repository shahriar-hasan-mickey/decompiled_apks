record `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.cancelled` @AccessFlag VOLATILE;
  `java.util.Comparator` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.comparator` @AccessFlag FINAL;
  `n.b.c` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.error` @AccessFlag FINAL;
  `int`[] `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.indexes` @AccessFlag FINAL;
  `java.util.List`[] `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.lists` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.remaining` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.requested` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinInnerSubscriber`[] `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.subscribers` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription` v1 @kind this, `n.b.c` v2 @kind object, `int` v3 , `java.util.Comparator` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.<init>:(Ln/b/c;ILjava/util/Comparator;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L287968.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L28796e.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L287972.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L287978.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L28797c.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L287980.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L287986.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.remaining` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L28798a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L28798e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L287994.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L287998.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.downstream` @type ^`n.b.c` := v2 @kind object;
  #L28799c.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.comparator` @type ^`java.util.Comparator` := v4 @kind object;
  #L2879a0.  v2:= new `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinInnerSubscriber`[v3];
  #L2879a4.  v4:= 0I;
  #L2879a6.  if v4 >= v3 then goto L2879be;
  #L2879aa.  v0:= new `io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinInnerSubscriber`;
  #L2879ae.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;I)V` @kind direct;
  #L2879b4.  v2[v4]:= v0 @kind object;
  #L2879b8.  v4:= v4 + 1;
  #L2879bc.  goto L2879a6;
  #L2879be.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.subscribers` @type ^`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinInnerSubscriber`[] := v2 @kind object;
  #L2879c2.  v2:= new `java.util.List`[v3];
  #L2879c6.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.lists` @type ^`java.util.List`[] := v2 @kind object;
  #L2879ca.  v2:= new `int`[v3];
  #L2879ce.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.indexes` @type ^`int`[] := v2 @kind object;
  #L2879d2.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.remaining` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L2879d6.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L2879dc.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2879f0.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L2879f4.  if v0 != 0 then goto L287a1c;
  #L2879f8.  v0:= 1I;
  #L2879fa.  v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L2879fe.  call `cancelAll`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.cancelAll:()V` @kind virtual;
  #L287a04.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L287a0a.  v0:= temp;
  #L287a0c.  if v0 != 0 then goto L287a1c;
  #L287a10.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.lists` @type ^`java.util.List`[] @kind object;
  #L287a14.  v1:= 0I;
  #L287a16.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L287a1c.  return @kind void;
}
procedure `void` `cancelAll`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription` v4 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.cancelAll:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L287a30.  v0:= v4.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.subscribers` @type ^`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinInnerSubscriber`[] @kind object;
  #L287a34.  v1:= length @variable v0;
  #L287a36.  v2:= 0I;
  #L287a38.  if v2 >= v1 then goto L287a4c;
  #L287a3c.  v3:= v0[v2] @kind object;
  #L287a40.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinInnerSubscriber;.cancel:()V` @kind virtual;
  #L287a46.  v2:= v2 + 1;
  #L287a4a.  goto L287a38;
  #L287a4c.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription` v16 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L287a60.  v1:= v16 @kind object;
  #L287a64.  call temp:= `getAndIncrement`(v16) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L287a6a.  v0:= temp;
  #L287a6c.  if v0 == 0 then goto L287a72;
  #L287a70.  return @kind void;
  #L287a72.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.downstream` @type ^`n.b.c` @kind object;
  #L287a76.  v3:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.lists` @type ^`java.util.List`[] @kind object;
  #L287a7a.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.indexes` @type ^`int`[] @kind object;
  #L287a7e.  v4:= length @variable v0;
  #L287a80.  v6:= 1I;
  #L287a82.  v7:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L287a86.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L287a8c.  v7:= temp @kind wide;
  #L287a8e.  v11:= 0L;
  #L287a92.  v14:= 0I;
  #L287a94.  v15:= lcmp(v11, v7);
  #L287a98.  if v15 == 0 then goto L287ba4;
  #L287a9c.  v15:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L287aa0.  if v15 == 0 then goto L287aac;
  #L287aa4.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L287aaa.  return @kind void;
  #L287aac.  v15:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L287ab0.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L287ab6.  v15:= temp @kind object;
  #L287ab8.  v15:= (`java.lang.Throwable`) v15 @kind object;
  #L287abc.  if v15 == 0 then goto L287ad4;
  #L287ac0.  call `cancelAll`(v16) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.cancelAll:()V` @kind virtual;
  #L287ac6.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L287acc.  call `onError`(v2, v15) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L287ad2.  return @kind void;
  #L287ad4.  v15:= -1I;
  #L287ad6.  v9:= v14 @kind object;
  #L287ad8.  v13:= 0I;
  #L287ada.  if v13 >= v4 then goto L287b74;
  #L287ade.  v10:= v3[v13] @kind object;
  #L287ae2.  v5:= v0[v13];
  #L287ae6.  call temp:= `size`(v10) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L287aec.  v14:= temp;
  #L287aee.  if v14 == v5 then goto L287b6c;
  #L287af2.  if v9 != 0 then goto L287b02;
  #L287af6.  call temp:= `get`(v10, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L287afc.  v9:= temp @kind object;
  #L287afe.  v15:= v13;
  #L287b00.  goto L287b6c;
  #L287b02.  call temp:= `get`(v10, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L287b08.  v5:= temp @kind object;
  #L287b0a.  v10:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.comparator` @type ^`java.util.Comparator` @kind object;
  #L287b0e.  call temp:= `compare`(v10, v9, v5) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L287b14.  v10:= temp;
  #L287b16.  if v10 <= 0 then goto L287b1e;
  #L287b1a.  v10:= 1I;
  #L287b1c.  goto L287b20;
  #L287b1e.  v10:= 0I;
  #L287b20.  if v10 == 0 then goto L287b6c;
  #L287b24.  v9:= v5 @kind object;
  #L287b26.  goto L287afe;
  #L287b28.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L287b2a.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L287b30.  call `cancelAll`(v16) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.cancelAll:()V` @kind virtual;
  #L287b36.  v4:= 0I;
  #L287b38.  call `fill`(v3, v4) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L287b3e.  v3:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L287b42.  call temp:= `compareAndSet`(v3, v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L287b48.  v3:= temp;
  #L287b4a.  if v3 != 0 then goto L287b54;
  #L287b4e.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L287b54.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L287b58.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L287b5e.  v0:= temp @kind object;
  #L287b60.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L287b64.  call `onError`(v2, v0) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L287b6a.  return @kind void;
  #L287b6c.  v13:= v13 + 1;
  #L287b70.  v14:= 0I;
  #L287b72.  goto L287ada;
  #L287b74.  if v9 != 0 then goto L287b88;
  #L287b78.  v5:= 0I;
  #L287b7a.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L287b80.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L287b86.  return @kind void;
  #L287b88.  call `onNext`(v2, v9) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L287b8e.  v5:= v0[v15];
  #L287b92.  v9:= 1I;
  #L287b94.  v5:= v5 + v9 @kind int;
  #L287b96.  v0[v15]:= v5;
  #L287b9a.  v13:= 1L;
  #L287b9e.  v11:= v11 + v13 @kind long;
  #L287ba0.  goto L287a92;
  #L287ba4.  v9:= 1I;
  #L287ba6.  v5:= lcmp(v11, v7);
  #L287baa.  if v5 != 0 then goto L287c24;
  #L287bae.  v5:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.cancelled` @type ^`boolean` @kind boolean;
  #L287bb2.  if v5 == 0 then goto L287bc0;
  #L287bb6.  v5:= 0I;
  #L287bb8.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L287bbe.  return @kind void;
  #L287bc0.  v5:= 0I;
  #L287bc2.  v10:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L287bc6.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L287bcc.  v10:= temp @kind object;
  #L287bce.  v10:= (`java.lang.Throwable`) v10 @kind object;
  #L287bd2.  if v10 == 0 then goto L287bea;
  #L287bd6.  call `cancelAll`(v16) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.cancelAll:()V` @kind virtual;
  #L287bdc.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L287be2.  call `onError`(v2, v10) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L287be8.  return @kind void;
  #L287bea.  v5:= 0I;
  #L287bec.  if v5 >= v4 then goto L287c0e;
  #L287bf0.  v10:= v0[v5];
  #L287bf4.  v13:= v3[v5] @kind object;
  #L287bf8.  call temp:= `size`(v13) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L287bfe.  v13:= temp;
  #L287c00.  if v10 == v13 then goto L287c08;
  #L287c04.  v13:= 0I;
  #L287c06.  goto L287c10;
  #L287c08.  v5:= v5 + 1;
  #L287c0c.  goto L287bec;
  #L287c0e.  v13:= 1I;
  #L287c10.  if v13 == 0 then goto L287c24;
  #L287c14.  v5:= 0I;
  #L287c16.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L287c1c.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L287c22.  return @kind void;
  #L287c24.  v13:= 0L;
  #L287c28.  v5:= lcmp(v11, v13);
  #L287c2c.  if v5 == 0 then goto L287c4e;
  #L287c30.  v13:= 9223372036854775807L;
  #L287c3a.  v5:= lcmp(v7, v13);
  #L287c3e.  if v5 == 0 then goto L287c4e;
  #L287c42.  v5:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L287c46.  v7:= -v11 @kind long;
  #L287c48.  call temp:= `addAndGet`(v5, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L287c4e.  call temp:= `get`(v16) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L287c54.  v5:= temp;
  #L287c56.  if v5 != v6 then goto L287c6a;
  #L287c5a.  v5:= -v6 @kind int;
  #L287c5c.  call temp:= `addAndGet`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L287c62.  v5:= temp;
  #L287c64.  if v5 != 0 then goto L287c6a;
  #L287c68.  return @kind void;
  #L287c6a.  v6:= v5;
  #L287c6c.  goto L287a82;
  catch `java.lang.Throwable` @[L287b0a..L287b16] goto L287b28;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.innerError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L287c8c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L287c90.  v1:= 0I;
  #L287c92.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L287c98.  v0:= temp;
  #L287c9a.  if v0 == 0 then goto L287ca6;
  #L287c9e.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.drain:()V` @kind virtual;
  #L287ca4.  goto L287cbc;
  #L287ca6.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.error` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L287caa.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L287cb0.  v0:= temp @kind object;
  #L287cb2.  if v3 == v0 then goto L287cbc;
  #L287cb6.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L287cbc.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription` v1 @kind this, `java.util.List` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.innerNext:(Ljava/util/List;I)V` @AccessFlag  {
    temp;
    v0;

  #L287cd0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.lists` @type ^`java.util.List`[] @kind object;
  #L287cd4.  v0[v3]:= v2 @kind object;
  #L287cd8.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.remaining` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L287cdc.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L287ce2.  v2:= temp;
  #L287ce4.  if v2 != 0 then goto L287cee;
  #L287ce8.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.drain:()V` @kind virtual;
  #L287cee.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L287d00.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L287d06.  v0:= temp;
  #L287d08.  if v0 == 0 then goto L287d2c;
  #L287d0c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L287d10.  call temp:= `a`(v0, v2) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L287d16.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$SortedJoinSubscription.remaining` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L287d1a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L287d20.  v2:= temp;
  #L287d22.  if v2 != 0 then goto L287d2c;
  #L287d26.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$SortedJoinSubscription;.drain:()V` @kind virtual;
  #L287d2c.  return @kind void;
}
