record `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface {
  `int` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.parent` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.prefetch` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.produced` @AccessFlag ;
  `io.reactivex.e0.a.i` `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.queue` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v0 @kind this, `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2864b0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2864b6.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` := v1 @kind object;
  #L2864ba.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.prefetch` @type ^`int` := v2;
  #L2864be.  v1:= v2 ^> 2;
  #L2864c2.  v2:= v2 - v1 @kind int;
  #L2864c4.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.limit` @type ^`int` := v2;
  #L2864c8.  return @kind void;
}
procedure `boolean` `cancel`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.cancel:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L286468.  call temp:= `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28646e.  v0:= temp;
  #L286470.  return v0;
}
procedure `io.reactivex.e0.a.i` `getQueue`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.getQueue:()Lio/reactivex/e0/a/i;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L286484.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L286488.  if v0 != 0 then goto L28649e;
  #L28648c.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L286490.  v1:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.prefetch` @type ^`int`;
  #L286494.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L28649a.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.queue` @type ^`io.reactivex.e0.a.i` := v0 @kind object;
  #L28649e.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2864dc.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` @kind object;
  #L2864e0.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.onComplete:()V` @kind virtual;
  #L2864e6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2864f8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` @kind object;
  #L2864fc.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L286502.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L286514.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.parent` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` @kind object;
  #L286518.  call `onNext`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.onNext:(Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;Ljava/lang/Object;)V` @kind virtual;
  #L28651e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L286530.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.prefetch` @type ^`int`;
  #L286534.  v0:= (`long`) v0 @kind i2l;
  #L286536.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;J)Z` @kind static;
  #L28653c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L286550.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.produced` @type ^`long` @kind wide;
  #L286554.  v0:= v0 + v4 @kind long;
  #L286556.  v4:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.limit` @type ^`int`;
  #L28655a.  v4:= (`long`) v4 @kind i2l;
  #L28655c.  v2:= lcmp(v0, v4);
  #L286560.  if v2 < 0 then goto L286580;
  #L286564.  v4:= 0L;
  #L286568.  v3.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.produced` @type ^`long` := v4 @kind wide;
  #L28656c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L286572.  v4:= temp @kind object;
  #L286574.  v4:= (`n.b.d`) v4 @kind object;
  #L286578.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L28657e.  goto L286584;
  #L286580.  v3.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L286584.  return @kind void;
}
procedure `void` `requestOne`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.requestOne:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L286598.  v0:= v5.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.produced` @type ^`long` @kind wide;
  #L28659c.  v2:= 1L;
  #L2865a0.  v0:= v0 + v2 @kind long;
  #L2865a2.  v2:= v5.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.limit` @type ^`int`;
  #L2865a6.  v2:= (`long`) v2 @kind i2l;
  #L2865a8.  v4:= lcmp(v0, v2);
  #L2865ac.  if v4 != 0 then goto L2865cc;
  #L2865b0.  v2:= 0L;
  #L2865b4.  v5.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L2865b8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2865be.  v2:= temp @kind object;
  #L2865c0.  v2:= (`n.b.d`) v2 @kind object;
  #L2865c4.  call `request`(v2, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L2865ca.  goto L2865d0;
  #L2865cc.  v5.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L2865d0.  return @kind void;
}
