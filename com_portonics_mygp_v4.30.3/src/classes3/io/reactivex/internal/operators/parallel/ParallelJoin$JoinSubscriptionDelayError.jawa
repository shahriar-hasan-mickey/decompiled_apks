record `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionDelayError` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase` @kind class {
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionDelayError.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionDelayError` v0 @kind this, `n.b.c` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionDelayError;.<init>:(Ln/b/c;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L286720.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.<init>:(Ln/b/c;II)V` @kind direct;
  #L286726.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionDelayError` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionDelayError;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L286738.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L28673e.  v0:= temp;
  #L286740.  if v0 == 0 then goto L286746;
  #L286744.  return @kind void;
  #L286746.  call `drainLoop`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionDelayError;.drainLoop:()V` @kind virtual;
  #L28674c.  return @kind void;
}
procedure `void` `drainLoop`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionDelayError` v18 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionDelayError;.drainLoop:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L286760.  v0:= v18 @kind object;
  #L286764.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.subscribers` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber`[] @kind object;
  #L286768.  v2:= length @variable v1;
  #L28676a.  v3:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.downstream` @type ^`n.b.c` @kind object;
  #L28676e.  v5:= 1I;
  #L286770.  v6:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L286774.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L28677a.  v6:= temp @kind wide;
  #L28677c.  v8:= 0L;
  #L286780.  v10:= v8 @kind wide;
  #L286782.  v13:= lcmp(v10, v6);
  #L286786.  if v13 == 0 then goto L286832;
  #L28678a.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.cancelled` @type ^`boolean` @kind boolean;
  #L28678e.  if v13 == 0 then goto L28679a;
  #L286792.  call `cleanup`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cleanup:()V` @kind virtual;
  #L286798.  return @kind void;
  #L28679a.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.done` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L28679e.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2867a4.  v13:= temp;
  #L2867a6.  if v13 != 0 then goto L2867ae;
  #L2867aa.  v13:= 1I;
  #L2867ac.  goto L2867b0;
  #L2867ae.  v13:= 0I;
  #L2867b0.  v14:= 0I;
  #L2867b2.  v15:= 1I;
  #L2867b4.  if v14 >= v2 then goto L2867f6;
  #L2867b8.  v4:= v1[v14] @kind object;
  #L2867bc.  v12:= v4.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L2867c0.  if v12 == 0 then goto L2867f0;
  #L2867c4.  call temp:= `poll`(v12) @signature `Lio/reactivex/e0/a/i;.poll:()Ljava/lang/Object;` @kind interface;
  #L2867ca.  v12:= temp @kind object;
  #L2867cc.  if v12 == 0 then goto L2867f0;
  #L2867d0.  call `onNext`(v3, v12) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2867d6.  call `requestOne`(v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.requestOne:()V` @kind virtual;
  #L2867dc.  v16:= 1L;
  #L2867e0.  v10:= v10 + v16 @kind long;
  #L2867e4.  v4:= lcmp(v10, v6);
  #L2867e8.  if v4 != 0 then goto L2867ee;
  #L2867ec.  goto L286832;
  #L2867ee.  v15:= 0I;
  #L2867f0.  v14:= v14 + 1;
  #L2867f4.  goto L2867b4;
  #L2867f6.  if v13 == 0 then goto L28682e;
  #L2867fa.  if v15 == 0 then goto L28682e;
  #L2867fe.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L286802.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L286808.  v1:= temp @kind object;
  #L28680a.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L28680e.  if v1 == 0 then goto L286826;
  #L286812.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L286816.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L28681c.  v1:= temp @kind object;
  #L28681e.  call `onError`(v3, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L286824.  goto L28682c;
  #L286826.  call `onComplete`(v3) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L28682c.  return @kind void;
  #L28682e.  if v15 == 0 then goto L286782;
  #L286832.  v4:= lcmp(v10, v6);
  #L286836.  if v4 != 0 then goto L2868c2;
  #L28683a.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.cancelled` @type ^`boolean` @kind boolean;
  #L28683e.  if v4 == 0 then goto L28684a;
  #L286842.  call `cleanup`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionBase;.cleanup:()V` @kind virtual;
  #L286848.  return @kind void;
  #L28684a.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.done` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L28684e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L286854.  v4:= temp;
  #L286856.  if v4 != 0 then goto L28685e;
  #L28685a.  v4:= 1I;
  #L28685c.  goto L286860;
  #L28685e.  v4:= 0I;
  #L286860.  v12:= 0I;
  #L286862.  if v12 >= v2 then goto L286888;
  #L286866.  v13:= v1[v12] @kind object;
  #L28686a.  v13:= v13.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber.queue` @type ^`io.reactivex.e0.a.i` @kind object;
  #L28686e.  if v13 == 0 then goto L286882;
  #L286872.  call temp:= `isEmpty`(v13) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L286878.  v13:= temp;
  #L28687a.  if v13 != 0 then goto L286882;
  #L28687e.  v12:= 0I;
  #L286880.  goto L28688a;
  #L286882.  v12:= v12 + 1;
  #L286886.  goto L286862;
  #L286888.  v12:= 1I;
  #L28688a.  if v4 == 0 then goto L2868c2;
  #L28688e.  if v12 == 0 then goto L2868c2;
  #L286892.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L286896.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28689c.  v1:= temp @kind object;
  #L28689e.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L2868a2.  if v1 == 0 then goto L2868ba;
  #L2868a6.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L2868aa.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2868b0.  v1:= temp @kind object;
  #L2868b2.  call `onError`(v3, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2868b8.  goto L2868c0;
  #L2868ba.  call `onComplete`(v3) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2868c0.  return @kind void;
  #L2868c2.  v4:= lcmp(v10, v8);
  #L2868c6.  if v4 == 0 then goto L2868e8;
  #L2868ca.  v8:= 9223372036854775807L;
  #L2868d4.  v4:= lcmp(v6, v8);
  #L2868d8.  if v4 == 0 then goto L2868e8;
  #L2868dc.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2868e0.  v6:= -v10 @kind long;
  #L2868e2.  call temp:= `addAndGet`(v4, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L2868e8.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2868ee.  v4:= temp;
  #L2868f0.  if v4 != v5 then goto L286904;
  #L2868f4.  v4:= -v5 @kind int;
  #L2868f6.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L2868fc.  v4:= temp;
  #L2868fe.  if v4 != 0 then goto L286904;
  #L286902.  return @kind void;
  #L286904.  v5:= v4;
  #L286906.  goto L286770;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionDelayError` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionDelayError;.onComplete:()V` @AccessFlag  {
    temp;
    v0;

  #L28691c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.done` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L286920.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L286926.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionDelayError;.drain:()V` @kind virtual;
  #L28692c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionDelayError` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionDelayError;.onError:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L286940.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L286944.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L28694a.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.done` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L28694e.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L286954.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionDelayError;.drain:()V` @kind virtual;
  #L28695a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionDelayError` v6 @kind this, `io.reactivex.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionDelayError;.onNext:(Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L28696c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L286972.  v0:= temp;
  #L286974.  v1:= "Queue full?!" @kind object;
  #L286978.  if v0 != 0 then goto L286a30;
  #L28697c.  v0:= 0I;
  #L28697e.  v2:= 1I;
  #L286980.  call temp:= `compareAndSet`(v6, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L286986.  v0:= temp;
  #L286988.  if v0 == 0 then goto L286a30;
  #L28698c.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L286990.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L286996.  v2:= temp @kind wide;
  #L286998.  v4:= 0L;
  #L28699c.  v0:= lcmp(v2, v4);
  #L2869a0.  if v0 == 0 then goto L2869e2;
  #L2869a4.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.downstream` @type ^`n.b.c` @kind object;
  #L2869a8.  call `onNext`(v0, v8) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2869ae.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2869b2.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L2869b8.  v0:= temp @kind wide;
  #L2869ba.  v2:= 9223372036854775807L;
  #L2869c4.  v8:= lcmp(v0, v2);
  #L2869c8.  if v8 == 0 then goto L2869d6;
  #L2869cc.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L2869d0.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L2869d6.  v0:= 1L;
  #L2869da.  call `request`(v7, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.request:(J)V` @kind virtual;
  #L2869e0.  goto L286a22;
  #L2869e2.  call temp:= `getQueue`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.getQueue:()Lio/reactivex/e0/a/i;` @kind virtual;
  #L2869e8.  v0:= temp @kind object;
  #L2869ea.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L2869f0.  v8:= temp;
  #L2869f2.  if v8 != 0 then goto L286a22;
  #L2869f6.  call temp:= `cancel`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.cancel:()Z` @kind virtual;
  #L2869fc.  v7:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L286a00.  v8:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L286a04.  call `<init>`(v8, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L286a0a.  call temp:= `addThrowable`(v7, v8) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L286a10.  v7:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.done` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L286a14.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L286a1a.  call `drainLoop`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionDelayError;.drainLoop:()V` @kind virtual;
  #L286a20.  return @kind void;
  #L286a22.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L286a28.  v7:= temp;
  #L286a2a.  if v7 != 0 then goto L286a7c;
  #L286a2e.  return @kind void;
  #L286a30.  call temp:= `getQueue`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.getQueue:()Lio/reactivex/e0/a/i;` @kind virtual;
  #L286a36.  v0:= temp @kind object;
  #L286a38.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L286a3e.  v8:= temp;
  #L286a40.  if v8 != 0 then goto L286a6e;
  #L286a44.  call temp:= `cancel`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinInnerSubscriber;.cancel:()Z` @kind virtual;
  #L286a4a.  v7:= temp;
  #L286a4c.  if v7 == 0 then goto L286a6e;
  #L286a50.  v7:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.errors` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L286a54.  v8:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L286a58.  call `<init>`(v8, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L286a5e.  call temp:= `addThrowable`(v7, v8) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L286a64.  v7:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase.done` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L286a68.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L286a6e.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L286a74.  v7:= temp;
  #L286a76.  if v7 == 0 then goto L286a7c;
  #L286a7a.  return @kind void;
  #L286a7c.  call `drainLoop`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$JoinSubscriptionDelayError;.drainLoop:()V` @kind virtual;
  #L286a82.  return @kind void;
}
