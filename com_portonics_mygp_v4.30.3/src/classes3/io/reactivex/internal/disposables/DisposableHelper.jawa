record `io.reactivex.internal.disposables.DisposableHelper` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `io.reactivex.disposables.b` @kind interface {
}
global `io.reactivex.internal.disposables.DisposableHelper`[] `@@io.reactivex.internal.disposables.DisposableHelper.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `io.reactivex.internal.disposables.DisposableHelper` `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/disposables/DisposableHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L247a94.  v0:= new `io.reactivex.internal.disposables.DisposableHelper`;
  #L247a98.  v1:= "DISPOSED" @kind object;
  #L247a9c.  v2:= 0I;
  #L247a9e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L247aa4.  `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` := v0 @kind object;
  #L247aa8.  v1:= 1I;
  #L247aaa.  v1:= new `io.reactivex.internal.disposables.DisposableHelper`[v1];
  #L247aae.  v1[v2]:= v0 @kind object;
  #L247ab2.  `@@io.reactivex.internal.disposables.DisposableHelper.$VALUES` @type ^`io.reactivex.internal.disposables.DisposableHelper`[] := v1 @kind object;
  #L247ab6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.disposables.DisposableHelper` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L247ac8.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L247ace.  return @kind void;
}
procedure `boolean` `dispose`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L247874.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24787a.  v0:= temp @kind object;
  #L24787c.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L247880.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L247884.  if v0 == v1 then goto L2478a6;
  #L247888.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L24788e.  v2:= temp @kind object;
  #L247890.  v2:= (`io.reactivex.disposables.b`) v2 @kind object;
  #L247894.  if v2 == v1 then goto L2478a6;
  #L247898.  if v2 == 0 then goto L2478a2;
  #L24789c.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2478a2.  v2:= 1I;
  #L2478a4.  return v2;
  #L2478a6.  v2:= 0I;
  #L2478a8.  return v2;
}
procedure `boolean` `isDisposed`(`io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2478d0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L2478d4.  if v1 != v0 then goto L2478dc;
  #L2478d8.  v1:= 1I;
  #L2478da.  goto L2478de;
  #L2478dc.  v1:= 0I;
  #L2478de.  return v1;
}
procedure `boolean` `replace`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2478f0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2478f6.  v0:= temp @kind object;
  #L2478f8.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L2478fc.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L247900.  if v0 != v1 then goto L247912;
  #L247904.  if v3 == 0 then goto L24790e;
  #L247908.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L24790e.  v2:= 0I;
  #L247910.  return v2;
  #L247912.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L247918.  v0:= temp;
  #L24791a.  if v0 == 0 then goto L2478f0;
  #L24791e.  v2:= 1I;
  #L247920.  return v2;
}
procedure `void` `reportDisposableSet`() @signature `Lio/reactivex/internal/disposables/DisposableHelper;.reportDisposableSet:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L247af4.  v0:= new `io.reactivex.exceptions.ProtocolViolationException`;
  #L247af8.  v1:= "Disposable already set!" @kind object;
  #L247afc.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247b02.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L247b08.  return @kind void;
}
procedure `boolean` `set`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `io.reactivex.disposables.b` v3 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L247934.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24793a.  v0:= temp @kind object;
  #L24793c.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L247940.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L247944.  if v0 != v1 then goto L247956;
  #L247948.  if v3 == 0 then goto L247952;
  #L24794c.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L247952.  v2:= 0I;
  #L247954.  return v2;
  #L247956.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L24795c.  v1:= temp;
  #L24795e.  if v1 == 0 then goto L247934;
  #L247962.  if v0 == 0 then goto L24796c;
  #L247966.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L24796c.  v2:= 1I;
  #L24796e.  return v2;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L247980.  v0:= "d is null" @kind object;
  #L247984.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L24798a.  v0:= 0I;
  #L24798c.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L247992.  v0:= temp;
  #L247994.  if v0 != 0 then goto L2479b8;
  #L247998.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L24799e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2479a4.  v1:= temp @kind object;
  #L2479a6.  v2:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L2479aa.  if v1 == v2 then goto L2479b4;
  #L2479ae.  call `reportDisposableSet`() @signature `Lio/reactivex/internal/disposables/DisposableHelper;.reportDisposableSet:()V` @kind static;
  #L2479b4.  v1:= 0I;
  #L2479b6.  return v1;
  #L2479b8.  v1:= 1I;
  #L2479ba.  return v1;
}
procedure `boolean` `trySet`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.trySet:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2479cc.  v0:= 0I;
  #L2479ce.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2479d4.  v0:= temp;
  #L2479d6.  if v0 != 0 then goto L2479f4;
  #L2479da.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2479e0.  v1:= temp @kind object;
  #L2479e2.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L2479e6.  if v1 != v0 then goto L2479f0;
  #L2479ea.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2479f0.  v1:= 0I;
  #L2479f2.  return v1;
  #L2479f4.  v1:= 1I;
  #L2479f6.  return v1;
}
procedure `boolean` `validate`(`io.reactivex.disposables.b` v1 @kind object, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L247a08.  v0:= 0I;
  #L247a0a.  if v2 != 0 then goto L247a24;
  #L247a0e.  v1:= new `java.lang.NullPointerException`;
  #L247a12.  v2:= "next is null" @kind object;
  #L247a16.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247a1c.  call `t`(v1) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L247a22.  return v0;
  #L247a24.  if v1 == 0 then goto L247a36;
  #L247a28.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L247a2e.  call `reportDisposableSet`() @signature `Lio/reactivex/internal/disposables/DisposableHelper;.reportDisposableSet:()V` @kind static;
  #L247a34.  return v0;
  #L247a36.  v1:= 1I;
  #L247a38.  return v1;
}
procedure `io.reactivex.internal.disposables.DisposableHelper` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.valueOf:(Ljava/lang/String;)Lio/reactivex/internal/disposables/DisposableHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L247a4c.  v0:= constclass @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L247a50.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L247a56.  v1:= temp @kind object;
  #L247a58.  v1:= (`io.reactivex.internal.disposables.DisposableHelper`) v1 @kind object;
  #L247a5c.  return v1 @kind object;
}
procedure `io.reactivex.internal.disposables.DisposableHelper`[] `values`() @signature `Lio/reactivex/internal/disposables/DisposableHelper;.values:()[Lio/reactivex/internal/disposables/DisposableHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L247a70.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.$VALUES` @type ^`io.reactivex.internal.disposables.DisposableHelper`[] @kind object;
  #L247a74.  call temp:= `clone`(v0) @signature `[Lio/reactivex/internal/disposables/DisposableHelper;.clone:()Ljava/lang/Object;` @kind virtual;
  #L247a7a.  v0:= temp @kind object;
  #L247a7c.  v0:= (`io.reactivex.internal.disposables.DisposableHelper`[]) v0 @kind object;
  #L247a80.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.disposables.DisposableHelper` v0 @kind this) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L247ae0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.disposables.DisposableHelper` v1 @kind this) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2478bc.  v0:= 1I;
  #L2478be.  return v0;
}
