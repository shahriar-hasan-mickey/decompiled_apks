record `io.reactivex.internal.disposables.CancellableDisposable` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.b` @kind interface {
}
global `long` `@@io.reactivex.internal.disposables.CancellableDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.disposables.CancellableDisposable` v0 @kind this, `io.reactivex.d0.f` v1 @kind object) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/d0/f;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L247804.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L24780a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.disposables.CancellableDisposable` v1 @kind this) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24781c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L247822.  v0:= temp @kind object;
  #L247824.  if v0 == 0 then goto L247850;
  #L247828.  v0:= 0I;
  #L24782a.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L247830.  v0:= temp @kind object;
  #L247832.  v0:= (`io.reactivex.d0.f`) v0 @kind object;
  #L247836.  if v0 == 0 then goto L247850;
  #L24783a.  call `cancel`(v0) @signature `Lio/reactivex/d0/f;.cancel:()V` @kind interface;
  #L247840.  goto L247850;
  #L247842.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L247844.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24784a.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L247850.  return @kind void;
  catch `java.lang.Exception` @[L24783a..L247840] goto L247842;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.disposables.CancellableDisposable` v1 @kind this) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2477e0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2477e6.  v0:= temp @kind object;
  #L2477e8.  if v0 != 0 then goto L2477f0;
  #L2477ec.  v0:= 1I;
  #L2477ee.  goto L2477f2;
  #L2477f0.  v0:= 0I;
  #L2477f2.  return v0;
}
