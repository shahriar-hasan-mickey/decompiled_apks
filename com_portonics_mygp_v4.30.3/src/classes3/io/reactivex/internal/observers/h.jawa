record `io.reactivex.internal.observers.h` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.t` @kind interface, `java.util.concurrent.Future` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `java.lang.Object` `io.reactivex.internal.observers.h.b` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.observers.h.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.observers.h.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.observers.h` v1 @kind this) @signature `Lio/reactivex/internal/observers/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L24a44c.  v0:= 1I;
  #L24a44e.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L24a454.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L24a458.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L24a45e.  v1.`io.reactivex.internal.observers.h.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L24a462.  return @kind void;
}
procedure `boolean` `cancel`(`io.reactivex.internal.observers.h` v2 @kind this, `boolean` v3 ) @signature `Lio/reactivex/internal/observers/h;.cancel:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24a29c.  v3:= v2.`io.reactivex.internal.observers.h.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24a2a0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24a2a6.  v3:= temp @kind object;
  #L24a2a8.  v3:= (`io.reactivex.disposables.b`) v3 @kind object;
  #L24a2ac.  if v3 == v2 then goto L24a2de;
  #L24a2b0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L24a2b4.  if v3 != v0 then goto L24a2ba;
  #L24a2b8.  goto L24a2de;
  #L24a2ba.  v1:= v2.`io.reactivex.internal.observers.h.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24a2be.  call temp:= `compareAndSet`(v1, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L24a2c4.  v0:= temp;
  #L24a2c6.  if v0 == 0 then goto L24a29c;
  #L24a2ca.  if v3 == 0 then goto L24a2d4;
  #L24a2ce.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L24a2d4.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L24a2da.  v3:= 1I;
  #L24a2dc.  return v3;
  #L24a2de.  v3:= 0I;
  #L24a2e0.  return v3;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.h` v0 @kind this) @signature `Lio/reactivex/internal/observers/h;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L24a474.  return @kind void;
}
procedure `java.lang.Object` `get`(`io.reactivex.internal.observers.h` v5 @kind this) @signature `Lio/reactivex/internal/observers/h;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24a368.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L24a36e.  v0:= temp @kind wide;
  #L24a370.  v2:= 0L;
  #L24a374.  v4:= lcmp(v0, v2);
  #L24a378.  if v4 == 0 then goto L24a388;
  #L24a37c.  call `b`() @signature `Lio/reactivex/internal/util/c;.b:()V` @kind static;
  #L24a382.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L24a388.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/internal/observers/h;.isCancelled:()Z` @kind virtual;
  #L24a38e.  v0:= temp;
  #L24a390.  if v0 != 0 then goto L24a3ae;
  #L24a394.  v0:= v5.`io.reactivex.internal.observers.h.c` @type ^`java.lang.Throwable` @kind object;
  #L24a398.  if v0 != 0 then goto L24a3a2;
  #L24a39c.  v0:= v5.`io.reactivex.internal.observers.h.b` @type ^`java.lang.Object` @kind object;
  #L24a3a0.  return v0 @kind object;
  #L24a3a2.  v1:= new `java.util.concurrent.ExecutionException`;
  #L24a3a6.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L24a3ac.  throw v1;
  #L24a3ae.  v0:= new `java.util.concurrent.CancellationException`;
  #L24a3b2.  call `<init>`(v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L24a3b8.  throw v0;
}
procedure `java.lang.Object` `get`(`io.reactivex.internal.observers.h` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/internal/observers/h;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24a3cc.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L24a3d2.  v0:= temp @kind wide;
  #L24a3d4.  v2:= 0L;
  #L24a3d8.  v4:= lcmp(v0, v2);
  #L24a3dc.  if v4 == 0 then goto L24a408;
  #L24a3e0.  call `b`() @signature `Lio/reactivex/internal/util/c;.b:()V` @kind static;
  #L24a3e6.  call temp:= `await`(v5, v6, v8) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L24a3ec.  v0:= temp;
  #L24a3ee.  if v0 == 0 then goto L24a3f4;
  #L24a3f2.  goto L24a408;
  #L24a3f4.  v0:= new `java.util.concurrent.TimeoutException`;
  #L24a3f8.  call temp:= `d`(v6, v8) @signature `Lio/reactivex/internal/util/ExceptionHelper;.d:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L24a3fe.  v6:= temp @kind object;
  #L24a400.  call `<init>`(v0, v6) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a406.  throw v0;
  #L24a408.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/internal/observers/h;.isCancelled:()Z` @kind virtual;
  #L24a40e.  v6:= temp;
  #L24a410.  if v6 != 0 then goto L24a42e;
  #L24a414.  v6:= v5.`io.reactivex.internal.observers.h.c` @type ^`java.lang.Throwable` @kind object;
  #L24a418.  if v6 != 0 then goto L24a422;
  #L24a41c.  v6:= v5.`io.reactivex.internal.observers.h.b` @type ^`java.lang.Object` @kind object;
  #L24a420.  return v6 @kind object;
  #L24a422.  v7:= new `java.util.concurrent.ExecutionException`;
  #L24a426.  call `<init>`(v7, v6) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L24a42c.  throw v7;
  #L24a42e.  v6:= new `java.util.concurrent.CancellationException`;
  #L24a432.  call `<init>`(v6) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L24a438.  throw v6;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.observers.h` v1 @kind this) @signature `Lio/reactivex/internal/observers/h;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24a2f4.  v0:= v1.`io.reactivex.internal.observers.h.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24a2f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24a2fe.  v0:= temp @kind object;
  #L24a300.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L24a304.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L24a30a.  v0:= temp;
  #L24a30c.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.h` v1 @kind this) @signature `Lio/reactivex/internal/observers/h;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24a320.  call temp:= `isDone`(v1) @signature `Lio/reactivex/internal/observers/h;.isDone:()Z` @kind virtual;
  #L24a326.  v0:= temp;
  #L24a328.  return v0;
}
procedure `boolean` `isDone`(`io.reactivex.internal.observers.h` v5 @kind this) @signature `Lio/reactivex/internal/observers/h;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24a33c.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L24a342.  v0:= temp @kind wide;
  #L24a344.  v2:= 0L;
  #L24a348.  v4:= lcmp(v0, v2);
  #L24a34c.  if v4 != 0 then goto L24a354;
  #L24a350.  v0:= 1I;
  #L24a352.  goto L24a356;
  #L24a354.  v0:= 0I;
  #L24a356.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.observers.h` v2 @kind this) @signature `Lio/reactivex/internal/observers/h;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24a488.  v0:= v2.`io.reactivex.internal.observers.h.b` @type ^`java.lang.Object` @kind object;
  #L24a48c.  if v0 != 0 then goto L24a4a6;
  #L24a490.  v0:= new `java.util.NoSuchElementException`;
  #L24a494.  v1:= "The source is empty" @kind object;
  #L24a498.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a49e.  call `onError`(v2, v0) @signature `Lio/reactivex/internal/observers/h;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L24a4a4.  return @kind void;
  #L24a4a6.  v0:= v2.`io.reactivex.internal.observers.h.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24a4aa.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24a4b0.  v0:= temp @kind object;
  #L24a4b2.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L24a4b6.  if v0 == v2 then goto L24a4da;
  #L24a4ba.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L24a4be.  if v0 != v1 then goto L24a4c4;
  #L24a4c2.  goto L24a4da;
  #L24a4c4.  v1:= v2.`io.reactivex.internal.observers.h.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24a4c8.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L24a4ce.  v0:= temp;
  #L24a4d0.  if v0 == 0 then goto L24a4a6;
  #L24a4d4.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L24a4da.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.observers.h` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/observers/h;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24a4ec.  v0:= v2.`io.reactivex.internal.observers.h.c` @type ^`java.lang.Throwable` @kind object;
  #L24a4f0.  if v0 != 0 then goto L24a536;
  #L24a4f4.  v2.`io.reactivex.internal.observers.h.c` @type ^`java.lang.Throwable` := v3 @kind object;
  #L24a4f8.  v0:= v2.`io.reactivex.internal.observers.h.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24a4fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24a502.  v0:= temp @kind object;
  #L24a504.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L24a508.  if v0 == v2 then goto L24a52e;
  #L24a50c.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L24a510.  if v0 != v1 then goto L24a516;
  #L24a514.  goto L24a52e;
  #L24a516.  v1:= v2.`io.reactivex.internal.observers.h.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24a51a.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L24a520.  v0:= temp;
  #L24a522.  if v0 == 0 then goto L24a4f8;
  #L24a526.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L24a52c.  return @kind void;
  #L24a52e.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24a534.  return @kind void;
  #L24a536.  call `t`(v3) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24a53c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.observers.h` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/h;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24a550.  v0:= v1.`io.reactivex.internal.observers.h.b` @type ^`java.lang.Object` @kind object;
  #L24a554.  if v0 == 0 then goto L24a584;
  #L24a558.  v2:= v1.`io.reactivex.internal.observers.h.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24a55c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24a562.  v2:= temp @kind object;
  #L24a564.  v2:= (`io.reactivex.disposables.b`) v2 @kind object;
  #L24a568.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L24a56e.  v2:= new `java.lang.IndexOutOfBoundsException`;
  #L24a572.  v0:= "More than one element received" @kind object;
  #L24a576.  call `<init>`(v2, v0) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a57c.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/observers/h;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L24a582.  return @kind void;
  #L24a584.  v1.`io.reactivex.internal.observers.h.b` @type ^`java.lang.Object` := v2 @kind object;
  #L24a588.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.h` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/observers/h;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24a59c.  v0:= v1.`io.reactivex.internal.observers.h.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L24a5a0.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L24a5a6.  return @kind void;
}
