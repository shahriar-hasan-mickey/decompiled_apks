record `io.reactivex.internal.observers.LambdaObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.d0.a` `io.reactivex.internal.observers.LambdaObserver.onComplete` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.observers.LambdaObserver.onError` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.observers.LambdaObserver.onNext` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.observers.LambdaObserver.onSubscribe` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.observers.LambdaObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.observers.LambdaObserver` v0 @kind this, `io.reactivex.d0.g` v1 @kind object, `io.reactivex.d0.g` v2 @kind object, `io.reactivex.d0.a` v3 @kind object, `io.reactivex.d0.g` v4 @kind object) @signature `Lio/reactivex/internal/observers/LambdaObserver;.<init>:(Lio/reactivex/d0/g;Lio/reactivex/d0/g;Lio/reactivex/d0/a;Lio/reactivex/d0/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L24a7a0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L24a7a6.  v0.`io.reactivex.internal.observers.LambdaObserver.onNext` @type ^`io.reactivex.d0.g` := v1 @kind object;
  #L24a7aa.  v0.`io.reactivex.internal.observers.LambdaObserver.onError` @type ^`io.reactivex.d0.g` := v2 @kind object;
  #L24a7ae.  v0.`io.reactivex.internal.observers.LambdaObserver.onComplete` @type ^`io.reactivex.d0.a` := v3 @kind object;
  #L24a7b2.  v0.`io.reactivex.internal.observers.LambdaObserver.onSubscribe` @type ^`io.reactivex.d0.g` := v4 @kind object;
  #L24a7b6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.LambdaObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/LambdaObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L24a7c8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24a7ce.  return @kind void;
}
procedure `boolean` `hasCustomOnError`(`io.reactivex.internal.observers.LambdaObserver` v2 @kind this) @signature `Lio/reactivex/internal/observers/LambdaObserver;.hasCustomOnError:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24a754.  v0:= v2.`io.reactivex.internal.observers.LambdaObserver.onError` @type ^`io.reactivex.d0.g` @kind object;
  #L24a758.  v1:= `@@io.reactivex.internal.functions.Functions.f` @type ^`io.reactivex.d0.g` @kind object;
  #L24a75c.  if v0 == v1 then goto L24a764;
  #L24a760.  v0:= 1I;
  #L24a762.  goto L24a766;
  #L24a764.  v0:= 0I;
  #L24a766.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.LambdaObserver` v2 @kind this) @signature `Lio/reactivex/internal/observers/LambdaObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24a778.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24a77e.  v0:= temp @kind object;
  #L24a780.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L24a784.  if v0 != v1 then goto L24a78c;
  #L24a788.  v0:= 1I;
  #L24a78a.  goto L24a78e;
  #L24a78c.  v0:= 0I;
  #L24a78e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.observers.LambdaObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24a7e0.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/observers/LambdaObserver;.isDisposed:()Z` @kind virtual;
  #L24a7e6.  v0:= temp;
  #L24a7e8.  if v0 != 0 then goto L24a810;
  #L24a7ec.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L24a7f0.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L24a7f6.  v0:= v1.`io.reactivex.internal.observers.LambdaObserver.onComplete` @type ^`io.reactivex.d0.a` @kind object;
  #L24a7fa.  call `run`(v0) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L24a800.  goto L24a810;
  #L24a802.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24a804.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24a80a.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24a810.  return @kind void;
  catch `java.lang.Throwable` @[L24a7f6..L24a800] goto L24a802;
}
procedure `void` `onError`(`io.reactivex.internal.observers.LambdaObserver` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24a830.  call temp:= `isDisposed`(v4) @signature `Lio/reactivex/internal/observers/LambdaObserver;.isDisposed:()Z` @kind virtual;
  #L24a836.  v0:= temp;
  #L24a838.  if v0 != 0 then goto L24a87e;
  #L24a83c.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L24a840.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L24a846.  v0:= v4.`io.reactivex.internal.observers.LambdaObserver.onError` @type ^`io.reactivex.d0.g` @kind object;
  #L24a84a.  call `accept`(v0, v5) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L24a850.  goto L24a884;
  #L24a852.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24a854.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24a85a.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L24a85e.  v2:= 2I;
  #L24a860.  v2:= new `java.lang.Throwable`[v2];
  #L24a864.  v3:= 0I;
  #L24a866.  v2[v3]:= v5 @kind object;
  #L24a86a.  v5:= 1I;
  #L24a86c.  v2[v5]:= v0 @kind object;
  #L24a870.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L24a876.  call `t`(v1) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24a87c.  goto L24a884;
  #L24a87e.  call `t`(v5) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24a884.  return @kind void;
  catch `java.lang.Throwable` @[L24a846..L24a850] goto L24a852;
}
procedure `void` `onNext`(`io.reactivex.internal.observers.LambdaObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24a8a4.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/observers/LambdaObserver;.isDisposed:()Z` @kind virtual;
  #L24a8aa.  v0:= temp;
  #L24a8ac.  if v0 != 0 then goto L24a8dc;
  #L24a8b0.  v0:= v1.`io.reactivex.internal.observers.LambdaObserver.onNext` @type ^`io.reactivex.d0.g` @kind object;
  #L24a8b4.  call `accept`(v0, v2) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L24a8ba.  goto L24a8dc;
  #L24a8bc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24a8be.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24a8c4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24a8ca.  v0:= temp @kind object;
  #L24a8cc.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L24a8d0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L24a8d6.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L24a8dc.  return @kind void;
  catch `java.lang.Throwable` @[L24a8b0..L24a8ba] goto L24a8bc;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.LambdaObserver` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24a8fc.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L24a902.  v0:= temp;
  #L24a904.  if v0 == 0 then goto L24a928;
  #L24a908.  v0:= v1.`io.reactivex.internal.observers.LambdaObserver.onSubscribe` @type ^`io.reactivex.d0.g` @kind object;
  #L24a90c.  call `accept`(v0, v1) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L24a912.  goto L24a928;
  #L24a914.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24a916.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24a91c.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L24a922.  call `onError`(v1, v0) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L24a928.  return @kind void;
  catch `java.lang.Throwable` @[L24a908..L24a912] goto L24a914;
}
