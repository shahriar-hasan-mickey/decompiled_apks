record `io.reactivex.internal.observers.ForEachWhileObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.observers.ForEachWhileObserver.done` @AccessFlag ;
  `io.reactivex.d0.a` `io.reactivex.internal.observers.ForEachWhileObserver.onComplete` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.observers.ForEachWhileObserver.onError` @AccessFlag FINAL;
  `io.reactivex.d0.m` `io.reactivex.internal.observers.ForEachWhileObserver.onNext` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.observers.ForEachWhileObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.observers.ForEachWhileObserver` v0 @kind this, `io.reactivex.d0.m` v1 @kind object, `io.reactivex.d0.g` v2 @kind object, `io.reactivex.d0.a` v3 @kind object) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.<init>:(Lio/reactivex/d0/m;Lio/reactivex/d0/g;Lio/reactivex/d0/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L24a13c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L24a142.  v0.`io.reactivex.internal.observers.ForEachWhileObserver.onNext` @type ^`io.reactivex.d0.m` := v1 @kind object;
  #L24a146.  v0.`io.reactivex.internal.observers.ForEachWhileObserver.onError` @type ^`io.reactivex.d0.g` := v2 @kind object;
  #L24a14a.  v0.`io.reactivex.internal.observers.ForEachWhileObserver.onComplete` @type ^`io.reactivex.d0.a` := v3 @kind object;
  #L24a14e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.ForEachWhileObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L24a160.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L24a166.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.ForEachWhileObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24a114.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L24a11a.  v0:= temp @kind object;
  #L24a11c.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L24a120.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/b;)Z` @kind static;
  #L24a126.  v0:= temp;
  #L24a128.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.observers.ForEachWhileObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24a178.  v0:= v1.`io.reactivex.internal.observers.ForEachWhileObserver.done` @type ^`boolean` @kind boolean;
  #L24a17c.  if v0 == 0 then goto L24a182;
  #L24a180.  return @kind void;
  #L24a182.  v0:= 1I;
  #L24a184.  v1.`io.reactivex.internal.observers.ForEachWhileObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L24a188.  v0:= v1.`io.reactivex.internal.observers.ForEachWhileObserver.onComplete` @type ^`io.reactivex.d0.a` @kind object;
  #L24a18c.  call `run`(v0) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L24a192.  goto L24a1a2;
  #L24a194.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24a196.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24a19c.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24a1a2.  return @kind void;
  catch `java.lang.Throwable` @[L24a188..L24a192] goto L24a194;
}
procedure `void` `onError`(`io.reactivex.internal.observers.ForEachWhileObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24a1c0.  v0:= v5.`io.reactivex.internal.observers.ForEachWhileObserver.done` @type ^`boolean` @kind boolean;
  #L24a1c4.  if v0 == 0 then goto L24a1d0;
  #L24a1c8.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24a1ce.  return @kind void;
  #L24a1d0.  v0:= 1I;
  #L24a1d2.  v5.`io.reactivex.internal.observers.ForEachWhileObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L24a1d6.  v1:= v5.`io.reactivex.internal.observers.ForEachWhileObserver.onError` @type ^`io.reactivex.d0.g` @kind object;
  #L24a1da.  call `accept`(v1, v6) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L24a1e0.  goto L24a20a;
  #L24a1e2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24a1e4.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24a1ea.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L24a1ee.  v3:= 2I;
  #L24a1f0.  v3:= new `java.lang.Throwable`[v3];
  #L24a1f4.  v4:= 0I;
  #L24a1f6.  v3[v4]:= v6 @kind object;
  #L24a1fa.  v3[v0]:= v1 @kind object;
  #L24a1fe.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L24a204.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L24a20a.  return @kind void;
  catch `java.lang.Throwable` @[L24a1d6..L24a1e0] goto L24a1e2;
}
procedure `void` `onNext`(`io.reactivex.internal.observers.ForEachWhileObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24a228.  v0:= v1.`io.reactivex.internal.observers.ForEachWhileObserver.done` @type ^`boolean` @kind boolean;
  #L24a22c.  if v0 == 0 then goto L24a232;
  #L24a230.  return @kind void;
  #L24a232.  v0:= v1.`io.reactivex.internal.observers.ForEachWhileObserver.onNext` @type ^`io.reactivex.d0.m` @kind object;
  #L24a236.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/d0/m;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L24a23c.  v2:= temp;
  #L24a23e.  if v2 != 0 then goto L24a24e;
  #L24a242.  call `dispose`(v1) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.dispose:()V` @kind virtual;
  #L24a248.  call `onComplete`(v1) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.onComplete:()V` @kind virtual;
  #L24a24e.  return @kind void;
  #L24a250.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24a252.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L24a258.  call `dispose`(v1) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.dispose:()V` @kind virtual;
  #L24a25e.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L24a264.  return @kind void;
  catch `java.lang.Throwable` @[L24a232..L24a23e] goto L24a250;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.ForEachWhileObserver` v0 @kind this, `io.reactivex.disposables.b` v1 @kind object) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC {
    temp;

  #L24a284.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L24a28a.  return @kind void;
}
