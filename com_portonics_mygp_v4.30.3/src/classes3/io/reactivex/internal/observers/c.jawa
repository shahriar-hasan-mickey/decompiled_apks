record `io.reactivex.internal.observers.c` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `java.lang.Object` `io.reactivex.internal.observers.c.b` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.observers.c.c` @AccessFlag ;
  `io.reactivex.disposables.b` `io.reactivex.internal.observers.c.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.observers.c.e` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.observers.c` v1 @kind this) @signature `Lio/reactivex/internal/observers/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2495c4.  v0:= 1I;
  #L2495c6.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L2495cc.  return @kind void;
}
procedure `java.lang.Object` `a`(`io.reactivex.internal.observers.c` v5 @kind this) @signature `Lio/reactivex/internal/observers/c;.a:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L249558.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L24955e.  v0:= temp @kind wide;
  #L249560.  v2:= 0L;
  #L249564.  v4:= lcmp(v0, v2);
  #L249568.  if v4 == 0 then goto L24958c;
  #L24956c.  call `b`() @signature `Lio/reactivex/internal/util/c;.b:()V` @kind static;
  #L249572.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L249578.  goto L24958c;
  #L24957a.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L24957c.  call `dispose`(v5) @signature `Lio/reactivex/internal/observers/c;.dispose:()V` @kind virtual;
  #L249582.  call temp:= `e`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.e:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L249588.  v0:= temp @kind object;
  #L24958a.  throw v0;
  #L24958c.  v0:= v5.`io.reactivex.internal.observers.c.c` @type ^`java.lang.Throwable` @kind object;
  #L249590.  if v0 != 0 then goto L24959a;
  #L249594.  v0:= v5.`io.reactivex.internal.observers.c.b` @type ^`java.lang.Object` @kind object;
  #L249598.  return v0 @kind object;
  #L24959a.  call temp:= `e`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.e:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L2495a0.  v0:= temp @kind object;
  #L2495a2.  throw v0;
  catch `java.lang.InterruptedException` @[L24956c..L249578] goto L24957a;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.c` v1 @kind this) @signature `Lio/reactivex/internal/observers/c;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2495e0.  v0:= 1I;
  #L2495e2.  v1.`io.reactivex.internal.observers.c.e` @type ^`boolean` := v0 @kind boolean;
  #L2495e6.  v0:= v1.`io.reactivex.internal.observers.c.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L2495ea.  if v0 == 0 then goto L2495f4;
  #L2495ee.  call `dispose`(v0) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2495f4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.c` v1 @kind this) @signature `Lio/reactivex/internal/observers/c;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L249540.  v0:= v1.`io.reactivex.internal.observers.c.e` @type ^`boolean` @kind boolean;
  #L249544.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.observers.c` v0 @kind this) @signature `Lio/reactivex/internal/observers/c;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L249608.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L24960e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.c` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/observers/c;.onSubscribe:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L249620.  v1.`io.reactivex.internal.observers.c.d` @type ^`io.reactivex.disposables.b` := v2 @kind object;
  #L249624.  v0:= v1.`io.reactivex.internal.observers.c.e` @type ^`boolean` @kind boolean;
  #L249628.  if v0 == 0 then goto L249632;
  #L24962c.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L249632.  return @kind void;
}
