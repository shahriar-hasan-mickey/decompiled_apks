record `io.reactivex.internal.observers.j` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.internal.observers.l` @kind class, `io.reactivex.t` @kind interface, `io.reactivex.internal.util.h` @kind interface {
  `io.reactivex.t` `io.reactivex.internal.observers.j.c` @AccessFlag PROTECTED_FINAL;
  `io.reactivex.e0.a.i` `io.reactivex.internal.observers.j.d` @AccessFlag PROTECTED_FINAL;
  `boolean` `io.reactivex.internal.observers.j.e` @AccessFlag PROTECTED_VOLATILE;
  `boolean` `io.reactivex.internal.observers.j.f` @AccessFlag PROTECTED_VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.observers.j.g` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`io.reactivex.internal.observers.j` v0 @kind this, `io.reactivex.t` v1 @kind object, `io.reactivex.e0.a.i` v2 @kind object) @signature `Lio/reactivex/internal/observers/j;.<init>:(Lio/reactivex/t;Lio/reactivex/e0/a/i;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L24aa14.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/l;.<init>:()V` @kind direct;
  #L24aa1a.  v0.`io.reactivex.internal.observers.j.c` @type ^`io.reactivex.t` := v1 @kind object;
  #L24aa1e.  v0.`io.reactivex.internal.observers.j.d` @type ^`io.reactivex.e0.a.i` := v2 @kind object;
  #L24aa22.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.observers.j` v1 @kind this) @signature `Lio/reactivex/internal/observers/j;.a:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L24a960.  v0:= v1.`io.reactivex.internal.observers.j.f` @type ^`boolean` @kind boolean;
  #L24a964.  return v0;
}
procedure `boolean` `b`(`io.reactivex.internal.observers.j` v1 @kind this) @signature `Lio/reactivex/internal/observers/j;.b:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L24a948.  v0:= v1.`io.reactivex.internal.observers.j.e` @type ^`boolean` @kind boolean;
  #L24a94c.  return v0;
}
procedure `void` `c`(`io.reactivex.internal.observers.j` v0 @kind this, `io.reactivex.t` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/j;.c:(Lio/reactivex/t;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L24aa34.  return @kind void;
}
procedure `int` `d`(`io.reactivex.internal.observers.j` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/observers/j;.d:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L24a9dc.  v0:= v1.`io.reactivex.internal.observers.m.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L24a9e0.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L24a9e6.  v2:= temp;
  #L24a9e8.  return v2;
}
procedure `boolean` `e`(`io.reactivex.internal.observers.j` v1 @kind this) @signature `Lio/reactivex/internal/observers/j;.e:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L24a978.  v0:= v1.`io.reactivex.internal.observers.m.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L24a97c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L24a982.  v0:= temp;
  #L24a984.  if v0 != 0 then goto L24a98c;
  #L24a988.  v0:= 1I;
  #L24a98a.  goto L24a98e;
  #L24a98c.  v0:= 0I;
  #L24a98e.  return v0;
}
procedure `boolean` `f`(`io.reactivex.internal.observers.j` v3 @kind this) @signature `Lio/reactivex/internal/observers/j;.f:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L24a9a0.  v0:= v3.`io.reactivex.internal.observers.m.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L24a9a4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L24a9aa.  v0:= temp;
  #L24a9ac.  v1:= 1I;
  #L24a9ae.  v2:= 0I;
  #L24a9b0.  if v0 != 0 then goto L24a9c6;
  #L24a9b4.  v0:= v3.`io.reactivex.internal.observers.m.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L24a9b8.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L24a9be.  v0:= temp;
  #L24a9c0.  if v0 == 0 then goto L24a9c6;
  #L24a9c4.  goto L24a9c8;
  #L24a9c6.  v1:= 0I;
  #L24a9c8.  return v1;
}
procedure `void` `g`(`io.reactivex.internal.observers.j` v5 @kind this, `java.lang.Object` v6 @kind object, `boolean` v7 , `io.reactivex.disposables.b` v8 @kind object) @signature `Lio/reactivex/internal/observers/j;.g:(Ljava/lang/Object;ZLio/reactivex/disposables/b;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24aa48.  v0:= v5.`io.reactivex.internal.observers.j.c` @type ^`io.reactivex.t` @kind object;
  #L24aa4c.  v1:= v5.`io.reactivex.internal.observers.j.d` @type ^`io.reactivex.e0.a.i` @kind object;
  #L24aa50.  v2:= v5.`io.reactivex.internal.observers.m.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L24aa54.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L24aa5a.  v2:= temp;
  #L24aa5c.  if v2 != 0 then goto L24aa8a;
  #L24aa60.  v2:= v5.`io.reactivex.internal.observers.m.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L24aa64.  v3:= 0I;
  #L24aa66.  v4:= 1I;
  #L24aa68.  call temp:= `compareAndSet`(v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L24aa6e.  v2:= temp;
  #L24aa70.  if v2 == 0 then goto L24aa8a;
  #L24aa74.  call `c`(v5, v0, v6) @signature `Lio/reactivex/internal/observers/j;.c:(Lio/reactivex/t;Ljava/lang/Object;)V` @kind virtual;
  #L24aa7a.  v6:= -1I;
  #L24aa7c.  call temp:= `d`(v5, v6) @signature `Lio/reactivex/internal/observers/j;.d:(I)I` @kind virtual;
  #L24aa82.  v6:= temp;
  #L24aa84.  if v6 != 0 then goto L24aa9e;
  #L24aa88.  return @kind void;
  #L24aa8a.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L24aa90.  call temp:= `e`(v5) @signature `Lio/reactivex/internal/observers/j;.e:()Z` @kind virtual;
  #L24aa96.  v6:= temp;
  #L24aa98.  if v6 != 0 then goto L24aa9e;
  #L24aa9c.  return @kind void;
  #L24aa9e.  call `c`(v1, v0, v7, v8, v5) @signature `Lio/reactivex/internal/util/k;.c:(Lio/reactivex/e0/a/i;Lio/reactivex/t;ZLio/reactivex/disposables/b;Lio/reactivex/internal/util/h;)V` @kind static;
  #L24aaa4.  return @kind void;
}
procedure `void` `h`(`io.reactivex.internal.observers.j` v5 @kind this, `java.lang.Object` v6 @kind object, `boolean` v7 , `io.reactivex.disposables.b` v8 @kind object) @signature `Lio/reactivex/internal/observers/j;.h:(Ljava/lang/Object;ZLio/reactivex/disposables/b;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24aab8.  v0:= v5.`io.reactivex.internal.observers.j.c` @type ^`io.reactivex.t` @kind object;
  #L24aabc.  v1:= v5.`io.reactivex.internal.observers.j.d` @type ^`io.reactivex.e0.a.i` @kind object;
  #L24aac0.  v2:= v5.`io.reactivex.internal.observers.m.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L24aac4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L24aaca.  v2:= temp;
  #L24aacc.  if v2 != 0 then goto L24ab0e;
  #L24aad0.  v2:= v5.`io.reactivex.internal.observers.m.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L24aad4.  v3:= 0I;
  #L24aad6.  v4:= 1I;
  #L24aad8.  call temp:= `compareAndSet`(v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L24aade.  v2:= temp;
  #L24aae0.  if v2 == 0 then goto L24ab0e;
  #L24aae4.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/e0/a/j;.isEmpty:()Z` @kind interface;
  #L24aaea.  v2:= temp;
  #L24aaec.  if v2 == 0 then goto L24ab06;
  #L24aaf0.  call `c`(v5, v0, v6) @signature `Lio/reactivex/internal/observers/j;.c:(Lio/reactivex/t;Ljava/lang/Object;)V` @kind virtual;
  #L24aaf6.  v6:= -1I;
  #L24aaf8.  call temp:= `d`(v5, v6) @signature `Lio/reactivex/internal/observers/j;.d:(I)I` @kind virtual;
  #L24aafe.  v6:= temp;
  #L24ab00.  if v6 != 0 then goto L24ab22;
  #L24ab04.  return @kind void;
  #L24ab06.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L24ab0c.  goto L24ab22;
  #L24ab0e.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/e0/a/j;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L24ab14.  call temp:= `e`(v5) @signature `Lio/reactivex/internal/observers/j;.e:()Z` @kind virtual;
  #L24ab1a.  v6:= temp;
  #L24ab1c.  if v6 != 0 then goto L24ab22;
  #L24ab20.  return @kind void;
  #L24ab22.  call `c`(v1, v0, v7, v8, v5) @signature `Lio/reactivex/internal/util/k;.c:(Lio/reactivex/e0/a/i;Lio/reactivex/t;ZLio/reactivex/disposables/b;Lio/reactivex/internal/util/h;)V` @kind static;
  #L24ab28.  return @kind void;
}
procedure `java.lang.Throwable` `z`(`io.reactivex.internal.observers.j` v1 @kind this) @signature `Lio/reactivex/internal/observers/j;.z:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L24a9fc.  v0:= v1.`io.reactivex.internal.observers.j.g` @type ^`java.lang.Throwable` @kind object;
  #L24aa00.  return v0 @kind object;
}
