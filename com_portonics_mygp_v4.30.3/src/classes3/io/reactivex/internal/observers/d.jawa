record `io.reactivex.internal.observers.d` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.observers.c` @kind class {
}
procedure `void` `<init>`(`io.reactivex.internal.observers.d` v0 @kind this) @signature `Lio/reactivex/internal/observers/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L249644.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/c;.<init>:()V` @kind direct;
  #L24964a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.observers.d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/observers/d;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24965c.  v0:= v1.`io.reactivex.internal.observers.c.b` @type ^`java.lang.Object` @kind object;
  #L249660.  if v0 != 0 then goto L249668;
  #L249664.  v1.`io.reactivex.internal.observers.c.c` @type ^`java.lang.Throwable` := v2 @kind object;
  #L249668.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L24966e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.observers.d` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/d;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249680.  v0:= v1.`io.reactivex.internal.observers.c.b` @type ^`java.lang.Object` @kind object;
  #L249684.  if v0 != 0 then goto L24969c;
  #L249688.  v1.`io.reactivex.internal.observers.c.b` @type ^`java.lang.Object` := v2 @kind object;
  #L24968c.  v2:= v1.`io.reactivex.internal.observers.c.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L249690.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L249696.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L24969c.  return @kind void;
}
