record `io.reactivex.internal.observers.DeferredScalarDisposable` @kind class @AccessFlag PUBLIC extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.t` `io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `io.reactivex.internal.observers.DeferredScalarDisposable.value` @AccessFlag PROTECTED;
}
global `int` `@@io.reactivex.internal.observers.DeferredScalarDisposable.DISPOSED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.observers.DeferredScalarDisposable.FUSED_CONSUMED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.observers.DeferredScalarDisposable.FUSED_EMPTY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.observers.DeferredScalarDisposable.FUSED_READY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.observers.DeferredScalarDisposable.TERMINATED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.observers.DeferredScalarDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.observers.DeferredScalarDisposable` v0 @kind this, `io.reactivex.t` v1 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.<init>:(Lio/reactivex/t;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L249cd4.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L249cda.  v0.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.t` := v1 @kind object;
  #L249cde.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L249cf0.  v0:= 32I;
  #L249cf4.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L249cfa.  v0:= 0I;
  #L249cfc.  v1.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v0 @kind object;
  #L249d00.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L249d14.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L249d1a.  v0:= temp;
  #L249d1c.  v0:= v0 ^& 54;
  #L249d20.  if v0 == 0 then goto L249d26;
  #L249d24.  return @kind void;
  #L249d26.  v0:= 2I;
  #L249d28.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L249d2e.  v0:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L249d32.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L249d38.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.observers.DeferredScalarDisposable` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L249d4c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L249d52.  v0:= temp;
  #L249d54.  v1:= v0 ^& 54;
  #L249d58.  if v1 == 0 then goto L249d5e;
  #L249d5c.  return @kind void;
  #L249d5e.  v1:= v3.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L249d62.  v2:= 8I;
  #L249d66.  if v0 != v2 then goto L249d82;
  #L249d6a.  v3.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v4 @kind object;
  #L249d6e.  v4:= 16I;
  #L249d72.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L249d78.  v4:= 0I;
  #L249d7a.  call `onNext`(v1, v4) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L249d80.  goto L249d90;
  #L249d82.  v0:= 2I;
  #L249d84.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L249d8a.  call `onNext`(v1, v4) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L249d90.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L249d96.  v4:= temp;
  #L249d98.  v0:= 4I;
  #L249d9a.  if v4 == v0 then goto L249da4;
  #L249d9e.  call `onComplete`(v1) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L249da4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249db8.  v0:= 4I;
  #L249dba.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L249dc0.  v0:= 0I;
  #L249dc2.  v1.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v0 @kind object;
  #L249dc6.  return @kind void;
}
procedure `void` `error`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L249dd8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L249dde.  v0:= temp;
  #L249de0.  v0:= v0 ^& 54;
  #L249de4.  if v0 == 0 then goto L249df0;
  #L249de8.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L249dee.  return @kind void;
  #L249df0.  v0:= 2I;
  #L249df2.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L249df8.  v0:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.t` @kind object;
  #L249dfc.  call `onError`(v0, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L249e02.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L249bfc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L249c02.  v0:= temp;
  #L249c04.  v1:= 4I;
  #L249c06.  if v0 != v1 then goto L249c0e;
  #L249c0a.  v0:= 1I;
  #L249c0c.  goto L249c10;
  #L249c0e.  v0:= 0I;
  #L249c10.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L249c24.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L249c2a.  v0:= temp;
  #L249c2c.  v1:= 16I;
  #L249c30.  if v0 == v1 then goto L249c38;
  #L249c34.  v0:= 1I;
  #L249c36.  goto L249c3a;
  #L249c38.  v0:= 0I;
  #L249c3a.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.observers.DeferredScalarDisposable` v3 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L249c9c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L249ca2.  v0:= temp;
  #L249ca4.  v1:= 0I;
  #L249ca6.  v2:= 16I;
  #L249caa.  if v0 != v2 then goto L249cc2;
  #L249cae.  v0:= v3.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` @kind object;
  #L249cb2.  v3.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v1 @kind object;
  #L249cb6.  v1:= 32I;
  #L249cba.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L249cc0.  return v0 @kind object;
  #L249cc2.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L249c74.  v0:= 2I;
  #L249c76.  v2:= v2 ^& v0 @kind int;
  #L249c78.  if v2 == 0 then goto L249c88;
  #L249c7c.  v2:= 8I;
  #L249c80.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L249c86.  return v0;
  #L249c88.  v2:= 0I;
  #L249c8a.  return v2;
}
procedure `boolean` `tryDispose`(`io.reactivex.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.tryDispose:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L249c4c.  v0:= 4I;
  #L249c4e.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L249c54.  v1:= temp;
  #L249c56.  if v1 == v0 then goto L249c5e;
  #L249c5a.  v0:= 1I;
  #L249c5c.  goto L249c60;
  #L249c5e.  v0:= 0I;
  #L249c60.  return v0;
}
