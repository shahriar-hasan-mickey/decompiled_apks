record `io.reactivex.internal.util.i` @kind class @AccessFlag PUBLIC_FINAL {
  `float` `io.reactivex.internal.util.i.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.util.i.b` @AccessFlag ;
  `int` `io.reactivex.internal.util.i.c` @AccessFlag ;
  `int` `io.reactivex.internal.util.i.d` @AccessFlag ;
  `java.lang.Object`[] `io.reactivex.internal.util.i.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.util.i` v2 @kind this) @signature `Lio/reactivex/internal/util/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L290f38.  v0:= 16I;
  #L290f3c.  v1:= 0.75F;
  #L290f40.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/internal/util/i;.<init>:(IF)V` @kind direct;
  #L290f46.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.util.i` v1 @kind this, `int` v2 , `float` v3 ) @signature `Lio/reactivex/internal/util/i;.<init>:(IF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L290f58.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L290f5e.  v1.`io.reactivex.internal.util.i.a` @type ^`float` := v3;
  #L290f62.  call temp:= `a`(v2) @signature `Lio/reactivex/internal/util/j;.a:(I)I` @kind static;
  #L290f68.  v2:= temp;
  #L290f6a.  v0:= v2 + -1;
  #L290f6e.  v1.`io.reactivex.internal.util.i.b` @type ^`int` := v0;
  #L290f72.  v0:= (`float`) v2 @kind i2f;
  #L290f74.  v3:= v3 * v0 @kind float;
  #L290f78.  v3:= (`int`) v3 @kind f2i;
  #L290f7a.  v1.`io.reactivex.internal.util.i.d` @type ^`int` := v3;
  #L290f7e.  v2:= new `java.lang.Object`[v2];
  #L290f82.  v1.`io.reactivex.internal.util.i.e` @type ^`java.lang.Object`[] := v2 @kind object;
  #L290f86.  return @kind void;
}
procedure `int` `c`(`int` v1 ) @signature `Lio/reactivex/internal/util/i;.c:(I)I` @AccessFlag STATIC {
    temp;
    v0;

  #L290ee4.  v0:= -1640531527I;
  #L290eea.  v1:= v1 * v0 @kind int;
  #L290eee.  v0:= v1 ^>> 16;
  #L290ef2.  v1:= v1 ^~ v0 @kind int;
  #L290ef4.  return v1;
}
procedure `boolean` `a`(`io.reactivex.internal.util.i` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/util/i;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L290d88.  v0:= v6.`io.reactivex.internal.util.i.e` @type ^`java.lang.Object`[] @kind object;
  #L290d8c.  v1:= v6.`io.reactivex.internal.util.i.b` @type ^`int`;
  #L290d90.  call temp:= `hashCode`(v7) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L290d96.  v2:= temp;
  #L290d98.  call temp:= `c`(v2) @signature `Lio/reactivex/internal/util/i;.c:(I)I` @kind static;
  #L290d9e.  v2:= temp;
  #L290da0.  v2:= v2 ^& v1 @kind int;
  #L290da2.  v3:= v0[v2] @kind object;
  #L290da6.  v4:= 1I;
  #L290da8.  if v3 == 0 then goto L290dd8;
  #L290dac.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L290db2.  v3:= temp;
  #L290db4.  v5:= 0I;
  #L290db6.  if v3 == 0 then goto L290dbc;
  #L290dba.  return v5;
  #L290dbc.  v2:= v2 + v4 @kind int;
  #L290dbe.  v2:= v2 ^& v1 @kind int;
  #L290dc0.  v3:= v0[v2] @kind object;
  #L290dc4.  if v3 != 0 then goto L290dca;
  #L290dc8.  goto L290dd8;
  #L290dca.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L290dd0.  v3:= temp;
  #L290dd2.  if v3 == 0 then goto L290dbc;
  #L290dd6.  return v5;
  #L290dd8.  v0[v2]:= v7 @kind object;
  #L290ddc.  v7:= v6.`io.reactivex.internal.util.i.c` @type ^`int`;
  #L290de0.  v7:= v7 + v4 @kind int;
  #L290de2.  v6.`io.reactivex.internal.util.i.c` @type ^`int` := v7;
  #L290de6.  v0:= v6.`io.reactivex.internal.util.i.d` @type ^`int`;
  #L290dea.  if v7 < v0 then goto L290df4;
  #L290dee.  call `d`(v6) @signature `Lio/reactivex/internal/util/i;.d:()V` @kind virtual;
  #L290df4.  return v4;
}
procedure `java.lang.Object`[] `b`(`io.reactivex.internal.util.i` v1 @kind this) @signature `Lio/reactivex/internal/util/i;.b:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L290f20.  v0:= v1.`io.reactivex.internal.util.i.e` @type ^`java.lang.Object`[] @kind object;
  #L290f24.  return v0 @kind object;
}
procedure `void` `d`(`io.reactivex.internal.util.i` v8 @kind this) @signature `Lio/reactivex/internal/util/i;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L290f98.  v0:= v8.`io.reactivex.internal.util.i.e` @type ^`java.lang.Object`[] @kind object;
  #L290f9c.  v1:= length @variable v0;
  #L290f9e.  v2:= v1 ^< 1;
  #L290fa2.  v3:= v2 + -1;
  #L290fa6.  v4:= new `java.lang.Object`[v2];
  #L290faa.  v5:= v8.`io.reactivex.internal.util.i.c` @type ^`int`;
  #L290fae.  v6:= v5 + -1;
  #L290fb2.  if v5 == 0 then goto L290ffc;
  #L290fb6.  v1:= v1 + -1;
  #L290fba.  v5:= v0[v1] @kind object;
  #L290fbe.  if v5 != 0 then goto L290fc4;
  #L290fc2.  goto L290fb6;
  #L290fc4.  v5:= v0[v1] @kind object;
  #L290fc8.  call temp:= `hashCode`(v5) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L290fce.  v5:= temp;
  #L290fd0.  call temp:= `c`(v5) @signature `Lio/reactivex/internal/util/i;.c:(I)I` @kind static;
  #L290fd6.  v5:= temp;
  #L290fd8.  v5:= v5 ^& v3 @kind int;
  #L290fda.  v7:= v4[v5] @kind object;
  #L290fde.  if v7 == 0 then goto L290ff0;
  #L290fe2.  v5:= v5 + 1;
  #L290fe6.  v5:= v5 ^& v3 @kind int;
  #L290fe8.  v7:= v4[v5] @kind object;
  #L290fec.  if v7 != 0 then goto L290fe2;
  #L290ff0.  v7:= v0[v1] @kind object;
  #L290ff4.  v4[v5]:= v7 @kind object;
  #L290ff8.  v5:= v6;
  #L290ffa.  goto L290fae;
  #L290ffc.  v8.`io.reactivex.internal.util.i.b` @type ^`int` := v3;
  #L291000.  v0:= (`float`) v2 @kind i2f;
  #L291002.  v1:= v8.`io.reactivex.internal.util.i.a` @type ^`float`;
  #L291006.  v0:= v0 * v1 @kind float;
  #L29100a.  v0:= (`int`) v0 @kind f2i;
  #L29100c.  v8.`io.reactivex.internal.util.i.d` @type ^`int` := v0;
  #L291010.  v8.`io.reactivex.internal.util.i.e` @type ^`java.lang.Object`[] := v4 @kind object;
  #L291014.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.internal.util.i` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/util/i;.e:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L290e08.  v0:= v5.`io.reactivex.internal.util.i.e` @type ^`java.lang.Object`[] @kind object;
  #L290e0c.  v1:= v5.`io.reactivex.internal.util.i.b` @type ^`int`;
  #L290e10.  call temp:= `hashCode`(v6) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L290e16.  v2:= temp;
  #L290e18.  call temp:= `c`(v2) @signature `Lio/reactivex/internal/util/i;.c:(I)I` @kind static;
  #L290e1e.  v2:= temp;
  #L290e20.  v2:= v2 ^& v1 @kind int;
  #L290e22.  v3:= v0[v2] @kind object;
  #L290e26.  v4:= 0I;
  #L290e28.  if v3 != 0 then goto L290e2e;
  #L290e2c.  return v4;
  #L290e2e.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L290e34.  v3:= temp;
  #L290e36.  if v3 == 0 then goto L290e44;
  #L290e3a.  call temp:= `f`(v5, v2, v0, v1) @signature `Lio/reactivex/internal/util/i;.f:(I[Ljava/lang/Object;I)Z` @kind virtual;
  #L290e40.  v6:= temp;
  #L290e42.  return v6;
  #L290e44.  v2:= v2 + 1;
  #L290e48.  v2:= v2 ^& v1 @kind int;
  #L290e4a.  v3:= v0[v2] @kind object;
  #L290e4e.  if v3 != 0 then goto L290e54;
  #L290e52.  return v4;
  #L290e54.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L290e5a.  v3:= temp;
  #L290e5c.  if v3 == 0 then goto L290e44;
  #L290e60.  call temp:= `f`(v5, v2, v0, v1) @signature `Lio/reactivex/internal/util/i;.f:(I[Ljava/lang/Object;I)Z` @kind virtual;
  #L290e66.  v6:= temp;
  #L290e68.  return v6;
}
procedure `boolean` `f`(`io.reactivex.internal.util.i` v4 @kind this, `int` v5 , `java.lang.Object`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/util/i;.f:(I[Ljava/lang/Object;I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L290e7c.  v0:= v4.`io.reactivex.internal.util.i.c` @type ^`int`;
  #L290e80.  v1:= 1I;
  #L290e82.  v0:= v0 - v1 @kind int;
  #L290e84.  v4.`io.reactivex.internal.util.i.c` @type ^`int` := v0;
  #L290e88.  v0:= v5 + 1;
  #L290e8c.  v0:= v0 ^& v7 @kind int;
  #L290e8e.  v2:= v6[v0] @kind object;
  #L290e92.  if v2 != 0 then goto L290e9e;
  #L290e96.  v7:= 0I;
  #L290e98.  v6[v5]:= v7 @kind object;
  #L290e9c.  return v1;
  #L290e9e.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L290ea4.  v3:= temp;
  #L290ea6.  call temp:= `c`(v3) @signature `Lio/reactivex/internal/util/i;.c:(I)I` @kind static;
  #L290eac.  v3:= temp;
  #L290eae.  v3:= v3 ^& v7 @kind int;
  #L290eb0.  if v5 > v0 then goto L290ebe;
  #L290eb4.  if v5 >= v3 then goto L290ec6;
  #L290eb8.  if v3 <= v0 then goto L290ece;
  #L290ebc.  goto L290ec6;
  #L290ebe.  if v5 < v3 then goto L290ece;
  #L290ec2.  if v3 <= v0 then goto L290ece;
  #L290ec6.  v6[v5]:= v2 @kind object;
  #L290eca.  v5:= v0;
  #L290ecc.  goto L290e88;
  #L290ece.  v0:= v0 + 1;
  #L290ed2.  goto L290e8c;
}
procedure `int` `g`(`io.reactivex.internal.util.i` v1 @kind this) @signature `Lio/reactivex/internal/util/i;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L290f08.  v0:= v1.`io.reactivex.internal.util.i.c` @type ^`int`;
  #L290f0c.  return v0;
}
