record `io.reactivex.internal.util.f` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `java.lang.String` `a`(`java.lang.String` v2 @kind object) @signature `Lio/reactivex/internal/util/f;.a:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L29028c.  v0:= new `java.lang.StringBuilder`;
  #L290290.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L290296.  v1:= "It is not allowed to subscribe with a(n) " @kind object;
  #L29029a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2902a0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2902a6.  v1:= " multiple times. Please create a fresh instance of " @kind object;
  #L2902aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2902b0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2902b6.  v2:= " and subscribe that to the target source instead." @kind object;
  #L2902ba.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2902c0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2902c6.  v2:= temp @kind object;
  #L2902c8.  return v2 @kind object;
}
procedure `void` `b`(`java.lang.Class` v1 @kind object) @signature `Lio/reactivex/internal/util/f;.b:(Ljava/lang/Class;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2902dc.  v0:= new `io.reactivex.exceptions.ProtocolViolationException`;
  #L2902e0.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2902e6.  v1:= temp @kind object;
  #L2902e8.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/util/f;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L2902ee.  v1:= temp @kind object;
  #L2902f0.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2902f6.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L2902fc.  return @kind void;
}
procedure `boolean` `c`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.disposables.b` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lio/reactivex/internal/util/f;.c:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;Ljava/lang/Class;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2901b8.  v0:= "next is null" @kind object;
  #L2901bc.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2901c2.  v0:= 0I;
  #L2901c4.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2901ca.  v0:= temp;
  #L2901cc.  if v0 != 0 then goto L2901f0;
  #L2901d0.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L2901d6.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2901dc.  v1:= temp @kind object;
  #L2901de.  v2:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L2901e2.  if v1 == v2 then goto L2901ec;
  #L2901e6.  call `b`(v3) @signature `Lio/reactivex/internal/util/f;.b:(Ljava/lang/Class;)V` @kind static;
  #L2901ec.  v1:= 0I;
  #L2901ee.  return v1;
  #L2901f0.  v1:= 1I;
  #L2901f2.  return v1;
}
procedure `boolean` `d`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `n.b.d` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lio/reactivex/internal/util/f;.d:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;Ljava/lang/Class;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L290204.  v0:= "next is null" @kind object;
  #L290208.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L29020e.  v0:= 0I;
  #L290210.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L290216.  v0:= temp;
  #L290218.  if v0 != 0 then goto L29023c;
  #L29021c.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L290222.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L290228.  v1:= temp @kind object;
  #L29022a.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L29022e.  if v1 == v2 then goto L290238;
  #L290232.  call `b`(v3) @signature `Lio/reactivex/internal/util/f;.b:(Ljava/lang/Class;)V` @kind static;
  #L290238.  v1:= 0I;
  #L29023a.  return v1;
  #L29023c.  v1:= 1I;
  #L29023e.  return v1;
}
procedure `boolean` `e`(`io.reactivex.disposables.b` v1 @kind object, `io.reactivex.disposables.b` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lio/reactivex/internal/util/f;.e:(Lio/reactivex/disposables/b;Lio/reactivex/disposables/b;Ljava/lang/Class;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L290250.  v0:= "next is null" @kind object;
  #L290254.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L29025a.  if v1 == 0 then goto L290276;
  #L29025e.  call `dispose`(v2) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L290264.  v2:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L290268.  if v1 == v2 then goto L290272;
  #L29026c.  call `b`(v3) @signature `Lio/reactivex/internal/util/f;.b:(Ljava/lang/Class;)V` @kind static;
  #L290272.  v1:= 0I;
  #L290274.  return v1;
  #L290276.  v1:= 1I;
  #L290278.  return v1;
}
