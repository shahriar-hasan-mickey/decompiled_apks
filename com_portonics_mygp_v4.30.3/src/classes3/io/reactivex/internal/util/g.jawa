record `io.reactivex.internal.util.g` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `a`(`io.reactivex.t` v0 @kind object, `java.util.concurrent.atomic.AtomicInteger` v1 @kind object, `io.reactivex.internal.util.AtomicThrowable` v2 @kind object) @signature `Lio/reactivex/internal/util/g;.a:(Lio/reactivex/t;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L290568.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L29056e.  v1:= temp;
  #L290570.  if v1 != 0 then goto L29058e;
  #L290574.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L29057a.  v1:= temp @kind object;
  #L29057c.  if v1 == 0 then goto L290588;
  #L290580.  call `onError`(v0, v1) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L290586.  goto L29058e;
  #L290588.  call `onComplete`(v0) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L29058e.  return @kind void;
}
procedure `void` `b`(`n.b.c` v0 @kind object, `java.util.concurrent.atomic.AtomicInteger` v1 @kind object, `io.reactivex.internal.util.AtomicThrowable` v2 @kind object) @signature `Lio/reactivex/internal/util/g;.b:(Ln/b/c;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2905a0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2905a6.  v1:= temp;
  #L2905a8.  if v1 != 0 then goto L2905c6;
  #L2905ac.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2905b2.  v1:= temp @kind object;
  #L2905b4.  if v1 == 0 then goto L2905c0;
  #L2905b8.  call `onError`(v0, v1) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2905be.  goto L2905c6;
  #L2905c0.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2905c6.  return @kind void;
}
procedure `void` `c`(`io.reactivex.t` v1 @kind object, `java.lang.Throwable` v2 @kind object, `java.util.concurrent.atomic.AtomicInteger` v3 @kind object, `io.reactivex.internal.util.AtomicThrowable` v4 @kind object) @signature `Lio/reactivex/internal/util/g;.c:(Lio/reactivex/t;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2905d8.  call temp:= `addThrowable`(v4, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2905de.  v0:= temp;
  #L2905e0.  if v0 == 0 then goto L290600;
  #L2905e4.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2905ea.  v2:= temp;
  #L2905ec.  if v2 != 0 then goto L290606;
  #L2905f0.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2905f6.  v2:= temp @kind object;
  #L2905f8.  call `onError`(v1, v2) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2905fe.  goto L290606;
  #L290600.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L290606.  return @kind void;
}
procedure `void` `d`(`n.b.c` v1 @kind object, `java.lang.Throwable` v2 @kind object, `java.util.concurrent.atomic.AtomicInteger` v3 @kind object, `io.reactivex.internal.util.AtomicThrowable` v4 @kind object) @signature `Lio/reactivex/internal/util/g;.d:(Ln/b/c;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L290618.  call temp:= `addThrowable`(v4, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L29061e.  v0:= temp;
  #L290620.  if v0 == 0 then goto L290640;
  #L290624.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L29062a.  v2:= temp;
  #L29062c.  if v2 != 0 then goto L290646;
  #L290630.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L290636.  v2:= temp @kind object;
  #L290638.  call `onError`(v1, v2) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L29063e.  goto L290646;
  #L290640.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L290646.  return @kind void;
}
procedure `void` `e`(`io.reactivex.t` v2 @kind object, `java.lang.Object` v3 @kind object, `java.util.concurrent.atomic.AtomicInteger` v4 @kind object, `io.reactivex.internal.util.AtomicThrowable` v5 @kind object) @signature `Lio/reactivex/internal/util/g;.e:(Lio/reactivex/t;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L290658.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L29065e.  v0:= temp;
  #L290660.  if v0 != 0 then goto L2906a0;
  #L290664.  v0:= 0I;
  #L290666.  v1:= 1I;
  #L290668.  call temp:= `compareAndSet`(v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L29066e.  v0:= temp;
  #L290670.  if v0 == 0 then goto L2906a0;
  #L290674.  call `onNext`(v2, v3) @signature `Lio/reactivex/t;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L29067a.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L290680.  v3:= temp;
  #L290682.  if v3 == 0 then goto L2906a0;
  #L290686.  call temp:= `terminate`(v5) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L29068c.  v3:= temp @kind object;
  #L29068e.  if v3 == 0 then goto L29069a;
  #L290692.  call `onError`(v2, v3) @signature `Lio/reactivex/t;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L290698.  goto L2906a0;
  #L29069a.  call `onComplete`(v2) @signature `Lio/reactivex/t;.onComplete:()V` @kind interface;
  #L2906a0.  return @kind void;
}
procedure `void` `f`(`n.b.c` v2 @kind object, `java.lang.Object` v3 @kind object, `java.util.concurrent.atomic.AtomicInteger` v4 @kind object, `io.reactivex.internal.util.AtomicThrowable` v5 @kind object) @signature `Lio/reactivex/internal/util/g;.f:(Ln/b/c;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2906b4.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2906ba.  v0:= temp;
  #L2906bc.  if v0 != 0 then goto L2906fc;
  #L2906c0.  v0:= 0I;
  #L2906c2.  v1:= 1I;
  #L2906c4.  call temp:= `compareAndSet`(v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L2906ca.  v0:= temp;
  #L2906cc.  if v0 == 0 then goto L2906fc;
  #L2906d0.  call `onNext`(v2, v3) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2906d6.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L2906dc.  v3:= temp;
  #L2906de.  if v3 == 0 then goto L2906fc;
  #L2906e2.  call temp:= `terminate`(v5) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L2906e8.  v3:= temp @kind object;
  #L2906ea.  if v3 == 0 then goto L2906f6;
  #L2906ee.  call `onError`(v2, v3) @signature `Ln/b/c;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2906f4.  goto L2906fc;
  #L2906f6.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L2906fc.  return @kind void;
}
