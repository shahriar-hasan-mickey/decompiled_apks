record `io.reactivex.internal.util.c` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `a`(`java.util.concurrent.CountDownLatch` v5 @kind object, `io.reactivex.disposables.b` v6 @kind object) @signature `Lio/reactivex/internal/util/c;.a:(Ljava/util/concurrent/CountDownLatch;Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28fe78.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L28fe7e.  v0:= temp @kind wide;
  #L28fe80.  v2:= 0L;
  #L28fe84.  v4:= lcmp(v0, v2);
  #L28fe88.  if v4 != 0 then goto L28fe8e;
  #L28fe8c.  return @kind void;
  #L28fe8e.  call `b`() @signature `Lio/reactivex/internal/util/c;.b:()V` @kind static;
  #L28fe94.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L28fe9a.  return @kind void;
  #L28fe9c.  v5:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L28fe9e.  call `dispose`(v6) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L28fea4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L28feaa.  v6:= temp @kind object;
  #L28feac.  call `interrupt`(v6) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L28feb2.  v6:= new `java.lang.IllegalStateException`;
  #L28feb6.  v0:= "Interrupted while waiting for subscription to complete." @kind object;
  #L28feba.  call `<init>`(v6, v0, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L28fec0.  throw v6;
  catch `java.lang.InterruptedException` @[L28fe8e..L28fe9a] goto L28fe9c;
}
procedure `void` `b`() @signature `Lio/reactivex/internal/util/c;.b:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L28fee4.  call temp:= `j`() @signature `Lio/reactivex/g0/a;.j:()Z` @kind static;
  #L28feea.  v0:= temp;
  #L28feec.  if v0 == 0 then goto L28ff56;
  #L28fef0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L28fef6.  v0:= temp @kind object;
  #L28fef8.  v0:= instanceof @variable v0 @type ^`io.reactivex.internal.schedulers.l` @kind boolean;
  #L28fefc.  if v0 != 0 then goto L28ff0e;
  #L28ff00.  call temp:= `r`() @signature `Lio/reactivex/g0/a;.r:()Z` @kind static;
  #L28ff06.  v0:= temp;
  #L28ff08.  if v0 != 0 then goto L28ff0e;
  #L28ff0c.  goto L28ff56;
  #L28ff0e.  v0:= new `java.lang.IllegalStateException`;
  #L28ff12.  v1:= new `java.lang.StringBuilder`;
  #L28ff16.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28ff1c.  v2:= "Attempt to block on a Scheduler " @kind object;
  #L28ff20.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28ff26.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L28ff2c.  v2:= temp @kind object;
  #L28ff2e.  call temp:= `getName`(v2) @signature `Ljava/lang/Thread;.getName:()Ljava/lang/String;` @kind virtual;
  #L28ff34.  v2:= temp @kind object;
  #L28ff36.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28ff3c.  v2:= " that doesn't support blocking operators as they may lead to deadlock" @kind object;
  #L28ff40.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28ff46.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28ff4c.  v1:= temp @kind object;
  #L28ff4e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28ff54.  throw v0;
  #L28ff56.  return @kind void;
}
