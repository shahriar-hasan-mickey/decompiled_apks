record `io.reactivex.internal.util.b` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `long` `a`(`java.util.concurrent.atomic.AtomicLong` v5 @kind object, `long` v6 ) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28fc68.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L28fc6e.  v0:= temp @kind wide;
  #L28fc70.  v2:= 9223372036854775807L;
  #L28fc7a.  v4:= lcmp(v0, v2);
  #L28fc7e.  if v4 != 0 then goto L28fc84;
  #L28fc82.  return v2 @kind wide;
  #L28fc84.  call temp:= `c`(v0, v6) @signature `Lio/reactivex/internal/util/b;.c:(JJ)J` @kind static;
  #L28fc8a.  v2:= temp @kind wide;
  #L28fc8c.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L28fc92.  v2:= temp;
  #L28fc94.  if v2 == 0 then goto L28fc68;
  #L28fc98.  return v0 @kind wide;
}
procedure `long` `b`(`java.util.concurrent.atomic.AtomicLong` v5 @kind object, `long` v6 ) @signature `Lio/reactivex/internal/util/b;.b:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28fcac.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L28fcb2.  v0:= temp @kind wide;
  #L28fcb4.  v2:= -9223372036854775808L;
  #L28fcb8.  v4:= lcmp(v0, v2);
  #L28fcbc.  if v4 != 0 then goto L28fcc2;
  #L28fcc0.  return v2 @kind wide;
  #L28fcc2.  v2:= 9223372036854775807L;
  #L28fccc.  v4:= lcmp(v0, v2);
  #L28fcd0.  if v4 != 0 then goto L28fcd6;
  #L28fcd4.  return v2 @kind wide;
  #L28fcd6.  call temp:= `c`(v0, v6) @signature `Lio/reactivex/internal/util/b;.c:(JJ)J` @kind static;
  #L28fcdc.  v2:= temp @kind wide;
  #L28fcde.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L28fce4.  v2:= temp;
  #L28fce6.  if v2 == 0 then goto L28fcac;
  #L28fcea.  return v0 @kind wide;
}
procedure `long` `c`(`long` v1 , `long` v3 ) @signature `Lio/reactivex/internal/util/b;.c:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L28fcfc.  v1:= v1 + v3 @kind long;
  #L28fcfe.  v3:= 0L;
  #L28fd02.  v0:= lcmp(v1, v3);
  #L28fd06.  if v0 >= 0 then goto L28fd14;
  #L28fd0a.  v1:= 9223372036854775807L;
  #L28fd14.  return v1 @kind wide;
}
procedure `long` `d`(`long` v7 , `long` v9 ) @signature `Lio/reactivex/internal/util/b;.d:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L28fd28.  v0:= v7 * v9 @kind long;
  #L28fd2c.  v2:= v7 ^| v9 @kind long;
  #L28fd30.  v4:= 31I;
  #L28fd34.  v2:= v2 ^>> v4 @kind long;
  #L28fd36.  v4:= 0L;
  #L28fd3a.  v6:= lcmp(v2, v4);
  #L28fd3e.  if v6 == 0 then goto L28fd5a;
  #L28fd42.  v7:= v0 / v7 @kind long;
  #L28fd46.  v2:= lcmp(v7, v9);
  #L28fd4a.  if v2 == 0 then goto L28fd5a;
  #L28fd4e.  v7:= 9223372036854775807L;
  #L28fd58.  return v7 @kind wide;
  #L28fd5a.  return v0 @kind wide;
}
procedure `long` `e`(`java.util.concurrent.atomic.AtomicLong` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L28fd6c.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L28fd72.  v0:= temp @kind wide;
  #L28fd74.  v2:= 9223372036854775807L;
  #L28fd7e.  v4:= lcmp(v0, v2);
  #L28fd82.  if v4 != 0 then goto L28fd88;
  #L28fd86.  return v2 @kind wide;
  #L28fd88.  v2:= v0 - v10 @kind long;
  #L28fd8c.  v4:= 0L;
  #L28fd90.  v6:= lcmp(v2, v4);
  #L28fd94.  if v6 >= 0 then goto L28fdcc;
  #L28fd98.  v6:= new `java.lang.IllegalStateException`;
  #L28fd9c.  v7:= new `java.lang.StringBuilder`;
  #L28fda0.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28fda6.  v8:= "More produced than requested: " @kind object;
  #L28fdaa.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28fdb0.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L28fdb6.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28fdbc.  v2:= temp @kind object;
  #L28fdbe.  call `<init>`(v6, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28fdc4.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28fdca.  v2:= v4 @kind wide;
  #L28fdcc.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L28fdd2.  v0:= temp;
  #L28fdd4.  if v0 == 0 then goto L28fd6c;
  #L28fdd8.  return v2 @kind wide;
}
procedure `long` `f`(`java.util.concurrent.atomic.AtomicLong` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/internal/util/b;.f:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L28fdec.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L28fdf2.  v0:= temp @kind wide;
  #L28fdf4.  v2:= -9223372036854775808L;
  #L28fdf8.  v4:= lcmp(v0, v2);
  #L28fdfc.  if v4 != 0 then goto L28fe02;
  #L28fe00.  return v2 @kind wide;
  #L28fe02.  v2:= 9223372036854775807L;
  #L28fe0c.  v4:= lcmp(v0, v2);
  #L28fe10.  if v4 != 0 then goto L28fe16;
  #L28fe14.  return v2 @kind wide;
  #L28fe16.  v2:= v0 - v10 @kind long;
  #L28fe1a.  v4:= 0L;
  #L28fe1e.  v6:= lcmp(v2, v4);
  #L28fe22.  if v6 >= 0 then goto L28fe5a;
  #L28fe26.  v6:= new `java.lang.IllegalStateException`;
  #L28fe2a.  v7:= new `java.lang.StringBuilder`;
  #L28fe2e.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28fe34.  v8:= "More produced than requested: " @kind object;
  #L28fe38.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28fe3e.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L28fe44.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28fe4a.  v2:= temp @kind object;
  #L28fe4c.  call `<init>`(v6, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28fe52.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28fe58.  v2:= v4 @kind wide;
  #L28fe5a.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L28fe60.  v0:= temp;
  #L28fe62.  if v0 == 0 then goto L28fdec;
  #L28fe66.  return v2 @kind wide;
}
