record `io.reactivex.internal.util.ExceptionHelper` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `java.lang.Throwable` `@@io.reactivex.internal.util.ExceptionHelper.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/util/ExceptionHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L290548.  v0:= new `io.reactivex.internal.util.ExceptionHelper$Termination`;
  #L29054c.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper$Termination;.<init>:()V` @kind direct;
  #L290552.  `@@io.reactivex.internal.util.ExceptionHelper.a` @type ^`java.lang.Throwable` := v0 @kind object;
  #L290556.  return @kind void;
}
procedure `boolean` `a`(`java.util.concurrent.atomic.AtomicReference` v5 @kind object, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.a:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L290404.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L29040a.  v0:= temp @kind object;
  #L29040c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L290410.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.a` @type ^`java.lang.Throwable` @kind object;
  #L290414.  v2:= 0I;
  #L290416.  if v0 != v1 then goto L29041c;
  #L29041a.  return v2;
  #L29041c.  v1:= 1I;
  #L29041e.  if v0 != 0 then goto L290426;
  #L290422.  v3:= v6 @kind object;
  #L290424.  goto L29043e;
  #L290426.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L29042a.  v4:= 2I;
  #L29042c.  v4:= new `java.lang.Throwable`[v4];
  #L290430.  v4[v2]:= v0 @kind object;
  #L290434.  v4[v1]:= v6 @kind object;
  #L290438.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L29043e.  call temp:= `compareAndSet`(v5, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L290444.  v0:= temp;
  #L290446.  if v0 == 0 then goto L290404;
  #L29044a.  return v1;
}
procedure `java.lang.Throwable` `b`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.b:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L290514.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L29051a.  v0:= temp @kind object;
  #L29051c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L290520.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.a` @type ^`java.lang.Throwable` @kind object;
  #L290524.  if v0 == v1 then goto L290536;
  #L290528.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L29052e.  v2:= temp @kind object;
  #L290530.  v0:= v2 @kind object;
  #L290532.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L290536.  return v0 @kind object;
}
procedure `java.lang.Exception` `c`(`java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.c:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L29045c.  v0:= instanceof @variable v1 @type ^`java.lang.Exception` @kind boolean;
  #L290460.  if v0 == 0 then goto L29046a;
  #L290464.  v1:= (`java.lang.Exception`) v1 @kind object;
  #L290468.  return v1 @kind object;
  #L29046a.  throw v1;
}
procedure `java.lang.String` `d`(`long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.d:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2904b4.  v0:= new `java.lang.StringBuilder`;
  #L2904b8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2904be.  v1:= "The source did not signal an event for " @kind object;
  #L2904c2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2904c8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2904ce.  v2:= " " @kind object;
  #L2904d2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2904d8.  call temp:= `toString`(v4) @signature `Ljava/util/concurrent/TimeUnit;.toString:()Ljava/lang/String;` @kind virtual;
  #L2904de.  v2:= temp @kind object;
  #L2904e0.  call temp:= `toLowerCase`(v2) @signature `Ljava/lang/String;.toLowerCase:()Ljava/lang/String;` @kind virtual;
  #L2904e6.  v2:= temp @kind object;
  #L2904e8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2904ee.  v2:= " and has been terminated." @kind object;
  #L2904f2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2904f8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2904fe.  v2:= temp @kind object;
  #L290500.  return v2 @kind object;
}
procedure `java.lang.RuntimeException` `e`(`java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.e:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L29047c.  v0:= instanceof @variable v1 @type ^`java.lang.Error` @kind boolean;
  #L290480.  if v0 != 0 then goto L29049e;
  #L290484.  v0:= instanceof @variable v1 @type ^`java.lang.RuntimeException` @kind boolean;
  #L290488.  if v0 == 0 then goto L290492;
  #L29048c.  v1:= (`java.lang.RuntimeException`) v1 @kind object;
  #L290490.  return v1 @kind object;
  #L290492.  v0:= new `java.lang.RuntimeException`;
  #L290496.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L29049c.  return v0 @kind object;
  #L29049e.  v1:= (`java.lang.Error`) v1 @kind object;
  #L2904a2.  throw v1;
}
