record `io.reactivex.internal.schedulers.e` @kind class @AccessFlag FINAL extends `java.util.concurrent.Callable` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.e.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.e.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.e.e` @AccessFlag FINAL;
  `java.util.concurrent.ExecutorService` `io.reactivex.internal.schedulers.e.f` @AccessFlag FINAL;
  `java.lang.Thread` `io.reactivex.internal.schedulers.e.g` @AccessFlag ;
}
global `java.util.concurrent.FutureTask` `@@io.reactivex.internal.schedulers.e.b` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L28baac.  v0:= new `java.util.concurrent.FutureTask`;
  #L28bab0.  v1:= `@@io.reactivex.internal.functions.Functions.b` @type ^`java.lang.Runnable` @kind object;
  #L28bab4.  v2:= 0I;
  #L28bab6.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L28babc.  `@@io.reactivex.internal.schedulers.e.b` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L28bac0.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.e` v0 @kind this, `java.lang.Runnable` v1 @kind object, `java.util.concurrent.ExecutorService` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/e;.<init>:(Ljava/lang/Runnable;Ljava/util/concurrent/ExecutorService;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L28bad4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28bada.  v0.`io.reactivex.internal.schedulers.e.c` @type ^`java.lang.Runnable` := v1 @kind object;
  #L28bade.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L28bae2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28bae8.  v0.`io.reactivex.internal.schedulers.e.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L28baec.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L28baf0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28baf6.  v0.`io.reactivex.internal.schedulers.e.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L28bafa.  v0.`io.reactivex.internal.schedulers.e.f` @type ^`java.util.concurrent.ExecutorService` := v2 @kind object;
  #L28bafe.  return @kind void;
}
procedure `java.lang.Void` `a`(`io.reactivex.internal.schedulers.e` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/e;.a:()Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28ba50.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L28ba56.  v0:= temp @kind object;
  #L28ba58.  v2.`io.reactivex.internal.schedulers.e.g` @type ^`java.lang.Thread` := v0 @kind object;
  #L28ba5c.  v0:= 0I;
  #L28ba5e.  v1:= v2.`io.reactivex.internal.schedulers.e.c` @type ^`java.lang.Runnable` @kind object;
  #L28ba62.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L28ba68.  v1:= v2.`io.reactivex.internal.schedulers.e.f` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L28ba6c.  call temp:= `submit`(v1, v2) @signature `Ljava/util/concurrent/ExecutorService;.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;` @kind interface;
  #L28ba72.  v1:= temp @kind object;
  #L28ba74.  call `c`(v2, v1) @signature `Lio/reactivex/internal/schedulers/e;.c:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L28ba7a.  v2.`io.reactivex.internal.schedulers.e.g` @type ^`java.lang.Thread` := v0 @kind object;
  #L28ba7e.  goto L28ba8c;
  #L28ba80.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28ba82.  v2.`io.reactivex.internal.schedulers.e.g` @type ^`java.lang.Thread` := v0 @kind object;
  #L28ba86.  call `t`(v1) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28ba8c.  return v0 @kind object;
  catch `java.lang.Throwable` @[L28ba5e..L28ba7e] goto L28ba80;
}
procedure `void` `b`(`io.reactivex.internal.schedulers.e` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/e;.b:(Ljava/util/concurrent/Future;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L28bb90.  v0:= v2.`io.reactivex.internal.schedulers.e.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28bb94.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28bb9a.  v0:= temp @kind object;
  #L28bb9c.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L28bba0.  v1:= `@@io.reactivex.internal.schedulers.e.b` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L28bba4.  if v0 != v1 then goto L28bbc6;
  #L28bba8.  v0:= v2.`io.reactivex.internal.schedulers.e.g` @type ^`java.lang.Thread` @kind object;
  #L28bbac.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L28bbb2.  v1:= temp @kind object;
  #L28bbb4.  if v0 == v1 then goto L28bbbc;
  #L28bbb8.  v0:= 1I;
  #L28bbba.  goto L28bbbe;
  #L28bbbc.  v0:= 0I;
  #L28bbbe.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L28bbc4.  return @kind void;
  #L28bbc6.  v1:= v2.`io.reactivex.internal.schedulers.e.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28bbca.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28bbd0.  v0:= temp;
  #L28bbd2.  if v0 == 0 then goto L28bb90;
  #L28bbd6.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.schedulers.e` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/e;.c:(Ljava/util/concurrent/Future;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L28bbe8.  v0:= v2.`io.reactivex.internal.schedulers.e.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28bbec.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28bbf2.  v0:= temp @kind object;
  #L28bbf4.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L28bbf8.  v1:= `@@io.reactivex.internal.schedulers.e.b` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L28bbfc.  if v0 != v1 then goto L28bc1e;
  #L28bc00.  v0:= v2.`io.reactivex.internal.schedulers.e.g` @type ^`java.lang.Thread` @kind object;
  #L28bc04.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L28bc0a.  v1:= temp @kind object;
  #L28bc0c.  if v0 == v1 then goto L28bc14;
  #L28bc10.  v0:= 1I;
  #L28bc12.  goto L28bc16;
  #L28bc14.  v0:= 0I;
  #L28bc16.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L28bc1c.  return @kind void;
  #L28bc1e.  v1:= v2.`io.reactivex.internal.schedulers.e.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28bc22.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28bc28.  v0:= temp;
  #L28bc2a.  if v0 == 0 then goto L28bbe8;
  #L28bc2e.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.schedulers.e` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/e;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L28ba34.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/schedulers/e;.a:()Ljava/lang/Void;` @kind virtual;
  #L28ba3a.  v0:= temp @kind object;
  #L28ba3c.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.e` v6 @kind this) @signature `Lio/reactivex/internal/schedulers/e;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L28bb10.  v0:= v6.`io.reactivex.internal.schedulers.e.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28bb14.  v1:= `@@io.reactivex.internal.schedulers.e.b` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L28bb18.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L28bb1e.  v0:= temp @kind object;
  #L28bb20.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L28bb24.  v2:= 1I;
  #L28bb26.  v3:= 0I;
  #L28bb28.  if v0 == 0 then goto L28bb4c;
  #L28bb2c.  if v0 == v1 then goto L28bb4c;
  #L28bb30.  v4:= v6.`io.reactivex.internal.schedulers.e.g` @type ^`java.lang.Thread` @kind object;
  #L28bb34.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L28bb3a.  v5:= temp @kind object;
  #L28bb3c.  if v4 == v5 then goto L28bb44;
  #L28bb40.  v4:= 1I;
  #L28bb42.  goto L28bb46;
  #L28bb44.  v4:= 0I;
  #L28bb46.  call temp:= `cancel`(v0, v4) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L28bb4c.  v0:= v6.`io.reactivex.internal.schedulers.e.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28bb50.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L28bb56.  v0:= temp @kind object;
  #L28bb58.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L28bb5c.  if v0 == 0 then goto L28bb7e;
  #L28bb60.  if v0 == v1 then goto L28bb7e;
  #L28bb64.  v1:= v6.`io.reactivex.internal.schedulers.e.g` @type ^`java.lang.Thread` @kind object;
  #L28bb68.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L28bb6e.  v4:= temp @kind object;
  #L28bb70.  if v1 == v4 then goto L28bb76;
  #L28bb74.  goto L28bb78;
  #L28bb76.  v2:= 0I;
  #L28bb78.  call temp:= `cancel`(v0, v2) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L28bb7e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.e` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/e;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28ba08.  v0:= v2.`io.reactivex.internal.schedulers.e.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28ba0c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28ba12.  v0:= temp @kind object;
  #L28ba14.  v1:= `@@io.reactivex.internal.schedulers.e.b` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L28ba18.  if v0 != v1 then goto L28ba20;
  #L28ba1c.  v0:= 1I;
  #L28ba1e.  goto L28ba22;
  #L28ba20.  v0:= 0I;
  #L28ba22.  return v0;
}
