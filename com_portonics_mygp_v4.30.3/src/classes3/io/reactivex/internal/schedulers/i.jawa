record `io.reactivex.internal.schedulers.i` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.x` @kind class {
  `java.util.concurrent.ThreadFactory` `io.reactivex.internal.schedulers.i.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.i.j` @AccessFlag FINAL;
}
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.i.c` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.i.d` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.schedulers.i.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.TimeUnit` `@@io.reactivex.internal.schedulers.i.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.reactivex.internal.schedulers.h` `@@io.reactivex.internal.schedulers.i.g` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.schedulers.f` `@@io.reactivex.internal.schedulers.i.h` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28bfa8.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L28bfac.  `@@io.reactivex.internal.schedulers.i.f` @type ^`java.util.concurrent.TimeUnit` := v0 @kind object;
  #L28bfb0.  v0:= "rx2.io-keep-alive-time" @kind object;
  #L28bfb4.  v1:= 60L;
  #L28bfb8.  call temp:= `getLong`(v0, v1) @signature `Ljava/lang/Long;.getLong:(Ljava/lang/String;J)Ljava/lang/Long;` @kind static;
  #L28bfbe.  v0:= temp @kind object;
  #L28bfc0.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L28bfc6.  v0:= temp @kind wide;
  #L28bfc8.  `@@io.reactivex.internal.schedulers.i.e` @type ^`long` := v0 @kind wide;
  #L28bfcc.  v0:= new `io.reactivex.internal.schedulers.h`;
  #L28bfd0.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L28bfd4.  v2:= "RxCachedThreadSchedulerShutdown" @kind object;
  #L28bfd8.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28bfde.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/h;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L28bfe4.  `@@io.reactivex.internal.schedulers.i.g` @type ^`io.reactivex.internal.schedulers.h` := v0 @kind object;
  #L28bfe8.  call `dispose`(v0) @signature `Lio/reactivex/internal/schedulers/k;.dispose:()V` @kind virtual;
  #L28bfee.  v0:= "rx2.io-priority" @kind object;
  #L28bff2.  v1:= 5I;
  #L28bff4.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L28bffa.  v0:= temp @kind object;
  #L28bffc.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L28c002.  v0:= temp;
  #L28c004.  v1:= 10I;
  #L28c008.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L28c00e.  v0:= temp;
  #L28c010.  v1:= 1I;
  #L28c012.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L28c018.  v0:= temp;
  #L28c01a.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L28c01e.  v2:= "RxCachedThreadScheduler" @kind object;
  #L28c022.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L28c028.  `@@io.reactivex.internal.schedulers.i.c` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v1 @kind object;
  #L28c02c.  v2:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L28c030.  v3:= "RxCachedWorkerPoolEvictor" @kind object;
  #L28c034.  call `<init>`(v2, v3, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L28c03a.  `@@io.reactivex.internal.schedulers.i.d` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v2 @kind object;
  #L28c03e.  v0:= new `io.reactivex.internal.schedulers.f`;
  #L28c042.  v2:= 0L;
  #L28c046.  v4:= 0I;
  #L28c048.  call `<init>`(v0, v2, v4, v1) @signature `Lio/reactivex/internal/schedulers/f;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L28c04e.  `@@io.reactivex.internal.schedulers.i.h` @type ^`io.reactivex.internal.schedulers.f` := v0 @kind object;
  #L28c052.  call `e`(v0) @signature `Lio/reactivex/internal/schedulers/f;.e:()V` @kind virtual;
  #L28c058.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.i` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28c06c.  v0:= `@@io.reactivex.internal.schedulers.i.c` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L28c070.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/schedulers/i;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L28c076.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.i` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/i;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28c088.  call `<init>`(v1) @signature `Lio/reactivex/x;.<init>:()V` @kind direct;
  #L28c08e.  v1.`io.reactivex.internal.schedulers.i.i` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L28c092.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L28c096.  v0:= `@@io.reactivex.internal.schedulers.i.h` @type ^`io.reactivex.internal.schedulers.f` @kind object;
  #L28c09a.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L28c0a0.  v1.`io.reactivex.internal.schedulers.i.j` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L28c0a4.  call `f`(v1) @signature `Lio/reactivex/internal/schedulers/i;.f:()V` @kind virtual;
  #L28c0aa.  return @kind void;
}
procedure `io.reactivex.x$a` `a`(`io.reactivex.internal.schedulers.i` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/i;.a:()Lio/reactivex/x$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28bf7c.  v0:= new `io.reactivex.internal.schedulers.g`;
  #L28bf80.  v1:= v2.`io.reactivex.internal.schedulers.i.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28bf84.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28bf8a.  v1:= temp @kind object;
  #L28bf8c.  v1:= (`io.reactivex.internal.schedulers.f`) v1 @kind object;
  #L28bf90.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/g;.<init>:(Lio/reactivex/internal/schedulers/f;)V` @kind direct;
  #L28bf96.  return v0 @kind object;
}
procedure `void` `f`(`io.reactivex.internal.schedulers.i` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/i;.f:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28c0bc.  v0:= new `io.reactivex.internal.schedulers.f`;
  #L28c0c0.  v1:= `@@io.reactivex.internal.schedulers.i.e` @type ^`long` @kind wide;
  #L28c0c4.  v3:= `@@io.reactivex.internal.schedulers.i.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L28c0c8.  v4:= v5.`io.reactivex.internal.schedulers.i.i` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L28c0cc.  call `<init>`(v0, v1, v3, v4) @signature `Lio/reactivex/internal/schedulers/f;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L28c0d2.  v1:= v5.`io.reactivex.internal.schedulers.i.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28c0d6.  v2:= `@@io.reactivex.internal.schedulers.i.h` @type ^`io.reactivex.internal.schedulers.f` @kind object;
  #L28c0da.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28c0e0.  v1:= temp;
  #L28c0e2.  if v1 != 0 then goto L28c0ec;
  #L28c0e6.  call `e`(v0) @signature `Lio/reactivex/internal/schedulers/f;.e:()V` @kind virtual;
  #L28c0ec.  return @kind void;
}
