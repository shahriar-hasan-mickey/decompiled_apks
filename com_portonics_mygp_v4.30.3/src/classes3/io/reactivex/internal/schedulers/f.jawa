record `io.reactivex.internal.schedulers.f` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.schedulers.f.b` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ConcurrentLinkedQueue` `io.reactivex.internal.schedulers.f.c` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.disposables.a` `io.reactivex.internal.schedulers.f.d` @AccessFlag FINAL;
  `java.util.concurrent.ScheduledExecutorService` `io.reactivex.internal.schedulers.f.e` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Future` `io.reactivex.internal.schedulers.f.f` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ThreadFactory` `io.reactivex.internal.schedulers.f.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.f` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `java.util.concurrent.ThreadFactory` v11 @kind object) @signature `Lio/reactivex/internal/schedulers/f;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L28bcc4.  call `<init>`(v7) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28bcca.  if v10 == 0 then goto L28bcd8;
  #L28bcce.  call temp:= `toNanos`(v10, v8) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L28bcd4.  v8:= temp @kind wide;
  #L28bcd6.  goto L28bcdc;
  #L28bcd8.  v8:= 0L;
  #L28bcdc.  v4:= v8 @kind wide;
  #L28bcde.  v7.`io.reactivex.internal.schedulers.f.b` @type ^`long` := v4 @kind wide;
  #L28bce2.  v8:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L28bce6.  call `<init>`(v8) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L28bcec.  v7.`io.reactivex.internal.schedulers.f.c` @type ^`java.util.concurrent.ConcurrentLinkedQueue` := v8 @kind object;
  #L28bcf0.  v8:= new `io.reactivex.disposables.a`;
  #L28bcf4.  call `<init>`(v8) @signature `Lio/reactivex/disposables/a;.<init>:()V` @kind direct;
  #L28bcfa.  v7.`io.reactivex.internal.schedulers.f.d` @type ^`io.reactivex.disposables.a` := v8 @kind object;
  #L28bcfe.  v7.`io.reactivex.internal.schedulers.f.g` @type ^`java.util.concurrent.ThreadFactory` := v11 @kind object;
  #L28bd02.  v8:= 0I;
  #L28bd04.  if v10 == 0 then goto L28bd2a;
  #L28bd08.  v8:= 1I;
  #L28bd0a.  v9:= `@@io.reactivex.internal.schedulers.i.d` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L28bd0e.  call temp:= `newScheduledThreadPool`(v8, v9) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L28bd14.  v8:= temp @kind object;
  #L28bd16.  v6:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L28bd1a.  v0:= v8 @kind object;
  #L28bd1c.  v1:= v7 @kind object;
  #L28bd1e.  v2:= v4 @kind wide;
  #L28bd20.  call temp:= `scheduleWithFixedDelay`(v0, v1, v2, v4, v6) @signature `Ljava/util/concurrent/ScheduledExecutorService;.scheduleWithFixedDelay:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L28bd26.  v9:= temp @kind object;
  #L28bd28.  goto L28bd2c;
  #L28bd2a.  v9:= v8 @kind object;
  #L28bd2c.  v7.`io.reactivex.internal.schedulers.f.e` @type ^`java.util.concurrent.ScheduledExecutorService` := v8 @kind object;
  #L28bd30.  v7.`io.reactivex.internal.schedulers.f.f` @type ^`java.util.concurrent.Future` := v9 @kind object;
  #L28bd34.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.schedulers.f` v7 @kind this) @signature `Lio/reactivex/internal/schedulers/f;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L28bd48.  v0:= v7.`io.reactivex.internal.schedulers.f.c` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L28bd4c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.isEmpty:()Z` @kind virtual;
  #L28bd52.  v0:= temp;
  #L28bd54.  if v0 != 0 then goto L28bdb0;
  #L28bd58.  call temp:= `c`(v7) @signature `Lio/reactivex/internal/schedulers/f;.c:()J` @kind virtual;
  #L28bd5e.  v0:= temp @kind wide;
  #L28bd60.  v2:= v7.`io.reactivex.internal.schedulers.f.c` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L28bd64.  call temp:= `iterator`(v2) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L28bd6a.  v2:= temp @kind object;
  #L28bd6c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L28bd72.  v3:= temp;
  #L28bd74.  if v3 == 0 then goto L28bdb0;
  #L28bd78.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L28bd7e.  v3:= temp @kind object;
  #L28bd80.  v3:= (`io.reactivex.internal.schedulers.h`) v3 @kind object;
  #L28bd84.  call temp:= `i`(v3) @signature `Lio/reactivex/internal/schedulers/h;.i:()J` @kind virtual;
  #L28bd8a.  v4:= temp @kind wide;
  #L28bd8c.  v6:= lcmp(v4, v0);
  #L28bd90.  if v6 > 0 then goto L28bdb0;
  #L28bd94.  v4:= v7.`io.reactivex.internal.schedulers.f.c` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L28bd98.  call temp:= `remove`(v4, v3) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L28bd9e.  v4:= temp;
  #L28bda0.  if v4 == 0 then goto L28bd6c;
  #L28bda4.  v4:= v7.`io.reactivex.internal.schedulers.f.d` @type ^`io.reactivex.disposables.a` @kind object;
  #L28bda8.  call temp:= `a`(v4, v3) @signature `Lio/reactivex/disposables/a;.a:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L28bdae.  goto L28bd6c;
  #L28bdb0.  return @kind void;
}
procedure `io.reactivex.internal.schedulers.h` `b`(`io.reactivex.internal.schedulers.f` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/f;.b:()Lio/reactivex/internal/schedulers/h;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L28bc40.  v0:= v2.`io.reactivex.internal.schedulers.f.d` @type ^`io.reactivex.disposables.a` @kind object;
  #L28bc44.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/a;.isDisposed:()Z` @kind virtual;
  #L28bc4a.  v0:= temp;
  #L28bc4c.  if v0 == 0 then goto L28bc56;
  #L28bc50.  v0:= `@@io.reactivex.internal.schedulers.i.g` @type ^`io.reactivex.internal.schedulers.h` @kind object;
  #L28bc54.  return v0 @kind object;
  #L28bc56.  v0:= v2.`io.reactivex.internal.schedulers.f.c` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L28bc5a.  call temp:= `isEmpty`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.isEmpty:()Z` @kind virtual;
  #L28bc60.  v0:= temp;
  #L28bc62.  if v0 != 0 then goto L28bc7c;
  #L28bc66.  v0:= v2.`io.reactivex.internal.schedulers.f.c` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L28bc6a.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L28bc70.  v0:= temp @kind object;
  #L28bc72.  v0:= (`io.reactivex.internal.schedulers.h`) v0 @kind object;
  #L28bc76.  if v0 == 0 then goto L28bc56;
  #L28bc7a.  return v0 @kind object;
  #L28bc7c.  v0:= new `io.reactivex.internal.schedulers.h`;
  #L28bc80.  v1:= v2.`io.reactivex.internal.schedulers.f.g` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L28bc84.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/h;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L28bc8a.  v1:= v2.`io.reactivex.internal.schedulers.f.d` @type ^`io.reactivex.disposables.a` @kind object;
  #L28bc8e.  call temp:= `b`(v1, v0) @signature `Lio/reactivex/disposables/a;.b:(Lio/reactivex/disposables/b;)Z` @kind virtual;
  #L28bc94.  return v0 @kind object;
}
procedure `long` `c`(`io.reactivex.internal.schedulers.f` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/f;.c:()J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L28bca8.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L28bcae.  v0:= temp @kind wide;
  #L28bcb0.  return v0 @kind wide;
}
procedure `void` `d`(`io.reactivex.internal.schedulers.f` v4 @kind this, `io.reactivex.internal.schedulers.h` v5 @kind object) @signature `Lio/reactivex/internal/schedulers/f;.d:(Lio/reactivex/internal/schedulers/h;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L28bdc4.  call temp:= `c`(v4) @signature `Lio/reactivex/internal/schedulers/f;.c:()J` @kind virtual;
  #L28bdca.  v0:= temp @kind wide;
  #L28bdcc.  v2:= v4.`io.reactivex.internal.schedulers.f.b` @type ^`long` @kind wide;
  #L28bdd0.  v0:= v0 + v2 @kind long;
  #L28bdd2.  call `j`(v5, v0) @signature `Lio/reactivex/internal/schedulers/h;.j:(J)V` @kind virtual;
  #L28bdd8.  v0:= v4.`io.reactivex.internal.schedulers.f.c` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L28bddc.  call temp:= `offer`(v0, v5) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L28bde2.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.schedulers.f` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/f;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L28be0c.  v0:= v2.`io.reactivex.internal.schedulers.f.d` @type ^`io.reactivex.disposables.a` @kind object;
  #L28be10.  call `dispose`(v0) @signature `Lio/reactivex/disposables/a;.dispose:()V` @kind virtual;
  #L28be16.  v0:= v2.`io.reactivex.internal.schedulers.f.f` @type ^`java.util.concurrent.Future` @kind object;
  #L28be1a.  if v0 == 0 then goto L28be26;
  #L28be1e.  v1:= 1I;
  #L28be20.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L28be26.  v0:= v2.`io.reactivex.internal.schedulers.f.e` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L28be2a.  if v0 == 0 then goto L28be34;
  #L28be2e.  call temp:= `shutdownNow`(v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L28be34.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.f` v0 @kind this) @signature `Lio/reactivex/internal/schedulers/f;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L28bdf4.  call `a`(v0) @signature `Lio/reactivex/internal/schedulers/f;.a:()V` @kind virtual;
  #L28bdfa.  return @kind void;
}
