record `io.reactivex.internal.schedulers.s` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.s.b` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.schedulers.v` `io.reactivex.internal.schedulers.s.c` @AccessFlag PRIVATE_FINAL;
  `long` `io.reactivex.internal.schedulers.s.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.s` v0 @kind this, `java.lang.Runnable` v1 @kind object, `io.reactivex.internal.schedulers.v` v2 @kind object, `long` v3 ) @signature `Lio/reactivex/internal/schedulers/s;.<init>:(Ljava/lang/Runnable;Lio/reactivex/internal/schedulers/v;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L28d168.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28d16e.  v0.`io.reactivex.internal.schedulers.s.b` @type ^`java.lang.Runnable` := v1 @kind object;
  #L28d172.  v0.`io.reactivex.internal.schedulers.s.c` @type ^`io.reactivex.internal.schedulers.v` := v2 @kind object;
  #L28d176.  v0.`io.reactivex.internal.schedulers.s.d` @type ^`long` := v3 @kind wide;
  #L28d17a.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.s` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/s;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28d18c.  v0:= v5.`io.reactivex.internal.schedulers.s.c` @type ^`io.reactivex.internal.schedulers.v` @kind object;
  #L28d190.  v0:= v0.`io.reactivex.internal.schedulers.v.e` @type ^`boolean` @kind boolean;
  #L28d194.  if v0 != 0 then goto L28d1ec;
  #L28d198.  v0:= v5.`io.reactivex.internal.schedulers.s.c` @type ^`io.reactivex.internal.schedulers.v` @kind object;
  #L28d19c.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L28d1a0.  call temp:= `a`(v0, v1) @signature `Lio/reactivex/x$a;.a:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L28d1a6.  v0:= temp @kind wide;
  #L28d1a8.  v2:= v5.`io.reactivex.internal.schedulers.s.d` @type ^`long` @kind wide;
  #L28d1ac.  v4:= lcmp(v2, v0);
  #L28d1b0.  if v4 <= 0 then goto L28d1d6;
  #L28d1b4.  v2:= v2 - v0 @kind long;
  #L28d1b6.  call `sleep`(v2) @signature `Ljava/lang/Thread;.sleep:(J)V` @kind static;
  #L28d1bc.  goto L28d1d6;
  #L28d1be.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L28d1c0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L28d1c6.  v1:= temp @kind object;
  #L28d1c8.  call `interrupt`(v1) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L28d1ce.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28d1d4.  return @kind void;
  #L28d1d6.  v0:= v5.`io.reactivex.internal.schedulers.s.c` @type ^`io.reactivex.internal.schedulers.v` @kind object;
  #L28d1da.  v0:= v0.`io.reactivex.internal.schedulers.v.e` @type ^`boolean` @kind boolean;
  #L28d1de.  if v0 != 0 then goto L28d1ec;
  #L28d1e2.  v0:= v5.`io.reactivex.internal.schedulers.s.b` @type ^`java.lang.Runnable` @kind object;
  #L28d1e6.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L28d1ec.  return @kind void;
  catch `java.lang.InterruptedException` @[L28d1b6..L28d1bc] goto L28d1be;
}
