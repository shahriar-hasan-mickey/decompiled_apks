record `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.run` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.a` `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.tasks` @AccessFlag FINAL;
  `java.lang.Thread` `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.thread` @AccessFlag VOLATILE;
}
global `int` `@@io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.FINISHED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.INTERRUPTED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.INTERRUPTING` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.READY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.RUNNING` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable` v0 @kind this, `java.lang.Runnable` v1 @kind object, `io.reactivex.internal.disposables.a` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$InterruptibleRunnable;.<init>:(Ljava/lang/Runnable;Lio/reactivex/internal/disposables/a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L28b894.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L28b89a.  v0.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.run` @type ^`java.lang.Runnable` := v1 @kind object;
  #L28b89e.  v0.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.tasks` @type ^`io.reactivex.internal.disposables.a` := v2 @kind object;
  #L28b8a2.  return @kind void;
}
procedure `void` `cleanup`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$InterruptibleRunnable;.cleanup:()V` @AccessFlag  {
    temp;
    v0;

  #L28b8b4.  v0:= v1.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.tasks` @type ^`io.reactivex.internal.disposables.a` @kind object;
  #L28b8b8.  if v0 == 0 then goto L28b8c2;
  #L28b8bc.  call temp:= `c`(v0, v1) @signature `Lio/reactivex/internal/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind interface;
  #L28b8c2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$InterruptibleRunnable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28b8d4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28b8da.  v0:= temp;
  #L28b8dc.  v1:= 2I;
  #L28b8de.  if v0 < v1 then goto L28b8e4;
  #L28b8e2.  goto L28b930;
  #L28b8e4.  v1:= 4I;
  #L28b8e6.  if v0 != 0 then goto L28b900;
  #L28b8ea.  v0:= 0I;
  #L28b8ec.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L28b8f2.  v0:= temp;
  #L28b8f4.  if v0 == 0 then goto L28b8d4;
  #L28b8f8.  call `cleanup`(v3) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$InterruptibleRunnable;.cleanup:()V` @kind virtual;
  #L28b8fe.  goto L28b930;
  #L28b900.  v0:= 1I;
  #L28b902.  v2:= 3I;
  #L28b904.  call temp:= `compareAndSet`(v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L28b90a.  v0:= temp;
  #L28b90c.  if v0 == 0 then goto L28b8d4;
  #L28b910.  v0:= v3.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.thread` @type ^`java.lang.Thread` @kind object;
  #L28b914.  if v0 == 0 then goto L28b924;
  #L28b918.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L28b91e.  v0:= 0I;
  #L28b920.  v3.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.thread` @type ^`java.lang.Thread` := v0 @kind object;
  #L28b924.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L28b92a.  call `cleanup`(v3) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$InterruptibleRunnable;.cleanup:()V` @kind virtual;
  #L28b930.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$InterruptibleRunnable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28b86c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28b872.  v0:= temp;
  #L28b874.  v1:= 2I;
  #L28b876.  if v0 < v1 then goto L28b87e;
  #L28b87a.  v0:= 1I;
  #L28b87c.  goto L28b880;
  #L28b87e.  v0:= 0I;
  #L28b880.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$InterruptibleRunnable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28b944.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28b94a.  v0:= temp;
  #L28b94c.  if v0 != 0 then goto L28b9ea;
  #L28b950.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L28b956.  v0:= temp @kind object;
  #L28b958.  v5.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.thread` @type ^`java.lang.Thread` := v0 @kind object;
  #L28b95c.  v0:= 0I;
  #L28b95e.  v1:= 1I;
  #L28b960.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L28b966.  v0:= temp;
  #L28b968.  v2:= 0I;
  #L28b96a.  if v0 == 0 then goto L28b9e6;
  #L28b96e.  v0:= 3I;
  #L28b970.  v3:= 2I;
  #L28b972.  v4:= v5.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.run` @type ^`java.lang.Runnable` @kind object;
  #L28b976.  call `run`(v4) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L28b97c.  v5.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.thread` @type ^`java.lang.Thread` := v2 @kind object;
  #L28b980.  call temp:= `compareAndSet`(v5, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L28b986.  v1:= temp;
  #L28b988.  if v1 == 0 then goto L28b994;
  #L28b98c.  call `cleanup`(v5) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$InterruptibleRunnable;.cleanup:()V` @kind virtual;
  #L28b992.  goto L28b9ea;
  #L28b994.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28b99a.  v1:= temp;
  #L28b99c.  if v1 != v0 then goto L28b9a8;
  #L28b9a0.  call `yield`() @signature `Ljava/lang/Thread;.yield:()V` @kind static;
  #L28b9a6.  goto L28b994;
  #L28b9a8.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L28b9ae.  goto L28b9ea;
  #L28b9b0.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28b9b2.  v5.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.thread` @type ^`java.lang.Thread` := v2 @kind object;
  #L28b9b6.  call temp:= `compareAndSet`(v5, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L28b9bc.  v1:= temp;
  #L28b9be.  if v1 != 0 then goto L28b9de;
  #L28b9c2.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28b9c8.  v1:= temp;
  #L28b9ca.  if v1 != v0 then goto L28b9d6;
  #L28b9ce.  call `yield`() @signature `Ljava/lang/Thread;.yield:()V` @kind static;
  #L28b9d4.  goto L28b9c2;
  #L28b9d6.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L28b9dc.  goto L28b9e4;
  #L28b9de.  call `cleanup`(v5) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$InterruptibleRunnable;.cleanup:()V` @kind virtual;
  #L28b9e4.  throw v4;
  #L28b9e6.  v5.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable.thread` @type ^`java.lang.Thread` := v2 @kind object;
  #L28b9ea.  return @kind void;
  catch `java.lang.Throwable` @[L28b972..L28b97c] goto L28b9b0;
}
