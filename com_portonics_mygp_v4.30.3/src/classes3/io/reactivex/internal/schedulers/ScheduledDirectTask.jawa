record `io.reactivex.internal.schedulers.ScheduledDirectTask` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.schedulers.AbstractDirectTask` @kind class, `java.util.concurrent.Callable` @kind interface {
}
global `long` `@@io.reactivex.internal.schedulers.ScheduledDirectTask.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ScheduledDirectTask` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L28c684.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L28c68a.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.schedulers.ScheduledDirectTask` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L28c5f4.  call temp:= `call`(v1) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.call:()Ljava/lang/Void;` @kind virtual;
  #L28c5fa.  v0:= temp @kind object;
  #L28c5fc.  return v0 @kind object;
}
procedure `java.lang.Void` `call`(`io.reactivex.internal.schedulers.ScheduledDirectTask` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.call:()Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28c62c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L28c632.  v0:= temp @kind object;
  #L28c634.  v3.`io.reactivex.internal.schedulers.AbstractDirectTask.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L28c638.  v0:= 0I;
  #L28c63a.  v1:= v3.`io.reactivex.internal.schedulers.AbstractDirectTask.runnable` @type ^`java.lang.Runnable` @kind object;
  #L28c63e.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L28c644.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L28c648.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28c64e.  v3.`io.reactivex.internal.schedulers.AbstractDirectTask.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L28c652.  return v0 @kind object;
  #L28c654.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28c656.  v2:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L28c65a.  call `lazySet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28c660.  v3.`io.reactivex.internal.schedulers.AbstractDirectTask.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L28c664.  throw v1;
  catch `java.lang.Throwable` @[L28c63a..L28c644] goto L28c654;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.internal.schedulers.ScheduledDirectTask` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L28c610.  call temp:= `getWrappedRunnable`(v1) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.getWrappedRunnable:()Ljava/lang/Runnable;` @kind super;
  #L28c616.  v0:= temp @kind object;
  #L28c618.  return v0 @kind object;
}
