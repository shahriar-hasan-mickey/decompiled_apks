record `io.reactivex.internal.schedulers.v` @kind class @AccessFlag FINAL extends `io.reactivex.x$a` @kind class, `io.reactivex.disposables.b` @kind interface {
  `java.util.concurrent.PriorityBlockingQueue` `io.reactivex.internal.schedulers.v.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.schedulers.v.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.schedulers.v.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.schedulers.v.e` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.v` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/v;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L28d424.  call `<init>`(v1) @signature `Lio/reactivex/x$a;.<init>:()V` @kind direct;
  #L28d42a.  v0:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L28d42e.  call `<init>`(v0) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:()V` @kind direct;
  #L28d434.  v1.`io.reactivex.internal.schedulers.v.b` @type ^`java.util.concurrent.PriorityBlockingQueue` := v0 @kind object;
  #L28d438.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L28d43c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L28d442.  v1.`io.reactivex.internal.schedulers.v.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L28d446.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L28d44a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L28d450.  v1.`io.reactivex.internal.schedulers.v.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L28d454.  return @kind void;
}
procedure `io.reactivex.disposables.b` `b`(`io.reactivex.internal.schedulers.v` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/v;.b:(Ljava/lang/Runnable;)Lio/reactivex/disposables/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28d3c0.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L28d3c4.  call temp:= `a`(v2, v0) @signature `Lio/reactivex/x$a;.a:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L28d3ca.  v0:= temp @kind wide;
  #L28d3cc.  call temp:= `e`(v2, v3, v0) @signature `Lio/reactivex/internal/schedulers/v;.e:(Ljava/lang/Runnable;J)Lio/reactivex/disposables/b;` @kind virtual;
  #L28d3d2.  v3:= temp @kind object;
  #L28d3d4.  return v3 @kind object;
}
procedure `io.reactivex.disposables.b` `c`(`io.reactivex.internal.schedulers.v` v2 @kind this, `java.lang.Runnable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lio/reactivex/internal/schedulers/v;.c:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28d3e8.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L28d3ec.  call temp:= `a`(v2, v0) @signature `Lio/reactivex/x$a;.a:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L28d3f2.  v0:= temp @kind wide;
  #L28d3f4.  call temp:= `toMillis`(v6, v4) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L28d3fa.  v4:= temp @kind wide;
  #L28d3fc.  v0:= v0 + v4 @kind long;
  #L28d3fe.  v4:= new `io.reactivex.internal.schedulers.s`;
  #L28d402.  call `<init>`(v4, v3, v2, v0) @signature `Lio/reactivex/internal/schedulers/s;.<init>:(Ljava/lang/Runnable;Lio/reactivex/internal/schedulers/v;J)V` @kind direct;
  #L28d408.  call temp:= `e`(v2, v4, v0) @signature `Lio/reactivex/internal/schedulers/v;.e:(Ljava/lang/Runnable;J)Lio/reactivex/disposables/b;` @kind virtual;
  #L28d40e.  v3:= temp @kind object;
  #L28d410.  return v3 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.v` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/v;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28d468.  v0:= 1I;
  #L28d46a.  v1.`io.reactivex.internal.schedulers.v.e` @type ^`boolean` := v0 @kind boolean;
  #L28d46e.  return @kind void;
}
procedure `io.reactivex.disposables.b` `e`(`io.reactivex.internal.schedulers.v` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 ) @signature `Lio/reactivex/internal/schedulers/v;.e:(Ljava/lang/Runnable;J)Lio/reactivex/disposables/b;` @AccessFlag  {
    temp;
    v0;

  #L28d2fc.  v0:= v1.`io.reactivex.internal.schedulers.v.e` @type ^`boolean` @kind boolean;
  #L28d300.  if v0 == 0 then goto L28d30a;
  #L28d304.  v2:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L28d308.  return v2 @kind object;
  #L28d30a.  v0:= new `io.reactivex.internal.schedulers.t`;
  #L28d30e.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L28d314.  v3:= temp @kind object;
  #L28d316.  v4:= v1.`io.reactivex.internal.schedulers.v.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L28d31a.  call temp:= `incrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L28d320.  v4:= temp;
  #L28d322.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/schedulers/t;.<init>:(Ljava/lang/Runnable;Ljava/lang/Long;I)V` @kind direct;
  #L28d328.  v2:= v1.`io.reactivex.internal.schedulers.v.b` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L28d32c.  call temp:= `add`(v2, v0) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L28d332.  v2:= v1.`io.reactivex.internal.schedulers.v.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L28d336.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L28d33c.  v2:= temp;
  #L28d33e.  if v2 != 0 then goto L28d39c;
  #L28d342.  v2:= 1I;
  #L28d344.  v3:= v1.`io.reactivex.internal.schedulers.v.e` @type ^`boolean` @kind boolean;
  #L28d348.  if v3 == 0 then goto L28d35c;
  #L28d34c.  v2:= v1.`io.reactivex.internal.schedulers.v.b` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L28d350.  call `clear`(v2) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.clear:()V` @kind virtual;
  #L28d356.  v2:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L28d35a.  return v2 @kind object;
  #L28d35c.  v3:= v1.`io.reactivex.internal.schedulers.v.b` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L28d360.  call temp:= `poll`(v3) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L28d366.  v3:= temp @kind object;
  #L28d368.  v3:= (`io.reactivex.internal.schedulers.t`) v3 @kind object;
  #L28d36c.  if v3 != 0 then goto L28d388;
  #L28d370.  v3:= v1.`io.reactivex.internal.schedulers.v.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L28d374.  v2:= -v2 @kind int;
  #L28d376.  call temp:= `addAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L28d37c.  v2:= temp;
  #L28d37e.  if v2 != 0 then goto L28d344;
  #L28d382.  v2:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L28d386.  return v2 @kind object;
  #L28d388.  v4:= v3.`io.reactivex.internal.schedulers.t.e` @type ^`boolean` @kind boolean;
  #L28d38c.  if v4 != 0 then goto L28d344;
  #L28d390.  v3:= v3.`io.reactivex.internal.schedulers.t.b` @type ^`java.lang.Runnable` @kind object;
  #L28d394.  call `run`(v3) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L28d39a.  goto L28d344;
  #L28d39c.  v2:= new `io.reactivex.internal.schedulers.u`;
  #L28d3a0.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/internal/schedulers/u;.<init>:(Lio/reactivex/internal/schedulers/v;Lio/reactivex/internal/schedulers/t;)V` @kind direct;
  #L28d3a6.  call temp:= `c`(v2) @signature `Lio/reactivex/disposables/c;.c:(Ljava/lang/Runnable;)Lio/reactivex/disposables/b;` @kind static;
  #L28d3ac.  v2:= temp @kind object;
  #L28d3ae.  return v2 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.v` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/v;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28d2e4.  v0:= v1.`io.reactivex.internal.schedulers.v.e` @type ^`boolean` @kind boolean;
  #L28d2e8.  return v0;
}
