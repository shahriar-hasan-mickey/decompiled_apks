record `io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable.direct` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable.timed` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$DelayedRunnable;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L28b6ec.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L28b6f2.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L28b6f6.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L28b6fc.  v0.`io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable.timed` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L28b700.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L28b704.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L28b70a.  v0.`io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable.direct` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L28b70e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$DelayedRunnable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28b720.  v0:= 0I;
  #L28b722.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L28b728.  v0:= temp @kind object;
  #L28b72a.  if v0 == 0 then goto L28b742;
  #L28b72e.  v0:= v1.`io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable.timed` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L28b732.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L28b738.  v0:= v1.`io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable.direct` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L28b73c.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L28b742.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$DelayedRunnable;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28b6c4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28b6ca.  v0:= temp @kind object;
  #L28b6cc.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L28b6d0.  if v0 == 0 then goto L28b6d6;
  #L28b6d4.  goto L28b6da;
  #L28b6d6.  v0:= `@@io.reactivex.internal.functions.Functions.b` @type ^`java.lang.Runnable` @kind object;
  #L28b6da.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$DelayedRunnable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28b6a0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28b6a6.  v0:= temp @kind object;
  #L28b6a8.  if v0 != 0 then goto L28b6b0;
  #L28b6ac.  v0:= 1I;
  #L28b6ae.  goto L28b6b2;
  #L28b6b0.  v0:= 0I;
  #L28b6b2.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$DelayedRunnable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28b754.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28b75a.  v0:= temp @kind object;
  #L28b75c.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L28b760.  if v0 == 0 then goto L28b7b2;
  #L28b764.  v1:= 0I;
  #L28b766.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L28b76c.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28b772.  v0:= v3.`io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable.timed` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L28b776.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L28b77a.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28b780.  v0:= v3.`io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable.direct` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L28b784.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28b78a.  goto L28b7b2;
  #L28b78c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28b78e.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28b794.  v1:= v3.`io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable.timed` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L28b798.  v2:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L28b79c.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28b7a2.  v1:= v3.`io.reactivex.internal.schedulers.ExecutorScheduler$DelayedRunnable.direct` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L28b7a6.  v2:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L28b7aa.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28b7b0.  throw v0;
  #L28b7b2.  return @kind void;
  catch `java.lang.Throwable` @[L28b766..L28b76c] goto L28b78c;
}
