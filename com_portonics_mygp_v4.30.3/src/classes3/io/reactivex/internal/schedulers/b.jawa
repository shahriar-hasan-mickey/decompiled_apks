record `io.reactivex.internal.schedulers.b` @kind class @AccessFlag FINAL {
  `int` `io.reactivex.internal.schedulers.b.a` @AccessFlag FINAL;
  `io.reactivex.internal.schedulers.c`[] `io.reactivex.internal.schedulers.b.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.schedulers.b.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.b` v3 @kind this, `int` v4 , `java.util.concurrent.ThreadFactory` v5 @kind object) @signature `Lio/reactivex/internal/schedulers/b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L28b408.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28b40e.  v3.`io.reactivex.internal.schedulers.b.a` @type ^`int` := v4;
  #L28b412.  v0:= new `io.reactivex.internal.schedulers.c`[v4];
  #L28b416.  v3.`io.reactivex.internal.schedulers.b.b` @type ^`io.reactivex.internal.schedulers.c`[] := v0 @kind object;
  #L28b41a.  v0:= 0I;
  #L28b41c.  if v0 >= v4 then goto L28b438;
  #L28b420.  v1:= v3.`io.reactivex.internal.schedulers.b.b` @type ^`io.reactivex.internal.schedulers.c`[] @kind object;
  #L28b424.  v2:= new `io.reactivex.internal.schedulers.c`;
  #L28b428.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/schedulers/c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L28b42e.  v1[v0]:= v2 @kind object;
  #L28b432.  v0:= v0 + 1;
  #L28b436.  goto L28b41c;
  #L28b438.  return @kind void;
}
procedure `io.reactivex.internal.schedulers.c` `a`(`io.reactivex.internal.schedulers.b` v6 @kind this) @signature `Lio/reactivex/internal/schedulers/b;.a:()Lio/reactivex/internal/schedulers/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L28b3cc.  v0:= v6.`io.reactivex.internal.schedulers.b.a` @type ^`int`;
  #L28b3d0.  if v0 != 0 then goto L28b3da;
  #L28b3d4.  v0:= `@@io.reactivex.internal.schedulers.d.f` @type ^`io.reactivex.internal.schedulers.c` @kind object;
  #L28b3d8.  return v0 @kind object;
  #L28b3da.  v1:= v6.`io.reactivex.internal.schedulers.b.b` @type ^`io.reactivex.internal.schedulers.c`[] @kind object;
  #L28b3de.  v2:= v6.`io.reactivex.internal.schedulers.b.c` @type ^`long` @kind wide;
  #L28b3e2.  v4:= 1L;
  #L28b3e6.  v4:= v4 + v2 @kind long;
  #L28b3e8.  v6.`io.reactivex.internal.schedulers.b.c` @type ^`long` := v4 @kind wide;
  #L28b3ec.  v4:= (`long`) v0 @kind i2l;
  #L28b3ee.  v2:= v2 %% v4 @kind long;
  #L28b3f0.  v0:= (`int`) v2 @kind l2i;
  #L28b3f2.  v0:= v1[v0] @kind object;
  #L28b3f6.  return v0 @kind object;
}
procedure `void` `b`(`io.reactivex.internal.schedulers.b` v4 @kind this) @signature `Lio/reactivex/internal/schedulers/b;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L28b44c.  v0:= v4.`io.reactivex.internal.schedulers.b.b` @type ^`io.reactivex.internal.schedulers.c`[] @kind object;
  #L28b450.  v1:= length @variable v0;
  #L28b452.  v2:= 0I;
  #L28b454.  if v2 >= v1 then goto L28b468;
  #L28b458.  v3:= v0[v2] @kind object;
  #L28b45c.  call `dispose`(v3) @signature `Lio/reactivex/internal/schedulers/k;.dispose:()V` @kind virtual;
  #L28b462.  v2:= v2 + 1;
  #L28b466.  goto L28b454;
  #L28b468.  return @kind void;
}
