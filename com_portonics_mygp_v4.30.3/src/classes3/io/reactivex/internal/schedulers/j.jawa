record `io.reactivex.internal.schedulers.j` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.x` @kind class {
  `java.util.concurrent.ThreadFactory` `io.reactivex.internal.schedulers.j.d` @AccessFlag FINAL;
}
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.j.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L28c120.  v0:= "rx2.newthread-priority" @kind object;
  #L28c124.  v1:= 5I;
  #L28c126.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L28c12c.  v0:= temp @kind object;
  #L28c12e.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L28c134.  v0:= temp;
  #L28c136.  v1:= 10I;
  #L28c13a.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L28c140.  v0:= temp;
  #L28c142.  v1:= 1I;
  #L28c144.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L28c14a.  v0:= temp;
  #L28c14c.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L28c150.  v2:= "RxNewThreadScheduler" @kind object;
  #L28c154.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L28c15a.  `@@io.reactivex.internal.schedulers.j.c` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v1 @kind object;
  #L28c15e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.j` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/j;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28c170.  v0:= `@@io.reactivex.internal.schedulers.j.c` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L28c174.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/schedulers/j;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L28c17a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.j` v0 @kind this, `java.util.concurrent.ThreadFactory` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/j;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L28c18c.  call `<init>`(v0) @signature `Lio/reactivex/x;.<init>:()V` @kind direct;
  #L28c192.  v0.`io.reactivex.internal.schedulers.j.d` @type ^`java.util.concurrent.ThreadFactory` := v1 @kind object;
  #L28c196.  return @kind void;
}
procedure `io.reactivex.x$a` `a`(`io.reactivex.internal.schedulers.j` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/j;.a:()Lio/reactivex/x$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28c100.  v0:= new `io.reactivex.internal.schedulers.k`;
  #L28c104.  v1:= v2.`io.reactivex.internal.schedulers.j.d` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L28c108.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/k;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L28c10e.  return v0 @kind object;
}
