record `io.reactivex.internal.schedulers.u` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `io.reactivex.internal.schedulers.t` `io.reactivex.internal.schedulers.u.b` @AccessFlag FINAL;
  `io.reactivex.internal.schedulers.v` `io.reactivex.internal.schedulers.u.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.u` v0 @kind this, `io.reactivex.internal.schedulers.v` v1 @kind object, `io.reactivex.internal.schedulers.t` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/u;.<init>:(Lio/reactivex/internal/schedulers/v;Lio/reactivex/internal/schedulers/t;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L28d294.  v0.`io.reactivex.internal.schedulers.u.c` @type ^`io.reactivex.internal.schedulers.v` := v1 @kind object;
  #L28d298.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28d29e.  v0.`io.reactivex.internal.schedulers.u.b` @type ^`io.reactivex.internal.schedulers.t` := v2 @kind object;
  #L28d2a2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.u` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/u;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28d2b4.  v0:= v2.`io.reactivex.internal.schedulers.u.b` @type ^`io.reactivex.internal.schedulers.t` @kind object;
  #L28d2b8.  v1:= 1I;
  #L28d2ba.  v0.`io.reactivex.internal.schedulers.t.e` @type ^`boolean` := v1 @kind boolean;
  #L28d2be.  v0:= v2.`io.reactivex.internal.schedulers.u.c` @type ^`io.reactivex.internal.schedulers.v` @kind object;
  #L28d2c2.  v0:= v0.`io.reactivex.internal.schedulers.v.b` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L28d2c6.  v1:= v2.`io.reactivex.internal.schedulers.u.b` @type ^`io.reactivex.internal.schedulers.t` @kind object;
  #L28d2ca.  call temp:= `remove`(v0, v1) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L28d2d0.  return @kind void;
}
