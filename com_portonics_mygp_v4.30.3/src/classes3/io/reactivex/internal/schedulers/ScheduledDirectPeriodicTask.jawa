record `io.reactivex.internal.schedulers.ScheduledDirectPeriodicTask` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.schedulers.AbstractDirectTask` @kind class, `java.lang.Runnable` @kind interface {
}
global `long` `@@io.reactivex.internal.schedulers.ScheduledDirectPeriodicTask.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ScheduledDirectPeriodicTask` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectPeriodicTask;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L28c588.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L28c58e.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.internal.schedulers.ScheduledDirectPeriodicTask` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectPeriodicTask;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L28c56c.  call temp:= `getWrappedRunnable`(v1) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.getWrappedRunnable:()Ljava/lang/Runnable;` @kind super;
  #L28c572.  v0:= temp @kind object;
  #L28c574.  return v0 @kind object;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.ScheduledDirectPeriodicTask` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectPeriodicTask;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28c5a0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L28c5a6.  v0:= temp @kind object;
  #L28c5a8.  v2.`io.reactivex.internal.schedulers.AbstractDirectTask.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L28c5ac.  v0:= 0I;
  #L28c5ae.  v1:= v2.`io.reactivex.internal.schedulers.AbstractDirectTask.runnable` @type ^`java.lang.Runnable` @kind object;
  #L28c5b2.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L28c5b8.  v2.`io.reactivex.internal.schedulers.AbstractDirectTask.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L28c5bc.  goto L28c5d4;
  #L28c5be.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28c5c0.  v2.`io.reactivex.internal.schedulers.AbstractDirectTask.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L28c5c4.  v0:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L28c5c8.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28c5ce.  call `t`(v1) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28c5d4.  return @kind void;
  catch `java.lang.Throwable` @[L28c5ae..L28c5bc] goto L28c5be;
}
