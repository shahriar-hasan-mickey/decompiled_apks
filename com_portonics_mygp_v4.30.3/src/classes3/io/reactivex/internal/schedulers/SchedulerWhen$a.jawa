record `io.reactivex.internal.schedulers.SchedulerWhen$a` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `io.reactivex.b` `io.reactivex.internal.schedulers.SchedulerWhen$a.b` @AccessFlag FINAL;
  `java.lang.Runnable` `io.reactivex.internal.schedulers.SchedulerWhen$a.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SchedulerWhen$a` v0 @kind this, `java.lang.Runnable` v1 @kind object, `io.reactivex.b` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$a;.<init>:(Ljava/lang/Runnable;Lio/reactivex/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L28cc70.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28cc76.  v0.`io.reactivex.internal.schedulers.SchedulerWhen$a.c` @type ^`java.lang.Runnable` := v1 @kind object;
  #L28cc7a.  v0.`io.reactivex.internal.schedulers.SchedulerWhen$a.b` @type ^`io.reactivex.b` := v2 @kind object;
  #L28cc7e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.SchedulerWhen$a` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28cc90.  v0:= v2.`io.reactivex.internal.schedulers.SchedulerWhen$a.c` @type ^`java.lang.Runnable` @kind object;
  #L28cc94.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L28cc9a.  v0:= v2.`io.reactivex.internal.schedulers.SchedulerWhen$a.b` @type ^`io.reactivex.b` @kind object;
  #L28cc9e.  call `onComplete`(v0) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L28cca4.  return @kind void;
  #L28cca6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28cca8.  v1:= v2.`io.reactivex.internal.schedulers.SchedulerWhen$a.b` @type ^`io.reactivex.b` @kind object;
  #L28ccac.  call `onComplete`(v1) @signature `Lio/reactivex/b;.onComplete:()V` @kind interface;
  #L28ccb2.  throw v0;
  catch `java.lang.Throwable` @[L28cc90..L28cc9a] goto L28cca6;
}
