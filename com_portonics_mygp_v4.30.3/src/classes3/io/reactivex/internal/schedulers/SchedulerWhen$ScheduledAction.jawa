record `io.reactivex.internal.schedulers.SchedulerWhen$ScheduledAction` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.b` @kind interface {
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SchedulerWhen$ScheduledAction` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L28ccf8.  v0:= `@@io.reactivex.internal.schedulers.SchedulerWhen.c` @type ^`io.reactivex.disposables.b` @kind object;
  #L28ccfc.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L28cd02.  return @kind void;
}
procedure `void` `call`(`io.reactivex.internal.schedulers.SchedulerWhen$ScheduledAction` v2 @kind this, `io.reactivex.x$a` v3 @kind object, `io.reactivex.b` v4 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.call:(Lio/reactivex/x$a;Lio/reactivex/b;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L28cd14.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28cd1a.  v0:= temp @kind object;
  #L28cd1c.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L28cd20.  v1:= `@@io.reactivex.internal.schedulers.SchedulerWhen.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L28cd24.  if v0 != v1 then goto L28cd2a;
  #L28cd28.  return @kind void;
  #L28cd2a.  v1:= `@@io.reactivex.internal.schedulers.SchedulerWhen.c` @type ^`io.reactivex.disposables.b` @kind object;
  #L28cd2e.  if v0 == v1 then goto L28cd34;
  #L28cd32.  return @kind void;
  #L28cd34.  call temp:= `callActual`(v2, v3, v4) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.callActual:(Lio/reactivex/x$a;Lio/reactivex/b;)Lio/reactivex/disposables/b;` @kind virtual;
  #L28cd3a.  v3:= temp @kind object;
  #L28cd3c.  call temp:= `compareAndSet`(v2, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28cd42.  v4:= temp;
  #L28cd44.  if v4 != 0 then goto L28cd4e;
  #L28cd48.  call `dispose`(v3) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L28cd4e.  return @kind void;
}
procedure `io.reactivex.disposables.b` `callActual`(`io.reactivex.x$a` v0 @kind object, `io.reactivex.b` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.callActual:(Lio/reactivex/x$a;Lio/reactivex/b;)Lio/reactivex/disposables/b;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.SchedulerWhen$ScheduledAction` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28cd60.  v0:= `@@io.reactivex.internal.schedulers.SchedulerWhen.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L28cd64.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28cd6a.  v1:= temp @kind object;
  #L28cd6c.  v1:= (`io.reactivex.disposables.b`) v1 @kind object;
  #L28cd70.  v2:= `@@io.reactivex.internal.schedulers.SchedulerWhen.d` @type ^`io.reactivex.disposables.b` @kind object;
  #L28cd74.  if v1 != v2 then goto L28cd7a;
  #L28cd78.  return @kind void;
  #L28cd7a.  call temp:= `compareAndSet`(v3, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28cd80.  v2:= temp;
  #L28cd82.  if v2 == 0 then goto L28cd64;
  #L28cd86.  v0:= `@@io.reactivex.internal.schedulers.SchedulerWhen.c` @type ^`io.reactivex.disposables.b` @kind object;
  #L28cd8a.  if v1 == v0 then goto L28cd94;
  #L28cd8e.  call `dispose`(v1) @signature `Lio/reactivex/disposables/b;.dispose:()V` @kind interface;
  #L28cd94.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.SchedulerWhen$ScheduledAction` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$ScheduledAction;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28ccd0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28ccd6.  v0:= temp @kind object;
  #L28ccd8.  v0:= (`io.reactivex.disposables.b`) v0 @kind object;
  #L28ccdc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @kind interface;
  #L28cce2.  v0:= temp;
  #L28cce4.  return v0;
}
