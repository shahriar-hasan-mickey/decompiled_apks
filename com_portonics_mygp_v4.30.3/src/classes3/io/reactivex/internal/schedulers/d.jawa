record `io.reactivex.internal.schedulers.d` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.x` @kind class {
  `java.util.concurrent.ThreadFactory` `io.reactivex.internal.schedulers.d.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.d.h` @AccessFlag FINAL;
}
global `io.reactivex.internal.schedulers.b` `@@io.reactivex.internal.schedulers.d.c` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.d.d` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.schedulers.d.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.schedulers.c` `@@io.reactivex.internal.schedulers.d.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28b558.  call temp:= `getRuntime`() @signature `Ljava/lang/Runtime;.getRuntime:()Ljava/lang/Runtime;` @kind static;
  #L28b55e.  v0:= temp @kind object;
  #L28b560.  call temp:= `availableProcessors`(v0) @signature `Ljava/lang/Runtime;.availableProcessors:()I` @kind virtual;
  #L28b566.  v0:= temp;
  #L28b568.  v1:= "rx2.computation-threads" @kind object;
  #L28b56c.  v2:= 0I;
  #L28b56e.  call temp:= `getInteger`(v1, v2) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L28b574.  v1:= temp @kind object;
  #L28b576.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L28b57c.  v1:= temp;
  #L28b57e.  call temp:= `f`(v0, v1) @signature `Lio/reactivex/internal/schedulers/d;.f:(II)I` @kind static;
  #L28b584.  v0:= temp;
  #L28b586.  `@@io.reactivex.internal.schedulers.d.e` @type ^`int` := v0;
  #L28b58a.  v0:= new `io.reactivex.internal.schedulers.c`;
  #L28b58e.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L28b592.  v3:= "RxComputationShutdown" @kind object;
  #L28b596.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28b59c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L28b5a2.  `@@io.reactivex.internal.schedulers.d.f` @type ^`io.reactivex.internal.schedulers.c` := v0 @kind object;
  #L28b5a6.  call `dispose`(v0) @signature `Lio/reactivex/internal/schedulers/k;.dispose:()V` @kind virtual;
  #L28b5ac.  v0:= "rx2.computation-priority" @kind object;
  #L28b5b0.  v1:= 5I;
  #L28b5b2.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L28b5b8.  v0:= temp @kind object;
  #L28b5ba.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L28b5c0.  v0:= temp;
  #L28b5c2.  v1:= 10I;
  #L28b5c6.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L28b5cc.  v0:= temp;
  #L28b5ce.  v1:= 1I;
  #L28b5d0.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L28b5d6.  v0:= temp;
  #L28b5d8.  v3:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L28b5dc.  v4:= "RxComputationThreadPool" @kind object;
  #L28b5e0.  call `<init>`(v3, v4, v0, v1) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L28b5e6.  `@@io.reactivex.internal.schedulers.d.d` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v3 @kind object;
  #L28b5ea.  v0:= new `io.reactivex.internal.schedulers.b`;
  #L28b5ee.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/schedulers/b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L28b5f4.  `@@io.reactivex.internal.schedulers.d.c` @type ^`io.reactivex.internal.schedulers.b` := v0 @kind object;
  #L28b5f8.  call `b`(v0) @signature `Lio/reactivex/internal/schedulers/b;.b:()V` @kind virtual;
  #L28b5fe.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.d` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28b610.  v0:= `@@io.reactivex.internal.schedulers.d.d` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L28b614.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/schedulers/d;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L28b61a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.d` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/d;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28b62c.  call `<init>`(v1) @signature `Lio/reactivex/x;.<init>:()V` @kind direct;
  #L28b632.  v1.`io.reactivex.internal.schedulers.d.g` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L28b636.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L28b63a.  v0:= `@@io.reactivex.internal.schedulers.d.c` @type ^`io.reactivex.internal.schedulers.b` @kind object;
  #L28b63e.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L28b644.  v1.`io.reactivex.internal.schedulers.d.h` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L28b648.  call `g`(v1) @signature `Lio/reactivex/internal/schedulers/d;.g:()V` @kind virtual;
  #L28b64e.  return @kind void;
}
procedure `int` `f`(`int` v0 , `int` v1 ) @signature `Lio/reactivex/internal/schedulers/d;.f:(II)I` @AccessFlag STATIC {
    temp;

  #L28b494.  if v1 <= 0 then goto L28b4a0;
  #L28b498.  if v1 <= v0 then goto L28b49e;
  #L28b49c.  goto L28b4a0;
  #L28b49e.  v0:= v1;
  #L28b4a0.  return v0;
}
procedure `io.reactivex.x$a` `a`(`io.reactivex.internal.schedulers.d` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/d;.a:()Lio/reactivex/x$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28b4b4.  v0:= new `io.reactivex.internal.schedulers.a`;
  #L28b4b8.  v1:= v2.`io.reactivex.internal.schedulers.d.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28b4bc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28b4c2.  v1:= temp @kind object;
  #L28b4c4.  v1:= (`io.reactivex.internal.schedulers.b`) v1 @kind object;
  #L28b4c8.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/schedulers/b;.a:()Lio/reactivex/internal/schedulers/c;` @kind virtual;
  #L28b4ce.  v1:= temp @kind object;
  #L28b4d0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/a;.<init>:(Lio/reactivex/internal/schedulers/c;)V` @kind direct;
  #L28b4d6.  return v0 @kind object;
}
procedure `io.reactivex.disposables.b` `d`(`io.reactivex.internal.schedulers.d` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/internal/schedulers/d;.d:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28b4e8.  v0:= v1.`io.reactivex.internal.schedulers.d.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28b4ec.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28b4f2.  v0:= temp @kind object;
  #L28b4f4.  v0:= (`io.reactivex.internal.schedulers.b`) v0 @kind object;
  #L28b4f8.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/schedulers/b;.a:()Lio/reactivex/internal/schedulers/c;` @kind virtual;
  #L28b4fe.  v0:= temp @kind object;
  #L28b500.  call temp:= `f`(v0, v2, v3, v5) @signature `Lio/reactivex/internal/schedulers/k;.f:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/b;` @kind virtual;
  #L28b506.  v2:= temp @kind object;
  #L28b508.  return v2 @kind object;
}
procedure `io.reactivex.disposables.b` `e`(`io.reactivex.internal.schedulers.d` v8 @kind this, `java.lang.Runnable` v9 @kind object, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object) @signature `Lio/reactivex/internal/schedulers/d;.e:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L28b51c.  v0:= v8.`io.reactivex.internal.schedulers.d.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28b520.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28b526.  v0:= temp @kind object;
  #L28b528.  v0:= (`io.reactivex.internal.schedulers.b`) v0 @kind object;
  #L28b52c.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/schedulers/b;.a:()Lio/reactivex/internal/schedulers/c;` @kind virtual;
  #L28b532.  v1:= temp @kind object;
  #L28b534.  v2:= v9 @kind object;
  #L28b536.  v3:= v10 @kind wide;
  #L28b538.  v5:= v12 @kind wide;
  #L28b53a.  v7:= v14 @kind object;
  #L28b53c.  call temp:= `g`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/internal/schedulers/k;.g:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/b;` @kind virtual;
  #L28b542.  v9:= temp @kind object;
  #L28b544.  return v9 @kind object;
}
procedure `void` `g`(`io.reactivex.internal.schedulers.d` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/d;.g:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28b660.  v0:= new `io.reactivex.internal.schedulers.b`;
  #L28b664.  v1:= `@@io.reactivex.internal.schedulers.d.e` @type ^`int`;
  #L28b668.  v2:= v3.`io.reactivex.internal.schedulers.d.g` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L28b66c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/schedulers/b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L28b672.  v1:= v3.`io.reactivex.internal.schedulers.d.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28b676.  v2:= `@@io.reactivex.internal.schedulers.d.c` @type ^`io.reactivex.internal.schedulers.b` @kind object;
  #L28b67a.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28b680.  v1:= temp;
  #L28b682.  if v1 != 0 then goto L28b68c;
  #L28b686.  call `b`(v0) @signature `Lio/reactivex/internal/schedulers/b;.b:()V` @kind virtual;
  #L28b68c.  return @kind void;
}
