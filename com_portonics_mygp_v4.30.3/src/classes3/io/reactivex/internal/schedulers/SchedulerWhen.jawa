record `io.reactivex.internal.schedulers.SchedulerWhen` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.x` @kind class, `io.reactivex.disposables.b` @kind interface {
}
global `io.reactivex.disposables.b` `@@io.reactivex.internal.schedulers.SchedulerWhen.c` @AccessFlag STATIC_FINAL;
global `io.reactivex.disposables.b` `@@io.reactivex.internal.schedulers.SchedulerWhen.d` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/SchedulerWhen;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L28cde8.  v0:= new `io.reactivex.internal.schedulers.p`;
  #L28cdec.  call `<init>`(v0) @signature `Lio/reactivex/internal/schedulers/p;.<init>:()V` @kind direct;
  #L28cdf2.  `@@io.reactivex.internal.schedulers.SchedulerWhen.c` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L28cdf6.  call temp:= `a`() @signature `Lio/reactivex/disposables/c;.a:()Lio/reactivex/disposables/b;` @kind static;
  #L28cdfc.  v0:= temp @kind object;
  #L28cdfe.  `@@io.reactivex.internal.schedulers.SchedulerWhen.d` @type ^`io.reactivex.disposables.b` := v0 @kind object;
  #L28ce02.  return @kind void;
}
