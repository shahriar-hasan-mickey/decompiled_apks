record `io.reactivex.internal.schedulers.ScheduledRunnable` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `java.lang.Runnable` @kind interface, `java.util.concurrent.Callable` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.ScheduledRunnable.actual` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.schedulers.ScheduledRunnable.ASYNC_DISPOSED` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.schedulers.ScheduledRunnable.DONE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.schedulers.ScheduledRunnable.FUTURE_INDEX` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.schedulers.ScheduledRunnable.PARENT_DISPOSED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.schedulers.ScheduledRunnable.PARENT_INDEX` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.schedulers.ScheduledRunnable.SYNC_DISPOSED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.schedulers.ScheduledRunnable.THREAD_INDEX` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.schedulers.ScheduledRunnable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L28c6e8.  v0:= new `java.lang.Object`;
  #L28c6ec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28c6f2.  `@@io.reactivex.internal.schedulers.ScheduledRunnable.PARENT_DISPOSED` @type ^`java.lang.Object` := v0 @kind object;
  #L28c6f6.  v0:= new `java.lang.Object`;
  #L28c6fa.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28c700.  `@@io.reactivex.internal.schedulers.ScheduledRunnable.SYNC_DISPOSED` @type ^`java.lang.Object` := v0 @kind object;
  #L28c704.  v0:= new `java.lang.Object`;
  #L28c708.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28c70e.  `@@io.reactivex.internal.schedulers.ScheduledRunnable.ASYNC_DISPOSED` @type ^`java.lang.Object` := v0 @kind object;
  #L28c712.  v0:= new `java.lang.Object`;
  #L28c716.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28c71c.  `@@io.reactivex.internal.schedulers.ScheduledRunnable.DONE` @type ^`java.lang.Object` := v0 @kind object;
  #L28c720.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ScheduledRunnable` v1 @kind this, `java.lang.Runnable` v2 @kind object, `io.reactivex.internal.disposables.a` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.<init>:(Ljava/lang/Runnable;Lio/reactivex/internal/disposables/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28c734.  v0:= 3I;
  #L28c736.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L28c73c.  v1.`io.reactivex.internal.schedulers.ScheduledRunnable.actual` @type ^`java.lang.Runnable` := v2 @kind object;
  #L28c740.  v2:= 0I;
  #L28c742.  call `lazySet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L28c748.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.schedulers.ScheduledRunnable` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28c6cc.  call `run`(v1) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.run:()V` @kind virtual;
  #L28c6d2.  v0:= 0I;
  #L28c6d4.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.ScheduledRunnable` v7 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L28c75c.  v0:= 1I;
  #L28c75e.  call temp:= `get`(v7, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L28c764.  v1:= temp @kind object;
  #L28c766.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.DONE` @type ^`java.lang.Object` @kind object;
  #L28c76a.  v3:= 0I;
  #L28c76c.  if v1 == v2 then goto L28c7be;
  #L28c770.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.SYNC_DISPOSED` @type ^`java.lang.Object` @kind object;
  #L28c774.  if v1 == v2 then goto L28c7be;
  #L28c778.  v4:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.ASYNC_DISPOSED` @type ^`java.lang.Object` @kind object;
  #L28c77c.  if v1 != v4 then goto L28c782;
  #L28c780.  goto L28c7be;
  #L28c782.  v5:= 2I;
  #L28c784.  call temp:= `get`(v7, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L28c78a.  v5:= temp @kind object;
  #L28c78c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L28c792.  v6:= temp @kind object;
  #L28c794.  if v5 == v6 then goto L28c79c;
  #L28c798.  v5:= 1I;
  #L28c79a.  goto L28c79e;
  #L28c79c.  v5:= 0I;
  #L28c79e.  if v5 == 0 then goto L28c7a4;
  #L28c7a2.  v2:= v4 @kind object;
  #L28c7a4.  call temp:= `compareAndSet`(v7, v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28c7aa.  v0:= temp;
  #L28c7ac.  if v0 == 0 then goto L28c75c;
  #L28c7b0.  if v1 == 0 then goto L28c7be;
  #L28c7b4.  v1:= (`java.util.concurrent.Future`) v1 @kind object;
  #L28c7b8.  call temp:= `cancel`(v1, v5) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L28c7be.  call temp:= `get`(v7, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L28c7c4.  v0:= temp @kind object;
  #L28c7c6.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.DONE` @type ^`java.lang.Object` @kind object;
  #L28c7ca.  if v0 == v1 then goto L28c7f2;
  #L28c7ce.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.PARENT_DISPOSED` @type ^`java.lang.Object` @kind object;
  #L28c7d2.  if v0 == v1 then goto L28c7f2;
  #L28c7d6.  if v0 != 0 then goto L28c7dc;
  #L28c7da.  goto L28c7f2;
  #L28c7dc.  call temp:= `compareAndSet`(v7, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28c7e2.  v1:= temp;
  #L28c7e4.  if v1 == 0 then goto L28c7be;
  #L28c7e8.  v0:= (`io.reactivex.internal.disposables.a`) v0 @kind object;
  #L28c7ec.  call temp:= `c`(v0, v7) @signature `Lio/reactivex/internal/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind interface;
  #L28c7f2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.ScheduledRunnable` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28c69c.  v0:= 0I;
  #L28c69e.  call temp:= `get`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L28c6a4.  v1:= temp @kind object;
  #L28c6a6.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.PARENT_DISPOSED` @type ^`java.lang.Object` @kind object;
  #L28c6aa.  if v1 == v2 then goto L28c6b6;
  #L28c6ae.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.DONE` @type ^`java.lang.Object` @kind object;
  #L28c6b2.  if v1 != v2 then goto L28c6b8;
  #L28c6b6.  v0:= 1I;
  #L28c6b8.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.ScheduledRunnable` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28c804.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L28c80a.  v0:= temp @kind object;
  #L28c80c.  v1:= 2I;
  #L28c80e.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L28c814.  v0:= 0I;
  #L28c816.  v2:= 1I;
  #L28c818.  v3:= 0I;
  #L28c81a.  v4:= v5.`io.reactivex.internal.schedulers.ScheduledRunnable.actual` @type ^`java.lang.Runnable` @kind object;
  #L28c81e.  call `run`(v4) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L28c824.  goto L28c82e;
  #L28c826.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28c828.  call `t`(v4) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28c82e.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L28c834.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L28c83a.  v0:= temp @kind object;
  #L28c83c.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.PARENT_DISPOSED` @type ^`java.lang.Object` @kind object;
  #L28c840.  if v0 == v1 then goto L28c862;
  #L28c844.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.DONE` @type ^`java.lang.Object` @kind object;
  #L28c848.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28c84e.  v1:= temp;
  #L28c850.  if v1 == 0 then goto L28c862;
  #L28c854.  if v0 == 0 then goto L28c862;
  #L28c858.  v0:= (`io.reactivex.internal.disposables.a`) v0 @kind object;
  #L28c85c.  call temp:= `c`(v0, v5) @signature `Lio/reactivex/internal/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind interface;
  #L28c862.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L28c868.  v0:= temp @kind object;
  #L28c86a.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.SYNC_DISPOSED` @type ^`java.lang.Object` @kind object;
  #L28c86e.  if v0 == v1 then goto L28c88a;
  #L28c872.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.ASYNC_DISPOSED` @type ^`java.lang.Object` @kind object;
  #L28c876.  if v0 == v1 then goto L28c88a;
  #L28c87a.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.DONE` @type ^`java.lang.Object` @kind object;
  #L28c87e.  call temp:= `compareAndSet`(v5, v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28c884.  v0:= temp;
  #L28c886.  if v0 == 0 then goto L28c862;
  #L28c88a.  return @kind void;
  #L28c88c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28c88e.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L28c894.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L28c89a.  v0:= temp @kind object;
  #L28c89c.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.PARENT_DISPOSED` @type ^`java.lang.Object` @kind object;
  #L28c8a0.  if v0 == v1 then goto L28c8c2;
  #L28c8a4.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.DONE` @type ^`java.lang.Object` @kind object;
  #L28c8a8.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28c8ae.  v1:= temp;
  #L28c8b0.  if v1 == 0 then goto L28c8c2;
  #L28c8b4.  if v0 == 0 then goto L28c8c2;
  #L28c8b8.  v0:= (`io.reactivex.internal.disposables.a`) v0 @kind object;
  #L28c8bc.  call temp:= `c`(v0, v5) @signature `Lio/reactivex/internal/disposables/a;.c:(Lio/reactivex/disposables/b;)Z` @kind interface;
  #L28c8c2.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L28c8c8.  v0:= temp @kind object;
  #L28c8ca.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.SYNC_DISPOSED` @type ^`java.lang.Object` @kind object;
  #L28c8ce.  if v0 == v1 then goto L28c8ec;
  #L28c8d2.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.ASYNC_DISPOSED` @type ^`java.lang.Object` @kind object;
  #L28c8d6.  if v0 == v1 then goto L28c8ec;
  #L28c8da.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.DONE` @type ^`java.lang.Object` @kind object;
  #L28c8de.  call temp:= `compareAndSet`(v5, v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28c8e4.  v0:= temp;
  #L28c8e6.  if v0 != 0 then goto L28c8ec;
  #L28c8ea.  goto L28c8c2;
  #L28c8ec.  goto L28c8f0;
  #L28c8ee.  throw v4;
  #L28c8f0.  goto L28c8ee;
  catch `java.lang.Throwable` @[L28c81a..L28c824] goto L28c826;
  catch `java.lang.Throwable` @[L28c828..L28c82e] goto L28c88c;
}
procedure `void` `setFuture`(`io.reactivex.internal.schedulers.ScheduledRunnable` v3 @kind this, `java.util.concurrent.Future` v4 @kind object) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.setFuture:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28c91c.  v0:= 1I;
  #L28c91e.  call temp:= `get`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L28c924.  v1:= temp @kind object;
  #L28c926.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.DONE` @type ^`java.lang.Object` @kind object;
  #L28c92a.  if v1 != v2 then goto L28c930;
  #L28c92e.  return @kind void;
  #L28c930.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.SYNC_DISPOSED` @type ^`java.lang.Object` @kind object;
  #L28c934.  if v1 != v2 then goto L28c942;
  #L28c938.  v0:= 0I;
  #L28c93a.  call temp:= `cancel`(v4, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L28c940.  return @kind void;
  #L28c942.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.ASYNC_DISPOSED` @type ^`java.lang.Object` @kind object;
  #L28c946.  if v1 != v2 then goto L28c952;
  #L28c94a.  call temp:= `cancel`(v4, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L28c950.  return @kind void;
  #L28c952.  call temp:= `compareAndSet`(v3, v0, v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28c958.  v0:= temp;
  #L28c95a.  if v0 == 0 then goto L28c91c;
  #L28c95e.  return @kind void;
}
