record `io.reactivex.internal.schedulers.AbstractDirectTask` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.b` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.AbstractDirectTask.runnable` @AccessFlag PROTECTED_FINAL;
  `java.lang.Thread` `io.reactivex.internal.schedulers.AbstractDirectTask.runner` @AccessFlag PROTECTED;
}
global `java.util.concurrent.FutureTask` `@@io.reactivex.internal.schedulers.AbstractDirectTask.DISPOSED` @AccessFlag PROTECTED_STATIC_FINAL;
global `java.util.concurrent.FutureTask` `@@io.reactivex.internal.schedulers.AbstractDirectTask.FINISHED` @AccessFlag PROTECTED_STATIC_FINAL;
global `long` `@@io.reactivex.internal.schedulers.AbstractDirectTask.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L28b1b8.  v0:= new `java.util.concurrent.FutureTask`;
  #L28b1bc.  v1:= `@@io.reactivex.internal.functions.Functions.b` @type ^`java.lang.Runnable` @kind object;
  #L28b1c0.  v2:= 0I;
  #L28b1c2.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L28b1c8.  `@@io.reactivex.internal.schedulers.AbstractDirectTask.FINISHED` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L28b1cc.  v0:= new `java.util.concurrent.FutureTask`;
  #L28b1d0.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L28b1d6.  `@@io.reactivex.internal.schedulers.AbstractDirectTask.DISPOSED` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L28b1da.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.AbstractDirectTask` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L28b1ec.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28b1f2.  v0.`io.reactivex.internal.schedulers.AbstractDirectTask.runnable` @type ^`java.lang.Runnable` := v1 @kind object;
  #L28b1f6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.AbstractDirectTask` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L28b208.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28b20e.  v0:= temp @kind object;
  #L28b210.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L28b214.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L28b218.  if v0 == v1 then goto L28b250;
  #L28b21c.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L28b220.  if v0 == v1 then goto L28b250;
  #L28b224.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28b22a.  v1:= temp;
  #L28b22c.  if v1 == 0 then goto L28b250;
  #L28b230.  if v0 == 0 then goto L28b250;
  #L28b234.  v1:= v3.`io.reactivex.internal.schedulers.AbstractDirectTask.runner` @type ^`java.lang.Thread` @kind object;
  #L28b238.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L28b23e.  v2:= temp @kind object;
  #L28b240.  if v1 == v2 then goto L28b248;
  #L28b244.  v1:= 1I;
  #L28b246.  goto L28b24a;
  #L28b248.  v1:= 0I;
  #L28b24a.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L28b250.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.internal.schedulers.AbstractDirectTask` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28b1a0.  v0:= v1.`io.reactivex.internal.schedulers.AbstractDirectTask.runnable` @type ^`java.lang.Runnable` @kind object;
  #L28b1a4.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.AbstractDirectTask` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L28b168.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28b16e.  v0:= temp @kind object;
  #L28b170.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L28b174.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L28b178.  if v0 == v1 then goto L28b18a;
  #L28b17c.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L28b180.  if v0 != v1 then goto L28b186;
  #L28b184.  goto L28b18a;
  #L28b186.  v0:= 0I;
  #L28b188.  goto L28b18c;
  #L28b18a.  v0:= 1I;
  #L28b18c.  return v0;
}
procedure `void` `setFuture`(`io.reactivex.internal.schedulers.AbstractDirectTask` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/AbstractDirectTask;.setFuture:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L28b264.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28b26a.  v0:= temp @kind object;
  #L28b26c.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L28b270.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L28b274.  if v0 != v1 then goto L28b27a;
  #L28b278.  goto L28b2ac;
  #L28b27a.  v1:= `@@io.reactivex.internal.schedulers.AbstractDirectTask.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L28b27e.  if v0 != v1 then goto L28b2a0;
  #L28b282.  v0:= v2.`io.reactivex.internal.schedulers.AbstractDirectTask.runner` @type ^`java.lang.Thread` @kind object;
  #L28b286.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L28b28c.  v1:= temp @kind object;
  #L28b28e.  if v0 == v1 then goto L28b296;
  #L28b292.  v0:= 1I;
  #L28b294.  goto L28b298;
  #L28b296.  v0:= 0I;
  #L28b298.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L28b29e.  goto L28b2ac;
  #L28b2a0.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28b2a6.  v0:= temp;
  #L28b2a8.  if v0 == 0 then goto L28b264;
  #L28b2ac.  return @kind void;
}
