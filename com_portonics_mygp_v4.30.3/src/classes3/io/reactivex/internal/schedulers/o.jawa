record `io.reactivex.internal.schedulers.o` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `boolean` `@@io.reactivex.internal.schedulers.o.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@io.reactivex.internal.schedulers.o.b` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@io.reactivex.internal.schedulers.o.c` @AccessFlag STATIC_FINAL;
global `java.util.Map` `@@io.reactivex.internal.schedulers.o.d` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/o;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L28cab8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L28cabc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28cac2.  `@@io.reactivex.internal.schedulers.o.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L28cac6.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L28caca.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L28cad0.  `@@io.reactivex.internal.schedulers.o.d` @type ^`java.util.Map` := v0 @kind object;
  #L28cad4.  call temp:= `getProperties`() @signature `Ljava/lang/System;.getProperties:()Ljava/util/Properties;` @kind static;
  #L28cada.  v0:= temp @kind object;
  #L28cadc.  v1:= new `io.reactivex.internal.schedulers.m`;
  #L28cae0.  call `<init>`(v1) @signature `Lio/reactivex/internal/schedulers/m;.<init>:()V` @kind direct;
  #L28cae6.  call `a`(v1, v0) @signature `Lio/reactivex/internal/schedulers/m;.a:(Ljava/util/Properties;)V` @kind virtual;
  #L28caec.  v0:= v1.`io.reactivex.internal.schedulers.m.a` @type ^`boolean` @kind boolean;
  #L28caf0.  `@@io.reactivex.internal.schedulers.o.a` @type ^`boolean` := v0 @kind boolean;
  #L28caf4.  v0:= v1.`io.reactivex.internal.schedulers.m.b` @type ^`int`;
  #L28caf8.  `@@io.reactivex.internal.schedulers.o.b` @type ^`int` := v0;
  #L28cafc.  call `b`() @signature `Lio/reactivex/internal/schedulers/o;.b:()V` @kind static;
  #L28cb02.  return @kind void;
}
procedure `java.util.concurrent.ScheduledExecutorService` `a`(`java.util.concurrent.ThreadFactory` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/o;.a:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L28ca90.  v0:= 1I;
  #L28ca92.  call temp:= `newScheduledThreadPool`(v0, v1) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L28ca98.  v1:= temp @kind object;
  #L28ca9a.  v0:= `@@io.reactivex.internal.schedulers.o.a` @type ^`boolean` @kind boolean;
  #L28ca9e.  call `c`(v0, v1) @signature `Lio/reactivex/internal/schedulers/o;.c:(ZLjava/util/concurrent/ScheduledExecutorService;)V` @kind static;
  #L28caa4.  return v1 @kind object;
}
procedure `void` `b`() @signature `Lio/reactivex/internal/schedulers/o;.b:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L28cb14.  v0:= `@@io.reactivex.internal.schedulers.o.a` @type ^`boolean` @kind boolean;
  #L28cb18.  call `d`(v0) @signature `Lio/reactivex/internal/schedulers/o;.d:(Z)V` @kind static;
  #L28cb1e.  return @kind void;
}
procedure `void` `c`(`boolean` v1 , `java.util.concurrent.ScheduledExecutorService` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/o;.c:(ZLjava/util/concurrent/ScheduledExecutorService;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L28cb30.  if v1 == 0 then goto L28cb4c;
  #L28cb34.  v1:= instanceof @variable v2 @type ^`java.util.concurrent.ScheduledThreadPoolExecutor` @kind boolean;
  #L28cb38.  if v1 == 0 then goto L28cb4c;
  #L28cb3c.  v1:= v2 @kind object;
  #L28cb3e.  v1:= (`java.util.concurrent.ScheduledThreadPoolExecutor`) v1 @kind object;
  #L28cb42.  v0:= `@@io.reactivex.internal.schedulers.o.d` @type ^`java.util.Map` @kind object;
  #L28cb46.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L28cb4c.  return @kind void;
}
procedure `void` `d`(`boolean` v11 ) @signature `Lio/reactivex/internal/schedulers/o;.d:(Z)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L28cb60.  if v11 == 0 then goto L28cbc4;
  #L28cb64.  v11:= `@@io.reactivex.internal.schedulers.o.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28cb68.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28cb6e.  v0:= temp @kind object;
  #L28cb70.  v0:= (`java.util.concurrent.ScheduledExecutorService`) v0 @kind object;
  #L28cb74.  if v0 == 0 then goto L28cb7a;
  #L28cb78.  return @kind void;
  #L28cb7a.  v1:= 1I;
  #L28cb7c.  v2:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L28cb80.  v3:= "RxSchedulerPurge" @kind object;
  #L28cb84.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28cb8a.  call temp:= `newScheduledThreadPool`(v1, v2) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L28cb90.  v4:= temp @kind object;
  #L28cb92.  call temp:= `compareAndSet`(v11, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28cb98.  v11:= temp;
  #L28cb9a.  if v11 == 0 then goto L28cbbc;
  #L28cb9e.  v5:= new `io.reactivex.internal.schedulers.n`;
  #L28cba2.  call `<init>`(v5) @signature `Lio/reactivex/internal/schedulers/n;.<init>:()V` @kind direct;
  #L28cba8.  v11:= `@@io.reactivex.internal.schedulers.o.b` @type ^`int`;
  #L28cbac.  v6:= (`long`) v11 @kind i2l;
  #L28cbae.  v8:= (`long`) v11 @kind i2l;
  #L28cbb0.  v10:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L28cbb4.  call temp:= `scheduleAtFixedRate`(v4, v5, v6, v8, v10) @signature `Ljava/util/concurrent/ScheduledExecutorService;.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L28cbba.  return @kind void;
  #L28cbbc.  call temp:= `shutdownNow`(v4) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L28cbc2.  goto L28cb64;
  #L28cbc4.  return @kind void;
}
