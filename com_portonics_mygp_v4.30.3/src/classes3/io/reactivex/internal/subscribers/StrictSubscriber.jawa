record `io.reactivex.internal.subscribers.StrictSubscriber` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.subscribers.StrictSubscriber.done` @AccessFlag VOLATILE;
  `n.b.c` `io.reactivex.internal.subscribers.StrictSubscriber.downstream` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.subscribers.StrictSubscriber.error` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.subscribers.StrictSubscriber.once` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.subscribers.StrictSubscriber.requested` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.subscribers.StrictSubscriber.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscribers.StrictSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.StrictSubscriber` v0 @kind this, `n.b.c` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.<init>:(Ln/b/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L28e554.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L28e55a.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L28e55e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L28e562.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L28e568.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L28e56c.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L28e570.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L28e576.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L28e57a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L28e57e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28e584.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L28e588.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L28e58c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L28e592.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L28e596.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.StrictSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28e5a8.  v0:= v1.`io.reactivex.internal.subscribers.StrictSubscriber.done` @type ^`boolean` @kind boolean;
  #L28e5ac.  if v0 != 0 then goto L28e5ba;
  #L28e5b0.  v0:= v1.`io.reactivex.internal.subscribers.StrictSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28e5b4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28e5ba.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.StrictSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28e5cc.  v0:= 1I;
  #L28e5ce.  v2.`io.reactivex.internal.subscribers.StrictSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L28e5d2.  v0:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L28e5d6.  v1:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L28e5da.  call `b`(v0, v2, v1) @signature `Lio/reactivex/internal/util/g;.b:(Ln/b/c;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L28e5e0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.StrictSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28e5f4.  v0:= 1I;
  #L28e5f6.  v2.`io.reactivex.internal.subscribers.StrictSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L28e5fa.  v0:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L28e5fe.  v1:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L28e602.  call `d`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.d:(Ln/b/c;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L28e608.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.StrictSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28e61c.  v0:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L28e620.  v1:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.error` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L28e624.  call `f`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/g;.f:(Ln/b/c;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L28e62a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.StrictSubscriber` v3 @kind this, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28e63c.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.once` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L28e640.  v1:= 0I;
  #L28e642.  v2:= 1I;
  #L28e644.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L28e64a.  v0:= temp;
  #L28e64c.  if v0 == 0 then goto L28e66a;
  #L28e650.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L28e654.  call `onSubscribe`(v0, v3) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L28e65a.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28e65e.  v1:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L28e662.  call temp:= `deferredSetOnce`(v0, v1, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Ln/b/d;)Z` @kind static;
  #L28e668.  goto L28e68a;
  #L28e66a.  call `cancel`(v4) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L28e670.  call `cancel`(v3) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.cancel:()V` @kind virtual;
  #L28e676.  v4:= new `java.lang.IllegalStateException`;
  #L28e67a.  v0:= "ยง2.12 violated: onSubscribe must be called at most once" @kind object;
  #L28e67e.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28e684.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L28e68a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.StrictSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28e69c.  v0:= 0L;
  #L28e6a0.  v2:= lcmp(v4, v0);
  #L28e6a4.  if v2 > 0 then goto L28e6e2;
  #L28e6a8.  call `cancel`(v3) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.cancel:()V` @kind virtual;
  #L28e6ae.  v0:= new `java.lang.IllegalArgumentException`;
  #L28e6b2.  v1:= new `java.lang.StringBuilder`;
  #L28e6b6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28e6bc.  v2:= "ยง3.9 violated: positive request amount required but it was " @kind object;
  #L28e6c0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28e6c6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L28e6cc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28e6d2.  v4:= temp @kind object;
  #L28e6d4.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28e6da.  call `onError`(v3, v0) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L28e6e0.  goto L28e6f0;
  #L28e6e2.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28e6e6.  v1:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.requested` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L28e6ea.  call `deferredRequest`(v0, v1, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L28e6f0.  return @kind void;
}
