record `io.reactivex.internal.subscribers.LambdaSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `io.reactivex.d0.a` `io.reactivex.internal.subscribers.LambdaSubscriber.onComplete` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.subscribers.LambdaSubscriber.onError` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.subscribers.LambdaSubscriber.onNext` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.subscribers.LambdaSubscriber.onSubscribe` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscribers.LambdaSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.LambdaSubscriber` v0 @kind this, `io.reactivex.d0.g` v1 @kind object, `io.reactivex.d0.g` v2 @kind object, `io.reactivex.d0.a` v3 @kind object, `io.reactivex.d0.g` v4 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.<init>:(Lio/reactivex/d0/g;Lio/reactivex/d0/g;Lio/reactivex/d0/a;Lio/reactivex/d0/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L28e1d0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28e1d6.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.onNext` @type ^`io.reactivex.d0.g` := v1 @kind object;
  #L28e1da.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.onError` @type ^`io.reactivex.d0.g` := v2 @kind object;
  #L28e1de.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.onComplete` @type ^`io.reactivex.d0.a` := v3 @kind object;
  #L28e1e2.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.onSubscribe` @type ^`io.reactivex.d0.g` := v4 @kind object;
  #L28e1e6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.LambdaSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L28e1f8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28e1fe.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.subscribers.LambdaSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L28e210.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.cancel:()V` @kind virtual;
  #L28e216.  return @kind void;
}
procedure `boolean` `hasCustomOnError`(`io.reactivex.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.hasCustomOnError:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28e184.  v0:= v2.`io.reactivex.internal.subscribers.LambdaSubscriber.onError` @type ^`io.reactivex.d0.g` @kind object;
  #L28e188.  v1:= `@@io.reactivex.internal.functions.Functions.f` @type ^`io.reactivex.d0.g` @kind object;
  #L28e18c.  if v0 == v1 then goto L28e194;
  #L28e190.  v0:= 1I;
  #L28e192.  goto L28e196;
  #L28e194.  v0:= 0I;
  #L28e196.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28e1a8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28e1ae.  v0:= temp @kind object;
  #L28e1b0.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L28e1b4.  if v0 != v1 then goto L28e1bc;
  #L28e1b8.  v0:= 1I;
  #L28e1ba.  goto L28e1be;
  #L28e1bc.  v0:= 0I;
  #L28e1be.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28e228.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28e22e.  v0:= temp @kind object;
  #L28e230.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L28e234.  if v0 == v1 then goto L28e258;
  #L28e238.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28e23e.  v0:= v2.`io.reactivex.internal.subscribers.LambdaSubscriber.onComplete` @type ^`io.reactivex.d0.a` @kind object;
  #L28e242.  call `run`(v0) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L28e248.  goto L28e258;
  #L28e24a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28e24c.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28e252.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28e258.  return @kind void;
  catch `java.lang.Throwable` @[L28e23e..L28e248] goto L28e24a;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.LambdaSubscriber` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L28e278.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28e27e.  v0:= temp @kind object;
  #L28e280.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L28e284.  if v0 == v1 then goto L28e2c6;
  #L28e288.  call `lazySet`(v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28e28e.  v0:= v4.`io.reactivex.internal.subscribers.LambdaSubscriber.onError` @type ^`io.reactivex.d0.g` @kind object;
  #L28e292.  call `accept`(v0, v5) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L28e298.  goto L28e2cc;
  #L28e29a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28e29c.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28e2a2.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L28e2a6.  v2:= 2I;
  #L28e2a8.  v2:= new `java.lang.Throwable`[v2];
  #L28e2ac.  v3:= 0I;
  #L28e2ae.  v2[v3]:= v5 @kind object;
  #L28e2b2.  v5:= 1I;
  #L28e2b4.  v2[v5]:= v0 @kind object;
  #L28e2b8.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L28e2be.  call `t`(v1) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28e2c4.  goto L28e2cc;
  #L28e2c6.  call `t`(v5) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28e2cc.  return @kind void;
  catch `java.lang.Throwable` @[L28e28e..L28e298] goto L28e29a;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.LambdaSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28e2ec.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.isDisposed:()Z` @kind virtual;
  #L28e2f2.  v0:= temp;
  #L28e2f4.  if v0 != 0 then goto L28e324;
  #L28e2f8.  v0:= v1.`io.reactivex.internal.subscribers.LambdaSubscriber.onNext` @type ^`io.reactivex.d0.g` @kind object;
  #L28e2fc.  call `accept`(v0, v2) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L28e302.  goto L28e324;
  #L28e304.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28e306.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28e30c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28e312.  v0:= temp @kind object;
  #L28e314.  v0:= (`n.b.d`) v0 @kind object;
  #L28e318.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L28e31e.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L28e324.  return @kind void;
  catch `java.lang.Throwable` @[L28e2f8..L28e302] goto L28e304;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.LambdaSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28e344.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L28e34a.  v0:= temp;
  #L28e34c.  if v0 == 0 then goto L28e370;
  #L28e350.  v0:= v1.`io.reactivex.internal.subscribers.LambdaSubscriber.onSubscribe` @type ^`io.reactivex.d0.g` @kind object;
  #L28e354.  call `accept`(v0, v1) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L28e35a.  goto L28e370;
  #L28e35c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28e35e.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28e364.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L28e36a.  call `onError`(v1, v0) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L28e370.  return @kind void;
  catch `java.lang.Throwable` @[L28e350..L28e35a] goto L28e35c;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.LambdaSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28e390.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28e396.  v0:= temp @kind object;
  #L28e398.  v0:= (`n.b.d`) v0 @kind object;
  #L28e39c.  call `request`(v0, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L28e3a2.  return @kind void;
}
