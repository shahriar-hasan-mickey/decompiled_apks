record `io.reactivex.internal.subscribers.ForEachWhileSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.internal.subscribers.ForEachWhileSubscriber.done` @AccessFlag ;
  `io.reactivex.d0.a` `io.reactivex.internal.subscribers.ForEachWhileSubscriber.onComplete` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.subscribers.ForEachWhileSubscriber.onError` @AccessFlag FINAL;
  `io.reactivex.d0.m` `io.reactivex.internal.subscribers.ForEachWhileSubscriber.onNext` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscribers.ForEachWhileSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v0 @kind this, `io.reactivex.d0.m` v1 @kind object, `io.reactivex.d0.g` v2 @kind object, `io.reactivex.d0.a` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.<init>:(Lio/reactivex/d0/m;Lio/reactivex/d0/g;Lio/reactivex/d0/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L28ddf8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28ddfe.  v0.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.onNext` @type ^`io.reactivex.d0.m` := v1 @kind object;
  #L28de02.  v0.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.onError` @type ^`io.reactivex.d0.g` := v2 @kind object;
  #L28de06.  v0.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.onComplete` @type ^`io.reactivex.d0.a` := v3 @kind object;
  #L28de0a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L28de1c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28de22.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28ddd0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28ddd6.  v0:= temp @kind object;
  #L28ddd8.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L28dddc.  if v0 != v1 then goto L28dde4;
  #L28dde0.  v0:= 1I;
  #L28dde2.  goto L28dde6;
  #L28dde4.  v0:= 0I;
  #L28dde6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28de34.  v0:= v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.done` @type ^`boolean` @kind boolean;
  #L28de38.  if v0 == 0 then goto L28de3e;
  #L28de3c.  return @kind void;
  #L28de3e.  v0:= 1I;
  #L28de40.  v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L28de44.  v0:= v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.onComplete` @type ^`io.reactivex.d0.a` @kind object;
  #L28de48.  call `run`(v0) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L28de4e.  goto L28de5e;
  #L28de50.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28de52.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28de58.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28de5e.  return @kind void;
  catch `java.lang.Throwable` @[L28de44..L28de4e] goto L28de50;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28de7c.  v0:= v5.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.done` @type ^`boolean` @kind boolean;
  #L28de80.  if v0 == 0 then goto L28de8c;
  #L28de84.  call `t`(v6) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28de8a.  return @kind void;
  #L28de8c.  v0:= 1I;
  #L28de8e.  v5.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L28de92.  v1:= v5.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.onError` @type ^`io.reactivex.d0.g` @kind object;
  #L28de96.  call `accept`(v1, v6) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L28de9c.  goto L28dec6;
  #L28de9e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28dea0.  call `b`(v1) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28dea6.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L28deaa.  v3:= 2I;
  #L28deac.  v3:= new `java.lang.Throwable`[v3];
  #L28deb0.  v4:= 0I;
  #L28deb2.  v3[v4]:= v6 @kind object;
  #L28deb6.  v3[v0]:= v1 @kind object;
  #L28deba.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L28dec0.  call `t`(v2) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28dec6.  return @kind void;
  catch `java.lang.Throwable` @[L28de92..L28de9c] goto L28de9e;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28dee4.  v0:= v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.done` @type ^`boolean` @kind boolean;
  #L28dee8.  if v0 == 0 then goto L28deee;
  #L28deec.  return @kind void;
  #L28deee.  v0:= v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.onNext` @type ^`io.reactivex.d0.m` @kind object;
  #L28def2.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/d0/m;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L28def8.  v2:= temp;
  #L28defa.  if v2 != 0 then goto L28df0a;
  #L28defe.  call `dispose`(v1) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @kind virtual;
  #L28df04.  call `onComplete`(v1) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onComplete:()V` @kind virtual;
  #L28df0a.  return @kind void;
  #L28df0c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28df0e.  call `b`(v2) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28df14.  call `dispose`(v1) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @kind virtual;
  #L28df1a.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L28df20.  return @kind void;
  catch `java.lang.Throwable` @[L28deee..L28defa] goto L28df0c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28df40.  v0:= 9223372036854775807L;
  #L28df4a.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;J)Z` @kind static;
  #L28df50.  return @kind void;
}
