record `io.reactivex.internal.subscribers.InnerQueuedSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `boolean` `io.reactivex.internal.subscribers.InnerQueuedSubscriber.done` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.subscribers.InnerQueuedSubscriber.fusionMode` @AccessFlag ;
  `int` `io.reactivex.internal.subscribers.InnerQueuedSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.internal.subscribers.c` `io.reactivex.internal.subscribers.InnerQueuedSubscriber.parent` @AccessFlag FINAL;
  `int` `io.reactivex.internal.subscribers.InnerQueuedSubscriber.prefetch` @AccessFlag FINAL;
  `long` `io.reactivex.internal.subscribers.InnerQueuedSubscriber.produced` @AccessFlag ;
  `io.reactivex.e0.a.j` `io.reactivex.internal.subscribers.InnerQueuedSubscriber.queue` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.subscribers.InnerQueuedSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.InnerQueuedSubscriber` v0 @kind this, `io.reactivex.internal.subscribers.c` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.<init>:(Lio/reactivex/internal/subscribers/c;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L28df94.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28df9a.  v0.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.parent` @type ^`io.reactivex.internal.subscribers.c` := v1 @kind object;
  #L28df9e.  v0.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.prefetch` @type ^`int` := v2;
  #L28dfa2.  v1:= v2 ^> 2;
  #L28dfa6.  v2:= v2 - v1 @kind int;
  #L28dfa8.  v0.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.limit` @type ^`int` := v2;
  #L28dfac.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.InnerQueuedSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L28dfc0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28dfc6.  return @kind void;
}
procedure `boolean` `isDone`(`io.reactivex.internal.subscribers.InnerQueuedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28df64.  v0:= v1.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.done` @type ^`boolean` @kind boolean;
  #L28df68.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.InnerQueuedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28dfd8.  v0:= v1.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.parent` @type ^`io.reactivex.internal.subscribers.c` @kind object;
  #L28dfdc.  call `innerComplete`(v0, v1) @signature `Lio/reactivex/internal/subscribers/c;.innerComplete:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;)V` @kind interface;
  #L28dfe2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.InnerQueuedSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28dff4.  v0:= v1.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.parent` @type ^`io.reactivex.internal.subscribers.c` @kind object;
  #L28dff8.  call `innerError`(v0, v1, v2) @signature `Lio/reactivex/internal/subscribers/c;.innerError:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Throwable;)V` @kind interface;
  #L28dffe.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.InnerQueuedSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28e010.  v0:= v1.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.fusionMode` @type ^`int`;
  #L28e014.  if v0 != 0 then goto L28e024;
  #L28e018.  v0:= v1.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.parent` @type ^`io.reactivex.internal.subscribers.c` @kind object;
  #L28e01c.  call `innerNext`(v0, v1, v2) @signature `Lio/reactivex/internal/subscribers/c;.innerNext:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Object;)V` @kind interface;
  #L28e022.  goto L28e02e;
  #L28e024.  v2:= v1.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.parent` @type ^`io.reactivex.internal.subscribers.c` @kind object;
  #L28e028.  call `drain`(v2) @signature `Lio/reactivex/internal/subscribers/c;.drain:()V` @kind interface;
  #L28e02e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.InnerQueuedSubscriber` v3 @kind this, `n.b.d` v4 @kind object) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28e040.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L28e046.  v0:= temp;
  #L28e048.  if v0 == 0 then goto L28e0b6;
  #L28e04c.  v0:= instanceof @variable v4 @type ^`io.reactivex.e0.a.g` @kind boolean;
  #L28e050.  if v0 == 0 then goto L28e09c;
  #L28e054.  v0:= v4 @kind object;
  #L28e056.  v0:= (`io.reactivex.e0.a.g`) v0 @kind object;
  #L28e05a.  v1:= 3I;
  #L28e05c.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/e0/a/f;.requestFusion:(I)I` @kind interface;
  #L28e062.  v1:= temp;
  #L28e064.  v2:= 1I;
  #L28e066.  if v1 != v2 then goto L28e082;
  #L28e06a.  v3.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.fusionMode` @type ^`int` := v1;
  #L28e06e.  v3.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L28e072.  v3.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.done` @type ^`boolean` := v2 @kind boolean;
  #L28e076.  v4:= v3.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.parent` @type ^`io.reactivex.internal.subscribers.c` @kind object;
  #L28e07a.  call `innerComplete`(v4, v3) @signature `Lio/reactivex/internal/subscribers/c;.innerComplete:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;)V` @kind interface;
  #L28e080.  return @kind void;
  #L28e082.  v2:= 2I;
  #L28e084.  if v1 != v2 then goto L28e09c;
  #L28e088.  v3.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.fusionMode` @type ^`int` := v1;
  #L28e08c.  v3.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L28e090.  v0:= v3.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.prefetch` @type ^`int`;
  #L28e094.  call `h`(v4, v0) @signature `Lio/reactivex/internal/util/k;.h:(Ln/b/d;I)V` @kind static;
  #L28e09a.  return @kind void;
  #L28e09c.  v0:= v3.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.prefetch` @type ^`int`;
  #L28e0a0.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/util/k;.b:(I)Lio/reactivex/e0/a/j;` @kind static;
  #L28e0a6.  v0:= temp @kind object;
  #L28e0a8.  v3.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.queue` @type ^`io.reactivex.e0.a.j` := v0 @kind object;
  #L28e0ac.  v0:= v3.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.prefetch` @type ^`int`;
  #L28e0b0.  call `h`(v4, v0) @signature `Lio/reactivex/internal/util/k;.h:(Ln/b/d;I)V` @kind static;
  #L28e0b6.  return @kind void;
}
procedure `io.reactivex.e0.a.j` `queue`(`io.reactivex.internal.subscribers.InnerQueuedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.queue:()Lio/reactivex/e0/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28df7c.  v0:= v1.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.queue` @type ^`io.reactivex.e0.a.j` @kind object;
  #L28df80.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.InnerQueuedSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28e0c8.  v0:= v3.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.fusionMode` @type ^`int`;
  #L28e0cc.  v1:= 1I;
  #L28e0ce.  if v0 == v1 then goto L28e106;
  #L28e0d2.  v0:= v3.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.produced` @type ^`long` @kind wide;
  #L28e0d6.  v0:= v0 + v4 @kind long;
  #L28e0d8.  v4:= v3.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.limit` @type ^`int`;
  #L28e0dc.  v4:= (`long`) v4 @kind i2l;
  #L28e0de.  v2:= lcmp(v0, v4);
  #L28e0e2.  if v2 < 0 then goto L28e102;
  #L28e0e6.  v4:= 0L;
  #L28e0ea.  v3.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.produced` @type ^`long` := v4 @kind wide;
  #L28e0ee.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28e0f4.  v4:= temp @kind object;
  #L28e0f6.  v4:= (`n.b.d`) v4 @kind object;
  #L28e0fa.  call `request`(v4, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L28e100.  goto L28e106;
  #L28e102.  v3.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L28e106.  return @kind void;
}
procedure `void` `requestOne`(`io.reactivex.internal.subscribers.InnerQueuedSubscriber` v5 @kind this) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.requestOne:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28e118.  v0:= v5.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.fusionMode` @type ^`int`;
  #L28e11c.  v1:= 1I;
  #L28e11e.  if v0 == v1 then goto L28e15a;
  #L28e122.  v0:= v5.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.produced` @type ^`long` @kind wide;
  #L28e126.  v2:= 1L;
  #L28e12a.  v0:= v0 + v2 @kind long;
  #L28e12c.  v2:= v5.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.limit` @type ^`int`;
  #L28e130.  v2:= (`long`) v2 @kind i2l;
  #L28e132.  v4:= lcmp(v0, v2);
  #L28e136.  if v4 != 0 then goto L28e156;
  #L28e13a.  v2:= 0L;
  #L28e13e.  v5.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.produced` @type ^`long` := v2 @kind wide;
  #L28e142.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28e148.  v2:= temp @kind object;
  #L28e14a.  v2:= (`n.b.d`) v2 @kind object;
  #L28e14e.  call `request`(v2, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L28e154.  goto L28e15a;
  #L28e156.  v5.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.produced` @type ^`long` := v0 @kind wide;
  #L28e15a.  return @kind void;
}
procedure `void` `setDone`(`io.reactivex.internal.subscribers.InnerQueuedSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.setDone:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28e16c.  v0:= 1I;
  #L28e16e.  v1.`io.reactivex.internal.subscribers.InnerQueuedSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L28e172.  return @kind void;
}
