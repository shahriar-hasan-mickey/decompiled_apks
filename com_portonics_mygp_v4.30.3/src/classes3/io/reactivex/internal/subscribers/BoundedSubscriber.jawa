record `io.reactivex.internal.subscribers.BoundedSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `int` `io.reactivex.internal.subscribers.BoundedSubscriber.bufferSize` @AccessFlag FINAL;
  `int` `io.reactivex.internal.subscribers.BoundedSubscriber.consumed` @AccessFlag ;
  `int` `io.reactivex.internal.subscribers.BoundedSubscriber.limit` @AccessFlag FINAL;
  `io.reactivex.d0.a` `io.reactivex.internal.subscribers.BoundedSubscriber.onComplete` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.subscribers.BoundedSubscriber.onError` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.subscribers.BoundedSubscriber.onNext` @AccessFlag FINAL;
  `io.reactivex.d0.g` `io.reactivex.internal.subscribers.BoundedSubscriber.onSubscribe` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscribers.BoundedSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.BoundedSubscriber` v0 @kind this, `io.reactivex.d0.g` v1 @kind object, `io.reactivex.d0.g` v2 @kind object, `io.reactivex.d0.a` v3 @kind object, `io.reactivex.d0.g` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.<init>:(Lio/reactivex/d0/g;Lio/reactivex/d0/g;Lio/reactivex/d0/a;Lio/reactivex/d0/g;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L28dad8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28dade.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.onNext` @type ^`io.reactivex.d0.g` := v1 @kind object;
  #L28dae2.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.onError` @type ^`io.reactivex.d0.g` := v2 @kind object;
  #L28dae6.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.onComplete` @type ^`io.reactivex.d0.a` := v3 @kind object;
  #L28daea.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.onSubscribe` @type ^`io.reactivex.d0.g` := v4 @kind object;
  #L28daee.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.bufferSize` @type ^`int` := v5;
  #L28daf2.  v1:= v5 ^> 2;
  #L28daf6.  v5:= v5 - v1 @kind int;
  #L28daf8.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.limit` @type ^`int` := v5;
  #L28dafc.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.BoundedSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L28db10.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28db16.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.subscribers.BoundedSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L28db28.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.cancel:()V` @kind virtual;
  #L28db2e.  return @kind void;
}
procedure `boolean` `hasCustomOnError`(`io.reactivex.internal.subscribers.BoundedSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.hasCustomOnError:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28da8c.  v0:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.onError` @type ^`io.reactivex.d0.g` @kind object;
  #L28da90.  v1:= `@@io.reactivex.internal.functions.Functions.f` @type ^`io.reactivex.d0.g` @kind object;
  #L28da94.  if v0 == v1 then goto L28da9c;
  #L28da98.  v0:= 1I;
  #L28da9a.  goto L28da9e;
  #L28da9c.  v0:= 0I;
  #L28da9e.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.subscribers.BoundedSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28dab0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28dab6.  v0:= temp @kind object;
  #L28dab8.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L28dabc.  if v0 != v1 then goto L28dac4;
  #L28dac0.  v0:= 1I;
  #L28dac2.  goto L28dac6;
  #L28dac4.  v0:= 0I;
  #L28dac6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.BoundedSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28db40.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28db46.  v0:= temp @kind object;
  #L28db48.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L28db4c.  if v0 == v1 then goto L28db70;
  #L28db50.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28db56.  v0:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.onComplete` @type ^`io.reactivex.d0.a` @kind object;
  #L28db5a.  call `run`(v0) @signature `Lio/reactivex/d0/a;.run:()V` @kind interface;
  #L28db60.  goto L28db70;
  #L28db62.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28db64.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28db6a.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28db70.  return @kind void;
  catch `java.lang.Throwable` @[L28db56..L28db60] goto L28db62;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.BoundedSubscriber` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L28db90.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28db96.  v0:= temp @kind object;
  #L28db98.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L28db9c.  if v0 == v1 then goto L28dbde;
  #L28dba0.  call `lazySet`(v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28dba6.  v0:= v4.`io.reactivex.internal.subscribers.BoundedSubscriber.onError` @type ^`io.reactivex.d0.g` @kind object;
  #L28dbaa.  call `accept`(v0, v5) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L28dbb0.  goto L28dbe4;
  #L28dbb2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28dbb4.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28dbba.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L28dbbe.  v2:= 2I;
  #L28dbc0.  v2:= new `java.lang.Throwable`[v2];
  #L28dbc4.  v3:= 0I;
  #L28dbc6.  v2[v3]:= v5 @kind object;
  #L28dbca.  v5:= 1I;
  #L28dbcc.  v2[v5]:= v0 @kind object;
  #L28dbd0.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L28dbd6.  call `t`(v1) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28dbdc.  goto L28dbe4;
  #L28dbde.  call `t`(v5) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28dbe4.  return @kind void;
  catch `java.lang.Throwable` @[L28dba6..L28dbb0] goto L28dbb2;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.BoundedSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28dc04.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.isDisposed:()Z` @kind virtual;
  #L28dc0a.  v0:= temp;
  #L28dc0c.  if v0 != 0 then goto L28dc70;
  #L28dc10.  v0:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.onNext` @type ^`io.reactivex.d0.g` @kind object;
  #L28dc14.  call `accept`(v0, v3) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L28dc1a.  v3:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.consumed` @type ^`int`;
  #L28dc1e.  v3:= v3 + 1;
  #L28dc22.  v0:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.limit` @type ^`int`;
  #L28dc26.  if v3 != v0 then goto L28dc4a;
  #L28dc2a.  v3:= 0I;
  #L28dc2c.  v2.`io.reactivex.internal.subscribers.BoundedSubscriber.consumed` @type ^`int` := v3;
  #L28dc30.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28dc36.  v3:= temp @kind object;
  #L28dc38.  v3:= (`n.b.d`) v3 @kind object;
  #L28dc3c.  v0:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.limit` @type ^`int`;
  #L28dc40.  v0:= (`long`) v0 @kind i2l;
  #L28dc42.  call `request`(v3, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L28dc48.  goto L28dc70;
  #L28dc4a.  v2.`io.reactivex.internal.subscribers.BoundedSubscriber.consumed` @type ^`int` := v3;
  #L28dc4e.  goto L28dc70;
  #L28dc50.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28dc52.  call `b`(v3) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28dc58.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28dc5e.  v0:= temp @kind object;
  #L28dc60.  v0:= (`n.b.d`) v0 @kind object;
  #L28dc64.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L28dc6a.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L28dc70.  return @kind void;
  catch `java.lang.Throwable` @[L28dc10..L28dc4e] goto L28dc50;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.BoundedSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28dc90.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L28dc96.  v0:= temp;
  #L28dc98.  if v0 == 0 then goto L28dcbc;
  #L28dc9c.  v0:= v1.`io.reactivex.internal.subscribers.BoundedSubscriber.onSubscribe` @type ^`io.reactivex.d0.g` @kind object;
  #L28dca0.  call `accept`(v0, v1) @signature `Lio/reactivex/d0/g;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L28dca6.  goto L28dcbc;
  #L28dca8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28dcaa.  call `b`(v0) @signature `Lio/reactivex/exceptions/a;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L28dcb0.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L28dcb6.  call `onError`(v1, v0) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L28dcbc.  return @kind void;
  catch `java.lang.Throwable` @[L28dc9c..L28dca6] goto L28dca8;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.BoundedSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28dcdc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28dce2.  v0:= temp @kind object;
  #L28dce4.  v0:= (`n.b.d`) v0 @kind object;
  #L28dce8.  call `request`(v0, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L28dcee.  return @kind void;
}
