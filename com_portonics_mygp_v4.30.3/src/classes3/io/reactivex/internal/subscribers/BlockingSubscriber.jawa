record `io.reactivex.internal.subscribers.BlockingSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `java.util.Queue` `io.reactivex.internal.subscribers.BlockingSubscriber.queue` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.subscribers.BlockingSubscriber.TERMINATED` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@io.reactivex.internal.subscribers.BlockingSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L28d964.  v0:= new `java.lang.Object`;
  #L28d968.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28d96e.  `@@io.reactivex.internal.subscribers.BlockingSubscriber.TERMINATED` @type ^`java.lang.Object` := v0 @kind object;
  #L28d972.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.subscribers.BlockingSubscriber` v0 @kind this, `java.util.Queue` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.<init>:(Ljava/util/Queue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L28d984.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28d98a.  v0.`io.reactivex.internal.subscribers.BlockingSubscriber.queue` @type ^`java.util.Queue` := v1 @kind object;
  #L28d98e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.BlockingSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28d9a0.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28d9a6.  v0:= temp;
  #L28d9a8.  if v0 == 0 then goto L28d9ba;
  #L28d9ac.  v0:= v2.`io.reactivex.internal.subscribers.BlockingSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L28d9b0.  v1:= `@@io.reactivex.internal.subscribers.BlockingSubscriber.TERMINATED` @type ^`java.lang.Object` @kind object;
  #L28d9b4.  call temp:= `offer`(v0, v1) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L28d9ba.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.subscribers.BlockingSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28d93c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28d942.  v0:= temp @kind object;
  #L28d944.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L28d948.  if v0 != v1 then goto L28d950;
  #L28d94c.  v0:= 1I;
  #L28d94e.  goto L28d952;
  #L28d950.  v0:= 0I;
  #L28d952.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.BlockingSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28d9cc.  v0:= v2.`io.reactivex.internal.subscribers.BlockingSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L28d9d0.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L28d9d6.  v1:= temp @kind object;
  #L28d9d8.  call temp:= `offer`(v0, v1) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L28d9de.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.BlockingSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28d9f0.  v0:= v1.`io.reactivex.internal.subscribers.BlockingSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L28d9f4.  call temp:= `error`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L28d9fa.  v2:= temp @kind object;
  #L28d9fc.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L28da02.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.BlockingSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28da14.  v0:= v1.`io.reactivex.internal.subscribers.BlockingSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L28da18.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L28da1e.  v2:= temp @kind object;
  #L28da20.  call temp:= `offer`(v0, v2) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L28da26.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.BlockingSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28da38.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L28da3e.  v2:= temp;
  #L28da40.  if v2 == 0 then goto L28da56;
  #L28da44.  v2:= v1.`io.reactivex.internal.subscribers.BlockingSubscriber.queue` @type ^`java.util.Queue` @kind object;
  #L28da48.  call temp:= `subscription`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.subscription:(Ln/b/d;)Ljava/lang/Object;` @kind static;
  #L28da4e.  v0:= temp @kind object;
  #L28da50.  call temp:= `offer`(v2, v0) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L28da56.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.BlockingSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/BlockingSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28da68.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28da6e.  v0:= temp @kind object;
  #L28da70.  v0:= (`n.b.d`) v0 @kind object;
  #L28da74.  call `request`(v0, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L28da7a.  return @kind void;
}
