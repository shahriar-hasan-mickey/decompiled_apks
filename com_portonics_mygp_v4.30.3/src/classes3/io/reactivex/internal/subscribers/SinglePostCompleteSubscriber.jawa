record `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.h` @kind interface, `n.b.d` @kind interface {
  `n.b.c` `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @AccessFlag PROTECTED_FINAL;
  `long` `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.produced` @AccessFlag PROTECTED;
  `n.b.d` `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.upstream` @AccessFlag PROTECTED;
  `java.lang.Object` `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.value` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.COMPLETE_MASK` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.REQUEST_MASK` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v0 @kind this, `n.b.c` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.<init>:(Ln/b/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L28e3b4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L28e3ba.  v0.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`n.b.c` := v1 @kind object;
  #L28e3be.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28e3d0.  v0:= v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L28e3d4.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L28e3da.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.complete:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L28e3ec.  v0:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.produced` @type ^`long` @kind wide;
  #L28e3f0.  v2:= 0L;
  #L28e3f4.  v4:= lcmp(v0, v2);
  #L28e3f8.  if v4 == 0 then goto L28e402;
  #L28e3fc.  call temp:= `e`(v9, v0) @signature `Lio/reactivex/internal/util/b;.e:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L28e402.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L28e408.  v0:= temp @kind wide;
  #L28e40a.  v4:= -9223372036854775808L;
  #L28e40e.  v6:= v0 ^& v4 @kind long;
  #L28e412.  v8:= lcmp(v6, v2);
  #L28e416.  if v8 == 0 then goto L28e422;
  #L28e41a.  call `onDrop`(v9, v10) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.onDrop:(Ljava/lang/Object;)V` @kind virtual;
  #L28e420.  return @kind void;
  #L28e422.  v6:= 9223372036854775807L;
  #L28e42c.  v0:= v0 ^& v6 @kind long;
  #L28e42e.  v6:= lcmp(v0, v2);
  #L28e432.  if v6 == 0 then goto L28e45c;
  #L28e436.  v0:= -4.9E-324D;
  #L28e440.  call `lazySet`(v9, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L28e446.  v0:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L28e44a.  call `onNext`(v0, v10) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L28e450.  v10:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L28e454.  call `onComplete`(v10) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L28e45a.  return @kind void;
  #L28e45c.  v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` := v10 @kind object;
  #L28e460.  call temp:= `compareAndSet`(v9, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L28e466.  v0:= temp;
  #L28e468.  if v0 == 0 then goto L28e46e;
  #L28e46c.  return @kind void;
  #L28e46e.  v0:= 0I;
  #L28e470.  v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` := v0 @kind object;
  #L28e474.  goto L28e402;
}
procedure `void` `onComplete`() @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.onComplete:()V` @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {

  # return;
}
procedure `void` `onDrop`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.onDrop:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L28e488.  return @kind void;
}
procedure `void` `onError`(`java.lang.Throwable` v0 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {

  # return;
}
procedure `void` `onNext`(`java.lang.Object` v0 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {

  # return;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28e49c.  v0:= v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L28e4a0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @kind static;
  #L28e4a6.  v0:= temp;
  #L28e4a8.  if v0 == 0 then goto L28e4ba;
  #L28e4ac.  v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`n.b.d` := v2 @kind object;
  #L28e4b0.  v2:= v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L28e4b4.  call `onSubscribe`(v2, v1) @signature `Ln/b/c;.onSubscribe:(Ln/b/d;)V` @kind interface;
  #L28e4ba.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L28e4cc.  call temp:= `validate`(v10) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L28e4d2.  v0:= temp;
  #L28e4d4.  if v0 == 0 then goto L28e542;
  #L28e4d8.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L28e4de.  v0:= temp @kind wide;
  #L28e4e0.  v2:= -9223372036854775808L;
  #L28e4e4.  v4:= v0 ^& v2 @kind long;
  #L28e4e8.  v6:= 0L;
  #L28e4ec.  v8:= lcmp(v4, v6);
  #L28e4f0.  if v8 == 0 then goto L28e524;
  #L28e4f4.  v10:= -4.9E-324D;
  #L28e4fe.  call temp:= `compareAndSet`(v9, v2, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L28e504.  v10:= temp;
  #L28e506.  if v10 == 0 then goto L28e542;
  #L28e50a.  v10:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L28e50e.  v11:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L28e512.  call `onNext`(v10, v11) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L28e518.  v10:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`n.b.c` @kind object;
  #L28e51c.  call `onComplete`(v10) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L28e522.  goto L28e542;
  #L28e524.  call temp:= `c`(v0, v10) @signature `Lio/reactivex/internal/util/b;.c:(JJ)J` @kind static;
  #L28e52a.  v2:= temp @kind wide;
  #L28e52c.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L28e532.  v0:= temp;
  #L28e534.  if v0 == 0 then goto L28e4d8;
  #L28e538.  v0:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`n.b.d` @kind object;
  #L28e53c.  call `request`(v0, v10) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L28e542.  return @kind void;
}
