record `io.reactivex.internal.subscriptions.AsyncSubscription` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `n.b.d` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.subscriptions.AsyncSubscription.actual` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.subscriptions.AsyncSubscription.resource` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscriptions.AsyncSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.AsyncSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/AsyncSubscription;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28ea10.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L28ea16.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L28ea1a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28ea20.  v1.`io.reactivex.internal.subscriptions.AsyncSubscription.resource` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L28ea24.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L28ea28.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L28ea2e.  v1.`io.reactivex.internal.subscriptions.AsyncSubscription.actual` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L28ea32.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.AsyncSubscription` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/AsyncSubscription;.<init>:(Lio/reactivex/disposables/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L28ea44.  call `<init>`(v1) @signature `Lio/reactivex/internal/subscriptions/AsyncSubscription;.<init>:()V` @kind direct;
  #L28ea4a.  v0:= v1.`io.reactivex.internal.subscriptions.AsyncSubscription.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28ea4e.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L28ea54.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.AsyncSubscription` v0 @kind this) @signature `Lio/reactivex/internal/subscriptions/AsyncSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L28ea68.  call `dispose`(v0) @signature `Lio/reactivex/internal/subscriptions/AsyncSubscription;.dispose:()V` @kind virtual;
  #L28ea6e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.subscriptions.AsyncSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/AsyncSubscription;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28ea80.  v0:= v1.`io.reactivex.internal.subscriptions.AsyncSubscription.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28ea84.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28ea8a.  v0:= v1.`io.reactivex.internal.subscriptions.AsyncSubscription.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28ea8e.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L28ea94.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.subscriptions.AsyncSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/AsyncSubscription;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28e9a4.  v0:= v2.`io.reactivex.internal.subscriptions.AsyncSubscription.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28e9a8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28e9ae.  v0:= temp @kind object;
  #L28e9b0.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L28e9b4.  if v0 != v1 then goto L28e9bc;
  #L28e9b8.  v0:= 1I;
  #L28e9ba.  goto L28e9be;
  #L28e9bc.  v0:= 0I;
  #L28e9be.  return v0;
}
procedure `boolean` `replaceResource`(`io.reactivex.internal.subscriptions.AsyncSubscription` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/AsyncSubscription;.replaceResource:(Lio/reactivex/disposables/b;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28e9d0.  v0:= v1.`io.reactivex.internal.subscriptions.AsyncSubscription.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28e9d4.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L28e9da.  v2:= temp;
  #L28e9dc.  return v2;
}
procedure `void` `request`(`io.reactivex.internal.subscriptions.AsyncSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscriptions/AsyncSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28eaa8.  v0:= v1.`io.reactivex.internal.subscriptions.AsyncSubscription.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28eaac.  call `deferredRequest`(v0, v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L28eab2.  return @kind void;
}
procedure `boolean` `setResource`(`io.reactivex.internal.subscriptions.AsyncSubscription` v1 @kind this, `io.reactivex.disposables.b` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/AsyncSubscription;.setResource:(Lio/reactivex/disposables/b;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28e9f0.  v0:= v1.`io.reactivex.internal.subscriptions.AsyncSubscription.resource` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28e9f4.  call temp:= `set`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/b;)Z` @kind static;
  #L28e9fa.  v2:= temp;
  #L28e9fc.  return v2;
}
procedure `void` `setSubscription`(`io.reactivex.internal.subscriptions.AsyncSubscription` v1 @kind this, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/AsyncSubscription;.setSubscription:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28eac4.  v0:= v1.`io.reactivex.internal.subscriptions.AsyncSubscription.actual` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L28eac8.  call temp:= `deferredSetOnce`(v0, v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Ln/b/d;)Z` @kind static;
  #L28eace.  return @kind void;
}
