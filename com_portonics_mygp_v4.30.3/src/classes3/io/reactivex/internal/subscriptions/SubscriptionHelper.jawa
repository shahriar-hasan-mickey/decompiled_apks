record `io.reactivex.internal.subscriptions.SubscriptionHelper` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `n.b.d` @kind interface {
}
global `io.reactivex.internal.subscriptions.SubscriptionHelper`[] `@@io.reactivex.internal.subscriptions.SubscriptionHelper.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `io.reactivex.internal.subscriptions.SubscriptionHelper` `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L28f84c.  v0:= new `io.reactivex.internal.subscriptions.SubscriptionHelper`;
  #L28f850.  v1:= "CANCELLED" @kind object;
  #L28f854.  v2:= 0I;
  #L28f856.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L28f85c.  `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` := v0 @kind object;
  #L28f860.  v1:= 1I;
  #L28f862.  v1:= new `io.reactivex.internal.subscriptions.SubscriptionHelper`[v1];
  #L28f866.  v1[v2]:= v0 @kind object;
  #L28f86a.  `@@io.reactivex.internal.subscriptions.SubscriptionHelper.$VALUES` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper`[] := v1 @kind object;
  #L28f86e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.SubscriptionHelper` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L28f880.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L28f886.  return @kind void;
}
procedure `boolean` `cancel`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L28f5d8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28f5de.  v0:= temp @kind object;
  #L28f5e0.  v0:= (`n.b.d`) v0 @kind object;
  #L28f5e4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L28f5e8.  if v0 == v1 then goto L28f60a;
  #L28f5ec.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L28f5f2.  v2:= temp @kind object;
  #L28f5f4.  v2:= (`n.b.d`) v2 @kind object;
  #L28f5f8.  if v2 == v1 then goto L28f60a;
  #L28f5fc.  if v2 == 0 then goto L28f606;
  #L28f600.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L28f606.  v2:= 1I;
  #L28f608.  return v2;
  #L28f60a.  v2:= 0I;
  #L28f60c.  return v2;
}
procedure `void` `deferredRequest`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `java.util.concurrent.atomic.AtomicLong` v3 @kind object, `long` v4 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L28f8ac.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28f8b2.  v0:= temp @kind object;
  #L28f8b4.  v0:= (`n.b.d`) v0 @kind object;
  #L28f8b8.  if v0 == 0 then goto L28f8c4;
  #L28f8bc.  call `request`(v0, v4) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L28f8c2.  goto L28f900;
  #L28f8c4.  call temp:= `validate`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L28f8ca.  v0:= temp;
  #L28f8cc.  if v0 == 0 then goto L28f900;
  #L28f8d0.  call temp:= `a`(v3, v4) @signature `Lio/reactivex/internal/util/b;.a:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L28f8d6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28f8dc.  v2:= temp @kind object;
  #L28f8de.  v2:= (`n.b.d`) v2 @kind object;
  #L28f8e2.  if v2 == 0 then goto L28f900;
  #L28f8e6.  v4:= 0L;
  #L28f8ea.  call temp:= `getAndSet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L28f8f0.  v0:= temp @kind wide;
  #L28f8f2.  v3:= lcmp(v0, v4);
  #L28f8f6.  if v3 == 0 then goto L28f900;
  #L28f8fa.  call `request`(v2, v0) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L28f900.  return @kind void;
}
procedure `boolean` `deferredSetOnce`(`java.util.concurrent.atomic.AtomicReference` v3 @kind object, `java.util.concurrent.atomic.AtomicLong` v4 @kind object, `n.b.d` v5 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Ln/b/d;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L28f620.  call temp:= `setOnce`(v3, v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L28f626.  v3:= temp;
  #L28f628.  if v3 == 0 then goto L28f64a;
  #L28f62c.  v0:= 0L;
  #L28f630.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L28f636.  v3:= temp @kind wide;
  #L28f638.  v2:= lcmp(v3, v0);
  #L28f63c.  if v2 == 0 then goto L28f646;
  #L28f640.  call `request`(v5, v3) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L28f646.  v3:= 1I;
  #L28f648.  return v3;
  #L28f64a.  v3:= 0I;
  #L28f64c.  return v3;
}
procedure `boolean` `replace`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L28f660.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28f666.  v0:= temp @kind object;
  #L28f668.  v0:= (`n.b.d`) v0 @kind object;
  #L28f66c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L28f670.  if v0 != v1 then goto L28f682;
  #L28f674.  if v3 == 0 then goto L28f67e;
  #L28f678.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L28f67e.  v2:= 0I;
  #L28f680.  return v2;
  #L28f682.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28f688.  v0:= temp;
  #L28f68a.  if v0 == 0 then goto L28f660;
  #L28f68e.  v2:= 1I;
  #L28f690.  return v2;
}
procedure `void` `reportMoreProduced`(`long` v3 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportMoreProduced:(J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L28f914.  v0:= new `io.reactivex.exceptions.ProtocolViolationException`;
  #L28f918.  v1:= new `java.lang.StringBuilder`;
  #L28f91c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28f922.  v2:= "More produced than requested: " @kind object;
  #L28f926.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28f92c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L28f932.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28f938.  v3:= temp @kind object;
  #L28f93a.  call `<init>`(v0, v3) @signature `Lio/reactivex/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28f940.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28f946.  return @kind void;
}
procedure `void` `reportSubscriptionSet`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L28f958.  v0:= new `io.reactivex.exceptions.ProtocolViolationException`;
  #L28f95c.  v1:= "Subscription already set!" @kind object;
  #L28f960.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28f966.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28f96c.  return @kind void;
}
procedure `boolean` `set`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `n.b.d` v3 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L28f6a4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28f6aa.  v0:= temp @kind object;
  #L28f6ac.  v0:= (`n.b.d`) v0 @kind object;
  #L28f6b0.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L28f6b4.  if v0 != v1 then goto L28f6c6;
  #L28f6b8.  if v3 == 0 then goto L28f6c2;
  #L28f6bc.  call `cancel`(v3) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L28f6c2.  v2:= 0I;
  #L28f6c4.  return v2;
  #L28f6c6.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28f6cc.  v1:= temp;
  #L28f6ce.  if v1 == 0 then goto L28f6a4;
  #L28f6d2.  if v0 == 0 then goto L28f6dc;
  #L28f6d6.  call `cancel`(v0) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L28f6dc.  v2:= 1I;
  #L28f6de.  return v2;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L28f6f0.  v0:= "s is null" @kind object;
  #L28f6f4.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/functions/g0;.e:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L28f6fa.  v0:= 0I;
  #L28f6fc.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L28f702.  v0:= temp;
  #L28f704.  if v0 != 0 then goto L28f728;
  #L28f708.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L28f70e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L28f714.  v1:= temp @kind object;
  #L28f716.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L28f71a.  if v1 == v2 then goto L28f724;
  #L28f71e.  call `reportSubscriptionSet`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @kind static;
  #L28f724.  v1:= 0I;
  #L28f726.  return v1;
  #L28f728.  v1:= 1I;
  #L28f72a.  return v1;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v0 @kind object, `n.b.d` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;J)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L28f73c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;)Z` @kind static;
  #L28f742.  v0:= temp;
  #L28f744.  if v0 == 0 then goto L28f752;
  #L28f748.  call `request`(v1, v2) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L28f74e.  v0:= 1I;
  #L28f750.  return v0;
  #L28f752.  v0:= 0I;
  #L28f754.  return v0;
}
procedure `boolean` `validate`(`long` v3 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L28f768.  v0:= 0L;
  #L28f76c.  v2:= lcmp(v3, v0);
  #L28f770.  if v2 > 0 then goto L28f7aa;
  #L28f774.  v0:= new `java.lang.IllegalArgumentException`;
  #L28f778.  v1:= new `java.lang.StringBuilder`;
  #L28f77c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28f782.  v2:= "n > 0 required but it was " @kind object;
  #L28f786.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28f78c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L28f792.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28f798.  v3:= temp @kind object;
  #L28f79a.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28f7a0.  call `t`(v0) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28f7a6.  v3:= 0I;
  #L28f7a8.  return v3;
  #L28f7aa.  v3:= 1I;
  #L28f7ac.  return v3;
}
procedure `boolean` `validate`(`n.b.d` v1 @kind object, `n.b.d` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Ln/b/d;Ln/b/d;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L28f7c0.  v0:= 0I;
  #L28f7c2.  if v2 != 0 then goto L28f7dc;
  #L28f7c6.  v1:= new `java.lang.NullPointerException`;
  #L28f7ca.  v2:= "next is null" @kind object;
  #L28f7ce.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28f7d4.  call `t`(v1) @signature `Lio/reactivex/g0/a;.t:(Ljava/lang/Throwable;)V` @kind static;
  #L28f7da.  return v0;
  #L28f7dc.  if v1 == 0 then goto L28f7ee;
  #L28f7e0.  call `cancel`(v2) @signature `Ln/b/d;.cancel:()V` @kind interface;
  #L28f7e6.  call `reportSubscriptionSet`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @kind static;
  #L28f7ec.  return v0;
  #L28f7ee.  v1:= 1I;
  #L28f7f0.  return v1;
}
procedure `io.reactivex.internal.subscriptions.SubscriptionHelper` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.valueOf:(Ljava/lang/String;)Lio/reactivex/internal/subscriptions/SubscriptionHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L28f804.  v0:= constclass @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L28f808.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L28f80e.  v1:= temp @kind object;
  #L28f810.  v1:= (`io.reactivex.internal.subscriptions.SubscriptionHelper`) v1 @kind object;
  #L28f814.  return v1 @kind object;
}
procedure `io.reactivex.internal.subscriptions.SubscriptionHelper`[] `values`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.values:()[Lio/reactivex/internal/subscriptions/SubscriptionHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L28f828.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.$VALUES` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper`[] @kind object;
  #L28f82c.  call temp:= `clone`(v0) @signature `[Lio/reactivex/internal/subscriptions/SubscriptionHelper;.clone:()Ljava/lang/Object;` @kind virtual;
  #L28f832.  v0:= temp @kind object;
  #L28f834.  v0:= (`io.reactivex.internal.subscriptions.SubscriptionHelper`[]) v0 @kind object;
  #L28f838.  return v0 @kind object;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.SubscriptionHelper` v0 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L28f898.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscriptions.SubscriptionHelper` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L28f980.  return @kind void;
}
