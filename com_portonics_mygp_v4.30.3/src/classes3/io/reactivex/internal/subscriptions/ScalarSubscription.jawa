record `io.reactivex.internal.subscriptions.ScalarSubscription` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.e0.a.g` @kind interface {
  `n.b.c` `io.reactivex.internal.subscriptions.ScalarSubscription.subscriber` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.subscriptions.ScalarSubscription.value` @AccessFlag FINAL;
}
global `int` `@@io.reactivex.internal.subscriptions.ScalarSubscription.CANCELLED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.ScalarSubscription.NO_REQUEST` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.ScalarSubscription.REQUESTED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.subscriptions.ScalarSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.ScalarSubscription` v0 @kind this, `n.b.c` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.<init>:(Ln/b/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L28f134.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L28f13a.  v0.`io.reactivex.internal.subscriptions.ScalarSubscription.subscriber` @type ^`n.b.c` := v1 @kind object;
  #L28f13e.  v0.`io.reactivex.internal.subscriptions.ScalarSubscription.value` @type ^`java.lang.Object` := v2 @kind object;
  #L28f142.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28f154.  v0:= 2I;
  #L28f156.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L28f15c.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28f170.  v0:= 1I;
  #L28f172.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L28f178.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.subscriptions.ScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28f060.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28f066.  v0:= temp;
  #L28f068.  v1:= 2I;
  #L28f06a.  if v0 != v1 then goto L28f072;
  #L28f06e.  v0:= 1I;
  #L28f070.  goto L28f074;
  #L28f072.  v0:= 0I;
  #L28f074.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28f088.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28f08e.  v0:= temp;
  #L28f090.  if v0 == 0 then goto L28f098;
  #L28f094.  v0:= 1I;
  #L28f096.  goto L28f09a;
  #L28f098.  v0:= 0I;
  #L28f09a.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28f0ac.  v2:= new `java.lang.UnsupportedOperationException`;
  #L28f0b0.  v0:= "Should not be called!" @kind object;
  #L28f0b4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28f0ba.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.internal.subscriptions.ScalarSubscription` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L28f0cc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L28f0d0.  v2:= "Should not be called!" @kind object;
  #L28f0d4.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28f0da.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28f104.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28f10a.  v0:= temp;
  #L28f10c.  if v0 != 0 then goto L28f11e;
  #L28f110.  v0:= 1I;
  #L28f112.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L28f118.  v0:= v1.`io.reactivex.internal.subscriptions.ScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L28f11c.  return v0 @kind object;
  #L28f11e.  v0:= 0I;
  #L28f120.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28f18c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L28f192.  v2:= temp;
  #L28f194.  if v2 != 0 then goto L28f19a;
  #L28f198.  return @kind void;
  #L28f19a.  v2:= 0I;
  #L28f19c.  v3:= 1I;
  #L28f19e.  call temp:= `compareAndSet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L28f1a4.  v2:= temp;
  #L28f1a6.  if v2 == 0 then goto L28f1cc;
  #L28f1aa.  v2:= v1.`io.reactivex.internal.subscriptions.ScalarSubscription.subscriber` @type ^`n.b.c` @kind object;
  #L28f1ae.  v3:= v1.`io.reactivex.internal.subscriptions.ScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L28f1b2.  call `onNext`(v2, v3) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L28f1b8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28f1be.  v3:= temp;
  #L28f1c0.  v0:= 2I;
  #L28f1c2.  if v3 == v0 then goto L28f1cc;
  #L28f1c6.  call `onComplete`(v2) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L28f1cc.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.subscriptions.ScalarSubscription` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L28f0ec.  v1:= v1 ^& 1;
  #L28f0f0.  return v1;
}
