record `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class @AccessFlag PUBLIC extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class {
  `n.b.c` `io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @AccessFlag PROTECTED;
}
global `int` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.CANCELLED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.FUSED_CONSUMED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.FUSED_EMPTY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.FUSED_READY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.HAS_REQUEST_HAS_VALUE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.HAS_REQUEST_NO_VALUE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.NO_REQUEST_HAS_VALUE` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.NO_REQUEST_NO_VALUE` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v0 @kind this, `n.b.c` v1 @kind object) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Ln/b/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L28ed18.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L28ed1e.  v0.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` := v1 @kind object;
  #L28ed22.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28ed34.  v0:= 4I;
  #L28ed36.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L28ed3c.  v0:= 0I;
  #L28ed3e.  v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v0 @kind object;
  #L28ed42.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L28ed54.  v0:= 32I;
  #L28ed58.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L28ed5e.  v0:= 0I;
  #L28ed60.  v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v0 @kind object;
  #L28ed64.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L28ed78.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28ed7e.  v0:= temp;
  #L28ed80.  v1:= 8I;
  #L28ed84.  v2:= 4I;
  #L28ed86.  if v0 != v1 then goto L28edb6;
  #L28ed8a.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L28ed8e.  v0:= 16I;
  #L28ed92.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L28ed98.  v0:= v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L28ed9c.  call `onNext`(v0, v4) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L28eda2.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28eda8.  v4:= temp;
  #L28edaa.  if v4 == v2 then goto L28edb4;
  #L28edae.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L28edb4.  return @kind void;
  #L28edb6.  v1:= v0 ^& -3;
  #L28edba.  if v1 == 0 then goto L28edc0;
  #L28edbe.  return @kind void;
  #L28edc0.  v1:= 2I;
  #L28edc2.  if v0 != v1 then goto L28edec;
  #L28edc6.  v0:= 3I;
  #L28edc8.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L28edce.  v0:= v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L28edd2.  call `onNext`(v0, v4) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L28edd8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28edde.  v4:= temp;
  #L28ede0.  if v4 == v2 then goto L28edea;
  #L28ede4.  call `onComplete`(v0) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L28edea.  return @kind void;
  #L28edec.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L28edf0.  v0:= 0I;
  #L28edf2.  v1:= 1I;
  #L28edf4.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L28edfa.  v0:= temp;
  #L28edfc.  if v0 == 0 then goto L28ee02;
  #L28ee00.  return @kind void;
  #L28ee02.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28ee08.  v0:= temp;
  #L28ee0a.  if v0 != v2 then goto L28ed80;
  #L28ee0e.  v4:= 0I;
  #L28ee10.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L28ee14.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L28ec40.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28ec46.  v0:= temp;
  #L28ec48.  v1:= 4I;
  #L28ec4a.  if v0 != v1 then goto L28ec52;
  #L28ec4e.  v0:= 1I;
  #L28ec50.  goto L28ec54;
  #L28ec52.  v0:= 0I;
  #L28ec54.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L28ec68.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28ec6e.  v0:= temp;
  #L28ec70.  v1:= 16I;
  #L28ec74.  if v0 == v1 then goto L28ec7c;
  #L28ec78.  v0:= 1I;
  #L28ec7a.  goto L28ec7e;
  #L28ec7c.  v0:= 0I;
  #L28ec7e.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v3 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L28ece0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28ece6.  v0:= temp;
  #L28ece8.  v1:= 0I;
  #L28ecea.  v2:= 16I;
  #L28ecee.  if v0 != v2 then goto L28ed06;
  #L28ecf2.  v0:= 32I;
  #L28ecf6.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L28ecfc.  v0:= v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L28ed00.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v1 @kind object;
  #L28ed04.  return v0 @kind object;
  #L28ed06.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L28ee28.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L28ee2e.  v2:= temp;
  #L28ee30.  if v2 == 0 then goto L28ee98;
  #L28ee34.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28ee3a.  v2:= temp;
  #L28ee3c.  v3:= v2 ^& -2;
  #L28ee40.  if v3 == 0 then goto L28ee46;
  #L28ee44.  return @kind void;
  #L28ee46.  v3:= 1I;
  #L28ee48.  if v2 != v3 then goto L28ee88;
  #L28ee4c.  v2:= 3I;
  #L28ee4e.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L28ee54.  v2:= temp;
  #L28ee56.  if v2 == 0 then goto L28ee86;
  #L28ee5a.  v2:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L28ee5e.  if v2 == 0 then goto L28ee86;
  #L28ee62.  v3:= 0I;
  #L28ee64.  v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v3 @kind object;
  #L28ee68.  v3:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`n.b.c` @kind object;
  #L28ee6c.  call `onNext`(v3, v2) @signature `Ln/b/c;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L28ee72.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L28ee78.  v2:= temp;
  #L28ee7a.  v0:= 4I;
  #L28ee7c.  if v2 == v0 then goto L28ee86;
  #L28ee80.  call `onComplete`(v3) @signature `Ln/b/c;.onComplete:()V` @kind interface;
  #L28ee86.  return @kind void;
  #L28ee88.  v2:= 0I;
  #L28ee8a.  v3:= 2I;
  #L28ee8c.  call temp:= `compareAndSet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L28ee92.  v2:= temp;
  #L28ee94.  if v2 == 0 then goto L28ee34;
  #L28ee98.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L28ecb8.  v0:= 2I;
  #L28ecba.  v2:= v2 ^& v0 @kind int;
  #L28ecbc.  if v2 == 0 then goto L28eccc;
  #L28ecc0.  v2:= 8I;
  #L28ecc4.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L28ecca.  return v0;
  #L28eccc.  v2:= 0I;
  #L28ecce.  return v2;
}
procedure `boolean` `tryCancel`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.tryCancel:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L28ec90.  v0:= 4I;
  #L28ec92.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L28ec98.  v1:= temp;
  #L28ec9a.  if v1 == v0 then goto L28eca2;
  #L28ec9e.  v0:= 1I;
  #L28eca0.  goto L28eca4;
  #L28eca2.  v0:= 0I;
  #L28eca4.  return v0;
}
