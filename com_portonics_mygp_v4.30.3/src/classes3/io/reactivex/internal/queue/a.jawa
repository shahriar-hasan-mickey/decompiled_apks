record `io.reactivex.internal.queue.a` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.e0.a.i` @kind interface {
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.queue.a.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.queue.a.e` @AccessFlag ;
  `long` `io.reactivex.internal.queue.a.f` @AccessFlag ;
  `int` `io.reactivex.internal.queue.a.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.internal.queue.a.h` @AccessFlag ;
  `int` `io.reactivex.internal.queue.a.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.internal.queue.a.j` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.queue.a.k` @AccessFlag FINAL;
}
global `int` `@@io.reactivex.internal.queue.a.b` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.queue.a.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/queue/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L28af84.  v0:= "jctools.spsc.max.lookahead.step" @kind object;
  #L28af88.  v1:= 4096I;
  #L28af8c.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L28af92.  v0:= temp @kind object;
  #L28af94.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L28af9a.  v0:= temp;
  #L28af9c.  `@@io.reactivex.internal.queue.a.b` @type ^`int` := v0;
  #L28afa0.  v0:= new `java.lang.Object`;
  #L28afa4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28afaa.  `@@io.reactivex.internal.queue.a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L28afae.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.queue.a` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/queue/a;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L28afc0.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28afc6.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L28afca.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L28afd0.  v3.`io.reactivex.internal.queue.a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L28afd4.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L28afd8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L28afde.  v3.`io.reactivex.internal.queue.a.k` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L28afe2.  v0:= 8I;
  #L28afe6.  call temp:= `max`(v0, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L28afec.  v4:= temp;
  #L28afee.  call temp:= `a`(v4) @signature `Lio/reactivex/internal/util/j;.a:(I)I` @kind static;
  #L28aff4.  v4:= temp;
  #L28aff6.  v0:= v4 + -1;
  #L28affa.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L28affe.  v2:= v4 + 1;
  #L28b002.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L28b008.  v3.`io.reactivex.internal.queue.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L28b00c.  v3.`io.reactivex.internal.queue.a.g` @type ^`int` := v0;
  #L28b010.  call `a`(v3, v4) @signature `Lio/reactivex/internal/queue/a;.a:(I)V` @kind direct;
  #L28b016.  v3.`io.reactivex.internal.queue.a.j` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L28b01a.  v3.`io.reactivex.internal.queue.a.i` @type ^`int` := v0;
  #L28b01e.  v0:= v0 + -1;
  #L28b022.  v0:= (`long`) v0 @kind i2l;
  #L28b024.  v3.`io.reactivex.internal.queue.a.f` @type ^`long` := v0 @kind wide;
  #L28b028.  v0:= 0L;
  #L28b02c.  call `r`(v3, v0) @signature `Lio/reactivex/internal/queue/a;.r:(J)V` @kind direct;
  #L28b032.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.queue.a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/queue/a;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L28b044.  v2:= v2 / 4;
  #L28b048.  v0:= `@@io.reactivex.internal.queue.a.b` @type ^`int`;
  #L28b04c.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L28b052.  v2:= temp;
  #L28b054.  v1.`io.reactivex.internal.queue.a.e` @type ^`int` := v2;
  #L28b058.  return @kind void;
}
procedure `int` `b`(`int` v0 ) @signature `Lio/reactivex/internal/queue/a;.b:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L28ad18.  return v0;
}
procedure `int` `c`(`long` v0 , `int` v2 ) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L28ad2c.  v1:= (`int`) v0 @kind l2i;
  #L28ad2e.  v0:= v1 ^& v2 @kind int;
  #L28ad32.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/queue/a;.b:(I)I` @kind static;
  #L28ad38.  v0:= temp;
  #L28ad3a.  return v0;
}
procedure `long` `d`(`io.reactivex.internal.queue.a` v2 @kind this) @signature `Lio/reactivex/internal/queue/a;.d:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L28af04.  v0:= v2.`io.reactivex.internal.queue.a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L28af08.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L28af0e.  v0:= temp @kind wide;
  #L28af10.  return v0 @kind wide;
}
procedure `long` `e`(`io.reactivex.internal.queue.a` v2 @kind this) @signature `Lio/reactivex/internal/queue/a;.e:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L28af24.  v0:= v2.`io.reactivex.internal.queue.a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L28af28.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L28af2e.  v0:= temp @kind wide;
  #L28af30.  return v0 @kind wide;
}
procedure `long` `f`(`io.reactivex.internal.queue.a` v2 @kind this) @signature `Lio/reactivex/internal/queue/a;.f:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L28af44.  v0:= v2.`io.reactivex.internal.queue.a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L28af48.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L28af4e.  v0:= temp @kind wide;
  #L28af50.  return v0 @kind wide;
}
procedure `java.lang.Object` `g`(`java.util.concurrent.atomic.AtomicReferenceArray` v0 @kind object, `int` v1 ) @signature `Lio/reactivex/internal/queue/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L28ad88.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L28ad8e.  v0:= temp @kind object;
  #L28ad90.  return v0 @kind object;
}
procedure `java.util.concurrent.atomic.AtomicReferenceArray` `h`(`io.reactivex.internal.queue.a` v2 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/queue/a;.h:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L28aed4.  call temp:= `b`(v4) @signature `Lio/reactivex/internal/queue/a;.b:(I)I` @kind static;
  #L28aeda.  v4:= temp;
  #L28aedc.  call temp:= `g`(v3, v4) @signature `Lio/reactivex/internal/queue/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L28aee2.  v0:= temp @kind object;
  #L28aee4.  v0:= (`java.util.concurrent.atomic.AtomicReferenceArray`) v0 @kind object;
  #L28aee8.  v1:= 0I;
  #L28aeea.  call `p`(v3, v4, v1) @signature `Lio/reactivex/internal/queue/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L28aef0.  return v0 @kind object;
}
procedure `long` `i`(`io.reactivex.internal.queue.a` v2 @kind this) @signature `Lio/reactivex/internal/queue/a;.i:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L28af64.  v0:= v2.`io.reactivex.internal.queue.a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L28af68.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L28af6e.  v0:= temp @kind wide;
  #L28af70.  return v0 @kind wide;
}
procedure `java.lang.Object` `j`(`io.reactivex.internal.queue.a` v0 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/internal/queue/a;.j:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;

  #L28ada4.  v0.`io.reactivex.internal.queue.a.j` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L28ada8.  call temp:= `c`(v2, v4) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @kind static;
  #L28adae.  v2:= temp;
  #L28adb0.  call temp:= `g`(v1, v2) @signature `Lio/reactivex/internal/queue/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L28adb6.  v1:= temp @kind object;
  #L28adb8.  return v1 @kind object;
}
procedure `java.lang.Object` `k`(`io.reactivex.internal.queue.a` v3 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v4 @kind object, `long` v5 , `int` v7 ) @signature `Lio/reactivex/internal/queue/a;.k:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L28adcc.  v3.`io.reactivex.internal.queue.a.j` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v4 @kind object;
  #L28add0.  call temp:= `c`(v5, v7) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @kind static;
  #L28add6.  v7:= temp;
  #L28add8.  call temp:= `g`(v4, v7) @signature `Lio/reactivex/internal/queue/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L28adde.  v0:= temp @kind object;
  #L28ade0.  if v0 == 0 then goto L28adf8;
  #L28ade4.  v1:= 0I;
  #L28ade6.  call `p`(v4, v7, v1) @signature `Lio/reactivex/internal/queue/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L28adec.  v1:= 1L;
  #L28adf0.  v5:= v5 + v1 @kind long;
  #L28adf2.  call `o`(v3, v5) @signature `Lio/reactivex/internal/queue/a;.o:(J)V` @kind direct;
  #L28adf8.  return v0 @kind object;
}
procedure `void` `m`(`io.reactivex.internal.queue.a` v4 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v5 @kind object, `long` v6 , `int` v8 , `java.lang.Object` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/internal/queue/a;.m:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L28b098.  call temp:= `length`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L28b09e.  v0:= temp;
  #L28b0a0.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L28b0a4.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L28b0aa.  v4.`io.reactivex.internal.queue.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L28b0ae.  v10:= v10 + v6 @kind long;
  #L28b0b0.  v2:= 1L;
  #L28b0b4.  v10:= v10 - v2 @kind long;
  #L28b0b6.  v4.`io.reactivex.internal.queue.a.f` @type ^`long` := v10 @kind wide;
  #L28b0ba.  call `p`(v1, v8, v9) @signature `Lio/reactivex/internal/queue/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L28b0c0.  call `q`(v4, v5, v1) @signature `Lio/reactivex/internal/queue/a;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V` @kind direct;
  #L28b0c6.  v9:= `@@io.reactivex.internal.queue.a.c` @type ^`java.lang.Object` @kind object;
  #L28b0ca.  call `p`(v5, v8, v9) @signature `Lio/reactivex/internal/queue/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L28b0d0.  v6:= v6 + v2 @kind long;
  #L28b0d2.  call `r`(v4, v6) @signature `Lio/reactivex/internal/queue/a;.r:(J)V` @kind direct;
  #L28b0d8.  return @kind void;
}
procedure `void` `o`(`io.reactivex.internal.queue.a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/queue/a;.o:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L28b0ec.  v0:= v1.`io.reactivex.internal.queue.a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L28b0f0.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L28b0f6.  return @kind void;
}
procedure `void` `p`(`java.util.concurrent.atomic.AtomicReferenceArray` v0 @kind object, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/queue/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L28b108.  call `lazySet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L28b10e.  return @kind void;
}
procedure `void` `q`(`io.reactivex.internal.queue.a` v1 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v2 @kind object, `java.util.concurrent.atomic.AtomicReferenceArray` v3 @kind object) @signature `Lio/reactivex/internal/queue/a;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L28b120.  call temp:= `length`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L28b126.  v0:= temp;
  #L28b128.  v0:= v0 + -1;
  #L28b12c.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/queue/a;.b:(I)I` @kind static;
  #L28b132.  v0:= temp;
  #L28b134.  call `p`(v2, v0, v3) @signature `Lio/reactivex/internal/queue/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L28b13a.  return @kind void;
}
procedure `void` `r`(`io.reactivex.internal.queue.a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/queue/a;.r:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L28b14c.  v0:= v1.`io.reactivex.internal.queue.a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L28b150.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L28b156.  return @kind void;
}
procedure `boolean` `s`(`io.reactivex.internal.queue.a` v0 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v1 @kind object, `java.lang.Object` v2 @kind object, `long` v3 , `int` v5 ) @signature `Lio/reactivex/internal/queue/a;.s:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @AccessFlag PRIVATE {
    temp;

  #L28acf0.  call `p`(v1, v5, v2) @signature `Lio/reactivex/internal/queue/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L28acf6.  v1:= 1L;
  #L28acfa.  v3:= v3 + v1 @kind long;
  #L28acfc.  call `r`(v0, v3) @signature `Lio/reactivex/internal/queue/a;.r:(J)V` @kind direct;
  #L28ad02.  v1:= 1I;
  #L28ad04.  return v1;
}
procedure `void` `clear`(`io.reactivex.internal.queue.a` v1 @kind this) @signature `Lio/reactivex/internal/queue/a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28b06c.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L28b072.  v0:= temp @kind object;
  #L28b074.  if v0 != 0 then goto L28b06c;
  #L28b078.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @kind virtual;
  #L28b07e.  v0:= temp;
  #L28b080.  if v0 != 0 then goto L28b086;
  #L28b084.  goto L28b06c;
  #L28b086.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.queue.a` v5 @kind this) @signature `Lio/reactivex/internal/queue/a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L28ab64.  call temp:= `i`(v5) @signature `Lio/reactivex/internal/queue/a;.i:()J` @kind direct;
  #L28ab6a.  v0:= temp @kind wide;
  #L28ab6c.  call temp:= `f`(v5) @signature `Lio/reactivex/internal/queue/a;.f:()J` @kind direct;
  #L28ab72.  v2:= temp @kind wide;
  #L28ab74.  v4:= lcmp(v0, v2);
  #L28ab78.  if v4 != 0 then goto L28ab80;
  #L28ab7c.  v0:= 1I;
  #L28ab7e.  goto L28ab82;
  #L28ab80.  v0:= 0I;
  #L28ab82.  return v0;
}
procedure `boolean` `l`(`io.reactivex.internal.queue.a` v8 @kind this, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/queue/a;.l:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L28ac4c.  v0:= v8.`io.reactivex.internal.queue.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L28ac50.  call temp:= `i`(v8) @signature `Lio/reactivex/internal/queue/a;.i:()J` @kind direct;
  #L28ac56.  v1:= temp @kind wide;
  #L28ac58.  v3:= v8.`io.reactivex.internal.queue.a.g` @type ^`int`;
  #L28ac5c.  v4:= 2L;
  #L28ac60.  v4:= v4 + v1 @kind long;
  #L28ac62.  call temp:= `c`(v4, v3) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @kind static;
  #L28ac68.  v6:= temp;
  #L28ac6a.  call temp:= `g`(v0, v6) @signature `Lio/reactivex/internal/queue/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L28ac70.  v6:= temp @kind object;
  #L28ac72.  if v6 != 0 then goto L28ac96;
  #L28ac76.  call temp:= `c`(v1, v3) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @kind static;
  #L28ac7c.  v1:= temp;
  #L28ac7e.  v2:= v1 + 1;
  #L28ac82.  call `p`(v0, v2, v10) @signature `Lio/reactivex/internal/queue/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L28ac88.  call `p`(v0, v1, v9) @signature `Lio/reactivex/internal/queue/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L28ac8e.  call `r`(v8, v4) @signature `Lio/reactivex/internal/queue/a;.r:(J)V` @kind direct;
  #L28ac94.  goto L28acda;
  #L28ac96.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L28ac9c.  v6:= temp;
  #L28ac9e.  v7:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L28aca2.  call `<init>`(v7, v6) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L28aca8.  v8.`io.reactivex.internal.queue.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v7 @kind object;
  #L28acac.  call temp:= `c`(v1, v3) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @kind static;
  #L28acb2.  v1:= temp;
  #L28acb4.  v2:= v1 + 1;
  #L28acb8.  call `p`(v7, v2, v10) @signature `Lio/reactivex/internal/queue/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L28acbe.  call `p`(v7, v1, v9) @signature `Lio/reactivex/internal/queue/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L28acc4.  call `q`(v8, v0, v7) @signature `Lio/reactivex/internal/queue/a;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V` @kind direct;
  #L28acca.  v9:= `@@io.reactivex.internal.queue.a.c` @type ^`java.lang.Object` @kind object;
  #L28acce.  call `p`(v0, v1, v9) @signature `Lio/reactivex/internal/queue/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L28acd4.  call `r`(v8, v4) @signature `Lio/reactivex/internal/queue/a;.r:(J)V` @kind direct;
  #L28acda.  v9:= 1I;
  #L28acdc.  return v9;
}
procedure `int` `n`(`io.reactivex.internal.queue.a` v7 @kind this) @signature `Lio/reactivex/internal/queue/a;.n:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L28ad4c.  call temp:= `f`(v7) @signature `Lio/reactivex/internal/queue/a;.f:()J` @kind direct;
  #L28ad52.  v0:= temp @kind wide;
  #L28ad54.  call temp:= `i`(v7) @signature `Lio/reactivex/internal/queue/a;.i:()J` @kind direct;
  #L28ad5a.  v2:= temp @kind wide;
  #L28ad5c.  call temp:= `f`(v7) @signature `Lio/reactivex/internal/queue/a;.f:()J` @kind direct;
  #L28ad62.  v4:= temp @kind wide;
  #L28ad64.  v6:= lcmp(v0, v4);
  #L28ad68.  if v6 != 0 then goto L28ad72;
  #L28ad6c.  v2:= v2 - v4 @kind long;
  #L28ad6e.  v0:= (`int`) v2 @kind l2i;
  #L28ad70.  return v0;
  #L28ad72.  v0:= v4 @kind wide;
  #L28ad74.  goto L28ad54;
}
procedure `boolean` `offer`(`io.reactivex.internal.queue.a` v11 @kind this, `java.lang.Object` v12 @kind object) @signature `Lio/reactivex/internal/queue/a;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L28ab94.  v0:= "Null is not a valid element" @kind object;
  #L28ab98.  call temp:= `requireNonNull`(v12, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L28ab9e.  v2:= v11.`io.reactivex.internal.queue.a.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L28aba2.  call temp:= `e`(v11) @signature `Lio/reactivex/internal/queue/a;.e:()J` @kind direct;
  #L28aba8.  v4:= temp @kind wide;
  #L28abaa.  v0:= v11.`io.reactivex.internal.queue.a.g` @type ^`int`;
  #L28abae.  call temp:= `c`(v4, v0) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @kind static;
  #L28abb4.  v6:= temp;
  #L28abb6.  v7:= v11.`io.reactivex.internal.queue.a.f` @type ^`long` @kind wide;
  #L28abba.  v1:= lcmp(v4, v7);
  #L28abbe.  if v1 >= 0 then goto L28abd0;
  #L28abc2.  v1:= v11 @kind object;
  #L28abc4.  v3:= v12 @kind object;
  #L28abc6.  call temp:= `s`(v1, v2, v3, v4, v6) @signature `Lio/reactivex/internal/queue/a;.s:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L28abcc.  v12:= temp;
  #L28abce.  return v12;
  #L28abd0.  v1:= v11.`io.reactivex.internal.queue.a.e` @type ^`int`;
  #L28abd4.  v7:= (`long`) v1 @kind i2l;
  #L28abd6.  v7:= v7 + v4 @kind long;
  #L28abd8.  call temp:= `c`(v7, v0) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @kind static;
  #L28abde.  v1:= temp;
  #L28abe0.  call temp:= `g`(v2, v1) @signature `Lio/reactivex/internal/queue/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L28abe6.  v1:= temp @kind object;
  #L28abe8.  v9:= 1L;
  #L28abec.  if v1 != 0 then goto L28ac04;
  #L28abf0.  v7:= v7 - v9 @kind long;
  #L28abf2.  v11.`io.reactivex.internal.queue.a.f` @type ^`long` := v7 @kind wide;
  #L28abf6.  v1:= v11 @kind object;
  #L28abf8.  v3:= v12 @kind object;
  #L28abfa.  call temp:= `s`(v1, v2, v3, v4, v6) @signature `Lio/reactivex/internal/queue/a;.s:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L28ac00.  v12:= temp;
  #L28ac02.  return v12;
  #L28ac04.  v9:= v9 + v4 @kind long;
  #L28ac06.  call temp:= `c`(v9, v0) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @kind static;
  #L28ac0c.  v1:= temp;
  #L28ac0e.  call temp:= `g`(v2, v1) @signature `Lio/reactivex/internal/queue/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L28ac14.  v1:= temp @kind object;
  #L28ac16.  if v1 != 0 then goto L28ac28;
  #L28ac1a.  v1:= v11 @kind object;
  #L28ac1c.  v3:= v12 @kind object;
  #L28ac1e.  call temp:= `s`(v1, v2, v3, v4, v6) @signature `Lio/reactivex/internal/queue/a;.s:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L28ac24.  v12:= temp;
  #L28ac26.  return v12;
  #L28ac28.  v7:= (`long`) v0 @kind i2l;
  #L28ac2a.  v1:= v11 @kind object;
  #L28ac2c.  v3:= v4 @kind wide;
  #L28ac2e.  v5:= v6;
  #L28ac30.  v6:= v12 @kind object;
  #L28ac32.  call `m`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/queue/a;.m:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V` @kind direct;
  #L28ac38.  v12:= 1I;
  #L28ac3a.  return v12;
}
procedure `java.lang.Object` `peek`(`io.reactivex.internal.queue.a` v6 @kind this) @signature `Lio/reactivex/internal/queue/a;.peek:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L28ae0c.  v0:= v6.`io.reactivex.internal.queue.a.j` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L28ae10.  call temp:= `d`(v6) @signature `Lio/reactivex/internal/queue/a;.d:()J` @kind direct;
  #L28ae16.  v1:= temp @kind wide;
  #L28ae18.  v3:= v6.`io.reactivex.internal.queue.a.i` @type ^`int`;
  #L28ae1c.  call temp:= `c`(v1, v3) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @kind static;
  #L28ae22.  v4:= temp;
  #L28ae24.  call temp:= `g`(v0, v4) @signature `Lio/reactivex/internal/queue/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L28ae2a.  v4:= temp @kind object;
  #L28ae2c.  v5:= `@@io.reactivex.internal.queue.a.c` @type ^`java.lang.Object` @kind object;
  #L28ae30.  if v4 != v5 then goto L28ae4a;
  #L28ae34.  v4:= v3 + 1;
  #L28ae38.  call temp:= `h`(v6, v0, v4) @signature `Lio/reactivex/internal/queue/a;.h:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @kind direct;
  #L28ae3e.  v0:= temp @kind object;
  #L28ae40.  call temp:= `j`(v6, v0, v1, v3) @signature `Lio/reactivex/internal/queue/a;.j:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @kind direct;
  #L28ae46.  v0:= temp @kind object;
  #L28ae48.  return v0 @kind object;
  #L28ae4a.  return v4 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.queue.a` v8 @kind this) @signature `Lio/reactivex/internal/queue/a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L28ae5c.  v0:= v8.`io.reactivex.internal.queue.a.j` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L28ae60.  call temp:= `d`(v8) @signature `Lio/reactivex/internal/queue/a;.d:()J` @kind direct;
  #L28ae66.  v1:= temp @kind wide;
  #L28ae68.  v3:= v8.`io.reactivex.internal.queue.a.i` @type ^`int`;
  #L28ae6c.  call temp:= `c`(v1, v3) @signature `Lio/reactivex/internal/queue/a;.c:(JI)I` @kind static;
  #L28ae72.  v4:= temp;
  #L28ae74.  call temp:= `g`(v0, v4) @signature `Lio/reactivex/internal/queue/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L28ae7a.  v5:= temp @kind object;
  #L28ae7c.  v6:= `@@io.reactivex.internal.queue.a.c` @type ^`java.lang.Object` @kind object;
  #L28ae80.  if v5 != v6 then goto L28ae88;
  #L28ae84.  v6:= 1I;
  #L28ae86.  goto L28ae8a;
  #L28ae88.  v6:= 0I;
  #L28ae8a.  v7:= 0I;
  #L28ae8c.  if v5 == 0 then goto L28aea8;
  #L28ae90.  if v6 != 0 then goto L28aea8;
  #L28ae94.  call `p`(v0, v4, v7) @signature `Lio/reactivex/internal/queue/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L28ae9a.  v3:= 1L;
  #L28ae9e.  v1:= v1 + v3 @kind long;
  #L28aea0.  call `o`(v8, v1) @signature `Lio/reactivex/internal/queue/a;.o:(J)V` @kind direct;
  #L28aea6.  return v5 @kind object;
  #L28aea8.  if v6 == 0 then goto L28aec2;
  #L28aeac.  v4:= v3 + 1;
  #L28aeb0.  call temp:= `h`(v8, v0, v4) @signature `Lio/reactivex/internal/queue/a;.h:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @kind direct;
  #L28aeb6.  v0:= temp @kind object;
  #L28aeb8.  call temp:= `k`(v8, v0, v1, v3) @signature `Lio/reactivex/internal/queue/a;.k:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @kind direct;
  #L28aebe.  v0:= temp @kind object;
  #L28aec0.  return v0 @kind object;
  #L28aec2.  return v7 @kind object;
}
