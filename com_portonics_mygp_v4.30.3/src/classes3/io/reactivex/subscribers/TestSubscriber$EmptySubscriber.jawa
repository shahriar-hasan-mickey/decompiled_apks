record `io.reactivex.subscribers.TestSubscriber$EmptySubscriber` @kind class @AccessFlag FINAL_ENUM extends `java.lang.Enum` @kind class, `io.reactivex.h` @kind interface {
}
global `io.reactivex.subscribers.TestSubscriber$EmptySubscriber`[] `@@io.reactivex.subscribers.TestSubscriber$EmptySubscriber.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `io.reactivex.subscribers.TestSubscriber$EmptySubscriber` `@@io.reactivex.subscribers.TestSubscriber$EmptySubscriber.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L295cd8.  v0:= new `io.reactivex.subscribers.TestSubscriber$EmptySubscriber`;
  #L295cdc.  v1:= "INSTANCE" @kind object;
  #L295ce0.  v2:= 0I;
  #L295ce2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L295ce8.  `@@io.reactivex.subscribers.TestSubscriber$EmptySubscriber.INSTANCE` @type ^`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` := v0 @kind object;
  #L295cec.  v1:= 1I;
  #L295cee.  v1:= new `io.reactivex.subscribers.TestSubscriber$EmptySubscriber`[v1];
  #L295cf2.  v1[v2]:= v0 @kind object;
  #L295cf6.  `@@io.reactivex.subscribers.TestSubscriber$EmptySubscriber.$VALUES` @type ^`io.reactivex.subscribers.TestSubscriber$EmptySubscriber`[] := v1 @kind object;
  #L295cfa.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L295d0c.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L295d12.  return @kind void;
}
procedure `io.reactivex.subscribers.TestSubscriber$EmptySubscriber` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.valueOf:(Ljava/lang/String;)Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L295c90.  v0:= constclass @type ^`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` @kind object;
  #L295c94.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L295c9a.  v1:= temp @kind object;
  #L295c9c.  v1:= (`io.reactivex.subscribers.TestSubscriber$EmptySubscriber`) v1 @kind object;
  #L295ca0.  return v1 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber$EmptySubscriber`[] `values`() @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.values:()[Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L295cb4.  v0:= `@@io.reactivex.subscribers.TestSubscriber$EmptySubscriber.$VALUES` @type ^`io.reactivex.subscribers.TestSubscriber$EmptySubscriber`[] @kind object;
  #L295cb8.  call temp:= `clone`(v0) @signature `[Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.clone:()Ljava/lang/Object;` @kind virtual;
  #L295cbe.  v0:= temp @kind object;
  #L295cc0.  v0:= (`io.reactivex.subscribers.TestSubscriber$EmptySubscriber`[]) v0 @kind object;
  #L295cc4.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` v0 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L295d24.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L295d38.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L295d4c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subscribers.TestSubscriber$EmptySubscriber` v0 @kind this, `n.b.d` v1 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber$EmptySubscriber;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC {
    temp;

  #L295d60.  return @kind void;
}
