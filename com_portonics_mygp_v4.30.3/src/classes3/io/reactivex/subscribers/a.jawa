record `io.reactivex.subscribers.a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.h` @kind interface, `io.reactivex.disposables.b` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subscribers.a.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.subscribers.a` v1 @kind this) @signature `Lio/reactivex/subscribers/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L295bd0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L295bd6.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L295bda.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L295be0.  v1.`io.reactivex.subscribers.a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L295be4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.subscribers.a` v0 @kind this) @signature `Lio/reactivex/subscribers/a;.a:()V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L295bf8.  call `dispose`(v0) @signature `Lio/reactivex/subscribers/a;.dispose:()V` @kind virtual;
  #L295bfe.  return @kind void;
}
procedure `void` `b`(`io.reactivex.subscribers.a` v3 @kind this) @signature `Lio/reactivex/subscribers/a;.b:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L295c2c.  v0:= v3.`io.reactivex.subscribers.a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L295c30.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L295c36.  v0:= temp @kind object;
  #L295c38.  v0:= (`n.b.d`) v0 @kind object;
  #L295c3c.  v1:= 9223372036854775807L;
  #L295c46.  call `request`(v0, v1) @signature `Ln/b/d;.request:(J)V` @kind interface;
  #L295c4c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subscribers.a` v1 @kind this) @signature `Lio/reactivex/subscribers/a;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L295c10.  v0:= v1.`io.reactivex.subscribers.a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L295c14.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L295c1a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subscribers.a` v2 @kind this) @signature `Lio/reactivex/subscribers/a;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L295ba4.  v0:= v2.`io.reactivex.subscribers.a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L295ba8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L295bae.  v0:= temp @kind object;
  #L295bb0.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L295bb4.  if v0 != v1 then goto L295bbc;
  #L295bb8.  v0:= 1I;
  #L295bba.  goto L295bbe;
  #L295bbc.  v0:= 0I;
  #L295bbe.  return v0;
}
procedure `void` `onSubscribe`(`io.reactivex.subscribers.a` v2 @kind this, `n.b.d` v3 @kind object) @signature `Lio/reactivex/subscribers/a;.onSubscribe:(Ln/b/d;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L295c60.  v0:= v2.`io.reactivex.subscribers.a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L295c64.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L295c6a.  v1:= temp @kind object;
  #L295c6c.  call temp:= `d`(v0, v3, v1) @signature `Lio/reactivex/internal/util/f;.d:(Ljava/util/concurrent/atomic/AtomicReference;Ln/b/d;Ljava/lang/Class;)Z` @kind static;
  #L295c72.  v3:= temp;
  #L295c74.  if v3 == 0 then goto L295c7e;
  #L295c78.  call `b`(v2) @signature `Lio/reactivex/subscribers/a;.b:()V` @kind virtual;
  #L295c7e.  return @kind void;
}
