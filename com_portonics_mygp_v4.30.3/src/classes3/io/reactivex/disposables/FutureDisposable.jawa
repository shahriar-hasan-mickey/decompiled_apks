record `io.reactivex.disposables.FutureDisposable` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.b` @kind interface {
  `boolean` `io.reactivex.disposables.FutureDisposable.allowInterrupt` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@io.reactivex.disposables.FutureDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.disposables.FutureDisposable` v0 @kind this, `java.util.concurrent.Future` v1 @kind object, `boolean` v2 ) @signature `Lio/reactivex/disposables/FutureDisposable;.<init>:(Ljava/util/concurrent/Future;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L246dec.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L246df2.  v0.`io.reactivex.disposables.FutureDisposable.allowInterrupt` @type ^`boolean` := v2 @kind boolean;
  #L246df6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.disposables.FutureDisposable` v2 @kind this) @signature `Lio/reactivex/disposables/FutureDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L246e08.  v0:= 0I;
  #L246e0a.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L246e10.  v0:= temp @kind object;
  #L246e12.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L246e16.  if v0 == 0 then goto L246e24;
  #L246e1a.  v1:= v2.`io.reactivex.disposables.FutureDisposable.allowInterrupt` @type ^`boolean` @kind boolean;
  #L246e1e.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L246e24.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.disposables.FutureDisposable` v1 @kind this) @signature `Lio/reactivex/disposables/FutureDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L246db4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L246dba.  v0:= temp @kind object;
  #L246dbc.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L246dc0.  if v0 == 0 then goto L246dd6;
  #L246dc4.  call temp:= `isDone`(v0) @signature `Ljava/util/concurrent/Future;.isDone:()Z` @kind interface;
  #L246dca.  v0:= temp;
  #L246dcc.  if v0 == 0 then goto L246dd2;
  #L246dd0.  goto L246dd6;
  #L246dd2.  v0:= 0I;
  #L246dd4.  goto L246dd8;
  #L246dd6.  v0:= 1I;
  #L246dd8.  return v0;
}
