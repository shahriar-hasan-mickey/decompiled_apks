record `io.opencensus.trace.p` @kind class @AccessFlag PUBLIC_FINAL {
  `io.opencensus.trace.u` `io.opencensus.trace.p.c` @AccessFlag PRIVATE_FINAL;
  `io.opencensus.trace.q` `io.opencensus.trace.p.d` @AccessFlag PRIVATE_FINAL;
  `io.opencensus.trace.v` `io.opencensus.trace.p.e` @AccessFlag PRIVATE_FINAL;
  `io.opencensus.trace.b0` `io.opencensus.trace.p.f` @AccessFlag PRIVATE_FINAL;
}
global `io.opencensus.trace.b0` `@@io.opencensus.trace.p.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.opencensus.trace.p` `@@io.opencensus.trace.p.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/opencensus/trace/p;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L23e910.  call temp:= `b`() @signature `Lio/opencensus/trace/b0;.b:()Lio/opencensus/trace/a0;` @kind static;
  #L23e916.  v0:= temp @kind object;
  #L23e918.  call temp:= `b`(v0) @signature `Lio/opencensus/trace/a0;.b:()Lio/opencensus/trace/b0;` @kind virtual;
  #L23e91e.  v0:= temp @kind object;
  #L23e920.  `@@io.opencensus.trace.p.a` @type ^`io.opencensus.trace.b0` := v0 @kind object;
  #L23e924.  v1:= new `io.opencensus.trace.p`;
  #L23e928.  v2:= `@@io.opencensus.trace.u.b` @type ^`io.opencensus.trace.u` @kind object;
  #L23e92c.  v3:= `@@io.opencensus.trace.q.b` @type ^`io.opencensus.trace.q` @kind object;
  #L23e930.  v4:= `@@io.opencensus.trace.v.a` @type ^`io.opencensus.trace.v` @kind object;
  #L23e934.  call `<init>`(v1, v2, v3, v4, v0) @signature `Lio/opencensus/trace/p;.<init>:(Lio/opencensus/trace/u;Lio/opencensus/trace/q;Lio/opencensus/trace/v;Lio/opencensus/trace/b0;)V` @kind direct;
  #L23e93a.  `@@io.opencensus.trace.p.b` @type ^`io.opencensus.trace.p` := v1 @kind object;
  #L23e93e.  return @kind void;
}
procedure `void` `<init>`(`io.opencensus.trace.p` v0 @kind this, `io.opencensus.trace.u` v1 @kind object, `io.opencensus.trace.q` v2 @kind object, `io.opencensus.trace.v` v3 @kind object, `io.opencensus.trace.b0` v4 @kind object) @signature `Lio/opencensus/trace/p;.<init>:(Lio/opencensus/trace/u;Lio/opencensus/trace/q;Lio/opencensus/trace/v;Lio/opencensus/trace/b0;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L23e950.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23e956.  v0.`io.opencensus.trace.p.c` @type ^`io.opencensus.trace.u` := v1 @kind object;
  #L23e95a.  v0.`io.opencensus.trace.p.d` @type ^`io.opencensus.trace.q` := v2 @kind object;
  #L23e95e.  v0.`io.opencensus.trace.p.e` @type ^`io.opencensus.trace.v` := v3 @kind object;
  #L23e962.  v0.`io.opencensus.trace.p.f` @type ^`io.opencensus.trace.b0` := v4 @kind object;
  #L23e966.  return @kind void;
}
procedure `io.opencensus.trace.v` `a`(`io.opencensus.trace.p` v1 @kind this) @signature `Lio/opencensus/trace/p;.a:()Lio/opencensus/trace/v;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23e88c.  v0:= v1.`io.opencensus.trace.p.e` @type ^`io.opencensus.trace.v` @kind object;
  #L23e890.  return v0 @kind object;
}
procedure `boolean` `equals`(`io.opencensus.trace.p` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/opencensus/trace/p;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23e7e0.  v0:= 1I;
  #L23e7e2.  if v5 != v4 then goto L23e7e8;
  #L23e7e6.  return v0;
  #L23e7e8.  v1:= instanceof @variable v5 @type ^`io.opencensus.trace.p` @kind boolean;
  #L23e7ec.  v2:= 0I;
  #L23e7ee.  if v1 != 0 then goto L23e7f4;
  #L23e7f2.  return v2;
  #L23e7f4.  v5:= (`io.opencensus.trace.p`) v5 @kind object;
  #L23e7f8.  v1:= v4.`io.opencensus.trace.p.c` @type ^`io.opencensus.trace.u` @kind object;
  #L23e7fc.  v3:= v5.`io.opencensus.trace.p.c` @type ^`io.opencensus.trace.u` @kind object;
  #L23e800.  call temp:= `equals`(v1, v3) @signature `Lio/opencensus/trace/u;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23e806.  v1:= temp;
  #L23e808.  if v1 == 0 then goto L23e836;
  #L23e80c.  v1:= v4.`io.opencensus.trace.p.d` @type ^`io.opencensus.trace.q` @kind object;
  #L23e810.  v3:= v5.`io.opencensus.trace.p.d` @type ^`io.opencensus.trace.q` @kind object;
  #L23e814.  call temp:= `equals`(v1, v3) @signature `Lio/opencensus/trace/q;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23e81a.  v1:= temp;
  #L23e81c.  if v1 == 0 then goto L23e836;
  #L23e820.  v1:= v4.`io.opencensus.trace.p.e` @type ^`io.opencensus.trace.v` @kind object;
  #L23e824.  v5:= v5.`io.opencensus.trace.p.e` @type ^`io.opencensus.trace.v` @kind object;
  #L23e828.  call temp:= `equals`(v1, v5) @signature `Lio/opencensus/trace/v;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23e82e.  v5:= temp;
  #L23e830.  if v5 == 0 then goto L23e836;
  #L23e834.  goto L23e838;
  #L23e836.  v0:= 0I;
  #L23e838.  return v0;
}
procedure `int` `hashCode`(`io.opencensus.trace.p` v3 @kind this) @signature `Lio/opencensus/trace/p;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23e84c.  v0:= 3I;
  #L23e84e.  v0:= new `java.lang.Object`[v0];
  #L23e852.  v1:= v3.`io.opencensus.trace.p.c` @type ^`io.opencensus.trace.u` @kind object;
  #L23e856.  v2:= 0I;
  #L23e858.  v0[v2]:= v1 @kind object;
  #L23e85c.  v1:= v3.`io.opencensus.trace.p.d` @type ^`io.opencensus.trace.q` @kind object;
  #L23e860.  v2:= 1I;
  #L23e862.  v0[v2]:= v1 @kind object;
  #L23e866.  v1:= v3.`io.opencensus.trace.p.e` @type ^`io.opencensus.trace.v` @kind object;
  #L23e86a.  v2:= 2I;
  #L23e86c.  v0[v2]:= v1 @kind object;
  #L23e870.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L23e876.  v0:= temp;
  #L23e878.  return v0;
}
procedure `java.lang.String` `toString`(`io.opencensus.trace.p` v2 @kind this) @signature `Lio/opencensus/trace/p;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23e8a4.  v0:= new `java.lang.StringBuilder`;
  #L23e8a8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23e8ae.  v1:= "SpanContext{traceId=" @kind object;
  #L23e8b2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23e8b8.  v1:= v2.`io.opencensus.trace.p.c` @type ^`io.opencensus.trace.u` @kind object;
  #L23e8bc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23e8c2.  v1:= ", spanId=" @kind object;
  #L23e8c6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23e8cc.  v1:= v2.`io.opencensus.trace.p.d` @type ^`io.opencensus.trace.q` @kind object;
  #L23e8d0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23e8d6.  v1:= ", traceOptions=" @kind object;
  #L23e8da.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23e8e0.  v1:= v2.`io.opencensus.trace.p.e` @type ^`io.opencensus.trace.v` @kind object;
  #L23e8e4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23e8ea.  v1:= "}" @kind object;
  #L23e8ee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23e8f4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23e8fa.  v0:= temp @kind object;
  #L23e8fc.  return v0 @kind object;
}
