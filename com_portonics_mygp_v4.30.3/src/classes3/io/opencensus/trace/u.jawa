record `io.opencensus.trace.u` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Comparable` @kind interface {
  `long` `io.opencensus.trace.u.c` @AccessFlag PRIVATE_FINAL;
  `long` `io.opencensus.trace.u.d` @AccessFlag PRIVATE_FINAL;
}
global `io.opencensus.trace.u` `@@io.opencensus.trace.u.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/opencensus/trace/u;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L23f414.  v0:= new `io.opencensus.trace.u`;
  #L23f418.  v1:= 0L;
  #L23f41c.  call `<init>`(v0, v1, v1) @signature `Lio/opencensus/trace/u;.<init>:(JJ)V` @kind direct;
  #L23f422.  `@@io.opencensus.trace.u.b` @type ^`io.opencensus.trace.u` := v0 @kind object;
  #L23f426.  return @kind void;
}
procedure `void` `<init>`(`io.opencensus.trace.u` v0 @kind this, `long` v1 , `long` v3 ) @signature `Lio/opencensus/trace/u;.<init>:(JJ)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L23f438.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23f43e.  v0.`io.opencensus.trace.u.c` @type ^`long` := v1 @kind wide;
  #L23f442.  v0.`io.opencensus.trace.u.d` @type ^`long` := v3 @kind wide;
  #L23f446.  return @kind void;
}
procedure `int` `a`(`io.opencensus.trace.u` v7 @kind this, `io.opencensus.trace.u` v8 @kind object) @signature `Lio/opencensus/trace/u;.a:(Lio/opencensus/trace/u;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23f2f0.  v0:= v7.`io.opencensus.trace.u.c` @type ^`long` @kind wide;
  #L23f2f4.  v2:= v8.`io.opencensus.trace.u.c` @type ^`long` @kind wide;
  #L23f2f8.  v4:= -1I;
  #L23f2fa.  v5:= 1I;
  #L23f2fc.  v6:= lcmp(v0, v2);
  #L23f300.  if v6 != 0 then goto L23f326;
  #L23f304.  v0:= v7.`io.opencensus.trace.u.d` @type ^`long` @kind wide;
  #L23f308.  v2:= v8.`io.opencensus.trace.u.d` @type ^`long` @kind wide;
  #L23f30c.  v8:= lcmp(v0, v2);
  #L23f310.  if v8 != 0 then goto L23f318;
  #L23f314.  v8:= 0I;
  #L23f316.  return v8;
  #L23f318.  v8:= lcmp(v0, v2);
  #L23f31c.  if v8 >= 0 then goto L23f322;
  #L23f320.  goto L23f324;
  #L23f322.  v4:= 1I;
  #L23f324.  return v4;
  #L23f326.  v8:= lcmp(v0, v2);
  #L23f32a.  if v8 >= 0 then goto L23f330;
  #L23f32e.  goto L23f332;
  #L23f330.  v4:= 1I;
  #L23f332.  return v4;
}
procedure `void` `b`(`io.opencensus.trace.u` v2 @kind this, `char`[] v3 @kind object, `int` v4 ) @signature `Lio/opencensus/trace/u;.b:([CI)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23f458.  v0:= v2.`io.opencensus.trace.u.c` @type ^`long` @kind wide;
  #L23f45c.  call `d`(v0, v3, v4) @signature `Lio/opencensus/trace/i;.d:(J[CI)V` @kind static;
  #L23f462.  v0:= v2.`io.opencensus.trace.u.d` @type ^`long` @kind wide;
  #L23f466.  v4:= v4 + 16;
  #L23f46a.  call `d`(v0, v3, v4) @signature `Lio/opencensus/trace/i;.d:(J[CI)V` @kind static;
  #L23f470.  return @kind void;
}
procedure `java.lang.String` `c`(`io.opencensus.trace.u` v2 @kind this) @signature `Lio/opencensus/trace/u;.c:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23f3a0.  v0:= 32I;
  #L23f3a4.  v0:= new `char`[v0];
  #L23f3a8.  v1:= 0I;
  #L23f3aa.  call `b`(v2, v0, v1) @signature `Lio/opencensus/trace/u;.b:([CI)V` @kind virtual;
  #L23f3b0.  v1:= new `java.lang.String`;
  #L23f3b4.  call `<init>`(v1, v0) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L23f3ba.  return v1 @kind object;
}
procedure `int` `compareTo`(`io.opencensus.trace.u` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/opencensus/trace/u;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L23f344.  v1:= (`io.opencensus.trace.u`) v1 @kind object;
  #L23f348.  call temp:= `a`(v0, v1) @signature `Lio/opencensus/trace/u;.a:(Lio/opencensus/trace/u;)I` @kind virtual;
  #L23f34e.  v1:= temp;
  #L23f350.  return v1;
}
procedure `boolean` `equals`(`io.opencensus.trace.u` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/opencensus/trace/u;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23f2a0.  v0:= 1I;
  #L23f2a2.  if v8 != v7 then goto L23f2a8;
  #L23f2a6.  return v0;
  #L23f2a8.  v1:= instanceof @variable v8 @type ^`io.opencensus.trace.u` @kind boolean;
  #L23f2ac.  v2:= 0I;
  #L23f2ae.  if v1 != 0 then goto L23f2b4;
  #L23f2b2.  return v2;
  #L23f2b4.  v8:= (`io.opencensus.trace.u`) v8 @kind object;
  #L23f2b8.  v3:= v7.`io.opencensus.trace.u.c` @type ^`long` @kind wide;
  #L23f2bc.  v5:= v8.`io.opencensus.trace.u.c` @type ^`long` @kind wide;
  #L23f2c0.  v1:= lcmp(v3, v5);
  #L23f2c4.  if v1 != 0 then goto L23f2da;
  #L23f2c8.  v3:= v7.`io.opencensus.trace.u.d` @type ^`long` @kind wide;
  #L23f2cc.  v5:= v8.`io.opencensus.trace.u.d` @type ^`long` @kind wide;
  #L23f2d0.  v8:= lcmp(v3, v5);
  #L23f2d4.  if v8 != 0 then goto L23f2da;
  #L23f2d8.  goto L23f2dc;
  #L23f2da.  v0:= 0I;
  #L23f2dc.  return v0;
}
procedure `int` `hashCode`(`io.opencensus.trace.u` v7 @kind this) @signature `Lio/opencensus/trace/u;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23f364.  v0:= v7.`io.opencensus.trace.u.c` @type ^`long` @kind wide;
  #L23f368.  v2:= 32I;
  #L23f36c.  v3:= v0 ^>> v2 @kind long;
  #L23f370.  v0:= v0 ^~ v3 @kind long;
  #L23f372.  v1:= (`int`) v0 @kind l2i;
  #L23f374.  v0:= 31I;
  #L23f378.  v1:= v1 + v0 @kind int;
  #L23f37a.  v1:= v1 * 31;
  #L23f37e.  v3:= v7.`io.opencensus.trace.u.d` @type ^`long` @kind wide;
  #L23f382.  v5:= v3 ^>> v2 @kind long;
  #L23f386.  v3:= v3 ^~ v5 @kind long;
  #L23f388.  v0:= (`int`) v3 @kind l2i;
  #L23f38a.  v1:= v1 + v0 @kind int;
  #L23f38c.  return v1;
}
procedure `java.lang.String` `toString`(`io.opencensus.trace.u` v2 @kind this) @signature `Lio/opencensus/trace/u;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23f3cc.  v0:= new `java.lang.StringBuilder`;
  #L23f3d0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23f3d6.  v1:= "TraceId{traceId=" @kind object;
  #L23f3da.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23f3e0.  call temp:= `c`(v2) @signature `Lio/opencensus/trace/u;.c:()Ljava/lang/String;` @kind virtual;
  #L23f3e6.  v1:= temp @kind object;
  #L23f3e8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23f3ee.  v1:= "}" @kind object;
  #L23f3f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23f3f8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23f3fe.  v0:= temp @kind object;
  #L23f400.  return v0 @kind object;
}
