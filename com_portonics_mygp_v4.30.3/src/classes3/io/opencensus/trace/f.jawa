record `io.opencensus.trace.f` @kind class @AccessFlag FINAL extends `io.opencensus.trace.MessageEvent` @kind class {
  `io.opencensus.trace.MessageEvent$Type` `io.opencensus.trace.f.a` @AccessFlag PRIVATE_FINAL;
  `long` `io.opencensus.trace.f.b` @AccessFlag PRIVATE_FINAL;
  `long` `io.opencensus.trace.f.c` @AccessFlag PRIVATE_FINAL;
  `long` `io.opencensus.trace.f.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.opencensus.trace.f` v0 @kind this, `io.opencensus.trace.MessageEvent$Type` v1 @kind object, `long` v2 , `long` v4 , `long` v6 ) @signature `Lio/opencensus/trace/f;.<init>:(Lio/opencensus/trace/MessageEvent$Type;JJJ)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L23df80.  call `<init>`(v0) @signature `Lio/opencensus/trace/MessageEvent;.<init>:()V` @kind direct;
  #L23df86.  v0.`io.opencensus.trace.f.a` @type ^`io.opencensus.trace.MessageEvent$Type` := v1 @kind object;
  #L23df8a.  v0.`io.opencensus.trace.f.b` @type ^`long` := v2 @kind wide;
  #L23df8e.  v0.`io.opencensus.trace.f.c` @type ^`long` := v4 @kind wide;
  #L23df92.  v0.`io.opencensus.trace.f.d` @type ^`long` := v6 @kind wide;
  #L23df96.  return @kind void;
}
procedure `void` `<init>`(`io.opencensus.trace.f` v0 @kind this, `io.opencensus.trace.MessageEvent$Type` v1 @kind object, `long` v2 , `long` v4 , `long` v6 , `io.opencensus.trace.d` v8 @kind object) @signature `Lio/opencensus/trace/f;.<init>:(Lio/opencensus/trace/MessageEvent$Type;JJJLio/opencensus/trace/d;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L23dfa8.  call `<init>`(v0, v1, v2, v4, v6) @signature `Lio/opencensus/trace/f;.<init>:(Lio/opencensus/trace/MessageEvent$Type;JJJ)V` @kind direct;
  #L23dfae.  return @kind void;
}
procedure `long` `b`(`io.opencensus.trace.f` v2 @kind this) @signature `Lio/opencensus/trace/f;.b:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23df38.  v0:= v2.`io.opencensus.trace.f.d` @type ^`long` @kind wide;
  #L23df3c.  return v0 @kind wide;
}
procedure `long` `c`(`io.opencensus.trace.f` v2 @kind this) @signature `Lio/opencensus/trace/f;.c:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23df50.  v0:= v2.`io.opencensus.trace.f.b` @type ^`long` @kind wide;
  #L23df54.  return v0 @kind wide;
}
procedure `io.opencensus.trace.MessageEvent$Type` `d`(`io.opencensus.trace.f` v1 @kind this) @signature `Lio/opencensus/trace/f;.d:()Lio/opencensus/trace/MessageEvent$Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23dea0.  v0:= v1.`io.opencensus.trace.f.a` @type ^`io.opencensus.trace.MessageEvent$Type` @kind object;
  #L23dea4.  return v0 @kind object;
}
procedure `long` `e`(`io.opencensus.trace.f` v2 @kind this) @signature `Lio/opencensus/trace/f;.e:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23df68.  v0:= v2.`io.opencensus.trace.f.c` @type ^`long` @kind wide;
  #L23df6c.  return v0 @kind wide;
}
procedure `boolean` `equals`(`io.opencensus.trace.f` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/opencensus/trace/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23ddb4.  v0:= 1I;
  #L23ddb6.  if v8 != v7 then goto L23ddbc;
  #L23ddba.  return v0;
  #L23ddbc.  v1:= instanceof @variable v8 @type ^`io.opencensus.trace.MessageEvent` @kind boolean;
  #L23ddc0.  v2:= 0I;
  #L23ddc2.  if v1 == 0 then goto L23de24;
  #L23ddc6.  v8:= (`io.opencensus.trace.MessageEvent`) v8 @kind object;
  #L23ddca.  v1:= v7.`io.opencensus.trace.f.a` @type ^`io.opencensus.trace.MessageEvent$Type` @kind object;
  #L23ddce.  call temp:= `d`(v8) @signature `Lio/opencensus/trace/MessageEvent;.d:()Lio/opencensus/trace/MessageEvent$Type;` @kind virtual;
  #L23ddd4.  v3:= temp @kind object;
  #L23ddd6.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23dddc.  v1:= temp;
  #L23ddde.  if v1 == 0 then goto L23de20;
  #L23dde2.  v3:= v7.`io.opencensus.trace.f.b` @type ^`long` @kind wide;
  #L23dde6.  call temp:= `c`(v8) @signature `Lio/opencensus/trace/MessageEvent;.c:()J` @kind virtual;
  #L23ddec.  v5:= temp @kind wide;
  #L23ddee.  v1:= lcmp(v3, v5);
  #L23ddf2.  if v1 != 0 then goto L23de20;
  #L23ddf6.  v3:= v7.`io.opencensus.trace.f.c` @type ^`long` @kind wide;
  #L23ddfa.  call temp:= `e`(v8) @signature `Lio/opencensus/trace/MessageEvent;.e:()J` @kind virtual;
  #L23de00.  v5:= temp @kind wide;
  #L23de02.  v1:= lcmp(v3, v5);
  #L23de06.  if v1 != 0 then goto L23de20;
  #L23de0a.  v3:= v7.`io.opencensus.trace.f.d` @type ^`long` @kind wide;
  #L23de0e.  call temp:= `b`(v8) @signature `Lio/opencensus/trace/MessageEvent;.b:()J` @kind virtual;
  #L23de14.  v5:= temp @kind wide;
  #L23de16.  v8:= lcmp(v3, v5);
  #L23de1a.  if v8 != 0 then goto L23de20;
  #L23de1e.  goto L23de22;
  #L23de20.  v0:= 0I;
  #L23de22.  return v0;
  #L23de24.  return v2;
}
procedure `int` `hashCode`(`io.opencensus.trace.f` v8 @kind this) @signature `Lio/opencensus/trace/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L23de38.  v0:= v8.`io.opencensus.trace.f.a` @type ^`io.opencensus.trace.MessageEvent$Type` @kind object;
  #L23de3c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Enum;.hashCode:()I` @kind virtual;
  #L23de42.  v0:= temp;
  #L23de44.  v1:= 1000003I;
  #L23de4a.  v0:= v0 ^~ v1 @kind int;
  #L23de4c.  v0:= v0 * v1 @kind int;
  #L23de50.  v2:= (`long`) v0 @kind i2l;
  #L23de52.  v4:= v8.`io.opencensus.trace.f.b` @type ^`long` @kind wide;
  #L23de56.  v0:= 32I;
  #L23de5a.  v6:= v4 ^>> v0 @kind long;
  #L23de5e.  v4:= v4 ^~ v6 @kind long;
  #L23de60.  v2:= v2 ^~ v4 @kind long;
  #L23de62.  v3:= (`int`) v2 @kind l2i;
  #L23de64.  v3:= v3 * v1 @kind int;
  #L23de68.  v2:= (`long`) v3 @kind i2l;
  #L23de6a.  v4:= v8.`io.opencensus.trace.f.c` @type ^`long` @kind wide;
  #L23de6e.  v6:= v4 ^>> v0 @kind long;
  #L23de72.  v4:= v4 ^~ v6 @kind long;
  #L23de74.  v2:= v2 ^~ v4 @kind long;
  #L23de76.  v3:= (`int`) v2 @kind l2i;
  #L23de78.  v3:= v3 * v1 @kind int;
  #L23de7c.  v1:= (`long`) v3 @kind i2l;
  #L23de7e.  v3:= v8.`io.opencensus.trace.f.d` @type ^`long` @kind wide;
  #L23de82.  v5:= v3 ^>> v0 @kind long;
  #L23de86.  v3:= v3 ^~ v5 @kind long;
  #L23de88.  v1:= v1 ^~ v3 @kind long;
  #L23de8a.  v0:= (`int`) v1 @kind l2i;
  #L23de8c.  return v0;
}
procedure `java.lang.String` `toString`(`io.opencensus.trace.f` v3 @kind this) @signature `Lio/opencensus/trace/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23deb8.  v0:= new `java.lang.StringBuilder`;
  #L23debc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23dec2.  v1:= "MessageEvent{type=" @kind object;
  #L23dec6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23decc.  v1:= v3.`io.opencensus.trace.f.a` @type ^`io.opencensus.trace.MessageEvent$Type` @kind object;
  #L23ded0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23ded6.  v1:= ", messageId=" @kind object;
  #L23deda.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23dee0.  v1:= v3.`io.opencensus.trace.f.b` @type ^`long` @kind wide;
  #L23dee4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L23deea.  v1:= ", uncompressedMessageSize=" @kind object;
  #L23deee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23def4.  v1:= v3.`io.opencensus.trace.f.c` @type ^`long` @kind wide;
  #L23def8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L23defe.  v1:= ", compressedMessageSize=" @kind object;
  #L23df02.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23df08.  v1:= v3.`io.opencensus.trace.f.d` @type ^`long` @kind wide;
  #L23df0c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L23df12.  v1:= "}" @kind object;
  #L23df16.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23df1c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23df22.  v0:= temp @kind object;
  #L23df24.  return v0 @kind object;
}
