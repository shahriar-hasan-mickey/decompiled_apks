record `io.opencensus.trace.b` @kind class @AccessFlag FINAL extends `io.opencensus.trace.k` @kind class {
  `java.lang.Boolean` `io.opencensus.trace.b.a` @AccessFlag PRIVATE;
  `io.opencensus.trace.Status` `io.opencensus.trace.b.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.opencensus.trace.b` v0 @kind this) @signature `Lio/opencensus/trace/b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L23da64.  call `<init>`(v0) @signature `Lio/opencensus/trace/k;.<init>:()V` @kind direct;
  #L23da6a.  return @kind void;
}
procedure `io.opencensus.trace.l` `a`(`io.opencensus.trace.b` v4 @kind this) @signature `Lio/opencensus/trace/b;.a:()Lio/opencensus/trace/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23d994.  v0:= v4.`io.opencensus.trace.b.a` @type ^`java.lang.Boolean` @kind object;
  #L23d998.  v1:= "" @kind object;
  #L23d99c.  if v0 != 0 then goto L23d9c2;
  #L23d9a0.  v0:= new `java.lang.StringBuilder`;
  #L23d9a4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23d9aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23d9b0.  v1:= " sampleToLocalSpanStore" @kind object;
  #L23d9b4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23d9ba.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23d9c0.  v1:= temp @kind object;
  #L23d9c2.  call temp:= `isEmpty`(v1) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L23d9c8.  v0:= temp;
  #L23d9ca.  if v0 == 0 then goto L23d9ec;
  #L23d9ce.  v0:= new `io.opencensus.trace.c`;
  #L23d9d2.  v1:= v4.`io.opencensus.trace.b.a` @type ^`java.lang.Boolean` @kind object;
  #L23d9d6.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L23d9dc.  v1:= temp;
  #L23d9de.  v2:= v4.`io.opencensus.trace.b.b` @type ^`io.opencensus.trace.Status` @kind object;
  #L23d9e2.  v3:= 0I;
  #L23d9e4.  call `<init>`(v0, v1, v2, v3) @signature `Lio/opencensus/trace/c;.<init>:(ZLio/opencensus/trace/Status;Lio/opencensus/trace/a;)V` @kind direct;
  #L23d9ea.  return v0 @kind object;
  #L23d9ec.  v0:= new `java.lang.IllegalStateException`;
  #L23d9f0.  v2:= new `java.lang.StringBuilder`;
  #L23d9f4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23d9fa.  v3:= "Missing required properties:" @kind object;
  #L23d9fe.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23da04.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23da0a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23da10.  v1:= temp @kind object;
  #L23da12.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23da18.  throw v0;
}
procedure `io.opencensus.trace.k` `b`(`io.opencensus.trace.b` v0 @kind this, `boolean` v1 ) @signature `Lio/opencensus/trace/b;.b:(Z)Lio/opencensus/trace/k;` @AccessFlag PUBLIC {
    temp;

  #L23da2c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L23da32.  v1:= temp @kind object;
  #L23da34.  v0.`io.opencensus.trace.b.a` @type ^`java.lang.Boolean` := v1 @kind object;
  #L23da38.  return v0 @kind object;
}
procedure `io.opencensus.trace.k` `c`(`io.opencensus.trace.b` v0 @kind this, `io.opencensus.trace.Status` v1 @kind object) @signature `Lio/opencensus/trace/b;.c:(Lio/opencensus/trace/Status;)Lio/opencensus/trace/k;` @AccessFlag PUBLIC {
    temp;

  #L23da4c.  v0.`io.opencensus.trace.b.b` @type ^`io.opencensus.trace.Status` := v1 @kind object;
  #L23da50.  return v0 @kind object;
}
