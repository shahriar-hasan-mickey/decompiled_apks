record `io.opencensus.trace.export.f` @kind class @AccessFlag FINAL extends `io.opencensus.trace.export.SampledSpanStore` @kind class {
  `java.util.Set` `io.opencensus.trace.export.f.b` @AccessFlag PRIVATE_FINAL;
}
global `io.opencensus.trace.export.g` `@@io.opencensus.trace.export.f.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/opencensus/trace/export/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L23fd0c.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L23fd12.  v0:= temp @kind object;
  #L23fd14.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L23fd1a.  v1:= temp @kind object;
  #L23fd1c.  call temp:= `a`(v0, v1) @signature `Lio/opencensus/trace/export/g;.a:(Ljava/util/Map;Ljava/util/Map;)Lio/opencensus/trace/export/g;` @kind static;
  #L23fd22.  v0:= temp @kind object;
  #L23fd24.  `@@io.opencensus.trace.export.f.a` @type ^`io.opencensus.trace.export.g` := v0 @kind object;
  #L23fd28.  return @kind void;
}
procedure `void` `<init>`(`io.opencensus.trace.export.f` v1 @kind this) @signature `Lio/opencensus/trace/export/f;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L23fd3c.  call `<init>`(v1) @signature `Lio/opencensus/trace/export/SampledSpanStore;.<init>:()V` @kind direct;
  #L23fd42.  v0:= new `java.util.HashSet`;
  #L23fd46.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L23fd4c.  v1.`io.opencensus.trace.export.f.b` @type ^`java.util.Set` := v0 @kind object;
  #L23fd50.  return @kind void;
}
procedure `void` `<init>`(`io.opencensus.trace.export.f` v0 @kind this, `io.opencensus.trace.export.e` v1 @kind object) @signature `Lio/opencensus/trace/export/f;.<init>:(Lio/opencensus/trace/export/e;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L23fd64.  call `<init>`(v0) @signature `Lio/opencensus/trace/export/f;.<init>:()V` @kind direct;
  #L23fd6a.  return @kind void;
}
