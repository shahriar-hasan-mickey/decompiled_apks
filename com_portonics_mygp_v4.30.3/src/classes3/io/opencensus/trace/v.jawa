record `io.opencensus.trace.v` @kind class @AccessFlag PUBLIC_FINAL {
  `byte` `io.opencensus.trace.v.b` @AccessFlag PRIVATE_FINAL;
}
global `io.opencensus.trace.v` `@@io.opencensus.trace.v.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/opencensus/trace/v;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L23f590.  v0:= 0I;
  #L23f592.  call temp:= `a`(v0) @signature `Lio/opencensus/trace/v;.a:(B)Lio/opencensus/trace/v;` @kind static;
  #L23f598.  v0:= temp @kind object;
  #L23f59a.  `@@io.opencensus.trace.v.a` @type ^`io.opencensus.trace.v` := v0 @kind object;
  #L23f59e.  return @kind void;
}
procedure `void` `<init>`(`io.opencensus.trace.v` v0 @kind this, `byte` v1 ) @signature `Lio/opencensus/trace/v;.<init>:(B)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L23f5b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23f5b6.  v0.`io.opencensus.trace.v.b` @type ^`byte` := v1 @kind byte;
  #L23f5ba.  return @kind void;
}
procedure `io.opencensus.trace.v` `a`(`byte` v1 ) @signature `Lio/opencensus/trace/v;.a:(B)Lio/opencensus/trace/v;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L23f52c.  v0:= new `io.opencensus.trace.v`;
  #L23f530.  call `<init>`(v0, v1) @signature `Lio/opencensus/trace/v;.<init>:(B)V` @kind direct;
  #L23f536.  return v0 @kind object;
}
procedure `boolean` `b`(`io.opencensus.trace.v` v1 @kind this, `int` v2 ) @signature `Lio/opencensus/trace/v;.b:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L23f4c0.  v0:= v1.`io.opencensus.trace.v.b` @type ^`byte` @kind byte;
  #L23f4c4.  v2:= v2 ^& v0 @kind int;
  #L23f4c6.  if v2 == 0 then goto L23f4ce;
  #L23f4ca.  v2:= 1I;
  #L23f4cc.  goto L23f4d0;
  #L23f4ce.  v2:= 0I;
  #L23f4d0.  return v2;
}
procedure `boolean` `c`(`io.opencensus.trace.v` v1 @kind this) @signature `Lio/opencensus/trace/v;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23f4e4.  v0:= 1I;
  #L23f4e6.  call temp:= `b`(v1, v0) @signature `Lio/opencensus/trace/v;.b:(I)Z` @kind direct;
  #L23f4ec.  v0:= temp;
  #L23f4ee.  return v0;
}
procedure `boolean` `equals`(`io.opencensus.trace.v` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/opencensus/trace/v;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23f484.  v0:= 1I;
  #L23f486.  if v4 != v3 then goto L23f48c;
  #L23f48a.  return v0;
  #L23f48c.  v1:= instanceof @variable v4 @type ^`io.opencensus.trace.v` @kind boolean;
  #L23f490.  v2:= 0I;
  #L23f492.  if v1 != 0 then goto L23f498;
  #L23f496.  return v2;
  #L23f498.  v4:= (`io.opencensus.trace.v`) v4 @kind object;
  #L23f49c.  v1:= v3.`io.opencensus.trace.v.b` @type ^`byte` @kind byte;
  #L23f4a0.  v4:= v4.`io.opencensus.trace.v.b` @type ^`byte` @kind byte;
  #L23f4a4.  if v1 != v4 then goto L23f4aa;
  #L23f4a8.  goto L23f4ac;
  #L23f4aa.  v0:= 0I;
  #L23f4ac.  return v0;
}
procedure `int` `hashCode`(`io.opencensus.trace.v` v3 @kind this) @signature `Lio/opencensus/trace/v;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23f500.  v0:= 1I;
  #L23f502.  v0:= new `byte`[v0];
  #L23f506.  v1:= v3.`io.opencensus.trace.v.b` @type ^`byte` @kind byte;
  #L23f50a.  v2:= 0I;
  #L23f50c.  v0[v2]:= v1 @kind byte;
  #L23f510.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L23f516.  v0:= temp;
  #L23f518.  return v0;
}
procedure `java.lang.String` `toString`(`io.opencensus.trace.v` v2 @kind this) @signature `Lio/opencensus/trace/v;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23f548.  v0:= new `java.lang.StringBuilder`;
  #L23f54c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23f552.  v1:= "TraceOptions{sampled=" @kind object;
  #L23f556.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23f55c.  call temp:= `c`(v2) @signature `Lio/opencensus/trace/v;.c:()Z` @kind virtual;
  #L23f562.  v1:= temp;
  #L23f564.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L23f56a.  v1:= "}" @kind object;
  #L23f56e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23f574.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23f57a.  v0:= temp @kind object;
  #L23f57c.  return v0 @kind object;
}
