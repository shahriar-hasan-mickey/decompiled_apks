record `io.opencensus.trace.Span` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `io.opencensus.trace.p` `io.opencensus.trace.Span.c` @AccessFlag PRIVATE_FINAL;
  `java.util.Set` `io.opencensus.trace.Span.d` @AccessFlag PRIVATE_FINAL;
}
global `java.util.Map` `@@io.opencensus.trace.Span.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.Set` `@@io.opencensus.trace.Span.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/opencensus/trace/Span;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L23eb18.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L23eb1e.  v0:= temp @kind object;
  #L23eb20.  `@@io.opencensus.trace.Span.a` @type ^`java.util.Map` := v0 @kind object;
  #L23eb24.  v0:= constclass @type ^`io.opencensus.trace.Span$Options` @kind object;
  #L23eb28.  call temp:= `noneOf`(v0) @signature `Ljava/util/EnumSet;.noneOf:(Ljava/lang/Class;)Ljava/util/EnumSet;` @kind static;
  #L23eb2e.  v0:= temp @kind object;
  #L23eb30.  call temp:= `unmodifiableSet`(v0) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L23eb36.  v0:= temp @kind object;
  #L23eb38.  `@@io.opencensus.trace.Span.b` @type ^`java.util.Set` := v0 @kind object;
  #L23eb3c.  return @kind void;
}
procedure `void` `<init>`(`io.opencensus.trace.Span` v1 @kind this, `io.opencensus.trace.p` v2 @kind object, `java.util.EnumSet` v3 @kind object) @signature `Lio/opencensus/trace/Span;.<init>:(Lio/opencensus/trace/p;Ljava/util/EnumSet;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L23eb50.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23eb56.  v0:= "context" @kind object;
  #L23eb5a.  call temp:= `c`(v2, v0) @signature `Lk/a/b/c;.c:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L23eb60.  v0:= temp @kind object;
  #L23eb62.  v0:= (`io.opencensus.trace.p`) v0 @kind object;
  #L23eb66.  v1.`io.opencensus.trace.Span.c` @type ^`io.opencensus.trace.p` := v0 @kind object;
  #L23eb6a.  if v3 != 0 then goto L23eb74;
  #L23eb6e.  v3:= `@@io.opencensus.trace.Span.b` @type ^`java.util.Set` @kind object;
  #L23eb72.  goto L23eb84;
  #L23eb74.  call temp:= `copyOf`(v3) @signature `Ljava/util/EnumSet;.copyOf:(Ljava/util/EnumSet;)Ljava/util/EnumSet;` @kind static;
  #L23eb7a.  v3:= temp @kind object;
  #L23eb7c.  call temp:= `unmodifiableSet`(v3) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L23eb82.  v3:= temp @kind object;
  #L23eb84.  v1.`io.opencensus.trace.Span.d` @type ^`java.util.Set` := v3 @kind object;
  #L23eb88.  call temp:= `a`(v2) @signature `Lio/opencensus/trace/p;.a:()Lio/opencensus/trace/v;` @kind virtual;
  #L23eb8e.  v2:= temp @kind object;
  #L23eb90.  call temp:= `c`(v2) @signature `Lio/opencensus/trace/v;.c:()Z` @kind virtual;
  #L23eb96.  v2:= temp;
  #L23eb98.  if v2 == 0 then goto L23ebb2;
  #L23eb9c.  v2:= `@@io.opencensus.trace.Span$Options.RECORD_EVENTS` @type ^`io.opencensus.trace.Span$Options` @kind object;
  #L23eba0.  call temp:= `contains`(v3, v2) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L23eba6.  v2:= temp;
  #L23eba8.  if v2 == 0 then goto L23ebae;
  #L23ebac.  goto L23ebb2;
  #L23ebae.  v2:= 0I;
  #L23ebb0.  goto L23ebb4;
  #L23ebb2.  v2:= 1I;
  #L23ebb4.  v3:= "Span is sampled, but does not have RECORD_EVENTS set." @kind object;
  #L23ebb8.  call `a`(v2, v3) @signature `Lk/a/b/c;.a:(ZLjava/lang/Object;)V` @kind static;
  #L23ebbe.  return @kind void;
}
procedure `void` `a`(`io.opencensus.trace.MessageEvent` v0 @kind object) @signature `Lio/opencensus/trace/Span;.a:(Lio/opencensus/trace/MessageEvent;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `b`(`io.opencensus.trace.l` v0 @kind object) @signature `Lio/opencensus/trace/Span;.b:(Lio/opencensus/trace/l;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.opencensus.trace.p` `c`(`io.opencensus.trace.Span` v1 @kind this) @signature `Lio/opencensus/trace/Span;.c:()Lio/opencensus/trace/p;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L23eb00.  v0:= v1.`io.opencensus.trace.Span.c` @type ^`io.opencensus.trace.p` @kind object;
  #L23eb04.  return v0 @kind object;
}
