record `io.opencensus.trace.Span$Kind` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
}
global `io.opencensus.trace.Span$Kind`[] `@@io.opencensus.trace.Span$Kind.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `io.opencensus.trace.Span$Kind` `@@io.opencensus.trace.Span$Kind.CLIENT` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.opencensus.trace.Span$Kind` `@@io.opencensus.trace.Span$Kind.SERVER` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lio/opencensus/trace/Span$Kind;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L23e664.  v0:= new `io.opencensus.trace.Span$Kind`;
  #L23e668.  v1:= "SERVER" @kind object;
  #L23e66c.  v2:= 0I;
  #L23e66e.  call `<init>`(v0, v1, v2) @signature `Lio/opencensus/trace/Span$Kind;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L23e674.  `@@io.opencensus.trace.Span$Kind.SERVER` @type ^`io.opencensus.trace.Span$Kind` := v0 @kind object;
  #L23e678.  v1:= new `io.opencensus.trace.Span$Kind`;
  #L23e67c.  v3:= "CLIENT" @kind object;
  #L23e680.  v4:= 1I;
  #L23e682.  call `<init>`(v1, v3, v4) @signature `Lio/opencensus/trace/Span$Kind;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L23e688.  `@@io.opencensus.trace.Span$Kind.CLIENT` @type ^`io.opencensus.trace.Span$Kind` := v1 @kind object;
  #L23e68c.  v3:= 2I;
  #L23e68e.  v3:= new `io.opencensus.trace.Span$Kind`[v3];
  #L23e692.  v3[v2]:= v0 @kind object;
  #L23e696.  v3[v4]:= v1 @kind object;
  #L23e69a.  `@@io.opencensus.trace.Span$Kind.$VALUES` @type ^`io.opencensus.trace.Span$Kind`[] := v3 @kind object;
  #L23e69e.  return @kind void;
}
procedure `void` `<init>`(`io.opencensus.trace.Span$Kind` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/opencensus/trace/Span$Kind;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L23e6b0.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L23e6b6.  return @kind void;
}
procedure `io.opencensus.trace.Span$Kind` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/opencensus/trace/Span$Kind;.valueOf:(Ljava/lang/String;)Lio/opencensus/trace/Span$Kind;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L23e61c.  v0:= constclass @type ^`io.opencensus.trace.Span$Kind` @kind object;
  #L23e620.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L23e626.  v1:= temp @kind object;
  #L23e628.  v1:= (`io.opencensus.trace.Span$Kind`) v1 @kind object;
  #L23e62c.  return v1 @kind object;
}
procedure `io.opencensus.trace.Span$Kind`[] `values`() @signature `Lio/opencensus/trace/Span$Kind;.values:()[Lio/opencensus/trace/Span$Kind;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L23e640.  v0:= `@@io.opencensus.trace.Span$Kind.$VALUES` @type ^`io.opencensus.trace.Span$Kind`[] @kind object;
  #L23e644.  call temp:= `clone`(v0) @signature `[Lio/opencensus/trace/Span$Kind;.clone:()Ljava/lang/Object;` @kind virtual;
  #L23e64a.  v0:= temp @kind object;
  #L23e64c.  v0:= (`io.opencensus.trace.Span$Kind`[]) v0 @kind object;
  #L23e650.  return v0 @kind object;
}
