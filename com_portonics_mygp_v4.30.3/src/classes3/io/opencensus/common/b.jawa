record `io.opencensus.common.b` @kind class @AccessFlag ABSTRACT {
}
global `java.math.BigInteger` `@@io.opencensus.common.b.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@io.opencensus.common.b.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/opencensus/common/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L23bbc0.  v0:= 9223372036854775807L;
  #L23bbca.  call temp:= `valueOf`(v0) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L23bbd0.  v0:= temp @kind object;
  #L23bbd2.  `@@io.opencensus.common.b.a` @type ^`java.math.BigInteger` := v0 @kind object;
  #L23bbd6.  v0:= -9223372036854775808L;
  #L23bbda.  call temp:= `valueOf`(v0) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L23bbe0.  v0:= temp @kind object;
  #L23bbe2.  `@@io.opencensus.common.b.b` @type ^`java.math.BigInteger` := v0 @kind object;
  #L23bbe6.  return @kind void;
}
procedure `int` `a`(`long` v1 , `long` v3 ) @signature `Lio/opencensus/common/b;.a:(JJ)I` @AccessFlag STATIC {
    temp;
    v0;

  #L23bb94.  v0:= lcmp(v1, v3);
  #L23bb98.  if v0 >= 0 then goto L23bba0;
  #L23bb9c.  v1:= -1I;
  #L23bb9e.  return v1;
  #L23bba0.  v0:= lcmp(v1, v3);
  #L23bba4.  if v0 != 0 then goto L23bbac;
  #L23bba8.  v1:= 0I;
  #L23bbaa.  return v1;
  #L23bbac.  v1:= 1I;
  #L23bbae.  return v1;
}
