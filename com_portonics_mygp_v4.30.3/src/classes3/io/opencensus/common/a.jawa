record `io.opencensus.common.a` @kind class @AccessFlag FINAL extends `io.opencensus.common.c` @kind class {
  `long` `io.opencensus.common.a.b` @AccessFlag PRIVATE_FINAL;
  `int` `io.opencensus.common.a.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.opencensus.common.a` v0 @kind this, `long` v1 , `int` v3 ) @signature `Lio/opencensus/common/a;.<init>:(JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L23b918.  call `<init>`(v0) @signature `Lio/opencensus/common/c;.<init>:()V` @kind direct;
  #L23b91e.  v0.`io.opencensus.common.a.b` @type ^`long` := v1 @kind wide;
  #L23b922.  v0.`io.opencensus.common.a.c` @type ^`int` := v3;
  #L23b926.  return @kind void;
}
procedure `int` `c`(`io.opencensus.common.a` v1 @kind this) @signature `Lio/opencensus/common/a;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23b858.  v0:= v1.`io.opencensus.common.a.c` @type ^`int`;
  #L23b85c.  return v0;
}
procedure `long` `d`(`io.opencensus.common.a` v2 @kind this) @signature `Lio/opencensus/common/a;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23b900.  v0:= v2.`io.opencensus.common.a.b` @type ^`long` @kind wide;
  #L23b904.  return v0 @kind wide;
}
procedure `boolean` `equals`(`io.opencensus.common.a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/opencensus/common/a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23b804.  v0:= 1I;
  #L23b806.  if v8 != v7 then goto L23b80c;
  #L23b80a.  return v0;
  #L23b80c.  v1:= instanceof @variable v8 @type ^`io.opencensus.common.c` @kind boolean;
  #L23b810.  v2:= 0I;
  #L23b812.  if v1 == 0 then goto L23b844;
  #L23b816.  v8:= (`io.opencensus.common.c`) v8 @kind object;
  #L23b81a.  v3:= v7.`io.opencensus.common.a.b` @type ^`long` @kind wide;
  #L23b81e.  call temp:= `d`(v8) @signature `Lio/opencensus/common/c;.d:()J` @kind virtual;
  #L23b824.  v5:= temp @kind wide;
  #L23b826.  v1:= lcmp(v3, v5);
  #L23b82a.  if v1 != 0 then goto L23b840;
  #L23b82e.  v1:= v7.`io.opencensus.common.a.c` @type ^`int`;
  #L23b832.  call temp:= `c`(v8) @signature `Lio/opencensus/common/c;.c:()I` @kind virtual;
  #L23b838.  v8:= temp;
  #L23b83a.  if v1 != v8 then goto L23b840;
  #L23b83e.  goto L23b842;
  #L23b840.  v0:= 0I;
  #L23b842.  return v0;
  #L23b844.  return v2;
}
procedure `int` `hashCode`(`io.opencensus.common.a` v7 @kind this) @signature `Lio/opencensus/common/a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23b870.  v0:= 1000003I;
  #L23b876.  v1:= (`long`) v0 @kind i2l;
  #L23b878.  v3:= v7.`io.opencensus.common.a.b` @type ^`long` @kind wide;
  #L23b87c.  v5:= 32I;
  #L23b880.  v5:= v3 ^>> v5 @kind long;
  #L23b884.  v3:= v3 ^~ v5 @kind long;
  #L23b886.  v1:= v1 ^~ v3 @kind long;
  #L23b888.  v2:= (`int`) v1 @kind l2i;
  #L23b88a.  v2:= v2 * v0 @kind int;
  #L23b88e.  v0:= v7.`io.opencensus.common.a.c` @type ^`int`;
  #L23b892.  v0:= v0 ^~ v2 @kind int;
  #L23b894.  return v0;
}
procedure `java.lang.String` `toString`(`io.opencensus.common.a` v3 @kind this) @signature `Lio/opencensus/common/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23b8a8.  v0:= new `java.lang.StringBuilder`;
  #L23b8ac.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23b8b2.  v1:= "Timestamp{seconds=" @kind object;
  #L23b8b6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b8bc.  v1:= v3.`io.opencensus.common.a.b` @type ^`long` @kind wide;
  #L23b8c0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b8c6.  v1:= ", nanos=" @kind object;
  #L23b8ca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b8d0.  v1:= v3.`io.opencensus.common.a.c` @type ^`int`;
  #L23b8d4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b8da.  v1:= "}" @kind object;
  #L23b8de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b8e4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23b8ea.  v0:= temp @kind object;
  #L23b8ec.  return v0 @kind object;
}
