record `io.opencensus.stats.i` @kind class @AccessFlag FINAL extends `io.opencensus.stats.g` @kind class {
  `boolean` `io.opencensus.stats.i.b` @AccessFlag PRIVATE;
}
global `java.util.logging.Logger` `@@io.opencensus.stats.i.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/opencensus/stats/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L23c904.  v0:= constclass @type ^`io.opencensus.stats.i` @kind object;
  #L23c908.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L23c90e.  v0:= temp @kind object;
  #L23c910.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L23c916.  v0:= temp @kind object;
  #L23c918.  `@@io.opencensus.stats.i.a` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L23c91c.  return @kind void;
}
procedure `void` `<init>`(`io.opencensus.stats.i` v0 @kind this) @signature `Lio/opencensus/stats/i;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L23c930.  call `<init>`(v0) @signature `Lio/opencensus/stats/g;.<init>:()V` @kind direct;
  #L23c936.  return @kind void;
}
procedure `void` `<init>`(`io.opencensus.stats.i` v0 @kind this, `io.opencensus.stats.h` v1 @kind object) @signature `Lio/opencensus/stats/i;.<init>:(Lio/opencensus/stats/h;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L23c948.  call `<init>`(v0) @signature `Lio/opencensus/stats/i;.<init>:()V` @kind direct;
  #L23c94e.  return @kind void;
}
procedure `io.opencensus.stats.g` `a`(`io.opencensus.stats.i` v2 @kind this, `io.opencensus.stats.d` v3 @kind object, `double` v4 ) @signature `Lio/opencensus/stats/i;.a:(Lio/opencensus/stats/d;D)Lio/opencensus/stats/g;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23c8bc.  v0:= 0L;
  #L23c8c0.  v3:= dcmpg(v4, v0);
  #L23c8c4.  if v3 >= 0 then goto L23c8ce;
  #L23c8c8.  v3:= 1I;
  #L23c8ca.  v2.`io.opencensus.stats.i.b` @type ^`boolean` := v3 @kind boolean;
  #L23c8ce.  return v2 @kind object;
}
procedure `io.opencensus.stats.g` `b`(`io.opencensus.stats.i` v2 @kind this, `io.opencensus.stats.e` v3 @kind object, `long` v4 ) @signature `Lio/opencensus/stats/i;.b:(Lio/opencensus/stats/e;J)Lio/opencensus/stats/g;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23c8e0.  v0:= 0L;
  #L23c8e4.  v3:= lcmp(v4, v0);
  #L23c8e8.  if v3 >= 0 then goto L23c8f2;
  #L23c8ec.  v3:= 1I;
  #L23c8ee.  v2.`io.opencensus.stats.i.b` @type ^`boolean` := v3 @kind boolean;
  #L23c8f2.  return v2 @kind object;
}
procedure `void` `c`(`io.opencensus.stats.i` v2 @kind this, `io.opencensus.tags.m` v3 @kind object) @signature `Lio/opencensus/stats/i;.c:(Lio/opencensus/tags/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23c960.  v0:= "tags" @kind object;
  #L23c964.  call temp:= `c`(v3, v0) @signature `Lk/a/b/c;.c:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L23c96a.  v3:= v2.`io.opencensus.stats.i.b` @type ^`boolean` @kind boolean;
  #L23c96e.  if v3 == 0 then goto L23c984;
  #L23c972.  v3:= `@@io.opencensus.stats.i.a` @type ^`java.util.logging.Logger` @kind object;
  #L23c976.  v0:= `@@java.util.logging.Level.WARNING` @type ^`java.util.logging.Level` @kind object;
  #L23c97a.  v1:= "Dropping values, value to record must be non-negative." @kind object;
  #L23c97e.  call `log`(v3, v0, v1) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/Level;Ljava/lang/String;)V` @kind virtual;
  #L23c984.  return @kind void;
}
