record `io.grpc.okhttp.internal.b` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `io.grpc.okhttp.internal.b.a` @AccessFlag PRIVATE;
  `java.lang.String`[] `io.grpc.okhttp.internal.b.b` @AccessFlag PRIVATE;
  `java.lang.String`[] `io.grpc.okhttp.internal.b.c` @AccessFlag PRIVATE;
  `boolean` `io.grpc.okhttp.internal.b.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.grpc.okhttp.internal.b` v1 @kind this, `io.grpc.okhttp.internal.c` v2 @kind object) @signature `Lio/grpc/okhttp/internal/b;.<init>:(Lio/grpc/okhttp/internal/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L234058.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23405e.  v0:= v2.`io.grpc.okhttp.internal.c.e` @type ^`boolean` @kind boolean;
  #L234062.  v1.`io.grpc.okhttp.internal.b.a` @type ^`boolean` := v0 @kind boolean;
  #L234066.  call temp:= `a`(v2) @signature `Lio/grpc/okhttp/internal/c;.a:(Lio/grpc/okhttp/internal/c;)[Ljava/lang/String;` @kind static;
  #L23406c.  v0:= temp @kind object;
  #L23406e.  v1.`io.grpc.okhttp.internal.b.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L234072.  call temp:= `b`(v2) @signature `Lio/grpc/okhttp/internal/c;.b:(Lio/grpc/okhttp/internal/c;)[Ljava/lang/String;` @kind static;
  #L234078.  v0:= temp @kind object;
  #L23407a.  v1.`io.grpc.okhttp.internal.b.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L23407e.  v2:= v2.`io.grpc.okhttp.internal.c.h` @type ^`boolean` @kind boolean;
  #L234082.  v1.`io.grpc.okhttp.internal.b.d` @type ^`boolean` := v2 @kind boolean;
  #L234086.  return @kind void;
}
procedure `void` `<init>`(`io.grpc.okhttp.internal.b` v0 @kind this, `boolean` v1 ) @signature `Lio/grpc/okhttp/internal/b;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L23403c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L234042.  v0.`io.grpc.okhttp.internal.b.a` @type ^`boolean` := v1 @kind boolean;
  #L234046.  return @kind void;
}
procedure `boolean` `a`(`io.grpc.okhttp.internal.b` v0 @kind object) @signature `Lio/grpc/okhttp/internal/b;.a:(Lio/grpc/okhttp/internal/b;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L233e40.  v0:= v0.`io.grpc.okhttp.internal.b.a` @type ^`boolean` @kind boolean;
  #L233e44.  return v0;
}
procedure `java.lang.String`[] `b`(`io.grpc.okhttp.internal.b` v0 @kind object) @signature `Lio/grpc/okhttp/internal/b;.b:(Lio/grpc/okhttp/internal/b;)[Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L23400c.  v0:= v0.`io.grpc.okhttp.internal.b.b` @type ^`java.lang.String`[] @kind object;
  #L234010.  return v0 @kind object;
}
procedure `java.lang.String`[] `c`(`io.grpc.okhttp.internal.b` v0 @kind object) @signature `Lio/grpc/okhttp/internal/b;.c:(Lio/grpc/okhttp/internal/b;)[Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L234024.  v0:= v0.`io.grpc.okhttp.internal.b.c` @type ^`java.lang.String`[] @kind object;
  #L234028.  return v0 @kind object;
}
procedure `boolean` `d`(`io.grpc.okhttp.internal.b` v0 @kind object) @signature `Lio/grpc/okhttp/internal/b;.d:(Lio/grpc/okhttp/internal/b;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L233e58.  v0:= v0.`io.grpc.okhttp.internal.b.d` @type ^`boolean` @kind boolean;
  #L233e5c.  return v0;
}
procedure `io.grpc.okhttp.internal.c` `e`(`io.grpc.okhttp.internal.b` v2 @kind this) @signature `Lio/grpc/okhttp/internal/b;.e:()Lio/grpc/okhttp/internal/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L233e70.  v0:= new `io.grpc.okhttp.internal.c`;
  #L233e74.  v1:= 0I;
  #L233e76.  call `<init>`(v0, v2, v1) @signature `Lio/grpc/okhttp/internal/c;.<init>:(Lio/grpc/okhttp/internal/b;Lio/grpc/okhttp/internal/a;)V` @kind direct;
  #L233e7c.  return v0 @kind object;
}
procedure `io.grpc.okhttp.internal.b` `f`(`io.grpc.okhttp.internal.b` v3 @kind this, `io.grpc.okhttp.internal.CipherSuite`[] v4 @kind object) @signature `Lio/grpc/okhttp/internal/b;.f:([Lio/grpc/okhttp/internal/CipherSuite;)Lio/grpc/okhttp/internal/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L233e90.  v0:= v3.`io.grpc.okhttp.internal.b.a` @type ^`boolean` @kind boolean;
  #L233e94.  if v0 == 0 then goto L233ebe;
  #L233e98.  v0:= length @variable v4;
  #L233e9a.  v0:= new `java.lang.String`[v0];
  #L233e9e.  v1:= 0I;
  #L233ea0.  v2:= length @variable v4;
  #L233ea2.  if v1 >= v2 then goto L233eb8;
  #L233ea6.  v2:= v4[v1] @kind object;
  #L233eaa.  v2:= v2.`io.grpc.okhttp.internal.CipherSuite.javaName` @type ^`java.lang.String` @kind object;
  #L233eae.  v0[v1]:= v2 @kind object;
  #L233eb2.  v1:= v1 + 1;
  #L233eb6.  goto L233ea0;
  #L233eb8.  v3.`io.grpc.okhttp.internal.b.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L233ebc.  return v3 @kind object;
  #L233ebe.  v4:= new `java.lang.IllegalStateException`;
  #L233ec2.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L233ec6.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L233ecc.  goto L233ed0;
  #L233ece.  throw v4;
  #L233ed0.  goto L233ece;
}
procedure `io.grpc.okhttp.internal.b` `g`(`io.grpc.okhttp.internal.b` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lio/grpc/okhttp/internal/b;.g:([Ljava/lang/String;)Lio/grpc/okhttp/internal/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L233ee4.  v0:= v1.`io.grpc.okhttp.internal.b.a` @type ^`boolean` @kind boolean;
  #L233ee8.  if v0 == 0 then goto L233f0a;
  #L233eec.  if v2 != 0 then goto L233ef8;
  #L233ef0.  v2:= 0I;
  #L233ef2.  v1.`io.grpc.okhttp.internal.b.b` @type ^`java.lang.String`[] := v2 @kind object;
  #L233ef6.  goto L233f08;
  #L233ef8.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L233efe.  v2:= temp @kind object;
  #L233f00.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L233f04.  v1.`io.grpc.okhttp.internal.b.b` @type ^`java.lang.String`[] := v2 @kind object;
  #L233f08.  return v1 @kind object;
  #L233f0a.  v2:= new `java.lang.IllegalStateException`;
  #L233f0e.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L233f12.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L233f18.  throw v2;
}
procedure `io.grpc.okhttp.internal.b` `h`(`io.grpc.okhttp.internal.b` v1 @kind this, `boolean` v2 ) @signature `Lio/grpc/okhttp/internal/b;.h:(Z)Lio/grpc/okhttp/internal/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L233f2c.  v0:= v1.`io.grpc.okhttp.internal.b.a` @type ^`boolean` @kind boolean;
  #L233f30.  if v0 == 0 then goto L233f3a;
  #L233f34.  v1.`io.grpc.okhttp.internal.b.d` @type ^`boolean` := v2 @kind boolean;
  #L233f38.  return v1 @kind object;
  #L233f3a.  v2:= new `java.lang.IllegalStateException`;
  #L233f3e.  v0:= "no TLS extensions for cleartext connections" @kind object;
  #L233f42.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L233f48.  throw v2;
}
procedure `io.grpc.okhttp.internal.b` `i`(`io.grpc.okhttp.internal.b` v3 @kind this, `io.grpc.okhttp.internal.TlsVersion`[] v4 @kind object) @signature `Lio/grpc/okhttp/internal/b;.i:([Lio/grpc/okhttp/internal/TlsVersion;)Lio/grpc/okhttp/internal/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L233f5c.  v0:= v3.`io.grpc.okhttp.internal.b.a` @type ^`boolean` @kind boolean;
  #L233f60.  if v0 == 0 then goto L233fa0;
  #L233f64.  v0:= length @variable v4;
  #L233f66.  if v0 == 0 then goto L233f90;
  #L233f6a.  v0:= length @variable v4;
  #L233f6c.  v0:= new `java.lang.String`[v0];
  #L233f70.  v1:= 0I;
  #L233f72.  v2:= length @variable v4;
  #L233f74.  if v1 >= v2 then goto L233f8a;
  #L233f78.  v2:= v4[v1] @kind object;
  #L233f7c.  v2:= v2.`io.grpc.okhttp.internal.TlsVersion.javaName` @type ^`java.lang.String` @kind object;
  #L233f80.  v0[v1]:= v2 @kind object;
  #L233f84.  v1:= v1 + 1;
  #L233f88.  goto L233f72;
  #L233f8a.  v3.`io.grpc.okhttp.internal.b.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L233f8e.  return v3 @kind object;
  #L233f90.  v4:= new `java.lang.IllegalArgumentException`;
  #L233f94.  v0:= "At least one TlsVersion is required" @kind object;
  #L233f98.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L233f9e.  throw v4;
  #L233fa0.  v4:= new `java.lang.IllegalStateException`;
  #L233fa4.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L233fa8.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L233fae.  goto L233fb2;
  #L233fb0.  throw v4;
  #L233fb2.  goto L233fb0;
}
procedure `io.grpc.okhttp.internal.b` `j`(`io.grpc.okhttp.internal.b` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lio/grpc/okhttp/internal/b;.j:([Ljava/lang/String;)Lio/grpc/okhttp/internal/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L233fc4.  v0:= v1.`io.grpc.okhttp.internal.b.a` @type ^`boolean` @kind boolean;
  #L233fc8.  if v0 == 0 then goto L233fea;
  #L233fcc.  if v2 != 0 then goto L233fd8;
  #L233fd0.  v2:= 0I;
  #L233fd2.  v1.`io.grpc.okhttp.internal.b.c` @type ^`java.lang.String`[] := v2 @kind object;
  #L233fd6.  goto L233fe8;
  #L233fd8.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L233fde.  v2:= temp @kind object;
  #L233fe0.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L233fe4.  v1.`io.grpc.okhttp.internal.b.c` @type ^`java.lang.String`[] := v2 @kind object;
  #L233fe8.  return v1 @kind object;
  #L233fea.  v2:= new `java.lang.IllegalStateException`;
  #L233fee.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L233ff2.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L233ff8.  throw v2;
}
