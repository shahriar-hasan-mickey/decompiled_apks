record `io.grpc.internal.GzipInflatingBuffer` @kind class @AccessFlag  extends `java.io.Closeable` @kind interface {
  `io.grpc.internal.w1` `io.grpc.internal.GzipInflatingBuffer.b` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.CRC32` `io.grpc.internal.GzipInflatingBuffer.c` @AccessFlag PRIVATE_FINAL;
  `io.grpc.internal.f4` `io.grpc.internal.GzipInflatingBuffer.d` @AccessFlag PRIVATE_FINAL;
  `byte`[] `io.grpc.internal.GzipInflatingBuffer.e` @AccessFlag PRIVATE_FINAL;
  `int` `io.grpc.internal.GzipInflatingBuffer.f` @AccessFlag PRIVATE;
  `int` `io.grpc.internal.GzipInflatingBuffer.g` @AccessFlag PRIVATE;
  `java.util.zip.Inflater` `io.grpc.internal.GzipInflatingBuffer.h` @AccessFlag PRIVATE;
  `io.grpc.internal.GzipInflatingBuffer$State` `io.grpc.internal.GzipInflatingBuffer.i` @AccessFlag PRIVATE;
  `boolean` `io.grpc.internal.GzipInflatingBuffer.j` @AccessFlag PRIVATE;
  `int` `io.grpc.internal.GzipInflatingBuffer.k` @AccessFlag PRIVATE;
  `int` `io.grpc.internal.GzipInflatingBuffer.l` @AccessFlag PRIVATE;
  `long` `io.grpc.internal.GzipInflatingBuffer.m` @AccessFlag PRIVATE;
  `int` `io.grpc.internal.GzipInflatingBuffer.n` @AccessFlag PRIVATE;
  `int` `io.grpc.internal.GzipInflatingBuffer.o` @AccessFlag PRIVATE;
  `boolean` `io.grpc.internal.GzipInflatingBuffer.p` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.grpc.internal.GzipInflatingBuffer` v2 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L21e9a4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21e9aa.  v0:= new `io.grpc.internal.w1`;
  #L21e9ae.  call `<init>`(v0) @signature `Lio/grpc/internal/w1;.<init>:()V` @kind direct;
  #L21e9b4.  v2.`io.grpc.internal.GzipInflatingBuffer.b` @type ^`io.grpc.internal.w1` := v0 @kind object;
  #L21e9b8.  v0:= new `java.util.zip.CRC32`;
  #L21e9bc.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L21e9c2.  v2.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L21e9c6.  v0:= new `io.grpc.internal.f4`;
  #L21e9ca.  v1:= 0I;
  #L21e9cc.  call `<init>`(v0, v2, v1) @signature `Lio/grpc/internal/f4;.<init>:(Lio/grpc/internal/GzipInflatingBuffer;Lio/grpc/internal/e4;)V` @kind direct;
  #L21e9d2.  v2.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` := v0 @kind object;
  #L21e9d6.  v0:= 512I;
  #L21e9da.  v0:= new `byte`[v0];
  #L21e9de.  v2.`io.grpc.internal.GzipInflatingBuffer.e` @type ^`byte`[] := v0 @kind object;
  #L21e9e2.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.HEADER` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e9e6.  v2.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L21e9ea.  v0:= 0I;
  #L21e9ec.  v2.`io.grpc.internal.GzipInflatingBuffer.j` @type ^`boolean` := v0 @kind boolean;
  #L21e9f0.  v2.`io.grpc.internal.GzipInflatingBuffer.n` @type ^`int` := v0;
  #L21e9f4.  v2.`io.grpc.internal.GzipInflatingBuffer.o` @type ^`int` := v0;
  #L21e9f8.  v0:= 1I;
  #L21e9fa.  v2.`io.grpc.internal.GzipInflatingBuffer.p` @type ^`boolean` := v0 @kind boolean;
  #L21e9fe.  return @kind void;
}
procedure `boolean` `G0`(`io.grpc.internal.GzipInflatingBuffer` v5 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.G0:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L21e2c4.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` @kind object;
  #L21e2c8.  v1:= 1I;
  #L21e2ca.  if v0 != 0 then goto L21e2de;
  #L21e2ce.  v0:= new `java.util.zip.Inflater`;
  #L21e2d2.  call `<init>`(v0, v1) @signature `Ljava/util/zip/Inflater;.<init>:(Z)V` @kind direct;
  #L21e2d8.  v5.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L21e2dc.  goto L21e2e4;
  #L21e2de.  call `reset`(v0) @signature `Ljava/util/zip/Inflater;.reset:()V` @kind virtual;
  #L21e2e4.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`java.util.zip.CRC32` @kind object;
  #L21e2e8.  call `reset`(v0) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L21e2ee.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`int`;
  #L21e2f2.  v2:= v5.`io.grpc.internal.GzipInflatingBuffer.f` @type ^`int`;
  #L21e2f6.  v0:= v0 - v2 @kind int;
  #L21e2f8.  if v0 <= 0 then goto L21e314;
  #L21e2fc.  v3:= v5.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` @kind object;
  #L21e300.  v4:= v5.`io.grpc.internal.GzipInflatingBuffer.e` @type ^`byte`[] @kind object;
  #L21e304.  call `setInput`(v3, v4, v2, v0) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L21e30a.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.INFLATING` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e30e.  v5.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L21e312.  goto L21e31c;
  #L21e314.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.INFLATER_NEEDS_INPUT` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e318.  v5.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L21e31c.  return v1;
}
procedure `boolean` `N0`(`io.grpc.internal.GzipInflatingBuffer` v2 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.N0:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L21e358.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e35c.  call temp:= `d`(v0) @signature `Lio/grpc/internal/f4;.d:(Lio/grpc/internal/f4;)I` @kind static;
  #L21e362.  v0:= temp;
  #L21e364.  v1:= 10I;
  #L21e368.  if v0 >= v1 then goto L21e370;
  #L21e36c.  v0:= 0I;
  #L21e36e.  return v0;
  #L21e370.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e374.  call temp:= `e`(v0) @signature `Lio/grpc/internal/f4;.e:(Lio/grpc/internal/f4;)I` @kind static;
  #L21e37a.  v0:= temp;
  #L21e37c.  v1:= 35615I;
  #L21e382.  if v0 != v1 then goto L21e3d2;
  #L21e386.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e38a.  call temp:= `f`(v0) @signature `Lio/grpc/internal/f4;.f:(Lio/grpc/internal/f4;)I` @kind static;
  #L21e390.  v0:= temp;
  #L21e392.  v1:= 8I;
  #L21e396.  if v0 != v1 then goto L21e3c2;
  #L21e39a.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e39e.  call temp:= `f`(v0) @signature `Lio/grpc/internal/f4;.f:(Lio/grpc/internal/f4;)I` @kind static;
  #L21e3a4.  v0:= temp;
  #L21e3a6.  v2.`io.grpc.internal.GzipInflatingBuffer.k` @type ^`int` := v0;
  #L21e3aa.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e3ae.  v1:= 6I;
  #L21e3b0.  call `a`(v0, v1) @signature `Lio/grpc/internal/f4;.a:(Lio/grpc/internal/f4;I)V` @kind static;
  #L21e3b6.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.HEADER_EXTRA_LEN` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e3ba.  v2.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L21e3be.  v0:= 1I;
  #L21e3c0.  return v0;
  #L21e3c2.  v0:= new `java.util.zip.ZipException`;
  #L21e3c6.  v1:= "Unsupported compression method" @kind object;
  #L21e3ca.  call `<init>`(v0, v1) @signature `Ljava/util/zip/ZipException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e3d0.  throw v0;
  #L21e3d2.  v0:= new `java.util.zip.ZipException`;
  #L21e3d6.  v1:= "Not in GZIP format" @kind object;
  #L21e3da.  call `<init>`(v0, v1) @signature `Ljava/util/zip/ZipException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e3e0.  throw v0;
}
procedure `boolean` `O0`(`io.grpc.internal.GzipInflatingBuffer` v3 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.O0:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L21e3f4.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.k` @type ^`int`;
  #L21e3f8.  v1:= 16I;
  #L21e3fc.  v0:= v0 ^& v1 @kind int;
  #L21e3fe.  v2:= 1I;
  #L21e400.  if v0 == v1 then goto L21e40e;
  #L21e404.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.HEADER_CRC` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e408.  v3.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L21e40c.  return v2;
  #L21e40e.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e412.  call temp:= `b`(v0) @signature `Lio/grpc/internal/f4;.b:(Lio/grpc/internal/f4;)Z` @kind static;
  #L21e418.  v0:= temp;
  #L21e41a.  if v0 != 0 then goto L21e422;
  #L21e41e.  v0:= 0I;
  #L21e420.  return v0;
  #L21e422.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.HEADER_CRC` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e426.  v3.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L21e42a.  return v2;
}
procedure `boolean` `P0`(`io.grpc.internal.GzipInflatingBuffer` v3 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.P0:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L21e43c.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.k` @type ^`int`;
  #L21e440.  v1:= 2I;
  #L21e442.  v0:= v0 ^& v1 @kind int;
  #L21e444.  v2:= 1I;
  #L21e446.  if v0 == v1 then goto L21e454;
  #L21e44a.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.INITIALIZE_INFLATER` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e44e.  v3.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L21e452.  return v2;
  #L21e454.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e458.  call temp:= `d`(v0) @signature `Lio/grpc/internal/f4;.d:(Lio/grpc/internal/f4;)I` @kind static;
  #L21e45e.  v0:= temp;
  #L21e460.  if v0 >= v1 then goto L21e468;
  #L21e464.  v0:= 0I;
  #L21e466.  return v0;
  #L21e468.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`java.util.zip.CRC32` @kind object;
  #L21e46c.  call temp:= `getValue`(v0) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L21e472.  v0:= temp @kind wide;
  #L21e474.  v1:= (`int`) v0 @kind l2i;
  #L21e476.  v0:= 65535I;
  #L21e47c.  v0:= v0 ^& v1 @kind int;
  #L21e47e.  v1:= v3.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e482.  call temp:= `e`(v1) @signature `Lio/grpc/internal/f4;.e:(Lio/grpc/internal/f4;)I` @kind static;
  #L21e488.  v1:= temp;
  #L21e48a.  if v0 != v1 then goto L21e498;
  #L21e48e.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.INITIALIZE_INFLATER` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e492.  v3.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L21e496.  return v2;
  #L21e498.  v0:= new `java.util.zip.ZipException`;
  #L21e49c.  v1:= "Corrupt GZIP header" @kind object;
  #L21e4a0.  call `<init>`(v0, v1) @signature `Ljava/util/zip/ZipException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e4a6.  throw v0;
}
procedure `boolean` `Q0`(`io.grpc.internal.GzipInflatingBuffer` v2 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.Q0:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L21e4b8.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e4bc.  call temp:= `d`(v0) @signature `Lio/grpc/internal/f4;.d:(Lio/grpc/internal/f4;)I` @kind static;
  #L21e4c2.  v0:= temp;
  #L21e4c4.  v1:= v2.`io.grpc.internal.GzipInflatingBuffer.l` @type ^`int`;
  #L21e4c8.  if v0 >= v1 then goto L21e4d0;
  #L21e4cc.  v0:= 0I;
  #L21e4ce.  return v0;
  #L21e4d0.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e4d4.  call `a`(v0, v1) @signature `Lio/grpc/internal/f4;.a:(Lio/grpc/internal/f4;I)V` @kind static;
  #L21e4da.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.HEADER_NAME` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e4de.  v2.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L21e4e2.  v0:= 1I;
  #L21e4e4.  return v0;
}
procedure `boolean` `R0`(`io.grpc.internal.GzipInflatingBuffer` v3 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.R0:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L21e4f8.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.k` @type ^`int`;
  #L21e4fc.  v1:= 4I;
  #L21e4fe.  v0:= v0 ^& v1 @kind int;
  #L21e500.  v2:= 1I;
  #L21e502.  if v0 == v1 then goto L21e510;
  #L21e506.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.HEADER_NAME` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e50a.  v3.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L21e50e.  return v2;
  #L21e510.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e514.  call temp:= `d`(v0) @signature `Lio/grpc/internal/f4;.d:(Lio/grpc/internal/f4;)I` @kind static;
  #L21e51a.  v0:= temp;
  #L21e51c.  v1:= 2I;
  #L21e51e.  if v0 >= v1 then goto L21e526;
  #L21e522.  v0:= 0I;
  #L21e524.  return v0;
  #L21e526.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e52a.  call temp:= `e`(v0) @signature `Lio/grpc/internal/f4;.e:(Lio/grpc/internal/f4;)I` @kind static;
  #L21e530.  v0:= temp;
  #L21e532.  v3.`io.grpc.internal.GzipInflatingBuffer.l` @type ^`int` := v0;
  #L21e536.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.HEADER_EXTRA` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e53a.  v3.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L21e53e.  return v2;
}
procedure `boolean` `S0`(`io.grpc.internal.GzipInflatingBuffer` v3 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.S0:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L21e550.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.k` @type ^`int`;
  #L21e554.  v1:= 8I;
  #L21e558.  v0:= v0 ^& v1 @kind int;
  #L21e55a.  v2:= 1I;
  #L21e55c.  if v0 == v1 then goto L21e56a;
  #L21e560.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.HEADER_COMMENT` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e564.  v3.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L21e568.  return v2;
  #L21e56a.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e56e.  call temp:= `b`(v0) @signature `Lio/grpc/internal/f4;.b:(Lio/grpc/internal/f4;)Z` @kind static;
  #L21e574.  v0:= temp;
  #L21e576.  if v0 != 0 then goto L21e57e;
  #L21e57a.  v0:= 0I;
  #L21e57c.  return v0;
  #L21e57e.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.HEADER_COMMENT` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e582.  v3.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L21e586.  return v2;
}
procedure `boolean` `T0`(`io.grpc.internal.GzipInflatingBuffer` v5 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.T0:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L21e598.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` @kind object;
  #L21e59c.  if v0 == 0 then goto L21e5c4;
  #L21e5a0.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e5a4.  call temp:= `d`(v0) @signature `Lio/grpc/internal/f4;.d:(Lio/grpc/internal/f4;)I` @kind static;
  #L21e5aa.  v0:= temp;
  #L21e5ac.  v1:= 18I;
  #L21e5b0.  if v0 > v1 then goto L21e5c4;
  #L21e5b4.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` @kind object;
  #L21e5b8.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L21e5be.  v0:= 0I;
  #L21e5c0.  v5.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L21e5c4.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e5c8.  call temp:= `d`(v0) @signature `Lio/grpc/internal/f4;.d:(Lio/grpc/internal/f4;)I` @kind static;
  #L21e5ce.  v0:= temp;
  #L21e5d0.  v1:= 8I;
  #L21e5d4.  if v0 >= v1 then goto L21e5dc;
  #L21e5d8.  v0:= 0I;
  #L21e5da.  return v0;
  #L21e5dc.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`java.util.zip.CRC32` @kind object;
  #L21e5e0.  call temp:= `getValue`(v0) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L21e5e6.  v0:= temp @kind wide;
  #L21e5e8.  v2:= v5.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e5ec.  call temp:= `c`(v2) @signature `Lio/grpc/internal/f4;.c:(Lio/grpc/internal/f4;)J` @kind static;
  #L21e5f2.  v2:= temp @kind wide;
  #L21e5f4.  v4:= lcmp(v0, v2);
  #L21e5f8.  if v4 != 0 then goto L21e62a;
  #L21e5fc.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.m` @type ^`long` @kind wide;
  #L21e600.  v2:= v5.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e604.  call temp:= `c`(v2) @signature `Lio/grpc/internal/f4;.c:(Lio/grpc/internal/f4;)J` @kind static;
  #L21e60a.  v2:= temp @kind wide;
  #L21e60c.  v4:= lcmp(v0, v2);
  #L21e610.  if v4 != 0 then goto L21e62a;
  #L21e614.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`java.util.zip.CRC32` @kind object;
  #L21e618.  call `reset`(v0) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L21e61e.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.HEADER` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e622.  v5.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L21e626.  v0:= 1I;
  #L21e628.  return v0;
  #L21e62a.  v0:= new `java.util.zip.ZipException`;
  #L21e62e.  v1:= "Corrupt GZIP trailer" @kind object;
  #L21e632.  call `<init>`(v0, v1) @signature `Ljava/util/zip/ZipException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e638.  throw v0;
}
procedure `int` `a`(`io.grpc.internal.GzipInflatingBuffer` v0 @kind object) @signature `Lio/grpc/internal/GzipInflatingBuffer;.a:(Lio/grpc/internal/GzipInflatingBuffer;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L21e664.  v0:= v0.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`int`;
  #L21e668.  return v0;
}
procedure `int` `c`(`io.grpc.internal.GzipInflatingBuffer` v0 @kind object) @signature `Lio/grpc/internal/GzipInflatingBuffer;.c:(Lio/grpc/internal/GzipInflatingBuffer;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L21e67c.  v0:= v0.`io.grpc.internal.GzipInflatingBuffer.f` @type ^`int`;
  #L21e680.  return v0;
}
procedure `int` `d`(`io.grpc.internal.GzipInflatingBuffer` v1 @kind object, `int` v2 ) @signature `Lio/grpc/internal/GzipInflatingBuffer;.d:(Lio/grpc/internal/GzipInflatingBuffer;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L21e694.  v0:= v1.`io.grpc.internal.GzipInflatingBuffer.f` @type ^`int`;
  #L21e698.  v0:= v0 + v2 @kind int;
  #L21e69a.  v1.`io.grpc.internal.GzipInflatingBuffer.f` @type ^`int` := v0;
  #L21e69e.  return v0;
}
procedure `byte`[] `k`(`io.grpc.internal.GzipInflatingBuffer` v0 @kind object) @signature `Lio/grpc/internal/GzipInflatingBuffer;.k:(Lio/grpc/internal/GzipInflatingBuffer;)[B` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L21e64c.  v0:= v0.`io.grpc.internal.GzipInflatingBuffer.e` @type ^`byte`[] @kind object;
  #L21e650.  return v0 @kind object;
}
procedure `io.grpc.internal.w1` `m`(`io.grpc.internal.GzipInflatingBuffer` v0 @kind object) @signature `Lio/grpc/internal/GzipInflatingBuffer;.m:(Lio/grpc/internal/GzipInflatingBuffer;)Lio/grpc/internal/w1;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L21e974.  v0:= v0.`io.grpc.internal.GzipInflatingBuffer.b` @type ^`io.grpc.internal.w1` @kind object;
  #L21e978.  return v0 @kind object;
}
procedure `java.util.zip.CRC32` `o`(`io.grpc.internal.GzipInflatingBuffer` v0 @kind object) @signature `Lio/grpc/internal/GzipInflatingBuffer;.o:(Lio/grpc/internal/GzipInflatingBuffer;)Ljava/util/zip/CRC32;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L21e98c.  v0:= v0.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`java.util.zip.CRC32` @kind object;
  #L21e990.  return v0 @kind object;
}
procedure `int` `s`(`io.grpc.internal.GzipInflatingBuffer` v1 @kind object, `int` v2 ) @signature `Lio/grpc/internal/GzipInflatingBuffer;.s:(Lio/grpc/internal/GzipInflatingBuffer;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L21e6b0.  v0:= v1.`io.grpc.internal.GzipInflatingBuffer.n` @type ^`int`;
  #L21e6b4.  v0:= v0 + v2 @kind int;
  #L21e6b6.  v1.`io.grpc.internal.GzipInflatingBuffer.n` @type ^`int` := v0;
  #L21e6ba.  return v0;
}
procedure `int` `u0`(`io.grpc.internal.GzipInflatingBuffer` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lio/grpc/internal/GzipInflatingBuffer;.u0:([BII)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L21e704.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` @kind object;
  #L21e708.  if v0 == 0 then goto L21e710;
  #L21e70c.  v0:= 1I;
  #L21e70e.  goto L21e712;
  #L21e710.  v0:= 0I;
  #L21e712.  v1:= "inflater is null" @kind object;
  #L21e716.  call `z`(v0, v1) @signature `Lcom/google/common/base/b0;.z:(ZLjava/lang/Object;)V` @kind static;
  #L21e71c.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` @kind object;
  #L21e720.  call temp:= `getTotalIn`(v0) @signature `Ljava/util/zip/Inflater;.getTotalIn:()I` @kind virtual;
  #L21e726.  v0:= temp;
  #L21e728.  v1:= v2.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` @kind object;
  #L21e72c.  call temp:= `inflate`(v1, v3, v4, v5) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #L21e732.  v5:= temp;
  #L21e734.  v1:= v2.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` @kind object;
  #L21e738.  call temp:= `getTotalIn`(v1) @signature `Ljava/util/zip/Inflater;.getTotalIn:()I` @kind virtual;
  #L21e73e.  v1:= temp;
  #L21e740.  v1:= v1 - v0 @kind int;
  #L21e742.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.n` @type ^`int`;
  #L21e746.  v0:= v0 + v1 @kind int;
  #L21e748.  v2.`io.grpc.internal.GzipInflatingBuffer.n` @type ^`int` := v0;
  #L21e74c.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.o` @type ^`int`;
  #L21e750.  v0:= v0 + v1 @kind int;
  #L21e752.  v2.`io.grpc.internal.GzipInflatingBuffer.o` @type ^`int` := v0;
  #L21e756.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.f` @type ^`int`;
  #L21e75a.  v0:= v0 + v1 @kind int;
  #L21e75c.  v2.`io.grpc.internal.GzipInflatingBuffer.f` @type ^`int` := v0;
  #L21e760.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.c` @type ^`java.util.zip.CRC32` @kind object;
  #L21e764.  call `update`(v0, v3, v4, v5) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L21e76a.  v3:= v2.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` @kind object;
  #L21e76e.  call temp:= `finished`(v3) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L21e774.  v3:= temp;
  #L21e776.  if v3 == 0 then goto L21e7a0;
  #L21e77a.  v3:= v2.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` @kind object;
  #L21e77e.  call temp:= `getBytesWritten`(v3) @signature `Ljava/util/zip/Inflater;.getBytesWritten:()J` @kind virtual;
  #L21e784.  v3:= temp @kind wide;
  #L21e786.  v0:= 4294967295L;
  #L21e790.  v3:= v3 ^& v0 @kind long;
  #L21e792.  v2.`io.grpc.internal.GzipInflatingBuffer.m` @type ^`long` := v3 @kind wide;
  #L21e796.  v3:= `@@io.grpc.internal.GzipInflatingBuffer$State.TRAILER` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e79a.  v2.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v3 @kind object;
  #L21e79e.  goto L21e7b8;
  #L21e7a0.  v3:= v2.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` @kind object;
  #L21e7a4.  call temp:= `needsInput`(v3) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L21e7aa.  v3:= temp;
  #L21e7ac.  if v3 == 0 then goto L21e7b8;
  #L21e7b0.  v3:= `@@io.grpc.internal.GzipInflatingBuffer$State.INFLATER_NEEDS_INPUT` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e7b4.  v2.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v3 @kind object;
  #L21e7b8.  return v5;
  #L21e7ba.  v3:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L21e7bc.  v4:= new `java.util.zip.DataFormatException`;
  #L21e7c0.  v5:= new `java.lang.StringBuilder`;
  #L21e7c4.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21e7ca.  v0:= "Inflater data format exception: " @kind object;
  #L21e7ce.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21e7d4.  call temp:= `getMessage`(v3) @signature `Ljava/util/zip/DataFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L21e7da.  v3:= temp @kind object;
  #L21e7dc.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21e7e2.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21e7e8.  v3:= temp @kind object;
  #L21e7ea.  call `<init>`(v4, v3) @signature `Ljava/util/zip/DataFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e7f0.  throw v4;
  catch `java.util.zip.DataFormatException` @[L21e71c..L21e7b8] goto L21e7ba;
}
procedure `boolean` `x`(`io.grpc.internal.GzipInflatingBuffer` v5 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.x:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L21e1e8.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` @kind object;
  #L21e1ec.  v1:= 1I;
  #L21e1ee.  v2:= 0I;
  #L21e1f0.  if v0 == 0 then goto L21e1f8;
  #L21e1f4.  v0:= 1I;
  #L21e1f6.  goto L21e1fa;
  #L21e1f8.  v0:= 0I;
  #L21e1fa.  v3:= "inflater is null" @kind object;
  #L21e1fe.  call `z`(v0, v3) @signature `Lcom/google/common/base/b0;.z:(ZLjava/lang/Object;)V` @kind static;
  #L21e204.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.f` @type ^`int`;
  #L21e208.  v3:= v5.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`int`;
  #L21e20c.  if v0 != v3 then goto L21e214;
  #L21e210.  v0:= 1I;
  #L21e212.  goto L21e216;
  #L21e214.  v0:= 0I;
  #L21e216.  v3:= "inflaterInput has unconsumed bytes" @kind object;
  #L21e21a.  call `z`(v0, v3) @signature `Lcom/google/common/base/b0;.z:(ZLjava/lang/Object;)V` @kind static;
  #L21e220.  v0:= v5.`io.grpc.internal.GzipInflatingBuffer.b` @type ^`io.grpc.internal.w1` @kind object;
  #L21e224.  call temp:= `y`(v0) @signature `Lio/grpc/internal/w1;.y:()I` @kind virtual;
  #L21e22a.  v0:= temp;
  #L21e22c.  v3:= 512I;
  #L21e230.  call temp:= `min`(v0, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L21e236.  v0:= temp;
  #L21e238.  if v0 != 0 then goto L21e23e;
  #L21e23c.  return v2;
  #L21e23e.  v5.`io.grpc.internal.GzipInflatingBuffer.f` @type ^`int` := v2;
  #L21e242.  v5.`io.grpc.internal.GzipInflatingBuffer.g` @type ^`int` := v0;
  #L21e246.  v3:= v5.`io.grpc.internal.GzipInflatingBuffer.b` @type ^`io.grpc.internal.w1` @kind object;
  #L21e24a.  v4:= v5.`io.grpc.internal.GzipInflatingBuffer.e` @type ^`byte`[] @kind object;
  #L21e24e.  call `B`(v3, v4, v2, v0) @signature `Lio/grpc/internal/w1;.B:([BII)V` @kind virtual;
  #L21e254.  v2:= v5.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` @kind object;
  #L21e258.  v3:= v5.`io.grpc.internal.GzipInflatingBuffer.e` @type ^`byte`[] @kind object;
  #L21e25c.  v4:= v5.`io.grpc.internal.GzipInflatingBuffer.f` @type ^`int`;
  #L21e260.  call `setInput`(v2, v3, v4, v0) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L21e266.  v0:= `@@io.grpc.internal.GzipInflatingBuffer$State.INFLATING` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e26a.  v5.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` := v0 @kind object;
  #L21e26e.  return v1;
}
procedure `int` `A0`(`io.grpc.internal.GzipInflatingBuffer` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lio/grpc/internal/GzipInflatingBuffer;.A0:([BII)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L21e814.  v0:= v6.`io.grpc.internal.GzipInflatingBuffer.j` @type ^`boolean` @kind boolean;
  #L21e818.  v1:= 1I;
  #L21e81a.  v0:= v0 ^~ v1 @kind int;
  #L21e81c.  v2:= "GzipInflatingBuffer is closed" @kind object;
  #L21e820.  call `z`(v0, v2) @signature `Lcom/google/common/base/b0;.z:(ZLjava/lang/Object;)V` @kind static;
  #L21e826.  v0:= 0I;
  #L21e828.  v2:= 1I;
  #L21e82a.  v3:= 0I;
  #L21e82c.  if v2 == 0 then goto L21e906;
  #L21e830.  v4:= v9 - v3 @kind int;
  #L21e834.  if v4 <= 0 then goto L21e906;
  #L21e838.  v2:= `@@io.grpc.internal.e4.a` @type ^`int`[] @kind object;
  #L21e83c.  v5:= v6.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e840.  call temp:= `ordinal`(v5) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L21e846.  v5:= temp;
  #L21e848.  v2:= v2[v5];
  #L21e84c.  goto L21e934;
  #L21e852.  v7:= new `java.lang.AssertionError`;
  #L21e856.  v8:= new `java.lang.StringBuilder`;
  #L21e85a.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21e860.  v9:= "Invalid state: " @kind object;
  #L21e864.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21e86a.  v9:= v6.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e86e.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21e874.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21e87a.  v8:= temp @kind object;
  #L21e87c.  call `<init>`(v7, v8) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L21e882.  throw v7;
  #L21e884.  call temp:= `T0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.T0:()Z` @kind direct;
  #L21e88a.  v2:= temp;
  #L21e88c.  goto L21e82c;
  #L21e88e.  call temp:= `x`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.x:()Z` @kind direct;
  #L21e894.  v2:= temp;
  #L21e896.  goto L21e82c;
  #L21e898.  v2:= v8 + v3 @kind int;
  #L21e89c.  call temp:= `u0`(v6, v7, v2, v4) @signature `Lio/grpc/internal/GzipInflatingBuffer;.u0:([BII)I` @kind direct;
  #L21e8a2.  v2:= temp;
  #L21e8a4.  v3:= v3 + v2 @kind int;
  #L21e8a6.  v2:= v6.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e8aa.  v4:= `@@io.grpc.internal.GzipInflatingBuffer$State.TRAILER` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e8ae.  if v2 != v4 then goto L21e8bc;
  #L21e8b2.  call temp:= `T0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.T0:()Z` @kind direct;
  #L21e8b8.  v2:= temp;
  #L21e8ba.  goto L21e82c;
  #L21e8bc.  v2:= 1I;
  #L21e8be.  goto L21e82c;
  #L21e8c0.  call temp:= `G0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.G0:()Z` @kind direct;
  #L21e8c6.  v2:= temp;
  #L21e8c8.  goto L21e82c;
  #L21e8ca.  call temp:= `P0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.P0:()Z` @kind direct;
  #L21e8d0.  v2:= temp;
  #L21e8d2.  goto L21e82c;
  #L21e8d4.  call temp:= `O0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.O0:()Z` @kind direct;
  #L21e8da.  v2:= temp;
  #L21e8dc.  goto L21e82c;
  #L21e8de.  call temp:= `S0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.S0:()Z` @kind direct;
  #L21e8e4.  v2:= temp;
  #L21e8e6.  goto L21e82c;
  #L21e8e8.  call temp:= `Q0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.Q0:()Z` @kind direct;
  #L21e8ee.  v2:= temp;
  #L21e8f0.  goto L21e82c;
  #L21e8f2.  call temp:= `R0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.R0:()Z` @kind direct;
  #L21e8f8.  v2:= temp;
  #L21e8fa.  goto L21e82c;
  #L21e8fc.  call temp:= `N0`(v6) @signature `Lio/grpc/internal/GzipInflatingBuffer;.N0:()Z` @kind direct;
  #L21e902.  v2:= temp;
  #L21e904.  goto L21e82c;
  #L21e906.  if v2 == 0 then goto L21e92e;
  #L21e90a.  v7:= v6.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e90e.  v8:= `@@io.grpc.internal.GzipInflatingBuffer$State.HEADER` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e912.  if v7 != v8 then goto L21e92c;
  #L21e916.  v7:= v6.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e91a.  call temp:= `d`(v7) @signature `Lio/grpc/internal/f4;.d:(Lio/grpc/internal/f4;)I` @kind static;
  #L21e920.  v7:= temp;
  #L21e922.  v8:= 10I;
  #L21e926.  if v7 >= v8 then goto L21e92c;
  #L21e92a.  goto L21e92e;
  #L21e92c.  v1:= 0I;
  #L21e92e.  v6.`io.grpc.internal.GzipInflatingBuffer.p` @type ^`boolean` := v1 @kind boolean;
  #L21e932.  return v3;
  #L21e934.  switch v2
                  | 1 => goto L21e8fc
                  | 2 => goto L21e8f2
                  | 3 => goto L21e8e8
                  | 4 => goto L21e8de
                  | 5 => goto L21e8d4
                  | 6 => goto L21e8ca
                  | 7 => goto L21e8c0
                  | 8 => goto L21e898
                  | 9 => goto L21e88e
                  | 10 => goto L21e884
                  | else => goto L21e852;
}
procedure `int` `C`(`io.grpc.internal.GzipInflatingBuffer` v2 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.C:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L21e6cc.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.n` @type ^`int`;
  #L21e6d0.  v1:= 0I;
  #L21e6d2.  v2.`io.grpc.internal.GzipInflatingBuffer.n` @type ^`int` := v1;
  #L21e6d6.  return v0;
}
procedure `boolean` `K0`(`io.grpc.internal.GzipInflatingBuffer` v2 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.K0:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L21e330.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.j` @type ^`boolean` @kind boolean;
  #L21e334.  v0:= v0 ^~ 1;
  #L21e338.  v1:= "GzipInflatingBuffer is closed" @kind object;
  #L21e33c.  call `z`(v0, v1) @signature `Lcom/google/common/base/b0;.z:(ZLjava/lang/Object;)V` @kind static;
  #L21e342.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.p` @type ^`boolean` @kind boolean;
  #L21e346.  return v0;
}
procedure `void` `close`(`io.grpc.internal.GzipInflatingBuffer` v1 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21ea44.  v0:= v1.`io.grpc.internal.GzipInflatingBuffer.j` @type ^`boolean` @kind boolean;
  #L21ea48.  if v0 != 0 then goto L21ea70;
  #L21ea4c.  v0:= 1I;
  #L21ea4e.  v1.`io.grpc.internal.GzipInflatingBuffer.j` @type ^`boolean` := v0 @kind boolean;
  #L21ea52.  v0:= v1.`io.grpc.internal.GzipInflatingBuffer.b` @type ^`io.grpc.internal.w1` @kind object;
  #L21ea56.  call `close`(v0) @signature `Lio/grpc/internal/w1;.close:()V` @kind virtual;
  #L21ea5c.  v0:= v1.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` @kind object;
  #L21ea60.  if v0 == 0 then goto L21ea70;
  #L21ea64.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L21ea6a.  v0:= 0I;
  #L21ea6c.  v1.`io.grpc.internal.GzipInflatingBuffer.h` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L21ea70.  return @kind void;
}
procedure `int` `m0`(`io.grpc.internal.GzipInflatingBuffer` v2 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.m0:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L21e6e8.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.o` @type ^`int`;
  #L21e6ec.  v1:= 0I;
  #L21e6ee.  v2.`io.grpc.internal.GzipInflatingBuffer.o` @type ^`int` := v1;
  #L21e6f2.  return v0;
}
procedure `boolean` `o0`(`io.grpc.internal.GzipInflatingBuffer` v3 @kind this) @signature `Lio/grpc/internal/GzipInflatingBuffer;.o0:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L21e280.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.j` @type ^`boolean` @kind boolean;
  #L21e284.  v1:= 1I;
  #L21e286.  v0:= v0 ^~ v1 @kind int;
  #L21e288.  v2:= "GzipInflatingBuffer is closed" @kind object;
  #L21e28c.  call `z`(v0, v2) @signature `Lcom/google/common/base/b0;.z:(ZLjava/lang/Object;)V` @kind static;
  #L21e292.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.d` @type ^`io.grpc.internal.f4` @kind object;
  #L21e296.  call temp:= `d`(v0) @signature `Lio/grpc/internal/f4;.d:(Lio/grpc/internal/f4;)I` @kind static;
  #L21e29c.  v0:= temp;
  #L21e29e.  if v0 != 0 then goto L21e2b2;
  #L21e2a2.  v0:= v3.`io.grpc.internal.GzipInflatingBuffer.i` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e2a6.  v2:= `@@io.grpc.internal.GzipInflatingBuffer$State.HEADER` @type ^`io.grpc.internal.GzipInflatingBuffer$State` @kind object;
  #L21e2aa.  if v0 == v2 then goto L21e2b0;
  #L21e2ae.  goto L21e2b2;
  #L21e2b0.  v1:= 0I;
  #L21e2b2.  return v1;
}
procedure `void` `v`(`io.grpc.internal.GzipInflatingBuffer` v2 @kind this, `io.grpc.internal.k7` v3 @kind object) @signature `Lio/grpc/internal/GzipInflatingBuffer;.v:(Lio/grpc/internal/k7;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L21ea10.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.j` @type ^`boolean` @kind boolean;
  #L21ea14.  v0:= v0 ^~ 1;
  #L21ea18.  v1:= "GzipInflatingBuffer is closed" @kind object;
  #L21ea1c.  call `z`(v0, v1) @signature `Lcom/google/common/base/b0;.z:(ZLjava/lang/Object;)V` @kind static;
  #L21ea22.  v0:= v2.`io.grpc.internal.GzipInflatingBuffer.b` @type ^`io.grpc.internal.w1` @kind object;
  #L21ea26.  call `c`(v0, v3) @signature `Lio/grpc/internal/w1;.c:(Lio/grpc/internal/k7;)V` @kind virtual;
  #L21ea2c.  v3:= 0I;
  #L21ea2e.  v2.`io.grpc.internal.GzipInflatingBuffer.p` @type ^`boolean` := v3 @kind boolean;
  #L21ea32.  return @kind void;
}
