record `io.grpc.internal.t8` @kind class @AccessFlag FINAL {
  `int` `io.grpc.internal.t8.a` @AccessFlag FINAL;
  `int` `io.grpc.internal.t8.b` @AccessFlag FINAL;
  `int` `io.grpc.internal.t8.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.grpc.internal.t8.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.grpc.internal.t8` v2 @kind this, `float` v3 , `float` v4 ) @signature `Lio/grpc/internal/t8;.<init>:(FF)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2296e0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2296e6.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L2296ea.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L2296f0.  v2.`io.grpc.internal.t8.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L2296f4.  v1:= 1000.0F;
  #L2296f8.  v4:= v4 * v1 @kind float;
  #L2296fc.  v4:= (`int`) v4 @kind f2i;
  #L2296fe.  v2.`io.grpc.internal.t8.c` @type ^`int` := v4;
  #L229702.  v3:= v3 * v1 @kind float;
  #L229706.  v3:= (`int`) v3 @kind f2i;
  #L229708.  v2.`io.grpc.internal.t8.a` @type ^`int` := v3;
  #L22970c.  v4:= v3 / 2;
  #L229710.  v2.`io.grpc.internal.t8.b` @type ^`int` := v4;
  #L229714.  call `set`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L22971a.  return @kind void;
}
procedure `boolean` `a`(`io.grpc.internal.t8` v2 @kind this) @signature `Lio/grpc/internal/t8;.a:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L229624.  v0:= v2.`io.grpc.internal.t8.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L229628.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L22962e.  v0:= temp;
  #L229630.  v1:= v2.`io.grpc.internal.t8.b` @type ^`int`;
  #L229634.  if v0 <= v1 then goto L22963c;
  #L229638.  v0:= 1I;
  #L22963a.  goto L22963e;
  #L22963c.  v0:= 0I;
  #L22963e.  return v0;
}
procedure `boolean` `b`(`io.grpc.internal.t8` v5 @kind this) @signature `Lio/grpc/internal/t8;.b:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L229650.  v0:= v5.`io.grpc.internal.t8.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L229654.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L22965a.  v0:= temp;
  #L22965c.  v1:= 0I;
  #L22965e.  if v0 != 0 then goto L229664;
  #L229662.  return v1;
  #L229664.  v2:= v0 + -1000;
  #L229668.  v3:= v5.`io.grpc.internal.t8.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L22966c.  call temp:= `max`(v2, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L229672.  v4:= temp;
  #L229674.  call temp:= `compareAndSet`(v3, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L22967a.  v0:= temp;
  #L22967c.  if v0 == 0 then goto L229650;
  #L229680.  v0:= v5.`io.grpc.internal.t8.b` @type ^`int`;
  #L229684.  if v2 <= v0 then goto L22968a;
  #L229688.  v1:= 1I;
  #L22968a.  return v1;
}
procedure `void` `c`(`io.grpc.internal.t8` v4 @kind this) @signature `Lio/grpc/internal/t8;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L22972c.  v0:= v4.`io.grpc.internal.t8.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L229730.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L229736.  v0:= temp;
  #L229738.  v1:= v4.`io.grpc.internal.t8.a` @type ^`int`;
  #L22973c.  if v0 != v1 then goto L229742;
  #L229740.  goto L229760;
  #L229742.  v2:= v4.`io.grpc.internal.t8.c` @type ^`int`;
  #L229746.  v2:= v2 + v0 @kind int;
  #L229748.  v3:= v4.`io.grpc.internal.t8.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L22974c.  call temp:= `min`(v2, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L229752.  v1:= temp;
  #L229754.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L22975a.  v0:= temp;
  #L22975c.  if v0 == 0 then goto L22972c;
  #L229760.  return @kind void;
}
procedure `boolean` `equals`(`io.grpc.internal.t8` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/grpc/internal/t8;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2295dc.  v0:= 1I;
  #L2295de.  if v4 != v5 then goto L2295e4;
  #L2295e2.  return v0;
  #L2295e4.  v1:= instanceof @variable v5 @type ^`io.grpc.internal.t8` @kind boolean;
  #L2295e8.  v2:= 0I;
  #L2295ea.  if v1 != 0 then goto L2295f0;
  #L2295ee.  return v2;
  #L2295f0.  v5:= (`io.grpc.internal.t8`) v5 @kind object;
  #L2295f4.  v1:= v4.`io.grpc.internal.t8.a` @type ^`int`;
  #L2295f8.  v3:= v5.`io.grpc.internal.t8.a` @type ^`int`;
  #L2295fc.  if v1 != v3 then goto L22960e;
  #L229600.  v1:= v4.`io.grpc.internal.t8.c` @type ^`int`;
  #L229604.  v5:= v5.`io.grpc.internal.t8.c` @type ^`int`;
  #L229608.  if v1 != v5 then goto L22960e;
  #L22960c.  goto L229610;
  #L22960e.  v0:= 0I;
  #L229610.  return v0;
}
procedure `int` `hashCode`(`io.grpc.internal.t8` v3 @kind this) @signature `Lio/grpc/internal/t8;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L22969c.  v0:= 2I;
  #L22969e.  v0:= new `java.lang.Object`[v0];
  #L2296a2.  v1:= v3.`io.grpc.internal.t8.a` @type ^`int`;
  #L2296a6.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2296ac.  v1:= temp @kind object;
  #L2296ae.  v2:= 0I;
  #L2296b0.  v0[v2]:= v1 @kind object;
  #L2296b4.  v1:= v3.`io.grpc.internal.t8.c` @type ^`int`;
  #L2296b8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2296be.  v1:= temp @kind object;
  #L2296c0.  v2:= 1I;
  #L2296c2.  v0[v2]:= v1 @kind object;
  #L2296c6.  call temp:= `b`(v0) @signature `Lcom/google/common/base/v;.b:([Ljava/lang/Object;)I` @kind static;
  #L2296cc.  v0:= temp;
  #L2296ce.  return v0;
}
