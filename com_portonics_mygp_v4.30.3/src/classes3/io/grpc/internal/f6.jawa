record `io.grpc.internal.f6` @kind class @AccessFlag FINAL extends `java.lang.ref.WeakReference` @kind class {
  `java.lang.ref.ReferenceQueue` `io.grpc.internal.f6.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ConcurrentMap` `io.grpc.internal.f6.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `io.grpc.internal.f6.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.ref.Reference` `io.grpc.internal.f6.f` @AccessFlag PRIVATE_FINAL;
  `boolean` `io.grpc.internal.f6.g` @AccessFlag PRIVATE_VOLATILE;
}
global `boolean` `@@io.grpc.internal.f6.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.RuntimeException` `@@io.grpc.internal.f6.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/grpc/internal/f6;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L224c90.  v0:= "io.grpc.ManagedChannel.enableAllocationTracking" @kind object;
  #L224c94.  v1:= "true" @kind object;
  #L224c98.  call temp:= `getProperty`(v0, v1) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L224c9e.  v0:= temp @kind object;
  #L224ca0.  call temp:= `parseBoolean`(v0) @signature `Ljava/lang/Boolean;.parseBoolean:(Ljava/lang/String;)Z` @kind static;
  #L224ca6.  v0:= temp;
  #L224ca8.  `@@io.grpc.internal.f6.a` @type ^`boolean` := v0 @kind boolean;
  #L224cac.  call temp:= `c`() @signature `Lio/grpc/internal/f6;.c:()Ljava/lang/RuntimeException;` @kind static;
  #L224cb2.  v0:= temp @kind object;
  #L224cb4.  `@@io.grpc.internal.f6.b` @type ^`java.lang.RuntimeException` := v0 @kind object;
  #L224cb8.  return @kind void;
}
procedure `void` `<init>`(`io.grpc.internal.f6` v2 @kind this, `io.grpc.internal.g6` v3 @kind object, `io.grpc.z1` v4 @kind object, `java.lang.ref.ReferenceQueue` v5 @kind object, `java.util.concurrent.ConcurrentMap` v6 @kind object) @signature `Lio/grpc/internal/f6;.<init>:(Lio/grpc/internal/g6;Lio/grpc/z1;Ljava/lang/ref/ReferenceQueue;Ljava/util/concurrent/ConcurrentMap;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L224ccc.  call `<init>`(v2, v3, v5) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V` @kind direct;
  #L224cd2.  v3:= new `java.lang.ref.SoftReference`;
  #L224cd6.  v0:= `@@io.grpc.internal.f6.a` @type ^`boolean` @kind boolean;
  #L224cda.  if v0 == 0 then goto L224cee;
  #L224cde.  v0:= new `java.lang.RuntimeException`;
  #L224ce2.  v1:= "ManagedChannel allocation site" @kind object;
  #L224ce6.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L224cec.  goto L224cf2;
  #L224cee.  v0:= `@@io.grpc.internal.f6.b` @type ^`java.lang.RuntimeException` @kind object;
  #L224cf2.  call `<init>`(v3, v0) @signature `Ljava/lang/ref/SoftReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L224cf8.  v2.`io.grpc.internal.f6.f` @type ^`java.lang.ref.Reference` := v3 @kind object;
  #L224cfc.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L224d02.  v3:= temp @kind object;
  #L224d04.  v2.`io.grpc.internal.f6.e` @type ^`java.lang.String` := v3 @kind object;
  #L224d08.  v2.`io.grpc.internal.f6.c` @type ^`java.lang.ref.ReferenceQueue` := v5 @kind object;
  #L224d0c.  v2.`io.grpc.internal.f6.d` @type ^`java.util.concurrent.ConcurrentMap` := v6 @kind object;
  #L224d10.  call temp:= `put`(v6, v2, v2) @signature `Ljava/util/concurrent/ConcurrentMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L224d16.  call temp:= `a`(v5) @signature `Lio/grpc/internal/f6;.a:(Ljava/lang/ref/ReferenceQueue;)I` @kind static;
  #L224d1c.  return @kind void;
}
procedure `int` `a`(`java.lang.ref.ReferenceQueue` v7 @kind object) @signature `Lio/grpc/internal/f6;.a:(Ljava/lang/ref/ReferenceQueue;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L224b80.  v0:= 0I;
  #L224b82.  v1:= 0I;
  #L224b84.  call temp:= `poll`(v7) @signature `Ljava/lang/ref/ReferenceQueue;.poll:()Ljava/lang/ref/Reference;` @kind virtual;
  #L224b8a.  v2:= temp @kind object;
  #L224b8c.  v2:= (`io.grpc.internal.f6`) v2 @kind object;
  #L224b90.  if v2 == 0 then goto L224c50;
  #L224b94.  v3:= v2.`io.grpc.internal.f6.f` @type ^`java.lang.ref.Reference` @kind object;
  #L224b98.  call temp:= `get`(v3) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L224b9e.  v3:= temp @kind object;
  #L224ba0.  v3:= (`java.lang.RuntimeException`) v3 @kind object;
  #L224ba4.  call `b`(v2) @signature `Lio/grpc/internal/f6;.b:()V` @kind direct;
  #L224baa.  v4:= v2.`io.grpc.internal.f6.g` @type ^`boolean` @kind boolean;
  #L224bae.  if v4 != 0 then goto L224b84;
  #L224bb2.  v1:= v1 + 1;
  #L224bb6.  v4:= `@@java.util.logging.Level.SEVERE` @type ^`java.util.logging.Level` @kind object;
  #L224bba.  call temp:= `i`() @signature `Lio/grpc/internal/g6;.i:()Ljava/util/logging/Logger;` @kind static;
  #L224bc0.  v5:= temp @kind object;
  #L224bc2.  call temp:= `isLoggable`(v5, v4) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L224bc8.  v5:= temp;
  #L224bca.  if v5 == 0 then goto L224b84;
  #L224bce.  v5:= new `java.lang.StringBuilder`;
  #L224bd2.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L224bd8.  v6:= "*~*~*~ Channel {0} was not shutdown properly!!! ~*~*~*" @kind object;
  #L224bdc.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L224be2.  v6:= "line.separator" @kind object;
  #L224be6.  call temp:= `getProperty`(v6) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L224bec.  v6:= temp @kind object;
  #L224bee.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L224bf4.  v6:= "    Make sure to call shutdown()/shutdownNow() and wait until awaitTermination() returns true." @kind object;
  #L224bf8.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L224bfe.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L224c04.  v5:= temp @kind object;
  #L224c06.  v6:= new `java.util.logging.LogRecord`;
  #L224c0a.  call `<init>`(v6, v4, v5) @signature `Ljava/util/logging/LogRecord;.<init>:(Ljava/util/logging/Level;Ljava/lang/String;)V` @kind direct;
  #L224c10.  call temp:= `i`() @signature `Lio/grpc/internal/g6;.i:()Ljava/util/logging/Logger;` @kind static;
  #L224c16.  v4:= temp @kind object;
  #L224c18.  call temp:= `getName`(v4) @signature `Ljava/util/logging/Logger;.getName:()Ljava/lang/String;` @kind virtual;
  #L224c1e.  v4:= temp @kind object;
  #L224c20.  call `setLoggerName`(v6, v4) @signature `Ljava/util/logging/LogRecord;.setLoggerName:(Ljava/lang/String;)V` @kind virtual;
  #L224c26.  v4:= 1I;
  #L224c28.  v4:= new `java.lang.Object`[v4];
  #L224c2c.  v2:= v2.`io.grpc.internal.f6.e` @type ^`java.lang.String` @kind object;
  #L224c30.  v4[v0]:= v2 @kind object;
  #L224c34.  call `setParameters`(v6, v4) @signature `Ljava/util/logging/LogRecord;.setParameters:([Ljava/lang/Object;)V` @kind virtual;
  #L224c3a.  call `setThrown`(v6, v3) @signature `Ljava/util/logging/LogRecord;.setThrown:(Ljava/lang/Throwable;)V` @kind virtual;
  #L224c40.  call temp:= `i`() @signature `Lio/grpc/internal/g6;.i:()Ljava/util/logging/Logger;` @kind static;
  #L224c46.  v2:= temp @kind object;
  #L224c48.  call `log`(v2, v6) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/LogRecord;)V` @kind virtual;
  #L224c4e.  goto L224b84;
  #L224c50.  return v1;
}
procedure `void` `b`(`io.grpc.internal.f6` v1 @kind this) @signature `Lio/grpc/internal/f6;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L224d54.  call `clear`(v1) @signature `Ljava/lang/ref/WeakReference;.clear:()V` @kind super;
  #L224d5a.  v0:= v1.`io.grpc.internal.f6.d` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L224d5e.  call temp:= `remove`(v0, v1) @signature `Ljava/util/concurrent/ConcurrentMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L224d64.  v0:= v1.`io.grpc.internal.f6.f` @type ^`java.lang.ref.Reference` @kind object;
  #L224d68.  call `clear`(v0) @signature `Ljava/lang/ref/Reference;.clear:()V` @kind virtual;
  #L224d6e.  return @kind void;
}
procedure `java.lang.RuntimeException` `c`() @signature `Lio/grpc/internal/f6;.c:()Ljava/lang/RuntimeException;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L224c64.  v0:= new `java.lang.RuntimeException`;
  #L224c68.  v1:= "ManagedChannel allocation site not recorded.  Set -Dio.grpc.ManagedChannel.enableAllocationTracking=true to enable it" @kind object;
  #L224c6c.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L224c72.  v1:= 0I;
  #L224c74.  v1:= new `java.lang.StackTraceElement`[v1];
  #L224c78.  call `setStackTrace`(v0, v1) @signature `Ljava/lang/RuntimeException;.setStackTrace:([Ljava/lang/StackTraceElement;)V` @kind virtual;
  #L224c7e.  return v0 @kind object;
}
procedure `void` `clear`(`io.grpc.internal.f6` v1 @kind this) @signature `Lio/grpc/internal/f6;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L224d30.  call `b`(v1) @signature `Lio/grpc/internal/f6;.b:()V` @kind direct;
  #L224d36.  v0:= v1.`io.grpc.internal.f6.c` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L224d3a.  call temp:= `a`(v0) @signature `Lio/grpc/internal/f6;.a:(Ljava/lang/ref/ReferenceQueue;)I` @kind static;
  #L224d40.  return @kind void;
}
