record `io.grpc.z3.c` @kind class @AccessFlag FINAL extends `io.grpc.z3.e` @kind class {
  `java.util.List` `io.grpc.z3.c.b` @AccessFlag PRIVATE_FINAL;
  `io.grpc.z3.f` `io.grpc.z3.c.c` @AccessFlag PRIVATE_FINAL;
  `int` `io.grpc.z3.c.d` @AccessFlag PRIVATE_VOLATILE;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@io.grpc.z3.c.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/grpc/z3/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L23af24.  v0:= constclass @type ^`io.grpc.z3.c` @kind object;
  #L23af28.  v1:= "d" @kind object;
  #L23af2c.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L23af32.  v0:= temp @kind object;
  #L23af34.  `@@io.grpc.z3.c.a` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L23af38.  return @kind void;
}
procedure `void` `<init>`(`io.grpc.z3.c` v2 @kind this, `java.util.List` v3 @kind object, `int` v4 , `io.grpc.z3.f` v5 @kind object) @signature `Lio/grpc/z3/c;.<init>:(Ljava/util/List;ILio/grpc/z3/f;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L23af4c.  v0:= 0I;
  #L23af4e.  call `<init>`(v2, v0) @signature `Lio/grpc/z3/e;.<init>:(Lio/grpc/z3/a;)V` @kind direct;
  #L23af54.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L23af5a.  v0:= temp;
  #L23af5c.  v0:= v0 ^~ 1;
  #L23af60.  v1:= "empty list" @kind object;
  #L23af64.  call `e`(v0, v1) @signature `Lcom/google/common/base/b0;.e:(ZLjava/lang/Object;)V` @kind static;
  #L23af6a.  v2.`io.grpc.z3.c.b` @type ^`java.util.List` := v3 @kind object;
  #L23af6e.  v2.`io.grpc.z3.c.c` @type ^`io.grpc.z3.f` := v5 @kind object;
  #L23af72.  v4:= v4 + -1;
  #L23af76.  v2.`io.grpc.z3.c.d` @type ^`int` := v4;
  #L23af7a.  return @kind void;
}
procedure `io.grpc.s1` `c`(`io.grpc.z3.c` v3 @kind this) @signature `Lio/grpc/z3/c;.c:()Lio/grpc/s1;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L23aed8.  v0:= v3.`io.grpc.z3.c.b` @type ^`java.util.List` @kind object;
  #L23aedc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23aee2.  v0:= temp;
  #L23aee4.  v1:= `@@io.grpc.z3.c.a` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L23aee8.  call temp:= `incrementAndGet`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L23aeee.  v2:= temp;
  #L23aef0.  if v2 < v0 then goto L23af00;
  #L23aef4.  v0:= v2 %% v0 @kind int;
  #L23aef8.  call temp:= `compareAndSet`(v1, v3, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L23aefe.  v2:= v0;
  #L23af00.  v0:= v3.`io.grpc.z3.c.b` @type ^`java.util.List` @kind object;
  #L23af04.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23af0a.  v0:= temp @kind object;
  #L23af0c.  v0:= (`io.grpc.s1`) v0 @kind object;
  #L23af10.  return v0 @kind object;
}
procedure `io.grpc.o1` `a`(`io.grpc.z3.c` v2 @kind this, `io.grpc.p1` v3 @kind object) @signature `Lio/grpc/z3/c;.a:(Lio/grpc/p1;)Lio/grpc/o1;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23ae54.  v0:= v2.`io.grpc.z3.c.c` @type ^`io.grpc.z3.f` @kind object;
  #L23ae58.  if v0 == 0 then goto L23aeae;
  #L23ae5c.  call temp:= `b`(v3) @signature `Lio/grpc/p1;.b:()Lio/grpc/m2;` @kind virtual;
  #L23ae62.  v3:= temp @kind object;
  #L23ae64.  v0:= v2.`io.grpc.z3.c.c` @type ^`io.grpc.z3.f` @kind object;
  #L23ae68.  v0:= v0.`io.grpc.z3.f.a` @type ^`io.grpc.j2` @kind object;
  #L23ae6c.  call temp:= `e`(v3, v0) @signature `Lio/grpc/m2;.e:(Lio/grpc/j2;)Ljava/lang/Object;` @kind virtual;
  #L23ae72.  v3:= temp @kind object;
  #L23ae74.  v3:= (`java.lang.String`) v3 @kind object;
  #L23ae78.  if v3 == 0 then goto L23aeae;
  #L23ae7c.  v0:= v2.`io.grpc.z3.c.c` @type ^`io.grpc.z3.f` @kind object;
  #L23ae80.  call temp:= `b`(v0, v3) @signature `Lio/grpc/z3/f;.b:(Ljava/lang/String;)Lio/grpc/s1;` @kind virtual;
  #L23ae86.  v0:= temp @kind object;
  #L23ae88.  if v0 == 0 then goto L23ae98;
  #L23ae8c.  call temp:= `i`(v0) @signature `Lio/grpc/z3/g;.i:(Lio/grpc/s1;)Z` @kind static;
  #L23ae92.  v1:= temp;
  #L23ae94.  if v1 != 0 then goto L23aeb0;
  #L23ae98.  v0:= v2.`io.grpc.z3.c.c` @type ^`io.grpc.z3.f` @kind object;
  #L23ae9c.  call temp:= `c`(v2) @signature `Lio/grpc/z3/c;.c:()Lio/grpc/s1;` @kind direct;
  #L23aea2.  v1:= temp @kind object;
  #L23aea4.  call temp:= `c`(v0, v3, v1) @signature `Lio/grpc/z3/f;.c:(Ljava/lang/String;Lio/grpc/s1;)Lio/grpc/s1;` @kind virtual;
  #L23aeaa.  v0:= temp @kind object;
  #L23aeac.  goto L23aeb0;
  #L23aeae.  v0:= 0I;
  #L23aeb0.  if v0 == 0 then goto L23aeb6;
  #L23aeb4.  goto L23aebe;
  #L23aeb6.  call temp:= `c`(v2) @signature `Lio/grpc/z3/c;.c:()Lio/grpc/s1;` @kind direct;
  #L23aebc.  v0:= temp @kind object;
  #L23aebe.  call temp:= `h`(v0) @signature `Lio/grpc/o1;.h:(Lio/grpc/s1;)Lio/grpc/o1;` @kind static;
  #L23aec4.  v3:= temp @kind object;
  #L23aec6.  return v3 @kind object;
}
procedure `boolean` `b`(`io.grpc.z3.c` v3 @kind this, `io.grpc.z3.e` v4 @kind object) @signature `Lio/grpc/z3/c;.b:(Lio/grpc/z3/e;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L23ade4.  v0:= instanceof @variable v4 @type ^`io.grpc.z3.c` @kind boolean;
  #L23ade8.  v1:= 0I;
  #L23adea.  if v0 != 0 then goto L23adf0;
  #L23adee.  return v1;
  #L23adf0.  v4:= (`io.grpc.z3.c`) v4 @kind object;
  #L23adf4.  if v4 == v3 then goto L23ae3e;
  #L23adf8.  v0:= v3.`io.grpc.z3.c.c` @type ^`io.grpc.z3.f` @kind object;
  #L23adfc.  v2:= v4.`io.grpc.z3.c.c` @type ^`io.grpc.z3.f` @kind object;
  #L23ae00.  if v0 != v2 then goto L23ae40;
  #L23ae04.  v0:= v3.`io.grpc.z3.c.b` @type ^`java.util.List` @kind object;
  #L23ae08.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23ae0e.  v0:= temp;
  #L23ae10.  v2:= v4.`io.grpc.z3.c.b` @type ^`java.util.List` @kind object;
  #L23ae14.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23ae1a.  v2:= temp;
  #L23ae1c.  if v0 != v2 then goto L23ae40;
  #L23ae20.  v0:= new `java.util.HashSet`;
  #L23ae24.  v2:= v3.`io.grpc.z3.c.b` @type ^`java.util.List` @kind object;
  #L23ae28.  call `<init>`(v0, v2) @signature `Ljava/util/HashSet;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L23ae2e.  v4:= v4.`io.grpc.z3.c.b` @type ^`java.util.List` @kind object;
  #L23ae32.  call temp:= `containsAll`(v0, v4) @signature `Ljava/util/HashSet;.containsAll:(Ljava/util/Collection;)Z` @kind virtual;
  #L23ae38.  v4:= temp;
  #L23ae3a.  if v4 == 0 then goto L23ae40;
  #L23ae3e.  v1:= 1I;
  #L23ae40.  return v1;
}
