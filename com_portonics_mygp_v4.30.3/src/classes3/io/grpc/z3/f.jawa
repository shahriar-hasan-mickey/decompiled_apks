record `io.grpc.z3.f` @kind class @AccessFlag FINAL {
  `io.grpc.j2` `io.grpc.z3.f.a` @AccessFlag FINAL;
  `java.util.concurrent.ConcurrentMap` `io.grpc.z3.f.b` @AccessFlag FINAL;
  `java.util.Queue` `io.grpc.z3.f.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.grpc.z3.f` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lio/grpc/z3/f;.<init>:(Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L23b07c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23b082.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L23b086.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L23b08c.  v1.`io.grpc.z3.f.b` @type ^`java.util.concurrent.ConcurrentMap` := v0 @kind object;
  #L23b090.  v0:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L23b094.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L23b09a.  v1.`io.grpc.z3.f.c` @type ^`java.util.Queue` := v0 @kind object;
  #L23b09e.  v0:= `@@io.grpc.m2.b` @type ^`io.grpc.g2` @kind object;
  #L23b0a2.  call temp:= `d`(v2, v0) @signature `Lio/grpc/j2;.d:(Ljava/lang/String;Lio/grpc/g2;)Lio/grpc/j2;` @kind static;
  #L23b0a8.  v2:= temp @kind object;
  #L23b0aa.  v1.`io.grpc.z3.f.a` @type ^`io.grpc.j2` := v2 @kind object;
  #L23b0ae.  return @kind void;
}
procedure `void` `a`(`io.grpc.z3.f` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lio/grpc/z3/f;.a:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L23b0c0.  v0:= v2.`io.grpc.z3.f.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L23b0c4.  call temp:= `size`(v0) @signature `Ljava/util/concurrent/ConcurrentMap;.size:()I` @kind interface;
  #L23b0ca.  v0:= temp;
  #L23b0cc.  v1:= 1000I;
  #L23b0d0.  if v0 < v1 then goto L23b0f4;
  #L23b0d4.  v0:= v2.`io.grpc.z3.f.c` @type ^`java.util.Queue` @kind object;
  #L23b0d8.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L23b0de.  v0:= temp @kind object;
  #L23b0e0.  v0:= (`java.lang.String`) v0 @kind object;
  #L23b0e4.  if v0 == 0 then goto L23b0f4;
  #L23b0e8.  v1:= v2.`io.grpc.z3.f.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L23b0ec.  call temp:= `remove`(v1, v0) @signature `Ljava/util/concurrent/ConcurrentMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L23b0f2.  goto L23b0c0;
  #L23b0f4.  v0:= v2.`io.grpc.z3.f.c` @type ^`java.util.Queue` @kind object;
  #L23b0f8.  call temp:= `add`(v0, v3) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23b0fe.  return @kind void;
}
procedure `io.grpc.s1` `b`(`io.grpc.z3.f` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lio/grpc/z3/f;.b:(Ljava/lang/String;)Lio/grpc/s1;` @AccessFlag  {
    temp;
    v0;

  #L23afd8.  v0:= v1.`io.grpc.z3.f.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L23afdc.  call temp:= `get`(v0, v2) @signature `Ljava/util/concurrent/ConcurrentMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L23afe2.  v2:= temp @kind object;
  #L23afe4.  v2:= (`io.grpc.z3.d`) v2 @kind object;
  #L23afe8.  if v2 == 0 then goto L23aff6;
  #L23afec.  v2:= v2.`io.grpc.z3.d.a` @type ^`java.lang.Object` @kind object;
  #L23aff0.  v2:= (`io.grpc.s1`) v2 @kind object;
  #L23aff4.  return v2 @kind object;
  #L23aff6.  v2:= 0I;
  #L23aff8.  return v2 @kind object;
}
procedure `io.grpc.s1` `c`(`io.grpc.z3.f` v4 @kind this, `java.lang.String` v5 @kind object, `io.grpc.s1` v6 @kind object) @signature `Lio/grpc/z3/f;.c:(Ljava/lang/String;Lio/grpc/s1;)Lio/grpc/s1;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23b00c.  call temp:= `c`(v6) @signature `Lio/grpc/s1;.c:()Lio/grpc/d;` @kind virtual;
  #L23b012.  v0:= temp @kind object;
  #L23b014.  v1:= `@@io.grpc.z3.g.c` @type ^`io.grpc.c` @kind object;
  #L23b018.  call temp:= `b`(v0, v1) @signature `Lio/grpc/d;.b:(Lio/grpc/c;)Ljava/lang/Object;` @kind virtual;
  #L23b01e.  v0:= temp @kind object;
  #L23b020.  v0:= (`io.grpc.z3.d`) v0 @kind object;
  #L23b024.  v1:= v4.`io.grpc.z3.f.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L23b028.  call temp:= `putIfAbsent`(v1, v5, v0) @signature `Ljava/util/concurrent/ConcurrentMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L23b02e.  v1:= temp @kind object;
  #L23b030.  v1:= (`io.grpc.z3.d`) v1 @kind object;
  #L23b034.  if v1 != 0 then goto L23b040;
  #L23b038.  call `a`(v4, v5) @signature `Lio/grpc/z3/f;.a:(Ljava/lang/String;)V` @kind direct;
  #L23b03e.  return v6 @kind object;
  #L23b040.  v2:= v1.`io.grpc.z3.d.a` @type ^`java.lang.Object` @kind object;
  #L23b044.  v2:= (`io.grpc.s1`) v2 @kind object;
  #L23b048.  if v2 == 0 then goto L23b05a;
  #L23b04c.  call temp:= `i`(v2) @signature `Lio/grpc/z3/g;.i:(Lio/grpc/s1;)Z` @kind static;
  #L23b052.  v3:= temp;
  #L23b054.  if v3 == 0 then goto L23b05a;
  #L23b058.  return v2 @kind object;
  #L23b05a.  v2:= v4.`io.grpc.z3.f.b` @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L23b05e.  call temp:= `replace`(v2, v5, v1, v0) @signature `Ljava/util/concurrent/ConcurrentMap;.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L23b064.  v1:= temp;
  #L23b066.  if v1 == 0 then goto L23b024;
  #L23b06a.  return v6 @kind object;
}
procedure `void` `d`(`io.grpc.z3.f` v1 @kind this, `io.grpc.s1` v2 @kind object) @signature `Lio/grpc/z3/f;.d:(Lio/grpc/s1;)V` @AccessFlag  {
    temp;
    v0;

  #L23b110.  call temp:= `c`(v2) @signature `Lio/grpc/s1;.c:()Lio/grpc/d;` @kind virtual;
  #L23b116.  v2:= temp @kind object;
  #L23b118.  v0:= `@@io.grpc.z3.g.c` @type ^`io.grpc.c` @kind object;
  #L23b11c.  call temp:= `b`(v2, v0) @signature `Lio/grpc/d;.b:(Lio/grpc/c;)Ljava/lang/Object;` @kind virtual;
  #L23b122.  v2:= temp @kind object;
  #L23b124.  v2:= (`io.grpc.z3.d`) v2 @kind object;
  #L23b128.  v0:= 0I;
  #L23b12a.  v2.`io.grpc.z3.d.a` @type ^`java.lang.Object` := v0 @kind object;
  #L23b12e.  return @kind void;
}
