record `io.grpc.StatusException` @kind class @AccessFlag PUBLIC extends `java.lang.Exception` @kind class {
  `boolean` `io.grpc.StatusException.fillInStackTrace` @AccessFlag PRIVATE_FINAL;
  `io.grpc.Status` `io.grpc.StatusException.status` @AccessFlag PRIVATE_FINAL;
  `io.grpc.m2` `io.grpc.StatusException.trailers` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@io.grpc.StatusException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.grpc.StatusException` v1 @kind this, `io.grpc.Status` v2 @kind object) @signature `Lio/grpc/StatusException;.<init>:(Lio/grpc/Status;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L212f9c.  v0:= 0I;
  #L212f9e.  call `<init>`(v1, v2, v0) @signature `Lio/grpc/StatusException;.<init>:(Lio/grpc/Status;Lio/grpc/m2;)V` @kind direct;
  #L212fa4.  return @kind void;
}
procedure `void` `<init>`(`io.grpc.StatusException` v1 @kind this, `io.grpc.Status` v2 @kind object, `io.grpc.m2` v3 @kind object) @signature `Lio/grpc/StatusException;.<init>:(Lio/grpc/Status;Lio/grpc/m2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L212fb8.  v0:= 1I;
  #L212fba.  call `<init>`(v1, v2, v3, v0) @signature `Lio/grpc/StatusException;.<init>:(Lio/grpc/Status;Lio/grpc/m2;Z)V` @kind direct;
  #L212fc0.  return @kind void;
}
procedure `void` `<init>`(`io.grpc.StatusException` v2 @kind this, `io.grpc.Status` v3 @kind object, `io.grpc.m2` v4 @kind object, `boolean` v5 ) @signature `Lio/grpc/StatusException;.<init>:(Lio/grpc/Status;Lio/grpc/m2;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L212fd4.  call temp:= `h`(v3) @signature `Lio/grpc/Status;.h:(Lio/grpc/Status;)Ljava/lang/String;` @kind static;
  #L212fda.  v0:= temp @kind object;
  #L212fdc.  call temp:= `m`(v3) @signature `Lio/grpc/Status;.m:()Ljava/lang/Throwable;` @kind virtual;
  #L212fe2.  v1:= temp @kind object;
  #L212fe4.  call `<init>`(v2, v0, v1) @signature `Ljava/lang/Exception;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L212fea.  v2.`io.grpc.StatusException.status` @type ^`io.grpc.Status` := v3 @kind object;
  #L212fee.  v2.`io.grpc.StatusException.trailers` @type ^`io.grpc.m2` := v4 @kind object;
  #L212ff2.  v2.`io.grpc.StatusException.fillInStackTrace` @type ^`boolean` := v5 @kind boolean;
  #L212ff6.  call temp:= `fillInStackTrace`(v2) @signature `Lio/grpc/StatusException;.fillInStackTrace:()Ljava/lang/Throwable;` @kind virtual;
  #L212ffc.  return @kind void;
}
procedure `java.lang.Throwable` `fillInStackTrace`(`io.grpc.StatusException` v1 @kind this) @signature `Lio/grpc/StatusException;.fillInStackTrace:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L212f60.  @monitorenter v1
  #L212f62.  v0:= v1.`io.grpc.StatusException.fillInStackTrace` @type ^`boolean` @kind boolean;
  #L212f66.  if v0 == 0 then goto L212f74;
  #L212f6a.  call temp:= `fillInStackTrace`(v1) @signature `Ljava/lang/Exception;.fillInStackTrace:()Ljava/lang/Throwable;` @kind super;
  #L212f70.  v0:= temp @kind object;
  #L212f72.  goto L212f76;
  #L212f74.  v0:= v1 @kind object;
  #L212f76.  @monitorexit v1
  #L212f78.  return v0 @kind object;
  #L212f7a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L212f7c.  @monitorexit v1
  #L212f7e.  throw v0;
  catch `java.lang.Throwable` @[L212f62..L212f72] goto L212f7a;
}
procedure `io.grpc.Status` `getStatus`(`io.grpc.StatusException` v1 @kind this) @signature `Lio/grpc/StatusException;.getStatus:()Lio/grpc/Status;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L212f48.  v0:= v1.`io.grpc.StatusException.status` @type ^`io.grpc.Status` @kind object;
  #L212f4c.  return v0 @kind object;
}
procedure `io.grpc.m2` `getTrailers`(`io.grpc.StatusException` v1 @kind this) @signature `Lio/grpc/StatusException;.getTrailers:()Lio/grpc/m2;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L212f30.  v0:= v1.`io.grpc.StatusException.trailers` @type ^`io.grpc.m2` @kind object;
  #L212f34.  return v0 @kind object;
}
