record `org.checkerframework.framework.qual.LiteralKind` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
}
global `org.checkerframework.framework.qual.LiteralKind`[] `@@org.checkerframework.framework.qual.LiteralKind.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `org.checkerframework.framework.qual.LiteralKind` `@@org.checkerframework.framework.qual.LiteralKind.ALL` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.framework.qual.LiteralKind` `@@org.checkerframework.framework.qual.LiteralKind.BOOLEAN` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.framework.qual.LiteralKind` `@@org.checkerframework.framework.qual.LiteralKind.CHAR` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.framework.qual.LiteralKind` `@@org.checkerframework.framework.qual.LiteralKind.DOUBLE` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.framework.qual.LiteralKind` `@@org.checkerframework.framework.qual.LiteralKind.FLOAT` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.framework.qual.LiteralKind` `@@org.checkerframework.framework.qual.LiteralKind.INT` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.framework.qual.LiteralKind` `@@org.checkerframework.framework.qual.LiteralKind.LONG` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.framework.qual.LiteralKind` `@@org.checkerframework.framework.qual.LiteralKind.NULL` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.framework.qual.LiteralKind` `@@org.checkerframework.framework.qual.LiteralKind.PRIMITIVE` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.framework.qual.LiteralKind` `@@org.checkerframework.framework.qual.LiteralKind.STRING` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lorg/checkerframework/framework/qual/LiteralKind;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L363c54.  v0:= new `org.checkerframework.framework.qual.LiteralKind`;
  #L363c58.  v1:= "NULL" @kind object;
  #L363c5c.  v2:= 0I;
  #L363c5e.  call `<init>`(v0, v1, v2) @signature `Lorg/checkerframework/framework/qual/LiteralKind;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L363c64.  `@@org.checkerframework.framework.qual.LiteralKind.NULL` @type ^`org.checkerframework.framework.qual.LiteralKind` := v0 @kind object;
  #L363c68.  v1:= new `org.checkerframework.framework.qual.LiteralKind`;
  #L363c6c.  v3:= "INT" @kind object;
  #L363c70.  v4:= 1I;
  #L363c72.  call `<init>`(v1, v3, v4) @signature `Lorg/checkerframework/framework/qual/LiteralKind;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L363c78.  `@@org.checkerframework.framework.qual.LiteralKind.INT` @type ^`org.checkerframework.framework.qual.LiteralKind` := v1 @kind object;
  #L363c7c.  v3:= new `org.checkerframework.framework.qual.LiteralKind`;
  #L363c80.  v5:= "LONG" @kind object;
  #L363c84.  v6:= 2I;
  #L363c86.  call `<init>`(v3, v5, v6) @signature `Lorg/checkerframework/framework/qual/LiteralKind;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L363c8c.  `@@org.checkerframework.framework.qual.LiteralKind.LONG` @type ^`org.checkerframework.framework.qual.LiteralKind` := v3 @kind object;
  #L363c90.  v5:= new `org.checkerframework.framework.qual.LiteralKind`;
  #L363c94.  v7:= "FLOAT" @kind object;
  #L363c98.  v8:= 3I;
  #L363c9a.  call `<init>`(v5, v7, v8) @signature `Lorg/checkerframework/framework/qual/LiteralKind;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L363ca0.  `@@org.checkerframework.framework.qual.LiteralKind.FLOAT` @type ^`org.checkerframework.framework.qual.LiteralKind` := v5 @kind object;
  #L363ca4.  v7:= new `org.checkerframework.framework.qual.LiteralKind`;
  #L363ca8.  v9:= "DOUBLE" @kind object;
  #L363cac.  v10:= 4I;
  #L363cae.  call `<init>`(v7, v9, v10) @signature `Lorg/checkerframework/framework/qual/LiteralKind;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L363cb4.  `@@org.checkerframework.framework.qual.LiteralKind.DOUBLE` @type ^`org.checkerframework.framework.qual.LiteralKind` := v7 @kind object;
  #L363cb8.  v9:= new `org.checkerframework.framework.qual.LiteralKind`;
  #L363cbc.  v11:= "BOOLEAN" @kind object;
  #L363cc0.  v12:= 5I;
  #L363cc2.  call `<init>`(v9, v11, v12) @signature `Lorg/checkerframework/framework/qual/LiteralKind;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L363cc8.  `@@org.checkerframework.framework.qual.LiteralKind.BOOLEAN` @type ^`org.checkerframework.framework.qual.LiteralKind` := v9 @kind object;
  #L363ccc.  v11:= new `org.checkerframework.framework.qual.LiteralKind`;
  #L363cd0.  v13:= "CHAR" @kind object;
  #L363cd4.  v14:= 6I;
  #L363cd6.  call `<init>`(v11, v13, v14) @signature `Lorg/checkerframework/framework/qual/LiteralKind;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L363cdc.  `@@org.checkerframework.framework.qual.LiteralKind.CHAR` @type ^`org.checkerframework.framework.qual.LiteralKind` := v11 @kind object;
  #L363ce0.  v13:= new `org.checkerframework.framework.qual.LiteralKind`;
  #L363ce4.  v15:= "STRING" @kind object;
  #L363ce8.  v14:= 7I;
  #L363cea.  call `<init>`(v13, v15, v14) @signature `Lorg/checkerframework/framework/qual/LiteralKind;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L363cf0.  `@@org.checkerframework.framework.qual.LiteralKind.STRING` @type ^`org.checkerframework.framework.qual.LiteralKind` := v13 @kind object;
  #L363cf4.  v15:= new `org.checkerframework.framework.qual.LiteralKind`;
  #L363cf8.  v14:= "ALL" @kind object;
  #L363cfc.  v12:= 8I;
  #L363d00.  call `<init>`(v15, v14, v12) @signature `Lorg/checkerframework/framework/qual/LiteralKind;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L363d06.  `@@org.checkerframework.framework.qual.LiteralKind.ALL` @type ^`org.checkerframework.framework.qual.LiteralKind` := v15 @kind object;
  #L363d0a.  v14:= new `org.checkerframework.framework.qual.LiteralKind`;
  #L363d0e.  v12:= "PRIMITIVE" @kind object;
  #L363d12.  v10:= 9I;
  #L363d16.  call `<init>`(v14, v12, v10) @signature `Lorg/checkerframework/framework/qual/LiteralKind;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L363d1c.  `@@org.checkerframework.framework.qual.LiteralKind.PRIMITIVE` @type ^`org.checkerframework.framework.qual.LiteralKind` := v14 @kind object;
  #L363d20.  v12:= 10I;
  #L363d24.  v12:= new `org.checkerframework.framework.qual.LiteralKind`[v12];
  #L363d28.  v12[v2]:= v0 @kind object;
  #L363d2c.  v12[v4]:= v1 @kind object;
  #L363d30.  v12[v6]:= v3 @kind object;
  #L363d34.  v12[v8]:= v5 @kind object;
  #L363d38.  v0:= 4I;
  #L363d3a.  v12[v0]:= v7 @kind object;
  #L363d3e.  v0:= 5I;
  #L363d40.  v12[v0]:= v9 @kind object;
  #L363d44.  v0:= 6I;
  #L363d46.  v12[v0]:= v11 @kind object;
  #L363d4a.  v0:= 7I;
  #L363d4c.  v12[v0]:= v13 @kind object;
  #L363d50.  v0:= 8I;
  #L363d54.  v12[v0]:= v15 @kind object;
  #L363d58.  v12[v10]:= v14 @kind object;
  #L363d5c.  `@@org.checkerframework.framework.qual.LiteralKind.$VALUES` @type ^`org.checkerframework.framework.qual.LiteralKind`[] := v12 @kind object;
  #L363d60.  return @kind void;
}
procedure `void` `<init>`(`org.checkerframework.framework.qual.LiteralKind` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lorg/checkerframework/framework/qual/LiteralKind;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L363d74.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L363d7a.  return @kind void;
}
procedure `java.util.List` `allLiteralKinds`() @signature `Lorg/checkerframework/framework/qual/LiteralKind;.allLiteralKinds:()Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L363b70.  v0:= new `java.util.ArrayList`;
  #L363b74.  call temp:= `values`() @signature `Lorg/checkerframework/framework/qual/LiteralKind;.values:()[Lorg/checkerframework/framework/qual/LiteralKind;` @kind static;
  #L363b7a.  v1:= temp @kind object;
  #L363b7c.  call temp:= `asList`(v1) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L363b82.  v1:= temp @kind object;
  #L363b84.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L363b8a.  v1:= `@@org.checkerframework.framework.qual.LiteralKind.ALL` @type ^`org.checkerframework.framework.qual.LiteralKind` @kind object;
  #L363b8e.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L363b94.  v1:= `@@org.checkerframework.framework.qual.LiteralKind.PRIMITIVE` @type ^`org.checkerframework.framework.qual.LiteralKind` @kind object;
  #L363b98.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L363b9e.  return v0 @kind object;
}
procedure `java.util.List` `primitiveLiteralKinds`() @signature `Lorg/checkerframework/framework/qual/LiteralKind;.primitiveLiteralKinds:()Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L363bb0.  v0:= 6I;
  #L363bb2.  v0:= new `org.checkerframework.framework.qual.LiteralKind`[v0];
  #L363bb6.  v1:= `@@org.checkerframework.framework.qual.LiteralKind.INT` @type ^`org.checkerframework.framework.qual.LiteralKind` @kind object;
  #L363bba.  v2:= 0I;
  #L363bbc.  v0[v2]:= v1 @kind object;
  #L363bc0.  v1:= `@@org.checkerframework.framework.qual.LiteralKind.LONG` @type ^`org.checkerframework.framework.qual.LiteralKind` @kind object;
  #L363bc4.  v2:= 1I;
  #L363bc6.  v0[v2]:= v1 @kind object;
  #L363bca.  v1:= `@@org.checkerframework.framework.qual.LiteralKind.FLOAT` @type ^`org.checkerframework.framework.qual.LiteralKind` @kind object;
  #L363bce.  v2:= 2I;
  #L363bd0.  v0[v2]:= v1 @kind object;
  #L363bd4.  v1:= `@@org.checkerframework.framework.qual.LiteralKind.DOUBLE` @type ^`org.checkerframework.framework.qual.LiteralKind` @kind object;
  #L363bd8.  v2:= 3I;
  #L363bda.  v0[v2]:= v1 @kind object;
  #L363bde.  v1:= `@@org.checkerframework.framework.qual.LiteralKind.BOOLEAN` @type ^`org.checkerframework.framework.qual.LiteralKind` @kind object;
  #L363be2.  v2:= 4I;
  #L363be4.  v0[v2]:= v1 @kind object;
  #L363be8.  v1:= `@@org.checkerframework.framework.qual.LiteralKind.CHAR` @type ^`org.checkerframework.framework.qual.LiteralKind` @kind object;
  #L363bec.  v2:= 5I;
  #L363bee.  v0[v2]:= v1 @kind object;
  #L363bf2.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L363bf8.  v0:= temp @kind object;
  #L363bfa.  return v0 @kind object;
}
procedure `org.checkerframework.framework.qual.LiteralKind` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lorg/checkerframework/framework/qual/LiteralKind;.valueOf:(Ljava/lang/String;)Lorg/checkerframework/framework/qual/LiteralKind;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L363c0c.  v0:= constclass @type ^`org.checkerframework.framework.qual.LiteralKind` @kind object;
  #L363c10.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L363c16.  v1:= temp @kind object;
  #L363c18.  v1:= (`org.checkerframework.framework.qual.LiteralKind`) v1 @kind object;
  #L363c1c.  return v1 @kind object;
}
procedure `org.checkerframework.framework.qual.LiteralKind`[] `values`() @signature `Lorg/checkerframework/framework/qual/LiteralKind;.values:()[Lorg/checkerframework/framework/qual/LiteralKind;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L363c30.  v0:= `@@org.checkerframework.framework.qual.LiteralKind.$VALUES` @type ^`org.checkerframework.framework.qual.LiteralKind`[] @kind object;
  #L363c34.  call temp:= `clone`(v0) @signature `[Lorg/checkerframework/framework/qual/LiteralKind;.clone:()Ljava/lang/Object;` @kind virtual;
  #L363c3a.  v0:= temp @kind object;
  #L363c3c.  v0:= (`org.checkerframework.framework.qual.LiteralKind`[]) v0 @kind object;
  #L363c40.  return v0 @kind object;
}
