record `org.checkerframework.checker.formatter.qual.ConversionCategory` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `java.lang.String` `org.checkerframework.checker.formatter.qual.ConversionCategory.chars` @AccessFlag PUBLIC_FINAL;
  `java.lang.Class`[] `org.checkerframework.checker.formatter.qual.ConversionCategory.types` @AccessFlag PUBLIC_FINAL;
}
global `org.checkerframework.checker.formatter.qual.ConversionCategory`[] `@@org.checkerframework.checker.formatter.qual.ConversionCategory.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `org.checkerframework.checker.formatter.qual.ConversionCategory` `@@org.checkerframework.checker.formatter.qual.ConversionCategory.CHAR` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.checker.formatter.qual.ConversionCategory` `@@org.checkerframework.checker.formatter.qual.ConversionCategory.CHAR_AND_INT` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.checker.formatter.qual.ConversionCategory` `@@org.checkerframework.checker.formatter.qual.ConversionCategory.FLOAT` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.checker.formatter.qual.ConversionCategory` `@@org.checkerframework.checker.formatter.qual.ConversionCategory.GENERAL` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.checker.formatter.qual.ConversionCategory` `@@org.checkerframework.checker.formatter.qual.ConversionCategory.INT` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.checker.formatter.qual.ConversionCategory` `@@org.checkerframework.checker.formatter.qual.ConversionCategory.INT_AND_TIME` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.checker.formatter.qual.ConversionCategory` `@@org.checkerframework.checker.formatter.qual.ConversionCategory.NULL` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.checker.formatter.qual.ConversionCategory` `@@org.checkerframework.checker.formatter.qual.ConversionCategory.TIME` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.checker.formatter.qual.ConversionCategory` `@@org.checkerframework.checker.formatter.qual.ConversionCategory.UNUSED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L3631f4.  v0:= constclass @type ^`java.lang.Long` @kind object;
  #L3631f8.  v1:= constclass @type ^`java.lang.Integer` @kind object;
  #L3631fc.  v2:= constclass @type ^`java.lang.Short` @kind object;
  #L363200.  v3:= constclass @type ^`java.lang.Byte` @kind object;
  #L363204.  v4:= new `org.checkerframework.checker.formatter.qual.ConversionCategory`;
  #L363208.  v5:= "GENERAL" @kind object;
  #L36320c.  v6:= 0I;
  #L36320e.  v7:= "bBhHsS" @kind object;
  #L363212.  v8:= 0I;
  #L363214.  call `<init>`(v4, v5, v6, v7, v8) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.<init>:(Ljava/lang/String;ILjava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L36321a.  `@@org.checkerframework.checker.formatter.qual.ConversionCategory.GENERAL` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` := v4 @kind object;
  #L36321e.  v5:= new `org.checkerframework.checker.formatter.qual.ConversionCategory`;
  #L363222.  v7:= 4I;
  #L363224.  v9:= new `java.lang.Class`[v7];
  #L363228.  v10:= constclass @type ^`java.lang.Character` @kind object;
  #L36322c.  v9[v6]:= v10 @kind object;
  #L363230.  v10:= 1I;
  #L363232.  v9[v10]:= v3 @kind object;
  #L363236.  v11:= 2I;
  #L363238.  v9[v11]:= v2 @kind object;
  #L36323c.  v12:= 3I;
  #L36323e.  v9[v12]:= v1 @kind object;
  #L363242.  v13:= "CHAR" @kind object;
  #L363246.  v14:= "cC" @kind object;
  #L36324a.  call `<init>`(v5, v13, v10, v14, v9) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.<init>:(Ljava/lang/String;ILjava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L363250.  `@@org.checkerframework.checker.formatter.qual.ConversionCategory.CHAR` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` := v5 @kind object;
  #L363254.  v9:= new `org.checkerframework.checker.formatter.qual.ConversionCategory`;
  #L363258.  v13:= 5I;
  #L36325a.  v14:= new `java.lang.Class`[v13];
  #L36325e.  v14[v6]:= v3 @kind object;
  #L363262.  v14[v10]:= v2 @kind object;
  #L363266.  v14[v11]:= v1 @kind object;
  #L36326a.  v14[v12]:= v0 @kind object;
  #L36326e.  v15:= constclass @type ^`java.math.BigInteger` @kind object;
  #L363272.  v14[v7]:= v15 @kind object;
  #L363276.  v15:= "INT" @kind object;
  #L36327a.  v8:= "doxX" @kind object;
  #L36327e.  call `<init>`(v9, v15, v11, v8, v14) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.<init>:(Ljava/lang/String;ILjava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L363284.  `@@org.checkerframework.checker.formatter.qual.ConversionCategory.INT` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` := v9 @kind object;
  #L363288.  v8:= new `org.checkerframework.checker.formatter.qual.ConversionCategory`;
  #L36328c.  v14:= new `java.lang.Class`[v12];
  #L363290.  v15:= constclass @type ^`java.lang.Float` @kind object;
  #L363294.  v14[v6]:= v15 @kind object;
  #L363298.  v15:= constclass @type ^`java.lang.Double` @kind object;
  #L36329c.  v14[v10]:= v15 @kind object;
  #L3632a0.  v15:= constclass @type ^`java.math.BigDecimal` @kind object;
  #L3632a4.  v14[v11]:= v15 @kind object;
  #L3632a8.  v15:= "FLOAT" @kind object;
  #L3632ac.  v13:= "eEfgGaA" @kind object;
  #L3632b0.  call `<init>`(v8, v15, v12, v13, v14) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.<init>:(Ljava/lang/String;ILjava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L3632b6.  `@@org.checkerframework.checker.formatter.qual.ConversionCategory.FLOAT` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` := v8 @kind object;
  #L3632ba.  v13:= new `org.checkerframework.checker.formatter.qual.ConversionCategory`;
  #L3632be.  v14:= new `java.lang.Class`[v12];
  #L3632c2.  v14[v6]:= v0 @kind object;
  #L3632c6.  v15:= constclass @type ^`java.util.Calendar` @kind object;
  #L3632ca.  v14[v10]:= v15 @kind object;
  #L3632ce.  v15:= constclass @type ^`java.util.Date` @kind object;
  #L3632d2.  v14[v11]:= v15 @kind object;
  #L3632d6.  v15:= "TIME" @kind object;
  #L3632da.  v11:= "tT" @kind object;
  #L3632de.  call `<init>`(v13, v15, v7, v11, v14) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.<init>:(Ljava/lang/String;ILjava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L3632e4.  `@@org.checkerframework.checker.formatter.qual.ConversionCategory.TIME` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` := v13 @kind object;
  #L3632e8.  v11:= new `org.checkerframework.checker.formatter.qual.ConversionCategory`;
  #L3632ec.  v14:= new `java.lang.Class`[v12];
  #L3632f0.  v14[v6]:= v3 @kind object;
  #L3632f4.  v14[v10]:= v2 @kind object;
  #L3632f8.  v2:= 2I;
  #L3632fa.  v14[v2]:= v1 @kind object;
  #L3632fe.  v1:= "CHAR_AND_INT" @kind object;
  #L363302.  v2:= 5I;
  #L363304.  v3:= 0I;
  #L363306.  call `<init>`(v11, v1, v2, v3, v14) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.<init>:(Ljava/lang/String;ILjava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L36330c.  `@@org.checkerframework.checker.formatter.qual.ConversionCategory.CHAR_AND_INT` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` := v11 @kind object;
  #L363310.  v1:= new `org.checkerframework.checker.formatter.qual.ConversionCategory`;
  #L363314.  v2:= new `java.lang.Class`[v10];
  #L363318.  v2[v6]:= v0 @kind object;
  #L36331c.  v0:= "INT_AND_TIME" @kind object;
  #L363320.  v14:= 6I;
  #L363322.  call `<init>`(v1, v0, v14, v3, v2) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.<init>:(Ljava/lang/String;ILjava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L363328.  `@@org.checkerframework.checker.formatter.qual.ConversionCategory.INT_AND_TIME` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` := v1 @kind object;
  #L36332c.  v0:= new `org.checkerframework.checker.formatter.qual.ConversionCategory`;
  #L363330.  v2:= new `java.lang.Class`[v6];
  #L363334.  v15:= "NULL" @kind object;
  #L363338.  v14:= 7I;
  #L36333a.  call `<init>`(v0, v15, v14, v3, v2) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.<init>:(Ljava/lang/String;ILjava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L363340.  `@@org.checkerframework.checker.formatter.qual.ConversionCategory.NULL` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` := v0 @kind object;
  #L363344.  v2:= new `org.checkerframework.checker.formatter.qual.ConversionCategory`;
  #L363348.  v15:= "UNUSED" @kind object;
  #L36334c.  v14:= 8I;
  #L363350.  call `<init>`(v2, v15, v14, v3, v3) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.<init>:(Ljava/lang/String;ILjava/lang/String;[Ljava/lang/Class;)V` @kind direct;
  #L363356.  `@@org.checkerframework.checker.formatter.qual.ConversionCategory.UNUSED` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` := v2 @kind object;
  #L36335a.  v3:= 9I;
  #L36335e.  v3:= new `org.checkerframework.checker.formatter.qual.ConversionCategory`[v3];
  #L363362.  v3[v6]:= v4 @kind object;
  #L363366.  v3[v10]:= v5 @kind object;
  #L36336a.  v4:= 2I;
  #L36336c.  v3[v4]:= v9 @kind object;
  #L363370.  v3[v12]:= v8 @kind object;
  #L363374.  v3[v7]:= v13 @kind object;
  #L363378.  v4:= 5I;
  #L36337a.  v3[v4]:= v11 @kind object;
  #L36337e.  v4:= 6I;
  #L363380.  v3[v4]:= v1 @kind object;
  #L363384.  v1:= 7I;
  #L363386.  v3[v1]:= v0 @kind object;
  #L36338a.  v3[v14]:= v2 @kind object;
  #L36338e.  `@@org.checkerframework.checker.formatter.qual.ConversionCategory.$VALUES` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory`[] := v3 @kind object;
  #L363392.  return @kind void;
}
procedure `void` `<init>`(`org.checkerframework.checker.formatter.qual.ConversionCategory` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `java.lang.String` v4 @kind object, `java.lang.Class`[] v5 @kind object) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.<init>:(Ljava/lang/String;ILjava/lang/String;[Ljava/lang/Class;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3633a4.  call `<init>`(v1, v2, v3) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L3633aa.  v1.`org.checkerframework.checker.formatter.qual.ConversionCategory.chars` @type ^`java.lang.String` := v4 @kind object;
  #L3633ae.  if v5 != 0 then goto L3633b8;
  #L3633b2.  v1.`org.checkerframework.checker.formatter.qual.ConversionCategory.types` @type ^`java.lang.Class`[] := v5 @kind object;
  #L3633b6.  goto L36340a;
  #L3633b8.  v2:= new `java.util.ArrayList`;
  #L3633bc.  v3:= length @variable v5;
  #L3633be.  call `<init>`(v2, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3633c4.  v3:= length @variable v5;
  #L3633c6.  v4:= 0I;
  #L3633c8.  if v4 >= v3 then goto L3633ee;
  #L3633cc.  v0:= v5[v4] @kind object;
  #L3633d0.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3633d6.  call temp:= `unwrapPrimitive`(v0) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.unwrapPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L3633dc.  v0:= temp @kind object;
  #L3633de.  if v0 == 0 then goto L3633e8;
  #L3633e2.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3633e8.  v4:= v4 + 1;
  #L3633ec.  goto L3633c8;
  #L3633ee.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3633f4.  v3:= temp;
  #L3633f6.  v3:= new `java.lang.Class`[v3];
  #L3633fa.  call temp:= `toArray`(v2, v3) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L363400.  v2:= temp @kind object;
  #L363402.  v2:= (`java.lang.Class`[]) v2 @kind object;
  #L363406.  v1.`org.checkerframework.checker.formatter.qual.ConversionCategory.types` @type ^`java.lang.Class`[] := v2 @kind object;
  #L36340a.  return @kind void;
}
procedure `java.util.Set` `arrayToSet`(`java.lang.Object`[] v1 @kind object) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.arrayToSet:([Ljava/lang/Object;)Ljava/util/Set;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L362f30.  v0:= new `java.util.HashSet`;
  #L362f34.  call temp:= `asList`(v1) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L362f3a.  v1:= temp @kind object;
  #L362f3c.  call `<init>`(v0, v1) @signature `Ljava/util/HashSet;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L362f42.  return v0 @kind object;
}
procedure `org.checkerframework.checker.formatter.qual.ConversionCategory` `fromConversionChar`(`char` v6 ) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.fromConversionChar:(C)Lorg/checkerframework/checker/formatter/qual/ConversionCategory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L362f54.  v0:= 5I;
  #L362f56.  v1:= new `org.checkerframework.checker.formatter.qual.ConversionCategory`[v0];
  #L362f5a.  v2:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.GENERAL` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L362f5e.  v3:= 0I;
  #L362f60.  v1[v3]:= v2 @kind object;
  #L362f64.  v2:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.CHAR` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L362f68.  v4:= 1I;
  #L362f6a.  v1[v4]:= v2 @kind object;
  #L362f6e.  v2:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.INT` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L362f72.  v4:= 2I;
  #L362f74.  v1[v4]:= v2 @kind object;
  #L362f78.  v2:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.FLOAT` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L362f7c.  v4:= 3I;
  #L362f7e.  v1[v4]:= v2 @kind object;
  #L362f82.  v2:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.TIME` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L362f86.  v4:= 4I;
  #L362f88.  v1[v4]:= v2 @kind object;
  #L362f8c.  if v3 >= v0 then goto L362fb4;
  #L362f90.  v2:= v1[v3] @kind object;
  #L362f94.  v4:= v2.`org.checkerframework.checker.formatter.qual.ConversionCategory.chars` @type ^`java.lang.String` @kind object;
  #L362f98.  call temp:= `valueOf`(v6) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L362f9e.  v5:= temp @kind object;
  #L362fa0.  call temp:= `contains`(v4, v5) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L362fa6.  v4:= temp;
  #L362fa8.  if v4 == 0 then goto L362fae;
  #L362fac.  return v2 @kind object;
  #L362fae.  v3:= v3 + 1;
  #L362fb2.  goto L362f8c;
  #L362fb4.  v0:= new `java.lang.IllegalArgumentException`;
  #L362fb8.  v1:= new `java.lang.StringBuilder`;
  #L362fbc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L362fc2.  v2:= "Bad conversion character " @kind object;
  #L362fc6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L362fcc.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L362fd2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L362fd8.  v6:= temp @kind object;
  #L362fda.  call `<init>`(v0, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L362fe0.  goto L362fe4;
  #L362fe2.  throw v0;
  #L362fe4.  goto L362fe2;
}
procedure `org.checkerframework.checker.formatter.qual.ConversionCategory` `intersect`(`org.checkerframework.checker.formatter.qual.ConversionCategory` v4 @kind object, `org.checkerframework.checker.formatter.qual.ConversionCategory` v5 @kind object) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.intersect:(Lorg/checkerframework/checker/formatter/qual/ConversionCategory;Lorg/checkerframework/checker/formatter/qual/ConversionCategory;)Lorg/checkerframework/checker/formatter/qual/ConversionCategory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L362ff8.  v0:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.UNUSED` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L362ffc.  if v4 != v0 then goto L363002;
  #L363000.  return v5 @kind object;
  #L363002.  if v5 != v0 then goto L363008;
  #L363006.  return v4 @kind object;
  #L363008.  v0:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.GENERAL` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L36300c.  if v4 != v0 then goto L363012;
  #L363010.  return v5 @kind object;
  #L363012.  if v5 != v0 then goto L363018;
  #L363016.  return v4 @kind object;
  #L363018.  v4:= v4.`org.checkerframework.checker.formatter.qual.ConversionCategory.types` @type ^`java.lang.Class`[] @kind object;
  #L36301c.  call temp:= `arrayToSet`(v4) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.arrayToSet:([Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L363022.  v4:= temp @kind object;
  #L363024.  v5:= v5.`org.checkerframework.checker.formatter.qual.ConversionCategory.types` @type ^`java.lang.Class`[] @kind object;
  #L363028.  call temp:= `arrayToSet`(v5) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.arrayToSet:([Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L36302e.  v5:= temp @kind object;
  #L363030.  call temp:= `retainAll`(v4, v5) @signature `Ljava/util/Set;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L363036.  v5:= 7I;
  #L363038.  v0:= new `org.checkerframework.checker.formatter.qual.ConversionCategory`[v5];
  #L36303c.  v1:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.CHAR` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L363040.  v2:= 0I;
  #L363042.  v0[v2]:= v1 @kind object;
  #L363046.  v1:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.INT` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L36304a.  v3:= 1I;
  #L36304c.  v0[v3]:= v1 @kind object;
  #L363050.  v1:= 2I;
  #L363052.  v3:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.FLOAT` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L363056.  v0[v1]:= v3 @kind object;
  #L36305a.  v1:= 3I;
  #L36305c.  v3:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.TIME` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L363060.  v0[v1]:= v3 @kind object;
  #L363064.  v1:= 4I;
  #L363066.  v3:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.CHAR_AND_INT` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L36306a.  v0[v1]:= v3 @kind object;
  #L36306e.  v1:= 5I;
  #L363070.  v3:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.INT_AND_TIME` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L363074.  v0[v1]:= v3 @kind object;
  #L363078.  v1:= 6I;
  #L36307a.  v3:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.NULL` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L36307e.  v0[v1]:= v3 @kind object;
  #L363082.  if v2 >= v5 then goto L3630aa;
  #L363086.  v1:= v0[v2] @kind object;
  #L36308a.  v3:= v1.`org.checkerframework.checker.formatter.qual.ConversionCategory.types` @type ^`java.lang.Class`[] @kind object;
  #L36308e.  call temp:= `arrayToSet`(v3) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.arrayToSet:([Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L363094.  v3:= temp @kind object;
  #L363096.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Set;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L36309c.  v3:= temp;
  #L36309e.  if v3 == 0 then goto L3630a4;
  #L3630a2.  return v1 @kind object;
  #L3630a4.  v2:= v2 + 1;
  #L3630a8.  goto L363082;
  #L3630aa.  v4:= new `java.lang.RuntimeException`;
  #L3630ae.  call `<init>`(v4) @signature `Ljava/lang/RuntimeException;.<init>:()V` @kind direct;
  #L3630b4.  goto L3630b8;
  #L3630b6.  throw v4;
  #L3630b8.  goto L3630b6;
}
procedure `boolean` `isSubsetOf`(`org.checkerframework.checker.formatter.qual.ConversionCategory` v0 @kind object, `org.checkerframework.checker.formatter.qual.ConversionCategory` v1 @kind object) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.isSubsetOf:(Lorg/checkerframework/checker/formatter/qual/ConversionCategory;Lorg/checkerframework/checker/formatter/qual/ConversionCategory;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L362de8.  call temp:= `intersect`(v0, v1) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.intersect:(Lorg/checkerframework/checker/formatter/qual/ConversionCategory;Lorg/checkerframework/checker/formatter/qual/ConversionCategory;)Lorg/checkerframework/checker/formatter/qual/ConversionCategory;` @kind static;
  #L362dee.  v1:= temp @kind object;
  #L362df0.  if v1 != v0 then goto L362df8;
  #L362df4.  v0:= 1I;
  #L362df6.  goto L362dfa;
  #L362df8.  v0:= 0I;
  #L362dfa.  return v0;
}
procedure `org.checkerframework.checker.formatter.qual.ConversionCategory` `union`(`org.checkerframework.checker.formatter.qual.ConversionCategory` v5 @kind object, `org.checkerframework.checker.formatter.qual.ConversionCategory` v6 @kind object) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.union:(Lorg/checkerframework/checker/formatter/qual/ConversionCategory;Lorg/checkerframework/checker/formatter/qual/ConversionCategory;)Lorg/checkerframework/checker/formatter/qual/ConversionCategory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3630cc.  v0:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.UNUSED` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L3630d0.  if v5 == v0 then goto L36319a;
  #L3630d4.  if v6 != v0 then goto L3630da;
  #L3630d8.  goto L36319a;
  #L3630da.  v0:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.GENERAL` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L3630de.  if v5 == v0 then goto L36319a;
  #L3630e2.  if v6 != v0 then goto L3630e8;
  #L3630e6.  goto L36319a;
  #L3630e8.  v0:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.CHAR_AND_INT` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L3630ec.  if v5 != v0 then goto L3630f8;
  #L3630f0.  v1:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.INT_AND_TIME` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L3630f4.  if v6 == v1 then goto L363104;
  #L3630f8.  v1:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.INT_AND_TIME` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L3630fc.  if v5 != v1 then goto L36310a;
  #L363100.  if v6 != v0 then goto L36310a;
  #L363104.  v5:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.INT` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L363108.  return v5 @kind object;
  #L36310a.  v5:= v5.`org.checkerframework.checker.formatter.qual.ConversionCategory.types` @type ^`java.lang.Class`[] @kind object;
  #L36310e.  call temp:= `arrayToSet`(v5) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.arrayToSet:([Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L363114.  v5:= temp @kind object;
  #L363116.  v6:= v6.`org.checkerframework.checker.formatter.qual.ConversionCategory.types` @type ^`java.lang.Class`[] @kind object;
  #L36311a.  call temp:= `arrayToSet`(v6) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.arrayToSet:([Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L363120.  v6:= temp @kind object;
  #L363122.  call temp:= `addAll`(v5, v6) @signature `Ljava/util/Set;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L363128.  v6:= 7I;
  #L36312a.  v2:= new `org.checkerframework.checker.formatter.qual.ConversionCategory`[v6];
  #L36312e.  v3:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.NULL` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L363132.  v4:= 0I;
  #L363134.  v2[v4]:= v3 @kind object;
  #L363138.  v3:= 1I;
  #L36313a.  v2[v3]:= v0 @kind object;
  #L36313e.  v0:= 2I;
  #L363140.  v2[v0]:= v1 @kind object;
  #L363144.  v0:= 3I;
  #L363146.  v1:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.CHAR` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L36314a.  v2[v0]:= v1 @kind object;
  #L36314e.  v0:= 4I;
  #L363150.  v1:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.INT` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L363154.  v2[v0]:= v1 @kind object;
  #L363158.  v0:= 5I;
  #L36315a.  v1:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.FLOAT` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L36315e.  v2[v0]:= v1 @kind object;
  #L363162.  v0:= 6I;
  #L363164.  v1:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.TIME` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L363168.  v2[v0]:= v1 @kind object;
  #L36316c.  if v4 >= v6 then goto L363194;
  #L363170.  v0:= v2[v4] @kind object;
  #L363174.  v1:= v0.`org.checkerframework.checker.formatter.qual.ConversionCategory.types` @type ^`java.lang.Class`[] @kind object;
  #L363178.  call temp:= `arrayToSet`(v1) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.arrayToSet:([Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L36317e.  v1:= temp @kind object;
  #L363180.  call temp:= `equals`(v1, v5) @signature `Ljava/util/Set;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L363186.  v1:= temp;
  #L363188.  if v1 == 0 then goto L36318e;
  #L36318c.  return v0 @kind object;
  #L36318e.  v4:= v4 + 1;
  #L363192.  goto L36316c;
  #L363194.  v5:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.GENERAL` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L363198.  return v5 @kind object;
  #L36319a.  return v0 @kind object;
}
procedure `java.lang.Class` `unwrapPrimitive`(`java.lang.Class` v1 @kind object) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.unwrapPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L362e0c.  v0:= constclass @type ^`java.lang.Byte` @kind object;
  #L362e10.  if v1 != v0 then goto L362e1a;
  #L362e14.  v1:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L362e18.  return v1 @kind object;
  #L362e1a.  v0:= constclass @type ^`java.lang.Character` @kind object;
  #L362e1e.  if v1 != v0 then goto L362e28;
  #L362e22.  v1:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L362e26.  return v1 @kind object;
  #L362e28.  v0:= constclass @type ^`java.lang.Short` @kind object;
  #L362e2c.  if v1 != v0 then goto L362e36;
  #L362e30.  v1:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L362e34.  return v1 @kind object;
  #L362e36.  v0:= constclass @type ^`java.lang.Integer` @kind object;
  #L362e3a.  if v1 != v0 then goto L362e44;
  #L362e3e.  v1:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L362e42.  return v1 @kind object;
  #L362e44.  v0:= constclass @type ^`java.lang.Long` @kind object;
  #L362e48.  if v1 != v0 then goto L362e52;
  #L362e4c.  v1:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L362e50.  return v1 @kind object;
  #L362e52.  v0:= constclass @type ^`java.lang.Float` @kind object;
  #L362e56.  if v1 != v0 then goto L362e60;
  #L362e5a.  v1:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L362e5e.  return v1 @kind object;
  #L362e60.  v0:= constclass @type ^`java.lang.Double` @kind object;
  #L362e64.  if v1 != v0 then goto L362e6e;
  #L362e68.  v1:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L362e6c.  return v1 @kind object;
  #L362e6e.  v0:= constclass @type ^`java.lang.Boolean` @kind object;
  #L362e72.  if v1 != v0 then goto L362e7c;
  #L362e76.  v1:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L362e7a.  return v1 @kind object;
  #L362e7c.  v1:= 0I;
  #L362e7e.  return v1 @kind object;
}
procedure `org.checkerframework.checker.formatter.qual.ConversionCategory` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.valueOf:(Ljava/lang/String;)Lorg/checkerframework/checker/formatter/qual/ConversionCategory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3631ac.  v0:= constclass @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory` @kind object;
  #L3631b0.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L3631b6.  v1:= temp @kind object;
  #L3631b8.  v1:= (`org.checkerframework.checker.formatter.qual.ConversionCategory`) v1 @kind object;
  #L3631bc.  return v1 @kind object;
}
procedure `org.checkerframework.checker.formatter.qual.ConversionCategory`[] `values`() @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.values:()[Lorg/checkerframework/checker/formatter/qual/ConversionCategory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3631d0.  v0:= `@@org.checkerframework.checker.formatter.qual.ConversionCategory.$VALUES` @type ^`org.checkerframework.checker.formatter.qual.ConversionCategory`[] @kind object;
  #L3631d4.  call temp:= `clone`(v0) @signature `[Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3631da.  v0:= temp @kind object;
  #L3631dc.  v0:= (`org.checkerframework.checker.formatter.qual.ConversionCategory`[]) v0 @kind object;
  #L3631e0.  return v0 @kind object;
}
procedure `boolean` `isAssignableFrom`(`org.checkerframework.checker.formatter.qual.ConversionCategory` v6 @kind this, `java.lang.Class` v7 @kind object) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.isAssignableFrom:(Ljava/lang/Class;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L362d9c.  v0:= v6.`org.checkerframework.checker.formatter.qual.ConversionCategory.types` @type ^`java.lang.Class`[] @kind object;
  #L362da0.  v1:= 1I;
  #L362da2.  if v0 != 0 then goto L362da8;
  #L362da6.  return v1;
  #L362da8.  v2:= `@@java.lang.Void.TYPE` @type ^`java.lang.Class` @kind object;
  #L362dac.  if v7 != v2 then goto L362db2;
  #L362db0.  return v1;
  #L362db2.  v2:= length @variable v0;
  #L362db4.  v3:= 0I;
  #L362db6.  v4:= 0I;
  #L362db8.  if v4 >= v2 then goto L362dd4;
  #L362dbc.  v5:= v0[v4] @kind object;
  #L362dc0.  call temp:= `isAssignableFrom`(v5, v7) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L362dc6.  v5:= temp;
  #L362dc8.  if v5 == 0 then goto L362dce;
  #L362dcc.  return v1;
  #L362dce.  v4:= v4 + 1;
  #L362dd2.  goto L362db8;
  #L362dd4.  return v3;
}
procedure `java.lang.String` `toString`(`org.checkerframework.checker.formatter.qual.ConversionCategory` v6 @kind this) @signature `Lorg/checkerframework/checker/formatter/qual/ConversionCategory;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L362e90.  v0:= new `java.lang.StringBuilder`;
  #L362e94.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L362e9a.  call temp:= `name`(v6) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L362ea0.  v1:= temp @kind object;
  #L362ea2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L362ea8.  v1:= " conversion category" @kind object;
  #L362eac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L362eb2.  v1:= v6.`org.checkerframework.checker.formatter.qual.ConversionCategory.types` @type ^`java.lang.Class`[] @kind object;
  #L362eb6.  if v1 == 0 then goto L362f16;
  #L362eba.  v1:= length @variable v1;
  #L362ebc.  if v1 != 0 then goto L362ec2;
  #L362ec0.  goto L362f16;
  #L362ec2.  v1:= new `java.util.StringJoiner`;
  #L362ec6.  v2:= ", " @kind object;
  #L362eca.  v3:= "(one of: " @kind object;
  #L362ece.  v4:= ")" @kind object;
  #L362ed2.  call `<init>`(v1, v2, v3, v4) @signature `Ljava/util/StringJoiner;.<init>:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V` @kind direct;
  #L362ed8.  v2:= v6.`org.checkerframework.checker.formatter.qual.ConversionCategory.types` @type ^`java.lang.Class`[] @kind object;
  #L362edc.  v3:= length @variable v2;
  #L362ede.  v4:= 0I;
  #L362ee0.  if v4 >= v3 then goto L362efc;
  #L362ee4.  v5:= v2[v4] @kind object;
  #L362ee8.  call temp:= `getSimpleName`(v5) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L362eee.  v5:= temp @kind object;
  #L362ef0.  call temp:= `add`(v1, v5) @signature `Ljava/util/StringJoiner;.add:(Ljava/lang/CharSequence;)Ljava/util/StringJoiner;` @kind virtual;
  #L362ef6.  v4:= v4 + 1;
  #L362efa.  goto L362ee0;
  #L362efc.  v2:= " " @kind object;
  #L362f00.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L362f06.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L362f0c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L362f12.  v0:= temp @kind object;
  #L362f14.  return v0 @kind object;
  #L362f16.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L362f1c.  v0:= temp @kind object;
  #L362f1e.  return v0 @kind object;
}
