record `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `java.lang.String`[] `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.strings` @AccessFlag PUBLIC_FINAL;
  `java.lang.Class`[] `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.types` @AccessFlag PUBLIC_FINAL;
}
global `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory`[] `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.DATE` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.GENERAL` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.NUMBER` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.UNUSED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory`[] `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.namedCategories` @AccessFlag STATIC;
procedure `void` `<clinit>`() @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3636e4.  v0:= new `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory`;
  #L3636e8.  v1:= "UNUSED" @kind object;
  #L3636ec.  v2:= 0I;
  #L3636ee.  v3:= 0I;
  #L3636f0.  call `<init>`(v0, v1, v2, v3, v3) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.<init>:(Ljava/lang/String;I[Ljava/lang/Class;[Ljava/lang/String;)V` @kind direct;
  #L3636f6.  `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.UNUSED` @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` := v0 @kind object;
  #L3636fa.  v1:= new `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory`;
  #L3636fe.  v4:= "GENERAL" @kind object;
  #L363702.  v5:= 1I;
  #L363704.  call `<init>`(v1, v4, v5, v3, v3) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.<init>:(Ljava/lang/String;I[Ljava/lang/Class;[Ljava/lang/String;)V` @kind direct;
  #L36370a.  `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.GENERAL` @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` := v1 @kind object;
  #L36370e.  v3:= new `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory`;
  #L363712.  v4:= 2I;
  #L363714.  v6:= new `java.lang.Class`[v4];
  #L363718.  v7:= constclass @type ^`java.util.Date` @kind object;
  #L36371c.  v6[v2]:= v7 @kind object;
  #L363720.  v7:= constclass @type ^`java.lang.Number` @kind object;
  #L363724.  v6[v5]:= v7 @kind object;
  #L363728.  v7:= "date" @kind object;
  #L36372c.  v8:= "time" @kind object;
  #L363730.  temp:= new `java.lang.String`[v7, v8];
  #L363736.  v7:= temp @kind object;
  #L363738.  v8:= "DATE" @kind object;
  #L36373c.  call `<init>`(v3, v8, v4, v6, v7) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.<init>:(Ljava/lang/String;I[Ljava/lang/Class;[Ljava/lang/String;)V` @kind direct;
  #L363742.  `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.DATE` @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` := v3 @kind object;
  #L363746.  v6:= new `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory`;
  #L36374a.  v7:= new `java.lang.Class`[v5];
  #L36374e.  v8:= constclass @type ^`java.lang.Number` @kind object;
  #L363752.  v7[v2]:= v8 @kind object;
  #L363756.  v8:= "number" @kind object;
  #L36375a.  v9:= "choice" @kind object;
  #L36375e.  temp:= new `java.lang.String`[v8, v9];
  #L363764.  v8:= temp @kind object;
  #L363766.  v9:= "NUMBER" @kind object;
  #L36376a.  v10:= 3I;
  #L36376c.  call `<init>`(v6, v9, v10, v7, v8) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.<init>:(Ljava/lang/String;I[Ljava/lang/Class;[Ljava/lang/String;)V` @kind direct;
  #L363772.  `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.NUMBER` @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` := v6 @kind object;
  #L363776.  v7:= 4I;
  #L363778.  v7:= new `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory`[v7];
  #L36377c.  v7[v2]:= v0 @kind object;
  #L363780.  v7[v5]:= v1 @kind object;
  #L363784.  v7[v4]:= v3 @kind object;
  #L363788.  v7[v10]:= v6 @kind object;
  #L36378c.  `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.$VALUES` @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory`[] := v7 @kind object;
  #L363790.  v0:= new `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory`[v4];
  #L363794.  v0[v2]:= v3 @kind object;
  #L363798.  v0[v5]:= v6 @kind object;
  #L36379c.  `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.namedCategories` @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory`[] := v0 @kind object;
  #L3637a0.  return @kind void;
}
procedure `void` `<init>`(`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `java.lang.Class`[] v3 @kind object, `java.lang.String`[] v4 @kind object) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.<init>:(Ljava/lang/String;I[Ljava/lang/Class;[Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3637b4.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L3637ba.  v0.`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.types` @type ^`java.lang.Class`[] := v3 @kind object;
  #L3637be.  v0.`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.strings` @type ^`java.lang.String`[] := v4 @kind object;
  #L3637c2.  return @kind void;
}
procedure `java.util.Set` `arrayToSet`(`java.lang.Object`[] v1 @kind object) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.arrayToSet:([Ljava/lang/Object;)Ljava/util/Set;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L36350c.  v0:= new `java.util.HashSet`;
  #L363510.  call temp:= `asList`(v1) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L363516.  v1:= temp @kind object;
  #L363518.  call `<init>`(v0, v1) @signature `Ljava/util/HashSet;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L36351e.  return v0 @kind object;
}
procedure `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` `intersect`(`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` v4 @kind object, `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` v5 @kind object) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.intersect:(Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;)Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L363530.  v0:= `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.UNUSED` @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` @kind object;
  #L363534.  if v4 != v0 then goto L36353a;
  #L363538.  return v5 @kind object;
  #L36353a.  if v5 != v0 then goto L363540;
  #L36353e.  return v4 @kind object;
  #L363540.  v0:= `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.GENERAL` @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` @kind object;
  #L363544.  if v4 != v0 then goto L36354a;
  #L363548.  return v5 @kind object;
  #L36354a.  if v5 != v0 then goto L363550;
  #L36354e.  return v4 @kind object;
  #L363550.  v4:= v4.`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.types` @type ^`java.lang.Class`[] @kind object;
  #L363554.  call temp:= `arrayToSet`(v4) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.arrayToSet:([Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L36355a.  v4:= temp @kind object;
  #L36355c.  v5:= v5.`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.types` @type ^`java.lang.Class`[] @kind object;
  #L363560.  call temp:= `arrayToSet`(v5) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.arrayToSet:([Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L363566.  v5:= temp @kind object;
  #L363568.  call temp:= `retainAll`(v4, v5) @signature `Ljava/util/Set;.retainAll:(Ljava/util/Collection;)Z` @kind interface;
  #L36356e.  v5:= 2I;
  #L363570.  v0:= new `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory`[v5];
  #L363574.  v1:= `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.DATE` @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` @kind object;
  #L363578.  v2:= 0I;
  #L36357a.  v0[v2]:= v1 @kind object;
  #L36357e.  v1:= `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.NUMBER` @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` @kind object;
  #L363582.  v3:= 1I;
  #L363584.  v0[v3]:= v1 @kind object;
  #L363588.  if v2 >= v5 then goto L3635b0;
  #L36358c.  v1:= v0[v2] @kind object;
  #L363590.  v3:= v1.`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.types` @type ^`java.lang.Class`[] @kind object;
  #L363594.  call temp:= `arrayToSet`(v3) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.arrayToSet:([Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L36359a.  v3:= temp @kind object;
  #L36359c.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Set;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L3635a2.  v3:= temp;
  #L3635a4.  if v3 == 0 then goto L3635aa;
  #L3635a8.  return v1 @kind object;
  #L3635aa.  v2:= v2 + 1;
  #L3635ae.  goto L363588;
  #L3635b0.  v4:= new `java.lang.RuntimeException`;
  #L3635b4.  call `<init>`(v4) @signature `Ljava/lang/RuntimeException;.<init>:()V` @kind direct;
  #L3635ba.  goto L3635be;
  #L3635bc.  throw v4;
  #L3635be.  goto L3635bc;
}
procedure `boolean` `isSubsetOf`(`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` v0 @kind object, `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` v1 @kind object) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.isSubsetOf:(Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L363468.  call temp:= `intersect`(v0, v1) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.intersect:(Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;)Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;` @kind static;
  #L36346e.  v1:= temp @kind object;
  #L363470.  if v1 != v0 then goto L363478;
  #L363474.  v0:= 1I;
  #L363476.  goto L36347a;
  #L363478.  v0:= 0I;
  #L36347a.  return v0;
}
procedure `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` `stringToI18nConversionCategory`(`java.lang.String` v9 @kind object) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.stringToI18nConversionCategory:(Ljava/lang/String;)Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3635d0.  call temp:= `toLowerCase`(v9) @signature `Ljava/lang/String;.toLowerCase:()Ljava/lang/String;` @kind virtual;
  #L3635d6.  v9:= temp @kind object;
  #L3635d8.  v0:= `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.namedCategories` @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory`[] @kind object;
  #L3635dc.  v1:= length @variable v0;
  #L3635de.  v2:= 0I;
  #L3635e0.  v3:= 0I;
  #L3635e2.  if v3 >= v1 then goto L363614;
  #L3635e6.  v4:= v0[v3] @kind object;
  #L3635ea.  v5:= v4.`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.strings` @type ^`java.lang.String`[] @kind object;
  #L3635ee.  v6:= length @variable v5;
  #L3635f0.  v7:= 0I;
  #L3635f2.  if v7 >= v6 then goto L36360e;
  #L3635f6.  v8:= v5[v7] @kind object;
  #L3635fa.  call temp:= `equals`(v8, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L363600.  v8:= temp;
  #L363602.  if v8 == 0 then goto L363608;
  #L363606.  return v4 @kind object;
  #L363608.  v7:= v7 + 1;
  #L36360c.  goto L3635f2;
  #L36360e.  v3:= v3 + 1;
  #L363612.  goto L3635e2;
  #L363614.  v0:= new `java.lang.IllegalArgumentException`;
  #L363618.  v1:= new `java.lang.StringBuilder`;
  #L36361c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L363622.  v2:= "Invalid format type " @kind object;
  #L363626.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36362c.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L363632.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L363638.  v9:= temp @kind object;
  #L36363a.  call `<init>`(v0, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L363640.  goto L363644;
  #L363642.  throw v0;
  #L363644.  goto L363642;
}
procedure `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` `union`(`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` v1 @kind object, `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` v2 @kind object) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.union:(Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;)Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L363658.  v0:= `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.UNUSED` @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` @kind object;
  #L36365c.  if v1 == v0 then goto L363688;
  #L363660.  if v2 != v0 then goto L363666;
  #L363664.  goto L363688;
  #L363666.  v0:= `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.GENERAL` @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` @kind object;
  #L36366a.  if v1 == v0 then goto L363688;
  #L36366e.  if v2 != v0 then goto L363674;
  #L363672.  goto L363688;
  #L363674.  v0:= `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.DATE` @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` @kind object;
  #L363678.  if v1 == v0 then goto L363688;
  #L36367c.  if v2 != v0 then goto L363682;
  #L363680.  goto L363688;
  #L363682.  v1:= `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.NUMBER` @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` @kind object;
  #L363686.  return v1 @kind object;
  #L363688.  return v0 @kind object;
}
procedure `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.valueOf:(Ljava/lang/String;)Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L36369c.  v0:= constclass @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` @kind object;
  #L3636a0.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L3636a6.  v1:= temp @kind object;
  #L3636a8.  v1:= (`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory`) v1 @kind object;
  #L3636ac.  return v1 @kind object;
}
procedure `org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory`[] `values`() @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.values:()[Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3636c0.  v0:= `@@org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.$VALUES` @type ^`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory`[] @kind object;
  #L3636c4.  call temp:= `clone`(v0) @signature `[Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3636ca.  v0:= temp @kind object;
  #L3636cc.  v0:= (`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory`[]) v0 @kind object;
  #L3636d0.  return v0 @kind object;
}
procedure `boolean` `isAssignableFrom`(`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` v6 @kind this, `java.lang.Class` v7 @kind object) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.isAssignableFrom:(Ljava/lang/Class;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L36341c.  v0:= v6.`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.types` @type ^`java.lang.Class`[] @kind object;
  #L363420.  v1:= 1I;
  #L363422.  if v0 != 0 then goto L363428;
  #L363426.  return v1;
  #L363428.  v2:= `@@java.lang.Void.TYPE` @type ^`java.lang.Class` @kind object;
  #L36342c.  if v7 != v2 then goto L363432;
  #L363430.  return v1;
  #L363432.  v2:= length @variable v0;
  #L363434.  v3:= 0I;
  #L363436.  v4:= 0I;
  #L363438.  if v4 >= v2 then goto L363454;
  #L36343c.  v5:= v0[v4] @kind object;
  #L363440.  call temp:= `isAssignableFrom`(v5, v7) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L363446.  v5:= temp;
  #L363448.  if v5 == 0 then goto L36344e;
  #L36344c.  return v1;
  #L36344e.  v4:= v4 + 1;
  #L363452.  goto L363438;
  #L363454.  return v3;
}
procedure `java.lang.String` `toString`(`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory` v6 @kind this) @signature `Lorg/checkerframework/checker/i18nformatter/qual/I18nConversionCategory;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L36348c.  v0:= new `java.lang.StringBuilder`;
  #L363490.  call temp:= `name`(v6) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L363496.  v1:= temp @kind object;
  #L363498.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36349e.  v1:= v6.`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.types` @type ^`java.lang.Class`[] @kind object;
  #L3634a2.  if v1 != 0 then goto L3634b2;
  #L3634a6.  v1:= " conversion category (all types)" @kind object;
  #L3634aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3634b0.  goto L3634f2;
  #L3634b2.  v1:= new `java.util.StringJoiner`;
  #L3634b6.  v2:= ", " @kind object;
  #L3634ba.  v3:= " conversion category (one of: " @kind object;
  #L3634be.  v4:= ")" @kind object;
  #L3634c2.  call `<init>`(v1, v2, v3, v4) @signature `Ljava/util/StringJoiner;.<init>:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V` @kind direct;
  #L3634c8.  v2:= v6.`org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory.types` @type ^`java.lang.Class`[] @kind object;
  #L3634cc.  v3:= length @variable v2;
  #L3634ce.  v4:= 0I;
  #L3634d0.  if v4 >= v3 then goto L3634ec;
  #L3634d4.  v5:= v2[v4] @kind object;
  #L3634d8.  call temp:= `getCanonicalName`(v5) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L3634de.  v5:= temp @kind object;
  #L3634e0.  call temp:= `add`(v1, v5) @signature `Ljava/util/StringJoiner;.add:(Ljava/lang/CharSequence;)Ljava/util/StringJoiner;` @kind virtual;
  #L3634e6.  v4:= v4 + 1;
  #L3634ea.  goto L3634d0;
  #L3634ec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3634f2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3634f8.  v0:= temp @kind object;
  #L3634fa.  return v0 @kind object;
}
