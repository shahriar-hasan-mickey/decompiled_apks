record `org.chromium.net.NetworkQualityThroughputListener` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `java.util.concurrent.Executor` `org.chromium.net.NetworkQualityThroughputListener.mExecutor` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.chromium.net.NetworkQualityThroughputListener` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object) @signature `Lorg/chromium/net/NetworkQualityThroughputListener;.<init>:(Ljava/util/concurrent/Executor;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L365344.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36534a.  if v2 == 0 then goto L365354;
  #L36534e.  v1.`org.chromium.net.NetworkQualityThroughputListener.mExecutor` @type ^`java.util.concurrent.Executor` := v2 @kind object;
  #L365352.  return @kind void;
  #L365354.  v2:= new `java.lang.IllegalStateException`;
  #L365358.  v0:= "Executor must not be null" @kind object;
  #L36535c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L365362.  throw v2;
}
procedure `java.util.concurrent.Executor` `getExecutor`(`org.chromium.net.NetworkQualityThroughputListener` v1 @kind this) @signature `Lorg/chromium/net/NetworkQualityThroughputListener;.getExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36532c.  v0:= v1.`org.chromium.net.NetworkQualityThroughputListener.mExecutor` @type ^`java.util.concurrent.Executor` @kind object;
  #L365330.  return v0 @kind object;
}
procedure `void` `onThroughputObservation`(`int` v0 , `long` v1 , `int` v3 ) @signature `Lorg/chromium/net/NetworkQualityThroughputListener;.onThroughputObservation:(IJI)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
