record `com.telenor.connect.utils.f` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `java.util.Map` `@@com.telenor.connect.utils.f.a` @AccessFlag PRIVATE_STATIC;
global `java.util.Map` `@@com.telenor.connect.utils.f.b` @AccessFlag PRIVATE_STATIC;
global `java.util.Map` `@@com.telenor.connect.utils.f.c` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/telenor/connect/utils/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1ee800.  v0:= new `java.util.HashMap`;
  #L1ee804.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L1ee80a.  `@@com.telenor.connect.utils.f.a` @type ^`java.util.Map` := v0 @kind object;
  #L1ee80e.  v0:= new `java.util.HashMap`;
  #L1ee812.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L1ee818.  `@@com.telenor.connect.utils.f.b` @type ^`java.util.Map` := v0 @kind object;
  #L1ee81c.  v0:= new `java.util.HashMap`;
  #L1ee820.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L1ee826.  `@@com.telenor.connect.utils.f.c` @type ^`java.util.Map` := v0 @kind object;
  #L1ee82a.  return @kind void;
}
procedure `retrofit2.Retrofit` `a`(`java.lang.String` v6 @kind object) @signature `Lcom/telenor/connect/utils/f;.a:(Ljava/lang/String;)Lretrofit2/Retrofit;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ee734.  v0:= new `okhttp3.logging.HttpLoggingInterceptor`;
  #L1ee738.  call `<init>`(v0) @signature `Lokhttp3/logging/HttpLoggingInterceptor;.<init>:()V` @kind direct;
  #L1ee73e.  v1:= `@@okhttp3.logging.HttpLoggingInterceptor$Level.NONE` @type ^`okhttp3.logging.HttpLoggingInterceptor$Level` @kind object;
  #L1ee742.  call temp:= `setLevel`(v0, v1) @signature `Lokhttp3/logging/HttpLoggingInterceptor;.setLevel:(Lokhttp3/logging/HttpLoggingInterceptor$Level;)Lokhttp3/logging/HttpLoggingInterceptor;` @kind virtual;
  #L1ee748.  v1:= new `com.telenor.connect.utils.e`;
  #L1ee74c.  call `<init>`(v1) @signature `Lcom/telenor/connect/utils/e;.<init>:()V` @kind direct;
  #L1ee752.  v2:= new `okhttp3.OkHttpClient$Builder`;
  #L1ee756.  call `<init>`(v2) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:()V` @kind direct;
  #L1ee75c.  v3:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1ee760.  v4:= 10L;
  #L1ee764.  call temp:= `connectTimeout`(v2, v4, v3) @signature `Lokhttp3/OkHttpClient$Builder;.connectTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @kind virtual;
  #L1ee76a.  v2:= temp @kind object;
  #L1ee76c.  call temp:= `readTimeout`(v2, v4, v3) @signature `Lokhttp3/OkHttpClient$Builder;.readTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @kind virtual;
  #L1ee772.  v2:= temp @kind object;
  #L1ee774.  call temp:= `writeTimeout`(v2, v4, v3) @signature `Lokhttp3/OkHttpClient$Builder;.writeTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @kind virtual;
  #L1ee77a.  v2:= temp @kind object;
  #L1ee77c.  call temp:= `addInterceptor`(v2, v0) @signature `Lokhttp3/OkHttpClient$Builder;.addInterceptor:(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient$Builder;` @kind virtual;
  #L1ee782.  v0:= temp @kind object;
  #L1ee784.  call temp:= `addInterceptor`(v0, v1) @signature `Lokhttp3/OkHttpClient$Builder;.addInterceptor:(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient$Builder;` @kind virtual;
  #L1ee78a.  v0:= temp @kind object;
  #L1ee78c.  call temp:= `build`(v0) @signature `Lokhttp3/OkHttpClient$Builder;.build:()Lokhttp3/OkHttpClient;` @kind virtual;
  #L1ee792.  v0:= temp @kind object;
  #L1ee794.  v1:= new `com.google.gson.k`;
  #L1ee798.  call `<init>`(v1) @signature `Lcom/google/gson/k;.<init>:()V` @kind direct;
  #L1ee79e.  v2:= constclass @type ^`com.telenor.connect.id.f` @kind object;
  #L1ee7a2.  v3:= new `com.telenor.connect.id.IdTokenDeserializer`;
  #L1ee7a6.  call `<init>`(v3) @signature `Lcom/telenor/connect/id/IdTokenDeserializer;.<init>:()V` @kind direct;
  #L1ee7ac.  call temp:= `c`(v1, v2, v3) @signature `Lcom/google/gson/k;.c:(Ljava/lang/reflect/Type;Ljava/lang/Object;)Lcom/google/gson/k;` @kind virtual;
  #L1ee7b2.  v1:= temp @kind object;
  #L1ee7b4.  call temp:= `b`(v1) @signature `Lcom/google/gson/k;.b:()Lcom/google/gson/j;` @kind virtual;
  #L1ee7ba.  v1:= temp @kind object;
  #L1ee7bc.  v2:= new `retrofit2.Retrofit$Builder`;
  #L1ee7c0.  call `<init>`(v2) @signature `Lretrofit2/Retrofit$Builder;.<init>:()V` @kind direct;
  #L1ee7c6.  call temp:= `callFactory`(v2, v0) @signature `Lretrofit2/Retrofit$Builder;.callFactory:(Lokhttp3/Call$Factory;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L1ee7cc.  v0:= temp @kind object;
  #L1ee7ce.  call temp:= `baseUrl`(v0, v6) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Ljava/lang/String;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L1ee7d4.  v6:= temp @kind object;
  #L1ee7d6.  call temp:= `create`(v1) @signature `Lretrofit2/converter/gson/GsonConverterFactory;.create:(Lcom/google/gson/j;)Lretrofit2/converter/gson/GsonConverterFactory;` @kind static;
  #L1ee7dc.  v0:= temp @kind object;
  #L1ee7de.  call temp:= `addConverterFactory`(v6, v0) @signature `Lretrofit2/Retrofit$Builder;.addConverterFactory:(Lretrofit2/Converter$Factory;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L1ee7e4.  v6:= temp @kind object;
  #L1ee7e6.  call temp:= `build`(v6) @signature `Lretrofit2/Retrofit$Builder;.build:()Lretrofit2/Retrofit;` @kind virtual;
  #L1ee7ec.  v6:= temp @kind object;
  #L1ee7ee.  return v6 @kind object;
}
procedure `com.telenor.connect.AnalyticsAPI` `b`(`java.lang.String` v2 @kind object) @signature `Lcom/telenor/connect/utils/f;.b:(Ljava/lang/String;)Lcom/telenor/connect/AnalyticsAPI;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1ee66c.  v0:= `@@com.telenor.connect.utils.f.c` @type ^`java.util.Map` @kind object;
  #L1ee670.  v1:= constclass @type ^`com.telenor.connect.AnalyticsAPI` @kind object;
  #L1ee674.  call temp:= `c`(v0, v2, v1) @signature `Lcom/telenor/connect/utils/f;.c:(Ljava/util/Map;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L1ee67a.  v2:= temp @kind object;
  #L1ee67c.  v2:= (`com.telenor.connect.AnalyticsAPI`) v2 @kind object;
  #L1ee680.  return v2 @kind object;
}
procedure `java.lang.Object` `c`(`java.util.Map` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lcom/telenor/connect/utils/f;.c:(Ljava/util/Map;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1ee6e4.  v0:= constclass @type ^`com.telenor.connect.utils.f` @kind object;
  #L1ee6e8.  @monitorenter v0
  #L1ee6ea.  call temp:= `get`(v2, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1ee6f0.  v1:= temp @kind object;
  #L1ee6f2.  if v1 != 0 then goto L1ee70c;
  #L1ee6f6.  call temp:= `a`(v3) @signature `Lcom/telenor/connect/utils/f;.a:(Ljava/lang/String;)Lretrofit2/Retrofit;` @kind static;
  #L1ee6fc.  v1:= temp @kind object;
  #L1ee6fe.  call temp:= `create`(v1, v4) @signature `Lretrofit2/Retrofit;.create:(Ljava/lang/Class;)Ljava/lang/Object;` @kind virtual;
  #L1ee704.  v1:= temp @kind object;
  #L1ee706.  call temp:= `put`(v2, v3, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1ee70c.  @monitorexit v0
  #L1ee70e.  return v1 @kind object;
  #L1ee710.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1ee712.  @monitorexit v0
  #L1ee714.  throw v2;
  catch `java.lang.Throwable` @[L1ee6ea..L1ee70c] goto L1ee710;
}
procedure `com.telenor.connect.id.ConnectAPI` `d`(`java.lang.String` v2 @kind object) @signature `Lcom/telenor/connect/utils/f;.d:(Ljava/lang/String;)Lcom/telenor/connect/id/ConnectAPI;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1ee6bc.  v0:= `@@com.telenor.connect.utils.f.a` @type ^`java.util.Map` @kind object;
  #L1ee6c0.  v1:= constclass @type ^`com.telenor.connect.id.ConnectAPI` @kind object;
  #L1ee6c4.  call temp:= `c`(v0, v2, v1) @signature `Lcom/telenor/connect/utils/f;.c:(Ljava/util/Map;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L1ee6ca.  v2:= temp @kind object;
  #L1ee6cc.  v2:= (`com.telenor.connect.id.ConnectAPI`) v2 @kind object;
  #L1ee6d0.  return v2 @kind object;
}
procedure `com.telenor.connect.WellKnownAPI` `e`(`java.lang.String` v2 @kind object) @signature `Lcom/telenor/connect/utils/f;.e:(Ljava/lang/String;)Lcom/telenor/connect/WellKnownAPI;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1ee694.  v0:= `@@com.telenor.connect.utils.f.b` @type ^`java.util.Map` @kind object;
  #L1ee698.  v1:= constclass @type ^`com.telenor.connect.WellKnownAPI` @kind object;
  #L1ee69c.  call temp:= `c`(v0, v2, v1) @signature `Lcom/telenor/connect/utils/f;.c:(Ljava/util/Map;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L1ee6a2.  v2:= temp @kind object;
  #L1ee6a4.  v2:= (`com.telenor.connect.WellKnownAPI`) v2 @kind object;
  #L1ee6a8.  return v2 @kind object;
}
