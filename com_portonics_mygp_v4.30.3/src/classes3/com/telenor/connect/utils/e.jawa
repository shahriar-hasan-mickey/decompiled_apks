record `com.telenor.connect.utils.e` @kind class @AccessFlag  extends `okhttp3.Interceptor` @kind interface {
}
procedure `void` `<init>`(`com.telenor.connect.utils.e` v0 @kind this) @signature `Lcom/telenor/connect/utils/e;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1ee654.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ee65a.  return @kind void;
}
procedure `okhttp3.Response` `intercept`(`com.telenor.connect.utils.e` v3 @kind this, `okhttp3.Interceptor$Chain` v4 @kind object) @signature `Lcom/telenor/connect/utils/e;.intercept:(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1ee610.  call temp:= `request`(v4) @signature `Lokhttp3/Interceptor$Chain;.request:()Lokhttp3/Request;` @kind interface;
  #L1ee616.  v0:= temp @kind object;
  #L1ee618.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Request;.newBuilder:()Lokhttp3/Request$Builder;` @kind virtual;
  #L1ee61e.  v0:= temp @kind object;
  #L1ee620.  v1:= "Accept" @kind object;
  #L1ee624.  v2:= "application/json" @kind object;
  #L1ee628.  call temp:= `header`(v0, v1, v2) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1ee62e.  v0:= temp @kind object;
  #L1ee630.  call temp:= `build`(v0) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1ee636.  v0:= temp @kind object;
  #L1ee638.  call temp:= `proceed`(v4, v0) @signature `Lokhttp3/Interceptor$Chain;.proceed:(Lokhttp3/Request;)Lokhttp3/Response;` @kind interface;
  #L1ee63e.  v4:= temp @kind object;
  #L1ee640.  return v4 @kind object;
}
