record `com.telenor.connect.utils.d` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `java.text.SimpleDateFormat` `@@com.telenor.connect.utils.d.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/telenor/connect/utils/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1ee5e8.  v0:= new `java.text.SimpleDateFormat`;
  #L1ee5ec.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L1ee5f0.  v2:= "EEE, dd MMM yyyy HH:mm:ss zzz" @kind object;
  #L1ee5f4.  call `<init>`(v0, v2, v1) @signature `Ljava/text/SimpleDateFormat;.<init>:(Ljava/lang/String;Ljava/util/Locale;)V` @kind direct;
  #L1ee5fa.  `@@com.telenor.connect.utils.d.a` @type ^`java.text.SimpleDateFormat` := v0 @kind object;
  #L1ee5fe.  return @kind void;
}
procedure `java.util.Date` `a`(`okhttp3.Headers` v4 @kind object) @signature `Lcom/telenor/connect/utils/d;.a:(Lokhttp3/Headers;)Ljava/util/Date;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ee554.  call temp:= `names`(v4) @signature `Lokhttp3/Headers;.names:()Ljava/util/Set;` @kind virtual;
  #L1ee55a.  v0:= temp @kind object;
  #L1ee55c.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1ee562.  v0:= temp @kind object;
  #L1ee564.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1ee56a.  v1:= temp;
  #L1ee56c.  v2:= 0I;
  #L1ee56e.  if v1 == 0 then goto L1ee5c4;
  #L1ee572.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1ee578.  v1:= temp @kind object;
  #L1ee57a.  v1:= (`java.lang.String`) v1 @kind object;
  #L1ee57e.  v3:= "Date" @kind object;
  #L1ee582.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1ee588.  v3:= temp;
  #L1ee58a.  if v3 == 0 then goto L1ee564;
  #L1ee58e.  v0:= `@@com.telenor.connect.utils.d.a` @type ^`java.text.SimpleDateFormat` @kind object;
  #L1ee592.  call temp:= `get`(v4, v1) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L1ee598.  v1:= temp @kind object;
  #L1ee59a.  call temp:= `parse`(v0, v1) @signature `Ljava/text/SimpleDateFormat;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L1ee5a0.  v4:= temp @kind object;
  #L1ee5a2.  return v4 @kind object;
  #L1ee5a4.  v0:= new `java.lang.StringBuilder`;
  #L1ee5a8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ee5ae.  v1:= "Failed to call parse Date from headers. headers=" @kind object;
  #L1ee5b2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee5b8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ee5be.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ee5c4.  return v2 @kind object;
  catch `java.text.ParseException` @[L1ee58e..L1ee5a2] goto L1ee5a4;
}
