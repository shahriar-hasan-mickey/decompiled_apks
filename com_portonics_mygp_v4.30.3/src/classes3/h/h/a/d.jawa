record `h.h.a.d` @kind class @AccessFlag  {
  `h.h.a.c` `h.h.a.d.a` @AccessFlag PRIVATE_FINAL;
  `h.h.a.b` `h.h.a.d.b` @AccessFlag PRIVATE;
  `h.h.a.b` `h.h.a.d.c` @AccessFlag PRIVATE;
  `int` `h.h.a.d.d` @AccessFlag PRIVATE;
  `int` `h.h.a.d.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`h.h.a.d` v1 @kind this) @signature `Lh/h/a/d;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1e30b4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1e30ba.  v0:= new `h.h.a.c`;
  #L1e30be.  call `<init>`(v0) @signature `Lh/h/a/c;.<init>:()V` @kind direct;
  #L1e30c4.  v1.`h.h.a.d.a` @type ^`h.h.a.c` := v0 @kind object;
  #L1e30c8.  return @kind void;
}
procedure `void` `a`(`h.h.a.d` v2 @kind this, `long` v3 , `boolean` v5 ) @signature `Lh/h/a/d;.a:(JZ)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1e30dc.  v0:= 500000000L;
  #L1e30e2.  v0:= v3 - v0 @kind long;
  #L1e30e6.  call `d`(v2, v0) @signature `Lh/h/a/d;.d:(J)V` @kind virtual;
  #L1e30ec.  v0:= v2.`h.h.a.d.a` @type ^`h.h.a.c` @kind object;
  #L1e30f0.  call temp:= `a`(v0) @signature `Lh/h/a/c;.a:()Lh/h/a/b;` @kind virtual;
  #L1e30f6.  v0:= temp @kind object;
  #L1e30f8.  v0.`h.h.a.b.a` @type ^`long` := v3 @kind wide;
  #L1e30fc.  v0.`h.h.a.b.b` @type ^`boolean` := v5 @kind boolean;
  #L1e3100.  v3:= 0I;
  #L1e3102.  v0.`h.h.a.b.c` @type ^`h.h.a.b` := v3 @kind object;
  #L1e3106.  v3:= v2.`h.h.a.d.c` @type ^`h.h.a.b` @kind object;
  #L1e310a.  if v3 == 0 then goto L1e3112;
  #L1e310e.  v3.`h.h.a.b.c` @type ^`h.h.a.b` := v0 @kind object;
  #L1e3112.  v2.`h.h.a.d.c` @type ^`h.h.a.b` := v0 @kind object;
  #L1e3116.  v3:= v2.`h.h.a.d.b` @type ^`h.h.a.b` @kind object;
  #L1e311a.  if v3 != 0 then goto L1e3122;
  #L1e311e.  v2.`h.h.a.d.b` @type ^`h.h.a.b` := v0 @kind object;
  #L1e3122.  v3:= v2.`h.h.a.d.d` @type ^`int`;
  #L1e3126.  v3:= v3 + 1;
  #L1e312a.  v2.`h.h.a.d.d` @type ^`int` := v3;
  #L1e312e.  if v5 == 0 then goto L1e313e;
  #L1e3132.  v3:= v2.`h.h.a.d.e` @type ^`int`;
  #L1e3136.  v3:= v3 + 1;
  #L1e313a.  v2.`h.h.a.d.e` @type ^`int` := v3;
  #L1e313e.  return @kind void;
}
procedure `void` `b`(`h.h.a.d` v2 @kind this) @signature `Lh/h/a/d;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1e3150.  v0:= v2.`h.h.a.d.b` @type ^`h.h.a.b` @kind object;
  #L1e3154.  if v0 == 0 then goto L1e316c;
  #L1e3158.  v1:= v0.`h.h.a.b.c` @type ^`h.h.a.b` @kind object;
  #L1e315c.  v2.`h.h.a.d.b` @type ^`h.h.a.b` := v1 @kind object;
  #L1e3160.  v1:= v2.`h.h.a.d.a` @type ^`h.h.a.c` @kind object;
  #L1e3164.  call `b`(v1, v0) @signature `Lh/h/a/c;.b:(Lh/h/a/b;)V` @kind virtual;
  #L1e316a.  goto L1e3150;
  #L1e316c.  v0:= 0I;
  #L1e316e.  v2.`h.h.a.d.c` @type ^`h.h.a.b` := v0 @kind object;
  #L1e3172.  v0:= 0I;
  #L1e3174.  v2.`h.h.a.d.d` @type ^`int` := v0;
  #L1e3178.  v2.`h.h.a.d.e` @type ^`int` := v0;
  #L1e317c.  return @kind void;
}
procedure `boolean` `c`(`h.h.a.d` v5 @kind this) @signature `Lh/h/a/d;.c:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1e305c.  v0:= v5.`h.h.a.d.c` @type ^`h.h.a.b` @kind object;
  #L1e3060.  if v0 == 0 then goto L1e309e;
  #L1e3064.  v1:= v5.`h.h.a.d.b` @type ^`h.h.a.b` @kind object;
  #L1e3068.  if v1 == 0 then goto L1e309e;
  #L1e306c.  v2:= v0.`h.h.a.b.a` @type ^`long` @kind wide;
  #L1e3070.  v0:= v1.`h.h.a.b.a` @type ^`long` @kind wide;
  #L1e3074.  v2:= v2 - v0 @kind long;
  #L1e3076.  v0:= 250000000L;
  #L1e307c.  v4:= lcmp(v2, v0);
  #L1e3080.  if v4 < 0 then goto L1e309e;
  #L1e3084.  v0:= v5.`h.h.a.d.e` @type ^`int`;
  #L1e3088.  v1:= v5.`h.h.a.d.d` @type ^`int`;
  #L1e308c.  v2:= v1 ^> 1;
  #L1e3090.  v1:= v1 ^> 2;
  #L1e3094.  v2:= v2 + v1 @kind int;
  #L1e3096.  if v0 < v2 then goto L1e309e;
  #L1e309a.  v0:= 1I;
  #L1e309c.  goto L1e30a0;
  #L1e309e.  v0:= 0I;
  #L1e30a0.  return v0;
}
procedure `void` `d`(`h.h.a.d` v7 @kind this, `long` v8 ) @signature `Lh/h/a/d;.d:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1e3190.  v0:= v7.`h.h.a.d.d` @type ^`int`;
  #L1e3194.  v1:= 4I;
  #L1e3196.  if v0 < v1 then goto L1e31f0;
  #L1e319a.  v1:= v7.`h.h.a.d.b` @type ^`h.h.a.b` @kind object;
  #L1e319e.  if v1 == 0 then goto L1e31f0;
  #L1e31a2.  v2:= v1.`h.h.a.b.a` @type ^`long` @kind wide;
  #L1e31a6.  v2:= v8 - v2 @kind long;
  #L1e31aa.  v4:= 0L;
  #L1e31ae.  v6:= lcmp(v2, v4);
  #L1e31b2.  if v6 <= 0 then goto L1e31f0;
  #L1e31b6.  v2:= v1.`h.h.a.b.b` @type ^`boolean` @kind boolean;
  #L1e31ba.  if v2 == 0 then goto L1e31ca;
  #L1e31be.  v2:= v7.`h.h.a.d.e` @type ^`int`;
  #L1e31c2.  v2:= v2 + -1;
  #L1e31c6.  v7.`h.h.a.d.e` @type ^`int` := v2;
  #L1e31ca.  v0:= v0 + -1;
  #L1e31ce.  v7.`h.h.a.d.d` @type ^`int` := v0;
  #L1e31d2.  v0:= v1.`h.h.a.b.c` @type ^`h.h.a.b` @kind object;
  #L1e31d6.  v7.`h.h.a.d.b` @type ^`h.h.a.b` := v0 @kind object;
  #L1e31da.  if v0 != 0 then goto L1e31e4;
  #L1e31de.  v0:= 0I;
  #L1e31e0.  v7.`h.h.a.d.c` @type ^`h.h.a.b` := v0 @kind object;
  #L1e31e4.  v0:= v7.`h.h.a.d.a` @type ^`h.h.a.c` @kind object;
  #L1e31e8.  call `b`(v0, v1) @signature `Lh/h/a/c;.b:(Lh/h/a/b;)V` @kind virtual;
  #L1e31ee.  goto L1e3190;
  #L1e31f0.  return @kind void;
}
