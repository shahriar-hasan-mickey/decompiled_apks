record `h.j.r0` @kind class @AccessFlag  extends `h.j.l0` @kind class {
  `h.j.s0` `h.j.r0.b` @AccessFlag ;
}
procedure `void` `<init>`(`h.j.r0` v0 @kind this, `h.j.s0` v1 @kind object) @signature `Lh/j/r0;.<init>:(Lh/j/s0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1f8afc.  call `<init>`(v0) @signature `Lh/j/l0;.<init>:()V` @kind direct;
  #L1f8b02.  v0.`h.j.r0.b` @type ^`h.j.s0` := v1 @kind object;
  #L1f8b06.  return @kind void;
}
procedure `void` `b`(`h.j.r0` v2 @kind this, `h.j.k0` v3 @kind object) @signature `Lh/j/r0;.b:(Lh/j/k0;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1f8b18.  v0:= v2.`h.j.r0.b` @type ^`h.j.s0` @kind object;
  #L1f8b1c.  v1:= v0.`h.j.s0.M` @type ^`int`;
  #L1f8b20.  v1:= v1 + -1;
  #L1f8b24.  v0.`h.j.s0.M` @type ^`int` := v1;
  #L1f8b28.  if v1 != 0 then goto L1f8b38;
  #L1f8b2c.  v1:= 0I;
  #L1f8b2e.  v0.`h.j.s0.N` @type ^`boolean` := v1 @kind boolean;
  #L1f8b32.  call `r`(v0) @signature `Lh/j/k0;.r:()V` @kind virtual;
  #L1f8b38.  call temp:= `Q`(v3, v2) @signature `Lh/j/k0;.Q:(Lh/j/k0$a;)Lh/j/k0;` @kind virtual;
  #L1f8b3e.  return @kind void;
}
procedure `void` `d`(`h.j.r0` v1 @kind this, `h.j.k0` v2 @kind object) @signature `Lh/j/r0;.d:(Lh/j/k0;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1f8b50.  v2:= v1.`h.j.r0.b` @type ^`h.j.s0` @kind object;
  #L1f8b54.  v0:= v2.`h.j.s0.N` @type ^`boolean` @kind boolean;
  #L1f8b58.  if v0 != 0 then goto L1f8b6c;
  #L1f8b5c.  call `Y`(v2) @signature `Lh/j/k0;.Y:()V` @kind virtual;
  #L1f8b62.  v2:= v1.`h.j.r0.b` @type ^`h.j.s0` @kind object;
  #L1f8b66.  v0:= 1I;
  #L1f8b68.  v2.`h.j.s0.N` @type ^`boolean` := v0 @kind boolean;
  #L1f8b6c.  return @kind void;
}
