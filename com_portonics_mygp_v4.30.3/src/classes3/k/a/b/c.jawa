record `k.a.b.c` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `a`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Lk/a/b/c;.a:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L23c28c.  if v0 == 0 then goto L23c292;
  #L23c290.  return @kind void;
  #L23c292.  v0:= new `java.lang.IllegalArgumentException`;
  #L23c296.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L23c29c.  v1:= temp @kind object;
  #L23c29e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c2a4.  throw v0;
}
procedure `void` `b`(`boolean` v0 , `java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lk/a/b/c;.b:(ZLjava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L23c2b8.  if v0 == 0 then goto L23c2be;
  #L23c2bc.  return @kind void;
  #L23c2be.  v0:= new `java.lang.IllegalArgumentException`;
  #L23c2c2.  call temp:= `f`(v1, v2) @signature `Lk/a/b/c;.f:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L23c2c8.  v1:= temp @kind object;
  #L23c2ca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c2d0.  throw v0;
}
procedure `java.lang.Object` `c`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lk/a/b/c;.c:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L23c190.  if v0 == 0 then goto L23c196;
  #L23c194.  return v0 @kind object;
  #L23c196.  v0:= new `java.lang.NullPointerException`;
  #L23c19a.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L23c1a0.  v1:= temp @kind object;
  #L23c1a2.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c1a8.  throw v0;
}
procedure `void` `d`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Lk/a/b/c;.d:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L23c2e4.  if v0 == 0 then goto L23c2ea;
  #L23c2e8.  return @kind void;
  #L23c2ea.  v0:= new `java.lang.IllegalStateException`;
  #L23c2ee.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L23c2f4.  v1:= temp @kind object;
  #L23c2f6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c2fc.  throw v0;
}
procedure `boolean` `e`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lk/a/b/c;.e:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L23c164.  if v0 != 0 then goto L23c174;
  #L23c168.  if v1 != 0 then goto L23c170;
  #L23c16c.  v0:= 1I;
  #L23c16e.  goto L23c17c;
  #L23c170.  v0:= 0I;
  #L23c172.  goto L23c17c;
  #L23c174.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23c17a.  v0:= temp;
  #L23c17c.  return v0;
}
procedure `java.lang.String` `f`(`java.lang.String` v6 @kind object, `java.lang.Object`[] v7 @kind object) @signature `Lk/a/b/c;.f:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23c1bc.  if v7 != 0 then goto L23c1c2;
  #L23c1c0.  return v6 @kind object;
  #L23c1c2.  v0:= new `java.lang.StringBuilder`;
  #L23c1c6.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23c1cc.  v1:= temp;
  #L23c1ce.  v2:= length @variable v7;
  #L23c1d0.  v2:= v2 * 16;
  #L23c1d4.  v1:= v1 + v2 @kind int;
  #L23c1d6.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L23c1dc.  v1:= 0I;
  #L23c1de.  v2:= 0I;
  #L23c1e0.  v3:= length @variable v7;
  #L23c1e2.  if v1 >= v3 then goto L23c21a;
  #L23c1e6.  v3:= "%s" @kind object;
  #L23c1ea.  call temp:= `indexOf`(v6, v3, v2) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;I)I` @kind virtual;
  #L23c1f0.  v3:= temp;
  #L23c1f2.  v4:= -1I;
  #L23c1f4.  if v3 != v4 then goto L23c1fa;
  #L23c1f8.  goto L23c21a;
  #L23c1fa.  call temp:= `append`(v0, v6, v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c200.  v2:= v1 + 1;
  #L23c204.  v1:= v7[v1] @kind object;
  #L23c208.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c20e.  v1:= v3 + 2;
  #L23c212.  v5:= v2;
  #L23c214.  v2:= v1;
  #L23c216.  v1:= v5;
  #L23c218.  goto L23c1e0;
  #L23c21a.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23c220.  v3:= temp;
  #L23c222.  call temp:= `append`(v0, v6, v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c228.  v6:= length @variable v7;
  #L23c22a.  if v1 >= v6 then goto L23c272;
  #L23c22e.  v6:= " [" @kind object;
  #L23c232.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c238.  v6:= v1 + 1;
  #L23c23c.  v1:= v7[v1] @kind object;
  #L23c240.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c246.  v1:= length @variable v7;
  #L23c248.  if v6 >= v1 then goto L23c268;
  #L23c24c.  v1:= ", " @kind object;
  #L23c250.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c256.  v1:= v6 + 1;
  #L23c25a.  v6:= v7[v6] @kind object;
  #L23c25e.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c264.  v6:= v1;
  #L23c266.  goto L23c246;
  #L23c268.  v6:= 93I;
  #L23c26c.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c272.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c278.  v6:= temp @kind object;
  #L23c27a.  return v6 @kind object;
}
