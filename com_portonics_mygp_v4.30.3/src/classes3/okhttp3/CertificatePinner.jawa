record `okhttp3.CertificatePinner` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.internal.tls.CertificateChainCleaner` `okhttp3.CertificatePinner.certificateChainCleaner` @AccessFlag PRIVATE_FINAL;
  `java.util.Set` `okhttp3.CertificatePinner.pins` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.CertificatePinner` `@@okhttp3.CertificatePinner.DEFAULT` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/CertificatePinner;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2f69b0.  v0:= new `okhttp3.CertificatePinner$Builder`;
  #L2f69b4.  call `<init>`(v0) @signature `Lokhttp3/CertificatePinner$Builder;.<init>:()V` @kind direct;
  #L2f69ba.  call temp:= `build`(v0) @signature `Lokhttp3/CertificatePinner$Builder;.build:()Lokhttp3/CertificatePinner;` @kind virtual;
  #L2f69c0.  v0:= temp @kind object;
  #L2f69c2.  `@@okhttp3.CertificatePinner.DEFAULT` @type ^`okhttp3.CertificatePinner` := v0 @kind object;
  #L2f69c6.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.CertificatePinner` v0 @kind this, `java.util.Set` v1 @kind object, `okhttp3.internal.tls.CertificateChainCleaner` v2 @kind object) @signature `Lokhttp3/CertificatePinner;.<init>:(Ljava/util/Set;Lokhttp3/internal/tls/CertificateChainCleaner;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2f69d8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f69de.  v0.`okhttp3.CertificatePinner.pins` @type ^`java.util.Set` := v1 @kind object;
  #L2f69e2.  v0.`okhttp3.CertificatePinner.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v2 @kind object;
  #L2f69e6.  return @kind void;
}
procedure `java.lang.String` `pin`(`java.security.cert.Certificate` v2 @kind object) @signature `Lokhttp3/CertificatePinner;.pin:(Ljava/security/cert/Certificate;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2f684c.  v0:= instanceof @variable v2 @type ^`java.security.cert.X509Certificate` @kind boolean;
  #L2f6850.  if v0 == 0 then goto L2f688c;
  #L2f6854.  v0:= new `java.lang.StringBuilder`;
  #L2f6858.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f685e.  v1:= "sha256/" @kind object;
  #L2f6862.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6868.  v2:= (`java.security.cert.X509Certificate`) v2 @kind object;
  #L2f686c.  call temp:= `sha256`(v2) @signature `Lokhttp3/CertificatePinner;.sha256:(Ljava/security/cert/X509Certificate;)Lokio/ByteString;` @kind static;
  #L2f6872.  v2:= temp @kind object;
  #L2f6874.  call temp:= `base64`(v2) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L2f687a.  v2:= temp @kind object;
  #L2f687c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6882.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f6888.  v2:= temp @kind object;
  #L2f688a.  return v2 @kind object;
  #L2f688c.  v2:= new `java.lang.IllegalArgumentException`;
  #L2f6890.  v0:= "Certificate pinning requires X509 certificates" @kind object;
  #L2f6894.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f689a.  throw v2;
}
procedure `okio.ByteString` `sha1`(`java.security.cert.X509Certificate` v0 @kind object) @signature `Lokhttp3/CertificatePinner;.sha1:(Ljava/security/cert/X509Certificate;)Lokio/ByteString;` @AccessFlag STATIC {
    temp;

  #L2f6948.  call temp:= `getPublicKey`(v0) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L2f694e.  v0:= temp @kind object;
  #L2f6950.  call temp:= `getEncoded`(v0) @signature `Ljava/security/PublicKey;.getEncoded:()[B` @kind interface;
  #L2f6956.  v0:= temp @kind object;
  #L2f6958.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L2f695e.  v0:= temp @kind object;
  #L2f6960.  call temp:= `sha1`(v0) @signature `Lokio/ByteString;.sha1:()Lokio/ByteString;` @kind virtual;
  #L2f6966.  v0:= temp @kind object;
  #L2f6968.  return v0 @kind object;
}
procedure `okio.ByteString` `sha256`(`java.security.cert.X509Certificate` v0 @kind object) @signature `Lokhttp3/CertificatePinner;.sha256:(Ljava/security/cert/X509Certificate;)Lokio/ByteString;` @AccessFlag STATIC {
    temp;

  #L2f697c.  call temp:= `getPublicKey`(v0) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L2f6982.  v0:= temp @kind object;
  #L2f6984.  call temp:= `getEncoded`(v0) @signature `Ljava/security/PublicKey;.getEncoded:()[B` @kind interface;
  #L2f698a.  v0:= temp @kind object;
  #L2f698c.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L2f6992.  v0:= temp @kind object;
  #L2f6994.  call temp:= `sha256`(v0) @signature `Lokio/ByteString;.sha256:()Lokio/ByteString;` @kind virtual;
  #L2f699a.  v0:= temp @kind object;
  #L2f699c.  return v0 @kind object;
}
procedure `void` `check`(`okhttp3.CertificatePinner` v12 @kind this, `java.lang.String` v13 @kind object, `java.util.List` v14 @kind object) @signature `Lokhttp3/CertificatePinner;.check:(Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L2f6a18.  call temp:= `findMatchingPins`(v12, v13) @signature `Lokhttp3/CertificatePinner;.findMatchingPins:(Ljava/lang/String;)Ljava/util/List;` @kind virtual;
  #L2f6a1e.  v0:= temp @kind object;
  #L2f6a20.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2f6a26.  v1:= temp;
  #L2f6a28.  if v1 == 0 then goto L2f6a2e;
  #L2f6a2c.  return @kind void;
  #L2f6a2e.  v1:= v12.`okhttp3.CertificatePinner.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L2f6a32.  if v1 == 0 then goto L2f6a3e;
  #L2f6a36.  call temp:= `clean`(v1, v14, v13) @signature `Lokhttp3/internal/tls/CertificateChainCleaner;.clean:(Ljava/util/List;Ljava/lang/String;)Ljava/util/List;` @kind virtual;
  #L2f6a3c.  v14:= temp @kind object;
  #L2f6a3e.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f6a44.  v1:= temp;
  #L2f6a46.  v2:= 0I;
  #L2f6a48.  v3:= 0I;
  #L2f6a4a.  if v3 >= v1 then goto L2f6b1a;
  #L2f6a4e.  call temp:= `get`(v14, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f6a54.  v4:= temp @kind object;
  #L2f6a56.  v4:= (`java.security.cert.X509Certificate`) v4 @kind object;
  #L2f6a5a.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f6a60.  v5:= temp;
  #L2f6a62.  v6:= 0I;
  #L2f6a64.  v7:= v6 @kind object;
  #L2f6a66.  v8:= 0I;
  #L2f6a68.  if v8 >= v5 then goto L2f6b14;
  #L2f6a6c.  call temp:= `get`(v0, v8) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f6a72.  v9:= temp @kind object;
  #L2f6a74.  v9:= (`okhttp3.CertificatePinner$Pin`) v9 @kind object;
  #L2f6a78.  v10:= v9.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L2f6a7c.  v11:= "sha256/" @kind object;
  #L2f6a80.  call temp:= `equals`(v10, v11) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6a86.  v10:= temp;
  #L2f6a88.  if v10 == 0 then goto L2f6aaa;
  #L2f6a8c.  if v6 != 0 then goto L2f6a98;
  #L2f6a90.  call temp:= `sha256`(v4) @signature `Lokhttp3/CertificatePinner;.sha256:(Ljava/security/cert/X509Certificate;)Lokio/ByteString;` @kind static;
  #L2f6a96.  v6:= temp @kind object;
  #L2f6a98.  v9:= v9.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L2f6a9c.  call temp:= `equals`(v9, v6) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6aa2.  v9:= temp;
  #L2f6aa4.  if v9 == 0 then goto L2f6adc;
  #L2f6aa8.  return @kind void;
  #L2f6aaa.  v10:= v9.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L2f6aae.  v11:= "sha1/" @kind object;
  #L2f6ab2.  call temp:= `equals`(v10, v11) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6ab8.  v10:= temp;
  #L2f6aba.  if v10 == 0 then goto L2f6ae2;
  #L2f6abe.  if v7 != 0 then goto L2f6aca;
  #L2f6ac2.  call temp:= `sha1`(v4) @signature `Lokhttp3/CertificatePinner;.sha1:(Ljava/security/cert/X509Certificate;)Lokio/ByteString;` @kind static;
  #L2f6ac8.  v7:= temp @kind object;
  #L2f6aca.  v9:= v9.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L2f6ace.  call temp:= `equals`(v9, v7) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6ad4.  v9:= temp;
  #L2f6ad6.  if v9 == 0 then goto L2f6adc;
  #L2f6ada.  return @kind void;
  #L2f6adc.  v8:= v8 + 1;
  #L2f6ae0.  goto L2f6a68;
  #L2f6ae2.  v13:= new `java.lang.AssertionError`;
  #L2f6ae6.  v14:= new `java.lang.StringBuilder`;
  #L2f6aea.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f6af0.  v0:= "unsupported hashAlgorithm: " @kind object;
  #L2f6af4.  call temp:= `append`(v14, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6afa.  v0:= v9.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L2f6afe.  call temp:= `append`(v14, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6b04.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f6b0a.  v14:= temp @kind object;
  #L2f6b0c.  call `<init>`(v13, v14) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2f6b12.  throw v13;
  #L2f6b14.  v3:= v3 + 1;
  #L2f6b18.  goto L2f6a4a;
  #L2f6b1a.  v1:= new `java.lang.StringBuilder`;
  #L2f6b1e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f6b24.  v3:= "Certificate pinning failure!" @kind object;
  #L2f6b28.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6b2e.  v3:= "\n  Peer certificate chain:" @kind object;
  #L2f6b32.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6b38.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f6b3e.  v3:= temp;
  #L2f6b40.  v4:= 0I;
  #L2f6b42.  v5:= "\n    " @kind object;
  #L2f6b46.  if v4 >= v3 then goto L2f6b90;
  #L2f6b4a.  call temp:= `get`(v14, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f6b50.  v6:= temp @kind object;
  #L2f6b52.  v6:= (`java.security.cert.X509Certificate`) v6 @kind object;
  #L2f6b56.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6b5c.  call temp:= `pin`(v6) @signature `Lokhttp3/CertificatePinner;.pin:(Ljava/security/cert/Certificate;)Ljava/lang/String;` @kind static;
  #L2f6b62.  v5:= temp @kind object;
  #L2f6b64.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6b6a.  v5:= ": " @kind object;
  #L2f6b6e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6b74.  call temp:= `getSubjectDN`(v6) @signature `Ljava/security/cert/X509Certificate;.getSubjectDN:()Ljava/security/Principal;` @kind virtual;
  #L2f6b7a.  v5:= temp @kind object;
  #L2f6b7c.  call temp:= `getName`(v5) @signature `Ljava/security/Principal;.getName:()Ljava/lang/String;` @kind interface;
  #L2f6b82.  v5:= temp @kind object;
  #L2f6b84.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6b8a.  v4:= v4 + 1;
  #L2f6b8e.  goto L2f6b42;
  #L2f6b90.  v14:= "\n  Pinned certificates for " @kind object;
  #L2f6b94.  call temp:= `append`(v1, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6b9a.  call temp:= `append`(v1, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6ba0.  v13:= ":" @kind object;
  #L2f6ba4.  call temp:= `append`(v1, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6baa.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2f6bb0.  v13:= temp;
  #L2f6bb2.  if v2 >= v13 then goto L2f6bd4;
  #L2f6bb6.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2f6bbc.  v14:= temp @kind object;
  #L2f6bbe.  v14:= (`okhttp3.CertificatePinner$Pin`) v14 @kind object;
  #L2f6bc2.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6bc8.  call temp:= `append`(v1, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6bce.  v2:= v2 + 1;
  #L2f6bd2.  goto L2f6bb2;
  #L2f6bd4.  v13:= new `javax.net.ssl.SSLPeerUnverifiedException`;
  #L2f6bd8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f6bde.  v14:= temp @kind object;
  #L2f6be0.  call `<init>`(v13, v14) @signature `Ljavax/net/ssl/SSLPeerUnverifiedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f6be6.  goto L2f6bea;
  #L2f6be8.  throw v13;
  #L2f6bea.  goto L2f6be8;
}
procedure `void` `check`(`okhttp3.CertificatePinner` v0 @kind this, `java.lang.String` v1 @kind object, `java.security.cert.Certificate`[] v2 @kind object) @signature `Lokhttp3/CertificatePinner;.check:(Ljava/lang/String;[Ljava/security/cert/Certificate;)V` @AccessFlag PUBLIC {
    temp;

  #L2f69f8.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2f69fe.  v2:= temp @kind object;
  #L2f6a00.  call `check`(v0, v1, v2) @signature `Lokhttp3/CertificatePinner;.check:(Ljava/lang/String;Ljava/util/List;)V` @kind virtual;
  #L2f6a06.  return @kind void;
}
procedure `boolean` `equals`(`okhttp3.CertificatePinner` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lokhttp3/CertificatePinner;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f67c8.  v0:= 1I;
  #L2f67ca.  if v4 != v3 then goto L2f67d0;
  #L2f67ce.  return v0;
  #L2f67d0.  v1:= instanceof @variable v4 @type ^`okhttp3.CertificatePinner` @kind boolean;
  #L2f67d4.  if v1 == 0 then goto L2f6806;
  #L2f67d8.  v1:= v3.`okhttp3.CertificatePinner.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L2f67dc.  v4:= (`okhttp3.CertificatePinner`) v4 @kind object;
  #L2f67e0.  v2:= v4.`okhttp3.CertificatePinner.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L2f67e4.  call temp:= `equals`(v1, v2) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2f67ea.  v1:= temp;
  #L2f67ec.  if v1 == 0 then goto L2f6806;
  #L2f67f0.  v1:= v3.`okhttp3.CertificatePinner.pins` @type ^`java.util.Set` @kind object;
  #L2f67f4.  v4:= v4.`okhttp3.CertificatePinner.pins` @type ^`java.util.Set` @kind object;
  #L2f67f8.  call temp:= `equals`(v1, v4) @signature `Ljava/util/Set;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L2f67fe.  v4:= temp;
  #L2f6800.  if v4 == 0 then goto L2f6806;
  #L2f6804.  goto L2f6808;
  #L2f6806.  v0:= 0I;
  #L2f6808.  return v0;
}
procedure `java.util.List` `findMatchingPins`(`okhttp3.CertificatePinner` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lokhttp3/CertificatePinner;.findMatchingPins:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2f68ac.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L2f68b2.  v0:= temp @kind object;
  #L2f68b4.  v1:= v4.`okhttp3.CertificatePinner.pins` @type ^`java.util.Set` @kind object;
  #L2f68b8.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2f68be.  v1:= temp @kind object;
  #L2f68c0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2f68c6.  v2:= temp;
  #L2f68c8.  if v2 == 0 then goto L2f6902;
  #L2f68cc.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2f68d2.  v2:= temp @kind object;
  #L2f68d4.  v2:= (`okhttp3.CertificatePinner$Pin`) v2 @kind object;
  #L2f68d8.  call temp:= `matches`(v2, v5) @signature `Lokhttp3/CertificatePinner$Pin;.matches:(Ljava/lang/String;)Z` @kind virtual;
  #L2f68de.  v3:= temp;
  #L2f68e0.  if v3 == 0 then goto L2f68c0;
  #L2f68e4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2f68ea.  v3:= temp;
  #L2f68ec.  if v3 == 0 then goto L2f68fa;
  #L2f68f0.  v0:= new `java.util.ArrayList`;
  #L2f68f4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2f68fa.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2f6900.  goto L2f68c0;
  #L2f6902.  return v0 @kind object;
}
procedure `int` `hashCode`(`okhttp3.CertificatePinner` v2 @kind this) @signature `Lokhttp3/CertificatePinner;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f681c.  v0:= v2.`okhttp3.CertificatePinner.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L2f6820.  call temp:= `hashCode`(v0) @signature `Ljava/util/Objects;.hashCode:(Ljava/lang/Object;)I` @kind static;
  #L2f6826.  v0:= temp;
  #L2f6828.  v0:= v0 * 31;
  #L2f682c.  v1:= v2.`okhttp3.CertificatePinner.pins` @type ^`java.util.Set` @kind object;
  #L2f6830.  call temp:= `hashCode`(v1) @signature `Ljava/util/Set;.hashCode:()I` @kind interface;
  #L2f6836.  v1:= temp;
  #L2f6838.  v0:= v0 + v1 @kind int;
  #L2f683a.  return v0;
}
procedure `okhttp3.CertificatePinner` `withCertificateChainCleaner`(`okhttp3.CertificatePinner` v2 @kind this, `okhttp3.internal.tls.CertificateChainCleaner` v3 @kind object) @signature `Lokhttp3/CertificatePinner;.withCertificateChainCleaner:(Lokhttp3/internal/tls/CertificateChainCleaner;)Lokhttp3/CertificatePinner;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2f6914.  v0:= v2.`okhttp3.CertificatePinner.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L2f6918.  call temp:= `equals`(v0, v3) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2f691e.  v0:= temp;
  #L2f6920.  if v0 == 0 then goto L2f6928;
  #L2f6924.  v0:= v2 @kind object;
  #L2f6926.  goto L2f6936;
  #L2f6928.  v0:= new `okhttp3.CertificatePinner`;
  #L2f692c.  v1:= v2.`okhttp3.CertificatePinner.pins` @type ^`java.util.Set` @kind object;
  #L2f6930.  call `<init>`(v0, v1, v3) @signature `Lokhttp3/CertificatePinner;.<init>:(Ljava/util/Set;Lokhttp3/internal/tls/CertificateChainCleaner;)V` @kind direct;
  #L2f6936.  return v0 @kind object;
}
