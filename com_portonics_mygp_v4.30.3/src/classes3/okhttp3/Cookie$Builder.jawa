record `okhttp3.Cookie$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `okhttp3.Cookie$Builder.domain` @AccessFlag ;
  `long` `okhttp3.Cookie$Builder.expiresAt` @AccessFlag ;
  `boolean` `okhttp3.Cookie$Builder.hostOnly` @AccessFlag ;
  `boolean` `okhttp3.Cookie$Builder.httpOnly` @AccessFlag ;
  `java.lang.String` `okhttp3.Cookie$Builder.name` @AccessFlag ;
  `java.lang.String` `okhttp3.Cookie$Builder.path` @AccessFlag ;
  `boolean` `okhttp3.Cookie$Builder.persistent` @AccessFlag ;
  `boolean` `okhttp3.Cookie$Builder.secure` @AccessFlag ;
  `java.lang.String` `okhttp3.Cookie$Builder.value` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.Cookie$Builder` v2 @kind this) @signature `Lokhttp3/Cookie$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2f84b0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f84b6.  v0:= 253402300799999L;
  #L2f84c0.  v2.`okhttp3.Cookie$Builder.expiresAt` @type ^`long` := v0 @kind wide;
  #L2f84c4.  v0:= "/" @kind object;
  #L2f84c8.  v2.`okhttp3.Cookie$Builder.path` @type ^`java.lang.String` := v0 @kind object;
  #L2f84cc.  return @kind void;
}
procedure `okhttp3.Cookie$Builder` `domain`(`okhttp3.Cookie$Builder` v2 @kind this, `java.lang.String` v3 @kind object, `boolean` v4 ) @signature `Lokhttp3/Cookie$Builder;.domain:(Ljava/lang/String;Z)Lokhttp3/Cookie$Builder;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2f8304.  v0:= "domain == null" @kind object;
  #L2f8308.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2f830e.  call temp:= `canonicalizeHost`(v3) @signature `Lokhttp3/internal/Util;.canonicalizeHost:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L2f8314.  v0:= temp @kind object;
  #L2f8316.  if v0 == 0 then goto L2f8324;
  #L2f831a.  v2.`okhttp3.Cookie$Builder.domain` @type ^`java.lang.String` := v0 @kind object;
  #L2f831e.  v2.`okhttp3.Cookie$Builder.hostOnly` @type ^`boolean` := v4 @kind boolean;
  #L2f8322.  return v2 @kind object;
  #L2f8324.  v4:= new `java.lang.IllegalArgumentException`;
  #L2f8328.  v0:= new `java.lang.StringBuilder`;
  #L2f832c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f8332.  v1:= "unexpected domain: " @kind object;
  #L2f8336.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f833c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f8342.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f8348.  v3:= temp @kind object;
  #L2f834a.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f8350.  throw v4;
}
procedure `okhttp3.Cookie` `build`(`okhttp3.Cookie$Builder` v1 @kind this) @signature `Lokhttp3/Cookie$Builder;.build:()Lokhttp3/Cookie;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f82cc.  v0:= new `okhttp3.Cookie`;
  #L2f82d0.  call `<init>`(v0, v1) @signature `Lokhttp3/Cookie;.<init>:(Lokhttp3/Cookie$Builder;)V` @kind direct;
  #L2f82d6.  return v0 @kind object;
}
procedure `okhttp3.Cookie$Builder` `domain`(`okhttp3.Cookie$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Cookie$Builder;.domain:(Ljava/lang/String;)Lokhttp3/Cookie$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f82e8.  v0:= 0I;
  #L2f82ea.  call temp:= `domain`(v1, v2, v0) @signature `Lokhttp3/Cookie$Builder;.domain:(Ljava/lang/String;Z)Lokhttp3/Cookie$Builder;` @kind direct;
  #L2f82f0.  v2:= temp @kind object;
  #L2f82f2.  return v2 @kind object;
}
procedure `okhttp3.Cookie$Builder` `expiresAt`(`okhttp3.Cookie$Builder` v3 @kind this, `long` v4 ) @signature `Lokhttp3/Cookie$Builder;.expiresAt:(J)Lokhttp3/Cookie$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f8364.  v0:= 0L;
  #L2f8368.  v2:= lcmp(v4, v0);
  #L2f836c.  if v2 > 0 then goto L2f8374;
  #L2f8370.  v4:= -9223372036854775808L;
  #L2f8374.  v0:= 253402300799999L;
  #L2f837e.  v2:= lcmp(v4, v0);
  #L2f8382.  if v2 <= 0 then goto L2f8388;
  #L2f8386.  v4:= v0 @kind wide;
  #L2f8388.  v3.`okhttp3.Cookie$Builder.expiresAt` @type ^`long` := v4 @kind wide;
  #L2f838c.  v4:= 1I;
  #L2f838e.  v3.`okhttp3.Cookie$Builder.persistent` @type ^`boolean` := v4 @kind boolean;
  #L2f8392.  return v3 @kind object;
}
procedure `okhttp3.Cookie$Builder` `hostOnlyDomain`(`okhttp3.Cookie$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Cookie$Builder;.hostOnlyDomain:(Ljava/lang/String;)Lokhttp3/Cookie$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f83a4.  v0:= 1I;
  #L2f83a6.  call temp:= `domain`(v1, v2, v0) @signature `Lokhttp3/Cookie$Builder;.domain:(Ljava/lang/String;Z)Lokhttp3/Cookie$Builder;` @kind direct;
  #L2f83ac.  v2:= temp @kind object;
  #L2f83ae.  return v2 @kind object;
}
procedure `okhttp3.Cookie$Builder` `httpOnly`(`okhttp3.Cookie$Builder` v1 @kind this) @signature `Lokhttp3/Cookie$Builder;.httpOnly:()Lokhttp3/Cookie$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f83c0.  v0:= 1I;
  #L2f83c2.  v1.`okhttp3.Cookie$Builder.httpOnly` @type ^`boolean` := v0 @kind boolean;
  #L2f83c6.  return v1 @kind object;
}
procedure `okhttp3.Cookie$Builder` `name`(`okhttp3.Cookie$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Cookie$Builder;.name:(Ljava/lang/String;)Lokhttp3/Cookie$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f83d8.  v0:= "name == null" @kind object;
  #L2f83dc.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2f83e2.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2f83e8.  v0:= temp @kind object;
  #L2f83ea.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f83f0.  v0:= temp;
  #L2f83f2.  if v0 == 0 then goto L2f83fc;
  #L2f83f6.  v1.`okhttp3.Cookie$Builder.name` @type ^`java.lang.String` := v2 @kind object;
  #L2f83fa.  return v1 @kind object;
  #L2f83fc.  v2:= new `java.lang.IllegalArgumentException`;
  #L2f8400.  v0:= "name is not trimmed" @kind object;
  #L2f8404.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f840a.  throw v2;
}
procedure `okhttp3.Cookie$Builder` `path`(`okhttp3.Cookie$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Cookie$Builder;.path:(Ljava/lang/String;)Lokhttp3/Cookie$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f841c.  v0:= "/" @kind object;
  #L2f8420.  call temp:= `startsWith`(v2, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2f8426.  v0:= temp;
  #L2f8428.  if v0 == 0 then goto L2f8432;
  #L2f842c.  v1.`okhttp3.Cookie$Builder.path` @type ^`java.lang.String` := v2 @kind object;
  #L2f8430.  return v1 @kind object;
  #L2f8432.  v2:= new `java.lang.IllegalArgumentException`;
  #L2f8436.  v0:= "path must start with '/'" @kind object;
  #L2f843a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f8440.  throw v2;
}
procedure `okhttp3.Cookie$Builder` `secure`(`okhttp3.Cookie$Builder` v1 @kind this) @signature `Lokhttp3/Cookie$Builder;.secure:()Lokhttp3/Cookie$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f8454.  v0:= 1I;
  #L2f8456.  v1.`okhttp3.Cookie$Builder.secure` @type ^`boolean` := v0 @kind boolean;
  #L2f845a.  return v1 @kind object;
}
procedure `okhttp3.Cookie$Builder` `value`(`okhttp3.Cookie$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Cookie$Builder;.value:(Ljava/lang/String;)Lokhttp3/Cookie$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f846c.  v0:= "value == null" @kind object;
  #L2f8470.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2f8476.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2f847c.  v0:= temp @kind object;
  #L2f847e.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f8484.  v0:= temp;
  #L2f8486.  if v0 == 0 then goto L2f8490;
  #L2f848a.  v1.`okhttp3.Cookie$Builder.value` @type ^`java.lang.String` := v2 @kind object;
  #L2f848e.  return v1 @kind object;
  #L2f8490.  v2:= new `java.lang.IllegalArgumentException`;
  #L2f8494.  v0:= "value is not trimmed" @kind object;
  #L2f8498.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f849e.  throw v2;
}
