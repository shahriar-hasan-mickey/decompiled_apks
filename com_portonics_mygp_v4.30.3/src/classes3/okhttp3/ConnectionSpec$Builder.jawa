record `okhttp3.ConnectionSpec$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.cipherSuites` @AccessFlag ;
  `boolean` `okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @AccessFlag ;
  `boolean` `okhttp3.ConnectionSpec$Builder.tls` @AccessFlag ;
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.tlsVersions` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `okhttp3.ConnectionSpec` v2 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2f7d4c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f7d52.  v0:= v2.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L2f7d56.  v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` := v0 @kind boolean;
  #L2f7d5a.  v0:= v2.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L2f7d5e.  v1.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L2f7d62.  v0:= v2.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L2f7d66.  v1.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L2f7d6a.  v2:= v2.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L2f7d6e.  v1.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` := v2 @kind boolean;
  #L2f7d72.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2f7d30.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f7d36.  v0.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` := v1 @kind boolean;
  #L2f7d3a.  return @kind void;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledCipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledCipherSuites:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f7b50.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L2f7b54.  if v0 == 0 then goto L2f7b60;
  #L2f7b58.  v0:= 0I;
  #L2f7b5a.  v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L2f7b5e.  return v2 @kind object;
  #L2f7b60.  v0:= new `java.lang.IllegalStateException`;
  #L2f7b64.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L2f7b68.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f7b6e.  throw v0;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledTlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledTlsVersions:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f7b80.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L2f7b84.  if v0 == 0 then goto L2f7b90;
  #L2f7b88.  v0:= 0I;
  #L2f7b8a.  v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L2f7b8e.  return v2 @kind object;
  #L2f7b90.  v0:= new `java.lang.IllegalStateException`;
  #L2f7b94.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L2f7b98.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f7b9e.  throw v0;
}
procedure `okhttp3.ConnectionSpec` `build`(`okhttp3.ConnectionSpec$Builder` v1 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f7b34.  v0:= new `okhttp3.ConnectionSpec`;
  #L2f7b38.  call `<init>`(v0, v1) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;)V` @kind direct;
  #L2f7b3e.  return v0 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f7bb0.  v0:= v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L2f7bb4.  if v0 == 0 then goto L2f7be0;
  #L2f7bb8.  v0:= length @variable v2;
  #L2f7bba.  if v0 == 0 then goto L2f7bd0;
  #L2f7bbe.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2f7bc4.  v2:= temp @kind object;
  #L2f7bc6.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L2f7bca.  v1.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v2 @kind object;
  #L2f7bce.  return v1 @kind object;
  #L2f7bd0.  v2:= new `java.lang.IllegalArgumentException`;
  #L2f7bd4.  v0:= "At least one cipher suite is required" @kind object;
  #L2f7bd8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f7bde.  throw v2;
  #L2f7be0.  v2:= new `java.lang.IllegalStateException`;
  #L2f7be4.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L2f7be8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f7bee.  throw v2;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v3 @kind this, `okhttp3.CipherSuite`[] v4 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f7c00.  v0:= v3.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L2f7c04.  if v0 == 0 then goto L2f7c32;
  #L2f7c08.  v0:= length @variable v4;
  #L2f7c0a.  v0:= new `java.lang.String`[v0];
  #L2f7c0e.  v1:= 0I;
  #L2f7c10.  v2:= length @variable v4;
  #L2f7c12.  if v1 >= v2 then goto L2f7c28;
  #L2f7c16.  v2:= v4[v1] @kind object;
  #L2f7c1a.  v2:= v2.`okhttp3.CipherSuite.javaName` @type ^`java.lang.String` @kind object;
  #L2f7c1e.  v0[v1]:= v2 @kind object;
  #L2f7c22.  v1:= v1 + 1;
  #L2f7c26.  goto L2f7c10;
  #L2f7c28.  call temp:= `cipherSuites`(v3, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L2f7c2e.  v4:= temp @kind object;
  #L2f7c30.  return v4 @kind object;
  #L2f7c32.  v4:= new `java.lang.IllegalStateException`;
  #L2f7c36.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L2f7c3a.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f7c40.  goto L2f7c44;
  #L2f7c42.  throw v4;
  #L2f7c44.  goto L2f7c42;
}
procedure `okhttp3.ConnectionSpec$Builder` `supportsTlsExtensions`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `boolean` v2 ) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f7c58.  v0:= v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L2f7c5c.  if v0 == 0 then goto L2f7c66;
  #L2f7c60.  v1.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` := v2 @kind boolean;
  #L2f7c64.  return v1 @kind object;
  #L2f7c66.  v2:= new `java.lang.IllegalStateException`;
  #L2f7c6a.  v0:= "no TLS extensions for cleartext connections" @kind object;
  #L2f7c6e.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f7c74.  throw v2;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f7c88.  v0:= v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L2f7c8c.  if v0 == 0 then goto L2f7cb8;
  #L2f7c90.  v0:= length @variable v2;
  #L2f7c92.  if v0 == 0 then goto L2f7ca8;
  #L2f7c96.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2f7c9c.  v2:= temp @kind object;
  #L2f7c9e.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L2f7ca2.  v1.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v2 @kind object;
  #L2f7ca6.  return v1 @kind object;
  #L2f7ca8.  v2:= new `java.lang.IllegalArgumentException`;
  #L2f7cac.  v0:= "At least one TLS version is required" @kind object;
  #L2f7cb0.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f7cb6.  throw v2;
  #L2f7cb8.  v2:= new `java.lang.IllegalStateException`;
  #L2f7cbc.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L2f7cc0.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f7cc6.  throw v2;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v3 @kind this, `okhttp3.TlsVersion`[] v4 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f7cd8.  v0:= v3.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L2f7cdc.  if v0 == 0 then goto L2f7d0a;
  #L2f7ce0.  v0:= length @variable v4;
  #L2f7ce2.  v0:= new `java.lang.String`[v0];
  #L2f7ce6.  v1:= 0I;
  #L2f7ce8.  v2:= length @variable v4;
  #L2f7cea.  if v1 >= v2 then goto L2f7d00;
  #L2f7cee.  v2:= v4[v1] @kind object;
  #L2f7cf2.  v2:= v2.`okhttp3.TlsVersion.javaName` @type ^`java.lang.String` @kind object;
  #L2f7cf6.  v0[v1]:= v2 @kind object;
  #L2f7cfa.  v1:= v1 + 1;
  #L2f7cfe.  goto L2f7ce8;
  #L2f7d00.  call temp:= `tlsVersions`(v3, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L2f7d06.  v4:= temp @kind object;
  #L2f7d08.  return v4 @kind object;
  #L2f7d0a.  v4:= new `java.lang.IllegalStateException`;
  #L2f7d0e.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L2f7d12.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f7d18.  goto L2f7d1c;
  #L2f7d1a.  throw v4;
  #L2f7d1c.  goto L2f7d1a;
}
