record `okhttp3.HttpUrl$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `okhttp3.HttpUrl$Builder.encodedFragment` @AccessFlag ;
  `java.lang.String` `okhttp3.HttpUrl$Builder.encodedPassword` @AccessFlag ;
  `java.util.List` `okhttp3.HttpUrl$Builder.encodedPathSegments` @AccessFlag FINAL;
  `java.util.List` `okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @AccessFlag ;
  `java.lang.String` `okhttp3.HttpUrl$Builder.encodedUsername` @AccessFlag ;
  `java.lang.String` `okhttp3.HttpUrl$Builder.host` @AccessFlag ;
  `int` `okhttp3.HttpUrl$Builder.port` @AccessFlag ;
  `java.lang.String` `okhttp3.HttpUrl$Builder.scheme` @AccessFlag ;
}
global `java.lang.String` `@@okhttp3.HttpUrl$Builder.INVALID_HOST` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.HttpUrl$Builder` v2 @kind this) @signature `Lokhttp3/HttpUrl$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2fbfdc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2fbfe2.  v0:= "" @kind object;
  #L2fbfe6.  v2.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` := v0 @kind object;
  #L2fbfea.  v2.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` := v0 @kind object;
  #L2fbfee.  v1:= -1I;
  #L2fbff0.  v2.`okhttp3.HttpUrl$Builder.port` @type ^`int` := v1;
  #L2fbff4.  v1:= new `java.util.ArrayList`;
  #L2fbff8.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2fbffe.  v2.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` := v1 @kind object;
  #L2fc002.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fc008.  return @kind void;
}
procedure `okhttp3.HttpUrl$Builder` `addPathSegments`(`okhttp3.HttpUrl$Builder` v8 @kind this, `java.lang.String` v9 @kind object, `boolean` v10 ) @signature `Lokhttp3/HttpUrl$Builder;.addPathSegments:(Ljava/lang/String;Z)Lokhttp3/HttpUrl$Builder;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2fb464.  v0:= 0I;
  #L2fb466.  v3:= 0I;
  #L2fb468.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fb46e.  v1:= temp;
  #L2fb470.  v2:= "/\\" @kind object;
  #L2fb474.  call temp:= `delimiterOffset`(v9, v3, v1, v2) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L2fb47a.  v7:= temp;
  #L2fb47c.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fb482.  v1:= temp;
  #L2fb484.  if v7 >= v1 then goto L2fb48e;
  #L2fb488.  v1:= 1I;
  #L2fb48a.  v5:= 1I;
  #L2fb48c.  goto L2fb490;
  #L2fb48e.  v5:= 0I;
  #L2fb490.  v1:= v8 @kind object;
  #L2fb492.  v2:= v9 @kind object;
  #L2fb494.  v4:= v7;
  #L2fb496.  v6:= v10;
  #L2fb498.  call `push`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/HttpUrl$Builder;.push:(Ljava/lang/String;IIZZ)V` @kind direct;
  #L2fb49e.  v3:= v7 + 1;
  #L2fb4a2.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fb4a8.  v1:= temp;
  #L2fb4aa.  if v3 <= v1 then goto L2fb468;
  #L2fb4ae.  return v8 @kind object;
}
procedure `java.lang.String` `canonicalizeHost`(`java.lang.String` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lokhttp3/HttpUrl$Builder;.canonicalizeHost:(Ljava/lang/String;II)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2fb164.  v0:= 0I;
  #L2fb166.  call temp:= `percentDecode`(v1, v2, v3, v0) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/lang/String;IIZ)Ljava/lang/String;` @kind static;
  #L2fb16c.  v1:= temp @kind object;
  #L2fb16e.  call temp:= `canonicalizeHost`(v1) @signature `Lokhttp3/internal/Util;.canonicalizeHost:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L2fb174.  v1:= temp @kind object;
  #L2fb176.  return v1 @kind object;
}
procedure `boolean` `isDot`(`okhttp3.HttpUrl$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.isDot:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2faf1c.  v0:= "." @kind object;
  #L2faf20.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2faf26.  v0:= temp;
  #L2faf28.  if v0 != 0 then goto L2faf42;
  #L2faf2c.  v0:= "%2e" @kind object;
  #L2faf30.  call temp:= `equalsIgnoreCase`(v2, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2faf36.  v2:= temp;
  #L2faf38.  if v2 == 0 then goto L2faf3e;
  #L2faf3c.  goto L2faf42;
  #L2faf3e.  v2:= 0I;
  #L2faf40.  goto L2faf44;
  #L2faf42.  v2:= 1I;
  #L2faf44.  return v2;
}
procedure `boolean` `isDotDot`(`okhttp3.HttpUrl$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.isDotDot:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2faf58.  v0:= ".." @kind object;
  #L2faf5c.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2faf62.  v0:= temp;
  #L2faf64.  if v0 != 0 then goto L2faf9e;
  #L2faf68.  v0:= "%2e." @kind object;
  #L2faf6c.  call temp:= `equalsIgnoreCase`(v2, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2faf72.  v0:= temp;
  #L2faf74.  if v0 != 0 then goto L2faf9e;
  #L2faf78.  v0:= ".%2e" @kind object;
  #L2faf7c.  call temp:= `equalsIgnoreCase`(v2, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2faf82.  v0:= temp;
  #L2faf84.  if v0 != 0 then goto L2faf9e;
  #L2faf88.  v0:= "%2e%2e" @kind object;
  #L2faf8c.  call temp:= `equalsIgnoreCase`(v2, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2faf92.  v2:= temp;
  #L2faf94.  if v2 == 0 then goto L2faf9a;
  #L2faf98.  goto L2faf9e;
  #L2faf9a.  v2:= 0I;
  #L2faf9c.  goto L2fafa0;
  #L2faf9e.  v2:= 1I;
  #L2fafa0.  return v2;
}
procedure `int` `parsePort`(`java.lang.String` v10 @kind object, `int` v11 , `int` v12 ) @signature `Lokhttp3/HttpUrl$Builder;.parsePort:(Ljava/lang/String;II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2fafe0.  v0:= -1I;
  #L2fafe2.  v4:= "" @kind object;
  #L2fafe6.  v5:= 0I;
  #L2fafe8.  v6:= 0I;
  #L2fafea.  v7:= 0I;
  #L2fafec.  v8:= 1I;
  #L2fafee.  v9:= 0I;
  #L2faff0.  v1:= v10 @kind object;
  #L2faff2.  v2:= v11;
  #L2faff4.  v3:= v12;
  #L2faff6.  call temp:= `canonicalize`(v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @kind static;
  #L2faffc.  v10:= temp @kind object;
  #L2faffe.  call temp:= `parseInt`(v10) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L2fb004.  v10:= temp;
  #L2fb006.  if v10 <= 0 then goto L2fb016;
  #L2fb00a.  v11:= 65535I;
  #L2fb010.  if v10 > v11 then goto L2fb016;
  #L2fb014.  return v10;
  #L2fb016.  return v0;
  catch `java.lang.NumberFormatException` @[L2fafe2..L2fb006] goto L2fb016;
}
procedure `void` `pop`(`okhttp3.HttpUrl$Builder` v3 @kind this) @signature `Lokhttp3/HttpUrl$Builder;.pop:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2fc01c.  v0:= v3.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fc020.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fc026.  v1:= temp;
  #L2fc028.  v1:= v1 + -1;
  #L2fc02c.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L2fc032.  v0:= temp @kind object;
  #L2fc034.  v0:= (`java.lang.String`) v0 @kind object;
  #L2fc038.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L2fc03e.  v0:= temp;
  #L2fc040.  v1:= "" @kind object;
  #L2fc044.  if v0 == 0 then goto L2fc070;
  #L2fc048.  v0:= v3.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fc04c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2fc052.  v0:= temp;
  #L2fc054.  if v0 != 0 then goto L2fc070;
  #L2fc058.  v0:= v3.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fc05c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fc062.  v2:= temp;
  #L2fc064.  v2:= v2 + -1;
  #L2fc068.  call temp:= `set`(v0, v2, v1) @signature `Ljava/util/List;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fc06e.  goto L2fc07a;
  #L2fc070.  v0:= v3.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fc074.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fc07a.  return @kind void;
}
procedure `int` `portColonOffset`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokhttp3/HttpUrl$Builder;.portColonOffset:(Ljava/lang/String;II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2fb038.  if v3 >= v4 then goto L2fb076;
  #L2fb03c.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fb042.  v0:= temp;
  #L2fb044.  v1:= 58I;
  #L2fb048.  if v0 == v1 then goto L2fb074;
  #L2fb04c.  v1:= 91I;
  #L2fb050.  if v0 == v1 then goto L2fb056;
  #L2fb054.  goto L2fb06e;
  #L2fb056.  v3:= v3 + 1;
  #L2fb05a.  if v3 >= v4 then goto L2fb06e;
  #L2fb05e.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fb064.  v0:= temp;
  #L2fb066.  v1:= 93I;
  #L2fb06a.  if v0 != v1 then goto L2fb056;
  #L2fb06e.  v3:= v3 + 1;
  #L2fb072.  goto L2fb038;
  #L2fb074.  return v3;
  #L2fb076.  return v4;
}
procedure `void` `push`(`okhttp3.HttpUrl$Builder` v9 @kind this, `java.lang.String` v10 @kind object, `int` v11 , `int` v12 , `boolean` v13 , `boolean` v14 ) @signature `Lokhttp3/HttpUrl$Builder;.push:(Ljava/lang/String;IIZZ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2fc08c.  v3:= " \"<>^`{}|/\\?#" @kind object;
  #L2fc090.  v5:= 0I;
  #L2fc092.  v6:= 0I;
  #L2fc094.  v7:= 1I;
  #L2fc096.  v8:= 0I;
  #L2fc098.  v0:= v10 @kind object;
  #L2fc09a.  v1:= v11;
  #L2fc09c.  v2:= v12;
  #L2fc09e.  v4:= v14;
  #L2fc0a0.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @kind static;
  #L2fc0a6.  v10:= temp @kind object;
  #L2fc0a8.  call temp:= `isDot`(v9, v10) @signature `Lokhttp3/HttpUrl$Builder;.isDot:(Ljava/lang/String;)Z` @kind direct;
  #L2fc0ae.  v11:= temp;
  #L2fc0b0.  if v11 == 0 then goto L2fc0b6;
  #L2fc0b4.  return @kind void;
  #L2fc0b6.  call temp:= `isDotDot`(v9, v10) @signature `Lokhttp3/HttpUrl$Builder;.isDotDot:(Ljava/lang/String;)Z` @kind direct;
  #L2fc0bc.  v11:= temp;
  #L2fc0be.  if v11 == 0 then goto L2fc0ca;
  #L2fc0c2.  call `pop`(v9) @signature `Lokhttp3/HttpUrl$Builder;.pop:()V` @kind direct;
  #L2fc0c8.  return @kind void;
  #L2fc0ca.  v11:= v9.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fc0ce.  call temp:= `size`(v11) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fc0d4.  v12:= temp;
  #L2fc0d6.  v12:= v12 + -1;
  #L2fc0da.  call temp:= `get`(v11, v12) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fc0e0.  v11:= temp @kind object;
  #L2fc0e2.  v11:= (`java.lang.String`) v11 @kind object;
  #L2fc0e6.  call temp:= `isEmpty`(v11) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L2fc0ec.  v11:= temp;
  #L2fc0ee.  if v11 == 0 then goto L2fc10a;
  #L2fc0f2.  v11:= v9.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fc0f6.  call temp:= `size`(v11) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fc0fc.  v12:= temp;
  #L2fc0fe.  v12:= v12 + -1;
  #L2fc102.  call temp:= `set`(v11, v12, v10) @signature `Ljava/util/List;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fc108.  goto L2fc114;
  #L2fc10a.  v11:= v9.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fc10e.  call temp:= `add`(v11, v10) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fc114.  if v13 == 0 then goto L2fc126;
  #L2fc118.  v10:= v9.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fc11c.  v11:= "" @kind object;
  #L2fc120.  call temp:= `add`(v10, v11) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fc126.  return @kind void;
}
procedure `void` `removeAllCanonicalQueryParameters`(`okhttp3.HttpUrl$Builder` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.removeAllCanonicalQueryParameters:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2fc138.  v0:= v3.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fc13c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fc142.  v0:= temp;
  #L2fc144.  v0:= v0 + -2;
  #L2fc148.  if v0 < 0 then goto L2fc19a;
  #L2fc14c.  v1:= v3.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fc150.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fc156.  v1:= temp @kind object;
  #L2fc158.  call temp:= `equals`(v4, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fc15e.  v1:= temp;
  #L2fc160.  if v1 == 0 then goto L2fc194;
  #L2fc164.  v1:= v3.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fc168.  v2:= v0 + 1;
  #L2fc16c.  call temp:= `remove`(v1, v2) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L2fc172.  v1:= v3.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fc176.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L2fc17c.  v1:= v3.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fc180.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2fc186.  v1:= temp;
  #L2fc188.  if v1 == 0 then goto L2fc194;
  #L2fc18c.  v4:= 0I;
  #L2fc18e.  v3.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` := v4 @kind object;
  #L2fc192.  return @kind void;
  #L2fc194.  v0:= v0 + -2;
  #L2fc198.  goto L2fc148;
  #L2fc19a.  return @kind void;
}
procedure `void` `resolvePath`(`okhttp3.HttpUrl$Builder` v10 @kind this, `java.lang.String` v11 @kind object, `int` v12 , `int` v13 ) @signature `Lokhttp3/HttpUrl$Builder;.resolvePath:(Ljava/lang/String;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2fc1ac.  if v12 != v13 then goto L2fc1b2;
  #L2fc1b0.  return @kind void;
  #L2fc1b2.  call temp:= `charAt`(v11, v12) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fc1b8.  v0:= temp;
  #L2fc1ba.  v1:= 47I;
  #L2fc1be.  v2:= "" @kind object;
  #L2fc1c2.  v3:= 1I;
  #L2fc1c4.  if v0 == v1 then goto L2fc1e8;
  #L2fc1c8.  v1:= 92I;
  #L2fc1cc.  if v0 != v1 then goto L2fc1d2;
  #L2fc1d0.  goto L2fc1e8;
  #L2fc1d2.  v0:= v10.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fc1d6.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fc1dc.  v1:= temp;
  #L2fc1de.  v1:= v1 - v3 @kind int;
  #L2fc1e0.  call temp:= `set`(v0, v1, v2) @signature `Ljava/util/List;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fc1e6.  goto L2fc1fe;
  #L2fc1e8.  v0:= v10.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fc1ec.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L2fc1f2.  v0:= v10.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fc1f6.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fc1fc.  goto L2fc22e;
  #L2fc1fe.  v6:= v12;
  #L2fc200.  if v6 >= v13 then goto L2fc234;
  #L2fc204.  v12:= "/\\" @kind object;
  #L2fc208.  call temp:= `delimiterOffset`(v11, v6, v13, v12) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L2fc20e.  v12:= temp;
  #L2fc210.  if v12 >= v13 then goto L2fc218;
  #L2fc214.  v0:= 1I;
  #L2fc216.  goto L2fc21a;
  #L2fc218.  v0:= 0I;
  #L2fc21a.  v9:= 1I;
  #L2fc21c.  v4:= v10 @kind object;
  #L2fc21e.  v5:= v11 @kind object;
  #L2fc220.  v7:= v12;
  #L2fc222.  v8:= v0;
  #L2fc224.  call `push`(v4, v5, v6, v7, v8, v9) @signature `Lokhttp3/HttpUrl$Builder;.push:(Ljava/lang/String;IIZZ)V` @kind direct;
  #L2fc22a.  if v0 == 0 then goto L2fc1fe;
  #L2fc22e.  v12:= v12 + 1;
  #L2fc232.  goto L2fc1fe;
  #L2fc234.  return @kind void;
}
procedure `int` `schemeDelimiterOffset`(`java.lang.String` v7 @kind object, `int` v8 , `int` v9 ) @signature `Lokhttp3/HttpUrl$Builder;.schemeDelimiterOffset:(Ljava/lang/String;II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2fb088.  v0:= v9 - v8 @kind int;
  #L2fb08c.  v1:= -1I;
  #L2fb08e.  v2:= 2I;
  #L2fb090.  if v0 >= v2 then goto L2fb096;
  #L2fb094.  return v1;
  #L2fb096.  call temp:= `charAt`(v7, v8) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fb09c.  v0:= temp;
  #L2fb09e.  v2:= 90I;
  #L2fb0a2.  v3:= 122I;
  #L2fb0a6.  v4:= 65I;
  #L2fb0aa.  v5:= 97I;
  #L2fb0ae.  if v0 < v5 then goto L2fb0b6;
  #L2fb0b2.  if v0 <= v3 then goto L2fb0c0;
  #L2fb0b6.  if v0 < v4 then goto L2fb114;
  #L2fb0ba.  if v0 <= v2 then goto L2fb0c0;
  #L2fb0be.  goto L2fb114;
  #L2fb0c0.  v8:= v8 + 1;
  #L2fb0c4.  if v8 >= v9 then goto L2fb114;
  #L2fb0c8.  call temp:= `charAt`(v7, v8) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fb0ce.  v0:= temp;
  #L2fb0d0.  if v0 < v5 then goto L2fb0d8;
  #L2fb0d4.  if v0 <= v3 then goto L2fb0c0;
  #L2fb0d8.  if v0 < v4 then goto L2fb0e0;
  #L2fb0dc.  if v0 <= v2 then goto L2fb0c0;
  #L2fb0e0.  v6:= 48I;
  #L2fb0e4.  if v0 < v6 then goto L2fb0f0;
  #L2fb0e8.  v6:= 57I;
  #L2fb0ec.  if v0 <= v6 then goto L2fb0c0;
  #L2fb0f0.  v6:= 43I;
  #L2fb0f4.  if v0 == v6 then goto L2fb0c0;
  #L2fb0f8.  v6:= 45I;
  #L2fb0fc.  if v0 == v6 then goto L2fb0c0;
  #L2fb100.  v6:= 46I;
  #L2fb104.  if v0 != v6 then goto L2fb10a;
  #L2fb108.  goto L2fb0c0;
  #L2fb10a.  v7:= 58I;
  #L2fb10e.  if v0 != v7 then goto L2fb114;
  #L2fb112.  return v8;
  #L2fb114.  return v1;
}
procedure `int` `slashCount`(`java.lang.String` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lokhttp3/HttpUrl$Builder;.slashCount:(Ljava/lang/String;II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2fb128.  v0:= 0I;
  #L2fb12a.  if v4 >= v5 then goto L2fb150;
  #L2fb12e.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fb134.  v1:= temp;
  #L2fb136.  v2:= 92I;
  #L2fb13a.  if v1 == v2 then goto L2fb146;
  #L2fb13e.  v2:= 47I;
  #L2fb142.  if v1 != v2 then goto L2fb150;
  #L2fb146.  v0:= v0 + 1;
  #L2fb14a.  v4:= v4 + 1;
  #L2fb14e.  goto L2fb12a;
  #L2fb150.  return v0;
}
procedure `okhttp3.HttpUrl$Builder` `addEncodedPathSegment`(`okhttp3.HttpUrl$Builder` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.addEncodedPathSegment:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2fb330.  v0:= "encodedPathSegment == null" @kind object;
  #L2fb334.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fb33a.  v3:= 0I;
  #L2fb33c.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fb342.  v4:= temp;
  #L2fb344.  v5:= 0I;
  #L2fb346.  v6:= 1I;
  #L2fb348.  v1:= v7 @kind object;
  #L2fb34a.  v2:= v8 @kind object;
  #L2fb34c.  call `push`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/HttpUrl$Builder;.push:(Ljava/lang/String;IIZZ)V` @kind direct;
  #L2fb352.  return v7 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `addEncodedPathSegments`(`okhttp3.HttpUrl$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.addEncodedPathSegments:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fb364.  v0:= "encodedPathSegments == null" @kind object;
  #L2fb368.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fb36e.  v0:= 1I;
  #L2fb370.  call temp:= `addPathSegments`(v1, v2, v0) @signature `Lokhttp3/HttpUrl$Builder;.addPathSegments:(Ljava/lang/String;Z)Lokhttp3/HttpUrl$Builder;` @kind direct;
  #L2fb376.  v2:= temp @kind object;
  #L2fb378.  return v2 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `addEncodedQueryParameter`(`okhttp3.HttpUrl$Builder` v7 @kind this, `java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.addEncodedQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2fb38c.  v0:= "encodedName == null" @kind object;
  #L2fb390.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fb396.  v0:= v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fb39a.  if v0 != 0 then goto L2fb3ac;
  #L2fb39e.  v0:= new `java.util.ArrayList`;
  #L2fb3a2.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2fb3a8.  v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` := v0 @kind object;
  #L2fb3ac.  v0:= v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fb3b0.  v3:= 1I;
  #L2fb3b2.  v4:= 0I;
  #L2fb3b4.  v5:= 1I;
  #L2fb3b6.  v6:= 1I;
  #L2fb3b8.  v2:= " \"'<>#&=" @kind object;
  #L2fb3bc.  v1:= v8 @kind object;
  #L2fb3be.  call temp:= `canonicalize`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fb3c4.  v8:= temp @kind object;
  #L2fb3c6.  call temp:= `add`(v0, v8) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fb3cc.  v8:= v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fb3d0.  if v9 == 0 then goto L2fb3ec;
  #L2fb3d4.  v2:= 1I;
  #L2fb3d6.  v3:= 0I;
  #L2fb3d8.  v4:= 1I;
  #L2fb3da.  v5:= 1I;
  #L2fb3dc.  v1:= " \"'<>#&=" @kind object;
  #L2fb3e0.  v0:= v9 @kind object;
  #L2fb3e2.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fb3e8.  v9:= temp @kind object;
  #L2fb3ea.  goto L2fb3ee;
  #L2fb3ec.  v9:= 0I;
  #L2fb3ee.  call temp:= `add`(v8, v9) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fb3f4.  return v7 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `addPathSegment`(`okhttp3.HttpUrl$Builder` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.addPathSegment:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2fb408.  v0:= "pathSegment == null" @kind object;
  #L2fb40c.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fb412.  v3:= 0I;
  #L2fb414.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fb41a.  v4:= temp;
  #L2fb41c.  v5:= 0I;
  #L2fb41e.  v6:= 0I;
  #L2fb420.  v1:= v7 @kind object;
  #L2fb422.  v2:= v8 @kind object;
  #L2fb424.  call `push`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/HttpUrl$Builder;.push:(Ljava/lang/String;IIZZ)V` @kind direct;
  #L2fb42a.  return v7 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `addPathSegments`(`okhttp3.HttpUrl$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.addPathSegments:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fb43c.  v0:= "pathSegments == null" @kind object;
  #L2fb440.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fb446.  v0:= 0I;
  #L2fb448.  call temp:= `addPathSegments`(v1, v2, v0) @signature `Lokhttp3/HttpUrl$Builder;.addPathSegments:(Ljava/lang/String;Z)Lokhttp3/HttpUrl$Builder;` @kind direct;
  #L2fb44e.  v2:= temp @kind object;
  #L2fb450.  return v2 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `addQueryParameter`(`okhttp3.HttpUrl$Builder` v7 @kind this, `java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.addQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2fb4c0.  v0:= "name == null" @kind object;
  #L2fb4c4.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fb4ca.  v0:= v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fb4ce.  if v0 != 0 then goto L2fb4e0;
  #L2fb4d2.  v0:= new `java.util.ArrayList`;
  #L2fb4d6.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2fb4dc.  v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` := v0 @kind object;
  #L2fb4e0.  v0:= v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fb4e4.  v3:= 0I;
  #L2fb4e6.  v4:= 0I;
  #L2fb4e8.  v5:= 1I;
  #L2fb4ea.  v6:= 1I;
  #L2fb4ec.  v2:= " !\"#$&'(),/:;<=>?@[]\\^`{|}~" @kind object;
  #L2fb4f0.  v1:= v8 @kind object;
  #L2fb4f2.  call temp:= `canonicalize`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fb4f8.  v8:= temp @kind object;
  #L2fb4fa.  call temp:= `add`(v0, v8) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fb500.  v8:= v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fb504.  if v9 == 0 then goto L2fb520;
  #L2fb508.  v2:= 0I;
  #L2fb50a.  v3:= 0I;
  #L2fb50c.  v4:= 1I;
  #L2fb50e.  v5:= 1I;
  #L2fb510.  v1:= " !\"#$&'(),/:;<=>?@[]\\^`{|}~" @kind object;
  #L2fb514.  v0:= v9 @kind object;
  #L2fb516.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fb51c.  v9:= temp @kind object;
  #L2fb51e.  goto L2fb522;
  #L2fb520.  v9:= 0I;
  #L2fb522.  call temp:= `add`(v8, v9) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fb528.  return v7 @kind object;
}
procedure `okhttp3.HttpUrl` `build`(`okhttp3.HttpUrl$Builder` v2 @kind this) @signature `Lokhttp3/HttpUrl$Builder;.build:()Lokhttp3/HttpUrl;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fb2e4.  v0:= v2.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` @kind object;
  #L2fb2e8.  if v0 == 0 then goto L2fb310;
  #L2fb2ec.  v0:= v2.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` @kind object;
  #L2fb2f0.  if v0 == 0 then goto L2fb300;
  #L2fb2f4.  v0:= new `okhttp3.HttpUrl`;
  #L2fb2f8.  call `<init>`(v0, v2) @signature `Lokhttp3/HttpUrl;.<init>:(Lokhttp3/HttpUrl$Builder;)V` @kind direct;
  #L2fb2fe.  return v0 @kind object;
  #L2fb300.  v0:= new `java.lang.IllegalStateException`;
  #L2fb304.  v1:= "host == null" @kind object;
  #L2fb308.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fb30e.  throw v0;
  #L2fb310.  v0:= new `java.lang.IllegalStateException`;
  #L2fb314.  v1:= "scheme == null" @kind object;
  #L2fb318.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fb31e.  throw v0;
}
procedure `int` `effectivePort`(`okhttp3.HttpUrl$Builder` v2 @kind this) @signature `Lokhttp3/HttpUrl$Builder;.effectivePort:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2fafb4.  v0:= v2.`okhttp3.HttpUrl$Builder.port` @type ^`int`;
  #L2fafb8.  v1:= -1I;
  #L2fafba.  if v0 == v1 then goto L2fafc0;
  #L2fafbe.  goto L2fafcc;
  #L2fafc0.  v0:= v2.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` @kind object;
  #L2fafc4.  call temp:= `defaultPort`(v0) @signature `Lokhttp3/HttpUrl;.defaultPort:(Ljava/lang/String;)I` @kind static;
  #L2fafca.  v0:= temp;
  #L2fafcc.  return v0;
}
procedure `okhttp3.HttpUrl$Builder` `encodedFragment`(`okhttp3.HttpUrl$Builder` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.encodedFragment:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2fb53c.  if v7 == 0 then goto L2fb558;
  #L2fb540.  v2:= 1I;
  #L2fb542.  v3:= 0I;
  #L2fb544.  v4:= 0I;
  #L2fb546.  v5:= 0I;
  #L2fb548.  v1:= "" @kind object;
  #L2fb54c.  v0:= v7 @kind object;
  #L2fb54e.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fb554.  v7:= temp @kind object;
  #L2fb556.  goto L2fb55a;
  #L2fb558.  v7:= 0I;
  #L2fb55a.  v6.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` := v7 @kind object;
  #L2fb55e.  return v6 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `encodedPassword`(`okhttp3.HttpUrl$Builder` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.encodedPassword:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2fb570.  v0:= "encodedPassword == null" @kind object;
  #L2fb574.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fb57a.  v3:= 1I;
  #L2fb57c.  v4:= 0I;
  #L2fb57e.  v5:= 0I;
  #L2fb580.  v6:= 1I;
  #L2fb582.  v2:= " \"':;<=>@[]^`{}|/\\?#" @kind object;
  #L2fb586.  v1:= v8 @kind object;
  #L2fb588.  call temp:= `canonicalize`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fb58e.  v8:= temp @kind object;
  #L2fb590.  v7.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` := v8 @kind object;
  #L2fb594.  return v7 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `encodedPath`(`okhttp3.HttpUrl$Builder` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.encodedPath:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2fb5a8.  v0:= "encodedPath == null" @kind object;
  #L2fb5ac.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fb5b2.  v0:= "/" @kind object;
  #L2fb5b6.  call temp:= `startsWith`(v4, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2fb5bc.  v0:= temp;
  #L2fb5be.  if v0 == 0 then goto L2fb5d4;
  #L2fb5c2.  v0:= 0I;
  #L2fb5c4.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fb5ca.  v1:= temp;
  #L2fb5cc.  call `resolvePath`(v3, v4, v0, v1) @signature `Lokhttp3/HttpUrl$Builder;.resolvePath:(Ljava/lang/String;II)V` @kind direct;
  #L2fb5d2.  return v3 @kind object;
  #L2fb5d4.  v0:= new `java.lang.IllegalArgumentException`;
  #L2fb5d8.  v1:= new `java.lang.StringBuilder`;
  #L2fb5dc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fb5e2.  v2:= "unexpected encodedPath: " @kind object;
  #L2fb5e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb5ec.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb5f2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fb5f8.  v4:= temp @kind object;
  #L2fb5fa.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fb600.  throw v0;
}
procedure `okhttp3.HttpUrl$Builder` `encodedQuery`(`okhttp3.HttpUrl$Builder` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.encodedQuery:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2fb614.  if v7 == 0 then goto L2fb638;
  #L2fb618.  v2:= 1I;
  #L2fb61a.  v3:= 0I;
  #L2fb61c.  v4:= 1I;
  #L2fb61e.  v5:= 1I;
  #L2fb620.  v1:= " \"'<>#" @kind object;
  #L2fb624.  v0:= v7 @kind object;
  #L2fb626.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fb62c.  v7:= temp @kind object;
  #L2fb62e.  call temp:= `queryStringToNamesAndValues`(v7) @signature `Lokhttp3/HttpUrl;.queryStringToNamesAndValues:(Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L2fb634.  v7:= temp @kind object;
  #L2fb636.  goto L2fb63a;
  #L2fb638.  v7:= 0I;
  #L2fb63a.  v6.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` := v7 @kind object;
  #L2fb63e.  return v6 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `encodedUsername`(`okhttp3.HttpUrl$Builder` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.encodedUsername:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2fb650.  v0:= "encodedUsername == null" @kind object;
  #L2fb654.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fb65a.  v3:= 1I;
  #L2fb65c.  v4:= 0I;
  #L2fb65e.  v5:= 0I;
  #L2fb660.  v6:= 1I;
  #L2fb662.  v2:= " \"':;<=>@[]^`{}|/\\?#" @kind object;
  #L2fb666.  v1:= v8 @kind object;
  #L2fb668.  call temp:= `canonicalize`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fb66e.  v8:= temp @kind object;
  #L2fb670.  v7.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` := v8 @kind object;
  #L2fb674.  return v7 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `fragment`(`okhttp3.HttpUrl$Builder` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.fragment:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2fb688.  if v7 == 0 then goto L2fb6a4;
  #L2fb68c.  v2:= 0I;
  #L2fb68e.  v3:= 0I;
  #L2fb690.  v4:= 0I;
  #L2fb692.  v5:= 0I;
  #L2fb694.  v1:= "" @kind object;
  #L2fb698.  v0:= v7 @kind object;
  #L2fb69a.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fb6a0.  v7:= temp @kind object;
  #L2fb6a2.  goto L2fb6a6;
  #L2fb6a4.  v7:= 0I;
  #L2fb6a6.  v6.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` := v7 @kind object;
  #L2fb6aa.  return v6 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `host`(`okhttp3.HttpUrl$Builder` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.host:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2fb6bc.  v0:= "host == null" @kind object;
  #L2fb6c0.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fb6c6.  v0:= 0I;
  #L2fb6c8.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fb6ce.  v1:= temp;
  #L2fb6d0.  call temp:= `canonicalizeHost`(v4, v0, v1) @signature `Lokhttp3/HttpUrl$Builder;.canonicalizeHost:(Ljava/lang/String;II)Ljava/lang/String;` @kind static;
  #L2fb6d6.  v0:= temp @kind object;
  #L2fb6d8.  if v0 == 0 then goto L2fb6e2;
  #L2fb6dc.  v3.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` := v0 @kind object;
  #L2fb6e0.  return v3 @kind object;
  #L2fb6e2.  v0:= new `java.lang.IllegalArgumentException`;
  #L2fb6e6.  v1:= new `java.lang.StringBuilder`;
  #L2fb6ea.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fb6f0.  v2:= "unexpected host: " @kind object;
  #L2fb6f4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb6fa.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb700.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fb706.  v4:= temp @kind object;
  #L2fb708.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fb70e.  throw v0;
}
procedure `okhttp3.HttpUrl$Builder` `parse`(`okhttp3.HttpUrl$Builder` v21 @kind this, `okhttp3.HttpUrl` v22 @kind object, `java.lang.String` v23 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.parse:(Lokhttp3/HttpUrl;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;

  #L2fb720.  v0:= v21 @kind object;
  #L2fb724.  v1:= v22 @kind object;
  #L2fb728.  v10:= v23 @kind object;
  #L2fb72c.  call temp:= `length`(v23) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fb732.  v2:= temp;
  #L2fb734.  v8:= 0I;
  #L2fb736.  call temp:= `skipLeadingAsciiWhitespace`(v10, v8, v2) @signature `Lokhttp3/internal/Util;.skipLeadingAsciiWhitespace:(Ljava/lang/String;II)I` @kind static;
  #L2fb73c.  v9:= temp;
  #L2fb73e.  call temp:= `length`(v23) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fb744.  v2:= temp;
  #L2fb746.  call temp:= `skipTrailingAsciiWhitespace`(v10, v9, v2) @signature `Lokhttp3/internal/Util;.skipTrailingAsciiWhitespace:(Ljava/lang/String;II)I` @kind static;
  #L2fb74c.  v11:= temp;
  #L2fb74e.  call temp:= `schemeDelimiterOffset`(v10, v9, v11) @signature `Lokhttp3/HttpUrl$Builder;.schemeDelimiterOffset:(Ljava/lang/String;II)I` @kind static;
  #L2fb754.  v12:= temp;
  #L2fb756.  v13:= -1I;
  #L2fb758.  if v12 == v13 then goto L2fb7f0;
  #L2fb75c.  v3:= 1I;
  #L2fb75e.  v6:= 0I;
  #L2fb760.  v7:= 6I;
  #L2fb762.  v5:= "https:" @kind object;
  #L2fb766.  v2:= v23 @kind object;
  #L2fb76a.  v4:= v9;
  #L2fb76c.  call temp:= `regionMatches`(v2, v3, v4, v5, v6, v7) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L2fb772.  v2:= temp;
  #L2fb774.  if v2 == 0 then goto L2fb786;
  #L2fb778.  v2:= "https" @kind object;
  #L2fb77c.  v0.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` := v2 @kind object;
  #L2fb780.  v9:= v9 + 6;
  #L2fb784.  goto L2fb7fc;
  #L2fb786.  v3:= 1I;
  #L2fb788.  v6:= 0I;
  #L2fb78a.  v7:= 5I;
  #L2fb78c.  v5:= "http:" @kind object;
  #L2fb790.  v2:= v23 @kind object;
  #L2fb794.  v4:= v9;
  #L2fb796.  call temp:= `regionMatches`(v2, v3, v4, v5, v6, v7) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L2fb79c.  v2:= temp;
  #L2fb79e.  if v2 == 0 then goto L2fb7b0;
  #L2fb7a2.  v2:= "http" @kind object;
  #L2fb7a6.  v0.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` := v2 @kind object;
  #L2fb7aa.  v9:= v9 + 5;
  #L2fb7ae.  goto L2fb7fc;
  #L2fb7b0.  v1:= new `java.lang.IllegalArgumentException`;
  #L2fb7b4.  v2:= new `java.lang.StringBuilder`;
  #L2fb7b8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fb7be.  v3:= "Expected URL scheme 'http' or 'https' but was '" @kind object;
  #L2fb7c2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb7c8.  call temp:= `substring`(v10, v8, v12) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2fb7ce.  v3:= temp @kind object;
  #L2fb7d0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb7d6.  v3:= "'" @kind object;
  #L2fb7da.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb7e0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fb7e6.  v2:= temp @kind object;
  #L2fb7e8.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fb7ee.  throw v1;
  #L2fb7f0.  if v1 == 0 then goto L2fbb54;
  #L2fb7f4.  v2:= v1.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L2fb7f8.  v0.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` := v2 @kind object;
  #L2fb7fc.  call temp:= `slashCount`(v10, v9, v11) @signature `Lokhttp3/HttpUrl$Builder;.slashCount:(Ljava/lang/String;II)I` @kind static;
  #L2fb802.  v2:= temp;
  #L2fb804.  v3:= 2I;
  #L2fb806.  v12:= 63I;
  #L2fb80a.  v14:= 35I;
  #L2fb80e.  if v2 >= v3 then goto L2fb892;
  #L2fb812.  if v1 == 0 then goto L2fb892;
  #L2fb816.  v3:= v1.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L2fb81a.  v4:= v0.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` @kind object;
  #L2fb81e.  call temp:= `equals`(v3, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fb824.  v3:= temp;
  #L2fb826.  if v3 != 0 then goto L2fb82c;
  #L2fb82a.  goto L2fb892;
  #L2fb82c.  call temp:= `encodedUsername`(v22) @signature `Lokhttp3/HttpUrl;.encodedUsername:()Ljava/lang/String;` @kind virtual;
  #L2fb832.  v2:= temp @kind object;
  #L2fb834.  v0.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` := v2 @kind object;
  #L2fb838.  call temp:= `encodedPassword`(v22) @signature `Lokhttp3/HttpUrl;.encodedPassword:()Ljava/lang/String;` @kind virtual;
  #L2fb83e.  v2:= temp @kind object;
  #L2fb840.  v0.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` := v2 @kind object;
  #L2fb844.  v2:= v1.`okhttp3.HttpUrl.host` @type ^`java.lang.String` @kind object;
  #L2fb848.  v0.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` := v2 @kind object;
  #L2fb84c.  v2:= v1.`okhttp3.HttpUrl.port` @type ^`int`;
  #L2fb850.  v0.`okhttp3.HttpUrl$Builder.port` @type ^`int` := v2;
  #L2fb854.  v2:= v0.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fb858.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L2fb85e.  v2:= v0.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fb862.  call temp:= `encodedPathSegments`(v22) @signature `Lokhttp3/HttpUrl;.encodedPathSegments:()Ljava/util/List;` @kind virtual;
  #L2fb868.  v3:= temp @kind object;
  #L2fb86a.  call temp:= `addAll`(v2, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2fb870.  if v9 == v11 then goto L2fb880;
  #L2fb874.  call temp:= `charAt`(v10, v9) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fb87a.  v2:= temp;
  #L2fb87c.  if v2 != v14 then goto L2fba7e;
  #L2fb880.  call temp:= `encodedQuery`(v22) @signature `Lokhttp3/HttpUrl;.encodedQuery:()Ljava/lang/String;` @kind virtual;
  #L2fb886.  v1:= temp @kind object;
  #L2fb888.  call temp:= `encodedQuery`(v0, v1) @signature `Lokhttp3/HttpUrl$Builder;.encodedQuery:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2fb88e.  goto L2fba7e;
  #L2fb892.  v9:= v9 + v2 @kind int;
  #L2fb894.  v2:= v9;
  #L2fb896.  v16:= 0I;
  #L2fb89a.  v17:= 0I;
  #L2fb89e.  v1:= "@/\\?#" @kind object;
  #L2fb8a2.  call temp:= `delimiterOffset`(v10, v2, v11, v1) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L2fb8a8.  v9:= temp;
  #L2fb8aa.  if v9 == v11 then goto L2fb8b8;
  #L2fb8ae.  call temp:= `charAt`(v10, v9) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fb8b4.  v1:= temp;
  #L2fb8b6.  goto L2fb8ba;
  #L2fb8b8.  v1:= -1I;
  #L2fb8ba.  if v1 == v13 then goto L2fb9e8;
  #L2fb8be.  if v1 == v14 then goto L2fb9e8;
  #L2fb8c2.  v3:= 47I;
  #L2fb8c6.  if v1 == v3 then goto L2fb9e8;
  #L2fb8ca.  v3:= 92I;
  #L2fb8ce.  if v1 == v3 then goto L2fb9e8;
  #L2fb8d2.  if v1 == v12 then goto L2fb9e8;
  #L2fb8d6.  v3:= 64I;
  #L2fb8da.  if v1 == v3 then goto L2fb8e2;
  #L2fb8de.  goto L2fb9dc;
  #L2fb8e2.  v8:= "%40" @kind object;
  #L2fb8e6.  if v16 != 0 then goto L2fb98c;
  #L2fb8ea.  v1:= 58I;
  #L2fb8ee.  call temp:= `delimiterOffset`(v10, v2, v9, v1) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IIC)I` @kind static;
  #L2fb8f4.  v7:= temp;
  #L2fb8f6.  v5:= 1I;
  #L2fb8f8.  v6:= 0I;
  #L2fb8fa.  v18:= 0I;
  #L2fb8fe.  v19:= 1I;
  #L2fb902.  v20:= 0I;
  #L2fb906.  v4:= " \"':;<=>@[]^`{}|/\\?#" @kind object;
  #L2fb90a.  v1:= v23 @kind object;
  #L2fb90e.  v3:= v7;
  #L2fb910.  v15:= v7;
  #L2fb912.  v7:= v18;
  #L2fb916.  v14:= v8 @kind object;
  #L2fb918.  v8:= v19;
  #L2fb91c.  v12:= v9;
  #L2fb91e.  v9:= v20 @kind object;
  #L2fb922.  call temp:= `canonicalize`(v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @kind static;
  #L2fb928.  v1:= temp @kind object;
  #L2fb92a.  if v17 == 0 then goto L2fb956;
  #L2fb92e.  v2:= new `java.lang.StringBuilder`;
  #L2fb932.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fb938.  v3:= v0.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` @kind object;
  #L2fb93c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb942.  call temp:= `append`(v2, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb948.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb94e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fb954.  v1:= temp @kind object;
  #L2fb956.  v0.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` := v1 @kind object;
  #L2fb95a.  if v15 == v12 then goto L2fb986;
  #L2fb95e.  v2:= v15 + 1;
  #L2fb962.  v5:= 1I;
  #L2fb964.  v6:= 0I;
  #L2fb966.  v7:= 0I;
  #L2fb968.  v8:= 1I;
  #L2fb96a.  v9:= 0I;
  #L2fb96c.  v4:= " \"':;<=>@[]^`{}|/\\?#" @kind object;
  #L2fb970.  v1:= v23 @kind object;
  #L2fb974.  v3:= v12;
  #L2fb976.  call temp:= `canonicalize`(v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @kind static;
  #L2fb97c.  v1:= temp @kind object;
  #L2fb97e.  v0.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` := v1 @kind object;
  #L2fb982.  v16:= 1I;
  #L2fb986.  v17:= 1I;
  #L2fb98a.  goto L2fb9d8;
  #L2fb98c.  v14:= v8 @kind object;
  #L2fb98e.  v12:= v9;
  #L2fb990.  v15:= new `java.lang.StringBuilder`;
  #L2fb994.  call `<init>`(v15) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fb99a.  v1:= v0.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` @kind object;
  #L2fb99e.  call temp:= `append`(v15, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb9a4.  call temp:= `append`(v15, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb9aa.  v5:= 1I;
  #L2fb9ac.  v6:= 0I;
  #L2fb9ae.  v7:= 0I;
  #L2fb9b0.  v8:= 1I;
  #L2fb9b2.  v9:= 0I;
  #L2fb9b4.  v4:= " \"':;<=>@[]^`{}|/\\?#" @kind object;
  #L2fb9b8.  v1:= v23 @kind object;
  #L2fb9bc.  v3:= v12;
  #L2fb9be.  call temp:= `canonicalize`(v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @kind static;
  #L2fb9c4.  v1:= temp @kind object;
  #L2fb9c6.  call temp:= `append`(v15, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb9cc.  call temp:= `toString`(v15) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fb9d2.  v1:= temp @kind object;
  #L2fb9d4.  v0.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` := v1 @kind object;
  #L2fb9d8.  v2:= v12 + 1;
  #L2fb9dc.  v12:= 63I;
  #L2fb9e0.  v14:= 35I;
  #L2fb9e4.  goto L2fb89e;
  #L2fb9e8.  v12:= v9;
  #L2fb9ea.  call temp:= `portColonOffset`(v10, v2, v12) @signature `Lokhttp3/HttpUrl$Builder;.portColonOffset:(Ljava/lang/String;II)I` @kind static;
  #L2fb9f0.  v1:= temp;
  #L2fb9f2.  v3:= v1 + 1;
  #L2fb9f6.  v4:= 34I;
  #L2fb9fa.  if v3 >= v12 then goto L2fba58;
  #L2fb9fe.  call temp:= `canonicalizeHost`(v10, v2, v1) @signature `Lokhttp3/HttpUrl$Builder;.canonicalizeHost:(Ljava/lang/String;II)Ljava/lang/String;` @kind static;
  #L2fba04.  v5:= temp @kind object;
  #L2fba06.  v0.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` := v5 @kind object;
  #L2fba0a.  call temp:= `parsePort`(v10, v3, v12) @signature `Lokhttp3/HttpUrl$Builder;.parsePort:(Ljava/lang/String;II)I` @kind static;
  #L2fba10.  v5:= temp;
  #L2fba12.  v0.`okhttp3.HttpUrl$Builder.port` @type ^`int` := v5;
  #L2fba16.  if v5 == v13 then goto L2fba1c;
  #L2fba1a.  goto L2fba74;
  #L2fba1c.  v1:= new `java.lang.IllegalArgumentException`;
  #L2fba20.  v2:= new `java.lang.StringBuilder`;
  #L2fba24.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fba2a.  v5:= "Invalid URL port: \"" @kind object;
  #L2fba2e.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fba34.  call temp:= `substring`(v10, v3, v12) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2fba3a.  v3:= temp @kind object;
  #L2fba3c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fba42.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fba48.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fba4e.  v2:= temp @kind object;
  #L2fba50.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fba56.  throw v1;
  #L2fba58.  call temp:= `canonicalizeHost`(v10, v2, v1) @signature `Lokhttp3/HttpUrl$Builder;.canonicalizeHost:(Ljava/lang/String;II)Ljava/lang/String;` @kind static;
  #L2fba5e.  v3:= temp @kind object;
  #L2fba60.  v0.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` := v3 @kind object;
  #L2fba64.  v3:= v0.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` @kind object;
  #L2fba68.  call temp:= `defaultPort`(v3) @signature `Lokhttp3/HttpUrl;.defaultPort:(Ljava/lang/String;)I` @kind static;
  #L2fba6e.  v3:= temp;
  #L2fba70.  v0.`okhttp3.HttpUrl$Builder.port` @type ^`int` := v3;
  #L2fba74.  v3:= v0.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` @kind object;
  #L2fba78.  if v3 == 0 then goto L2fbb18;
  #L2fba7c.  v9:= v12;
  #L2fba7e.  v1:= "?#" @kind object;
  #L2fba82.  call temp:= `delimiterOffset`(v10, v9, v11, v1) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L2fba88.  v1:= temp;
  #L2fba8a.  call `resolvePath`(v0, v10, v9, v1) @signature `Lokhttp3/HttpUrl$Builder;.resolvePath:(Ljava/lang/String;II)V` @kind direct;
  #L2fba90.  if v1 >= v11 then goto L2fbade;
  #L2fba94.  call temp:= `charAt`(v10, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fba9a.  v2:= temp;
  #L2fba9c.  v3:= 63I;
  #L2fbaa0.  if v2 != v3 then goto L2fbade;
  #L2fbaa4.  v2:= 35I;
  #L2fbaa8.  call temp:= `delimiterOffset`(v10, v1, v11, v2) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IIC)I` @kind static;
  #L2fbaae.  v12:= temp;
  #L2fbab0.  v2:= v1 + 1;
  #L2fbab4.  v5:= 1I;
  #L2fbab6.  v6:= 0I;
  #L2fbab8.  v7:= 1I;
  #L2fbaba.  v8:= 1I;
  #L2fbabc.  v9:= 0I;
  #L2fbabe.  v4:= " \"'<>#" @kind object;
  #L2fbac2.  v1:= v23 @kind object;
  #L2fbac6.  v3:= v12;
  #L2fbac8.  call temp:= `canonicalize`(v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @kind static;
  #L2fbace.  v1:= temp @kind object;
  #L2fbad0.  call temp:= `queryStringToNamesAndValues`(v1) @signature `Lokhttp3/HttpUrl;.queryStringToNamesAndValues:(Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L2fbad6.  v1:= temp @kind object;
  #L2fbad8.  v0.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` := v1 @kind object;
  #L2fbadc.  v1:= v12;
  #L2fbade.  if v1 >= v11 then goto L2fbb16;
  #L2fbae2.  call temp:= `charAt`(v10, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fbae8.  v2:= temp;
  #L2fbaea.  v3:= 35I;
  #L2fbaee.  if v2 != v3 then goto L2fbb16;
  #L2fbaf2.  v2:= 1I;
  #L2fbaf4.  v2:= v2 + v1 @kind int;
  #L2fbaf6.  v5:= 1I;
  #L2fbaf8.  v6:= 0I;
  #L2fbafa.  v7:= 0I;
  #L2fbafc.  v8:= 0I;
  #L2fbafe.  v9:= 0I;
  #L2fbb00.  v4:= "" @kind object;
  #L2fbb04.  v1:= v23 @kind object;
  #L2fbb08.  v3:= v11;
  #L2fbb0a.  call temp:= `canonicalize`(v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @kind static;
  #L2fbb10.  v1:= temp @kind object;
  #L2fbb12.  v0.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` := v1 @kind object;
  #L2fbb16.  return v0 @kind object;
  #L2fbb18.  v3:= new `java.lang.IllegalArgumentException`;
  #L2fbb1c.  v5:= new `java.lang.StringBuilder`;
  #L2fbb20.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fbb26.  v6:= "Invalid URL host: \"" @kind object;
  #L2fbb2a.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fbb30.  call temp:= `substring`(v10, v2, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2fbb36.  v1:= temp @kind object;
  #L2fbb38.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fbb3e.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fbb44.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fbb4a.  v1:= temp @kind object;
  #L2fbb4c.  call `<init>`(v3, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fbb52.  throw v3;
  #L2fbb54.  v1:= new `java.lang.IllegalArgumentException`;
  #L2fbb58.  v2:= "Expected URL scheme 'http' or 'https' but no colon was found" @kind object;
  #L2fbb5c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fbb62.  goto L2fbb66;
  #L2fbb64.  throw v1;
  #L2fbb66.  goto L2fbb64;
}
procedure `okhttp3.HttpUrl$Builder` `password`(`okhttp3.HttpUrl$Builder` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.password:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2fbb78.  v0:= "password == null" @kind object;
  #L2fbb7c.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fbb82.  v3:= 0I;
  #L2fbb84.  v4:= 0I;
  #L2fbb86.  v5:= 0I;
  #L2fbb88.  v6:= 1I;
  #L2fbb8a.  v2:= " \"':;<=>@[]^`{}|/\\?#" @kind object;
  #L2fbb8e.  v1:= v8 @kind object;
  #L2fbb90.  call temp:= `canonicalize`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fbb96.  v8:= temp @kind object;
  #L2fbb98.  v7.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` := v8 @kind object;
  #L2fbb9c.  return v7 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `port`(`okhttp3.HttpUrl$Builder` v3 @kind this, `int` v4 ) @signature `Lokhttp3/HttpUrl$Builder;.port:(I)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2fbbb0.  if v4 <= 0 then goto L2fbbc4;
  #L2fbbb4.  v0:= 65535I;
  #L2fbbba.  if v4 > v0 then goto L2fbbc4;
  #L2fbbbe.  v3.`okhttp3.HttpUrl$Builder.port` @type ^`int` := v4;
  #L2fbbc2.  return v3 @kind object;
  #L2fbbc4.  v0:= new `java.lang.IllegalArgumentException`;
  #L2fbbc8.  v1:= new `java.lang.StringBuilder`;
  #L2fbbcc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fbbd2.  v2:= "unexpected port: " @kind object;
  #L2fbbd6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fbbdc.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fbbe2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fbbe8.  v4:= temp @kind object;
  #L2fbbea.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fbbf0.  throw v0;
}
procedure `okhttp3.HttpUrl$Builder` `query`(`okhttp3.HttpUrl$Builder` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.query:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2fbc04.  if v7 == 0 then goto L2fbc28;
  #L2fbc08.  v2:= 0I;
  #L2fbc0a.  v3:= 0I;
  #L2fbc0c.  v4:= 1I;
  #L2fbc0e.  v5:= 1I;
  #L2fbc10.  v1:= " \"'<>#" @kind object;
  #L2fbc14.  v0:= v7 @kind object;
  #L2fbc16.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fbc1c.  v7:= temp @kind object;
  #L2fbc1e.  call temp:= `queryStringToNamesAndValues`(v7) @signature `Lokhttp3/HttpUrl;.queryStringToNamesAndValues:(Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L2fbc24.  v7:= temp @kind object;
  #L2fbc26.  goto L2fbc2a;
  #L2fbc28.  v7:= 0I;
  #L2fbc2a.  v6.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` := v7 @kind object;
  #L2fbc2e.  return v6 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `reencodeForUri`(`okhttp3.HttpUrl$Builder` v10 @kind this) @signature `Lokhttp3/HttpUrl$Builder;.reencodeForUri:()Lokhttp3/HttpUrl$Builder;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2fbc40.  v0:= v10.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fbc44.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fbc4a.  v0:= temp;
  #L2fbc4c.  v1:= 0I;
  #L2fbc4e.  v2:= 0I;
  #L2fbc50.  if v2 >= v0 then goto L2fbc8a;
  #L2fbc54.  v3:= v10.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fbc58.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fbc5e.  v3:= temp @kind object;
  #L2fbc60.  v4:= v3 @kind object;
  #L2fbc62.  v4:= (`java.lang.String`) v4 @kind object;
  #L2fbc66.  v3:= v10.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fbc6a.  v6:= 1I;
  #L2fbc6c.  v7:= 1I;
  #L2fbc6e.  v8:= 0I;
  #L2fbc70.  v9:= 1I;
  #L2fbc72.  v5:= "[]" @kind object;
  #L2fbc76.  call temp:= `canonicalize`(v4, v5, v6, v7, v8, v9) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fbc7c.  v4:= temp @kind object;
  #L2fbc7e.  call temp:= `set`(v3, v2, v4) @signature `Ljava/util/List;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fbc84.  v2:= v2 + 1;
  #L2fbc88.  goto L2fbc50;
  #L2fbc8a.  v0:= v10.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fbc8e.  if v0 == 0 then goto L2fbcd8;
  #L2fbc92.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fbc98.  v0:= temp;
  #L2fbc9a.  if v1 >= v0 then goto L2fbcd8;
  #L2fbc9e.  v2:= v10.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fbca2.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fbca8.  v2:= temp @kind object;
  #L2fbcaa.  v3:= v2 @kind object;
  #L2fbcac.  v3:= (`java.lang.String`) v3 @kind object;
  #L2fbcb0.  if v3 == 0 then goto L2fbcd2;
  #L2fbcb4.  v2:= v10.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fbcb8.  v5:= 1I;
  #L2fbcba.  v6:= 1I;
  #L2fbcbc.  v7:= 1I;
  #L2fbcbe.  v8:= 1I;
  #L2fbcc0.  v4:= "\\^`{|}" @kind object;
  #L2fbcc4.  call temp:= `canonicalize`(v3, v4, v5, v6, v7, v8) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fbcca.  v3:= temp @kind object;
  #L2fbccc.  call temp:= `set`(v2, v1, v3) @signature `Ljava/util/List;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fbcd2.  v1:= v1 + 1;
  #L2fbcd6.  goto L2fbc9a;
  #L2fbcd8.  v2:= v10.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` @kind object;
  #L2fbcdc.  if v2 == 0 then goto L2fbcf8;
  #L2fbce0.  v4:= 1I;
  #L2fbce2.  v5:= 1I;
  #L2fbce4.  v6:= 0I;
  #L2fbce6.  v7:= 0I;
  #L2fbce8.  v3:= " \"#<>\\^`{|}" @kind object;
  #L2fbcec.  call temp:= `canonicalize`(v2, v3, v4, v5, v6, v7) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fbcf2.  v0:= temp @kind object;
  #L2fbcf4.  v10.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` := v0 @kind object;
  #L2fbcf8.  return v10 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `removeAllEncodedQueryParameters`(`okhttp3.HttpUrl$Builder` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.removeAllEncodedQueryParameters:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2fbd0c.  v0:= "encodedName == null" @kind object;
  #L2fbd10.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fbd16.  v0:= v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fbd1a.  if v0 != 0 then goto L2fbd20;
  #L2fbd1e.  return v7 @kind object;
  #L2fbd20.  v3:= 1I;
  #L2fbd22.  v4:= 0I;
  #L2fbd24.  v5:= 1I;
  #L2fbd26.  v6:= 1I;
  #L2fbd28.  v2:= " \"'<>#&=" @kind object;
  #L2fbd2c.  v1:= v8 @kind object;
  #L2fbd2e.  call temp:= `canonicalize`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fbd34.  v8:= temp @kind object;
  #L2fbd36.  call `removeAllCanonicalQueryParameters`(v7, v8) @signature `Lokhttp3/HttpUrl$Builder;.removeAllCanonicalQueryParameters:(Ljava/lang/String;)V` @kind direct;
  #L2fbd3c.  return v7 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `removeAllQueryParameters`(`okhttp3.HttpUrl$Builder` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.removeAllQueryParameters:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2fbd50.  v0:= "name == null" @kind object;
  #L2fbd54.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fbd5a.  v0:= v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fbd5e.  if v0 != 0 then goto L2fbd64;
  #L2fbd62.  return v7 @kind object;
  #L2fbd64.  v3:= 0I;
  #L2fbd66.  v4:= 0I;
  #L2fbd68.  v5:= 1I;
  #L2fbd6a.  v6:= 1I;
  #L2fbd6c.  v2:= " !\"#$&'(),/:;<=>?@[]\\^`{|}~" @kind object;
  #L2fbd70.  v1:= v8 @kind object;
  #L2fbd72.  call temp:= `canonicalize`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fbd78.  v8:= temp @kind object;
  #L2fbd7a.  call `removeAllCanonicalQueryParameters`(v7, v8) @signature `Lokhttp3/HttpUrl$Builder;.removeAllCanonicalQueryParameters:(Ljava/lang/String;)V` @kind direct;
  #L2fbd80.  return v7 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `removePathSegment`(`okhttp3.HttpUrl$Builder` v1 @kind this, `int` v2 ) @signature `Lokhttp3/HttpUrl$Builder;.removePathSegment:(I)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fbd94.  v0:= v1.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fbd98.  call temp:= `remove`(v0, v2) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L2fbd9e.  v2:= v1.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fbda2.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2fbda8.  v2:= temp;
  #L2fbdaa.  if v2 == 0 then goto L2fbdbc;
  #L2fbdae.  v2:= v1.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fbdb2.  v0:= "" @kind object;
  #L2fbdb6.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fbdbc.  return v1 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `scheme`(`okhttp3.HttpUrl$Builder` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.scheme:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2fbdd0.  v0:= "scheme == null" @kind object;
  #L2fbdd4.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fbdda.  v0:= "http" @kind object;
  #L2fbdde.  call temp:= `equalsIgnoreCase`(v4, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2fbde4.  v1:= temp;
  #L2fbde6.  if v1 == 0 then goto L2fbdf0;
  #L2fbdea.  v3.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` := v0 @kind object;
  #L2fbdee.  goto L2fbe04;
  #L2fbdf0.  v0:= "https" @kind object;
  #L2fbdf4.  call temp:= `equalsIgnoreCase`(v4, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2fbdfa.  v1:= temp;
  #L2fbdfc.  if v1 == 0 then goto L2fbe06;
  #L2fbe00.  v3.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` := v0 @kind object;
  #L2fbe04.  return v3 @kind object;
  #L2fbe06.  v0:= new `java.lang.IllegalArgumentException`;
  #L2fbe0a.  v1:= new `java.lang.StringBuilder`;
  #L2fbe0e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fbe14.  v2:= "unexpected scheme: " @kind object;
  #L2fbe18.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fbe1e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fbe24.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fbe2a.  v4:= temp @kind object;
  #L2fbe2c.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fbe32.  throw v0;
}
procedure `okhttp3.HttpUrl$Builder` `setEncodedPathSegment`(`okhttp3.HttpUrl$Builder` v10 @kind this, `int` v11 , `java.lang.String` v12 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.setEncodedPathSegment:(ILjava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2fbe44.  v0:= "encodedPathSegment == null" @kind object;
  #L2fbe48.  call temp:= `requireNonNull`(v12, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fbe4e.  v2:= 0I;
  #L2fbe50.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fbe56.  v3:= temp;
  #L2fbe58.  v5:= 1I;
  #L2fbe5a.  v6:= 0I;
  #L2fbe5c.  v7:= 0I;
  #L2fbe5e.  v8:= 1I;
  #L2fbe60.  v9:= 0I;
  #L2fbe62.  v4:= " \"<>^`{}|/\\?#" @kind object;
  #L2fbe66.  v1:= v12 @kind object;
  #L2fbe68.  call temp:= `canonicalize`(v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @kind static;
  #L2fbe6e.  v0:= temp @kind object;
  #L2fbe70.  v1:= v10.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fbe74.  call temp:= `set`(v1, v11, v0) @signature `Ljava/util/List;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fbe7a.  call temp:= `isDot`(v10, v0) @signature `Lokhttp3/HttpUrl$Builder;.isDot:(Ljava/lang/String;)Z` @kind direct;
  #L2fbe80.  v11:= temp;
  #L2fbe82.  if v11 != 0 then goto L2fbe94;
  #L2fbe86.  call temp:= `isDotDot`(v10, v0) @signature `Lokhttp3/HttpUrl$Builder;.isDotDot:(Ljava/lang/String;)Z` @kind direct;
  #L2fbe8c.  v11:= temp;
  #L2fbe8e.  if v11 != 0 then goto L2fbe94;
  #L2fbe92.  return v10 @kind object;
  #L2fbe94.  v11:= new `java.lang.IllegalArgumentException`;
  #L2fbe98.  v0:= new `java.lang.StringBuilder`;
  #L2fbe9c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fbea2.  v1:= "unexpected path segment: " @kind object;
  #L2fbea6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fbeac.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fbeb2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fbeb8.  v12:= temp @kind object;
  #L2fbeba.  call `<init>`(v11, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fbec0.  throw v11;
}
procedure `okhttp3.HttpUrl$Builder` `setEncodedQueryParameter`(`okhttp3.HttpUrl$Builder` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.setEncodedQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2fbed4.  call temp:= `removeAllEncodedQueryParameters`(v0, v1) @signature `Lokhttp3/HttpUrl$Builder;.removeAllEncodedQueryParameters:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2fbeda.  call temp:= `addEncodedQueryParameter`(v0, v1, v2) @signature `Lokhttp3/HttpUrl$Builder;.addEncodedQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2fbee0.  return v0 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `setPathSegment`(`okhttp3.HttpUrl$Builder` v10 @kind this, `int` v11 , `java.lang.String` v12 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.setPathSegment:(ILjava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2fbef4.  v0:= "pathSegment == null" @kind object;
  #L2fbef8.  call temp:= `requireNonNull`(v12, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fbefe.  v2:= 0I;
  #L2fbf00.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fbf06.  v3:= temp;
  #L2fbf08.  v5:= 0I;
  #L2fbf0a.  v6:= 0I;
  #L2fbf0c.  v7:= 0I;
  #L2fbf0e.  v8:= 1I;
  #L2fbf10.  v9:= 0I;
  #L2fbf12.  v4:= " \"<>^`{}|/\\?#" @kind object;
  #L2fbf16.  v1:= v12 @kind object;
  #L2fbf18.  call temp:= `canonicalize`(v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @kind static;
  #L2fbf1e.  v0:= temp @kind object;
  #L2fbf20.  call temp:= `isDot`(v10, v0) @signature `Lokhttp3/HttpUrl$Builder;.isDot:(Ljava/lang/String;)Z` @kind direct;
  #L2fbf26.  v1:= temp;
  #L2fbf28.  if v1 != 0 then goto L2fbf44;
  #L2fbf2c.  call temp:= `isDotDot`(v10, v0) @signature `Lokhttp3/HttpUrl$Builder;.isDotDot:(Ljava/lang/String;)Z` @kind direct;
  #L2fbf32.  v1:= temp;
  #L2fbf34.  if v1 != 0 then goto L2fbf44;
  #L2fbf38.  v12:= v10.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fbf3c.  call temp:= `set`(v12, v11, v0) @signature `Ljava/util/List;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fbf42.  return v10 @kind object;
  #L2fbf44.  v11:= new `java.lang.IllegalArgumentException`;
  #L2fbf48.  v0:= new `java.lang.StringBuilder`;
  #L2fbf4c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fbf52.  v1:= "unexpected path segment: " @kind object;
  #L2fbf56.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fbf5c.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fbf62.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fbf68.  v12:= temp @kind object;
  #L2fbf6a.  call `<init>`(v11, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fbf70.  throw v11;
}
procedure `okhttp3.HttpUrl$Builder` `setQueryParameter`(`okhttp3.HttpUrl$Builder` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.setQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2fbf84.  call temp:= `removeAllQueryParameters`(v0, v1) @signature `Lokhttp3/HttpUrl$Builder;.removeAllQueryParameters:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2fbf8a.  call temp:= `addQueryParameter`(v0, v1, v2) @signature `Lokhttp3/HttpUrl$Builder;.addQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2fbf90.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.HttpUrl$Builder` v4 @kind this) @signature `Lokhttp3/HttpUrl$Builder;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fb188.  v0:= new `java.lang.StringBuilder`;
  #L2fb18c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fb192.  v1:= v4.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` @kind object;
  #L2fb196.  if v1 == 0 then goto L2fb1ac;
  #L2fb19a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb1a0.  v1:= "://" @kind object;
  #L2fb1a4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb1aa.  goto L2fb1b6;
  #L2fb1ac.  v1:= "//" @kind object;
  #L2fb1b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb1b6.  v1:= v4.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` @kind object;
  #L2fb1ba.  call temp:= `isEmpty`(v1) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L2fb1c0.  v1:= temp;
  #L2fb1c2.  v2:= 58I;
  #L2fb1c6.  if v1 == 0 then goto L2fb1da;
  #L2fb1ca.  v1:= v4.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` @kind object;
  #L2fb1ce.  call temp:= `isEmpty`(v1) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L2fb1d4.  v1:= temp;
  #L2fb1d6.  if v1 != 0 then goto L2fb20e;
  #L2fb1da.  v1:= v4.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` @kind object;
  #L2fb1de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb1e4.  v1:= v4.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` @kind object;
  #L2fb1e8.  call temp:= `isEmpty`(v1) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L2fb1ee.  v1:= temp;
  #L2fb1f0.  if v1 != 0 then goto L2fb204;
  #L2fb1f4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb1fa.  v1:= v4.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` @kind object;
  #L2fb1fe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb204.  v1:= 64I;
  #L2fb208.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb20e.  v1:= v4.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` @kind object;
  #L2fb212.  v3:= -1I;
  #L2fb214.  if v1 == 0 then goto L2fb24e;
  #L2fb218.  call temp:= `indexOf`(v1, v2) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L2fb21e.  v1:= temp;
  #L2fb220.  if v1 == v3 then goto L2fb244;
  #L2fb224.  v1:= 91I;
  #L2fb228.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb22e.  v1:= v4.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` @kind object;
  #L2fb232.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb238.  v1:= 93I;
  #L2fb23c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb242.  goto L2fb24e;
  #L2fb244.  v1:= v4.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` @kind object;
  #L2fb248.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb24e.  v1:= v4.`okhttp3.HttpUrl$Builder.port` @type ^`int`;
  #L2fb252.  if v1 != v3 then goto L2fb25e;
  #L2fb256.  v1:= v4.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` @kind object;
  #L2fb25a.  if v1 == 0 then goto L2fb286;
  #L2fb25e.  call temp:= `effectivePort`(v4) @signature `Lokhttp3/HttpUrl$Builder;.effectivePort:()I` @kind virtual;
  #L2fb264.  v1:= temp;
  #L2fb266.  v3:= v4.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` @kind object;
  #L2fb26a.  if v3 == 0 then goto L2fb27a;
  #L2fb26e.  call temp:= `defaultPort`(v3) @signature `Lokhttp3/HttpUrl;.defaultPort:(Ljava/lang/String;)I` @kind static;
  #L2fb274.  v3:= temp;
  #L2fb276.  if v1 == v3 then goto L2fb286;
  #L2fb27a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb280.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb286.  v1:= v4.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fb28a.  call `pathSegmentsToString`(v0, v1) @signature `Lokhttp3/HttpUrl;.pathSegmentsToString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind static;
  #L2fb290.  v1:= v4.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fb294.  if v1 == 0 then goto L2fb2ac;
  #L2fb298.  v1:= 63I;
  #L2fb29c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb2a2.  v1:= v4.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fb2a6.  call `namesAndValuesToQueryString`(v0, v1) @signature `Lokhttp3/HttpUrl;.namesAndValuesToQueryString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind static;
  #L2fb2ac.  v1:= v4.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` @kind object;
  #L2fb2b0.  if v1 == 0 then goto L2fb2c8;
  #L2fb2b4.  v1:= 35I;
  #L2fb2b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb2be.  v1:= v4.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` @kind object;
  #L2fb2c2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fb2c8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fb2ce.  v0:= temp @kind object;
  #L2fb2d0.  return v0 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `username`(`okhttp3.HttpUrl$Builder` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Lokhttp3/HttpUrl$Builder;.username:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2fbfa4.  v0:= "username == null" @kind object;
  #L2fbfa8.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fbfae.  v3:= 0I;
  #L2fbfb0.  v4:= 0I;
  #L2fbfb2.  v5:= 0I;
  #L2fbfb4.  v6:= 1I;
  #L2fbfb6.  v2:= " \"':;<=>@[]^`{}|/\\?#" @kind object;
  #L2fbfba.  v1:= v8 @kind object;
  #L2fbfbc.  call temp:= `canonicalize`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L2fbfc2.  v8:= temp @kind object;
  #L2fbfc4.  v7.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` := v8 @kind object;
  #L2fbfc8.  return v7 @kind object;
}
