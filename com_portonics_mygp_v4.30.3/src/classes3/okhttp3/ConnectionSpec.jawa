record `okhttp3.ConnectionSpec` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.ConnectionSpec.cipherSuites` @AccessFlag FINAL;
  `boolean` `okhttp3.ConnectionSpec.supportsTlsExtensions` @AccessFlag FINAL;
  `boolean` `okhttp3.ConnectionSpec.tls` @AccessFlag FINAL;
  `java.lang.String`[] `okhttp3.ConnectionSpec.tlsVersions` @AccessFlag FINAL;
}
global `okhttp3.CipherSuite`[] `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @AccessFlag PRIVATE_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.CLEARTEXT` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.MODERN_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.CipherSuite`[] `@@okhttp3.ConnectionSpec.RESTRICTED_CIPHER_SUITES` @AccessFlag PRIVATE_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.RESTRICTED_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/ConnectionSpec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L2f8080.  v0:= 9I;
  #L2f8084.  v1:= new `okhttp3.CipherSuite`[v0];
  #L2f8088.  v2:= `@@okhttp3.CipherSuite.TLS_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L2f808c.  v3:= 0I;
  #L2f808e.  v1[v3]:= v2 @kind object;
  #L2f8092.  v4:= `@@okhttp3.CipherSuite.TLS_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L2f8096.  v5:= 1I;
  #L2f8098.  v1[v5]:= v4 @kind object;
  #L2f809c.  v6:= `@@okhttp3.CipherSuite.TLS_CHACHA20_POLY1305_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L2f80a0.  v7:= 2I;
  #L2f80a2.  v1[v7]:= v6 @kind object;
  #L2f80a6.  v8:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L2f80aa.  v9:= 3I;
  #L2f80ac.  v1[v9]:= v8 @kind object;
  #L2f80b0.  v10:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L2f80b4.  v11:= 4I;
  #L2f80b6.  v1[v11]:= v10 @kind object;
  #L2f80ba.  v12:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L2f80be.  v13:= 5I;
  #L2f80c0.  v1[v13]:= v12 @kind object;
  #L2f80c4.  v14:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L2f80c8.  v15:= 6I;
  #L2f80ca.  v1[v15]:= v14 @kind object;
  #L2f80ce.  v16:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L2f80d2.  v17:= 7I;
  #L2f80d6.  v1[v17]:= v16 @kind object;
  #L2f80da.  v18:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L2f80de.  v19:= 8I;
  #L2f80e2.  v1[v19]:= v18 @kind object;
  #L2f80e6.  `@@okhttp3.ConnectionSpec.RESTRICTED_CIPHER_SUITES` @type ^`okhttp3.CipherSuite`[] := v1 @kind object;
  #L2f80ea.  v0:= 16I;
  #L2f80ee.  v0:= new `okhttp3.CipherSuite`[v0];
  #L2f80f2.  v0[v3]:= v2 @kind object;
  #L2f80f6.  v0[v5]:= v4 @kind object;
  #L2f80fa.  v0[v7]:= v6 @kind object;
  #L2f80fe.  v0[v9]:= v8 @kind object;
  #L2f8102.  v0[v11]:= v10 @kind object;
  #L2f8106.  v0[v13]:= v12 @kind object;
  #L2f810a.  v0[v15]:= v14 @kind object;
  #L2f810e.  v0[v17]:= v16 @kind object;
  #L2f8112.  v0[v19]:= v18 @kind object;
  #L2f8116.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L2f811a.  v4:= 9I;
  #L2f811e.  v0[v4]:= v2 @kind object;
  #L2f8122.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L2f8126.  v4:= 10I;
  #L2f812a.  v0[v4]:= v2 @kind object;
  #L2f812e.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L2f8132.  v4:= 11I;
  #L2f8136.  v0[v4]:= v2 @kind object;
  #L2f813a.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L2f813e.  v4:= 12I;
  #L2f8142.  v0[v4]:= v2 @kind object;
  #L2f8146.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L2f814a.  v4:= 13I;
  #L2f814e.  v0[v4]:= v2 @kind object;
  #L2f8152.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L2f8156.  v4:= 14I;
  #L2f815a.  v0[v4]:= v2 @kind object;
  #L2f815e.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L2f8162.  v4:= 15I;
  #L2f8166.  v0[v4]:= v2 @kind object;
  #L2f816a.  `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @type ^`okhttp3.CipherSuite`[] := v0 @kind object;
  #L2f816e.  v2:= new `okhttp3.ConnectionSpec$Builder`;
  #L2f8172.  call `<init>`(v2, v5) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L2f8178.  call temp:= `cipherSuites`(v2, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L2f817e.  v1:= temp @kind object;
  #L2f8180.  v2:= new `okhttp3.TlsVersion`[v7];
  #L2f8184.  v4:= `@@okhttp3.TlsVersion.TLS_1_3` @type ^`okhttp3.TlsVersion` @kind object;
  #L2f8188.  v2[v3]:= v4 @kind object;
  #L2f818c.  v6:= `@@okhttp3.TlsVersion.TLS_1_2` @type ^`okhttp3.TlsVersion` @kind object;
  #L2f8190.  v2[v5]:= v6 @kind object;
  #L2f8194.  call temp:= `tlsVersions`(v1, v2) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L2f819a.  v1:= temp @kind object;
  #L2f819c.  call temp:= `supportsTlsExtensions`(v1, v5) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L2f81a2.  v1:= temp @kind object;
  #L2f81a4.  call temp:= `build`(v1) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L2f81aa.  v1:= temp @kind object;
  #L2f81ac.  `@@okhttp3.ConnectionSpec.RESTRICTED_TLS` @type ^`okhttp3.ConnectionSpec` := v1 @kind object;
  #L2f81b0.  v1:= new `okhttp3.ConnectionSpec$Builder`;
  #L2f81b4.  call `<init>`(v1, v5) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L2f81ba.  call temp:= `cipherSuites`(v1, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L2f81c0.  v1:= temp @kind object;
  #L2f81c2.  v2:= new `okhttp3.TlsVersion`[v7];
  #L2f81c6.  v2[v3]:= v4 @kind object;
  #L2f81ca.  v2[v5]:= v6 @kind object;
  #L2f81ce.  call temp:= `tlsVersions`(v1, v2) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L2f81d4.  v1:= temp @kind object;
  #L2f81d6.  call temp:= `supportsTlsExtensions`(v1, v5) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L2f81dc.  v1:= temp @kind object;
  #L2f81de.  call temp:= `build`(v1) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L2f81e4.  v1:= temp @kind object;
  #L2f81e6.  `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` := v1 @kind object;
  #L2f81ea.  v1:= new `okhttp3.ConnectionSpec$Builder`;
  #L2f81ee.  call `<init>`(v1, v5) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L2f81f4.  call temp:= `cipherSuites`(v1, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L2f81fa.  v0:= temp @kind object;
  #L2f81fc.  v1:= new `okhttp3.TlsVersion`[v11];
  #L2f8200.  v1[v3]:= v4 @kind object;
  #L2f8204.  v1[v5]:= v6 @kind object;
  #L2f8208.  v2:= `@@okhttp3.TlsVersion.TLS_1_1` @type ^`okhttp3.TlsVersion` @kind object;
  #L2f820c.  v1[v7]:= v2 @kind object;
  #L2f8210.  v2:= `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L2f8214.  v1[v9]:= v2 @kind object;
  #L2f8218.  call temp:= `tlsVersions`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L2f821e.  v0:= temp @kind object;
  #L2f8220.  call temp:= `supportsTlsExtensions`(v0, v5) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L2f8226.  v0:= temp @kind object;
  #L2f8228.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L2f822e.  v0:= temp @kind object;
  #L2f8230.  `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L2f8234.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L2f8238.  call `<init>`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L2f823e.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L2f8244.  v0:= temp @kind object;
  #L2f8246.  `@@okhttp3.ConnectionSpec.CLEARTEXT` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L2f824a.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec` v1 @kind this, `okhttp3.ConnectionSpec$Builder` v2 @kind object) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2f825c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f8262.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L2f8266.  v1.`okhttp3.ConnectionSpec.tls` @type ^`boolean` := v0 @kind boolean;
  #L2f826a.  v0:= v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L2f826e.  v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L2f8272.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L2f8276.  v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L2f827a.  v2:= v2.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L2f827e.  v1.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` := v2 @kind boolean;
  #L2f8282.  return @kind void;
}
procedure `okhttp3.ConnectionSpec` `supportedSpec`(`okhttp3.ConnectionSpec` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object, `boolean` v6 ) @signature `Lokhttp3/ConnectionSpec;.supportedSpec:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2f7fc8.  v0:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L2f7fcc.  if v0 == 0 then goto L2f7fea;
  #L2f7fd0.  v0:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L2f7fd4.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L2f7fda.  v1:= temp @kind object;
  #L2f7fdc.  v2:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L2f7fe0.  call temp:= `intersect`(v0, v1, v2) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L2f7fe6.  v0:= temp @kind object;
  #L2f7fe8.  goto L2f7ff2;
  #L2f7fea.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L2f7ff0.  v0:= temp @kind object;
  #L2f7ff2.  v1:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L2f7ff6.  if v1 == 0 then goto L2f8014;
  #L2f7ffa.  v1:= `@@okhttp3.internal.Util.NATURAL_ORDER` @type ^`java.util.Comparator` @kind object;
  #L2f7ffe.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L2f8004.  v2:= temp @kind object;
  #L2f8006.  v3:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L2f800a.  call temp:= `intersect`(v1, v2, v3) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L2f8010.  v1:= temp @kind object;
  #L2f8012.  goto L2f801c;
  #L2f8014.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L2f801a.  v1:= temp @kind object;
  #L2f801c.  call temp:= `getSupportedCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getSupportedCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L2f8022.  v5:= temp @kind object;
  #L2f8024.  v2:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L2f8028.  v3:= "TLS_FALLBACK_SCSV" @kind object;
  #L2f802c.  call temp:= `indexOf`(v2, v5, v3) @signature `Lokhttp3/internal/Util;.indexOf:(Ljava/util/Comparator;[Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2f8032.  v2:= temp;
  #L2f8034.  if v6 == 0 then goto L2f804a;
  #L2f8038.  v6:= -1I;
  #L2f803a.  if v2 == v6 then goto L2f804a;
  #L2f803e.  v5:= v5[v2] @kind object;
  #L2f8042.  call temp:= `concat`(v0, v5) @signature `Lokhttp3/internal/Util;.concat:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L2f8048.  v0:= temp @kind object;
  #L2f804a.  v5:= new `okhttp3.ConnectionSpec$Builder`;
  #L2f804e.  call `<init>`(v5, v4) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @kind direct;
  #L2f8054.  call temp:= `cipherSuites`(v5, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L2f805a.  v5:= temp @kind object;
  #L2f805c.  call temp:= `tlsVersions`(v5, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L2f8062.  v5:= temp @kind object;
  #L2f8064.  call temp:= `build`(v5) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L2f806a.  v5:= temp @kind object;
  #L2f806c.  return v5 @kind object;
}
procedure `void` `apply`(`okhttp3.ConnectionSpec` v1 @kind this, `javax.net.ssl.SSLSocket` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/ConnectionSpec;.apply:(Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag  {
    temp;
    v0;

  #L2f8294.  call temp:= `supportedSpec`(v1, v2, v3) @signature `Lokhttp3/ConnectionSpec;.supportedSpec:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;` @kind direct;
  #L2f829a.  v3:= temp @kind object;
  #L2f829c.  v0:= v3.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L2f82a0.  if v0 == 0 then goto L2f82aa;
  #L2f82a4.  call `setEnabledProtocols`(v2, v0) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledProtocols:([Ljava/lang/String;)V` @kind virtual;
  #L2f82aa.  v3:= v3.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L2f82ae.  if v3 == 0 then goto L2f82b8;
  #L2f82b2.  call `setEnabledCipherSuites`(v2, v3) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledCipherSuites:([Ljava/lang/String;)V` @kind virtual;
  #L2f82b8.  return @kind void;
}
procedure `java.util.List` `cipherSuites`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f7f78.  v0:= v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L2f7f7c.  if v0 == 0 then goto L2f7f8a;
  #L2f7f80.  call temp:= `forJavaNames`(v0) @signature `Lokhttp3/CipherSuite;.forJavaNames:([Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L2f7f86.  v0:= temp @kind object;
  #L2f7f88.  goto L2f7f8c;
  #L2f7f8a.  v0:= 0I;
  #L2f7f8c.  return v0 @kind object;
}
procedure `boolean` `equals`(`okhttp3.ConnectionSpec` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lokhttp3/ConnectionSpec;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2f7d84.  v0:= instanceof @variable v5 @type ^`okhttp3.ConnectionSpec` @kind boolean;
  #L2f7d88.  v1:= 0I;
  #L2f7d8a.  if v0 != 0 then goto L2f7d90;
  #L2f7d8e.  return v1;
  #L2f7d90.  v0:= 1I;
  #L2f7d92.  if v5 != v4 then goto L2f7d98;
  #L2f7d96.  return v0;
  #L2f7d98.  v5:= (`okhttp3.ConnectionSpec`) v5 @kind object;
  #L2f7d9c.  v2:= v4.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L2f7da0.  v3:= v5.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L2f7da4.  if v2 == v3 then goto L2f7daa;
  #L2f7da8.  return v1;
  #L2f7daa.  if v2 == 0 then goto L2f7de8;
  #L2f7dae.  v2:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L2f7db2.  v3:= v5.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L2f7db6.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L2f7dbc.  v2:= temp;
  #L2f7dbe.  if v2 != 0 then goto L2f7dc4;
  #L2f7dc2.  return v1;
  #L2f7dc4.  v2:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L2f7dc8.  v3:= v5.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L2f7dcc.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L2f7dd2.  v2:= temp;
  #L2f7dd4.  if v2 != 0 then goto L2f7dda;
  #L2f7dd8.  return v1;
  #L2f7dda.  v2:= v4.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L2f7dde.  v5:= v5.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L2f7de2.  if v2 == v5 then goto L2f7de8;
  #L2f7de6.  return v1;
  #L2f7de8.  return v0;
}
procedure `int` `hashCode`(`okhttp3.ConnectionSpec` v2 @kind this) @signature `Lokhttp3/ConnectionSpec;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f7e90.  v0:= v2.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L2f7e94.  if v0 == 0 then goto L2f7ecc;
  #L2f7e98.  v0:= 527I;
  #L2f7e9c.  v1:= v2.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L2f7ea0.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L2f7ea6.  v1:= temp;
  #L2f7ea8.  v0:= v0 + v1 @kind int;
  #L2f7eaa.  v0:= v0 * 31;
  #L2f7eae.  v1:= v2.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L2f7eb2.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L2f7eb8.  v1:= temp;
  #L2f7eba.  v0:= v0 + v1 @kind int;
  #L2f7ebc.  v0:= v0 * 31;
  #L2f7ec0.  v1:= v2.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L2f7ec4.  v1:= v1 ^~ 1;
  #L2f7ec8.  v0:= v0 + v1 @kind int;
  #L2f7eca.  goto L2f7ed0;
  #L2f7ecc.  v0:= 17I;
  #L2f7ed0.  return v0;
}
procedure `boolean` `isCompatible`(`okhttp3.ConnectionSpec` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `Lokhttp3/ConnectionSpec;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2f7dfc.  v0:= v4.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L2f7e00.  v1:= 0I;
  #L2f7e02.  if v0 != 0 then goto L2f7e08;
  #L2f7e06.  return v1;
  #L2f7e08.  v0:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L2f7e0c.  if v0 == 0 then goto L2f7e2a;
  #L2f7e10.  v2:= `@@okhttp3.internal.Util.NATURAL_ORDER` @type ^`java.util.Comparator` @kind object;
  #L2f7e14.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L2f7e1a.  v3:= temp @kind object;
  #L2f7e1c.  call temp:= `nonEmptyIntersection`(v2, v0, v3) @signature `Lokhttp3/internal/Util;.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L2f7e22.  v0:= temp;
  #L2f7e24.  if v0 != 0 then goto L2f7e2a;
  #L2f7e28.  return v1;
  #L2f7e2a.  v0:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L2f7e2e.  if v0 == 0 then goto L2f7e4c;
  #L2f7e32.  v2:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L2f7e36.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L2f7e3c.  v5:= temp @kind object;
  #L2f7e3e.  call temp:= `nonEmptyIntersection`(v2, v0, v5) @signature `Lokhttp3/internal/Util;.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L2f7e44.  v5:= temp;
  #L2f7e46.  if v5 != 0 then goto L2f7e4c;
  #L2f7e4a.  return v1;
  #L2f7e4c.  v5:= 1I;
  #L2f7e4e.  return v5;
}
procedure `boolean` `isTls`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.isTls:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f7e60.  v0:= v1.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L2f7e64.  return v0;
}
procedure `boolean` `supportsTlsExtensions`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.supportsTlsExtensions:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f7e78.  v0:= v1.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L2f7e7c.  return v0;
}
procedure `java.util.List` `tlsVersions`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f7fa0.  v0:= v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L2f7fa4.  if v0 == 0 then goto L2f7fb2;
  #L2f7fa8.  call temp:= `forJavaNames`(v0) @signature `Lokhttp3/TlsVersion;.forJavaNames:([Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L2f7fae.  v0:= temp @kind object;
  #L2f7fb0.  goto L2f7fb4;
  #L2f7fb2.  v0:= 0I;
  #L2f7fb4.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.ConnectionSpec` v3 @kind this) @signature `Lokhttp3/ConnectionSpec;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f7ee4.  v0:= v3.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L2f7ee8.  if v0 != 0 then goto L2f7ef2;
  #L2f7eec.  v0:= "ConnectionSpec()" @kind object;
  #L2f7ef0.  return v0 @kind object;
  #L2f7ef2.  v0:= new `java.lang.StringBuilder`;
  #L2f7ef6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f7efc.  v1:= "ConnectionSpec(cipherSuites=" @kind object;
  #L2f7f00.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f7f06.  call temp:= `cipherSuites`(v3) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @kind virtual;
  #L2f7f0c.  v1:= temp @kind object;
  #L2f7f0e.  v2:= "[all enabled]" @kind object;
  #L2f7f12.  call temp:= `toString`(v1, v2) @signature `Ljava/util/Objects;.toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L2f7f18.  v1:= temp @kind object;
  #L2f7f1a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f7f20.  v1:= ", tlsVersions=" @kind object;
  #L2f7f24.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f7f2a.  call temp:= `tlsVersions`(v3) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @kind virtual;
  #L2f7f30.  v1:= temp @kind object;
  #L2f7f32.  call temp:= `toString`(v1, v2) @signature `Ljava/util/Objects;.toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L2f7f38.  v1:= temp @kind object;
  #L2f7f3a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f7f40.  v1:= ", supportsTlsExtensions=" @kind object;
  #L2f7f44.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f7f4a.  v1:= v3.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L2f7f4e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f7f54.  v1:= ")" @kind object;
  #L2f7f58.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f7f5e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f7f64.  v0:= temp @kind object;
  #L2f7f66.  return v0 @kind object;
}
