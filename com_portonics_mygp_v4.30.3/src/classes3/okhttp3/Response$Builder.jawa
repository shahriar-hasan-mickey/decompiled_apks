record `okhttp3.Response$Builder` @kind class @AccessFlag PUBLIC {
  `okhttp3.ResponseBody` `okhttp3.Response$Builder.body` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.cacheResponse` @AccessFlag ;
  `int` `okhttp3.Response$Builder.code` @AccessFlag ;
  `okhttp3.internal.connection.Exchange` `okhttp3.Response$Builder.exchange` @AccessFlag ;
  `okhttp3.Handshake` `okhttp3.Response$Builder.handshake` @AccessFlag ;
  `okhttp3.Headers$Builder` `okhttp3.Response$Builder.headers` @AccessFlag ;
  `java.lang.String` `okhttp3.Response$Builder.message` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.networkResponse` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.priorResponse` @AccessFlag ;
  `okhttp3.Protocol` `okhttp3.Response$Builder.protocol` @AccessFlag ;
  `long` `okhttp3.Response$Builder.receivedResponseAtMillis` @AccessFlag ;
  `okhttp3.Request` `okhttp3.Response$Builder.request` @AccessFlag ;
  `long` `okhttp3.Response$Builder.sentRequestAtMillis` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ffb8c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ffb92.  v0:= -1I;
  #L2ffb94.  v1.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L2ffb98.  v0:= new `okhttp3.Headers$Builder`;
  #L2ffb9c.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L2ffba2.  v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L2ffba6.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v2 @kind this, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/Response$Builder;.<init>:(Lokhttp3/Response;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2ffbb8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ffbbe.  v0:= -1I;
  #L2ffbc0.  v2.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L2ffbc4.  v0:= v3.`okhttp3.Response.request` @type ^`okhttp3.Request` @kind object;
  #L2ffbc8.  v2.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` := v0 @kind object;
  #L2ffbcc.  v0:= v3.`okhttp3.Response.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L2ffbd0.  v2.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L2ffbd4.  v0:= v3.`okhttp3.Response.code` @type ^`int`;
  #L2ffbd8.  v2.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L2ffbdc.  v0:= v3.`okhttp3.Response.message` @type ^`java.lang.String` @kind object;
  #L2ffbe0.  v2.`okhttp3.Response$Builder.message` @type ^`java.lang.String` := v0 @kind object;
  #L2ffbe4.  v0:= v3.`okhttp3.Response.handshake` @type ^`okhttp3.Handshake` @kind object;
  #L2ffbe8.  v2.`okhttp3.Response$Builder.handshake` @type ^`okhttp3.Handshake` := v0 @kind object;
  #L2ffbec.  v0:= v3.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L2ffbf0.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L2ffbf6.  v0:= temp @kind object;
  #L2ffbf8.  v2.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L2ffbfc.  v0:= v3.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L2ffc00.  v2.`okhttp3.Response$Builder.body` @type ^`okhttp3.ResponseBody` := v0 @kind object;
  #L2ffc04.  v0:= v3.`okhttp3.Response.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L2ffc08.  v2.`okhttp3.Response$Builder.networkResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L2ffc0c.  v0:= v3.`okhttp3.Response.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L2ffc10.  v2.`okhttp3.Response$Builder.cacheResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L2ffc14.  v0:= v3.`okhttp3.Response.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L2ffc18.  v2.`okhttp3.Response$Builder.priorResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L2ffc1c.  v0:= v3.`okhttp3.Response.sentRequestAtMillis` @type ^`long` @kind wide;
  #L2ffc20.  v2.`okhttp3.Response$Builder.sentRequestAtMillis` @type ^`long` := v0 @kind wide;
  #L2ffc24.  v0:= v3.`okhttp3.Response.receivedResponseAtMillis` @type ^`long` @kind wide;
  #L2ffc28.  v2.`okhttp3.Response$Builder.receivedResponseAtMillis` @type ^`long` := v0 @kind wide;
  #L2ffc2c.  v3:= v3.`okhttp3.Response.exchange` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L2ffc30.  v2.`okhttp3.Response$Builder.exchange` @type ^`okhttp3.internal.connection.Exchange` := v3 @kind object;
  #L2ffc34.  return @kind void;
}
procedure `void` `checkPriorResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/Response$Builder;.checkPriorResponse:(Lokhttp3/Response;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2ffc48.  v2:= v2.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L2ffc4c.  if v2 != 0 then goto L2ffc52;
  #L2ffc50.  return @kind void;
  #L2ffc52.  v2:= new `java.lang.IllegalArgumentException`;
  #L2ffc56.  v0:= "priorResponse.body != null" @kind object;
  #L2ffc5a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ffc60.  throw v2;
}
procedure `void` `checkSupportResponse`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2ffc74.  v0:= v3.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L2ffc78.  if v0 != 0 then goto L2ffd20;
  #L2ffc7c.  v0:= v3.`okhttp3.Response.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L2ffc80.  if v0 != 0 then goto L2ffcf2;
  #L2ffc84.  v0:= v3.`okhttp3.Response.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L2ffc88.  if v0 != 0 then goto L2ffcc4;
  #L2ffc8c.  v3:= v3.`okhttp3.Response.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L2ffc90.  if v3 != 0 then goto L2ffc96;
  #L2ffc94.  return @kind void;
  #L2ffc96.  v3:= new `java.lang.IllegalArgumentException`;
  #L2ffc9a.  v0:= new `java.lang.StringBuilder`;
  #L2ffc9e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ffca4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ffcaa.  v2:= ".priorResponse != null" @kind object;
  #L2ffcae.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ffcb4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ffcba.  v2:= temp @kind object;
  #L2ffcbc.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ffcc2.  throw v3;
  #L2ffcc4.  v3:= new `java.lang.IllegalArgumentException`;
  #L2ffcc8.  v0:= new `java.lang.StringBuilder`;
  #L2ffccc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ffcd2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ffcd8.  v2:= ".cacheResponse != null" @kind object;
  #L2ffcdc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ffce2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ffce8.  v2:= temp @kind object;
  #L2ffcea.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ffcf0.  throw v3;
  #L2ffcf2.  v3:= new `java.lang.IllegalArgumentException`;
  #L2ffcf6.  v0:= new `java.lang.StringBuilder`;
  #L2ffcfa.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ffd00.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ffd06.  v2:= ".networkResponse != null" @kind object;
  #L2ffd0a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ffd10.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ffd16.  v2:= temp @kind object;
  #L2ffd18.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ffd1e.  throw v3;
  #L2ffd20.  v3:= new `java.lang.IllegalArgumentException`;
  #L2ffd24.  v0:= new `java.lang.StringBuilder`;
  #L2ffd28.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ffd2e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ffd34.  v2:= ".body != null" @kind object;
  #L2ffd38.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ffd3e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ffd44.  v2:= temp @kind object;
  #L2ffd46.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ffd4c.  throw v3;
}
procedure `okhttp3.Response$Builder` `addHeader`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Response$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff9f0.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L2ff9f4.  call temp:= `add`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2ff9fa.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `body`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.ResponseBody` v1 @kind object) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2ffa0c.  v0.`okhttp3.Response$Builder.body` @type ^`okhttp3.ResponseBody` := v1 @kind object;
  #L2ffa10.  return v0 @kind object;
}
procedure `okhttp3.Response` `build`(`okhttp3.Response$Builder` v3 @kind this) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2ff950.  v0:= v3.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` @kind object;
  #L2ff954.  if v0 == 0 then goto L2ff9ce;
  #L2ff958.  v0:= v3.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L2ff95c.  if v0 == 0 then goto L2ff9be;
  #L2ff960.  v0:= v3.`okhttp3.Response$Builder.code` @type ^`int`;
  #L2ff964.  if v0 < 0 then goto L2ff98c;
  #L2ff968.  v0:= v3.`okhttp3.Response$Builder.message` @type ^`java.lang.String` @kind object;
  #L2ff96c.  if v0 == 0 then goto L2ff97c;
  #L2ff970.  v0:= new `okhttp3.Response`;
  #L2ff974.  call `<init>`(v0, v3) @signature `Lokhttp3/Response;.<init>:(Lokhttp3/Response$Builder;)V` @kind direct;
  #L2ff97a.  return v0 @kind object;
  #L2ff97c.  v0:= new `java.lang.IllegalStateException`;
  #L2ff980.  v1:= "message == null" @kind object;
  #L2ff984.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ff98a.  throw v0;
  #L2ff98c.  v0:= new `java.lang.IllegalStateException`;
  #L2ff990.  v1:= new `java.lang.StringBuilder`;
  #L2ff994.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ff99a.  v2:= "code < 0: " @kind object;
  #L2ff99e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ff9a4.  v2:= v3.`okhttp3.Response$Builder.code` @type ^`int`;
  #L2ff9a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ff9ae.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ff9b4.  v1:= temp @kind object;
  #L2ff9b6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ff9bc.  throw v0;
  #L2ff9be.  v0:= new `java.lang.IllegalStateException`;
  #L2ff9c2.  v1:= "protocol == null" @kind object;
  #L2ff9c6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ff9cc.  throw v0;
  #L2ff9ce.  v0:= new `java.lang.IllegalStateException`;
  #L2ff9d2.  v1:= "request == null" @kind object;
  #L2ff9d6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ff9dc.  throw v0;
}
procedure `okhttp3.Response$Builder` `cacheResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/Response$Builder;.cacheResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ffa24.  if v2 == 0 then goto L2ffa32;
  #L2ffa28.  v0:= "cacheResponse" @kind object;
  #L2ffa2c.  call `checkSupportResponse`(v1, v0, v2) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @kind direct;
  #L2ffa32.  v1.`okhttp3.Response$Builder.cacheResponse` @type ^`okhttp3.Response` := v2 @kind object;
  #L2ffa36.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `code`(`okhttp3.Response$Builder` v0 @kind this, `int` v1 ) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2ffa48.  v0.`okhttp3.Response$Builder.code` @type ^`int` := v1;
  #L2ffa4c.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `handshake`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Handshake` v1 @kind object) @signature `Lokhttp3/Response$Builder;.handshake:(Lokhttp3/Handshake;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2ffa60.  v0.`okhttp3.Response$Builder.handshake` @type ^`okhttp3.Handshake` := v1 @kind object;
  #L2ffa64.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `header`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Response$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ffa78.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L2ffa7c.  call temp:= `set`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2ffa82.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `headers`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Headers` v1 @kind object) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2ffa94.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L2ffa9a.  v1:= temp @kind object;
  #L2ffa9c.  v0.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v1 @kind object;
  #L2ffaa0.  return v0 @kind object;
}
procedure `void` `initExchange`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.internal.connection.Exchange` v1 @kind object) @signature `Lokhttp3/Response$Builder;.initExchange:(Lokhttp3/internal/connection/Exchange;)V` @AccessFlag  {
    temp;

  #L2ffd60.  v0.`okhttp3.Response$Builder.exchange` @type ^`okhttp3.internal.connection.Exchange` := v1 @kind object;
  #L2ffd64.  return @kind void;
}
procedure `okhttp3.Response$Builder` `message`(`okhttp3.Response$Builder` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2ffab4.  v0.`okhttp3.Response$Builder.message` @type ^`java.lang.String` := v1 @kind object;
  #L2ffab8.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `networkResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/Response$Builder;.networkResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ffacc.  if v2 == 0 then goto L2ffada;
  #L2ffad0.  v0:= "networkResponse" @kind object;
  #L2ffad4.  call `checkSupportResponse`(v1, v0, v2) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @kind direct;
  #L2ffada.  v1.`okhttp3.Response$Builder.networkResponse` @type ^`okhttp3.Response` := v2 @kind object;
  #L2ffade.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `priorResponse`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Response` v1 @kind object) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2ffaf0.  if v1 == 0 then goto L2ffafa;
  #L2ffaf4.  call `checkPriorResponse`(v0, v1) @signature `Lokhttp3/Response$Builder;.checkPriorResponse:(Lokhttp3/Response;)V` @kind direct;
  #L2ffafa.  v0.`okhttp3.Response$Builder.priorResponse` @type ^`okhttp3.Response` := v1 @kind object;
  #L2ffafe.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `protocol`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Protocol` v1 @kind object) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2ffb10.  v0.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` := v1 @kind object;
  #L2ffb14.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `receivedResponseAtMillis`(`okhttp3.Response$Builder` v0 @kind this, `long` v1 ) @signature `Lokhttp3/Response$Builder;.receivedResponseAtMillis:(J)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2ffb28.  v0.`okhttp3.Response$Builder.receivedResponseAtMillis` @type ^`long` := v1 @kind wide;
  #L2ffb2c.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `removeHeader`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Response$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ffb40.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L2ffb44.  call temp:= `removeAll`(v0, v2) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2ffb4a.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `request`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Request` v1 @kind object) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2ffb5c.  v0.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` := v1 @kind object;
  #L2ffb60.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `sentRequestAtMillis`(`okhttp3.Response$Builder` v0 @kind this, `long` v1 ) @signature `Lokhttp3/Response$Builder;.sentRequestAtMillis:(J)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2ffb74.  v0.`okhttp3.Response$Builder.sentRequestAtMillis` @type ^`long` := v1 @kind wide;
  #L2ffb78.  return v0 @kind object;
}
