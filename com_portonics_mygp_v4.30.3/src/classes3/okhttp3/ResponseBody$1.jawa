record `okhttp3.ResponseBody$1` @kind class @AccessFlag  extends `okhttp3.ResponseBody` @kind class {
  `okio.o` `okhttp3.ResponseBody$1.val$content` @AccessFlag FINAL_SYNTHETIC;
  `long` `okhttp3.ResponseBody$1.val$contentLength` @AccessFlag FINAL_SYNTHETIC;
  `okhttp3.MediaType` `okhttp3.ResponseBody$1.val$contentType` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.ResponseBody$1` v0 @kind this, `okhttp3.MediaType` v1 @kind object, `long` v2 , `okio.o` v4 @kind object) @signature `Lokhttp3/ResponseBody$1;.<init>:(Lokhttp3/MediaType;JLokio/o;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2ffdc0.  v0.`okhttp3.ResponseBody$1.val$contentType` @type ^`okhttp3.MediaType` := v1 @kind object;
  #L2ffdc4.  v0.`okhttp3.ResponseBody$1.val$contentLength` @type ^`long` := v2 @kind wide;
  #L2ffdc8.  v0.`okhttp3.ResponseBody$1.val$content` @type ^`okio.o` := v4 @kind object;
  #L2ffdcc.  call `<init>`(v0) @signature `Lokhttp3/ResponseBody;.<init>:()V` @kind direct;
  #L2ffdd2.  return @kind void;
}
procedure `long` `contentLength`(`okhttp3.ResponseBody$1` v2 @kind this) @signature `Lokhttp3/ResponseBody$1;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ffd78.  v0:= v2.`okhttp3.ResponseBody$1.val$contentLength` @type ^`long` @kind wide;
  #L2ffd7c.  return v0 @kind wide;
}
procedure `okhttp3.MediaType` `contentType`(`okhttp3.ResponseBody$1` v1 @kind this) @signature `Lokhttp3/ResponseBody$1;.contentType:()Lokhttp3/MediaType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ffd90.  v0:= v1.`okhttp3.ResponseBody$1.val$contentType` @type ^`okhttp3.MediaType` @kind object;
  #L2ffd94.  return v0 @kind object;
}
procedure `okio.o` `source`(`okhttp3.ResponseBody$1` v1 @kind this) @signature `Lokhttp3/ResponseBody$1;.source:()Lokio/o;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ffda8.  v0:= v1.`okhttp3.ResponseBody$1.val$content` @type ^`okio.o` @kind object;
  #L2ffdac.  return v0 @kind object;
}
