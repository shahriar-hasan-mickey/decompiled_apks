record `okhttp3.OkHttpClient$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.Authenticator` `okhttp3.OkHttpClient$Builder.authenticator` @AccessFlag ;
  `okhttp3.Cache` `okhttp3.OkHttpClient$Builder.cache` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.callTimeout` @AccessFlag ;
  `okhttp3.internal.tls.CertificateChainCleaner` `okhttp3.OkHttpClient$Builder.certificateChainCleaner` @AccessFlag ;
  `okhttp3.CertificatePinner` `okhttp3.OkHttpClient$Builder.certificatePinner` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.connectTimeout` @AccessFlag ;
  `okhttp3.ConnectionPool` `okhttp3.OkHttpClient$Builder.connectionPool` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.connectionSpecs` @AccessFlag ;
  `okhttp3.CookieJar` `okhttp3.OkHttpClient$Builder.cookieJar` @AccessFlag ;
  `okhttp3.Dispatcher` `okhttp3.OkHttpClient$Builder.dispatcher` @AccessFlag ;
  `okhttp3.Dns` `okhttp3.OkHttpClient$Builder.dns` @AccessFlag ;
  `okhttp3.EventListener$Factory` `okhttp3.OkHttpClient$Builder.eventListenerFactory` @AccessFlag ;
  `boolean` `okhttp3.OkHttpClient$Builder.followRedirects` @AccessFlag ;
  `boolean` `okhttp3.OkHttpClient$Builder.followSslRedirects` @AccessFlag ;
  `javax.net.ssl.HostnameVerifier` `okhttp3.OkHttpClient$Builder.hostnameVerifier` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.interceptors` @AccessFlag FINAL;
  `okhttp3.internal.cache.InternalCache` `okhttp3.OkHttpClient$Builder.internalCache` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.networkInterceptors` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient$Builder.pingInterval` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.protocols` @AccessFlag ;
  `java.net.Proxy` `okhttp3.OkHttpClient$Builder.proxy` @AccessFlag ;
  `okhttp3.Authenticator` `okhttp3.OkHttpClient$Builder.proxyAuthenticator` @AccessFlag ;
  `java.net.ProxySelector` `okhttp3.OkHttpClient$Builder.proxySelector` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.readTimeout` @AccessFlag ;
  `boolean` `okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @AccessFlag ;
  `javax.net.SocketFactory` `okhttp3.OkHttpClient$Builder.socketFactory` @AccessFlag ;
  `javax.net.ssl.SSLSocketFactory` `okhttp3.OkHttpClient$Builder.sslSocketFactory` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.writeTimeout` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient$Builder` v2 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2fe3c0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2fe3c6.  v0:= new `java.util.ArrayList`;
  #L2fe3ca.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2fe3d0.  v2.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` := v0 @kind object;
  #L2fe3d4.  v0:= new `java.util.ArrayList`;
  #L2fe3d8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2fe3de.  v2.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` := v0 @kind object;
  #L2fe3e2.  v0:= new `okhttp3.Dispatcher`;
  #L2fe3e6.  call `<init>`(v0) @signature `Lokhttp3/Dispatcher;.<init>:()V` @kind direct;
  #L2fe3ec.  v2.`okhttp3.OkHttpClient$Builder.dispatcher` @type ^`okhttp3.Dispatcher` := v0 @kind object;
  #L2fe3f0.  v0:= `@@okhttp3.OkHttpClient.DEFAULT_PROTOCOLS` @type ^`java.util.List` @kind object;
  #L2fe3f4.  v2.`okhttp3.OkHttpClient$Builder.protocols` @type ^`java.util.List` := v0 @kind object;
  #L2fe3f8.  v0:= `@@okhttp3.OkHttpClient.DEFAULT_CONNECTION_SPECS` @type ^`java.util.List` @kind object;
  #L2fe3fc.  v2.`okhttp3.OkHttpClient$Builder.connectionSpecs` @type ^`java.util.List` := v0 @kind object;
  #L2fe400.  v0:= `@@okhttp3.EventListener.NONE` @type ^`okhttp3.EventListener` @kind object;
  #L2fe404.  call temp:= `factory`(v0) @signature `Lokhttp3/EventListener;.factory:(Lokhttp3/EventListener;)Lokhttp3/EventListener$Factory;` @kind static;
  #L2fe40a.  v0:= temp @kind object;
  #L2fe40c.  v2.`okhttp3.OkHttpClient$Builder.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` := v0 @kind object;
  #L2fe410.  call temp:= `getDefault`() @signature `Ljava/net/ProxySelector;.getDefault:()Ljava/net/ProxySelector;` @kind static;
  #L2fe416.  v0:= temp @kind object;
  #L2fe418.  v2.`okhttp3.OkHttpClient$Builder.proxySelector` @type ^`java.net.ProxySelector` := v0 @kind object;
  #L2fe41c.  if v0 != 0 then goto L2fe42e;
  #L2fe420.  v0:= new `okhttp3.internal.proxy.NullProxySelector`;
  #L2fe424.  call `<init>`(v0) @signature `Lokhttp3/internal/proxy/NullProxySelector;.<init>:()V` @kind direct;
  #L2fe42a.  v2.`okhttp3.OkHttpClient$Builder.proxySelector` @type ^`java.net.ProxySelector` := v0 @kind object;
  #L2fe42e.  v0:= `@@okhttp3.CookieJar.NO_COOKIES` @type ^`okhttp3.CookieJar` @kind object;
  #L2fe432.  v2.`okhttp3.OkHttpClient$Builder.cookieJar` @type ^`okhttp3.CookieJar` := v0 @kind object;
  #L2fe436.  call temp:= `getDefault`() @signature `Ljavax/net/SocketFactory;.getDefault:()Ljavax/net/SocketFactory;` @kind static;
  #L2fe43c.  v0:= temp @kind object;
  #L2fe43e.  v2.`okhttp3.OkHttpClient$Builder.socketFactory` @type ^`javax.net.SocketFactory` := v0 @kind object;
  #L2fe442.  v0:= `@@okhttp3.internal.tls.OkHostnameVerifier.INSTANCE` @type ^`okhttp3.internal.tls.OkHostnameVerifier` @kind object;
  #L2fe446.  v2.`okhttp3.OkHttpClient$Builder.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` := v0 @kind object;
  #L2fe44a.  v0:= `@@okhttp3.CertificatePinner.DEFAULT` @type ^`okhttp3.CertificatePinner` @kind object;
  #L2fe44e.  v2.`okhttp3.OkHttpClient$Builder.certificatePinner` @type ^`okhttp3.CertificatePinner` := v0 @kind object;
  #L2fe452.  v0:= `@@okhttp3.Authenticator.NONE` @type ^`okhttp3.Authenticator` @kind object;
  #L2fe456.  v2.`okhttp3.OkHttpClient$Builder.proxyAuthenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L2fe45a.  v2.`okhttp3.OkHttpClient$Builder.authenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L2fe45e.  v0:= new `okhttp3.ConnectionPool`;
  #L2fe462.  call `<init>`(v0) @signature `Lokhttp3/ConnectionPool;.<init>:()V` @kind direct;
  #L2fe468.  v2.`okhttp3.OkHttpClient$Builder.connectionPool` @type ^`okhttp3.ConnectionPool` := v0 @kind object;
  #L2fe46c.  v0:= `@@okhttp3.Dns.SYSTEM` @type ^`okhttp3.Dns` @kind object;
  #L2fe470.  v2.`okhttp3.OkHttpClient$Builder.dns` @type ^`okhttp3.Dns` := v0 @kind object;
  #L2fe474.  v0:= 1I;
  #L2fe476.  v2.`okhttp3.OkHttpClient$Builder.followSslRedirects` @type ^`boolean` := v0 @kind boolean;
  #L2fe47a.  v2.`okhttp3.OkHttpClient$Builder.followRedirects` @type ^`boolean` := v0 @kind boolean;
  #L2fe47e.  v2.`okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @type ^`boolean` := v0 @kind boolean;
  #L2fe482.  v0:= 0I;
  #L2fe484.  v2.`okhttp3.OkHttpClient$Builder.callTimeout` @type ^`int` := v0;
  #L2fe488.  v1:= 10000I;
  #L2fe48c.  v2.`okhttp3.OkHttpClient$Builder.connectTimeout` @type ^`int` := v1;
  #L2fe490.  v2.`okhttp3.OkHttpClient$Builder.readTimeout` @type ^`int` := v1;
  #L2fe494.  v2.`okhttp3.OkHttpClient$Builder.writeTimeout` @type ^`int` := v1;
  #L2fe498.  v2.`okhttp3.OkHttpClient$Builder.pingInterval` @type ^`int` := v0;
  #L2fe49c.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient$Builder` v3 @kind this, `okhttp3.OkHttpClient` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:(Lokhttp3/OkHttpClient;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2fe4b0.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2fe4b6.  v0:= new `java.util.ArrayList`;
  #L2fe4ba.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2fe4c0.  v3.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` := v0 @kind object;
  #L2fe4c4.  v1:= new `java.util.ArrayList`;
  #L2fe4c8.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2fe4ce.  v3.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` := v1 @kind object;
  #L2fe4d2.  v2:= v4.`okhttp3.OkHttpClient.dispatcher` @type ^`okhttp3.Dispatcher` @kind object;
  #L2fe4d6.  v3.`okhttp3.OkHttpClient$Builder.dispatcher` @type ^`okhttp3.Dispatcher` := v2 @kind object;
  #L2fe4da.  v2:= v4.`okhttp3.OkHttpClient.proxy` @type ^`java.net.Proxy` @kind object;
  #L2fe4de.  v3.`okhttp3.OkHttpClient$Builder.proxy` @type ^`java.net.Proxy` := v2 @kind object;
  #L2fe4e2.  v2:= v4.`okhttp3.OkHttpClient.protocols` @type ^`java.util.List` @kind object;
  #L2fe4e6.  v3.`okhttp3.OkHttpClient$Builder.protocols` @type ^`java.util.List` := v2 @kind object;
  #L2fe4ea.  v2:= v4.`okhttp3.OkHttpClient.connectionSpecs` @type ^`java.util.List` @kind object;
  #L2fe4ee.  v3.`okhttp3.OkHttpClient$Builder.connectionSpecs` @type ^`java.util.List` := v2 @kind object;
  #L2fe4f2.  v2:= v4.`okhttp3.OkHttpClient.interceptors` @type ^`java.util.List` @kind object;
  #L2fe4f6.  call temp:= `addAll`(v0, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2fe4fc.  v0:= v4.`okhttp3.OkHttpClient.networkInterceptors` @type ^`java.util.List` @kind object;
  #L2fe500.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2fe506.  v0:= v4.`okhttp3.OkHttpClient.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` @kind object;
  #L2fe50a.  v3.`okhttp3.OkHttpClient$Builder.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` := v0 @kind object;
  #L2fe50e.  v0:= v4.`okhttp3.OkHttpClient.proxySelector` @type ^`java.net.ProxySelector` @kind object;
  #L2fe512.  v3.`okhttp3.OkHttpClient$Builder.proxySelector` @type ^`java.net.ProxySelector` := v0 @kind object;
  #L2fe516.  v0:= v4.`okhttp3.OkHttpClient.cookieJar` @type ^`okhttp3.CookieJar` @kind object;
  #L2fe51a.  v3.`okhttp3.OkHttpClient$Builder.cookieJar` @type ^`okhttp3.CookieJar` := v0 @kind object;
  #L2fe51e.  v0:= v4.`okhttp3.OkHttpClient.internalCache` @type ^`okhttp3.internal.cache.InternalCache` @kind object;
  #L2fe522.  v3.`okhttp3.OkHttpClient$Builder.internalCache` @type ^`okhttp3.internal.cache.InternalCache` := v0 @kind object;
  #L2fe526.  v0:= v4.`okhttp3.OkHttpClient.cache` @type ^`okhttp3.Cache` @kind object;
  #L2fe52a.  v3.`okhttp3.OkHttpClient$Builder.cache` @type ^`okhttp3.Cache` := v0 @kind object;
  #L2fe52e.  v0:= v4.`okhttp3.OkHttpClient.socketFactory` @type ^`javax.net.SocketFactory` @kind object;
  #L2fe532.  v3.`okhttp3.OkHttpClient$Builder.socketFactory` @type ^`javax.net.SocketFactory` := v0 @kind object;
  #L2fe536.  v0:= v4.`okhttp3.OkHttpClient.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L2fe53a.  v3.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v0 @kind object;
  #L2fe53e.  v0:= v4.`okhttp3.OkHttpClient.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L2fe542.  v3.`okhttp3.OkHttpClient$Builder.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v0 @kind object;
  #L2fe546.  v0:= v4.`okhttp3.OkHttpClient.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L2fe54a.  v3.`okhttp3.OkHttpClient$Builder.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` := v0 @kind object;
  #L2fe54e.  v0:= v4.`okhttp3.OkHttpClient.certificatePinner` @type ^`okhttp3.CertificatePinner` @kind object;
  #L2fe552.  v3.`okhttp3.OkHttpClient$Builder.certificatePinner` @type ^`okhttp3.CertificatePinner` := v0 @kind object;
  #L2fe556.  v0:= v4.`okhttp3.OkHttpClient.proxyAuthenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L2fe55a.  v3.`okhttp3.OkHttpClient$Builder.proxyAuthenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L2fe55e.  v0:= v4.`okhttp3.OkHttpClient.authenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L2fe562.  v3.`okhttp3.OkHttpClient$Builder.authenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L2fe566.  v0:= v4.`okhttp3.OkHttpClient.connectionPool` @type ^`okhttp3.ConnectionPool` @kind object;
  #L2fe56a.  v3.`okhttp3.OkHttpClient$Builder.connectionPool` @type ^`okhttp3.ConnectionPool` := v0 @kind object;
  #L2fe56e.  v0:= v4.`okhttp3.OkHttpClient.dns` @type ^`okhttp3.Dns` @kind object;
  #L2fe572.  v3.`okhttp3.OkHttpClient$Builder.dns` @type ^`okhttp3.Dns` := v0 @kind object;
  #L2fe576.  v0:= v4.`okhttp3.OkHttpClient.followSslRedirects` @type ^`boolean` @kind boolean;
  #L2fe57a.  v3.`okhttp3.OkHttpClient$Builder.followSslRedirects` @type ^`boolean` := v0 @kind boolean;
  #L2fe57e.  v0:= v4.`okhttp3.OkHttpClient.followRedirects` @type ^`boolean` @kind boolean;
  #L2fe582.  v3.`okhttp3.OkHttpClient$Builder.followRedirects` @type ^`boolean` := v0 @kind boolean;
  #L2fe586.  v0:= v4.`okhttp3.OkHttpClient.retryOnConnectionFailure` @type ^`boolean` @kind boolean;
  #L2fe58a.  v3.`okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @type ^`boolean` := v0 @kind boolean;
  #L2fe58e.  v0:= v4.`okhttp3.OkHttpClient.callTimeout` @type ^`int`;
  #L2fe592.  v3.`okhttp3.OkHttpClient$Builder.callTimeout` @type ^`int` := v0;
  #L2fe596.  v0:= v4.`okhttp3.OkHttpClient.connectTimeout` @type ^`int`;
  #L2fe59a.  v3.`okhttp3.OkHttpClient$Builder.connectTimeout` @type ^`int` := v0;
  #L2fe59e.  v0:= v4.`okhttp3.OkHttpClient.readTimeout` @type ^`int`;
  #L2fe5a2.  v3.`okhttp3.OkHttpClient$Builder.readTimeout` @type ^`int` := v0;
  #L2fe5a6.  v0:= v4.`okhttp3.OkHttpClient.writeTimeout` @type ^`int`;
  #L2fe5aa.  v3.`okhttp3.OkHttpClient$Builder.writeTimeout` @type ^`int` := v0;
  #L2fe5ae.  v4:= v4.`okhttp3.OkHttpClient.pingInterval` @type ^`int`;
  #L2fe5b2.  v3.`okhttp3.OkHttpClient$Builder.pingInterval` @type ^`int` := v4;
  #L2fe5b6.  return @kind void;
}
procedure `okhttp3.OkHttpClient$Builder` `addInterceptor`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Interceptor` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.addInterceptor:(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fdde0.  if v2 == 0 then goto L2fddf0;
  #L2fdde4.  v0:= v1.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` @kind object;
  #L2fdde8.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fddee.  return v1 @kind object;
  #L2fddf0.  v2:= new `java.lang.IllegalArgumentException`;
  #L2fddf4.  v0:= "interceptor == null" @kind object;
  #L2fddf8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fddfe.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `addNetworkInterceptor`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Interceptor` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.addNetworkInterceptor:(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fde10.  if v2 == 0 then goto L2fde20;
  #L2fde14.  v0:= v1.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` @kind object;
  #L2fde18.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fde1e.  return v1 @kind object;
  #L2fde20.  v2:= new `java.lang.IllegalArgumentException`;
  #L2fde24.  v0:= "interceptor == null" @kind object;
  #L2fde28.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fde2e.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `authenticator`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Authenticator` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.authenticator:(Lokhttp3/Authenticator;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fde40.  v0:= "authenticator == null" @kind object;
  #L2fde44.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fde4a.  v1.`okhttp3.OkHttpClient$Builder.authenticator` @type ^`okhttp3.Authenticator` := v2 @kind object;
  #L2fde4e.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient` `build`(`okhttp3.OkHttpClient$Builder` v1 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.build:()Lokhttp3/OkHttpClient;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fddc4.  v0:= new `okhttp3.OkHttpClient`;
  #L2fddc8.  call `<init>`(v0, v1) @signature `Lokhttp3/OkHttpClient;.<init>:(Lokhttp3/OkHttpClient$Builder;)V` @kind direct;
  #L2fddce.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `cache`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `okhttp3.Cache` v1 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.cache:(Lokhttp3/Cache;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2fde60.  v0.`okhttp3.OkHttpClient$Builder.cache` @type ^`okhttp3.Cache` := v1 @kind object;
  #L2fde64.  v1:= 0I;
  #L2fde66.  v0.`okhttp3.OkHttpClient$Builder.internalCache` @type ^`okhttp3.internal.cache.InternalCache` := v1 @kind object;
  #L2fde6a.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `callTimeout`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.callTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fdeac.  v0:= "timeout" @kind object;
  #L2fdeb0.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L2fdeb6.  v2:= temp;
  #L2fdeb8.  v1.`okhttp3.OkHttpClient$Builder.callTimeout` @type ^`int` := v2;
  #L2fdebc.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `callTimeout`(`okhttp3.OkHttpClient$Builder` v3 @kind this, `java.time.Duration` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.callTimeout:(Ljava/time/Duration;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2fde7c.  call temp:= `toMillis`(v4) @signature `Ljava/time/Duration;.toMillis:()J` @kind virtual;
  #L2fde82.  v0:= temp @kind wide;
  #L2fde84.  v4:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2fde88.  v2:= "timeout" @kind object;
  #L2fde8c.  call temp:= `checkDuration`(v2, v0, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L2fde92.  v4:= temp;
  #L2fde94.  v3.`okhttp3.OkHttpClient$Builder.callTimeout` @type ^`int` := v4;
  #L2fde98.  return v3 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `certificatePinner`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.CertificatePinner` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.certificatePinner:(Lokhttp3/CertificatePinner;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fded0.  v0:= "certificatePinner == null" @kind object;
  #L2fded4.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fdeda.  v1.`okhttp3.OkHttpClient$Builder.certificatePinner` @type ^`okhttp3.CertificatePinner` := v2 @kind object;
  #L2fdede.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `connectTimeout`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.connectTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fdf20.  v0:= "timeout" @kind object;
  #L2fdf24.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L2fdf2a.  v2:= temp;
  #L2fdf2c.  v1.`okhttp3.OkHttpClient$Builder.connectTimeout` @type ^`int` := v2;
  #L2fdf30.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `connectTimeout`(`okhttp3.OkHttpClient$Builder` v3 @kind this, `java.time.Duration` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.connectTimeout:(Ljava/time/Duration;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2fdef0.  call temp:= `toMillis`(v4) @signature `Ljava/time/Duration;.toMillis:()J` @kind virtual;
  #L2fdef6.  v0:= temp @kind wide;
  #L2fdef8.  v4:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2fdefc.  v2:= "timeout" @kind object;
  #L2fdf00.  call temp:= `checkDuration`(v2, v0, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L2fdf06.  v4:= temp;
  #L2fdf08.  v3.`okhttp3.OkHttpClient$Builder.connectTimeout` @type ^`int` := v4;
  #L2fdf0c.  return v3 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `connectionPool`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.ConnectionPool` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.connectionPool:(Lokhttp3/ConnectionPool;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fdf44.  v0:= "connectionPool == null" @kind object;
  #L2fdf48.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fdf4e.  v1.`okhttp3.OkHttpClient$Builder.connectionPool` @type ^`okhttp3.ConnectionPool` := v2 @kind object;
  #L2fdf52.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `connectionSpecs`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `java.util.List` v1 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.connectionSpecs:(Ljava/util/List;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2fdf64.  call temp:= `immutableList`(v1) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L2fdf6a.  v1:= temp @kind object;
  #L2fdf6c.  v0.`okhttp3.OkHttpClient$Builder.connectionSpecs` @type ^`java.util.List` := v1 @kind object;
  #L2fdf70.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `cookieJar`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.CookieJar` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.cookieJar:(Lokhttp3/CookieJar;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fdf84.  v0:= "cookieJar == null" @kind object;
  #L2fdf88.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fdf8e.  v1.`okhttp3.OkHttpClient$Builder.cookieJar` @type ^`okhttp3.CookieJar` := v2 @kind object;
  #L2fdf92.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `dispatcher`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Dispatcher` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.dispatcher:(Lokhttp3/Dispatcher;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fdfa4.  if v2 == 0 then goto L2fdfae;
  #L2fdfa8.  v1.`okhttp3.OkHttpClient$Builder.dispatcher` @type ^`okhttp3.Dispatcher` := v2 @kind object;
  #L2fdfac.  return v1 @kind object;
  #L2fdfae.  v2:= new `java.lang.IllegalArgumentException`;
  #L2fdfb2.  v0:= "dispatcher == null" @kind object;
  #L2fdfb6.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fdfbc.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `dns`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Dns` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.dns:(Lokhttp3/Dns;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fdfd0.  v0:= "dns == null" @kind object;
  #L2fdfd4.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fdfda.  v1.`okhttp3.OkHttpClient$Builder.dns` @type ^`okhttp3.Dns` := v2 @kind object;
  #L2fdfde.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `eventListener`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.EventListener` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.eventListener:(Lokhttp3/EventListener;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fdff0.  v0:= "eventListener == null" @kind object;
  #L2fdff4.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fdffa.  call temp:= `factory`(v2) @signature `Lokhttp3/EventListener;.factory:(Lokhttp3/EventListener;)Lokhttp3/EventListener$Factory;` @kind static;
  #L2fe000.  v2:= temp @kind object;
  #L2fe002.  v1.`okhttp3.OkHttpClient$Builder.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` := v2 @kind object;
  #L2fe006.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `eventListenerFactory`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.EventListener$Factory` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.eventListenerFactory:(Lokhttp3/EventListener$Factory;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fe018.  v0:= "eventListenerFactory == null" @kind object;
  #L2fe01c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fe022.  v1.`okhttp3.OkHttpClient$Builder.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` := v2 @kind object;
  #L2fe026.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `followRedirects`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/OkHttpClient$Builder;.followRedirects:(Z)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2fe038.  v0.`okhttp3.OkHttpClient$Builder.followRedirects` @type ^`boolean` := v1 @kind boolean;
  #L2fe03c.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `followSslRedirects`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/OkHttpClient$Builder;.followSslRedirects:(Z)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2fe050.  v0.`okhttp3.OkHttpClient$Builder.followSslRedirects` @type ^`boolean` := v1 @kind boolean;
  #L2fe054.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `hostnameVerifier`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `javax.net.ssl.HostnameVerifier` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.hostnameVerifier:(Ljavax/net/ssl/HostnameVerifier;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fe068.  v0:= "hostnameVerifier == null" @kind object;
  #L2fe06c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fe072.  v1.`okhttp3.OkHttpClient$Builder.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` := v2 @kind object;
  #L2fe076.  return v1 @kind object;
}
procedure `java.util.List` `interceptors`(`okhttp3.OkHttpClient$Builder` v1 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.interceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fdd94.  v0:= v1.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` @kind object;
  #L2fdd98.  return v0 @kind object;
}
procedure `java.util.List` `networkInterceptors`(`okhttp3.OkHttpClient$Builder` v1 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.networkInterceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fddac.  v0:= v1.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` @kind object;
  #L2fddb0.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `pingInterval`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.pingInterval:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fe0b8.  v0:= "interval" @kind object;
  #L2fe0bc.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L2fe0c2.  v2:= temp;
  #L2fe0c4.  v1.`okhttp3.OkHttpClient$Builder.pingInterval` @type ^`int` := v2;
  #L2fe0c8.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `pingInterval`(`okhttp3.OkHttpClient$Builder` v3 @kind this, `java.time.Duration` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.pingInterval:(Ljava/time/Duration;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2fe088.  call temp:= `toMillis`(v4) @signature `Ljava/time/Duration;.toMillis:()J` @kind virtual;
  #L2fe08e.  v0:= temp @kind wide;
  #L2fe090.  v4:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2fe094.  v2:= "timeout" @kind object;
  #L2fe098.  call temp:= `checkDuration`(v2, v0, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L2fe09e.  v4:= temp;
  #L2fe0a0.  v3.`okhttp3.OkHttpClient$Builder.pingInterval` @type ^`int` := v4;
  #L2fe0a4.  return v3 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `protocols`(`okhttp3.OkHttpClient$Builder` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.protocols:(Ljava/util/List;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2fe0dc.  v0:= new `java.util.ArrayList`;
  #L2fe0e0.  call `<init>`(v0, v4) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2fe0e6.  v4:= `@@okhttp3.Protocol.H2_PRIOR_KNOWLEDGE` @type ^`okhttp3.Protocol` @kind object;
  #L2fe0ea.  call temp:= `contains`(v0, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2fe0f0.  v1:= temp;
  #L2fe0f2.  if v1 != 0 then goto L2fe136;
  #L2fe0f6.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L2fe0fa.  call temp:= `contains`(v0, v1) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2fe100.  v1:= temp;
  #L2fe102.  if v1 == 0 then goto L2fe108;
  #L2fe106.  goto L2fe136;
  #L2fe108.  v4:= new `java.lang.IllegalArgumentException`;
  #L2fe10c.  v1:= new `java.lang.StringBuilder`;
  #L2fe110.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fe116.  v2:= "protocols must contain h2_prior_knowledge or http/1.1: " @kind object;
  #L2fe11a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe120.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe126.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fe12c.  v0:= temp @kind object;
  #L2fe12e.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fe134.  throw v4;
  #L2fe136.  call temp:= `contains`(v0, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2fe13c.  v4:= temp;
  #L2fe13e.  if v4 == 0 then goto L2fe180;
  #L2fe142.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fe148.  v4:= temp;
  #L2fe14a.  v1:= 1I;
  #L2fe14c.  if v4 > v1 then goto L2fe152;
  #L2fe150.  goto L2fe180;
  #L2fe152.  v4:= new `java.lang.IllegalArgumentException`;
  #L2fe156.  v1:= new `java.lang.StringBuilder`;
  #L2fe15a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fe160.  v2:= "protocols containing h2_prior_knowledge cannot use other protocols: " @kind object;
  #L2fe164.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe16a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe170.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fe176.  v0:= temp @kind object;
  #L2fe178.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fe17e.  throw v4;
  #L2fe180.  v4:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L2fe184.  call temp:= `contains`(v0, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2fe18a.  v4:= temp;
  #L2fe18c.  if v4 != 0 then goto L2fe1c6;
  #L2fe190.  v4:= 0I;
  #L2fe192.  call temp:= `contains`(v0, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2fe198.  v4:= temp;
  #L2fe19a.  if v4 != 0 then goto L2fe1b6;
  #L2fe19e.  v4:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L2fe1a2.  call temp:= `remove`(v0, v4) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2fe1a8.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L2fe1ae.  v4:= temp @kind object;
  #L2fe1b0.  v3.`okhttp3.OkHttpClient$Builder.protocols` @type ^`java.util.List` := v4 @kind object;
  #L2fe1b4.  return v3 @kind object;
  #L2fe1b6.  v4:= new `java.lang.IllegalArgumentException`;
  #L2fe1ba.  v0:= "protocols must not contain null" @kind object;
  #L2fe1be.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fe1c4.  throw v4;
  #L2fe1c6.  v4:= new `java.lang.IllegalArgumentException`;
  #L2fe1ca.  v1:= new `java.lang.StringBuilder`;
  #L2fe1ce.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fe1d4.  v2:= "protocols must not contain http/1.0: " @kind object;
  #L2fe1d8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe1de.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe1e4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fe1ea.  v0:= temp @kind object;
  #L2fe1ec.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fe1f2.  throw v4;
}
procedure `okhttp3.OkHttpClient$Builder` `proxy`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `java.net.Proxy` v1 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.proxy:(Ljava/net/Proxy;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2fe204.  v0.`okhttp3.OkHttpClient$Builder.proxy` @type ^`java.net.Proxy` := v1 @kind object;
  #L2fe208.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `proxyAuthenticator`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Authenticator` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.proxyAuthenticator:(Lokhttp3/Authenticator;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fe21c.  v0:= "proxyAuthenticator == null" @kind object;
  #L2fe220.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fe226.  v1.`okhttp3.OkHttpClient$Builder.proxyAuthenticator` @type ^`okhttp3.Authenticator` := v2 @kind object;
  #L2fe22a.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `proxySelector`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `java.net.ProxySelector` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.proxySelector:(Ljava/net/ProxySelector;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fe23c.  v0:= "proxySelector == null" @kind object;
  #L2fe240.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fe246.  v1.`okhttp3.OkHttpClient$Builder.proxySelector` @type ^`java.net.ProxySelector` := v2 @kind object;
  #L2fe24a.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `readTimeout`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.readTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fe28c.  v0:= "timeout" @kind object;
  #L2fe290.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L2fe296.  v2:= temp;
  #L2fe298.  v1.`okhttp3.OkHttpClient$Builder.readTimeout` @type ^`int` := v2;
  #L2fe29c.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `readTimeout`(`okhttp3.OkHttpClient$Builder` v3 @kind this, `java.time.Duration` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.readTimeout:(Ljava/time/Duration;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2fe25c.  call temp:= `toMillis`(v4) @signature `Ljava/time/Duration;.toMillis:()J` @kind virtual;
  #L2fe262.  v0:= temp @kind wide;
  #L2fe264.  v4:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2fe268.  v2:= "timeout" @kind object;
  #L2fe26c.  call temp:= `checkDuration`(v2, v0, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L2fe272.  v4:= temp;
  #L2fe274.  v3.`okhttp3.OkHttpClient$Builder.readTimeout` @type ^`int` := v4;
  #L2fe278.  return v3 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `retryOnConnectionFailure`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/OkHttpClient$Builder;.retryOnConnectionFailure:(Z)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2fe2b0.  v0.`okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @type ^`boolean` := v1 @kind boolean;
  #L2fe2b4.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `socketFactory`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `javax.net.SocketFactory` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.socketFactory:(Ljavax/net/SocketFactory;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fe2c8.  v0:= "socketFactory == null" @kind object;
  #L2fe2cc.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fe2d2.  v0:= instanceof @variable v2 @type ^`javax.net.ssl.SSLSocketFactory` @kind boolean;
  #L2fe2d6.  if v0 != 0 then goto L2fe2e0;
  #L2fe2da.  v1.`okhttp3.OkHttpClient$Builder.socketFactory` @type ^`javax.net.SocketFactory` := v2 @kind object;
  #L2fe2de.  return v1 @kind object;
  #L2fe2e0.  v2:= new `java.lang.IllegalArgumentException`;
  #L2fe2e4.  v0:= "socketFactory instanceof SSLSocketFactory" @kind object;
  #L2fe2e8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fe2ee.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `sslSocketFactory`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `javax.net.ssl.SSLSocketFactory` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.sslSocketFactory:(Ljavax/net/ssl/SSLSocketFactory;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fe300.  v0:= "sslSocketFactory == null" @kind object;
  #L2fe304.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fe30a.  v1.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v2 @kind object;
  #L2fe30e.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L2fe314.  v0:= temp @kind object;
  #L2fe316.  call temp:= `buildCertificateChainCleaner`(v0, v2) @signature `Lokhttp3/internal/platform/Platform;.buildCertificateChainCleaner:(Ljavax/net/ssl/SSLSocketFactory;)Lokhttp3/internal/tls/CertificateChainCleaner;` @kind virtual;
  #L2fe31c.  v2:= temp @kind object;
  #L2fe31e.  v1.`okhttp3.OkHttpClient$Builder.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v2 @kind object;
  #L2fe322.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `sslSocketFactory`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `javax.net.ssl.SSLSocketFactory` v2 @kind object, `javax.net.ssl.X509TrustManager` v3 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.sslSocketFactory:(Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/X509TrustManager;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fe334.  v0:= "sslSocketFactory == null" @kind object;
  #L2fe338.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fe33e.  v0:= "trustManager == null" @kind object;
  #L2fe342.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fe348.  v1.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v2 @kind object;
  #L2fe34c.  call temp:= `get`(v3) @signature `Lokhttp3/internal/tls/CertificateChainCleaner;.get:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner;` @kind static;
  #L2fe352.  v2:= temp @kind object;
  #L2fe354.  v1.`okhttp3.OkHttpClient$Builder.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v2 @kind object;
  #L2fe358.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `writeTimeout`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.writeTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fe39c.  v0:= "timeout" @kind object;
  #L2fe3a0.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L2fe3a6.  v2:= temp;
  #L2fe3a8.  v1.`okhttp3.OkHttpClient$Builder.writeTimeout` @type ^`int` := v2;
  #L2fe3ac.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `writeTimeout`(`okhttp3.OkHttpClient$Builder` v3 @kind this, `java.time.Duration` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.writeTimeout:(Ljava/time/Duration;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2fe36c.  call temp:= `toMillis`(v4) @signature `Ljava/time/Duration;.toMillis:()J` @kind virtual;
  #L2fe372.  v0:= temp @kind wide;
  #L2fe374.  v4:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2fe378.  v2:= "timeout" @kind object;
  #L2fe37c.  call temp:= `checkDuration`(v2, v0, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L2fe382.  v4:= temp;
  #L2fe384.  v3.`okhttp3.OkHttpClient$Builder.writeTimeout` @type ^`int` := v4;
  #L2fe388.  return v3 @kind object;
}
