record `okhttp3.Response` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `okhttp3.ResponseBody` `okhttp3.Response.body` @AccessFlag FINAL;
  `okhttp3.CacheControl` `okhttp3.Response.cacheControl` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.Response` `okhttp3.Response.cacheResponse` @AccessFlag FINAL;
  `int` `okhttp3.Response.code` @AccessFlag FINAL;
  `okhttp3.internal.connection.Exchange` `okhttp3.Response.exchange` @AccessFlag FINAL;
  `okhttp3.Handshake` `okhttp3.Response.handshake` @AccessFlag FINAL;
  `okhttp3.Headers` `okhttp3.Response.headers` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.Response.message` @AccessFlag FINAL;
  `okhttp3.Response` `okhttp3.Response.networkResponse` @AccessFlag FINAL;
  `okhttp3.Response` `okhttp3.Response.priorResponse` @AccessFlag FINAL;
  `okhttp3.Protocol` `okhttp3.Response.protocol` @AccessFlag FINAL;
  `long` `okhttp3.Response.receivedResponseAtMillis` @AccessFlag FINAL;
  `okhttp3.Request` `okhttp3.Response.request` @AccessFlag FINAL;
  `long` `okhttp3.Response.sentRequestAtMillis` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.Response` v2 @kind this, `okhttp3.Response$Builder` v3 @kind object) @signature `Lokhttp3/Response;.<init>:(Lokhttp3/Response$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3005c4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3005ca.  v0:= v3.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` @kind object;
  #L3005ce.  v2.`okhttp3.Response.request` @type ^`okhttp3.Request` := v0 @kind object;
  #L3005d2.  v0:= v3.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L3005d6.  v2.`okhttp3.Response.protocol` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L3005da.  v0:= v3.`okhttp3.Response$Builder.code` @type ^`int`;
  #L3005de.  v2.`okhttp3.Response.code` @type ^`int` := v0;
  #L3005e2.  v0:= v3.`okhttp3.Response$Builder.message` @type ^`java.lang.String` @kind object;
  #L3005e6.  v2.`okhttp3.Response.message` @type ^`java.lang.String` := v0 @kind object;
  #L3005ea.  v0:= v3.`okhttp3.Response$Builder.handshake` @type ^`okhttp3.Handshake` @kind object;
  #L3005ee.  v2.`okhttp3.Response.handshake` @type ^`okhttp3.Handshake` := v0 @kind object;
  #L3005f2.  v0:= v3.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L3005f6.  call temp:= `build`(v0) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L3005fc.  v0:= temp @kind object;
  #L3005fe.  v2.`okhttp3.Response.headers` @type ^`okhttp3.Headers` := v0 @kind object;
  #L300602.  v0:= v3.`okhttp3.Response$Builder.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L300606.  v2.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` := v0 @kind object;
  #L30060a.  v0:= v3.`okhttp3.Response$Builder.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L30060e.  v2.`okhttp3.Response.networkResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L300612.  v0:= v3.`okhttp3.Response$Builder.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L300616.  v2.`okhttp3.Response.cacheResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L30061a.  v0:= v3.`okhttp3.Response$Builder.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L30061e.  v2.`okhttp3.Response.priorResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L300622.  v0:= v3.`okhttp3.Response$Builder.sentRequestAtMillis` @type ^`long` @kind wide;
  #L300626.  v2.`okhttp3.Response.sentRequestAtMillis` @type ^`long` := v0 @kind wide;
  #L30062a.  v0:= v3.`okhttp3.Response$Builder.receivedResponseAtMillis` @type ^`long` @kind wide;
  #L30062e.  v2.`okhttp3.Response.receivedResponseAtMillis` @type ^`long` := v0 @kind wide;
  #L300632.  v3:= v3.`okhttp3.Response$Builder.exchange` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L300636.  v2.`okhttp3.Response.exchange` @type ^`okhttp3.internal.connection.Exchange` := v3 @kind object;
  #L30063a.  return @kind void;
}
procedure `okhttp3.ResponseBody` `body`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30053c.  v0:= v1.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L300540.  return v0 @kind object;
}
procedure `okhttp3.CacheControl` `cacheControl`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.cacheControl:()Lokhttp3/CacheControl;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L300418.  v0:= v1.`okhttp3.Response.cacheControl` @type ^`okhttp3.CacheControl` @kind object;
  #L30041c.  if v0 == 0 then goto L300422;
  #L300420.  goto L300432;
  #L300422.  v0:= v1.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L300426.  call temp:= `parse`(v0) @signature `Lokhttp3/CacheControl;.parse:(Lokhttp3/Headers;)Lokhttp3/CacheControl;` @kind static;
  #L30042c.  v0:= temp @kind object;
  #L30042e.  v1.`okhttp3.Response.cacheControl` @type ^`okhttp3.CacheControl` := v0 @kind object;
  #L300432.  return v0 @kind object;
}
procedure `okhttp3.Response` `cacheResponse`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.cacheResponse:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3004d8.  v0:= v1.`okhttp3.Response.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L3004dc.  return v0 @kind object;
}
procedure `java.util.List` `challenges`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.challenges:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30037c.  v0:= v2.`okhttp3.Response.code` @type ^`int`;
  #L300380.  v1:= 401I;
  #L300384.  if v0 != v1 then goto L30038e;
  #L300388.  v0:= "WWW-Authenticate" @kind object;
  #L30038c.  goto L30039a;
  #L30038e.  v1:= 407I;
  #L300392.  if v0 != v1 then goto L3003ac;
  #L300396.  v0:= "Proxy-Authenticate" @kind object;
  #L30039a.  call temp:= `headers`(v2) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L3003a0.  v1:= temp @kind object;
  #L3003a2.  call temp:= `parseChallenges`(v1, v0) @signature `Lokhttp3/internal/http/HttpHeaders;.parseChallenges:(Lokhttp3/Headers;Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L3003a8.  v0:= temp @kind object;
  #L3003aa.  return v0 @kind object;
  #L3003ac.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L3003b2.  v0:= temp @kind object;
  #L3003b4.  return v0 @kind object;
}
procedure `void` `close`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30064c.  v0:= v2.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L300650.  if v0 == 0 then goto L30065c;
  #L300654.  call `close`(v0) @signature `Lokhttp3/ResponseBody;.close:()V` @kind virtual;
  #L30065a.  return @kind void;
  #L30065c.  v0:= new `java.lang.IllegalStateException`;
  #L300660.  v1:= "response is not eligible for a body and must not be closed" @kind object;
  #L300664.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30066a.  throw v0;
}
procedure `int` `code`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.code:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L300284.  v0:= v1.`okhttp3.Response.code` @type ^`int`;
  #L300288.  return v0;
}
procedure `okhttp3.Handshake` `handshake`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.handshake:()Lokhttp3/Handshake;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L300444.  v0:= v1.`okhttp3.Response.handshake` @type ^`okhttp3.Handshake` @kind object;
  #L300448.  return v0 @kind object;
}
procedure `java.lang.String` `header`(`okhttp3.Response` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30029c.  v0:= 0I;
  #L30029e.  call temp:= `header`(v1, v2, v0) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L3002a4.  v2:= temp @kind object;
  #L3002a6.  return v2 @kind object;
}
procedure `java.lang.String` `header`(`okhttp3.Response` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3002b8.  v0:= v1.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L3002bc.  call temp:= `get`(v0, v2) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L3002c2.  v2:= temp @kind object;
  #L3002c4.  if v2 == 0 then goto L3002ca;
  #L3002c8.  v3:= v2 @kind object;
  #L3002ca.  return v3 @kind object;
}
procedure `java.util.List` `headers`(`okhttp3.Response` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Response;.headers:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3003c8.  v0:= v1.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L3003cc.  call temp:= `values`(v0, v2) @signature `Lokhttp3/Headers;.values:(Ljava/lang/String;)Ljava/util/List;` @kind virtual;
  #L3003d2.  v2:= temp @kind object;
  #L3003d4.  return v2 @kind object;
}
procedure `okhttp3.Headers` `headers`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30045c.  v0:= v1.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L300460.  return v0 @kind object;
}
procedure `boolean` `isRedirect`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.isRedirect:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30020c.  v0:= v2.`okhttp3.Response.code` @type ^`int`;
  #L300210.  v1:= 307I;
  #L300214.  if v0 == v1 then goto L30022a;
  #L300218.  v1:= 308I;
  #L30021c.  if v0 == v1 then goto L30022a;
  #L300220.  goto L300230;
  #L300226.  v0:= 0I;
  #L300228.  return v0;
  #L30022a.  v0:= 1I;
  #L30022c.  return v0;
  #L30022e.  
  #L300230.  switch v0
                  | 300 => goto L30022a
                  | 301 => goto L30022a
                  | 302 => goto L30022a
                  | 303 => goto L30022a
                  | else => goto L300226;
}
procedure `boolean` `isSuccessful`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.isSuccessful:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L300258.  v0:= v2.`okhttp3.Response.code` @type ^`int`;
  #L30025c.  v1:= 200I;
  #L300260.  if v0 < v1 then goto L300270;
  #L300264.  v1:= 300I;
  #L300268.  if v0 >= v1 then goto L300270;
  #L30026c.  v0:= 1I;
  #L30026e.  goto L300272;
  #L300270.  v0:= 0I;
  #L300272.  return v0;
}
procedure `java.lang.String` `message`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.message:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3002dc.  v0:= v1.`okhttp3.Response.message` @type ^`java.lang.String` @kind object;
  #L3002e0.  return v0 @kind object;
}
procedure `okhttp3.Response` `networkResponse`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.networkResponse:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3004f0.  v0:= v1.`okhttp3.Response.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L3004f4.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `newBuilder`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L300520.  v0:= new `okhttp3.Response$Builder`;
  #L300524.  call `<init>`(v0, v1) @signature `Lokhttp3/Response$Builder;.<init>:(Lokhttp3/Response;)V` @kind direct;
  #L30052a.  return v0 @kind object;
}
procedure `okhttp3.ResponseBody` `peekBody`(`okhttp3.Response` v4 @kind this, `long` v5 ) @signature `Lokhttp3/Response;.peekBody:(J)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L300554.  v0:= v4.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L300558.  call temp:= `source`(v0) @signature `Lokhttp3/ResponseBody;.source:()Lokio/o;` @kind virtual;
  #L30055e.  v0:= temp @kind object;
  #L300560.  call temp:= `peek`(v0) @signature `Lokio/o;.peek:()Lokio/o;` @kind interface;
  #L300566.  v0:= temp @kind object;
  #L300568.  v1:= new `okio.k`;
  #L30056c.  call `<init>`(v1) @signature `Lokio/k;.<init>:()V` @kind direct;
  #L300572.  call temp:= `request`(v0, v5) @signature `Lokio/o;.request:(J)Z` @kind interface;
  #L300578.  call temp:= `N`(v0) @signature `Lokio/o;.N:()Lokio/k;` @kind interface;
  #L30057e.  v2:= temp @kind object;
  #L300580.  call temp:= `f1`(v2) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L300586.  v2:= temp @kind wide;
  #L300588.  call temp:= `min`(v5, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L30058e.  v5:= temp @kind wide;
  #L300590.  call temp:= `m1`(v1, v0, v5) @signature `Lokio/k;.m1:(Lokio/i0;J)Lokio/n;` @kind virtual;
  #L300596.  v5:= v4.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L30059a.  call temp:= `contentType`(v5) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L3005a0.  v5:= temp @kind object;
  #L3005a2.  call temp:= `f1`(v1) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L3005a8.  v2:= temp @kind wide;
  #L3005aa.  call temp:= `create`(v5, v2, v1) @signature `Lokhttp3/ResponseBody;.create:(Lokhttp3/MediaType;JLokio/o;)Lokhttp3/ResponseBody;` @kind static;
  #L3005b0.  v5:= temp @kind object;
  #L3005b2.  return v5 @kind object;
}
procedure `okhttp3.Response` `priorResponse`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L300508.  v0:= v1.`okhttp3.Response.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L30050c.  return v0 @kind object;
}
procedure `okhttp3.Protocol` `protocol`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.protocol:()Lokhttp3/Protocol;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3004a8.  v0:= v1.`okhttp3.Response.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L3004ac.  return v0 @kind object;
}
procedure `long` `receivedResponseAtMillis`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.receivedResponseAtMillis:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3003e8.  v0:= v2.`okhttp3.Response.receivedResponseAtMillis` @type ^`long` @kind wide;
  #L3003ec.  return v0 @kind wide;
}
procedure `okhttp3.Request` `request`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3004c0.  v0:= v1.`okhttp3.Response.request` @type ^`okhttp3.Request` @kind object;
  #L3004c4.  return v0 @kind object;
}
procedure `long` `sentRequestAtMillis`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.sentRequestAtMillis:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L300400.  v0:= v2.`okhttp3.Response.sentRequestAtMillis` @type ^`long` @kind wide;
  #L300404.  return v0 @kind wide;
}
procedure `java.lang.String` `toString`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3002f4.  v0:= new `java.lang.StringBuilder`;
  #L3002f8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3002fe.  v1:= "Response{protocol=" @kind object;
  #L300302.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L300308.  v1:= v2.`okhttp3.Response.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L30030c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L300312.  v1:= ", code=" @kind object;
  #L300316.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30031c.  v1:= v2.`okhttp3.Response.code` @type ^`int`;
  #L300320.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L300326.  v1:= ", message=" @kind object;
  #L30032a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L300330.  v1:= v2.`okhttp3.Response.message` @type ^`java.lang.String` @kind object;
  #L300334.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30033a.  v1:= ", url=" @kind object;
  #L30033e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L300344.  v1:= v2.`okhttp3.Response.request` @type ^`okhttp3.Request` @kind object;
  #L300348.  call temp:= `url`(v1) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L30034e.  v1:= temp @kind object;
  #L300350.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L300356.  v1:= 125I;
  #L30035a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L300360.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L300366.  v0:= temp @kind object;
  #L300368.  return v0 @kind object;
}
procedure `okhttp3.Headers` `trailers`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.trailers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L300474.  v0:= v2.`okhttp3.Response.exchange` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L300478.  if v0 == 0 then goto L300486;
  #L30047c.  call temp:= `trailers`(v0) @signature `Lokhttp3/internal/connection/Exchange;.trailers:()Lokhttp3/Headers;` @kind virtual;
  #L300482.  v0:= temp @kind object;
  #L300484.  return v0 @kind object;
  #L300486.  v0:= new `java.lang.IllegalStateException`;
  #L30048a.  v1:= "trailers not available" @kind object;
  #L30048e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L300494.  throw v0;
}
