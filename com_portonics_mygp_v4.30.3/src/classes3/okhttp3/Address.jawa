record `okhttp3.Address` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.CertificatePinner` `okhttp3.Address.certificatePinner` @AccessFlag FINAL;
  `java.util.List` `okhttp3.Address.connectionSpecs` @AccessFlag FINAL;
  `okhttp3.Dns` `okhttp3.Address.dns` @AccessFlag FINAL;
  `javax.net.ssl.HostnameVerifier` `okhttp3.Address.hostnameVerifier` @AccessFlag FINAL;
  `java.util.List` `okhttp3.Address.protocols` @AccessFlag FINAL;
  `java.net.Proxy` `okhttp3.Address.proxy` @AccessFlag FINAL;
  `okhttp3.Authenticator` `okhttp3.Address.proxyAuthenticator` @AccessFlag FINAL;
  `java.net.ProxySelector` `okhttp3.Address.proxySelector` @AccessFlag FINAL;
  `javax.net.SocketFactory` `okhttp3.Address.socketFactory` @AccessFlag FINAL;
  `javax.net.ssl.SSLSocketFactory` `okhttp3.Address.sslSocketFactory` @AccessFlag FINAL;
  `okhttp3.HttpUrl` `okhttp3.Address.url` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.Address` v2 @kind this, `java.lang.String` v3 @kind object, `int` v4 , `okhttp3.Dns` v5 @kind object, `javax.net.SocketFactory` v6 @kind object, `javax.net.ssl.SSLSocketFactory` v7 @kind object, `javax.net.ssl.HostnameVerifier` v8 @kind object, `okhttp3.CertificatePinner` v9 @kind object, `okhttp3.Authenticator` v10 @kind object, `java.net.Proxy` v11 @kind object, `java.util.List` v12 @kind object, `java.util.List` v13 @kind object, `java.net.ProxySelector` v14 @kind object) @signature `Lokhttp3/Address;.<init>:(Ljava/lang/String;ILokhttp3/Dns;Ljavax/net/SocketFactory;Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/HostnameVerifier;Lokhttp3/CertificatePinner;Lokhttp3/Authenticator;Ljava/net/Proxy;Ljava/util/List;Ljava/util/List;Ljava/net/ProxySelector;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2f4e68.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f4e6e.  v0:= new `okhttp3.HttpUrl$Builder`;
  #L2f4e72.  call `<init>`(v0) @signature `Lokhttp3/HttpUrl$Builder;.<init>:()V` @kind direct;
  #L2f4e78.  if v7 == 0 then goto L2f4e82;
  #L2f4e7c.  v1:= "https" @kind object;
  #L2f4e80.  goto L2f4e86;
  #L2f4e82.  v1:= "http" @kind object;
  #L2f4e86.  call temp:= `scheme`(v0, v1) @signature `Lokhttp3/HttpUrl$Builder;.scheme:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2f4e8c.  v0:= temp @kind object;
  #L2f4e8e.  call temp:= `host`(v0, v3) @signature `Lokhttp3/HttpUrl$Builder;.host:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2f4e94.  v3:= temp @kind object;
  #L2f4e96.  call temp:= `port`(v3, v4) @signature `Lokhttp3/HttpUrl$Builder;.port:(I)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2f4e9c.  v3:= temp @kind object;
  #L2f4e9e.  call temp:= `build`(v3) @signature `Lokhttp3/HttpUrl$Builder;.build:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2f4ea4.  v3:= temp @kind object;
  #L2f4ea6.  v2.`okhttp3.Address.url` @type ^`okhttp3.HttpUrl` := v3 @kind object;
  #L2f4eaa.  v3:= "dns == null" @kind object;
  #L2f4eae.  call temp:= `requireNonNull`(v5, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2f4eb4.  v2.`okhttp3.Address.dns` @type ^`okhttp3.Dns` := v5 @kind object;
  #L2f4eb8.  v3:= "socketFactory == null" @kind object;
  #L2f4ebc.  call temp:= `requireNonNull`(v6, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2f4ec2.  v2.`okhttp3.Address.socketFactory` @type ^`javax.net.SocketFactory` := v6 @kind object;
  #L2f4ec6.  v3:= "proxyAuthenticator == null" @kind object;
  #L2f4eca.  call temp:= `requireNonNull`(v10, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2f4ed0.  v2.`okhttp3.Address.proxyAuthenticator` @type ^`okhttp3.Authenticator` := v10 @kind object;
  #L2f4ed4.  v3:= "protocols == null" @kind object;
  #L2f4ed8.  call temp:= `requireNonNull`(v12, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2f4ede.  call temp:= `immutableList`(v12) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L2f4ee4.  v3:= temp @kind object;
  #L2f4ee6.  v2.`okhttp3.Address.protocols` @type ^`java.util.List` := v3 @kind object;
  #L2f4eea.  v3:= "connectionSpecs == null" @kind object;
  #L2f4eee.  call temp:= `requireNonNull`(v13, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2f4ef4.  call temp:= `immutableList`(v13) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L2f4efa.  v3:= temp @kind object;
  #L2f4efc.  v2.`okhttp3.Address.connectionSpecs` @type ^`java.util.List` := v3 @kind object;
  #L2f4f00.  v3:= "proxySelector == null" @kind object;
  #L2f4f04.  call temp:= `requireNonNull`(v14, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2f4f0a.  v2.`okhttp3.Address.proxySelector` @type ^`java.net.ProxySelector` := v14 @kind object;
  #L2f4f0e.  v2.`okhttp3.Address.proxy` @type ^`java.net.Proxy` := v11 @kind object;
  #L2f4f12.  v2.`okhttp3.Address.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v7 @kind object;
  #L2f4f16.  v2.`okhttp3.Address.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` := v8 @kind object;
  #L2f4f1a.  v2.`okhttp3.Address.certificatePinner` @type ^`okhttp3.CertificatePinner` := v9 @kind object;
  #L2f4f1e.  return @kind void;
}
procedure `okhttp3.CertificatePinner` `certificatePinner`(`okhttp3.Address` v1 @kind this) @signature `Lokhttp3/Address;.certificatePinner:()Lokhttp3/CertificatePinner;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4e20.  v0:= v1.`okhttp3.Address.certificatePinner` @type ^`okhttp3.CertificatePinner` @kind object;
  #L2f4e24.  return v0 @kind object;
}
procedure `java.util.List` `connectionSpecs`(`okhttp3.Address` v1 @kind this) @signature `Lokhttp3/Address;.connectionSpecs:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4d90.  v0:= v1.`okhttp3.Address.connectionSpecs` @type ^`java.util.List` @kind object;
  #L2f4d94.  return v0 @kind object;
}
procedure `okhttp3.Dns` `dns`(`okhttp3.Address` v1 @kind this) @signature `Lokhttp3/Address;.dns:()Lokhttp3/Dns;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4e38.  v0:= v1.`okhttp3.Address.dns` @type ^`okhttp3.Dns` @kind object;
  #L2f4e3c.  return v0 @kind object;
}
procedure `boolean` `equals`(`okhttp3.Address` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lokhttp3/Address;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f4acc.  v0:= instanceof @variable v3 @type ^`okhttp3.Address` @kind boolean;
  #L2f4ad0.  if v0 == 0 then goto L2f4afc;
  #L2f4ad4.  v0:= v2.`okhttp3.Address.url` @type ^`okhttp3.HttpUrl` @kind object;
  #L2f4ad8.  v3:= (`okhttp3.Address`) v3 @kind object;
  #L2f4adc.  v1:= v3.`okhttp3.Address.url` @type ^`okhttp3.HttpUrl` @kind object;
  #L2f4ae0.  call temp:= `equals`(v0, v1) @signature `Lokhttp3/HttpUrl;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f4ae6.  v0:= temp;
  #L2f4ae8.  if v0 == 0 then goto L2f4afc;
  #L2f4aec.  call temp:= `equalsNonHost`(v2, v3) @signature `Lokhttp3/Address;.equalsNonHost:(Lokhttp3/Address;)Z` @kind virtual;
  #L2f4af2.  v3:= temp;
  #L2f4af4.  if v3 == 0 then goto L2f4afc;
  #L2f4af8.  v3:= 1I;
  #L2f4afa.  goto L2f4afe;
  #L2f4afc.  v3:= 0I;
  #L2f4afe.  return v3;
}
procedure `boolean` `equalsNonHost`(`okhttp3.Address` v2 @kind this, `okhttp3.Address` v3 @kind object) @signature `Lokhttp3/Address;.equalsNonHost:(Lokhttp3/Address;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2f4b10.  v0:= v2.`okhttp3.Address.dns` @type ^`okhttp3.Dns` @kind object;
  #L2f4b14.  v1:= v3.`okhttp3.Address.dns` @type ^`okhttp3.Dns` @kind object;
  #L2f4b18.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f4b1e.  v0:= temp;
  #L2f4b20.  if v0 == 0 then goto L2f4bec;
  #L2f4b24.  v0:= v2.`okhttp3.Address.proxyAuthenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L2f4b28.  v1:= v3.`okhttp3.Address.proxyAuthenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L2f4b2c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f4b32.  v0:= temp;
  #L2f4b34.  if v0 == 0 then goto L2f4bec;
  #L2f4b38.  v0:= v2.`okhttp3.Address.protocols` @type ^`java.util.List` @kind object;
  #L2f4b3c.  v1:= v3.`okhttp3.Address.protocols` @type ^`java.util.List` @kind object;
  #L2f4b40.  call temp:= `equals`(v0, v1) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L2f4b46.  v0:= temp;
  #L2f4b48.  if v0 == 0 then goto L2f4bec;
  #L2f4b4c.  v0:= v2.`okhttp3.Address.connectionSpecs` @type ^`java.util.List` @kind object;
  #L2f4b50.  v1:= v3.`okhttp3.Address.connectionSpecs` @type ^`java.util.List` @kind object;
  #L2f4b54.  call temp:= `equals`(v0, v1) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L2f4b5a.  v0:= temp;
  #L2f4b5c.  if v0 == 0 then goto L2f4bec;
  #L2f4b60.  v0:= v2.`okhttp3.Address.proxySelector` @type ^`java.net.ProxySelector` @kind object;
  #L2f4b64.  v1:= v3.`okhttp3.Address.proxySelector` @type ^`java.net.ProxySelector` @kind object;
  #L2f4b68.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f4b6e.  v0:= temp;
  #L2f4b70.  if v0 == 0 then goto L2f4bec;
  #L2f4b74.  v0:= v2.`okhttp3.Address.proxy` @type ^`java.net.Proxy` @kind object;
  #L2f4b78.  v1:= v3.`okhttp3.Address.proxy` @type ^`java.net.Proxy` @kind object;
  #L2f4b7c.  call temp:= `equals`(v0, v1) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2f4b82.  v0:= temp;
  #L2f4b84.  if v0 == 0 then goto L2f4bec;
  #L2f4b88.  v0:= v2.`okhttp3.Address.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L2f4b8c.  v1:= v3.`okhttp3.Address.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L2f4b90.  call temp:= `equals`(v0, v1) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2f4b96.  v0:= temp;
  #L2f4b98.  if v0 == 0 then goto L2f4bec;
  #L2f4b9c.  v0:= v2.`okhttp3.Address.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L2f4ba0.  v1:= v3.`okhttp3.Address.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L2f4ba4.  call temp:= `equals`(v0, v1) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2f4baa.  v0:= temp;
  #L2f4bac.  if v0 == 0 then goto L2f4bec;
  #L2f4bb0.  v0:= v2.`okhttp3.Address.certificatePinner` @type ^`okhttp3.CertificatePinner` @kind object;
  #L2f4bb4.  v1:= v3.`okhttp3.Address.certificatePinner` @type ^`okhttp3.CertificatePinner` @kind object;
  #L2f4bb8.  call temp:= `equals`(v0, v1) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2f4bbe.  v0:= temp;
  #L2f4bc0.  if v0 == 0 then goto L2f4bec;
  #L2f4bc4.  call temp:= `url`(v2) @signature `Lokhttp3/Address;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2f4bca.  v0:= temp @kind object;
  #L2f4bcc.  call temp:= `port`(v0) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L2f4bd2.  v0:= temp;
  #L2f4bd4.  call temp:= `url`(v3) @signature `Lokhttp3/Address;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2f4bda.  v3:= temp @kind object;
  #L2f4bdc.  call temp:= `port`(v3) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L2f4be2.  v3:= temp;
  #L2f4be4.  if v0 != v3 then goto L2f4bec;
  #L2f4be8.  v3:= 1I;
  #L2f4bea.  goto L2f4bee;
  #L2f4bec.  v3:= 0I;
  #L2f4bee.  return v3;
}
procedure `int` `hashCode`(`okhttp3.Address` v2 @kind this) @signature `Lokhttp3/Address;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f4c00.  v0:= v2.`okhttp3.Address.url` @type ^`okhttp3.HttpUrl` @kind object;
  #L2f4c04.  call temp:= `hashCode`(v0) @signature `Lokhttp3/HttpUrl;.hashCode:()I` @kind virtual;
  #L2f4c0a.  v0:= temp;
  #L2f4c0c.  v1:= 527I;
  #L2f4c10.  v1:= v1 + v0 @kind int;
  #L2f4c12.  v1:= v1 * 31;
  #L2f4c16.  v0:= v2.`okhttp3.Address.dns` @type ^`okhttp3.Dns` @kind object;
  #L2f4c1a.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2f4c20.  v0:= temp;
  #L2f4c22.  v1:= v1 + v0 @kind int;
  #L2f4c24.  v1:= v1 * 31;
  #L2f4c28.  v0:= v2.`okhttp3.Address.proxyAuthenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L2f4c2c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2f4c32.  v0:= temp;
  #L2f4c34.  v1:= v1 + v0 @kind int;
  #L2f4c36.  v1:= v1 * 31;
  #L2f4c3a.  v0:= v2.`okhttp3.Address.protocols` @type ^`java.util.List` @kind object;
  #L2f4c3e.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L2f4c44.  v0:= temp;
  #L2f4c46.  v1:= v1 + v0 @kind int;
  #L2f4c48.  v1:= v1 * 31;
  #L2f4c4c.  v0:= v2.`okhttp3.Address.connectionSpecs` @type ^`java.util.List` @kind object;
  #L2f4c50.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L2f4c56.  v0:= temp;
  #L2f4c58.  v1:= v1 + v0 @kind int;
  #L2f4c5a.  v1:= v1 * 31;
  #L2f4c5e.  v0:= v2.`okhttp3.Address.proxySelector` @type ^`java.net.ProxySelector` @kind object;
  #L2f4c62.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2f4c68.  v0:= temp;
  #L2f4c6a.  v1:= v1 + v0 @kind int;
  #L2f4c6c.  v1:= v1 * 31;
  #L2f4c70.  v0:= v2.`okhttp3.Address.proxy` @type ^`java.net.Proxy` @kind object;
  #L2f4c74.  call temp:= `hashCode`(v0) @signature `Ljava/util/Objects;.hashCode:(Ljava/lang/Object;)I` @kind static;
  #L2f4c7a.  v0:= temp;
  #L2f4c7c.  v1:= v1 + v0 @kind int;
  #L2f4c7e.  v1:= v1 * 31;
  #L2f4c82.  v0:= v2.`okhttp3.Address.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L2f4c86.  call temp:= `hashCode`(v0) @signature `Ljava/util/Objects;.hashCode:(Ljava/lang/Object;)I` @kind static;
  #L2f4c8c.  v0:= temp;
  #L2f4c8e.  v1:= v1 + v0 @kind int;
  #L2f4c90.  v1:= v1 * 31;
  #L2f4c94.  v0:= v2.`okhttp3.Address.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L2f4c98.  call temp:= `hashCode`(v0) @signature `Ljava/util/Objects;.hashCode:(Ljava/lang/Object;)I` @kind static;
  #L2f4c9e.  v0:= temp;
  #L2f4ca0.  v1:= v1 + v0 @kind int;
  #L2f4ca2.  v1:= v1 * 31;
  #L2f4ca6.  v0:= v2.`okhttp3.Address.certificatePinner` @type ^`okhttp3.CertificatePinner` @kind object;
  #L2f4caa.  call temp:= `hashCode`(v0) @signature `Ljava/util/Objects;.hashCode:(Ljava/lang/Object;)I` @kind static;
  #L2f4cb0.  v0:= temp;
  #L2f4cb2.  v1:= v1 + v0 @kind int;
  #L2f4cb4.  return v1;
}
procedure `javax.net.ssl.HostnameVerifier` `hostnameVerifier`(`okhttp3.Address` v1 @kind this) @signature `Lokhttp3/Address;.hostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4dd8.  v0:= v1.`okhttp3.Address.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L2f4ddc.  return v0 @kind object;
}
procedure `java.util.List` `protocols`(`okhttp3.Address` v1 @kind this) @signature `Lokhttp3/Address;.protocols:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4da8.  v0:= v1.`okhttp3.Address.protocols` @type ^`java.util.List` @kind object;
  #L2f4dac.  return v0 @kind object;
}
procedure `java.net.Proxy` `proxy`(`okhttp3.Address` v1 @kind this) @signature `Lokhttp3/Address;.proxy:()Ljava/net/Proxy;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4d60.  v0:= v1.`okhttp3.Address.proxy` @type ^`java.net.Proxy` @kind object;
  #L2f4d64.  return v0 @kind object;
}
procedure `okhttp3.Authenticator` `proxyAuthenticator`(`okhttp3.Address` v1 @kind this) @signature `Lokhttp3/Address;.proxyAuthenticator:()Lokhttp3/Authenticator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4e08.  v0:= v1.`okhttp3.Address.proxyAuthenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L2f4e0c.  return v0 @kind object;
}
procedure `java.net.ProxySelector` `proxySelector`(`okhttp3.Address` v1 @kind this) @signature `Lokhttp3/Address;.proxySelector:()Ljava/net/ProxySelector;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4d78.  v0:= v1.`okhttp3.Address.proxySelector` @type ^`java.net.ProxySelector` @kind object;
  #L2f4d7c.  return v0 @kind object;
}
procedure `javax.net.SocketFactory` `socketFactory`(`okhttp3.Address` v1 @kind this) @signature `Lokhttp3/Address;.socketFactory:()Ljavax/net/SocketFactory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4dc0.  v0:= v1.`okhttp3.Address.socketFactory` @type ^`javax.net.SocketFactory` @kind object;
  #L2f4dc4.  return v0 @kind object;
}
procedure `javax.net.ssl.SSLSocketFactory` `sslSocketFactory`(`okhttp3.Address` v1 @kind this) @signature `Lokhttp3/Address;.sslSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4df0.  v0:= v1.`okhttp3.Address.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L2f4df4.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.Address` v2 @kind this) @signature `Lokhttp3/Address;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f4cc8.  v0:= new `java.lang.StringBuilder`;
  #L2f4ccc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f4cd2.  v1:= "Address{" @kind object;
  #L2f4cd6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f4cdc.  v1:= v2.`okhttp3.Address.url` @type ^`okhttp3.HttpUrl` @kind object;
  #L2f4ce0.  call temp:= `host`(v1) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L2f4ce6.  v1:= temp @kind object;
  #L2f4ce8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f4cee.  v1:= ":" @kind object;
  #L2f4cf2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f4cf8.  v1:= v2.`okhttp3.Address.url` @type ^`okhttp3.HttpUrl` @kind object;
  #L2f4cfc.  call temp:= `port`(v1) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L2f4d02.  v1:= temp;
  #L2f4d04.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f4d0a.  v1:= v2.`okhttp3.Address.proxy` @type ^`java.net.Proxy` @kind object;
  #L2f4d0e.  if v1 == 0 then goto L2f4d28;
  #L2f4d12.  v1:= ", proxy=" @kind object;
  #L2f4d16.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f4d1c.  v1:= v2.`okhttp3.Address.proxy` @type ^`java.net.Proxy` @kind object;
  #L2f4d20.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f4d26.  goto L2f4d3c;
  #L2f4d28.  v1:= ", proxySelector=" @kind object;
  #L2f4d2c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f4d32.  v1:= v2.`okhttp3.Address.proxySelector` @type ^`java.net.ProxySelector` @kind object;
  #L2f4d36.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f4d3c.  v1:= "}" @kind object;
  #L2f4d40.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f4d46.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f4d4c.  v0:= temp @kind object;
  #L2f4d4e.  return v0 @kind object;
}
procedure `okhttp3.HttpUrl` `url`(`okhttp3.Address` v1 @kind this) @signature `Lokhttp3/Address;.url:()Lokhttp3/HttpUrl;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f4e50.  v0:= v1.`okhttp3.Address.url` @type ^`okhttp3.HttpUrl` @kind object;
  #L2f4e54.  return v0 @kind object;
}
