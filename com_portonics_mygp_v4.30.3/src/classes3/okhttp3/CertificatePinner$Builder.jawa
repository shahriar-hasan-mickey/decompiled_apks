record `okhttp3.CertificatePinner$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `okhttp3.CertificatePinner$Builder.pins` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.CertificatePinner$Builder` v1 @kind this) @signature `Lokhttp3/CertificatePinner$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2f64dc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f64e2.  v0:= new `java.util.ArrayList`;
  #L2f64e6.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2f64ec.  v1.`okhttp3.CertificatePinner$Builder.pins` @type ^`java.util.List` := v0 @kind object;
  #L2f64f0.  return @kind void;
}
procedure `okhttp3.CertificatePinner$Builder` `add`(`okhttp3.CertificatePinner$Builder` v5 @kind this, `java.lang.String` v6 @kind object, `java.lang.String`[] v7 @kind object) @signature `Lokhttp3/CertificatePinner$Builder;.add:(Ljava/lang/String;[Ljava/lang/String;)Lokhttp3/CertificatePinner$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2f6498.  v0:= "pattern == null" @kind object;
  #L2f649c.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2f64a2.  v0:= length @variable v7;
  #L2f64a4.  v1:= 0I;
  #L2f64a6.  if v1 >= v0 then goto L2f64c8;
  #L2f64aa.  v2:= v7[v1] @kind object;
  #L2f64ae.  v3:= v5.`okhttp3.CertificatePinner$Builder.pins` @type ^`java.util.List` @kind object;
  #L2f64b2.  v4:= new `okhttp3.CertificatePinner$Pin`;
  #L2f64b6.  call `<init>`(v4, v6, v2) @signature `Lokhttp3/CertificatePinner$Pin;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L2f64bc.  call temp:= `add`(v3, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2f64c2.  v1:= v1 + 1;
  #L2f64c6.  goto L2f64a6;
  #L2f64c8.  return v5 @kind object;
}
procedure `okhttp3.CertificatePinner` `build`(`okhttp3.CertificatePinner$Builder` v3 @kind this) @signature `Lokhttp3/CertificatePinner$Builder;.build:()Lokhttp3/CertificatePinner;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f646c.  v0:= new `okhttp3.CertificatePinner`;
  #L2f6470.  v1:= new `java.util.LinkedHashSet`;
  #L2f6474.  v2:= v3.`okhttp3.CertificatePinner$Builder.pins` @type ^`java.util.List` @kind object;
  #L2f6478.  call `<init>`(v1, v2) @signature `Ljava/util/LinkedHashSet;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2f647e.  v2:= 0I;
  #L2f6480.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/CertificatePinner;.<init>:(Ljava/util/Set;Lokhttp3/internal/tls/CertificateChainCleaner;)V` @kind direct;
  #L2f6486.  return v0 @kind object;
}
