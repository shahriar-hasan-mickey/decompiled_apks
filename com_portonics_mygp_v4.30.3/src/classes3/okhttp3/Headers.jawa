record `okhttp3.Headers` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.Headers.namesAndValues` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Headers` v1 @kind this, `okhttp3.Headers$Builder` v2 @kind object) @signature `Lokhttp3/Headers;.<init>:(Lokhttp3/Headers$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2fad70.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2fad76.  v2:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L2fad7a.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fad80.  v0:= temp;
  #L2fad82.  v0:= new `java.lang.String`[v0];
  #L2fad86.  call temp:= `toArray`(v2, v0) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L2fad8c.  v2:= temp @kind object;
  #L2fad8e.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L2fad92.  v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] := v2 @kind object;
  #L2fad96.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Headers` v0 @kind this, `java.lang.String`[] v1 @kind object) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2fad54.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2fad5a.  v0.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] := v1 @kind object;
  #L2fad5e.  return @kind void;
}
procedure `void` `checkName`(`java.lang.String` v5 @kind object) @signature `Lokhttp3/Headers;.checkName:(Ljava/lang/String;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2fada8.  v0:= "name == null" @kind object;
  #L2fadac.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fadb2.  call temp:= `isEmpty`(v5) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L2fadb8.  v0:= temp;
  #L2fadba.  if v0 != 0 then goto L2fae2c;
  #L2fadbe.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fadc4.  v0:= temp;
  #L2fadc6.  v1:= 0I;
  #L2fadc8.  v2:= 0I;
  #L2fadca.  if v2 >= v0 then goto L2fae2a;
  #L2fadce.  call temp:= `charAt`(v5, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fadd4.  v3:= temp;
  #L2fadd6.  v4:= 32I;
  #L2fadda.  if v3 <= v4 then goto L2fadec;
  #L2fadde.  v4:= 127I;
  #L2fade2.  if v3 >= v4 then goto L2fadec;
  #L2fade6.  v2:= v2 + 1;
  #L2fadea.  goto L2fadca;
  #L2fadec.  v0:= new `java.lang.IllegalArgumentException`;
  #L2fadf0.  v4:= 3I;
  #L2fadf2.  v4:= new `java.lang.Object`[v4];
  #L2fadf6.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2fadfc.  v3:= temp @kind object;
  #L2fadfe.  v4[v1]:= v3 @kind object;
  #L2fae02.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2fae08.  v1:= temp @kind object;
  #L2fae0a.  v2:= 1I;
  #L2fae0c.  v4[v2]:= v1 @kind object;
  #L2fae10.  v1:= 2I;
  #L2fae12.  v4[v1]:= v5 @kind object;
  #L2fae16.  v5:= "Unexpected char %#04x at %d in header name: %s" @kind object;
  #L2fae1a.  call temp:= `format`(v5, v4) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2fae20.  v5:= temp @kind object;
  #L2fae22.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fae28.  throw v0;
  #L2fae2a.  return @kind void;
  #L2fae2c.  v5:= new `java.lang.IllegalArgumentException`;
  #L2fae30.  v0:= "name is empty" @kind object;
  #L2fae34.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fae3a.  goto L2fae3e;
  #L2fae3c.  throw v5;
  #L2fae3e.  goto L2fae3c;
}
procedure `void` `checkValue`(`java.lang.String` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lokhttp3/Headers;.checkValue:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2fae50.  if v5 == 0 then goto L2faed0;
  #L2fae54.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fae5a.  v0:= temp;
  #L2fae5c.  v1:= 0I;
  #L2fae5e.  v2:= 0I;
  #L2fae60.  if v2 >= v0 then goto L2faece;
  #L2fae64.  call temp:= `charAt`(v5, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fae6a.  v3:= temp;
  #L2fae6c.  v4:= 31I;
  #L2fae70.  if v3 > v4 then goto L2fae7c;
  #L2fae74.  v4:= 9I;
  #L2fae78.  if v3 != v4 then goto L2fae8a;
  #L2fae7c.  v4:= 127I;
  #L2fae80.  if v3 >= v4 then goto L2fae8a;
  #L2fae84.  v2:= v2 + 1;
  #L2fae88.  goto L2fae60;
  #L2fae8a.  v0:= new `java.lang.IllegalArgumentException`;
  #L2fae8e.  v4:= 4I;
  #L2fae90.  v4:= new `java.lang.Object`[v4];
  #L2fae94.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2fae9a.  v3:= temp @kind object;
  #L2fae9c.  v4[v1]:= v3 @kind object;
  #L2faea0.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2faea6.  v1:= temp @kind object;
  #L2faea8.  v2:= 1I;
  #L2faeaa.  v4[v2]:= v1 @kind object;
  #L2faeae.  v1:= 2I;
  #L2faeb0.  v4[v1]:= v6 @kind object;
  #L2faeb4.  v6:= 3I;
  #L2faeb6.  v4[v6]:= v5 @kind object;
  #L2faeba.  v5:= "Unexpected char %#04x at %d in %s value: %s" @kind object;
  #L2faebe.  call temp:= `format`(v5, v4) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2faec4.  v5:= temp @kind object;
  #L2faec6.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2faecc.  throw v0;
  #L2faece.  return @kind void;
  #L2faed0.  v5:= new `java.lang.NullPointerException`;
  #L2faed4.  v0:= new `java.lang.StringBuilder`;
  #L2faed8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2faede.  v1:= "value for name " @kind object;
  #L2faee2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2faee8.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2faeee.  v6:= " == null" @kind object;
  #L2faef2.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2faef8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2faefe.  v6:= temp @kind object;
  #L2faf00.  call `<init>`(v5, v6) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2faf06.  goto L2faf0a;
  #L2faf08.  throw v5;
  #L2faf0a.  goto L2faf08;
}
procedure `java.lang.String` `get`(`java.lang.String`[] v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Headers;.get:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2fa8f4.  v0:= length @variable v2;
  #L2fa8f6.  v0:= v0 + -2;
  #L2fa8fa.  if v0 < 0 then goto L2fa91e;
  #L2fa8fe.  v1:= v2[v0] @kind object;
  #L2fa902.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2fa908.  v1:= temp;
  #L2fa90a.  if v1 == 0 then goto L2fa918;
  #L2fa90e.  v0:= v0 + 1;
  #L2fa912.  v2:= v2[v0] @kind object;
  #L2fa916.  return v2 @kind object;
  #L2fa918.  v0:= v0 + -2;
  #L2fa91c.  goto L2fa8fa;
  #L2fa91e.  v2:= 0I;
  #L2fa920.  return v2 @kind object;
}
procedure `okhttp3.Headers` `of`(`java.util.Map` v4 @kind object) @signature `Lokhttp3/Headers;.of:(Ljava/util/Map;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fac58.  v0:= "headers == null" @kind object;
  #L2fac5c.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fac62.  call temp:= `size`(v4) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L2fac68.  v0:= temp;
  #L2fac6a.  v0:= v0 * 2;
  #L2fac6e.  v0:= new `java.lang.String`[v0];
  #L2fac72.  v1:= 0I;
  #L2fac74.  call temp:= `entrySet`(v4) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2fac7a.  v4:= temp @kind object;
  #L2fac7c.  call temp:= `iterator`(v4) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2fac82.  v4:= temp @kind object;
  #L2fac84.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2fac8a.  v2:= temp;
  #L2fac8c.  if v2 == 0 then goto L2fad0a;
  #L2fac90.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2fac96.  v2:= temp @kind object;
  #L2fac98.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L2fac9c.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2faca2.  v3:= temp @kind object;
  #L2faca4.  if v3 == 0 then goto L2facfa;
  #L2faca8.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2facae.  v3:= temp @kind object;
  #L2facb0.  if v3 == 0 then goto L2facfa;
  #L2facb4.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2facba.  v3:= temp @kind object;
  #L2facbc.  v3:= (`java.lang.String`) v3 @kind object;
  #L2facc0.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2facc6.  v3:= temp @kind object;
  #L2facc8.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2facce.  v2:= temp @kind object;
  #L2facd0.  v2:= (`java.lang.String`) v2 @kind object;
  #L2facd4.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2facda.  v2:= temp @kind object;
  #L2facdc.  call `checkName`(v3) @signature `Lokhttp3/Headers;.checkName:(Ljava/lang/String;)V` @kind static;
  #L2face2.  call `checkValue`(v2, v3) @signature `Lokhttp3/Headers;.checkValue:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L2face8.  v0[v1]:= v3 @kind object;
  #L2facec.  v3:= v1 + 1;
  #L2facf0.  v0[v3]:= v2 @kind object;
  #L2facf4.  v1:= v1 + 2;
  #L2facf8.  goto L2fac84;
  #L2facfa.  v4:= new `java.lang.IllegalArgumentException`;
  #L2facfe.  v0:= "Headers cannot be null" @kind object;
  #L2fad02.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fad08.  throw v4;
  #L2fad0a.  v4:= new `okhttp3.Headers`;
  #L2fad0e.  call `<init>`(v4, v0) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L2fad14.  return v4 @kind object;
}
procedure `okhttp3.Headers` `of`(`java.lang.String`[] v3 @kind object) @signature `Lokhttp3/Headers;.of:([Ljava/lang/String;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2fabac.  v0:= "namesAndValues == null" @kind object;
  #L2fabb0.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fabb6.  v0:= length @variable v3;
  #L2fabb8.  v0:= v0 %% 2;
  #L2fabbc.  if v0 != 0 then goto L2fac34;
  #L2fabc0.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2fabc6.  v3:= temp @kind object;
  #L2fabc8.  v3:= (`java.lang.String`[]) v3 @kind object;
  #L2fabcc.  v0:= 0I;
  #L2fabce.  v1:= 0I;
  #L2fabd0.  v2:= length @variable v3;
  #L2fabd2.  if v1 >= v2 then goto L2fac04;
  #L2fabd6.  v2:= v3[v1] @kind object;
  #L2fabda.  if v2 == 0 then goto L2fabf4;
  #L2fabde.  v2:= v3[v1] @kind object;
  #L2fabe2.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2fabe8.  v2:= temp @kind object;
  #L2fabea.  v3[v1]:= v2 @kind object;
  #L2fabee.  v1:= v1 + 1;
  #L2fabf2.  goto L2fabd0;
  #L2fabf4.  v3:= new `java.lang.IllegalArgumentException`;
  #L2fabf8.  v0:= "Headers cannot be null" @kind object;
  #L2fabfc.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fac02.  throw v3;
  #L2fac04.  v1:= length @variable v3;
  #L2fac06.  if v0 >= v1 then goto L2fac28;
  #L2fac0a.  v1:= v3[v0] @kind object;
  #L2fac0e.  v2:= v0 + 1;
  #L2fac12.  v2:= v3[v2] @kind object;
  #L2fac16.  call `checkName`(v1) @signature `Lokhttp3/Headers;.checkName:(Ljava/lang/String;)V` @kind static;
  #L2fac1c.  call `checkValue`(v2, v1) @signature `Lokhttp3/Headers;.checkValue:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L2fac22.  v0:= v0 + 2;
  #L2fac26.  goto L2fac04;
  #L2fac28.  v0:= new `okhttp3.Headers`;
  #L2fac2c.  call `<init>`(v0, v3) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L2fac32.  return v0 @kind object;
  #L2fac34.  v3:= new `java.lang.IllegalArgumentException`;
  #L2fac38.  v0:= "Expected alternating header names and values" @kind object;
  #L2fac3c.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fac42.  goto L2fac46;
  #L2fac44.  throw v3;
  #L2fac46.  goto L2fac44;
}
procedure `long` `byteCount`(`okhttp3.Headers` v6 @kind this) @signature `Lokhttp3/Headers;.byteCount:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2fab6c.  v0:= v6.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L2fab70.  v1:= length @variable v0;
  #L2fab72.  v1:= v1 * 2;
  #L2fab76.  v1:= (`long`) v1 @kind i2l;
  #L2fab78.  v0:= length @variable v0;
  #L2fab7a.  v3:= 0I;
  #L2fab7c.  if v3 >= v0 then goto L2fab9a;
  #L2fab80.  v4:= v6.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L2fab84.  v4:= v4[v3] @kind object;
  #L2fab88.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fab8e.  v4:= temp;
  #L2fab90.  v4:= (`long`) v4 @kind i2l;
  #L2fab92.  v1:= v1 + v4 @kind long;
  #L2fab94.  v3:= v3 + 1;
  #L2fab98.  goto L2fab7c;
  #L2fab9a.  return v1 @kind wide;
}
procedure `boolean` `equals`(`okhttp3.Headers` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/Headers;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fa860.  v0:= instanceof @variable v2 @type ^`okhttp3.Headers` @kind boolean;
  #L2fa864.  if v0 == 0 then goto L2fa884;
  #L2fa868.  v2:= (`okhttp3.Headers`) v2 @kind object;
  #L2fa86c.  v2:= v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L2fa870.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L2fa874.  call temp:= `equals`(v2, v0) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L2fa87a.  v2:= temp;
  #L2fa87c.  if v2 == 0 then goto L2fa884;
  #L2fa880.  v2:= 1I;
  #L2fa882.  goto L2fa886;
  #L2fa884.  v2:= 0I;
  #L2fa886.  return v2;
}
procedure `java.lang.String` `get`(`okhttp3.Headers` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fa8d4.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L2fa8d8.  call temp:= `get`(v0, v2) @signature `Lokhttp3/Headers;.get:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L2fa8de.  v2:= temp @kind object;
  #L2fa8e0.  return v2 @kind object;
}
procedure `java.util.Date` `getDate`(`okhttp3.Headers` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokhttp3/Headers;.getDate:(Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PUBLIC {
    temp;

  #L2faa0c.  call temp:= `get`(v0, v1) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2faa12.  v1:= temp @kind object;
  #L2faa14.  if v1 == 0 then goto L2faa22;
  #L2faa18.  call temp:= `parse`(v1) @signature `Lokhttp3/internal/http/HttpDate;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L2faa1e.  v1:= temp @kind object;
  #L2faa20.  goto L2faa24;
  #L2faa22.  v1:= 0I;
  #L2faa24.  return v1 @kind object;
}
procedure `java.time.Instant` `getInstant`(`okhttp3.Headers` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokhttp3/Headers;.getInstant:(Ljava/lang/String;)Ljava/time/Instant;` @AccessFlag PUBLIC {
    temp;

  #L2fa9e0.  call temp:= `getDate`(v0, v1) @signature `Lokhttp3/Headers;.getDate:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L2fa9e6.  v1:= temp @kind object;
  #L2fa9e8.  if v1 == 0 then goto L2fa9f6;
  #L2fa9ec.  call temp:= `toInstant`(v1) @signature `Ljava/util/Date;.toInstant:()Ljava/time/Instant;` @kind virtual;
  #L2fa9f2.  v1:= temp @kind object;
  #L2fa9f4.  goto L2fa9f8;
  #L2fa9f6.  v1:= 0I;
  #L2fa9f8.  return v1 @kind object;
}
procedure `int` `hashCode`(`okhttp3.Headers` v1 @kind this) @signature `Lokhttp3/Headers;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fa898.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L2fa89c.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L2fa8a2.  v0:= temp;
  #L2fa8a4.  return v0;
}
procedure `java.lang.String` `name`(`okhttp3.Headers` v1 @kind this, `int` v2 ) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fa934.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L2fa938.  v2:= v2 * 2;
  #L2fa93c.  v2:= v0[v2] @kind object;
  #L2fa940.  return v2 @kind object;
}
procedure `java.util.Set` `names`(`okhttp3.Headers` v4 @kind this) @signature `Lokhttp3/Headers;.names:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fab20.  v0:= new `java.util.TreeSet`;
  #L2fab24.  v1:= `@@java.lang.String.CASE_INSENSITIVE_ORDER` @type ^`java.util.Comparator` @kind object;
  #L2fab28.  call `<init>`(v0, v1) @signature `Ljava/util/TreeSet;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L2fab2e.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L2fab34.  v1:= temp;
  #L2fab36.  v2:= 0I;
  #L2fab38.  if v2 >= v1 then goto L2fab50;
  #L2fab3c.  call temp:= `name`(v4, v2) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L2fab42.  v3:= temp @kind object;
  #L2fab44.  call temp:= `add`(v0, v3) @signature `Ljava/util/TreeSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fab4a.  v2:= v2 + 1;
  #L2fab4e.  goto L2fab38;
  #L2fab50.  call temp:= `unmodifiableSet`(v0) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L2fab56.  v0:= temp @kind object;
  #L2fab58.  return v0 @kind object;
}
procedure `okhttp3.Headers$Builder` `newBuilder`(`okhttp3.Headers` v3 @kind this) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2fad28.  v0:= new `okhttp3.Headers$Builder`;
  #L2fad2c.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L2fad32.  v1:= v0.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L2fad36.  v2:= v3.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L2fad3a.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/Collections;.addAll:(Ljava/util/Collection;[Ljava/lang/Object;)Z` @kind static;
  #L2fad40.  return v0 @kind object;
}
procedure `int` `size`(`okhttp3.Headers` v1 @kind this) @signature `Lokhttp3/Headers;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fa8b8.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L2fa8bc.  v0:= length @variable v0;
  #L2fa8be.  v0:= v0 / 2;
  #L2fa8c2.  return v0;
}
procedure `java.util.Map` `toMultimap`(`okhttp3.Headers` v6 @kind this) @signature `Lokhttp3/Headers;.toMultimap:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2faaa8.  v0:= new `java.util.TreeMap`;
  #L2faaac.  v1:= `@@java.lang.String.CASE_INSENSITIVE_ORDER` @type ^`java.util.Comparator` @kind object;
  #L2faab0.  call `<init>`(v0, v1) @signature `Ljava/util/TreeMap;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L2faab6.  call temp:= `size`(v6) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L2faabc.  v1:= temp;
  #L2faabe.  v2:= 0I;
  #L2faac0.  if v2 >= v1 then goto L2fab0e;
  #L2faac4.  call temp:= `name`(v6, v2) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L2faaca.  v3:= temp @kind object;
  #L2faacc.  v4:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L2faad0.  call temp:= `toLowerCase`(v3, v4) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L2faad6.  v3:= temp @kind object;
  #L2faad8.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2faade.  v4:= temp @kind object;
  #L2faae0.  v4:= (`java.util.List`) v4 @kind object;
  #L2faae4.  if v4 != 0 then goto L2faafa;
  #L2faae8.  v4:= new `java.util.ArrayList`;
  #L2faaec.  v5:= 2I;
  #L2faaee.  call `<init>`(v4, v5) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2faaf4.  call temp:= `put`(v0, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2faafa.  call temp:= `value`(v6, v2) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L2fab00.  v3:= temp @kind object;
  #L2fab02.  call temp:= `add`(v4, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fab08.  v2:= v2 + 1;
  #L2fab0c.  goto L2faac0;
  #L2fab0e.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.Headers` v4 @kind this) @signature `Lokhttp3/Headers;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fa954.  v0:= new `java.lang.StringBuilder`;
  #L2fa958.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fa95e.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L2fa964.  v1:= temp;
  #L2fa966.  v2:= 0I;
  #L2fa968.  if v2 >= v1 then goto L2fa9a2;
  #L2fa96c.  call temp:= `name`(v4, v2) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L2fa972.  v3:= temp @kind object;
  #L2fa974.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fa97a.  v3:= ": " @kind object;
  #L2fa97e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fa984.  call temp:= `value`(v4, v2) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L2fa98a.  v3:= temp @kind object;
  #L2fa98c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fa992.  v3:= "\n" @kind object;
  #L2fa996.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fa99c.  v2:= v2 + 1;
  #L2fa9a0.  goto L2fa968;
  #L2fa9a2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fa9a8.  v0:= temp @kind object;
  #L2fa9aa.  return v0 @kind object;
}
procedure `java.lang.String` `value`(`okhttp3.Headers` v1 @kind this, `int` v2 ) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fa9bc.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L2fa9c0.  v2:= v2 * 2;
  #L2fa9c4.  v2:= v2 + 1;
  #L2fa9c8.  v2:= v0[v2] @kind object;
  #L2fa9cc.  return v2 @kind object;
}
procedure `java.util.List` `values`(`okhttp3.Headers` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lokhttp3/Headers;.values:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2faa38.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L2faa3e.  v0:= temp;
  #L2faa40.  v1:= 0I;
  #L2faa42.  v2:= 0I;
  #L2faa44.  if v2 >= v0 then goto L2faa80;
  #L2faa48.  call temp:= `name`(v4, v2) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L2faa4e.  v3:= temp @kind object;
  #L2faa50.  call temp:= `equalsIgnoreCase`(v5, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2faa56.  v3:= temp;
  #L2faa58.  if v3 == 0 then goto L2faa7a;
  #L2faa5c.  if v1 != 0 then goto L2faa6c;
  #L2faa60.  v1:= new `java.util.ArrayList`;
  #L2faa64.  v3:= 2I;
  #L2faa66.  call `<init>`(v1, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2faa6c.  call temp:= `value`(v4, v2) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L2faa72.  v3:= temp @kind object;
  #L2faa74.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2faa7a.  v2:= v2 + 1;
  #L2faa7e.  goto L2faa44;
  #L2faa80.  if v1 == 0 then goto L2faa8e;
  #L2faa84.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L2faa8a.  v5:= temp @kind object;
  #L2faa8c.  goto L2faa96;
  #L2faa8e.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L2faa94.  v5:= temp @kind object;
  #L2faa96.  return v5 @kind object;
}
