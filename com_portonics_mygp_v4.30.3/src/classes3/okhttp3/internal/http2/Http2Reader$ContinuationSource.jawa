record `okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind class @AccessFlag FINAL extends `okio.i0` @kind interface {
  `byte` `okhttp3.internal.http2.Http2Reader$ContinuationSource.flags` @AccessFlag ;
  `int` `okhttp3.internal.http2.Http2Reader$ContinuationSource.left` @AccessFlag ;
  `int` `okhttp3.internal.http2.Http2Reader$ContinuationSource.length` @AccessFlag ;
  `short` `okhttp3.internal.http2.Http2Reader$ContinuationSource.padding` @AccessFlag ;
  `okio.o` `okhttp3.internal.http2.Http2Reader$ContinuationSource.source` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Http2Reader$ContinuationSource.streamId` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Reader$ContinuationSource` v0 @kind this, `okio.o` v1 @kind object) @signature `Lokhttp3/internal/http2/Http2Reader$ContinuationSource;.<init>:(Lokio/o;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L30f1e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30f1ea.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.source` @type ^`okio.o` := v1 @kind object;
  #L30f1ee.  return @kind void;
}
procedure `void` `readContinuationHeader`(`okhttp3.internal.http2.Http2Reader$ContinuationSource` v7 @kind this) @signature `Lokhttp3/internal/http2/Http2Reader$ContinuationSource;.readContinuationHeader:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L30f214.  v0:= v7.`okhttp3.internal.http2.Http2Reader$ContinuationSource.streamId` @type ^`int`;
  #L30f218.  v1:= v7.`okhttp3.internal.http2.Http2Reader$ContinuationSource.source` @type ^`okio.o` @kind object;
  #L30f21c.  call temp:= `readMedium`(v1) @signature `Lokhttp3/internal/http2/Http2Reader;.readMedium:(Lokio/o;)I` @kind static;
  #L30f222.  v1:= temp;
  #L30f224.  v7.`okhttp3.internal.http2.Http2Reader$ContinuationSource.left` @type ^`int` := v1;
  #L30f228.  v7.`okhttp3.internal.http2.Http2Reader$ContinuationSource.length` @type ^`int` := v1;
  #L30f22c.  v1:= v7.`okhttp3.internal.http2.Http2Reader$ContinuationSource.source` @type ^`okio.o` @kind object;
  #L30f230.  call temp:= `readByte`(v1) @signature `Lokio/o;.readByte:()B` @kind interface;
  #L30f236.  v1:= temp;
  #L30f238.  v1:= v1 ^& 255;
  #L30f23c.  v1:= (`byte`) v1 @kind i2b;
  #L30f23e.  v2:= v7.`okhttp3.internal.http2.Http2Reader$ContinuationSource.source` @type ^`okio.o` @kind object;
  #L30f242.  call temp:= `readByte`(v2) @signature `Lokio/o;.readByte:()B` @kind interface;
  #L30f248.  v2:= temp;
  #L30f24a.  v2:= v2 ^& 255;
  #L30f24e.  v2:= (`byte`) v2 @kind i2b;
  #L30f250.  v7.`okhttp3.internal.http2.Http2Reader$ContinuationSource.flags` @type ^`byte` := v2 @kind byte;
  #L30f254.  v2:= `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` @kind object;
  #L30f258.  v3:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L30f25c.  call temp:= `isLoggable`(v2, v3) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L30f262.  v3:= temp;
  #L30f264.  v4:= 1I;
  #L30f266.  if v3 == 0 then goto L30f284;
  #L30f26a.  v3:= v7.`okhttp3.internal.http2.Http2Reader$ContinuationSource.streamId` @type ^`int`;
  #L30f26e.  v5:= v7.`okhttp3.internal.http2.Http2Reader$ContinuationSource.length` @type ^`int`;
  #L30f272.  v6:= v7.`okhttp3.internal.http2.Http2Reader$ContinuationSource.flags` @type ^`byte` @kind byte;
  #L30f276.  call temp:= `frameLog`(v4, v3, v5, v1, v6) @signature `Lokhttp3/internal/http2/Http2;.frameLog:(ZIIBB)Ljava/lang/String;` @kind static;
  #L30f27c.  v3:= temp @kind object;
  #L30f27e.  call `fine`(v2, v3) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L30f284.  v2:= v7.`okhttp3.internal.http2.Http2Reader$ContinuationSource.source` @type ^`okio.o` @kind object;
  #L30f288.  call temp:= `readInt`(v2) @signature `Lokio/o;.readInt:()I` @kind interface;
  #L30f28e.  v2:= temp;
  #L30f290.  v3:= 2147483647I;
  #L30f296.  v2:= v2 ^& v3 @kind int;
  #L30f298.  v7.`okhttp3.internal.http2.Http2Reader$ContinuationSource.streamId` @type ^`int` := v2;
  #L30f29c.  v3:= 9I;
  #L30f2a0.  v5:= 0I;
  #L30f2a2.  if v1 != v3 then goto L30f2be;
  #L30f2a6.  if v2 != v0 then goto L30f2ac;
  #L30f2aa.  return @kind void;
  #L30f2ac.  v0:= new `java.lang.Object`[v5];
  #L30f2b0.  v1:= "TYPE_CONTINUATION streamId changed" @kind object;
  #L30f2b4.  call temp:= `ioException`(v1, v0) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f2ba.  v0:= temp @kind object;
  #L30f2bc.  throw v0;
  #L30f2be.  v0:= new `java.lang.Object`[v4];
  #L30f2c2.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L30f2c8.  v1:= temp @kind object;
  #L30f2ca.  v0[v5]:= v1 @kind object;
  #L30f2ce.  v1:= "%s != TYPE_CONTINUATION" @kind object;
  #L30f2d2.  call temp:= `ioException`(v1, v0) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f2d8.  v0:= temp @kind object;
  #L30f2da.  throw v0;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Reader$ContinuationSource` v0 @kind this) @signature `Lokhttp3/internal/http2/Http2Reader$ContinuationSource;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L30f200.  return @kind void;
}
procedure `long` `read`(`okhttp3.internal.http2.Http2Reader$ContinuationSource` v6 @kind this, `okio.k` v7 @kind object, `long` v8 ) @signature `Lokhttp3/internal/http2/Http2Reader$ContinuationSource;.read:(Lokio/k;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L30f14c.  v0:= v6.`okhttp3.internal.http2.Http2Reader$ContinuationSource.left` @type ^`int`;
  #L30f150.  v1:= -1L;
  #L30f154.  if v0 != 0 then goto L30f184;
  #L30f158.  v0:= v6.`okhttp3.internal.http2.Http2Reader$ContinuationSource.source` @type ^`okio.o` @kind object;
  #L30f15c.  v3:= v6.`okhttp3.internal.http2.Http2Reader$ContinuationSource.padding` @type ^`short` @kind short;
  #L30f160.  v3:= (`long`) v3 @kind i2l;
  #L30f162.  call `skip`(v0, v3) @signature `Lokio/o;.skip:(J)V` @kind interface;
  #L30f168.  v0:= 0I;
  #L30f16a.  v6.`okhttp3.internal.http2.Http2Reader$ContinuationSource.padding` @type ^`short` := v0 @kind char;
  #L30f16e.  v0:= v6.`okhttp3.internal.http2.Http2Reader$ContinuationSource.flags` @type ^`byte` @kind byte;
  #L30f172.  v0:= v0 ^& 4;
  #L30f176.  if v0 == 0 then goto L30f17c;
  #L30f17a.  return v1 @kind wide;
  #L30f17c.  call `readContinuationHeader`(v6) @signature `Lokhttp3/internal/http2/Http2Reader$ContinuationSource;.readContinuationHeader:()V` @kind direct;
  #L30f182.  goto L30f14c;
  #L30f184.  v3:= v6.`okhttp3.internal.http2.Http2Reader$ContinuationSource.source` @type ^`okio.o` @kind object;
  #L30f188.  v4:= (`long`) v0 @kind i2l;
  #L30f18a.  call temp:= `min`(v8, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L30f190.  v8:= temp @kind wide;
  #L30f192.  call temp:= `read`(v3, v7, v8) @signature `Lokio/i0;.read:(Lokio/k;J)J` @kind interface;
  #L30f198.  v7:= temp @kind wide;
  #L30f19a.  v9:= lcmp(v7, v1);
  #L30f19e.  if v9 != 0 then goto L30f1a4;
  #L30f1a2.  return v1 @kind wide;
  #L30f1a4.  v9:= v6.`okhttp3.internal.http2.Http2Reader$ContinuationSource.left` @type ^`int`;
  #L30f1a8.  v0:= (`long`) v9 @kind i2l;
  #L30f1aa.  v0:= v0 - v7 @kind long;
  #L30f1ac.  v9:= (`int`) v0 @kind l2i;
  #L30f1ae.  v6.`okhttp3.internal.http2.Http2Reader$ContinuationSource.left` @type ^`int` := v9;
  #L30f1b2.  return v7 @kind wide;
}
procedure `okio.l0` `timeout`(`okhttp3.internal.http2.Http2Reader$ContinuationSource` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Reader$ContinuationSource;.timeout:()Lokio/l0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30f1c4.  v0:= v1.`okhttp3.internal.http2.Http2Reader$ContinuationSource.source` @type ^`okio.o` @kind object;
  #L30f1c8.  call temp:= `timeout`(v0) @signature `Lokio/i0;.timeout:()Lokio/l0;` @kind interface;
  #L30f1ce.  v0:= temp @kind object;
  #L30f1d0.  return v0 @kind object;
}
