record `okhttp3.internal.http2.Http2Reader` @kind class @AccessFlag FINAL extends `java.io.Closeable` @kind interface {
  `boolean` `okhttp3.internal.http2.Http2Reader.client` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Reader$ContinuationSource` `okhttp3.internal.http2.Http2Reader.continuation` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Hpack$Reader` `okhttp3.internal.http2.Http2Reader.hpackReader` @AccessFlag FINAL;
  `okio.o` `okhttp3.internal.http2.Http2Reader.source` @AccessFlag PRIVATE_FINAL;
}
global `java.util.logging.Logger` `@@okhttp3.internal.http2.Http2Reader.logger` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Reader;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L30f540.  v0:= constclass @type ^`okhttp3.internal.http2.Http2` @kind object;
  #L30f544.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L30f54a.  v0:= temp @kind object;
  #L30f54c.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L30f552.  v0:= temp @kind object;
  #L30f554.  `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L30f558.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Reader` v1 @kind this, `okio.o` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/internal/http2/Http2Reader;.<init>:(Lokio/o;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L30f56c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30f572.  v1.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` := v2 @kind object;
  #L30f576.  v1.`okhttp3.internal.http2.Http2Reader.client` @type ^`boolean` := v3 @kind boolean;
  #L30f57a.  v3:= new `okhttp3.internal.http2.Http2Reader$ContinuationSource`;
  #L30f57e.  call `<init>`(v3, v2) @signature `Lokhttp3/internal/http2/Http2Reader$ContinuationSource;.<init>:(Lokio/o;)V` @kind direct;
  #L30f584.  v1.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` := v3 @kind object;
  #L30f588.  v2:= new `okhttp3.internal.http2.Hpack$Reader`;
  #L30f58c.  v0:= 4096I;
  #L30f590.  call `<init>`(v2, v0, v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(ILokio/i0;)V` @kind direct;
  #L30f596.  v1.`okhttp3.internal.http2.Http2Reader.hpackReader` @type ^`okhttp3.internal.http2.Hpack$Reader` := v2 @kind object;
  #L30f59a.  return @kind void;
}
procedure `int` `lengthWithoutPadding`(`int` v1 , `byte` v2 , `short` v3 ) @signature `Lokhttp3/internal/http2/Http2Reader;.lengthWithoutPadding:(IBS)I` @AccessFlag STATIC {
    temp;
    v0;

  #L30f464.  v2:= v2 ^& 8;
  #L30f468.  if v2 == 0 then goto L30f470;
  #L30f46c.  v1:= v1 + -1;
  #L30f470.  if v3 > v1 then goto L30f47a;
  #L30f474.  v1:= v1 - v3 @kind int;
  #L30f476.  v1:= (`short`) v1 @kind i2s;
  #L30f478.  return v1;
  #L30f47a.  v2:= 2I;
  #L30f47c.  v2:= new `java.lang.Object`[v2];
  #L30f480.  v0:= 0I;
  #L30f482.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Short;.valueOf:(S)Ljava/lang/Short;` @kind static;
  #L30f488.  v3:= temp @kind object;
  #L30f48a.  v2[v0]:= v3 @kind object;
  #L30f48e.  v3:= 1I;
  #L30f490.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30f496.  v1:= temp @kind object;
  #L30f498.  v2[v3]:= v1 @kind object;
  #L30f49c.  v1:= "PROTOCOL_ERROR padding %s > remaining length %s" @kind object;
  #L30f4a0.  call temp:= `ioException`(v1, v2) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f4a6.  v1:= temp @kind object;
  #L30f4a8.  throw v1;
}
procedure `void` `readData`(`okhttp3.internal.http2.Http2Reader` v4 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v5 @kind object, `int` v6 , `byte` v7 , `int` v8 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readData:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30f680.  v0:= 0I;
  #L30f682.  if v8 == 0 then goto L30f6f2;
  #L30f686.  v1:= v7 ^& 1;
  #L30f68a.  v2:= 1I;
  #L30f68c.  if v1 == 0 then goto L30f694;
  #L30f690.  v1:= 1I;
  #L30f692.  goto L30f696;
  #L30f694.  v1:= 0I;
  #L30f696.  v3:= v7 ^& 32;
  #L30f69a.  if v3 == 0 then goto L30f6a0;
  #L30f69e.  goto L30f6a2;
  #L30f6a0.  v2:= 0I;
  #L30f6a2.  if v2 != 0 then goto L30f6e0;
  #L30f6a6.  v2:= v7 ^& 8;
  #L30f6aa.  if v2 == 0 then goto L30f6c0;
  #L30f6ae.  v0:= v4.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f6b2.  call temp:= `readByte`(v0) @signature `Lokio/o;.readByte:()B` @kind interface;
  #L30f6b8.  v0:= temp;
  #L30f6ba.  v0:= v0 ^& 255;
  #L30f6be.  v0:= (`short`) v0 @kind i2s;
  #L30f6c0.  call temp:= `lengthWithoutPadding`(v6, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.lengthWithoutPadding:(IBS)I` @kind static;
  #L30f6c6.  v6:= temp;
  #L30f6c8.  v7:= v4.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f6cc.  call `data`(v5, v1, v8, v7, v6) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.data:(ZILokio/o;I)V` @kind interface;
  #L30f6d2.  v5:= v4.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f6d6.  v6:= (`long`) v0 @kind i2l;
  #L30f6d8.  call `skip`(v5, v6) @signature `Lokio/o;.skip:(J)V` @kind interface;
  #L30f6de.  return @kind void;
  #L30f6e0.  v5:= new `java.lang.Object`[v0];
  #L30f6e4.  v6:= "PROTOCOL_ERROR: FLAG_COMPRESSED without SETTINGS_COMPRESS_DATA" @kind object;
  #L30f6e8.  call temp:= `ioException`(v6, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f6ee.  v5:= temp @kind object;
  #L30f6f0.  throw v5;
  #L30f6f2.  v5:= new `java.lang.Object`[v0];
  #L30f6f6.  v6:= "PROTOCOL_ERROR: TYPE_DATA streamId == 0" @kind object;
  #L30f6fa.  call temp:= `ioException`(v6, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f700.  v5:= temp @kind object;
  #L30f702.  throw v5;
}
procedure `void` `readGoAway`(`okhttp3.internal.http2.Http2Reader` v3 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v4 @kind object, `int` v5 , `byte` v6 , `int` v7 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readGoAway:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L30f714.  v6:= 1I;
  #L30f716.  v0:= 8I;
  #L30f71a.  v1:= 0I;
  #L30f71c.  if v5 < v0 then goto L30f798;
  #L30f720.  if v7 != 0 then goto L30f786;
  #L30f724.  v7:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f728.  call temp:= `readInt`(v7) @signature `Lokio/o;.readInt:()I` @kind interface;
  #L30f72e.  v7:= temp;
  #L30f730.  v2:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f734.  call temp:= `readInt`(v2) @signature `Lokio/o;.readInt:()I` @kind interface;
  #L30f73a.  v2:= temp;
  #L30f73c.  v5:= v5 - v0 @kind int;
  #L30f73e.  call temp:= `fromHttp2`(v2) @signature `Lokhttp3/internal/http2/ErrorCode;.fromHttp2:(I)Lokhttp3/internal/http2/ErrorCode;` @kind static;
  #L30f744.  v0:= temp @kind object;
  #L30f746.  if v0 == 0 then goto L30f768;
  #L30f74a.  v6:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L30f74e.  if v5 <= 0 then goto L30f760;
  #L30f752.  v6:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f756.  v1:= (`long`) v5 @kind i2l;
  #L30f758.  call temp:= `g`(v6, v1) @signature `Lokio/o;.g:(J)Lokio/ByteString;` @kind interface;
  #L30f75e.  v6:= temp @kind object;
  #L30f760.  call `goAway`(v4, v7, v0, v6) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.goAway:(ILokhttp3/internal/http2/ErrorCode;Lokio/ByteString;)V` @kind interface;
  #L30f766.  return @kind void;
  #L30f768.  v4:= new `java.lang.Object`[v6];
  #L30f76c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30f772.  v5:= temp @kind object;
  #L30f774.  v4[v1]:= v5 @kind object;
  #L30f778.  v5:= "TYPE_GOAWAY unexpected error code: %d" @kind object;
  #L30f77c.  call temp:= `ioException`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f782.  v4:= temp @kind object;
  #L30f784.  throw v4;
  #L30f786.  v4:= new `java.lang.Object`[v1];
  #L30f78a.  v5:= "TYPE_GOAWAY streamId != 0" @kind object;
  #L30f78e.  call temp:= `ioException`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f794.  v4:= temp @kind object;
  #L30f796.  throw v4;
  #L30f798.  v4:= new `java.lang.Object`[v6];
  #L30f79c.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30f7a2.  v5:= temp @kind object;
  #L30f7a4.  v4[v1]:= v5 @kind object;
  #L30f7a8.  v5:= "TYPE_GOAWAY length < 8: %s" @kind object;
  #L30f7ac.  call temp:= `ioException`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f7b2.  v4:= temp @kind object;
  #L30f7b4.  throw v4;
}
procedure `java.util.List` `readHeaderBlock`(`okhttp3.internal.http2.Http2Reader` v1 @kind this, `int` v2 , `short` v3 , `byte` v4 , `int` v5 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaderBlock:(ISBI)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L30f500.  v0:= v1.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind object;
  #L30f504.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.left` @type ^`int` := v2;
  #L30f508.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.length` @type ^`int` := v2;
  #L30f50c.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.padding` @type ^`short` := v3 @kind char;
  #L30f510.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.flags` @type ^`byte` := v4 @kind byte;
  #L30f514.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.streamId` @type ^`int` := v5;
  #L30f518.  v2:= v1.`okhttp3.internal.http2.Http2Reader.hpackReader` @type ^`okhttp3.internal.http2.Hpack$Reader` @kind object;
  #L30f51c.  call `readHeaders`(v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readHeaders:()V` @kind virtual;
  #L30f522.  v2:= v1.`okhttp3.internal.http2.Http2Reader.hpackReader` @type ^`okhttp3.internal.http2.Hpack$Reader` @kind object;
  #L30f526.  call temp:= `getAndResetHeaderList`(v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getAndResetHeaderList:()Ljava/util/List;` @kind virtual;
  #L30f52c.  v2:= temp @kind object;
  #L30f52e.  return v2 @kind object;
}
procedure `void` `readHeaders`(`okhttp3.internal.http2.Http2Reader` v3 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v4 @kind object, `int` v5 , `byte` v6 , `int` v7 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaders:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L30f7c8.  v0:= 0I;
  #L30f7ca.  if v7 == 0 then goto L30f822;
  #L30f7ce.  v1:= v6 ^& 1;
  #L30f7d2.  if v1 == 0 then goto L30f7da;
  #L30f7d6.  v1:= 1I;
  #L30f7d8.  goto L30f7dc;
  #L30f7da.  v1:= 0I;
  #L30f7dc.  v2:= v6 ^& 8;
  #L30f7e0.  if v2 == 0 then goto L30f7f6;
  #L30f7e4.  v0:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f7e8.  call temp:= `readByte`(v0) @signature `Lokio/o;.readByte:()B` @kind interface;
  #L30f7ee.  v0:= temp;
  #L30f7f0.  v0:= v0 ^& 255;
  #L30f7f4.  v0:= (`short`) v0 @kind i2s;
  #L30f7f6.  v2:= v6 ^& 32;
  #L30f7fa.  if v2 == 0 then goto L30f808;
  #L30f7fe.  call `readPriority`(v3, v4, v7) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;I)V` @kind direct;
  #L30f804.  v5:= v5 + -5;
  #L30f808.  call temp:= `lengthWithoutPadding`(v5, v6, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.lengthWithoutPadding:(IBS)I` @kind static;
  #L30f80e.  v5:= temp;
  #L30f810.  call temp:= `readHeaderBlock`(v3, v5, v0, v6, v7) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaderBlock:(ISBI)Ljava/util/List;` @kind direct;
  #L30f816.  v5:= temp @kind object;
  #L30f818.  v6:= -1I;
  #L30f81a.  call `headers`(v4, v1, v7, v6, v5) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.headers:(ZIILjava/util/List;)V` @kind interface;
  #L30f820.  return @kind void;
  #L30f822.  v4:= new `java.lang.Object`[v0];
  #L30f826.  v5:= "PROTOCOL_ERROR: TYPE_HEADERS streamId == 0" @kind object;
  #L30f82a.  call temp:= `ioException`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f830.  v4:= temp @kind object;
  #L30f832.  throw v4;
}
procedure `int` `readMedium`(`okio.o` v2 @kind object) @signature `Lokhttp3/internal/http2/Http2Reader;.readMedium:(Lokio/o;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L30f4bc.  call temp:= `readByte`(v2) @signature `Lokio/o;.readByte:()B` @kind interface;
  #L30f4c2.  v0:= temp;
  #L30f4c4.  v0:= v0 ^& 255;
  #L30f4c8.  v0:= v0 ^< 16;
  #L30f4cc.  call temp:= `readByte`(v2) @signature `Lokio/o;.readByte:()B` @kind interface;
  #L30f4d2.  v1:= temp;
  #L30f4d4.  v1:= v1 ^& 255;
  #L30f4d8.  v1:= v1 ^< 8;
  #L30f4dc.  v0:= v0 ^| v1 @kind int;
  #L30f4de.  call temp:= `readByte`(v2) @signature `Lokio/o;.readByte:()B` @kind interface;
  #L30f4e4.  v2:= temp;
  #L30f4e6.  v2:= v2 ^& 255;
  #L30f4ea.  v2:= v2 ^| v0 @kind int;
  #L30f4ec.  return v2;
}
procedure `void` `readPing`(`okhttp3.internal.http2.Http2Reader` v3 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v4 @kind object, `int` v5 , `byte` v6 , `int` v7 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readPing:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L30f844.  v0:= 0I;
  #L30f846.  v1:= 1I;
  #L30f848.  v2:= 8I;
  #L30f84c.  if v5 != v2 then goto L30f88e;
  #L30f850.  if v7 != 0 then goto L30f87c;
  #L30f854.  v5:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f858.  call temp:= `readInt`(v5) @signature `Lokio/o;.readInt:()I` @kind interface;
  #L30f85e.  v5:= temp;
  #L30f860.  v7:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f864.  call temp:= `readInt`(v7) @signature `Lokio/o;.readInt:()I` @kind interface;
  #L30f86a.  v7:= temp;
  #L30f86c.  v6:= v6 ^& v1 @kind int;
  #L30f86e.  if v6 == 0 then goto L30f874;
  #L30f872.  v0:= 1I;
  #L30f874.  call `ping`(v4, v0, v5, v7) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.ping:(ZII)V` @kind interface;
  #L30f87a.  return @kind void;
  #L30f87c.  v4:= new `java.lang.Object`[v0];
  #L30f880.  v5:= "TYPE_PING streamId != 0" @kind object;
  #L30f884.  call temp:= `ioException`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f88a.  v4:= temp @kind object;
  #L30f88c.  throw v4;
  #L30f88e.  v4:= new `java.lang.Object`[v1];
  #L30f892.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30f898.  v5:= temp @kind object;
  #L30f89a.  v4[v0]:= v5 @kind object;
  #L30f89e.  v5:= "TYPE_PING length != 8: %s" @kind object;
  #L30f8a2.  call temp:= `ioException`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f8a8.  v4:= temp @kind object;
  #L30f8aa.  throw v4;
}
procedure `void` `readPriority`(`okhttp3.internal.http2.Http2Reader` v4 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v5 @kind object, `int` v6 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30f8bc.  v0:= v4.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f8c0.  call temp:= `readInt`(v0) @signature `Lokio/o;.readInt:()I` @kind interface;
  #L30f8c6.  v0:= temp;
  #L30f8c8.  v1:= -2147483648I;
  #L30f8cc.  v1:= v1 ^& v0 @kind int;
  #L30f8ce.  v2:= 1I;
  #L30f8d0.  if v1 == 0 then goto L30f8d8;
  #L30f8d4.  v1:= 1I;
  #L30f8d6.  goto L30f8da;
  #L30f8d8.  v1:= 0I;
  #L30f8da.  v3:= 2147483647I;
  #L30f8e0.  v0:= v0 ^& v3 @kind int;
  #L30f8e2.  v3:= v4.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f8e6.  call temp:= `readByte`(v3) @signature `Lokio/o;.readByte:()B` @kind interface;
  #L30f8ec.  v3:= temp;
  #L30f8ee.  v3:= v3 ^& 255;
  #L30f8f2.  v3:= v3 + v2 @kind int;
  #L30f8f4.  call `priority`(v5, v6, v0, v3, v1) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.priority:(IIIZ)V` @kind interface;
  #L30f8fa.  return @kind void;
}
procedure `void` `readPriority`(`okhttp3.internal.http2.Http2Reader` v1 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v2 @kind object, `int` v3 , `byte` v4 , `int` v5 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L30f90c.  v4:= 0I;
  #L30f90e.  v0:= 5I;
  #L30f910.  if v3 != v0 then goto L30f932;
  #L30f914.  if v5 == 0 then goto L30f920;
  #L30f918.  call `readPriority`(v1, v2, v5) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;I)V` @kind direct;
  #L30f91e.  return @kind void;
  #L30f920.  v2:= new `java.lang.Object`[v4];
  #L30f924.  v3:= "TYPE_PRIORITY streamId == 0" @kind object;
  #L30f928.  call temp:= `ioException`(v3, v2) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f92e.  v2:= temp @kind object;
  #L30f930.  throw v2;
  #L30f932.  v2:= 1I;
  #L30f934.  v2:= new `java.lang.Object`[v2];
  #L30f938.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30f93e.  v3:= temp @kind object;
  #L30f940.  v2[v4]:= v3 @kind object;
  #L30f944.  v3:= "TYPE_PRIORITY length: %d != 5" @kind object;
  #L30f948.  call temp:= `ioException`(v3, v2) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f94e.  v2:= temp @kind object;
  #L30f950.  throw v2;
}
procedure `void` `readPushPromise`(`okhttp3.internal.http2.Http2Reader` v3 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v4 @kind object, `int` v5 , `byte` v6 , `int` v7 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readPushPromise:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L30f964.  v0:= 0I;
  #L30f966.  if v7 == 0 then goto L30f9b4;
  #L30f96a.  v1:= v6 ^& 8;
  #L30f96e.  if v1 == 0 then goto L30f984;
  #L30f972.  v0:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f976.  call temp:= `readByte`(v0) @signature `Lokio/o;.readByte:()B` @kind interface;
  #L30f97c.  v0:= temp;
  #L30f97e.  v0:= v0 ^& 255;
  #L30f982.  v0:= (`short`) v0 @kind i2s;
  #L30f984.  v1:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f988.  call temp:= `readInt`(v1) @signature `Lokio/o;.readInt:()I` @kind interface;
  #L30f98e.  v1:= temp;
  #L30f990.  v2:= 2147483647I;
  #L30f996.  v1:= v1 ^& v2 @kind int;
  #L30f998.  v5:= v5 + -4;
  #L30f99c.  call temp:= `lengthWithoutPadding`(v5, v6, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.lengthWithoutPadding:(IBS)I` @kind static;
  #L30f9a2.  v5:= temp;
  #L30f9a4.  call temp:= `readHeaderBlock`(v3, v5, v0, v6, v7) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaderBlock:(ISBI)Ljava/util/List;` @kind direct;
  #L30f9aa.  v5:= temp @kind object;
  #L30f9ac.  call `pushPromise`(v4, v7, v1, v5) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.pushPromise:(IILjava/util/List;)V` @kind interface;
  #L30f9b2.  return @kind void;
  #L30f9b4.  v4:= new `java.lang.Object`[v0];
  #L30f9b8.  v5:= "PROTOCOL_ERROR: TYPE_PUSH_PROMISE streamId == 0" @kind object;
  #L30f9bc.  call temp:= `ioException`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f9c2.  v4:= temp @kind object;
  #L30f9c4.  throw v4;
}
procedure `void` `readRstStream`(`okhttp3.internal.http2.Http2Reader` v2 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v3 @kind object, `int` v4 , `byte` v5 , `int` v6 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readRstStream:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L30f9d8.  v5:= 1I;
  #L30f9da.  v0:= 0I;
  #L30f9dc.  v1:= 4I;
  #L30f9de.  if v4 != v1 then goto L30fa36;
  #L30f9e2.  if v6 == 0 then goto L30fa24;
  #L30f9e6.  v4:= v2.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f9ea.  call temp:= `readInt`(v4) @signature `Lokio/o;.readInt:()I` @kind interface;
  #L30f9f0.  v4:= temp;
  #L30f9f2.  call temp:= `fromHttp2`(v4) @signature `Lokhttp3/internal/http2/ErrorCode;.fromHttp2:(I)Lokhttp3/internal/http2/ErrorCode;` @kind static;
  #L30f9f8.  v1:= temp @kind object;
  #L30f9fa.  if v1 == 0 then goto L30fa06;
  #L30f9fe.  call `rstStream`(v3, v6, v1) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.rstStream:(ILokhttp3/internal/http2/ErrorCode;)V` @kind interface;
  #L30fa04.  return @kind void;
  #L30fa06.  v3:= new `java.lang.Object`[v5];
  #L30fa0a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30fa10.  v4:= temp @kind object;
  #L30fa12.  v3[v0]:= v4 @kind object;
  #L30fa16.  v4:= "TYPE_RST_STREAM unexpected error code: %d" @kind object;
  #L30fa1a.  call temp:= `ioException`(v4, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30fa20.  v3:= temp @kind object;
  #L30fa22.  throw v3;
  #L30fa24.  v3:= new `java.lang.Object`[v0];
  #L30fa28.  v4:= "TYPE_RST_STREAM streamId == 0" @kind object;
  #L30fa2c.  call temp:= `ioException`(v4, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30fa32.  v3:= temp @kind object;
  #L30fa34.  throw v3;
  #L30fa36.  v3:= new `java.lang.Object`[v5];
  #L30fa3a.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30fa40.  v4:= temp @kind object;
  #L30fa42.  v3[v0]:= v4 @kind object;
  #L30fa46.  v4:= "TYPE_RST_STREAM length: %d != 4" @kind object;
  #L30fa4a.  call temp:= `ioException`(v4, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30fa50.  v3:= temp @kind object;
  #L30fa52.  throw v3;
}
procedure `void` `readSettings`(`okhttp3.internal.http2.Http2Reader` v6 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v7 @kind object, `int` v8 , `byte` v9 , `int` v10 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readSettings:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L30fa64.  v0:= 0I;
  #L30fa66.  if v10 != 0 then goto L30fb80;
  #L30fa6a.  v10:= 1I;
  #L30fa6c.  v9:= v9 ^& v10 @kind int;
  #L30fa6e.  if v9 == 0 then goto L30fa90;
  #L30fa72.  if v8 != 0 then goto L30fa7e;
  #L30fa76.  call `ackSettings`(v7) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.ackSettings:()V` @kind interface;
  #L30fa7c.  return @kind void;
  #L30fa7e.  v7:= new `java.lang.Object`[v0];
  #L30fa82.  v8:= "FRAME_SIZE_ERROR ack frame should be empty!" @kind object;
  #L30fa86.  call temp:= `ioException`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30fa8c.  v7:= temp @kind object;
  #L30fa8e.  throw v7;
  #L30fa90.  v9:= v8 %% 6;
  #L30fa94.  if v9 != 0 then goto L30fb62;
  #L30fa98.  v9:= new `okhttp3.internal.http2.Settings`;
  #L30fa9c.  call `<init>`(v9) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @kind direct;
  #L30faa2.  v1:= 0I;
  #L30faa4.  if v1 >= v8 then goto L30fb5a;
  #L30faa8.  v2:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30faac.  call temp:= `readShort`(v2) @signature `Lokio/o;.readShort:()S` @kind interface;
  #L30fab2.  v2:= temp;
  #L30fab4.  v3:= 65535I;
  #L30faba.  v2:= v2 ^& v3 @kind int;
  #L30fabc.  v3:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30fac0.  call temp:= `readInt`(v3) @signature `Lokio/o;.readInt:()I` @kind interface;
  #L30fac6.  v3:= temp;
  #L30fac8.  v4:= 2I;
  #L30faca.  v5:= 4I;
  #L30facc.  if v2 == v4 then goto L30fb32;
  #L30fad0.  v4:= 3I;
  #L30fad2.  if v2 == v4 then goto L30fb2e;
  #L30fad6.  if v2 == v5 then goto L30fb14;
  #L30fada.  v4:= 5I;
  #L30fadc.  if v2 == v4 then goto L30fae2;
  #L30fae0.  goto L30fb4e;
  #L30fae2.  v4:= 16384I;
  #L30fae6.  if v3 < v4 then goto L30faf6;
  #L30faea.  v4:= 16777215I;
  #L30faf0.  if v3 > v4 then goto L30faf6;
  #L30faf4.  goto L30fb4e;
  #L30faf6.  v7:= new `java.lang.Object`[v10];
  #L30fafa.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30fb00.  v8:= temp @kind object;
  #L30fb02.  v7[v0]:= v8 @kind object;
  #L30fb06.  v8:= "PROTOCOL_ERROR SETTINGS_MAX_FRAME_SIZE: %s" @kind object;
  #L30fb0a.  call temp:= `ioException`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30fb10.  v7:= temp @kind object;
  #L30fb12.  throw v7;
  #L30fb14.  v2:= 7I;
  #L30fb16.  if v3 < 0 then goto L30fb1c;
  #L30fb1a.  goto L30fb4e;
  #L30fb1c.  v7:= new `java.lang.Object`[v0];
  #L30fb20.  v8:= "PROTOCOL_ERROR SETTINGS_INITIAL_WINDOW_SIZE > 2^31 - 1" @kind object;
  #L30fb24.  call temp:= `ioException`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30fb2a.  v7:= temp @kind object;
  #L30fb2c.  throw v7;
  #L30fb2e.  v2:= 4I;
  #L30fb30.  goto L30fb4e;
  #L30fb32.  if v3 == 0 then goto L30fb4e;
  #L30fb36.  if v3 != v10 then goto L30fb3c;
  #L30fb3a.  goto L30fb4e;
  #L30fb3c.  v7:= new `java.lang.Object`[v0];
  #L30fb40.  v8:= "PROTOCOL_ERROR SETTINGS_ENABLE_PUSH != 0 or 1" @kind object;
  #L30fb44.  call temp:= `ioException`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30fb4a.  v7:= temp @kind object;
  #L30fb4c.  throw v7;
  #L30fb4e.  call temp:= `set`(v9, v2, v3) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L30fb54.  v1:= v1 + 6;
  #L30fb58.  goto L30faa4;
  #L30fb5a.  call `settings`(v7, v0, v9) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.settings:(ZLokhttp3/internal/http2/Settings;)V` @kind interface;
  #L30fb60.  return @kind void;
  #L30fb62.  v7:= new `java.lang.Object`[v10];
  #L30fb66.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30fb6c.  v8:= temp @kind object;
  #L30fb6e.  v7[v0]:= v8 @kind object;
  #L30fb72.  v8:= "TYPE_SETTINGS length %% 6 != 0: %s" @kind object;
  #L30fb76.  call temp:= `ioException`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30fb7c.  v7:= temp @kind object;
  #L30fb7e.  throw v7;
  #L30fb80.  v7:= new `java.lang.Object`[v0];
  #L30fb84.  v8:= "TYPE_SETTINGS streamId != 0" @kind object;
  #L30fb88.  call temp:= `ioException`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30fb8e.  v7:= temp @kind object;
  #L30fb90.  goto L30fb94;
  #L30fb92.  throw v7;
  #L30fb94.  goto L30fb92;
}
procedure `void` `readWindowUpdate`(`okhttp3.internal.http2.Http2Reader` v5 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v6 @kind object, `int` v7 , `byte` v8 , `int` v9 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readWindowUpdate:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L30fba8.  v8:= 0I;
  #L30fbaa.  v0:= 1I;
  #L30fbac.  v1:= 4I;
  #L30fbae.  if v7 != v1 then goto L30fbfa;
  #L30fbb2.  v7:= v5.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30fbb6.  call temp:= `readInt`(v7) @signature `Lokio/o;.readInt:()I` @kind interface;
  #L30fbbc.  v7:= temp;
  #L30fbbe.  v1:= (`long`) v7 @kind i2l;
  #L30fbc0.  v3:= 2147483647L;
  #L30fbc6.  v1:= v1 ^& v3 @kind long;
  #L30fbc8.  v3:= 0L;
  #L30fbcc.  v7:= lcmp(v1, v3);
  #L30fbd0.  if v7 == 0 then goto L30fbdc;
  #L30fbd4.  call `windowUpdate`(v6, v9, v1) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.windowUpdate:(IJ)V` @kind interface;
  #L30fbda.  return @kind void;
  #L30fbdc.  v6:= new `java.lang.Object`[v0];
  #L30fbe0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L30fbe6.  v7:= temp @kind object;
  #L30fbe8.  v6[v8]:= v7 @kind object;
  #L30fbec.  v7:= "windowSizeIncrement was 0" @kind object;
  #L30fbf0.  call temp:= `ioException`(v7, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30fbf6.  v6:= temp @kind object;
  #L30fbf8.  throw v6;
  #L30fbfa.  v6:= new `java.lang.Object`[v0];
  #L30fbfe.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30fc04.  v7:= temp @kind object;
  #L30fc06.  v6[v8]:= v7 @kind object;
  #L30fc0a.  v7:= "TYPE_WINDOW_UPDATE length !=4: %s" @kind object;
  #L30fc0e.  call temp:= `ioException`(v7, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30fc14.  v6:= temp @kind object;
  #L30fc16.  throw v6;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Reader` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Reader;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30f5ac.  v0:= v1.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f5b0.  call `close`(v0) @signature `Lokio/i0;.close:()V` @kind interface;
  #L30f5b6.  return @kind void;
}
procedure `boolean` `nextFrame`(`okhttp3.internal.http2.Http2Reader` v6 @kind this, `boolean` v7 , `okhttp3.internal.http2.Http2Reader$Handler` v8 @kind object) @signature `Lokhttp3/internal/http2/Http2Reader;.nextFrame:(ZLokhttp3/internal/http2/Http2Reader$Handler;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L30f2ec.  v0:= 0I;
  #L30f2ee.  v1:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f2f2.  v2:= 9L;
  #L30f2f6.  call `E0`(v1, v2) @signature `Lokio/o;.E0:(J)V` @kind interface;
  #L30f2fc.  v1:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f300.  call temp:= `readMedium`(v1) @signature `Lokhttp3/internal/http2/Http2Reader;.readMedium:(Lokio/o;)I` @kind static;
  #L30f306.  v1:= temp;
  #L30f308.  v2:= 1I;
  #L30f30a.  if v1 < 0 then goto L30f3f6;
  #L30f30e.  v3:= 16384I;
  #L30f312.  if v1 > v3 then goto L30f3f6;
  #L30f316.  v3:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f31a.  call temp:= `readByte`(v3) @signature `Lokio/o;.readByte:()B` @kind interface;
  #L30f320.  v3:= temp;
  #L30f322.  v3:= v3 ^& 255;
  #L30f326.  v3:= (`byte`) v3 @kind i2b;
  #L30f328.  if v7 == 0 then goto L30f352;
  #L30f32c.  v7:= 4I;
  #L30f32e.  if v3 != v7 then goto L30f334;
  #L30f332.  goto L30f352;
  #L30f334.  v7:= new `java.lang.Object`[v2];
  #L30f338.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L30f33e.  v8:= temp @kind object;
  #L30f340.  v7[v0]:= v8 @kind object;
  #L30f344.  v8:= "Expected a SETTINGS frame but was %s" @kind object;
  #L30f348.  call temp:= `ioException`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f34e.  v7:= temp @kind object;
  #L30f350.  throw v7;
  #L30f352.  v7:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f356.  call temp:= `readByte`(v7) @signature `Lokio/o;.readByte:()B` @kind interface;
  #L30f35c.  v7:= temp;
  #L30f35e.  v7:= v7 ^& 255;
  #L30f362.  v7:= (`byte`) v7 @kind i2b;
  #L30f364.  v0:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f368.  call temp:= `readInt`(v0) @signature `Lokio/o;.readInt:()I` @kind interface;
  #L30f36e.  v0:= temp;
  #L30f370.  v4:= 2147483647I;
  #L30f376.  v0:= v0 ^& v4 @kind int;
  #L30f378.  v4:= `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` @kind object;
  #L30f37c.  v5:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L30f380.  call temp:= `isLoggable`(v4, v5) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L30f386.  v5:= temp;
  #L30f388.  if v5 == 0 then goto L30f39a;
  #L30f38c.  call temp:= `frameLog`(v2, v0, v1, v3, v7) @signature `Lokhttp3/internal/http2/Http2;.frameLog:(ZIIBB)Ljava/lang/String;` @kind static;
  #L30f392.  v5:= temp @kind object;
  #L30f394.  call `fine`(v4, v5) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L30f39a.  goto L30f418;
  #L30f3a0.  v7:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f3a4.  v0:= (`long`) v1 @kind i2l;
  #L30f3a6.  call `skip`(v7, v0) @signature `Lokio/o;.skip:(J)V` @kind interface;
  #L30f3ac.  goto L30f3f4;
  #L30f3ae.  call `readWindowUpdate`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readWindowUpdate:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L30f3b4.  goto L30f3f4;
  #L30f3b6.  call `readGoAway`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readGoAway:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L30f3bc.  goto L30f3f4;
  #L30f3be.  call `readPing`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readPing:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L30f3c4.  goto L30f3f4;
  #L30f3c6.  call `readPushPromise`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readPushPromise:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L30f3cc.  goto L30f3f4;
  #L30f3ce.  call `readSettings`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readSettings:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L30f3d4.  goto L30f3f4;
  #L30f3d6.  call `readRstStream`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readRstStream:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L30f3dc.  goto L30f3f4;
  #L30f3de.  call `readPriority`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L30f3e4.  goto L30f3f4;
  #L30f3e6.  call `readHeaders`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaders:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L30f3ec.  goto L30f3f4;
  #L30f3ee.  call `readData`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readData:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L30f3f4.  return v2;
  #L30f3f6.  v7:= new `java.lang.Object`[v2];
  #L30f3fa.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30f400.  v8:= temp @kind object;
  #L30f402.  v7[v0]:= v8 @kind object;
  #L30f406.  v8:= "FRAME_SIZE_ERROR: %s" @kind object;
  #L30f40a.  call temp:= `ioException`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f410.  v7:= temp @kind object;
  #L30f412.  throw v7;
  #L30f414.  return v0;
  #L30f416.  
  #L30f418.  switch v3
                  | 0 => goto L30f3ee
                  | 1 => goto L30f3e6
                  | 2 => goto L30f3de
                  | 3 => goto L30f3d6
                  | 4 => goto L30f3ce
                  | 5 => goto L30f3c6
                  | 6 => goto L30f3be
                  | 7 => goto L30f3b6
                  | 8 => goto L30f3ae
                  | else => goto L30f3a0;
  catch `java.io.EOFException` @[L30f2ee..L30f2fc] goto L30f414;
}
procedure `void` `readConnectionPreface`(`okhttp3.internal.http2.Http2Reader` v6 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v7 @kind object) @signature `Lokhttp3/internal/http2/Http2Reader;.readConnectionPreface:(Lokhttp3/internal/http2/Http2Reader$Handler;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L30f5c8.  v0:= v6.`okhttp3.internal.http2.Http2Reader.client` @type ^`boolean` @kind boolean;
  #L30f5cc.  v1:= 0I;
  #L30f5ce.  v2:= 1I;
  #L30f5d0.  if v0 == 0 then goto L30f5f4;
  #L30f5d4.  call temp:= `nextFrame`(v6, v2, v7) @signature `Lokhttp3/internal/http2/Http2Reader;.nextFrame:(ZLokhttp3/internal/http2/Http2Reader$Handler;)Z` @kind virtual;
  #L30f5da.  v7:= temp;
  #L30f5dc.  if v7 == 0 then goto L30f5e2;
  #L30f5e0.  goto L30f650;
  #L30f5e2.  v7:= new `java.lang.Object`[v1];
  #L30f5e6.  v0:= "Required SETTINGS preface not received" @kind object;
  #L30f5ea.  call temp:= `ioException`(v0, v7) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f5f0.  v7:= temp @kind object;
  #L30f5f2.  throw v7;
  #L30f5f4.  v7:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.o` @kind object;
  #L30f5f8.  v0:= `@@okhttp3.internal.http2.Http2.CONNECTION_PREFACE` @type ^`okio.ByteString` @kind object;
  #L30f5fc.  call temp:= `size`(v0) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L30f602.  v3:= temp;
  #L30f604.  v3:= (`long`) v3 @kind i2l;
  #L30f606.  call temp:= `g`(v7, v3) @signature `Lokio/o;.g:(J)Lokio/ByteString;` @kind interface;
  #L30f60c.  v7:= temp @kind object;
  #L30f60e.  v3:= `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` @kind object;
  #L30f612.  v4:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L30f616.  call temp:= `isLoggable`(v3, v4) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L30f61c.  v4:= temp;
  #L30f61e.  if v4 == 0 then goto L30f644;
  #L30f622.  v4:= new `java.lang.Object`[v2];
  #L30f626.  call temp:= `hex`(v7) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L30f62c.  v5:= temp @kind object;
  #L30f62e.  v4[v1]:= v5 @kind object;
  #L30f632.  v5:= "<< CONNECTION %s" @kind object;
  #L30f636.  call temp:= `format`(v5, v4) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L30f63c.  v4:= temp @kind object;
  #L30f63e.  call `fine`(v3, v4) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L30f644.  call temp:= `equals`(v0, v7) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30f64a.  v0:= temp;
  #L30f64c.  if v0 == 0 then goto L30f652;
  #L30f650.  return @kind void;
  #L30f652.  v0:= new `java.lang.Object`[v2];
  #L30f656.  call temp:= `utf8`(v7) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L30f65c.  v7:= temp @kind object;
  #L30f65e.  v0[v1]:= v7 @kind object;
  #L30f662.  v7:= "Expected a connection header but was %s" @kind object;
  #L30f666.  call temp:= `ioException`(v7, v0) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L30f66c.  v7:= temp @kind object;
  #L30f66e.  throw v7;
}
