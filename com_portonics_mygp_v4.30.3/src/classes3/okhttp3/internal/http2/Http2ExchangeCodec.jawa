record `okhttp3.internal.http2.Http2ExchangeCodec` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.http.ExchangeCodec` @kind interface {
  `boolean` `okhttp3.internal.http2.Http2ExchangeCodec.canceled` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.Interceptor$Chain` `okhttp3.internal.http2.Http2ExchangeCodec.chain` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2ExchangeCodec.connection` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Protocol` `okhttp3.internal.http2.Http2ExchangeCodec.protocol` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.RealConnection` `okhttp3.internal.http2.Http2ExchangeCodec.realConnection` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Stream` `okhttp3.internal.http2.Http2ExchangeCodec.stream` @AccessFlag PRIVATE_VOLATILE;
}
global `java.lang.String` `@@okhttp3.internal.http2.Http2ExchangeCodec.CONNECTION` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@okhttp3.internal.http2.Http2ExchangeCodec.ENCODING` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@okhttp3.internal.http2.Http2ExchangeCodec.HOST` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2ExchangeCodec.HTTP_2_SKIPPED_REQUEST_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2ExchangeCodec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@okhttp3.internal.http2.Http2ExchangeCodec.KEEP_ALIVE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@okhttp3.internal.http2.Http2ExchangeCodec.PROXY_CONNECTION` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@okhttp3.internal.http2.Http2ExchangeCodec.TE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@okhttp3.internal.http2.Http2ExchangeCodec.TRANSFER_ENCODING` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@okhttp3.internal.http2.Http2ExchangeCodec.UPGRADE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L30ef58.  v0:= "connection" @kind object;
  #L30ef5c.  v1:= "host" @kind object;
  #L30ef60.  v2:= "keep-alive" @kind object;
  #L30ef64.  v3:= "proxy-connection" @kind object;
  #L30ef68.  v4:= "te" @kind object;
  #L30ef6c.  v5:= "transfer-encoding" @kind object;
  #L30ef70.  v6:= "encoding" @kind object;
  #L30ef74.  v7:= "upgrade" @kind object;
  #L30ef78.  v8:= ":method" @kind object;
  #L30ef7c.  v9:= ":path" @kind object;
  #L30ef80.  v10:= ":scheme" @kind object;
  #L30ef84.  v11:= ":authority" @kind object;
  #L30ef88.  temp:= new `java.lang.String`[v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11];
  #L30ef8e.  v0:= temp @kind object;
  #L30ef90.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L30ef96.  v0:= temp @kind object;
  #L30ef98.  `@@okhttp3.internal.http2.Http2ExchangeCodec.HTTP_2_SKIPPED_REQUEST_HEADERS` @type ^`java.util.List` := v0 @kind object;
  #L30ef9c.  v1:= "connection" @kind object;
  #L30efa0.  v2:= "host" @kind object;
  #L30efa4.  v3:= "keep-alive" @kind object;
  #L30efa8.  v4:= "proxy-connection" @kind object;
  #L30efac.  v5:= "te" @kind object;
  #L30efb0.  v6:= "transfer-encoding" @kind object;
  #L30efb4.  v7:= "encoding" @kind object;
  #L30efb8.  v8:= "upgrade" @kind object;
  #L30efbc.  temp:= new `java.lang.String`[v1, v2, v3, v4, v5, v6, v7, v8];
  #L30efc2.  v0:= temp @kind object;
  #L30efc4.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L30efca.  v0:= temp @kind object;
  #L30efcc.  `@@okhttp3.internal.http2.Http2ExchangeCodec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @type ^`java.util.List` := v0 @kind object;
  #L30efd0.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2ExchangeCodec` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object, `okhttp3.internal.connection.RealConnection` v2 @kind object, `okhttp3.Interceptor$Chain` v3 @kind object, `okhttp3.internal.http2.Http2Connection` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/internal/connection/RealConnection;Lokhttp3/Interceptor$Chain;Lokhttp3/internal/http2/Http2Connection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L30efe4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30efea.  v0.`okhttp3.internal.http2.Http2ExchangeCodec.realConnection` @type ^`okhttp3.internal.connection.RealConnection` := v2 @kind object;
  #L30efee.  v0.`okhttp3.internal.http2.Http2ExchangeCodec.chain` @type ^`okhttp3.Interceptor$Chain` := v3 @kind object;
  #L30eff2.  v0.`okhttp3.internal.http2.Http2ExchangeCodec.connection` @type ^`okhttp3.internal.http2.Http2Connection` := v4 @kind object;
  #L30eff6.  call temp:= `protocols`(v1) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @kind virtual;
  #L30effc.  v1:= temp @kind object;
  #L30effe.  v2:= `@@okhttp3.Protocol.H2_PRIOR_KNOWLEDGE` @type ^`okhttp3.Protocol` @kind object;
  #L30f002.  call temp:= `contains`(v1, v2) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L30f008.  v1:= temp;
  #L30f00a.  if v1 == 0 then goto L30f010;
  #L30f00e.  goto L30f014;
  #L30f010.  v2:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L30f014.  v0.`okhttp3.internal.http2.Http2ExchangeCodec.protocol` @type ^`okhttp3.Protocol` := v2 @kind object;
  #L30f018.  return @kind void;
}
procedure `java.util.List` `http2HeadersList`(`okhttp3.Request` v6 @kind object) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L30ec60.  call temp:= `headers`(v6) @signature `Lokhttp3/Request;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L30ec66.  v0:= temp @kind object;
  #L30ec68.  v1:= new `java.util.ArrayList`;
  #L30ec6c.  call temp:= `size`(v0) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L30ec72.  v2:= temp;
  #L30ec74.  v2:= v2 + 4;
  #L30ec78.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L30ec7e.  v2:= new `okhttp3.internal.http2.Header`;
  #L30ec82.  v3:= `@@okhttp3.internal.http2.Header.TARGET_METHOD` @type ^`okio.ByteString` @kind object;
  #L30ec86.  call temp:= `method`(v6) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L30ec8c.  v4:= temp @kind object;
  #L30ec8e.  call `<init>`(v2, v3, v4) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L30ec94.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L30ec9a.  v2:= new `okhttp3.internal.http2.Header`;
  #L30ec9e.  v3:= `@@okhttp3.internal.http2.Header.TARGET_PATH` @type ^`okio.ByteString` @kind object;
  #L30eca2.  call temp:= `url`(v6) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L30eca8.  v4:= temp @kind object;
  #L30ecaa.  call temp:= `requestPath`(v4) @signature `Lokhttp3/internal/http/RequestLine;.requestPath:(Lokhttp3/HttpUrl;)Ljava/lang/String;` @kind static;
  #L30ecb0.  v4:= temp @kind object;
  #L30ecb2.  call `<init>`(v2, v3, v4) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L30ecb8.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L30ecbe.  v2:= "Host" @kind object;
  #L30ecc2.  call temp:= `header`(v6, v2) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L30ecc8.  v2:= temp @kind object;
  #L30ecca.  if v2 == 0 then goto L30ece2;
  #L30ecce.  v3:= new `okhttp3.internal.http2.Header`;
  #L30ecd2.  v4:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L30ecd6.  call `<init>`(v3, v4, v2) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L30ecdc.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L30ece2.  v2:= new `okhttp3.internal.http2.Header`;
  #L30ece6.  v3:= `@@okhttp3.internal.http2.Header.TARGET_SCHEME` @type ^`okio.ByteString` @kind object;
  #L30ecea.  call temp:= `url`(v6) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L30ecf0.  v6:= temp @kind object;
  #L30ecf2.  call temp:= `scheme`(v6) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L30ecf8.  v6:= temp @kind object;
  #L30ecfa.  call `<init>`(v2, v3, v6) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L30ed00.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L30ed06.  v6:= 0I;
  #L30ed08.  call temp:= `size`(v0) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L30ed0e.  v2:= temp;
  #L30ed10.  if v6 >= v2 then goto L30ed7e;
  #L30ed14.  call temp:= `name`(v0, v6) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L30ed1a.  v3:= temp @kind object;
  #L30ed1c.  v4:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L30ed20.  call temp:= `toLowerCase`(v3, v4) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L30ed26.  v3:= temp @kind object;
  #L30ed28.  v4:= `@@okhttp3.internal.http2.Http2ExchangeCodec.HTTP_2_SKIPPED_REQUEST_HEADERS` @type ^`java.util.List` @kind object;
  #L30ed2c.  call temp:= `contains`(v4, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L30ed32.  v4:= temp;
  #L30ed34.  if v4 == 0 then goto L30ed60;
  #L30ed38.  v4:= "te" @kind object;
  #L30ed3c.  call temp:= `equals`(v3, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30ed42.  v4:= temp;
  #L30ed44.  if v4 == 0 then goto L30ed78;
  #L30ed48.  call temp:= `value`(v0, v6) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L30ed4e.  v4:= temp @kind object;
  #L30ed50.  v5:= "trailers" @kind object;
  #L30ed54.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30ed5a.  v4:= temp;
  #L30ed5c.  if v4 == 0 then goto L30ed78;
  #L30ed60.  v4:= new `okhttp3.internal.http2.Header`;
  #L30ed64.  call temp:= `value`(v0, v6) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L30ed6a.  v5:= temp @kind object;
  #L30ed6c.  call `<init>`(v4, v3, v5) @signature `Lokhttp3/internal/http2/Header;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L30ed72.  call temp:= `add`(v1, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L30ed78.  v6:= v6 + 1;
  #L30ed7c.  goto L30ed10;
  #L30ed7e.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `readHttp2HeadersList`(`okhttp3.Headers` v7 @kind object, `okhttp3.Protocol` v8 @kind object) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.readHttp2HeadersList:(Lokhttp3/Headers;Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L30edcc.  v0:= new `okhttp3.Headers$Builder`;
  #L30edd0.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L30edd6.  call temp:= `size`(v7) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L30eddc.  v1:= temp;
  #L30edde.  v2:= 0I;
  #L30ede0.  v3:= 0I;
  #L30ede2.  if v3 >= v1 then goto L30ee52;
  #L30ede6.  call temp:= `name`(v7, v3) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L30edec.  v4:= temp @kind object;
  #L30edee.  call temp:= `value`(v7, v3) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L30edf4.  v5:= temp @kind object;
  #L30edf6.  v6:= ":status" @kind object;
  #L30edfa.  call temp:= `equals`(v4, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30ee00.  v6:= temp;
  #L30ee02.  if v6 == 0 then goto L30ee32;
  #L30ee06.  v2:= new `java.lang.StringBuilder`;
  #L30ee0a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30ee10.  v4:= "HTTP/1.1 " @kind object;
  #L30ee14.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30ee1a.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30ee20.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30ee26.  v2:= temp @kind object;
  #L30ee28.  call temp:= `parse`(v2) @signature `Lokhttp3/internal/http/StatusLine;.parse:(Ljava/lang/String;)Lokhttp3/internal/http/StatusLine;` @kind static;
  #L30ee2e.  v2:= temp @kind object;
  #L30ee30.  goto L30ee4c;
  #L30ee32.  v6:= `@@okhttp3.internal.http2.Http2ExchangeCodec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @type ^`java.util.List` @kind object;
  #L30ee36.  call temp:= `contains`(v6, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L30ee3c.  v6:= temp;
  #L30ee3e.  if v6 != 0 then goto L30ee4c;
  #L30ee42.  v6:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L30ee46.  call `addLenient`(v6, v0, v4, v5) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L30ee4c.  v3:= v3 + 1;
  #L30ee50.  goto L30ede2;
  #L30ee52.  if v2 == 0 then goto L30ee92;
  #L30ee56.  v7:= new `okhttp3.Response$Builder`;
  #L30ee5a.  call `<init>`(v7) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L30ee60.  call temp:= `protocol`(v7, v8) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L30ee66.  v7:= temp @kind object;
  #L30ee68.  v8:= v2.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L30ee6c.  call temp:= `code`(v7, v8) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L30ee72.  v7:= temp @kind object;
  #L30ee74.  v8:= v2.`okhttp3.internal.http.StatusLine.message` @type ^`java.lang.String` @kind object;
  #L30ee78.  call temp:= `message`(v7, v8) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L30ee7e.  v7:= temp @kind object;
  #L30ee80.  call temp:= `build`(v0) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L30ee86.  v8:= temp @kind object;
  #L30ee88.  call temp:= `headers`(v7, v8) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L30ee8e.  v7:= temp @kind object;
  #L30ee90.  return v7 @kind object;
  #L30ee92.  v7:= new `java.net.ProtocolException`;
  #L30ee96.  v8:= "Expected ':status' header not present" @kind object;
  #L30ee9a.  call `<init>`(v7, v8) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30eea0.  goto L30eea4;
  #L30eea2.  throw v7;
  #L30eea4.  goto L30eea2;
}
procedure `void` `cancel`(`okhttp3.internal.http2.Http2ExchangeCodec` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30f02c.  v0:= 1I;
  #L30f02e.  v2.`okhttp3.internal.http2.Http2ExchangeCodec.canceled` @type ^`boolean` := v0 @kind boolean;
  #L30f032.  v0:= v2.`okhttp3.internal.http2.Http2ExchangeCodec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L30f036.  if v0 == 0 then goto L30f048;
  #L30f03a.  v0:= v2.`okhttp3.internal.http2.Http2ExchangeCodec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L30f03e.  v1:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L30f042.  call `closeLater`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L30f048.  return @kind void;
}
procedure `okhttp3.internal.connection.RealConnection` `connection`(`okhttp3.internal.http2.Http2ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.connection:()Lokhttp3/internal/connection/RealConnection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30ef00.  v0:= v1.`okhttp3.internal.http2.Http2ExchangeCodec.realConnection` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L30ef04.  return v0 @kind object;
}
procedure `okio.g0` `createRequestBody`(`okhttp3.internal.http2.Http2ExchangeCodec` v0 @kind this, `okhttp3.Request` v1 @kind object, `long` v2 ) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.createRequestBody:(Lokhttp3/Request;J)Lokio/g0;` @AccessFlag PUBLIC {
    temp;

  #L30ef18.  v1:= v0.`okhttp3.internal.http2.Http2ExchangeCodec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L30ef1c.  call temp:= `getSink`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/g0;` @kind virtual;
  #L30ef22.  v1:= temp @kind object;
  #L30ef24.  return v1 @kind object;
}
procedure `void` `finishRequest`(`okhttp3.internal.http2.Http2ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.finishRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30f05c.  v0:= v1.`okhttp3.internal.http2.Http2ExchangeCodec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L30f060.  call temp:= `getSink`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/g0;` @kind virtual;
  #L30f066.  v0:= temp @kind object;
  #L30f068.  call `close`(v0) @signature `Lokio/g0;.close:()V` @kind interface;
  #L30f06e.  return @kind void;
}
procedure `void` `flushRequest`(`okhttp3.internal.http2.Http2ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.flushRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30f080.  v0:= v1.`okhttp3.internal.http2.Http2ExchangeCodec.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L30f084.  call `flush`(v0) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L30f08a.  return @kind void;
}
procedure `okio.i0` `openResponseBodySource`(`okhttp3.internal.http2.Http2ExchangeCodec` v0 @kind this, `okhttp3.Response` v1 @kind object) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.openResponseBodySource:(Lokhttp3/Response;)Lokio/i0;` @AccessFlag PUBLIC {
    temp;

  #L30ef38.  v1:= v0.`okhttp3.internal.http2.Http2ExchangeCodec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L30ef3c.  call temp:= `getSource`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getSource:()Lokio/i0;` @kind virtual;
  #L30ef42.  v1:= temp @kind object;
  #L30ef44.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`okhttp3.internal.http2.Http2ExchangeCodec` v2 @kind this, `boolean` v3 ) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30eeb8.  v0:= v2.`okhttp3.internal.http2.Http2ExchangeCodec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L30eebc.  call temp:= `takeHeaders`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.takeHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L30eec2.  v0:= temp @kind object;
  #L30eec4.  v1:= v2.`okhttp3.internal.http2.Http2ExchangeCodec.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L30eec8.  call temp:= `readHttp2HeadersList`(v0, v1) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.readHttp2HeadersList:(Lokhttp3/Headers;Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind static;
  #L30eece.  v0:= temp @kind object;
  #L30eed0.  if v3 == 0 then goto L30eeec;
  #L30eed4.  v3:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L30eed8.  call temp:= `code`(v3, v0) @signature `Lokhttp3/internal/Internal;.code:(Lokhttp3/Response$Builder;)I` @kind virtual;
  #L30eede.  v3:= temp;
  #L30eee0.  v1:= 100I;
  #L30eee4.  if v3 != v1 then goto L30eeec;
  #L30eee8.  v3:= 0I;
  #L30eeea.  return v3 @kind object;
  #L30eeec.  return v0 @kind object;
}
procedure `long` `reportedContentLength`(`okhttp3.internal.http2.Http2ExchangeCodec` v2 @kind this, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.reportedContentLength:(Lokhttp3/Response;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30ed90.  call temp:= `contentLength`(v3) @signature `Lokhttp3/internal/http/HttpHeaders;.contentLength:(Lokhttp3/Response;)J` @kind static;
  #L30ed96.  v0:= temp @kind wide;
  #L30ed98.  return v0 @kind wide;
}
procedure `okhttp3.Headers` `trailers`(`okhttp3.internal.http2.Http2ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.trailers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30edac.  v0:= v1.`okhttp3.internal.http2.Http2ExchangeCodec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L30edb0.  call temp:= `trailers`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.trailers:()Lokhttp3/Headers;` @kind virtual;
  #L30edb6.  v0:= temp @kind object;
  #L30edb8.  return v0 @kind object;
}
procedure `void` `writeRequestHeaders`(`okhttp3.internal.http2.Http2ExchangeCodec` v3 @kind this, `okhttp3.Request` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30f09c.  v0:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L30f0a0.  if v0 == 0 then goto L30f0a6;
  #L30f0a4.  return @kind void;
  #L30f0a6.  call temp:= `body`(v4) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L30f0ac.  v0:= temp @kind object;
  #L30f0ae.  if v0 == 0 then goto L30f0b6;
  #L30f0b2.  v0:= 1I;
  #L30f0b4.  goto L30f0b8;
  #L30f0b6.  v0:= 0I;
  #L30f0b8.  call temp:= `http2HeadersList`(v4) @signature `Lokhttp3/internal/http2/Http2ExchangeCodec;.http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;` @kind static;
  #L30f0be.  v4:= temp @kind object;
  #L30f0c0.  v1:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L30f0c4.  call temp:= `newStream`(v1, v4, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(Ljava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L30f0ca.  v4:= temp @kind object;
  #L30f0cc.  v3.`okhttp3.internal.http2.Http2ExchangeCodec.stream` @type ^`okhttp3.internal.http2.Http2Stream` := v4 @kind object;
  #L30f0d0.  v4:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.canceled` @type ^`boolean` @kind boolean;
  #L30f0d4.  if v4 != 0 then goto L30f11e;
  #L30f0d8.  v4:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L30f0dc.  call temp:= `readTimeout`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.readTimeout:()Lokio/l0;` @kind virtual;
  #L30f0e2.  v4:= temp @kind object;
  #L30f0e4.  v0:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.chain` @type ^`okhttp3.Interceptor$Chain` @kind object;
  #L30f0e8.  call temp:= `readTimeoutMillis`(v0) @signature `Lokhttp3/Interceptor$Chain;.readTimeoutMillis:()I` @kind interface;
  #L30f0ee.  v0:= temp;
  #L30f0f0.  v0:= (`long`) v0 @kind i2l;
  #L30f0f2.  v2:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L30f0f6.  call temp:= `timeout`(v4, v0, v2) @signature `Lokio/l0;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/l0;` @kind virtual;
  #L30f0fc.  v4:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L30f100.  call temp:= `writeTimeout`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.writeTimeout:()Lokio/l0;` @kind virtual;
  #L30f106.  v4:= temp @kind object;
  #L30f108.  v0:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.chain` @type ^`okhttp3.Interceptor$Chain` @kind object;
  #L30f10c.  call temp:= `writeTimeoutMillis`(v0) @signature `Lokhttp3/Interceptor$Chain;.writeTimeoutMillis:()I` @kind interface;
  #L30f112.  v0:= temp;
  #L30f114.  v0:= (`long`) v0 @kind i2l;
  #L30f116.  call temp:= `timeout`(v4, v0, v2) @signature `Lokio/l0;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/l0;` @kind virtual;
  #L30f11c.  return @kind void;
  #L30f11e.  v4:= v3.`okhttp3.internal.http2.Http2ExchangeCodec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L30f122.  v0:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L30f126.  call `closeLater`(v4, v0) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L30f12c.  v4:= new `java.io.IOException`;
  #L30f130.  v0:= "Canceled" @kind object;
  #L30f134.  call `<init>`(v4, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30f13a.  throw v4;
}
