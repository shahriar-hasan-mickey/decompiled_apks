record `okhttp3.internal.http2.Http2Stream$FramingSource` @kind class @AccessFlag FINAL extends `okio.i0` @kind interface {
  `boolean` `okhttp3.internal.http2.Http2Stream$FramingSource.closed` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Http2Stream$FramingSource.finished` @AccessFlag ;
  `long` `okhttp3.internal.http2.Http2Stream$FramingSource.maxByteCount` @AccessFlag PRIVATE_FINAL;
  `okio.k` `okhttp3.internal.http2.Http2Stream$FramingSource.readBuffer` @AccessFlag PRIVATE_FINAL;
  `okio.k` `okhttp3.internal.http2.Http2Stream$FramingSource.receiveBuffer` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Stream` `okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okhttp3.Headers` `okhttp3.internal.http2.Http2Stream$FramingSource.trailers` @AccessFlag PRIVATE;
}
global `boolean` `@@okhttp3.internal.http2.Http2Stream$FramingSource.$assertionsDisabled` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L310218.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Stream$FramingSource` v0 @kind this, `okhttp3.internal.http2.Http2Stream` v1 @kind object, `long` v2 ) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.<init>:(Lokhttp3/internal/http2/Http2Stream;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L31022c.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` := v1 @kind object;
  #L310230.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L310236.  v1:= new `okio.k`;
  #L31023a.  call `<init>`(v1) @signature `Lokio/k;.<init>:()V` @kind direct;
  #L310240.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.receiveBuffer` @type ^`okio.k` := v1 @kind object;
  #L310244.  v1:= new `okio.k`;
  #L310248.  call `<init>`(v1) @signature `Lokio/k;.<init>:()V` @kind direct;
  #L31024e.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.readBuffer` @type ^`okio.k` := v1 @kind object;
  #L310252.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.maxByteCount` @type ^`long` := v2 @kind wide;
  #L310256.  return @kind void;
}
procedure `okio.k` `access$000`(`okhttp3.internal.http2.Http2Stream$FramingSource` v0 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.access$000:(Lokhttp3/internal/http2/Http2Stream$FramingSource;)Lokio/k;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3101cc.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.receiveBuffer` @type ^`okio.k` @kind object;
  #L3101d0.  return v0 @kind object;
}
procedure `okio.k` `access$100`(`okhttp3.internal.http2.Http2Stream$FramingSource` v0 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.access$100:(Lokhttp3/internal/http2/Http2Stream$FramingSource;)Lokio/k;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3101e4.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.readBuffer` @type ^`okio.k` @kind object;
  #L3101e8.  return v0 @kind object;
}
procedure `okhttp3.Headers` `access$200`(`okhttp3.internal.http2.Http2Stream$FramingSource` v0 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.access$200:(Lokhttp3/internal/http2/Http2Stream$FramingSource;)Lokhttp3/Headers;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L31019c.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.trailers` @type ^`okhttp3.Headers` @kind object;
  #L3101a0.  return v0 @kind object;
}
procedure `okhttp3.Headers` `access$202`(`okhttp3.internal.http2.Http2Stream$FramingSource` v0 @kind object, `okhttp3.Headers` v1 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.access$202:(Lokhttp3/internal/http2/Http2Stream$FramingSource;Lokhttp3/Headers;)Lokhttp3/Headers;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3101b4.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.trailers` @type ^`okhttp3.Headers` := v1 @kind object;
  #L3101b8.  return v1 @kind object;
}
procedure `void` `updateConnectionFlowControl`(`okhttp3.internal.http2.Http2Stream$FramingSource` v1 @kind this, `long` v2 ) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.updateConnectionFlowControl:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L31041c.  v0:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L310420.  v0:= v0.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L310424.  call `updateConnectionFlowControl`(v0, v2) @signature `Lokhttp3/internal/http2/Http2Connection;.updateConnectionFlowControl:(J)V` @kind virtual;
  #L31042a.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Stream$FramingSource` v5 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L310268.  v0:= v5.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L31026c.  @monitorenter v0
  #L31026e.  v1:= 1I;
  #L310270.  v5.`okhttp3.internal.http2.Http2Stream$FramingSource.closed` @type ^`boolean` := v1 @kind boolean;
  #L310274.  v1:= v5.`okhttp3.internal.http2.Http2Stream$FramingSource.readBuffer` @type ^`okio.k` @kind object;
  #L310278.  call temp:= `f1`(v1) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L31027e.  v1:= temp @kind wide;
  #L310280.  v3:= v5.`okhttp3.internal.http2.Http2Stream$FramingSource.readBuffer` @type ^`okio.k` @kind object;
  #L310284.  call `a`(v3) @signature `Lokio/k;.a:()V` @kind virtual;
  #L31028a.  v3:= v5.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L31028e.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L310294.  @monitorexit v0
  #L310296.  v3:= 0L;
  #L31029a.  v0:= lcmp(v1, v3);
  #L31029e.  if v0 <= 0 then goto L3102a8;
  #L3102a2.  call `updateConnectionFlowControl`(v5, v1) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.updateConnectionFlowControl:(J)V` @kind direct;
  #L3102a8.  v0:= v5.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L3102ac.  call `cancelStreamIfNecessary`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.cancelStreamIfNecessary:()V` @kind virtual;
  #L3102b2.  return @kind void;
  #L3102b4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3102b6.  @monitorexit v0
  #L3102b8.  throw v1;
  catch `java.lang.Throwable` @[L310270..L310296] goto L3102b4;
  catch `java.lang.Throwable` @[L3102b6..L3102b8] goto L3102b4;
}
procedure `long` `read`(`okhttp3.internal.http2.Http2Stream$FramingSource` v10 @kind this, `okio.k` v11 @kind object, `long` v12 ) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.read:(Lokio/k;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L30ffd8.  v0:= 0L;
  #L30ffdc.  v2:= lcmp(v12, v0);
  #L30ffe0.  if v2 < 0 then goto L310128;
  #L30ffe4.  v2:= 0I;
  #L30ffe6.  v3:= v10.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L30ffea.  @monitorenter v3
  #L30ffec.  v4:= v10.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L30fff0.  v4:= v4.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L30fff4.  call `enter`(v4) @signature `Lokio/h;.enter:()V` @kind virtual;
  #L30fffa.  v4:= v10.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L30fffe.  v5:= v4.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L310002.  if v5 == 0 then goto L310022;
  #L310006.  v2:= v4.`okhttp3.internal.http2.Http2Stream.errorException` @type ^`java.io.IOException` @kind object;
  #L31000a.  if v2 == 0 then goto L310010;
  #L31000e.  goto L310022;
  #L310010.  v2:= new `okhttp3.internal.http2.StreamResetException`;
  #L310014.  v4:= v10.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L310018.  v4:= v4.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L31001c.  call `<init>`(v2, v4) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L310022.  v4:= v10.`okhttp3.internal.http2.Http2Stream$FramingSource.closed` @type ^`boolean` @kind boolean;
  #L310026.  if v4 != 0 then goto L310100;
  #L31002a.  v4:= v10.`okhttp3.internal.http2.Http2Stream$FramingSource.readBuffer` @type ^`okio.k` @kind object;
  #L31002e.  call temp:= `f1`(v4) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L310034.  v4:= temp @kind wide;
  #L310036.  v6:= -1L;
  #L31003a.  v8:= lcmp(v4, v0);
  #L31003e.  if v8 <= 0 then goto L3100ae;
  #L310042.  v4:= v10.`okhttp3.internal.http2.Http2Stream$FramingSource.readBuffer` @type ^`okio.k` @kind object;
  #L310046.  call temp:= `f1`(v4) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L31004c.  v8:= temp @kind wide;
  #L31004e.  call temp:= `min`(v12, v8) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L310054.  v12:= temp @kind wide;
  #L310056.  call temp:= `read`(v4, v11, v12) @signature `Lokio/k;.read:(Lokio/k;J)J` @kind virtual;
  #L31005c.  v11:= temp @kind wide;
  #L31005e.  v13:= v10.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L310062.  v4:= v13.`okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead` @type ^`long` @kind wide;
  #L310066.  v4:= v4 + v11 @kind long;
  #L310068.  v13.`okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead` @type ^`long` := v4 @kind wide;
  #L31006c.  if v2 != 0 then goto L3100d8;
  #L310070.  v13:= v13.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L310074.  v13:= v13.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L310078.  call temp:= `getInitialWindowSize`(v13) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L31007e.  v13:= temp;
  #L310080.  v13:= v13 / 2;
  #L310084.  v8:= (`long`) v13 @kind i2l;
  #L310086.  v13:= lcmp(v4, v8);
  #L31008a.  if v13 < 0 then goto L3100d8;
  #L31008e.  v13:= v10.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L310092.  v4:= v13.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L310096.  v5:= v13.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L31009a.  v8:= v13.`okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead` @type ^`long` @kind wide;
  #L31009e.  call `writeWindowUpdateLater`(v4, v5, v8) @signature `Lokhttp3/internal/http2/Http2Connection;.writeWindowUpdateLater:(IJ)V` @kind virtual;
  #L3100a4.  v13:= v10.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L3100a8.  v13.`okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead` @type ^`long` := v0 @kind wide;
  #L3100ac.  goto L3100d8;
  #L3100ae.  v4:= v10.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L3100b2.  if v4 != 0 then goto L3100d6;
  #L3100b6.  if v2 != 0 then goto L3100d6;
  #L3100ba.  v2:= v10.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L3100be.  call `waitForIo`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.waitForIo:()V` @kind virtual;
  #L3100c4.  v2:= v10.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L3100c8.  v2:= v2.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L3100cc.  call `exitAndThrowIfTimedOut`(v2) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L3100d2.  @monitorexit v3
  #L3100d4.  goto L30ffe4;
  #L3100d6.  v11:= v6 @kind wide;
  #L3100d8.  v13:= v10.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L3100dc.  v13:= v13.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L3100e0.  call `exitAndThrowIfTimedOut`(v13) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L3100e6.  @monitorexit v3
  #L3100e8.  v13:= lcmp(v11, v6);
  #L3100ec.  if v13 == 0 then goto L3100f8;
  #L3100f0.  call `updateConnectionFlowControl`(v10, v11) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.updateConnectionFlowControl:(J)V` @kind direct;
  #L3100f6.  return v11 @kind wide;
  #L3100f8.  if v2 != 0 then goto L3100fe;
  #L3100fc.  return v6 @kind wide;
  #L3100fe.  throw v2;
  #L310100.  v11:= new `java.io.IOException`;
  #L310104.  v12:= "stream closed" @kind object;
  #L310108.  call `<init>`(v11, v12) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L31010e.  throw v11;
  #L310110.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L310112.  v12:= v10.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L310116.  v12:= v12.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L31011a.  call `exitAndThrowIfTimedOut`(v12) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L310120.  throw v11;
  #L310122.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L310124.  @monitorexit v3
  #L310126.  throw v11;
  #L310128.  v11:= new `java.lang.IllegalArgumentException`;
  #L31012c.  v0:= new `java.lang.StringBuilder`;
  #L310130.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L310136.  v1:= "byteCount < 0: " @kind object;
  #L31013a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L310140.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L310146.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L31014c.  v12:= temp @kind object;
  #L31014e.  call `<init>`(v11, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L310154.  goto L310158;
  #L310156.  throw v11;
  #L310158.  goto L310156;
  catch `java.lang.Throwable` @[L30ffec..L30fffa] goto L310122;
  catch `java.lang.Throwable` @[L30fffa..L3100c4] goto L310110;
  catch `java.lang.Throwable` @[L3100c4..L3100e8] goto L310122;
  catch `java.lang.Throwable` @[L310100..L310110] goto L310110;
  catch `java.lang.Throwable` @[L310112..L310126] goto L310122;
}
procedure `void` `receive`(`okhttp3.internal.http2.Http2Stream$FramingSource` v11 @kind this, `okio.o` v12 @kind object, `long` v13 ) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.receive:(Lokio/o;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3102e0.  v0:= 0L;
  #L3102e4.  v2:= lcmp(v13, v0);
  #L3102e8.  if v2 <= 0 then goto L3103e2;
  #L3102ec.  v2:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L3102f0.  @monitorenter v2
  #L3102f2.  v3:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L3102f6.  v4:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.readBuffer` @type ^`okio.k` @kind object;
  #L3102fa.  call temp:= `f1`(v4) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L310300.  v4:= temp @kind wide;
  #L310302.  v4:= v4 + v13 @kind long;
  #L310304.  v6:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.maxByteCount` @type ^`long` @kind wide;
  #L310308.  v8:= 1I;
  #L31030a.  v9:= 0I;
  #L31030c.  v10:= lcmp(v4, v6);
  #L310310.  if v10 <= 0 then goto L310318;
  #L310314.  v4:= 1I;
  #L310316.  goto L31031a;
  #L310318.  v4:= 0I;
  #L31031a.  @monitorexit v2
  #L31031c.  if v4 == 0 then goto L310336;
  #L310320.  call `skip`(v12, v13) @signature `Lokio/o;.skip:(J)V` @kind interface;
  #L310326.  v12:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L31032a.  v13:= `@@okhttp3.internal.http2.ErrorCode.FLOW_CONTROL_ERROR` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L31032e.  call `closeLater`(v12, v13) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L310334.  return @kind void;
  #L310336.  if v3 == 0 then goto L310342;
  #L31033a.  call `skip`(v12, v13) @signature `Lokio/o;.skip:(J)V` @kind interface;
  #L310340.  return @kind void;
  #L310342.  v2:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.receiveBuffer` @type ^`okio.k` @kind object;
  #L310346.  call temp:= `read`(v12, v2, v13) @signature `Lokio/i0;.read:(Lokio/k;J)J` @kind interface;
  #L31034c.  v2:= temp @kind wide;
  #L31034e.  v4:= -1L;
  #L310352.  v6:= lcmp(v2, v4);
  #L310356.  if v6 == 0 then goto L3103d0;
  #L31035a.  v13:= v13 - v2 @kind long;
  #L31035c.  v2:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L310360.  @monitorenter v2
  #L310362.  v3:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.closed` @type ^`boolean` @kind boolean;
  #L310366.  if v3 == 0 then goto L310382;
  #L31036a.  v3:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.receiveBuffer` @type ^`okio.k` @kind object;
  #L31036e.  call temp:= `f1`(v3) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L310374.  v3:= temp @kind wide;
  #L310376.  v5:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.receiveBuffer` @type ^`okio.k` @kind object;
  #L31037a.  call `a`(v5) @signature `Lokio/k;.a:()V` @kind virtual;
  #L310380.  goto L3103b8;
  #L310382.  v3:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.readBuffer` @type ^`okio.k` @kind object;
  #L310386.  call temp:= `f1`(v3) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L31038c.  v3:= temp @kind wide;
  #L31038e.  v5:= lcmp(v3, v0);
  #L310392.  if v5 != 0 then goto L310398;
  #L310396.  goto L31039a;
  #L310398.  v8:= 0I;
  #L31039a.  v3:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.readBuffer` @type ^`okio.k` @kind object;
  #L31039e.  v4:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.receiveBuffer` @type ^`okio.k` @kind object;
  #L3103a2.  call temp:= `i0`(v3, v4) @signature `Lokio/k;.i0:(Lokio/i0;)J` @kind virtual;
  #L3103a8.  if v8 == 0 then goto L3103b6;
  #L3103ac.  v3:= v11.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L3103b0.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L3103b6.  v3:= v0 @kind wide;
  #L3103b8.  @monitorexit v2
  #L3103ba.  v2:= lcmp(v3, v0);
  #L3103be.  if v2 <= 0 then goto L3102e0;
  #L3103c2.  call `updateConnectionFlowControl`(v11, v3) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.updateConnectionFlowControl:(J)V` @kind direct;
  #L3103c8.  goto L3102e0;
  #L3103ca.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3103cc.  @monitorexit v2
  #L3103ce.  throw v12;
  #L3103d0.  v12:= new `java.io.EOFException`;
  #L3103d4.  call `<init>`(v12) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3103da.  throw v12;
  #L3103dc.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3103de.  @monitorexit v2
  #L3103e0.  throw v12;
  #L3103e2.  return @kind void;
  catch `java.lang.Throwable` @[L3102f2..L31031c] goto L3103dc;
  catch `java.lang.Throwable` @[L310362..L3103ba] goto L3103ca;
  catch `java.lang.Throwable` @[L3103cc..L3103ce] goto L3103ca;
  catch `java.lang.Throwable` @[L3103de..L3103e0] goto L3103dc;
}
procedure `okio.l0` `timeout`(`okhttp3.internal.http2.Http2Stream$FramingSource` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.timeout:()Lokio/l0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3101fc.  v0:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.this$0` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L310200.  v0:= v0.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L310204.  return v0 @kind object;
}
