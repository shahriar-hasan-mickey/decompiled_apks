record `okhttp3.internal.http2.Http2Stream` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @AccessFlag ;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2Stream.connection` @AccessFlag FINAL;
  `okhttp3.internal.http2.ErrorCode` `okhttp3.internal.http2.Http2Stream.errorCode` @AccessFlag ;
  `java.io.IOException` `okhttp3.internal.http2.Http2Stream.errorException` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @AccessFlag PRIVATE;
  `java.util.Deque` `okhttp3.internal.http2.Http2Stream.headersQueue` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Http2Stream.id` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Stream$StreamTimeout` `okhttp3.internal.http2.Http2Stream.readTimeout` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Stream$FramingSink` `okhttp3.internal.http2.Http2Stream.sink` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Stream$FramingSource` `okhttp3.internal.http2.Http2Stream.source` @AccessFlag PRIVATE_FINAL;
  `long` `okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead` @AccessFlag ;
  `okhttp3.internal.http2.Http2Stream$StreamTimeout` `okhttp3.internal.http2.Http2Stream.writeTimeout` @AccessFlag FINAL;
}
global `boolean` `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Stream;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L310884.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `int` v4 , `okhttp3.internal.http2.Http2Connection` v5 @kind object, `boolean` v6 , `boolean` v7 , `okhttp3.Headers` v8 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.<init>:(ILokhttp3/internal/http2/Http2Connection;ZZLokhttp3/Headers;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L310898.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L31089e.  v0:= 0L;
  #L3108a2.  v3.`okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead` @type ^`long` := v0 @kind wide;
  #L3108a6.  v0:= new `java.util.ArrayDeque`;
  #L3108aa.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L3108b0.  v3.`okhttp3.internal.http2.Http2Stream.headersQueue` @type ^`java.util.Deque` := v0 @kind object;
  #L3108b4.  v1:= new `okhttp3.internal.http2.Http2Stream$StreamTimeout`;
  #L3108b8.  call `<init>`(v1, v3) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L3108be.  v3.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` := v1 @kind object;
  #L3108c2.  v1:= new `okhttp3.internal.http2.Http2Stream$StreamTimeout`;
  #L3108c6.  call `<init>`(v1, v3) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L3108cc.  v3.`okhttp3.internal.http2.Http2Stream.writeTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` := v1 @kind object;
  #L3108d0.  v1:= "connection == null" @kind object;
  #L3108d4.  call temp:= `requireNonNull`(v5, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3108da.  v3.`okhttp3.internal.http2.Http2Stream.id` @type ^`int` := v4;
  #L3108de.  v3.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` := v5 @kind object;
  #L3108e2.  v4:= v5.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L3108e6.  call temp:= `getInitialWindowSize`(v4) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L3108ec.  v4:= temp;
  #L3108ee.  v1:= (`long`) v4 @kind i2l;
  #L3108f0.  v3.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` := v1 @kind wide;
  #L3108f4.  v4:= new `okhttp3.internal.http2.Http2Stream$FramingSource`;
  #L3108f8.  v5:= v5.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L3108fc.  call temp:= `getInitialWindowSize`(v5) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L310902.  v5:= temp;
  #L310904.  v1:= (`long`) v5 @kind i2l;
  #L310906.  call `<init>`(v4, v3, v1) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.<init>:(Lokhttp3/internal/http2/Http2Stream;J)V` @kind direct;
  #L31090c.  v3.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` := v4 @kind object;
  #L310910.  v5:= new `okhttp3.internal.http2.Http2Stream$FramingSink`;
  #L310914.  call `<init>`(v5, v3) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L31091a.  v3.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` := v5 @kind object;
  #L31091e.  v4.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` := v7 @kind boolean;
  #L310922.  v5.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` := v6 @kind boolean;
  #L310926.  if v8 == 0 then goto L310930;
  #L31092a.  call temp:= `add`(v0, v8) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L310930.  call temp:= `isLocallyInitiated`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L310936.  v4:= temp;
  #L310938.  if v4 == 0 then goto L310952;
  #L31093c.  if v8 != 0 then goto L310942;
  #L310940.  goto L310952;
  #L310942.  v4:= new `java.lang.IllegalStateException`;
  #L310946.  v5:= "locally-initiated streams shouldn't have headers yet" @kind object;
  #L31094a.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L310950.  throw v4;
  #L310952.  call temp:= `isLocallyInitiated`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L310958.  v4:= temp;
  #L31095a.  if v4 != 0 then goto L310974;
  #L31095e.  if v8 == 0 then goto L310964;
  #L310962.  goto L310974;
  #L310964.  v4:= new `java.lang.IllegalStateException`;
  #L310968.  v5:= "remotely-initiated streams should have headers" @kind object;
  #L31096c.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L310972.  throw v4;
  #L310974.  return @kind void;
}
procedure `boolean` `closeInternal`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object, `java.io.IOException` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;Ljava/io/IOException;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3104e0.  @monitorenter v2
  #L3104e2.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L3104e6.  v1:= 0I;
  #L3104e8.  if v0 == 0 then goto L3104f0;
  #L3104ec.  @monitorexit v2
  #L3104ee.  return v1;
  #L3104f0.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L3104f4.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L3104f8.  if v0 == 0 then goto L31050c;
  #L3104fc.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L310500.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L310504.  if v0 == 0 then goto L31050c;
  #L310508.  @monitorexit v2
  #L31050a.  return v1;
  #L31050c.  v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v3 @kind object;
  #L310510.  v2.`okhttp3.internal.http2.Http2Stream.errorException` @type ^`java.io.IOException` := v4 @kind object;
  #L310514.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L31051a.  @monitorexit v2
  #L31051c.  v3:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L310520.  v4:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L310524.  call temp:= `removeStream`(v3, v4) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L31052a.  v3:= 1I;
  #L31052c.  return v3;
  #L31052e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L310530.  @monitorexit v2
  #L310532.  throw v3;
  catch `java.lang.Throwable` @[L3104e2..L31051c] goto L31052e;
  catch `java.lang.Throwable` @[L310530..L310532] goto L31052e;
}
procedure `void` `addBytesToWriteWindow`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `long` v4 ) @signature `Lokhttp3/internal/http2/Http2Stream;.addBytesToWriteWindow:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L310988.  v0:= v3.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L31098c.  v0:= v0 + v4 @kind long;
  #L31098e.  v3.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L310992.  v0:= 0L;
  #L310996.  v2:= lcmp(v4, v0);
  #L31099a.  if v2 <= 0 then goto L3109a4;
  #L31099e.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L3109a4.  return @kind void;
}
procedure `void` `cancelStreamIfNecessary`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.cancelStreamIfNecessary:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3109b8.  @monitorenter v2
  #L3109ba.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L3109be.  v1:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L3109c2.  if v1 != 0 then goto L3109e6;
  #L3109c6.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.closed` @type ^`boolean` @kind boolean;
  #L3109ca.  if v0 == 0 then goto L3109e6;
  #L3109ce.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L3109d2.  v1:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L3109d6.  if v1 != 0 then goto L3109e2;
  #L3109da.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L3109de.  if v0 == 0 then goto L3109e6;
  #L3109e2.  v0:= 1I;
  #L3109e4.  goto L3109e8;
  #L3109e6.  v0:= 0I;
  #L3109e8.  call temp:= `isOpen`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L3109ee.  v1:= temp;
  #L3109f0.  @monitorexit v2
  #L3109f2.  if v0 == 0 then goto L310a04;
  #L3109f6.  v0:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L3109fa.  v1:= 0I;
  #L3109fc.  call `close`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;Ljava/io/IOException;)V` @kind virtual;
  #L310a02.  goto L310a16;
  #L310a04.  if v1 != 0 then goto L310a16;
  #L310a08.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L310a0c.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L310a10.  call temp:= `removeStream`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L310a16.  return @kind void;
  #L310a18.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L310a1a.  @monitorexit v2
  #L310a1c.  throw v0;
  catch `java.lang.Throwable` @[L3109ba..L3109f2] goto L310a18;
  catch `java.lang.Throwable` @[L310a1a..L310a1c] goto L310a18;
}
procedure `void` `checkOutNotClosed`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.checkOutNotClosed:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L310a44.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L310a48.  v1:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L310a4c.  if v1 != 0 then goto L310a8c;
  #L310a50.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L310a54.  if v0 != 0 then goto L310a7c;
  #L310a58.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L310a5c.  if v0 == 0 then goto L310a7a;
  #L310a60.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorException` @type ^`java.io.IOException` @kind object;
  #L310a64.  if v0 == 0 then goto L310a6a;
  #L310a68.  goto L310a78;
  #L310a6a.  v0:= new `okhttp3.internal.http2.StreamResetException`;
  #L310a6e.  v1:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L310a72.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L310a78.  throw v0;
  #L310a7a.  return @kind void;
  #L310a7c.  v0:= new `java.io.IOException`;
  #L310a80.  v1:= "stream finished" @kind object;
  #L310a84.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L310a8a.  throw v0;
  #L310a8c.  v0:= new `java.io.IOException`;
  #L310a90.  v1:= "stream closed" @kind object;
  #L310a94.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L310a9a.  throw v0;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Stream` v1 @kind this, `okhttp3.internal.http2.ErrorCode` v2 @kind object, `java.io.IOException` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L310aac.  call temp:= `closeInternal`(v1, v2, v3) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;Ljava/io/IOException;)Z` @kind direct;
  #L310ab2.  v3:= temp;
  #L310ab4.  if v3 != 0 then goto L310aba;
  #L310ab8.  return @kind void;
  #L310aba.  v3:= v1.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L310abe.  v0:= v1.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L310ac2.  call `writeSynReset`(v3, v0, v2) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynReset:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L310ac8.  return @kind void;
}
procedure `void` `closeLater`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L310adc.  v0:= 0I;
  #L310ade.  call temp:= `closeInternal`(v2, v3, v0) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;Ljava/io/IOException;)Z` @kind direct;
  #L310ae4.  v0:= temp;
  #L310ae6.  if v0 != 0 then goto L310aec;
  #L310aea.  return @kind void;
  #L310aec.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L310af0.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L310af4.  call `writeSynResetLater`(v0, v1, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynResetLater:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L310afa.  return @kind void;
}
procedure `void` `enqueueTrailers`(`okhttp3.internal.http2.Http2Stream` v1 @kind this, `okhttp3.Headers` v2 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.enqueueTrailers:(Lokhttp3/Headers;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L310b0c.  @monitorenter v1
  #L310b0e.  v0:= v1.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L310b12.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L310b16.  if v0 != 0 then goto L310b44;
  #L310b1a.  call temp:= `size`(v2) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L310b20.  v0:= temp;
  #L310b22.  if v0 == 0 then goto L310b34;
  #L310b26.  v0:= v1.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L310b2a.  call temp:= `access$302`(v0, v2) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.access$302:(Lokhttp3/internal/http2/Http2Stream$FramingSink;Lokhttp3/Headers;)Lokhttp3/Headers;` @kind static;
  #L310b30.  @monitorexit v1
  #L310b32.  return @kind void;
  #L310b34.  v2:= new `java.lang.IllegalArgumentException`;
  #L310b38.  v0:= "trailers.size() == 0" @kind object;
  #L310b3c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L310b42.  throw v2;
  #L310b44.  v2:= new `java.lang.IllegalStateException`;
  #L310b48.  v0:= "already finished" @kind object;
  #L310b4c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L310b52.  throw v2;
  #L310b54.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L310b56.  @monitorexit v1
  #L310b58.  throw v2;
  catch `java.lang.Throwable` @[L310b0e..L310b58] goto L310b54;
}
procedure `okhttp3.internal.http2.Http2Connection` `getConnection`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getConnection:()Lokhttp3/internal/http2/Http2Connection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3107c8.  v0:= v1.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L3107cc.  return v0 @kind object;
}
procedure `okhttp3.internal.http2.ErrorCode` `getErrorCode`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getErrorCode:()Lokhttp3/internal/http2/ErrorCode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31079c.  @monitorenter v1
  #L31079e.  v0:= v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L3107a2.  @monitorexit v1
  #L3107a4.  return v0 @kind object;
  #L3107a6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3107a8.  @monitorexit v1
  #L3107aa.  throw v0;
  catch `java.lang.Throwable` @[L31079e..L3107a2] goto L3107a6;
}
procedure `int` `getId`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getId:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L310604.  v0:= v1.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L310608.  return v0;
}
procedure `okio.g0` `getSink`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/g0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3107e0.  @monitorenter v2
  #L3107e2.  v0:= v2.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` @kind boolean;
  #L3107e6.  if v0 != 0 then goto L310808;
  #L3107ea.  call temp:= `isLocallyInitiated`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L3107f0.  v0:= temp;
  #L3107f2.  if v0 == 0 then goto L3107f8;
  #L3107f6.  goto L310808;
  #L3107f8.  v0:= new `java.lang.IllegalStateException`;
  #L3107fc.  v1:= "reply before requesting the sink" @kind object;
  #L310800.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L310806.  throw v0;
  #L310808.  @monitorexit v2
  #L31080a.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L31080e.  return v0 @kind object;
  #L310810.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L310812.  @monitorexit v2
  #L310814.  throw v0;
  catch `java.lang.Throwable` @[L3107e2..L31080a] goto L310810;
  catch `java.lang.Throwable` @[L310812..L310814] goto L310810;
}
procedure `okio.i0` `getSource`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getSource:()Lokio/i0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31083c.  v0:= v1.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L310840.  return v0 @kind object;
}
procedure `boolean` `isLocallyInitiated`(`okhttp3.internal.http2.Http2Stream` v4 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L310558.  v0:= v4.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L31055c.  v1:= 1I;
  #L31055e.  v0:= v0 ^& v1 @kind int;
  #L310560.  v2:= 0I;
  #L310562.  if v0 != v1 then goto L31056a;
  #L310566.  v0:= 1I;
  #L310568.  goto L31056c;
  #L31056a.  v0:= 0I;
  #L31056c.  v3:= v4.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L310570.  v3:= v3.`okhttp3.internal.http2.Http2Connection.client` @type ^`boolean` @kind boolean;
  #L310574.  if v3 != v0 then goto L31057a;
  #L310578.  goto L31057c;
  #L31057a.  v1:= 0I;
  #L31057c.  return v1;
}
procedure `boolean` `isOpen`(`okhttp3.internal.http2.Http2Stream` v3 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L310590.  @monitorenter v3
  #L310592.  v0:= v3.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L310596.  v1:= 0I;
  #L310598.  if v0 == 0 then goto L3105a0;
  #L31059c.  @monitorexit v3
  #L31059e.  return v1;
  #L3105a0.  v0:= v3.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L3105a4.  v2:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L3105a8.  if v2 != 0 then goto L3105b4;
  #L3105ac.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.closed` @type ^`boolean` @kind boolean;
  #L3105b0.  if v0 == 0 then goto L3105d4;
  #L3105b4.  v0:= v3.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L3105b8.  v2:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L3105bc.  if v2 != 0 then goto L3105c8;
  #L3105c0.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L3105c4.  if v0 == 0 then goto L3105d4;
  #L3105c8.  v0:= v3.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` @kind boolean;
  #L3105cc.  if v0 == 0 then goto L3105d4;
  #L3105d0.  @monitorexit v3
  #L3105d2.  return v1;
  #L3105d4.  v0:= 1I;
  #L3105d6.  @monitorexit v3
  #L3105d8.  return v0;
  #L3105da.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3105dc.  @monitorexit v3
  #L3105de.  throw v0;
  catch `java.lang.Throwable` @[L310592..L310596] goto L3105da;
  catch `java.lang.Throwable` @[L3105a0..L3105cc] goto L3105da;
}
procedure `okio.l0` `readTimeout`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.readTimeout:()Lokio/l0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L310854.  v0:= v1.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L310858.  return v0 @kind object;
}
procedure `void` `receiveData`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `okio.o` v4 @kind object, `int` v5 ) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveData:(Lokio/o;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L310b78.  v0:= v3.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L310b7c.  v1:= (`long`) v5 @kind i2l;
  #L310b7e.  call `receive`(v0, v4, v1) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.receive:(Lokio/o;J)V` @kind virtual;
  #L310b84.  return @kind void;
}
procedure `void` `receiveHeaders`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.Headers` v3 @kind object, `boolean` v4 ) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveHeaders:(Lokhttp3/Headers;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L310b98.  @monitorenter v2
  #L310b9a.  v0:= v2.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` @kind boolean;
  #L310b9e.  v1:= 1I;
  #L310ba0.  if v0 == 0 then goto L310bb6;
  #L310ba4.  if v4 != 0 then goto L310baa;
  #L310ba8.  goto L310bb6;
  #L310baa.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L310bae.  call temp:= `access$202`(v0, v3) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.access$202:(Lokhttp3/internal/http2/Http2Stream$FramingSource;Lokhttp3/Headers;)Lokhttp3/Headers;` @kind static;
  #L310bb4.  goto L310bc4;
  #L310bb6.  v2.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` := v1 @kind boolean;
  #L310bba.  v0:= v2.`okhttp3.internal.http2.Http2Stream.headersQueue` @type ^`java.util.Deque` @kind object;
  #L310bbe.  call temp:= `add`(v0, v3) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L310bc4.  if v4 == 0 then goto L310bd0;
  #L310bc8.  v3:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L310bcc.  v3.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` := v1 @kind boolean;
  #L310bd0.  call temp:= `isOpen`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L310bd6.  v3:= temp;
  #L310bd8.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L310bde.  @monitorexit v2
  #L310be0.  if v3 != 0 then goto L310bf2;
  #L310be4.  v3:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L310be8.  v4:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L310bec.  call temp:= `removeStream`(v3, v4) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L310bf2.  return @kind void;
  #L310bf4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L310bf6.  @monitorexit v2
  #L310bf8.  throw v3;
  catch `java.lang.Throwable` @[L310b9a..L310be0] goto L310bf4;
  catch `java.lang.Throwable` @[L310bf6..L310bf8] goto L310bf4;
}
procedure `void` `receiveRstStream`(`okhttp3.internal.http2.Http2Stream` v1 @kind this, `okhttp3.internal.http2.ErrorCode` v2 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveRstStream:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag  {
    temp;
    v0;

  #L310c20.  @monitorenter v1
  #L310c22.  v0:= v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L310c26.  if v0 != 0 then goto L310c34;
  #L310c2a.  v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v2 @kind object;
  #L310c2e.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L310c34.  @monitorexit v1
  #L310c36.  return @kind void;
  #L310c38.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L310c3a.  @monitorexit v1
  #L310c3c.  throw v2;
  catch `java.lang.Throwable` @[L310c22..L310c34] goto L310c38;
}
procedure `okhttp3.Headers` `takeHeaders`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.takeHeaders:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L31061c.  @monitorenter v2
  #L31061e.  v0:= v2.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L310622.  call `enter`(v0) @signature `Lokio/h;.enter:()V` @kind virtual;
  #L310628.  v0:= v2.`okhttp3.internal.http2.Http2Stream.headersQueue` @type ^`java.util.Deque` @kind object;
  #L31062c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L310632.  v0:= temp;
  #L310634.  if v0 == 0 then goto L310648;
  #L310638.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L31063c.  if v0 != 0 then goto L310648;
  #L310640.  call `waitForIo`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.waitForIo:()V` @kind virtual;
  #L310646.  goto L310628;
  #L310648.  v0:= v2.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L31064c.  call `exitAndThrowIfTimedOut`(v0) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L310652.  v0:= v2.`okhttp3.internal.http2.Http2Stream.headersQueue` @type ^`java.util.Deque` @kind object;
  #L310656.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L31065c.  v0:= temp;
  #L31065e.  if v0 != 0 then goto L310676;
  #L310662.  v0:= v2.`okhttp3.internal.http2.Http2Stream.headersQueue` @type ^`java.util.Deque` @kind object;
  #L310666.  call temp:= `removeFirst`(v0) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L31066c.  v0:= temp @kind object;
  #L31066e.  v0:= (`okhttp3.Headers`) v0 @kind object;
  #L310672.  @monitorexit v2
  #L310674.  return v0 @kind object;
  #L310676.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorException` @type ^`java.io.IOException` @kind object;
  #L31067a.  if v0 == 0 then goto L310680;
  #L31067e.  goto L31068e;
  #L310680.  v0:= new `okhttp3.internal.http2.StreamResetException`;
  #L310684.  v1:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L310688.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L31068e.  throw v0;
  #L310690.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L310692.  v1:= v2.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L310696.  call `exitAndThrowIfTimedOut`(v1) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L31069c.  throw v0;
  #L31069e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3106a0.  @monitorexit v2
  #L3106a2.  goto L3106a6;
  #L3106a4.  throw v0;
  #L3106a6.  goto L3106a4;
  catch `java.lang.Throwable` @[L31061e..L310628] goto L31069e;
  catch `java.lang.Throwable` @[L310628..L310646] goto L310690;
  catch `java.lang.Throwable` @[L310648..L310672] goto L31069e;
  catch `java.lang.Throwable` @[L310676..L31069e] goto L31069e;
}
procedure `okhttp3.Headers` `trailers`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.trailers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3106e0.  @monitorenter v2
  #L3106e2.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L3106e6.  if v0 == 0 then goto L310704;
  #L3106ea.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorException` @type ^`java.io.IOException` @kind object;
  #L3106ee.  if v0 == 0 then goto L3106f4;
  #L3106f2.  goto L310702;
  #L3106f4.  v0:= new `okhttp3.internal.http2.StreamResetException`;
  #L3106f8.  v1:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L3106fc.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L310702.  throw v0;
  #L310704.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L310708.  v1:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L31070c.  if v1 == 0 then goto L310762;
  #L310710.  call temp:= `access$000`(v0) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.access$000:(Lokhttp3/internal/http2/Http2Stream$FramingSource;)Lokio/k;` @kind static;
  #L310716.  v0:= temp @kind object;
  #L310718.  call temp:= `O`(v0) @signature `Lokio/k;.O:()Z` @kind virtual;
  #L31071e.  v0:= temp;
  #L310720.  if v0 == 0 then goto L310762;
  #L310724.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L310728.  call temp:= `access$100`(v0) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.access$100:(Lokhttp3/internal/http2/Http2Stream$FramingSource;)Lokio/k;` @kind static;
  #L31072e.  v0:= temp @kind object;
  #L310730.  call temp:= `O`(v0) @signature `Lokio/k;.O:()Z` @kind virtual;
  #L310736.  v0:= temp;
  #L310738.  if v0 == 0 then goto L310762;
  #L31073c.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L310740.  call temp:= `access$200`(v0) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.access$200:(Lokhttp3/internal/http2/Http2Stream$FramingSource;)Lokhttp3/Headers;` @kind static;
  #L310746.  v0:= temp @kind object;
  #L310748.  if v0 == 0 then goto L31075a;
  #L31074c.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L310750.  call temp:= `access$200`(v0) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.access$200:(Lokhttp3/internal/http2/Http2Stream$FramingSource;)Lokhttp3/Headers;` @kind static;
  #L310756.  v0:= temp @kind object;
  #L310758.  goto L31075e;
  #L31075a.  v0:= `@@okhttp3.internal.Util.EMPTY_HEADERS` @type ^`okhttp3.Headers` @kind object;
  #L31075e.  @monitorexit v2
  #L310760.  return v0 @kind object;
  #L310762.  v0:= new `java.lang.IllegalStateException`;
  #L310766.  v1:= "too early; can't read the trailers yet" @kind object;
  #L31076a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L310770.  throw v0;
  #L310772.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L310774.  @monitorexit v2
  #L310776.  throw v0;
  catch `java.lang.Throwable` @[L3106e2..L31075e] goto L310772;
  catch `java.lang.Throwable` @[L310762..L310772] goto L310772;
}
procedure `void` `waitForIo`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.waitForIo:()V` @AccessFlag  {
    temp;
    v0;

  #L310c5c.  call `wait`(v1) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #L310c62.  return @kind void;
  #L310c64.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L310c6a.  v0:= temp @kind object;
  #L310c6c.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L310c72.  v0:= new `java.io.InterruptedIOException`;
  #L310c76.  call `<init>`(v0) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L310c7c.  throw v0;
  catch `java.lang.InterruptedException` @[L310c5c..L310c62] goto L310c64;
}
procedure `void` `writeHeaders`(`okhttp3.internal.http2.Http2Stream` v6 @kind this, `java.util.List` v7 @kind object, `boolean` v8 , `boolean` v9 ) @signature `Lokhttp3/internal/http2/Http2Stream;.writeHeaders:(Ljava/util/List;ZZ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L310ca0.  v0:= "headers == null" @kind object;
  #L310ca4.  call temp:= `requireNonNull`(v7, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L310caa.  @monitorenter v6
  #L310cac.  v0:= 1I;
  #L310cae.  v6.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` := v0 @kind boolean;
  #L310cb2.  if v8 == 0 then goto L310cbe;
  #L310cb6.  v1:= v6.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L310cba.  v1.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` := v0 @kind boolean;
  #L310cbe.  @monitorexit v6
  #L310cc0.  if v9 != 0 then goto L310cee;
  #L310cc4.  v1:= v6.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L310cc8.  @monitorenter v1
  #L310cca.  v9:= v6.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L310cce.  v2:= v9.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L310cd2.  v4:= 0L;
  #L310cd6.  v9:= lcmp(v2, v4);
  #L310cda.  if v9 != 0 then goto L310ce2;
  #L310cde.  v9:= 1I;
  #L310ce0.  goto L310ce4;
  #L310ce2.  v9:= 0I;
  #L310ce4.  @monitorexit v1
  #L310ce6.  goto L310cee;
  #L310ce8.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L310cea.  @monitorexit v1
  #L310cec.  throw v7;
  #L310cee.  v0:= v6.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L310cf2.  v1:= v6.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L310cf6.  call `writeHeaders`(v0, v1, v8, v7) @signature `Lokhttp3/internal/http2/Http2Connection;.writeHeaders:(IZLjava/util/List;)V` @kind virtual;
  #L310cfc.  if v9 == 0 then goto L310d0a;
  #L310d00.  v7:= v6.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L310d04.  call `flush`(v7) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L310d0a.  return @kind void;
  #L310d0c.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L310d0e.  @monitorexit v6
  #L310d10.  throw v7;
  catch `java.lang.Throwable` @[L310cae..L310cc0] goto L310d0c;
  catch `java.lang.Throwable` @[L310cca..L310cec] goto L310ce8;
  catch `java.lang.Throwable` @[L310d0e..L310d10] goto L310d0c;
}
procedure `okio.l0` `writeTimeout`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.writeTimeout:()Lokio/l0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31086c.  v0:= v1.`okhttp3.internal.http2.Http2Stream.writeTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L310870.  return v0 @kind object;
}
