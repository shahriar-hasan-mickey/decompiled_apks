record `okhttp3.internal.http2.Hpack$Writer` @kind class @AccessFlag FINAL {
  `okhttp3.internal.http2.Header`[] `okhttp3.internal.http2.Hpack$Writer.dynamicTable` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Hpack$Writer.headerCount` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @AccessFlag ;
  `okio.k` `okhttp3.internal.http2.Hpack$Writer.out` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.useCompression` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Hpack$Writer.SETTINGS_HEADER_TABLE_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Hpack$Writer.SETTINGS_HEADER_TABLE_SIZE_LIMIT` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v1 @kind this, `int` v2 , `boolean` v3 , `okio.k` v4 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/k;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L30c33c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30c342.  v0:= 2147483647I;
  #L30c348.  v1.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v0;
  #L30c34c.  v0:= 8I;
  #L30c350.  v0:= new `okhttp3.internal.http2.Header`[v0];
  #L30c354.  v1.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v0 @kind object;
  #L30c358.  v0:= length @variable v0;
  #L30c35a.  v0:= v0 + -1;
  #L30c35e.  v1.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v0;
  #L30c362.  v0:= 0I;
  #L30c364.  v1.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v0;
  #L30c368.  v1.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v0;
  #L30c36c.  v1.`okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @type ^`int` := v2;
  #L30c370.  v1.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int` := v2;
  #L30c374.  v1.`okhttp3.internal.http2.Hpack$Writer.useCompression` @type ^`boolean` := v3 @kind boolean;
  #L30c378.  v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.k` := v4 @kind object;
  #L30c37c.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this, `okio.k` v3 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(Lokio/k;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L30c390.  v0:= 4096I;
  #L30c394.  v1:= 1I;
  #L30c396.  call `<init>`(v2, v0, v1, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/k;)V` @kind direct;
  #L30c39c.  return @kind void;
}
procedure `void` `adjustDynamicTableByteCount`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.adjustDynamicTableByteCount:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L30c3b0.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L30c3b4.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L30c3b8.  if v0 >= v1 then goto L30c3d0;
  #L30c3bc.  if v0 != 0 then goto L30c3c8;
  #L30c3c0.  call `clearDynamicTable`(v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @kind direct;
  #L30c3c6.  goto L30c3d0;
  #L30c3c8.  v1:= v1 - v0 @kind int;
  #L30c3ca.  call temp:= `evictToRecoverBytes`(v2, v1) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @kind direct;
  #L30c3d0.  return @kind void;
}
procedure `void` `clearDynamicTable`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L30c3e4.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L30c3e8.  v1:= 0I;
  #L30c3ea.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L30c3f0.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L30c3f4.  v0:= length @variable v0;
  #L30c3f6.  v0:= v0 + -1;
  #L30c3fa.  v2.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v0;
  #L30c3fe.  v0:= 0I;
  #L30c400.  v2.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v0;
  #L30c404.  v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v0;
  #L30c408.  return @kind void;
}
procedure `int` `evictToRecoverBytes`(`okhttp3.internal.http2.Hpack$Writer` v4 @kind this, `int` v5 ) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30c29c.  v0:= 0I;
  #L30c29e.  if v5 <= 0 then goto L30c32a;
  #L30c2a2.  v1:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L30c2a6.  v1:= length @variable v1;
  #L30c2a8.  v1:= v1 + -1;
  #L30c2ac.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L30c2b0.  if v1 < v2 then goto L30c2ee;
  #L30c2b4.  if v5 <= 0 then goto L30c2ee;
  #L30c2b8.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L30c2bc.  v3:= v2[v1] @kind object;
  #L30c2c0.  v3:= v3.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L30c2c4.  v5:= v5 - v3 @kind int;
  #L30c2c6.  v3:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L30c2ca.  v2:= v2[v1] @kind object;
  #L30c2ce.  v2:= v2.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L30c2d2.  v3:= v3 - v2 @kind int;
  #L30c2d4.  v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v3;
  #L30c2d8.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L30c2dc.  v2:= v2 + -1;
  #L30c2e0.  v4.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v2;
  #L30c2e4.  v0:= v0 + 1;
  #L30c2e8.  v1:= v1 + -1;
  #L30c2ec.  goto L30c2ac;
  #L30c2ee.  v5:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L30c2f2.  v1:= v2 + 1;
  #L30c2f6.  v2:= v2 + 1;
  #L30c2fa.  v2:= v2 + v0 @kind int;
  #L30c2fc.  v3:= v4.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L30c300.  call `arraycopy`(v5, v1, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L30c306.  v5:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L30c30a.  v1:= v4.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L30c30e.  v2:= v1 + 1;
  #L30c312.  v1:= v1 + 1;
  #L30c316.  v1:= v1 + v0 @kind int;
  #L30c318.  v3:= 0I;
  #L30c31a.  call `fill`(v5, v2, v1, v3) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L30c320.  v5:= v4.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L30c324.  v5:= v5 + v0 @kind int;
  #L30c326.  v4.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v5;
  #L30c32a.  return v0;
}
procedure `void` `insertIntoDynamicTable`(`okhttp3.internal.http2.Hpack$Writer` v6 @kind this, `okhttp3.internal.http2.Header` v7 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L30c41c.  v0:= v7.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L30c420.  v1:= v6.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L30c424.  if v0 <= v1 then goto L30c430;
  #L30c428.  call `clearDynamicTable`(v6) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @kind direct;
  #L30c42e.  return @kind void;
  #L30c430.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L30c434.  v2:= v2 + v0 @kind int;
  #L30c436.  v2:= v2 - v1 @kind int;
  #L30c438.  call temp:= `evictToRecoverBytes`(v6, v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @kind direct;
  #L30c43e.  v1:= v6.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L30c442.  v1:= v1 + 1;
  #L30c446.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L30c44a.  v3:= length @variable v2;
  #L30c44c.  if v1 <= v3 then goto L30c478;
  #L30c450.  v1:= length @variable v2;
  #L30c452.  v1:= v1 * 2;
  #L30c456.  v1:= new `okhttp3.internal.http2.Header`[v1];
  #L30c45a.  v3:= 0I;
  #L30c45c.  v4:= length @variable v2;
  #L30c45e.  v5:= length @variable v2;
  #L30c460.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L30c466.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L30c46a.  v2:= length @variable v2;
  #L30c46c.  v2:= v2 + -1;
  #L30c470.  v6.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v2;
  #L30c474.  v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v1 @kind object;
  #L30c478.  v1:= v6.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L30c47c.  v2:= v1 + -1;
  #L30c480.  v6.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v2;
  #L30c484.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L30c488.  v2[v1]:= v7 @kind object;
  #L30c48c.  v7:= v6.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L30c490.  v7:= v7 + 1;
  #L30c494.  v6.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v7;
  #L30c498.  v7:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L30c49c.  v7:= v7 + v0 @kind int;
  #L30c49e.  v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v7;
  #L30c4a2.  return @kind void;
}
procedure `void` `setHeaderTableSizeSetting`(`okhttp3.internal.http2.Hpack$Writer` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Hpack$Writer;.setHeaderTableSizeSetting:(I)V` @AccessFlag  {
    temp;
    v0;

  #L30c4b4.  v1.`okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @type ^`int` := v2;
  #L30c4b8.  v0:= 16384I;
  #L30c4bc.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L30c4c2.  v2:= temp;
  #L30c4c4.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L30c4c8.  if v0 != v2 then goto L30c4ce;
  #L30c4cc.  return @kind void;
  #L30c4ce.  if v2 >= v0 then goto L30c4e2;
  #L30c4d2.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L30c4d6.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L30c4dc.  v0:= temp;
  #L30c4de.  v1.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v0;
  #L30c4e2.  v0:= 1I;
  #L30c4e4.  v1.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` := v0 @kind boolean;
  #L30c4e8.  v1.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int` := v2;
  #L30c4ec.  call `adjustDynamicTableByteCount`(v1) @signature `Lokhttp3/internal/http2/Hpack$Writer;.adjustDynamicTableByteCount:()V` @kind direct;
  #L30c4f2.  return @kind void;
}
procedure `void` `writeByteString`(`okhttp3.internal.http2.Hpack$Writer` v3 @kind this, `okio.ByteString` v4 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L30c504.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.useCompression` @type ^`boolean` @kind boolean;
  #L30c508.  v1:= 127I;
  #L30c50c.  if v0 == 0 then goto L30c56a;
  #L30c510.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L30c516.  v0:= temp @kind object;
  #L30c518.  call temp:= `encodedLength`(v0, v4) @signature `Lokhttp3/internal/http2/Huffman;.encodedLength:(Lokio/ByteString;)I` @kind virtual;
  #L30c51e.  v0:= temp;
  #L30c520.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L30c526.  v2:= temp;
  #L30c528.  if v0 >= v2 then goto L30c56a;
  #L30c52c.  v0:= new `okio.k`;
  #L30c530.  call `<init>`(v0) @signature `Lokio/k;.<init>:()V` @kind direct;
  #L30c536.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L30c53c.  v2:= temp @kind object;
  #L30c53e.  call `encode`(v2, v4, v0) @signature `Lokhttp3/internal/http2/Huffman;.encode:(Lokio/ByteString;Lokio/n;)V` @kind virtual;
  #L30c544.  call temp:= `U0`(v0) @signature `Lokio/k;.U0:()Lokio/ByteString;` @kind virtual;
  #L30c54a.  v4:= temp @kind object;
  #L30c54c.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L30c552.  v0:= temp;
  #L30c554.  v2:= 128I;
  #L30c558.  call `writeInt`(v3, v0, v1, v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L30c55e.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.k` @kind object;
  #L30c562.  call temp:= `j1`(v0, v4) @signature `Lokio/k;.j1:(Lokio/ByteString;)Lokio/k;` @kind virtual;
  #L30c568.  goto L30c584;
  #L30c56a.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L30c570.  v0:= temp;
  #L30c572.  v2:= 0I;
  #L30c574.  call `writeInt`(v3, v0, v1, v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L30c57a.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.k` @kind object;
  #L30c57e.  call temp:= `j1`(v0, v4) @signature `Lokio/k;.j1:(Lokio/ByteString;)Lokio/k;` @kind virtual;
  #L30c584.  return @kind void;
}
procedure `void` `writeHeaders`(`okhttp3.internal.http2.Hpack$Writer` v13 @kind this, `java.util.List` v14 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeHeaders:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L30c598.  v0:= v13.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` @kind boolean;
  #L30c59c.  v1:= 0I;
  #L30c59e.  if v0 == 0 then goto L30c5d4;
  #L30c5a2.  v0:= v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L30c5a6.  v2:= v13.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L30c5aa.  v3:= 32I;
  #L30c5ae.  v4:= 31I;
  #L30c5b2.  if v0 >= v2 then goto L30c5bc;
  #L30c5b6.  call `writeInt`(v13, v0, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L30c5bc.  v13.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` := v1 @kind boolean;
  #L30c5c0.  v0:= 2147483647I;
  #L30c5c6.  v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v0;
  #L30c5ca.  v0:= v13.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L30c5ce.  call `writeInt`(v13, v0, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L30c5d4.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L30c5da.  v0:= temp;
  #L30c5dc.  v2:= 0I;
  #L30c5de.  if v2 >= v0 then goto L30c76e;
  #L30c5e2.  call temp:= `get`(v14, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L30c5e8.  v3:= temp @kind object;
  #L30c5ea.  v3:= (`okhttp3.internal.http2.Header`) v3 @kind object;
  #L30c5ee.  v4:= v3.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L30c5f2.  call temp:= `toAsciiLowercase`(v4) @signature `Lokio/ByteString;.toAsciiLowercase:()Lokio/ByteString;` @kind virtual;
  #L30c5f8.  v4:= temp @kind object;
  #L30c5fa.  v5:= v3.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L30c5fe.  v6:= `@@okhttp3.internal.http2.Hpack.NAME_TO_FIRST_INDEX` @type ^`java.util.Map` @kind object;
  #L30c602.  call temp:= `get`(v6, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L30c608.  v6:= temp @kind object;
  #L30c60a.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L30c60e.  v7:= -1I;
  #L30c610.  v8:= 1I;
  #L30c612.  if v6 == 0 then goto L30c672;
  #L30c616.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L30c61c.  v6:= temp;
  #L30c61e.  v6:= v6 + v8 @kind int;
  #L30c620.  if v6 <= v8 then goto L30c66c;
  #L30c624.  v9:= 8I;
  #L30c628.  if v6 >= v9 then goto L30c66c;
  #L30c62c.  v9:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L30c630.  v10:= v6 + -1;
  #L30c634.  v10:= v9[v10] @kind object;
  #L30c638.  v10:= v10.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L30c63c.  call temp:= `equals`(v10, v5) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L30c642.  v10:= temp;
  #L30c644.  if v10 == 0 then goto L30c64c;
  #L30c648.  v9:= v6;
  #L30c64a.  goto L30c676;
  #L30c64c.  v9:= v9[v6] @kind object;
  #L30c650.  v9:= v9.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L30c654.  call temp:= `equals`(v9, v5) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L30c65a.  v9:= temp;
  #L30c65c.  if v9 == 0 then goto L30c66c;
  #L30c660.  v9:= v6 + 1;
  #L30c664.  v12:= v9;
  #L30c666.  v9:= v6;
  #L30c668.  v6:= v12;
  #L30c66a.  goto L30c676;
  #L30c66c.  v9:= v6;
  #L30c66e.  v6:= -1I;
  #L30c670.  goto L30c676;
  #L30c672.  v6:= -1I;
  #L30c674.  v9:= -1I;
  #L30c676.  if v6 != v7 then goto L30c6e4;
  #L30c67a.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L30c67e.  v10:= v10 + v8 @kind int;
  #L30c680.  v8:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L30c684.  v8:= length @variable v8;
  #L30c686.  if v10 >= v8 then goto L30c6e4;
  #L30c68a.  v11:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L30c68e.  v11:= v11[v10] @kind object;
  #L30c692.  v11:= v11.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L30c696.  call temp:= `equals`(v11, v4) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L30c69c.  v11:= temp;
  #L30c69e.  if v11 == 0 then goto L30c6de;
  #L30c6a2.  v11:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L30c6a6.  v11:= v11[v10] @kind object;
  #L30c6aa.  v11:= v11.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L30c6ae.  call temp:= `equals`(v11, v5) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L30c6b4.  v11:= temp;
  #L30c6b6.  if v11 == 0 then goto L30c6ca;
  #L30c6ba.  v6:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L30c6be.  v10:= v10 - v6 @kind int;
  #L30c6c0.  v6:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L30c6c4.  v6:= length @variable v6;
  #L30c6c6.  v6:= v6 + v10 @kind int;
  #L30c6c8.  goto L30c6e4;
  #L30c6ca.  if v9 != v7 then goto L30c6de;
  #L30c6ce.  v9:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L30c6d2.  v9:= v10 - v9 @kind int;
  #L30c6d6.  v11:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L30c6da.  v11:= length @variable v11;
  #L30c6dc.  v9:= v9 + v11 @kind int;
  #L30c6de.  v10:= v10 + 1;
  #L30c6e2.  goto L30c686;
  #L30c6e4.  if v6 == v7 then goto L30c6f8;
  #L30c6e8.  v3:= 127I;
  #L30c6ec.  v4:= 128I;
  #L30c6f0.  call `writeInt`(v13, v6, v3, v4) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L30c6f6.  goto L30c766;
  #L30c6f8.  v6:= 64I;
  #L30c6fc.  if v9 != v7 then goto L30c71e;
  #L30c700.  v7:= v13.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.k` @kind object;
  #L30c704.  call temp:= `n1`(v7, v6) @signature `Lokio/k;.n1:(I)Lokio/k;` @kind virtual;
  #L30c70a.  call `writeByteString`(v13, v4) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L30c710.  call `writeByteString`(v13, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L30c716.  call `insertIntoDynamicTable`(v13, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L30c71c.  goto L30c766;
  #L30c71e.  v7:= `@@okhttp3.internal.http2.Header.PSEUDO_PREFIX` @type ^`okio.ByteString` @kind object;
  #L30c722.  call temp:= `startsWith`(v4, v7) @signature `Lokio/ByteString;.startsWith:(Lokio/ByteString;)Z` @kind virtual;
  #L30c728.  v7:= temp;
  #L30c72a.  if v7 == 0 then goto L30c750;
  #L30c72e.  v7:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L30c732.  call temp:= `equals`(v7, v4) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L30c738.  v4:= temp;
  #L30c73a.  if v4 != 0 then goto L30c750;
  #L30c73e.  v3:= 15I;
  #L30c742.  call `writeInt`(v13, v9, v3, v1) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L30c748.  call `writeByteString`(v13, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L30c74e.  goto L30c766;
  #L30c750.  v4:= 63I;
  #L30c754.  call `writeInt`(v13, v9, v4, v6) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L30c75a.  call `writeByteString`(v13, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L30c760.  call `insertIntoDynamicTable`(v13, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L30c766.  v2:= v2 + 1;
  #L30c76a.  goto L30c5de;
  #L30c76e.  return @kind void;
}
procedure `void` `writeInt`(`okhttp3.internal.http2.Hpack$Writer` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @AccessFlag  {
    temp;
    v0;

  #L30c780.  if v2 >= v3 then goto L30c792;
  #L30c784.  v3:= v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.k` @kind object;
  #L30c788.  v2:= v2 ^| v4 @kind int;
  #L30c78a.  call temp:= `n1`(v3, v2) @signature `Lokio/k;.n1:(I)Lokio/k;` @kind virtual;
  #L30c790.  return @kind void;
  #L30c792.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.k` @kind object;
  #L30c796.  v4:= v4 ^| v3 @kind int;
  #L30c798.  call temp:= `n1`(v0, v4) @signature `Lokio/k;.n1:(I)Lokio/k;` @kind virtual;
  #L30c79e.  v2:= v2 - v3 @kind int;
  #L30c7a0.  v3:= 128I;
  #L30c7a4.  if v2 < v3 then goto L30c7be;
  #L30c7a8.  v4:= v2 ^& 127;
  #L30c7ac.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.k` @kind object;
  #L30c7b0.  v3:= v3 ^| v4 @kind int;
  #L30c7b2.  call temp:= `n1`(v0, v3) @signature `Lokio/k;.n1:(I)Lokio/k;` @kind virtual;
  #L30c7b8.  v2:= v2 ^>> 7;
  #L30c7bc.  goto L30c7a0;
  #L30c7be.  v3:= v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.k` @kind object;
  #L30c7c2.  call temp:= `n1`(v3, v2) @signature `Lokio/k;.n1:(I)Lokio/k;` @kind virtual;
  #L30c7c8.  return @kind void;
}
