record `okhttp3.internal.http2.Settings` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.http2.Settings.set` @AccessFlag PRIVATE;
  `int`[] `okhttp3.internal.http2.Settings.values` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Settings.COUNT` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.DEFAULT_INITIAL_WINDOW_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.ENABLE_PUSH` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.HEADER_TABLE_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.INITIAL_WINDOW_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_CONCURRENT_STREAMS` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_FRAME_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_HEADER_LIST_SIZE` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L312468.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L31246e.  v0:= 10I;
  #L312472.  v0:= new `int`[v0];
  #L312476.  v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] := v0 @kind object;
  #L31247a.  return @kind void;
}
procedure `void` `clear`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.clear:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L31248c.  v0:= 0I;
  #L31248e.  v2.`okhttp3.internal.http2.Settings.set` @type ^`int` := v0;
  #L312492.  v1:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L312496.  call `fill`(v1, v0) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L31249c.  return @kind void;
}
procedure `int` `get`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @AccessFlag  {
    temp;
    v0;

  #L312324.  v0:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L312328.  v2:= v0[v2];
  #L31232c.  return v2;
}
procedure `boolean` `getEnablePush`(`okhttp3.internal.http2.Settings` v3 @kind this, `boolean` v4 ) @signature `Lokhttp3/internal/http2/Settings;.getEnablePush:(Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3122bc.  v0:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L3122c0.  v0:= v0 ^& 4;
  #L3122c4.  v1:= 0I;
  #L3122c6.  v2:= 1I;
  #L3122c8.  if v0 == 0 then goto L3122d8;
  #L3122cc.  v4:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L3122d0.  v0:= 2I;
  #L3122d2.  v4:= v4[v0];
  #L3122d6.  goto L3122e2;
  #L3122d8.  if v4 == 0 then goto L3122e0;
  #L3122dc.  v4:= 1I;
  #L3122de.  goto L3122e2;
  #L3122e0.  v4:= 0I;
  #L3122e2.  if v4 != v2 then goto L3122e8;
  #L3122e6.  v1:= 1I;
  #L3122e8.  return v1;
}
procedure `int` `getHeaderTableSize`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getHeaderTableSize:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L312340.  v0:= v2.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L312344.  v0:= v0 ^& 2;
  #L312348.  if v0 == 0 then goto L312358;
  #L31234c.  v0:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L312350.  v1:= 1I;
  #L312352.  v0:= v0[v1];
  #L312356.  goto L31235a;
  #L312358.  v0:= -1I;
  #L31235a.  return v0;
}
procedure `int` `getInitialWindowSize`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L31236c.  v0:= v2.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L312370.  v0:= v0 ^& 128;
  #L312374.  if v0 == 0 then goto L312384;
  #L312378.  v0:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L31237c.  v1:= 7I;
  #L31237e.  v0:= v0[v1];
  #L312382.  goto L31238a;
  #L312384.  v0:= 65535I;
  #L31238a.  return v0;
}
procedure `int` `getMaxConcurrentStreams`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.getMaxConcurrentStreams:(I)I` @AccessFlag  {
    temp;
    v0;

  #L31239c.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L3123a0.  v0:= v0 ^& 16;
  #L3123a4.  if v0 == 0 then goto L3123b2;
  #L3123a8.  v2:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L3123ac.  v0:= 4I;
  #L3123ae.  v2:= v2[v0];
  #L3123b2.  return v2;
}
procedure `int` `getMaxFrameSize`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.getMaxFrameSize:(I)I` @AccessFlag  {
    temp;
    v0;

  #L3123c4.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L3123c8.  v0:= v0 ^& 32;
  #L3123cc.  if v0 == 0 then goto L3123da;
  #L3123d0.  v2:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L3123d4.  v0:= 5I;
  #L3123d6.  v2:= v2[v0];
  #L3123da.  return v2;
}
procedure `int` `getMaxHeaderListSize`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.getMaxHeaderListSize:(I)I` @AccessFlag  {
    temp;
    v0;

  #L3123ec.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L3123f0.  v0:= v0 ^& 64;
  #L3123f4.  if v0 == 0 then goto L312402;
  #L3123f8.  v2:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L3123fc.  v0:= 6I;
  #L3123fe.  v2:= v2[v0];
  #L312402.  return v2;
}
procedure `boolean` `isSet`(`okhttp3.internal.http2.Settings` v2 @kind this, `int` v3 ) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3122fc.  v0:= 1I;
  #L3122fe.  v3:= v0 ^< v3 @kind int;
  #L312302.  v1:= v2.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L312306.  v3:= v3 ^& v1 @kind int;
  #L312308.  if v3 == 0 then goto L31230e;
  #L31230c.  goto L312310;
  #L31230e.  v0:= 0I;
  #L312310.  return v0;
}
procedure `void` `merge`(`okhttp3.internal.http2.Settings` v2 @kind this, `okhttp3.internal.http2.Settings` v3 @kind object) @signature `Lokhttp3/internal/http2/Settings;.merge:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3124b0.  v0:= 0I;
  #L3124b2.  v1:= 10I;
  #L3124b6.  if v0 >= v1 then goto L3124dc;
  #L3124ba.  call temp:= `isSet`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @kind virtual;
  #L3124c0.  v1:= temp;
  #L3124c2.  if v1 != 0 then goto L3124c8;
  #L3124c6.  goto L3124d6;
  #L3124c8.  call temp:= `get`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @kind virtual;
  #L3124ce.  v1:= temp;
  #L3124d0.  call temp:= `set`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L3124d6.  v0:= v0 + 1;
  #L3124da.  goto L3124b2;
  #L3124dc.  return @kind void;
}
procedure `okhttp3.internal.http2.Settings` `set`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L312434.  if v4 < 0 then goto L312456;
  #L312438.  v0:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L31243c.  v1:= length @variable v0;
  #L31243e.  if v4 < v1 then goto L312444;
  #L312442.  goto L312456;
  #L312444.  v1:= 1I;
  #L312446.  v1:= v1 ^< v4 @kind int;
  #L312448.  v2:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L31244c.  v1:= v1 ^| v2 @kind int;
  #L31244e.  v3.`okhttp3.internal.http2.Settings.set` @type ^`int` := v1;
  #L312452.  v0[v4]:= v5;
  #L312456.  return v3 @kind object;
}
procedure `int` `size`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.size:()I` @AccessFlag  {
    temp;
    v0;

  #L312414.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L312418.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L31241e.  v0:= temp;
  #L312420.  return v0;
}
