record `okhttp3.internal.http2.Huffman` @kind class @AccessFlag  {
  `okhttp3.internal.http2.Huffman$Node` `okhttp3.internal.http2.Huffman.root` @AccessFlag PRIVATE_FINAL;
}
global `int`[] `@@okhttp3.internal.http2.Huffman.CODES` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@okhttp3.internal.http2.Huffman.CODE_LENGTHS` @AccessFlag PRIVATE_STATIC_FINAL;
global `okhttp3.internal.http2.Huffman` `@@okhttp3.internal.http2.Huffman.INSTANCE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Huffman;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L311b5c.  v0:= 256I;
  #L311b60.  v1:= new `int`[v0];
  #L311b64.  goto L311b8c;
  #L311b6a.  `@@okhttp3.internal.http2.Huffman.CODES` @type ^`int`[] := v1 @kind object;
  #L311b6e.  v0:= new `byte`[v0];
  #L311b72.  goto L311f94;
  #L311b78.  `@@okhttp3.internal.http2.Huffman.CODE_LENGTHS` @type ^`byte`[] := v0 @kind object;
  #L311b7c.  v0:= new `okhttp3.internal.http2.Huffman`;
  #L311b80.  call `<init>`(v0) @signature `Lokhttp3/internal/http2/Huffman;.<init>:()V` @kind direct;
  #L311b86.  `@@okhttp3.internal.http2.Huffman.INSTANCE` @type ^`okhttp3.internal.http2.Huffman` := v0 @kind object;
  #L311b8a.  return @kind void;
  #L311b8c.  v1:= (8184I, 8388568I, 268435426I, 268435427I, 268435428I, 268435429I, 268435430I, 268435431I, 268435432I, 16777194I, 1073741820I, 268435433I, 268435434I, 1073741821I, 268435435I, 268435436I, 268435437I, 268435438I, 268435439I, 268435440I, 268435441I, 268435442I, 1073741822I, 268435443I, 268435444I, 268435445I, 268435446I, 268435447I, 268435448I, 268435449I, 268435450I, 268435451I, 20I, 1016I, 1017I, 4090I, 8185I, 21I, 248I, 2042I, 1018I, 1019I, 249I, 2043I, 250I, 22I, 23I, 24I, 0I, 1I, 2I, 25I, 26I, 27I, 28I, 29I, 30I, 31I, 92I, 251I, 32764I, 32I, 4091I, 1020I, 8186I, 33I, 93I, 94I, 95I, 96I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 252I, 115I, 253I, 8187I, 524272I, 8188I, 16380I, 34I, 32765I, 3I, 35I, 4I, 36I, 5I, 37I, 38I, 39I, 6I, 116I, 117I, 40I, 41I, 42I, 7I, 43I, 118I, 44I, 8I, 9I, 45I, 119I, 120I, 121I, 122I, 123I, 32766I, 2044I, 16381I, 8189I, 268435452I, 1048550I, 4194258I, 1048551I, 1048552I, 4194259I, 4194260I, 4194261I, 8388569I, 4194262I, 8388570I, 8388571I, 8388572I, 8388573I, 8388574I, 16777195I, 8388575I, 16777196I, 16777197I, 4194263I, 8388576I, 16777198I, 8388577I, 8388578I, 8388579I, 8388580I, 2097116I, 4194264I, 8388581I, 4194265I, 8388582I, 8388583I, 16777199I, 4194266I, 2097117I, 1048553I, 4194267I, 4194268I, 8388584I, 8388585I, 2097118I, 8388586I, 4194269I, 4194270I, 16777200I, 2097119I, 4194271I, 8388587I, 8388588I, 2097120I, 2097121I, 4194272I, 2097122I, 8388589I, 4194273I, 8388590I, 8388591I, 1048554I, 4194274I, 4194275I, 4194276I, 8388592I, 4194277I, 4194278I, 8388593I, 67108832I, 67108833I, 1048555I, 524273I, 4194279I, 8388594I, 4194280I, 33554412I, 67108834I, 67108835I, 67108836I, 134217694I, 134217695I, 67108837I, 16777201I, 33554413I, 524274I, 2097123I, 67108838I, 134217696I, 134217697I, 67108839I, 134217698I, 16777202I, 2097124I, 2097125I, 67108840I, 67108841I, 268435453I, 134217699I, 134217700I, 134217701I, 1048556I, 16777203I, 1048557I, 2097126I, 4194281I, 2097127I, 2097128I, 8388595I, 4194282I, 4194283I, 33554414I, 33554415I, 16777204I, 16777205I, 67108842I, 8388596I, 67108843I, 134217702I, 67108844I, 67108845I, 134217703I, 134217704I, 134217705I, 134217706I, 134217707I, 268435454I, 134217708I, 134217709I, 134217710I, 134217711I, 134217712I, 67108846I) @kind object;
  #L311f93.  goto L311b6a;
  #L311f94.  v0:= (13I, 23I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 24I, 30I, 28I, 28I, 30I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 30I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 6I, 10I, 10I, 12I, 13I, 6I, 8I, 11I, 10I, 10I, 8I, 11I, 8I, 6I, 6I, 6I, 5I, 5I, 5I, 6I, 6I, 6I, 6I, 6I, 6I, 6I, 7I, 8I, 15I, 6I, 12I, 10I, 13I, 6I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 8I, 7I, 8I, 13I, 19I, 13I, 14I, 6I, 15I, 5I, 6I, 5I, 6I, 5I, 6I, 6I, 6I, 5I, 7I, 7I, 6I, 6I, 6I, 5I, 6I, 7I, 6I, 5I, 5I, 6I, 7I, 7I, 7I, 7I, 7I, 15I, 11I, 14I, 13I, 28I, 20I, 22I, 20I, 20I, 22I, 22I, 22I, 23I, 22I, 23I, 23I, 23I, 23I, 23I, 24I, 23I, 24I, 24I, 22I, 23I, 24I, 23I, 23I, 23I, 23I, 21I, 22I, 23I, 22I, 23I, 23I, 24I, 22I, 21I, 20I, 22I, 22I, 23I, 23I, 21I, 23I, 22I, 22I, 24I, 21I, 22I, 23I, 23I, 21I, 21I, 22I, 21I, 23I, 22I, 23I, 23I, 20I, 22I, 22I, 22I, 23I, 22I, 22I, 23I, 26I, 26I, 20I, 19I, 22I, 23I, 22I, 25I, 26I, 26I, 26I, 27I, 27I, 26I, 24I, 25I, 19I, 21I, 26I, 27I, 27I, 26I, 27I, 24I, 21I, 21I, 26I, 26I, 28I, 27I, 27I, 27I, 20I, 24I, 20I, 21I, 22I, 21I, 21I, 23I, 22I, 22I, 25I, 25I, 24I, 24I, 26I, 23I, 26I, 27I, 26I, 26I, 27I, 27I, 27I, 27I, 27I, 28I, 27I, 27I, 27I, 27I, 27I, 26I) @kind object;
  #L31209b.  goto L311b78;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Huffman` v1 @kind this) @signature `Lokhttp3/internal/http2/Huffman;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3120ac.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3120b2.  v0:= new `okhttp3.internal.http2.Huffman$Node`;
  #L3120b6.  call `<init>`(v0) @signature `Lokhttp3/internal/http2/Huffman$Node;.<init>:()V` @kind direct;
  #L3120bc.  v1.`okhttp3.internal.http2.Huffman.root` @type ^`okhttp3.internal.http2.Huffman$Node` := v0 @kind object;
  #L3120c0.  call `buildTree`(v1) @signature `Lokhttp3/internal/http2/Huffman;.buildTree:()V` @kind direct;
  #L3120c6.  return @kind void;
}
procedure `void` `addCode`(`okhttp3.internal.http2.Huffman` v4 @kind this, `int` v5 , `int` v6 , `byte` v7 ) @signature `Lokhttp3/internal/http2/Huffman;.addCode:(IIB)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3120d8.  v0:= new `okhttp3.internal.http2.Huffman$Node`;
  #L3120dc.  call `<init>`(v0, v5, v7) @signature `Lokhttp3/internal/http2/Huffman$Node;.<init>:(II)V` @kind direct;
  #L3120e2.  v5:= v4.`okhttp3.internal.http2.Huffman.root` @type ^`okhttp3.internal.http2.Huffman$Node` @kind object;
  #L3120e6.  v1:= 8I;
  #L3120ea.  if v7 <= v1 then goto L312134;
  #L3120ee.  v7:= v7 + -8;
  #L3120f2.  v7:= (`byte`) v7 @kind i2b;
  #L3120f4.  v1:= v6 ^>> v7 @kind int;
  #L3120f8.  v1:= v1 ^& 255;
  #L3120fc.  v2:= v5.`okhttp3.internal.http2.Huffman$Node.children` @type ^`okhttp3.internal.http2.Huffman$Node`[] @kind object;
  #L312100.  if v2 == 0 then goto L312124;
  #L312104.  v3:= v2[v1] @kind object;
  #L312108.  if v3 != 0 then goto L31211a;
  #L31210c.  v3:= new `okhttp3.internal.http2.Huffman$Node`;
  #L312110.  call `<init>`(v3) @signature `Lokhttp3/internal/http2/Huffman$Node;.<init>:()V` @kind direct;
  #L312116.  v2[v1]:= v3 @kind object;
  #L31211a.  v5:= v5.`okhttp3.internal.http2.Huffman$Node.children` @type ^`okhttp3.internal.http2.Huffman$Node`[] @kind object;
  #L31211e.  v5:= v5[v1] @kind object;
  #L312122.  goto L3120e6;
  #L312124.  v5:= new `java.lang.IllegalStateException`;
  #L312128.  v6:= "invalid dictionary: prefix not unique" @kind object;
  #L31212c.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L312132.  throw v5;
  #L312134.  v1:= v1 - v7 @kind int;
  #L312136.  v6:= v6 ^< v1 @kind int;
  #L312138.  v6:= v6 ^& 255;
  #L31213c.  v7:= 1I;
  #L31213e.  v7:= v7 ^< v1 @kind int;
  #L312140.  v1:= v6;
  #L312142.  v2:= v6 + v7 @kind int;
  #L312146.  if v1 >= v2 then goto L312158;
  #L31214a.  v2:= v5.`okhttp3.internal.http2.Huffman$Node.children` @type ^`okhttp3.internal.http2.Huffman$Node`[] @kind object;
  #L31214e.  v2[v1]:= v0 @kind object;
  #L312152.  v1:= v1 + 1;
  #L312156.  goto L312142;
  #L312158.  return @kind void;
}
procedure `void` `buildTree`(`okhttp3.internal.http2.Huffman` v3 @kind this) @signature `Lokhttp3/internal/http2/Huffman;.buildTree:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L31216c.  v0:= 0I;
  #L31216e.  v1:= `@@okhttp3.internal.http2.Huffman.CODE_LENGTHS` @type ^`byte`[] @kind object;
  #L312172.  v2:= length @variable v1;
  #L312174.  if v0 >= v2 then goto L312190;
  #L312178.  v2:= `@@okhttp3.internal.http2.Huffman.CODES` @type ^`int`[] @kind object;
  #L31217c.  v2:= v2[v0];
  #L312180.  v1:= v1[v0] @kind byte;
  #L312184.  call `addCode`(v3, v0, v2, v1) @signature `Lokhttp3/internal/http2/Huffman;.addCode:(IIB)V` @kind direct;
  #L31218a.  v0:= v0 + 1;
  #L31218e.  goto L31216e;
  #L312190.  return @kind void;
}
procedure `okhttp3.internal.http2.Huffman` `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L311b44.  v0:= `@@okhttp3.internal.http2.Huffman.INSTANCE` @type ^`okhttp3.internal.http2.Huffman` @kind object;
  #L311b48.  return v0 @kind object;
}
procedure `byte`[] `decode`(`okhttp3.internal.http2.Huffman` v6 @kind this, `byte`[] v7 @kind object) @signature `Lokhttp3/internal/http2/Huffman;.decode:([B)[B` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L311a28.  v0:= new `java.io.ByteArrayOutputStream`;
  #L311a2c.  call `<init>`(v0) @signature `Ljava/io/ByteArrayOutputStream;.<init>:()V` @kind direct;
  #L311a32.  v1:= v6.`okhttp3.internal.http2.Huffman.root` @type ^`okhttp3.internal.http2.Huffman$Node` @kind object;
  #L311a36.  v2:= 0I;
  #L311a38.  v3:= 0I;
  #L311a3a.  v4:= 0I;
  #L311a3c.  v5:= length @variable v7;
  #L311a3e.  if v2 >= v5 then goto L311a9a;
  #L311a42.  v5:= v7[v2] @kind byte;
  #L311a46.  v5:= v5 ^& 255;
  #L311a4a.  v3:= v3 ^< 8;
  #L311a4e.  v3:= v3 ^| v5 @kind int;
  #L311a50.  v4:= v4 + 8;
  #L311a54.  v5:= 8I;
  #L311a58.  if v4 < v5 then goto L311a94;
  #L311a5c.  v5:= v4 + -8;
  #L311a60.  v5:= v3 ^>> v5 @kind int;
  #L311a64.  v5:= v5 ^& 255;
  #L311a68.  v1:= v1.`okhttp3.internal.http2.Huffman$Node.children` @type ^`okhttp3.internal.http2.Huffman$Node`[] @kind object;
  #L311a6c.  v1:= v1[v5] @kind object;
  #L311a70.  v5:= v1.`okhttp3.internal.http2.Huffman$Node.children` @type ^`okhttp3.internal.http2.Huffman$Node`[] @kind object;
  #L311a74.  if v5 != 0 then goto L311a8e;
  #L311a78.  v5:= v1.`okhttp3.internal.http2.Huffman$Node.symbol` @type ^`int`;
  #L311a7c.  call `write`(v0, v5) @signature `Ljava/io/ByteArrayOutputStream;.write:(I)V` @kind virtual;
  #L311a82.  v1:= v1.`okhttp3.internal.http2.Huffman$Node.terminalBits` @type ^`int`;
  #L311a86.  v4:= v4 - v1 @kind int;
  #L311a88.  v1:= v6.`okhttp3.internal.http2.Huffman.root` @type ^`okhttp3.internal.http2.Huffman$Node` @kind object;
  #L311a8c.  goto L311a54;
  #L311a8e.  v4:= v4 + -8;
  #L311a92.  goto L311a54;
  #L311a94.  v2:= v2 + 1;
  #L311a98.  goto L311a3c;
  #L311a9a.  if v4 <= 0 then goto L311ada;
  #L311a9e.  v7:= v4 - 8;
  #L311aa2.  v7:= v3 ^< v7 @kind int;
  #L311aa6.  v7:= v7 ^& 255;
  #L311aaa.  v1:= v1.`okhttp3.internal.http2.Huffman$Node.children` @type ^`okhttp3.internal.http2.Huffman$Node`[] @kind object;
  #L311aae.  v7:= v1[v7] @kind object;
  #L311ab2.  v1:= v7.`okhttp3.internal.http2.Huffman$Node.children` @type ^`okhttp3.internal.http2.Huffman$Node`[] @kind object;
  #L311ab6.  if v1 != 0 then goto L311ada;
  #L311aba.  v1:= v7.`okhttp3.internal.http2.Huffman$Node.terminalBits` @type ^`int`;
  #L311abe.  if v1 <= v4 then goto L311ac4;
  #L311ac2.  goto L311ada;
  #L311ac4.  v1:= v7.`okhttp3.internal.http2.Huffman$Node.symbol` @type ^`int`;
  #L311ac8.  call `write`(v0, v1) @signature `Ljava/io/ByteArrayOutputStream;.write:(I)V` @kind virtual;
  #L311ace.  v7:= v7.`okhttp3.internal.http2.Huffman$Node.terminalBits` @type ^`int`;
  #L311ad2.  v4:= v4 - v7 @kind int;
  #L311ad4.  v1:= v6.`okhttp3.internal.http2.Huffman.root` @type ^`okhttp3.internal.http2.Huffman$Node` @kind object;
  #L311ad8.  goto L311a9a;
  #L311ada.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L311ae0.  v7:= temp @kind object;
  #L311ae2.  return v7 @kind object;
}
procedure `void` `encode`(`okhttp3.internal.http2.Huffman` v7 @kind this, `okio.ByteString` v8 @kind object, `okio.n` v9 @kind object) @signature `Lokhttp3/internal/http2/Huffman;.encode:(Lokio/ByteString;Lokio/n;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3121a4.  v0:= 0I;
  #L3121a6.  v1:= 0L;
  #L3121aa.  v2:= v1 @kind wide;
  #L3121ac.  v1:= 0I;
  #L3121ae.  call temp:= `size`(v8) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L3121b4.  v4:= temp;
  #L3121b6.  v5:= 255I;
  #L3121ba.  if v0 >= v4 then goto L312200;
  #L3121be.  call temp:= `getByte`(v8, v0) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L3121c4.  v4:= temp;
  #L3121c6.  v4:= v4 ^& v5 @kind int;
  #L3121c8.  v5:= `@@okhttp3.internal.http2.Huffman.CODES` @type ^`int`[] @kind object;
  #L3121cc.  v5:= v5[v4];
  #L3121d0.  v6:= `@@okhttp3.internal.http2.Huffman.CODE_LENGTHS` @type ^`byte`[] @kind object;
  #L3121d4.  v4:= v6[v4] @kind byte;
  #L3121d8.  v2:= v2 ^< v4 @kind long;
  #L3121da.  v5:= (`long`) v5 @kind i2l;
  #L3121dc.  v2:= v2 ^| v5 @kind long;
  #L3121de.  v1:= v1 + v4 @kind int;
  #L3121e0.  v4:= 8I;
  #L3121e4.  if v1 < v4 then goto L3121fa;
  #L3121e8.  v1:= v1 + -8;
  #L3121ec.  v4:= v2 ^> v1 @kind long;
  #L3121f0.  v5:= (`int`) v4 @kind l2i;
  #L3121f2.  call temp:= `P`(v9, v5) @signature `Lokio/n;.P:(I)Lokio/n;` @kind interface;
  #L3121f8.  goto L3121e0;
  #L3121fa.  v0:= v0 + 1;
  #L3121fe.  goto L3121ae;
  #L312200.  if v1 <= 0 then goto L31221a;
  #L312204.  v8:= v1 - 8;
  #L312208.  v2:= v2 ^< v8 @kind long;
  #L31220a.  v8:= v5 ^>> v1 @kind int;
  #L31220e.  v0:= (`long`) v8 @kind i2l;
  #L312210.  v0:= v0 ^| v2 @kind long;
  #L312212.  v8:= (`int`) v0 @kind l2i;
  #L312214.  call temp:= `P`(v9, v8) @signature `Lokio/n;.P:(I)Lokio/n;` @kind interface;
  #L31221a.  return @kind void;
}
procedure `int` `encodedLength`(`okhttp3.internal.http2.Huffman` v5 @kind this, `okio.ByteString` v6 @kind object) @signature `Lokhttp3/internal/http2/Huffman;.encodedLength:(Lokio/ByteString;)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L311af4.  v0:= 0L;
  #L311af8.  v2:= 0I;
  #L311afa.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L311b00.  v3:= temp;
  #L311b02.  if v2 >= v3 then goto L311b24;
  #L311b06.  call temp:= `getByte`(v6, v2) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L311b0c.  v3:= temp;
  #L311b0e.  v3:= v3 ^& 255;
  #L311b12.  v4:= `@@okhttp3.internal.http2.Huffman.CODE_LENGTHS` @type ^`byte`[] @kind object;
  #L311b16.  v3:= v4[v3] @kind byte;
  #L311b1a.  v3:= (`long`) v3 @kind i2l;
  #L311b1c.  v0:= v0 + v3 @kind long;
  #L311b1e.  v2:= v2 + 1;
  #L311b22.  goto L311afa;
  #L311b24.  v2:= 7L;
  #L311b28.  v0:= v0 + v2 @kind long;
  #L311b2a.  v6:= 3I;
  #L311b2c.  v0:= v0 ^> v6 @kind long;
  #L311b2e.  v6:= (`int`) v0 @kind l2i;
  #L311b30.  return v6;
}
