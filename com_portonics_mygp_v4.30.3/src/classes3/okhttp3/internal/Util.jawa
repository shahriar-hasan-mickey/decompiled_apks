record `okhttp3.internal.Util` @kind class @AccessFlag PUBLIC_FINAL {
}
global `byte`[] `@@okhttp3.internal.Util.EMPTY_BYTE_ARRAY` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.Headers` `@@okhttp3.internal.Util.EMPTY_HEADERS` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.RequestBody` `@@okhttp3.internal.Util.EMPTY_REQUEST` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ResponseBody` `@@okhttp3.internal.Util.EMPTY_RESPONSE` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String`[] `@@okhttp3.internal.Util.EMPTY_STRING_ARRAY` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.Comparator` `@@okhttp3.internal.Util.NATURAL_ORDER` @AccessFlag PUBLIC_STATIC_FINAL;
global `okio.x` `@@okhttp3.internal.Util.UNICODE_BOMS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.TimeZone` `@@okhttp3.internal.Util.UTC` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.nio.charset.Charset` `@@okhttp3.internal.Util.UTF_32BE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.charset.Charset` `@@okhttp3.internal.Util.UTF_32LE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@okhttp3.internal.Util.VERIFY_AS_IP_ADDRESS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.reflect.Method` `@@okhttp3.internal.Util.addSuppressedExceptionMethod` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/Util;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L301a9c.  v0:= 0I;
  #L301a9e.  v1:= new `byte`[v0];
  #L301aa2.  `@@okhttp3.internal.Util.EMPTY_BYTE_ARRAY` @type ^`byte`[] := v1 @kind object;
  #L301aa6.  v2:= new `java.lang.String`[v0];
  #L301aaa.  `@@okhttp3.internal.Util.EMPTY_STRING_ARRAY` @type ^`java.lang.String`[] := v2 @kind object;
  #L301aae.  v2:= new `java.lang.String`[v0];
  #L301ab2.  call temp:= `of`(v2) @signature `Lokhttp3/Headers;.of:([Ljava/lang/String;)Lokhttp3/Headers;` @kind static;
  #L301ab8.  v2:= temp @kind object;
  #L301aba.  `@@okhttp3.internal.Util.EMPTY_HEADERS` @type ^`okhttp3.Headers` := v2 @kind object;
  #L301abe.  v2:= 0I;
  #L301ac0.  call temp:= `create`(v2, v1) @signature `Lokhttp3/ResponseBody;.create:(Lokhttp3/MediaType;[B)Lokhttp3/ResponseBody;` @kind static;
  #L301ac6.  v3:= temp @kind object;
  #L301ac8.  `@@okhttp3.internal.Util.EMPTY_RESPONSE` @type ^`okhttp3.ResponseBody` := v3 @kind object;
  #L301acc.  call temp:= `create`(v2, v1) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;[B)Lokhttp3/RequestBody;` @kind static;
  #L301ad2.  v1:= temp @kind object;
  #L301ad4.  `@@okhttp3.internal.Util.EMPTY_REQUEST` @type ^`okhttp3.RequestBody` := v1 @kind object;
  #L301ad8.  v1:= 5I;
  #L301ada.  v1:= new `okio.ByteString`[v1];
  #L301ade.  v3:= "efbbbf" @kind object;
  #L301ae2.  call temp:= `decodeHex`(v3) @signature `Lokio/ByteString;.decodeHex:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L301ae8.  v3:= temp @kind object;
  #L301aea.  v1[v0]:= v3 @kind object;
  #L301aee.  v3:= "feff" @kind object;
  #L301af2.  call temp:= `decodeHex`(v3) @signature `Lokio/ByteString;.decodeHex:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L301af8.  v3:= temp @kind object;
  #L301afa.  v4:= 1I;
  #L301afc.  v1[v4]:= v3 @kind object;
  #L301b00.  v3:= "fffe" @kind object;
  #L301b04.  call temp:= `decodeHex`(v3) @signature `Lokio/ByteString;.decodeHex:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L301b0a.  v3:= temp @kind object;
  #L301b0c.  v5:= 2I;
  #L301b0e.  v1[v5]:= v3 @kind object;
  #L301b12.  v3:= "0000ffff" @kind object;
  #L301b16.  call temp:= `decodeHex`(v3) @signature `Lokio/ByteString;.decodeHex:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L301b1c.  v3:= temp @kind object;
  #L301b1e.  v5:= 3I;
  #L301b20.  v1[v5]:= v3 @kind object;
  #L301b24.  v3:= "ffff0000" @kind object;
  #L301b28.  call temp:= `decodeHex`(v3) @signature `Lokio/ByteString;.decodeHex:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L301b2e.  v3:= temp @kind object;
  #L301b30.  v5:= 4I;
  #L301b32.  v1[v5]:= v3 @kind object;
  #L301b36.  call temp:= `m`(v1) @signature `Lokio/x;.m:([Lokio/ByteString;)Lokio/x;` @kind static;
  #L301b3c.  v1:= temp @kind object;
  #L301b3e.  `@@okhttp3.internal.Util.UNICODE_BOMS` @type ^`okio.x` := v1 @kind object;
  #L301b42.  v1:= "UTF-32BE" @kind object;
  #L301b46.  call temp:= `forName`(v1) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L301b4c.  v1:= temp @kind object;
  #L301b4e.  `@@okhttp3.internal.Util.UTF_32BE` @type ^`java.nio.charset.Charset` := v1 @kind object;
  #L301b52.  v1:= "UTF-32LE" @kind object;
  #L301b56.  call temp:= `forName`(v1) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L301b5c.  v1:= temp @kind object;
  #L301b5e.  `@@okhttp3.internal.Util.UTF_32LE` @type ^`java.nio.charset.Charset` := v1 @kind object;
  #L301b62.  v1:= "GMT" @kind object;
  #L301b66.  call temp:= `getTimeZone`(v1) @signature `Ljava/util/TimeZone;.getTimeZone:(Ljava/lang/String;)Ljava/util/TimeZone;` @kind static;
  #L301b6c.  v1:= temp @kind object;
  #L301b6e.  `@@okhttp3.internal.Util.UTC` @type ^`java.util.TimeZone` := v1 @kind object;
  #L301b72.  v1:= `@@okhttp3.internal.a.b` @type ^`okhttp3.internal.a` @kind object;
  #L301b76.  `@@okhttp3.internal.Util.NATURAL_ORDER` @type ^`java.util.Comparator` := v1 @kind object;
  #L301b7a.  v1:= constclass @type ^`java.lang.Throwable` @kind object;
  #L301b7e.  v3:= "addSuppressed" @kind object;
  #L301b82.  v4:= new `java.lang.Class`[v4];
  #L301b86.  v5:= constclass @type ^`java.lang.Throwable` @kind object;
  #L301b8a.  v4[v0]:= v5 @kind object;
  #L301b8e.  call temp:= `getDeclaredMethod`(v1, v3, v4) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L301b94.  v2:= temp @kind object;
  #L301b96.  `@@okhttp3.internal.Util.addSuppressedExceptionMethod` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L301b9a.  v0:= "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([\\d.]+)" @kind object;
  #L301b9e.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L301ba4.  v0:= temp @kind object;
  #L301ba6.  `@@okhttp3.internal.Util.VERIFY_AS_IP_ADDRESS` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L301baa.  return @kind void;
  catch `java.lang.Exception` @[L301b7a..L301b96] goto L301b96;
}
procedure `void` `<init>`(`okhttp3.internal.Util` v0 @kind this) @signature `Lokhttp3/internal/Util;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L301bcc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L301bd2.  return @kind void;
}
procedure `void` `addSuppressedIfPossible`(`java.lang.Throwable` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lokhttp3/internal/Util;.addSuppressedIfPossible:(Ljava/lang/Throwable;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L301be4.  v0:= `@@okhttp3.internal.Util.addSuppressedExceptionMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L301be8.  if v0 == 0 then goto L301bfe;
  #L301bec.  v1:= 1I;
  #L301bee.  v1:= new `java.lang.Object`[v1];
  #L301bf2.  v2:= 0I;
  #L301bf4.  v1[v2]:= v4 @kind object;
  #L301bf8.  call temp:= `invoke`(v0, v3, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L301bfe.  return @kind void;
  catch `java.lang.reflect.InvocationTargetException` @[L301bee..L301bfe] goto L301bfe;
  catch `java.lang.IllegalAccessException` @[L301bee..L301bfe] goto L301bfe;
}
procedure `java.nio.charset.Charset` `bomAwareCharset`(`okio.o` v1 @kind object, `java.nio.charset.Charset` v2 @kind object) @signature `Lokhttp3/internal/Util;.bomAwareCharset:(Lokio/o;Ljava/nio/charset/Charset;)Ljava/nio/charset/Charset;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L301824.  v0:= `@@okhttp3.internal.Util.UNICODE_BOMS` @type ^`okio.x` @kind object;
  #L301828.  call temp:= `M0`(v1, v0) @signature `Lokio/o;.M0:(Lokio/x;)I` @kind interface;
  #L30182e.  v1:= temp;
  #L301830.  v0:= -1I;
  #L301832.  if v1 == v0 then goto L30187c;
  #L301836.  if v1 == 0 then goto L301876;
  #L30183a.  v2:= 1I;
  #L30183c.  if v1 == v2 then goto L301870;
  #L301840.  v2:= 2I;
  #L301842.  if v1 == v2 then goto L30186a;
  #L301846.  v2:= 3I;
  #L301848.  if v1 == v2 then goto L301864;
  #L30184c.  v2:= 4I;
  #L30184e.  if v1 != v2 then goto L301858;
  #L301852.  v1:= `@@okhttp3.internal.Util.UTF_32LE` @type ^`java.nio.charset.Charset` @kind object;
  #L301856.  return v1 @kind object;
  #L301858.  v1:= new `java.lang.AssertionError`;
  #L30185c.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L301862.  throw v1;
  #L301864.  v1:= `@@okhttp3.internal.Util.UTF_32BE` @type ^`java.nio.charset.Charset` @kind object;
  #L301868.  return v1 @kind object;
  #L30186a.  v1:= `@@java.nio.charset.StandardCharsets.UTF_16LE` @type ^`java.nio.charset.Charset` @kind object;
  #L30186e.  return v1 @kind object;
  #L301870.  v1:= `@@java.nio.charset.StandardCharsets.UTF_16BE` @type ^`java.nio.charset.Charset` @kind object;
  #L301874.  return v1 @kind object;
  #L301876.  v1:= `@@java.nio.charset.StandardCharsets.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L30187a.  return v1 @kind object;
  #L30187c.  return v2 @kind object;
}
procedure `java.lang.String` `canonicalizeHost`(`java.lang.String` v4 @kind object) @signature `Lokhttp3/internal/Util;.canonicalizeHost:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L301300.  v0:= ":" @kind object;
  #L301304.  call temp:= `contains`(v4, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L30130a.  v0:= temp;
  #L30130c.  v1:= 0I;
  #L30130e.  if v0 == 0 then goto L3013c6;
  #L301312.  v0:= "[" @kind object;
  #L301316.  call temp:= `startsWith`(v4, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L30131c.  v0:= temp;
  #L30131e.  if v0 == 0 then goto L301348;
  #L301322.  v0:= "]" @kind object;
  #L301326.  call temp:= `endsWith`(v4, v0) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L30132c.  v0:= temp;
  #L30132e.  if v0 == 0 then goto L301348;
  #L301332.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L301338.  v0:= temp;
  #L30133a.  v2:= 1I;
  #L30133c.  v0:= v0 - v2 @kind int;
  #L30133e.  call temp:= `decodeIpv6`(v4, v2, v0) @signature `Lokhttp3/internal/Util;.decodeIpv6:(Ljava/lang/String;II)Ljava/net/InetAddress;` @kind static;
  #L301344.  v0:= temp @kind object;
  #L301346.  goto L30135a;
  #L301348.  v0:= 0I;
  #L30134a.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L301350.  v2:= temp;
  #L301352.  call temp:= `decodeIpv6`(v4, v0, v2) @signature `Lokhttp3/internal/Util;.decodeIpv6:(Ljava/lang/String;II)Ljava/net/InetAddress;` @kind static;
  #L301358.  v0:= temp @kind object;
  #L30135a.  if v0 != 0 then goto L301360;
  #L30135e.  return v1 @kind object;
  #L301360.  call temp:= `getAddress`(v0) @signature `Ljava/net/InetAddress;.getAddress:()[B` @kind virtual;
  #L301366.  v1:= temp @kind object;
  #L301368.  v2:= length @variable v1;
  #L30136a.  v3:= 16I;
  #L30136e.  if v2 != v3 then goto L30137c;
  #L301372.  call temp:= `inet6AddressToAscii`(v1) @signature `Lokhttp3/internal/Util;.inet6AddressToAscii:([B)Ljava/lang/String;` @kind static;
  #L301378.  v4:= temp @kind object;
  #L30137a.  return v4 @kind object;
  #L30137c.  v1:= length @variable v1;
  #L30137e.  v2:= 4I;
  #L301380.  if v1 != v2 then goto L30138e;
  #L301384.  call temp:= `getHostAddress`(v0) @signature `Ljava/net/InetAddress;.getHostAddress:()Ljava/lang/String;` @kind virtual;
  #L30138a.  v4:= temp @kind object;
  #L30138c.  return v4 @kind object;
  #L30138e.  v0:= new `java.lang.AssertionError`;
  #L301392.  v1:= new `java.lang.StringBuilder`;
  #L301396.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30139c.  v2:= "Invalid IPv6 address: '" @kind object;
  #L3013a0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3013a6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3013ac.  v4:= "'" @kind object;
  #L3013b0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3013b6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3013bc.  v4:= temp @kind object;
  #L3013be.  call `<init>`(v0, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3013c4.  throw v0;
  #L3013c6.  call temp:= `toASCII`(v4) @signature `Ljava/net/IDN;.toASCII:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3013cc.  v4:= temp @kind object;
  #L3013ce.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L3013d2.  call temp:= `toLowerCase`(v4, v0) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3013d8.  v4:= temp @kind object;
  #L3013da.  call temp:= `isEmpty`(v4) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L3013e0.  v0:= temp;
  #L3013e2.  if v0 == 0 then goto L3013e8;
  #L3013e6.  return v1 @kind object;
  #L3013e8.  call temp:= `containsInvalidHostnameAsciiCodes`(v4) @signature `Lokhttp3/internal/Util;.containsInvalidHostnameAsciiCodes:(Ljava/lang/String;)Z` @kind static;
  #L3013ee.  v0:= temp;
  #L3013f0.  if v0 == 0 then goto L3013f6;
  #L3013f4.  return v1 @kind object;
  #L3013f6.  return v4 @kind object;
  #L3013f8.  return v1 @kind object;
  catch `java.lang.IllegalArgumentException` @[L3013c6..L3013f0] goto L3013f8;
}
procedure `int` `checkDuration`(`java.lang.String` v6 @kind object, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L301050.  v0:= 0L;
  #L301054.  v2:= lcmp(v7, v0);
  #L301058.  if v2 < 0 then goto L3010ee;
  #L30105c.  v2:= "unit == null" @kind object;
  #L301060.  call temp:= `requireNonNull`(v9, v2) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L301066.  call temp:= `toMillis`(v9, v7) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L30106c.  v2:= temp @kind wide;
  #L30106e.  v4:= 2147483647L;
  #L301074.  v9:= lcmp(v2, v4);
  #L301078.  if v9 > 0 then goto L3010c0;
  #L30107c.  v9:= lcmp(v2, v0);
  #L301080.  if v9 != 0 then goto L3010bc;
  #L301084.  v9:= lcmp(v7, v0);
  #L301088.  if v9 > 0 then goto L30108e;
  #L30108c.  goto L3010bc;
  #L30108e.  v7:= new `java.lang.IllegalArgumentException`;
  #L301092.  v8:= new `java.lang.StringBuilder`;
  #L301096.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30109c.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3010a2.  v6:= " too small." @kind object;
  #L3010a6.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3010ac.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3010b2.  v6:= temp @kind object;
  #L3010b4.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3010ba.  throw v7;
  #L3010bc.  v6:= (`int`) v2 @kind l2i;
  #L3010be.  return v6;
  #L3010c0.  v7:= new `java.lang.IllegalArgumentException`;
  #L3010c4.  v8:= new `java.lang.StringBuilder`;
  #L3010c8.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3010ce.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3010d4.  v6:= " too large." @kind object;
  #L3010d8.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3010de.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3010e4.  v6:= temp @kind object;
  #L3010e6.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3010ec.  throw v7;
  #L3010ee.  v7:= new `java.lang.IllegalArgumentException`;
  #L3010f2.  v8:= new `java.lang.StringBuilder`;
  #L3010f6.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3010fc.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L301102.  v6:= " < 0" @kind object;
  #L301106.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30110c.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L301112.  v6:= temp @kind object;
  #L301114.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30111a.  throw v7;
}
procedure `void` `checkOffsetAndCount`(`long` v5 , `long` v7 , `long` v9 ) @signature `Lokhttp3/internal/Util;.checkOffsetAndCount:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L301c20.  v0:= v7 ^| v9 @kind long;
  #L301c24.  v2:= 0L;
  #L301c28.  v4:= lcmp(v0, v2);
  #L301c2c.  if v4 < 0 then goto L301c44;
  #L301c30.  v0:= lcmp(v7, v5);
  #L301c34.  if v0 > 0 then goto L301c44;
  #L301c38.  v5:= v5 - v7 @kind long;
  #L301c3a.  v7:= lcmp(v5, v9);
  #L301c3e.  if v7 < 0 then goto L301c44;
  #L301c42.  return @kind void;
  #L301c44.  v5:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L301c48.  call `<init>`(v5) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L301c4e.  throw v5;
}
procedure `void` `closeQuietly`(`java.io.Closeable` v0 @kind object) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L301c60.  if v0 == 0 then goto L301c70;
  #L301c64.  call `close`(v0) @signature `Ljava/io/Closeable;.close:()V` @kind interface;
  #L301c6a.  goto L301c70;
  #L301c6c.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L301c6e.  throw v0;
  #L301c70.  return @kind void;
  catch `java.lang.RuntimeException` @[L301c64..L301c6a] goto L301c6c;
  catch `java.lang.Exception` @[L301c64..L301c6a] goto L301c70;
}
procedure `void` `closeQuietly`(`java.net.ServerSocket` v0 @kind object) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/ServerSocket;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L301c94.  if v0 == 0 then goto L301ca4;
  #L301c98.  call `close`(v0) @signature `Ljava/net/ServerSocket;.close:()V` @kind virtual;
  #L301c9e.  goto L301ca4;
  #L301ca0.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L301ca2.  throw v0;
  #L301ca4.  return @kind void;
  catch `java.lang.RuntimeException` @[L301c98..L301c9e] goto L301ca0;
  catch `java.lang.Exception` @[L301c98..L301c9e] goto L301ca4;
}
procedure `void` `closeQuietly`(`java.net.Socket` v1 @kind object) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/Socket;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L301cc8.  if v1 == 0 then goto L301cea;
  #L301ccc.  call `close`(v1) @signature `Ljava/net/Socket;.close:()V` @kind virtual;
  #L301cd2.  goto L301cea;
  #L301cd4.  v1:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L301cd6.  throw v1;
  #L301cd8.  v1:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L301cda.  call temp:= `isAndroidGetsocknameError`(v1) @signature `Lokhttp3/internal/Util;.isAndroidGetsocknameError:(Ljava/lang/AssertionError;)Z` @kind static;
  #L301ce0.  v0:= temp;
  #L301ce2.  if v0 == 0 then goto L301ce8;
  #L301ce6.  goto L301cea;
  #L301ce8.  throw v1;
  #L301cea.  return @kind void;
  catch `java.lang.AssertionError` @[L301ccc..L301cd2] goto L301cd8;
  catch `java.lang.RuntimeException` @[L301ccc..L301cd2] goto L301cd4;
  catch `java.lang.Exception` @[L301ccc..L301cd2] goto L301cea;
}
procedure `java.lang.String`[] `concat`(`java.lang.String`[] v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lokhttp3/internal/Util;.concat:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L301610.  v0:= length @variable v4;
  #L301612.  v0:= v0 + 1;
  #L301616.  v1:= new `java.lang.String`[v0];
  #L30161a.  v2:= length @variable v4;
  #L30161c.  v3:= 0I;
  #L30161e.  call `arraycopy`(v4, v3, v1, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L301624.  v0:= v0 + -1;
  #L301628.  v1[v0]:= v5 @kind object;
  #L30162c.  return v1 @kind object;
}
procedure `boolean` `containsInvalidHostnameAsciiCodes`(`java.lang.String` v5 @kind object) @signature `Lokhttp3/internal/Util;.containsInvalidHostnameAsciiCodes:(Ljava/lang/String;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L300cb8.  v0:= 0I;
  #L300cba.  v1:= 0I;
  #L300cbc.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L300cc2.  v2:= temp;
  #L300cc4.  if v1 >= v2 then goto L300d00;
  #L300cc8.  call temp:= `charAt`(v5, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L300cce.  v2:= temp;
  #L300cd0.  v3:= 31I;
  #L300cd4.  v4:= 1I;
  #L300cd6.  if v2 <= v3 then goto L300cfe;
  #L300cda.  v3:= 127I;
  #L300cde.  if v2 < v3 then goto L300ce4;
  #L300ce2.  goto L300cfe;
  #L300ce4.  v3:= " #%/:?@[\\]" @kind object;
  #L300ce8.  call temp:= `indexOf`(v3, v2) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L300cee.  v2:= temp;
  #L300cf0.  v3:= -1I;
  #L300cf2.  if v2 == v3 then goto L300cf8;
  #L300cf6.  return v4;
  #L300cf8.  v1:= v1 + 1;
  #L300cfc.  goto L300cbc;
  #L300cfe.  return v4;
  #L300d00.  return v0;
}
procedure `int` `decodeHexDigit`(`char` v2 ) @signature `Lokhttp3/internal/Util;.decodeHexDigit:(C)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L30112c.  v0:= 48I;
  #L301130.  if v2 < v0 then goto L301140;
  #L301134.  v1:= 57I;
  #L301138.  if v2 > v1 then goto L301140;
  #L30113c.  v2:= v2 - v0 @kind int;
  #L30113e.  return v2;
  #L301140.  v0:= 97I;
  #L301144.  if v2 < v0 then goto L301158;
  #L301148.  v1:= 102I;
  #L30114c.  if v2 > v1 then goto L301158;
  #L301150.  v2:= v2 - v0 @kind int;
  #L301152.  v2:= v2 + 10;
  #L301156.  return v2;
  #L301158.  v0:= 65I;
  #L30115c.  if v2 < v0 then goto L30116a;
  #L301160.  v1:= 70I;
  #L301164.  if v2 > v1 then goto L30116a;
  #L301168.  goto L301150;
  #L30116a.  v2:= -1I;
  #L30116c.  return v2;
}
procedure `boolean` `decodeIpv4Suffix`(`java.lang.String` v7 @kind object, `int` v8 , `int` v9 , `byte`[] v10 @kind object, `int` v11 ) @signature `Lokhttp3/internal/Util;.decodeIpv4Suffix:(Ljava/lang/String;II[BI)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L300d14.  v0:= v11;
  #L300d16.  v1:= 0I;
  #L300d18.  if v8 >= v9 then goto L300d9c;
  #L300d1c.  v2:= length @variable v10;
  #L300d1e.  if v0 != v2 then goto L300d24;
  #L300d22.  return v1;
  #L300d24.  if v0 == v11 then goto L300d3e;
  #L300d28.  call temp:= `charAt`(v7, v8) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L300d2e.  v2:= temp;
  #L300d30.  v3:= 46I;
  #L300d34.  if v2 == v3 then goto L300d3a;
  #L300d38.  return v1;
  #L300d3a.  v8:= v8 + 1;
  #L300d3e.  v2:= v8;
  #L300d40.  v3:= 0I;
  #L300d42.  if v2 >= v9 then goto L300d82;
  #L300d46.  call temp:= `charAt`(v7, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L300d4c.  v4:= temp;
  #L300d4e.  v5:= 48I;
  #L300d52.  if v4 < v5 then goto L300d82;
  #L300d56.  v6:= 57I;
  #L300d5a.  if v4 <= v6 then goto L300d60;
  #L300d5e.  goto L300d82;
  #L300d60.  if v3 != 0 then goto L300d6a;
  #L300d64.  if v8 == v2 then goto L300d6a;
  #L300d68.  return v1;
  #L300d6a.  v3:= v3 * 10;
  #L300d6e.  v3:= v3 + v4 @kind int;
  #L300d70.  v3:= v3 - v5 @kind int;
  #L300d72.  v4:= 255I;
  #L300d76.  if v3 <= v4 then goto L300d7c;
  #L300d7a.  return v1;
  #L300d7c.  v2:= v2 + 1;
  #L300d80.  goto L300d42;
  #L300d82.  v8:= v2 - v8 @kind int;
  #L300d86.  if v8 != 0 then goto L300d8c;
  #L300d8a.  return v1;
  #L300d8c.  v8:= v0 + 1;
  #L300d90.  v1:= (`byte`) v3 @kind i2b;
  #L300d92.  v10[v0]:= v1 @kind byte;
  #L300d96.  v0:= v8;
  #L300d98.  v8:= v2;
  #L300d9a.  goto L300d16;
  #L300d9c.  v11:= v11 + 4;
  #L300da0.  if v0 == v11 then goto L300da6;
  #L300da4.  return v1;
  #L300da6.  v7:= 1I;
  #L300da8.  return v7;
}
procedure `java.net.InetAddress` `decodeIpv6`(`java.lang.String` v11 @kind object, `int` v12 , `int` v13 ) @signature `Lokhttp3/internal/Util;.decodeIpv6:(Ljava/lang/String;II)Ljava/net/InetAddress;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3016d4.  v0:= 16I;
  #L3016d8.  v1:= new `byte`[v0];
  #L3016dc.  v2:= -1I;
  #L3016de.  v3:= 0I;
  #L3016e0.  v4:= 0I;
  #L3016e2.  v5:= -1I;
  #L3016e4.  v6:= -1I;
  #L3016e6.  v7:= 0I;
  #L3016e8.  if v12 >= v13 then goto L3017c8;
  #L3016ec.  if v4 != v0 then goto L3016f2;
  #L3016f0.  return v7 @kind object;
  #L3016f2.  v8:= v12 + 2;
  #L3016f6.  if v8 > v13 then goto L301722;
  #L3016fa.  v9:= "::" @kind object;
  #L3016fe.  v10:= 2I;
  #L301700.  call temp:= `regionMatches`(v11, v12, v9, v3, v10) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L301706.  v9:= temp;
  #L301708.  if v9 == 0 then goto L301722;
  #L30170c.  if v5 == v2 then goto L301712;
  #L301710.  return v7 @kind object;
  #L301712.  v4:= v4 + 2;
  #L301716.  v5:= v4;
  #L301718.  if v8 != v13 then goto L30171e;
  #L30171c.  goto L3017c8;
  #L30171e.  v6:= v8;
  #L301720.  goto L30176a;
  #L301722.  if v4 == 0 then goto L301768;
  #L301726.  v8:= ":" @kind object;
  #L30172a.  v9:= 1I;
  #L30172c.  call temp:= `regionMatches`(v11, v12, v8, v3, v9) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L301732.  v8:= temp;
  #L301734.  if v8 == 0 then goto L30173e;
  #L301738.  v12:= v12 + 1;
  #L30173c.  goto L301768;
  #L30173e.  v8:= "." @kind object;
  #L301742.  call temp:= `regionMatches`(v11, v12, v8, v3, v9) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L301748.  v12:= temp;
  #L30174a.  if v12 == 0 then goto L301766;
  #L30174e.  v12:= v4 + -2;
  #L301752.  call temp:= `decodeIpv4Suffix`(v11, v6, v13, v1, v12) @signature `Lokhttp3/internal/Util;.decodeIpv4Suffix:(Ljava/lang/String;II[BI)Z` @kind static;
  #L301758.  v11:= temp;
  #L30175a.  if v11 != 0 then goto L301760;
  #L30175e.  return v7 @kind object;
  #L301760.  v4:= v4 + 2;
  #L301764.  goto L3017c8;
  #L301766.  return v7 @kind object;
  #L301768.  v6:= v12;
  #L30176a.  v12:= v6;
  #L30176c.  v8:= 0I;
  #L30176e.  if v12 >= v13 then goto L301794;
  #L301772.  call temp:= `charAt`(v11, v12) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L301778.  v9:= temp;
  #L30177a.  call temp:= `decodeHexDigit`(v9) @signature `Lokhttp3/internal/Util;.decodeHexDigit:(C)I` @kind static;
  #L301780.  v9:= temp;
  #L301782.  if v9 != v2 then goto L301788;
  #L301786.  goto L301794;
  #L301788.  v8:= v8 ^< 4;
  #L30178c.  v8:= v8 + v9 @kind int;
  #L30178e.  v12:= v12 + 1;
  #L301792.  goto L30176e;
  #L301794.  v9:= v12 - v6 @kind int;
  #L301798.  if v9 == 0 then goto L3017c6;
  #L30179c.  v10:= 4I;
  #L30179e.  if v9 <= v10 then goto L3017a4;
  #L3017a2.  goto L3017c6;
  #L3017a4.  v7:= v4 + 1;
  #L3017a8.  v9:= v8 ^>> 8;
  #L3017ac.  v9:= v9 ^& 255;
  #L3017b0.  v9:= (`byte`) v9 @kind i2b;
  #L3017b2.  v1[v4]:= v9 @kind byte;
  #L3017b6.  v4:= v7 + 1;
  #L3017ba.  v8:= v8 ^& 255;
  #L3017be.  v8:= (`byte`) v8 @kind i2b;
  #L3017c0.  v1[v7]:= v8 @kind byte;
  #L3017c4.  goto L3016e6;
  #L3017c6.  return v7 @kind object;
  #L3017c8.  if v4 == v0 then goto L3017ea;
  #L3017cc.  if v5 != v2 then goto L3017d2;
  #L3017d0.  return v7 @kind object;
  #L3017d2.  v11:= v4 - v5 @kind int;
  #L3017d6.  v12:= v11 - 16;
  #L3017da.  call `arraycopy`(v1, v5, v1, v12, v11) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3017e0.  v0:= v0 - v4 @kind int;
  #L3017e2.  v0:= v0 + v5 @kind int;
  #L3017e4.  call `fill`(v1, v5, v0, v3) @signature `Ljava/util/Arrays;.fill:([BIIB)V` @kind static;
  #L3017ea.  call temp:= `getByAddress`(v1) @signature `Ljava/net/InetAddress;.getByAddress:([B)Ljava/net/InetAddress;` @kind static;
  #L3017f0.  v11:= temp @kind object;
  #L3017f2.  return v11 @kind object;
  #L3017f4.  v11:= new `java.lang.AssertionError`;
  #L3017f8.  call `<init>`(v11) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3017fe.  goto L301802;
  #L301800.  throw v11;
  #L301802.  goto L301800;
  catch `java.net.UnknownHostException` @[L3017ea..L3017f2] goto L3017f4;
}
procedure `int` `delimiterOffset`(`java.lang.String` v1 @kind object, `int` v2 , `int` v3 , `char` v4 ) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IIC)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L301180.  if v2 >= v3 then goto L301198;
  #L301184.  call temp:= `charAt`(v1, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L30118a.  v0:= temp;
  #L30118c.  if v0 != v4 then goto L301192;
  #L301190.  return v2;
  #L301192.  v2:= v2 + 1;
  #L301196.  goto L301180;
  #L301198.  return v3;
}
procedure `int` `delimiterOffset`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.lang.String` v5 @kind object) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3011ac.  if v3 >= v4 then goto L3011ce;
  #L3011b0.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3011b6.  v0:= temp;
  #L3011b8.  call temp:= `indexOf`(v5, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L3011be.  v0:= temp;
  #L3011c0.  v1:= -1I;
  #L3011c2.  if v0 == v1 then goto L3011c8;
  #L3011c6.  return v3;
  #L3011c8.  v3:= v3 + 1;
  #L3011cc.  goto L3011ac;
  #L3011ce.  return v4;
}
procedure `boolean` `discard`(`okio.i0` v0 @kind object, `int` v1 , `java.util.concurrent.TimeUnit` v2 @kind object) @signature `Lokhttp3/internal/Util;.discard:(Lokio/i0;ILjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L300dbc.  call temp:= `skipAll`(v0, v1, v2) @signature `Lokhttp3/internal/Util;.skipAll:(Lokio/i0;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L300dc2.  v0:= temp;
  #L300dc4.  return v0;
  #L300dc6.  v0:= 0I;
  #L300dc8.  return v0;
  catch `java.io.IOException` @[L300dbc..L300dc4] goto L300dc6;
}
procedure `java.lang.String` `format`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L30141c.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L301420.  call temp:= `format`(v0, v1, v2) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L301426.  v1:= temp @kind object;
  #L301428.  return v1 @kind object;
}
procedure `java.lang.String` `getSystemProperty`(`java.lang.String` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lokhttp3/internal/Util;.getSystemProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L30143c.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L301442.  v0:= temp @kind object;
  #L301444.  if v0 == 0 then goto L30144a;
  #L301448.  v1:= v0 @kind object;
  #L30144a.  return v1 @kind object;
  catch `java.security.AccessControlException` @[L30143c..L301444] goto L30144a;
}
procedure `java.lang.String` `hostHeader`(`okhttp3.HttpUrl` v3 @kind object, `boolean` v4 ) @signature `Lokhttp3/internal/Util;.hostHeader:(Lokhttp3/HttpUrl;Z)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L30146c.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L301472.  v0:= temp @kind object;
  #L301474.  v1:= ":" @kind object;
  #L301478.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L30147e.  v0:= temp;
  #L301480.  if v0 == 0 then goto L3014ba;
  #L301484.  v0:= new `java.lang.StringBuilder`;
  #L301488.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30148e.  v2:= "[" @kind object;
  #L301492.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L301498.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L30149e.  v2:= temp @kind object;
  #L3014a0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3014a6.  v2:= "]" @kind object;
  #L3014aa.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3014b0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3014b6.  v0:= temp @kind object;
  #L3014b8.  goto L3014c2;
  #L3014ba.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L3014c0.  v0:= temp @kind object;
  #L3014c2.  if v4 != 0 then goto L3014e2;
  #L3014c6.  call temp:= `port`(v3) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L3014cc.  v4:= temp;
  #L3014ce.  call temp:= `scheme`(v3) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L3014d4.  v2:= temp @kind object;
  #L3014d6.  call temp:= `defaultPort`(v2) @signature `Lokhttp3/HttpUrl;.defaultPort:(Ljava/lang/String;)I` @kind static;
  #L3014dc.  v2:= temp;
  #L3014de.  if v4 == v2 then goto L30150e;
  #L3014e2.  v4:= new `java.lang.StringBuilder`;
  #L3014e6.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3014ec.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3014f2.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3014f8.  call temp:= `port`(v3) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L3014fe.  v3:= temp;
  #L301500.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L301506.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30150c.  v0:= temp @kind object;
  #L30150e.  return v0 @kind object;
}
procedure `java.util.List` `immutableList`(`java.util.List` v1 @kind object) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3018c0.  v0:= new `java.util.ArrayList`;
  #L3018c4.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3018ca.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L3018d0.  v1:= temp @kind object;
  #L3018d2.  return v1 @kind object;
}
procedure `java.util.List` `immutableList`(`java.lang.Object`[] v0 @kind object) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L301890.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L301896.  v0:= temp @kind object;
  #L301898.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L30189c.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3018a2.  v0:= temp @kind object;
  #L3018a4.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L3018aa.  v0:= temp @kind object;
  #L3018ac.  return v0 @kind object;
}
procedure `java.util.Map` `immutableMap`(`java.util.Map` v1 @kind object) @signature `Lokhttp3/internal/Util;.immutableMap:(Ljava/util/Map;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L301934.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L30193a.  v0:= temp;
  #L30193c.  if v0 == 0 then goto L30194a;
  #L301940.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L301946.  v1:= temp @kind object;
  #L301948.  goto L30195c;
  #L30194a.  v0:= new `java.util.LinkedHashMap`;
  #L30194e.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L301954.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L30195a.  v1:= temp @kind object;
  #L30195c.  return v1 @kind object;
}
procedure `int` `indexOf`(`java.util.Comparator` v3 @kind object, `java.lang.String`[] v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lokhttp3/internal/Util;.indexOf:(Ljava/util/Comparator;[Ljava/lang/String;Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3011e0.  v0:= length @variable v4;
  #L3011e2.  v1:= 0I;
  #L3011e4.  if v1 >= v0 then goto L301200;
  #L3011e8.  v2:= v4[v1] @kind object;
  #L3011ec.  call temp:= `compare`(v3, v2, v5) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L3011f2.  v2:= temp;
  #L3011f4.  if v2 != 0 then goto L3011fa;
  #L3011f8.  return v1;
  #L3011fa.  v1:= v1 + 1;
  #L3011fe.  goto L3011e4;
  #L301200.  v3:= -1I;
  #L301202.  return v3;
}
procedure `int` `indexOfControlOrNonAscii`(`java.lang.String` v4 @kind object) @signature `Lokhttp3/internal/Util;.indexOfControlOrNonAscii:(Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L301214.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L30121a.  v0:= temp;
  #L30121c.  v1:= 0I;
  #L30121e.  if v1 >= v0 then goto L301244;
  #L301222.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L301228.  v2:= temp;
  #L30122a.  v3:= 31I;
  #L30122e.  if v2 <= v3 then goto L301242;
  #L301232.  v3:= 127I;
  #L301236.  if v2 < v3 then goto L30123c;
  #L30123a.  goto L301242;
  #L30123c.  v1:= v1 + 1;
  #L301240.  goto L30121e;
  #L301242.  return v1;
  #L301244.  v4:= -1I;
  #L301246.  return v4;
}
procedure `java.lang.String` `inet6AddressToAscii`(`byte`[] v8 @kind object) @signature `Lokhttp3/internal/Util;.inet6AddressToAscii:([B)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L301520.  v0:= 0I;
  #L301522.  v1:= -1I;
  #L301524.  v2:= 0I;
  #L301526.  v3:= 0I;
  #L301528.  v4:= length @variable v8;
  #L30152a.  v5:= 16I;
  #L30152e.  if v2 >= v4 then goto L30156a;
  #L301532.  v4:= v2;
  #L301534.  if v4 >= v5 then goto L301552;
  #L301538.  v6:= v8[v4] @kind byte;
  #L30153c.  if v6 != 0 then goto L301552;
  #L301540.  v6:= v4 + 1;
  #L301544.  v6:= v8[v6] @kind byte;
  #L301548.  if v6 != 0 then goto L301552;
  #L30154c.  v4:= v4 + 2;
  #L301550.  goto L301534;
  #L301552.  v5:= v4 - v2 @kind int;
  #L301556.  if v5 <= v3 then goto L301564;
  #L30155a.  v6:= 4I;
  #L30155c.  if v5 < v6 then goto L301564;
  #L301560.  v1:= v2;
  #L301562.  v3:= v5;
  #L301564.  v2:= v4 + 2;
  #L301568.  goto L301528;
  #L30156a.  v2:= new `okio.k`;
  #L30156e.  call `<init>`(v2) @signature `Lokio/k;.<init>:()V` @kind direct;
  #L301574.  v4:= length @variable v8;
  #L301576.  if v0 >= v4 then goto L3015c8;
  #L30157a.  v4:= 58I;
  #L30157e.  if v0 != v1 then goto L301596;
  #L301582.  call temp:= `n1`(v2, v4) @signature `Lokio/k;.n1:(I)Lokio/k;` @kind virtual;
  #L301588.  v0:= v0 + v3 @kind int;
  #L30158a.  if v0 != v5 then goto L301574;
  #L30158e.  call temp:= `n1`(v2, v4) @signature `Lokio/k;.n1:(I)Lokio/k;` @kind virtual;
  #L301594.  goto L301574;
  #L301596.  if v0 <= 0 then goto L3015a0;
  #L30159a.  call temp:= `n1`(v2, v4) @signature `Lokio/k;.n1:(I)Lokio/k;` @kind virtual;
  #L3015a0.  v4:= v8[v0] @kind byte;
  #L3015a4.  v4:= v4 ^& 255;
  #L3015a8.  v4:= v4 ^< 8;
  #L3015ac.  v6:= v0 + 1;
  #L3015b0.  v6:= v8[v6] @kind byte;
  #L3015b4.  v6:= v6 ^& 255;
  #L3015b8.  v4:= v4 ^| v6 @kind int;
  #L3015ba.  v6:= (`long`) v4 @kind i2l;
  #L3015bc.  call temp:= `p1`(v2, v6) @signature `Lokio/k;.p1:(J)Lokio/k;` @kind virtual;
  #L3015c2.  v0:= v0 + 2;
  #L3015c6.  goto L301574;
  #L3015c8.  call temp:= `Y0`(v2) @signature `Lokio/k;.Y0:()Ljava/lang/String;` @kind virtual;
  #L3015ce.  v8:= temp @kind object;
  #L3015d0.  return v8 @kind object;
}
procedure `java.lang.String`[] `intersect`(`java.util.Comparator` v8 @kind object, `java.lang.String`[] v9 @kind object, `java.lang.String`[] v10 @kind object) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L301640.  v0:= new `java.util.ArrayList`;
  #L301644.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L30164a.  v1:= length @variable v9;
  #L30164c.  v2:= 0I;
  #L30164e.  v3:= 0I;
  #L301650.  if v3 >= v1 then goto L301684;
  #L301654.  v4:= v9[v3] @kind object;
  #L301658.  v5:= length @variable v10;
  #L30165a.  v6:= 0I;
  #L30165c.  if v6 >= v5 then goto L30167e;
  #L301660.  v7:= v10[v6] @kind object;
  #L301664.  call temp:= `compare`(v8, v4, v7) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L30166a.  v7:= temp;
  #L30166c.  if v7 != 0 then goto L301678;
  #L301670.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L301676.  goto L30167e;
  #L301678.  v6:= v6 + 1;
  #L30167c.  goto L30165c;
  #L30167e.  v3:= v3 + 1;
  #L301682.  goto L301650;
  #L301684.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L30168a.  v8:= temp;
  #L30168c.  v8:= new `java.lang.String`[v8];
  #L301690.  call temp:= `toArray`(v0, v8) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L301696.  v8:= temp @kind object;
  #L301698.  v8:= (`java.lang.String`[]) v8 @kind object;
  #L30169c.  return v8 @kind object;
}
procedure `boolean` `isAndroidGetsocknameError`(`java.lang.AssertionError` v1 @kind object) @signature `Lokhttp3/internal/Util;.isAndroidGetsocknameError:(Ljava/lang/AssertionError;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L300dec.  call temp:= `getCause`(v1) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L300df2.  v0:= temp @kind object;
  #L300df4.  if v0 == 0 then goto L300e20;
  #L300df8.  call temp:= `getMessage`(v1) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L300dfe.  v0:= temp @kind object;
  #L300e00.  if v0 == 0 then goto L300e20;
  #L300e04.  call temp:= `getMessage`(v1) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L300e0a.  v1:= temp @kind object;
  #L300e0c.  v0:= "getsockname failed" @kind object;
  #L300e10.  call temp:= `contains`(v1, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L300e16.  v1:= temp;
  #L300e18.  if v1 == 0 then goto L300e20;
  #L300e1c.  v1:= 1I;
  #L300e1e.  goto L300e22;
  #L300e20.  v1:= 0I;
  #L300e22.  return v1;
}
procedure `java.lang.Thread` `lambda$threadFactory$0`(`java.lang.String` v1 @kind object, `boolean` v2 , `java.lang.Runnable` v3 @kind object) @signature `Lokhttp3/internal/Util;.lambda$threadFactory$0:(Ljava/lang/String;ZLjava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L3016b0.  v0:= new `java.lang.Thread`;
  #L3016b4.  call `<init>`(v0, v3, v1) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L3016ba.  call `setDaemon`(v0, v2) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L3016c0.  return v0 @kind object;
}
procedure `boolean` `nonEmptyIntersection`(`java.util.Comparator` v7 @kind object, `java.lang.String`[] v8 @kind object, `java.lang.String`[] v9 @kind object) @signature `Lokhttp3/internal/Util;.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L300e34.  v0:= 0I;
  #L300e36.  if v8 == 0 then goto L300e80;
  #L300e3a.  if v9 == 0 then goto L300e80;
  #L300e3e.  v1:= length @variable v8;
  #L300e40.  if v1 == 0 then goto L300e80;
  #L300e44.  v1:= length @variable v9;
  #L300e46.  if v1 != 0 then goto L300e4c;
  #L300e4a.  goto L300e80;
  #L300e4c.  v1:= length @variable v8;
  #L300e4e.  v2:= 0I;
  #L300e50.  if v2 >= v1 then goto L300e80;
  #L300e54.  v3:= v8[v2] @kind object;
  #L300e58.  v4:= length @variable v9;
  #L300e5a.  v5:= 0I;
  #L300e5c.  if v5 >= v4 then goto L300e7a;
  #L300e60.  v6:= v9[v5] @kind object;
  #L300e64.  call temp:= `compare`(v7, v3, v6) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L300e6a.  v6:= temp;
  #L300e6c.  if v6 != 0 then goto L300e74;
  #L300e70.  v7:= 1I;
  #L300e72.  return v7;
  #L300e74.  v5:= v5 + 1;
  #L300e78.  goto L300e5c;
  #L300e7a.  v2:= v2 + 1;
  #L300e7e.  goto L300e50;
  #L300e80.  return v0;
}
procedure `javax.net.ssl.X509TrustManager` `platformTrustManager`() @signature `Lokhttp3/internal/Util;.platformTrustManager:()Ljavax/net/ssl/X509TrustManager;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30198c.  call temp:= `getDefaultAlgorithm`() @signature `Ljavax/net/ssl/TrustManagerFactory;.getDefaultAlgorithm:()Ljava/lang/String;` @kind static;
  #L301992.  v0:= temp @kind object;
  #L301994.  call temp:= `getInstance`(v0) @signature `Ljavax/net/ssl/TrustManagerFactory;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/TrustManagerFactory;` @kind static;
  #L30199a.  v0:= temp @kind object;
  #L30199c.  v1:= 0I;
  #L30199e.  call `init`(v0, v1) @signature `Ljavax/net/ssl/TrustManagerFactory;.init:(Ljava/security/KeyStore;)V` @kind virtual;
  #L3019a4.  call temp:= `getTrustManagers`(v0) @signature `Ljavax/net/ssl/TrustManagerFactory;.getTrustManagers:()[Ljavax/net/ssl/TrustManager;` @kind virtual;
  #L3019aa.  v0:= temp @kind object;
  #L3019ac.  v1:= length @variable v0;
  #L3019ae.  v2:= 1I;
  #L3019b0.  if v1 != v2 then goto L3019cc;
  #L3019b4.  v1:= 0I;
  #L3019b6.  v2:= v0[v1] @kind object;
  #L3019ba.  v2:= instanceof @variable v2 @type ^`javax.net.ssl.X509TrustManager` @kind boolean;
  #L3019be.  if v2 == 0 then goto L3019cc;
  #L3019c2.  v0:= v0[v1] @kind object;
  #L3019c6.  v0:= (`javax.net.ssl.X509TrustManager`) v0 @kind object;
  #L3019ca.  return v0 @kind object;
  #L3019cc.  v1:= new `java.lang.IllegalStateException`;
  #L3019d0.  v2:= new `java.lang.StringBuilder`;
  #L3019d4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3019da.  v3:= "Unexpected default trust managers:" @kind object;
  #L3019de.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3019e4.  call temp:= `toString`(v0) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3019ea.  v0:= temp @kind object;
  #L3019ec.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3019f2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3019f8.  v0:= temp @kind object;
  #L3019fa.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L301a00.  throw v1;
  #L301a02.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L301a04.  v1:= new `java.lang.AssertionError`;
  #L301a08.  v2:= "No System TLS" @kind object;
  #L301a0c.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L301a12.  throw v1;
  catch `java.security.GeneralSecurityException` @[L30198c..L301a02] goto L301a02;
}
procedure `boolean` `sameConnection`(`okhttp3.HttpUrl` v2 @kind object, `okhttp3.HttpUrl` v3 @kind object) @signature `Lokhttp3/internal/Util;.sameConnection:(Lokhttp3/HttpUrl;Lokhttp3/HttpUrl;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L300e94.  call temp:= `host`(v2) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L300e9a.  v0:= temp @kind object;
  #L300e9c.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L300ea2.  v1:= temp @kind object;
  #L300ea4.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L300eaa.  v0:= temp;
  #L300eac.  if v0 == 0 then goto L300ee4;
  #L300eb0.  call temp:= `port`(v2) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L300eb6.  v0:= temp;
  #L300eb8.  call temp:= `port`(v3) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L300ebe.  v1:= temp;
  #L300ec0.  if v0 != v1 then goto L300ee4;
  #L300ec4.  call temp:= `scheme`(v2) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L300eca.  v2:= temp @kind object;
  #L300ecc.  call temp:= `scheme`(v3) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L300ed2.  v3:= temp @kind object;
  #L300ed4.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L300eda.  v2:= temp;
  #L300edc.  if v2 == 0 then goto L300ee4;
  #L300ee0.  v2:= 1I;
  #L300ee2.  goto L300ee6;
  #L300ee4.  v2:= 0I;
  #L300ee6.  return v2;
}
procedure `boolean` `skipAll`(`okio.i0` v11 @kind object, `int` v12 , `java.util.concurrent.TimeUnit` v13 @kind object) @signature `Lokhttp3/internal/Util;.skipAll:(Lokio/i0;ILjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L300ef8.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L300efe.  v0:= temp @kind wide;
  #L300f00.  call temp:= `timeout`(v11) @signature `Lokio/i0;.timeout:()Lokio/l0;` @kind interface;
  #L300f06.  v2:= temp @kind object;
  #L300f08.  call temp:= `hasDeadline`(v2) @signature `Lokio/l0;.hasDeadline:()Z` @kind virtual;
  #L300f0e.  v2:= temp;
  #L300f10.  v3:= 9223372036854775807L;
  #L300f1a.  if v2 == 0 then goto L300f32;
  #L300f1e.  call temp:= `timeout`(v11) @signature `Lokio/i0;.timeout:()Lokio/l0;` @kind interface;
  #L300f24.  v2:= temp @kind object;
  #L300f26.  call temp:= `deadlineNanoTime`(v2) @signature `Lokio/l0;.deadlineNanoTime:()J` @kind virtual;
  #L300f2c.  v5:= temp @kind wide;
  #L300f2e.  v5:= v5 - v0 @kind long;
  #L300f30.  goto L300f34;
  #L300f32.  v5:= v3 @kind wide;
  #L300f34.  call temp:= `timeout`(v11) @signature `Lokio/i0;.timeout:()Lokio/l0;` @kind interface;
  #L300f3a.  v2:= temp @kind object;
  #L300f3c.  v7:= (`long`) v12 @kind i2l;
  #L300f3e.  call temp:= `toNanos`(v13, v7) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L300f44.  v12:= temp @kind wide;
  #L300f46.  call temp:= `min`(v5, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L300f4c.  v12:= temp @kind wide;
  #L300f4e.  v12:= v12 + v0 @kind long;
  #L300f50.  call temp:= `deadlineNanoTime`(v2, v12) @signature `Lokio/l0;.deadlineNanoTime:(J)Lokio/l0;` @kind virtual;
  #L300f56.  v12:= new `okio.k`;
  #L300f5a.  call `<init>`(v12) @signature `Lokio/k;.<init>:()V` @kind direct;
  #L300f60.  v7:= 8192L;
  #L300f64.  call temp:= `read`(v11, v12, v7) @signature `Lokio/i0;.read:(Lokio/k;J)J` @kind interface;
  #L300f6a.  v7:= temp @kind wide;
  #L300f6c.  v9:= -1L;
  #L300f70.  v13:= lcmp(v7, v9);
  #L300f74.  if v13 == 0 then goto L300f80;
  #L300f78.  call `a`(v12) @signature `Lokio/k;.a:()V` @kind virtual;
  #L300f7e.  goto L300f60;
  #L300f80.  v12:= 1I;
  #L300f82.  v13:= lcmp(v5, v3);
  #L300f86.  if v13 != 0 then goto L300f9a;
  #L300f8a.  call temp:= `timeout`(v11) @signature `Lokio/i0;.timeout:()Lokio/l0;` @kind interface;
  #L300f90.  v11:= temp @kind object;
  #L300f92.  call temp:= `clearDeadline`(v11) @signature `Lokio/l0;.clearDeadline:()Lokio/l0;` @kind virtual;
  #L300f98.  goto L300faa;
  #L300f9a.  call temp:= `timeout`(v11) @signature `Lokio/i0;.timeout:()Lokio/l0;` @kind interface;
  #L300fa0.  v11:= temp @kind object;
  #L300fa2.  v0:= v0 + v5 @kind long;
  #L300fa4.  call temp:= `deadlineNanoTime`(v11, v0) @signature `Lokio/l0;.deadlineNanoTime:(J)Lokio/l0;` @kind virtual;
  #L300faa.  return v12;
  #L300fac.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L300fae.  v13:= lcmp(v5, v3);
  #L300fb2.  if v13 != 0 then goto L300fc6;
  #L300fb6.  call temp:= `timeout`(v11) @signature `Lokio/i0;.timeout:()Lokio/l0;` @kind interface;
  #L300fbc.  v11:= temp @kind object;
  #L300fbe.  call temp:= `clearDeadline`(v11) @signature `Lokio/l0;.clearDeadline:()Lokio/l0;` @kind virtual;
  #L300fc4.  goto L300fd6;
  #L300fc6.  call temp:= `timeout`(v11) @signature `Lokio/i0;.timeout:()Lokio/l0;` @kind interface;
  #L300fcc.  v11:= temp @kind object;
  #L300fce.  v0:= v0 + v5 @kind long;
  #L300fd0.  call temp:= `deadlineNanoTime`(v11, v0) @signature `Lokio/l0;.deadlineNanoTime:(J)Lokio/l0;` @kind virtual;
  #L300fd6.  throw v12;
  #L300fd8.  
  #L300fda.  v12:= 0I;
  #L300fdc.  v13:= lcmp(v5, v3);
  #L300fe0.  if v13 != 0 then goto L300ff4;
  #L300fe4.  call temp:= `timeout`(v11) @signature `Lokio/i0;.timeout:()Lokio/l0;` @kind interface;
  #L300fea.  v11:= temp @kind object;
  #L300fec.  call temp:= `clearDeadline`(v11) @signature `Lokio/l0;.clearDeadline:()Lokio/l0;` @kind virtual;
  #L300ff2.  goto L301004;
  #L300ff4.  call temp:= `timeout`(v11) @signature `Lokio/i0;.timeout:()Lokio/l0;` @kind interface;
  #L300ffa.  v11:= temp @kind object;
  #L300ffc.  v0:= v0 + v5 @kind long;
  #L300ffe.  call temp:= `deadlineNanoTime`(v11, v0) @signature `Lokio/l0;.deadlineNanoTime:(J)Lokio/l0;` @kind virtual;
  #L301004.  return v12;
  catch `java.io.InterruptedIOException` @[L300f56..L300f7e] goto L300fd8;
  catch `java.lang.Throwable` @[L300f56..L300f7e] goto L300fac;
}
procedure `int` `skipLeadingAsciiWhitespace`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokhttp3/internal/Util;.skipLeadingAsciiWhitespace:(Ljava/lang/String;II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L301258.  if v3 >= v4 then goto L301294;
  #L30125c.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L301262.  v0:= temp;
  #L301264.  v1:= 9I;
  #L301268.  if v0 == v1 then goto L30128e;
  #L30126c.  v1:= 10I;
  #L301270.  if v0 == v1 then goto L30128e;
  #L301274.  v1:= 12I;
  #L301278.  if v0 == v1 then goto L30128e;
  #L30127c.  v1:= 13I;
  #L301280.  if v0 == v1 then goto L30128e;
  #L301284.  v1:= 32I;
  #L301288.  if v0 == v1 then goto L30128e;
  #L30128c.  return v3;
  #L30128e.  v3:= v3 + 1;
  #L301292.  goto L301258;
  #L301294.  return v4;
}
procedure `int` `skipTrailingAsciiWhitespace`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokhttp3/internal/Util;.skipTrailingAsciiWhitespace:(Ljava/lang/String;II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3012a8.  v4:= v4 + -1;
  #L3012ac.  if v4 < v3 then goto L3012ec;
  #L3012b0.  call temp:= `charAt`(v2, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3012b6.  v0:= temp;
  #L3012b8.  v1:= 9I;
  #L3012bc.  if v0 == v1 then goto L3012e6;
  #L3012c0.  v1:= 10I;
  #L3012c4.  if v0 == v1 then goto L3012e6;
  #L3012c8.  v1:= 12I;
  #L3012cc.  if v0 == v1 then goto L3012e6;
  #L3012d0.  v1:= 13I;
  #L3012d4.  if v0 == v1 then goto L3012e6;
  #L3012d8.  v1:= 32I;
  #L3012dc.  if v0 == v1 then goto L3012e6;
  #L3012e0.  v4:= v4 + 1;
  #L3012e4.  return v4;
  #L3012e6.  v4:= v4 + -1;
  #L3012ea.  goto L3012ac;
  #L3012ec.  return v3;
}
procedure `java.util.concurrent.ThreadFactory` `threadFactory`(`java.lang.String` v1 @kind object, `boolean` v2 ) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L301970.  v0:= new `okhttp3.internal.b`;
  #L301974.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/internal/b;.<init>:(Ljava/lang/String;Z)V` @kind direct;
  #L30197a.  return v0 @kind object;
}
procedure `java.util.List` `toHeaderBlock`(`okhttp3.Headers` v5 @kind object) @signature `Lokhttp3/internal/Util;.toHeaderBlock:(Lokhttp3/Headers;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3018e4.  v0:= new `java.util.ArrayList`;
  #L3018e8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3018ee.  v1:= 0I;
  #L3018f0.  call temp:= `size`(v5) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L3018f6.  v2:= temp;
  #L3018f8.  if v1 >= v2 then goto L301922;
  #L3018fc.  v2:= new `okhttp3.internal.http2.Header`;
  #L301900.  call temp:= `name`(v5, v1) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L301906.  v3:= temp @kind object;
  #L301908.  call temp:= `value`(v5, v1) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L30190e.  v4:= temp @kind object;
  #L301910.  call `<init>`(v2, v3, v4) @signature `Lokhttp3/internal/http2/Header;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L301916.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L30191c.  v1:= v1 + 1;
  #L301920.  goto L3018f0;
  #L301922.  return v0 @kind object;
}
procedure `okhttp3.Headers` `toHeaders`(`java.util.List` v4 @kind object) @signature `Lokhttp3/internal/Util;.toHeaders:(Ljava/util/List;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L301a34.  v0:= new `okhttp3.Headers$Builder`;
  #L301a38.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L301a3e.  call temp:= `iterator`(v4) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L301a44.  v4:= temp @kind object;
  #L301a46.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L301a4c.  v1:= temp;
  #L301a4e.  if v1 == 0 then goto L301a82;
  #L301a52.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L301a58.  v1:= temp @kind object;
  #L301a5a.  v1:= (`okhttp3.internal.http2.Header`) v1 @kind object;
  #L301a5e.  v2:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L301a62.  v3:= v1.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L301a66.  call temp:= `utf8`(v3) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L301a6c.  v3:= temp @kind object;
  #L301a6e.  v1:= v1.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L301a72.  call temp:= `utf8`(v1) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L301a78.  v1:= temp @kind object;
  #L301a7a.  call `addLenient`(v2, v0, v3, v1) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L301a80.  goto L301a46;
  #L301a82.  call temp:= `build`(v0) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L301a88.  v4:= temp @kind object;
  #L301a8a.  return v4 @kind object;
}
procedure `java.lang.String` `trimSubstring`(`java.lang.String` v0 @kind object, `int` v1 , `int` v2 ) @signature `Lokhttp3/internal/Util;.trimSubstring:(Ljava/lang/String;II)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3015e4.  call temp:= `skipLeadingAsciiWhitespace`(v0, v1, v2) @signature `Lokhttp3/internal/Util;.skipLeadingAsciiWhitespace:(Ljava/lang/String;II)I` @kind static;
  #L3015ea.  v1:= temp;
  #L3015ec.  call temp:= `skipTrailingAsciiWhitespace`(v0, v1, v2) @signature `Lokhttp3/internal/Util;.skipTrailingAsciiWhitespace:(Ljava/lang/String;II)I` @kind static;
  #L3015f2.  v2:= temp;
  #L3015f4.  call temp:= `substring`(v0, v1, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3015fa.  v0:= temp @kind object;
  #L3015fc.  return v0 @kind object;
}
procedure `boolean` `verifyAsIpAddress`(`java.lang.String` v1 @kind object) @signature `Lokhttp3/internal/Util;.verifyAsIpAddress:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L301028.  v0:= `@@okhttp3.internal.Util.VERIFY_AS_IP_ADDRESS` @type ^`java.util.regex.Pattern` @kind object;
  #L30102c.  call temp:= `matcher`(v0, v1) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L301032.  v1:= temp @kind object;
  #L301034.  call temp:= `matches`(v1) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L30103a.  v1:= temp;
  #L30103c.  return v1;
}
