record `okhttp3.internal.platform.Jdk9Platform` @kind class @AccessFlag FINAL extends `okhttp3.internal.platform.Platform` @kind class {
  `java.lang.reflect.Method` `okhttp3.internal.platform.Jdk9Platform.getProtocolMethod` @AccessFlag FINAL;
  `java.lang.reflect.Method` `okhttp3.internal.platform.Jdk9Platform.setProtocolMethod` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.platform.Jdk9Platform` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object) @signature `Lokhttp3/internal/platform/Jdk9Platform;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L313a6c.  call `<init>`(v0) @signature `Lokhttp3/internal/platform/Platform;.<init>:()V` @kind direct;
  #L313a72.  v0.`okhttp3.internal.platform.Jdk9Platform.setProtocolMethod` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L313a76.  v0.`okhttp3.internal.platform.Jdk9Platform.getProtocolMethod` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L313a7a.  return @kind void;
}
procedure `okhttp3.internal.platform.Jdk9Platform` `buildIfSupported`() @signature `Lokhttp3/internal/platform/Jdk9Platform;.buildIfSupported:()Lokhttp3/internal/platform/Jdk9Platform;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L313a08.  v0:= constclass @type ^`javax.net.ssl.SSLParameters` @kind object;
  #L313a0c.  v1:= "setApplicationProtocols" @kind object;
  #L313a10.  v2:= 1I;
  #L313a12.  v2:= new `java.lang.Class`[v2];
  #L313a16.  v3:= constclass @type ^`java.lang.String`[] @kind object;
  #L313a1a.  v4:= 0I;
  #L313a1c.  v2[v4]:= v3 @kind object;
  #L313a20.  call temp:= `getMethod`(v0, v1, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L313a26.  v0:= temp @kind object;
  #L313a28.  v1:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L313a2c.  v2:= "getApplicationProtocol" @kind object;
  #L313a30.  v3:= new `java.lang.Class`[v4];
  #L313a34.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L313a3a.  v1:= temp @kind object;
  #L313a3c.  v2:= new `okhttp3.internal.platform.Jdk9Platform`;
  #L313a40.  call `<init>`(v2, v0, v1) @signature `Lokhttp3/internal/platform/Jdk9Platform;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @kind direct;
  #L313a46.  return v2 @kind object;
  #L313a48.  v0:= 0I;
  #L313a4a.  return v0 @kind object;
  catch `java.lang.NoSuchMethodException` @[L313a08..L313a46] goto L313a48;
}
procedure `void` `configureTlsExtensions`(`okhttp3.internal.platform.Jdk9Platform` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object, `java.lang.String` v6 @kind object, `java.util.List` v7 @kind object) @signature `Lokhttp3/internal/platform/Jdk9Platform;.configureTlsExtensions:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L313a8c.  call temp:= `getSSLParameters`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getSSLParameters:()Ljavax/net/ssl/SSLParameters;` @kind virtual;
  #L313a92.  v6:= temp @kind object;
  #L313a94.  call temp:= `alpnProtocolNames`(v7) @signature `Lokhttp3/internal/platform/Platform;.alpnProtocolNames:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L313a9a.  v7:= temp @kind object;
  #L313a9c.  v0:= v4.`okhttp3.internal.platform.Jdk9Platform.setProtocolMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L313aa0.  v1:= 1I;
  #L313aa2.  v1:= new `java.lang.Object`[v1];
  #L313aa6.  v2:= 0I;
  #L313aa8.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L313aae.  v3:= temp;
  #L313ab0.  v3:= new `java.lang.String`[v3];
  #L313ab4.  call temp:= `toArray`(v7, v3) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L313aba.  v7:= temp @kind object;
  #L313abc.  v1[v2]:= v7 @kind object;
  #L313ac0.  call temp:= `invoke`(v0, v6, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L313ac6.  call `setSSLParameters`(v5, v6) @signature `Ljavax/net/ssl/SSLSocket;.setSSLParameters:(Ljavax/net/ssl/SSLParameters;)V` @kind virtual;
  #L313acc.  return @kind void;
  #L313ace.  v5:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L313ad0.  goto L313ad4;
  #L313ad2.  v5:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L313ad4.  v6:= new `java.lang.AssertionError`;
  #L313ad8.  v7:= "failed to set SSL parameters" @kind object;
  #L313adc.  call `<init>`(v6, v7, v5) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L313ae2.  throw v6;
  catch `java.lang.IllegalAccessException` @[L313a8c..L313acc] goto L313ad2;
  catch `java.lang.reflect.InvocationTargetException` @[L313a8c..L313acc] goto L313ace;
}
procedure `java.lang.String` `getSelectedProtocol`(`okhttp3.internal.platform.Jdk9Platform` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `Lokhttp3/internal/platform/Jdk9Platform;.getSelectedProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L313964.  v0:= "failed to get ALPN selected protocol" @kind object;
  #L313968.  v1:= 0I;
  #L31396a.  v2:= v4.`okhttp3.internal.platform.Jdk9Platform.getProtocolMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L31396e.  v3:= 0I;
  #L313970.  v3:= new `java.lang.Object`[v3];
  #L313974.  call temp:= `invoke`(v2, v5, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L31397a.  v5:= temp @kind object;
  #L31397c.  v5:= (`java.lang.String`) v5 @kind object;
  #L313980.  if v5 == 0 then goto L313998;
  #L313984.  v2:= "" @kind object;
  #L313988.  call temp:= `equals`(v5, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L31398e.  v0:= temp;
  #L313990.  if v0 == 0 then goto L313996;
  #L313994.  goto L313998;
  #L313996.  return v5 @kind object;
  #L313998.  return v1 @kind object;
  #L31399a.  v5:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L31399c.  v1:= new `java.lang.AssertionError`;
  #L3139a0.  call `<init>`(v1, v0, v5) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L3139a6.  throw v1;
  #L3139a8.  v5:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L3139aa.  call temp:= `getCause`(v5) @signature `Ljava/lang/reflect/InvocationTargetException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L3139b0.  v2:= temp @kind object;
  #L3139b2.  v2:= instanceof @variable v2 @type ^`java.lang.UnsupportedOperationException` @kind boolean;
  #L3139b6.  if v2 == 0 then goto L3139bc;
  #L3139ba.  return v1 @kind object;
  #L3139bc.  v1:= new `java.lang.AssertionError`;
  #L3139c0.  call `<init>`(v1, v0, v5) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L3139c6.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[L31396a..L313990] goto L3139a8;
  catch `java.lang.IllegalAccessException` @[L31396a..L313990] goto L31399a;
}
procedure `javax.net.ssl.X509TrustManager` `trustManager`(`okhttp3.internal.platform.Jdk9Platform` v1 @kind this, `javax.net.ssl.SSLSocketFactory` v2 @kind object) @signature `Lokhttp3/internal/platform/Jdk9Platform;.trustManager:(Ljavax/net/ssl/SSLSocketFactory;)Ljavax/net/ssl/X509TrustManager;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3139e8.  v2:= new `java.lang.UnsupportedOperationException`;
  #L3139ec.  v0:= "clientBuilder.sslSocketFactory(SSLSocketFactory) not supported on JDK 9+" @kind object;
  #L3139f0.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3139f6.  throw v2;
}
