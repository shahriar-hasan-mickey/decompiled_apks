record `okhttp3.internal.ws.WebSocketProtocol` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.String` `@@okhttp3.internal.ws.WebSocketProtocol.ACCEPT_MAGIC` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.B0_FLAG_FIN` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.B0_FLAG_RSV1` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.B0_FLAG_RSV2` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.B0_FLAG_RSV3` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.B0_MASK_OPCODE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.B1_FLAG_MASK` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.B1_MASK_LENGTH` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.CLOSE_CLIENT_GOING_AWAY` @AccessFlag STATIC_FINAL;
global `long` `@@okhttp3.internal.ws.WebSocketProtocol.CLOSE_MESSAGE_MAX` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.CLOSE_NO_STATUS_CODE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.OPCODE_BINARY` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.OPCODE_CONTINUATION` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.OPCODE_CONTROL_CLOSE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.OPCODE_CONTROL_PING` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.OPCODE_CONTROL_PONG` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.OPCODE_FLAG_CONTROL` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.OPCODE_TEXT` @AccessFlag STATIC_FINAL;
global `long` `@@okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_BYTE_MAX` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_LONG` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_SHORT` @AccessFlag STATIC_FINAL;
global `long` `@@okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_SHORT_MAX` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.ws.WebSocketProtocol` v2 @kind this) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L316950.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L316956.  v0:= new `java.lang.AssertionError`;
  #L31695a.  v1:= "No instances." @kind object;
  #L31695e.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L316964.  throw v0;
}
procedure `java.lang.String` `acceptHeader`(`java.lang.String` v1 @kind object) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.acceptHeader:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L31686c.  v0:= new `java.lang.StringBuilder`;
  #L316870.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L316876.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31687c.  v1:= "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" @kind object;
  #L316880.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L316886.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L31688c.  v1:= temp @kind object;
  #L31688e.  call temp:= `encodeUtf8`(v1) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L316894.  v1:= temp @kind object;
  #L316896.  call temp:= `sha1`(v1) @signature `Lokio/ByteString;.sha1:()Lokio/ByteString;` @kind virtual;
  #L31689c.  v1:= temp @kind object;
  #L31689e.  call temp:= `base64`(v1) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L3168a4.  v1:= temp @kind object;
  #L3168a6.  return v1 @kind object;
}
procedure `java.lang.String` `closeCodeExceptionMessage`(`int` v2 ) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.closeCodeExceptionMessage:(I)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L3168b8.  v0:= 1000I;
  #L3168bc.  if v2 < v0 then goto L31691c;
  #L3168c0.  v0:= 5000I;
  #L3168c4.  if v2 < v0 then goto L3168ca;
  #L3168c8.  goto L31691c;
  #L3168ca.  v0:= 1004I;
  #L3168ce.  if v2 < v0 then goto L3168da;
  #L3168d2.  v0:= 1006I;
  #L3168d6.  if v2 <= v0 then goto L3168ea;
  #L3168da.  v0:= 1012I;
  #L3168de.  if v2 < v0 then goto L316918;
  #L3168e2.  v0:= 2999I;
  #L3168e6.  if v2 > v0 then goto L316918;
  #L3168ea.  v0:= new `java.lang.StringBuilder`;
  #L3168ee.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3168f4.  v1:= "Code " @kind object;
  #L3168f8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3168fe.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L316904.  v2:= " is reserved and may not be used." @kind object;
  #L316908.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31690e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L316914.  v2:= temp @kind object;
  #L316916.  return v2 @kind object;
  #L316918.  v2:= 0I;
  #L31691a.  return v2 @kind object;
  #L31691c.  v0:= new `java.lang.StringBuilder`;
  #L316920.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L316926.  v1:= "Code must be in range [1000,5000): " @kind object;
  #L31692a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L316930.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L316936.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L31693c.  v2:= temp @kind object;
  #L31693e.  return v2 @kind object;
}
procedure `void` `toggleMask`(`okio.k$a` v7 @kind object, `byte`[] v8 @kind object) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.toggleMask:(Lokio/k$a;[B)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L316978.  v0:= length @variable v8;
  #L31697a.  v1:= 0I;
  #L31697c.  v2:= v7.`okio.k$a.f` @type ^`byte`[] @kind object;
  #L316980.  v3:= v7.`okio.k$a.g` @type ^`int`;
  #L316984.  v4:= v7.`okio.k$a.h` @type ^`int`;
  #L316988.  if v3 >= v4 then goto L3169a8;
  #L31698c.  v1:= v1 %% v0 @kind int;
  #L31698e.  v5:= v2[v3] @kind byte;
  #L316992.  v6:= v8[v1] @kind byte;
  #L316996.  v5:= v5 ^~ v6 @kind int;
  #L316998.  v5:= (`byte`) v5 @kind i2b;
  #L31699a.  v2[v3]:= v5 @kind byte;
  #L31699e.  v3:= v3 + 1;
  #L3169a2.  v1:= v1 + 1;
  #L3169a6.  goto L316988;
  #L3169a8.  call temp:= `a`(v7) @signature `Lokio/k$a;.a:()I` @kind virtual;
  #L3169ae.  v2:= temp;
  #L3169b0.  v3:= -1I;
  #L3169b2.  if v2 != v3 then goto L31697c;
  #L3169b6.  return @kind void;
}
procedure `void` `validateCloseCode`(`int` v1 ) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.validateCloseCode:(I)V` @AccessFlag STATIC {
    temp;
    v0;

  #L3169c8.  call temp:= `closeCodeExceptionMessage`(v1) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.closeCodeExceptionMessage:(I)Ljava/lang/String;` @kind static;
  #L3169ce.  v1:= temp @kind object;
  #L3169d0.  if v1 != 0 then goto L3169d6;
  #L3169d4.  return @kind void;
  #L3169d6.  v0:= new `java.lang.IllegalArgumentException`;
  #L3169da.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3169e0.  throw v0;
}
