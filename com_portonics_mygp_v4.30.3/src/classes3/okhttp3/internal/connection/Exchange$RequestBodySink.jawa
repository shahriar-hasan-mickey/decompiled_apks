record `okhttp3.internal.connection.Exchange$RequestBodySink` @kind class @AccessFlag FINAL extends `okio.p` @kind class {
  `long` `okhttp3.internal.connection.Exchange$RequestBodySink.bytesReceived` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.Exchange$RequestBodySink.closed` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.Exchange$RequestBodySink.completed` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.connection.Exchange$RequestBodySink.contentLength` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.Exchange` `okhttp3.internal.connection.Exchange$RequestBodySink.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.connection.Exchange$RequestBodySink` v0 @kind this, `okhttp3.internal.connection.Exchange` v1 @kind object, `okio.g0` v2 @kind object, `long` v3 ) @signature `Lokhttp3/internal/connection/Exchange$RequestBodySink;.<init>:(Lokhttp3/internal/connection/Exchange;Lokio/g0;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L305174.  v0.`okhttp3.internal.connection.Exchange$RequestBodySink.this$0` @type ^`okhttp3.internal.connection.Exchange` := v1 @kind object;
  #L305178.  call `<init>`(v0, v2) @signature `Lokio/p;.<init>:(Lokio/g0;)V` @kind direct;
  #L30517e.  v0.`okhttp3.internal.connection.Exchange$RequestBodySink.contentLength` @type ^`long` := v3 @kind wide;
  #L305182.  return @kind void;
}
procedure `java.io.IOException` `complete`(`okhttp3.internal.connection.Exchange$RequestBodySink` v7 @kind this, `java.io.IOException` v8 @kind object) @signature `Lokhttp3/internal/connection/Exchange$RequestBodySink;.complete:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L30513c.  v0:= v7.`okhttp3.internal.connection.Exchange$RequestBodySink.completed` @type ^`boolean` @kind boolean;
  #L305140.  if v0 == 0 then goto L305146;
  #L305144.  return v8 @kind object;
  #L305146.  v0:= 1I;
  #L305148.  v7.`okhttp3.internal.connection.Exchange$RequestBodySink.completed` @type ^`boolean` := v0 @kind boolean;
  #L30514c.  v1:= v7.`okhttp3.internal.connection.Exchange$RequestBodySink.this$0` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L305150.  v2:= v7.`okhttp3.internal.connection.Exchange$RequestBodySink.bytesReceived` @type ^`long` @kind wide;
  #L305154.  v4:= 0I;
  #L305156.  v5:= 1I;
  #L305158.  v6:= v8 @kind object;
  #L30515a.  call temp:= `bodyComplete`(v1, v2, v4, v5, v6) @signature `Lokhttp3/internal/connection/Exchange;.bodyComplete:(JZZLjava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L305160.  v8:= temp @kind object;
  #L305162.  return v8 @kind object;
}
procedure `void` `close`(`okhttp3.internal.connection.Exchange$RequestBodySink` v5 @kind this) @signature `Lokhttp3/internal/connection/Exchange$RequestBodySink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L305194.  v0:= v5.`okhttp3.internal.connection.Exchange$RequestBodySink.closed` @type ^`boolean` @kind boolean;
  #L305198.  if v0 == 0 then goto L30519e;
  #L30519c.  return @kind void;
  #L30519e.  v0:= 1I;
  #L3051a0.  v5.`okhttp3.internal.connection.Exchange$RequestBodySink.closed` @type ^`boolean` := v0 @kind boolean;
  #L3051a4.  v0:= v5.`okhttp3.internal.connection.Exchange$RequestBodySink.contentLength` @type ^`long` @kind wide;
  #L3051a8.  v2:= -1L;
  #L3051ac.  v4:= lcmp(v0, v2);
  #L3051b0.  if v4 == 0 then goto L3051d2;
  #L3051b4.  v2:= v5.`okhttp3.internal.connection.Exchange$RequestBodySink.bytesReceived` @type ^`long` @kind wide;
  #L3051b8.  v4:= lcmp(v2, v0);
  #L3051bc.  if v4 != 0 then goto L3051c2;
  #L3051c0.  goto L3051d2;
  #L3051c2.  v0:= new `java.net.ProtocolException`;
  #L3051c6.  v1:= "unexpected end of stream" @kind object;
  #L3051ca.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3051d0.  throw v0;
  #L3051d2.  call `close`(v5) @signature `Lokio/p;.close:()V` @kind super;
  #L3051d8.  v0:= 0I;
  #L3051da.  call temp:= `complete`(v5, v0) @signature `Lokhttp3/internal/connection/Exchange$RequestBodySink;.complete:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L3051e0.  return @kind void;
  #L3051e2.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L3051e4.  call temp:= `complete`(v5, v0) @signature `Lokhttp3/internal/connection/Exchange$RequestBodySink;.complete:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L3051ea.  v0:= temp @kind object;
  #L3051ec.  throw v0;
  catch `java.io.IOException` @[L3051d2..L3051e0] goto L3051e2;
}
procedure `void` `flush`(`okhttp3.internal.connection.Exchange$RequestBodySink` v1 @kind this) @signature `Lokhttp3/internal/connection/Exchange$RequestBodySink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L305210.  call `flush`(v1) @signature `Lokio/p;.flush:()V` @kind super;
  #L305216.  return @kind void;
  #L305218.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L30521a.  call temp:= `complete`(v1, v0) @signature `Lokhttp3/internal/connection/Exchange$RequestBodySink;.complete:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L305220.  v0:= temp @kind object;
  #L305222.  throw v0;
  catch `java.io.IOException` @[L305210..L305216] goto L305218;
}
procedure `void` `write`(`okhttp3.internal.connection.Exchange$RequestBodySink` v5 @kind this, `okio.k` v6 @kind object, `long` v7 ) @signature `Lokhttp3/internal/connection/Exchange$RequestBodySink;.write:(Lokio/k;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L305244.  v0:= v5.`okhttp3.internal.connection.Exchange$RequestBodySink.closed` @type ^`boolean` @kind boolean;
  #L305248.  if v0 != 0 then goto L3052d2;
  #L30524c.  v0:= v5.`okhttp3.internal.connection.Exchange$RequestBodySink.contentLength` @type ^`long` @kind wide;
  #L305250.  v2:= -1L;
  #L305254.  v4:= lcmp(v0, v2);
  #L305258.  if v4 == 0 then goto L3052b4;
  #L30525c.  v2:= v5.`okhttp3.internal.connection.Exchange$RequestBodySink.bytesReceived` @type ^`long` @kind wide;
  #L305260.  v2:= v2 + v7 @kind long;
  #L305262.  v4:= lcmp(v2, v0);
  #L305266.  if v4 > 0 then goto L30526c;
  #L30526a.  goto L3052b4;
  #L30526c.  v6:= new `java.net.ProtocolException`;
  #L305270.  v0:= new `java.lang.StringBuilder`;
  #L305274.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30527a.  v1:= "expected " @kind object;
  #L30527e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L305284.  v1:= v5.`okhttp3.internal.connection.Exchange$RequestBodySink.contentLength` @type ^`long` @kind wide;
  #L305288.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L30528e.  v1:= " bytes but received " @kind object;
  #L305292.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L305298.  v1:= v5.`okhttp3.internal.connection.Exchange$RequestBodySink.bytesReceived` @type ^`long` @kind wide;
  #L30529c.  v1:= v1 + v7 @kind long;
  #L30529e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3052a4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3052aa.  v7:= temp @kind object;
  #L3052ac.  call `<init>`(v6, v7) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3052b2.  throw v6;
  #L3052b4.  call `write`(v5, v6, v7) @signature `Lokio/p;.write:(Lokio/k;J)V` @kind super;
  #L3052ba.  v0:= v5.`okhttp3.internal.connection.Exchange$RequestBodySink.bytesReceived` @type ^`long` @kind wide;
  #L3052be.  v0:= v0 + v7 @kind long;
  #L3052c0.  v5.`okhttp3.internal.connection.Exchange$RequestBodySink.bytesReceived` @type ^`long` := v0 @kind wide;
  #L3052c4.  return @kind void;
  #L3052c6.  v6:= Exception @type ^`java.io.IOException` @kind object;
  #L3052c8.  call temp:= `complete`(v5, v6) @signature `Lokhttp3/internal/connection/Exchange$RequestBodySink;.complete:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L3052ce.  v6:= temp @kind object;
  #L3052d0.  throw v6;
  #L3052d2.  v6:= new `java.lang.IllegalStateException`;
  #L3052d6.  v7:= "closed" @kind object;
  #L3052da.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3052e0.  throw v6;
  catch `java.io.IOException` @[L3052b4..L3052c4] goto L3052c6;
}
