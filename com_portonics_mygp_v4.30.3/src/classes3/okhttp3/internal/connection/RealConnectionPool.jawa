record `okhttp3.internal.connection.RealConnectionPool` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Runnable` `okhttp3.internal.connection.RealConnectionPool.cleanupRunnable` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.connection.RealConnectionPool.cleanupRunning` @AccessFlag ;
  `java.util.Deque` `okhttp3.internal.connection.RealConnectionPool.connections` @AccessFlag PRIVATE_FINAL;
  `long` `okhttp3.internal.connection.RealConnectionPool.keepAliveDurationNs` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.connection.RealConnectionPool.maxIdleConnections` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.RouteDatabase` `okhttp3.internal.connection.RealConnectionPool.routeDatabase` @AccessFlag FINAL;
}
global `boolean` `@@okhttp3.internal.connection.RealConnectionPool.$assertionsDisabled` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.Executor` `@@okhttp3.internal.connection.RealConnectionPool.executor` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/connection/RealConnectionPool;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L30619c.  v8:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L3061a0.  v1:= 0I;
  #L3061a2.  v2:= 2147483647I;
  #L3061a8.  v3:= 60L;
  #L3061ac.  v5:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3061b0.  v6:= new `java.util.concurrent.SynchronousQueue`;
  #L3061b4.  call `<init>`(v6) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L3061ba.  v0:= 1I;
  #L3061bc.  v7:= "OkHttp ConnectionPool" @kind object;
  #L3061c0.  call temp:= `threadFactory`(v7, v0) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L3061c6.  v7:= temp @kind object;
  #L3061c8.  v0:= v8 @kind object;
  #L3061ca.  call `<init>`(v0, v1, v2, v3, v5, v6, v7) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L3061d0.  `@@okhttp3.internal.connection.RealConnectionPool.executor` @type ^`java.util.concurrent.Executor` := v8 @kind object;
  #L3061d4.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.connection.RealConnectionPool` v2 @kind this, `int` v3 , `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lokhttp3/internal/connection/RealConnectionPool;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3061e8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3061ee.  v0:= new `okhttp3.internal.connection.a`;
  #L3061f2.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/connection/a;.<init>:(Lokhttp3/internal/connection/RealConnectionPool;)V` @kind direct;
  #L3061f8.  v2.`okhttp3.internal.connection.RealConnectionPool.cleanupRunnable` @type ^`java.lang.Runnable` := v0 @kind object;
  #L3061fc.  v0:= new `java.util.ArrayDeque`;
  #L306200.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L306206.  v2.`okhttp3.internal.connection.RealConnectionPool.connections` @type ^`java.util.Deque` := v0 @kind object;
  #L30620a.  v0:= new `okhttp3.internal.connection.RouteDatabase`;
  #L30620e.  call `<init>`(v0) @signature `Lokhttp3/internal/connection/RouteDatabase;.<init>:()V` @kind direct;
  #L306214.  v2.`okhttp3.internal.connection.RealConnectionPool.routeDatabase` @type ^`okhttp3.internal.connection.RouteDatabase` := v0 @kind object;
  #L306218.  v2.`okhttp3.internal.connection.RealConnectionPool.maxIdleConnections` @type ^`int` := v3;
  #L30621c.  call temp:= `toNanos`(v6, v4) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L306222.  v0:= temp @kind wide;
  #L306224.  v2.`okhttp3.internal.connection.RealConnectionPool.keepAliveDurationNs` @type ^`long` := v0 @kind wide;
  #L306228.  v0:= 0L;
  #L30622c.  v3:= lcmp(v4, v0);
  #L306230.  if v3 <= 0 then goto L306236;
  #L306234.  return @kind void;
  #L306236.  v3:= new `java.lang.IllegalArgumentException`;
  #L30623a.  v6:= new `java.lang.StringBuilder`;
  #L30623e.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L306244.  v0:= "keepAliveDuration <= 0: " @kind object;
  #L306248.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30624e.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L306254.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30625a.  v4:= temp @kind object;
  #L30625c.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L306262.  throw v3;
}
procedure `void` `lambda$new$0`(`okhttp3.internal.connection.RealConnectionPool` v6 @kind this) @signature `Lokhttp3/internal/connection/RealConnectionPool;.lambda$new$0:()V` @AccessFlag PRIVATE_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3063b0.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L3063b6.  v0:= temp @kind wide;
  #L3063b8.  call temp:= `cleanup`(v6, v0) @signature `Lokhttp3/internal/connection/RealConnectionPool;.cleanup:(J)J` @kind virtual;
  #L3063be.  v0:= temp @kind wide;
  #L3063c0.  v2:= -1L;
  #L3063c4.  v4:= lcmp(v0, v2);
  #L3063c8.  if v4 != 0 then goto L3063ce;
  #L3063cc.  return @kind void;
  #L3063ce.  v2:= 0L;
  #L3063d2.  v4:= lcmp(v0, v2);
  #L3063d6.  if v4 <= 0 then goto L3063b0;
  #L3063da.  v2:= 1000000L;
  #L3063e0.  v4:= v0 / v2 @kind long;
  #L3063e4.  v2:= v2 * v4 @kind long;
  #L3063e8.  v0:= v0 - v2 @kind long;
  #L3063ea.  @monitorenter v6
  #L3063ec.  v1:= (`int`) v0 @kind l2i;
  #L3063ee.  call `wait`(v6, v4, v1) @signature `Ljava/lang/Object;.wait:(JI)V` @kind virtual;
  #L3063f4.  goto L3063fa;
  #L3063f6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3063f8.  goto L3063fe;
  #L3063fa.  @monitorexit v6
  #L3063fc.  goto L3063b0;
  #L3063fe.  @monitorexit v6
  #L306400.  goto L306404;
  #L306402.  throw v0;
  #L306404.  goto L306402;
  catch `java.lang.InterruptedException` @[L3063ee..L3063f4] goto L3063fa;
  catch `java.lang.Throwable` @[L3063ee..L3063f4] goto L3063f6;
  catch `java.lang.Throwable` @[L3063fa..L306400] goto L3063f6;
}
procedure `int` `pruneAndGetAllocationCount`(`okhttp3.internal.connection.RealConnectionPool` v6 @kind this, `okhttp3.internal.connection.RealConnection` v7 @kind object, `long` v8 ) @signature `Lokhttp3/internal/connection/RealConnectionPool;.pruneAndGetAllocationCount:(Lokhttp3/internal/connection/RealConnection;J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L305ff0.  v0:= v7.`okhttp3.internal.connection.RealConnection.transmitters` @type ^`java.util.List` @kind object;
  #L305ff4.  v1:= 0I;
  #L305ff6.  v2:= 0I;
  #L305ff8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L305ffe.  v3:= temp;
  #L306000.  if v2 >= v3 then goto L3060a0;
  #L306004.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L30600a.  v3:= temp @kind object;
  #L30600c.  v3:= (`java.lang.ref.Reference`) v3 @kind object;
  #L306010.  call temp:= `get`(v3) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L306016.  v4:= temp @kind object;
  #L306018.  if v4 == 0 then goto L306022;
  #L30601c.  v2:= v2 + 1;
  #L306020.  goto L305ff8;
  #L306022.  v3:= (`okhttp3.internal.connection.Transmitter$TransmitterReference`) v3 @kind object;
  #L306026.  v4:= new `java.lang.StringBuilder`;
  #L30602a.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L306030.  v5:= "A connection to " @kind object;
  #L306034.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30603a.  call temp:= `route`(v7) @signature `Lokhttp3/internal/connection/RealConnection;.route:()Lokhttp3/Route;` @kind virtual;
  #L306040.  v5:= temp @kind object;
  #L306042.  call temp:= `address`(v5) @signature `Lokhttp3/Route;.address:()Lokhttp3/Address;` @kind virtual;
  #L306048.  v5:= temp @kind object;
  #L30604a.  call temp:= `url`(v5) @signature `Lokhttp3/Address;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L306050.  v5:= temp @kind object;
  #L306052.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L306058.  v5:= " was leaked. Did you forget to close a response body?" @kind object;
  #L30605c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L306062.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L306068.  v4:= temp @kind object;
  #L30606a.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L306070.  v5:= temp @kind object;
  #L306072.  v3:= v3.`okhttp3.internal.connection.Transmitter$TransmitterReference.callStackTrace` @type ^`java.lang.Object` @kind object;
  #L306076.  call `logCloseableLeak`(v5, v4, v3) @signature `Lokhttp3/internal/platform/Platform;.logCloseableLeak:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L30607c.  call temp:= `remove`(v0, v2) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L306082.  v3:= 1I;
  #L306084.  v7.`okhttp3.internal.connection.RealConnection.noNewExchanges` @type ^`boolean` := v3 @kind boolean;
  #L306088.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L30608e.  v3:= temp;
  #L306090.  if v3 == 0 then goto L305ff8;
  #L306094.  v2:= v6.`okhttp3.internal.connection.RealConnectionPool.keepAliveDurationNs` @type ^`long` @kind wide;
  #L306098.  v8:= v8 - v2 @kind long;
  #L30609a.  v7.`okhttp3.internal.connection.RealConnection.idleAtNanos` @type ^`long` := v8 @kind wide;
  #L30609e.  return v1;
  #L3060a0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3060a6.  v7:= temp;
  #L3060a8.  return v7;
}
procedure `void` `a`(`okhttp3.internal.connection.RealConnectionPool` v0 @kind this) @signature `Lokhttp3/internal/connection/RealConnectionPool;.a:()V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L306398.  call `lambda$new$0`(v0) @signature `Lokhttp3/internal/connection/RealConnectionPool;.lambda$new$0:()V` @kind direct;
  #L30639e.  return @kind void;
}
procedure `long` `cleanup`(`okhttp3.internal.connection.RealConnectionPool` v11 @kind this, `long` v12 ) @signature `Lokhttp3/internal/connection/RealConnectionPool;.cleanup:(J)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3060bc.  @monitorenter v11
  #L3060be.  v0:= v11.`okhttp3.internal.connection.RealConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L3060c2.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3060c8.  v0:= temp @kind object;
  #L3060ca.  v1:= 0I;
  #L3060cc.  v2:= 0I;
  #L3060ce.  v3:= -9223372036854775808L;
  #L3060d2.  v5:= 0I;
  #L3060d4.  v6:= 0I;
  #L3060d6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3060dc.  v7:= temp;
  #L3060de.  if v7 == 0 then goto L30611a;
  #L3060e2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3060e8.  v7:= temp @kind object;
  #L3060ea.  v7:= (`okhttp3.internal.connection.RealConnection`) v7 @kind object;
  #L3060ee.  call temp:= `pruneAndGetAllocationCount`(v11, v7, v12) @signature `Lokhttp3/internal/connection/RealConnectionPool;.pruneAndGetAllocationCount:(Lokhttp3/internal/connection/RealConnection;J)I` @kind direct;
  #L3060f4.  v8:= temp;
  #L3060f6.  if v8 <= 0 then goto L306100;
  #L3060fa.  v6:= v6 + 1;
  #L3060fe.  goto L3060d6;
  #L306100.  v5:= v5 + 1;
  #L306104.  v8:= v7.`okhttp3.internal.connection.RealConnection.idleAtNanos` @type ^`long` @kind wide;
  #L306108.  v8:= v12 - v8 @kind long;
  #L30610c.  v10:= lcmp(v8, v3);
  #L306110.  if v10 <= 0 then goto L3060d6;
  #L306114.  v2:= v7 @kind object;
  #L306116.  v3:= v8 @kind wide;
  #L306118.  goto L3060d6;
  #L30611a.  v12:= v11.`okhttp3.internal.connection.RealConnectionPool.keepAliveDurationNs` @type ^`long` @kind wide;
  #L30611e.  v0:= lcmp(v3, v12);
  #L306122.  if v0 >= 0 then goto L30614e;
  #L306126.  v0:= v11.`okhttp3.internal.connection.RealConnectionPool.maxIdleConnections` @type ^`int`;
  #L30612a.  if v5 <= v0 then goto L306130;
  #L30612e.  goto L30614e;
  #L306130.  if v5 <= 0 then goto L30613a;
  #L306134.  v12:= v12 - v3 @kind long;
  #L306136.  @monitorexit v11
  #L306138.  return v12 @kind wide;
  #L30613a.  if v6 <= 0 then goto L306142;
  #L30613e.  @monitorexit v11
  #L306140.  return v12 @kind wide;
  #L306142.  v11.`okhttp3.internal.connection.RealConnectionPool.cleanupRunning` @type ^`boolean` := v1 @kind boolean;
  #L306146.  v12:= -1L;
  #L30614a.  @monitorexit v11
  #L30614c.  return v12 @kind wide;
  #L30614e.  v12:= v11.`okhttp3.internal.connection.RealConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L306152.  call temp:= `remove`(v12, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L306158.  @monitorexit v11
  #L30615a.  call temp:= `socket`(v2) @signature `Lokhttp3/internal/connection/RealConnection;.socket:()Ljava/net/Socket;` @kind virtual;
  #L306160.  v12:= temp @kind object;
  #L306162.  call `closeQuietly`(v12) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/Socket;)V` @kind static;
  #L306168.  v12:= 0L;
  #L30616c.  return v12 @kind wide;
  #L30616e.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L306170.  @monitorexit v11
  #L306172.  goto L306176;
  #L306174.  throw v12;
  #L306176.  goto L306174;
  catch `java.lang.Throwable` @[L3060be..L30615a] goto L30616e;
  catch `java.lang.Throwable` @[L306170..L306172] goto L30616e;
}
procedure `void` `connectFailed`(`okhttp3.internal.connection.RealConnectionPool` v3 @kind this, `okhttp3.Route` v4 @kind object, `java.io.IOException` v5 @kind object) @signature `Lokhttp3/internal/connection/RealConnectionPool;.connectFailed:(Lokhttp3/Route;Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L306274.  call temp:= `proxy`(v4) @signature `Lokhttp3/Route;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L30627a.  v0:= temp @kind object;
  #L30627c.  call temp:= `type`(v0) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L306282.  v0:= temp @kind object;
  #L306284.  v1:= `@@java.net.Proxy$Type.DIRECT` @type ^`java.net.Proxy$Type` @kind object;
  #L306288.  if v0 == v1 then goto L3062c2;
  #L30628c.  call temp:= `address`(v4) @signature `Lokhttp3/Route;.address:()Lokhttp3/Address;` @kind virtual;
  #L306292.  v0:= temp @kind object;
  #L306294.  call temp:= `proxySelector`(v0) @signature `Lokhttp3/Address;.proxySelector:()Ljava/net/ProxySelector;` @kind virtual;
  #L30629a.  v1:= temp @kind object;
  #L30629c.  call temp:= `url`(v0) @signature `Lokhttp3/Address;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L3062a2.  v0:= temp @kind object;
  #L3062a4.  call temp:= `uri`(v0) @signature `Lokhttp3/HttpUrl;.uri:()Ljava/net/URI;` @kind virtual;
  #L3062aa.  v0:= temp @kind object;
  #L3062ac.  call temp:= `proxy`(v4) @signature `Lokhttp3/Route;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L3062b2.  v2:= temp @kind object;
  #L3062b4.  call temp:= `address`(v2) @signature `Ljava/net/Proxy;.address:()Ljava/net/SocketAddress;` @kind virtual;
  #L3062ba.  v2:= temp @kind object;
  #L3062bc.  call `connectFailed`(v1, v0, v2, v5) @signature `Ljava/net/ProxySelector;.connectFailed:(Ljava/net/URI;Ljava/net/SocketAddress;Ljava/io/IOException;)V` @kind virtual;
  #L3062c2.  v5:= v3.`okhttp3.internal.connection.RealConnectionPool.routeDatabase` @type ^`okhttp3.internal.connection.RouteDatabase` @kind object;
  #L3062c6.  call `failed`(v5, v4) @signature `Lokhttp3/internal/connection/RouteDatabase;.failed:(Lokhttp3/Route;)V` @kind virtual;
  #L3062cc.  return @kind void;
}
procedure `boolean` `connectionBecameIdle`(`okhttp3.internal.connection.RealConnectionPool` v1 @kind this, `okhttp3.internal.connection.RealConnection` v2 @kind object) @signature `Lokhttp3/internal/connection/RealConnectionPool;.connectionBecameIdle:(Lokhttp3/internal/connection/RealConnection;)Z` @AccessFlag  {
    temp;
    v0;

  #L305eb4.  v0:= v2.`okhttp3.internal.connection.RealConnection.noNewExchanges` @type ^`boolean` @kind boolean;
  #L305eb8.  if v0 != 0 then goto L305ed0;
  #L305ebc.  v0:= v1.`okhttp3.internal.connection.RealConnectionPool.maxIdleConnections` @type ^`int`;
  #L305ec0.  if v0 != 0 then goto L305ec6;
  #L305ec4.  goto L305ed0;
  #L305ec6.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L305ecc.  v2:= 0I;
  #L305ece.  return v2;
  #L305ed0.  v0:= v1.`okhttp3.internal.connection.RealConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L305ed4.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L305eda.  v2:= 1I;
  #L305edc.  return v2;
}
procedure `int` `connectionCount`(`okhttp3.internal.connection.RealConnectionPool` v1 @kind this) @signature `Lokhttp3/internal/connection/RealConnectionPool;.connectionCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L305f54.  @monitorenter v1
  #L305f56.  v0:= v1.`okhttp3.internal.connection.RealConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L305f5a.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L305f60.  v0:= temp;
  #L305f62.  @monitorexit v1
  #L305f64.  return v0;
  #L305f66.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L305f68.  @monitorexit v1
  #L305f6a.  throw v0;
  catch `java.lang.Throwable` @[L305f56..L305f62] goto L305f66;
}
procedure `void` `evictAll`(`okhttp3.internal.connection.RealConnectionPool` v4 @kind this) @signature `Lokhttp3/internal/connection/RealConnectionPool;.evictAll:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3062e0.  v0:= new `java.util.ArrayList`;
  #L3062e4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3062ea.  @monitorenter v4
  #L3062ec.  v1:= v4.`okhttp3.internal.connection.RealConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L3062f0.  call temp:= `iterator`(v1) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3062f6.  v1:= temp @kind object;
  #L3062f8.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3062fe.  v2:= temp;
  #L306300.  if v2 == 0 then goto L306334;
  #L306304.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L30630a.  v2:= temp @kind object;
  #L30630c.  v2:= (`okhttp3.internal.connection.RealConnection`) v2 @kind object;
  #L306310.  v3:= v2.`okhttp3.internal.connection.RealConnection.transmitters` @type ^`java.util.List` @kind object;
  #L306314.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L30631a.  v3:= temp;
  #L30631c.  if v3 == 0 then goto L3062f8;
  #L306320.  v3:= 1I;
  #L306322.  v2.`okhttp3.internal.connection.RealConnection.noNewExchanges` @type ^`boolean` := v3 @kind boolean;
  #L306326.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L30632c.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L306332.  goto L3062f8;
  #L306334.  @monitorexit v4
  #L306336.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L30633c.  v0:= temp @kind object;
  #L30633e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L306344.  v1:= temp;
  #L306346.  if v1 == 0 then goto L306366;
  #L30634a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L306350.  v1:= temp @kind object;
  #L306352.  v1:= (`okhttp3.internal.connection.RealConnection`) v1 @kind object;
  #L306356.  call temp:= `socket`(v1) @signature `Lokhttp3/internal/connection/RealConnection;.socket:()Ljava/net/Socket;` @kind virtual;
  #L30635c.  v1:= temp @kind object;
  #L30635e.  call `closeQuietly`(v1) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/Socket;)V` @kind static;
  #L306364.  goto L30633e;
  #L306366.  return @kind void;
  #L306368.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L30636a.  @monitorexit v4
  #L30636c.  goto L306370;
  #L30636e.  throw v0;
  #L306370.  goto L30636e;
  catch `java.lang.Throwable` @[L3062ec..L306336] goto L306368;
  catch `java.lang.Throwable` @[L30636a..L30636c] goto L306368;
}
procedure `int` `idleConnectionCount`(`okhttp3.internal.connection.RealConnectionPool` v3 @kind this) @signature `Lokhttp3/internal/connection/RealConnectionPool;.idleConnectionCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L305f88.  @monitorenter v3
  #L305f8a.  v0:= 0I;
  #L305f8c.  v1:= v3.`okhttp3.internal.connection.RealConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L305f90.  call temp:= `iterator`(v1) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L305f96.  v1:= temp @kind object;
  #L305f98.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L305f9e.  v2:= temp;
  #L305fa0.  if v2 == 0 then goto L305fc6;
  #L305fa4.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L305faa.  v2:= temp @kind object;
  #L305fac.  v2:= (`okhttp3.internal.connection.RealConnection`) v2 @kind object;
  #L305fb0.  v2:= v2.`okhttp3.internal.connection.RealConnection.transmitters` @type ^`java.util.List` @kind object;
  #L305fb4.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L305fba.  v2:= temp;
  #L305fbc.  if v2 == 0 then goto L305f98;
  #L305fc0.  v0:= v0 + 1;
  #L305fc4.  goto L305f98;
  #L305fc6.  @monitorexit v3
  #L305fc8.  return v0;
  #L305fca.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L305fcc.  @monitorexit v3
  #L305fce.  goto L305fd2;
  #L305fd0.  throw v0;
  #L305fd2.  goto L305fd0;
  catch `java.lang.Throwable` @[L305f8c..L305fbc] goto L305fca;
}
procedure `void` `put`(`okhttp3.internal.connection.RealConnectionPool` v2 @kind this, `okhttp3.internal.connection.RealConnection` v3 @kind object) @signature `Lokhttp3/internal/connection/RealConnectionPool;.put:(Lokhttp3/internal/connection/RealConnection;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L306430.  v0:= v2.`okhttp3.internal.connection.RealConnectionPool.cleanupRunning` @type ^`boolean` @kind boolean;
  #L306434.  if v0 != 0 then goto L30644c;
  #L306438.  v0:= 1I;
  #L30643a.  v2.`okhttp3.internal.connection.RealConnectionPool.cleanupRunning` @type ^`boolean` := v0 @kind boolean;
  #L30643e.  v0:= `@@okhttp3.internal.connection.RealConnectionPool.executor` @type ^`java.util.concurrent.Executor` @kind object;
  #L306442.  v1:= v2.`okhttp3.internal.connection.RealConnectionPool.cleanupRunnable` @type ^`java.lang.Runnable` @kind object;
  #L306446.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L30644c.  v0:= v2.`okhttp3.internal.connection.RealConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L306450.  call temp:= `add`(v0, v3) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L306456.  return @kind void;
}
procedure `boolean` `transmitterAcquirePooledConnection`(`okhttp3.internal.connection.RealConnectionPool` v3 @kind this, `okhttp3.Address` v4 @kind object, `okhttp3.internal.connection.Transmitter` v5 @kind object, `java.util.List` v6 @kind object, `boolean` v7 ) @signature `Lokhttp3/internal/connection/RealConnectionPool;.transmitterAcquirePooledConnection:(Lokhttp3/Address;Lokhttp3/internal/connection/Transmitter;Ljava/util/List;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L305ef0.  v0:= v3.`okhttp3.internal.connection.RealConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L305ef4.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L305efa.  v0:= temp @kind object;
  #L305efc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L305f02.  v1:= temp;
  #L305f04.  if v1 == 0 then goto L305f3e;
  #L305f08.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L305f0e.  v1:= temp @kind object;
  #L305f10.  v1:= (`okhttp3.internal.connection.RealConnection`) v1 @kind object;
  #L305f14.  if v7 == 0 then goto L305f26;
  #L305f18.  call temp:= `isMultiplexed`(v1) @signature `Lokhttp3/internal/connection/RealConnection;.isMultiplexed:()Z` @kind virtual;
  #L305f1e.  v2:= temp;
  #L305f20.  if v2 != 0 then goto L305f26;
  #L305f24.  goto L305efc;
  #L305f26.  call temp:= `isEligible`(v1, v4, v6) @signature `Lokhttp3/internal/connection/RealConnection;.isEligible:(Lokhttp3/Address;Ljava/util/List;)Z` @kind virtual;
  #L305f2c.  v2:= temp;
  #L305f2e.  if v2 != 0 then goto L305f34;
  #L305f32.  goto L305efc;
  #L305f34.  call `acquireConnectionNoEvents`(v5, v1) @signature `Lokhttp3/internal/connection/Transmitter;.acquireConnectionNoEvents:(Lokhttp3/internal/connection/RealConnection;)V` @kind virtual;
  #L305f3a.  v4:= 1I;
  #L305f3c.  return v4;
  #L305f3e.  v4:= 0I;
  #L305f40.  return v4;
}
