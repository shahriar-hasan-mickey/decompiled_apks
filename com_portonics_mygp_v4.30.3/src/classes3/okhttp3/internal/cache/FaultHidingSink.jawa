record `okhttp3.internal.cache.FaultHidingSink` @kind class @AccessFlag  extends `okio.p` @kind class {
  `boolean` `okhttp3.internal.cache.FaultHidingSink.hasErrors` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.cache.FaultHidingSink` v0 @kind this, `okio.g0` v1 @kind object) @signature `Lokhttp3/internal/cache/FaultHidingSink;.<init>:(Lokio/g0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3045f0.  call `<init>`(v0, v1) @signature `Lokio/p;.<init>:(Lokio/g0;)V` @kind direct;
  #L3045f6.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.cache.FaultHidingSink` v2 @kind this) @signature `Lokhttp3/internal/cache/FaultHidingSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L304608.  v0:= v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L30460c.  if v0 == 0 then goto L304612;
  #L304610.  return @kind void;
  #L304612.  call `close`(v2) @signature `Lokio/p;.close:()V` @kind super;
  #L304618.  goto L304628;
  #L30461a.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L30461c.  v1:= 1I;
  #L30461e.  v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L304622.  call `onException`(v2, v0) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L304628.  return @kind void;
  catch `java.io.IOException` @[L304612..L304618] goto L30461a;
}
procedure `void` `flush`(`okhttp3.internal.cache.FaultHidingSink` v2 @kind this) @signature `Lokhttp3/internal/cache/FaultHidingSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30464c.  v0:= v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L304650.  if v0 == 0 then goto L304656;
  #L304654.  return @kind void;
  #L304656.  call `flush`(v2) @signature `Lokio/p;.flush:()V` @kind super;
  #L30465c.  goto L30466c;
  #L30465e.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L304660.  v1:= 1I;
  #L304662.  v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L304666.  call `onException`(v2, v0) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L30466c.  return @kind void;
  catch `java.io.IOException` @[L304656..L30465c] goto L30465e;
}
procedure `void` `onException`(`okhttp3.internal.cache.FaultHidingSink` v0 @kind this, `java.io.IOException` v1 @kind object) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @AccessFlag PROTECTED {
    temp;

  #L304690.  return @kind void;
}
procedure `void` `write`(`okhttp3.internal.cache.FaultHidingSink` v1 @kind this, `okio.k` v2 @kind object, `long` v3 ) @signature `Lokhttp3/internal/cache/FaultHidingSink;.write:(Lokio/k;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3046a4.  v0:= v1.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L3046a8.  if v0 == 0 then goto L3046b4;
  #L3046ac.  call `skip`(v2, v3) @signature `Lokio/k;.skip:(J)V` @kind virtual;
  #L3046b2.  return @kind void;
  #L3046b4.  call `write`(v1, v2, v3) @signature `Lokio/p;.write:(Lokio/k;J)V` @kind super;
  #L3046ba.  goto L3046ca;
  #L3046bc.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L3046be.  v3:= 1I;
  #L3046c0.  v1.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v3 @kind boolean;
  #L3046c4.  call `onException`(v1, v2) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L3046ca.  return @kind void;
  catch `java.io.IOException` @[L3046b4..L3046ba] goto L3046bc;
}
