record `okhttp3.internal.cache.CacheInterceptor$1` @kind class @AccessFlag  extends `okio.i0` @kind interface {
  `boolean` `okhttp3.internal.cache.CacheInterceptor$1.cacheRequestClosed` @AccessFlag ;
  `okhttp3.internal.cache.CacheInterceptor` `okhttp3.internal.cache.CacheInterceptor$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okio.n` `okhttp3.internal.cache.CacheInterceptor$1.val$cacheBody` @AccessFlag FINAL_SYNTHETIC;
  `okhttp3.internal.cache.CacheRequest` `okhttp3.internal.cache.CacheInterceptor$1.val$cacheRequest` @AccessFlag FINAL_SYNTHETIC;
  `okio.o` `okhttp3.internal.cache.CacheInterceptor$1.val$source` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.cache.CacheInterceptor$1` v0 @kind this, `okhttp3.internal.cache.CacheInterceptor` v1 @kind object, `okio.o` v2 @kind object, `okhttp3.internal.cache.CacheRequest` v3 @kind object, `okio.n` v4 @kind object) @signature `Lokhttp3/internal/cache/CacheInterceptor$1;.<init>:(Lokhttp3/internal/cache/CacheInterceptor;Lokio/o;Lokhttp3/internal/cache/CacheRequest;Lokio/n;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L301dfc.  v0.`okhttp3.internal.cache.CacheInterceptor$1.this$0` @type ^`okhttp3.internal.cache.CacheInterceptor` := v1 @kind object;
  #L301e00.  v0.`okhttp3.internal.cache.CacheInterceptor$1.val$source` @type ^`okio.o` := v2 @kind object;
  #L301e04.  v0.`okhttp3.internal.cache.CacheInterceptor$1.val$cacheRequest` @type ^`okhttp3.internal.cache.CacheRequest` := v3 @kind object;
  #L301e08.  v0.`okhttp3.internal.cache.CacheInterceptor$1.val$cacheBody` @type ^`okio.n` := v4 @kind object;
  #L301e0c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L301e12.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.cache.CacheInterceptor$1` v2 @kind this) @signature `Lokhttp3/internal/cache/CacheInterceptor$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L301e24.  v0:= v2.`okhttp3.internal.cache.CacheInterceptor$1.cacheRequestClosed` @type ^`boolean` @kind boolean;
  #L301e28.  if v0 != 0 then goto L301e50;
  #L301e2c.  v0:= 100I;
  #L301e30.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L301e34.  call temp:= `discard`(v2, v0, v1) @signature `Lokhttp3/internal/Util;.discard:(Lokio/i0;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L301e3a.  v0:= temp;
  #L301e3c.  if v0 != 0 then goto L301e50;
  #L301e40.  v0:= 1I;
  #L301e42.  v2.`okhttp3.internal.cache.CacheInterceptor$1.cacheRequestClosed` @type ^`boolean` := v0 @kind boolean;
  #L301e46.  v0:= v2.`okhttp3.internal.cache.CacheInterceptor$1.val$cacheRequest` @type ^`okhttp3.internal.cache.CacheRequest` @kind object;
  #L301e4a.  call `abort`(v0) @signature `Lokhttp3/internal/cache/CacheRequest;.abort:()V` @kind interface;
  #L301e50.  v0:= v2.`okhttp3.internal.cache.CacheInterceptor$1.val$source` @type ^`okio.o` @kind object;
  #L301e54.  call `close`(v0) @signature `Lokio/i0;.close:()V` @kind interface;
  #L301e5a.  return @kind void;
}
procedure `long` `read`(`okhttp3.internal.cache.CacheInterceptor$1` v8 @kind this, `okio.k` v9 @kind object, `long` v10 ) @signature `Lokhttp3/internal/cache/CacheInterceptor$1;.read:(Lokio/k;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L301d40.  v0:= 1I;
  #L301d42.  v1:= v8.`okhttp3.internal.cache.CacheInterceptor$1.val$source` @type ^`okio.o` @kind object;
  #L301d46.  call temp:= `read`(v1, v9, v10) @signature `Lokio/i0;.read:(Lokio/k;J)J` @kind interface;
  #L301d4c.  v10:= temp @kind wide;
  #L301d4e.  v1:= -1L;
  #L301d52.  v3:= lcmp(v10, v1);
  #L301d56.  if v3 != 0 then goto L301d72;
  #L301d5a.  v9:= v8.`okhttp3.internal.cache.CacheInterceptor$1.cacheRequestClosed` @type ^`boolean` @kind boolean;
  #L301d5e.  if v9 != 0 then goto L301d70;
  #L301d62.  v8.`okhttp3.internal.cache.CacheInterceptor$1.cacheRequestClosed` @type ^`boolean` := v0 @kind boolean;
  #L301d66.  v9:= v8.`okhttp3.internal.cache.CacheInterceptor$1.val$cacheBody` @type ^`okio.n` @kind object;
  #L301d6a.  call `close`(v9) @signature `Lokio/g0;.close:()V` @kind interface;
  #L301d70.  return v1 @kind wide;
  #L301d72.  v0:= v8.`okhttp3.internal.cache.CacheInterceptor$1.val$cacheBody` @type ^`okio.n` @kind object;
  #L301d76.  call temp:= `q`(v0) @signature `Lokio/n;.q:()Lokio/k;` @kind interface;
  #L301d7c.  v3:= temp @kind object;
  #L301d7e.  call temp:= `f1`(v9) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L301d84.  v0:= temp @kind wide;
  #L301d86.  v4:= v0 - v10 @kind long;
  #L301d8a.  v2:= v9 @kind object;
  #L301d8c.  v6:= v10 @kind wide;
  #L301d8e.  call temp:= `u0`(v2, v3, v4, v6) @signature `Lokio/k;.u0:(Lokio/k;JJ)Lokio/k;` @kind virtual;
  #L301d94.  v9:= v8.`okhttp3.internal.cache.CacheInterceptor$1.val$cacheBody` @type ^`okio.n` @kind object;
  #L301d98.  call temp:= `U`(v9) @signature `Lokio/n;.U:()Lokio/n;` @kind interface;
  #L301d9e.  return v10 @kind wide;
  #L301da0.  v9:= Exception @type ^`java.io.IOException` @kind object;
  #L301da2.  v10:= v8.`okhttp3.internal.cache.CacheInterceptor$1.cacheRequestClosed` @type ^`boolean` @kind boolean;
  #L301da6.  if v10 != 0 then goto L301db8;
  #L301daa.  v8.`okhttp3.internal.cache.CacheInterceptor$1.cacheRequestClosed` @type ^`boolean` := v0 @kind boolean;
  #L301dae.  v10:= v8.`okhttp3.internal.cache.CacheInterceptor$1.val$cacheRequest` @type ^`okhttp3.internal.cache.CacheRequest` @kind object;
  #L301db2.  call `abort`(v10) @signature `Lokhttp3/internal/cache/CacheRequest;.abort:()V` @kind interface;
  #L301db8.  throw v9;
  catch `java.io.IOException` @[L301d42..L301d4e] goto L301da0;
}
procedure `okio.l0` `timeout`(`okhttp3.internal.cache.CacheInterceptor$1` v1 @kind this) @signature `Lokhttp3/internal/cache/CacheInterceptor$1;.timeout:()Lokio/l0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L301ddc.  v0:= v1.`okhttp3.internal.cache.CacheInterceptor$1.val$source` @type ^`okio.o` @kind object;
  #L301de0.  call temp:= `timeout`(v0) @signature `Lokio/i0;.timeout:()Lokio/l0;` @kind interface;
  #L301de6.  v0:= temp @kind object;
  #L301de8.  return v0 @kind object;
}
