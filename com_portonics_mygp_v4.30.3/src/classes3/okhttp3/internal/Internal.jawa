record `okhttp3.internal.Internal` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `okhttp3.internal.Internal` `@@okhttp3.internal.Internal.instance` @AccessFlag PUBLIC_STATIC;
procedure `void` `<init>`(`okhttp3.internal.Internal` v0 @kind this) @signature `Lokhttp3/internal/Internal;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L300bf8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L300bfe.  return @kind void;
}
procedure `void` `initializeInstanceForTests`() @signature `Lokhttp3/internal/Internal;.initializeInstanceForTests:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L300c10.  v0:= new `okhttp3.OkHttpClient`;
  #L300c14.  call `<init>`(v0) @signature `Lokhttp3/OkHttpClient;.<init>:()V` @kind direct;
  #L300c1a.  return @kind void;
}
procedure `void` `addLenient`(`okhttp3.Headers$Builder` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `addLenient`(`okhttp3.Headers$Builder` v0 @kind object, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `apply`(`okhttp3.ConnectionSpec` v0 @kind object, `javax.net.ssl.SSLSocket` v1 @kind object, `boolean` v2 ) @signature `Lokhttp3/internal/Internal;.apply:(Lokhttp3/ConnectionSpec;Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `code`(`okhttp3.Response$Builder` v0 @kind object) @signature `Lokhttp3/internal/Internal;.code:(Lokhttp3/Response$Builder;)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `equalsNonHost`(`okhttp3.Address` v0 @kind object, `okhttp3.Address` v1 @kind object) @signature `Lokhttp3/internal/Internal;.equalsNonHost:(Lokhttp3/Address;Lokhttp3/Address;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `okhttp3.internal.connection.Exchange` `exchange`(`okhttp3.Response` v0 @kind object) @signature `Lokhttp3/internal/Internal;.exchange:(Lokhttp3/Response;)Lokhttp3/internal/connection/Exchange;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `initExchange`(`okhttp3.Response$Builder` v0 @kind object, `okhttp3.internal.connection.Exchange` v1 @kind object) @signature `Lokhttp3/internal/Internal;.initExchange:(Lokhttp3/Response$Builder;Lokhttp3/internal/connection/Exchange;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `okhttp3.Call` `newWebSocketCall`(`okhttp3.OkHttpClient` v0 @kind object, `okhttp3.Request` v1 @kind object) @signature `Lokhttp3/internal/Internal;.newWebSocketCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;)Lokhttp3/Call;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `okhttp3.internal.connection.RealConnectionPool` `realConnectionPool`(`okhttp3.ConnectionPool` v0 @kind object) @signature `Lokhttp3/internal/Internal;.realConnectionPool:(Lokhttp3/ConnectionPool;)Lokhttp3/internal/connection/RealConnectionPool;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
