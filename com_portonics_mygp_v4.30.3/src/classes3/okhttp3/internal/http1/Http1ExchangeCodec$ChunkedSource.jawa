record `okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource` @kind class @AccessFlag  extends `okhttp3.internal.http1.Http1ExchangeCodec$AbstractSource` @kind class {
  `long` `okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.bytesRemainingInChunk` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.hasMoreChunks` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1ExchangeCodec` `okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okhttp3.HttpUrl` `okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.url` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.NO_CHUNK_YET` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource` v2 @kind this, `okhttp3.internal.http1.Http1ExchangeCodec` v3 @kind object, `okhttp3.HttpUrl` v4 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$ChunkedSource;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokhttp3/HttpUrl;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L30aa1c.  v2.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` := v3 @kind object;
  #L30aa20.  v0:= 0I;
  #L30aa22.  call `<init>`(v2, v3, v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$AbstractSource;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokhttp3/internal/http1/Http1ExchangeCodec$1;)V` @kind direct;
  #L30aa28.  v0:= -1L;
  #L30aa2c.  v2.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L30aa30.  v3:= 1I;
  #L30aa32.  v2.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.hasMoreChunks` @type ^`boolean` := v3 @kind boolean;
  #L30aa36.  v2.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.url` @type ^`okhttp3.HttpUrl` := v4 @kind object;
  #L30aa3a.  return @kind void;
}
procedure `void` `readChunkSize`(`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource` v6 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$ChunkedSource;.readChunkSize:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L30aaa4.  v0:= v6.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L30aaa8.  v2:= -1L;
  #L30aaac.  v4:= lcmp(v0, v2);
  #L30aab0.  if v4 == 0 then goto L30aac6;
  #L30aab4.  v0:= v6.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L30aab8.  call temp:= `access$500`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$500:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/o;` @kind static;
  #L30aabe.  v0:= temp @kind object;
  #L30aac0.  call temp:= `n0`(v0) @signature `Lokio/o;.n0:()Ljava/lang/String;` @kind interface;
  #L30aac6.  v0:= v6.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L30aaca.  call temp:= `access$500`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$500:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/o;` @kind static;
  #L30aad0.  v0:= temp @kind object;
  #L30aad2.  call temp:= `I0`(v0) @signature `Lokio/o;.I0:()J` @kind interface;
  #L30aad8.  v0:= temp @kind wide;
  #L30aada.  v6.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L30aade.  v0:= v6.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L30aae2.  call temp:= `access$500`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$500:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/o;` @kind static;
  #L30aae8.  v0:= temp @kind object;
  #L30aaea.  call temp:= `n0`(v0) @signature `Lokio/o;.n0:()Ljava/lang/String;` @kind interface;
  #L30aaf0.  v0:= temp @kind object;
  #L30aaf2.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L30aaf8.  v0:= temp @kind object;
  #L30aafa.  v1:= v6.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L30aafe.  v3:= 0L;
  #L30ab02.  v5:= lcmp(v1, v3);
  #L30ab06.  if v5 < 0 then goto L30ab7c;
  #L30ab0a.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L30ab10.  v1:= temp;
  #L30ab12.  if v1 != 0 then goto L30ab26;
  #L30ab16.  v1:= ";" @kind object;
  #L30ab1a.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L30ab20.  v1:= temp;
  #L30ab22.  if v1 == 0 then goto L30ab7c;
  #L30ab26.  v0:= v6.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L30ab2a.  v2:= lcmp(v0, v3);
  #L30ab2e.  if v2 != 0 then goto L30ab7a;
  #L30ab32.  v0:= 0I;
  #L30ab34.  v6.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.hasMoreChunks` @type ^`boolean` := v0 @kind boolean;
  #L30ab38.  v0:= v6.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L30ab3c.  call temp:= `access$900`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$900:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/Headers;` @kind static;
  #L30ab42.  v1:= temp @kind object;
  #L30ab44.  call temp:= `access$802`(v0, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$802:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokhttp3/Headers;)Lokhttp3/Headers;` @kind static;
  #L30ab4a.  v0:= v6.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L30ab4e.  call temp:= `access$1000`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$1000:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/OkHttpClient;` @kind static;
  #L30ab54.  v0:= temp @kind object;
  #L30ab56.  call temp:= `cookieJar`(v0) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L30ab5c.  v0:= temp @kind object;
  #L30ab5e.  v1:= v6.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.url` @type ^`okhttp3.HttpUrl` @kind object;
  #L30ab62.  v2:= v6.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L30ab66.  call temp:= `access$800`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$800:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/Headers;` @kind static;
  #L30ab6c.  v2:= temp @kind object;
  #L30ab6e.  call `receiveHeaders`(v0, v1, v2) @signature `Lokhttp3/internal/http/HttpHeaders;.receiveHeaders:(Lokhttp3/CookieJar;Lokhttp3/HttpUrl;Lokhttp3/Headers;)V` @kind static;
  #L30ab74.  call `responseBodyComplete`(v6) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$AbstractSource;.responseBodyComplete:()V` @kind virtual;
  #L30ab7a.  return @kind void;
  #L30ab7c.  v1:= new `java.net.ProtocolException`;
  #L30ab80.  v2:= new `java.lang.StringBuilder`;
  #L30ab84.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30ab8a.  v3:= "expected chunk size and optional extensions but was \"" @kind object;
  #L30ab8e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30ab94.  v3:= v6.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L30ab98.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L30ab9e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30aba4.  v0:= "\"" @kind object;
  #L30aba8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30abae.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30abb4.  v0:= temp @kind object;
  #L30abb6.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30abbc.  throw v1;
  #L30abbe.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L30abc0.  v1:= new `java.net.ProtocolException`;
  #L30abc4.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L30abca.  v0:= temp @kind object;
  #L30abcc.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30abd2.  throw v1;
  catch `java.lang.NumberFormatException` @[L30aac6..L30ab22] goto L30abbe;
  catch `java.lang.NumberFormatException` @[L30ab7c..L30abbe] goto L30abbe;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$ChunkedSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30aa4c.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec$AbstractSource.closed` @type ^`boolean` @kind boolean;
  #L30aa50.  if v0 == 0 then goto L30aa56;
  #L30aa54.  return @kind void;
  #L30aa56.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L30aa5a.  if v0 == 0 then goto L30aa8a;
  #L30aa5e.  v0:= 100I;
  #L30aa62.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L30aa66.  call temp:= `discard`(v2, v0, v1) @signature `Lokhttp3/internal/Util;.discard:(Lokio/i0;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L30aa6c.  v0:= temp;
  #L30aa6e.  if v0 != 0 then goto L30aa8a;
  #L30aa72.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L30aa76.  call temp:= `access$600`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$600:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/internal/connection/RealConnection;` @kind static;
  #L30aa7c.  v0:= temp @kind object;
  #L30aa7e.  call `noNewExchanges`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.noNewExchanges:()V` @kind virtual;
  #L30aa84.  call `responseBodyComplete`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$AbstractSource;.responseBodyComplete:()V` @kind virtual;
  #L30aa8a.  v0:= 1I;
  #L30aa8c.  v2.`okhttp3.internal.http1.Http1ExchangeCodec$AbstractSource.closed` @type ^`boolean` := v0 @kind boolean;
  #L30aa90.  return @kind void;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource` v7 @kind this, `okio.k` v8 @kind object, `long` v9 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$ChunkedSource;.read:(Lokio/k;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L30a938.  v0:= 0L;
  #L30a93c.  v2:= lcmp(v9, v0);
  #L30a940.  if v2 < 0 then goto L30a9de;
  #L30a944.  v2:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$AbstractSource.closed` @type ^`boolean` @kind boolean;
  #L30a948.  if v2 != 0 then goto L30a9ce;
  #L30a94c.  v2:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L30a950.  v3:= -1L;
  #L30a954.  if v2 != 0 then goto L30a95a;
  #L30a958.  return v3 @kind wide;
  #L30a95a.  v5:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L30a95e.  v2:= lcmp(v5, v0);
  #L30a962.  if v2 == 0 then goto L30a96e;
  #L30a966.  v0:= lcmp(v5, v3);
  #L30a96a.  if v0 != 0 then goto L30a97e;
  #L30a96e.  call `readChunkSize`(v7) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$ChunkedSource;.readChunkSize:()V` @kind direct;
  #L30a974.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L30a978.  if v0 != 0 then goto L30a97e;
  #L30a97c.  return v3 @kind wide;
  #L30a97e.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L30a982.  call temp:= `min`(v9, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L30a988.  v9:= temp @kind wide;
  #L30a98a.  call temp:= `read`(v7, v8, v9) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$AbstractSource;.read:(Lokio/k;J)J` @kind super;
  #L30a990.  v8:= temp @kind wide;
  #L30a992.  v10:= lcmp(v8, v3);
  #L30a996.  if v10 == 0 then goto L30a9a6;
  #L30a99a.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L30a99e.  v0:= v0 - v8 @kind long;
  #L30a9a0.  v7.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L30a9a4.  return v8 @kind wide;
  #L30a9a6.  v8:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L30a9aa.  call temp:= `access$600`(v8) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$600:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/internal/connection/RealConnection;` @kind static;
  #L30a9b0.  v8:= temp @kind object;
  #L30a9b2.  call `noNewExchanges`(v8) @signature `Lokhttp3/internal/connection/RealConnection;.noNewExchanges:()V` @kind virtual;
  #L30a9b8.  v8:= new `java.net.ProtocolException`;
  #L30a9bc.  v9:= "unexpected end of stream" @kind object;
  #L30a9c0.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30a9c6.  call `responseBodyComplete`(v7) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$AbstractSource;.responseBodyComplete:()V` @kind virtual;
  #L30a9cc.  throw v8;
  #L30a9ce.  v8:= new `java.lang.IllegalStateException`;
  #L30a9d2.  v9:= "closed" @kind object;
  #L30a9d6.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30a9dc.  throw v8;
  #L30a9de.  v8:= new `java.lang.IllegalArgumentException`;
  #L30a9e2.  v0:= new `java.lang.StringBuilder`;
  #L30a9e6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30a9ec.  v1:= "byteCount < 0: " @kind object;
  #L30a9f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a9f6.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a9fc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30aa02.  v9:= temp @kind object;
  #L30aa04.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30aa0a.  throw v8;
}
