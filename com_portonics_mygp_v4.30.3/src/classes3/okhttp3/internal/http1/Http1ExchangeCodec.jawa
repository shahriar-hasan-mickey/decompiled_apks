record `okhttp3.internal.http1.Http1ExchangeCodec` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.http.ExchangeCodec` @kind interface {
  `okhttp3.OkHttpClient` `okhttp3.internal.http1.Http1ExchangeCodec.client` @AccessFlag PRIVATE_FINAL;
  `long` `okhttp3.internal.http1.Http1ExchangeCodec.headerLimit` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.RealConnection` `okhttp3.internal.http1.Http1ExchangeCodec.realConnection` @AccessFlag PRIVATE_FINAL;
  `okio.n` `okhttp3.internal.http1.Http1ExchangeCodec.sink` @AccessFlag PRIVATE_FINAL;
  `okio.o` `okhttp3.internal.http1.Http1ExchangeCodec.source` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http1.Http1ExchangeCodec.state` @AccessFlag PRIVATE;
  `okhttp3.Headers` `okhttp3.internal.http1.Http1ExchangeCodec.trailers` @AccessFlag PRIVATE;
}
global `int` `@@okhttp3.internal.http1.Http1ExchangeCodec.HEADER_LIMIT` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1ExchangeCodec.STATE_CLOSED` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1ExchangeCodec.STATE_IDLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1ExchangeCodec.STATE_OPEN_REQUEST_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1ExchangeCodec.STATE_OPEN_RESPONSE_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1ExchangeCodec.STATE_READING_RESPONSE_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1ExchangeCodec.STATE_READ_RESPONSE_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1ExchangeCodec.STATE_WRITING_REQUEST_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this, `okhttp3.OkHttpClient` v3 @kind object, `okhttp3.internal.connection.RealConnection` v4 @kind object, `okio.o` v5 @kind object, `okio.n` v6 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/internal/connection/RealConnection;Lokio/o;Lokio/n;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L30b5e0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30b5e6.  v0:= 0I;
  #L30b5e8.  v2.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int` := v0;
  #L30b5ec.  v0:= 262144L;
  #L30b5f2.  v2.`okhttp3.internal.http1.Http1ExchangeCodec.headerLimit` @type ^`long` := v0 @kind wide;
  #L30b5f6.  v2.`okhttp3.internal.http1.Http1ExchangeCodec.client` @type ^`okhttp3.OkHttpClient` := v3 @kind object;
  #L30b5fa.  v2.`okhttp3.internal.http1.Http1ExchangeCodec.realConnection` @type ^`okhttp3.internal.connection.RealConnection` := v4 @kind object;
  #L30b5fe.  v2.`okhttp3.internal.http1.Http1ExchangeCodec.source` @type ^`okio.o` := v5 @kind object;
  #L30b602.  v2.`okhttp3.internal.http1.Http1ExchangeCodec.sink` @type ^`okio.n` := v6 @kind object;
  #L30b606.  return @kind void;
}
procedure `okhttp3.OkHttpClient` `access$1000`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$1000:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/OkHttpClient;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L30b128.  v0:= v0.`okhttp3.internal.http1.Http1ExchangeCodec.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L30b12c.  return v0 @kind object;
}
procedure `okio.n` `access$200`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$200:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/n;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L30b2ac.  v0:= v0.`okhttp3.internal.http1.Http1ExchangeCodec.sink` @type ^`okio.n` @kind object;
  #L30b2b0.  return v0 @kind object;
}
procedure `void` `access$300`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object, `okio.r` v1 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$300:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokio/r;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L30b618.  call `detachTimeout`(v0, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.detachTimeout:(Lokio/r;)V` @kind direct;
  #L30b61e.  return @kind void;
}
procedure `int` `access$400`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$400:(Lokhttp3/internal/http1/Http1ExchangeCodec;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L30afa4.  v0:= v0.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30afa8.  return v0;
}
procedure `int` `access$402`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object, `int` v1 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$402:(Lokhttp3/internal/http1/Http1ExchangeCodec;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L30afbc.  v0.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int` := v1;
  #L30afc0.  return v1;
}
procedure `okio.o` `access$500`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$500:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/o;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L30b2c4.  v0:= v0.`okhttp3.internal.http1.Http1ExchangeCodec.source` @type ^`okio.o` @kind object;
  #L30b2c8.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.RealConnection` `access$600`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$600:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/internal/connection/RealConnection;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L30b27c.  v0:= v0.`okhttp3.internal.http1.Http1ExchangeCodec.realConnection` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L30b280.  return v0 @kind object;
}
procedure `okhttp3.Headers` `access$800`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$800:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/Headers;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L30b05c.  v0:= v0.`okhttp3.internal.http1.Http1ExchangeCodec.trailers` @type ^`okhttp3.Headers` @kind object;
  #L30b060.  return v0 @kind object;
}
procedure `okhttp3.Headers` `access$802`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object, `okhttp3.Headers` v1 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$802:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokhttp3/Headers;)Lokhttp3/Headers;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L30b074.  v0.`okhttp3.internal.http1.Http1ExchangeCodec.trailers` @type ^`okhttp3.Headers` := v1 @kind object;
  #L30b078.  return v1 @kind object;
}
procedure `okhttp3.Headers` `access$900`(`okhttp3.internal.http1.Http1ExchangeCodec` v0 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$900:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokhttp3/Headers;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L30b08c.  call temp:= `readHeaders`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.readHeaders:()Lokhttp3/Headers;` @kind direct;
  #L30b092.  v0:= temp @kind object;
  #L30b094.  return v0 @kind object;
}
procedure `void` `detachTimeout`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this, `okio.r` v3 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.detachTimeout:(Lokio/r;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L30b650.  call temp:= `a`(v3) @signature `Lokio/r;.a:()Lokio/l0;` @kind virtual;
  #L30b656.  v0:= temp @kind object;
  #L30b658.  v1:= `@@okio.l0.NONE` @type ^`okio.l0` @kind object;
  #L30b65c.  call temp:= `b`(v3, v1) @signature `Lokio/r;.b:(Lokio/l0;)Lokio/r;` @kind virtual;
  #L30b662.  call temp:= `clearDeadline`(v0) @signature `Lokio/l0;.clearDeadline:()Lokio/l0;` @kind virtual;
  #L30b668.  call temp:= `clearTimeout`(v0) @signature `Lokio/l0;.clearTimeout:()Lokio/l0;` @kind virtual;
  #L30b66e.  return @kind void;
}
procedure `okio.g0` `newChunkedSink`(`okhttp3.internal.http1.Http1ExchangeCodec` v3 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.newChunkedSink:()Lokio/g0;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L30b36c.  v0:= v3.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30b370.  v1:= 1I;
  #L30b372.  if v0 != v1 then goto L30b388;
  #L30b376.  v0:= 2I;
  #L30b378.  v3.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int` := v0;
  #L30b37c.  v0:= new `okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSink`;
  #L30b380.  call `<init>`(v0, v3) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$ChunkedSink;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @kind direct;
  #L30b386.  return v0 @kind object;
  #L30b388.  v0:= new `java.lang.IllegalStateException`;
  #L30b38c.  v1:= new `java.lang.StringBuilder`;
  #L30b390.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30b396.  v2:= "state: " @kind object;
  #L30b39a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b3a0.  v2:= v3.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30b3a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b3aa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30b3b0.  v1:= temp @kind object;
  #L30b3b2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30b3b8.  throw v0;
}
procedure `okio.i0` `newChunkedSource`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this, `okhttp3.HttpUrl` v3 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.newChunkedSource:(Lokhttp3/HttpUrl;)Lokio/i0;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L30b42c.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30b430.  v1:= 4I;
  #L30b432.  if v0 != v1 then goto L30b448;
  #L30b436.  v0:= 5I;
  #L30b438.  v2.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int` := v0;
  #L30b43c.  v0:= new `okhttp3.internal.http1.Http1ExchangeCodec$ChunkedSource`;
  #L30b440.  call `<init>`(v0, v2, v3) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$ChunkedSource;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokhttp3/HttpUrl;)V` @kind direct;
  #L30b446.  return v0 @kind object;
  #L30b448.  v3:= new `java.lang.IllegalStateException`;
  #L30b44c.  v0:= new `java.lang.StringBuilder`;
  #L30b450.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30b456.  v1:= "state: " @kind object;
  #L30b45a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b460.  v1:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30b464.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b46a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30b470.  v0:= temp @kind object;
  #L30b472.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30b478.  throw v3;
}
procedure `okio.i0` `newFixedLengthSource`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this, `long` v3 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.newFixedLengthSource:(J)Lokio/i0;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L30b48c.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30b490.  v1:= 4I;
  #L30b492.  if v0 != v1 then goto L30b4a8;
  #L30b496.  v0:= 5I;
  #L30b498.  v2.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int` := v0;
  #L30b49c.  v0:= new `okhttp3.internal.http1.Http1ExchangeCodec$FixedLengthSource`;
  #L30b4a0.  call `<init>`(v0, v2, v3) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$FixedLengthSource;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;J)V` @kind direct;
  #L30b4a6.  return v0 @kind object;
  #L30b4a8.  v3:= new `java.lang.IllegalStateException`;
  #L30b4ac.  v4:= new `java.lang.StringBuilder`;
  #L30b4b0.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30b4b6.  v0:= "state: " @kind object;
  #L30b4ba.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b4c0.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30b4c4.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b4ca.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30b4d0.  v4:= temp @kind object;
  #L30b4d2.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30b4d8.  throw v3;
}
procedure `okio.g0` `newKnownLengthSink`(`okhttp3.internal.http1.Http1ExchangeCodec` v3 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.newKnownLengthSink:()Lokio/g0;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L30b3cc.  v0:= v3.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30b3d0.  v1:= 1I;
  #L30b3d2.  if v0 != v1 then goto L30b3ea;
  #L30b3d6.  v0:= 2I;
  #L30b3d8.  v3.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int` := v0;
  #L30b3dc.  v0:= new `okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink`;
  #L30b3e0.  v1:= 0I;
  #L30b3e2.  call `<init>`(v0, v3, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$KnownLengthSink;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokhttp3/internal/http1/Http1ExchangeCodec$1;)V` @kind direct;
  #L30b3e8.  return v0 @kind object;
  #L30b3ea.  v0:= new `java.lang.IllegalStateException`;
  #L30b3ee.  v1:= new `java.lang.StringBuilder`;
  #L30b3f2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30b3f8.  v2:= "state: " @kind object;
  #L30b3fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b402.  v2:= v3.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30b406.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b40c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30b412.  v1:= temp @kind object;
  #L30b414.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30b41a.  throw v0;
}
procedure `okio.i0` `newUnknownLengthSource`(`okhttp3.internal.http1.Http1ExchangeCodec` v3 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.newUnknownLengthSource:()Lokio/i0;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L30b4ec.  v0:= v3.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30b4f0.  v1:= 4I;
  #L30b4f2.  if v0 != v1 then goto L30b514;
  #L30b4f6.  v0:= 5I;
  #L30b4f8.  v3.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int` := v0;
  #L30b4fc.  v0:= v3.`okhttp3.internal.http1.Http1ExchangeCodec.realConnection` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L30b500.  call `noNewExchanges`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.noNewExchanges:()V` @kind virtual;
  #L30b506.  v0:= new `okhttp3.internal.http1.Http1ExchangeCodec$UnknownLengthSource`;
  #L30b50a.  v1:= 0I;
  #L30b50c.  call `<init>`(v0, v3, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$UnknownLengthSource;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokhttp3/internal/http1/Http1ExchangeCodec$1;)V` @kind direct;
  #L30b512.  return v0 @kind object;
  #L30b514.  v0:= new `java.lang.IllegalStateException`;
  #L30b518.  v1:= new `java.lang.StringBuilder`;
  #L30b51c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30b522.  v2:= "state: " @kind object;
  #L30b526.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b52c.  v2:= v3.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30b530.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b536.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30b53c.  v1:= temp @kind object;
  #L30b53e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30b544.  throw v0;
}
procedure `java.lang.String` `readHeaderLine`(`okhttp3.internal.http1.Http1ExchangeCodec` v5 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.readHeaderLine:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L30afd4.  v0:= v5.`okhttp3.internal.http1.Http1ExchangeCodec.source` @type ^`okio.o` @kind object;
  #L30afd8.  v1:= v5.`okhttp3.internal.http1.Http1ExchangeCodec.headerLimit` @type ^`long` @kind wide;
  #L30afdc.  call temp:= `W`(v0, v1) @signature `Lokio/o;.W:(J)Ljava/lang/String;` @kind interface;
  #L30afe2.  v0:= temp @kind object;
  #L30afe4.  v1:= v5.`okhttp3.internal.http1.Http1ExchangeCodec.headerLimit` @type ^`long` @kind wide;
  #L30afe8.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L30afee.  v3:= temp;
  #L30aff0.  v3:= (`long`) v3 @kind i2l;
  #L30aff2.  v1:= v1 - v3 @kind long;
  #L30aff4.  v5.`okhttp3.internal.http1.Http1ExchangeCodec.headerLimit` @type ^`long` := v1 @kind wide;
  #L30aff8.  return v0 @kind object;
}
procedure `okhttp3.Headers` `readHeaders`(`okhttp3.internal.http1.Http1ExchangeCodec` v3 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.readHeaders:()Lokhttp3/Headers;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L30b0a8.  v0:= new `okhttp3.Headers$Builder`;
  #L30b0ac.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L30b0b2.  call temp:= `readHeaderLine`(v3) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.readHeaderLine:()Ljava/lang/String;` @kind direct;
  #L30b0b8.  v1:= temp @kind object;
  #L30b0ba.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L30b0c0.  v2:= temp;
  #L30b0c2.  if v2 == 0 then goto L30b0d2;
  #L30b0c6.  v2:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L30b0ca.  call `addLenient`(v2, v0, v1) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;)V` @kind virtual;
  #L30b0d0.  goto L30b0b2;
  #L30b0d2.  call temp:= `build`(v0) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L30b0d8.  v0:= temp @kind object;
  #L30b0da.  return v0 @kind object;
}
procedure `void` `cancel`(`okhttp3.internal.http1.Http1ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30b630.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec.realConnection` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L30b634.  if v0 == 0 then goto L30b63e;
  #L30b638.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.cancel:()V` @kind virtual;
  #L30b63e.  return @kind void;
}
procedure `okhttp3.internal.connection.RealConnection` `connection`(`okhttp3.internal.http1.Http1ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.connection:()Lokhttp3/internal/connection/RealConnection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30b294.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec.realConnection` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L30b298.  return v0 @kind object;
}
procedure `okio.g0` `createRequestBody`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this, `okhttp3.Request` v3 @kind object, `long` v4 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.createRequestBody:(Lokhttp3/Request;J)Lokio/g0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30b2dc.  call temp:= `body`(v3) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L30b2e2.  v0:= temp @kind object;
  #L30b2e4.  if v0 == 0 then goto L30b30e;
  #L30b2e8.  call temp:= `body`(v3) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L30b2ee.  v0:= temp @kind object;
  #L30b2f0.  call temp:= `isDuplex`(v0) @signature `Lokhttp3/RequestBody;.isDuplex:()Z` @kind virtual;
  #L30b2f6.  v0:= temp;
  #L30b2f8.  if v0 != 0 then goto L30b2fe;
  #L30b2fc.  goto L30b30e;
  #L30b2fe.  v3:= new `java.net.ProtocolException`;
  #L30b302.  v4:= "Duplex connections are not supported for HTTP/1" @kind object;
  #L30b306.  call `<init>`(v3, v4) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30b30c.  throw v3;
  #L30b30e.  v0:= "Transfer-Encoding" @kind object;
  #L30b312.  call temp:= `header`(v3, v0) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L30b318.  v3:= temp @kind object;
  #L30b31a.  v0:= "chunked" @kind object;
  #L30b31e.  call temp:= `equalsIgnoreCase`(v0, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L30b324.  v3:= temp;
  #L30b326.  if v3 == 0 then goto L30b334;
  #L30b32a.  call temp:= `newChunkedSink`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.newChunkedSink:()Lokio/g0;` @kind direct;
  #L30b330.  v3:= temp @kind object;
  #L30b332.  return v3 @kind object;
  #L30b334.  v0:= -1L;
  #L30b338.  v3:= lcmp(v4, v0);
  #L30b33c.  if v3 == 0 then goto L30b34a;
  #L30b340.  call temp:= `newKnownLengthSink`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.newKnownLengthSink:()Lokio/g0;` @kind direct;
  #L30b346.  v3:= temp @kind object;
  #L30b348.  return v3 @kind object;
  #L30b34a.  v3:= new `java.lang.IllegalStateException`;
  #L30b34e.  v4:= "Cannot stream a request body without chunked encoding or a known content length!" @kind object;
  #L30b352.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30b358.  throw v3;
}
procedure `void` `finishRequest`(`okhttp3.internal.http1.Http1ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.finishRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30b680.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec.sink` @type ^`okio.n` @kind object;
  #L30b684.  call `flush`(v0) @signature `Lokio/n;.flush:()V` @kind interface;
  #L30b68a.  return @kind void;
}
procedure `void` `flushRequest`(`okhttp3.internal.http1.Http1ExchangeCodec` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.flushRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30b69c.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec.sink` @type ^`okio.n` @kind object;
  #L30b6a0.  call `flush`(v0) @signature `Lokio/n;.flush:()V` @kind interface;
  #L30b6a6.  return @kind void;
}
procedure `boolean` `isClosed`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.isClosed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30af80.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30af84.  v1:= 6I;
  #L30af86.  if v0 != v1 then goto L30af8e;
  #L30af8a.  v0:= 1I;
  #L30af8c.  goto L30af90;
  #L30af8e.  v0:= 0I;
  #L30af90.  return v0;
}
procedure `okio.i0` `openResponseBodySource`(`okhttp3.internal.http1.Http1ExchangeCodec` v4 @kind this, `okhttp3.Response` v5 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.openResponseBodySource:(Lokhttp3/Response;)Lokio/i0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30b558.  call temp:= `hasBody`(v5) @signature `Lokhttp3/internal/http/HttpHeaders;.hasBody:(Lokhttp3/Response;)Z` @kind static;
  #L30b55e.  v0:= temp;
  #L30b560.  if v0 != 0 then goto L30b572;
  #L30b564.  v0:= 0L;
  #L30b568.  call temp:= `newFixedLengthSource`(v4, v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.newFixedLengthSource:(J)Lokio/i0;` @kind direct;
  #L30b56e.  v5:= temp @kind object;
  #L30b570.  return v5 @kind object;
  #L30b572.  v0:= "Transfer-Encoding" @kind object;
  #L30b576.  call temp:= `header`(v5, v0) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L30b57c.  v0:= temp @kind object;
  #L30b57e.  v1:= "chunked" @kind object;
  #L30b582.  call temp:= `equalsIgnoreCase`(v1, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L30b588.  v0:= temp;
  #L30b58a.  if v0 == 0 then goto L30b5a8;
  #L30b58e.  call temp:= `request`(v5) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L30b594.  v5:= temp @kind object;
  #L30b596.  call temp:= `url`(v5) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L30b59c.  v5:= temp @kind object;
  #L30b59e.  call temp:= `newChunkedSource`(v4, v5) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.newChunkedSource:(Lokhttp3/HttpUrl;)Lokio/i0;` @kind direct;
  #L30b5a4.  v5:= temp @kind object;
  #L30b5a6.  return v5 @kind object;
  #L30b5a8.  call temp:= `contentLength`(v5) @signature `Lokhttp3/internal/http/HttpHeaders;.contentLength:(Lokhttp3/Response;)J` @kind static;
  #L30b5ae.  v0:= temp @kind wide;
  #L30b5b0.  v2:= -1L;
  #L30b5b4.  v5:= lcmp(v0, v2);
  #L30b5b8.  if v5 == 0 then goto L30b5c6;
  #L30b5bc.  call temp:= `newFixedLengthSource`(v4, v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.newFixedLengthSource:(J)Lokio/i0;` @kind direct;
  #L30b5c2.  v5:= temp @kind object;
  #L30b5c4.  return v5 @kind object;
  #L30b5c6.  call temp:= `newUnknownLengthSource`(v4) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.newUnknownLengthSource:()Lokio/i0;` @kind direct;
  #L30b5cc.  v5:= temp @kind object;
  #L30b5ce.  return v5 @kind object;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`okhttp3.internal.http1.Http1ExchangeCodec` v4 @kind this, `boolean` v5 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30b140.  v0:= v4.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30b144.  v1:= 3I;
  #L30b146.  v2:= 1I;
  #L30b148.  if v0 == v2 then goto L30b184;
  #L30b14c.  if v0 != v1 then goto L30b152;
  #L30b150.  goto L30b184;
  #L30b152.  v5:= new `java.lang.IllegalStateException`;
  #L30b156.  v0:= new `java.lang.StringBuilder`;
  #L30b15a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30b160.  v1:= "state: " @kind object;
  #L30b164.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b16a.  v1:= v4.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30b16e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b174.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30b17a.  v0:= temp @kind object;
  #L30b17c.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30b182.  throw v5;
  #L30b184.  call temp:= `readHeaderLine`(v4) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.readHeaderLine:()Ljava/lang/String;` @kind direct;
  #L30b18a.  v0:= temp @kind object;
  #L30b18c.  call temp:= `parse`(v0) @signature `Lokhttp3/internal/http/StatusLine;.parse:(Ljava/lang/String;)Lokhttp3/internal/http/StatusLine;` @kind static;
  #L30b192.  v0:= temp @kind object;
  #L30b194.  v2:= new `okhttp3.Response$Builder`;
  #L30b198.  call `<init>`(v2) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L30b19e.  v3:= v0.`okhttp3.internal.http.StatusLine.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L30b1a2.  call temp:= `protocol`(v2, v3) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L30b1a8.  v2:= temp @kind object;
  #L30b1aa.  v3:= v0.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L30b1ae.  call temp:= `code`(v2, v3) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L30b1b4.  v2:= temp @kind object;
  #L30b1b6.  v3:= v0.`okhttp3.internal.http.StatusLine.message` @type ^`java.lang.String` @kind object;
  #L30b1ba.  call temp:= `message`(v2, v3) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L30b1c0.  v2:= temp @kind object;
  #L30b1c2.  call temp:= `readHeaders`(v4) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.readHeaders:()Lokhttp3/Headers;` @kind direct;
  #L30b1c8.  v3:= temp @kind object;
  #L30b1ca.  call temp:= `headers`(v2, v3) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L30b1d0.  v2:= temp @kind object;
  #L30b1d2.  v3:= 100I;
  #L30b1d6.  if v5 == 0 then goto L30b1e6;
  #L30b1da.  v5:= v0.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L30b1de.  if v5 != v3 then goto L30b1e6;
  #L30b1e2.  v5:= 0I;
  #L30b1e4.  return v5 @kind object;
  #L30b1e6.  v5:= v0.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L30b1ea.  if v5 != v3 then goto L30b1f4;
  #L30b1ee.  v4.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int` := v1;
  #L30b1f2.  return v2 @kind object;
  #L30b1f4.  v5:= 4I;
  #L30b1f6.  v4.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int` := v5;
  #L30b1fa.  return v2 @kind object;
  #L30b1fc.  v5:= Exception @type ^`java.io.EOFException` @kind object;
  #L30b1fe.  v0:= v4.`okhttp3.internal.http1.Http1ExchangeCodec.realConnection` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L30b202.  if v0 == 0 then goto L30b228;
  #L30b206.  call temp:= `route`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.route:()Lokhttp3/Route;` @kind virtual;
  #L30b20c.  v0:= temp @kind object;
  #L30b20e.  call temp:= `address`(v0) @signature `Lokhttp3/Route;.address:()Lokhttp3/Address;` @kind virtual;
  #L30b214.  v0:= temp @kind object;
  #L30b216.  call temp:= `url`(v0) @signature `Lokhttp3/Address;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L30b21c.  v0:= temp @kind object;
  #L30b21e.  call temp:= `redact`(v0) @signature `Lokhttp3/HttpUrl;.redact:()Ljava/lang/String;` @kind virtual;
  #L30b224.  v0:= temp @kind object;
  #L30b226.  goto L30b22c;
  #L30b228.  v0:= "unknown" @kind object;
  #L30b22c.  v1:= new `java.io.IOException`;
  #L30b230.  v2:= new `java.lang.StringBuilder`;
  #L30b234.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30b23a.  v3:= "unexpected end of stream on " @kind object;
  #L30b23e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b244.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b24a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30b250.  v0:= temp @kind object;
  #L30b252.  call `<init>`(v1, v0, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L30b258.  throw v1;
  catch `java.io.EOFException` @[L30b184..L30b1fa] goto L30b1fc;
}
procedure `long` `reportedContentLength`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.reportedContentLength:(Lokhttp3/Response;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30b00c.  call temp:= `hasBody`(v3) @signature `Lokhttp3/internal/http/HttpHeaders;.hasBody:(Lokhttp3/Response;)Z` @kind static;
  #L30b012.  v0:= temp;
  #L30b014.  if v0 != 0 then goto L30b01e;
  #L30b018.  v0:= 0L;
  #L30b01c.  return v0 @kind wide;
  #L30b01e.  v0:= "Transfer-Encoding" @kind object;
  #L30b022.  call temp:= `header`(v3, v0) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L30b028.  v0:= temp @kind object;
  #L30b02a.  v1:= "chunked" @kind object;
  #L30b02e.  call temp:= `equalsIgnoreCase`(v1, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L30b034.  v0:= temp;
  #L30b036.  if v0 == 0 then goto L30b040;
  #L30b03a.  v0:= -1L;
  #L30b03e.  return v0 @kind wide;
  #L30b040.  call temp:= `contentLength`(v3) @signature `Lokhttp3/internal/http/HttpHeaders;.contentLength:(Lokhttp3/Response;)J` @kind static;
  #L30b046.  v0:= temp @kind wide;
  #L30b048.  return v0 @kind wide;
}
procedure `void` `skipConnectBody`(`okhttp3.internal.http1.Http1ExchangeCodec` v4 @kind this, `okhttp3.Response` v5 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.skipConnectBody:(Lokhttp3/Response;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30b6b8.  call temp:= `contentLength`(v5) @signature `Lokhttp3/internal/http/HttpHeaders;.contentLength:(Lokhttp3/Response;)J` @kind static;
  #L30b6be.  v0:= temp @kind wide;
  #L30b6c0.  v2:= -1L;
  #L30b6c4.  v5:= lcmp(v0, v2);
  #L30b6c8.  if v5 != 0 then goto L30b6ce;
  #L30b6cc.  return @kind void;
  #L30b6ce.  call temp:= `newFixedLengthSource`(v4, v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.newFixedLengthSource:(J)Lokio/i0;` @kind direct;
  #L30b6d4.  v5:= temp @kind object;
  #L30b6d6.  v0:= 2147483647I;
  #L30b6dc.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L30b6e0.  call temp:= `skipAll`(v5, v0, v1) @signature `Lokhttp3/internal/Util;.skipAll:(Lokio/i0;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L30b6e6.  call `close`(v5) @signature `Lokio/i0;.close:()V` @kind interface;
  #L30b6ec.  return @kind void;
}
procedure `okhttp3.Headers` `trailers`(`okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.trailers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30b0ec.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30b0f0.  v1:= 6I;
  #L30b0f2.  if v0 != v1 then goto L30b106;
  #L30b0f6.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec.trailers` @type ^`okhttp3.Headers` @kind object;
  #L30b0fa.  if v0 == 0 then goto L30b100;
  #L30b0fe.  goto L30b104;
  #L30b100.  v0:= `@@okhttp3.internal.Util.EMPTY_HEADERS` @type ^`okhttp3.Headers` @kind object;
  #L30b104.  return v0 @kind object;
  #L30b106.  v0:= new `java.lang.IllegalStateException`;
  #L30b10a.  v1:= "too early; can't read the trailers yet" @kind object;
  #L30b10e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30b114.  throw v0;
}
procedure `void` `writeRequest`(`okhttp3.internal.http1.Http1ExchangeCodec` v4 @kind this, `okhttp3.Headers` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.writeRequest:(Lokhttp3/Headers;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30b700.  v0:= v4.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30b704.  if v0 != 0 then goto L30b77a;
  #L30b708.  v0:= v4.`okhttp3.internal.http1.Http1ExchangeCodec.sink` @type ^`okio.n` @kind object;
  #L30b70c.  call temp:= `b0`(v0, v6) @signature `Lokio/n;.b0:(Ljava/lang/String;)Lokio/n;` @kind interface;
  #L30b712.  v6:= temp @kind object;
  #L30b714.  v0:= "\r\n" @kind object;
  #L30b718.  call temp:= `b0`(v6, v0) @signature `Lokio/n;.b0:(Ljava/lang/String;)Lokio/n;` @kind interface;
  #L30b71e.  v6:= 0I;
  #L30b720.  call temp:= `size`(v5) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L30b726.  v1:= temp;
  #L30b728.  if v6 >= v1 then goto L30b768;
  #L30b72c.  v2:= v4.`okhttp3.internal.http1.Http1ExchangeCodec.sink` @type ^`okio.n` @kind object;
  #L30b730.  call temp:= `name`(v5, v6) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L30b736.  v3:= temp @kind object;
  #L30b738.  call temp:= `b0`(v2, v3) @signature `Lokio/n;.b0:(Ljava/lang/String;)Lokio/n;` @kind interface;
  #L30b73e.  v2:= temp @kind object;
  #L30b740.  v3:= ": " @kind object;
  #L30b744.  call temp:= `b0`(v2, v3) @signature `Lokio/n;.b0:(Ljava/lang/String;)Lokio/n;` @kind interface;
  #L30b74a.  v2:= temp @kind object;
  #L30b74c.  call temp:= `value`(v5, v6) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L30b752.  v3:= temp @kind object;
  #L30b754.  call temp:= `b0`(v2, v3) @signature `Lokio/n;.b0:(Ljava/lang/String;)Lokio/n;` @kind interface;
  #L30b75a.  v2:= temp @kind object;
  #L30b75c.  call temp:= `b0`(v2, v0) @signature `Lokio/n;.b0:(Ljava/lang/String;)Lokio/n;` @kind interface;
  #L30b762.  v6:= v6 + 1;
  #L30b766.  goto L30b728;
  #L30b768.  v5:= v4.`okhttp3.internal.http1.Http1ExchangeCodec.sink` @type ^`okio.n` @kind object;
  #L30b76c.  call temp:= `b0`(v5, v0) @signature `Lokio/n;.b0:(Ljava/lang/String;)Lokio/n;` @kind interface;
  #L30b772.  v5:= 1I;
  #L30b774.  v4.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int` := v5;
  #L30b778.  return @kind void;
  #L30b77a.  v5:= new `java.lang.IllegalStateException`;
  #L30b77e.  v6:= new `java.lang.StringBuilder`;
  #L30b782.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30b788.  v0:= "state: " @kind object;
  #L30b78c.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b792.  v0:= v4.`okhttp3.internal.http1.Http1ExchangeCodec.state` @type ^`int`;
  #L30b796.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30b79c.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30b7a2.  v6:= temp @kind object;
  #L30b7a4.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30b7aa.  goto L30b7ae;
  #L30b7ac.  throw v5;
  #L30b7ae.  goto L30b7ac;
}
procedure `void` `writeRequestHeaders`(`okhttp3.internal.http1.Http1ExchangeCodec` v1 @kind this, `okhttp3.Request` v2 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30b7c0.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec.realConnection` @type ^`okhttp3.internal.connection.RealConnection` @kind object;
  #L30b7c4.  call temp:= `route`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.route:()Lokhttp3/Route;` @kind virtual;
  #L30b7ca.  v0:= temp @kind object;
  #L30b7cc.  call temp:= `proxy`(v0) @signature `Lokhttp3/Route;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L30b7d2.  v0:= temp @kind object;
  #L30b7d4.  call temp:= `type`(v0) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L30b7da.  v0:= temp @kind object;
  #L30b7dc.  call temp:= `get`(v2, v0) @signature `Lokhttp3/internal/http/RequestLine;.get:(Lokhttp3/Request;Ljava/net/Proxy$Type;)Ljava/lang/String;` @kind static;
  #L30b7e2.  v0:= temp @kind object;
  #L30b7e4.  call temp:= `headers`(v2) @signature `Lokhttp3/Request;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L30b7ea.  v2:= temp @kind object;
  #L30b7ec.  call `writeRequest`(v1, v2, v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.writeRequest:(Lokhttp3/Headers;Ljava/lang/String;)V` @kind virtual;
  #L30b7f2.  return @kind void;
}
