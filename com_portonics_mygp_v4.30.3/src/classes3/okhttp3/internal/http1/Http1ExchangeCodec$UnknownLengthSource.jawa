record `okhttp3.internal.http1.Http1ExchangeCodec$UnknownLengthSource` @kind class @AccessFlag  extends `okhttp3.internal.http1.Http1ExchangeCodec$AbstractSource` @kind class {
  `boolean` `okhttp3.internal.http1.Http1ExchangeCodec$UnknownLengthSource.inputExhausted` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1ExchangeCodec` `okhttp3.internal.http1.Http1ExchangeCodec$UnknownLengthSource.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1ExchangeCodec$UnknownLengthSource` v1 @kind this, `okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$UnknownLengthSource;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L30af18.  v1.`okhttp3.internal.http1.Http1ExchangeCodec$UnknownLengthSource.this$0` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` := v2 @kind object;
  #L30af1c.  v0:= 0I;
  #L30af1e.  call `<init>`(v1, v2, v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$AbstractSource;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokhttp3/internal/http1/Http1ExchangeCodec$1;)V` @kind direct;
  #L30af24.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1ExchangeCodec$UnknownLengthSource` v0 @kind this, `okhttp3.internal.http1.Http1ExchangeCodec` v1 @kind object, `okhttp3.internal.http1.Http1ExchangeCodec$1` v2 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$UnknownLengthSource;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokhttp3/internal/http1/Http1ExchangeCodec$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L30af38.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$UnknownLengthSource;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @kind direct;
  #L30af3e.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1ExchangeCodec$UnknownLengthSource` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$UnknownLengthSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30af50.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec$AbstractSource.closed` @type ^`boolean` @kind boolean;
  #L30af54.  if v0 == 0 then goto L30af5a;
  #L30af58.  return @kind void;
  #L30af5a.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec$UnknownLengthSource.inputExhausted` @type ^`boolean` @kind boolean;
  #L30af5e.  if v0 != 0 then goto L30af68;
  #L30af62.  call `responseBodyComplete`(v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$AbstractSource;.responseBodyComplete:()V` @kind virtual;
  #L30af68.  v0:= 1I;
  #L30af6a.  v1.`okhttp3.internal.http1.Http1ExchangeCodec$AbstractSource.closed` @type ^`boolean` := v0 @kind boolean;
  #L30af6e.  return @kind void;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1ExchangeCodec$UnknownLengthSource` v3 @kind this, `okio.k` v4 @kind object, `long` v5 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$UnknownLengthSource;.read:(Lokio/k;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30ae88.  v0:= 0L;
  #L30ae8c.  v2:= lcmp(v5, v0);
  #L30ae90.  if v2 < 0 then goto L30aeda;
  #L30ae94.  v0:= v3.`okhttp3.internal.http1.Http1ExchangeCodec$AbstractSource.closed` @type ^`boolean` @kind boolean;
  #L30ae98.  if v0 != 0 then goto L30aeca;
  #L30ae9c.  v0:= v3.`okhttp3.internal.http1.Http1ExchangeCodec$UnknownLengthSource.inputExhausted` @type ^`boolean` @kind boolean;
  #L30aea0.  v1:= -1L;
  #L30aea4.  if v0 == 0 then goto L30aeaa;
  #L30aea8.  return v1 @kind wide;
  #L30aeaa.  call temp:= `read`(v3, v4, v5) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$AbstractSource;.read:(Lokio/k;J)J` @kind super;
  #L30aeb0.  v4:= temp @kind wide;
  #L30aeb2.  v6:= lcmp(v4, v1);
  #L30aeb6.  if v6 != 0 then goto L30aec8;
  #L30aeba.  v4:= 1I;
  #L30aebc.  v3.`okhttp3.internal.http1.Http1ExchangeCodec$UnknownLengthSource.inputExhausted` @type ^`boolean` := v4 @kind boolean;
  #L30aec0.  call `responseBodyComplete`(v3) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$AbstractSource;.responseBodyComplete:()V` @kind virtual;
  #L30aec6.  return v1 @kind wide;
  #L30aec8.  return v4 @kind wide;
  #L30aeca.  v4:= new `java.lang.IllegalStateException`;
  #L30aece.  v5:= "closed" @kind object;
  #L30aed2.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30aed8.  throw v4;
  #L30aeda.  v4:= new `java.lang.IllegalArgumentException`;
  #L30aede.  v0:= new `java.lang.StringBuilder`;
  #L30aee2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30aee8.  v1:= "byteCount < 0: " @kind object;
  #L30aeec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30aef2.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L30aef8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30aefe.  v5:= temp @kind object;
  #L30af00.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30af06.  throw v4;
}
