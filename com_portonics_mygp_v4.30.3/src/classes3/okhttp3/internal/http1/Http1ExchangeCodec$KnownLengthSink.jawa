record `okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink` @kind class @AccessFlag FINAL extends `okio.g0` @kind interface {
  `boolean` `okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink.closed` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1ExchangeCodec` `okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okio.r` `okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink.timeout` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink` v1 @kind this, `okhttp3.internal.http1.Http1ExchangeCodec` v2 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$KnownLengthSink;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L30ad78.  v1.`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` := v2 @kind object;
  #L30ad7c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30ad82.  v0:= new `okio.r`;
  #L30ad86.  call temp:= `access$200`(v2) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$200:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/n;` @kind static;
  #L30ad8c.  v2:= temp @kind object;
  #L30ad8e.  call temp:= `timeout`(v2) @signature `Lokio/g0;.timeout:()Lokio/l0;` @kind interface;
  #L30ad94.  v2:= temp @kind object;
  #L30ad96.  call `<init>`(v0, v2) @signature `Lokio/r;.<init>:(Lokio/l0;)V` @kind direct;
  #L30ad9c.  v1.`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink.timeout` @type ^`okio.r` := v0 @kind object;
  #L30ada0.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink` v0 @kind this, `okhttp3.internal.http1.Http1ExchangeCodec` v1 @kind object, `okhttp3.internal.http1.Http1ExchangeCodec$1` v2 @kind object) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$KnownLengthSink;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokhttp3/internal/http1/Http1ExchangeCodec$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L30adb4.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$KnownLengthSink;.<init>:(Lokhttp3/internal/http1/Http1ExchangeCodec;)V` @kind direct;
  #L30adba.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$KnownLengthSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30adcc.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink.closed` @type ^`boolean` @kind boolean;
  #L30add0.  if v0 == 0 then goto L30add6;
  #L30add4.  return @kind void;
  #L30add6.  v0:= 1I;
  #L30add8.  v2.`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink.closed` @type ^`boolean` := v0 @kind boolean;
  #L30addc.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L30ade0.  v1:= v2.`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink.timeout` @type ^`okio.r` @kind object;
  #L30ade4.  call `access$300`(v0, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$300:(Lokhttp3/internal/http1/Http1ExchangeCodec;Lokio/r;)V` @kind static;
  #L30adea.  v0:= v2.`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L30adee.  v1:= 3I;
  #L30adf0.  call temp:= `access$402`(v0, v1) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$402:(Lokhttp3/internal/http1/Http1ExchangeCodec;I)I` @kind static;
  #L30adf6.  return @kind void;
}
procedure `void` `flush`(`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$KnownLengthSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30ae08.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink.closed` @type ^`boolean` @kind boolean;
  #L30ae0c.  if v0 == 0 then goto L30ae12;
  #L30ae10.  return @kind void;
  #L30ae12.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L30ae16.  call temp:= `access$200`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$200:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/n;` @kind static;
  #L30ae1c.  v0:= temp @kind object;
  #L30ae1e.  call `flush`(v0) @signature `Lokio/n;.flush:()V` @kind interface;
  #L30ae24.  return @kind void;
}
procedure `okio.l0` `timeout`(`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$KnownLengthSink;.timeout:()Lokio/l0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30ad60.  v0:= v1.`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink.timeout` @type ^`okio.r` @kind object;
  #L30ad64.  return v0 @kind object;
}
procedure `void` `write`(`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink` v7 @kind this, `okio.k` v8 @kind object, `long` v9 ) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec$KnownLengthSink;.write:(Lokio/k;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L30ae38.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink.closed` @type ^`boolean` @kind boolean;
  #L30ae3c.  if v0 != 0 then goto L30ae68;
  #L30ae40.  call temp:= `f1`(v8) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L30ae46.  v1:= temp @kind wide;
  #L30ae48.  v3:= 0L;
  #L30ae4c.  v5:= v9 @kind wide;
  #L30ae4e.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokhttp3/internal/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L30ae54.  v0:= v7.`okhttp3.internal.http1.Http1ExchangeCodec$KnownLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1ExchangeCodec` @kind object;
  #L30ae58.  call temp:= `access$200`(v0) @signature `Lokhttp3/internal/http1/Http1ExchangeCodec;.access$200:(Lokhttp3/internal/http1/Http1ExchangeCodec;)Lokio/n;` @kind static;
  #L30ae5e.  v0:= temp @kind object;
  #L30ae60.  call `write`(v0, v8, v9) @signature `Lokio/g0;.write:(Lokio/k;J)V` @kind interface;
  #L30ae66.  return @kind void;
  #L30ae68.  v8:= new `java.lang.IllegalStateException`;
  #L30ae6c.  v9:= "closed" @kind object;
  #L30ae70.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30ae76.  throw v8;
}
