record `okhttp3.internal.tls.BasicTrustRootIndex` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.tls.TrustRootIndex` @kind interface {
  `java.util.Map` `okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.tls.BasicTrustRootIndex` v6 @kind this, `java.security.cert.X509Certificate`[] v7 @kind object) @signature `Lokhttp3/internal/tls/BasicTrustRootIndex;.<init>:([Ljava/security/cert/X509Certificate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L314a04.  call `<init>`(v6) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L314a0a.  v0:= new `java.util.LinkedHashMap`;
  #L314a0e.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L314a14.  v6.`okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts` @type ^`java.util.Map` := v0 @kind object;
  #L314a18.  v0:= length @variable v7;
  #L314a1a.  v1:= 0I;
  #L314a1c.  if v1 >= v0 then goto L314a62;
  #L314a20.  v2:= v7[v1] @kind object;
  #L314a24.  call temp:= `getSubjectX500Principal`(v2) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L314a2a.  v3:= temp @kind object;
  #L314a2c.  v4:= v6.`okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts` @type ^`java.util.Map` @kind object;
  #L314a30.  call temp:= `get`(v4, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L314a36.  v4:= temp @kind object;
  #L314a38.  v4:= (`java.util.Set`) v4 @kind object;
  #L314a3c.  if v4 != 0 then goto L314a56;
  #L314a40.  v4:= new `java.util.LinkedHashSet`;
  #L314a44.  v5:= 1I;
  #L314a46.  call `<init>`(v4, v5) @signature `Ljava/util/LinkedHashSet;.<init>:(I)V` @kind direct;
  #L314a4c.  v5:= v6.`okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts` @type ^`java.util.Map` @kind object;
  #L314a50.  call temp:= `put`(v5, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L314a56.  call temp:= `add`(v4, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L314a5c.  v1:= v1 + 1;
  #L314a60.  goto L314a1c;
  #L314a62.  return @kind void;
}
procedure `boolean` `equals`(`okhttp3.internal.tls.BasicTrustRootIndex` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lokhttp3/internal/tls/BasicTrustRootIndex;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L31492c.  v0:= 1I;
  #L31492e.  if v3 != v2 then goto L314934;
  #L314932.  return v0;
  #L314934.  v1:= instanceof @variable v3 @type ^`okhttp3.internal.tls.BasicTrustRootIndex` @kind boolean;
  #L314938.  if v1 == 0 then goto L314956;
  #L31493c.  v3:= (`okhttp3.internal.tls.BasicTrustRootIndex`) v3 @kind object;
  #L314940.  v3:= v3.`okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts` @type ^`java.util.Map` @kind object;
  #L314944.  v1:= v2.`okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts` @type ^`java.util.Map` @kind object;
  #L314948.  call temp:= `equals`(v3, v1) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L31494e.  v3:= temp;
  #L314950.  if v3 == 0 then goto L314956;
  #L314954.  goto L314958;
  #L314956.  v0:= 0I;
  #L314958.  return v0;
}
procedure `java.security.cert.X509Certificate` `findByIssuerAndSignature`(`okhttp3.internal.tls.BasicTrustRootIndex` v4 @kind this, `java.security.cert.X509Certificate` v5 @kind object) @signature `Lokhttp3/internal/tls/BasicTrustRootIndex;.findByIssuerAndSignature:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L31498c.  call temp:= `getIssuerX500Principal`(v5) @signature `Ljava/security/cert/X509Certificate;.getIssuerX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L314992.  v0:= temp @kind object;
  #L314994.  v1:= v4.`okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts` @type ^`java.util.Map` @kind object;
  #L314998.  call temp:= `get`(v1, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L31499e.  v0:= temp @kind object;
  #L3149a0.  v0:= (`java.util.Set`) v0 @kind object;
  #L3149a4.  v1:= 0I;
  #L3149a6.  if v0 != 0 then goto L3149ac;
  #L3149aa.  return v1 @kind object;
  #L3149ac.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3149b2.  v0:= temp @kind object;
  #L3149b4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3149ba.  v2:= temp;
  #L3149bc.  if v2 == 0 then goto L3149e0;
  #L3149c0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3149c6.  v2:= temp @kind object;
  #L3149c8.  v2:= (`java.security.cert.X509Certificate`) v2 @kind object;
  #L3149cc.  call temp:= `getPublicKey`(v2) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L3149d2.  v3:= temp @kind object;
  #L3149d4.  call `verify`(v5, v3) @signature `Ljava/security/cert/X509Certificate;.verify:(Ljava/security/PublicKey;)V` @kind virtual;
  #L3149da.  return v2 @kind object;
  #L3149dc.  
  #L3149de.  goto L3149b4;
  #L3149e0.  return v1 @kind object;
  catch `java.lang.Exception` @[L3149d4..L3149da] goto L3149dc;
}
procedure `int` `hashCode`(`okhttp3.internal.tls.BasicTrustRootIndex` v1 @kind this) @signature `Lokhttp3/internal/tls/BasicTrustRootIndex;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31496c.  v0:= v1.`okhttp3.internal.tls.BasicTrustRootIndex.subjectToCaCerts` @type ^`java.util.Map` @kind object;
  #L314970.  call temp:= `hashCode`(v0) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L314976.  v0:= temp;
  #L314978.  return v0;
}
