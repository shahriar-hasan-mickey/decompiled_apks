record `okhttp3.Protocol` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `java.lang.String` `okhttp3.Protocol.protocol` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.Protocol`[] `@@okhttp3.Protocol.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `okhttp3.Protocol` `@@okhttp3.Protocol.H2_PRIOR_KNOWLEDGE` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_1_0` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_1_1` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_2` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.QUIC` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.SPDY_3` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lokhttp3/Protocol;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L2fe6ec.  v0:= new `okhttp3.Protocol`;
  #L2fe6f0.  v1:= "HTTP_1_0" @kind object;
  #L2fe6f4.  v2:= 0I;
  #L2fe6f6.  v3:= "http/1.0" @kind object;
  #L2fe6fa.  call `<init>`(v0, v1, v2, v3) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L2fe700.  `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L2fe704.  v1:= new `okhttp3.Protocol`;
  #L2fe708.  v3:= "HTTP_1_1" @kind object;
  #L2fe70c.  v4:= 1I;
  #L2fe70e.  v5:= "http/1.1" @kind object;
  #L2fe712.  call `<init>`(v1, v3, v4, v5) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L2fe718.  `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` := v1 @kind object;
  #L2fe71c.  v3:= new `okhttp3.Protocol`;
  #L2fe720.  v5:= "SPDY_3" @kind object;
  #L2fe724.  v6:= 2I;
  #L2fe726.  v7:= "spdy/3.1" @kind object;
  #L2fe72a.  call `<init>`(v3, v5, v6, v7) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L2fe730.  `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` := v3 @kind object;
  #L2fe734.  v5:= new `okhttp3.Protocol`;
  #L2fe738.  v7:= "HTTP_2" @kind object;
  #L2fe73c.  v8:= 3I;
  #L2fe73e.  v9:= "h2" @kind object;
  #L2fe742.  call `<init>`(v5, v7, v8, v9) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L2fe748.  `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` := v5 @kind object;
  #L2fe74c.  v7:= new `okhttp3.Protocol`;
  #L2fe750.  v9:= "H2_PRIOR_KNOWLEDGE" @kind object;
  #L2fe754.  v10:= 4I;
  #L2fe756.  v11:= "h2_prior_knowledge" @kind object;
  #L2fe75a.  call `<init>`(v7, v9, v10, v11) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L2fe760.  `@@okhttp3.Protocol.H2_PRIOR_KNOWLEDGE` @type ^`okhttp3.Protocol` := v7 @kind object;
  #L2fe764.  v9:= new `okhttp3.Protocol`;
  #L2fe768.  v11:= "QUIC" @kind object;
  #L2fe76c.  v12:= 5I;
  #L2fe76e.  v13:= "quic" @kind object;
  #L2fe772.  call `<init>`(v9, v11, v12, v13) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L2fe778.  `@@okhttp3.Protocol.QUIC` @type ^`okhttp3.Protocol` := v9 @kind object;
  #L2fe77c.  v11:= 6I;
  #L2fe77e.  v11:= new `okhttp3.Protocol`[v11];
  #L2fe782.  v11[v2]:= v0 @kind object;
  #L2fe786.  v11[v4]:= v1 @kind object;
  #L2fe78a.  v11[v6]:= v3 @kind object;
  #L2fe78e.  v11[v8]:= v5 @kind object;
  #L2fe792.  v11[v10]:= v7 @kind object;
  #L2fe796.  v11[v12]:= v9 @kind object;
  #L2fe79a.  `@@okhttp3.Protocol.$VALUES` @type ^`okhttp3.Protocol`[] := v11 @kind object;
  #L2fe79e.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Protocol` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2fe7b0.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2fe7b6.  v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` := v3 @kind object;
  #L2fe7ba.  return @kind void;
}
procedure `okhttp3.Protocol` `get`(`java.lang.String` v3 @kind object) @signature `Lokhttp3/Protocol;.get:(Ljava/lang/String;)Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2fe5e0.  v0:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L2fe5e4.  v1:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L2fe5e8.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fe5ee.  v1:= temp;
  #L2fe5f0.  if v1 == 0 then goto L2fe5f6;
  #L2fe5f4.  return v0 @kind object;
  #L2fe5f6.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L2fe5fa.  v1:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L2fe5fe.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fe604.  v1:= temp;
  #L2fe606.  if v1 == 0 then goto L2fe60c;
  #L2fe60a.  return v0 @kind object;
  #L2fe60c.  v0:= `@@okhttp3.Protocol.H2_PRIOR_KNOWLEDGE` @type ^`okhttp3.Protocol` @kind object;
  #L2fe610.  v1:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L2fe614.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fe61a.  v1:= temp;
  #L2fe61c.  if v1 == 0 then goto L2fe622;
  #L2fe620.  return v0 @kind object;
  #L2fe622.  v0:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L2fe626.  v1:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L2fe62a.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fe630.  v1:= temp;
  #L2fe632.  if v1 == 0 then goto L2fe638;
  #L2fe636.  return v0 @kind object;
  #L2fe638.  v0:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L2fe63c.  v1:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L2fe640.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fe646.  v1:= temp;
  #L2fe648.  if v1 == 0 then goto L2fe64e;
  #L2fe64c.  return v0 @kind object;
  #L2fe64e.  v0:= `@@okhttp3.Protocol.QUIC` @type ^`okhttp3.Protocol` @kind object;
  #L2fe652.  v1:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L2fe656.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fe65c.  v1:= temp;
  #L2fe65e.  if v1 == 0 then goto L2fe664;
  #L2fe662.  return v0 @kind object;
  #L2fe664.  v0:= new `java.io.IOException`;
  #L2fe668.  v1:= new `java.lang.StringBuilder`;
  #L2fe66c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fe672.  v2:= "Unexpected protocol: " @kind object;
  #L2fe676.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe67c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe682.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fe688.  v3:= temp @kind object;
  #L2fe68a.  call `<init>`(v0, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fe690.  throw v0;
}
procedure `okhttp3.Protocol` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lokhttp3/Protocol;.valueOf:(Ljava/lang/String;)Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2fe6a4.  v0:= constclass @type ^`okhttp3.Protocol` @kind object;
  #L2fe6a8.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L2fe6ae.  v1:= temp @kind object;
  #L2fe6b0.  v1:= (`okhttp3.Protocol`) v1 @kind object;
  #L2fe6b4.  return v1 @kind object;
}
procedure `okhttp3.Protocol`[] `values`() @signature `Lokhttp3/Protocol;.values:()[Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2fe6c8.  v0:= `@@okhttp3.Protocol.$VALUES` @type ^`okhttp3.Protocol`[] @kind object;
  #L2fe6cc.  call temp:= `clone`(v0) @signature `[Lokhttp3/Protocol;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2fe6d2.  v0:= temp @kind object;
  #L2fe6d4.  v0:= (`okhttp3.Protocol`[]) v0 @kind object;
  #L2fe6d8.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.Protocol` v1 @kind this) @signature `Lokhttp3/Protocol;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fe5c8.  v0:= v1.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L2fe5cc.  return v0 @kind object;
}
