record `okhttp3.Handshake` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.CipherSuite` `okhttp3.Handshake.cipherSuite` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.Handshake.localCertificates` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.Handshake.peerCertificates` @AccessFlag PRIVATE_FINAL;
  `okhttp3.TlsVersion` `okhttp3.Handshake.tlsVersion` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Handshake` v0 @kind this, `okhttp3.TlsVersion` v1 @kind object, `okhttp3.CipherSuite` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2fa3e0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2fa3e6.  v0.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` := v1 @kind object;
  #L2fa3ea.  v0.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` := v2 @kind object;
  #L2fa3ee.  v0.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` := v3 @kind object;
  #L2fa3f2.  v0.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` := v4 @kind object;
  #L2fa3f6.  return @kind void;
}
procedure `okhttp3.Handshake` `get`(`javax.net.ssl.SSLSession` v4 @kind object) @signature `Lokhttp3/Handshake;.get:(Ljavax/net/ssl/SSLSession;)Lokhttp3/Handshake;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fa294.  call temp:= `getCipherSuite`(v4) @signature `Ljavax/net/ssl/SSLSession;.getCipherSuite:()Ljava/lang/String;` @kind interface;
  #L2fa29a.  v0:= temp @kind object;
  #L2fa29c.  if v0 == 0 then goto L2fa358;
  #L2fa2a0.  v1:= "SSL_NULL_WITH_NULL_NULL" @kind object;
  #L2fa2a4.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fa2aa.  v1:= temp;
  #L2fa2ac.  if v1 != 0 then goto L2fa348;
  #L2fa2b0.  call temp:= `forJavaName`(v0) @signature `Lokhttp3/CipherSuite;.forJavaName:(Ljava/lang/String;)Lokhttp3/CipherSuite;` @kind static;
  #L2fa2b6.  v0:= temp @kind object;
  #L2fa2b8.  call temp:= `getProtocol`(v4) @signature `Ljavax/net/ssl/SSLSession;.getProtocol:()Ljava/lang/String;` @kind interface;
  #L2fa2be.  v1:= temp @kind object;
  #L2fa2c0.  if v1 == 0 then goto L2fa338;
  #L2fa2c4.  v2:= "NONE" @kind object;
  #L2fa2c8.  call temp:= `equals`(v2, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fa2ce.  v2:= temp;
  #L2fa2d0.  if v2 != 0 then goto L2fa328;
  #L2fa2d4.  call temp:= `forJavaName`(v1) @signature `Lokhttp3/TlsVersion;.forJavaName:(Ljava/lang/String;)Lokhttp3/TlsVersion;` @kind static;
  #L2fa2da.  v1:= temp @kind object;
  #L2fa2dc.  call temp:= `getPeerCertificates`(v4) @signature `Ljavax/net/ssl/SSLSession;.getPeerCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L2fa2e2.  v2:= temp @kind object;
  #L2fa2e4.  goto L2fa2e8;
  #L2fa2e6.  v2:= 0I;
  #L2fa2e8.  if v2 == 0 then goto L2fa2f6;
  #L2fa2ec.  call temp:= `immutableList`(v2) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2fa2f2.  v2:= temp @kind object;
  #L2fa2f4.  goto L2fa2fe;
  #L2fa2f6.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L2fa2fc.  v2:= temp @kind object;
  #L2fa2fe.  call temp:= `getLocalCertificates`(v4) @signature `Ljavax/net/ssl/SSLSession;.getLocalCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L2fa304.  v4:= temp @kind object;
  #L2fa306.  if v4 == 0 then goto L2fa314;
  #L2fa30a.  call temp:= `immutableList`(v4) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2fa310.  v4:= temp @kind object;
  #L2fa312.  goto L2fa31c;
  #L2fa314.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L2fa31a.  v4:= temp @kind object;
  #L2fa31c.  v3:= new `okhttp3.Handshake`;
  #L2fa320.  call `<init>`(v3, v1, v0, v2, v4) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L2fa326.  return v3 @kind object;
  #L2fa328.  v4:= new `java.io.IOException`;
  #L2fa32c.  v0:= "tlsVersion == NONE" @kind object;
  #L2fa330.  call `<init>`(v4, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fa336.  throw v4;
  #L2fa338.  v4:= new `java.lang.IllegalStateException`;
  #L2fa33c.  v0:= "tlsVersion == null" @kind object;
  #L2fa340.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fa346.  throw v4;
  #L2fa348.  v4:= new `java.io.IOException`;
  #L2fa34c.  v0:= "cipherSuite == SSL_NULL_WITH_NULL_NULL" @kind object;
  #L2fa350.  call `<init>`(v4, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fa356.  throw v4;
  #L2fa358.  v4:= new `java.lang.IllegalStateException`;
  #L2fa35c.  v0:= "cipherSuite == null" @kind object;
  #L2fa360.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fa366.  throw v4;
  catch `javax.net.ssl.SSLPeerUnverifiedException` @[L2fa2dc..L2fa2e4] goto L2fa2e6;
}
procedure `okhttp3.Handshake` `get`(`okhttp3.TlsVersion` v1 @kind object, `okhttp3.CipherSuite` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lokhttp3/Handshake;.get:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)Lokhttp3/Handshake;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2fa388.  v0:= "tlsVersion == null" @kind object;
  #L2fa38c.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fa392.  v0:= "cipherSuite == null" @kind object;
  #L2fa396.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2fa39c.  v0:= new `okhttp3.Handshake`;
  #L2fa3a0.  call temp:= `immutableList`(v3) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L2fa3a6.  v3:= temp @kind object;
  #L2fa3a8.  call temp:= `immutableList`(v4) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L2fa3ae.  v4:= temp @kind object;
  #L2fa3b0.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L2fa3b6.  return v0 @kind object;
}
procedure `java.util.List` `names`(`okhttp3.Handshake` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lokhttp3/Handshake;.names:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2fa1f4.  v0:= new `java.util.ArrayList`;
  #L2fa1f8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2fa1fe.  call temp:= `iterator`(v4) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2fa204.  v4:= temp @kind object;
  #L2fa206.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2fa20c.  v1:= temp;
  #L2fa20e.  if v1 == 0 then goto L2fa252;
  #L2fa212.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2fa218.  v1:= temp @kind object;
  #L2fa21a.  v1:= (`java.security.cert.Certificate`) v1 @kind object;
  #L2fa21e.  v2:= instanceof @variable v1 @type ^`java.security.cert.X509Certificate` @kind boolean;
  #L2fa222.  if v2 == 0 then goto L2fa242;
  #L2fa226.  v1:= (`java.security.cert.X509Certificate`) v1 @kind object;
  #L2fa22a.  call temp:= `getSubjectDN`(v1) @signature `Ljava/security/cert/X509Certificate;.getSubjectDN:()Ljava/security/Principal;` @kind virtual;
  #L2fa230.  v1:= temp @kind object;
  #L2fa232.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2fa238.  v1:= temp @kind object;
  #L2fa23a.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fa240.  goto L2fa206;
  #L2fa242.  call temp:= `getType`(v1) @signature `Ljava/security/cert/Certificate;.getType:()Ljava/lang/String;` @kind virtual;
  #L2fa248.  v1:= temp @kind object;
  #L2fa24a.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fa250.  goto L2fa206;
  #L2fa252.  return v0 @kind object;
}
procedure `okhttp3.CipherSuite` `cipherSuite`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.cipherSuite:()Lokhttp3/CipherSuite;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fa27c.  v0:= v1.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L2fa280.  return v0 @kind object;
}
procedure `boolean` `equals`(`okhttp3.Handshake` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lokhttp3/Handshake;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2f9ffc.  v0:= instanceof @variable v4 @type ^`okhttp3.Handshake` @kind boolean;
  #L2fa000.  v1:= 0I;
  #L2fa002.  if v0 != 0 then goto L2fa008;
  #L2fa006.  return v1;
  #L2fa008.  v4:= (`okhttp3.Handshake`) v4 @kind object;
  #L2fa00c.  v0:= v3.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L2fa010.  v2:= v4.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L2fa014.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Enum;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fa01a.  v0:= temp;
  #L2fa01c.  if v0 == 0 then goto L2fa05e;
  #L2fa020.  v0:= v3.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L2fa024.  v2:= v4.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L2fa028.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fa02e.  v0:= temp;
  #L2fa030.  if v0 == 0 then goto L2fa05e;
  #L2fa034.  v0:= v3.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L2fa038.  v2:= v4.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L2fa03c.  call temp:= `equals`(v0, v2) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L2fa042.  v0:= temp;
  #L2fa044.  if v0 == 0 then goto L2fa05e;
  #L2fa048.  v0:= v3.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L2fa04c.  v4:= v4.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L2fa050.  call temp:= `equals`(v0, v4) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L2fa056.  v4:= temp;
  #L2fa058.  if v4 == 0 then goto L2fa05e;
  #L2fa05c.  v1:= 1I;
  #L2fa05e.  return v1;
}
procedure `int` `hashCode`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fa070.  v0:= v2.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L2fa074.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Enum;.hashCode:()I` @kind virtual;
  #L2fa07a.  v0:= temp;
  #L2fa07c.  v1:= 527I;
  #L2fa080.  v1:= v1 + v0 @kind int;
  #L2fa082.  v1:= v1 * 31;
  #L2fa086.  v0:= v2.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L2fa08a.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2fa090.  v0:= temp;
  #L2fa092.  v1:= v1 + v0 @kind int;
  #L2fa094.  v1:= v1 * 31;
  #L2fa098.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L2fa09c.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L2fa0a2.  v0:= temp;
  #L2fa0a4.  v1:= v1 + v0 @kind int;
  #L2fa0a6.  v1:= v1 * 31;
  #L2fa0aa.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L2fa0ae.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L2fa0b4.  v0:= temp;
  #L2fa0b6.  v1:= v1 + v0 @kind int;
  #L2fa0b8.  return v1;
}
procedure `java.util.List` `localCertificates`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.localCertificates:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fa1dc.  v0:= v1.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L2fa1e0.  return v0 @kind object;
}
procedure `java.security.Principal` `localPrincipal`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.localPrincipal:()Ljava/security/Principal;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fa15c.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L2fa160.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2fa166.  v0:= temp;
  #L2fa168.  if v0 != 0 then goto L2fa188;
  #L2fa16c.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L2fa170.  v1:= 0I;
  #L2fa172.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fa178.  v0:= temp @kind object;
  #L2fa17a.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L2fa17e.  call temp:= `getSubjectX500Principal`(v0) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L2fa184.  v0:= temp @kind object;
  #L2fa186.  goto L2fa18a;
  #L2fa188.  v0:= 0I;
  #L2fa18a.  return v0 @kind object;
}
procedure `java.util.List` `peerCertificates`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.peerCertificates:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fa264.  v0:= v1.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L2fa268.  return v0 @kind object;
}
procedure `java.security.Principal` `peerPrincipal`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.peerPrincipal:()Ljava/security/Principal;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fa19c.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L2fa1a0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2fa1a6.  v0:= temp;
  #L2fa1a8.  if v0 != 0 then goto L2fa1c8;
  #L2fa1ac.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L2fa1b0.  v1:= 0I;
  #L2fa1b2.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fa1b8.  v0:= temp @kind object;
  #L2fa1ba.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L2fa1be.  call temp:= `getSubjectX500Principal`(v0) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L2fa1c4.  v0:= temp @kind object;
  #L2fa1c6.  goto L2fa1ca;
  #L2fa1c8.  v0:= 0I;
  #L2fa1ca.  return v0 @kind object;
}
procedure `okhttp3.TlsVersion` `tlsVersion`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.tlsVersion:()Lokhttp3/TlsVersion;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fa3c8.  v0:= v1.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L2fa3cc.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fa0cc.  v0:= new `java.lang.StringBuilder`;
  #L2fa0d0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fa0d6.  v1:= "Handshake{tlsVersion=" @kind object;
  #L2fa0da.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fa0e0.  v1:= v2.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L2fa0e4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fa0ea.  v1:= " cipherSuite=" @kind object;
  #L2fa0ee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fa0f4.  v1:= v2.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L2fa0f8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fa0fe.  v1:= " peerCertificates=" @kind object;
  #L2fa102.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fa108.  v1:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L2fa10c.  call temp:= `names`(v2, v1) @signature `Lokhttp3/Handshake;.names:(Ljava/util/List;)Ljava/util/List;` @kind direct;
  #L2fa112.  v1:= temp @kind object;
  #L2fa114.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fa11a.  v1:= " localCertificates=" @kind object;
  #L2fa11e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fa124.  v1:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L2fa128.  call temp:= `names`(v2, v1) @signature `Lokhttp3/Handshake;.names:(Ljava/util/List;)Ljava/util/List;` @kind direct;
  #L2fa12e.  v1:= temp @kind object;
  #L2fa130.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fa136.  v1:= 125I;
  #L2fa13a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fa140.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fa146.  v0:= temp @kind object;
  #L2fa148.  return v0 @kind object;
}
