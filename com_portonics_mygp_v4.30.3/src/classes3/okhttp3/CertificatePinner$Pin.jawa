record `okhttp3.CertificatePinner$Pin` @kind class @AccessFlag FINAL {
  `java.lang.String` `okhttp3.CertificatePinner$Pin.canonicalHostname` @AccessFlag FINAL;
  `okio.ByteString` `okhttp3.CertificatePinner$Pin.hash` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.hashAlgorithm` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.pattern` @AccessFlag FINAL;
}
global `java.lang.String` `@@okhttp3.CertificatePinner$Pin.WILDCARD` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.CertificatePinner$Pin` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lokhttp3/CertificatePinner$Pin;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2f6670.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f6676.  v2.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` := v3 @kind object;
  #L2f667a.  v0:= "*." @kind object;
  #L2f667e.  call temp:= `startsWith`(v3, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2f6684.  v0:= temp;
  #L2f6686.  v1:= "http://" @kind object;
  #L2f668a.  if v0 == 0 then goto L2f66c8;
  #L2f668e.  v0:= new `java.lang.StringBuilder`;
  #L2f6692.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f6698.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f669e.  v1:= 2I;
  #L2f66a0.  call temp:= `substring`(v3, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2f66a6.  v3:= temp @kind object;
  #L2f66a8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f66ae.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f66b4.  v3:= temp @kind object;
  #L2f66b6.  call temp:= `get`(v3) @signature `Lokhttp3/HttpUrl;.get:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L2f66bc.  v3:= temp @kind object;
  #L2f66be.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L2f66c4.  v3:= temp @kind object;
  #L2f66c6.  goto L2f66f6;
  #L2f66c8.  v0:= new `java.lang.StringBuilder`;
  #L2f66cc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f66d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f66d8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f66de.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f66e4.  v3:= temp @kind object;
  #L2f66e6.  call temp:= `get`(v3) @signature `Lokhttp3/HttpUrl;.get:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L2f66ec.  v3:= temp @kind object;
  #L2f66ee.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L2f66f4.  v3:= temp @kind object;
  #L2f66f6.  v2.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` := v3 @kind object;
  #L2f66fa.  v3:= "sha1/" @kind object;
  #L2f66fe.  call temp:= `startsWith`(v4, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2f6704.  v0:= temp;
  #L2f6706.  if v0 == 0 then goto L2f6726;
  #L2f670a.  v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` := v3 @kind object;
  #L2f670e.  v3:= 5I;
  #L2f6710.  call temp:= `substring`(v4, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2f6716.  v3:= temp @kind object;
  #L2f6718.  call temp:= `decodeBase64`(v3) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L2f671e.  v3:= temp @kind object;
  #L2f6720.  v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` := v3 @kind object;
  #L2f6724.  goto L2f6750;
  #L2f6726.  v3:= "sha256/" @kind object;
  #L2f672a.  call temp:= `startsWith`(v4, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2f6730.  v0:= temp;
  #L2f6732.  if v0 == 0 then goto L2f6788;
  #L2f6736.  v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` := v3 @kind object;
  #L2f673a.  v3:= 7I;
  #L2f673c.  call temp:= `substring`(v4, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2f6742.  v3:= temp @kind object;
  #L2f6744.  call temp:= `decodeBase64`(v3) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L2f674a.  v3:= temp @kind object;
  #L2f674c.  v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` := v3 @kind object;
  #L2f6750.  v3:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L2f6754.  if v3 == 0 then goto L2f675a;
  #L2f6758.  return @kind void;
  #L2f675a.  v3:= new `java.lang.IllegalArgumentException`;
  #L2f675e.  v0:= new `java.lang.StringBuilder`;
  #L2f6762.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f6768.  v1:= "pins must be base64: " @kind object;
  #L2f676c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6772.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6778.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f677e.  v4:= temp @kind object;
  #L2f6780.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f6786.  throw v3;
  #L2f6788.  v3:= new `java.lang.IllegalArgumentException`;
  #L2f678c.  v0:= new `java.lang.StringBuilder`;
  #L2f6790.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f6796.  v1:= "pins must start with 'sha256/' or 'sha1/': " @kind object;
  #L2f679a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f67a0.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f67a6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f67ac.  v4:= temp @kind object;
  #L2f67ae.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f67b4.  throw v3;
}
procedure `boolean` `equals`(`okhttp3.CertificatePinner$Pin` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lokhttp3/CertificatePinner$Pin;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f6504.  v0:= instanceof @variable v3 @type ^`okhttp3.CertificatePinner$Pin` @kind boolean;
  #L2f6508.  if v0 == 0 then goto L2f6550;
  #L2f650c.  v0:= v2.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L2f6510.  v3:= (`okhttp3.CertificatePinner$Pin`) v3 @kind object;
  #L2f6514.  v1:= v3.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L2f6518.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f651e.  v0:= temp;
  #L2f6520.  if v0 == 0 then goto L2f6550;
  #L2f6524.  v0:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L2f6528.  v1:= v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L2f652c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6532.  v0:= temp;
  #L2f6534.  if v0 == 0 then goto L2f6550;
  #L2f6538.  v0:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L2f653c.  v3:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L2f6540.  call temp:= `equals`(v0, v3) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f6546.  v3:= temp;
  #L2f6548.  if v3 == 0 then goto L2f6550;
  #L2f654c.  v3:= 1I;
  #L2f654e.  goto L2f6552;
  #L2f6550.  v3:= 0I;
  #L2f6552.  return v3;
}
procedure `int` `hashCode`(`okhttp3.CertificatePinner$Pin` v2 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f65e8.  v0:= v2.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L2f65ec.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L2f65f2.  v0:= temp;
  #L2f65f4.  v1:= 527I;
  #L2f65f8.  v1:= v1 + v0 @kind int;
  #L2f65fa.  v1:= v1 * 31;
  #L2f65fe.  v0:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L2f6602.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L2f6608.  v0:= temp;
  #L2f660a.  v1:= v1 + v0 @kind int;
  #L2f660c.  v1:= v1 * 31;
  #L2f6610.  v0:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L2f6614.  call temp:= `hashCode`(v0) @signature `Lokio/ByteString;.hashCode:()I` @kind virtual;
  #L2f661a.  v0:= temp;
  #L2f661c.  v1:= v1 + v0 @kind int;
  #L2f661e.  return v1;
}
procedure `boolean` `matches`(`okhttp3.CertificatePinner$Pin` v10 @kind this, `java.lang.String` v11 @kind object) @signature `Lokhttp3/CertificatePinner$Pin;.matches:(Ljava/lang/String;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2f6564.  v0:= v10.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L2f6568.  v1:= "*." @kind object;
  #L2f656c.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2f6572.  v0:= temp;
  #L2f6574.  if v0 == 0 then goto L2f65ca;
  #L2f6578.  v0:= 46I;
  #L2f657c.  call temp:= `indexOf`(v11, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L2f6582.  v0:= temp;
  #L2f6584.  call temp:= `length`(v11) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2f658a.  v1:= temp;
  #L2f658c.  v1:= v1 - v0 @kind int;
  #L2f658e.  v2:= 1I;
  #L2f6590.  v1:= v1 - v2 @kind int;
  #L2f6592.  v3:= v10.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L2f6596.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2f659c.  v3:= temp;
  #L2f659e.  if v1 != v3 then goto L2f65c6;
  #L2f65a2.  v5:= 0I;
  #L2f65a4.  v6:= v0 + 1;
  #L2f65a8.  v7:= v10.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L2f65ac.  v8:= 0I;
  #L2f65ae.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2f65b4.  v9:= temp;
  #L2f65b6.  v4:= v11 @kind object;
  #L2f65b8.  call temp:= `regionMatches`(v4, v5, v6, v7, v8, v9) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L2f65be.  v11:= temp;
  #L2f65c0.  if v11 == 0 then goto L2f65c6;
  #L2f65c4.  goto L2f65c8;
  #L2f65c6.  v2:= 0I;
  #L2f65c8.  return v2;
  #L2f65ca.  v0:= v10.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L2f65ce.  call temp:= `equals`(v11, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f65d4.  v11:= temp;
  #L2f65d6.  return v11;
}
procedure `java.lang.String` `toString`(`okhttp3.CertificatePinner$Pin` v2 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f6630.  v0:= new `java.lang.StringBuilder`;
  #L2f6634.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f663a.  v1:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L2f663e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6644.  v1:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L2f6648.  call temp:= `base64`(v1) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L2f664e.  v1:= temp @kind object;
  #L2f6650.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f6656.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f665c.  v0:= temp @kind object;
  #L2f665e.  return v0 @kind object;
}
