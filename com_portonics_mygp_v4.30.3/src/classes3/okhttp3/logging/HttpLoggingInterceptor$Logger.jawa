record `okhttp3.logging.HttpLoggingInterceptor$Logger` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `okhttp3.logging.HttpLoggingInterceptor$Logger` `@@okhttp3.logging.HttpLoggingInterceptor$Logger.DEFAULT` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/logging/HttpLoggingInterceptor$Logger;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L31759c.  v0:= new `okhttp3.logging.HttpLoggingInterceptor$Logger$1`;
  #L3175a0.  call `<init>`(v0) @signature `Lokhttp3/logging/HttpLoggingInterceptor$Logger$1;.<init>:()V` @kind direct;
  #L3175a6.  `@@okhttp3.logging.HttpLoggingInterceptor$Logger.DEFAULT` @type ^`okhttp3.logging.HttpLoggingInterceptor$Logger` := v0 @kind object;
  #L3175aa.  return @kind void;
}
procedure `void` `log`(`java.lang.String` v0 @kind object) @signature `Lokhttp3/logging/HttpLoggingInterceptor$Logger;.log:(Ljava/lang/String;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
