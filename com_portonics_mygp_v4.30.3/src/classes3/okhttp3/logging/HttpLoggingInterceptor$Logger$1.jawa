record `okhttp3.logging.HttpLoggingInterceptor$Logger$1` @kind class @AccessFlag  extends `okhttp3.logging.HttpLoggingInterceptor$Logger` @kind interface {
}
procedure `void` `<init>`(`okhttp3.logging.HttpLoggingInterceptor$Logger$1` v0 @kind this) @signature `Lokhttp3/logging/HttpLoggingInterceptor$Logger$1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L317560.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L317566.  return @kind void;
}
procedure `void` `log`(`okhttp3.logging.HttpLoggingInterceptor$Logger$1` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lokhttp3/logging/HttpLoggingInterceptor$Logger$1;.log:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L317578.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L31757e.  v0:= temp @kind object;
  #L317580.  v1:= 4I;
  #L317582.  v2:= 0I;
  #L317584.  call `log`(v0, v1, v4, v2) @signature `Lokhttp3/internal/platform/Platform;.log:(ILjava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L31758a.  return @kind void;
}
