record `okhttp3.HttpUrl` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `okhttp3.HttpUrl.fragment` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `okhttp3.HttpUrl.host` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.HttpUrl.password` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.HttpUrl.pathSegments` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.HttpUrl.port` @AccessFlag FINAL;
  `java.util.List` `okhttp3.HttpUrl.queryNamesAndValues` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `okhttp3.HttpUrl.scheme` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.HttpUrl.url` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `okhttp3.HttpUrl.username` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@okhttp3.HttpUrl.FORM_ENCODE_SET` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.FRAGMENT_ENCODE_SET` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI` @AccessFlag STATIC_FINAL;
global `char`[] `@@okhttp3.HttpUrl.HEX_DIGITS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.PASSWORD_ENCODE_SET` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.QUERY_ENCODE_SET` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.USERNAME_ENCODE_SET` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/HttpUrl;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2fce28.  v0:= 16I;
  #L2fce2c.  v0:= new `char`[v0];
  #L2fce30.  goto L2fce3c;
  #L2fce36.  `@@okhttp3.HttpUrl.HEX_DIGITS` @type ^`char`[] := v0 @kind object;
  #L2fce3a.  return @kind void;
  #L2fce3c.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 65I, 66I, 67I, 68I, 69I, 70I) @kind object;
  #L2fce63.  goto L2fce36;
}
procedure `void` `<init>`(`okhttp3.HttpUrl` v4 @kind this, `okhttp3.HttpUrl$Builder` v5 @kind object) @signature `Lokhttp3/HttpUrl;.<init>:(Lokhttp3/HttpUrl$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fce74.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2fce7a.  v0:= v5.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` @kind object;
  #L2fce7e.  v4.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` := v0 @kind object;
  #L2fce82.  v0:= v5.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` @kind object;
  #L2fce86.  v1:= 0I;
  #L2fce88.  call temp:= `percentDecode`(v0, v1) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L2fce8e.  v0:= temp @kind object;
  #L2fce90.  v4.`okhttp3.HttpUrl.username` @type ^`java.lang.String` := v0 @kind object;
  #L2fce94.  v0:= v5.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` @kind object;
  #L2fce98.  call temp:= `percentDecode`(v0, v1) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L2fce9e.  v0:= temp @kind object;
  #L2fcea0.  v4.`okhttp3.HttpUrl.password` @type ^`java.lang.String` := v0 @kind object;
  #L2fcea4.  v0:= v5.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` @kind object;
  #L2fcea8.  v4.`okhttp3.HttpUrl.host` @type ^`java.lang.String` := v0 @kind object;
  #L2fceac.  call temp:= `effectivePort`(v5) @signature `Lokhttp3/HttpUrl$Builder;.effectivePort:()I` @kind virtual;
  #L2fceb2.  v0:= temp;
  #L2fceb4.  v4.`okhttp3.HttpUrl.port` @type ^`int` := v0;
  #L2fceb8.  v0:= v5.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fcebc.  call temp:= `percentDecode`(v4, v0, v1) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/util/List;Z)Ljava/util/List;` @kind direct;
  #L2fcec2.  v0:= temp @kind object;
  #L2fcec4.  v4.`okhttp3.HttpUrl.pathSegments` @type ^`java.util.List` := v0 @kind object;
  #L2fcec8.  v0:= v5.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fcecc.  v2:= 0I;
  #L2fcece.  if v0 == 0 then goto L2fcede;
  #L2fced2.  v3:= 1I;
  #L2fced4.  call temp:= `percentDecode`(v4, v0, v3) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/util/List;Z)Ljava/util/List;` @kind direct;
  #L2fceda.  v0:= temp @kind object;
  #L2fcedc.  goto L2fcee0;
  #L2fcede.  v0:= v2 @kind object;
  #L2fcee0.  v4.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` := v0 @kind object;
  #L2fcee4.  v0:= v5.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` @kind object;
  #L2fcee8.  if v0 == 0 then goto L2fcef4;
  #L2fceec.  call temp:= `percentDecode`(v0, v1) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L2fcef2.  v2:= temp @kind object;
  #L2fcef4.  v4.`okhttp3.HttpUrl.fragment` @type ^`java.lang.String` := v2 @kind object;
  #L2fcef8.  call temp:= `toString`(v5) @signature `Lokhttp3/HttpUrl$Builder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fcefe.  v5:= temp @kind object;
  #L2fcf00.  v4.`okhttp3.HttpUrl.url` @type ^`java.lang.String` := v5 @kind object;
  #L2fcf04.  return @kind void;
}
procedure `java.lang.String` `canonicalize`(`java.lang.String` v11 @kind object, `int` v12 , `int` v13 , `java.lang.String` v14 @kind object, `boolean` v15 , `boolean` v16 , `boolean` v17 , `boolean` v18 , `java.nio.charset.Charset` v19 @kind object) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2fc3c4.  v1:= v11 @kind object;
  #L2fc3c6.  v3:= v13;
  #L2fc3c8.  v2:= v12;
  #L2fc3ca.  if v2 >= v3 then goto L2fc476;
  #L2fc3ce.  call temp:= `codePointAt`(v11, v2) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L2fc3d4.  v0:= temp;
  #L2fc3d6.  v4:= 32I;
  #L2fc3da.  if v0 < v4 then goto L2fc438;
  #L2fc3de.  v4:= 127I;
  #L2fc3e2.  if v0 == v4 then goto L2fc438;
  #L2fc3e6.  v4:= 128I;
  #L2fc3ea.  if v0 < v4 then goto L2fc3f2;
  #L2fc3ee.  if v18 != 0 then goto L2fc438;
  #L2fc3f2.  v4:= v14 @kind object;
  #L2fc3f4.  call temp:= `indexOf`(v14, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L2fc3fa.  v5:= temp;
  #L2fc3fc.  v6:= -1I;
  #L2fc3fe.  if v5 != v6 then goto L2fc43a;
  #L2fc402.  v5:= 37I;
  #L2fc406.  if v0 != v5 then goto L2fc41e;
  #L2fc40a.  if v15 == 0 then goto L2fc43a;
  #L2fc40e.  if v16 == 0 then goto L2fc41e;
  #L2fc412.  call temp:= `percentEncoded`(v11, v2, v13) @signature `Lokhttp3/HttpUrl;.percentEncoded:(Ljava/lang/String;II)Z` @kind static;
  #L2fc418.  v5:= temp;
  #L2fc41a.  if v5 == 0 then goto L2fc43a;
  #L2fc41e.  v5:= 43I;
  #L2fc422.  if v0 != v5 then goto L2fc42c;
  #L2fc426.  if v17 == 0 then goto L2fc42c;
  #L2fc42a.  goto L2fc43a;
  #L2fc42c.  call temp:= `charCount`(v0) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L2fc432.  v0:= temp;
  #L2fc434.  v2:= v2 + v0 @kind int;
  #L2fc436.  goto L2fc3ca;
  #L2fc438.  v4:= v14 @kind object;
  #L2fc43a.  v10:= new `okio.k`;
  #L2fc43e.  call `<init>`(v10) @signature `Lokio/k;.<init>:()V` @kind direct;
  #L2fc444.  v0:= v12;
  #L2fc446.  call temp:= `w1`(v10, v11, v12, v2) @signature `Lokio/k;.w1:(Ljava/lang/String;II)Lokio/k;` @kind virtual;
  #L2fc44c.  v0:= v10 @kind object;
  #L2fc44e.  v1:= v11 @kind object;
  #L2fc450.  v3:= v13;
  #L2fc452.  v4:= v14 @kind object;
  #L2fc454.  v5:= v15;
  #L2fc456.  v6:= v16;
  #L2fc45a.  v7:= v17;
  #L2fc45e.  v8:= v18;
  #L2fc462.  v9:= v19 @kind object;
  #L2fc466.  call `canonicalize`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lokhttp3/HttpUrl;.canonicalize:(Lokio/k;Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)V` @kind static;
  #L2fc46c.  call temp:= `Y0`(v10) @signature `Lokio/k;.Y0:()Ljava/lang/String;` @kind virtual;
  #L2fc472.  v0:= temp @kind object;
  #L2fc474.  return v0 @kind object;
  #L2fc476.  v0:= v12;
  #L2fc478.  call temp:= `substring`(v11, v12, v13) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2fc47e.  v0:= temp @kind object;
  #L2fc480.  return v0 @kind object;
}
procedure `java.lang.String` `canonicalize`(`java.lang.String` v9 @kind object, `java.lang.String` v10 @kind object, `boolean` v11 , `boolean` v12 , `boolean` v13 , `boolean` v14 ) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2fc494.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fc49a.  v2:= temp;
  #L2fc49c.  v1:= 0I;
  #L2fc49e.  v8:= 0I;
  #L2fc4a0.  v0:= v9 @kind object;
  #L2fc4a2.  v3:= v10 @kind object;
  #L2fc4a4.  v4:= v11;
  #L2fc4a6.  v5:= v12;
  #L2fc4a8.  v6:= v13;
  #L2fc4aa.  v7:= v14;
  #L2fc4ac.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @kind static;
  #L2fc4b2.  v9:= temp @kind object;
  #L2fc4b4.  return v9 @kind object;
}
procedure `java.lang.String` `canonicalize`(`java.lang.String` v9 @kind object, `java.lang.String` v10 @kind object, `boolean` v11 , `boolean` v12 , `boolean` v13 , `boolean` v14 , `java.nio.charset.Charset` v15 @kind object) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2fc4c8.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fc4ce.  v2:= temp;
  #L2fc4d0.  v1:= 0I;
  #L2fc4d2.  v0:= v9 @kind object;
  #L2fc4d4.  v3:= v10 @kind object;
  #L2fc4d6.  v4:= v11;
  #L2fc4d8.  v5:= v12;
  #L2fc4da.  v6:= v13;
  #L2fc4dc.  v7:= v14;
  #L2fc4de.  v8:= v15 @kind object;
  #L2fc4e0.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @kind static;
  #L2fc4e6.  v9:= temp @kind object;
  #L2fc4e8.  return v9 @kind object;
}
procedure `void` `canonicalize`(`okio.k` v6 @kind object, `java.lang.String` v7 @kind object, `int` v8 , `int` v9 , `java.lang.String` v10 @kind object, `boolean` v11 , `boolean` v12 , `boolean` v13 , `boolean` v14 , `java.nio.charset.Charset` v15 @kind object) @signature `Lokhttp3/HttpUrl;.canonicalize:(Lokio/k;Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2fcf18.  v0:= 0I;
  #L2fcf1a.  if v8 >= v9 then goto L2fd050;
  #L2fcf1e.  call temp:= `codePointAt`(v7, v8) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L2fcf24.  v1:= temp;
  #L2fcf26.  if v11 == 0 then goto L2fcf4e;
  #L2fcf2a.  v2:= 9I;
  #L2fcf2e.  if v1 == v2 then goto L2fd042;
  #L2fcf32.  v2:= 10I;
  #L2fcf36.  if v1 == v2 then goto L2fd042;
  #L2fcf3a.  v2:= 12I;
  #L2fcf3e.  if v1 == v2 then goto L2fd042;
  #L2fcf42.  v2:= 13I;
  #L2fcf46.  if v1 != v2 then goto L2fcf4e;
  #L2fcf4a.  goto L2fd042;
  #L2fcf4e.  v2:= 43I;
  #L2fcf52.  if v1 != v2 then goto L2fcf72;
  #L2fcf56.  if v13 == 0 then goto L2fcf72;
  #L2fcf5a.  if v11 == 0 then goto L2fcf64;
  #L2fcf5e.  v2:= "+" @kind object;
  #L2fcf62.  goto L2fcf68;
  #L2fcf64.  v2:= "%2B" @kind object;
  #L2fcf68.  call temp:= `v1`(v6, v2) @signature `Lokio/k;.v1:(Ljava/lang/String;)Lokio/k;` @kind virtual;
  #L2fcf6e.  goto L2fd042;
  #L2fcf72.  v2:= 32I;
  #L2fcf76.  v3:= 37I;
  #L2fcf7a.  if v1 < v2 then goto L2fcfc2;
  #L2fcf7e.  v2:= 127I;
  #L2fcf82.  if v1 == v2 then goto L2fcfc2;
  #L2fcf86.  v2:= 128I;
  #L2fcf8a.  if v1 < v2 then goto L2fcf92;
  #L2fcf8e.  if v14 != 0 then goto L2fcfc2;
  #L2fcf92.  call temp:= `indexOf`(v10, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L2fcf98.  v2:= temp;
  #L2fcf9a.  v4:= -1I;
  #L2fcf9c.  if v2 != v4 then goto L2fcfc2;
  #L2fcfa0.  if v1 != v3 then goto L2fcfba;
  #L2fcfa4.  if v11 == 0 then goto L2fcfc2;
  #L2fcfa8.  if v12 == 0 then goto L2fcfba;
  #L2fcfac.  call temp:= `percentEncoded`(v7, v8, v9) @signature `Lokhttp3/HttpUrl;.percentEncoded:(Ljava/lang/String;II)Z` @kind static;
  #L2fcfb2.  v2:= temp;
  #L2fcfb4.  if v2 != 0 then goto L2fcfba;
  #L2fcfb8.  goto L2fcfc2;
  #L2fcfba.  call temp:= `x1`(v6, v1) @signature `Lokio/k;.x1:(I)Lokio/k;` @kind virtual;
  #L2fcfc0.  goto L2fd042;
  #L2fcfc2.  if v0 != 0 then goto L2fcfd0;
  #L2fcfc6.  v0:= new `okio.k`;
  #L2fcfca.  call `<init>`(v0) @signature `Lokio/k;.<init>:()V` @kind direct;
  #L2fcfd0.  if v15 == 0 then goto L2fcff8;
  #L2fcfd4.  v2:= `@@java.nio.charset.StandardCharsets.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L2fcfd8.  call temp:= `equals`(v15, v2) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fcfde.  v2:= temp;
  #L2fcfe0.  if v2 == 0 then goto L2fcfe6;
  #L2fcfe4.  goto L2fcff8;
  #L2fcfe6.  call temp:= `charCount`(v1) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L2fcfec.  v2:= temp;
  #L2fcfee.  v2:= v2 + v8 @kind int;
  #L2fcff0.  call temp:= `t1`(v0, v7, v8, v2, v15) @signature `Lokio/k;.t1:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/k;` @kind virtual;
  #L2fcff6.  goto L2fcffe;
  #L2fcff8.  call temp:= `x1`(v0, v1) @signature `Lokio/k;.x1:(I)Lokio/k;` @kind virtual;
  #L2fcffe.  call temp:= `O`(v0) @signature `Lokio/k;.O:()Z` @kind virtual;
  #L2fd004.  v2:= temp;
  #L2fd006.  if v2 != 0 then goto L2fd042;
  #L2fd00a.  call temp:= `readByte`(v0) @signature `Lokio/k;.readByte:()B` @kind virtual;
  #L2fd010.  v2:= temp;
  #L2fd012.  v2:= v2 ^& 255;
  #L2fd016.  call temp:= `n1`(v6, v3) @signature `Lokio/k;.n1:(I)Lokio/k;` @kind virtual;
  #L2fd01c.  v4:= `@@okhttp3.HttpUrl.HEX_DIGITS` @type ^`char`[] @kind object;
  #L2fd020.  v5:= v2 ^> 4;
  #L2fd024.  v5:= v5 ^& 15;
  #L2fd028.  v5:= v4[v5] @kind char;
  #L2fd02c.  call temp:= `n1`(v6, v5) @signature `Lokio/k;.n1:(I)Lokio/k;` @kind virtual;
  #L2fd032.  v2:= v2 ^& 15;
  #L2fd036.  v2:= v4[v2] @kind char;
  #L2fd03a.  call temp:= `n1`(v6, v2) @signature `Lokio/k;.n1:(I)Lokio/k;` @kind virtual;
  #L2fd040.  goto L2fcffe;
  #L2fd042.  call temp:= `charCount`(v1) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L2fd048.  v1:= temp;
  #L2fd04a.  v8:= v8 + v1 @kind int;
  #L2fd04c.  goto L2fcf1a;
  #L2fd050.  return @kind void;
}
procedure `int` `defaultPort`(`java.lang.String` v1 @kind object) @signature `Lokhttp3/HttpUrl;.defaultPort:(Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2fc300.  v0:= "http" @kind object;
  #L2fc304.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fc30a.  v0:= temp;
  #L2fc30c.  if v0 == 0 then goto L2fc316;
  #L2fc310.  v1:= 80I;
  #L2fc314.  return v1;
  #L2fc316.  v0:= "https" @kind object;
  #L2fc31a.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fc320.  v1:= temp;
  #L2fc322.  if v1 == 0 then goto L2fc32c;
  #L2fc326.  v1:= 443I;
  #L2fc32a.  return v1;
  #L2fc32c.  v1:= -1I;
  #L2fc32e.  return v1;
}
procedure `okhttp3.HttpUrl` `get`(`java.lang.String` v2 @kind object) @signature `Lokhttp3/HttpUrl;.get:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2fcc80.  v0:= new `okhttp3.HttpUrl$Builder`;
  #L2fcc84.  call `<init>`(v0) @signature `Lokhttp3/HttpUrl$Builder;.<init>:()V` @kind direct;
  #L2fcc8a.  v1:= 0I;
  #L2fcc8c.  call temp:= `parse`(v0, v1, v2) @signature `Lokhttp3/HttpUrl$Builder;.parse:(Lokhttp3/HttpUrl;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2fcc92.  v2:= temp @kind object;
  #L2fcc94.  call temp:= `build`(v2) @signature `Lokhttp3/HttpUrl$Builder;.build:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2fcc9a.  v2:= temp @kind object;
  #L2fcc9c.  return v2 @kind object;
}
procedure `okhttp3.HttpUrl` `get`(`java.net.URI` v0 @kind object) @signature `Lokhttp3/HttpUrl;.get:(Ljava/net/URI;)Lokhttp3/HttpUrl;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2fccb0.  call temp:= `toString`(v0) @signature `Ljava/net/URI;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fccb6.  v0:= temp @kind object;
  #L2fccb8.  call temp:= `parse`(v0) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L2fccbe.  v0:= temp @kind object;
  #L2fccc0.  return v0 @kind object;
}
procedure `okhttp3.HttpUrl` `get`(`java.net.URL` v0 @kind object) @signature `Lokhttp3/HttpUrl;.get:(Ljava/net/URL;)Lokhttp3/HttpUrl;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2fccd4.  call temp:= `toString`(v0) @signature `Ljava/net/URL;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fccda.  v0:= temp @kind object;
  #L2fccdc.  call temp:= `parse`(v0) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L2fcce2.  v0:= temp @kind object;
  #L2fcce4.  return v0 @kind object;
}
procedure `void` `namesAndValuesToQueryString`(`java.lang.StringBuilder` v5 @kind object, `java.util.List` v6 @kind object) @signature `Lokhttp3/HttpUrl;.namesAndValuesToQueryString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2fd064.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fd06a.  v0:= temp;
  #L2fd06c.  v1:= 0I;
  #L2fd06e.  if v1 >= v0 then goto L2fd0bc;
  #L2fd072.  call temp:= `get`(v6, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fd078.  v2:= temp @kind object;
  #L2fd07a.  v2:= (`java.lang.String`) v2 @kind object;
  #L2fd07e.  v3:= v1 + 1;
  #L2fd082.  call temp:= `get`(v6, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fd088.  v3:= temp @kind object;
  #L2fd08a.  v3:= (`java.lang.String`) v3 @kind object;
  #L2fd08e.  if v1 <= 0 then goto L2fd09c;
  #L2fd092.  v4:= 38I;
  #L2fd096.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fd09c.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fd0a2.  if v3 == 0 then goto L2fd0b6;
  #L2fd0a6.  v2:= 61I;
  #L2fd0aa.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fd0b0.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fd0b6.  v1:= v1 + 2;
  #L2fd0ba.  goto L2fd06e;
  #L2fd0bc.  return @kind void;
}
procedure `okhttp3.HttpUrl` `parse`(`java.lang.String` v0 @kind object) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2fccf8.  call temp:= `get`(v0) @signature `Lokhttp3/HttpUrl;.get:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L2fccfe.  v0:= temp @kind object;
  #L2fcd00.  return v0 @kind object;
  #L2fcd02.  v0:= 0I;
  #L2fcd04.  return v0 @kind object;
  catch `java.lang.IllegalArgumentException` @[L2fccf8..L2fcd00] goto L2fcd02;
}
procedure `void` `pathSegmentsToString`(`java.lang.StringBuilder` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lokhttp3/HttpUrl;.pathSegmentsToString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2fd0d0.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fd0d6.  v0:= temp;
  #L2fd0d8.  v1:= 0I;
  #L2fd0da.  if v1 >= v0 then goto L2fd100;
  #L2fd0de.  v2:= 47I;
  #L2fd0e2.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fd0e8.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fd0ee.  v2:= temp @kind object;
  #L2fd0f0.  v2:= (`java.lang.String`) v2 @kind object;
  #L2fd0f4.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fd0fa.  v1:= v1 + 1;
  #L2fd0fe.  goto L2fd0da;
  #L2fd100.  return @kind void;
}
procedure `java.lang.String` `percentDecode`(`java.lang.String` v3 @kind object, `int` v4 , `int` v5 , `boolean` v6 ) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/lang/String;IIZ)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2fc71c.  v0:= v4;
  #L2fc71e.  if v0 >= v5 then goto L2fc766;
  #L2fc722.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fc728.  v1:= temp;
  #L2fc72a.  v2:= 37I;
  #L2fc72e.  if v1 == v2 then goto L2fc746;
  #L2fc732.  v2:= 43I;
  #L2fc736.  if v1 != v2 then goto L2fc740;
  #L2fc73a.  if v6 == 0 then goto L2fc740;
  #L2fc73e.  goto L2fc746;
  #L2fc740.  v0:= v0 + 1;
  #L2fc744.  goto L2fc71e;
  #L2fc746.  v1:= new `okio.k`;
  #L2fc74a.  call `<init>`(v1) @signature `Lokio/k;.<init>:()V` @kind direct;
  #L2fc750.  call temp:= `w1`(v1, v3, v4, v0) @signature `Lokio/k;.w1:(Ljava/lang/String;II)Lokio/k;` @kind virtual;
  #L2fc756.  call `percentDecode`(v1, v3, v0, v5, v6) @signature `Lokhttp3/HttpUrl;.percentDecode:(Lokio/k;Ljava/lang/String;IIZ)V` @kind static;
  #L2fc75c.  call temp:= `Y0`(v1) @signature `Lokio/k;.Y0:()Ljava/lang/String;` @kind virtual;
  #L2fc762.  v3:= temp @kind object;
  #L2fc764.  return v3 @kind object;
  #L2fc766.  call temp:= `substring`(v3, v4, v5) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2fc76c.  v3:= temp @kind object;
  #L2fc76e.  return v3 @kind object;
}
procedure `java.lang.String` `percentDecode`(`java.lang.String` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/lang/String;Z)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L2fc6f8.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fc6fe.  v0:= temp;
  #L2fc700.  v1:= 0I;
  #L2fc702.  call temp:= `percentDecode`(v2, v1, v0, v3) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/lang/String;IIZ)Ljava/lang/String;` @kind static;
  #L2fc708.  v2:= temp @kind object;
  #L2fc70a.  return v2 @kind object;
}
procedure `java.util.List` `percentDecode`(`okhttp3.HttpUrl` v4 @kind this, `java.util.List` v5 @kind object, `boolean` v6 ) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/util/List;Z)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fcaa8.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fcaae.  v0:= temp;
  #L2fcab0.  v1:= new `java.util.ArrayList`;
  #L2fcab4.  call `<init>`(v1, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2fcaba.  v2:= 0I;
  #L2fcabc.  if v2 >= v0 then goto L2fcae8;
  #L2fcac0.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fcac6.  v3:= temp @kind object;
  #L2fcac8.  v3:= (`java.lang.String`) v3 @kind object;
  #L2fcacc.  if v3 == 0 then goto L2fcada;
  #L2fcad0.  call temp:= `percentDecode`(v3, v6) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L2fcad6.  v3:= temp @kind object;
  #L2fcad8.  goto L2fcadc;
  #L2fcada.  v3:= 0I;
  #L2fcadc.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fcae2.  v2:= v2 + 1;
  #L2fcae6.  goto L2fcabc;
  #L2fcae8.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L2fcaee.  v5:= temp @kind object;
  #L2fcaf0.  return v5 @kind object;
}
procedure `void` `percentDecode`(`okio.k` v5 @kind object, `java.lang.String` v6 @kind object, `int` v7 , `int` v8 , `boolean` v9 ) @signature `Lokhttp3/HttpUrl;.percentDecode:(Lokio/k;Ljava/lang/String;IIZ)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2fd114.  if v7 >= v8 then goto L2fd198;
  #L2fd118.  call temp:= `codePointAt`(v6, v7) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L2fd11e.  v0:= temp;
  #L2fd120.  v1:= 37I;
  #L2fd124.  if v0 != v1 then goto L2fd16e;
  #L2fd128.  v1:= v7 + 2;
  #L2fd12c.  if v1 >= v8 then goto L2fd16e;
  #L2fd130.  v2:= v7 + 1;
  #L2fd134.  call temp:= `charAt`(v6, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fd13a.  v2:= temp;
  #L2fd13c.  call temp:= `decodeHexDigit`(v2) @signature `Lokhttp3/internal/Util;.decodeHexDigit:(C)I` @kind static;
  #L2fd142.  v2:= temp;
  #L2fd144.  call temp:= `charAt`(v6, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fd14a.  v3:= temp;
  #L2fd14c.  call temp:= `decodeHexDigit`(v3) @signature `Lokhttp3/internal/Util;.decodeHexDigit:(C)I` @kind static;
  #L2fd152.  v3:= temp;
  #L2fd154.  v4:= -1I;
  #L2fd156.  if v2 == v4 then goto L2fd186;
  #L2fd15a.  if v3 == v4 then goto L2fd186;
  #L2fd15e.  v7:= v2 ^< 4;
  #L2fd162.  v7:= v7 + v3 @kind int;
  #L2fd164.  call temp:= `n1`(v5, v7) @signature `Lokio/k;.n1:(I)Lokio/k;` @kind virtual;
  #L2fd16a.  v7:= v1;
  #L2fd16c.  goto L2fd18c;
  #L2fd16e.  v1:= 43I;
  #L2fd172.  if v0 != v1 then goto L2fd186;
  #L2fd176.  if v9 == 0 then goto L2fd186;
  #L2fd17a.  v1:= 32I;
  #L2fd17e.  call temp:= `n1`(v5, v1) @signature `Lokio/k;.n1:(I)Lokio/k;` @kind virtual;
  #L2fd184.  goto L2fd18c;
  #L2fd186.  call temp:= `x1`(v5, v0) @signature `Lokio/k;.x1:(I)Lokio/k;` @kind virtual;
  #L2fd18c.  call temp:= `charCount`(v0) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L2fd192.  v0:= temp;
  #L2fd194.  v7:= v7 + v0 @kind int;
  #L2fd196.  goto L2fd114;
  #L2fd198.  return @kind void;
}
procedure `boolean` `percentEncoded`(`java.lang.String` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lokhttp3/HttpUrl;.percentEncoded:(Ljava/lang/String;II)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2fc2a4.  v0:= v4 + 2;
  #L2fc2a8.  v1:= 1I;
  #L2fc2aa.  if v0 >= v5 then goto L2fc2ec;
  #L2fc2ae.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fc2b4.  v5:= temp;
  #L2fc2b6.  v2:= 37I;
  #L2fc2ba.  if v5 != v2 then goto L2fc2ec;
  #L2fc2be.  v4:= v4 + v1 @kind int;
  #L2fc2c0.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fc2c6.  v4:= temp;
  #L2fc2c8.  call temp:= `decodeHexDigit`(v4) @signature `Lokhttp3/internal/Util;.decodeHexDigit:(C)I` @kind static;
  #L2fc2ce.  v4:= temp;
  #L2fc2d0.  v5:= -1I;
  #L2fc2d2.  if v4 == v5 then goto L2fc2ec;
  #L2fc2d6.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fc2dc.  v3:= temp;
  #L2fc2de.  call temp:= `decodeHexDigit`(v3) @signature `Lokhttp3/internal/Util;.decodeHexDigit:(C)I` @kind static;
  #L2fc2e4.  v3:= temp;
  #L2fc2e6.  if v3 == v5 then goto L2fc2ec;
  #L2fc2ea.  goto L2fc2ee;
  #L2fc2ec.  v1:= 0I;
  #L2fc2ee.  return v1;
}
procedure `java.util.List` `queryStringToNamesAndValues`(`java.lang.String` v5 @kind object) @signature `Lokhttp3/HttpUrl;.queryStringToNamesAndValues:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2fcb84.  v0:= new `java.util.ArrayList`;
  #L2fcb88.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2fcb8e.  v1:= 0I;
  #L2fcb90.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fcb96.  v2:= temp;
  #L2fcb98.  if v1 > v2 then goto L2fcc0a;
  #L2fcb9c.  v2:= 38I;
  #L2fcba0.  call temp:= `indexOf`(v5, v2, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L2fcba6.  v2:= temp;
  #L2fcba8.  v3:= -1I;
  #L2fcbaa.  if v2 != v3 then goto L2fcbb6;
  #L2fcbae.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fcbb4.  v2:= temp;
  #L2fcbb6.  v4:= 61I;
  #L2fcbba.  call temp:= `indexOf`(v5, v4, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L2fcbc0.  v4:= temp;
  #L2fcbc2.  if v4 == v3 then goto L2fcbee;
  #L2fcbc6.  if v4 <= v2 then goto L2fcbcc;
  #L2fcbca.  goto L2fcbee;
  #L2fcbcc.  call temp:= `substring`(v5, v1, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2fcbd2.  v1:= temp @kind object;
  #L2fcbd4.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fcbda.  v4:= v4 + 1;
  #L2fcbde.  call temp:= `substring`(v5, v4, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2fcbe4.  v1:= temp @kind object;
  #L2fcbe6.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fcbec.  goto L2fcc04;
  #L2fcbee.  call temp:= `substring`(v5, v1, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2fcbf4.  v1:= temp @kind object;
  #L2fcbf6.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fcbfc.  v1:= 0I;
  #L2fcbfe.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fcc04.  v1:= v2 + 1;
  #L2fcc08.  goto L2fcb90;
  #L2fcc0a.  return v0 @kind object;
}
procedure `java.lang.String` `encodedFragment`(`okhttp3.HttpUrl` v2 @kind this) @signature `Lokhttp3/HttpUrl;.encodedFragment:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fc4fc.  v0:= v2.`okhttp3.HttpUrl.fragment` @type ^`java.lang.String` @kind object;
  #L2fc500.  if v0 != 0 then goto L2fc508;
  #L2fc504.  v0:= 0I;
  #L2fc506.  return v0 @kind object;
  #L2fc508.  v0:= v2.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc50c.  v1:= 35I;
  #L2fc510.  call temp:= `indexOf`(v0, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L2fc516.  v0:= temp;
  #L2fc518.  v0:= v0 + 1;
  #L2fc51c.  v1:= v2.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc520.  call temp:= `substring`(v1, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2fc526.  v0:= temp @kind object;
  #L2fc528.  return v0 @kind object;
}
procedure `java.lang.String` `encodedPassword`(`okhttp3.HttpUrl` v3 @kind this) @signature `Lokhttp3/HttpUrl;.encodedPassword:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2fc53c.  v0:= v3.`okhttp3.HttpUrl.password` @type ^`java.lang.String` @kind object;
  #L2fc540.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L2fc546.  v0:= temp;
  #L2fc548.  if v0 == 0 then goto L2fc552;
  #L2fc54c.  v0:= "" @kind object;
  #L2fc550.  return v0 @kind object;
  #L2fc552.  v0:= v3.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc556.  v1:= 58I;
  #L2fc55a.  v2:= v3.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L2fc55e.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fc564.  v2:= temp;
  #L2fc566.  v2:= v2 + 3;
  #L2fc56a.  call temp:= `indexOf`(v0, v1, v2) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L2fc570.  v0:= temp;
  #L2fc572.  v0:= v0 + 1;
  #L2fc576.  v1:= v3.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc57a.  v2:= 64I;
  #L2fc57e.  call temp:= `indexOf`(v1, v2) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L2fc584.  v1:= temp;
  #L2fc586.  v2:= v3.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc58a.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2fc590.  v0:= temp @kind object;
  #L2fc592.  return v0 @kind object;
}
procedure `java.lang.String` `encodedPath`(`okhttp3.HttpUrl` v4 @kind this) @signature `Lokhttp3/HttpUrl;.encodedPath:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fc5a4.  v0:= v4.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc5a8.  v1:= v4.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L2fc5ac.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fc5b2.  v1:= temp;
  #L2fc5b4.  v1:= v1 + 3;
  #L2fc5b8.  v2:= 47I;
  #L2fc5bc.  call temp:= `indexOf`(v0, v2, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L2fc5c2.  v0:= temp;
  #L2fc5c4.  v1:= v4.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc5c8.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fc5ce.  v2:= temp;
  #L2fc5d0.  v3:= "?#" @kind object;
  #L2fc5d4.  call temp:= `delimiterOffset`(v1, v0, v2, v3) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L2fc5da.  v1:= temp;
  #L2fc5dc.  v2:= v4.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc5e0.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2fc5e6.  v0:= temp @kind object;
  #L2fc5e8.  return v0 @kind object;
}
procedure `java.util.List` `encodedPathSegments`(`okhttp3.HttpUrl` v6 @kind this) @signature `Lokhttp3/HttpUrl;.encodedPathSegments:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2fca10.  v0:= v6.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fca14.  v1:= v6.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L2fca18.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fca1e.  v1:= temp;
  #L2fca20.  v1:= v1 + 3;
  #L2fca24.  v2:= 47I;
  #L2fca28.  call temp:= `indexOf`(v0, v2, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L2fca2e.  v0:= temp;
  #L2fca30.  v1:= v6.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fca34.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fca3a.  v3:= temp;
  #L2fca3c.  v4:= "?#" @kind object;
  #L2fca40.  call temp:= `delimiterOffset`(v1, v0, v3, v4) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L2fca46.  v1:= temp;
  #L2fca48.  v3:= new `java.util.ArrayList`;
  #L2fca4c.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2fca52.  if v0 >= v1 then goto L2fca7c;
  #L2fca56.  v0:= v0 + 1;
  #L2fca5a.  v4:= v6.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fca5e.  call temp:= `delimiterOffset`(v4, v0, v1, v2) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IIC)I` @kind static;
  #L2fca64.  v4:= temp;
  #L2fca66.  v5:= v6.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fca6a.  call temp:= `substring`(v5, v0, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2fca70.  v0:= temp @kind object;
  #L2fca72.  call temp:= `add`(v3, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fca78.  v0:= v4;
  #L2fca7a.  goto L2fca52;
  #L2fca7c.  return v3 @kind object;
}
procedure `java.lang.String` `encodedQuery`(`okhttp3.HttpUrl` v4 @kind this) @signature `Lokhttp3/HttpUrl;.encodedQuery:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fc5fc.  v0:= v4.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fc600.  if v0 != 0 then goto L2fc608;
  #L2fc604.  v0:= 0I;
  #L2fc606.  return v0 @kind object;
  #L2fc608.  v0:= v4.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc60c.  v1:= 63I;
  #L2fc610.  call temp:= `indexOf`(v0, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L2fc616.  v0:= temp;
  #L2fc618.  v0:= v0 + 1;
  #L2fc61c.  v1:= v4.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc620.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fc626.  v2:= temp;
  #L2fc628.  v3:= 35I;
  #L2fc62c.  call temp:= `delimiterOffset`(v1, v0, v2, v3) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IIC)I` @kind static;
  #L2fc632.  v1:= temp;
  #L2fc634.  v2:= v4.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc638.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2fc63e.  v0:= temp @kind object;
  #L2fc640.  return v0 @kind object;
}
procedure `java.lang.String` `encodedUsername`(`okhttp3.HttpUrl` v4 @kind this) @signature `Lokhttp3/HttpUrl;.encodedUsername:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fc654.  v0:= v4.`okhttp3.HttpUrl.username` @type ^`java.lang.String` @kind object;
  #L2fc658.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L2fc65e.  v0:= temp;
  #L2fc660.  if v0 == 0 then goto L2fc66a;
  #L2fc664.  v0:= "" @kind object;
  #L2fc668.  return v0 @kind object;
  #L2fc66a.  v0:= v4.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L2fc66e.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fc674.  v0:= temp;
  #L2fc676.  v0:= v0 + 3;
  #L2fc67a.  v1:= v4.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc67e.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fc684.  v2:= temp;
  #L2fc686.  v3:= ":@" @kind object;
  #L2fc68a.  call temp:= `delimiterOffset`(v1, v0, v2, v3) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L2fc690.  v1:= temp;
  #L2fc692.  v2:= v4.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc696.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2fc69c.  v0:= temp @kind object;
  #L2fc69e.  return v0 @kind object;
}
procedure `boolean` `equals`(`okhttp3.HttpUrl` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/HttpUrl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fc248.  v0:= instanceof @variable v2 @type ^`okhttp3.HttpUrl` @kind boolean;
  #L2fc24c.  if v0 == 0 then goto L2fc26c;
  #L2fc250.  v2:= (`okhttp3.HttpUrl`) v2 @kind object;
  #L2fc254.  v2:= v2.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc258.  v0:= v1.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc25c.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fc262.  v2:= temp;
  #L2fc264.  if v2 == 0 then goto L2fc26c;
  #L2fc268.  v2:= 1I;
  #L2fc26a.  goto L2fc26e;
  #L2fc26c.  v2:= 0I;
  #L2fc26e.  return v2;
}
procedure `java.lang.String` `fragment`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.fragment:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fc6b0.  v0:= v1.`okhttp3.HttpUrl.fragment` @type ^`java.lang.String` @kind object;
  #L2fc6b4.  return v0 @kind object;
}
procedure `int` `hashCode`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fc340.  v0:= v1.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc344.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L2fc34a.  v0:= temp;
  #L2fc34c.  return v0;
}
procedure `java.lang.String` `host`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fc6c8.  v0:= v1.`okhttp3.HttpUrl.host` @type ^`java.lang.String` @kind object;
  #L2fc6cc.  return v0 @kind object;
}
procedure `boolean` `isHttps`(`okhttp3.HttpUrl` v2 @kind this) @signature `Lokhttp3/HttpUrl;.isHttps:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fc280.  v0:= v2.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L2fc284.  v1:= "https" @kind object;
  #L2fc288.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fc28e.  v0:= temp;
  #L2fc290.  return v0;
}
procedure `okhttp3.HttpUrl$Builder` `newBuilder`(`okhttp3.HttpUrl` v3 @kind this) @signature `Lokhttp3/HttpUrl;.newBuilder:()Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2fcd54.  v0:= new `okhttp3.HttpUrl$Builder`;
  #L2fcd58.  call `<init>`(v0) @signature `Lokhttp3/HttpUrl$Builder;.<init>:()V` @kind direct;
  #L2fcd5e.  v1:= v3.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L2fcd62.  v0.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` := v1 @kind object;
  #L2fcd66.  call temp:= `encodedUsername`(v3) @signature `Lokhttp3/HttpUrl;.encodedUsername:()Ljava/lang/String;` @kind virtual;
  #L2fcd6c.  v1:= temp @kind object;
  #L2fcd6e.  v0.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` := v1 @kind object;
  #L2fcd72.  call temp:= `encodedPassword`(v3) @signature `Lokhttp3/HttpUrl;.encodedPassword:()Ljava/lang/String;` @kind virtual;
  #L2fcd78.  v1:= temp @kind object;
  #L2fcd7a.  v0.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` := v1 @kind object;
  #L2fcd7e.  v1:= v3.`okhttp3.HttpUrl.host` @type ^`java.lang.String` @kind object;
  #L2fcd82.  v0.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` := v1 @kind object;
  #L2fcd86.  v1:= v3.`okhttp3.HttpUrl.port` @type ^`int`;
  #L2fcd8a.  v2:= v3.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L2fcd8e.  call temp:= `defaultPort`(v2) @signature `Lokhttp3/HttpUrl;.defaultPort:(Ljava/lang/String;)I` @kind static;
  #L2fcd94.  v2:= temp;
  #L2fcd96.  if v1 == v2 then goto L2fcda0;
  #L2fcd9a.  v1:= v3.`okhttp3.HttpUrl.port` @type ^`int`;
  #L2fcd9e.  goto L2fcda2;
  #L2fcda0.  v1:= -1I;
  #L2fcda2.  v0.`okhttp3.HttpUrl$Builder.port` @type ^`int` := v1;
  #L2fcda6.  v1:= v0.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fcdaa.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L2fcdb0.  v1:= v0.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L2fcdb4.  call temp:= `encodedPathSegments`(v3) @signature `Lokhttp3/HttpUrl;.encodedPathSegments:()Ljava/util/List;` @kind virtual;
  #L2fcdba.  v2:= temp @kind object;
  #L2fcdbc.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2fcdc2.  call temp:= `encodedQuery`(v3) @signature `Lokhttp3/HttpUrl;.encodedQuery:()Ljava/lang/String;` @kind virtual;
  #L2fcdc8.  v1:= temp @kind object;
  #L2fcdca.  call temp:= `encodedQuery`(v0, v1) @signature `Lokhttp3/HttpUrl$Builder;.encodedQuery:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2fcdd0.  call temp:= `encodedFragment`(v3) @signature `Lokhttp3/HttpUrl;.encodedFragment:()Ljava/lang/String;` @kind virtual;
  #L2fcdd6.  v1:= temp @kind object;
  #L2fcdd8.  v0.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` := v1 @kind object;
  #L2fcddc.  return v0 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `newBuilder`(`okhttp3.HttpUrl` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/HttpUrl;.newBuilder:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fcdf0.  v0:= new `okhttp3.HttpUrl$Builder`;
  #L2fcdf4.  call `<init>`(v0) @signature `Lokhttp3/HttpUrl$Builder;.<init>:()V` @kind direct;
  #L2fcdfa.  call temp:= `parse`(v0, v1, v2) @signature `Lokhttp3/HttpUrl$Builder;.parse:(Lokhttp3/HttpUrl;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2fce00.  v2:= temp @kind object;
  #L2fce02.  return v2 @kind object;
  #L2fce04.  v2:= 0I;
  #L2fce06.  return v2 @kind object;
  catch `java.lang.IllegalArgumentException` @[L2fcdf0..L2fce02] goto L2fce04;
}
procedure `java.lang.String` `password`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.password:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fc6e0.  v0:= v1.`okhttp3.HttpUrl.password` @type ^`java.lang.String` @kind object;
  #L2fc6e4.  return v0 @kind object;
}
procedure `java.util.List` `pathSegments`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.pathSegments:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fca90.  v0:= v1.`okhttp3.HttpUrl.pathSegments` @type ^`java.util.List` @kind object;
  #L2fca94.  return v0 @kind object;
}
procedure `int` `pathSize`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.pathSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fc360.  v0:= v1.`okhttp3.HttpUrl.pathSegments` @type ^`java.util.List` @kind object;
  #L2fc364.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fc36a.  v0:= temp;
  #L2fc36c.  return v0;
}
procedure `int` `port`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.port:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fc380.  v0:= v1.`okhttp3.HttpUrl.port` @type ^`int`;
  #L2fc384.  return v0;
}
procedure `java.lang.String` `query`(`okhttp3.HttpUrl` v2 @kind this) @signature `Lokhttp3/HttpUrl;.query:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fc780.  v0:= v2.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fc784.  if v0 != 0 then goto L2fc78c;
  #L2fc788.  v0:= 0I;
  #L2fc78a.  return v0 @kind object;
  #L2fc78c.  v0:= new `java.lang.StringBuilder`;
  #L2fc790.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fc796.  v1:= v2.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fc79a.  call `namesAndValuesToQueryString`(v0, v1) @signature `Lokhttp3/HttpUrl;.namesAndValuesToQueryString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind static;
  #L2fc7a0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fc7a6.  v0:= temp @kind object;
  #L2fc7a8.  return v0 @kind object;
}
procedure `java.lang.String` `queryParameter`(`okhttp3.HttpUrl` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lokhttp3/HttpUrl;.queryParameter:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fc7bc.  v0:= v4.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fc7c0.  v1:= 0I;
  #L2fc7c2.  if v0 != 0 then goto L2fc7c8;
  #L2fc7c6.  return v1 @kind object;
  #L2fc7c8.  v2:= 0I;
  #L2fc7ca.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fc7d0.  v0:= temp;
  #L2fc7d2.  if v2 >= v0 then goto L2fc80a;
  #L2fc7d6.  v3:= v4.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fc7da.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fc7e0.  v3:= temp @kind object;
  #L2fc7e2.  call temp:= `equals`(v5, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fc7e8.  v3:= temp;
  #L2fc7ea.  if v3 == 0 then goto L2fc804;
  #L2fc7ee.  v5:= v4.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fc7f2.  v2:= v2 + 1;
  #L2fc7f6.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fc7fc.  v5:= temp @kind object;
  #L2fc7fe.  v5:= (`java.lang.String`) v5 @kind object;
  #L2fc802.  return v5 @kind object;
  #L2fc804.  v2:= v2 + 2;
  #L2fc808.  goto L2fc7d2;
  #L2fc80a.  return v1 @kind object;
}
procedure `java.lang.String` `queryParameterName`(`okhttp3.HttpUrl` v1 @kind this, `int` v2 ) @signature `Lokhttp3/HttpUrl;.queryParameterName:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fc81c.  v0:= v1.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fc820.  if v0 == 0 then goto L2fc836;
  #L2fc824.  v2:= v2 * 2;
  #L2fc828.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fc82e.  v2:= temp @kind object;
  #L2fc830.  v2:= (`java.lang.String`) v2 @kind object;
  #L2fc834.  return v2 @kind object;
  #L2fc836.  v2:= new `java.lang.IndexOutOfBoundsException`;
  #L2fc83a.  call `<init>`(v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L2fc840.  throw v2;
}
procedure `java.util.Set` `queryParameterNames`(`okhttp3.HttpUrl` v4 @kind this) @signature `Lokhttp3/HttpUrl;.queryParameterNames:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fcc1c.  v0:= v4.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fcc20.  if v0 != 0 then goto L2fcc2e;
  #L2fcc24.  call temp:= `emptySet`() @signature `Ljava/util/Collections;.emptySet:()Ljava/util/Set;` @kind static;
  #L2fcc2a.  v0:= temp @kind object;
  #L2fcc2c.  return v0 @kind object;
  #L2fcc2e.  v0:= new `java.util.LinkedHashSet`;
  #L2fcc32.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L2fcc38.  v1:= 0I;
  #L2fcc3a.  v2:= v4.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fcc3e.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fcc44.  v2:= temp;
  #L2fcc46.  if v1 >= v2 then goto L2fcc66;
  #L2fcc4a.  v3:= v4.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fcc4e.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fcc54.  v3:= temp @kind object;
  #L2fcc56.  v3:= (`java.lang.String`) v3 @kind object;
  #L2fcc5a.  call temp:= `add`(v0, v3) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fcc60.  v1:= v1 + 2;
  #L2fcc64.  goto L2fcc46;
  #L2fcc66.  call temp:= `unmodifiableSet`(v0) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L2fcc6c.  v0:= temp @kind object;
  #L2fcc6e.  return v0 @kind object;
}
procedure `java.lang.String` `queryParameterValue`(`okhttp3.HttpUrl` v1 @kind this, `int` v2 ) @signature `Lokhttp3/HttpUrl;.queryParameterValue:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fc854.  v0:= v1.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fc858.  if v0 == 0 then goto L2fc872;
  #L2fc85c.  v2:= v2 * 2;
  #L2fc860.  v2:= v2 + 1;
  #L2fc864.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fc86a.  v2:= temp @kind object;
  #L2fc86c.  v2:= (`java.lang.String`) v2 @kind object;
  #L2fc870.  return v2 @kind object;
  #L2fc872.  v2:= new `java.lang.IndexOutOfBoundsException`;
  #L2fc876.  call `<init>`(v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L2fc87c.  throw v2;
}
procedure `java.util.List` `queryParameterValues`(`okhttp3.HttpUrl` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lokhttp3/HttpUrl;.queryParameterValues:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2fcb04.  v0:= v5.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fcb08.  if v0 != 0 then goto L2fcb16;
  #L2fcb0c.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L2fcb12.  v6:= temp @kind object;
  #L2fcb14.  return v6 @kind object;
  #L2fcb16.  v0:= new `java.util.ArrayList`;
  #L2fcb1a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2fcb20.  v1:= 0I;
  #L2fcb22.  v2:= v5.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fcb26.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fcb2c.  v2:= temp;
  #L2fcb2e.  if v1 >= v2 then goto L2fcb6a;
  #L2fcb32.  v3:= v5.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fcb36.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fcb3c.  v3:= temp @kind object;
  #L2fcb3e.  call temp:= `equals`(v6, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2fcb44.  v3:= temp;
  #L2fcb46.  if v3 == 0 then goto L2fcb64;
  #L2fcb4a.  v3:= v5.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fcb4e.  v4:= v1 + 1;
  #L2fcb52.  call temp:= `get`(v3, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fcb58.  v3:= temp @kind object;
  #L2fcb5a.  v3:= (`java.lang.String`) v3 @kind object;
  #L2fcb5e.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fcb64.  v1:= v1 + 2;
  #L2fcb68.  goto L2fcb2e;
  #L2fcb6a.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L2fcb70.  v6:= temp @kind object;
  #L2fcb72.  return v6 @kind object;
}
procedure `int` `querySize`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.querySize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fc398.  v0:= v1.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L2fc39c.  if v0 == 0 then goto L2fc3ae;
  #L2fc3a0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fc3a6.  v0:= temp;
  #L2fc3a8.  v0:= v0 / 2;
  #L2fc3ac.  goto L2fc3b0;
  #L2fc3ae.  v0:= 0I;
  #L2fc3b0.  return v0;
}
procedure `java.lang.String` `redact`(`okhttp3.HttpUrl` v2 @kind this) @signature `Lokhttp3/HttpUrl;.redact:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fc890.  v0:= "/..." @kind object;
  #L2fc894.  call temp:= `newBuilder`(v2, v0) @signature `Lokhttp3/HttpUrl;.newBuilder:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2fc89a.  v0:= temp @kind object;
  #L2fc89c.  v1:= "" @kind object;
  #L2fc8a0.  call temp:= `username`(v0, v1) @signature `Lokhttp3/HttpUrl$Builder;.username:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2fc8a6.  v0:= temp @kind object;
  #L2fc8a8.  call temp:= `password`(v0, v1) @signature `Lokhttp3/HttpUrl$Builder;.password:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2fc8ae.  v0:= temp @kind object;
  #L2fc8b0.  call temp:= `build`(v0) @signature `Lokhttp3/HttpUrl$Builder;.build:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2fc8b6.  v0:= temp @kind object;
  #L2fc8b8.  call temp:= `toString`(v0) @signature `Lokhttp3/HttpUrl;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fc8be.  v0:= temp @kind object;
  #L2fc8c0.  return v0 @kind object;
}
procedure `okhttp3.HttpUrl` `resolve`(`okhttp3.HttpUrl` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokhttp3/HttpUrl;.resolve:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @AccessFlag PUBLIC {
    temp;

  #L2fcd28.  call temp:= `newBuilder`(v0, v1) @signature `Lokhttp3/HttpUrl;.newBuilder:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2fcd2e.  v1:= temp @kind object;
  #L2fcd30.  if v1 == 0 then goto L2fcd3e;
  #L2fcd34.  call temp:= `build`(v1) @signature `Lokhttp3/HttpUrl$Builder;.build:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2fcd3a.  v1:= temp @kind object;
  #L2fcd3c.  goto L2fcd40;
  #L2fcd3e.  v1:= 0I;
  #L2fcd40.  return v1 @kind object;
}
procedure `java.lang.String` `scheme`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fc8d4.  v0:= v1.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L2fc8d8.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fc8ec.  v0:= v1.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc8f0.  return v0 @kind object;
}
procedure `java.lang.String` `topPrivateDomain`(`okhttp3.HttpUrl` v2 @kind this) @signature `Lokhttp3/HttpUrl;.topPrivateDomain:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fc904.  v0:= v2.`okhttp3.HttpUrl.host` @type ^`java.lang.String` @kind object;
  #L2fc908.  call temp:= `verifyAsIpAddress`(v0) @signature `Lokhttp3/internal/Util;.verifyAsIpAddress:(Ljava/lang/String;)Z` @kind static;
  #L2fc90e.  v0:= temp;
  #L2fc910.  if v0 == 0 then goto L2fc918;
  #L2fc914.  v0:= 0I;
  #L2fc916.  return v0 @kind object;
  #L2fc918.  call temp:= `get`() @signature `Lokhttp3/internal/publicsuffix/PublicSuffixDatabase;.get:()Lokhttp3/internal/publicsuffix/PublicSuffixDatabase;` @kind static;
  #L2fc91e.  v0:= temp @kind object;
  #L2fc920.  v1:= v2.`okhttp3.HttpUrl.host` @type ^`java.lang.String` @kind object;
  #L2fc924.  call temp:= `getEffectiveTldPlusOne`(v0, v1) @signature `Lokhttp3/internal/publicsuffix/PublicSuffixDatabase;.getEffectiveTldPlusOne:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2fc92a.  v0:= temp @kind object;
  #L2fc92c.  return v0 @kind object;
}
procedure `java.net.URI` `uri`(`okhttp3.HttpUrl` v4 @kind this) @signature `Lokhttp3/HttpUrl;.uri:()Ljava/net/URI;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fc958.  call temp:= `newBuilder`(v4) @signature `Lokhttp3/HttpUrl;.newBuilder:()Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2fc95e.  v0:= temp @kind object;
  #L2fc960.  call temp:= `reencodeForUri`(v0) @signature `Lokhttp3/HttpUrl$Builder;.reencodeForUri:()Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L2fc966.  v0:= temp @kind object;
  #L2fc968.  call temp:= `toString`(v0) @signature `Lokhttp3/HttpUrl$Builder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fc96e.  v0:= temp @kind object;
  #L2fc970.  v1:= new `java.net.URI`;
  #L2fc974.  call `<init>`(v1, v0) @signature `Ljava/net/URI;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fc97a.  return v1 @kind object;
  #L2fc97c.  v1:= Exception @type ^`java.net.URISyntaxException` @kind object;
  #L2fc97e.  v2:= "[\\u0000-\\u001F\\u007F-\\u009F\\p{javaWhitespace}]" @kind object;
  #L2fc982.  v3:= "" @kind object;
  #L2fc986.  call temp:= `replaceAll`(v0, v2, v3) @signature `Ljava/lang/String;.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2fc98c.  v0:= temp @kind object;
  #L2fc98e.  call temp:= `create`(v0) @signature `Ljava/net/URI;.create:(Ljava/lang/String;)Ljava/net/URI;` @kind static;
  #L2fc994.  v0:= temp @kind object;
  #L2fc996.  return v0 @kind object;
  #L2fc998.  v0:= new `java.lang.RuntimeException`;
  #L2fc99c.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L2fc9a2.  throw v0;
  catch `java.net.URISyntaxException` @[L2fc970..L2fc97a] goto L2fc97c;
  catch `java.lang.Exception` @[L2fc97e..L2fc996] goto L2fc998;
}
procedure `java.net.URL` `url`(`okhttp3.HttpUrl` v2 @kind this) @signature `Lokhttp3/HttpUrl;.url:()Ljava/net/URL;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fc9d0.  v0:= new `java.net.URL`;
  #L2fc9d4.  v1:= v2.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L2fc9d8.  call `<init>`(v0, v1) @signature `Ljava/net/URL;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fc9de.  return v0 @kind object;
  #L2fc9e0.  v0:= Exception @type ^`java.net.MalformedURLException` @kind object;
  #L2fc9e2.  v1:= new `java.lang.RuntimeException`;
  #L2fc9e6.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L2fc9ec.  throw v1;
  catch `java.net.MalformedURLException` @[L2fc9d0..L2fc9de] goto L2fc9e0;
}
procedure `java.lang.String` `username`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.username:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fc940.  v0:= v1.`okhttp3.HttpUrl.username` @type ^`java.lang.String` @kind object;
  #L2fc944.  return v0 @kind object;
}
