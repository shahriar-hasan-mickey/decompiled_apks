record `okhttp3.MultipartBody` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.RequestBody` @kind class {
  `okio.ByteString` `okhttp3.MultipartBody.boundary` @AccessFlag PRIVATE_FINAL;
  `long` `okhttp3.MultipartBody.contentLength` @AccessFlag PRIVATE;
  `okhttp3.MediaType` `okhttp3.MultipartBody.contentType` @AccessFlag PRIVATE_FINAL;
  `okhttp3.MediaType` `okhttp3.MultipartBody.originalType` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.MultipartBody.parts` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.MediaType` `@@okhttp3.MultipartBody.ALTERNATIVE` @AccessFlag PUBLIC_STATIC_FINAL;
global `byte`[] `@@okhttp3.MultipartBody.COLONSPACE` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@okhttp3.MultipartBody.CRLF` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@okhttp3.MultipartBody.DASHDASH` @AccessFlag PRIVATE_STATIC_FINAL;
global `okhttp3.MediaType` `@@okhttp3.MultipartBody.DIGEST` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.MediaType` `@@okhttp3.MultipartBody.FORM` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.MediaType` `@@okhttp3.MultipartBody.MIXED` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.MediaType` `@@okhttp3.MultipartBody.PARALLEL` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/MultipartBody;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2fdae0.  v0:= "multipart/mixed" @kind object;
  #L2fdae4.  call temp:= `get`(v0) @signature `Lokhttp3/MediaType;.get:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L2fdaea.  v0:= temp @kind object;
  #L2fdaec.  `@@okhttp3.MultipartBody.MIXED` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L2fdaf0.  v0:= "multipart/alternative" @kind object;
  #L2fdaf4.  call temp:= `get`(v0) @signature `Lokhttp3/MediaType;.get:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L2fdafa.  v0:= temp @kind object;
  #L2fdafc.  `@@okhttp3.MultipartBody.ALTERNATIVE` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L2fdb00.  v0:= "multipart/digest" @kind object;
  #L2fdb04.  call temp:= `get`(v0) @signature `Lokhttp3/MediaType;.get:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L2fdb0a.  v0:= temp @kind object;
  #L2fdb0c.  `@@okhttp3.MultipartBody.DIGEST` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L2fdb10.  v0:= "multipart/parallel" @kind object;
  #L2fdb14.  call temp:= `get`(v0) @signature `Lokhttp3/MediaType;.get:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L2fdb1a.  v0:= temp @kind object;
  #L2fdb1c.  `@@okhttp3.MultipartBody.PARALLEL` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L2fdb20.  v0:= "multipart/form-data" @kind object;
  #L2fdb24.  call temp:= `get`(v0) @signature `Lokhttp3/MediaType;.get:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L2fdb2a.  v0:= temp @kind object;
  #L2fdb2c.  `@@okhttp3.MultipartBody.FORM` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L2fdb30.  v0:= 2I;
  #L2fdb32.  v1:= new `byte`[v0];
  #L2fdb36.  goto L2fdb60;
  #L2fdb3c.  `@@okhttp3.MultipartBody.COLONSPACE` @type ^`byte`[] := v1 @kind object;
  #L2fdb40.  v1:= new `byte`[v0];
  #L2fdb44.  goto L2fdb6c;
  #L2fdb4a.  `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] := v1 @kind object;
  #L2fdb4e.  v0:= new `byte`[v0];
  #L2fdb52.  goto L2fdb78;
  #L2fdb58.  `@@okhttp3.MultipartBody.DASHDASH` @type ^`byte`[] := v0 @kind object;
  #L2fdb5c.  return @kind void;
  #L2fdb5e.  
  #L2fdb60.  v1:= (58I, 32I) @kind object;
  #L2fdb69.  goto L2fdb3c;
  #L2fdb6a.  
  #L2fdb6c.  v1:= (13I, 10I) @kind object;
  #L2fdb75.  goto L2fdb4a;
  #L2fdb76.  
  #L2fdb78.  v0:= (45I, 45I) @kind object;
  #L2fdb81.  goto L2fdb58;
}
procedure `void` `<init>`(`okhttp3.MultipartBody` v2 @kind this, `okio.ByteString` v3 @kind object, `okhttp3.MediaType` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lokhttp3/MultipartBody;.<init>:(Lokio/ByteString;Lokhttp3/MediaType;Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2fdb94.  call `<init>`(v2) @signature `Lokhttp3/RequestBody;.<init>:()V` @kind direct;
  #L2fdb9a.  v0:= -1L;
  #L2fdb9e.  v2.`okhttp3.MultipartBody.contentLength` @type ^`long` := v0 @kind wide;
  #L2fdba2.  v2.`okhttp3.MultipartBody.boundary` @type ^`okio.ByteString` := v3 @kind object;
  #L2fdba6.  v2.`okhttp3.MultipartBody.originalType` @type ^`okhttp3.MediaType` := v4 @kind object;
  #L2fdbaa.  v0:= new `java.lang.StringBuilder`;
  #L2fdbae.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fdbb4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fdbba.  v4:= "; boundary=" @kind object;
  #L2fdbbe.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fdbc4.  call temp:= `utf8`(v3) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L2fdbca.  v3:= temp @kind object;
  #L2fdbcc.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fdbd2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fdbd8.  v3:= temp @kind object;
  #L2fdbda.  call temp:= `get`(v3) @signature `Lokhttp3/MediaType;.get:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L2fdbe0.  v3:= temp @kind object;
  #L2fdbe2.  v2.`okhttp3.MultipartBody.contentType` @type ^`okhttp3.MediaType` := v3 @kind object;
  #L2fdbe6.  call temp:= `immutableList`(v5) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L2fdbec.  v3:= temp @kind object;
  #L2fdbee.  v2.`okhttp3.MultipartBody.parts` @type ^`java.util.List` := v3 @kind object;
  #L2fdbf2.  return @kind void;
}
procedure `void` `appendQuotedString`(`java.lang.StringBuilder` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lokhttp3/MultipartBody;.appendQuotedString:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2fdc04.  v0:= 34I;
  #L2fdc08.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fdc0e.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2fdc14.  v1:= temp;
  #L2fdc16.  v2:= 0I;
  #L2fdc18.  if v2 >= v1 then goto L2fdc68;
  #L2fdc1c.  call temp:= `charAt`(v6, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2fdc22.  v3:= temp;
  #L2fdc24.  v4:= 10I;
  #L2fdc28.  if v3 == v4 then goto L2fdc58;
  #L2fdc2c.  v4:= 13I;
  #L2fdc30.  if v3 == v4 then goto L2fdc4c;
  #L2fdc34.  if v3 == v0 then goto L2fdc40;
  #L2fdc38.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fdc3e.  goto L2fdc62;
  #L2fdc40.  v3:= "%22" @kind object;
  #L2fdc44.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fdc4a.  goto L2fdc62;
  #L2fdc4c.  v3:= "%0D" @kind object;
  #L2fdc50.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fdc56.  goto L2fdc62;
  #L2fdc58.  v3:= "%0A" @kind object;
  #L2fdc5c.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fdc62.  v2:= v2 + 1;
  #L2fdc66.  goto L2fdc18;
  #L2fdc68.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fdc6e.  return @kind void;
}
procedure `long` `writeOrCountBytes`(`okhttp3.MultipartBody` v12 @kind this, `okio.n` v13 @kind object, `boolean` v14 ) @signature `Lokhttp3/MultipartBody;.writeOrCountBytes:(Lokio/n;Z)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L2fd8f8.  if v14 == 0 then goto L2fd90a;
  #L2fd8fc.  v13:= new `okio.k`;
  #L2fd900.  call `<init>`(v13) @signature `Lokio/k;.<init>:()V` @kind direct;
  #L2fd906.  v0:= v13 @kind object;
  #L2fd908.  goto L2fd90c;
  #L2fd90a.  v0:= 0I;
  #L2fd90c.  v1:= v12.`okhttp3.MultipartBody.parts` @type ^`java.util.List` @kind object;
  #L2fd910.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fd916.  v1:= temp;
  #L2fd918.  v2:= 0I;
  #L2fd91a.  v3:= 0L;
  #L2fd91e.  v5:= 0I;
  #L2fd920.  if v5 >= v1 then goto L2fda40;
  #L2fd924.  v6:= v12.`okhttp3.MultipartBody.parts` @type ^`java.util.List` @kind object;
  #L2fd928.  call temp:= `get`(v6, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fd92e.  v6:= temp @kind object;
  #L2fd930.  v6:= (`okhttp3.MultipartBody$Part`) v6 @kind object;
  #L2fd934.  v7:= v6.`okhttp3.MultipartBody$Part.headers` @type ^`okhttp3.Headers` @kind object;
  #L2fd938.  v6:= v6.`okhttp3.MultipartBody$Part.body` @type ^`okhttp3.RequestBody` @kind object;
  #L2fd93c.  v8:= `@@okhttp3.MultipartBody.DASHDASH` @type ^`byte`[] @kind object;
  #L2fd940.  call temp:= `s0`(v13, v8) @signature `Lokio/n;.s0:([B)Lokio/n;` @kind interface;
  #L2fd946.  v8:= v12.`okhttp3.MultipartBody.boundary` @type ^`okio.ByteString` @kind object;
  #L2fd94a.  call temp:= `t0`(v13, v8) @signature `Lokio/n;.t0:(Lokio/ByteString;)Lokio/n;` @kind interface;
  #L2fd950.  v8:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L2fd954.  call temp:= `s0`(v13, v8) @signature `Lokio/n;.s0:([B)Lokio/n;` @kind interface;
  #L2fd95a.  if v7 == 0 then goto L2fd9a8;
  #L2fd95e.  call temp:= `size`(v7) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L2fd964.  v8:= temp;
  #L2fd966.  v9:= 0I;
  #L2fd968.  if v9 >= v8 then goto L2fd9a8;
  #L2fd96c.  call temp:= `name`(v7, v9) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L2fd972.  v10:= temp @kind object;
  #L2fd974.  call temp:= `b0`(v13, v10) @signature `Lokio/n;.b0:(Ljava/lang/String;)Lokio/n;` @kind interface;
  #L2fd97a.  v10:= temp @kind object;
  #L2fd97c.  v11:= `@@okhttp3.MultipartBody.COLONSPACE` @type ^`byte`[] @kind object;
  #L2fd980.  call temp:= `s0`(v10, v11) @signature `Lokio/n;.s0:([B)Lokio/n;` @kind interface;
  #L2fd986.  v10:= temp @kind object;
  #L2fd988.  call temp:= `value`(v7, v9) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L2fd98e.  v11:= temp @kind object;
  #L2fd990.  call temp:= `b0`(v10, v11) @signature `Lokio/n;.b0:(Ljava/lang/String;)Lokio/n;` @kind interface;
  #L2fd996.  v10:= temp @kind object;
  #L2fd998.  v11:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L2fd99c.  call temp:= `s0`(v10, v11) @signature `Lokio/n;.s0:([B)Lokio/n;` @kind interface;
  #L2fd9a2.  v9:= v9 + 1;
  #L2fd9a6.  goto L2fd968;
  #L2fd9a8.  call temp:= `contentType`(v6) @signature `Lokhttp3/RequestBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L2fd9ae.  v7:= temp @kind object;
  #L2fd9b0.  if v7 == 0 then goto L2fd9da;
  #L2fd9b4.  v8:= "Content-Type: " @kind object;
  #L2fd9b8.  call temp:= `b0`(v13, v8) @signature `Lokio/n;.b0:(Ljava/lang/String;)Lokio/n;` @kind interface;
  #L2fd9be.  v8:= temp @kind object;
  #L2fd9c0.  call temp:= `toString`(v7) @signature `Lokhttp3/MediaType;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fd9c6.  v7:= temp @kind object;
  #L2fd9c8.  call temp:= `b0`(v8, v7) @signature `Lokio/n;.b0:(Ljava/lang/String;)Lokio/n;` @kind interface;
  #L2fd9ce.  v7:= temp @kind object;
  #L2fd9d0.  v8:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L2fd9d4.  call temp:= `s0`(v7, v8) @signature `Lokio/n;.s0:([B)Lokio/n;` @kind interface;
  #L2fd9da.  call temp:= `contentLength`(v6) @signature `Lokhttp3/RequestBody;.contentLength:()J` @kind virtual;
  #L2fd9e0.  v7:= temp @kind wide;
  #L2fd9e2.  v9:= -1L;
  #L2fd9e6.  v11:= lcmp(v7, v9);
  #L2fd9ea.  if v11 == 0 then goto L2fda0e;
  #L2fd9ee.  v9:= "Content-Length: " @kind object;
  #L2fd9f2.  call temp:= `b0`(v13, v9) @signature `Lokio/n;.b0:(Ljava/lang/String;)Lokio/n;` @kind interface;
  #L2fd9f8.  v9:= temp @kind object;
  #L2fd9fa.  call temp:= `F0`(v9, v7) @signature `Lokio/n;.F0:(J)Lokio/n;` @kind interface;
  #L2fda00.  v9:= temp @kind object;
  #L2fda02.  v10:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L2fda06.  call temp:= `s0`(v9, v10) @signature `Lokio/n;.s0:([B)Lokio/n;` @kind interface;
  #L2fda0c.  goto L2fda1a;
  #L2fda0e.  if v14 == 0 then goto L2fda1a;
  #L2fda12.  call `a`(v0) @signature `Lokio/k;.a:()V` @kind virtual;
  #L2fda18.  return v9 @kind wide;
  #L2fda1a.  v9:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L2fda1e.  call temp:= `s0`(v13, v9) @signature `Lokio/n;.s0:([B)Lokio/n;` @kind interface;
  #L2fda24.  if v14 == 0 then goto L2fda2c;
  #L2fda28.  v3:= v3 + v7 @kind long;
  #L2fda2a.  goto L2fda32;
  #L2fda2c.  call `writeTo`(v6, v13) @signature `Lokhttp3/RequestBody;.writeTo:(Lokio/n;)V` @kind virtual;
  #L2fda32.  call temp:= `s0`(v13, v9) @signature `Lokio/n;.s0:([B)Lokio/n;` @kind interface;
  #L2fda38.  v5:= v5 + 1;
  #L2fda3c.  goto L2fd920;
  #L2fda40.  v1:= `@@okhttp3.MultipartBody.DASHDASH` @type ^`byte`[] @kind object;
  #L2fda44.  call temp:= `s0`(v13, v1) @signature `Lokio/n;.s0:([B)Lokio/n;` @kind interface;
  #L2fda4a.  v2:= v12.`okhttp3.MultipartBody.boundary` @type ^`okio.ByteString` @kind object;
  #L2fda4e.  call temp:= `t0`(v13, v2) @signature `Lokio/n;.t0:(Lokio/ByteString;)Lokio/n;` @kind interface;
  #L2fda54.  call temp:= `s0`(v13, v1) @signature `Lokio/n;.s0:([B)Lokio/n;` @kind interface;
  #L2fda5a.  v1:= `@@okhttp3.MultipartBody.CRLF` @type ^`byte`[] @kind object;
  #L2fda5e.  call temp:= `s0`(v13, v1) @signature `Lokio/n;.s0:([B)Lokio/n;` @kind interface;
  #L2fda64.  if v14 == 0 then goto L2fda78;
  #L2fda68.  call temp:= `f1`(v0) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L2fda6e.  v13:= temp @kind wide;
  #L2fda70.  v3:= v3 + v13 @kind long;
  #L2fda72.  call `a`(v0) @signature `Lokio/k;.a:()V` @kind virtual;
  #L2fda78.  return v3 @kind wide;
}
procedure `java.lang.String` `boundary`(`okhttp3.MultipartBody` v1 @kind this) @signature `Lokhttp3/MultipartBody;.boundary:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fd88c.  v0:= v1.`okhttp3.MultipartBody.boundary` @type ^`okio.ByteString` @kind object;
  #L2fd890.  call temp:= `utf8`(v0) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L2fd896.  v0:= temp @kind object;
  #L2fd898.  return v0 @kind object;
}
procedure `long` `contentLength`(`okhttp3.MultipartBody` v5 @kind this) @signature `Lokhttp3/MultipartBody;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2fd8c4.  v0:= v5.`okhttp3.MultipartBody.contentLength` @type ^`long` @kind wide;
  #L2fd8c8.  v2:= -1L;
  #L2fd8cc.  v4:= lcmp(v0, v2);
  #L2fd8d0.  if v4 == 0 then goto L2fd8d6;
  #L2fd8d4.  return v0 @kind wide;
  #L2fd8d6.  v0:= 0I;
  #L2fd8d8.  v1:= 1I;
  #L2fd8da.  call temp:= `writeOrCountBytes`(v5, v0, v1) @signature `Lokhttp3/MultipartBody;.writeOrCountBytes:(Lokio/n;Z)J` @kind direct;
  #L2fd8e0.  v0:= temp @kind wide;
  #L2fd8e2.  v5.`okhttp3.MultipartBody.contentLength` @type ^`long` := v0 @kind wide;
  #L2fd8e6.  return v0 @kind wide;
}
procedure `okhttp3.MediaType` `contentType`(`okhttp3.MultipartBody` v1 @kind this) @signature `Lokhttp3/MultipartBody;.contentType:()Lokhttp3/MediaType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fda8c.  v0:= v1.`okhttp3.MultipartBody.contentType` @type ^`okhttp3.MediaType` @kind object;
  #L2fda90.  return v0 @kind object;
}
procedure `okhttp3.MultipartBody$Part` `part`(`okhttp3.MultipartBody` v1 @kind this, `int` v2 ) @signature `Lokhttp3/MultipartBody;.part:(I)Lokhttp3/MultipartBody$Part;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fdabc.  v0:= v1.`okhttp3.MultipartBody.parts` @type ^`java.util.List` @kind object;
  #L2fdac0.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fdac6.  v2:= temp @kind object;
  #L2fdac8.  v2:= (`okhttp3.MultipartBody$Part`) v2 @kind object;
  #L2fdacc.  return v2 @kind object;
}
procedure `java.util.List` `parts`(`okhttp3.MultipartBody` v1 @kind this) @signature `Lokhttp3/MultipartBody;.parts:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fd8ac.  v0:= v1.`okhttp3.MultipartBody.parts` @type ^`java.util.List` @kind object;
  #L2fd8b0.  return v0 @kind object;
}
procedure `int` `size`(`okhttp3.MultipartBody` v1 @kind this) @signature `Lokhttp3/MultipartBody;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fd86c.  v0:= v1.`okhttp3.MultipartBody.parts` @type ^`java.util.List` @kind object;
  #L2fd870.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fd876.  v0:= temp;
  #L2fd878.  return v0;
}
procedure `okhttp3.MediaType` `type`(`okhttp3.MultipartBody` v1 @kind this) @signature `Lokhttp3/MultipartBody;.type:()Lokhttp3/MediaType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fdaa4.  v0:= v1.`okhttp3.MultipartBody.originalType` @type ^`okhttp3.MediaType` @kind object;
  #L2fdaa8.  return v0 @kind object;
}
procedure `void` `writeTo`(`okhttp3.MultipartBody` v1 @kind this, `okio.n` v2 @kind object) @signature `Lokhttp3/MultipartBody;.writeTo:(Lokio/n;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fdc80.  v0:= 0I;
  #L2fdc82.  call temp:= `writeOrCountBytes`(v1, v2, v0) @signature `Lokhttp3/MultipartBody;.writeOrCountBytes:(Lokio/n;Z)J` @kind direct;
  #L2fdc88.  return @kind void;
}
