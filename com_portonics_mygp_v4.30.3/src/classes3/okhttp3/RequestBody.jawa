record `okhttp3.RequestBody` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`okhttp3.RequestBody` v0 @kind this) @signature `Lokhttp3/RequestBody;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2ff72c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ff732.  return @kind void;
}
procedure `okhttp3.RequestBody` `create`(`okhttp3.MediaType` v1 @kind object, `java.io.File` v2 @kind object) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;Ljava/io/File;)Lokhttp3/RequestBody;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2ff684.  v0:= "file == null" @kind object;
  #L2ff688.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2ff68e.  v0:= new `okhttp3.RequestBody$3`;
  #L2ff692.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/RequestBody$3;.<init>:(Lokhttp3/MediaType;Ljava/io/File;)V` @kind direct;
  #L2ff698.  return v0 @kind object;
}
procedure `okhttp3.RequestBody` `create`(`okhttp3.MediaType` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;Ljava/lang/String;)Lokhttp3/RequestBody;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2ff6ac.  v0:= `@@java.nio.charset.StandardCharsets.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L2ff6b0.  if v2 == 0 then goto L2ff6ee;
  #L2ff6b4.  call temp:= `charset`(v2) @signature `Lokhttp3/MediaType;.charset:()Ljava/nio/charset/Charset;` @kind virtual;
  #L2ff6ba.  v0:= temp @kind object;
  #L2ff6bc.  if v0 != 0 then goto L2ff6ee;
  #L2ff6c0.  v0:= `@@java.nio.charset.StandardCharsets.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L2ff6c4.  v1:= new `java.lang.StringBuilder`;
  #L2ff6c8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ff6ce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ff6d4.  v2:= "; charset=utf-8" @kind object;
  #L2ff6d8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ff6de.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ff6e4.  v2:= temp @kind object;
  #L2ff6e6.  call temp:= `parse`(v2) @signature `Lokhttp3/MediaType;.parse:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L2ff6ec.  v2:= temp @kind object;
  #L2ff6ee.  call temp:= `getBytes`(v3, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L2ff6f4.  v3:= temp @kind object;
  #L2ff6f6.  call temp:= `create`(v2, v3) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;[B)Lokhttp3/RequestBody;` @kind static;
  #L2ff6fc.  v2:= temp @kind object;
  #L2ff6fe.  return v2 @kind object;
}
procedure `okhttp3.RequestBody` `create`(`okhttp3.MediaType` v1 @kind object, `okio.ByteString` v2 @kind object) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;Lokio/ByteString;)Lokhttp3/RequestBody;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2ff710.  v0:= new `okhttp3.RequestBody$1`;
  #L2ff714.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/RequestBody$1;.<init>:(Lokhttp3/MediaType;Lokio/ByteString;)V` @kind direct;
  #L2ff71a.  return v0 @kind object;
}
procedure `okhttp3.RequestBody` `create`(`okhttp3.MediaType` v2 @kind object, `byte`[] v3 @kind object) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;[B)Lokhttp3/RequestBody;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2ff630.  v0:= length @variable v3;
  #L2ff632.  v1:= 0I;
  #L2ff634.  call temp:= `create`(v2, v3, v1, v0) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;[BII)Lokhttp3/RequestBody;` @kind static;
  #L2ff63a.  v2:= temp @kind object;
  #L2ff63c.  return v2 @kind object;
}
procedure `okhttp3.RequestBody` `create`(`okhttp3.MediaType` v7 @kind object, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;[BII)Lokhttp3/RequestBody;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2ff650.  v0:= "content == null" @kind object;
  #L2ff654.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2ff65a.  v0:= length @variable v8;
  #L2ff65c.  v1:= (`long`) v0 @kind i2l;
  #L2ff65e.  v3:= (`long`) v9 @kind i2l;
  #L2ff660.  v5:= (`long`) v10 @kind i2l;
  #L2ff662.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokhttp3/internal/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2ff668.  v0:= new `okhttp3.RequestBody$2`;
  #L2ff66c.  call `<init>`(v0, v7, v10, v8, v9) @signature `Lokhttp3/RequestBody$2;.<init>:(Lokhttp3/MediaType;I[BI)V` @kind direct;
  #L2ff672.  return v0 @kind object;
}
procedure `long` `contentLength`(`okhttp3.RequestBody` v2 @kind this) @signature `Lokhttp3/RequestBody;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ff618.  v0:= -1L;
  #L2ff61c.  return v0 @kind wide;
}
procedure `okhttp3.MediaType` `contentType`() @signature `Lokhttp3/RequestBody;.contentType:()Lokhttp3/MediaType;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isDuplex`(`okhttp3.RequestBody` v1 @kind this) @signature `Lokhttp3/RequestBody;.isDuplex:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff5f0.  v0:= 0I;
  #L2ff5f2.  return v0;
}
procedure `boolean` `isOneShot`(`okhttp3.RequestBody` v1 @kind this) @signature `Lokhttp3/RequestBody;.isOneShot:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff604.  v0:= 0I;
  #L2ff606.  return v0;
}
procedure `void` `writeTo`(`okio.n` v0 @kind object) @signature `Lokhttp3/RequestBody;.writeTo:(Lokio/n;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
