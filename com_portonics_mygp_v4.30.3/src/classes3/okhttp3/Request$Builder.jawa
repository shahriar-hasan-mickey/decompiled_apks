record `okhttp3.Request$Builder` @kind class @AccessFlag PUBLIC {
  `okhttp3.RequestBody` `okhttp3.Request$Builder.body` @AccessFlag ;
  `okhttp3.Headers$Builder` `okhttp3.Request$Builder.headers` @AccessFlag ;
  `java.lang.String` `okhttp3.Request$Builder.method` @AccessFlag ;
  `java.util.Map` `okhttp3.Request$Builder.tags` @AccessFlag ;
  `okhttp3.HttpUrl` `okhttp3.Request$Builder.url` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.Request$Builder` v1 @kind this) @signature `Lokhttp3/Request$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ff388.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ff38e.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L2ff394.  v0:= temp @kind object;
  #L2ff396.  v1.`okhttp3.Request$Builder.tags` @type ^`java.util.Map` := v0 @kind object;
  #L2ff39a.  v0:= "GET" @kind object;
  #L2ff39e.  v1.`okhttp3.Request$Builder.method` @type ^`java.lang.String` := v0 @kind object;
  #L2ff3a2.  v0:= new `okhttp3.Headers$Builder`;
  #L2ff3a6.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L2ff3ac.  v1.`okhttp3.Request$Builder.headers` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L2ff3b0.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Request$Builder` v2 @kind this, `okhttp3.Request` v3 @kind object) @signature `Lokhttp3/Request$Builder;.<init>:(Lokhttp3/Request;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2ff3c4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ff3ca.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L2ff3d0.  v0:= temp @kind object;
  #L2ff3d2.  v2.`okhttp3.Request$Builder.tags` @type ^`java.util.Map` := v0 @kind object;
  #L2ff3d6.  v0:= v3.`okhttp3.Request.url` @type ^`okhttp3.HttpUrl` @kind object;
  #L2ff3da.  v2.`okhttp3.Request$Builder.url` @type ^`okhttp3.HttpUrl` := v0 @kind object;
  #L2ff3de.  v0:= v3.`okhttp3.Request.method` @type ^`java.lang.String` @kind object;
  #L2ff3e2.  v2.`okhttp3.Request$Builder.method` @type ^`java.lang.String` := v0 @kind object;
  #L2ff3e6.  v0:= v3.`okhttp3.Request.body` @type ^`okhttp3.RequestBody` @kind object;
  #L2ff3ea.  v2.`okhttp3.Request$Builder.body` @type ^`okhttp3.RequestBody` := v0 @kind object;
  #L2ff3ee.  v0:= v3.`okhttp3.Request.tags` @type ^`java.util.Map` @kind object;
  #L2ff3f2.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2ff3f8.  v0:= temp;
  #L2ff3fa.  if v0 == 0 then goto L2ff408;
  #L2ff3fe.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L2ff404.  v0:= temp @kind object;
  #L2ff406.  goto L2ff416;
  #L2ff408.  v0:= new `java.util.LinkedHashMap`;
  #L2ff40c.  v1:= v3.`okhttp3.Request.tags` @type ^`java.util.Map` @kind object;
  #L2ff410.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L2ff416.  v2.`okhttp3.Request$Builder.tags` @type ^`java.util.Map` := v0 @kind object;
  #L2ff41a.  v3:= v3.`okhttp3.Request.headers` @type ^`okhttp3.Headers` @kind object;
  #L2ff41e.  call temp:= `newBuilder`(v3) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L2ff424.  v3:= temp @kind object;
  #L2ff426.  v2.`okhttp3.Request$Builder.headers` @type ^`okhttp3.Headers$Builder` := v3 @kind object;
  #L2ff42a.  return @kind void;
}
procedure `okhttp3.Request$Builder` `addHeader`(`okhttp3.Request$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Request$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fef9c.  v0:= v1.`okhttp3.Request$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L2fefa0.  call temp:= `add`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2fefa6.  return v1 @kind object;
}
procedure `okhttp3.Request` `build`(`okhttp3.Request$Builder` v2 @kind this) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fef68.  v0:= v2.`okhttp3.Request$Builder.url` @type ^`okhttp3.HttpUrl` @kind object;
  #L2fef6c.  if v0 == 0 then goto L2fef7c;
  #L2fef70.  v0:= new `okhttp3.Request`;
  #L2fef74.  call `<init>`(v0, v2) @signature `Lokhttp3/Request;.<init>:(Lokhttp3/Request$Builder;)V` @kind direct;
  #L2fef7a.  return v0 @kind object;
  #L2fef7c.  v0:= new `java.lang.IllegalStateException`;
  #L2fef80.  v1:= "url == null" @kind object;
  #L2fef84.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fef8a.  throw v0;
}
procedure `okhttp3.Request$Builder` `cacheControl`(`okhttp3.Request$Builder` v2 @kind this, `okhttp3.CacheControl` v3 @kind object) @signature `Lokhttp3/Request$Builder;.cacheControl:(Lokhttp3/CacheControl;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fefb8.  call temp:= `toString`(v3) @signature `Lokhttp3/CacheControl;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fefbe.  v3:= temp @kind object;
  #L2fefc0.  call temp:= `isEmpty`(v3) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L2fefc6.  v0:= temp;
  #L2fefc8.  v1:= "Cache-Control" @kind object;
  #L2fefcc.  if v0 == 0 then goto L2fefda;
  #L2fefd0.  call temp:= `removeHeader`(v2, v1) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2fefd6.  v3:= temp @kind object;
  #L2fefd8.  return v3 @kind object;
  #L2fefda.  call temp:= `header`(v2, v1, v3) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2fefe0.  v3:= temp @kind object;
  #L2fefe2.  return v3 @kind object;
}
procedure `okhttp3.Request$Builder` `delete`(`okhttp3.Request$Builder` v1 @kind this) @signature `Lokhttp3/Request$Builder;.delete:()Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2feff4.  v0:= `@@okhttp3.internal.Util.EMPTY_REQUEST` @type ^`okhttp3.RequestBody` @kind object;
  #L2feff8.  call temp:= `delete`(v1, v0) @signature `Lokhttp3/Request$Builder;.delete:(Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2feffe.  v0:= temp @kind object;
  #L2ff000.  return v0 @kind object;
}
procedure `okhttp3.Request$Builder` `delete`(`okhttp3.Request$Builder` v1 @kind this, `okhttp3.RequestBody` v2 @kind object) @signature `Lokhttp3/Request$Builder;.delete:(Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff014.  v0:= "DELETE" @kind object;
  #L2ff018.  call temp:= `method`(v1, v0, v2) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2ff01e.  v2:= temp @kind object;
  #L2ff020.  return v2 @kind object;
}
procedure `okhttp3.Request$Builder` `get`(`okhttp3.Request$Builder` v2 @kind this) @signature `Lokhttp3/Request$Builder;.get:()Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ff034.  v0:= "GET" @kind object;
  #L2ff038.  v1:= 0I;
  #L2ff03a.  call temp:= `method`(v2, v0, v1) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2ff040.  v0:= temp @kind object;
  #L2ff042.  return v0 @kind object;
}
procedure `okhttp3.Request$Builder` `head`(`okhttp3.Request$Builder` v2 @kind this) @signature `Lokhttp3/Request$Builder;.head:()Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ff054.  v0:= "HEAD" @kind object;
  #L2ff058.  v1:= 0I;
  #L2ff05a.  call temp:= `method`(v2, v0, v1) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2ff060.  v0:= temp @kind object;
  #L2ff062.  return v0 @kind object;
}
procedure `okhttp3.Request$Builder` `header`(`okhttp3.Request$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff074.  v0:= v1.`okhttp3.Request$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L2ff078.  call temp:= `set`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2ff07e.  return v1 @kind object;
}
procedure `okhttp3.Request$Builder` `headers`(`okhttp3.Request$Builder` v0 @kind this, `okhttp3.Headers` v1 @kind object) @signature `Lokhttp3/Request$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2ff090.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L2ff096.  v1:= temp @kind object;
  #L2ff098.  v0.`okhttp3.Request$Builder.headers` @type ^`okhttp3.Headers$Builder` := v1 @kind object;
  #L2ff09c.  return v0 @kind object;
}
procedure `okhttp3.Request$Builder` `method`(`okhttp3.Request$Builder` v2 @kind this, `java.lang.String` v3 @kind object, `okhttp3.RequestBody` v4 @kind object) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ff0b0.  v0:= "method == null" @kind object;
  #L2ff0b4.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2ff0ba.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2ff0c0.  v0:= temp;
  #L2ff0c2.  if v0 == 0 then goto L2ff160;
  #L2ff0c6.  v0:= "method " @kind object;
  #L2ff0ca.  if v4 == 0 then goto L2ff110;
  #L2ff0ce.  call temp:= `permitsRequestBody`(v3) @signature `Lokhttp3/internal/http/HttpMethod;.permitsRequestBody:(Ljava/lang/String;)Z` @kind static;
  #L2ff0d4.  v1:= temp;
  #L2ff0d6.  if v1 == 0 then goto L2ff0dc;
  #L2ff0da.  goto L2ff110;
  #L2ff0dc.  v4:= new `java.lang.IllegalArgumentException`;
  #L2ff0e0.  v1:= new `java.lang.StringBuilder`;
  #L2ff0e4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ff0ea.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ff0f0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ff0f6.  v3:= " must not have a request body." @kind object;
  #L2ff0fa.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ff100.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ff106.  v3:= temp @kind object;
  #L2ff108.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ff10e.  throw v4;
  #L2ff110.  if v4 != 0 then goto L2ff156;
  #L2ff114.  call temp:= `requiresRequestBody`(v3) @signature `Lokhttp3/internal/http/HttpMethod;.requiresRequestBody:(Ljava/lang/String;)Z` @kind static;
  #L2ff11a.  v1:= temp;
  #L2ff11c.  if v1 != 0 then goto L2ff122;
  #L2ff120.  goto L2ff156;
  #L2ff122.  v4:= new `java.lang.IllegalArgumentException`;
  #L2ff126.  v1:= new `java.lang.StringBuilder`;
  #L2ff12a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ff130.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ff136.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ff13c.  v3:= " must have a request body." @kind object;
  #L2ff140.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ff146.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ff14c.  v3:= temp @kind object;
  #L2ff14e.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ff154.  throw v4;
  #L2ff156.  v2.`okhttp3.Request$Builder.method` @type ^`java.lang.String` := v3 @kind object;
  #L2ff15a.  v2.`okhttp3.Request$Builder.body` @type ^`okhttp3.RequestBody` := v4 @kind object;
  #L2ff15e.  return v2 @kind object;
  #L2ff160.  v3:= new `java.lang.IllegalArgumentException`;
  #L2ff164.  v4:= "method.length() == 0" @kind object;
  #L2ff168.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ff16e.  throw v3;
}
procedure `okhttp3.Request$Builder` `patch`(`okhttp3.Request$Builder` v1 @kind this, `okhttp3.RequestBody` v2 @kind object) @signature `Lokhttp3/Request$Builder;.patch:(Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff180.  v0:= "PATCH" @kind object;
  #L2ff184.  call temp:= `method`(v1, v0, v2) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2ff18a.  v2:= temp @kind object;
  #L2ff18c.  return v2 @kind object;
}
procedure `okhttp3.Request$Builder` `post`(`okhttp3.Request$Builder` v1 @kind this, `okhttp3.RequestBody` v2 @kind object) @signature `Lokhttp3/Request$Builder;.post:(Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff1a0.  v0:= "POST" @kind object;
  #L2ff1a4.  call temp:= `method`(v1, v0, v2) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2ff1aa.  v2:= temp @kind object;
  #L2ff1ac.  return v2 @kind object;
}
procedure `okhttp3.Request$Builder` `put`(`okhttp3.Request$Builder` v1 @kind this, `okhttp3.RequestBody` v2 @kind object) @signature `Lokhttp3/Request$Builder;.put:(Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff1c0.  v0:= "PUT" @kind object;
  #L2ff1c4.  call temp:= `method`(v1, v0, v2) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2ff1ca.  v2:= temp @kind object;
  #L2ff1cc.  return v2 @kind object;
}
procedure `okhttp3.Request$Builder` `removeHeader`(`okhttp3.Request$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff1e0.  v0:= v1.`okhttp3.Request$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L2ff1e4.  call temp:= `removeAll`(v0, v2) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2ff1ea.  return v1 @kind object;
}
procedure `okhttp3.Request$Builder` `tag`(`okhttp3.Request$Builder` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lokhttp3/Request$Builder;.tag:(Ljava/lang/Class;Ljava/lang/Object;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff1fc.  v0:= "type == null" @kind object;
  #L2ff200.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2ff206.  if v3 != 0 then goto L2ff216;
  #L2ff20a.  v3:= v1.`okhttp3.Request$Builder.tags` @type ^`java.util.Map` @kind object;
  #L2ff20e.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2ff214.  goto L2ff246;
  #L2ff216.  v0:= v1.`okhttp3.Request$Builder.tags` @type ^`java.util.Map` @kind object;
  #L2ff21a.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2ff220.  v0:= temp;
  #L2ff222.  if v0 == 0 then goto L2ff234;
  #L2ff226.  v0:= new `java.util.LinkedHashMap`;
  #L2ff22a.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L2ff230.  v1.`okhttp3.Request$Builder.tags` @type ^`java.util.Map` := v0 @kind object;
  #L2ff234.  v0:= v1.`okhttp3.Request$Builder.tags` @type ^`java.util.Map` @kind object;
  #L2ff238.  call temp:= `cast`(v2, v3) @signature `Ljava/lang/Class;.cast:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2ff23e.  v3:= temp @kind object;
  #L2ff240.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2ff246.  return v1 @kind object;
}
procedure `okhttp3.Request$Builder` `tag`(`okhttp3.Request$Builder` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/Request$Builder;.tag:(Ljava/lang/Object;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff258.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L2ff25c.  call temp:= `tag`(v1, v0, v2) @signature `Lokhttp3/Request$Builder;.tag:(Ljava/lang/Class;Ljava/lang/Object;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2ff262.  v2:= temp @kind object;
  #L2ff264.  return v2 @kind object;
}
procedure `okhttp3.Request$Builder` `url`(`okhttp3.Request$Builder` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2ff278.  v0:= "url == null" @kind object;
  #L2ff27c.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2ff282.  v2:= 1I;
  #L2ff284.  v3:= 0I;
  #L2ff286.  v5:= 0I;
  #L2ff288.  v6:= 3I;
  #L2ff28a.  v4:= "ws:" @kind object;
  #L2ff28e.  v1:= v8 @kind object;
  #L2ff290.  call temp:= `regionMatches`(v1, v2, v3, v4, v5, v6) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L2ff296.  v0:= temp;
  #L2ff298.  if v0 == 0 then goto L2ff2ca;
  #L2ff29c.  v0:= new `java.lang.StringBuilder`;
  #L2ff2a0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ff2a6.  v1:= "http:" @kind object;
  #L2ff2aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ff2b0.  v1:= 3I;
  #L2ff2b2.  call temp:= `substring`(v8, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2ff2b8.  v8:= temp @kind object;
  #L2ff2ba.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ff2c0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ff2c6.  v8:= temp @kind object;
  #L2ff2c8.  goto L2ff310;
  #L2ff2ca.  v1:= 1I;
  #L2ff2cc.  v2:= 0I;
  #L2ff2ce.  v4:= 0I;
  #L2ff2d0.  v5:= 4I;
  #L2ff2d2.  v3:= "wss:" @kind object;
  #L2ff2d6.  v0:= v8 @kind object;
  #L2ff2d8.  call temp:= `regionMatches`(v0, v1, v2, v3, v4, v5) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L2ff2de.  v0:= temp;
  #L2ff2e0.  if v0 == 0 then goto L2ff310;
  #L2ff2e4.  v0:= new `java.lang.StringBuilder`;
  #L2ff2e8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ff2ee.  v1:= "https:" @kind object;
  #L2ff2f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ff2f8.  v1:= 4I;
  #L2ff2fa.  call temp:= `substring`(v8, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2ff300.  v8:= temp @kind object;
  #L2ff302.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ff308.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ff30e.  v8:= temp @kind object;
  #L2ff310.  call temp:= `get`(v8) @signature `Lokhttp3/HttpUrl;.get:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L2ff316.  v8:= temp @kind object;
  #L2ff318.  call temp:= `url`(v7, v8) @signature `Lokhttp3/Request$Builder;.url:(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2ff31e.  v8:= temp @kind object;
  #L2ff320.  return v8 @kind object;
}
procedure `okhttp3.Request$Builder` `url`(`okhttp3.Request$Builder` v1 @kind this, `java.net.URL` v2 @kind object) @signature `Lokhttp3/Request$Builder;.url:(Ljava/net/URL;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff334.  v0:= "url == null" @kind object;
  #L2ff338.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2ff33e.  call temp:= `toString`(v2) @signature `Ljava/net/URL;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ff344.  v2:= temp @kind object;
  #L2ff346.  call temp:= `get`(v2) @signature `Lokhttp3/HttpUrl;.get:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L2ff34c.  v2:= temp @kind object;
  #L2ff34e.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2ff354.  v2:= temp @kind object;
  #L2ff356.  return v2 @kind object;
}
procedure `okhttp3.Request$Builder` `url`(`okhttp3.Request$Builder` v1 @kind this, `okhttp3.HttpUrl` v2 @kind object) @signature `Lokhttp3/Request$Builder;.url:(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff368.  v0:= "url == null" @kind object;
  #L2ff36c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2ff372.  v1.`okhttp3.Request$Builder.url` @type ^`okhttp3.HttpUrl` := v2 @kind object;
  #L2ff376.  return v1 @kind object;
}
