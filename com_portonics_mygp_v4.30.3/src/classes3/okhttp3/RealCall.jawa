record `okhttp3.RealCall` @kind class @AccessFlag FINAL extends `okhttp3.Call` @kind interface {
  `okhttp3.OkHttpClient` `okhttp3.RealCall.client` @AccessFlag FINAL;
  `boolean` `okhttp3.RealCall.executed` @AccessFlag PRIVATE;
  `boolean` `okhttp3.RealCall.forWebSocket` @AccessFlag FINAL;
  `okhttp3.Request` `okhttp3.RealCall.originalRequest` @AccessFlag FINAL;
  `okhttp3.internal.connection.Transmitter` `okhttp3.RealCall.transmitter` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.RealCall` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object, `okhttp3.Request` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2feeb4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2feeba.  v0.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` := v1 @kind object;
  #L2feebe.  v0.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` := v2 @kind object;
  #L2feec2.  v0.`okhttp3.RealCall.forWebSocket` @type ^`boolean` := v3 @kind boolean;
  #L2feec6.  return @kind void;
}
procedure `okhttp3.internal.connection.Transmitter` `access$000`(`okhttp3.RealCall` v0 @kind object) @signature `Lokhttp3/RealCall;.access$000:(Lokhttp3/RealCall;)Lokhttp3/internal/connection/Transmitter;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2fee7c.  v0:= v0.`okhttp3.RealCall.transmitter` @type ^`okhttp3.internal.connection.Transmitter` @kind object;
  #L2fee80.  return v0 @kind object;
}
procedure `okhttp3.RealCall` `newRealCall`(`okhttp3.OkHttpClient` v1 @kind object, `okhttp3.Request` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @AccessFlag STATIC {
    temp;
    v0;

  #L2febfc.  v0:= new `okhttp3.RealCall`;
  #L2fec00.  call `<init>`(v0, v1, v2, v3) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @kind direct;
  #L2fec06.  v2:= new `okhttp3.internal.connection.Transmitter`;
  #L2fec0a.  call `<init>`(v2, v1, v0) @signature `Lokhttp3/internal/connection/Transmitter;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Call;)V` @kind direct;
  #L2fec10.  v0.`okhttp3.RealCall.transmitter` @type ^`okhttp3.internal.connection.Transmitter` := v2 @kind object;
  #L2fec14.  return v0 @kind object;
}
procedure `void` `cancel`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2feed8.  v0:= v1.`okhttp3.RealCall.transmitter` @type ^`okhttp3.internal.connection.Transmitter` @kind object;
  #L2feedc.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/Transmitter;.cancel:()V` @kind virtual;
  #L2feee2.  return @kind void;
}
procedure `java.lang.Object` `clone`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2feb04.  call temp:= `clone`(v1) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @kind virtual;
  #L2feb0a.  v0:= temp @kind object;
  #L2feb0c.  return v0 @kind object;
}
procedure `okhttp3.Call` `clone`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/Call;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2febb8.  call temp:= `clone`(v1) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @kind virtual;
  #L2febbe.  v0:= temp @kind object;
  #L2febc0.  return v0 @kind object;
}
procedure `okhttp3.RealCall` `clone`(`okhttp3.RealCall` v3 @kind this) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2febd4.  v0:= v3.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2febd8.  v1:= v3.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L2febdc.  v2:= v3.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L2febe0.  call temp:= `newRealCall`(v0, v1, v2) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @kind static;
  #L2febe6.  v0:= temp @kind object;
  #L2febe8.  return v0 @kind object;
}
procedure `void` `enqueue`(`okhttp3.RealCall` v2 @kind this, `okhttp3.Callback` v3 @kind object) @signature `Lokhttp3/RealCall;.enqueue:(Lokhttp3/Callback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2feef4.  @monitorenter v2
  #L2feef6.  v0:= v2.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L2feefa.  if v0 != 0 then goto L2fef2e;
  #L2feefe.  v0:= 1I;
  #L2fef00.  v2.`okhttp3.RealCall.executed` @type ^`boolean` := v0 @kind boolean;
  #L2fef04.  @monitorexit v2
  #L2fef06.  v0:= v2.`okhttp3.RealCall.transmitter` @type ^`okhttp3.internal.connection.Transmitter` @kind object;
  #L2fef0a.  call `callStart`(v0) @signature `Lokhttp3/internal/connection/Transmitter;.callStart:()V` @kind virtual;
  #L2fef10.  v0:= v2.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2fef14.  call temp:= `dispatcher`(v0) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L2fef1a.  v0:= temp @kind object;
  #L2fef1c.  v1:= new `okhttp3.RealCall$AsyncCall`;
  #L2fef20.  call `<init>`(v1, v2, v3) @signature `Lokhttp3/RealCall$AsyncCall;.<init>:(Lokhttp3/RealCall;Lokhttp3/Callback;)V` @kind direct;
  #L2fef26.  call `enqueue`(v0, v1) @signature `Lokhttp3/Dispatcher;.enqueue:(Lokhttp3/RealCall$AsyncCall;)V` @kind virtual;
  #L2fef2c.  return @kind void;
  #L2fef2e.  v3:= new `java.lang.IllegalStateException`;
  #L2fef32.  v0:= "Already Executed" @kind object;
  #L2fef36.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fef3c.  throw v3;
  #L2fef3e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2fef40.  @monitorexit v2
  #L2fef42.  throw v3;
  catch `java.lang.Throwable` @[L2feef6..L2fef06] goto L2fef3e;
  catch `java.lang.Throwable` @[L2fef2e..L2fef42] goto L2fef3e;
}
procedure `okhttp3.Response` `execute`(`okhttp3.RealCall` v2 @kind this) @signature `Lokhttp3/RealCall;.execute:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fec40.  @monitorenter v2
  #L2fec42.  v0:= v2.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L2fec46.  if v0 != 0 then goto L2fecaa;
  #L2fec4a.  v0:= 1I;
  #L2fec4c.  v2.`okhttp3.RealCall.executed` @type ^`boolean` := v0 @kind boolean;
  #L2fec50.  @monitorexit v2
  #L2fec52.  v0:= v2.`okhttp3.RealCall.transmitter` @type ^`okhttp3.internal.connection.Transmitter` @kind object;
  #L2fec56.  call `timeoutEnter`(v0) @signature `Lokhttp3/internal/connection/Transmitter;.timeoutEnter:()V` @kind virtual;
  #L2fec5c.  v0:= v2.`okhttp3.RealCall.transmitter` @type ^`okhttp3.internal.connection.Transmitter` @kind object;
  #L2fec60.  call `callStart`(v0) @signature `Lokhttp3/internal/connection/Transmitter;.callStart:()V` @kind virtual;
  #L2fec66.  v0:= v2.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2fec6a.  call temp:= `dispatcher`(v0) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L2fec70.  v0:= temp @kind object;
  #L2fec72.  call `executed`(v0, v2) @signature `Lokhttp3/Dispatcher;.executed:(Lokhttp3/RealCall;)V` @kind virtual;
  #L2fec78.  call temp:= `getResponseWithInterceptorChain`(v2) @signature `Lokhttp3/RealCall;.getResponseWithInterceptorChain:()Lokhttp3/Response;` @kind virtual;
  #L2fec7e.  v0:= temp @kind object;
  #L2fec80.  v1:= v2.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2fec84.  call temp:= `dispatcher`(v1) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L2fec8a.  v1:= temp @kind object;
  #L2fec8c.  call `finished`(v1, v2) @signature `Lokhttp3/Dispatcher;.finished:(Lokhttp3/RealCall;)V` @kind virtual;
  #L2fec92.  return v0 @kind object;
  #L2fec94.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2fec96.  v1:= v2.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2fec9a.  call temp:= `dispatcher`(v1) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L2feca0.  v1:= temp @kind object;
  #L2feca2.  call `finished`(v1, v2) @signature `Lokhttp3/Dispatcher;.finished:(Lokhttp3/RealCall;)V` @kind virtual;
  #L2feca8.  throw v0;
  #L2fecaa.  v0:= new `java.lang.IllegalStateException`;
  #L2fecae.  v1:= "Already Executed" @kind object;
  #L2fecb2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fecb8.  throw v0;
  #L2fecba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2fecbc.  @monitorexit v2
  #L2fecbe.  throw v0;
  catch `java.lang.Throwable` @[L2fec42..L2fec52] goto L2fecba;
  catch `java.lang.Throwable` @[L2fec66..L2fec80] goto L2fec94;
  catch `java.lang.Throwable` @[L2fecaa..L2fecbe] goto L2fecba;
}
procedure `okhttp3.Response` `getResponseWithInterceptorChain`(`okhttp3.RealCall` v11 @kind this) @signature `Lokhttp3/RealCall;.getResponseWithInterceptorChain:()Lokhttp3/Response;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2fecf0.  v1:= new `java.util.ArrayList`;
  #L2fecf4.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2fecfa.  v0:= v11.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2fecfe.  call temp:= `interceptors`(v0) @signature `Lokhttp3/OkHttpClient;.interceptors:()Ljava/util/List;` @kind virtual;
  #L2fed04.  v0:= temp @kind object;
  #L2fed06.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2fed0c.  v0:= new `okhttp3.internal.http.RetryAndFollowUpInterceptor`;
  #L2fed10.  v2:= v11.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2fed14.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.<init>:(Lokhttp3/OkHttpClient;)V` @kind direct;
  #L2fed1a.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fed20.  v0:= new `okhttp3.internal.http.BridgeInterceptor`;
  #L2fed24.  v2:= v11.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2fed28.  call temp:= `cookieJar`(v2) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L2fed2e.  v2:= temp @kind object;
  #L2fed30.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/http/BridgeInterceptor;.<init>:(Lokhttp3/CookieJar;)V` @kind direct;
  #L2fed36.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fed3c.  v0:= new `okhttp3.internal.cache.CacheInterceptor`;
  #L2fed40.  v2:= v11.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2fed44.  call temp:= `internalCache`(v2) @signature `Lokhttp3/OkHttpClient;.internalCache:()Lokhttp3/internal/cache/InternalCache;` @kind virtual;
  #L2fed4a.  v2:= temp @kind object;
  #L2fed4c.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/cache/CacheInterceptor;.<init>:(Lokhttp3/internal/cache/InternalCache;)V` @kind direct;
  #L2fed52.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fed58.  v0:= new `okhttp3.internal.connection.ConnectInterceptor`;
  #L2fed5c.  v2:= v11.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2fed60.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/connection/ConnectInterceptor;.<init>:(Lokhttp3/OkHttpClient;)V` @kind direct;
  #L2fed66.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fed6c.  v0:= v11.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L2fed70.  if v0 != 0 then goto L2fed86;
  #L2fed74.  v0:= v11.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2fed78.  call temp:= `networkInterceptors`(v0) @signature `Lokhttp3/OkHttpClient;.networkInterceptors:()Ljava/util/List;` @kind virtual;
  #L2fed7e.  v0:= temp @kind object;
  #L2fed80.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2fed86.  v0:= new `okhttp3.internal.http.CallServerInterceptor`;
  #L2fed8a.  v2:= v11.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L2fed8e.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/http/CallServerInterceptor;.<init>:(Z)V` @kind direct;
  #L2fed94.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fed9a.  v10:= new `okhttp3.internal.http.RealInterceptorChain`;
  #L2fed9e.  v2:= v11.`okhttp3.RealCall.transmitter` @type ^`okhttp3.internal.connection.Transmitter` @kind object;
  #L2feda2.  v3:= 0I;
  #L2feda4.  v4:= 0I;
  #L2feda6.  v5:= v11.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L2fedaa.  v0:= v11.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2fedae.  call temp:= `connectTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.connectTimeoutMillis:()I` @kind virtual;
  #L2fedb4.  v7:= temp;
  #L2fedb6.  v0:= v11.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2fedba.  call temp:= `readTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.readTimeoutMillis:()I` @kind virtual;
  #L2fedc0.  v8:= temp;
  #L2fedc2.  v0:= v11.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2fedc6.  call temp:= `writeTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.writeTimeoutMillis:()I` @kind virtual;
  #L2fedcc.  v9:= temp;
  #L2fedce.  v0:= v10 @kind object;
  #L2fedd0.  v6:= v11 @kind object;
  #L2fedd2.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lokhttp3/internal/http/RealInterceptorChain;.<init>:(Ljava/util/List;Lokhttp3/internal/connection/Transmitter;Lokhttp3/internal/connection/Exchange;ILokhttp3/Request;Lokhttp3/Call;III)V` @kind direct;
  #L2fedd8.  v0:= 0I;
  #L2fedda.  v1:= 0I;
  #L2feddc.  v2:= v11.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L2fede0.  call temp:= `proceed`(v10, v2) @signature `Lokhttp3/Interceptor$Chain;.proceed:(Lokhttp3/Request;)Lokhttp3/Response;` @kind interface;
  #L2fede6.  v2:= temp @kind object;
  #L2fede8.  v3:= v11.`okhttp3.RealCall.transmitter` @type ^`okhttp3.internal.connection.Transmitter` @kind object;
  #L2fedec.  call temp:= `isCanceled`(v3) @signature `Lokhttp3/internal/connection/Transmitter;.isCanceled:()Z` @kind virtual;
  #L2fedf2.  v3:= temp;
  #L2fedf4.  if v3 != 0 then goto L2fee04;
  #L2fedf8.  v0:= v11.`okhttp3.RealCall.transmitter` @type ^`okhttp3.internal.connection.Transmitter` @kind object;
  #L2fedfc.  call temp:= `noMoreExchanges`(v0, v1) @signature `Lokhttp3/internal/connection/Transmitter;.noMoreExchanges:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L2fee02.  return v2 @kind object;
  #L2fee04.  call `closeQuietly`(v2) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L2fee0a.  v2:= new `java.io.IOException`;
  #L2fee0e.  v3:= "Canceled" @kind object;
  #L2fee12.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fee18.  throw v2;
  #L2fee1a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2fee1c.  goto L2fee36;
  #L2fee1e.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L2fee20.  v2:= 1I;
  #L2fee22.  v3:= v11.`okhttp3.RealCall.transmitter` @type ^`okhttp3.internal.connection.Transmitter` @kind object;
  #L2fee26.  call temp:= `noMoreExchanges`(v3, v0) @signature `Lokhttp3/internal/connection/Transmitter;.noMoreExchanges:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L2fee2c.  v0:= temp @kind object;
  #L2fee2e.  throw v0;
  #L2fee30.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2fee32.  v2:= v0 @kind object;
  #L2fee34.  v0:= 1I;
  #L2fee36.  if v0 != 0 then goto L2fee44;
  #L2fee3a.  v0:= v11.`okhttp3.RealCall.transmitter` @type ^`okhttp3.internal.connection.Transmitter` @kind object;
  #L2fee3e.  call temp:= `noMoreExchanges`(v0, v1) @signature `Lokhttp3/internal/connection/Transmitter;.noMoreExchanges:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L2fee44.  throw v2;
  catch `java.io.IOException` @[L2feddc..L2fedf4] goto L2fee1e;
  catch `java.lang.Throwable` @[L2feddc..L2fedf4] goto L2fee1a;
  catch `java.io.IOException` @[L2fee04..L2fee1a] goto L2fee1e;
  catch `java.lang.Throwable` @[L2fee04..L2fee1a] goto L2fee1a;
  catch `java.lang.Throwable` @[L2fee22..L2fee30] goto L2fee30;
}
procedure `boolean` `isCanceled`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2feab8.  v0:= v1.`okhttp3.RealCall.transmitter` @type ^`okhttp3.internal.connection.Transmitter` @kind object;
  #L2feabc.  call temp:= `isCanceled`(v0) @signature `Lokhttp3/internal/connection/Transmitter;.isCanceled:()Z` @kind virtual;
  #L2feac2.  v0:= temp;
  #L2feac4.  return v0;
}
procedure `boolean` `isExecuted`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.isExecuted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fead8.  @monitorenter v1
  #L2feada.  v0:= v1.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L2feade.  @monitorexit v1
  #L2feae0.  return v0;
  #L2feae2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2feae4.  @monitorexit v1
  #L2feae6.  throw v0;
  catch `java.lang.Throwable` @[L2feada..L2feade] goto L2feae2;
}
procedure `java.lang.String` `redactedUrl`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.redactedUrl:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;

  #L2feb20.  v0:= v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L2feb24.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2feb2a.  v0:= temp @kind object;
  #L2feb2c.  call temp:= `redact`(v0) @signature `Lokhttp3/HttpUrl;.redact:()Ljava/lang/String;` @kind virtual;
  #L2feb32.  v0:= temp @kind object;
  #L2feb34.  return v0 @kind object;
}
procedure `okhttp3.Request` `request`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fec28.  v0:= v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L2fec2c.  return v0 @kind object;
}
procedure `okio.l0` `timeout`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.timeout:()Lokio/l0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fee94.  v0:= v1.`okhttp3.RealCall.transmitter` @type ^`okhttp3.internal.connection.Transmitter` @kind object;
  #L2fee98.  call temp:= `timeout`(v0) @signature `Lokhttp3/internal/connection/Transmitter;.timeout:()Lokio/l0;` @kind virtual;
  #L2fee9e.  v0:= temp @kind object;
  #L2feea0.  return v0 @kind object;
}
procedure `java.lang.String` `toLoggableString`(`okhttp3.RealCall` v2 @kind this) @signature `Lokhttp3/RealCall;.toLoggableString:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2feb48.  v0:= new `java.lang.StringBuilder`;
  #L2feb4c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2feb52.  call temp:= `isCanceled`(v2) @signature `Lokhttp3/RealCall;.isCanceled:()Z` @kind virtual;
  #L2feb58.  v1:= temp;
  #L2feb5a.  if v1 == 0 then goto L2feb64;
  #L2feb5e.  v1:= "canceled " @kind object;
  #L2feb62.  goto L2feb68;
  #L2feb64.  v1:= "" @kind object;
  #L2feb68.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2feb6e.  v1:= v2.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L2feb72.  if v1 == 0 then goto L2feb7c;
  #L2feb76.  v1:= "web socket" @kind object;
  #L2feb7a.  goto L2feb80;
  #L2feb7c.  v1:= "call" @kind object;
  #L2feb80.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2feb86.  v1:= " to " @kind object;
  #L2feb8a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2feb90.  call temp:= `redactedUrl`(v2) @signature `Lokhttp3/RealCall;.redactedUrl:()Ljava/lang/String;` @kind virtual;
  #L2feb96.  v1:= temp @kind object;
  #L2feb98.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2feb9e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2feba4.  v0:= temp @kind object;
  #L2feba6.  return v0 @kind object;
}
