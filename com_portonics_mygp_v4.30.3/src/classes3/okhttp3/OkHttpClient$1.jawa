record `okhttp3.OkHttpClient$1` @kind class @AccessFlag  extends `okhttp3.internal.Internal` @kind class {
}
procedure `void` `<init>`(`okhttp3.OkHttpClient$1` v0 @kind this) @signature `Lokhttp3/OkHttpClient$1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2fdd1c.  call `<init>`(v0) @signature `Lokhttp3/internal/Internal;.<init>:()V` @kind direct;
  #L2fdd22.  return @kind void;
}
procedure `void` `addLenient`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Headers$Builder` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokhttp3/OkHttpClient$1;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L2fdd34.  call temp:= `addLenient`(v1, v2) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2fdd3a.  return @kind void;
}
procedure `void` `addLenient`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Headers$Builder` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/OkHttpClient$1;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L2fdd4c.  call temp:= `addLenient`(v1, v2, v3) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2fdd52.  return @kind void;
}
procedure `void` `apply`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.ConnectionSpec` v1 @kind object, `javax.net.ssl.SSLSocket` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/OkHttpClient$1;.apply:(Lokhttp3/ConnectionSpec;Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag PUBLIC {
    temp;

  #L2fdd64.  call `apply`(v1, v2, v3) @signature `Lokhttp3/ConnectionSpec;.apply:(Ljavax/net/ssl/SSLSocket;Z)V` @kind virtual;
  #L2fdd6a.  return @kind void;
}
procedure `int` `code`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Response$Builder` v1 @kind object) @signature `Lokhttp3/OkHttpClient$1;.code:(Lokhttp3/Response$Builder;)I` @AccessFlag PUBLIC {
    temp;

  #L2fdcb8.  v1:= v1.`okhttp3.Response$Builder.code` @type ^`int`;
  #L2fdcbc.  return v1;
}
procedure `boolean` `equalsNonHost`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Address` v1 @kind object, `okhttp3.Address` v2 @kind object) @signature `Lokhttp3/OkHttpClient$1;.equalsNonHost:(Lokhttp3/Address;Lokhttp3/Address;)Z` @AccessFlag PUBLIC {
    temp;

  #L2fdc9c.  call temp:= `equalsNonHost`(v1, v2) @signature `Lokhttp3/Address;.equalsNonHost:(Lokhttp3/Address;)Z` @kind virtual;
  #L2fdca2.  v1:= temp;
  #L2fdca4.  return v1;
}
procedure `okhttp3.internal.connection.Exchange` `exchange`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Response` v1 @kind object) @signature `Lokhttp3/OkHttpClient$1;.exchange:(Lokhttp3/Response;)Lokhttp3/internal/connection/Exchange;` @AccessFlag PUBLIC {
    temp;

  #L2fdcec.  v1:= v1.`okhttp3.Response.exchange` @type ^`okhttp3.internal.connection.Exchange` @kind object;
  #L2fdcf0.  return v1 @kind object;
}
procedure `void` `initExchange`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Response$Builder` v1 @kind object, `okhttp3.internal.connection.Exchange` v2 @kind object) @signature `Lokhttp3/OkHttpClient$1;.initExchange:(Lokhttp3/Response$Builder;Lokhttp3/internal/connection/Exchange;)V` @AccessFlag PUBLIC {
    temp;

  #L2fdd7c.  call `initExchange`(v1, v2) @signature `Lokhttp3/Response$Builder;.initExchange:(Lokhttp3/internal/connection/Exchange;)V` @kind virtual;
  #L2fdd82.  return @kind void;
}
procedure `okhttp3.Call` `newWebSocketCall`(`okhttp3.OkHttpClient$1` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object, `okhttp3.Request` v3 @kind object) @signature `Lokhttp3/OkHttpClient$1;.newWebSocketCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;)Lokhttp3/Call;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fdcd0.  v0:= 1I;
  #L2fdcd2.  call temp:= `newRealCall`(v2, v3, v0) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @kind static;
  #L2fdcd8.  v2:= temp @kind object;
  #L2fdcda.  return v2 @kind object;
}
procedure `okhttp3.internal.connection.RealConnectionPool` `realConnectionPool`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.ConnectionPool` v1 @kind object) @signature `Lokhttp3/OkHttpClient$1;.realConnectionPool:(Lokhttp3/ConnectionPool;)Lokhttp3/internal/connection/RealConnectionPool;` @AccessFlag PUBLIC {
    temp;

  #L2fdd04.  v1:= v1.`okhttp3.ConnectionPool.delegate` @type ^`okhttp3.internal.connection.RealConnectionPool` @kind object;
  #L2fdd08.  return v1 @kind object;
}
