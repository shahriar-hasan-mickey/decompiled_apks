record `net.minidev.json.l` @kind class @AccessFlag  extends `net.minidev.json.n` @kind interface {
}
procedure `void` `<init>`(`net.minidev.json.l` v0 @kind this) @signature `Lnet/minidev/json/l;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2f1ca4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f1caa.  return @kind void;
}
procedure `void` `<init>`(`net.minidev.json.l` v0 @kind this, `net.minidev.json.h` v1 @kind object) @signature `Lnet/minidev/json/l;.<init>:(Lnet/minidev/json/h;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2f1cbc.  call `<init>`(v0) @signature `Lnet/minidev/json/l;.<init>:()V` @kind direct;
  #L2f1cc2.  return @kind void;
}
procedure `boolean` `a`(`net.minidev.json.l` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Lnet/minidev/json/l;.a:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2f1bf0.  v0:= 0I;
  #L2f1bf2.  if v7 != 0 then goto L2f1bf8;
  #L2f1bf6.  return v0;
  #L2f1bf8.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2f1bfe.  v1:= temp;
  #L2f1c00.  v2:= 1I;
  #L2f1c02.  if v1 != 0 then goto L2f1c08;
  #L2f1c06.  return v2;
  #L2f1c08.  call temp:= `trim`(v7) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2f1c0e.  v3:= temp @kind object;
  #L2f1c10.  if v3 == v7 then goto L2f1c16;
  #L2f1c14.  return v2;
  #L2f1c16.  call temp:= `charAt`(v7, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f1c1c.  v3:= temp;
  #L2f1c1e.  v4:= 48I;
  #L2f1c22.  if v3 < v4 then goto L2f1c2e;
  #L2f1c26.  v4:= 57I;
  #L2f1c2a.  if v3 <= v4 then goto L2f1c36;
  #L2f1c2e.  v4:= 45I;
  #L2f1c32.  if v3 != v4 then goto L2f1c38;
  #L2f1c36.  return v2;
  #L2f1c38.  v3:= 0I;
  #L2f1c3a.  if v3 >= v1 then goto L2f1c84;
  #L2f1c3e.  call temp:= `charAt`(v7, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f1c44.  v4:= temp;
  #L2f1c46.  call temp:= `b`(v4) @signature `Lnet/minidev/json/p;.b:(C)Z` @kind static;
  #L2f1c4c.  v5:= temp;
  #L2f1c4e.  if v5 == 0 then goto L2f1c54;
  #L2f1c52.  return v2;
  #L2f1c54.  call temp:= `c`(v4) @signature `Lnet/minidev/json/p;.c:(C)Z` @kind static;
  #L2f1c5a.  v5:= temp;
  #L2f1c5c.  if v5 == 0 then goto L2f1c62;
  #L2f1c60.  return v2;
  #L2f1c62.  call temp:= `d`(v4) @signature `Lnet/minidev/json/p;.d:(C)Z` @kind static;
  #L2f1c68.  v5:= temp;
  #L2f1c6a.  if v5 == 0 then goto L2f1c70;
  #L2f1c6e.  return v2;
  #L2f1c70.  call temp:= `f`(v4) @signature `Lnet/minidev/json/p;.f:(C)Z` @kind static;
  #L2f1c76.  v4:= temp;
  #L2f1c78.  if v4 == 0 then goto L2f1c7e;
  #L2f1c7c.  return v2;
  #L2f1c7e.  v3:= v3 + 1;
  #L2f1c82.  goto L2f1c3a;
  #L2f1c84.  call temp:= `a`(v7) @signature `Lnet/minidev/json/p;.a:(Ljava/lang/String;)Z` @kind static;
  #L2f1c8a.  v7:= temp;
  #L2f1c8c.  if v7 == 0 then goto L2f1c92;
  #L2f1c90.  return v2;
  #L2f1c92.  return v0;
}
