record `net.minidev.json.p` @kind class @AccessFlag ABSTRACT {
}
global `net.minidev.json.l` `@@net.minidev.json.p.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `net.minidev.json.m` `@@net.minidev.json.p.b` @AccessFlag PUBLIC_STATIC_FINAL;
global `net.minidev.json.k` `@@net.minidev.json.p.c` @AccessFlag PUBLIC_STATIC_FINAL;
global `net.minidev.json.j` `@@net.minidev.json.p.d` @AccessFlag PUBLIC_STATIC_FINAL;
global `net.minidev.json.i` `@@net.minidev.json.p.e` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lnet/minidev/json/p;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2f1ee8.  v0:= new `net.minidev.json.l`;
  #L2f1eec.  v1:= 0I;
  #L2f1eee.  call `<init>`(v0, v1) @signature `Lnet/minidev/json/l;.<init>:(Lnet/minidev/json/h;)V` @kind direct;
  #L2f1ef4.  `@@net.minidev.json.p.a` @type ^`net.minidev.json.l` := v0 @kind object;
  #L2f1ef8.  v0:= new `net.minidev.json.m`;
  #L2f1efc.  call `<init>`(v0, v1) @signature `Lnet/minidev/json/m;.<init>:(Lnet/minidev/json/h;)V` @kind direct;
  #L2f1f02.  `@@net.minidev.json.p.b` @type ^`net.minidev.json.m` := v0 @kind object;
  #L2f1f06.  v0:= new `net.minidev.json.k`;
  #L2f1f0a.  call `<init>`(v0, v1) @signature `Lnet/minidev/json/k;.<init>:(Lnet/minidev/json/h;)V` @kind direct;
  #L2f1f10.  `@@net.minidev.json.p.c` @type ^`net.minidev.json.k` := v0 @kind object;
  #L2f1f14.  v0:= new `net.minidev.json.j`;
  #L2f1f18.  call `<init>`(v0, v1) @signature `Lnet/minidev/json/j;.<init>:(Lnet/minidev/json/h;)V` @kind direct;
  #L2f1f1e.  `@@net.minidev.json.p.d` @type ^`net.minidev.json.j` := v0 @kind object;
  #L2f1f22.  v0:= new `net.minidev.json.i`;
  #L2f1f26.  call `<init>`(v0, v1) @signature `Lnet/minidev/json/i;.<init>:(Lnet/minidev/json/h;)V` @kind direct;
  #L2f1f2c.  `@@net.minidev.json.p.e` @type ^`net.minidev.json.i` := v0 @kind object;
  #L2f1f30.  return @kind void;
}
procedure `boolean` `a`(`java.lang.String` v3 @kind object) @signature `Lnet/minidev/json/p;.a:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2f1d18.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2f1d1e.  v0:= temp;
  #L2f1d20.  v1:= 0I;
  #L2f1d22.  v2:= 3I;
  #L2f1d24.  if v0 >= v2 then goto L2f1d2a;
  #L2f1d28.  return v1;
  #L2f1d2a.  call temp:= `charAt`(v3, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f1d30.  v0:= temp;
  #L2f1d32.  v2:= 110I;
  #L2f1d36.  if v0 != v2 then goto L2f1d48;
  #L2f1d3a.  v0:= "null" @kind object;
  #L2f1d3e.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f1d44.  v3:= temp;
  #L2f1d46.  return v3;
  #L2f1d48.  v2:= 116I;
  #L2f1d4c.  if v0 != v2 then goto L2f1d5e;
  #L2f1d50.  v0:= "true" @kind object;
  #L2f1d54.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f1d5a.  v3:= temp;
  #L2f1d5c.  return v3;
  #L2f1d5e.  v2:= 102I;
  #L2f1d62.  if v0 != v2 then goto L2f1d74;
  #L2f1d66.  v0:= "false" @kind object;
  #L2f1d6a.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f1d70.  v3:= temp;
  #L2f1d72.  return v3;
  #L2f1d74.  v2:= 78I;
  #L2f1d78.  if v0 != v2 then goto L2f1d8a;
  #L2f1d7c.  v0:= "NaN" @kind object;
  #L2f1d80.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f1d86.  v3:= temp;
  #L2f1d88.  return v3;
  #L2f1d8a.  return v1;
}
procedure `boolean` `b`(`char` v1 ) @signature `Lnet/minidev/json/p;.b:(C)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2f1d9c.  v0:= 13I;
  #L2f1da0.  if v1 == v0 then goto L2f1dc2;
  #L2f1da4.  v0:= 10I;
  #L2f1da8.  if v1 == v0 then goto L2f1dc2;
  #L2f1dac.  v0:= 9I;
  #L2f1db0.  if v1 == v0 then goto L2f1dc2;
  #L2f1db4.  v0:= 32I;
  #L2f1db8.  if v1 != v0 then goto L2f1dbe;
  #L2f1dbc.  goto L2f1dc2;
  #L2f1dbe.  v1:= 0I;
  #L2f1dc0.  goto L2f1dc4;
  #L2f1dc2.  v1:= 1I;
  #L2f1dc4.  return v1;
}
procedure `boolean` `c`(`char` v1 ) @signature `Lnet/minidev/json/p;.c:(C)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2f1dd8.  v0:= 123I;
  #L2f1ddc.  if v1 == v0 then goto L2f1e1e;
  #L2f1de0.  v0:= 91I;
  #L2f1de4.  if v1 == v0 then goto L2f1e1e;
  #L2f1de8.  v0:= 44I;
  #L2f1dec.  if v1 == v0 then goto L2f1e1e;
  #L2f1df0.  v0:= 125I;
  #L2f1df4.  if v1 == v0 then goto L2f1e1e;
  #L2f1df8.  v0:= 93I;
  #L2f1dfc.  if v1 == v0 then goto L2f1e1e;
  #L2f1e00.  v0:= 58I;
  #L2f1e04.  if v1 == v0 then goto L2f1e1e;
  #L2f1e08.  v0:= 39I;
  #L2f1e0c.  if v1 == v0 then goto L2f1e1e;
  #L2f1e10.  v0:= 34I;
  #L2f1e14.  if v1 != v0 then goto L2f1e1a;
  #L2f1e18.  goto L2f1e1e;
  #L2f1e1a.  v1:= 0I;
  #L2f1e1c.  goto L2f1e20;
  #L2f1e1e.  v1:= 1I;
  #L2f1e20.  return v1;
}
procedure `boolean` `d`(`char` v1 ) @signature `Lnet/minidev/json/p;.d:(C)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2f1e34.  v0:= 8I;
  #L2f1e38.  if v1 == v0 then goto L2f1e52;
  #L2f1e3c.  v0:= 12I;
  #L2f1e40.  if v1 == v0 then goto L2f1e52;
  #L2f1e44.  v0:= 10I;
  #L2f1e48.  if v1 != v0 then goto L2f1e4e;
  #L2f1e4c.  goto L2f1e52;
  #L2f1e4e.  v1:= 0I;
  #L2f1e50.  goto L2f1e54;
  #L2f1e52.  v1:= 1I;
  #L2f1e54.  return v1;
}
procedure `boolean` `e`(`char` v1 ) @signature `Lnet/minidev/json/p;.e:(C)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2f1e68.  v0:= 125I;
  #L2f1e6c.  if v1 == v0 then goto L2f1e8e;
  #L2f1e70.  v0:= 93I;
  #L2f1e74.  if v1 == v0 then goto L2f1e8e;
  #L2f1e78.  v0:= 44I;
  #L2f1e7c.  if v1 == v0 then goto L2f1e8e;
  #L2f1e80.  v0:= 58I;
  #L2f1e84.  if v1 != v0 then goto L2f1e8a;
  #L2f1e88.  goto L2f1e8e;
  #L2f1e8a.  v1:= 0I;
  #L2f1e8c.  goto L2f1e90;
  #L2f1e8e.  v1:= 1I;
  #L2f1e90.  return v1;
}
procedure `boolean` `f`(`char` v1 ) @signature `Lnet/minidev/json/p;.f:(C)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2f1ea4.  if v1 < 0 then goto L2f1eb0;
  #L2f1ea8.  v0:= 31I;
  #L2f1eac.  if v1 <= v0 then goto L2f1ed0;
  #L2f1eb0.  v0:= 127I;
  #L2f1eb4.  if v1 < v0 then goto L2f1ec0;
  #L2f1eb8.  v0:= 159I;
  #L2f1ebc.  if v1 <= v0 then goto L2f1ed0;
  #L2f1ec0.  v0:= 8192I;
  #L2f1ec4.  if v1 < v0 then goto L2f1ed4;
  #L2f1ec8.  v0:= 8447I;
  #L2f1ecc.  if v1 > v0 then goto L2f1ed4;
  #L2f1ed0.  v1:= 1I;
  #L2f1ed2.  goto L2f1ed6;
  #L2f1ed4.  v1:= 0I;
  #L2f1ed6.  return v1;
}
