record `net.minidev.json.parser.h` @kind class @AccessFlag PUBLIC {
  `char`[] `net.minidev.json.parser.h.a` @AccessFlag ;
  `int` `net.minidev.json.parser.h.b` @AccessFlag ;
}
procedure `void` `<init>`(`net.minidev.json.parser.h` v0 @kind this, `int` v1 ) @signature `Lnet/minidev/json/parser/h;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2f2250.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f2256.  v1:= new `char`[v1];
  #L2f225a.  v0.`net.minidev.json.parser.h.a` @type ^`char`[] := v1 @kind object;
  #L2f225e.  v1:= -1I;
  #L2f2260.  v0.`net.minidev.json.parser.h.b` @type ^`int` := v1;
  #L2f2264.  return @kind void;
}
procedure `void` `a`(`net.minidev.json.parser.h` v4 @kind this, `char` v5 ) @signature `Lnet/minidev/json/parser/h;.a:(C)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2f2278.  v0:= v4.`net.minidev.json.parser.h.b` @type ^`int`;
  #L2f227c.  v0:= v0 + 1;
  #L2f2280.  v4.`net.minidev.json.parser.h.b` @type ^`int` := v0;
  #L2f2284.  v1:= v4.`net.minidev.json.parser.h.a` @type ^`char`[] @kind object;
  #L2f2288.  v2:= length @variable v1;
  #L2f228a.  if v2 > v0 then goto L2f22aa;
  #L2f228e.  v0:= length @variable v1;
  #L2f2290.  v0:= v0 * 2;
  #L2f2294.  v0:= v0 + 1;
  #L2f2298.  v0:= new `char`[v0];
  #L2f229c.  v2:= length @variable v1;
  #L2f229e.  v3:= 0I;
  #L2f22a0.  call `arraycopy`(v1, v3, v0, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2f22a6.  v4.`net.minidev.json.parser.h.a` @type ^`char`[] := v0 @kind object;
  #L2f22aa.  v0:= v4.`net.minidev.json.parser.h.a` @type ^`char`[] @kind object;
  #L2f22ae.  v1:= v4.`net.minidev.json.parser.h.b` @type ^`int`;
  #L2f22b2.  v0[v1]:= v5 @kind char;
  #L2f22b6.  return @kind void;
}
procedure `void` `b`(`net.minidev.json.parser.h` v1 @kind this) @signature `Lnet/minidev/json/parser/h;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f22c8.  v0:= -1I;
  #L2f22ca.  v1.`net.minidev.json.parser.h.b` @type ^`int` := v0;
  #L2f22ce.  return @kind void;
}
procedure `java.lang.String` `toString`(`net.minidev.json.parser.h` v4 @kind this) @signature `Lnet/minidev/json/parser/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2f2224.  v0:= new `java.lang.String`;
  #L2f2228.  v1:= v4.`net.minidev.json.parser.h.a` @type ^`char`[] @kind object;
  #L2f222c.  v2:= v4.`net.minidev.json.parser.h.b` @type ^`int`;
  #L2f2230.  v2:= v2 + 1;
  #L2f2234.  v3:= 0I;
  #L2f2236.  call `<init>`(v0, v1, v3, v2) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L2f223c.  return v0 @kind object;
}
