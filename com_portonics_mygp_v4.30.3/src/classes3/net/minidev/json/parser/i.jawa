record `net.minidev.json.parser.i` @kind class @AccessFlag ABSTRACT {
  `char` `net.minidev.json.parser.i.f` @AccessFlag PROTECTED;
  `net.minidev.json.parser.c` `net.minidev.json.parser.i.g` @AccessFlag PROTECTED;
  `net.minidev.json.parser.d` `net.minidev.json.parser.i.h` @AccessFlag PROTECTED;
  `net.minidev.json.parser.h` `net.minidev.json.parser.i.i` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `net.minidev.json.parser.i.j` @AccessFlag PROTECTED;
  `java.lang.String` `net.minidev.json.parser.i.k` @AccessFlag PROTECTED;
  `int` `net.minidev.json.parser.i.l` @AccessFlag PROTECTED;
  `boolean` `net.minidev.json.parser.i.m` @AccessFlag PROTECTED_FINAL;
  `boolean` `net.minidev.json.parser.i.n` @AccessFlag PROTECTED_FINAL;
  `boolean` `net.minidev.json.parser.i.o` @AccessFlag PROTECTED_FINAL;
  `boolean` `net.minidev.json.parser.i.p` @AccessFlag PROTECTED_FINAL;
  `boolean` `net.minidev.json.parser.i.q` @AccessFlag PROTECTED_FINAL;
  `boolean` `net.minidev.json.parser.i.r` @AccessFlag PROTECTED_FINAL;
  `boolean` `net.minidev.json.parser.i.s` @AccessFlag PROTECTED_FINAL;
  `boolean` `net.minidev.json.parser.i.t` @AccessFlag PROTECTED_FINAL;
  `boolean` `net.minidev.json.parser.i.u` @AccessFlag PROTECTED_FINAL;
  `boolean` `net.minidev.json.parser.i.v` @AccessFlag PROTECTED_FINAL;
}
global `boolean`[] `@@net.minidev.json.parser.i.a` @AccessFlag PROTECTED_STATIC;
global `boolean`[] `@@net.minidev.json.parser.i.b` @AccessFlag PROTECTED_STATIC;
global `boolean`[] `@@net.minidev.json.parser.i.c` @AccessFlag PROTECTED_STATIC;
global `boolean`[] `@@net.minidev.json.parser.i.d` @AccessFlag PROTECTED_STATIC;
global `boolean`[] `@@net.minidev.json.parser.i.e` @AccessFlag PROTECTED_STATIC;
procedure `void` `<clinit>`() @signature `Lnet/minidev/json/parser/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2f2d24.  v0:= 126I;
  #L2f2d28.  v1:= new `boolean`[v0];
  #L2f2d2c.  `@@net.minidev.json.parser.i.a` @type ^`boolean`[] := v1 @kind object;
  #L2f2d30.  v2:= new `boolean`[v0];
  #L2f2d34.  `@@net.minidev.json.parser.i.b` @type ^`boolean`[] := v2 @kind object;
  #L2f2d38.  v3:= new `boolean`[v0];
  #L2f2d3c.  `@@net.minidev.json.parser.i.c` @type ^`boolean`[] := v3 @kind object;
  #L2f2d40.  v4:= new `boolean`[v0];
  #L2f2d44.  `@@net.minidev.json.parser.i.d` @type ^`boolean`[] := v4 @kind object;
  #L2f2d48.  v0:= new `boolean`[v0];
  #L2f2d4c.  `@@net.minidev.json.parser.i.e` @type ^`boolean`[] := v0 @kind object;
  #L2f2d50.  v5:= 26I;
  #L2f2d54.  v6:= 1I;
  #L2f2d56.  v3[v5]:= v6 @kind boolean;
  #L2f2d5a.  v7:= 58I;
  #L2f2d5e.  v3[v7]:= v6 @kind boolean;
  #L2f2d62.  v4[v5]:= v6 @kind boolean;
  #L2f2d66.  v3:= 125I;
  #L2f2d6a.  v4[v3]:= v6 @kind boolean;
  #L2f2d6e.  v8:= 44I;
  #L2f2d72.  v4[v8]:= v6 @kind boolean;
  #L2f2d76.  v2[v5]:= v6 @kind boolean;
  #L2f2d7a.  v4:= 93I;
  #L2f2d7e.  v2[v4]:= v6 @kind boolean;
  #L2f2d82.  v2[v8]:= v6 @kind boolean;
  #L2f2d86.  v0[v5]:= v6 @kind boolean;
  #L2f2d8a.  v1[v7]:= v6 @kind boolean;
  #L2f2d8e.  v1[v8]:= v6 @kind boolean;
  #L2f2d92.  v1[v5]:= v6 @kind boolean;
  #L2f2d96.  v1[v3]:= v6 @kind boolean;
  #L2f2d9a.  v1[v4]:= v6 @kind boolean;
  #L2f2d9e.  return @kind void;
}
procedure `void` `<init>`(`net.minidev.json.parser.i` v3 @kind this, `int` v4 ) @signature `Lnet/minidev/json/parser/i;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2f2db0.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2f2db6.  v0:= new `net.minidev.json.parser.h`;
  #L2f2dba.  v1:= 15I;
  #L2f2dbe.  call `<init>`(v0, v1) @signature `Lnet/minidev/json/parser/h;.<init>:(I)V` @kind direct;
  #L2f2dc4.  v3.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` := v0 @kind object;
  #L2f2dc8.  v0:= v4 ^& 4;
  #L2f2dcc.  v1:= 0I;
  #L2f2dce.  v2:= 1I;
  #L2f2dd0.  if v0 <= 0 then goto L2f2dd8;
  #L2f2dd4.  v0:= 1I;
  #L2f2dd6.  goto L2f2dda;
  #L2f2dd8.  v0:= 0I;
  #L2f2dda.  v3.`net.minidev.json.parser.i.n` @type ^`boolean` := v0 @kind boolean;
  #L2f2dde.  v0:= v4 ^& 2;
  #L2f2de2.  if v0 <= 0 then goto L2f2dea;
  #L2f2de6.  v0:= 1I;
  #L2f2de8.  goto L2f2dec;
  #L2f2dea.  v0:= 0I;
  #L2f2dec.  v3.`net.minidev.json.parser.i.o` @type ^`boolean` := v0 @kind boolean;
  #L2f2df0.  v0:= v4 ^& 1;
  #L2f2df4.  if v0 <= 0 then goto L2f2dfc;
  #L2f2df8.  v0:= 1I;
  #L2f2dfa.  goto L2f2dfe;
  #L2f2dfc.  v0:= 0I;
  #L2f2dfe.  v3.`net.minidev.json.parser.i.p` @type ^`boolean` := v0 @kind boolean;
  #L2f2e02.  v0:= v4 ^& 8;
  #L2f2e06.  if v0 <= 0 then goto L2f2e0e;
  #L2f2e0a.  v0:= 1I;
  #L2f2e0c.  goto L2f2e10;
  #L2f2e0e.  v0:= 0I;
  #L2f2e10.  v3.`net.minidev.json.parser.i.t` @type ^`boolean` := v0 @kind boolean;
  #L2f2e14.  v0:= v4 ^& 16;
  #L2f2e18.  if v0 <= 0 then goto L2f2e20;
  #L2f2e1c.  v0:= 1I;
  #L2f2e1e.  goto L2f2e22;
  #L2f2e20.  v0:= 0I;
  #L2f2e22.  v3.`net.minidev.json.parser.i.v` @type ^`boolean` := v0 @kind boolean;
  #L2f2e26.  v0:= v4 ^& 32;
  #L2f2e2a.  if v0 <= 0 then goto L2f2e32;
  #L2f2e2e.  v0:= 1I;
  #L2f2e30.  goto L2f2e34;
  #L2f2e32.  v0:= 0I;
  #L2f2e34.  v3.`net.minidev.json.parser.i.m` @type ^`boolean` := v0 @kind boolean;
  #L2f2e38.  v0:= v4 ^& 64;
  #L2f2e3c.  if v0 <= 0 then goto L2f2e44;
  #L2f2e40.  v0:= 1I;
  #L2f2e42.  goto L2f2e46;
  #L2f2e44.  v0:= 0I;
  #L2f2e46.  v3.`net.minidev.json.parser.i.q` @type ^`boolean` := v0 @kind boolean;
  #L2f2e4a.  v0:= v4 ^& 128;
  #L2f2e4e.  if v0 <= 0 then goto L2f2e56;
  #L2f2e52.  v0:= 1I;
  #L2f2e54.  goto L2f2e58;
  #L2f2e56.  v0:= 0I;
  #L2f2e58.  v3.`net.minidev.json.parser.i.u` @type ^`boolean` := v0 @kind boolean;
  #L2f2e5c.  v0:= v4 ^& 768;
  #L2f2e60.  if v0 != 0 then goto L2f2e68;
  #L2f2e64.  v0:= 1I;
  #L2f2e66.  goto L2f2e6a;
  #L2f2e68.  v0:= 0I;
  #L2f2e6a.  v3.`net.minidev.json.parser.i.r` @type ^`boolean` := v0 @kind boolean;
  #L2f2e6e.  v4:= v4 ^& 512;
  #L2f2e72.  if v4 != 0 then goto L2f2e78;
  #L2f2e76.  v1:= 1I;
  #L2f2e78.  v3.`net.minidev.json.parser.i.s` @type ^`boolean` := v1 @kind boolean;
  #L2f2e7c.  return @kind void;
}
procedure `void` `a`(`net.minidev.json.parser.i` v5 @kind this) @signature `Lnet/minidev/json/parser/i;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2f2e90.  v0:= v5.`net.minidev.json.parser.i.t` @type ^`boolean` @kind boolean;
  #L2f2e94.  if v0 == 0 then goto L2f2e9a;
  #L2f2e98.  return @kind void;
  #L2f2e9a.  v0:= v5.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2e9e.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2f2ea4.  v0:= temp;
  #L2f2ea6.  v1:= 0I;
  #L2f2ea8.  v2:= 0I;
  #L2f2eaa.  if v2 >= v0 then goto L2f2f0a;
  #L2f2eae.  v3:= v5.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2eb2.  call temp:= `charAt`(v3, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f2eb8.  v3:= temp;
  #L2f2eba.  if v3 >= 0 then goto L2f2ec0;
  #L2f2ebe.  goto L2f2ed0;
  #L2f2ec0.  v4:= 31I;
  #L2f2ec4.  if v3 <= v4 then goto L2f2ef0;
  #L2f2ec8.  v4:= 127I;
  #L2f2ecc.  if v3 == v4 then goto L2f2ed6;
  #L2f2ed0.  v2:= v2 + 1;
  #L2f2ed4.  goto L2f2eaa;
  #L2f2ed6.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2eda.  v4:= v5.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2ede.  v4:= v4 + v2 @kind int;
  #L2f2ee0.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L2f2ee6.  v2:= temp @kind object;
  #L2f2ee8.  call `<init>`(v0, v4, v1, v2) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2eee.  throw v0;
  #L2f2ef0.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2ef4.  v4:= v5.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2ef8.  v4:= v4 + v2 @kind int;
  #L2f2efa.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L2f2f00.  v2:= temp @kind object;
  #L2f2f02.  call `<init>`(v0, v4, v1, v2) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2f08.  throw v0;
  #L2f2f0a.  return @kind void;
}
procedure `void` `b`(`net.minidev.json.parser.i` v7 @kind this) @signature `Lnet/minidev/json/parser/i;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2f2f1c.  v0:= v7.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2f20.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2f2f26.  v0:= temp;
  #L2f2f28.  v1:= 1I;
  #L2f2f2a.  if v0 != v1 then goto L2f2f30;
  #L2f2f2e.  return @kind void;
  #L2f2f30.  v2:= 2I;
  #L2f2f32.  v3:= 6I;
  #L2f2f34.  if v0 != v2 then goto L2f2f62;
  #L2f2f38.  v0:= v7.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2f3c.  v1:= "00" @kind object;
  #L2f2f40.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f2f46.  v0:= temp;
  #L2f2f48.  if v0 != 0 then goto L2f2f4e;
  #L2f2f4c.  return @kind void;
  #L2f2f4e.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2f52.  v1:= v7.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2f56.  v2:= v7.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2f5a.  call `<init>`(v0, v1, v3, v2) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2f60.  throw v0;
  #L2f2f62.  v0:= v7.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2f66.  v4:= 0I;
  #L2f2f68.  call temp:= `charAt`(v0, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f2f6e.  v0:= temp;
  #L2f2f70.  v4:= v7.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2f74.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f2f7a.  v1:= temp;
  #L2f2f7c.  v4:= 45I;
  #L2f2f80.  v5:= 57I;
  #L2f2f84.  v6:= 48I;
  #L2f2f88.  if v0 != v4 then goto L2f2fbc;
  #L2f2f8c.  v0:= v7.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2f90.  call temp:= `charAt`(v0, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f2f96.  v0:= temp;
  #L2f2f98.  if v1 != v6 then goto L2f2fba;
  #L2f2f9c.  if v0 < v6 then goto L2f2fba;
  #L2f2fa0.  if v0 <= v5 then goto L2f2fa6;
  #L2f2fa4.  goto L2f2fba;
  #L2f2fa6.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2faa.  v1:= v7.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2fae.  v2:= v7.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2fb2.  call `<init>`(v0, v1, v3, v2) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2fb8.  throw v0;
  #L2f2fba.  return @kind void;
  #L2f2fbc.  if v0 != v6 then goto L2f2fde;
  #L2f2fc0.  if v1 < v6 then goto L2f2fde;
  #L2f2fc4.  if v1 <= v5 then goto L2f2fca;
  #L2f2fc8.  goto L2f2fde;
  #L2f2fca.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2fce.  v1:= v7.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2fd2.  v2:= v7.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2fd6.  call `<init>`(v0, v1, v3, v2) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2fdc.  throw v0;
  #L2f2fde.  return @kind void;
}
procedure `java.lang.Number` `c`(`net.minidev.json.parser.i` v2 @kind this) @signature `Lnet/minidev/json/parser/i;.c:()Ljava/lang/Number;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2f2394.  v0:= v2.`net.minidev.json.parser.i.m` @type ^`boolean` @kind boolean;
  #L2f2398.  if v0 != 0 then goto L2f23a2;
  #L2f239c.  call `b`(v2) @signature `Lnet/minidev/json/parser/i;.b:()V` @kind virtual;
  #L2f23a2.  v0:= v2.`net.minidev.json.parser.i.u` @type ^`boolean` @kind boolean;
  #L2f23a6.  if v0 != 0 then goto L2f23c0;
  #L2f23aa.  v0:= v2.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f23ae.  call temp:= `parseFloat`(v0) @signature `Ljava/lang/Float;.parseFloat:(Ljava/lang/String;)F` @kind static;
  #L2f23b4.  v0:= temp;
  #L2f23b6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L2f23bc.  v0:= temp @kind object;
  #L2f23be.  return v0 @kind object;
  #L2f23c0.  v0:= v2.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f23c4.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2f23ca.  v0:= temp;
  #L2f23cc.  v1:= 18I;
  #L2f23d0.  if v0 <= v1 then goto L2f23e4;
  #L2f23d4.  v0:= new `java.math.BigDecimal`;
  #L2f23d8.  v1:= v2.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f23dc.  call `<init>`(v0, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f23e2.  return v0 @kind object;
  #L2f23e4.  v0:= v2.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f23e8.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L2f23ee.  v0:= temp @kind wide;
  #L2f23f0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L2f23f6.  v0:= temp @kind object;
  #L2f23f8.  return v0 @kind object;
}
procedure `java.lang.Object` `d`(`net.minidev.json.parser.i` v2 @kind this, `net.minidev.json.parser.c` v3 @kind object, `net.minidev.json.parser.d` v4 @kind object) @signature `Lnet/minidev/json/parser/i;.d:(Lnet/minidev/json/parser/c;Lnet/minidev/json/parser/d;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2f25c0.  v2.`net.minidev.json.parser.i.g` @type ^`net.minidev.json.parser.c` := v3 @kind object;
  #L2f25c4.  v2.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` := v4 @kind object;
  #L2f25c8.  call `f`(v2) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f25ce.  call `e`(v4) @signature `Lnet/minidev/json/parser/d;.e:()V` @kind interface;
  #L2f25d4.  v3:= `@@net.minidev.json.parser.i.e` @type ^`boolean`[] @kind object;
  #L2f25d8.  call temp:= `h`(v2, v3) @signature `Lnet/minidev/json/parser/i;.h:([Z)Ljava/lang/Object;` @kind virtual;
  #L2f25de.  v3:= temp @kind object;
  #L2f25e0.  call `h`(v4) @signature `Lnet/minidev/json/parser/d;.h:()V` @kind interface;
  #L2f25e6.  v4:= v2.`net.minidev.json.parser.i.r` @type ^`boolean` @kind boolean;
  #L2f25ea.  if v4 == 0 then goto L2f262a;
  #L2f25ee.  v4:= v2.`net.minidev.json.parser.i.s` @type ^`boolean` @kind boolean;
  #L2f25f2.  if v4 != 0 then goto L2f25fc;
  #L2f25f6.  call `s`(v2) @signature `Lnet/minidev/json/parser/i;.s:()V` @kind virtual;
  #L2f25fc.  v4:= v2.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f2600.  v0:= 26I;
  #L2f2604.  if v4 != v0 then goto L2f260a;
  #L2f2608.  goto L2f262a;
  #L2f260a.  v3:= new `net.minidev.json.parser.ParseException`;
  #L2f260e.  v4:= v2.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2612.  v0:= 1I;
  #L2f2614.  v4:= v4 - v0 @kind int;
  #L2f2616.  v1:= v2.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f261a.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L2f2620.  v1:= temp @kind object;
  #L2f2622.  call `<init>`(v3, v4, v0, v1) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2628.  throw v3;
  #L2f262a.  v4:= 0I;
  #L2f262c.  v2.`net.minidev.json.parser.i.k` @type ^`java.lang.String` := v4 @kind object;
  #L2f2630.  v2.`net.minidev.json.parser.i.j` @type ^`java.lang.Object` := v4 @kind object;
  #L2f2634.  return v3 @kind object;
  #L2f2636.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L2f2638.  v4:= new `net.minidev.json.parser.ParseException`;
  #L2f263c.  v0:= v2.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2640.  call `<init>`(v4, v0, v3) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(ILjava/lang/Throwable;)V` @kind direct;
  #L2f2646.  throw v4;
  catch `java.io.IOException` @[L2f25c8..L2f262a] goto L2f2636;
}
procedure `java.lang.Number` `e`(`net.minidev.json.parser.i` v14 @kind this, `java.lang.String` v15 @kind object) @signature `Lnet/minidev/json/parser/i;.e:(Ljava/lang/String;)Ljava/lang/Number;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L2f240c.  call temp:= `length`(v15) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2f2412.  v0:= temp;
  #L2f2414.  v1:= 0I;
  #L2f2416.  call temp:= `charAt`(v15, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f241c.  v2:= temp;
  #L2f241e.  v3:= 6I;
  #L2f2420.  v4:= 48I;
  #L2f2424.  v5:= 1I;
  #L2f2426.  v6:= 45I;
  #L2f242a.  if v2 != v6 then goto L2f2464;
  #L2f242e.  v2:= 20I;
  #L2f2432.  v6:= v14.`net.minidev.json.parser.i.m` @type ^`boolean` @kind boolean;
  #L2f2436.  if v6 != 0 then goto L2f245e;
  #L2f243a.  v6:= 3I;
  #L2f243c.  if v0 < v6 then goto L2f245e;
  #L2f2440.  call temp:= `charAt`(v15, v5) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f2446.  v6:= temp;
  #L2f2448.  if v6 == v4 then goto L2f244e;
  #L2f244c.  goto L2f245e;
  #L2f244e.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2452.  v1:= v14.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2456.  call `<init>`(v0, v1, v3, v15) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f245c.  throw v0;
  #L2f245e.  v3:= 1I;
  #L2f2460.  v6:= 1I;
  #L2f2462.  goto L2f2498;
  #L2f2464.  v2:= v14.`net.minidev.json.parser.i.m` @type ^`boolean` @kind boolean;
  #L2f2468.  if v2 != 0 then goto L2f2490;
  #L2f246c.  v2:= 2I;
  #L2f246e.  if v0 < v2 then goto L2f2490;
  #L2f2472.  call temp:= `charAt`(v15, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f2478.  v2:= temp;
  #L2f247a.  if v2 == v4 then goto L2f2480;
  #L2f247e.  goto L2f2490;
  #L2f2480.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2484.  v1:= v14.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2488.  call `<init>`(v0, v1, v3, v15) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f248e.  throw v0;
  #L2f2490.  v2:= 19I;
  #L2f2494.  v3:= 0I;
  #L2f2496.  v6:= 0I;
  #L2f2498.  v7:= 10I;
  #L2f249c.  if v0 >= v2 then goto L2f24a4;
  #L2f24a0.  v2:= 0I;
  #L2f24a2.  goto L2f24ba;
  #L2f24a4.  if v0 <= v2 then goto L2f24b4;
  #L2f24a8.  v0:= new `java.math.BigInteger`;
  #L2f24ac.  call `<init>`(v0, v15, v7) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2f24b2.  return v0 @kind object;
  #L2f24b4.  v0:= v0 + -1;
  #L2f24b8.  v2:= 1I;
  #L2f24ba.  v8:= 0L;
  #L2f24be.  v10:= 10L;
  #L2f24c2.  if v3 >= v0 then goto L2f24e2;
  #L2f24c6.  v8:= v8 * v10 @kind long;
  #L2f24ca.  v10:= v3 + 1;
  #L2f24ce.  call temp:= `charAt`(v15, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f24d4.  v3:= temp;
  #L2f24d6.  v3:= v3 - 48;
  #L2f24da.  v11:= (`long`) v3 @kind i2l;
  #L2f24dc.  v8:= v8 + v11 @kind long;
  #L2f24de.  v3:= v10;
  #L2f24e0.  goto L2f24be;
  #L2f24e2.  if v2 == 0 then goto L2f2550;
  #L2f24e6.  v12:= -922337203685477580L;
  #L2f24f0.  v0:= lcmp(v8, v12);
  #L2f24f4.  if v0 <= 0 then goto L2f24fa;
  #L2f24f8.  goto L2f252e;
  #L2f24fa.  v0:= lcmp(v8, v12);
  #L2f24fe.  if v0 >= 0 then goto L2f2506;
  #L2f2502.  v1:= 1I;
  #L2f2504.  goto L2f252e;
  #L2f2506.  if v6 == 0 then goto L2f251c;
  #L2f250a.  call temp:= `charAt`(v15, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f2510.  v0:= temp;
  #L2f2512.  v2:= 56I;
  #L2f2516.  if v0 <= v2 then goto L2f252e;
  #L2f251a.  goto L2f2502;
  #L2f251c.  call temp:= `charAt`(v15, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f2522.  v0:= temp;
  #L2f2524.  v2:= 55I;
  #L2f2528.  if v0 <= v2 then goto L2f252e;
  #L2f252c.  goto L2f2502;
  #L2f252e.  if v1 == 0 then goto L2f253e;
  #L2f2532.  v0:= new `java.math.BigInteger`;
  #L2f2536.  call `<init>`(v0, v15, v7) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2f253c.  return v0 @kind object;
  #L2f253e.  v8:= v8 * v10 @kind long;
  #L2f2542.  call temp:= `charAt`(v15, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f2548.  v15:= temp;
  #L2f254a.  v4:= v4 - v15 @kind int;
  #L2f254c.  v0:= (`long`) v4 @kind i2l;
  #L2f254e.  v8:= v8 + v0 @kind long;
  #L2f2550.  if v6 == 0 then goto L2f2580;
  #L2f2554.  v15:= v14.`net.minidev.json.parser.i.v` @type ^`boolean` @kind boolean;
  #L2f2558.  if v15 == 0 then goto L2f2576;
  #L2f255c.  v0:= -2147483648L;
  #L2f2562.  v15:= lcmp(v8, v0);
  #L2f2566.  if v15 < 0 then goto L2f2576;
  #L2f256a.  v15:= (`int`) v8 @kind l2i;
  #L2f256c.  call temp:= `valueOf`(v15) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2f2572.  v15:= temp @kind object;
  #L2f2574.  return v15 @kind object;
  #L2f2576.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2f257c.  v15:= temp @kind object;
  #L2f257e.  return v15 @kind object;
  #L2f2580.  v0:= -v8 @kind long;
  #L2f2582.  v15:= v14.`net.minidev.json.parser.i.v` @type ^`boolean` @kind boolean;
  #L2f2586.  if v15 == 0 then goto L2f25a4;
  #L2f258a.  v2:= 2147483647L;
  #L2f2590.  v15:= lcmp(v0, v2);
  #L2f2594.  if v15 > 0 then goto L2f25a4;
  #L2f2598.  v15:= (`int`) v0 @kind l2i;
  #L2f259a.  call temp:= `valueOf`(v15) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2f25a0.  v15:= temp @kind object;
  #L2f25a2.  return v15 @kind object;
  #L2f25a4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2f25aa.  v15:= temp @kind object;
  #L2f25ac.  return v15 @kind object;
}
procedure `void` `f`() @signature `Lnet/minidev/json/parser/i;.f:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.util.List` `g`(`net.minidev.json.parser.i` v6 @kind this) @signature `Lnet/minidev/json/parser/i;.g:()Ljava/util/List;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2f2974.  v0:= v6.`net.minidev.json.parser.i.g` @type ^`net.minidev.json.parser.c` @kind object;
  #L2f2978.  call temp:= `a`(v0) @signature `Lnet/minidev/json/parser/c;.a:()Ljava/util/List;` @kind interface;
  #L2f297e.  v0:= temp @kind object;
  #L2f2980.  v1:= v6.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f2984.  v2:= 91I;
  #L2f2988.  if v1 != v2 then goto L2f2ab0;
  #L2f298c.  call `f`(v6) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f2992.  v1:= v6.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f2996.  call temp:= `c`(v1) @signature `Lnet/minidev/json/parser/d;.c:()Z` @kind interface;
  #L2f299c.  v1:= 1I;
  #L2f299e.  v2:= 0I;
  #L2f29a0.  v3:= 0I;
  #L2f29a2.  v4:= v6.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f29a6.  v5:= 9I;
  #L2f29aa.  if v4 == v5 then goto L2f2aa6;
  #L2f29ae.  v5:= 10I;
  #L2f29b2.  if v4 == v5 then goto L2f2aa6;
  #L2f29b6.  v5:= 13I;
  #L2f29ba.  if v4 == v5 then goto L2f2aa6;
  #L2f29be.  v5:= 26I;
  #L2f29c2.  if v4 == v5 then goto L2f2a8e;
  #L2f29c6.  v5:= 32I;
  #L2f29ca.  if v4 == v5 then goto L2f2aa6;
  #L2f29ce.  v5:= 44I;
  #L2f29d2.  if v4 == v5 then goto L2f2a5a;
  #L2f29d6.  v5:= 58I;
  #L2f29da.  if v4 == v5 then goto L2f2a3e;
  #L2f29de.  v5:= 93I;
  #L2f29e2.  if v4 == v5 then goto L2f2a02;
  #L2f29e6.  v3:= 125I;
  #L2f29ea.  if v4 == v3 then goto L2f2a3e;
  #L2f29ee.  v3:= `@@net.minidev.json.parser.i.b` @type ^`boolean`[] @kind object;
  #L2f29f2.  call temp:= `h`(v6, v3) @signature `Lnet/minidev/json/parser/i;.h:([Z)Ljava/lang/Object;` @kind virtual;
  #L2f29f8.  v3:= temp @kind object;
  #L2f29fa.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2f2a00.  goto L2f29a0;
  #L2f2a02.  if v3 == 0 then goto L2f2a2c;
  #L2f2a06.  v1:= v6.`net.minidev.json.parser.i.q` @type ^`boolean` @kind boolean;
  #L2f2a0a.  if v1 == 0 then goto L2f2a10;
  #L2f2a0e.  goto L2f2a2c;
  #L2f2a10.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2a14.  v1:= v6.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2a18.  v3:= v6.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f2a1c.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L2f2a22.  v3:= temp @kind object;
  #L2f2a24.  call `<init>`(v0, v1, v2, v3) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2a2a.  throw v0;
  #L2f2a2c.  call `f`(v6) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f2a32.  v1:= v6.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f2a36.  call temp:= `i`(v1) @signature `Lnet/minidev/json/parser/d;.i:()Z` @kind interface;
  #L2f2a3c.  return v0 @kind object;
  #L2f2a3e.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2a42.  v1:= v6.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2a46.  v3:= v6.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f2a4a.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L2f2a50.  v3:= temp @kind object;
  #L2f2a52.  call `<init>`(v0, v1, v2, v3) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2a58.  throw v0;
  #L2f2a5a.  if v3 == 0 then goto L2f2a84;
  #L2f2a5e.  v3:= v6.`net.minidev.json.parser.i.q` @type ^`boolean` @kind boolean;
  #L2f2a62.  if v3 == 0 then goto L2f2a68;
  #L2f2a66.  goto L2f2a84;
  #L2f2a68.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2a6c.  v1:= v6.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2a70.  v3:= v6.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f2a74.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L2f2a7a.  v3:= temp @kind object;
  #L2f2a7c.  call `<init>`(v0, v1, v2, v3) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2a82.  throw v0;
  #L2f2a84.  call `f`(v6) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f2a8a.  v3:= 1I;
  #L2f2a8c.  goto L2f29a2;
  #L2f2a8e.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2a92.  v2:= v6.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2a96.  v2:= v2 - v1 @kind int;
  #L2f2a98.  v1:= 3I;
  #L2f2a9a.  v3:= "EOF" @kind object;
  #L2f2a9e.  call `<init>`(v0, v2, v1, v3) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2aa4.  throw v0;
  #L2f2aa6.  call `f`(v6) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f2aac.  goto L2f29a2;
  #L2f2ab0.  v0:= new `java.lang.RuntimeException`;
  #L2f2ab4.  v1:= "Internal Error" @kind object;
  #L2f2ab8.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f2abe.  goto L2f2ac2;
  #L2f2ac0.  throw v0;
  #L2f2ac2.  goto L2f2ac0;
}
procedure `java.lang.Object` `h`(`net.minidev.json.parser.i` v3 @kind this, `boolean`[] v4 @kind object) @signature `Lnet/minidev/json/parser/i;.h:([Z)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L2f2668.  v0:= v3.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f266c.  v1:= 9I;
  #L2f2670.  if v0 == v1 then goto L2f28ba;
  #L2f2674.  v1:= 10I;
  #L2f2678.  if v0 == v1 then goto L2f28ba;
  #L2f267c.  v1:= 1I;
  #L2f267e.  goto L2f28c4;
  #L2f2684.  goto L2f2930;
  #L2f268a.  call `i`(v3, v4) @signature `Lnet/minidev/json/parser/i;.i:([Z)V` @kind virtual;
  #L2f2690.  v4:= v3.`net.minidev.json.parser.i.o` @type ^`boolean` @kind boolean;
  #L2f2694.  if v4 == 0 then goto L2f26ac;
  #L2f2698.  v4:= v3.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f269c.  v0:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f26a0.  call temp:= `d`(v4, v0) @signature `Lnet/minidev/json/parser/d;.d:(Ljava/lang/Object;)Z` @kind interface;
  #L2f26a6.  v4:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f26aa.  return v4 @kind object;
  #L2f26ac.  v4:= new `net.minidev.json.parser.ParseException`;
  #L2f26b0.  v0:= v3.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f26b4.  v2:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f26b8.  call `<init>`(v4, v0, v1, v2) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f26be.  throw v4;
  #L2f26c0.  call temp:= `l`(v3) @signature `Lnet/minidev/json/parser/i;.l:()Ljava/util/Map;` @kind virtual;
  #L2f26c6.  v4:= temp @kind object;
  #L2f26c8.  return v4 @kind object;
  #L2f26ca.  call `i`(v3, v4) @signature `Lnet/minidev/json/parser/i;.i:([Z)V` @kind virtual;
  #L2f26d0.  v4:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f26d4.  v0:= "true" @kind object;
  #L2f26d8.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f26de.  v4:= temp;
  #L2f26e0.  if v4 == 0 then goto L2f26f4;
  #L2f26e4.  v4:= v3.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f26e8.  v0:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L2f26ec.  call temp:= `d`(v4, v0) @signature `Lnet/minidev/json/parser/d;.d:(Ljava/lang/Object;)Z` @kind interface;
  #L2f26f2.  return v0 @kind object;
  #L2f26f4.  v4:= v3.`net.minidev.json.parser.i.o` @type ^`boolean` @kind boolean;
  #L2f26f8.  if v4 == 0 then goto L2f2710;
  #L2f26fc.  v4:= v3.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f2700.  v0:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2704.  call temp:= `d`(v4, v0) @signature `Lnet/minidev/json/parser/d;.d:(Ljava/lang/Object;)Z` @kind interface;
  #L2f270a.  v4:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f270e.  return v4 @kind object;
  #L2f2710.  v4:= new `net.minidev.json.parser.ParseException`;
  #L2f2714.  v0:= v3.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2718.  v2:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f271c.  call `<init>`(v4, v0, v1, v2) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2722.  throw v4;
  #L2f2724.  call `i`(v3, v4) @signature `Lnet/minidev/json/parser/i;.i:([Z)V` @kind virtual;
  #L2f272a.  v4:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f272e.  v0:= "null" @kind object;
  #L2f2732.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f2738.  v4:= temp;
  #L2f273a.  if v4 == 0 then goto L2f274c;
  #L2f273e.  v4:= v3.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f2742.  v0:= 0I;
  #L2f2744.  call temp:= `d`(v4, v0) @signature `Lnet/minidev/json/parser/d;.d:(Ljava/lang/Object;)Z` @kind interface;
  #L2f274a.  return v0 @kind object;
  #L2f274c.  v4:= v3.`net.minidev.json.parser.i.o` @type ^`boolean` @kind boolean;
  #L2f2750.  if v4 == 0 then goto L2f2768;
  #L2f2754.  v4:= v3.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f2758.  v0:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f275c.  call temp:= `d`(v4, v0) @signature `Lnet/minidev/json/parser/d;.d:(Ljava/lang/Object;)Z` @kind interface;
  #L2f2762.  v4:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2766.  return v4 @kind object;
  #L2f2768.  v4:= new `net.minidev.json.parser.ParseException`;
  #L2f276c.  v0:= v3.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2770.  v2:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2774.  call `<init>`(v4, v0, v1, v2) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f277a.  throw v4;
  #L2f277c.  call `i`(v3, v4) @signature `Lnet/minidev/json/parser/i;.i:([Z)V` @kind virtual;
  #L2f2782.  v4:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2786.  v0:= "false" @kind object;
  #L2f278a.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f2790.  v4:= temp;
  #L2f2792.  if v4 == 0 then goto L2f27a6;
  #L2f2796.  v4:= v3.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f279a.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L2f279e.  call temp:= `d`(v4, v0) @signature `Lnet/minidev/json/parser/d;.d:(Ljava/lang/Object;)Z` @kind interface;
  #L2f27a4.  return v0 @kind object;
  #L2f27a6.  v4:= v3.`net.minidev.json.parser.i.o` @type ^`boolean` @kind boolean;
  #L2f27aa.  if v4 == 0 then goto L2f27c2;
  #L2f27ae.  v4:= v3.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f27b2.  v0:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f27b6.  call temp:= `d`(v4, v0) @signature `Lnet/minidev/json/parser/d;.d:(Ljava/lang/Object;)Z` @kind interface;
  #L2f27bc.  v4:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f27c0.  return v4 @kind object;
  #L2f27c2.  v4:= new `net.minidev.json.parser.ParseException`;
  #L2f27c6.  v0:= v3.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f27ca.  v2:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f27ce.  call `<init>`(v4, v0, v1, v2) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f27d4.  throw v4;
  #L2f27d6.  v4:= new `net.minidev.json.parser.ParseException`;
  #L2f27da.  v0:= v3.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f27de.  v1:= 0I;
  #L2f27e0.  v2:= v3.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f27e4.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L2f27ea.  v2:= temp @kind object;
  #L2f27ec.  call `<init>`(v4, v0, v1, v2) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f27f2.  throw v4;
  #L2f27f4.  call temp:= `g`(v3) @signature `Lnet/minidev/json/parser/i;.g:()Ljava/util/List;` @kind virtual;
  #L2f27fa.  v4:= temp @kind object;
  #L2f27fc.  return v4 @kind object;
  #L2f27fe.  call `i`(v3, v4) @signature `Lnet/minidev/json/parser/i;.i:([Z)V` @kind virtual;
  #L2f2804.  v4:= v3.`net.minidev.json.parser.i.n` @type ^`boolean` @kind boolean;
  #L2f2808.  if v4 == 0 then goto L2f2870;
  #L2f280c.  v4:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2810.  v0:= "NaN" @kind object;
  #L2f2814.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f281a.  v4:= temp;
  #L2f281c.  if v4 == 0 then goto L2f2840;
  #L2f2820.  v4:= v3.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f2824.  v0:= NaNF;
  #L2f2828.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L2f282e.  v1:= temp @kind object;
  #L2f2830.  call temp:= `d`(v4, v1) @signature `Lnet/minidev/json/parser/d;.d:(Ljava/lang/Object;)Z` @kind interface;
  #L2f2836.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L2f283c.  v4:= temp @kind object;
  #L2f283e.  return v4 @kind object;
  #L2f2840.  v4:= v3.`net.minidev.json.parser.i.o` @type ^`boolean` @kind boolean;
  #L2f2844.  if v4 == 0 then goto L2f285c;
  #L2f2848.  v4:= v3.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f284c.  v0:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2850.  call temp:= `d`(v4, v0) @signature `Lnet/minidev/json/parser/d;.d:(Ljava/lang/Object;)Z` @kind interface;
  #L2f2856.  v4:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f285a.  return v4 @kind object;
  #L2f285c.  v4:= new `net.minidev.json.parser.ParseException`;
  #L2f2860.  v0:= v3.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2864.  v2:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2868.  call `<init>`(v4, v0, v1, v2) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f286e.  throw v4;
  #L2f2870.  v4:= new `net.minidev.json.parser.ParseException`;
  #L2f2874.  v0:= v3.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2878.  v2:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f287c.  call `<init>`(v4, v0, v1, v2) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2882.  throw v4;
  #L2f2884.  call temp:= `k`(v3, v4) @signature `Lnet/minidev/json/parser/i;.k:([Z)Ljava/lang/Object;` @kind virtual;
  #L2f288a.  v4:= temp @kind object;
  #L2f288c.  v3.`net.minidev.json.parser.i.j` @type ^`java.lang.Object` := v4 @kind object;
  #L2f2890.  v0:= v3.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f2894.  call temp:= `d`(v0, v4) @signature `Lnet/minidev/json/parser/d;.d:(Ljava/lang/Object;)Z` @kind interface;
  #L2f289a.  v4:= v3.`net.minidev.json.parser.i.j` @type ^`java.lang.Object` @kind object;
  #L2f289e.  return v4 @kind object;
  #L2f28a0.  call `n`(v3) @signature `Lnet/minidev/json/parser/i;.n:()V` @kind virtual;
  #L2f28a6.  v4:= v3.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f28aa.  v0:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f28ae.  call temp:= `d`(v4, v0) @signature `Lnet/minidev/json/parser/d;.d:(Ljava/lang/Object;)Z` @kind interface;
  #L2f28b4.  v4:= v3.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f28b8.  return v4 @kind object;
  #L2f28ba.  call `f`(v3) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f28c0.  goto L2f2668;
  #L2f28c4.  switch v0
                  | 13 => goto L2f28ba
                  | 32 => goto L2f28ba
                  | 34 => goto L2f28a0
                  | 39 => goto L2f28a0
                  | 45 => goto L2f2884
                  | 78 => goto L2f27fe
                  | 91 => goto L2f27f4
                  | 93 => goto L2f27d6
                  | 102 => goto L2f277c
                  | 110 => goto L2f2724
                  | 116 => goto L2f26ca
                  | 123 => goto L2f26c0
                  | 125 => goto L2f27d6
                  | else => goto L2f2684;
  #L2f2930.  switch v0
                  | 48 => goto L2f2884
                  | 49 => goto L2f2884
                  | 50 => goto L2f2884
                  | 51 => goto L2f2884
                  | 52 => goto L2f2884
                  | 53 => goto L2f2884
                  | 54 => goto L2f2884
                  | 55 => goto L2f2884
                  | 56 => goto L2f2884
                  | 57 => goto L2f2884
                  | 58 => goto L2f27d6
                  | else => goto L2f268a;
}
procedure `void` `i`(`boolean`[] v0 @kind object) @signature `Lnet/minidev/json/parser/i;.i:([Z)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `j`() @signature `Lnet/minidev/json/parser/i;.j:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `k`(`boolean`[] v0 @kind object) @signature `Lnet/minidev/json/parser/i;.k:([Z)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.util.Map` `l`(`net.minidev.json.parser.i` v13 @kind this) @signature `Lnet/minidev/json/parser/i;.l:()Ljava/util/Map;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L2f2ad4.  v0:= v13.`net.minidev.json.parser.i.g` @type ^`net.minidev.json.parser.c` @kind object;
  #L2f2ad8.  call temp:= `b`(v0) @signature `Lnet/minidev/json/parser/c;.b:()Ljava/util/Map;` @kind interface;
  #L2f2ade.  v0:= temp @kind object;
  #L2f2ae0.  v1:= v13.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f2ae4.  v2:= 123I;
  #L2f2ae8.  if v1 != v2 then goto L2f2d00;
  #L2f2aec.  v1:= v13.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f2af0.  call temp:= `a`(v1) @signature `Lnet/minidev/json/parser/d;.a:()Z` @kind interface;
  #L2f2af6.  v1:= 0I;
  #L2f2af8.  v3:= 1I;
  #L2f2afa.  v4:= 0I;
  #L2f2afc.  v5:= 1I;
  #L2f2afe.  call `f`(v13) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f2b04.  v6:= v13.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f2b08.  v7:= 9I;
  #L2f2b0c.  if v6 == v7 then goto L2f2afe;
  #L2f2b10.  v7:= 10I;
  #L2f2b14.  if v6 == v7 then goto L2f2afe;
  #L2f2b18.  v7:= 13I;
  #L2f2b1c.  if v6 == v7 then goto L2f2afe;
  #L2f2b20.  v7:= 32I;
  #L2f2b24.  if v6 == v7 then goto L2f2afe;
  #L2f2b28.  v7:= 44I;
  #L2f2b2c.  if v6 == v7 then goto L2f2cd0;
  #L2f2b30.  v8:= 58I;
  #L2f2b34.  if v6 == v8 then goto L2f2cb4;
  #L2f2b38.  v9:= 91I;
  #L2f2b3c.  if v6 == v9 then goto L2f2cb4;
  #L2f2b40.  v9:= 93I;
  #L2f2b44.  if v6 == v9 then goto L2f2cb4;
  #L2f2b48.  if v6 == v2 then goto L2f2cb4;
  #L2f2b4c.  v9:= 125I;
  #L2f2b50.  if v6 == v9 then goto L2f2c78;
  #L2f2b54.  v4:= v13.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2b58.  v10:= 34I;
  #L2f2b5c.  if v6 == v10 then goto L2f2b92;
  #L2f2b60.  v10:= 39I;
  #L2f2b64.  if v6 != v10 then goto L2f2b6a;
  #L2f2b68.  goto L2f2b92;
  #L2f2b6a.  v6:= `@@net.minidev.json.parser.i.c` @type ^`boolean`[] @kind object;
  #L2f2b6e.  call `i`(v13, v6) @signature `Lnet/minidev/json/parser/i;.i:([Z)V` @kind virtual;
  #L2f2b74.  v6:= v13.`net.minidev.json.parser.i.o` @type ^`boolean` @kind boolean;
  #L2f2b78.  if v6 == 0 then goto L2f2b7e;
  #L2f2b7c.  goto L2f2b98;
  #L2f2b7e.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2b82.  v1:= v13.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2b86.  v2:= v13.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2b8a.  call `<init>`(v0, v1, v3, v2) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2b90.  throw v0;
  #L2f2b92.  call `n`(v13) @signature `Lnet/minidev/json/parser/i;.n:()V` @kind virtual;
  #L2f2b98.  v6:= v13.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f2b9c.  if v5 == 0 then goto L2f2c68;
  #L2f2ba0.  v5:= v13.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f2ba4.  call temp:= `g`(v5, v6) @signature `Lnet/minidev/json/parser/d;.g:(Ljava/lang/String;)Z` @kind interface;
  #L2f2baa.  call `s`(v13) @signature `Lnet/minidev/json/parser/i;.s:()V` @kind virtual;
  #L2f2bb0.  v5:= v13.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f2bb4.  v10:= 0I;
  #L2f2bb6.  v11:= 3I;
  #L2f2bb8.  v12:= 26I;
  #L2f2bbc.  if v5 == v8 then goto L2f2bf4;
  #L2f2bc0.  if v5 != v12 then goto L2f2bd6;
  #L2f2bc4.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2bc8.  v1:= v13.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2bcc.  v1:= v1 - v3 @kind int;
  #L2f2bce.  call `<init>`(v0, v1, v11, v10) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2bd4.  throw v0;
  #L2f2bd6.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2bda.  v2:= v13.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2bde.  v2:= v2 - v3 @kind int;
  #L2f2be0.  v3:= v13.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f2be4.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L2f2bea.  v3:= temp @kind object;
  #L2f2bec.  call `<init>`(v0, v2, v1, v3) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2bf2.  throw v0;
  #L2f2bf4.  call `j`(v13) @signature `Lnet/minidev/json/parser/i;.j:()V` @kind virtual;
  #L2f2bfa.  v5:= `@@net.minidev.json.parser.i.d` @type ^`boolean`[] @kind object;
  #L2f2bfe.  call temp:= `h`(v13, v5) @signature `Lnet/minidev/json/parser/i;.h:([Z)Ljava/lang/Object;` @kind virtual;
  #L2f2c04.  v5:= temp @kind object;
  #L2f2c06.  call temp:= `put`(v0, v6, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2f2c0c.  v5:= temp @kind object;
  #L2f2c0e.  if v5 != 0 then goto L2f2c5a;
  #L2f2c12.  v4:= v13.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f2c16.  call temp:= `b`(v4) @signature `Lnet/minidev/json/parser/d;.b:()Z` @kind interface;
  #L2f2c1c.  v4:= v13.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f2c20.  if v4 != v9 then goto L2f2c36;
  #L2f2c24.  call `f`(v13) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f2c2a.  v1:= v13.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f2c2e.  call temp:= `f`(v1) @signature `Lnet/minidev/json/parser/d;.f:()Z` @kind interface;
  #L2f2c34.  return v0 @kind object;
  #L2f2c36.  if v4 == v12 then goto L2f2c48;
  #L2f2c3a.  if v4 != v7 then goto L2f2c40;
  #L2f2c3e.  goto L2f2cfa;
  #L2f2c40.  v4:= 0I;
  #L2f2c42.  v5:= 0I;
  #L2f2c44.  goto L2f2afe;
  #L2f2c48.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2c4c.  v1:= v13.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2c50.  v1:= v1 - v3 @kind int;
  #L2f2c52.  call `<init>`(v0, v1, v11, v10) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2c58.  throw v0;
  #L2f2c5a.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2c5e.  v1:= 5I;
  #L2f2c60.  call `<init>`(v0, v4, v1, v6) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2c66.  throw v0;
  #L2f2c68.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2c6c.  v1:= v13.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2c70.  call `<init>`(v0, v1, v3, v6) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2c76.  throw v0;
  #L2f2c78.  if v4 == 0 then goto L2f2ca2;
  #L2f2c7c.  v2:= v13.`net.minidev.json.parser.i.q` @type ^`boolean` @kind boolean;
  #L2f2c80.  if v2 == 0 then goto L2f2c86;
  #L2f2c84.  goto L2f2ca2;
  #L2f2c86.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2c8a.  v2:= v13.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2c8e.  v3:= v13.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f2c92.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L2f2c98.  v3:= temp @kind object;
  #L2f2c9a.  call `<init>`(v0, v2, v1, v3) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2ca0.  throw v0;
  #L2f2ca2.  call `f`(v13) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f2ca8.  v1:= v13.`net.minidev.json.parser.i.h` @type ^`net.minidev.json.parser.d` @kind object;
  #L2f2cac.  call temp:= `f`(v1) @signature `Lnet/minidev/json/parser/d;.f:()Z` @kind interface;
  #L2f2cb2.  return v0 @kind object;
  #L2f2cb4.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2cb8.  v2:= v13.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2cbc.  v3:= v13.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f2cc0.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L2f2cc6.  v3:= temp @kind object;
  #L2f2cc8.  call `<init>`(v0, v2, v1, v3) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2cce.  throw v0;
  #L2f2cd0.  if v4 == 0 then goto L2f2cfa;
  #L2f2cd4.  v4:= v13.`net.minidev.json.parser.i.q` @type ^`boolean` @kind boolean;
  #L2f2cd8.  if v4 == 0 then goto L2f2cde;
  #L2f2cdc.  goto L2f2cfa;
  #L2f2cde.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f2ce2.  v2:= v13.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2ce6.  v3:= v13.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f2cea.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L2f2cf0.  v3:= temp @kind object;
  #L2f2cf2.  call `<init>`(v0, v2, v1, v3) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2cf8.  throw v0;
  #L2f2cfa.  v4:= 1I;
  #L2f2cfc.  goto L2f2afc;
  #L2f2d00.  v0:= new `java.lang.RuntimeException`;
  #L2f2d04.  v1:= "Internal Error" @kind object;
  #L2f2d08.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f2d0e.  goto L2f2d12;
  #L2f2d10.  throw v0;
  #L2f2d12.  goto L2f2d10;
}
procedure `void` `m`() @signature `Lnet/minidev/json/parser/i;.m:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `n`() @signature `Lnet/minidev/json/parser/i;.n:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `o`(`net.minidev.json.parser.i` v5 @kind this) @signature `Lnet/minidev/json/parser/i;.o:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2f2ff0.  v0:= v5.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f2ff4.  call `f`(v5) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f2ffa.  v1:= v5.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f2ffe.  v2:= 34I;
  #L2f3002.  if v1 == v2 then goto L2f3186;
  #L2f3006.  v3:= 39I;
  #L2f300a.  if v1 == v3 then goto L2f3186;
  #L2f300e.  v4:= 92I;
  #L2f3012.  if v1 == v4 then goto L2f3070;
  #L2f3016.  v2:= 127I;
  #L2f301a.  if v1 == v2 then goto L2f3048;
  #L2f301e.  goto L2f31b0;
  #L2f3024.  v2:= v5.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f3028.  call `a`(v2, v1) @signature `Lnet/minidev/json/parser/h;.a:(C)V` @kind virtual;
  #L2f302e.  goto L2f2ff4;
  #L2f3030.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f3034.  v1:= v5.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f3038.  v1:= v1 + -1;
  #L2f303c.  v2:= 3I;
  #L2f303e.  v3:= 0I;
  #L2f3040.  call `<init>`(v0, v1, v2, v3) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f3046.  throw v0;
  #L2f3048.  v1:= v5.`net.minidev.json.parser.i.t` @type ^`boolean` @kind boolean;
  #L2f304c.  if v1 == 0 then goto L2f3052;
  #L2f3050.  goto L2f2ff4;
  #L2f3052.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f3056.  v1:= v5.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f305a.  v2:= 0I;
  #L2f305c.  v3:= v5.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f3060.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L2f3066.  v3:= temp @kind object;
  #L2f3068.  call `<init>`(v0, v1, v2, v3) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f306e.  throw v0;
  #L2f3070.  call `f`(v5) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f3076.  v1:= v5.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f307a.  if v1 == v2 then goto L2f3178;
  #L2f307e.  if v1 == v3 then goto L2f316a;
  #L2f3082.  v2:= 47I;
  #L2f3086.  if v1 == v2 then goto L2f315c;
  #L2f308a.  if v1 == v4 then goto L2f314e;
  #L2f308e.  v2:= 98I;
  #L2f3092.  if v1 == v2 then goto L2f313c;
  #L2f3096.  v2:= 102I;
  #L2f309a.  if v1 == v2 then goto L2f312a;
  #L2f309e.  v2:= 110I;
  #L2f30a2.  if v1 == v2 then goto L2f3118;
  #L2f30a6.  v2:= 114I;
  #L2f30aa.  if v1 == v2 then goto L2f3106;
  #L2f30ae.  v2:= 120I;
  #L2f30b2.  if v1 == v2 then goto L2f30ee;
  #L2f30b6.  v2:= 116I;
  #L2f30ba.  if v1 == v2 then goto L2f30de;
  #L2f30be.  v2:= 117I;
  #L2f30c2.  if v1 == v2 then goto L2f30c8;
  #L2f30c6.  goto L2f2ff4;
  #L2f30c8.  v1:= v5.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f30cc.  v2:= 4I;
  #L2f30ce.  call temp:= `p`(v5, v2) @signature `Lnet/minidev/json/parser/i;.p:(I)C` @kind virtual;
  #L2f30d4.  v2:= temp;
  #L2f30d6.  call `a`(v1, v2) @signature `Lnet/minidev/json/parser/h;.a:(C)V` @kind virtual;
  #L2f30dc.  goto L2f2ff4;
  #L2f30de.  v1:= v5.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f30e2.  v2:= 9I;
  #L2f30e6.  call `a`(v1, v2) @signature `Lnet/minidev/json/parser/h;.a:(C)V` @kind virtual;
  #L2f30ec.  goto L2f2ff4;
  #L2f30ee.  v1:= v5.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f30f2.  v2:= 2I;
  #L2f30f4.  call temp:= `p`(v5, v2) @signature `Lnet/minidev/json/parser/i;.p:(I)C` @kind virtual;
  #L2f30fa.  v2:= temp;
  #L2f30fc.  call `a`(v1, v2) @signature `Lnet/minidev/json/parser/h;.a:(C)V` @kind virtual;
  #L2f3102.  goto L2f2ff4;
  #L2f3106.  v1:= v5.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f310a.  v2:= 13I;
  #L2f310e.  call `a`(v1, v2) @signature `Lnet/minidev/json/parser/h;.a:(C)V` @kind virtual;
  #L2f3114.  goto L2f2ff4;
  #L2f3118.  v1:= v5.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f311c.  v2:= 10I;
  #L2f3120.  call `a`(v1, v2) @signature `Lnet/minidev/json/parser/h;.a:(C)V` @kind virtual;
  #L2f3126.  goto L2f2ff4;
  #L2f312a.  v1:= v5.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f312e.  v2:= 12I;
  #L2f3132.  call `a`(v1, v2) @signature `Lnet/minidev/json/parser/h;.a:(C)V` @kind virtual;
  #L2f3138.  goto L2f2ff4;
  #L2f313c.  v1:= v5.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f3140.  v2:= 8I;
  #L2f3144.  call `a`(v1, v2) @signature `Lnet/minidev/json/parser/h;.a:(C)V` @kind virtual;
  #L2f314a.  goto L2f2ff4;
  #L2f314e.  v1:= v5.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f3152.  call `a`(v1, v4) @signature `Lnet/minidev/json/parser/h;.a:(C)V` @kind virtual;
  #L2f3158.  goto L2f2ff4;
  #L2f315c.  v1:= v5.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f3160.  call `a`(v1, v2) @signature `Lnet/minidev/json/parser/h;.a:(C)V` @kind virtual;
  #L2f3166.  goto L2f2ff4;
  #L2f316a.  v1:= v5.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f316e.  call `a`(v1, v3) @signature `Lnet/minidev/json/parser/h;.a:(C)V` @kind virtual;
  #L2f3174.  goto L2f2ff4;
  #L2f3178.  v1:= v5.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f317c.  call `a`(v1, v2) @signature `Lnet/minidev/json/parser/h;.a:(C)V` @kind virtual;
  #L2f3182.  goto L2f2ff4;
  #L2f3186.  if v0 != v1 then goto L2f31a2;
  #L2f318a.  call `f`(v5) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f3190.  v0:= v5.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f3194.  call temp:= `toString`(v0) @signature `Lnet/minidev/json/parser/h;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f319a.  v0:= temp @kind object;
  #L2f319c.  v5.`net.minidev.json.parser.i.k` @type ^`java.lang.String` := v0 @kind object;
  #L2f31a0.  return @kind void;
  #L2f31a2.  v2:= v5.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f31a6.  call `a`(v2, v1) @signature `Lnet/minidev/json/parser/h;.a:(C)V` @kind virtual;
  #L2f31ac.  goto L2f2ff4;
  #L2f31b0.  switch v1
                  | 0 => goto L2f3048
                  | 1 => goto L2f3048
                  | 2 => goto L2f3048
                  | 3 => goto L2f3048
                  | 4 => goto L2f3048
                  | 5 => goto L2f3048
                  | 6 => goto L2f3048
                  | 7 => goto L2f3048
                  | 8 => goto L2f3048
                  | 9 => goto L2f3048
                  | 10 => goto L2f3048
                  | 11 => goto L2f3048
                  | 12 => goto L2f3048
                  | 13 => goto L2f3048
                  | 14 => goto L2f3048
                  | 15 => goto L2f3048
                  | 16 => goto L2f3048
                  | 17 => goto L2f3048
                  | 18 => goto L2f3048
                  | 19 => goto L2f3048
                  | 20 => goto L2f3048
                  | 21 => goto L2f3048
                  | 22 => goto L2f3048
                  | 23 => goto L2f3048
                  | 24 => goto L2f3048
                  | 25 => goto L2f3048
                  | 26 => goto L2f3030
                  | 27 => goto L2f3048
                  | 28 => goto L2f3048
                  | 29 => goto L2f3048
                  | 30 => goto L2f3048
                  | 31 => goto L2f3048
                  | else => goto L2f3024;
}
procedure `char` `p`(`net.minidev.json.parser.i` v4 @kind this, `int` v5 ) @signature `Lnet/minidev/json/parser/i;.p:(I)C` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2f22e0.  v0:= 0I;
  #L2f22e2.  v1:= 0I;
  #L2f22e4.  if v0 >= v5 then goto L2f2380;
  #L2f22e8.  v1:= v1 * 16;
  #L2f22ec.  call `f`(v4) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f22f2.  v2:= v4.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f22f6.  v3:= 57I;
  #L2f22fa.  if v2 > v3 then goto L2f230e;
  #L2f22fe.  v3:= 48I;
  #L2f2302.  if v2 < v3 then goto L2f230e;
  #L2f2306.  v2:= v2 + -48;
  #L2f230a.  v1:= v1 + v2 @kind int;
  #L2f230c.  goto L2f233e;
  #L2f230e.  v3:= 70I;
  #L2f2312.  if v2 > v3 then goto L2f2328;
  #L2f2316.  v3:= 65I;
  #L2f231a.  if v2 < v3 then goto L2f2328;
  #L2f231e.  v2:= v2 + -65;
  #L2f2322.  v2:= v2 + 10;
  #L2f2326.  goto L2f230a;
  #L2f2328.  v3:= 97I;
  #L2f232c.  if v2 < v3 then goto L2f2344;
  #L2f2330.  v3:= 102I;
  #L2f2334.  if v2 > v3 then goto L2f2344;
  #L2f2338.  v2:= v2 + -97;
  #L2f233c.  goto L2f2322;
  #L2f233e.  v0:= v0 + 1;
  #L2f2342.  goto L2f22e4;
  #L2f2344.  v5:= 26I;
  #L2f2348.  if v2 != v5 then goto L2f2362;
  #L2f234c.  v5:= new `net.minidev.json.parser.ParseException`;
  #L2f2350.  v0:= v4.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f2354.  v1:= 3I;
  #L2f2356.  v2:= "EOF" @kind object;
  #L2f235a.  call `<init>`(v5, v0, v1, v2) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f2360.  throw v5;
  #L2f2362.  v5:= new `net.minidev.json.parser.ParseException`;
  #L2f2366.  v0:= v4.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f236a.  v1:= 4I;
  #L2f236c.  v2:= v4.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f2370.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L2f2376.  v2:= temp @kind object;
  #L2f2378.  call `<init>`(v5, v0, v1, v2) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f237e.  throw v5;
  #L2f2380.  v5:= (`char`) v1 @kind i2c;
  #L2f2382.  return v5;
}
procedure `void` `q`(`net.minidev.json.parser.i` v2 @kind this) @signature `Lnet/minidev/json/parser/i;.q:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2f3248.  v0:= v2.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f324c.  v1:= 48I;
  #L2f3250.  if v0 < v1 then goto L2f3266;
  #L2f3254.  v1:= 57I;
  #L2f3258.  if v0 <= v1 then goto L2f325e;
  #L2f325c.  goto L2f3266;
  #L2f325e.  call `m`(v2) @signature `Lnet/minidev/json/parser/i;.m:()V` @kind virtual;
  #L2f3264.  goto L2f3248;
  #L2f3266.  return @kind void;
}
procedure `void` `r`(`net.minidev.json.parser.i` v2 @kind this, `boolean`[] v3 @kind object) @signature `Lnet/minidev/json/parser/i;.r:([Z)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2f3278.  v0:= v2.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f327c.  v1:= 26I;
  #L2f3280.  if v0 == v1 then goto L2f32a2;
  #L2f3284.  if v0 < 0 then goto L2f329a;
  #L2f3288.  v1:= 126I;
  #L2f328c.  if v0 >= v1 then goto L2f329a;
  #L2f3290.  v0:= v3[v0] @kind boolean;
  #L2f3294.  if v0 == 0 then goto L2f329a;
  #L2f3298.  goto L2f32a2;
  #L2f329a.  call `m`(v2) @signature `Lnet/minidev/json/parser/i;.m:()V` @kind virtual;
  #L2f32a0.  goto L2f3278;
  #L2f32a2.  return @kind void;
}
procedure `void` `s`(`net.minidev.json.parser.i` v2 @kind this) @signature `Lnet/minidev/json/parser/i;.s:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2f32b4.  v0:= v2.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f32b8.  v1:= 32I;
  #L2f32bc.  if v0 > v1 then goto L2f32d2;
  #L2f32c0.  v1:= 26I;
  #L2f32c4.  if v0 != v1 then goto L2f32ca;
  #L2f32c8.  goto L2f32d2;
  #L2f32ca.  call `m`(v2) @signature `Lnet/minidev/json/parser/i;.m:()V` @kind virtual;
  #L2f32d0.  goto L2f32b4;
  #L2f32d2.  return @kind void;
}
