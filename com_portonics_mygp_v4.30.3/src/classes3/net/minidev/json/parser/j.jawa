record `net.minidev.json.parser.j` @kind class @AccessFlag ABSTRACT extends `net.minidev.json.parser.i` @kind class {
  `int` `net.minidev.json.parser.j.w` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`net.minidev.json.parser.j` v0 @kind this, `int` v1 ) @signature `Lnet/minidev/json/parser/j;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2f3504.  call `<init>`(v0, v1) @signature `Lnet/minidev/json/parser/i;.<init>:(I)V` @kind direct;
  #L2f350a.  return @kind void;
}
procedure `void` `i`(`net.minidev.json.parser.j` v1 @kind this, `boolean`[] v2 @kind object) @signature `Lnet/minidev/json/parser/j;.i:([Z)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2f3544.  v0:= v1.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f3548.  call `r`(v1, v2) @signature `Lnet/minidev/json/parser/i;.r:([Z)V` @kind virtual;
  #L2f354e.  v2:= v1.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f3552.  call `u`(v1, v0, v2) @signature `Lnet/minidev/json/parser/j;.u:(II)V` @kind virtual;
  #L2f3558.  return @kind void;
}
procedure `java.lang.Object` `k`(`net.minidev.json.parser.j` v8 @kind this, `boolean`[] v9 @kind object) @signature `Lnet/minidev/json/parser/j;.k:([Z)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2f32e4.  v0:= v8.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f32e8.  call `f`(v8) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f32ee.  call `q`(v8) @signature `Lnet/minidev/json/parser/i;.q:()V` @kind virtual;
  #L2f32f4.  v1:= v8.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f32f8.  v2:= 101I;
  #L2f32fc.  v3:= 46I;
  #L2f3300.  v4:= 26I;
  #L2f3304.  v5:= 126I;
  #L2f3308.  v6:= 69I;
  #L2f330c.  v7:= 1I;
  #L2f330e.  if v1 == v3 then goto L2f3382;
  #L2f3312.  if v1 == v6 then goto L2f3382;
  #L2f3316.  if v1 == v2 then goto L2f3382;
  #L2f331a.  call `s`(v8) @signature `Lnet/minidev/json/parser/i;.s:()V` @kind virtual;
  #L2f3320.  v1:= v8.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f3324.  if v1 < 0 then goto L2f336a;
  #L2f3328.  if v1 >= v5 then goto L2f336a;
  #L2f332c.  v2:= v9[v1] @kind boolean;
  #L2f3330.  if v2 != 0 then goto L2f336a;
  #L2f3334.  if v1 == v4 then goto L2f336a;
  #L2f3338.  call `r`(v8, v9) @signature `Lnet/minidev/json/parser/i;.r:([Z)V` @kind virtual;
  #L2f333e.  v9:= v8.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f3342.  call `u`(v8, v0, v9) @signature `Lnet/minidev/json/parser/j;.u:(II)V` @kind virtual;
  #L2f3348.  v9:= v8.`net.minidev.json.parser.i.o` @type ^`boolean` @kind boolean;
  #L2f334c.  if v9 == 0 then goto L2f3356;
  #L2f3350.  v9:= v8.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f3354.  return v9 @kind object;
  #L2f3356.  v9:= new `net.minidev.json.parser.ParseException`;
  #L2f335a.  v0:= v8.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f335e.  v1:= v8.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f3362.  call `<init>`(v9, v0, v7, v1) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f3368.  throw v9;
  #L2f336a.  v9:= v8.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f336e.  call `u`(v8, v0, v9) @signature `Lnet/minidev/json/parser/j;.u:(II)V` @kind virtual;
  #L2f3374.  v9:= v8.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f3378.  call temp:= `e`(v8, v9) @signature `Lnet/minidev/json/parser/i;.e:(Ljava/lang/String;)Ljava/lang/Number;` @kind virtual;
  #L2f337e.  v9:= temp @kind object;
  #L2f3380.  return v9 @kind object;
  #L2f3382.  if v1 != v3 then goto L2f3392;
  #L2f3386.  call `f`(v8) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f338c.  call `q`(v8) @signature `Lnet/minidev/json/parser/i;.q:()V` @kind virtual;
  #L2f3392.  v1:= v8.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f3396.  if v1 == v6 then goto L2f3402;
  #L2f339a.  if v1 == v2 then goto L2f3402;
  #L2f339e.  call `s`(v8) @signature `Lnet/minidev/json/parser/i;.s:()V` @kind virtual;
  #L2f33a4.  v1:= v8.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f33a8.  if v1 < 0 then goto L2f33ee;
  #L2f33ac.  if v1 >= v5 then goto L2f33ee;
  #L2f33b0.  v2:= v9[v1] @kind boolean;
  #L2f33b4.  if v2 != 0 then goto L2f33ee;
  #L2f33b8.  if v1 == v4 then goto L2f33ee;
  #L2f33bc.  call `r`(v8, v9) @signature `Lnet/minidev/json/parser/i;.r:([Z)V` @kind virtual;
  #L2f33c2.  v9:= v8.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f33c6.  call `u`(v8, v0, v9) @signature `Lnet/minidev/json/parser/j;.u:(II)V` @kind virtual;
  #L2f33cc.  v9:= v8.`net.minidev.json.parser.i.o` @type ^`boolean` @kind boolean;
  #L2f33d0.  if v9 == 0 then goto L2f33da;
  #L2f33d4.  v9:= v8.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f33d8.  return v9 @kind object;
  #L2f33da.  v9:= new `net.minidev.json.parser.ParseException`;
  #L2f33de.  v0:= v8.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f33e2.  v1:= v8.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f33e6.  call `<init>`(v9, v0, v7, v1) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f33ec.  throw v9;
  #L2f33ee.  v9:= v8.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f33f2.  call `u`(v8, v0, v9) @signature `Lnet/minidev/json/parser/j;.u:(II)V` @kind virtual;
  #L2f33f8.  call temp:= `c`(v8) @signature `Lnet/minidev/json/parser/i;.c:()Ljava/lang/Number;` @kind virtual;
  #L2f33fe.  v9:= temp @kind object;
  #L2f3400.  return v9 @kind object;
  #L2f3402.  v1:= v8.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f3406.  call `a`(v1, v6) @signature `Lnet/minidev/json/parser/h;.a:(C)V` @kind virtual;
  #L2f340c.  call `f`(v8) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f3412.  v1:= v8.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f3416.  v2:= 43I;
  #L2f341a.  if v1 == v2 then goto L2f3478;
  #L2f341e.  v2:= 45I;
  #L2f3422.  if v1 == v2 then goto L2f3478;
  #L2f3426.  v2:= 48I;
  #L2f342a.  if v1 < v2 then goto L2f3438;
  #L2f342e.  v2:= 57I;
  #L2f3432.  if v1 > v2 then goto L2f3438;
  #L2f3436.  goto L2f3478;
  #L2f3438.  call `r`(v8, v9) @signature `Lnet/minidev/json/parser/i;.r:([Z)V` @kind virtual;
  #L2f343e.  v9:= v8.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f3442.  call `u`(v8, v0, v9) @signature `Lnet/minidev/json/parser/j;.u:(II)V` @kind virtual;
  #L2f3448.  v9:= v8.`net.minidev.json.parser.i.o` @type ^`boolean` @kind boolean;
  #L2f344c.  if v9 == 0 then goto L2f3464;
  #L2f3450.  v9:= v8.`net.minidev.json.parser.i.m` @type ^`boolean` @kind boolean;
  #L2f3454.  if v9 != 0 then goto L2f345e;
  #L2f3458.  call `b`(v8) @signature `Lnet/minidev/json/parser/i;.b:()V` @kind virtual;
  #L2f345e.  v9:= v8.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f3462.  return v9 @kind object;
  #L2f3464.  v9:= new `net.minidev.json.parser.ParseException`;
  #L2f3468.  v0:= v8.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f346c.  v1:= v8.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f3470.  call `<init>`(v9, v0, v7, v1) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f3476.  throw v9;
  #L2f3478.  v2:= v8.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f347c.  call `a`(v2, v1) @signature `Lnet/minidev/json/parser/h;.a:(C)V` @kind virtual;
  #L2f3482.  call `f`(v8) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f3488.  call `q`(v8) @signature `Lnet/minidev/json/parser/i;.q:()V` @kind virtual;
  #L2f348e.  call `s`(v8) @signature `Lnet/minidev/json/parser/i;.s:()V` @kind virtual;
  #L2f3494.  v1:= v8.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f3498.  if v1 < 0 then goto L2f34de;
  #L2f349c.  if v1 >= v5 then goto L2f34de;
  #L2f34a0.  v2:= v9[v1] @kind boolean;
  #L2f34a4.  if v2 != 0 then goto L2f34de;
  #L2f34a8.  if v1 == v4 then goto L2f34de;
  #L2f34ac.  call `r`(v8, v9) @signature `Lnet/minidev/json/parser/i;.r:([Z)V` @kind virtual;
  #L2f34b2.  v9:= v8.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f34b6.  call `u`(v8, v0, v9) @signature `Lnet/minidev/json/parser/j;.u:(II)V` @kind virtual;
  #L2f34bc.  v9:= v8.`net.minidev.json.parser.i.o` @type ^`boolean` @kind boolean;
  #L2f34c0.  if v9 == 0 then goto L2f34ca;
  #L2f34c4.  v9:= v8.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f34c8.  return v9 @kind object;
  #L2f34ca.  v9:= new `net.minidev.json.parser.ParseException`;
  #L2f34ce.  v0:= v8.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f34d2.  v1:= v8.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f34d6.  call `<init>`(v9, v0, v7, v1) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f34dc.  throw v9;
  #L2f34de.  v9:= v8.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f34e2.  call `u`(v8, v0, v9) @signature `Lnet/minidev/json/parser/j;.u:(II)V` @kind virtual;
  #L2f34e8.  call temp:= `c`(v8) @signature `Lnet/minidev/json/parser/i;.c:()Ljava/lang/Number;` @kind virtual;
  #L2f34ee.  v9:= temp @kind object;
  #L2f34f0.  return v9 @kind object;
}
procedure `void` `n`(`net.minidev.json.parser.j` v4 @kind this) @signature `Lnet/minidev/json/parser/j;.n:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2f356c.  v0:= v4.`net.minidev.json.parser.i.p` @type ^`boolean` @kind boolean;
  #L2f3570.  if v0 != 0 then goto L2f35b2;
  #L2f3574.  v0:= v4.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f3578.  v1:= 39I;
  #L2f357c.  if v0 != v1 then goto L2f35b2;
  #L2f3580.  v0:= v4.`net.minidev.json.parser.i.o` @type ^`boolean` @kind boolean;
  #L2f3584.  if v0 == 0 then goto L2f3594;
  #L2f3588.  v0:= `@@net.minidev.json.parser.i.a` @type ^`boolean`[] @kind object;
  #L2f358c.  call `i`(v4, v0) @signature `Lnet/minidev/json/parser/j;.i:([Z)V` @kind virtual;
  #L2f3592.  return @kind void;
  #L2f3594.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f3598.  v1:= v4.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f359c.  v2:= 0I;
  #L2f359e.  v3:= v4.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f35a2.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L2f35a8.  v3:= temp @kind object;
  #L2f35aa.  call `<init>`(v0, v1, v2, v3) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f35b0.  throw v0;
  #L2f35b2.  v0:= v4.`net.minidev.json.parser.i.f` @type ^`char` @kind char;
  #L2f35b6.  v1:= v4.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f35ba.  v1:= v1 + 1;
  #L2f35be.  call temp:= `v`(v4, v0, v1) @signature `Lnet/minidev/json/parser/j;.v:(CI)I` @kind virtual;
  #L2f35c4.  v0:= temp;
  #L2f35c6.  v1:= -1I;
  #L2f35c8.  if v0 == v1 then goto L2f3612;
  #L2f35cc.  v2:= v4.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f35d0.  v2:= v2 + 1;
  #L2f35d4.  call `t`(v4, v2, v0) @signature `Lnet/minidev/json/parser/j;.t:(II)V` @kind virtual;
  #L2f35da.  v2:= v4.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f35de.  v3:= 92I;
  #L2f35e2.  call temp:= `indexOf`(v2, v3) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L2f35e8.  v2:= temp;
  #L2f35ea.  if v2 != v1 then goto L2f3600;
  #L2f35ee.  call `a`(v4) @signature `Lnet/minidev/json/parser/i;.a:()V` @kind virtual;
  #L2f35f4.  v4.`net.minidev.json.parser.i.l` @type ^`int` := v0;
  #L2f35f8.  call `f`(v4) @signature `Lnet/minidev/json/parser/i;.f:()V` @kind virtual;
  #L2f35fe.  return @kind void;
  #L2f3600.  v0:= v4.`net.minidev.json.parser.i.i` @type ^`net.minidev.json.parser.h` @kind object;
  #L2f3604.  call `b`(v0) @signature `Lnet/minidev/json/parser/h;.b:()V` @kind virtual;
  #L2f360a.  call `o`(v4) @signature `Lnet/minidev/json/parser/i;.o:()V` @kind virtual;
  #L2f3610.  return @kind void;
  #L2f3612.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f3616.  v1:= v4.`net.minidev.json.parser.j.w` @type ^`int`;
  #L2f361a.  v2:= 3I;
  #L2f361c.  v3:= 0I;
  #L2f361e.  call `<init>`(v0, v1, v2, v3) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f3624.  throw v0;
}
procedure `void` `t`(`int` v0 , `int` v1 ) @signature `Lnet/minidev/json/parser/j;.t:(II)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `u`(`net.minidev.json.parser.j` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lnet/minidev/json/parser/j;.u:(II)V` @AccessFlag PROTECTED {
    temp;

  #L2f351c.  call `t`(v0, v1, v2) @signature `Lnet/minidev/json/parser/j;.t:(II)V` @kind virtual;
  #L2f3522.  v1:= v0.`net.minidev.json.parser.i.k` @type ^`java.lang.String` @kind object;
  #L2f3526.  call temp:= `trim`(v1) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2f352c.  v1:= temp @kind object;
  #L2f352e.  v0.`net.minidev.json.parser.i.k` @type ^`java.lang.String` := v1 @kind object;
  #L2f3532.  return @kind void;
}
procedure `int` `v`(`char` v0 , `int` v1 ) @signature `Lnet/minidev/json/parser/j;.v:(CI)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
