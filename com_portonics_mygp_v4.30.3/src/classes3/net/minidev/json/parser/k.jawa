record `net.minidev.json.parser.k` @kind class @AccessFlag  extends `net.minidev.json.parser.j` @kind class {
  `java.lang.String` `net.minidev.json.parser.k.x` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`net.minidev.json.parser.k` v0 @kind this, `int` v1 ) @signature `Lnet/minidev/json/parser/k;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2f36ac.  call `<init>`(v0, v1) @signature `Lnet/minidev/json/parser/j;.<init>:(I)V` @kind direct;
  #L2f36b2.  return @kind void;
}
procedure `void` `f`(`net.minidev.json.parser.k` v2 @kind this) @signature `Lnet/minidev/json/parser/k;.f:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2f36e8.  v0:= v2.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f36ec.  v0:= v0 + 1;
  #L2f36f0.  v2.`net.minidev.json.parser.i.l` @type ^`int` := v0;
  #L2f36f4.  v1:= v2.`net.minidev.json.parser.j.w` @type ^`int`;
  #L2f36f8.  if v0 < v1 then goto L2f3706;
  #L2f36fc.  v0:= 26I;
  #L2f3700.  v2.`net.minidev.json.parser.i.f` @type ^`char` := v0 @kind char;
  #L2f3704.  goto L2f3716;
  #L2f3706.  v1:= v2.`net.minidev.json.parser.k.x` @type ^`java.lang.String` @kind object;
  #L2f370a.  call temp:= `charAt`(v1, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f3710.  v0:= temp;
  #L2f3712.  v2.`net.minidev.json.parser.i.f` @type ^`char` := v0 @kind char;
  #L2f3716.  return @kind void;
}
procedure `void` `j`(`net.minidev.json.parser.k` v4 @kind this) @signature `Lnet/minidev/json/parser/k;.j:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2f3728.  v0:= v4.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f372c.  v0:= v0 + 1;
  #L2f3730.  v4.`net.minidev.json.parser.i.l` @type ^`int` := v0;
  #L2f3734.  v1:= v4.`net.minidev.json.parser.j.w` @type ^`int`;
  #L2f3738.  if v0 >= v1 then goto L2f374e;
  #L2f373c.  v1:= v4.`net.minidev.json.parser.k.x` @type ^`java.lang.String` @kind object;
  #L2f3740.  call temp:= `charAt`(v1, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f3746.  v0:= temp;
  #L2f3748.  v4.`net.minidev.json.parser.i.f` @type ^`char` := v0 @kind char;
  #L2f374c.  return @kind void;
  #L2f374e.  v0:= 26I;
  #L2f3752.  v4.`net.minidev.json.parser.i.f` @type ^`char` := v0 @kind char;
  #L2f3756.  v0:= new `net.minidev.json.parser.ParseException`;
  #L2f375a.  v1:= v4.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f375e.  v1:= v1 + -1;
  #L2f3762.  v2:= 3I;
  #L2f3764.  v3:= "EOF" @kind object;
  #L2f3768.  call `<init>`(v0, v1, v2, v3) @signature `Lnet/minidev/json/parser/ParseException;.<init>:(IILjava/lang/Object;)V` @kind direct;
  #L2f376e.  throw v0;
}
procedure `void` `m`(`net.minidev.json.parser.k` v2 @kind this) @signature `Lnet/minidev/json/parser/k;.m:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2f3780.  v0:= v2.`net.minidev.json.parser.i.l` @type ^`int`;
  #L2f3784.  v0:= v0 + 1;
  #L2f3788.  v2.`net.minidev.json.parser.i.l` @type ^`int` := v0;
  #L2f378c.  v1:= v2.`net.minidev.json.parser.j.w` @type ^`int`;
  #L2f3790.  if v0 < v1 then goto L2f379e;
  #L2f3794.  v0:= 26I;
  #L2f3798.  v2.`net.minidev.json.parser.i.f` @type ^`char` := v0 @kind char;
  #L2f379c.  goto L2f37ae;
  #L2f379e.  v1:= v2.`net.minidev.json.parser.k.x` @type ^`java.lang.String` @kind object;
  #L2f37a2.  call temp:= `charAt`(v1, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2f37a8.  v0:= temp;
  #L2f37aa.  v2.`net.minidev.json.parser.i.f` @type ^`char` := v0 @kind char;
  #L2f37ae.  return @kind void;
}
procedure `void` `t`(`net.minidev.json.parser.k` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lnet/minidev/json/parser/k;.t:(II)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2f36c4.  v0:= v1.`net.minidev.json.parser.k.x` @type ^`java.lang.String` @kind object;
  #L2f36c8.  call temp:= `substring`(v0, v2, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2f36ce.  v2:= temp @kind object;
  #L2f36d0.  v1.`net.minidev.json.parser.i.k` @type ^`java.lang.String` := v2 @kind object;
  #L2f36d4.  return @kind void;
}
procedure `int` `v`(`net.minidev.json.parser.k` v1 @kind this, `char` v2 , `int` v3 ) @signature `Lnet/minidev/json/parser/k;.v:(CI)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2f3638.  v0:= v1.`net.minidev.json.parser.k.x` @type ^`java.lang.String` @kind object;
  #L2f363c.  call temp:= `indexOf`(v0, v2, v3) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L2f3642.  v2:= temp;
  #L2f3644.  return v2;
}
procedure `java.lang.Object` `w`(`net.minidev.json.parser.k` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lnet/minidev/json/parser/k;.w:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2f3658.  v0:= `@@net.minidev.json.parser.c.a` @type ^`net.minidev.json.parser.c` @kind object;
  #L2f365c.  v1:= `@@net.minidev.json.parser.e.a` @type ^`net.minidev.json.parser.e` @kind object;
  #L2f3660.  call temp:= `x`(v2, v3, v0, v1) @signature `Lnet/minidev/json/parser/k;.x:(Ljava/lang/String;Lnet/minidev/json/parser/c;Lnet/minidev/json/parser/d;)Ljava/lang/Object;` @kind virtual;
  #L2f3666.  v3:= temp @kind object;
  #L2f3668.  return v3 @kind object;
}
procedure `java.lang.Object` `x`(`net.minidev.json.parser.k` v0 @kind this, `java.lang.String` v1 @kind object, `net.minidev.json.parser.c` v2 @kind object, `net.minidev.json.parser.d` v3 @kind object) @signature `Lnet/minidev/json/parser/k;.x:(Ljava/lang/String;Lnet/minidev/json/parser/c;Lnet/minidev/json/parser/d;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L2f367c.  v0.`net.minidev.json.parser.k.x` @type ^`java.lang.String` := v1 @kind object;
  #L2f3680.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2f3686.  v1:= temp;
  #L2f3688.  v0.`net.minidev.json.parser.j.w` @type ^`int` := v1;
  #L2f368c.  v1:= -1I;
  #L2f368e.  v0.`net.minidev.json.parser.i.l` @type ^`int` := v1;
  #L2f3692.  call temp:= `d`(v0, v2, v3) @signature `Lnet/minidev/json/parser/i;.d:(Lnet/minidev/json/parser/c;Lnet/minidev/json/parser/d;)Ljava/lang/Object;` @kind virtual;
  #L2f3698.  v1:= temp @kind object;
  #L2f369a.  return v1 @kind object;
}
