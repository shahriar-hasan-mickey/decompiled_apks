record `net.minidev.json.JSONObject` @kind class @AccessFlag PUBLIC extends `java.util.HashMap` @kind class, `net.minidev.json.a` @kind interface, `net.minidev.json.b` @kind interface, `net.minidev.json.d` @kind interface {
}
global `long` `@@net.minidev.json.JSONObject.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`net.minidev.json.JSONObject` v0 @kind this) @signature `Lnet/minidev/json/JSONObject;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2f1124.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L2f112a.  return @kind void;
}
procedure `void` `<init>`(`net.minidev.json.JSONObject` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Lnet/minidev/json/JSONObject;.<init>:(Ljava/util/Map;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2f113c.  call `<init>`(v0, v1) @signature `Ljava/util/HashMap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L2f1142.  return @kind void;
}
procedure `net.minidev.json.JSONArray` `a`(`net.minidev.json.JSONArray` v0 @kind object, `net.minidev.json.JSONArray` v1 @kind object) @signature `Lnet/minidev/json/JSONObject;.a:(Lnet/minidev/json/JSONArray;Lnet/minidev/json/JSONArray;)Lnet/minidev/json/JSONArray;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L2f0f04.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/ArrayList;.addAll:(Ljava/util/Collection;)Z` @kind virtual;
  #L2f0f0a.  return v0 @kind object;
}
procedure `net.minidev.json.JSONObject` `b`(`net.minidev.json.JSONObject` v5 @kind object, `net.minidev.json.JSONObject` v6 @kind object) @signature `Lnet/minidev/json/JSONObject;.b:(Lnet/minidev/json/JSONObject;Lnet/minidev/json/JSONObject;)Lnet/minidev/json/JSONObject;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2f0f80.  if v6 != 0 then goto L2f0f86;
  #L2f0f84.  return v5 @kind object;
  #L2f0f86.  call temp:= `keySet`(v5) @signature `Ljava/util/HashMap;.keySet:()Ljava/util/Set;` @kind virtual;
  #L2f0f8c.  v0:= temp @kind object;
  #L2f0f8e.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2f0f94.  v0:= temp @kind object;
  #L2f0f96.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2f0f9c.  v1:= temp;
  #L2f0f9e.  if v1 == 0 then goto L2f10cc;
  #L2f0fa2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2f0fa8.  v1:= temp @kind object;
  #L2f0faa.  v1:= (`java.lang.String`) v1 @kind object;
  #L2f0fae.  call temp:= `get`(v5, v1) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2f0fb4.  v2:= temp @kind object;
  #L2f0fb6.  call temp:= `get`(v6, v1) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2f0fbc.  v3:= temp @kind object;
  #L2f0fbe.  if v3 != 0 then goto L2f0fc4;
  #L2f0fc2.  goto L2f0f96;
  #L2f0fc4.  v4:= instanceof @variable v2 @type ^`net.minidev.json.JSONArray` @kind boolean;
  #L2f0fc8.  if v4 == 0 then goto L2f0fe0;
  #L2f0fcc.  v2:= (`net.minidev.json.JSONArray`) v2 @kind object;
  #L2f0fd0.  call temp:= `merge`(v2, v3) @signature `Lnet/minidev/json/JSONObject;.merge:(Lnet/minidev/json/JSONArray;Ljava/lang/Object;)Lnet/minidev/json/JSONArray;` @kind static;
  #L2f0fd6.  v2:= temp @kind object;
  #L2f0fd8.  call temp:= `put`(v5, v1, v2) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2f0fde.  goto L2f0f96;
  #L2f0fe0.  v4:= instanceof @variable v2 @type ^`net.minidev.json.JSONObject` @kind boolean;
  #L2f0fe4.  if v4 == 0 then goto L2f0ffc;
  #L2f0fe8.  v2:= (`net.minidev.json.JSONObject`) v2 @kind object;
  #L2f0fec.  call temp:= `merge`(v2, v3) @signature `Lnet/minidev/json/JSONObject;.merge:(Lnet/minidev/json/JSONObject;Ljava/lang/Object;)Lnet/minidev/json/JSONObject;` @kind static;
  #L2f0ff2.  v2:= temp @kind object;
  #L2f0ff4.  call temp:= `put`(v5, v1, v2) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2f0ffa.  goto L2f0f96;
  #L2f0ffc.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f1002.  v1:= temp;
  #L2f1004.  if v1 == 0 then goto L2f100a;
  #L2f1008.  goto L2f0f96;
  #L2f100a.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2f1010.  v5:= temp @kind object;
  #L2f1012.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2f1018.  v6:= temp @kind object;
  #L2f101a.  call temp:= `equals`(v5, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f1020.  v5:= temp;
  #L2f1022.  if v5 == 0 then goto L2f106e;
  #L2f1026.  v5:= new `java.lang.RuntimeException`;
  #L2f102a.  v6:= new `java.lang.StringBuilder`;
  #L2f102e.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f1034.  v0:= "JSON merge can not merge two " @kind object;
  #L2f1038.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f103e.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2f1044.  v0:= temp @kind object;
  #L2f1046.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2f104c.  v0:= temp @kind object;
  #L2f104e.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f1054.  v0:= " Object together" @kind object;
  #L2f1058.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f105e.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f1064.  v6:= temp @kind object;
  #L2f1066.  call `<init>`(v5, v6) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f106c.  throw v5;
  #L2f106e.  v5:= new `java.lang.RuntimeException`;
  #L2f1072.  v6:= new `java.lang.StringBuilder`;
  #L2f1076.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f107c.  v0:= "JSON merge can not merge " @kind object;
  #L2f1080.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f1086.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2f108c.  v0:= temp @kind object;
  #L2f108e.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2f1094.  v0:= temp @kind object;
  #L2f1096.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f109c.  v0:= " with " @kind object;
  #L2f10a0.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f10a6.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2f10ac.  v0:= temp @kind object;
  #L2f10ae.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2f10b4.  v0:= temp @kind object;
  #L2f10b6.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f10bc.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f10c2.  v6:= temp @kind object;
  #L2f10c4.  call `<init>`(v5, v6) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f10ca.  throw v5;
  #L2f10cc.  call temp:= `keySet`(v6) @signature `Ljava/util/HashMap;.keySet:()Ljava/util/Set;` @kind virtual;
  #L2f10d2.  v0:= temp @kind object;
  #L2f10d4.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2f10da.  v0:= temp @kind object;
  #L2f10dc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2f10e2.  v1:= temp;
  #L2f10e4.  if v1 == 0 then goto L2f1112;
  #L2f10e8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2f10ee.  v1:= temp @kind object;
  #L2f10f0.  v1:= (`java.lang.String`) v1 @kind object;
  #L2f10f4.  call temp:= `containsKey`(v5, v1) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f10fa.  v2:= temp;
  #L2f10fc.  if v2 == 0 then goto L2f1102;
  #L2f1100.  goto L2f10dc;
  #L2f1102.  call temp:= `get`(v6, v1) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2f1108.  v2:= temp @kind object;
  #L2f110a.  call temp:= `put`(v5, v1, v2) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2f1110.  goto L2f10dc;
  #L2f1112.  return v5 @kind object;
}
procedure `java.lang.String` `escape`(`java.lang.String` v0 @kind object) @signature `Lnet/minidev/json/JSONObject;.escape:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2f0de0.  call temp:= `a`(v0) @signature `Lnet/minidev/json/g;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L2f0de6.  v0:= temp @kind object;
  #L2f0de8.  return v0 @kind object;
}
procedure `net.minidev.json.JSONArray` `merge`(`net.minidev.json.JSONArray` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lnet/minidev/json/JSONObject;.merge:(Lnet/minidev/json/JSONArray;Ljava/lang/Object;)Lnet/minidev/json/JSONArray;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;

  #L2f0ed0.  if v2 != 0 then goto L2f0ed6;
  #L2f0ed4.  return v1 @kind object;
  #L2f0ed6.  v0:= instanceof @variable v1 @type ^`net.minidev.json.JSONArray` @kind boolean;
  #L2f0eda.  if v0 == 0 then goto L2f0eec;
  #L2f0ede.  v2:= (`net.minidev.json.JSONArray`) v2 @kind object;
  #L2f0ee2.  call temp:= `a`(v1, v2) @signature `Lnet/minidev/json/JSONObject;.a:(Lnet/minidev/json/JSONArray;Lnet/minidev/json/JSONArray;)Lnet/minidev/json/JSONArray;` @kind static;
  #L2f0ee8.  v1:= temp @kind object;
  #L2f0eea.  return v1 @kind object;
  #L2f0eec.  call temp:= `add`(v1, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L2f0ef2.  return v1 @kind object;
}
procedure `net.minidev.json.JSONObject` `merge`(`net.minidev.json.JSONObject` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lnet/minidev/json/JSONObject;.merge:(Lnet/minidev/json/JSONObject;Ljava/lang/Object;)Lnet/minidev/json/JSONObject;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;

  #L2f0f1c.  if v3 != 0 then goto L2f0f22;
  #L2f0f20.  return v2 @kind object;
  #L2f0f22.  v0:= instanceof @variable v3 @type ^`net.minidev.json.JSONObject` @kind boolean;
  #L2f0f26.  if v0 == 0 then goto L2f0f38;
  #L2f0f2a.  v3:= (`net.minidev.json.JSONObject`) v3 @kind object;
  #L2f0f2e.  call temp:= `b`(v2, v3) @signature `Lnet/minidev/json/JSONObject;.b:(Lnet/minidev/json/JSONObject;Lnet/minidev/json/JSONObject;)Lnet/minidev/json/JSONObject;` @kind static;
  #L2f0f34.  v2:= temp @kind object;
  #L2f0f36.  return v2 @kind object;
  #L2f0f38.  v2:= new `java.lang.RuntimeException`;
  #L2f0f3c.  v0:= new `java.lang.StringBuilder`;
  #L2f0f40.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f0f46.  v1:= "JSON megre can not merge JSONObject with " @kind object;
  #L2f0f4a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f0f50.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2f0f56.  v3:= temp @kind object;
  #L2f0f58.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2f0f5e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f0f64.  v3:= temp @kind object;
  #L2f0f66.  call `<init>`(v2, v3) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f0f6c.  throw v2;
}
procedure `java.lang.String` `toJSONString`(`java.util.Map` v1 @kind object) @signature `Lnet/minidev/json/JSONObject;.toJSONString:(Ljava/util/Map;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2f0e1c.  v0:= `@@net.minidev.json.g.a` @type ^`net.minidev.json.e` @kind object;
  #L2f0e20.  call temp:= `toJSONString`(v1, v0) @signature `Lnet/minidev/json/JSONObject;.toJSONString:(Ljava/util/Map;Lnet/minidev/json/e;)Ljava/lang/String;` @kind static;
  #L2f0e26.  v1:= temp @kind object;
  #L2f0e28.  return v1 @kind object;
}
procedure `java.lang.String` `toJSONString`(`java.util.Map` v1 @kind object, `net.minidev.json.e` v2 @kind object) @signature `Lnet/minidev/json/JSONObject;.toJSONString:(Ljava/util/Map;Lnet/minidev/json/e;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2f0e3c.  v0:= new `java.lang.StringBuilder`;
  #L2f0e40.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2f0e46.  call `writeJSON`(v1, v0, v2) @signature `Lnet/minidev/json/JSONObject;.writeJSON:(Ljava/util/Map;Ljava/lang/Appendable;Lnet/minidev/json/e;)V` @kind static;
  #L2f0e4c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2f0e52.  v1:= temp @kind object;
  #L2f0e54.  return v1 @kind object;
  catch `java.io.IOException` @[L2f0e46..L2f0e4c] goto L2f0e4c;
}
procedure `void` `writeJSON`(`java.util.Map` v1 @kind object, `java.lang.Appendable` v2 @kind object) @signature `Lnet/minidev/json/JSONObject;.writeJSON:(Ljava/util/Map;Ljava/lang/Appendable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2f116c.  v0:= `@@net.minidev.json.g.a` @type ^`net.minidev.json.e` @kind object;
  #L2f1170.  call `writeJSON`(v1, v2, v0) @signature `Lnet/minidev/json/JSONObject;.writeJSON:(Ljava/util/Map;Ljava/lang/Appendable;Lnet/minidev/json/e;)V` @kind static;
  #L2f1176.  return @kind void;
}
procedure `void` `writeJSON`(`java.util.Map` v1 @kind object, `java.lang.Appendable` v2 @kind object, `net.minidev.json.e` v3 @kind object) @signature `Lnet/minidev/json/JSONObject;.writeJSON:(Ljava/util/Map;Ljava/lang/Appendable;Lnet/minidev/json/e;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2f1188.  if v1 != 0 then goto L2f1198;
  #L2f118c.  v1:= "null" @kind object;
  #L2f1190.  call temp:= `append`(v2, v1) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L2f1196.  return @kind void;
  #L2f1198.  v0:= `@@net.minidev.json.q.y.g` @type ^`net.minidev.json.q.z` @kind object;
  #L2f119c.  call `a`(v0, v1, v2, v3) @signature `Lnet/minidev/json/q/z;.a:(Ljava/lang/Object;Ljava/lang/Appendable;Lnet/minidev/json/e;)V` @kind interface;
  #L2f11a2.  return @kind void;
}
procedure `void` `merge`(`net.minidev.json.JSONObject` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lnet/minidev/json/JSONObject;.merge:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L2f1154.  call temp:= `merge`(v0, v1) @signature `Lnet/minidev/json/JSONObject;.merge:(Lnet/minidev/json/JSONObject;Ljava/lang/Object;)Lnet/minidev/json/JSONObject;` @kind static;
  #L2f115a.  return @kind void;
}
procedure `java.lang.String` `toJSONString`(`net.minidev.json.JSONObject` v1 @kind this) @signature `Lnet/minidev/json/JSONObject;.toJSONString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f0dfc.  v0:= `@@net.minidev.json.g.a` @type ^`net.minidev.json.e` @kind object;
  #L2f0e00.  call temp:= `toJSONString`(v1, v0) @signature `Lnet/minidev/json/JSONObject;.toJSONString:(Ljava/util/Map;Lnet/minidev/json/e;)Ljava/lang/String;` @kind static;
  #L2f0e06.  v0:= temp @kind object;
  #L2f0e08.  return v0 @kind object;
}
procedure `java.lang.String` `toJSONString`(`net.minidev.json.JSONObject` v0 @kind this, `net.minidev.json.e` v1 @kind object) @signature `Lnet/minidev/json/JSONObject;.toJSONString:(Lnet/minidev/json/e;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L2f0e78.  call temp:= `toJSONString`(v0, v1) @signature `Lnet/minidev/json/JSONObject;.toJSONString:(Ljava/util/Map;Lnet/minidev/json/e;)Ljava/lang/String;` @kind static;
  #L2f0e7e.  v1:= temp @kind object;
  #L2f0e80.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`net.minidev.json.JSONObject` v1 @kind this) @signature `Lnet/minidev/json/JSONObject;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f0e94.  v0:= `@@net.minidev.json.g.a` @type ^`net.minidev.json.e` @kind object;
  #L2f0e98.  call temp:= `toJSONString`(v1, v0) @signature `Lnet/minidev/json/JSONObject;.toJSONString:(Ljava/util/Map;Lnet/minidev/json/e;)Ljava/lang/String;` @kind static;
  #L2f0e9e.  v0:= temp @kind object;
  #L2f0ea0.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`net.minidev.json.JSONObject` v0 @kind this, `net.minidev.json.e` v1 @kind object) @signature `Lnet/minidev/json/JSONObject;.toString:(Lnet/minidev/json/e;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L2f0eb4.  call temp:= `toJSONString`(v0, v1) @signature `Lnet/minidev/json/JSONObject;.toJSONString:(Ljava/util/Map;Lnet/minidev/json/e;)Ljava/lang/String;` @kind static;
  #L2f0eba.  v1:= temp @kind object;
  #L2f0ebc.  return v1 @kind object;
}
procedure `void` `writeJSONString`(`net.minidev.json.JSONObject` v1 @kind this, `java.lang.Appendable` v2 @kind object) @signature `Lnet/minidev/json/JSONObject;.writeJSONString:(Ljava/lang/Appendable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2f11b4.  v0:= `@@net.minidev.json.g.a` @type ^`net.minidev.json.e` @kind object;
  #L2f11b8.  call `writeJSON`(v1, v2, v0) @signature `Lnet/minidev/json/JSONObject;.writeJSON:(Ljava/util/Map;Ljava/lang/Appendable;Lnet/minidev/json/e;)V` @kind static;
  #L2f11be.  return @kind void;
}
procedure `void` `writeJSONString`(`net.minidev.json.JSONObject` v0 @kind this, `java.lang.Appendable` v1 @kind object, `net.minidev.json.e` v2 @kind object) @signature `Lnet/minidev/json/JSONObject;.writeJSONString:(Ljava/lang/Appendable;Lnet/minidev/json/e;)V` @AccessFlag PUBLIC {
    temp;

  #L2f11d0.  call `writeJSON`(v0, v1, v2) @signature `Lnet/minidev/json/JSONObject;.writeJSON:(Ljava/util/Map;Ljava/lang/Appendable;Lnet/minidev/json/e;)V` @kind static;
  #L2f11d6.  return @kind void;
}
