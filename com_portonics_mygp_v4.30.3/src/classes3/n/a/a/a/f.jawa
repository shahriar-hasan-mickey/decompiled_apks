record `n.a.a.a.f` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `n.a.a.b.a` `n.a.a.a.f.a` @AccessFlag PROTECTED;
  `n.a.a.a.j` `n.a.a.a.f.b` @AccessFlag PROTECTED;
  `n.a.a.a.j` `n.a.a.a.f.c` @AccessFlag PROTECTED;
  `java.math.BigInteger` `n.a.a.a.f.d` @AccessFlag PROTECTED;
  `java.math.BigInteger` `n.a.a.a.f.e` @AccessFlag PROTECTED;
  `int` `n.a.a.a.f.f` @AccessFlag PROTECTED;
  `n.a.a.a.u.a` `n.a.a.a.f.g` @AccessFlag PROTECTED;
  `n.a.a.a.k` `n.a.a.a.f.h` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`n.a.a.a.f` v1 @kind this, `n.a.a.b.a` v2 @kind object) @signature `Ln/a/a/a/f;.<init>:(Ln/a/a/b/a;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L349644.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L34964a.  v0:= 0I;
  #L34964c.  v1.`n.a.a.a.f.f` @type ^`int` := v0;
  #L349650.  v0:= 0I;
  #L349652.  v1.`n.a.a.a.f.g` @type ^`n.a.a.a.u.a` := v0 @kind object;
  #L349656.  v1.`n.a.a.a.f.h` @type ^`n.a.a.a.k` := v0 @kind object;
  #L34965a.  v1.`n.a.a.a.f.a` @type ^`n.a.a.b.a` := v2 @kind object;
  #L34965e.  return @kind void;
}
procedure `void` `a`(`n.a.a.a.f` v2 @kind this, `n.a.a.a.p`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Ln/a/a/a/f;.a:([Ln/a/a/a/p;II)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L349670.  if v3 == 0 then goto L3496cc;
  #L349674.  if v4 < 0 then goto L3496bc;
  #L349678.  if v5 < 0 then goto L3496bc;
  #L34967c.  v0:= length @variable v3;
  #L34967e.  v0:= v0 - v5 @kind int;
  #L349680.  if v4 > v0 then goto L3496bc;
  #L349684.  v0:= 0I;
  #L349686.  if v0 >= v5 then goto L3496ba;
  #L34968a.  v1:= v4 + v0 @kind int;
  #L34968e.  v1:= v3[v1] @kind object;
  #L349692.  if v1 == 0 then goto L3496b4;
  #L349696.  call temp:= `i`(v1) @signature `Ln/a/a/a/p;.i:()Ln/a/a/a/f;` @kind virtual;
  #L34969c.  v1:= temp @kind object;
  #L34969e.  if v2 != v1 then goto L3496a4;
  #L3496a2.  goto L3496b4;
  #L3496a4.  v3:= new `java.lang.IllegalArgumentException`;
  #L3496a8.  v4:= "'points' entries must be null or on this curve" @kind object;
  #L3496ac.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3496b2.  throw v3;
  #L3496b4.  v0:= v0 + 1;
  #L3496b8.  goto L349686;
  #L3496ba.  return @kind void;
  #L3496bc.  v3:= new `java.lang.IllegalArgumentException`;
  #L3496c0.  v4:= "invalid range specified for 'points'" @kind object;
  #L3496c4.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3496ca.  throw v3;
  #L3496cc.  v3:= new `java.lang.IllegalArgumentException`;
  #L3496d0.  v4:= "'points' cannot be null" @kind object;
  #L3496d4.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3496da.  goto L3496de;
  #L3496dc.  throw v3;
  #L3496de.  goto L3496dc;
}
procedure `n.a.a.a.f` `b`() @signature `Ln/a/a/a/f;.b:()Ln/a/a/a/f;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `n.a.a.a.e` `c`(`n.a.a.a.f` v4 @kind this) @signature `Ln/a/a/a/f;.c:()Ln/a/a/a/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L349308.  v0:= new `n.a.a.a.e`;
  #L34930c.  v1:= v4.`n.a.a.a.f.f` @type ^`int`;
  #L349310.  v2:= v4.`n.a.a.a.f.g` @type ^`n.a.a.a.u.a` @kind object;
  #L349314.  v3:= v4.`n.a.a.a.f.h` @type ^`n.a.a.a.k` @kind object;
  #L349318.  call `<init>`(v0, v4, v1, v2, v3) @signature `Ln/a/a/a/e;.<init>:(Ln/a/a/a/f;ILn/a/a/a/u/a;Ln/a/a/a/k;)V` @kind direct;
  #L34931e.  return v0 @kind object;
}
procedure `n.a.a.a.p` `d`(`n.a.a.a.f` v1 @kind this, `java.math.BigInteger` v2 @kind object, `java.math.BigInteger` v3 @kind object) @signature `Ln/a/a/a/f;.d:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ln/a/a/a/p;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L349360.  v0:= 0I;
  #L349362.  call temp:= `e`(v1, v2, v3, v0) @signature `Ln/a/a/a/f;.e:(Ljava/math/BigInteger;Ljava/math/BigInteger;Z)Ln/a/a/a/p;` @kind virtual;
  #L349368.  v2:= temp @kind object;
  #L34936a.  return v2 @kind object;
}
procedure `n.a.a.a.p` `e`(`n.a.a.a.f` v0 @kind this, `java.math.BigInteger` v1 @kind object, `java.math.BigInteger` v2 @kind object, `boolean` v3 ) @signature `Ln/a/a/a/f;.e:(Ljava/math/BigInteger;Ljava/math/BigInteger;Z)Ln/a/a/a/p;` @AccessFlag PUBLIC {
    temp;

  #L34937c.  call temp:= `j`(v0, v1) @signature `Ln/a/a/a/f;.j:(Ljava/math/BigInteger;)Ln/a/a/a/j;` @kind virtual;
  #L349382.  v1:= temp @kind object;
  #L349384.  call temp:= `j`(v0, v2) @signature `Ln/a/a/a/f;.j:(Ljava/math/BigInteger;)Ln/a/a/a/j;` @kind virtual;
  #L34938a.  v2:= temp @kind object;
  #L34938c.  call temp:= `f`(v0, v1, v2, v3) @signature `Ln/a/a/a/f;.f:(Ln/a/a/a/j;Ln/a/a/a/j;Z)Ln/a/a/a/p;` @kind virtual;
  #L349392.  v1:= temp @kind object;
  #L349394.  return v1 @kind object;
}
procedure `boolean` `equals`(`n.a.a.a.f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ln/a/a/a/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L349180.  if v1 == v2 then goto L3491a2;
  #L349184.  v0:= instanceof @variable v2 @type ^`n.a.a.a.f` @kind boolean;
  #L349188.  if v0 == 0 then goto L34919e;
  #L34918c.  v2:= (`n.a.a.a.f`) v2 @kind object;
  #L349190.  call temp:= `i`(v1, v2) @signature `Ln/a/a/a/f;.i:(Ln/a/a/a/f;)Z` @kind virtual;
  #L349196.  v2:= temp;
  #L349198.  if v2 == 0 then goto L34919e;
  #L34919c.  goto L3491a2;
  #L34919e.  v2:= 0I;
  #L3491a0.  goto L3491a4;
  #L3491a2.  v2:= 1I;
  #L3491a4.  return v2;
}
procedure `n.a.a.a.p` `f`(`n.a.a.a.j` v0 @kind object, `n.a.a.a.j` v1 @kind object, `boolean` v2 ) @signature `Ln/a/a/a/f;.f:(Ln/a/a/a/j;Ln/a/a/a/j;Z)Ln/a/a/a/p;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `n.a.a.a.p` `g`(`n.a.a.a.f` v7 @kind this, `byte`[] v8 @kind object) @signature `Ln/a/a/a/f;.g:([B)Ln/a/a/a/p;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3493a8.  call temp:= `p`(v7) @signature `Ln/a/a/a/f;.p:()I` @kind virtual;
  #L3493ae.  v0:= temp;
  #L3493b0.  v1:= 7I;
  #L3493b2.  v0:= v0 + v1 @kind int;
  #L3493b4.  v0:= v0 / 8;
  #L3493b8.  v2:= 0I;
  #L3493ba.  v3:= v8[v2] @kind byte;
  #L3493be.  v4:= 1I;
  #L3493c0.  if v3 == 0 then goto L3494fe;
  #L3493c4.  v5:= 2I;
  #L3493c6.  if v3 == v5 then goto L3494b2;
  #L3493ca.  v5:= 3I;
  #L3493cc.  if v3 == v5 then goto L3494b2;
  #L3493d0.  v5:= 4I;
  #L3493d2.  if v3 == v5 then goto L349478;
  #L3493d6.  v5:= 6I;
  #L3493d8.  if v3 == v5 then goto L34941c;
  #L3493dc.  if v3 != v1 then goto L3493e2;
  #L3493e0.  goto L34941c;
  #L3493e2.  v8:= new `java.lang.IllegalArgumentException`;
  #L3493e6.  v0:= new `java.lang.StringBuilder`;
  #L3493ea.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3493f0.  v1:= "Invalid point encoding 0x" @kind object;
  #L3493f4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3493fa.  v1:= 16I;
  #L3493fe.  call temp:= `toString`(v3, v1) @signature `Ljava/lang/Integer;.toString:(II)Ljava/lang/String;` @kind static;
  #L349404.  v1:= temp @kind object;
  #L349406.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L34940c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L349412.  v0:= temp @kind object;
  #L349414.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L34941a.  throw v8;
  #L34941c.  v5:= length @variable v8;
  #L34941e.  v6:= v0 * 2;
  #L349422.  v6:= v6 + v4 @kind int;
  #L349424.  if v5 != v6 then goto L349468;
  #L349428.  call temp:= `c`(v8, v4, v0) @signature `Lorg/bouncycastle/util/b;.c:([BII)Ljava/math/BigInteger;` @kind static;
  #L34942e.  v5:= temp @kind object;
  #L349430.  v6:= v0 + 1;
  #L349434.  call temp:= `c`(v8, v6, v0) @signature `Lorg/bouncycastle/util/b;.c:([BII)Ljava/math/BigInteger;` @kind static;
  #L34943a.  v8:= temp @kind object;
  #L34943c.  call temp:= `testBit`(v8, v2) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L349442.  v0:= temp;
  #L349444.  if v3 != v1 then goto L34944a;
  #L349448.  v2:= 1I;
  #L34944a.  if v0 != v2 then goto L349458;
  #L34944e.  call temp:= `w`(v7, v5, v8) @signature `Ln/a/a/a/f;.w:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ln/a/a/a/p;` @kind virtual;
  #L349454.  v8:= temp @kind object;
  #L349456.  goto L34950c;
  #L349458.  v8:= new `java.lang.IllegalArgumentException`;
  #L34945c.  v0:= "Inconsistent Y coordinate in hybrid encoding" @kind object;
  #L349460.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L349466.  throw v8;
  #L349468.  v8:= new `java.lang.IllegalArgumentException`;
  #L34946c.  v0:= "Incorrect length for hybrid encoding" @kind object;
  #L349470.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L349476.  throw v8;
  #L349478.  v1:= length @variable v8;
  #L34947a.  v2:= v0 * 2;
  #L34947e.  v2:= v2 + v4 @kind int;
  #L349480.  if v1 != v2 then goto L3494a2;
  #L349484.  call temp:= `c`(v8, v4, v0) @signature `Lorg/bouncycastle/util/b;.c:([BII)Ljava/math/BigInteger;` @kind static;
  #L34948a.  v1:= temp @kind object;
  #L34948c.  v2:= v0 + 1;
  #L349490.  call temp:= `c`(v8, v2, v0) @signature `Lorg/bouncycastle/util/b;.c:([BII)Ljava/math/BigInteger;` @kind static;
  #L349496.  v8:= temp @kind object;
  #L349498.  call temp:= `w`(v7, v1, v8) @signature `Ln/a/a/a/f;.w:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ln/a/a/a/p;` @kind virtual;
  #L34949e.  v8:= temp @kind object;
  #L3494a0.  goto L34950c;
  #L3494a2.  v8:= new `java.lang.IllegalArgumentException`;
  #L3494a6.  v0:= "Incorrect length for uncompressed encoding" @kind object;
  #L3494aa.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3494b0.  throw v8;
  #L3494b2.  v1:= length @variable v8;
  #L3494b4.  v2:= v0 + 1;
  #L3494b8.  if v1 != v2 then goto L3494ee;
  #L3494bc.  v1:= v3 ^& 1;
  #L3494c0.  call temp:= `c`(v8, v4, v0) @signature `Lorg/bouncycastle/util/b;.c:([BII)Ljava/math/BigInteger;` @kind static;
  #L3494c6.  v8:= temp @kind object;
  #L3494c8.  call temp:= `h`(v7, v1, v8) @signature `Ln/a/a/a/f;.h:(ILjava/math/BigInteger;)Ln/a/a/a/p;` @kind virtual;
  #L3494ce.  v8:= temp @kind object;
  #L3494d0.  call temp:= `z`(v8) @signature `Ln/a/a/a/p;.z:()Z` @kind virtual;
  #L3494d6.  v0:= temp;
  #L3494d8.  if v0 == 0 then goto L3494de;
  #L3494dc.  goto L34950c;
  #L3494de.  v8:= new `java.lang.IllegalArgumentException`;
  #L3494e2.  v0:= "Invalid point" @kind object;
  #L3494e6.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3494ec.  throw v8;
  #L3494ee.  v8:= new `java.lang.IllegalArgumentException`;
  #L3494f2.  v0:= "Incorrect length for compressed encoding" @kind object;
  #L3494f6.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3494fc.  throw v8;
  #L3494fe.  v8:= length @variable v8;
  #L349500.  if v8 != v4 then goto L349530;
  #L349504.  call temp:= `q`(v7) @signature `Ln/a/a/a/f;.q:()Ln/a/a/a/p;` @kind virtual;
  #L34950a.  v8:= temp @kind object;
  #L34950c.  if v3 == 0 then goto L34952e;
  #L349510.  call temp:= `t`(v8) @signature `Ln/a/a/a/p;.t:()Z` @kind virtual;
  #L349516.  v0:= temp;
  #L349518.  if v0 != 0 then goto L34951e;
  #L34951c.  goto L34952e;
  #L34951e.  v8:= new `java.lang.IllegalArgumentException`;
  #L349522.  v0:= "Invalid infinity encoding" @kind object;
  #L349526.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L34952c.  throw v8;
  #L34952e.  return v8 @kind object;
  #L349530.  v8:= new `java.lang.IllegalArgumentException`;
  #L349534.  v0:= "Incorrect length for infinity encoding" @kind object;
  #L349538.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L34953e.  throw v8;
}
procedure `n.a.a.a.p` `h`(`int` v0 , `java.math.BigInteger` v1 @kind object) @signature `Ln/a/a/a/f;.h:(ILjava/math/BigInteger;)Ln/a/a/a/p;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `hashCode`(`n.a.a.a.f` v3 @kind this) @signature `Ln/a/a/a/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L349268.  call temp:= `o`(v3) @signature `Ln/a/a/a/f;.o:()Ln/a/a/b/a;` @kind virtual;
  #L34926e.  v0:= temp @kind object;
  #L349270.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L349276.  v0:= temp;
  #L349278.  call temp:= `k`(v3) @signature `Ln/a/a/a/f;.k:()Ln/a/a/a/j;` @kind virtual;
  #L34927e.  v1:= temp @kind object;
  #L349280.  call temp:= `s`(v1) @signature `Ln/a/a/a/j;.s:()Ljava/math/BigInteger;` @kind virtual;
  #L349286.  v1:= temp @kind object;
  #L349288.  call temp:= `hashCode`(v1) @signature `Ljava/math/BigInteger;.hashCode:()I` @kind virtual;
  #L34928e.  v1:= temp;
  #L349290.  v2:= 8I;
  #L349294.  call temp:= `a`(v1, v2) @signature `Lorg/bouncycastle/util/c;.a:(II)I` @kind static;
  #L34929a.  v1:= temp;
  #L34929c.  v0:= v0 ^~ v1 @kind int;
  #L34929e.  call temp:= `l`(v3) @signature `Ln/a/a/a/f;.l:()Ln/a/a/a/j;` @kind virtual;
  #L3492a4.  v1:= temp @kind object;
  #L3492a6.  call temp:= `s`(v1) @signature `Ln/a/a/a/j;.s:()Ljava/math/BigInteger;` @kind virtual;
  #L3492ac.  v1:= temp @kind object;
  #L3492ae.  call temp:= `hashCode`(v1) @signature `Ljava/math/BigInteger;.hashCode:()I` @kind virtual;
  #L3492b4.  v1:= temp;
  #L3492b6.  v2:= 16I;
  #L3492ba.  call temp:= `a`(v1, v2) @signature `Lorg/bouncycastle/util/c;.a:(II)I` @kind static;
  #L3492c0.  v1:= temp;
  #L3492c2.  v0:= v0 ^~ v1 @kind int;
  #L3492c4.  return v0;
}
procedure `boolean` `i`(`n.a.a.a.f` v2 @kind this, `n.a.a.a.f` v3 @kind object) @signature `Ln/a/a/a/f;.i:(Ln/a/a/a/f;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3491b8.  if v2 == v3 then goto L34923a;
  #L3491bc.  if v3 == 0 then goto L349236;
  #L3491c0.  call temp:= `o`(v2) @signature `Ln/a/a/a/f;.o:()Ln/a/a/b/a;` @kind virtual;
  #L3491c6.  v0:= temp @kind object;
  #L3491c8.  call temp:= `o`(v3) @signature `Ln/a/a/a/f;.o:()Ln/a/a/b/a;` @kind virtual;
  #L3491ce.  v1:= temp @kind object;
  #L3491d0.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3491d6.  v0:= temp;
  #L3491d8.  if v0 == 0 then goto L349236;
  #L3491dc.  call temp:= `k`(v2) @signature `Ln/a/a/a/f;.k:()Ln/a/a/a/j;` @kind virtual;
  #L3491e2.  v0:= temp @kind object;
  #L3491e4.  call temp:= `s`(v0) @signature `Ln/a/a/a/j;.s:()Ljava/math/BigInteger;` @kind virtual;
  #L3491ea.  v0:= temp @kind object;
  #L3491ec.  call temp:= `k`(v3) @signature `Ln/a/a/a/f;.k:()Ln/a/a/a/j;` @kind virtual;
  #L3491f2.  v1:= temp @kind object;
  #L3491f4.  call temp:= `s`(v1) @signature `Ln/a/a/a/j;.s:()Ljava/math/BigInteger;` @kind virtual;
  #L3491fa.  v1:= temp @kind object;
  #L3491fc.  call temp:= `equals`(v0, v1) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L349202.  v0:= temp;
  #L349204.  if v0 == 0 then goto L349236;
  #L349208.  call temp:= `l`(v2) @signature `Ln/a/a/a/f;.l:()Ln/a/a/a/j;` @kind virtual;
  #L34920e.  v0:= temp @kind object;
  #L349210.  call temp:= `s`(v0) @signature `Ln/a/a/a/j;.s:()Ljava/math/BigInteger;` @kind virtual;
  #L349216.  v0:= temp @kind object;
  #L349218.  call temp:= `l`(v3) @signature `Ln/a/a/a/f;.l:()Ln/a/a/a/j;` @kind virtual;
  #L34921e.  v3:= temp @kind object;
  #L349220.  call temp:= `s`(v3) @signature `Ln/a/a/a/j;.s:()Ljava/math/BigInteger;` @kind virtual;
  #L349226.  v3:= temp @kind object;
  #L349228.  call temp:= `equals`(v0, v3) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L34922e.  v3:= temp;
  #L349230.  if v3 == 0 then goto L349236;
  #L349234.  goto L34923a;
  #L349236.  v3:= 0I;
  #L349238.  goto L34923c;
  #L34923a.  v3:= 1I;
  #L34923c.  return v3;
}
procedure `n.a.a.a.j` `j`(`java.math.BigInteger` v0 @kind object) @signature `Ln/a/a/a/f;.j:(Ljava/math/BigInteger;)Ln/a/a/a/j;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `n.a.a.a.j` `k`(`n.a.a.a.f` v1 @kind this) @signature `Ln/a/a/a/f;.k:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L349330.  v0:= v1.`n.a.a.a.f.b` @type ^`n.a.a.a.j` @kind object;
  #L349334.  return v0 @kind object;
}
procedure `n.a.a.a.j` `l`(`n.a.a.a.f` v1 @kind this) @signature `Ln/a/a/a/f;.l:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L349348.  v0:= v1.`n.a.a.a.f.c` @type ^`n.a.a.a.j` @kind object;
  #L34934c.  return v0 @kind object;
}
procedure `java.math.BigInteger` `m`(`n.a.a.a.f` v1 @kind this) @signature `Ln/a/a/a/f;.m:()Ljava/math/BigInteger;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3492d8.  v0:= v1.`n.a.a.a.f.e` @type ^`java.math.BigInteger` @kind object;
  #L3492dc.  return v0 @kind object;
}
procedure `int` `n`(`n.a.a.a.f` v1 @kind this) @signature `Ln/a/a/a/f;.n:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L349250.  v0:= v1.`n.a.a.a.f.f` @type ^`int`;
  #L349254.  return v0;
}
procedure `n.a.a.b.a` `o`(`n.a.a.a.f` v1 @kind this) @signature `Ln/a/a/a/f;.o:()Ln/a/a/b/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L34962c.  v0:= v1.`n.a.a.a.f.a` @type ^`n.a.a.b.a` @kind object;
  #L349630.  return v0 @kind object;
}
procedure `int` `p`() @signature `Ln/a/a/a/f;.p:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `n.a.a.a.p` `q`() @signature `Ln/a/a/a/f;.q:()Ln/a/a/a/p;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.math.BigInteger` `r`(`n.a.a.a.f` v1 @kind this) @signature `Ln/a/a/a/f;.r:()Ljava/math/BigInteger;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3492f0.  v0:= v1.`n.a.a.a.f.d` @type ^`java.math.BigInteger` @kind object;
  #L3492f4.  return v0 @kind object;
}
procedure `n.a.a.a.p` `s`(`n.a.a.a.f` v2 @kind this, `n.a.a.a.p` v3 @kind object) @signature `Ln/a/a/a/f;.s:(Ln/a/a/a/p;)Ln/a/a/a/p;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L349550.  call temp:= `i`(v3) @signature `Ln/a/a/a/p;.i:()Ln/a/a/a/f;` @kind virtual;
  #L349556.  v0:= temp @kind object;
  #L349558.  if v2 != v0 then goto L34955e;
  #L34955c.  return v3 @kind object;
  #L34955e.  call temp:= `t`(v3) @signature `Ln/a/a/a/p;.t:()Z` @kind virtual;
  #L349564.  v0:= temp;
  #L349566.  if v0 == 0 then goto L349574;
  #L34956a.  call temp:= `q`(v2) @signature `Ln/a/a/a/f;.q:()Ln/a/a/a/p;` @kind virtual;
  #L349570.  v3:= temp @kind object;
  #L349572.  return v3 @kind object;
  #L349574.  call temp:= `x`(v3) @signature `Ln/a/a/a/p;.x:()Ln/a/a/a/p;` @kind virtual;
  #L34957a.  v3:= temp @kind object;
  #L34957c.  call temp:= `q`(v3) @signature `Ln/a/a/a/p;.q:()Ln/a/a/a/j;` @kind virtual;
  #L349582.  v0:= temp @kind object;
  #L349584.  call temp:= `s`(v0) @signature `Ln/a/a/a/j;.s:()Ljava/math/BigInteger;` @kind virtual;
  #L34958a.  v0:= temp @kind object;
  #L34958c.  call temp:= `r`(v3) @signature `Ln/a/a/a/p;.r:()Ln/a/a/a/j;` @kind virtual;
  #L349592.  v1:= temp @kind object;
  #L349594.  call temp:= `s`(v1) @signature `Ln/a/a/a/j;.s:()Ljava/math/BigInteger;` @kind virtual;
  #L34959a.  v1:= temp @kind object;
  #L34959c.  v3:= v3.`n.a.a.a.p.f` @type ^`boolean` @kind boolean;
  #L3495a0.  call temp:= `x`(v2, v0, v1, v3) @signature `Ln/a/a/a/f;.x:(Ljava/math/BigInteger;Ljava/math/BigInteger;Z)Ln/a/a/a/p;` @kind virtual;
  #L3495a6.  v3:= temp @kind object;
  #L3495a8.  return v3 @kind object;
}
procedure `void` `t`(`n.a.a.a.f` v3 @kind this, `n.a.a.a.p`[] v4 @kind object) @signature `Ln/a/a/a/f;.t:([Ln/a/a/a/p;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3496f0.  v0:= length @variable v4;
  #L3496f2.  v1:= 0I;
  #L3496f4.  v2:= 0I;
  #L3496f6.  call `u`(v3, v4, v1, v0, v2) @signature `Ln/a/a/a/f;.u:([Ln/a/a/a/p;IILn/a/a/a/j;)V` @kind virtual;
  #L3496fc.  return @kind void;
}
procedure `void` `u`(`n.a.a.a.f` v8 @kind this, `n.a.a.a.p`[] v9 @kind object, `int` v10 , `int` v11 , `n.a.a.a.j` v12 @kind object) @signature `Ln/a/a/a/f;.u:([Ln/a/a/a/p;IILn/a/a/a/j;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L349710.  call `a`(v8, v9, v10, v11) @signature `Ln/a/a/a/f;.a:([Ln/a/a/a/p;II)V` @kind virtual;
  #L349716.  call temp:= `n`(v8) @signature `Ln/a/a/a/f;.n:()I` @kind virtual;
  #L34971c.  v0:= temp;
  #L34971e.  if v0 == 0 then goto L3497a2;
  #L349722.  v1:= 5I;
  #L349724.  if v0 == v1 then goto L3497a2;
  #L349728.  v0:= new `n.a.a.a.j`[v11];
  #L34972c.  v1:= new `int`[v11];
  #L349730.  v2:= 0I;
  #L349732.  v3:= 0I;
  #L349734.  v4:= 0I;
  #L349736.  if v3 >= v11 then goto L349772;
  #L34973a.  v5:= v10 + v3 @kind int;
  #L34973e.  v6:= v9[v5] @kind object;
  #L349742.  if v6 == 0 then goto L34976c;
  #L349746.  if v12 != 0 then goto L349756;
  #L34974a.  call temp:= `u`(v6) @signature `Ln/a/a/a/p;.u:()Z` @kind virtual;
  #L349750.  v7:= temp;
  #L349752.  if v7 != 0 then goto L34976c;
  #L349756.  call temp:= `s`(v6, v2) @signature `Ln/a/a/a/p;.s:(I)Ln/a/a/a/j;` @kind virtual;
  #L34975c.  v6:= temp @kind object;
  #L34975e.  v0[v4]:= v6 @kind object;
  #L349762.  v6:= v4 + 1;
  #L349766.  v1[v4]:= v5;
  #L34976a.  v4:= v6;
  #L34976c.  v3:= v3 + 1;
  #L349770.  goto L349736;
  #L349772.  if v4 != 0 then goto L349778;
  #L349776.  return @kind void;
  #L349778.  call `c`(v0, v2, v4, v12) @signature `Ln/a/a/a/a;.c:([Ln/a/a/a/j;IILn/a/a/a/j;)V` @kind static;
  #L34977e.  if v2 >= v4 then goto L3497a0;
  #L349782.  v10:= v1[v2];
  #L349786.  v11:= v9[v10] @kind object;
  #L34978a.  v12:= v0[v2] @kind object;
  #L34978e.  call temp:= `y`(v11, v12) @signature `Ln/a/a/a/p;.y:(Ln/a/a/a/j;)Ln/a/a/a/p;` @kind virtual;
  #L349794.  v11:= temp @kind object;
  #L349796.  v9[v10]:= v11 @kind object;
  #L34979a.  v2:= v2 + 1;
  #L34979e.  goto L34977e;
  #L3497a0.  return @kind void;
  #L3497a2.  if v12 != 0 then goto L3497a8;
  #L3497a6.  return @kind void;
  #L3497a8.  v9:= new `java.lang.IllegalArgumentException`;
  #L3497ac.  v10:= "'iso' not valid for affine coordinates" @kind object;
  #L3497b0.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3497b6.  goto L3497ba;
  #L3497b8.  throw v9;
  #L3497ba.  goto L3497b8;
}
procedure `boolean` `v`(`int` v0 ) @signature `Ln/a/a/a/f;.v:(I)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `n.a.a.a.p` `w`(`n.a.a.a.f` v0 @kind this, `java.math.BigInteger` v1 @kind object, `java.math.BigInteger` v2 @kind object) @signature `Ln/a/a/a/f;.w:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ln/a/a/a/p;` @AccessFlag PUBLIC {
    temp;

  #L3495bc.  call temp:= `d`(v0, v1, v2) @signature `Ln/a/a/a/f;.d:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ln/a/a/a/p;` @kind virtual;
  #L3495c2.  v1:= temp @kind object;
  #L3495c4.  call temp:= `v`(v1) @signature `Ln/a/a/a/p;.v:()Z` @kind virtual;
  #L3495ca.  v2:= temp;
  #L3495cc.  if v2 == 0 then goto L3495d2;
  #L3495d0.  return v1 @kind object;
  #L3495d2.  v1:= new `java.lang.IllegalArgumentException`;
  #L3495d6.  v2:= "Invalid point coordinates" @kind object;
  #L3495da.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3495e0.  throw v1;
}
procedure `n.a.a.a.p` `x`(`n.a.a.a.f` v0 @kind this, `java.math.BigInteger` v1 @kind object, `java.math.BigInteger` v2 @kind object, `boolean` v3 ) @signature `Ln/a/a/a/f;.x:(Ljava/math/BigInteger;Ljava/math/BigInteger;Z)Ln/a/a/a/p;` @AccessFlag PUBLIC {
    temp;

  #L3495f4.  call temp:= `e`(v0, v1, v2, v3) @signature `Ln/a/a/a/f;.e:(Ljava/math/BigInteger;Ljava/math/BigInteger;Z)Ln/a/a/a/p;` @kind virtual;
  #L3495fa.  v1:= temp @kind object;
  #L3495fc.  call temp:= `v`(v1) @signature `Ln/a/a/a/p;.v:()Z` @kind virtual;
  #L349602.  v2:= temp;
  #L349604.  if v2 == 0 then goto L34960a;
  #L349608.  return v1 @kind object;
  #L34960a.  v1:= new `java.lang.IllegalArgumentException`;
  #L34960e.  v2:= "Invalid point coordinates" @kind object;
  #L349612.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L349618.  throw v1;
}
