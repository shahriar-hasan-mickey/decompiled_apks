record `n.a.a.a.t.b.o` @kind class @AccessFlag PUBLIC extends `n.a.a.a.j` @kind class {
  `int`[] `n.a.a.a.t.b.o.g` @AccessFlag PROTECTED;
}
global `java.math.BigInteger` `@@n.a.a.a.t.b.o.f` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/a/a/a/t/b/o;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3541e4.  v0:= `@@n.a.a.a.t.b.m.i` @type ^`java.math.BigInteger` @kind object;
  #L3541e8.  `@@n.a.a.a.t.b.o.f` @type ^`java.math.BigInteger` := v0 @kind object;
  #L3541ec.  return @kind void;
}
procedure `void` `<init>`(`n.a.a.a.t.b.o` v1 @kind this, `java.math.BigInteger` v2 @kind object) @signature `Ln/a/a/a/t/b/o;.<init>:(Ljava/math/BigInteger;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L35421c.  call `<init>`(v1) @signature `Ln/a/a/a/j;.<init>:()V` @kind direct;
  #L354222.  if v2 == 0 then goto L354250;
  #L354226.  call temp:= `signum`(v2) @signature `Ljava/math/BigInteger;.signum:()I` @kind virtual;
  #L35422c.  v0:= temp;
  #L35422e.  if v0 < 0 then goto L354250;
  #L354232.  v0:= `@@n.a.a.a.t.b.o.f` @type ^`java.math.BigInteger` @kind object;
  #L354236.  call temp:= `compareTo`(v2, v0) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L35423c.  v0:= temp;
  #L35423e.  if v0 >= 0 then goto L354250;
  #L354242.  call temp:= `d`(v2) @signature `Ln/a/a/a/t/b/n;.d:(Ljava/math/BigInteger;)[I` @kind static;
  #L354248.  v2:= temp @kind object;
  #L35424a.  v1.`n.a.a.a.t.b.o.g` @type ^`int`[] := v2 @kind object;
  #L35424e.  return @kind void;
  #L354250.  v2:= new `java.lang.IllegalArgumentException`;
  #L354254.  v0:= "x value invalid for SecP224R1FieldElement" @kind object;
  #L354258.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35425e.  throw v2;
}
procedure `void` `<init>`(`n.a.a.a.t.b.o` v0 @kind this, `int`[] v1 @kind object) @signature `Ln/a/a/a/t/b/o;.<init>:([I)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L354200.  call `<init>`(v0) @signature `Ln/a/a/a/j;.<init>:()V` @kind direct;
  #L354206.  v0.`n.a.a.a.t.b.o.g` @type ^`int`[] := v1 @kind object;
  #L35420a.  return @kind void;
}
procedure `void` `t`(`int`[] v0 @kind object, `int`[] v1 @kind object, `int`[] v2 @kind object, `int`[] v3 @kind object, `int`[] v4 @kind object, `int`[] v5 @kind object, `int`[] v6 @kind object) @signature `Ln/a/a/a/t/b/o;.t:([I[I[I[I[I[I[I)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L354270.  call `e`(v4, v2, v6) @signature `Ln/a/a/a/t/b/n;.e:([I[I[I)V` @kind static;
  #L354276.  call `e`(v6, v0, v6) @signature `Ln/a/a/a/t/b/n;.e:([I[I[I)V` @kind static;
  #L35427c.  call `e`(v3, v1, v5) @signature `Ln/a/a/a/t/b/n;.e:([I[I[I)V` @kind static;
  #L354282.  call `a`(v5, v6, v5) @signature `Ln/a/a/a/t/b/n;.a:([I[I[I)V` @kind static;
  #L354288.  call `e`(v3, v2, v6) @signature `Ln/a/a/a/t/b/n;.e:([I[I[I)V` @kind static;
  #L35428e.  call `c`(v5, v3) @signature `Ln/a/a/c/c;.c:([I[I)V` @kind static;
  #L354294.  call `e`(v4, v1, v4) @signature `Ln/a/a/a/t/b/n;.e:([I[I[I)V` @kind static;
  #L35429a.  call `a`(v4, v6, v4) @signature `Ln/a/a/a/t/b/n;.a:([I[I[I)V` @kind static;
  #L3542a0.  call `j`(v4, v5) @signature `Ln/a/a/a/t/b/n;.j:([I[I)V` @kind static;
  #L3542a6.  call `e`(v5, v0, v5) @signature `Ln/a/a/a/t/b/n;.e:([I[I[I)V` @kind static;
  #L3542ac.  return @kind void;
}
procedure `void` `u`(`int`[] v10 @kind object, `int`[] v11 @kind object, `int`[] v12 @kind object, `int`[] v13 @kind object, `int`[] v14 @kind object) @signature `Ln/a/a/a/t/b/o;.u:([I[I[I[I[I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3542c0.  call `c`(v10, v13) @signature `Ln/a/a/c/c;.c:([I[I)V` @kind static;
  #L3542c6.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L3542cc.  v7:= temp @kind object;
  #L3542ce.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L3542d4.  v8:= temp @kind object;
  #L3542d6.  v0:= 0I;
  #L3542d8.  v9:= 0I;
  #L3542da.  v0:= 7I;
  #L3542dc.  if v9 >= v0 then goto L35431a;
  #L3542e0.  call `c`(v11, v7) @signature `Ln/a/a/c/c;.c:([I[I)V` @kind static;
  #L3542e6.  call `c`(v12, v8) @signature `Ln/a/a/c/c;.c:([I[I)V` @kind static;
  #L3542ec.  v0:= 1I;
  #L3542ee.  v0:= v0 ^< v9 @kind int;
  #L3542f0.  v0:= v0 + -1;
  #L3542f4.  if v0 < 0 then goto L354300;
  #L3542f8.  call `v`(v11, v12, v13, v14) @signature `Ln/a/a/a/t/b/o;.v:([I[I[I[I)V` @kind static;
  #L3542fe.  goto L3542f0;
  #L354300.  v0:= v10 @kind object;
  #L354302.  v1:= v7 @kind object;
  #L354304.  v2:= v8 @kind object;
  #L354306.  v3:= v11 @kind object;
  #L354308.  v4:= v12 @kind object;
  #L35430a.  v5:= v13 @kind object;
  #L35430c.  v6:= v14 @kind object;
  #L35430e.  call `t`(v0, v1, v2, v3, v4, v5, v6) @signature `Ln/a/a/a/t/b/o;.t:([I[I[I[I[I[I[I)V` @kind static;
  #L354314.  v9:= v9 + 1;
  #L354318.  goto L3542da;
  #L35431a.  return @kind void;
}
procedure `void` `v`(`int`[] v0 @kind object, `int`[] v1 @kind object, `int`[] v2 @kind object, `int`[] v3 @kind object) @signature `Ln/a/a/a/t/b/o;.v:([I[I[I[I)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L35432c.  call `e`(v1, v0, v1) @signature `Ln/a/a/a/t/b/n;.e:([I[I[I)V` @kind static;
  #L354332.  call `n`(v1, v1) @signature `Ln/a/a/a/t/b/n;.n:([I[I)V` @kind static;
  #L354338.  call `j`(v0, v3) @signature `Ln/a/a/a/t/b/n;.j:([I[I)V` @kind static;
  #L35433e.  call `a`(v2, v3, v0) @signature `Ln/a/a/a/t/b/n;.a:([I[I[I)V` @kind static;
  #L354344.  call `e`(v2, v3, v2) @signature `Ln/a/a/a/t/b/n;.e:([I[I[I)V` @kind static;
  #L35434a.  v0:= 7I;
  #L35434c.  v1:= 2I;
  #L35434e.  v3:= 0I;
  #L354350.  call temp:= `D`(v0, v2, v1, v3) @signature `Ln/a/a/c/g;.D:(I[III)I` @kind static;
  #L354356.  v0:= temp;
  #L354358.  call `i`(v0, v2) @signature `Ln/a/a/a/t/b/n;.i:(I[I)V` @kind static;
  #L35435e.  return @kind void;
}
procedure `boolean` `w`(`int`[] v3 @kind object) @signature `Ln/a/a/a/t/b/o;.w:([I)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L353dfc.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L353e02.  v0:= temp @kind object;
  #L353e04.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L353e0a.  v1:= temp @kind object;
  #L353e0c.  call `c`(v3, v0) @signature `Ln/a/a/c/c;.c:([I[I)V` @kind static;
  #L353e12.  v3:= 0I;
  #L353e14.  v2:= 7I;
  #L353e16.  if v3 >= v2 then goto L353e36;
  #L353e1a.  call `c`(v0, v1) @signature `Ln/a/a/c/c;.c:([I[I)V` @kind static;
  #L353e20.  v2:= 1I;
  #L353e22.  v2:= v2 ^< v3 @kind int;
  #L353e24.  call `k`(v0, v2, v0) @signature `Ln/a/a/a/t/b/n;.k:([II[I)V` @kind static;
  #L353e2a.  call `e`(v0, v1, v0) @signature `Ln/a/a/a/t/b/n;.e:([I[I[I)V` @kind static;
  #L353e30.  v3:= v3 + 1;
  #L353e34.  goto L353e14;
  #L353e36.  v3:= 95I;
  #L353e3a.  call `k`(v0, v3, v0) @signature `Ln/a/a/a/t/b/n;.k:([II[I)V` @kind static;
  #L353e40.  call temp:= `j`(v0) @signature `Ln/a/a/c/c;.j:([I)Z` @kind static;
  #L353e46.  v3:= temp;
  #L353e48.  return v3;
}
procedure `boolean` `x`(`int`[] v7 @kind object, `int`[] v8 @kind object, `int`[] v9 @kind object) @signature `Ln/a/a/a/t/b/o;.x:([I[I[I)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L353ea4.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L353eaa.  v0:= temp @kind object;
  #L353eac.  call `c`(v8, v0) @signature `Ln/a/a/c/c;.c:([I[I)V` @kind static;
  #L353eb2.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L353eb8.  v8:= temp @kind object;
  #L353eba.  v1:= 0I;
  #L353ebc.  v2:= 1I;
  #L353ebe.  v8[v1]:= v2;
  #L353ec2.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L353ec8.  v3:= temp @kind object;
  #L353eca.  call `u`(v7, v0, v8, v3, v9) @signature `Ln/a/a/a/t/b/o;.u:([I[I[I[I[I)V` @kind static;
  #L353ed0.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L353ed6.  v7:= temp @kind object;
  #L353ed8.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L353ede.  v4:= temp @kind object;
  #L353ee0.  v5:= 1I;
  #L353ee2.  v6:= 96I;
  #L353ee6.  if v5 >= v6 then goto L353f20;
  #L353eea.  call `c`(v0, v7) @signature `Ln/a/a/c/c;.c:([I[I)V` @kind static;
  #L353ef0.  call `c`(v8, v4) @signature `Ln/a/a/c/c;.c:([I[I)V` @kind static;
  #L353ef6.  call `v`(v0, v8, v3, v9) @signature `Ln/a/a/a/t/b/o;.v:([I[I[I[I)V` @kind static;
  #L353efc.  call temp:= `k`(v0) @signature `Ln/a/a/c/c;.k:([I)Z` @kind static;
  #L353f02.  v6:= temp;
  #L353f04.  if v6 == 0 then goto L353f1a;
  #L353f08.  v8:= `@@n.a.a.a.t.b.n.a` @type ^`int`[] @kind object;
  #L353f0c.  call `d`(v8, v4, v9) @signature `Ln/a/a/c/a;.d:([I[I[I)V` @kind static;
  #L353f12.  call `e`(v9, v7, v9) @signature `Ln/a/a/a/t/b/n;.e:([I[I[I)V` @kind static;
  #L353f18.  return v2;
  #L353f1a.  v5:= v5 + 1;
  #L353f1e.  goto L353ee2;
  #L353f20.  return v1;
}
procedure `n.a.a.a.j` `a`(`n.a.a.a.t.b.o` v2 @kind this, `n.a.a.a.j` v3 @kind object) @signature `Ln/a/a/a/t/b/o;.a:(Ln/a/a/a/j;)Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L353fa4.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L353faa.  v0:= temp @kind object;
  #L353fac.  v1:= v2.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L353fb0.  v3:= (`n.a.a.a.t.b.o`) v3 @kind object;
  #L353fb4.  v3:= v3.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L353fb8.  call `a`(v1, v3, v0) @signature `Ln/a/a/a/t/b/n;.a:([I[I[I)V` @kind static;
  #L353fbe.  v3:= new `n.a.a.a.t.b.o`;
  #L353fc2.  call `<init>`(v3, v0) @signature `Ln/a/a/a/t/b/o;.<init>:([I)V` @kind direct;
  #L353fc8.  return v3 @kind object;
}
procedure `n.a.a.a.j` `b`(`n.a.a.a.t.b.o` v2 @kind this) @signature `Ln/a/a/a/t/b/o;.b:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L353fdc.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L353fe2.  v0:= temp @kind object;
  #L353fe4.  v1:= v2.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L353fe8.  call `b`(v1, v0) @signature `Ln/a/a/a/t/b/n;.b:([I[I)V` @kind static;
  #L353fee.  v1:= new `n.a.a.a.t.b.o`;
  #L353ff2.  call `<init>`(v1, v0) @signature `Ln/a/a/a/t/b/o;.<init>:([I)V` @kind direct;
  #L353ff8.  return v1 @kind object;
}
procedure `n.a.a.a.j` `d`(`n.a.a.a.t.b.o` v2 @kind this, `n.a.a.a.j` v3 @kind object) @signature `Ln/a/a/a/t/b/o;.d:(Ln/a/a/a/j;)Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35400c.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L354012.  v0:= temp @kind object;
  #L354014.  v1:= `@@n.a.a.a.t.b.n.a` @type ^`int`[] @kind object;
  #L354018.  v3:= (`n.a.a.a.t.b.o`) v3 @kind object;
  #L35401c.  v3:= v3.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L354020.  call `d`(v1, v3, v0) @signature `Ln/a/a/c/a;.d:([I[I[I)V` @kind static;
  #L354026.  v3:= v2.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L35402a.  call `e`(v0, v3, v0) @signature `Ln/a/a/a/t/b/n;.e:([I[I[I)V` @kind static;
  #L354030.  v3:= new `n.a.a.a.t.b.o`;
  #L354034.  call `<init>`(v3, v0) @signature `Ln/a/a/a/t/b/o;.<init>:([I)V` @kind direct;
  #L35403a.  return v3 @kind object;
}
procedure `boolean` `equals`(`n.a.a.a.t.b.o` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ln/a/a/a/t/b/o;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L353da0.  if v2 != v1 then goto L353da8;
  #L353da4.  v2:= 1I;
  #L353da6.  return v2;
  #L353da8.  v0:= instanceof @variable v2 @type ^`n.a.a.a.t.b.o` @kind boolean;
  #L353dac.  if v0 != 0 then goto L353db4;
  #L353db0.  v2:= 0I;
  #L353db2.  return v2;
  #L353db4.  v2:= (`n.a.a.a.t.b.o`) v2 @kind object;
  #L353db8.  v0:= v1.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L353dbc.  v2:= v2.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L353dc0.  call temp:= `f`(v0, v2) @signature `Ln/a/a/c/c;.f:([I[I)Z` @kind static;
  #L353dc6.  v2:= temp;
  #L353dc8.  return v2;
}
procedure `int` `f`(`n.a.a.a.t.b.o` v1 @kind this) @signature `Ln/a/a/a/t/b/o;.f:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L353f34.  v0:= `@@n.a.a.a.t.b.o.f` @type ^`java.math.BigInteger` @kind object;
  #L353f38.  call temp:= `bitLength`(v0) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L353f3e.  v0:= temp;
  #L353f40.  return v0;
}
procedure `n.a.a.a.j` `g`(`n.a.a.a.t.b.o` v3 @kind this) @signature `Ln/a/a/a/t/b/o;.g:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L35404c.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L354052.  v0:= temp @kind object;
  #L354054.  v1:= `@@n.a.a.a.t.b.n.a` @type ^`int`[] @kind object;
  #L354058.  v2:= v3.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L35405c.  call `d`(v1, v2, v0) @signature `Ln/a/a/c/a;.d:([I[I[I)V` @kind static;
  #L354062.  v1:= new `n.a.a.a.t.b.o`;
  #L354066.  call `<init>`(v1, v0) @signature `Ln/a/a/a/t/b/o;.<init>:([I)V` @kind direct;
  #L35406c.  return v1 @kind object;
}
procedure `boolean` `h`(`n.a.a.a.t.b.o` v1 @kind this) @signature `Ln/a/a/a/t/b/o;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L353ddc.  v0:= v1.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L353de0.  call temp:= `j`(v0) @signature `Ln/a/a/c/c;.j:([I)Z` @kind static;
  #L353de6.  v0:= temp;
  #L353de8.  return v0;
}
procedure `int` `hashCode`(`n.a.a.a.t.b.o` v4 @kind this) @signature `Ln/a/a/a/t/b/o;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L353f54.  v0:= `@@n.a.a.a.t.b.o.f` @type ^`java.math.BigInteger` @kind object;
  #L353f58.  call temp:= `hashCode`(v0) @signature `Ljava/math/BigInteger;.hashCode:()I` @kind virtual;
  #L353f5e.  v0:= temp;
  #L353f60.  v1:= v4.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L353f64.  v2:= 0I;
  #L353f66.  v3:= 7I;
  #L353f68.  call temp:= `k`(v1, v2, v3) @signature `Lorg/bouncycastle/util/a;.k:([III)I` @kind static;
  #L353f6e.  v1:= temp;
  #L353f70.  v0:= v0 ^~ v1 @kind int;
  #L353f72.  return v0;
}
procedure `boolean` `i`(`n.a.a.a.t.b.o` v1 @kind this) @signature `Ln/a/a/a/t/b/o;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L353e5c.  v0:= v1.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L353e60.  call temp:= `k`(v0) @signature `Ln/a/a/c/c;.k:([I)Z` @kind static;
  #L353e66.  v0:= temp;
  #L353e68.  return v0;
}
procedure `n.a.a.a.j` `j`(`n.a.a.a.t.b.o` v2 @kind this, `n.a.a.a.j` v3 @kind object) @signature `Ln/a/a/a/t/b/o;.j:(Ln/a/a/a/j;)Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L354080.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L354086.  v0:= temp @kind object;
  #L354088.  v1:= v2.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L35408c.  v3:= (`n.a.a.a.t.b.o`) v3 @kind object;
  #L354090.  v3:= v3.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L354094.  call `e`(v1, v3, v0) @signature `Ln/a/a/a/t/b/n;.e:([I[I[I)V` @kind static;
  #L35409a.  v3:= new `n.a.a.a.t.b.o`;
  #L35409e.  call `<init>`(v3, v0) @signature `Ln/a/a/a/t/b/o;.<init>:([I)V` @kind direct;
  #L3540a4.  return v3 @kind object;
}
procedure `n.a.a.a.j` `m`(`n.a.a.a.t.b.o` v2 @kind this) @signature `Ln/a/a/a/t/b/o;.m:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3540b8.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L3540be.  v0:= temp @kind object;
  #L3540c0.  v1:= v2.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L3540c4.  call `g`(v1, v0) @signature `Ln/a/a/a/t/b/n;.g:([I[I)V` @kind static;
  #L3540ca.  v1:= new `n.a.a.a.t.b.o`;
  #L3540ce.  call `<init>`(v1, v0) @signature `Ln/a/a/a/t/b/o;.<init>:([I)V` @kind direct;
  #L3540d4.  return v1 @kind object;
}
procedure `n.a.a.a.j` `n`(`n.a.a.a.t.b.o` v6 @kind this) @signature `Ln/a/a/a/t/b/o;.n:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3540e8.  v0:= v6.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L3540ec.  call temp:= `k`(v0) @signature `Ln/a/a/c/c;.k:([I)Z` @kind static;
  #L3540f2.  v1:= temp;
  #L3540f4.  if v1 != 0 then goto L35416a;
  #L3540f8.  call temp:= `j`(v0) @signature `Ln/a/a/c/c;.j:([I)Z` @kind static;
  #L3540fe.  v1:= temp;
  #L354100.  if v1 == 0 then goto L354106;
  #L354104.  goto L35416a;
  #L354106.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L35410c.  v1:= temp @kind object;
  #L35410e.  call `g`(v0, v1) @signature `Ln/a/a/a/t/b/n;.g:([I[I)V` @kind static;
  #L354114.  v2:= `@@n.a.a.a.t.b.n.a` @type ^`int`[] @kind object;
  #L354118.  call temp:= `e`(v2) @signature `Ln/a/a/c/a;.e:([I)[I` @kind static;
  #L35411e.  v2:= temp @kind object;
  #L354120.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L354126.  v3:= temp @kind object;
  #L354128.  call temp:= `w`(v0) @signature `Ln/a/a/a/t/b/o;.w:([I)Z` @kind static;
  #L35412e.  v4:= temp;
  #L354130.  v5:= 0I;
  #L354132.  if v4 != 0 then goto L354138;
  #L354136.  return v5 @kind object;
  #L354138.  call temp:= `x`(v1, v2, v3) @signature `Ln/a/a/a/t/b/o;.x:([I[I[I)Z` @kind static;
  #L35413e.  v4:= temp;
  #L354140.  if v4 != 0 then goto L35414c;
  #L354144.  call `b`(v2, v2) @signature `Ln/a/a/a/t/b/n;.b:([I[I)V` @kind static;
  #L35414a.  goto L354138;
  #L35414c.  call `j`(v3, v2) @signature `Ln/a/a/a/t/b/n;.j:([I[I)V` @kind static;
  #L354152.  call temp:= `f`(v0, v2) @signature `Ln/a/a/c/c;.f:([I[I)Z` @kind static;
  #L354158.  v0:= temp;
  #L35415a.  if v0 == 0 then goto L354168;
  #L35415e.  v5:= new `n.a.a.a.t.b.o`;
  #L354162.  call `<init>`(v5, v3) @signature `Ln/a/a/a/t/b/o;.<init>:([I)V` @kind direct;
  #L354168.  return v5 @kind object;
  #L35416a.  return v6 @kind object;
}
procedure `n.a.a.a.j` `o`(`n.a.a.a.t.b.o` v2 @kind this) @signature `Ln/a/a/a/t/b/o;.o:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35417c.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L354182.  v0:= temp @kind object;
  #L354184.  v1:= v2.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L354188.  call `j`(v1, v0) @signature `Ln/a/a/a/t/b/n;.j:([I[I)V` @kind static;
  #L35418e.  v1:= new `n.a.a.a.t.b.o`;
  #L354192.  call `<init>`(v1, v0) @signature `Ln/a/a/a/t/b/o;.<init>:([I)V` @kind direct;
  #L354198.  return v1 @kind object;
}
procedure `n.a.a.a.j` `q`(`n.a.a.a.t.b.o` v2 @kind this, `n.a.a.a.j` v3 @kind object) @signature `Ln/a/a/a/t/b/o;.q:(Ln/a/a/a/j;)Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3541ac.  call temp:= `d`() @signature `Ln/a/a/c/c;.d:()[I` @kind static;
  #L3541b2.  v0:= temp @kind object;
  #L3541b4.  v1:= v2.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L3541b8.  v3:= (`n.a.a.a.t.b.o`) v3 @kind object;
  #L3541bc.  v3:= v3.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L3541c0.  call `m`(v1, v3, v0) @signature `Ln/a/a/a/t/b/n;.m:([I[I[I)V` @kind static;
  #L3541c6.  v3:= new `n.a.a.a.t.b.o`;
  #L3541ca.  call `<init>`(v3, v0) @signature `Ln/a/a/a/t/b/o;.<init>:([I)V` @kind direct;
  #L3541d0.  return v3 @kind object;
}
procedure `boolean` `r`(`n.a.a.a.t.b.o` v3 @kind this) @signature `Ln/a/a/a/t/b/o;.r:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L353e7c.  v0:= v3.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L353e80.  v1:= 0I;
  #L353e82.  call temp:= `h`(v0, v1) @signature `Ln/a/a/c/c;.h:([II)I` @kind static;
  #L353e88.  v0:= temp;
  #L353e8a.  v2:= 1I;
  #L353e8c.  if v0 != v2 then goto L353e92;
  #L353e90.  v1:= 1I;
  #L353e92.  return v1;
}
procedure `java.math.BigInteger` `s`(`n.a.a.a.t.b.o` v1 @kind this) @signature `Ln/a/a/a/t/b/o;.s:()Ljava/math/BigInteger;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L353f84.  v0:= v1.`n.a.a.a.t.b.o.g` @type ^`int`[] @kind object;
  #L353f88.  call temp:= `t`(v0) @signature `Ln/a/a/c/c;.t:([I)Ljava/math/BigInteger;` @kind static;
  #L353f8e.  v0:= temp @kind object;
  #L353f90.  return v0 @kind object;
}
