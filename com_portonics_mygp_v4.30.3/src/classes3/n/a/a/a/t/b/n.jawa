record `n.a.a.a.t.b.n` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `int`[] `@@n.a.a.a.t.b.n.a` @AccessFlag STATIC_FINAL;
global `int`[] `@@n.a.a.a.t.b.n.b` @AccessFlag STATIC_FINAL;
global `int`[] `@@n.a.a.a.t.b.n.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/a/a/a/t/b/n;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3543ac.  v0:= 7I;
  #L3543ae.  v0:= new `int`[v0];
  #L3543b2.  goto L3543e4;
  #L3543b8.  `@@n.a.a.a.t.b.n.a` @type ^`int`[] := v0 @kind object;
  #L3543bc.  v0:= 14I;
  #L3543c0.  v0:= new `int`[v0];
  #L3543c4.  goto L354408;
  #L3543ca.  `@@n.a.a.a.t.b.n.b` @type ^`int`[] := v0 @kind object;
  #L3543ce.  v0:= 11I;
  #L3543d2.  v0:= new `int`[v0];
  #L3543d6.  goto L354448;
  #L3543dc.  `@@n.a.a.a.t.b.n.c` @type ^`int`[] := v0 @kind object;
  #L3543e0.  return @kind void;
  #L3543e2.  
  #L3543e4.  v0:= (1I, 0I, 0I, -1I, -1I, -1I, -1I) @kind object;
  #L354407.  goto L3543b8;
  #L354408.  v0:= (1I, 0I, 0I, -2I, -1I, -1I, 0I, 2I, 0I, 0I, -2I, -1I, -1I, -1I) @kind object;
  #L354447.  goto L3543ca;
  #L354448.  v0:= (-1I, -1I, -1I, 1I, 0I, 0I, -1I, -3I, -1I, -1I, 1I) @kind object;
  #L35447b.  goto L3543dc;
}
procedure `void` `a`(`int`[] v0 @kind object, `int`[] v1 @kind object, `int`[] v2 @kind object) @signature `Ln/a/a/a/t/b/n;.a:([I[I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L35448c.  call temp:= `a`(v0, v1, v2) @signature `Ln/a/a/c/c;.a:([I[I[I)I` @kind static;
  #L354492.  v0:= temp;
  #L354494.  if v0 != 0 then goto L3544b4;
  #L354498.  v0:= 6I;
  #L35449a.  v0:= v2[v0];
  #L35449e.  v1:= -1I;
  #L3544a0.  if v0 != v1 then goto L3544ba;
  #L3544a4.  v0:= `@@n.a.a.a.t.b.n.a` @type ^`int`[] @kind object;
  #L3544a8.  call temp:= `i`(v2, v0) @signature `Ln/a/a/c/c;.i:([I[I)Z` @kind static;
  #L3544ae.  v0:= temp;
  #L3544b0.  if v0 == 0 then goto L3544ba;
  #L3544b4.  call `c`(v2) @signature `Ln/a/a/a/t/b/n;.c:([I)V` @kind static;
  #L3544ba.  return @kind void;
}
procedure `void` `b`(`int`[] v1 @kind object, `int`[] v2 @kind object) @signature `Ln/a/a/a/t/b/n;.b:([I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3544cc.  v0:= 7I;
  #L3544ce.  call temp:= `q`(v0, v1, v2) @signature `Ln/a/a/c/g;.q:(I[I[I)I` @kind static;
  #L3544d4.  v1:= temp;
  #L3544d6.  if v1 != 0 then goto L3544f6;
  #L3544da.  v1:= 6I;
  #L3544dc.  v1:= v2[v1];
  #L3544e0.  v0:= -1I;
  #L3544e2.  if v1 != v0 then goto L3544fc;
  #L3544e6.  v1:= `@@n.a.a.a.t.b.n.a` @type ^`int`[] @kind object;
  #L3544ea.  call temp:= `i`(v2, v1) @signature `Ln/a/a/c/c;.i:([I[I)Z` @kind static;
  #L3544f0.  v1:= temp;
  #L3544f2.  if v1 == 0 then goto L3544fc;
  #L3544f6.  call `c`(v2) @signature `Ln/a/a/a/t/b/n;.c:([I)V` @kind static;
  #L3544fc.  return @kind void;
}
procedure `void` `c`(`int`[] v12 @kind object) @signature `Ln/a/a/a/t/b/n;.c:([I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L354510.  v0:= 0I;
  #L354512.  v1:= v12[v0];
  #L354516.  v1:= (`long`) v1 @kind i2l;
  #L354518.  v3:= 4294967295L;
  #L354522.  v1:= v1 ^& v3 @kind long;
  #L354524.  v5:= 1L;
  #L354528.  v1:= v1 - v5 @kind long;
  #L35452a.  v7:= (`int`) v1 @kind l2i;
  #L35452c.  v12[v0]:= v7;
  #L354530.  v0:= 32I;
  #L354534.  v1:= v1 ^> v0 @kind long;
  #L354536.  v7:= 0L;
  #L35453a.  v9:= lcmp(v1, v7);
  #L35453e.  if v9 == 0 then goto L35456a;
  #L354542.  v9:= 1I;
  #L354544.  v10:= v12[v9];
  #L354548.  v10:= (`long`) v10 @kind i2l;
  #L35454a.  v10:= v10 ^& v3 @kind long;
  #L35454c.  v1:= v1 + v10 @kind long;
  #L35454e.  v10:= (`int`) v1 @kind l2i;
  #L354550.  v12[v9]:= v10;
  #L354554.  v1:= v1 ^> v0 @kind long;
  #L354556.  v9:= 2I;
  #L354558.  v10:= v12[v9];
  #L35455c.  v10:= (`long`) v10 @kind i2l;
  #L35455e.  v10:= v10 ^& v3 @kind long;
  #L354560.  v1:= v1 + v10 @kind long;
  #L354562.  v10:= (`int`) v1 @kind l2i;
  #L354564.  v12[v9]:= v10;
  #L354568.  v1:= v1 ^> v0 @kind long;
  #L35456a.  v9:= 3I;
  #L35456c.  v10:= v12[v9];
  #L354570.  v10:= (`long`) v10 @kind i2l;
  #L354572.  v3:= v3 ^& v10 @kind long;
  #L354574.  v3:= v3 + v5 @kind long;
  #L354576.  v1:= v1 + v3 @kind long;
  #L354578.  v3:= (`int`) v1 @kind l2i;
  #L35457a.  v12[v9]:= v3;
  #L35457e.  v0:= v1 ^> v0 @kind long;
  #L354582.  v2:= lcmp(v0, v7);
  #L354586.  if v2 == 0 then goto L354594;
  #L35458a.  v0:= 7I;
  #L35458c.  v1:= 4I;
  #L35458e.  call temp:= `r`(v0, v12, v1) @signature `Ln/a/a/c/g;.r:(I[II)I` @kind static;
  #L354594.  return @kind void;
}
procedure `int`[] `d`(`java.math.BigInteger` v2 @kind object) @signature `Ln/a/a/a/t/b/n;.d:(Ljava/math/BigInteger;)[I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L354370.  call temp:= `g`(v2) @signature `Ln/a/a/c/c;.g:(Ljava/math/BigInteger;)[I` @kind static;
  #L354376.  v2:= temp @kind object;
  #L354378.  v0:= 6I;
  #L35437a.  v0:= v2[v0];
  #L35437e.  v1:= -1I;
  #L354380.  if v0 != v1 then goto L35439a;
  #L354384.  v0:= `@@n.a.a.a.t.b.n.a` @type ^`int`[] @kind object;
  #L354388.  call temp:= `i`(v2, v0) @signature `Ln/a/a/c/c;.i:([I[I)Z` @kind static;
  #L35438e.  v1:= temp;
  #L354390.  if v1 == 0 then goto L35439a;
  #L354394.  call temp:= `s`(v0, v2) @signature `Ln/a/a/c/c;.s:([I[I)I` @kind static;
  #L35439a.  return v2 @kind object;
}
procedure `void` `e`(`int`[] v1 @kind object, `int`[] v2 @kind object, `int`[] v3 @kind object) @signature `Ln/a/a/a/t/b/n;.e:([I[I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3545a8.  call temp:= `e`() @signature `Ln/a/a/c/c;.e:()[I` @kind static;
  #L3545ae.  v0:= temp @kind object;
  #L3545b0.  call `l`(v1, v2, v0) @signature `Ln/a/a/c/c;.l:([I[I[I)V` @kind static;
  #L3545b6.  call `h`(v0, v3) @signature `Ln/a/a/a/t/b/n;.h:([I[I)V` @kind static;
  #L3545bc.  return @kind void;
}
procedure `void` `f`(`int`[] v1 @kind object, `int`[] v2 @kind object, `int`[] v3 @kind object) @signature `Ln/a/a/a/t/b/n;.f:([I[I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3545d0.  call temp:= `p`(v1, v2, v3) @signature `Ln/a/a/c/c;.p:([I[I[I)I` @kind static;
  #L3545d6.  v1:= temp;
  #L3545d8.  v2:= 14I;
  #L3545dc.  if v1 != 0 then goto L3545fe;
  #L3545e0.  v1:= 13I;
  #L3545e4.  v1:= v3[v1];
  #L3545e8.  v0:= -1I;
  #L3545ea.  if v1 != v0 then goto L354618;
  #L3545ee.  v1:= `@@n.a.a.a.t.b.n.b` @type ^`int`[] @kind object;
  #L3545f2.  call temp:= `o`(v2, v3, v1) @signature `Ln/a/a/c/g;.o:(I[I[I)Z` @kind static;
  #L3545f8.  v1:= temp;
  #L3545fa.  if v1 == 0 then goto L354618;
  #L3545fe.  v1:= `@@n.a.a.a.t.b.n.c` @type ^`int`[] @kind object;
  #L354602.  v0:= length @variable v1;
  #L354604.  call temp:= `e`(v0, v1, v3) @signature `Ln/a/a/c/g;.e:(I[I[I)I` @kind static;
  #L35460a.  v0:= temp;
  #L35460c.  if v0 == 0 then goto L354618;
  #L354610.  v1:= length @variable v1;
  #L354612.  call temp:= `r`(v2, v3, v1) @signature `Ln/a/a/c/g;.r:(I[II)I` @kind static;
  #L354618.  return @kind void;
}
procedure `void` `g`(`int`[] v1 @kind object, `int`[] v2 @kind object) @signature `Ln/a/a/a/t/b/n;.g:([I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L35462c.  call temp:= `k`(v1) @signature `Ln/a/a/c/c;.k:([I)Z` @kind static;
  #L354632.  v0:= temp;
  #L354634.  if v0 == 0 then goto L354640;
  #L354638.  call `u`(v2) @signature `Ln/a/a/c/c;.u:([I)V` @kind static;
  #L35463e.  goto L35464a;
  #L354640.  v0:= `@@n.a.a.a.t.b.n.a` @type ^`int`[] @kind object;
  #L354644.  call temp:= `r`(v0, v1, v2) @signature `Ln/a/a/c/c;.r:([I[I[I)I` @kind static;
  #L35464a.  return @kind void;
}
procedure `void` `h`(`int`[] v30 @kind object, `int`[] v31 @kind object) @signature `Ln/a/a/a/t/b/n;.h:([I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;
    v24;
    v25;
    v26;
    v27;
    v28;
    v29;

  #L35465c.  v0:= v31 @kind object;
  #L354660.  v1:= 10I;
  #L354664.  v1:= v30[v1];
  #L354668.  v1:= (`long`) v1 @kind i2l;
  #L35466a.  v3:= 4294967295L;
  #L354674.  v1:= v1 ^& v3 @kind long;
  #L354676.  v5:= 11I;
  #L35467a.  v5:= v30[v5];
  #L35467e.  v5:= (`long`) v5 @kind i2l;
  #L354680.  v5:= v5 ^& v3 @kind long;
  #L354682.  v7:= 12I;
  #L354686.  v7:= v30[v7];
  #L35468a.  v7:= (`long`) v7 @kind i2l;
  #L35468c.  v7:= v7 ^& v3 @kind long;
  #L35468e.  v9:= 13I;
  #L354692.  v9:= v30[v9];
  #L354696.  v9:= (`long`) v9 @kind i2l;
  #L354698.  v9:= v9 ^& v3 @kind long;
  #L35469a.  v11:= 7I;
  #L35469c.  v12:= v30[v11];
  #L3546a0.  v12:= (`long`) v12 @kind i2l;
  #L3546a2.  v12:= v12 ^& v3 @kind long;
  #L3546a4.  v12:= v12 + v5 @kind long;
  #L3546a6.  v14:= 1L;
  #L3546aa.  v12:= v12 - v14 @kind long;
  #L3546ac.  v16:= 8I;
  #L3546b0.  v11:= v30[v16];
  #L3546b4.  v14:= (`long`) v11 @kind i2l;
  #L3546b6.  v14:= v14 ^& v3 @kind long;
  #L3546b8.  v14:= v14 + v7 @kind long;
  #L3546ba.  v11:= 9I;
  #L3546be.  v11:= v30[v11];
  #L3546c2.  v17:= v7 @kind wide;
  #L3546c6.  v7:= (`long`) v11 @kind i2l;
  #L3546c8.  v7:= v7 ^& v3 @kind long;
  #L3546ca.  v7:= v7 + v9 @kind long;
  #L3546cc.  v11:= 0I;
  #L3546ce.  v19:= v9 @kind wide;
  #L3546d2.  v9:= v30[v11];
  #L3546d6.  v9:= (`long`) v9 @kind i2l;
  #L3546d8.  v9:= v9 ^& v3 @kind long;
  #L3546da.  v9:= v9 - v12 @kind long;
  #L3546dc.  v21:= 0L;
  #L3546e0.  v9:= v9 + v21 @kind long;
  #L3546e4.  v23:= v9 ^& v3 @kind long;
  #L3546e8.  v16:= 32I;
  #L3546ec.  v9:= v9 ^> v16 @kind long;
  #L3546f0.  v25:= 1I;
  #L3546f4.  v11:= v30[v25];
  #L3546f8.  v26:= v5 @kind wide;
  #L3546fc.  v5:= (`long`) v11 @kind i2l;
  #L3546fe.  v5:= v5 ^& v3 @kind long;
  #L354700.  v5:= v5 - v14 @kind long;
  #L354702.  v9:= v9 + v5 @kind long;
  #L354704.  v5:= (`int`) v9 @kind l2i;
  #L354706.  v0[v25]:= v5;
  #L35470a.  v5:= v9 ^> v16 @kind long;
  #L35470e.  v9:= 2I;
  #L354710.  v10:= v30[v9];
  #L354714.  v10:= (`long`) v10 @kind i2l;
  #L354716.  v10:= v10 ^& v3 @kind long;
  #L354718.  v10:= v10 - v7 @kind long;
  #L35471a.  v5:= v5 + v10 @kind long;
  #L35471c.  v10:= (`int`) v5 @kind l2i;
  #L35471e.  v0[v9]:= v10;
  #L354722.  v5:= v5 ^> v16 @kind long;
  #L354726.  v10:= 3I;
  #L354728.  v11:= v30[v10];
  #L35472c.  v10:= (`long`) v11 @kind i2l;
  #L35472e.  v10:= v10 ^& v3 @kind long;
  #L354730.  v10:= v10 + v12 @kind long;
  #L354732.  v10:= v10 - v1 @kind long;
  #L354734.  v5:= v5 + v10 @kind long;
  #L354736.  v10:= v5 ^& v3 @kind long;
  #L35473a.  v5:= v5 ^> v16 @kind long;
  #L35473e.  v12:= 4I;
  #L354740.  v13:= v30[v12];
  #L354744.  v28:= v10 @kind wide;
  #L354748.  v9:= (`long`) v13 @kind i2l;
  #L35474a.  v9:= v9 ^& v3 @kind long;
  #L35474c.  v9:= v9 + v14 @kind long;
  #L35474e.  v9:= v9 - v26 @kind long;
  #L354752.  v5:= v5 + v9 @kind long;
  #L354754.  v9:= (`int`) v5 @kind l2i;
  #L354756.  v0[v12]:= v9;
  #L35475a.  v5:= v5 ^> v16 @kind long;
  #L35475e.  v9:= 5I;
  #L354760.  v10:= v30[v9];
  #L354764.  v10:= (`long`) v10 @kind i2l;
  #L354766.  v10:= v10 ^& v3 @kind long;
  #L354768.  v10:= v10 + v7 @kind long;
  #L35476a.  v10:= v10 - v17 @kind long;
  #L35476e.  v5:= v5 + v10 @kind long;
  #L354770.  v7:= (`int`) v5 @kind l2i;
  #L354772.  v0[v9]:= v7;
  #L354776.  v5:= v5 ^> v16 @kind long;
  #L35477a.  v7:= 6I;
  #L35477c.  v8:= v30[v7];
  #L354780.  v8:= (`long`) v8 @kind i2l;
  #L354782.  v8:= v8 ^& v3 @kind long;
  #L354784.  v8:= v8 + v1 @kind long;
  #L354786.  v8:= v8 - v19 @kind long;
  #L35478a.  v5:= v5 + v8 @kind long;
  #L35478c.  v1:= (`int`) v5 @kind l2i;
  #L35478e.  v0[v7]:= v1;
  #L354792.  v1:= v5 ^> v16 @kind long;
  #L354796.  v5:= 1L;
  #L35479a.  v1:= v1 + v5 @kind long;
  #L35479c.  v10:= v28 + v1 @kind long;
  #L3547a0.  v1:= v23 - v1 @kind long;
  #L3547a4.  v5:= (`int`) v1 @kind l2i;
  #L3547a6.  v6:= 0I;
  #L3547a8.  v0[v6]:= v5;
  #L3547ac.  v1:= v1 ^> v16 @kind long;
  #L3547b0.  v5:= lcmp(v1, v21);
  #L3547b4.  if v5 == 0 then goto L3547e4;
  #L3547b8.  v5:= v0[v25];
  #L3547bc.  v5:= (`long`) v5 @kind i2l;
  #L3547be.  v5:= v5 ^& v3 @kind long;
  #L3547c0.  v1:= v1 + v5 @kind long;
  #L3547c2.  v5:= (`int`) v1 @kind l2i;
  #L3547c4.  v0[v25]:= v5;
  #L3547c8.  v1:= v1 ^> v16 @kind long;
  #L3547cc.  v5:= 2I;
  #L3547ce.  v6:= v0[v5];
  #L3547d2.  v8:= (`long`) v6 @kind i2l;
  #L3547d4.  v3:= v3 ^& v8 @kind long;
  #L3547d6.  v1:= v1 + v3 @kind long;
  #L3547d8.  v3:= (`int`) v1 @kind l2i;
  #L3547da.  v0[v5]:= v3;
  #L3547de.  v1:= v1 ^> v16 @kind long;
  #L3547e2.  v10:= v10 + v1 @kind long;
  #L3547e4.  v1:= (`int`) v10 @kind l2i;
  #L3547e6.  v2:= 3I;
  #L3547e8.  v0[v2]:= v1;
  #L3547ec.  v1:= v10 ^> v16 @kind long;
  #L3547f0.  v3:= lcmp(v1, v21);
  #L3547f4.  if v3 == 0 then goto L354806;
  #L3547f8.  v1:= 7I;
  #L3547fa.  call temp:= `r`(v1, v0, v12) @signature `Ln/a/a/c/g;.r:(I[II)I` @kind static;
  #L354800.  v1:= temp;
  #L354802.  if v1 != 0 then goto L354820;
  #L354806.  v1:= v0[v7];
  #L35480a.  v2:= -1I;
  #L35480c.  if v1 != v2 then goto L354826;
  #L354810.  v1:= `@@n.a.a.a.t.b.n.a` @type ^`int`[] @kind object;
  #L354814.  call temp:= `i`(v0, v1) @signature `Ln/a/a/c/c;.i:([I[I)Z` @kind static;
  #L35481a.  v1:= temp;
  #L35481c.  if v1 == 0 then goto L354826;
  #L354820.  call `c`(v31) @signature `Ln/a/a/a/t/b/n;.c:([I)V` @kind static;
  #L354826.  return @kind void;
}
procedure `void` `i`(`int` v11 , `int`[] v12 @kind object) @signature `Ln/a/a/a/t/b/n;.i:(I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L354838.  v0:= 0L;
  #L35483c.  if v11 == 0 then goto L3548b2;
  #L354840.  v2:= (`long`) v11 @kind i2l;
  #L354842.  v4:= 4294967295L;
  #L35484c.  v2:= v2 ^& v4 @kind long;
  #L35484e.  v11:= 0I;
  #L354850.  v6:= v12[v11];
  #L354854.  v6:= (`long`) v6 @kind i2l;
  #L354856.  v6:= v6 ^& v4 @kind long;
  #L354858.  v6:= v6 - v2 @kind long;
  #L35485a.  v6:= v6 + v0 @kind long;
  #L35485c.  v8:= (`int`) v6 @kind l2i;
  #L35485e.  v12[v11]:= v8;
  #L354862.  v11:= 32I;
  #L354866.  v6:= v6 ^> v11 @kind long;
  #L354868.  v8:= lcmp(v6, v0);
  #L35486c.  if v8 == 0 then goto L354898;
  #L354870.  v8:= 1I;
  #L354872.  v9:= v12[v8];
  #L354876.  v9:= (`long`) v9 @kind i2l;
  #L354878.  v9:= v9 ^& v4 @kind long;
  #L35487a.  v6:= v6 + v9 @kind long;
  #L35487c.  v9:= (`int`) v6 @kind l2i;
  #L35487e.  v12[v8]:= v9;
  #L354882.  v6:= v6 ^> v11 @kind long;
  #L354884.  v8:= 2I;
  #L354886.  v9:= v12[v8];
  #L35488a.  v9:= (`long`) v9 @kind i2l;
  #L35488c.  v9:= v9 ^& v4 @kind long;
  #L35488e.  v6:= v6 + v9 @kind long;
  #L354890.  v9:= (`int`) v6 @kind l2i;
  #L354892.  v12[v8]:= v9;
  #L354896.  v6:= v6 ^> v11 @kind long;
  #L354898.  v8:= 3I;
  #L35489a.  v9:= v12[v8];
  #L35489e.  v9:= (`long`) v9 @kind i2l;
  #L3548a0.  v4:= v4 ^& v9 @kind long;
  #L3548a2.  v4:= v4 + v2 @kind long;
  #L3548a4.  v6:= v6 + v4 @kind long;
  #L3548a6.  v2:= (`int`) v6 @kind l2i;
  #L3548a8.  v12[v8]:= v2;
  #L3548ac.  v2:= v6 ^> v11 @kind long;
  #L3548b0.  goto L3548b4;
  #L3548b2.  v2:= v0 @kind wide;
  #L3548b4.  v11:= lcmp(v2, v0);
  #L3548b8.  if v11 == 0 then goto L3548cc;
  #L3548bc.  v11:= 7I;
  #L3548be.  v0:= 4I;
  #L3548c0.  call temp:= `r`(v11, v12, v0) @signature `Ln/a/a/c/g;.r:(I[II)I` @kind static;
  #L3548c6.  v11:= temp;
  #L3548c8.  if v11 != 0 then goto L3548e8;
  #L3548cc.  v11:= 6I;
  #L3548ce.  v11:= v12[v11];
  #L3548d2.  v0:= -1I;
  #L3548d4.  if v11 != v0 then goto L3548ee;
  #L3548d8.  v11:= `@@n.a.a.a.t.b.n.a` @type ^`int`[] @kind object;
  #L3548dc.  call temp:= `i`(v12, v11) @signature `Ln/a/a/c/c;.i:([I[I)Z` @kind static;
  #L3548e2.  v11:= temp;
  #L3548e4.  if v11 == 0 then goto L3548ee;
  #L3548e8.  call `c`(v12) @signature `Ln/a/a/a/t/b/n;.c:([I)V` @kind static;
  #L3548ee.  return @kind void;
}
procedure `void` `j`(`int`[] v1 @kind object, `int`[] v2 @kind object) @signature `Ln/a/a/a/t/b/n;.j:([I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L354900.  call temp:= `e`() @signature `Ln/a/a/c/c;.e:()[I` @kind static;
  #L354906.  v0:= temp @kind object;
  #L354908.  call `q`(v1, v0) @signature `Ln/a/a/c/c;.q:([I[I)V` @kind static;
  #L35490e.  call `h`(v0, v2) @signature `Ln/a/a/a/t/b/n;.h:([I[I)V` @kind static;
  #L354914.  return @kind void;
}
procedure `void` `k`(`int`[] v1 @kind object, `int` v2 , `int`[] v3 @kind object) @signature `Ln/a/a/a/t/b/n;.k:([II[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L354928.  call temp:= `e`() @signature `Ln/a/a/c/c;.e:()[I` @kind static;
  #L35492e.  v0:= temp @kind object;
  #L354930.  call `q`(v1, v0) @signature `Ln/a/a/c/c;.q:([I[I)V` @kind static;
  #L354936.  call `h`(v0, v3) @signature `Ln/a/a/a/t/b/n;.h:([I[I)V` @kind static;
  #L35493c.  v2:= v2 + -1;
  #L354940.  if v2 <= 0 then goto L35494c;
  #L354944.  call `q`(v3, v0) @signature `Ln/a/a/c/c;.q:([I[I)V` @kind static;
  #L35494a.  goto L354936;
  #L35494c.  return @kind void;
}
procedure `void` `l`(`int`[] v12 @kind object) @signature `Ln/a/a/a/t/b/n;.l:([I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L354960.  v0:= 0I;
  #L354962.  v1:= v12[v0];
  #L354966.  v1:= (`long`) v1 @kind i2l;
  #L354968.  v3:= 4294967295L;
  #L354972.  v1:= v1 ^& v3 @kind long;
  #L354974.  v5:= 1L;
  #L354978.  v1:= v1 + v5 @kind long;
  #L35497a.  v7:= (`int`) v1 @kind l2i;
  #L35497c.  v12[v0]:= v7;
  #L354980.  v0:= 32I;
  #L354984.  v1:= v1 ^> v0 @kind long;
  #L354986.  v7:= 0L;
  #L35498a.  v9:= lcmp(v1, v7);
  #L35498e.  if v9 == 0 then goto L3549ba;
  #L354992.  v9:= 1I;
  #L354994.  v10:= v12[v9];
  #L354998.  v10:= (`long`) v10 @kind i2l;
  #L35499a.  v10:= v10 ^& v3 @kind long;
  #L35499c.  v1:= v1 + v10 @kind long;
  #L35499e.  v10:= (`int`) v1 @kind l2i;
  #L3549a0.  v12[v9]:= v10;
  #L3549a4.  v1:= v1 ^> v0 @kind long;
  #L3549a6.  v9:= 2I;
  #L3549a8.  v10:= v12[v9];
  #L3549ac.  v10:= (`long`) v10 @kind i2l;
  #L3549ae.  v10:= v10 ^& v3 @kind long;
  #L3549b0.  v1:= v1 + v10 @kind long;
  #L3549b2.  v10:= (`int`) v1 @kind l2i;
  #L3549b4.  v12[v9]:= v10;
  #L3549b8.  v1:= v1 ^> v0 @kind long;
  #L3549ba.  v9:= 3I;
  #L3549bc.  v10:= v12[v9];
  #L3549c0.  v10:= (`long`) v10 @kind i2l;
  #L3549c2.  v3:= v3 ^& v10 @kind long;
  #L3549c4.  v3:= v3 - v5 @kind long;
  #L3549c6.  v1:= v1 + v3 @kind long;
  #L3549c8.  v3:= (`int`) v1 @kind l2i;
  #L3549ca.  v12[v9]:= v3;
  #L3549ce.  v0:= v1 ^> v0 @kind long;
  #L3549d2.  v2:= lcmp(v0, v7);
  #L3549d6.  if v2 == 0 then goto L3549e4;
  #L3549da.  v0:= 7I;
  #L3549dc.  v1:= 4I;
  #L3549de.  call temp:= `k`(v0, v12, v1) @signature `Ln/a/a/c/g;.k:(I[II)I` @kind static;
  #L3549e4.  return @kind void;
}
procedure `void` `m`(`int`[] v0 @kind object, `int`[] v1 @kind object, `int`[] v2 @kind object) @signature `Ln/a/a/a/t/b/n;.m:([I[I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3549f8.  call temp:= `r`(v0, v1, v2) @signature `Ln/a/a/c/c;.r:([I[I[I)I` @kind static;
  #L3549fe.  v0:= temp;
  #L354a00.  if v0 == 0 then goto L354a0a;
  #L354a04.  call `l`(v2) @signature `Ln/a/a/a/t/b/n;.l:([I)V` @kind static;
  #L354a0a.  return @kind void;
}
procedure `void` `n`(`int`[] v2 @kind object, `int`[] v3 @kind object) @signature `Ln/a/a/a/t/b/n;.n:([I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L354a1c.  v0:= 7I;
  #L354a1e.  v1:= 0I;
  #L354a20.  call temp:= `C`(v0, v2, v1, v3) @signature `Ln/a/a/c/g;.C:(I[II[I)I` @kind static;
  #L354a26.  v2:= temp;
  #L354a28.  if v2 != 0 then goto L354a48;
  #L354a2c.  v2:= 6I;
  #L354a2e.  v2:= v3[v2];
  #L354a32.  v0:= -1I;
  #L354a34.  if v2 != v0 then goto L354a4e;
  #L354a38.  v2:= `@@n.a.a.a.t.b.n.a` @type ^`int`[] @kind object;
  #L354a3c.  call temp:= `i`(v3, v2) @signature `Ln/a/a/c/c;.i:([I[I)Z` @kind static;
  #L354a42.  v2:= temp;
  #L354a44.  if v2 == 0 then goto L354a4e;
  #L354a48.  call `c`(v3) @signature `Ln/a/a/a/t/b/n;.c:([I)V` @kind static;
  #L354a4e.  return @kind void;
}
