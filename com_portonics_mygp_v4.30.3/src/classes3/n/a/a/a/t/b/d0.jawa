record `n.a.a.a.t.b.d0` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `int`[] `@@n.a.a.a.t.b.d0.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/a/a/a/t/b/d0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L358990.  v0:= 17I;
  #L358994.  v0:= new `int`[v0];
  #L358998.  goto L3589a4;
  #L35899e.  `@@n.a.a.a.t.b.d0.a` @type ^`int`[] := v0 @kind object;
  #L3589a2.  return @kind void;
  #L3589a4.  v0:= (-1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, -1I, 511I) @kind object;
  #L3589ef.  goto L35899e;
}
procedure `void` `a`(`int`[] v2 @kind object, `int`[] v3 @kind object, `int`[] v4 @kind object) @signature `Ln/a/a/a/t/b/d0;.a:([I[I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L358a00.  v0:= 16I;
  #L358a04.  call temp:= `a`(v0, v2, v3, v4) @signature `Ln/a/a/c/g;.a:(I[I[I[I)I` @kind static;
  #L358a0a.  v1:= temp;
  #L358a0c.  v2:= v2[v0];
  #L358a10.  v1:= v1 + v2 @kind int;
  #L358a12.  v2:= v3[v0];
  #L358a16.  v1:= v1 + v2 @kind int;
  #L358a18.  v2:= 511I;
  #L358a1c.  if v1 > v2 then goto L358a34;
  #L358a20.  if v1 != v2 then goto L358a40;
  #L358a24.  v3:= `@@n.a.a.a.t.b.d0.a` @type ^`int`[] @kind object;
  #L358a28.  call temp:= `l`(v0, v4, v3) @signature `Ln/a/a/c/g;.l:(I[I[I)Z` @kind static;
  #L358a2e.  v3:= temp;
  #L358a30.  if v3 == 0 then goto L358a40;
  #L358a34.  call temp:= `p`(v0, v4) @signature `Ln/a/a/c/g;.p:(I[I)I` @kind static;
  #L358a3a.  v3:= temp;
  #L358a3c.  v1:= v1 + v3 @kind int;
  #L358a3e.  v1:= v1 ^& v2 @kind int;
  #L358a40.  v4[v0]:= v1;
  #L358a44.  return @kind void;
}
procedure `void` `b`(`int`[] v3 @kind object, `int`[] v4 @kind object) @signature `Ln/a/a/a/t/b/d0;.b:([I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L358a58.  v0:= 16I;
  #L358a5c.  call temp:= `q`(v0, v3, v4) @signature `Ln/a/a/c/g;.q:(I[I[I)I` @kind static;
  #L358a62.  v1:= temp;
  #L358a64.  v3:= v3[v0];
  #L358a68.  v1:= v1 + v3 @kind int;
  #L358a6a.  v3:= 511I;
  #L358a6e.  if v1 > v3 then goto L358a86;
  #L358a72.  if v1 != v3 then goto L358a92;
  #L358a76.  v2:= `@@n.a.a.a.t.b.d0.a` @type ^`int`[] @kind object;
  #L358a7a.  call temp:= `l`(v0, v4, v2) @signature `Ln/a/a/c/g;.l:(I[I[I)Z` @kind static;
  #L358a80.  v2:= temp;
  #L358a82.  if v2 == 0 then goto L358a92;
  #L358a86.  call temp:= `p`(v0, v4) @signature `Ln/a/a/c/g;.p:(I[I)I` @kind static;
  #L358a8c.  v2:= temp;
  #L358a8e.  v1:= v1 + v2 @kind int;
  #L358a90.  v1:= v1 ^& v3 @kind int;
  #L358a92.  v4[v0]:= v1;
  #L358a96.  return @kind void;
}
procedure `int`[] `c`(`java.math.BigInteger` v2 @kind object) @signature `Ln/a/a/a/t/b/d0;.c:(Ljava/math/BigInteger;)[I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L358958.  v0:= 521I;
  #L35895c.  call temp:= `m`(v0, v2) @signature `Ln/a/a/c/g;.m:(ILjava/math/BigInteger;)[I` @kind static;
  #L358962.  v2:= temp @kind object;
  #L358964.  v0:= `@@n.a.a.a.t.b.d0.a` @type ^`int`[] @kind object;
  #L358968.  v1:= 17I;
  #L35896c.  call temp:= `l`(v1, v2, v0) @signature `Ln/a/a/c/g;.l:(I[I[I)Z` @kind static;
  #L358972.  v0:= temp;
  #L358974.  if v0 == 0 then goto L35897e;
  #L358978.  call `K`(v1, v2) @signature `Ln/a/a/c/g;.K:(I[I)V` @kind static;
  #L35897e.  return v2 @kind object;
}
procedure `void` `d`(`int`[] v9 @kind object, `int`[] v10 @kind object, `int`[] v11 @kind object) @signature `Ln/a/a/a/t/b/d0;.d:([I[I[I)V` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L358aa8.  call `a`(v9, v10, v11) @signature `Ln/a/a/c/f;.a:([I[I[I)V` @kind static;
  #L358aae.  v0:= 16I;
  #L358ab2.  v8:= v9[v0];
  #L358ab6.  v0:= v10[v0];
  #L358aba.  v1:= 16I;
  #L358abe.  v7:= 16I;
  #L358ac2.  v2:= v8;
  #L358ac4.  v3:= v10 @kind object;
  #L358ac6.  v4:= v0;
  #L358ac8.  v5:= v9 @kind object;
  #L358aca.  v6:= v11 @kind object;
  #L358acc.  call temp:= `v`(v1, v2, v3, v4, v5, v6, v7) @signature `Ln/a/a/c/g;.v:(II[II[I[II)I` @kind static;
  #L358ad2.  v9:= temp;
  #L358ad4.  v8:= v8 * v0 @kind int;
  #L358ad8.  v9:= v9 + v8 @kind int;
  #L358ada.  v10:= 32I;
  #L358ade.  v11[v10]:= v9;
  #L358ae2.  return @kind void;
}
procedure `void` `e`(`int`[] v7 @kind object, `int`[] v8 @kind object) @signature `Ln/a/a/a/t/b/d0;.e:([I[I)V` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L358af4.  call `b`(v7, v8) @signature `Ln/a/a/c/f;.b:([I[I)V` @kind static;
  #L358afa.  v0:= 16I;
  #L358afe.  v0:= v7[v0];
  #L358b02.  v2:= v0 ^< 1;
  #L358b06.  v1:= 16I;
  #L358b0a.  v4:= 0I;
  #L358b0c.  v6:= 16I;
  #L358b10.  v3:= v7 @kind object;
  #L358b12.  v5:= v8 @kind object;
  #L358b14.  call temp:= `w`(v1, v2, v3, v4, v5, v6) @signature `Ln/a/a/c/g;.w:(II[II[II)I` @kind static;
  #L358b1a.  v7:= temp;
  #L358b1c.  v0:= v0 * v0 @kind int;
  #L358b20.  v7:= v7 + v0 @kind int;
  #L358b22.  v0:= 32I;
  #L358b26.  v8[v0]:= v7;
  #L358b2a.  return @kind void;
}
procedure `void` `f`(`int`[] v1 @kind object, `int`[] v2 @kind object, `int`[] v3 @kind object) @signature `Ln/a/a/a/t/b/d0;.f:([I[I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L358b3c.  v0:= 33I;
  #L358b40.  call temp:= `i`(v0) @signature `Ln/a/a/c/g;.i:(I)[I` @kind static;
  #L358b46.  v0:= temp @kind object;
  #L358b48.  call `d`(v1, v2, v0) @signature `Ln/a/a/a/t/b/d0;.d:([I[I[I)V` @kind static;
  #L358b4e.  call `h`(v0, v3) @signature `Ln/a/a/a/t/b/d0;.h:([I[I)V` @kind static;
  #L358b54.  return @kind void;
}
procedure `void` `g`(`int`[] v2 @kind object, `int`[] v3 @kind object) @signature `Ln/a/a/a/t/b/d0;.g:([I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L358b68.  v0:= 17I;
  #L358b6c.  call temp:= `u`(v0, v2) @signature `Ln/a/a/c/g;.u:(I[I)Z` @kind static;
  #L358b72.  v1:= temp;
  #L358b74.  if v1 == 0 then goto L358b80;
  #L358b78.  call `K`(v0, v3) @signature `Ln/a/a/c/g;.K:(I[I)V` @kind static;
  #L358b7e.  goto L358b8a;
  #L358b80.  v1:= `@@n.a.a.a.t.b.d0.a` @type ^`int`[] @kind object;
  #L358b84.  call temp:= `F`(v0, v1, v2, v3) @signature `Ln/a/a/c/g;.F:(I[I[I[I)I` @kind static;
  #L358b8a.  return @kind void;
}
procedure `void` `h`(`int`[] v8 @kind object, `int`[] v9 @kind object) @signature `Ln/a/a/a/t/b/d0;.h:([I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L358b9c.  v0:= 32I;
  #L358ba0.  v0:= v8[v0];
  #L358ba4.  v1:= 16I;
  #L358ba8.  v3:= 16I;
  #L358bac.  v4:= 9I;
  #L358bb0.  v7:= 0I;
  #L358bb2.  v2:= v8 @kind object;
  #L358bb4.  v5:= v0;
  #L358bb6.  v6:= v9 @kind object;
  #L358bb8.  call temp:= `z`(v1, v2, v3, v4, v5, v6, v7) @signature `Ln/a/a/c/g;.z:(I[IIII[II)I` @kind static;
  #L358bbe.  v1:= temp;
  #L358bc0.  v1:= v1 ^>> 23;
  #L358bc4.  v0:= v0 ^>> 9;
  #L358bc8.  v1:= v1 + v0 @kind int;
  #L358bca.  v0:= 16I;
  #L358bce.  call temp:= `e`(v0, v8, v9) @signature `Ln/a/a/c/g;.e:(I[I[I)I` @kind static;
  #L358bd4.  v8:= temp;
  #L358bd6.  v1:= v1 + v8 @kind int;
  #L358bd8.  v8:= 511I;
  #L358bdc.  if v1 > v8 then goto L358bf4;
  #L358be0.  if v1 != v8 then goto L358c00;
  #L358be4.  v2:= `@@n.a.a.a.t.b.d0.a` @type ^`int`[] @kind object;
  #L358be8.  call temp:= `l`(v0, v9, v2) @signature `Ln/a/a/c/g;.l:(I[I[I)Z` @kind static;
  #L358bee.  v2:= temp;
  #L358bf0.  if v2 == 0 then goto L358c00;
  #L358bf4.  call temp:= `p`(v0, v9) @signature `Ln/a/a/c/g;.p:(I[I)I` @kind static;
  #L358bfa.  v2:= temp;
  #L358bfc.  v1:= v1 + v2 @kind int;
  #L358bfe.  v1:= v1 ^& v8 @kind int;
  #L358c00.  v9[v0]:= v1;
  #L358c04.  return @kind void;
}
procedure `void` `i`(`int`[] v4 @kind object) @signature `Ln/a/a/a/t/b/d0;.i:([I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L358c18.  v0:= 16I;
  #L358c1c.  v1:= v4[v0];
  #L358c20.  v2:= v1 ^>> 9;
  #L358c24.  call temp:= `g`(v0, v2, v4) @signature `Ln/a/a/c/g;.g:(II[I)I` @kind static;
  #L358c2a.  v2:= temp;
  #L358c2c.  v3:= 511I;
  #L358c30.  v1:= v1 ^& v3 @kind int;
  #L358c32.  v2:= v2 + v1 @kind int;
  #L358c34.  if v2 > v3 then goto L358c4c;
  #L358c38.  if v2 != v3 then goto L358c58;
  #L358c3c.  v1:= `@@n.a.a.a.t.b.d0.a` @type ^`int`[] @kind object;
  #L358c40.  call temp:= `l`(v0, v4, v1) @signature `Ln/a/a/c/g;.l:(I[I[I)Z` @kind static;
  #L358c46.  v1:= temp;
  #L358c48.  if v1 == 0 then goto L358c58;
  #L358c4c.  call temp:= `p`(v0, v4) @signature `Ln/a/a/c/g;.p:(I[I)I` @kind static;
  #L358c52.  v1:= temp;
  #L358c54.  v2:= v2 + v1 @kind int;
  #L358c56.  v2:= v2 ^& v3 @kind int;
  #L358c58.  v4[v0]:= v2;
  #L358c5c.  return @kind void;
}
procedure `void` `j`(`int`[] v1 @kind object, `int`[] v2 @kind object) @signature `Ln/a/a/a/t/b/d0;.j:([I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L358c70.  v0:= 33I;
  #L358c74.  call temp:= `i`(v0) @signature `Ln/a/a/c/g;.i:(I)[I` @kind static;
  #L358c7a.  v0:= temp @kind object;
  #L358c7c.  call `e`(v1, v0) @signature `Ln/a/a/a/t/b/d0;.e:([I[I)V` @kind static;
  #L358c82.  call `h`(v0, v2) @signature `Ln/a/a/a/t/b/d0;.h:([I[I)V` @kind static;
  #L358c88.  return @kind void;
}
procedure `void` `k`(`int`[] v1 @kind object, `int` v2 , `int`[] v3 @kind object) @signature `Ln/a/a/a/t/b/d0;.k:([II[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L358c9c.  v0:= 33I;
  #L358ca0.  call temp:= `i`(v0) @signature `Ln/a/a/c/g;.i:(I)[I` @kind static;
  #L358ca6.  v0:= temp @kind object;
  #L358ca8.  call `e`(v1, v0) @signature `Ln/a/a/a/t/b/d0;.e:([I[I)V` @kind static;
  #L358cae.  call `h`(v0, v3) @signature `Ln/a/a/a/t/b/d0;.h:([I[I)V` @kind static;
  #L358cb4.  v2:= v2 + -1;
  #L358cb8.  if v2 <= 0 then goto L358cc4;
  #L358cbc.  call `e`(v3, v0) @signature `Ln/a/a/a/t/b/d0;.e:([I[I)V` @kind static;
  #L358cc2.  goto L358cae;
  #L358cc4.  return @kind void;
}
procedure `void` `l`(`int`[] v2 @kind object, `int`[] v3 @kind object, `int`[] v4 @kind object) @signature `Ln/a/a/a/t/b/d0;.l:([I[I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L358cd8.  v0:= 16I;
  #L358cdc.  call temp:= `F`(v0, v2, v3, v4) @signature `Ln/a/a/c/g;.F:(I[I[I[I)I` @kind static;
  #L358ce2.  v1:= temp;
  #L358ce4.  v2:= v2[v0];
  #L358ce8.  v1:= v1 + v2 @kind int;
  #L358cea.  v2:= v3[v0];
  #L358cee.  v1:= v1 - v2 @kind int;
  #L358cf0.  if v1 >= 0 then goto L358d02;
  #L358cf4.  call temp:= `j`(v0, v4) @signature `Ln/a/a/c/g;.j:(I[I)I` @kind static;
  #L358cfa.  v2:= temp;
  #L358cfc.  v1:= v1 + v2 @kind int;
  #L358cfe.  v1:= v1 ^& 511;
  #L358d02.  v4[v0]:= v1;
  #L358d06.  return @kind void;
}
procedure `void` `m`(`int`[] v3 @kind object, `int`[] v4 @kind object) @signature `Ln/a/a/a/t/b/d0;.m:([I[I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L358d18.  v0:= 16I;
  #L358d1c.  v1:= v3[v0];
  #L358d20.  v2:= v1 ^< 23;
  #L358d24.  call temp:= `C`(v0, v3, v2, v4) @signature `Ln/a/a/c/g;.C:(I[II[I)I` @kind static;
  #L358d2a.  v3:= temp;
  #L358d2c.  v1:= v1 ^< 1;
  #L358d30.  v3:= v3 ^| v1 @kind int;
  #L358d32.  v3:= v3 ^& 511;
  #L358d36.  v4[v0]:= v3;
  #L358d3a.  return @kind void;
}
