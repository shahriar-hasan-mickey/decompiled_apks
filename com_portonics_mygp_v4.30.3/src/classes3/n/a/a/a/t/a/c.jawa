record `n.a.a.a.t.a.c` @kind class @AccessFlag PUBLIC extends `n.a.a.a.j` @kind class {
  `int`[] `n.a.a.a.t.a.c.h` @AccessFlag PROTECTED;
}
global `java.math.BigInteger` `@@n.a.a.a.t.a.c.f` @AccessFlag PUBLIC_STATIC_FINAL;
global `int`[] `@@n.a.a.a.t.a.c.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/a/a/a/t/a/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3500f8.  v0:= `@@n.a.a.a.t.a.a.i` @type ^`java.math.BigInteger` @kind object;
  #L3500fc.  `@@n.a.a.a.t.a.c.f` @type ^`java.math.BigInteger` := v0 @kind object;
  #L350100.  v0:= 8I;
  #L350104.  v0:= new `int`[v0];
  #L350108.  goto L350114;
  #L35010e.  `@@n.a.a.a.t.a.c.g` @type ^`int`[] := v0 @kind object;
  #L350112.  return @kind void;
  #L350114.  v0:= (1242472624I, -991028441I, -1389370248I, 792926214I, 1039914919I, 726466713I, 1338105611I, 730014848I) @kind object;
  #L35013b.  goto L35010e;
}
procedure `void` `<init>`(`n.a.a.a.t.a.c` v1 @kind this) @signature `Ln/a/a/a/t/a/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L35014c.  call `<init>`(v1) @signature `Ln/a/a/a/j;.<init>:()V` @kind direct;
  #L350152.  call temp:= `f`() @signature `Ln/a/a/c/d;.f:()[I` @kind static;
  #L350158.  v0:= temp @kind object;
  #L35015a.  v1.`n.a.a.a.t.a.c.h` @type ^`int`[] := v0 @kind object;
  #L35015e.  return @kind void;
}
procedure `void` `<init>`(`n.a.a.a.t.a.c` v1 @kind this, `java.math.BigInteger` v2 @kind object) @signature `Ln/a/a/a/t/a/c;.<init>:(Ljava/math/BigInteger;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L35018c.  call `<init>`(v1) @signature `Ln/a/a/a/j;.<init>:()V` @kind direct;
  #L350192.  if v2 == 0 then goto L3501c0;
  #L350196.  call temp:= `signum`(v2) @signature `Ljava/math/BigInteger;.signum:()I` @kind virtual;
  #L35019c.  v0:= temp;
  #L35019e.  if v0 < 0 then goto L3501c0;
  #L3501a2.  v0:= `@@n.a.a.a.t.a.c.f` @type ^`java.math.BigInteger` @kind object;
  #L3501a6.  call temp:= `compareTo`(v2, v0) @signature `Ljava/math/BigInteger;.compareTo:(Ljava/math/BigInteger;)I` @kind virtual;
  #L3501ac.  v0:= temp;
  #L3501ae.  if v0 >= 0 then goto L3501c0;
  #L3501b2.  call temp:= `d`(v2) @signature `Ln/a/a/a/t/a/b;.d:(Ljava/math/BigInteger;)[I` @kind static;
  #L3501b8.  v2:= temp @kind object;
  #L3501ba.  v1.`n.a.a.a.t.a.c.h` @type ^`int`[] := v2 @kind object;
  #L3501be.  return @kind void;
  #L3501c0.  v2:= new `java.lang.IllegalArgumentException`;
  #L3501c4.  v0:= "x value invalid for Curve25519FieldElement" @kind object;
  #L3501c8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3501ce.  throw v2;
}
procedure `void` `<init>`(`n.a.a.a.t.a.c` v0 @kind this, `int`[] v1 @kind object) @signature `Ln/a/a/a/t/a/c;.<init>:([I)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L350170.  call `<init>`(v0) @signature `Ln/a/a/a/j;.<init>:()V` @kind direct;
  #L350176.  v0.`n.a.a.a.t.a.c.h` @type ^`int`[] := v1 @kind object;
  #L35017a.  return @kind void;
}
procedure `n.a.a.a.j` `a`(`n.a.a.a.t.a.c` v2 @kind this, `n.a.a.a.j` v3 @kind object) @signature `Ln/a/a/a/t/a/c;.a:(Ln/a/a/a/j;)Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L34fe14.  call temp:= `f`() @signature `Ln/a/a/c/d;.f:()[I` @kind static;
  #L34fe1a.  v0:= temp @kind object;
  #L34fe1c.  v1:= v2.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34fe20.  v3:= (`n.a.a.a.t.a.c`) v3 @kind object;
  #L34fe24.  v3:= v3.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34fe28.  call `a`(v1, v3, v0) @signature `Ln/a/a/a/t/a/b;.a:([I[I[I)V` @kind static;
  #L34fe2e.  v3:= new `n.a.a.a.t.a.c`;
  #L34fe32.  call `<init>`(v3, v0) @signature `Ln/a/a/a/t/a/c;.<init>:([I)V` @kind direct;
  #L34fe38.  return v3 @kind object;
}
procedure `n.a.a.a.j` `b`(`n.a.a.a.t.a.c` v2 @kind this) @signature `Ln/a/a/a/t/a/c;.b:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L34fe4c.  call temp:= `f`() @signature `Ln/a/a/c/d;.f:()[I` @kind static;
  #L34fe52.  v0:= temp @kind object;
  #L34fe54.  v1:= v2.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34fe58.  call `b`(v1, v0) @signature `Ln/a/a/a/t/a/b;.b:([I[I)V` @kind static;
  #L34fe5e.  v1:= new `n.a.a.a.t.a.c`;
  #L34fe62.  call `<init>`(v1, v0) @signature `Ln/a/a/a/t/a/c;.<init>:([I)V` @kind direct;
  #L34fe68.  return v1 @kind object;
}
procedure `n.a.a.a.j` `d`(`n.a.a.a.t.a.c` v2 @kind this, `n.a.a.a.j` v3 @kind object) @signature `Ln/a/a/a/t/a/c;.d:(Ln/a/a/a/j;)Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L34fe7c.  call temp:= `f`() @signature `Ln/a/a/c/d;.f:()[I` @kind static;
  #L34fe82.  v0:= temp @kind object;
  #L34fe84.  v1:= `@@n.a.a.a.t.a.b.a` @type ^`int`[] @kind object;
  #L34fe88.  v3:= (`n.a.a.a.t.a.c`) v3 @kind object;
  #L34fe8c.  v3:= v3.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34fe90.  call `d`(v1, v3, v0) @signature `Ln/a/a/c/a;.d:([I[I[I)V` @kind static;
  #L34fe96.  v3:= v2.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34fe9a.  call `e`(v0, v3, v0) @signature `Ln/a/a/a/t/a/b;.e:([I[I[I)V` @kind static;
  #L34fea0.  v3:= new `n.a.a.a.t.a.c`;
  #L34fea4.  call `<init>`(v3, v0) @signature `Ln/a/a/a/t/a/c;.<init>:([I)V` @kind direct;
  #L34feaa.  return v3 @kind object;
}
procedure `boolean` `equals`(`n.a.a.a.t.a.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ln/a/a/a/t/a/c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L34fcfc.  if v2 != v1 then goto L34fd04;
  #L34fd00.  v2:= 1I;
  #L34fd02.  return v2;
  #L34fd04.  v0:= instanceof @variable v2 @type ^`n.a.a.a.t.a.c` @kind boolean;
  #L34fd08.  if v0 != 0 then goto L34fd10;
  #L34fd0c.  v2:= 0I;
  #L34fd0e.  return v2;
  #L34fd10.  v2:= (`n.a.a.a.t.a.c`) v2 @kind object;
  #L34fd14.  v0:= v1.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34fd18.  v2:= v2.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34fd1c.  call temp:= `i`(v0, v2) @signature `Ln/a/a/c/d;.i:([I[I)Z` @kind static;
  #L34fd22.  v2:= temp;
  #L34fd24.  return v2;
}
procedure `int` `f`(`n.a.a.a.t.a.c` v1 @kind this) @signature `Ln/a/a/a/t/a/c;.f:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L34fda0.  v0:= `@@n.a.a.a.t.a.c.f` @type ^`java.math.BigInteger` @kind object;
  #L34fda4.  call temp:= `bitLength`(v0) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L34fdaa.  v0:= temp;
  #L34fdac.  return v0;
}
procedure `n.a.a.a.j` `g`(`n.a.a.a.t.a.c` v3 @kind this) @signature `Ln/a/a/a/t/a/c;.g:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L34febc.  call temp:= `f`() @signature `Ln/a/a/c/d;.f:()[I` @kind static;
  #L34fec2.  v0:= temp @kind object;
  #L34fec4.  v1:= `@@n.a.a.a.t.a.b.a` @type ^`int`[] @kind object;
  #L34fec8.  v2:= v3.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34fecc.  call `d`(v1, v2, v0) @signature `Ln/a/a/c/a;.d:([I[I[I)V` @kind static;
  #L34fed2.  v1:= new `n.a.a.a.t.a.c`;
  #L34fed6.  call `<init>`(v1, v0) @signature `Ln/a/a/a/t/a/c;.<init>:([I)V` @kind direct;
  #L34fedc.  return v1 @kind object;
}
procedure `boolean` `h`(`n.a.a.a.t.a.c` v1 @kind this) @signature `Ln/a/a/a/t/a/c;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L34fd38.  v0:= v1.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34fd3c.  call temp:= `n`(v0) @signature `Ln/a/a/c/d;.n:([I)Z` @kind static;
  #L34fd42.  v0:= temp;
  #L34fd44.  return v0;
}
procedure `int` `hashCode`(`n.a.a.a.t.a.c` v4 @kind this) @signature `Ln/a/a/a/t/a/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L34fdc0.  v0:= `@@n.a.a.a.t.a.c.f` @type ^`java.math.BigInteger` @kind object;
  #L34fdc4.  call temp:= `hashCode`(v0) @signature `Ljava/math/BigInteger;.hashCode:()I` @kind virtual;
  #L34fdca.  v0:= temp;
  #L34fdcc.  v1:= v4.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34fdd0.  v2:= 0I;
  #L34fdd2.  v3:= 8I;
  #L34fdd6.  call temp:= `k`(v1, v2, v3) @signature `Lorg/bouncycastle/util/a;.k:([III)I` @kind static;
  #L34fddc.  v1:= temp;
  #L34fdde.  v0:= v0 ^~ v1 @kind int;
  #L34fde0.  return v0;
}
procedure `boolean` `i`(`n.a.a.a.t.a.c` v1 @kind this) @signature `Ln/a/a/a/t/a/c;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L34fd58.  v0:= v1.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34fd5c.  call temp:= `o`(v0) @signature `Ln/a/a/c/d;.o:([I)Z` @kind static;
  #L34fd62.  v0:= temp;
  #L34fd64.  return v0;
}
procedure `n.a.a.a.j` `j`(`n.a.a.a.t.a.c` v2 @kind this, `n.a.a.a.j` v3 @kind object) @signature `Ln/a/a/a/t/a/c;.j:(Ln/a/a/a/j;)Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L34fef0.  call temp:= `f`() @signature `Ln/a/a/c/d;.f:()[I` @kind static;
  #L34fef6.  v0:= temp @kind object;
  #L34fef8.  v1:= v2.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34fefc.  v3:= (`n.a.a.a.t.a.c`) v3 @kind object;
  #L34ff00.  v3:= v3.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34ff04.  call `e`(v1, v3, v0) @signature `Ln/a/a/a/t/a/b;.e:([I[I[I)V` @kind static;
  #L34ff0a.  v3:= new `n.a.a.a.t.a.c`;
  #L34ff0e.  call `<init>`(v3, v0) @signature `Ln/a/a/a/t/a/c;.<init>:([I)V` @kind direct;
  #L34ff14.  return v3 @kind object;
}
procedure `n.a.a.a.j` `m`(`n.a.a.a.t.a.c` v2 @kind this) @signature `Ln/a/a/a/t/a/c;.m:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L34ff28.  call temp:= `f`() @signature `Ln/a/a/c/d;.f:()[I` @kind static;
  #L34ff2e.  v0:= temp @kind object;
  #L34ff30.  v1:= v2.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34ff34.  call `g`(v1, v0) @signature `Ln/a/a/a/t/a/b;.g:([I[I)V` @kind static;
  #L34ff3a.  v1:= new `n.a.a.a.t.a.c`;
  #L34ff3e.  call `<init>`(v1, v0) @signature `Ln/a/a/a/t/a/c;.<init>:([I)V` @kind direct;
  #L34ff44.  return v1 @kind object;
}
procedure `n.a.a.a.j` `n`(`n.a.a.a.t.a.c` v5 @kind this) @signature `Ln/a/a/a/t/a/c;.n:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L34ff58.  v0:= v5.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34ff5c.  call temp:= `o`(v0) @signature `Ln/a/a/c/d;.o:([I)Z` @kind static;
  #L34ff62.  v1:= temp;
  #L34ff64.  if v1 != 0 then goto L35007c;
  #L34ff68.  call temp:= `n`(v0) @signature `Ln/a/a/c/d;.n:([I)Z` @kind static;
  #L34ff6e.  v1:= temp;
  #L34ff70.  if v1 == 0 then goto L34ff78;
  #L34ff74.  goto L35007c;
  #L34ff78.  call temp:= `f`() @signature `Ln/a/a/c/d;.f:()[I` @kind static;
  #L34ff7e.  v1:= temp @kind object;
  #L34ff80.  call `j`(v0, v1) @signature `Ln/a/a/a/t/a/b;.j:([I[I)V` @kind static;
  #L34ff86.  call `e`(v1, v0, v1) @signature `Ln/a/a/a/t/a/b;.e:([I[I[I)V` @kind static;
  #L34ff8c.  call `j`(v1, v1) @signature `Ln/a/a/a/t/a/b;.j:([I[I)V` @kind static;
  #L34ff92.  call `e`(v1, v0, v1) @signature `Ln/a/a/a/t/a/b;.e:([I[I[I)V` @kind static;
  #L34ff98.  call temp:= `f`() @signature `Ln/a/a/c/d;.f:()[I` @kind static;
  #L34ff9e.  v2:= temp @kind object;
  #L34ffa0.  call `j`(v1, v2) @signature `Ln/a/a/a/t/a/b;.j:([I[I)V` @kind static;
  #L34ffa6.  call `e`(v2, v0, v2) @signature `Ln/a/a/a/t/a/b;.e:([I[I[I)V` @kind static;
  #L34ffac.  call temp:= `f`() @signature `Ln/a/a/c/d;.f:()[I` @kind static;
  #L34ffb2.  v3:= temp @kind object;
  #L34ffb4.  v4:= 3I;
  #L34ffb6.  call `k`(v2, v4, v3) @signature `Ln/a/a/a/t/a/b;.k:([II[I)V` @kind static;
  #L34ffbc.  call `e`(v3, v1, v3) @signature `Ln/a/a/a/t/a/b;.e:([I[I[I)V` @kind static;
  #L34ffc2.  v4:= 4I;
  #L34ffc4.  call `k`(v3, v4, v1) @signature `Ln/a/a/a/t/a/b;.k:([II[I)V` @kind static;
  #L34ffca.  call `e`(v1, v2, v1) @signature `Ln/a/a/a/t/a/b;.e:([I[I[I)V` @kind static;
  #L34ffd0.  call `k`(v1, v4, v3) @signature `Ln/a/a/a/t/a/b;.k:([II[I)V` @kind static;
  #L34ffd6.  call `e`(v3, v2, v3) @signature `Ln/a/a/a/t/a/b;.e:([I[I[I)V` @kind static;
  #L34ffdc.  v4:= 15I;
  #L34ffe0.  call `k`(v3, v4, v2) @signature `Ln/a/a/a/t/a/b;.k:([II[I)V` @kind static;
  #L34ffe6.  call `e`(v2, v3, v2) @signature `Ln/a/a/a/t/a/b;.e:([I[I[I)V` @kind static;
  #L34ffec.  v4:= 30I;
  #L34fff0.  call `k`(v2, v4, v3) @signature `Ln/a/a/a/t/a/b;.k:([II[I)V` @kind static;
  #L34fff6.  call `e`(v3, v2, v3) @signature `Ln/a/a/a/t/a/b;.e:([I[I[I)V` @kind static;
  #L34fffc.  v4:= 60I;
  #L350000.  call `k`(v3, v4, v2) @signature `Ln/a/a/a/t/a/b;.k:([II[I)V` @kind static;
  #L350006.  call `e`(v2, v3, v2) @signature `Ln/a/a/a/t/a/b;.e:([I[I[I)V` @kind static;
  #L35000c.  v4:= 11I;
  #L350010.  call `k`(v2, v4, v3) @signature `Ln/a/a/a/t/a/b;.k:([II[I)V` @kind static;
  #L350016.  call `e`(v3, v1, v3) @signature `Ln/a/a/a/t/a/b;.e:([I[I[I)V` @kind static;
  #L35001c.  v4:= 120I;
  #L350020.  call `k`(v3, v4, v1) @signature `Ln/a/a/a/t/a/b;.k:([II[I)V` @kind static;
  #L350026.  call `e`(v1, v2, v1) @signature `Ln/a/a/a/t/a/b;.e:([I[I[I)V` @kind static;
  #L35002c.  call `j`(v1, v1) @signature `Ln/a/a/a/t/a/b;.j:([I[I)V` @kind static;
  #L350032.  call `j`(v1, v2) @signature `Ln/a/a/a/t/a/b;.j:([I[I)V` @kind static;
  #L350038.  call temp:= `i`(v0, v2) @signature `Ln/a/a/c/d;.i:([I[I)Z` @kind static;
  #L35003e.  v3:= temp;
  #L350040.  if v3 == 0 then goto L350050;
  #L350044.  v0:= new `n.a.a.a.t.a.c`;
  #L350048.  call `<init>`(v0, v1) @signature `Ln/a/a/a/t/a/c;.<init>:([I)V` @kind direct;
  #L35004e.  return v0 @kind object;
  #L350050.  v3:= `@@n.a.a.a.t.a.c.g` @type ^`int`[] @kind object;
  #L350054.  call `e`(v1, v3, v1) @signature `Ln/a/a/a/t/a/b;.e:([I[I[I)V` @kind static;
  #L35005a.  call `j`(v1, v2) @signature `Ln/a/a/a/t/a/b;.j:([I[I)V` @kind static;
  #L350060.  call temp:= `i`(v0, v2) @signature `Ln/a/a/c/d;.i:([I[I)Z` @kind static;
  #L350066.  v0:= temp;
  #L350068.  if v0 == 0 then goto L350078;
  #L35006c.  v0:= new `n.a.a.a.t.a.c`;
  #L350070.  call `<init>`(v0, v1) @signature `Ln/a/a/a/t/a/c;.<init>:([I)V` @kind direct;
  #L350076.  return v0 @kind object;
  #L350078.  v0:= 0I;
  #L35007a.  return v0 @kind object;
  #L35007c.  return v5 @kind object;
}
procedure `n.a.a.a.j` `o`(`n.a.a.a.t.a.c` v2 @kind this) @signature `Ln/a/a/a/t/a/c;.o:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L350090.  call temp:= `f`() @signature `Ln/a/a/c/d;.f:()[I` @kind static;
  #L350096.  v0:= temp @kind object;
  #L350098.  v1:= v2.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L35009c.  call `j`(v1, v0) @signature `Ln/a/a/a/t/a/b;.j:([I[I)V` @kind static;
  #L3500a2.  v1:= new `n.a.a.a.t.a.c`;
  #L3500a6.  call `<init>`(v1, v0) @signature `Ln/a/a/a/t/a/c;.<init>:([I)V` @kind direct;
  #L3500ac.  return v1 @kind object;
}
procedure `n.a.a.a.j` `q`(`n.a.a.a.t.a.c` v2 @kind this, `n.a.a.a.j` v3 @kind object) @signature `Ln/a/a/a/t/a/c;.q:(Ln/a/a/a/j;)Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3500c0.  call temp:= `f`() @signature `Ln/a/a/c/d;.f:()[I` @kind static;
  #L3500c6.  v0:= temp @kind object;
  #L3500c8.  v1:= v2.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L3500cc.  v3:= (`n.a.a.a.t.a.c`) v3 @kind object;
  #L3500d0.  v3:= v3.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L3500d4.  call `n`(v1, v3, v0) @signature `Ln/a/a/a/t/a/b;.n:([I[I[I)V` @kind static;
  #L3500da.  v3:= new `n.a.a.a.t.a.c`;
  #L3500de.  call `<init>`(v3, v0) @signature `Ln/a/a/a/t/a/c;.<init>:([I)V` @kind direct;
  #L3500e4.  return v3 @kind object;
}
procedure `boolean` `r`(`n.a.a.a.t.a.c` v3 @kind this) @signature `Ln/a/a/a/t/a/c;.r:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L34fd78.  v0:= v3.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34fd7c.  v1:= 0I;
  #L34fd7e.  call temp:= `k`(v0, v1) @signature `Ln/a/a/c/d;.k:([II)I` @kind static;
  #L34fd84.  v0:= temp;
  #L34fd86.  v2:= 1I;
  #L34fd88.  if v0 != v2 then goto L34fd8e;
  #L34fd8c.  v1:= 1I;
  #L34fd8e.  return v1;
}
procedure `java.math.BigInteger` `s`(`n.a.a.a.t.a.c` v1 @kind this) @signature `Ln/a/a/a/t/a/c;.s:()Ljava/math/BigInteger;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L34fdf4.  v0:= v1.`n.a.a.a.t.a.c.h` @type ^`int`[] @kind object;
  #L34fdf8.  call temp:= `B`(v0) @signature `Ln/a/a/c/d;.B:([I)Ljava/math/BigInteger;` @kind static;
  #L34fdfe.  v0:= temp @kind object;
  #L34fe00.  return v0 @kind object;
}
