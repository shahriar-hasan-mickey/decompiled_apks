record `n.a.a.a.a` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `boolean` `a`(`n.a.a.a.f` v3 @kind object) @signature `Ln/a/a/a/a;.a:(Ln/a/a/a/f;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L348658.  call temp:= `o`(v3) @signature `Ln/a/a/a/f;.o:()Ln/a/a/b/a;` @kind virtual;
  #L34865e.  v3:= temp @kind object;
  #L348660.  call temp:= `b`(v3) @signature `Ln/a/a/b/a;.b:()I` @kind interface;
  #L348666.  v0:= temp;
  #L348668.  v1:= 1I;
  #L34866a.  if v0 <= v1 then goto L348690;
  #L34866e.  call temp:= `c`(v3) @signature `Ln/a/a/b/a;.c:()Ljava/math/BigInteger;` @kind interface;
  #L348674.  v0:= temp @kind object;
  #L348676.  v2:= `@@n.a.a.a.b.c` @type ^`java.math.BigInteger` @kind object;
  #L34867a.  call temp:= `equals`(v0, v2) @signature `Ljava/math/BigInteger;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L348680.  v0:= temp;
  #L348682.  if v0 == 0 then goto L348690;
  #L348686.  v3:= instanceof @variable v3 @type ^`n.a.a.b.f` @kind boolean;
  #L34868a.  if v3 == 0 then goto L348690;
  #L34868e.  goto L348692;
  #L348690.  v1:= 0I;
  #L348692.  return v1;
}
procedure `boolean` `b`(`n.a.a.a.f` v1 @kind object) @signature `Ln/a/a/a/a;.b:(Ln/a/a/a/f;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3486a4.  call temp:= `o`(v1) @signature `Ln/a/a/a/f;.o:()Ln/a/a/b/a;` @kind virtual;
  #L3486aa.  v1:= temp @kind object;
  #L3486ac.  call temp:= `b`(v1) @signature `Ln/a/a/b/a;.b:()I` @kind interface;
  #L3486b2.  v1:= temp;
  #L3486b4.  v0:= 1I;
  #L3486b6.  if v1 != v0 then goto L3486bc;
  #L3486ba.  goto L3486be;
  #L3486bc.  v0:= 0I;
  #L3486be.  return v0;
}
procedure `void` `c`(`n.a.a.a.j`[] v4 @kind object, `int` v5 , `int` v6 , `n.a.a.a.j` v7 @kind object) @signature `Ln/a/a/a/a;.c:([Ln/a/a/a/j;IILn/a/a/a/j;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L348754.  v0:= new `n.a.a.a.j`[v6];
  #L348758.  v1:= v4[v5] @kind object;
  #L34875c.  v2:= 0I;
  #L34875e.  v0[v2]:= v1 @kind object;
  #L348762.  v2:= v2 + 1;
  #L348766.  if v2 >= v6 then goto L348788;
  #L34876a.  v1:= v2 + -1;
  #L34876e.  v1:= v0[v1] @kind object;
  #L348772.  v3:= v5 + v2 @kind int;
  #L348776.  v3:= v4[v3] @kind object;
  #L34877a.  call temp:= `j`(v1, v3) @signature `Ln/a/a/a/j;.j:(Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L348780.  v1:= temp @kind object;
  #L348782.  v0[v2]:= v1 @kind object;
  #L348786.  goto L348762;
  #L348788.  v2:= v2 + -1;
  #L34878c.  if v7 == 0 then goto L3487a0;
  #L348790.  v6:= v0[v2] @kind object;
  #L348794.  call temp:= `j`(v6, v7) @signature `Ln/a/a/a/j;.j:(Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L34879a.  v6:= temp @kind object;
  #L34879c.  v0[v2]:= v6 @kind object;
  #L3487a0.  v6:= v0[v2] @kind object;
  #L3487a4.  call temp:= `g`(v6) @signature `Ln/a/a/a/j;.g:()Ln/a/a/a/j;` @kind virtual;
  #L3487aa.  v6:= temp @kind object;
  #L3487ac.  if v2 <= 0 then goto L3487d6;
  #L3487b0.  v7:= v2 + -1;
  #L3487b4.  v2:= v2 + v5 @kind int;
  #L3487b6.  v1:= v4[v2] @kind object;
  #L3487ba.  v3:= v0[v7] @kind object;
  #L3487be.  call temp:= `j`(v3, v6) @signature `Ln/a/a/a/j;.j:(Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L3487c4.  v3:= temp @kind object;
  #L3487c6.  v4[v2]:= v3 @kind object;
  #L3487ca.  call temp:= `j`(v6, v1) @signature `Ln/a/a/a/j;.j:(Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L3487d0.  v6:= temp @kind object;
  #L3487d2.  v2:= v7;
  #L3487d4.  goto L3487ac;
  #L3487d6.  v4[v5]:= v6 @kind object;
  #L3487da.  return @kind void;
}
procedure `n.a.a.a.p` `d`(`n.a.a.a.p` v5 @kind object, `java.math.BigInteger` v6 @kind object) @signature `Ln/a/a/a/a;.d:(Ln/a/a/a/p;Ljava/math/BigInteger;)Ln/a/a/a/p;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3486d0.  call temp:= `abs`(v6) @signature `Ljava/math/BigInteger;.abs:()Ljava/math/BigInteger;` @kind virtual;
  #L3486d6.  v0:= temp @kind object;
  #L3486d8.  call temp:= `i`(v5) @signature `Ln/a/a/a/p;.i:()Ln/a/a/a/f;` @kind virtual;
  #L3486de.  v1:= temp @kind object;
  #L3486e0.  call temp:= `q`(v1) @signature `Ln/a/a/a/f;.q:()Ln/a/a/a/p;` @kind virtual;
  #L3486e6.  v1:= temp @kind object;
  #L3486e8.  call temp:= `bitLength`(v0) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L3486ee.  v2:= temp;
  #L3486f0.  if v2 <= 0 then goto L34872c;
  #L3486f4.  v3:= 0I;
  #L3486f6.  call temp:= `testBit`(v0, v3) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L3486fc.  v3:= temp;
  #L3486fe.  if v3 == 0 then goto L348704;
  #L348702.  v1:= v5 @kind object;
  #L348704.  v3:= 1I;
  #L348706.  if v3 >= v2 then goto L34872c;
  #L34870a.  call temp:= `B`(v5) @signature `Ln/a/a/a/p;.B:()Ln/a/a/a/p;` @kind virtual;
  #L348710.  v5:= temp @kind object;
  #L348712.  call temp:= `testBit`(v0, v3) @signature `Ljava/math/BigInteger;.testBit:(I)Z` @kind virtual;
  #L348718.  v4:= temp;
  #L34871a.  if v4 == 0 then goto L348726;
  #L34871e.  call temp:= `a`(v1, v5) @signature `Ln/a/a/a/p;.a:(Ln/a/a/a/p;)Ln/a/a/a/p;` @kind virtual;
  #L348724.  v1:= temp @kind object;
  #L348726.  v3:= v3 + 1;
  #L34872a.  goto L348706;
  #L34872c.  call temp:= `signum`(v6) @signature `Ljava/math/BigInteger;.signum:()I` @kind virtual;
  #L348732.  v5:= temp;
  #L348734.  if v5 >= 0 then goto L348740;
  #L348738.  call temp:= `w`(v1) @signature `Ln/a/a/a/p;.w:()Ln/a/a/a/p;` @kind virtual;
  #L34873e.  v1:= temp @kind object;
  #L348740.  return v1 @kind object;
}
