record `n.a.a.a.m` @kind class @AccessFlag PUBLIC_ABSTRACT extends `n.a.a.a.p` @kind class {
}
procedure `void` `<init>`(`n.a.a.a.m` v0 @kind this, `n.a.a.a.f` v1 @kind object, `n.a.a.a.j` v2 @kind object, `n.a.a.a.j` v3 @kind object) @signature `Ln/a/a/a/m;.<init>:(Ln/a/a/a/f;Ln/a/a/a/j;Ln/a/a/a/j;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L34acb0.  call `<init>`(v0, v1, v2, v3) @signature `Ln/a/a/a/p;.<init>:(Ln/a/a/a/f;Ln/a/a/a/j;Ln/a/a/a/j;)V` @kind direct;
  #L34acb6.  return @kind void;
}
procedure `void` `<init>`(`n.a.a.a.m` v0 @kind this, `n.a.a.a.f` v1 @kind object, `n.a.a.a.j` v2 @kind object, `n.a.a.a.j` v3 @kind object, `n.a.a.a.j`[] v4 @kind object) @signature `Ln/a/a/a/m;.<init>:(Ln/a/a/a/f;Ln/a/a/a/j;Ln/a/a/a/j;[Ln/a/a/a/j;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L34acc8.  call `<init>`(v0, v1, v2, v3, v4) @signature `Ln/a/a/a/p;.<init>:(Ln/a/a/a/f;Ln/a/a/a/j;Ln/a/a/a/j;[Ln/a/a/a/j;)V` @kind direct;
  #L34acce.  return @kind void;
}
procedure `boolean` `A`(`n.a.a.a.m` v7 @kind this) @signature `Ln/a/a/a/m;.A:()Z` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L34ab9c.  v0:= v7.`n.a.a.a.p.c` @type ^`n.a.a.a.j` @kind object;
  #L34aba0.  v1:= v7.`n.a.a.a.p.d` @type ^`n.a.a.a.j` @kind object;
  #L34aba4.  v2:= v7.`n.a.a.a.p.b` @type ^`n.a.a.a.f` @kind object;
  #L34aba8.  call temp:= `k`(v2) @signature `Ln/a/a/a/f;.k:()Ln/a/a/a/j;` @kind virtual;
  #L34abae.  v2:= temp @kind object;
  #L34abb0.  v3:= v7.`n.a.a.a.p.b` @type ^`n.a.a.a.f` @kind object;
  #L34abb4.  call temp:= `l`(v3) @signature `Ln/a/a/a/f;.l:()Ln/a/a/a/j;` @kind virtual;
  #L34abba.  v3:= temp @kind object;
  #L34abbc.  call temp:= `o`(v1) @signature `Ln/a/a/a/j;.o:()Ln/a/a/a/j;` @kind virtual;
  #L34abc2.  v1:= temp @kind object;
  #L34abc4.  call temp:= `j`(v7) @signature `Ln/a/a/a/p;.j:()I` @kind virtual;
  #L34abca.  v4:= temp;
  #L34abcc.  if v4 == 0 then goto L34ac76;
  #L34abd0.  v5:= 1I;
  #L34abd2.  v6:= 0I;
  #L34abd4.  if v4 == v5 then goto L34ac3a;
  #L34abd8.  v5:= 2I;
  #L34abda.  if v4 == v5 then goto L34abfc;
  #L34abde.  v5:= 3I;
  #L34abe0.  if v4 == v5 then goto L34abfc;
  #L34abe4.  v5:= 4I;
  #L34abe6.  if v4 != v5 then goto L34abec;
  #L34abea.  goto L34abfc;
  #L34abec.  v0:= new `java.lang.IllegalStateException`;
  #L34abf0.  v1:= "unsupported coordinate system" @kind object;
  #L34abf4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L34abfa.  throw v0;
  #L34abfc.  v4:= v7.`n.a.a.a.p.e` @type ^`n.a.a.a.j`[] @kind object;
  #L34ac00.  v4:= v4[v6] @kind object;
  #L34ac04.  call temp:= `h`(v4) @signature `Ln/a/a/a/j;.h:()Z` @kind virtual;
  #L34ac0a.  v5:= temp;
  #L34ac0c.  if v5 != 0 then goto L34ac76;
  #L34ac10.  call temp:= `o`(v4) @signature `Ln/a/a/a/j;.o:()Ln/a/a/a/j;` @kind virtual;
  #L34ac16.  v4:= temp @kind object;
  #L34ac18.  call temp:= `o`(v4) @signature `Ln/a/a/a/j;.o:()Ln/a/a/a/j;` @kind virtual;
  #L34ac1e.  v5:= temp @kind object;
  #L34ac20.  call temp:= `j`(v4, v5) @signature `Ln/a/a/a/j;.j:(Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L34ac26.  v4:= temp @kind object;
  #L34ac28.  call temp:= `j`(v2, v5) @signature `Ln/a/a/a/j;.j:(Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L34ac2e.  v2:= temp @kind object;
  #L34ac30.  call temp:= `j`(v3, v4) @signature `Ln/a/a/a/j;.j:(Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L34ac36.  v3:= temp @kind object;
  #L34ac38.  goto L34ac76;
  #L34ac3a.  v4:= v7.`n.a.a.a.p.e` @type ^`n.a.a.a.j`[] @kind object;
  #L34ac3e.  v4:= v4[v6] @kind object;
  #L34ac42.  call temp:= `h`(v4) @signature `Ln/a/a/a/j;.h:()Z` @kind virtual;
  #L34ac48.  v5:= temp;
  #L34ac4a.  if v5 != 0 then goto L34ac76;
  #L34ac4e.  call temp:= `o`(v4) @signature `Ln/a/a/a/j;.o:()Ln/a/a/a/j;` @kind virtual;
  #L34ac54.  v5:= temp @kind object;
  #L34ac56.  call temp:= `j`(v4, v5) @signature `Ln/a/a/a/j;.j:(Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L34ac5c.  v6:= temp @kind object;
  #L34ac5e.  call temp:= `j`(v1, v4) @signature `Ln/a/a/a/j;.j:(Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L34ac64.  v1:= temp @kind object;
  #L34ac66.  call temp:= `j`(v2, v5) @signature `Ln/a/a/a/j;.j:(Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L34ac6c.  v2:= temp @kind object;
  #L34ac6e.  call temp:= `j`(v3, v6) @signature `Ln/a/a/a/j;.j:(Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L34ac74.  v3:= temp @kind object;
  #L34ac76.  call temp:= `o`(v0) @signature `Ln/a/a/a/j;.o:()Ln/a/a/a/j;` @kind virtual;
  #L34ac7c.  v4:= temp @kind object;
  #L34ac7e.  call temp:= `a`(v4, v2) @signature `Ln/a/a/a/j;.a:(Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L34ac84.  v2:= temp @kind object;
  #L34ac86.  call temp:= `j`(v2, v0) @signature `Ln/a/a/a/j;.j:(Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L34ac8c.  v0:= temp @kind object;
  #L34ac8e.  call temp:= `a`(v0, v3) @signature `Ln/a/a/a/j;.a:(Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L34ac94.  v0:= temp @kind object;
  #L34ac96.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L34ac9c.  v0:= temp;
  #L34ac9e.  return v0;
}
procedure `boolean` `h`(`n.a.a.a.m` v1 @kind this) @signature `Ln/a/a/a/m;.h:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L34ab78.  call temp:= `g`(v1) @signature `Ln/a/a/a/p;.g:()Ln/a/a/a/j;` @kind virtual;
  #L34ab7e.  v0:= temp @kind object;
  #L34ab80.  call temp:= `r`(v0) @signature `Ln/a/a/a/j;.r:()Z` @kind virtual;
  #L34ab86.  v0:= temp;
  #L34ab88.  return v0;
}
