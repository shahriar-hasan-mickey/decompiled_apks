record `n.a.a.a.h` @kind class @AccessFlag PUBLIC extends `n.a.a.a.j` @kind class {
  `int` `n.a.a.a.h.f` @AccessFlag PRIVATE;
  `int` `n.a.a.a.h.g` @AccessFlag PRIVATE;
  `int`[] `n.a.a.a.h.h` @AccessFlag PRIVATE;
  `n.a.a.a.r` `n.a.a.a.h.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`n.a.a.a.h` v4 @kind this, `int` v5 , `int` v6 , `int` v7 , `int` v8 , `java.math.BigInteger` v9 @kind object) @signature `Ln/a/a/a/h;.<init>:(IIIILjava/math/BigInteger;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L349c08.  call `<init>`(v4) @signature `Ln/a/a/a/j;.<init>:()V` @kind direct;
  #L349c0e.  v0:= 0I;
  #L349c10.  v1:= 1I;
  #L349c12.  v2:= 2I;
  #L349c14.  if v7 != 0 then goto L349c2e;
  #L349c18.  if v8 != 0 then goto L349c2e;
  #L349c1c.  v4.`n.a.a.a.h.f` @type ^`int` := v2;
  #L349c20.  v7:= new `int`[v1];
  #L349c24.  v7[v0]:= v6;
  #L349c28.  v4.`n.a.a.a.h.h` @type ^`int`[] := v7 @kind object;
  #L349c2c.  goto L349c50;
  #L349c2e.  if v7 >= v8 then goto L349c74;
  #L349c32.  if v7 <= 0 then goto L349c64;
  #L349c36.  v3:= 3I;
  #L349c38.  v4.`n.a.a.a.h.f` @type ^`int` := v3;
  #L349c3c.  v3:= new `int`[v3];
  #L349c40.  v3[v0]:= v6;
  #L349c44.  v3[v1]:= v7;
  #L349c48.  v3[v2]:= v8;
  #L349c4c.  v4.`n.a.a.a.h.h` @type ^`int`[] := v3 @kind object;
  #L349c50.  v4.`n.a.a.a.h.g` @type ^`int` := v5;
  #L349c54.  v5:= new `n.a.a.a.r`;
  #L349c58.  call `<init>`(v5, v9) @signature `Ln/a/a/a/r;.<init>:(Ljava/math/BigInteger;)V` @kind direct;
  #L349c5e.  v4.`n.a.a.a.h.i` @type ^`n.a.a.a.r` := v5 @kind object;
  #L349c62.  return @kind void;
  #L349c64.  v5:= new `java.lang.IllegalArgumentException`;
  #L349c68.  v6:= "k2 must be larger than 0" @kind object;
  #L349c6c.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L349c72.  throw v5;
  #L349c74.  v5:= new `java.lang.IllegalArgumentException`;
  #L349c78.  v6:= "k2 must be smaller than k3" @kind object;
  #L349c7c.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L349c82.  throw v5;
}
procedure `void` `<init>`(`n.a.a.a.h` v1 @kind this, `int` v2 , `int`[] v3 @kind object, `n.a.a.a.r` v4 @kind object) @signature `Ln/a/a/a/h;.<init>:(I[ILn/a/a/a/r;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L349c94.  call `<init>`(v1) @signature `Ln/a/a/a/j;.<init>:()V` @kind direct;
  #L349c9a.  v1.`n.a.a.a.h.g` @type ^`int` := v2;
  #L349c9e.  v2:= length @variable v3;
  #L349ca0.  v0:= 1I;
  #L349ca2.  if v2 != v0 then goto L349caa;
  #L349ca6.  v2:= 2I;
  #L349ca8.  goto L349cac;
  #L349caa.  v2:= 3I;
  #L349cac.  v1.`n.a.a.a.h.f` @type ^`int` := v2;
  #L349cb0.  v1.`n.a.a.a.h.h` @type ^`int`[] := v3 @kind object;
  #L349cb4.  v1.`n.a.a.a.h.i` @type ^`n.a.a.a.r` := v4 @kind object;
  #L349cb8.  return @kind void;
}
procedure `void` `t`(`n.a.a.a.j` v2 @kind object, `n.a.a.a.j` v3 @kind object) @signature `Ln/a/a/a/h;.t:(Ln/a/a/a/j;Ln/a/a/a/j;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L349ccc.  v0:= instanceof @variable v2 @type ^`n.a.a.a.h` @kind boolean;
  #L349cd0.  if v0 == 0 then goto L349d32;
  #L349cd4.  v0:= instanceof @variable v3 @type ^`n.a.a.a.h` @kind boolean;
  #L349cd8.  if v0 == 0 then goto L349d32;
  #L349cdc.  v2:= (`n.a.a.a.h`) v2 @kind object;
  #L349ce0.  v3:= (`n.a.a.a.h`) v3 @kind object;
  #L349ce4.  v0:= v2.`n.a.a.a.h.f` @type ^`int`;
  #L349ce8.  v1:= v3.`n.a.a.a.h.f` @type ^`int`;
  #L349cec.  if v0 != v1 then goto L349d22;
  #L349cf0.  v0:= v2.`n.a.a.a.h.g` @type ^`int`;
  #L349cf4.  v1:= v3.`n.a.a.a.h.g` @type ^`int`;
  #L349cf8.  if v0 != v1 then goto L349d12;
  #L349cfc.  v2:= v2.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349d00.  v3:= v3.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349d04.  call temp:= `c`(v2, v3) @signature `Lorg/bouncycastle/util/a;.c:([I[I)Z` @kind static;
  #L349d0a.  v2:= temp;
  #L349d0c.  if v2 == 0 then goto L349d12;
  #L349d10.  return @kind void;
  #L349d12.  v2:= new `java.lang.IllegalArgumentException`;
  #L349d16.  v3:= "Field elements are not elements of the same field F2m" @kind object;
  #L349d1a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L349d20.  throw v2;
  #L349d22.  v2:= new `java.lang.IllegalArgumentException`;
  #L349d26.  v3:= "One of the F2m field elements has incorrect representation" @kind object;
  #L349d2a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L349d30.  throw v2;
  #L349d32.  v2:= new `java.lang.IllegalArgumentException`;
  #L349d36.  v3:= "Field elements are not both instances of ECFieldElement.F2m" @kind object;
  #L349d3a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L349d40.  throw v2;
}
procedure `n.a.a.a.j` `a`(`n.a.a.a.h` v3 @kind this, `n.a.a.a.j` v4 @kind object) @signature `Ln/a/a/a/h;.a:(Ln/a/a/a/j;)Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L349928.  v0:= v3.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L34992c.  call temp:= `clone`(v0) @signature `Ln/a/a/a/r;.clone:()Ljava/lang/Object;` @kind virtual;
  #L349932.  v0:= temp @kind object;
  #L349934.  v0:= (`n.a.a.a.r`) v0 @kind object;
  #L349938.  v4:= (`n.a.a.a.h`) v4 @kind object;
  #L34993c.  v4:= v4.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349940.  v1:= 0I;
  #L349942.  call `f`(v0, v4, v1) @signature `Ln/a/a/a/r;.f:(Ln/a/a/a/r;I)V` @kind virtual;
  #L349948.  v4:= new `n.a.a.a.h`;
  #L34994c.  v1:= v3.`n.a.a.a.h.g` @type ^`int`;
  #L349950.  v2:= v3.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349954.  call `<init>`(v4, v1, v2, v0) @signature `Ln/a/a/a/h;.<init>:(I[ILn/a/a/a/r;)V` @kind direct;
  #L34995a.  return v4 @kind object;
}
procedure `n.a.a.a.j` `b`(`n.a.a.a.h` v4 @kind this) @signature `Ln/a/a/a/h;.b:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L34996c.  v0:= new `n.a.a.a.h`;
  #L349970.  v1:= v4.`n.a.a.a.h.g` @type ^`int`;
  #L349974.  v2:= v4.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349978.  v3:= v4.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L34997c.  call temp:= `d`(v3) @signature `Ln/a/a/a/r;.d:()Ln/a/a/a/r;` @kind virtual;
  #L349982.  v3:= temp @kind object;
  #L349984.  call `<init>`(v0, v1, v2, v3) @signature `Ln/a/a/a/h;.<init>:(I[ILn/a/a/a/r;)V` @kind direct;
  #L34998a.  return v0 @kind object;
}
procedure `int` `c`(`n.a.a.a.h` v1 @kind this) @signature `Ln/a/a/a/h;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L34989c.  v0:= v1.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L3498a0.  call temp:= `j`(v0) @signature `Ln/a/a/a/r;.j:()I` @kind virtual;
  #L3498a6.  v0:= temp;
  #L3498a8.  return v0;
}
procedure `n.a.a.a.j` `d`(`n.a.a.a.h` v0 @kind this, `n.a.a.a.j` v1 @kind object) @signature `Ln/a/a/a/h;.d:(Ln/a/a/a/j;)Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;

  #L34999c.  call temp:= `g`(v1) @signature `Ln/a/a/a/j;.g:()Ln/a/a/a/j;` @kind virtual;
  #L3499a2.  v1:= temp @kind object;
  #L3499a4.  call temp:= `j`(v0, v1) @signature `Ln/a/a/a/h;.j:(Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L3499aa.  v1:= temp @kind object;
  #L3499ac.  return v1 @kind object;
}
procedure `boolean` `equals`(`n.a.a.a.h` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ln/a/a/a/h;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3497cc.  v0:= 1I;
  #L3497ce.  if v5 != v4 then goto L3497d4;
  #L3497d2.  return v0;
  #L3497d4.  v1:= instanceof @variable v5 @type ^`n.a.a.a.h` @kind boolean;
  #L3497d8.  v2:= 0I;
  #L3497da.  if v1 != 0 then goto L3497e0;
  #L3497de.  return v2;
  #L3497e0.  v5:= (`n.a.a.a.h`) v5 @kind object;
  #L3497e4.  v1:= v4.`n.a.a.a.h.g` @type ^`int`;
  #L3497e8.  v3:= v5.`n.a.a.a.h.g` @type ^`int`;
  #L3497ec.  if v1 != v3 then goto L349826;
  #L3497f0.  v1:= v4.`n.a.a.a.h.f` @type ^`int`;
  #L3497f4.  v3:= v5.`n.a.a.a.h.f` @type ^`int`;
  #L3497f8.  if v1 != v3 then goto L349826;
  #L3497fc.  v1:= v4.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349800.  v3:= v5.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349804.  call temp:= `c`(v1, v3) @signature `Lorg/bouncycastle/util/a;.c:([I[I)Z` @kind static;
  #L34980a.  v1:= temp;
  #L34980c.  if v1 == 0 then goto L349826;
  #L349810.  v1:= v4.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349814.  v5:= v5.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349818.  call temp:= `equals`(v1, v5) @signature `Ln/a/a/a/r;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L34981e.  v5:= temp;
  #L349820.  if v5 == 0 then goto L349826;
  #L349824.  goto L349828;
  #L349826.  v0:= 0I;
  #L349828.  return v0;
}
procedure `int` `f`(`n.a.a.a.h` v1 @kind this) @signature `Ln/a/a/a/h;.f:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3498bc.  v0:= v1.`n.a.a.a.h.g` @type ^`int`;
  #L3498c0.  return v0;
}
procedure `n.a.a.a.j` `g`(`n.a.a.a.h` v4 @kind this) @signature `Ln/a/a/a/h;.g:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3499c0.  v0:= new `n.a.a.a.h`;
  #L3499c4.  v1:= v4.`n.a.a.a.h.g` @type ^`int`;
  #L3499c8.  v2:= v4.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L3499cc.  v3:= v4.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L3499d0.  call temp:= `t`(v3, v1, v2) @signature `Ln/a/a/a/r;.t:(I[I)Ln/a/a/a/r;` @kind virtual;
  #L3499d6.  v3:= temp @kind object;
  #L3499d8.  call `<init>`(v0, v1, v2, v3) @signature `Ln/a/a/a/h;.<init>:(I[ILn/a/a/a/r;)V` @kind direct;
  #L3499de.  return v0 @kind object;
}
procedure `boolean` `h`(`n.a.a.a.h` v1 @kind this) @signature `Ln/a/a/a/h;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L34983c.  v0:= v1.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349840.  call temp:= `r`(v0) @signature `Ln/a/a/a/r;.r:()Z` @kind virtual;
  #L349846.  v0:= temp;
  #L349848.  return v0;
}
procedure `int` `hashCode`(`n.a.a.a.h` v2 @kind this) @signature `Ln/a/a/a/h;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3498d4.  v0:= v2.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L3498d8.  call temp:= `hashCode`(v0) @signature `Ln/a/a/a/r;.hashCode:()I` @kind virtual;
  #L3498de.  v0:= temp;
  #L3498e0.  v1:= v2.`n.a.a.a.h.g` @type ^`int`;
  #L3498e4.  v0:= v0 ^~ v1 @kind int;
  #L3498e6.  v1:= v2.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L3498ea.  call temp:= `j`(v1) @signature `Lorg/bouncycastle/util/a;.j:([I)I` @kind static;
  #L3498f0.  v1:= temp;
  #L3498f2.  v0:= v0 ^~ v1 @kind int;
  #L3498f4.  return v0;
}
procedure `boolean` `i`(`n.a.a.a.h` v1 @kind this) @signature `Ln/a/a/a/h;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L34985c.  v0:= v1.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349860.  call temp:= `s`(v0) @signature `Ln/a/a/a/r;.s:()Z` @kind virtual;
  #L349866.  v0:= temp;
  #L349868.  return v0;
}
procedure `n.a.a.a.j` `j`(`n.a.a.a.h` v4 @kind this, `n.a.a.a.j` v5 @kind object) @signature `Ln/a/a/a/h;.j:(Ln/a/a/a/j;)Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3499f0.  v0:= new `n.a.a.a.h`;
  #L3499f4.  v1:= v4.`n.a.a.a.h.g` @type ^`int`;
  #L3499f8.  v2:= v4.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L3499fc.  v3:= v4.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349a00.  v5:= (`n.a.a.a.h`) v5 @kind object;
  #L349a04.  v5:= v5.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349a08.  call temp:= `u`(v3, v5, v1, v2) @signature `Ln/a/a/a/r;.u:(Ln/a/a/a/r;I[I)Ln/a/a/a/r;` @kind virtual;
  #L349a0e.  v5:= temp @kind object;
  #L349a10.  call `<init>`(v0, v1, v2, v5) @signature `Ln/a/a/a/h;.<init>:(I[ILn/a/a/a/r;)V` @kind direct;
  #L349a16.  return v0 @kind object;
}
procedure `n.a.a.a.j` `k`(`n.a.a.a.h` v0 @kind this, `n.a.a.a.j` v1 @kind object, `n.a.a.a.j` v2 @kind object, `n.a.a.a.j` v3 @kind object) @signature `Ln/a/a/a/h;.k:(Ln/a/a/a/j;Ln/a/a/a/j;Ln/a/a/a/j;)Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;

  #L349a28.  call temp:= `l`(v0, v1, v2, v3) @signature `Ln/a/a/a/h;.l:(Ln/a/a/a/j;Ln/a/a/a/j;Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L349a2e.  v1:= temp @kind object;
  #L349a30.  return v1 @kind object;
}
procedure `n.a.a.a.j` `l`(`n.a.a.a.h` v4 @kind this, `n.a.a.a.j` v5 @kind object, `n.a.a.a.j` v6 @kind object, `n.a.a.a.j` v7 @kind object) @signature `Ln/a/a/a/h;.l:(Ln/a/a/a/j;Ln/a/a/a/j;Ln/a/a/a/j;)Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L349a44.  v0:= v4.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349a48.  v5:= (`n.a.a.a.h`) v5 @kind object;
  #L349a4c.  v5:= v5.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349a50.  v6:= (`n.a.a.a.h`) v6 @kind object;
  #L349a54.  v6:= v6.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349a58.  v7:= (`n.a.a.a.h`) v7 @kind object;
  #L349a5c.  v7:= v7.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349a60.  v1:= v4.`n.a.a.a.h.g` @type ^`int`;
  #L349a64.  v2:= v4.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349a68.  call temp:= `x`(v0, v5, v1, v2) @signature `Ln/a/a/a/r;.x:(Ln/a/a/a/r;I[I)Ln/a/a/a/r;` @kind virtual;
  #L349a6e.  v1:= temp @kind object;
  #L349a70.  v2:= v4.`n.a.a.a.h.g` @type ^`int`;
  #L349a74.  v3:= v4.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349a78.  call temp:= `x`(v6, v7, v2, v3) @signature `Ln/a/a/a/r;.x:(Ln/a/a/a/r;I[I)Ln/a/a/a/r;` @kind virtual;
  #L349a7e.  v6:= temp @kind object;
  #L349a80.  if v1 == v0 then goto L349a88;
  #L349a84.  if v1 != v5 then goto L349a96;
  #L349a88.  call temp:= `clone`(v1) @signature `Ln/a/a/a/r;.clone:()Ljava/lang/Object;` @kind virtual;
  #L349a8e.  v5:= temp @kind object;
  #L349a90.  v1:= v5 @kind object;
  #L349a92.  v1:= (`n.a.a.a.r`) v1 @kind object;
  #L349a96.  v5:= 0I;
  #L349a98.  call `f`(v1, v6, v5) @signature `Ln/a/a/a/r;.f:(Ln/a/a/a/r;I)V` @kind virtual;
  #L349a9e.  v5:= v4.`n.a.a.a.h.g` @type ^`int`;
  #L349aa2.  v6:= v4.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349aa6.  call `z`(v1, v5, v6) @signature `Ln/a/a/a/r;.z:(I[I)V` @kind virtual;
  #L349aac.  v5:= new `n.a.a.a.h`;
  #L349ab0.  v6:= v4.`n.a.a.a.h.g` @type ^`int`;
  #L349ab4.  v7:= v4.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349ab8.  call `<init>`(v5, v6, v7, v1) @signature `Ln/a/a/a/h;.<init>:(I[ILn/a/a/a/r;)V` @kind direct;
  #L349abe.  return v5 @kind object;
}
procedure `n.a.a.a.j` `m`(`n.a.a.a.h` v0 @kind this) @signature `Ln/a/a/a/h;.m:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;

  #L349ad0.  return v0 @kind object;
}
procedure `n.a.a.a.j` `n`(`n.a.a.a.h` v4 @kind this) @signature `Ln/a/a/a/h;.n:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L349ae4.  v0:= v4.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349ae8.  call temp:= `r`(v0) @signature `Ln/a/a/a/r;.r:()Z` @kind virtual;
  #L349aee.  v1:= temp;
  #L349af0.  if v1 != 0 then goto L349b2a;
  #L349af4.  call temp:= `s`(v0) @signature `Ln/a/a/a/r;.s:()Z` @kind virtual;
  #L349afa.  v1:= temp;
  #L349afc.  if v1 == 0 then goto L349b02;
  #L349b00.  goto L349b2a;
  #L349b02.  v1:= v4.`n.a.a.a.h.g` @type ^`int`;
  #L349b06.  v2:= v1 + -1;
  #L349b0a.  v3:= v4.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349b0e.  call temp:= `w`(v0, v2, v1, v3) @signature `Ln/a/a/a/r;.w:(II[I)Ln/a/a/a/r;` @kind virtual;
  #L349b14.  v0:= temp @kind object;
  #L349b16.  v1:= new `n.a.a.a.h`;
  #L349b1a.  v2:= v4.`n.a.a.a.h.g` @type ^`int`;
  #L349b1e.  v3:= v4.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349b22.  call `<init>`(v1, v2, v3, v0) @signature `Ln/a/a/a/h;.<init>:(I[ILn/a/a/a/r;)V` @kind direct;
  #L349b28.  return v1 @kind object;
  #L349b2a.  return v4 @kind object;
}
procedure `n.a.a.a.j` `o`(`n.a.a.a.h` v4 @kind this) @signature `Ln/a/a/a/h;.o:()Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L349b3c.  v0:= new `n.a.a.a.h`;
  #L349b40.  v1:= v4.`n.a.a.a.h.g` @type ^`int`;
  #L349b44.  v2:= v4.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349b48.  v3:= v4.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349b4c.  call temp:= `v`(v3, v1, v2) @signature `Ln/a/a/a/r;.v:(I[I)Ln/a/a/a/r;` @kind virtual;
  #L349b52.  v3:= temp @kind object;
  #L349b54.  call `<init>`(v0, v1, v2, v3) @signature `Ln/a/a/a/h;.<init>:(I[ILn/a/a/a/r;)V` @kind direct;
  #L349b5a.  return v0 @kind object;
}
procedure `n.a.a.a.j` `p`(`n.a.a.a.h` v4 @kind this, `n.a.a.a.j` v5 @kind object, `n.a.a.a.j` v6 @kind object) @signature `Ln/a/a/a/h;.p:(Ln/a/a/a/j;Ln/a/a/a/j;)Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L349b6c.  v0:= v4.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349b70.  v5:= (`n.a.a.a.h`) v5 @kind object;
  #L349b74.  v5:= v5.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349b78.  v6:= (`n.a.a.a.h`) v6 @kind object;
  #L349b7c.  v6:= v6.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349b80.  v1:= v4.`n.a.a.a.h.g` @type ^`int`;
  #L349b84.  v2:= v4.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349b88.  call temp:= `J`(v0, v1, v2) @signature `Ln/a/a/a/r;.J:(I[I)Ln/a/a/a/r;` @kind virtual;
  #L349b8e.  v1:= temp @kind object;
  #L349b90.  v2:= v4.`n.a.a.a.h.g` @type ^`int`;
  #L349b94.  v3:= v4.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349b98.  call temp:= `x`(v5, v6, v2, v3) @signature `Ln/a/a/a/r;.x:(Ln/a/a/a/r;I[I)Ln/a/a/a/r;` @kind virtual;
  #L349b9e.  v5:= temp @kind object;
  #L349ba0.  if v1 != v0 then goto L349bb2;
  #L349ba4.  call temp:= `clone`(v1) @signature `Ln/a/a/a/r;.clone:()Ljava/lang/Object;` @kind virtual;
  #L349baa.  v6:= temp @kind object;
  #L349bac.  v1:= v6 @kind object;
  #L349bae.  v1:= (`n.a.a.a.r`) v1 @kind object;
  #L349bb2.  v6:= 0I;
  #L349bb4.  call `f`(v1, v5, v6) @signature `Ln/a/a/a/r;.f:(Ln/a/a/a/r;I)V` @kind virtual;
  #L349bba.  v5:= v4.`n.a.a.a.h.g` @type ^`int`;
  #L349bbe.  v6:= v4.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349bc2.  call `z`(v1, v5, v6) @signature `Ln/a/a/a/r;.z:(I[I)V` @kind virtual;
  #L349bc8.  v5:= new `n.a.a.a.h`;
  #L349bcc.  v6:= v4.`n.a.a.a.h.g` @type ^`int`;
  #L349bd0.  v0:= v4.`n.a.a.a.h.h` @type ^`int`[] @kind object;
  #L349bd4.  call `<init>`(v5, v6, v0, v1) @signature `Ln/a/a/a/h;.<init>:(I[ILn/a/a/a/r;)V` @kind direct;
  #L349bda.  return v5 @kind object;
}
procedure `n.a.a.a.j` `q`(`n.a.a.a.h` v0 @kind this, `n.a.a.a.j` v1 @kind object) @signature `Ln/a/a/a/h;.q:(Ln/a/a/a/j;)Ln/a/a/a/j;` @AccessFlag PUBLIC {
    temp;

  #L349bec.  call temp:= `a`(v0, v1) @signature `Ln/a/a/a/h;.a:(Ln/a/a/a/j;)Ln/a/a/a/j;` @kind virtual;
  #L349bf2.  v1:= temp @kind object;
  #L349bf4.  return v1 @kind object;
}
procedure `boolean` `r`(`n.a.a.a.h` v1 @kind this) @signature `Ln/a/a/a/h;.r:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L34987c.  v0:= v1.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L349880.  call temp:= `M`(v0) @signature `Ln/a/a/a/r;.M:()Z` @kind virtual;
  #L349886.  v0:= temp;
  #L349888.  return v0;
}
procedure `java.math.BigInteger` `s`(`n.a.a.a.h` v1 @kind this) @signature `Ln/a/a/a/h;.s:()Ljava/math/BigInteger;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L349908.  v0:= v1.`n.a.a.a.h.i` @type ^`n.a.a.a.r` @kind object;
  #L34990c.  call temp:= `N`(v0) @signature `Ln/a/a/a/r;.N:()Ljava/math/BigInteger;` @kind virtual;
  #L349912.  v0:= temp @kind object;
  #L349914.  return v0 @kind object;
}
