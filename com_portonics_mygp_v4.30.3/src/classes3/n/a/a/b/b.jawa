record `n.a.a.b.b` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `n.a.a.b.a` `@@n.a.a.b.b.a` @AccessFlag STATIC_FINAL;
global `n.a.a.b.a` `@@n.a.a.b.b.b` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln/a/a/b/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L35938c.  v0:= new `n.a.a.b.g`;
  #L359390.  v1:= 2L;
  #L359394.  call temp:= `valueOf`(v1) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L35939a.  v1:= temp @kind object;
  #L35939c.  call `<init>`(v0, v1) @signature `Ln/a/a/b/g;.<init>:(Ljava/math/BigInteger;)V` @kind direct;
  #L3593a2.  `@@n.a.a.b.b.a` @type ^`n.a.a.b.a` := v0 @kind object;
  #L3593a6.  v0:= new `n.a.a.b.g`;
  #L3593aa.  v1:= 3L;
  #L3593ae.  call temp:= `valueOf`(v1) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L3593b4.  v1:= temp @kind object;
  #L3593b6.  call `<init>`(v0, v1) @signature `Ln/a/a/b/g;.<init>:(Ljava/math/BigInteger;)V` @kind direct;
  #L3593bc.  `@@n.a.a.b.b.b` @type ^`n.a.a.b.a` := v0 @kind object;
  #L3593c0.  return @kind void;
}
procedure `n.a.a.b.f` `a`(`int`[] v3 @kind object) @signature `Ln/a/a/b/b;.a:([I)Ln/a/a/b/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L359314.  v0:= 0I;
  #L359316.  v0:= v3[v0];
  #L35931a.  if v0 != 0 then goto L359366;
  #L35931e.  v0:= 1I;
  #L359320.  v1:= length @variable v3;
  #L359322.  if v0 >= v1 then goto L35934c;
  #L359326.  v1:= v3[v0];
  #L35932a.  v2:= v0 + -1;
  #L35932e.  v2:= v3[v2];
  #L359332.  if v1 <= v2 then goto L35933c;
  #L359336.  v0:= v0 + 1;
  #L35933a.  goto L359320;
  #L35933c.  v3:= new `java.lang.IllegalArgumentException`;
  #L359340.  v0:= "Polynomial exponents must be montonically increasing" @kind object;
  #L359344.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35934a.  throw v3;
  #L35934c.  v0:= new `n.a.a.b.d`;
  #L359350.  v1:= `@@n.a.a.b.b.a` @type ^`n.a.a.b.a` @kind object;
  #L359354.  v2:= new `n.a.a.b.c`;
  #L359358.  call `<init>`(v2, v3) @signature `Ln/a/a/b/c;.<init>:([I)V` @kind direct;
  #L35935e.  call `<init>`(v0, v1, v2) @signature `Ln/a/a/b/d;.<init>:(Ln/a/a/b/a;Ln/a/a/b/e;)V` @kind direct;
  #L359364.  return v0 @kind object;
  #L359366.  v3:= new `java.lang.IllegalArgumentException`;
  #L35936a.  v0:= "Irreducible polynomials in GF(2) must have constant term" @kind object;
  #L35936e.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L359374.  goto L359378;
  #L359376.  throw v3;
  #L359378.  goto L359376;
}
procedure `n.a.a.b.a` `b`(`java.math.BigInteger` v3 @kind object) @signature `Ln/a/a/b/b;.b:(Ljava/math/BigInteger;)Ln/a/a/b/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3592a8.  call temp:= `bitLength`(v3) @signature `Ljava/math/BigInteger;.bitLength:()I` @kind virtual;
  #L3592ae.  v0:= temp;
  #L3592b0.  call temp:= `signum`(v3) @signature `Ljava/math/BigInteger;.signum:()I` @kind virtual;
  #L3592b6.  v1:= temp;
  #L3592b8.  if v1 <= 0 then goto L3592f2;
  #L3592bc.  v1:= 2I;
  #L3592be.  if v0 < v1 then goto L3592f2;
  #L3592c2.  v2:= 3I;
  #L3592c4.  if v0 >= v2 then goto L3592e6;
  #L3592c8.  call temp:= `intValue`(v3) @signature `Ljava/math/BigInteger;.intValue:()I` @kind virtual;
  #L3592ce.  v0:= temp;
  #L3592d0.  if v0 == v1 then goto L3592e0;
  #L3592d4.  if v0 == v2 then goto L3592da;
  #L3592d8.  goto L3592e6;
  #L3592da.  v3:= `@@n.a.a.b.b.b` @type ^`n.a.a.b.a` @kind object;
  #L3592de.  return v3 @kind object;
  #L3592e0.  v3:= `@@n.a.a.b.b.a` @type ^`n.a.a.b.a` @kind object;
  #L3592e4.  return v3 @kind object;
  #L3592e6.  v0:= new `n.a.a.b.g`;
  #L3592ea.  call `<init>`(v0, v3) @signature `Ln/a/a/b/g;.<init>:(Ljava/math/BigInteger;)V` @kind direct;
  #L3592f0.  return v0 @kind object;
  #L3592f2.  v3:= new `java.lang.IllegalArgumentException`;
  #L3592f6.  v0:= "'characteristic' must be >= 2" @kind object;
  #L3592fa.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L359300.  throw v3;
}
