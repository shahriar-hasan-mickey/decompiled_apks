record `dagger.internal.d` @kind class @AccessFlag PUBLIC_FINAL extends `dagger.internal.c` @kind interface, `j.a` @kind interface {
  `java.lang.Object` `dagger.internal.d.b` @AccessFlag PRIVATE_FINAL;
}
global `dagger.internal.d` `@@dagger.internal.d.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ldagger/internal/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L207fa0.  v0:= new `dagger.internal.d`;
  #L207fa4.  v1:= 0I;
  #L207fa6.  call `<init>`(v0, v1) @signature `Ldagger/internal/d;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L207fac.  `@@dagger.internal.d.a` @type ^`dagger.internal.d` := v0 @kind object;
  #L207fb0.  return @kind void;
}
procedure `void` `<init>`(`dagger.internal.d` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Ldagger/internal/d;.<init>:(Ljava/lang/Object;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L207fc4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L207fca.  v0.`dagger.internal.d.b` @type ^`java.lang.Object` := v1 @kind object;
  #L207fce.  return @kind void;
}
procedure `dagger.internal.c` `a`(`java.lang.Object` v2 @kind object) @signature `Ldagger/internal/d;.a:(Ljava/lang/Object;)Ldagger/internal/c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L207f60.  v0:= new `dagger.internal.d`;
  #L207f64.  v1:= "instance cannot be null" @kind object;
  #L207f68.  call temp:= `c`(v2, v1) @signature `Ldagger/internal/f;.c:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L207f6e.  v2:= temp @kind object;
  #L207f70.  call `<init>`(v0, v2) @signature `Ldagger/internal/d;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L207f76.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`dagger.internal.d` v1 @kind this) @signature `Ldagger/internal/d;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L207f88.  v0:= v1.`dagger.internal.d.b` @type ^`java.lang.Object` @kind object;
  #L207f8c.  return v0 @kind object;
}
