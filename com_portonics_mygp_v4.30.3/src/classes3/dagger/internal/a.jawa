record `dagger.internal.a` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `int` `a`(`int` v1 ) @signature `Ldagger/internal/a;.a:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L207d80.  v0:= 3I;
  #L207d82.  if v1 >= v0 then goto L207d8c;
  #L207d86.  v1:= v1 + 1;
  #L207d8a.  return v1;
  #L207d8c.  v0:= 2.0F;
  #L207d90.  if v1 >= v0 then goto L207da6;
  #L207d94.  v1:= (`float`) v1 @kind i2f;
  #L207d96.  v0:= 0.75F;
  #L207d9a.  v1:= v1 / v0 @kind float;
  #L207d9c.  v0:= 1.0F;
  #L207da0.  v1:= v1 + v0 @kind float;
  #L207da2.  v1:= (`int`) v1 @kind f2i;
  #L207da4.  return v1;
  #L207da6.  v1:= 2147483647I;
  #L207dac.  return v1;
}
procedure `java.util.LinkedHashMap` `b`(`int` v1 ) @signature `Ldagger/internal/a;.b:(I)Ljava/util/LinkedHashMap;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L207dc0.  v0:= new `java.util.LinkedHashMap`;
  #L207dc4.  call temp:= `a`(v1) @signature `Ldagger/internal/a;.a:(I)I` @kind static;
  #L207dca.  v1:= temp;
  #L207dcc.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(I)V` @kind direct;
  #L207dd2.  return v0 @kind object;
}
