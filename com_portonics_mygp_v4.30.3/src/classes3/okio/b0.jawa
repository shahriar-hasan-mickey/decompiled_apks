record `okio.b0` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.InputStream` @kind class {
  `okio.c0` `okio.b0.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.b0` v0 @kind this, `okio.c0` v1 @kind object) @signature `Lokio/b0;.<init>:(Lokio/c0;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L31e34c.  v0.`okio.b0.b` @type ^`okio.c0` := v1 @kind object;
  #L31e350.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L31e356.  return @kind void;
}
procedure `int` `available`(`okio.b0` v4 @kind this) @signature `Lokio/b0;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L31e1b0.  v0:= v4.`okio.b0.b` @type ^`okio.c0` @kind object;
  #L31e1b4.  v1:= v0.`okio.c0.c` @type ^`boolean` @kind boolean;
  #L31e1b8.  if v1 != 0 then goto L31e1dc;
  #L31e1bc.  v0:= v0.`okio.c0.b` @type ^`okio.k` @kind object;
  #L31e1c0.  call temp:= `f1`(v0) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L31e1c6.  v0:= temp @kind wide;
  #L31e1c8.  v2:= 2147483647I;
  #L31e1ce.  v2:= (`long`) v2 @kind i2l;
  #L31e1d0.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L31e1d6.  v0:= temp @kind wide;
  #L31e1d8.  v1:= (`int`) v0 @kind l2i;
  #L31e1da.  return v1;
  #L31e1dc.  v0:= new `java.io.IOException`;
  #L31e1e0.  v1:= "closed" @kind object;
  #L31e1e4.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L31e1ea.  throw v0;
}
procedure `void` `close`(`okio.b0` v1 @kind this) @signature `Lokio/b0;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31e368.  v0:= v1.`okio.b0.b` @type ^`okio.c0` @kind object;
  #L31e36c.  call `close`(v0) @signature `Lokio/c0;.close:()V` @kind virtual;
  #L31e372.  return @kind void;
}
procedure `int` `read`(`okio.b0` v5 @kind this) @signature `Lokio/b0;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L31e1fc.  v0:= v5.`okio.b0.b` @type ^`okio.c0` @kind object;
  #L31e200.  v1:= v0.`okio.c0.c` @type ^`boolean` @kind boolean;
  #L31e204.  if v1 != 0 then goto L31e260;
  #L31e208.  v0:= v0.`okio.c0.b` @type ^`okio.k` @kind object;
  #L31e20c.  call temp:= `f1`(v0) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L31e212.  v0:= temp @kind wide;
  #L31e214.  v2:= 0L;
  #L31e218.  v4:= lcmp(v0, v2);
  #L31e21c.  if v4 != 0 then goto L31e24a;
  #L31e220.  v0:= v5.`okio.b0.b` @type ^`okio.c0` @kind object;
  #L31e224.  v1:= v0.`okio.c0.d` @type ^`okio.i0` @kind object;
  #L31e228.  v0:= v0.`okio.c0.b` @type ^`okio.k` @kind object;
  #L31e22c.  v2:= 8192I;
  #L31e230.  v2:= (`long`) v2 @kind i2l;
  #L31e232.  call temp:= `read`(v1, v0, v2) @signature `Lokio/i0;.read:(Lokio/k;J)J` @kind interface;
  #L31e238.  v0:= temp @kind wide;
  #L31e23a.  v2:= -1L;
  #L31e23e.  v4:= lcmp(v0, v2);
  #L31e242.  if v4 != 0 then goto L31e24a;
  #L31e246.  v0:= -1I;
  #L31e248.  return v0;
  #L31e24a.  v0:= v5.`okio.b0.b` @type ^`okio.c0` @kind object;
  #L31e24e.  v0:= v0.`okio.c0.b` @type ^`okio.k` @kind object;
  #L31e252.  call temp:= `readByte`(v0) @signature `Lokio/k;.readByte:()B` @kind virtual;
  #L31e258.  v0:= temp;
  #L31e25a.  v0:= v0 ^& 255;
  #L31e25e.  return v0;
  #L31e260.  v0:= new `java.io.IOException`;
  #L31e264.  v1:= "closed" @kind object;
  #L31e268.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L31e26e.  throw v0;
}
procedure `int` `read`(`okio.b0` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/b0;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L31e280.  v0:= v7.`okio.b0.b` @type ^`okio.c0` @kind object;
  #L31e284.  v0:= v0.`okio.c0.c` @type ^`boolean` @kind boolean;
  #L31e288.  if v0 != 0 then goto L31e2f2;
  #L31e28c.  v0:= length @variable v8;
  #L31e28e.  v1:= (`long`) v0 @kind i2l;
  #L31e290.  v3:= (`long`) v9 @kind i2l;
  #L31e292.  v5:= (`long`) v10 @kind i2l;
  #L31e294.  call `b`(v1, v3, v5) @signature `Lokio/c;.b:(JJJ)V` @kind static;
  #L31e29a.  v0:= v7.`okio.b0.b` @type ^`okio.c0` @kind object;
  #L31e29e.  v0:= v0.`okio.c0.b` @type ^`okio.k` @kind object;
  #L31e2a2.  call temp:= `f1`(v0) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L31e2a8.  v0:= temp @kind wide;
  #L31e2aa.  v2:= 0L;
  #L31e2ae.  v4:= lcmp(v0, v2);
  #L31e2b2.  if v4 != 0 then goto L31e2e0;
  #L31e2b6.  v0:= v7.`okio.b0.b` @type ^`okio.c0` @kind object;
  #L31e2ba.  v1:= v0.`okio.c0.d` @type ^`okio.i0` @kind object;
  #L31e2be.  v0:= v0.`okio.c0.b` @type ^`okio.k` @kind object;
  #L31e2c2.  v2:= 8192I;
  #L31e2c6.  v2:= (`long`) v2 @kind i2l;
  #L31e2c8.  call temp:= `read`(v1, v0, v2) @signature `Lokio/i0;.read:(Lokio/k;J)J` @kind interface;
  #L31e2ce.  v0:= temp @kind wide;
  #L31e2d0.  v2:= -1L;
  #L31e2d4.  v4:= lcmp(v0, v2);
  #L31e2d8.  if v4 != 0 then goto L31e2e0;
  #L31e2dc.  v8:= -1I;
  #L31e2de.  return v8;
  #L31e2e0.  v0:= v7.`okio.b0.b` @type ^`okio.c0` @kind object;
  #L31e2e4.  v0:= v0.`okio.c0.b` @type ^`okio.k` @kind object;
  #L31e2e8.  call temp:= `read`(v0, v8, v9, v10) @signature `Lokio/k;.read:([BII)I` @kind virtual;
  #L31e2ee.  v8:= temp;
  #L31e2f0.  return v8;
  #L31e2f2.  v8:= new `java.io.IOException`;
  #L31e2f6.  v9:= "closed" @kind object;
  #L31e2fa.  call `<init>`(v8, v9) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L31e300.  throw v8;
}
procedure `java.lang.String` `toString`(`okio.b0` v2 @kind this) @signature `Lokio/b0;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L31e314.  v0:= new `java.lang.StringBuilder`;
  #L31e318.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L31e31e.  v1:= v2.`okio.b0.b` @type ^`okio.c0` @kind object;
  #L31e322.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31e328.  v1:= ".inputStream()" @kind object;
  #L31e32c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31e332.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L31e338.  v0:= temp @kind object;
  #L31e33a.  return v0 @kind object;
}
