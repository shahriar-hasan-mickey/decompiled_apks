record `okio.SegmentedByteString$a` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`okio.SegmentedByteString$a` v0 @kind this) @signature `Lokio/SegmentedByteString$a;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L31f49c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L31f4a2.  return @kind void;
}
procedure `void` `<init>`(`okio.SegmentedByteString$a` v0 @kind this, `kotlin.jvm.internal.DefaultConstructorMarker` v1 @kind object) @signature `Lokio/SegmentedByteString$a;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L31f4b4.  call `<init>`(v0) @signature `Lokio/SegmentedByteString$a;.<init>:()V` @kind direct;
  #L31f4ba.  return @kind void;
}
procedure `okio.ByteString` `a`(`okio.SegmentedByteString$a` v7 @kind this, `okio.k` v8 @kind object, `int` v9 ) @signature `Lokio/SegmentedByteString$a;.a:(Lokio/k;I)Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L31f3cc.  call temp:= `f1`(v8) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L31f3d2.  v0:= temp @kind wide;
  #L31f3d4.  v4:= (`long`) v9 @kind i2l;
  #L31f3d6.  v2:= 0L;
  #L31f3da.  call `b`(v0, v2, v4) @signature `Lokio/c;.b:(JJJ)V` @kind static;
  #L31f3e0.  v0:= v8.`okio.k.d` @type ^`okio.e0` @kind object;
  #L31f3e4.  v1:= 0I;
  #L31f3e6.  v2:= 0I;
  #L31f3e8.  v3:= 0I;
  #L31f3ea.  if v2 >= v9 then goto L31f422;
  #L31f3ee.  if v0 != 0 then goto L31f3f8;
  #L31f3f2.  call `throwNpe`() @signature `Lkotlin/jvm/internal/Intrinsics;.throwNpe:()V` @kind static;
  #L31f3f8.  v4:= v0.`okio.e0.d` @type ^`int`;
  #L31f3fc.  v5:= v0.`okio.e0.c` @type ^`int`;
  #L31f400.  if v4 == v5 then goto L31f412;
  #L31f404.  v4:= v4 - v5 @kind int;
  #L31f406.  v2:= v2 + v4 @kind int;
  #L31f408.  v3:= v3 + 1;
  #L31f40c.  v0:= v0.`okio.e0.g` @type ^`okio.e0` @kind object;
  #L31f410.  goto L31f3ea;
  #L31f412.  v8:= new `java.lang.AssertionError`;
  #L31f416.  v9:= "s.limit == s.pos" @kind object;
  #L31f41a.  call `<init>`(v8, v9) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L31f420.  throw v8;
  #L31f422.  v0:= new `byte`[][v3];
  #L31f426.  v2:= v3 * 2;
  #L31f42a.  v2:= new `int`[v2];
  #L31f42e.  v8:= v8.`okio.k.d` @type ^`okio.e0` @kind object;
  #L31f432.  v4:= 0I;
  #L31f434.  if v1 >= v9 then goto L31f47c;
  #L31f438.  if v8 != 0 then goto L31f442;
  #L31f43c.  call `throwNpe`() @signature `Lkotlin/jvm/internal/Intrinsics;.throwNpe:()V` @kind static;
  #L31f442.  v5:= v8.`okio.e0.b` @type ^`byte`[] @kind object;
  #L31f446.  v0[v4]:= v5 @kind object;
  #L31f44a.  v5:= v8.`okio.e0.d` @type ^`int`;
  #L31f44e.  v6:= v8.`okio.e0.c` @type ^`int`;
  #L31f452.  v5:= v5 - v6 @kind int;
  #L31f454.  v1:= v1 + v5 @kind int;
  #L31f456.  call temp:= `min`(v1, v9) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L31f45c.  v5:= temp;
  #L31f45e.  v2[v4]:= v5;
  #L31f462.  v5:= v4 + v3 @kind int;
  #L31f466.  v6:= v8.`okio.e0.c` @type ^`int`;
  #L31f46a.  v2[v5]:= v6;
  #L31f46e.  v5:= 1I;
  #L31f470.  v8.`okio.e0.e` @type ^`boolean` := v5 @kind boolean;
  #L31f474.  v4:= v4 + v5 @kind int;
  #L31f476.  v8:= v8.`okio.e0.g` @type ^`okio.e0` @kind object;
  #L31f47a.  goto L31f434;
  #L31f47c.  v8:= new `okio.SegmentedByteString`;
  #L31f480.  v9:= 0I;
  #L31f482.  call `<init>`(v8, v0, v2, v9) @signature `Lokio/SegmentedByteString;.<init>:([[B[ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L31f488.  return v8 @kind object;
}
