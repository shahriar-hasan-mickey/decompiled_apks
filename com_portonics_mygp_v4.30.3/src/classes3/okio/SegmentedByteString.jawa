record `okio.SegmentedByteString` @kind class @AccessFlag PUBLIC_FINAL extends `okio.ByteString` @kind class {
  `byte`[][] `okio.SegmentedByteString.d` @AccessFlag PRIVATE_FINAL_TRANSIENT;
  `int`[] `okio.SegmentedByteString.e` @AccessFlag PRIVATE_FINAL_TRANSIENT;
}
global `okio.SegmentedByteString$a` `@@okio.SegmentedByteString.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/SegmentedByteString;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L31fda4.  v0:= new `okio.SegmentedByteString$a`;
  #L31fda8.  v1:= 0I;
  #L31fdaa.  call `<init>`(v0, v1) @signature `Lokio/SegmentedByteString$a;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L31fdb0.  `@@okio.SegmentedByteString.Companion` @type ^`okio.SegmentedByteString$a` := v0 @kind object;
  #L31fdb4.  return @kind void;
}
procedure `void` `<init>`(`okio.SegmentedByteString` v1 @kind this, `byte`[][] v2 @kind object, `int`[] v3 @kind object) @signature `Lokio/SegmentedByteString;.<init>:([[B[I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L31fdc8.  v0:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L31fdcc.  call temp:= `getData$jvm`(v0) @signature `Lokio/ByteString;.getData$jvm:()[B` @kind virtual;
  #L31fdd2.  v0:= temp @kind object;
  #L31fdd4.  call `<init>`(v1, v0) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L31fdda.  v1.`okio.SegmentedByteString.d` @type ^`byte`[][] := v2 @kind object;
  #L31fdde.  v1.`okio.SegmentedByteString.e` @type ^`int`[] := v3 @kind object;
  #L31fde2.  return @kind void;
}
procedure `void` `<init>`(`okio.SegmentedByteString` v0 @kind this, `byte`[][] v1 @kind object, `int`[] v2 @kind object, `kotlin.jvm.internal.DefaultConstructorMarker` v3 @kind object) @signature `Lokio/SegmentedByteString;.<init>:([[B[ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L31fdf4.  call `<init>`(v0, v1, v2) @signature `Lokio/SegmentedByteString;.<init>:([[B[I)V` @kind direct;
  #L31fdfa.  return @kind void;
}
procedure `int` `a`(`okio.SegmentedByteString` v3 @kind this, `int` v4 ) @signature `Lokio/SegmentedByteString;.a:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L31f8ac.  v0:= v3.`okio.SegmentedByteString.e` @type ^`int`[] @kind object;
  #L31f8b0.  v1:= v3.`okio.SegmentedByteString.d` @type ^`byte`[][] @kind object;
  #L31f8b4.  v1:= length @variable v1;
  #L31f8b6.  v4:= v4 + 1;
  #L31f8ba.  v2:= 0I;
  #L31f8bc.  call temp:= `binarySearch`(v0, v2, v1, v4) @signature `Ljava/util/Arrays;.binarySearch:([IIII)I` @kind static;
  #L31f8c2.  v4:= temp;
  #L31f8c4.  if v4 < 0 then goto L31f8ca;
  #L31f8c8.  goto L31f8ce;
  #L31f8ca.  v4:= v4 ^~ -1;
  #L31f8ce.  return v4;
}
procedure `int` `access$segment`(`okio.SegmentedByteString` v0 @kind object, `int` v1 ) @signature `Lokio/SegmentedByteString;.access$segment:(Lokio/SegmentedByteString;I)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L31f79c.  call temp:= `a`(v0, v1) @signature `Lokio/SegmentedByteString;.a:(I)I` @kind direct;
  #L31f7a2.  v0:= temp;
  #L31f7a4.  return v0;
}
procedure `okio.ByteString` `b`(`okio.SegmentedByteString` v2 @kind this) @signature `Lokio/SegmentedByteString;.b:()Lokio/ByteString;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L31fd80.  v0:= new `okio.ByteString`;
  #L31fd84.  call temp:= `toByteArray`(v2) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @kind virtual;
  #L31fd8a.  v1:= temp @kind object;
  #L31fd8c.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L31fd92.  return v0 @kind object;
}
procedure `java.lang.Object` `writeReplace`(`okio.SegmentedByteString` v2 @kind this) @signature `Lokio/SegmentedByteString;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L31f8f8.  call temp:= `b`(v2) @signature `Lokio/SegmentedByteString;.b:()Lokio/ByteString;` @kind direct;
  #L31f8fe.  v0:= temp @kind object;
  #L31f900.  if v0 == 0 then goto L31f906;
  #L31f904.  return v0 @kind object;
  #L31f906.  v0:= new `kotlin.TypeCastException`;
  #L31f90a.  v1:= "null cannot be cast to non-null type java.lang.Object" @kind object;
  #L31f90e.  call `<init>`(v0, v1) @signature `Lkotlin/TypeCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L31f914.  throw v0;
}
procedure `java.nio.ByteBuffer` `asByteBuffer`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.asByteBuffer:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31f9dc.  call temp:= `toByteArray`(v1) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @kind virtual;
  #L31f9e2.  v0:= temp @kind object;
  #L31f9e4.  call temp:= `wrap`(v0) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L31f9ea.  v0:= temp @kind object;
  #L31f9ec.  call temp:= `asReadOnlyBuffer`(v0) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L31f9f2.  v0:= temp @kind object;
  #L31f9f4.  return v0 @kind object;
}
procedure `java.lang.String` `base64`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.base64:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31f928.  call temp:= `b`(v1) @signature `Lokio/SegmentedByteString;.b:()Lokio/ByteString;` @kind direct;
  #L31f92e.  v0:= temp @kind object;
  #L31f930.  call temp:= `base64`(v0) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L31f936.  v0:= temp @kind object;
  #L31f938.  return v0 @kind object;
}
procedure `java.lang.String` `base64Url`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.base64Url:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31f94c.  call temp:= `b`(v1) @signature `Lokio/SegmentedByteString;.b:()Lokio/ByteString;` @kind direct;
  #L31f952.  v0:= temp @kind object;
  #L31f954.  call temp:= `base64Url`(v0) @signature `Lokio/ByteString;.base64Url:()Ljava/lang/String;` @kind virtual;
  #L31f95a.  v0:= temp @kind object;
  #L31f95c.  return v0 @kind object;
}
procedure `okio.ByteString` `digest$jvm`(`okio.SegmentedByteString` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Lokio/SegmentedByteString;.digest$jvm:(Ljava/lang/String;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L31fa08.  call temp:= `getInstance`(v7) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L31fa0e.  v7:= temp @kind object;
  #L31fa10.  call temp:= `getSegments`(v6) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @kind virtual;
  #L31fa16.  v0:= temp @kind object;
  #L31fa18.  v0:= length @variable v0;
  #L31fa1a.  v1:= 0I;
  #L31fa1c.  v2:= 0I;
  #L31fa1e.  if v1 >= v0 then goto L31fa5c;
  #L31fa22.  call temp:= `getDirectory`(v6) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31fa28.  v3:= temp @kind object;
  #L31fa2a.  v4:= v0 + v1 @kind int;
  #L31fa2e.  v3:= v3[v4];
  #L31fa32.  call temp:= `getDirectory`(v6) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31fa38.  v4:= temp @kind object;
  #L31fa3a.  v4:= v4[v1];
  #L31fa3e.  call temp:= `getSegments`(v6) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @kind virtual;
  #L31fa44.  v5:= temp @kind object;
  #L31fa46.  v5:= v5[v1] @kind object;
  #L31fa4a.  v2:= v4 - v2 @kind int;
  #L31fa4e.  call `update`(v7, v5, v3, v2) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L31fa54.  v1:= v1 + 1;
  #L31fa58.  v2:= v4;
  #L31fa5a.  goto L31fa1e;
  #L31fa5c.  v0:= new `okio.ByteString`;
  #L31fa60.  call temp:= `digest`(v7) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L31fa66.  v7:= temp @kind object;
  #L31fa68.  v1:= "digest.digest()" @kind object;
  #L31fa6c.  call `checkExpressionValueIsNotNull`(v7, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L31fa72.  call `<init>`(v0, v7) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L31fa78.  return v0 @kind object;
}
procedure `boolean` `equals`(`okio.SegmentedByteString` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lokio/SegmentedByteString;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L31f4cc.  v0:= 1I;
  #L31f4ce.  v1:= 0I;
  #L31f4d0.  if v5 != v4 then goto L31f4d6;
  #L31f4d4.  goto L31f50e;
  #L31f4d6.  v2:= instanceof @variable v5 @type ^`okio.ByteString` @kind boolean;
  #L31f4da.  if v2 == 0 then goto L31f50c;
  #L31f4de.  v5:= (`okio.ByteString`) v5 @kind object;
  #L31f4e2.  call temp:= `size`(v5) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L31f4e8.  v2:= temp;
  #L31f4ea.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L31f4f0.  v3:= temp;
  #L31f4f2.  if v2 != v3 then goto L31f50c;
  #L31f4f6.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L31f4fc.  v2:= temp;
  #L31f4fe.  call temp:= `rangeEquals`(v4, v1, v5, v1, v2) @signature `Lokio/SegmentedByteString;.rangeEquals:(ILokio/ByteString;II)Z` @kind virtual;
  #L31f504.  v5:= temp;
  #L31f506.  if v5 == 0 then goto L31f50c;
  #L31f50a.  goto L31f50e;
  #L31f50c.  v0:= 0I;
  #L31f50e.  return v0;
}
procedure `int`[] `getDirectory`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L31f8e0.  v0:= v1.`okio.SegmentedByteString.e` @type ^`int`[] @kind object;
  #L31f8e4.  return v0 @kind object;
}
procedure `byte`[][] `getSegments`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L31f784.  v0:= v1.`okio.SegmentedByteString.d` @type ^`byte`[][] @kind object;
  #L31f788.  return v0 @kind object;
}
procedure `int` `getSize$jvm`(`okio.SegmentedByteString` v2 @kind this) @signature `Lokio/SegmentedByteString;.getSize$jvm:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L31f7b8.  v0:= v2.`okio.SegmentedByteString.e` @type ^`int`[] @kind object;
  #L31f7bc.  v1:= v2.`okio.SegmentedByteString.d` @type ^`byte`[][] @kind object;
  #L31f7c0.  v1:= length @variable v1;
  #L31f7c2.  v1:= v1 + -1;
  #L31f7c6.  v0:= v0[v1];
  #L31f7ca.  return v0;
}
procedure `int` `hashCode`(`okio.SegmentedByteString` v8 @kind this) @signature `Lokio/SegmentedByteString;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L31f7dc.  call temp:= `getHashCode$jvm`(v8) @signature `Lokio/ByteString;.getHashCode$jvm:()I` @kind virtual;
  #L31f7e2.  v0:= temp;
  #L31f7e4.  if v0 == 0 then goto L31f7ea;
  #L31f7e8.  return v0;
  #L31f7ea.  call temp:= `getSegments`(v8) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @kind virtual;
  #L31f7f0.  v0:= temp @kind object;
  #L31f7f2.  v0:= length @variable v0;
  #L31f7f4.  v1:= 0I;
  #L31f7f6.  v2:= 1I;
  #L31f7f8.  v2:= 0I;
  #L31f7fa.  v3:= 1I;
  #L31f7fc.  if v1 >= v0 then goto L31f84a;
  #L31f800.  call temp:= `getDirectory`(v8) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31f806.  v4:= temp @kind object;
  #L31f808.  v5:= v0 + v1 @kind int;
  #L31f80c.  v4:= v4[v5];
  #L31f810.  call temp:= `getDirectory`(v8) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31f816.  v5:= temp @kind object;
  #L31f818.  v5:= v5[v1];
  #L31f81c.  call temp:= `getSegments`(v8) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @kind virtual;
  #L31f822.  v6:= temp @kind object;
  #L31f824.  v6:= v6[v1] @kind object;
  #L31f828.  v2:= v5 - v2 @kind int;
  #L31f82c.  v2:= v2 + v4 @kind int;
  #L31f82e.  if v4 >= v2 then goto L31f842;
  #L31f832.  v3:= v3 * 31;
  #L31f836.  v7:= v6[v4] @kind byte;
  #L31f83a.  v3:= v3 + v7 @kind int;
  #L31f83c.  v4:= v4 + 1;
  #L31f840.  goto L31f82e;
  #L31f842.  v1:= v1 + 1;
  #L31f846.  v2:= v5;
  #L31f848.  goto L31f7fc;
  #L31f84a.  call `setHashCode$jvm`(v8, v3) @signature `Lokio/ByteString;.setHashCode$jvm:(I)V` @kind virtual;
  #L31f850.  return v3;
}
procedure `java.lang.String` `hex`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.hex:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31f970.  call temp:= `b`(v1) @signature `Lokio/SegmentedByteString;.b:()Lokio/ByteString;` @kind direct;
  #L31f976.  v0:= temp @kind object;
  #L31f978.  call temp:= `hex`(v0) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L31f97e.  v0:= temp @kind object;
  #L31f980.  return v0 @kind object;
}
procedure `okio.ByteString` `hmac$jvm`(`okio.SegmentedByteString` v5 @kind this, `java.lang.String` v6 @kind object, `okio.ByteString` v7 @kind object) @signature `Lokio/SegmentedByteString;.hmac$jvm:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L31fa8c.  call temp:= `getInstance`(v6) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L31fa92.  v0:= temp @kind object;
  #L31fa94.  v1:= new `javax.crypto.spec.SecretKeySpec`;
  #L31fa98.  call temp:= `toByteArray`(v7) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L31fa9e.  v7:= temp @kind object;
  #L31faa0.  call `<init>`(v1, v7, v6) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L31faa6.  call `init`(v0, v1) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L31faac.  call temp:= `getSegments`(v5) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @kind virtual;
  #L31fab2.  v6:= temp @kind object;
  #L31fab4.  v6:= length @variable v6;
  #L31fab6.  v7:= 0I;
  #L31fab8.  v1:= 0I;
  #L31faba.  if v7 >= v6 then goto L31faf8;
  #L31fabe.  call temp:= `getDirectory`(v5) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31fac4.  v2:= temp @kind object;
  #L31fac6.  v3:= v6 + v7 @kind int;
  #L31faca.  v2:= v2[v3];
  #L31face.  call temp:= `getDirectory`(v5) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31fad4.  v3:= temp @kind object;
  #L31fad6.  v3:= v3[v7];
  #L31fada.  call temp:= `getSegments`(v5) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @kind virtual;
  #L31fae0.  v4:= temp @kind object;
  #L31fae2.  v4:= v4[v7] @kind object;
  #L31fae6.  v1:= v3 - v1 @kind int;
  #L31faea.  call `update`(v0, v4, v2, v1) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L31faf0.  v7:= v7 + 1;
  #L31faf4.  v1:= v3;
  #L31faf6.  goto L31faba;
  #L31faf8.  v6:= new `okio.ByteString`;
  #L31fafc.  call temp:= `doFinal`(v0) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L31fb02.  v7:= temp @kind object;
  #L31fb04.  v0:= "mac.doFinal()" @kind object;
  #L31fb08.  call `checkExpressionValueIsNotNull`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L31fb0e.  call `<init>`(v6, v7) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L31fb14.  return v6 @kind object;
  #L31fb16.  v6:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L31fb18.  v7:= new `java.lang.IllegalArgumentException`;
  #L31fb1c.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L31fb22.  goto L31fb26;
  #L31fb24.  throw v7;
  #L31fb26.  goto L31fb24;
  catch `java.security.InvalidKeyException` @[L31fa8c..L31fb14] goto L31fb16;
}
procedure `int` `indexOf`(`okio.SegmentedByteString` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Lokio/SegmentedByteString;.indexOf:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31f864.  call temp:= `b`(v1) @signature `Lokio/SegmentedByteString;.b:()Lokio/ByteString;` @kind direct;
  #L31f86a.  v0:= temp @kind object;
  #L31f86c.  call temp:= `indexOf`(v0, v2, v3) @signature `Lokio/ByteString;.indexOf:([BI)I` @kind virtual;
  #L31f872.  v2:= temp;
  #L31f874.  return v2;
}
procedure `byte`[] `internalArray$jvm`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.internalArray$jvm:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31f6f8.  call temp:= `toByteArray`(v1) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @kind virtual;
  #L31f6fe.  v0:= temp @kind object;
  #L31f700.  return v0 @kind object;
}
procedure `byte` `internalGet$jvm`(`okio.SegmentedByteString` v7 @kind this, `int` v8 ) @signature `Lokio/SegmentedByteString;.internalGet$jvm:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L31f68c.  v0:= v7.`okio.SegmentedByteString.e` @type ^`int`[] @kind object;
  #L31f690.  v1:= v7.`okio.SegmentedByteString.d` @type ^`byte`[][] @kind object;
  #L31f694.  v1:= length @variable v1;
  #L31f696.  v1:= v1 + -1;
  #L31f69a.  v0:= v0[v1];
  #L31f69e.  v1:= (`long`) v0 @kind i2l;
  #L31f6a0.  v3:= (`long`) v8 @kind i2l;
  #L31f6a2.  v5:= 1L;
  #L31f6a6.  call `b`(v1, v3, v5) @signature `Lokio/c;.b:(JJJ)V` @kind static;
  #L31f6ac.  call temp:= `a`(v7, v8) @signature `Lokio/SegmentedByteString;.a:(I)I` @kind direct;
  #L31f6b2.  v0:= temp;
  #L31f6b4.  if v0 != 0 then goto L31f6bc;
  #L31f6b8.  v1:= 0I;
  #L31f6ba.  goto L31f6c8;
  #L31f6bc.  v1:= v7.`okio.SegmentedByteString.e` @type ^`int`[] @kind object;
  #L31f6c0.  v2:= v0 + -1;
  #L31f6c4.  v1:= v1[v2];
  #L31f6c8.  v2:= v7.`okio.SegmentedByteString.e` @type ^`int`[] @kind object;
  #L31f6cc.  v3:= v7.`okio.SegmentedByteString.d` @type ^`byte`[][] @kind object;
  #L31f6d0.  v4:= length @variable v3;
  #L31f6d2.  v4:= v4 + v0 @kind int;
  #L31f6d4.  v2:= v2[v4];
  #L31f6d8.  v0:= v3[v0] @kind object;
  #L31f6dc.  v8:= v8 - v1 @kind int;
  #L31f6de.  v8:= v8 + v2 @kind int;
  #L31f6e0.  v8:= v0[v8] @kind byte;
  #L31f6e4.  return v8;
}
procedure `int` `lastIndexOf`(`okio.SegmentedByteString` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Lokio/SegmentedByteString;.lastIndexOf:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31f888.  call temp:= `b`(v1) @signature `Lokio/SegmentedByteString;.b:()Lokio/ByteString;` @kind direct;
  #L31f88e.  v0:= temp @kind object;
  #L31f890.  call temp:= `lastIndexOf`(v0, v2, v3) @signature `Lokio/ByteString;.lastIndexOf:([BI)I` @kind virtual;
  #L31f896.  v2:= temp;
  #L31f898.  return v2;
}
procedure `boolean` `rangeEquals`(`okio.SegmentedByteString` v6 @kind this, `int` v7 , `okio.ByteString` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/SegmentedByteString;.rangeEquals:(ILokio/ByteString;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L31f5dc.  v0:= 0I;
  #L31f5de.  if v7 < 0 then goto L31f678;
  #L31f5e2.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L31f5e8.  v1:= temp;
  #L31f5ea.  v1:= v1 - v10 @kind int;
  #L31f5ec.  if v7 <= v1 then goto L31f5f2;
  #L31f5f0.  goto L31f678;
  #L31f5f2.  v10:= v10 + v7 @kind int;
  #L31f5f4.  call temp:= `access$segment`(v6, v7) @signature `Lokio/SegmentedByteString;.access$segment:(Lokio/SegmentedByteString;I)I` @kind static;
  #L31f5fa.  v1:= temp;
  #L31f5fc.  if v7 >= v10 then goto L31f674;
  #L31f600.  if v1 != 0 then goto L31f608;
  #L31f604.  v2:= 0I;
  #L31f606.  goto L31f618;
  #L31f608.  call temp:= `getDirectory`(v6) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31f60e.  v2:= temp @kind object;
  #L31f610.  v3:= v1 + -1;
  #L31f614.  v2:= v2[v3];
  #L31f618.  call temp:= `getDirectory`(v6) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31f61e.  v3:= temp @kind object;
  #L31f620.  v3:= v3[v1];
  #L31f624.  v3:= v3 - v2 @kind int;
  #L31f626.  call temp:= `getDirectory`(v6) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31f62c.  v4:= temp @kind object;
  #L31f62e.  call temp:= `getSegments`(v6) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @kind virtual;
  #L31f634.  v5:= temp @kind object;
  #L31f636.  v5:= length @variable v5;
  #L31f638.  v5:= v5 + v1 @kind int;
  #L31f63a.  v4:= v4[v5];
  #L31f63e.  v3:= v3 + v2 @kind int;
  #L31f640.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L31f646.  v3:= temp;
  #L31f648.  v3:= v3 - v7 @kind int;
  #L31f64a.  v2:= v7 - v2 @kind int;
  #L31f64e.  v4:= v4 + v2 @kind int;
  #L31f650.  call temp:= `getSegments`(v6) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @kind virtual;
  #L31f656.  v2:= temp @kind object;
  #L31f658.  v2:= v2[v1] @kind object;
  #L31f65c.  call temp:= `rangeEquals`(v8, v9, v2, v4, v3) @signature `Lokio/ByteString;.rangeEquals:(I[BII)Z` @kind virtual;
  #L31f662.  v2:= temp;
  #L31f664.  if v2 != 0 then goto L31f66a;
  #L31f668.  return v0;
  #L31f66a.  v9:= v9 + v3 @kind int;
  #L31f66c.  v7:= v7 + v3 @kind int;
  #L31f66e.  v1:= v1 + 1;
  #L31f672.  goto L31f5fc;
  #L31f674.  v7:= 1I;
  #L31f676.  return v7;
  #L31f678.  return v0;
}
procedure `boolean` `rangeEquals`(`okio.SegmentedByteString` v6 @kind this, `int` v7 , `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/SegmentedByteString;.rangeEquals:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L31f520.  v0:= 0I;
  #L31f522.  if v7 < 0 then goto L31f5c8;
  #L31f526.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L31f52c.  v1:= temp;
  #L31f52e.  v1:= v1 - v10 @kind int;
  #L31f530.  if v7 > v1 then goto L31f5c8;
  #L31f534.  if v9 < 0 then goto L31f5c8;
  #L31f538.  v1:= length @variable v8;
  #L31f53a.  v1:= v1 - v10 @kind int;
  #L31f53c.  if v9 <= v1 then goto L31f542;
  #L31f540.  goto L31f5c8;
  #L31f542.  v10:= v10 + v7 @kind int;
  #L31f544.  call temp:= `access$segment`(v6, v7) @signature `Lokio/SegmentedByteString;.access$segment:(Lokio/SegmentedByteString;I)I` @kind static;
  #L31f54a.  v1:= temp;
  #L31f54c.  if v7 >= v10 then goto L31f5c4;
  #L31f550.  if v1 != 0 then goto L31f558;
  #L31f554.  v2:= 0I;
  #L31f556.  goto L31f568;
  #L31f558.  call temp:= `getDirectory`(v6) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31f55e.  v2:= temp @kind object;
  #L31f560.  v3:= v1 + -1;
  #L31f564.  v2:= v2[v3];
  #L31f568.  call temp:= `getDirectory`(v6) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31f56e.  v3:= temp @kind object;
  #L31f570.  v3:= v3[v1];
  #L31f574.  v3:= v3 - v2 @kind int;
  #L31f576.  call temp:= `getDirectory`(v6) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31f57c.  v4:= temp @kind object;
  #L31f57e.  call temp:= `getSegments`(v6) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @kind virtual;
  #L31f584.  v5:= temp @kind object;
  #L31f586.  v5:= length @variable v5;
  #L31f588.  v5:= v5 + v1 @kind int;
  #L31f58a.  v4:= v4[v5];
  #L31f58e.  v3:= v3 + v2 @kind int;
  #L31f590.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L31f596.  v3:= temp;
  #L31f598.  v3:= v3 - v7 @kind int;
  #L31f59a.  v2:= v7 - v2 @kind int;
  #L31f59e.  v4:= v4 + v2 @kind int;
  #L31f5a0.  call temp:= `getSegments`(v6) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @kind virtual;
  #L31f5a6.  v2:= temp @kind object;
  #L31f5a8.  v2:= v2[v1] @kind object;
  #L31f5ac.  call temp:= `a`(v2, v4, v8, v9, v3) @signature `Lokio/c;.a:([BI[BII)Z` @kind static;
  #L31f5b2.  v2:= temp;
  #L31f5b4.  if v2 != 0 then goto L31f5ba;
  #L31f5b8.  return v0;
  #L31f5ba.  v9:= v9 + v3 @kind int;
  #L31f5bc.  v7:= v7 + v3 @kind int;
  #L31f5be.  v1:= v1 + 1;
  #L31f5c2.  goto L31f54c;
  #L31f5c4.  v7:= 1I;
  #L31f5c6.  return v7;
  #L31f5c8.  return v0;
}
procedure `java.lang.String` `string`(`okio.SegmentedByteString` v1 @kind this, `java.nio.charset.Charset` v2 @kind object) @signature `Lokio/SegmentedByteString;.string:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31f994.  call temp:= `b`(v1) @signature `Lokio/SegmentedByteString;.b:()Lokio/ByteString;` @kind direct;
  #L31f99a.  v0:= temp @kind object;
  #L31f99c.  call temp:= `string`(v0, v2) @signature `Lokio/ByteString;.string:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L31f9a2.  v2:= temp @kind object;
  #L31f9a4.  return v2 @kind object;
}
procedure `okio.ByteString` `substring`(`okio.SegmentedByteString` v11 @kind this, `int` v12 , `int` v13 ) @signature `Lokio/SegmentedByteString;.substring:(II)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L31fb48.  v0:= 0I;
  #L31fb4a.  v1:= 1I;
  #L31fb4c.  if v12 < 0 then goto L31fb54;
  #L31fb50.  v2:= 1I;
  #L31fb52.  goto L31fb56;
  #L31fb54.  v2:= 0I;
  #L31fb56.  if v2 == 0 then goto L31fce2;
  #L31fb5a.  call temp:= `size`(v11) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L31fb60.  v2:= temp;
  #L31fb62.  if v13 > v2 then goto L31fb6a;
  #L31fb66.  v2:= 1I;
  #L31fb68.  goto L31fb6c;
  #L31fb6a.  v2:= 0I;
  #L31fb6c.  v3:= "endIndex=" @kind object;
  #L31fb70.  if v2 == 0 then goto L31fc8e;
  #L31fb74.  v2:= v13 - v12 @kind int;
  #L31fb78.  if v2 < 0 then goto L31fb80;
  #L31fb7c.  v4:= 1I;
  #L31fb7e.  goto L31fb82;
  #L31fb80.  v4:= 0I;
  #L31fb82.  if v4 == 0 then goto L31fc4c;
  #L31fb86.  if v12 != 0 then goto L31fb98;
  #L31fb8a.  call temp:= `size`(v11) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L31fb90.  v3:= temp;
  #L31fb92.  if v13 != v3 then goto L31fb98;
  #L31fb96.  return v11 @kind object;
  #L31fb98.  if v12 != v13 then goto L31fba2;
  #L31fb9c.  v12:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L31fba0.  return v12 @kind object;
  #L31fba2.  call temp:= `a`(v11, v12) @signature `Lokio/SegmentedByteString;.a:(I)I` @kind direct;
  #L31fba8.  v3:= temp;
  #L31fbaa.  v13:= v13 - v1 @kind int;
  #L31fbac.  call temp:= `a`(v11, v13) @signature `Lokio/SegmentedByteString;.a:(I)I` @kind direct;
  #L31fbb2.  v13:= temp;
  #L31fbb4.  v4:= v11.`okio.SegmentedByteString.d` @type ^`byte`[][] @kind object;
  #L31fbb8.  v5:= v13 + 1;
  #L31fbbc.  call temp:= `copyOfRange`(v4, v3, v5) @signature `Ljava/util/Arrays;.copyOfRange:([Ljava/lang/Object;II)[Ljava/lang/Object;` @kind static;
  #L31fbc2.  v4:= temp @kind object;
  #L31fbc4.  v5:= "java.util.Arrays.copyOfR…this, fromIndex, toIndex)" @kind object;
  #L31fbc8.  call `checkExpressionValueIsNotNull`(v4, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkExpressionValueIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L31fbce.  v4:= (`byte`[][]) v4 @kind object;
  #L31fbd2.  v5:= length @variable v4;
  #L31fbd4.  v5:= v5 * 2;
  #L31fbd8.  v5:= new `int`[v5];
  #L31fbdc.  if v3 > v13 then goto L31fc22;
  #L31fbe0.  v7:= v3;
  #L31fbe2.  v6:= 0I;
  #L31fbe4.  v8:= v11.`okio.SegmentedByteString.e` @type ^`int`[] @kind object;
  #L31fbe8.  v8:= v8[v7];
  #L31fbec.  v8:= v8 - v12 @kind int;
  #L31fbee.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L31fbf4.  v8:= temp;
  #L31fbf6.  v5[v6]:= v8;
  #L31fbfa.  v8:= v6 + 1;
  #L31fbfe.  v9:= length @variable v4;
  #L31fc00.  v6:= v6 + v9 @kind int;
  #L31fc02.  v9:= v11.`okio.SegmentedByteString.e` @type ^`int`[] @kind object;
  #L31fc06.  v10:= v11.`okio.SegmentedByteString.d` @type ^`byte`[][] @kind object;
  #L31fc0a.  v10:= length @variable v10;
  #L31fc0c.  v10:= v10 + v7 @kind int;
  #L31fc0e.  v9:= v9[v10];
  #L31fc12.  v5[v6]:= v9;
  #L31fc16.  if v7 == v13 then goto L31fc22;
  #L31fc1a.  v7:= v7 + 1;
  #L31fc1e.  v6:= v8;
  #L31fc20.  goto L31fbe4;
  #L31fc22.  if v3 != 0 then goto L31fc28;
  #L31fc26.  goto L31fc32;
  #L31fc28.  v13:= v11.`okio.SegmentedByteString.e` @type ^`int`[] @kind object;
  #L31fc2c.  v3:= v3 - v1 @kind int;
  #L31fc2e.  v0:= v13[v3];
  #L31fc32.  v13:= length @variable v4;
  #L31fc34.  v1:= v5[v13];
  #L31fc38.  v12:= v12 - v0 @kind int;
  #L31fc3a.  v1:= v1 + v12 @kind int;
  #L31fc3c.  v5[v13]:= v1;
  #L31fc40.  v12:= new `okio.SegmentedByteString`;
  #L31fc44.  call `<init>`(v12, v4, v5) @signature `Lokio/SegmentedByteString;.<init>:([[B[I)V` @kind direct;
  #L31fc4a.  return v12 @kind object;
  #L31fc4c.  v0:= new `java.lang.StringBuilder`;
  #L31fc50.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L31fc56.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31fc5c.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L31fc62.  v13:= " < beginIndex=" @kind object;
  #L31fc66.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31fc6c.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L31fc72.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L31fc78.  v12:= temp @kind object;
  #L31fc7a.  v13:= new `java.lang.IllegalArgumentException`;
  #L31fc7e.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L31fc84.  v12:= temp @kind object;
  #L31fc86.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L31fc8c.  throw v13;
  #L31fc8e.  v12:= new `java.lang.StringBuilder`;
  #L31fc92.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L31fc98.  call temp:= `append`(v12, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31fc9e.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L31fca4.  v13:= " > length(" @kind object;
  #L31fca8.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31fcae.  call temp:= `size`(v11) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L31fcb4.  v13:= temp;
  #L31fcb6.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L31fcbc.  v13:= 41I;
  #L31fcc0.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L31fcc6.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L31fccc.  v12:= temp @kind object;
  #L31fcce.  v13:= new `java.lang.IllegalArgumentException`;
  #L31fcd2.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L31fcd8.  v12:= temp @kind object;
  #L31fcda.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L31fce0.  throw v13;
  #L31fce2.  v13:= new `java.lang.StringBuilder`;
  #L31fce6.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L31fcec.  v0:= "beginIndex=" @kind object;
  #L31fcf0.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31fcf6.  call temp:= `append`(v13, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L31fcfc.  v12:= " < 0" @kind object;
  #L31fd00.  call temp:= `append`(v13, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31fd06.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L31fd0c.  v12:= temp @kind object;
  #L31fd0e.  v13:= new `java.lang.IllegalArgumentException`;
  #L31fd12.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L31fd18.  v12:= temp @kind object;
  #L31fd1a.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L31fd20.  goto L31fd24;
  #L31fd22.  throw v13;
  #L31fd24.  goto L31fd22;
}
procedure `okio.ByteString` `toAsciiLowercase`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.toAsciiLowercase:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31fd38.  call temp:= `b`(v1) @signature `Lokio/SegmentedByteString;.b:()Lokio/ByteString;` @kind direct;
  #L31fd3e.  v0:= temp @kind object;
  #L31fd40.  call temp:= `toAsciiLowercase`(v0) @signature `Lokio/ByteString;.toAsciiLowercase:()Lokio/ByteString;` @kind virtual;
  #L31fd46.  v0:= temp @kind object;
  #L31fd48.  return v0 @kind object;
}
procedure `okio.ByteString` `toAsciiUppercase`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.toAsciiUppercase:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31fd5c.  call temp:= `b`(v1) @signature `Lokio/SegmentedByteString;.b:()Lokio/ByteString;` @kind direct;
  #L31fd62.  v0:= temp @kind object;
  #L31fd64.  call temp:= `toAsciiUppercase`(v0) @signature `Lokio/ByteString;.toAsciiUppercase:()Lokio/ByteString;` @kind virtual;
  #L31fd6a.  v0:= temp @kind object;
  #L31fd6c.  return v0 @kind object;
}
procedure `byte`[] `toByteArray`(`okio.SegmentedByteString` v8 @kind this) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L31f714.  call temp:= `size`(v8) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L31f71a.  v0:= temp;
  #L31f71c.  v0:= new `byte`[v0];
  #L31f720.  call temp:= `getSegments`(v8) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @kind virtual;
  #L31f726.  v1:= temp @kind object;
  #L31f728.  v1:= length @variable v1;
  #L31f72a.  v2:= 0I;
  #L31f72c.  v3:= 0I;
  #L31f72e.  v4:= 0I;
  #L31f730.  if v2 >= v1 then goto L31f770;
  #L31f734.  call temp:= `getDirectory`(v8) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31f73a.  v5:= temp @kind object;
  #L31f73c.  v6:= v1 + v2 @kind int;
  #L31f740.  v5:= v5[v6];
  #L31f744.  call temp:= `getDirectory`(v8) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31f74a.  v6:= temp @kind object;
  #L31f74c.  v6:= v6[v2];
  #L31f750.  call temp:= `getSegments`(v8) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @kind virtual;
  #L31f756.  v7:= temp @kind object;
  #L31f758.  v7:= v7[v2] @kind object;
  #L31f75c.  v3:= v6 - v3 @kind int;
  #L31f760.  call `a`(v7, v5, v0, v4, v3) @signature `Lokio/b;.a:([BI[BII)V` @kind static;
  #L31f766.  v4:= v4 + v3 @kind int;
  #L31f768.  v2:= v2 + 1;
  #L31f76c.  v3:= v6;
  #L31f76e.  goto L31f730;
  #L31f770.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31f9b8.  call temp:= `b`(v1) @signature `Lokio/SegmentedByteString;.b:()Lokio/ByteString;` @kind direct;
  #L31f9be.  v0:= temp @kind object;
  #L31f9c0.  call temp:= `toString`(v0) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @kind virtual;
  #L31f9c6.  v0:= temp @kind object;
  #L31f9c8.  return v0 @kind object;
}
procedure `void` `write`(`okio.SegmentedByteString` v6 @kind this, `java.io.OutputStream` v7 @kind object) @signature `Lokio/SegmentedByteString;.write:(Ljava/io/OutputStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L31fec8.  call temp:= `getSegments`(v6) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @kind virtual;
  #L31fece.  v0:= temp @kind object;
  #L31fed0.  v0:= length @variable v0;
  #L31fed2.  v1:= 0I;
  #L31fed4.  v2:= 0I;
  #L31fed6.  if v1 >= v0 then goto L31ff14;
  #L31feda.  call temp:= `getDirectory`(v6) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31fee0.  v3:= temp @kind object;
  #L31fee2.  v4:= v0 + v1 @kind int;
  #L31fee6.  v3:= v3[v4];
  #L31feea.  call temp:= `getDirectory`(v6) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31fef0.  v4:= temp @kind object;
  #L31fef2.  v4:= v4[v1];
  #L31fef6.  call temp:= `getSegments`(v6) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @kind virtual;
  #L31fefc.  v5:= temp @kind object;
  #L31fefe.  v5:= v5[v1] @kind object;
  #L31ff02.  v2:= v4 - v2 @kind int;
  #L31ff06.  call `write`(v7, v5, v3, v2) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L31ff0c.  v1:= v1 + 1;
  #L31ff10.  v2:= v4;
  #L31ff12.  goto L31fed6;
  #L31ff14.  return @kind void;
}
procedure `void` `write$jvm`(`okio.SegmentedByteString` v11 @kind this, `okio.k` v12 @kind object) @signature `Lokio/SegmentedByteString;.write$jvm:(Lokio/k;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L31fe0c.  call temp:= `getSegments`(v11) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @kind virtual;
  #L31fe12.  v0:= temp @kind object;
  #L31fe14.  v0:= length @variable v0;
  #L31fe16.  v1:= 0I;
  #L31fe18.  v2:= 0I;
  #L31fe1a.  if v1 >= v0 then goto L31fe9a;
  #L31fe1e.  call temp:= `getDirectory`(v11) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31fe24.  v3:= temp @kind object;
  #L31fe26.  v4:= v0 + v1 @kind int;
  #L31fe2a.  v7:= v3[v4];
  #L31fe2e.  call temp:= `getDirectory`(v11) @signature `Lokio/SegmentedByteString;.getDirectory:()[I` @kind virtual;
  #L31fe34.  v3:= temp @kind object;
  #L31fe36.  v3:= v3[v1];
  #L31fe3a.  call temp:= `getSegments`(v11) @signature `Lokio/SegmentedByteString;.getSegments:()[[B` @kind virtual;
  #L31fe40.  v4:= temp @kind object;
  #L31fe42.  v6:= v4[v1] @kind object;
  #L31fe46.  v2:= v3 - v2 @kind int;
  #L31fe4a.  v4:= new `okio.e0`;
  #L31fe4e.  v8:= v7 + v2 @kind int;
  #L31fe52.  v9:= 1I;
  #L31fe54.  v10:= 0I;
  #L31fe56.  v5:= v4 @kind object;
  #L31fe58.  call `<init>`(v5, v6, v7, v8, v9, v10) @signature `Lokio/e0;.<init>:([BIIZZ)V` @kind direct;
  #L31fe5e.  v2:= v12.`okio.k.d` @type ^`okio.e0` @kind object;
  #L31fe62.  if v2 != 0 then goto L31fe74;
  #L31fe66.  v4.`okio.e0.h` @type ^`okio.e0` := v4 @kind object;
  #L31fe6a.  v4.`okio.e0.g` @type ^`okio.e0` := v4 @kind object;
  #L31fe6e.  v12.`okio.k.d` @type ^`okio.e0` := v4 @kind object;
  #L31fe72.  goto L31fe92;
  #L31fe74.  if v2 != 0 then goto L31fe7e;
  #L31fe78.  call `throwNpe`() @signature `Lkotlin/jvm/internal/Intrinsics;.throwNpe:()V` @kind static;
  #L31fe7e.  v2:= v2.`okio.e0.h` @type ^`okio.e0` @kind object;
  #L31fe82.  if v2 != 0 then goto L31fe8c;
  #L31fe86.  call `throwNpe`() @signature `Lkotlin/jvm/internal/Intrinsics;.throwNpe:()V` @kind static;
  #L31fe8c.  call temp:= `c`(v2, v4) @signature `Lokio/e0;.c:(Lokio/e0;)Lokio/e0;` @kind virtual;
  #L31fe92.  v1:= v1 + 1;
  #L31fe96.  v2:= v3;
  #L31fe98.  goto L31fe1a;
  #L31fe9a.  call temp:= `f1`(v12) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L31fea0.  v0:= temp @kind wide;
  #L31fea2.  call temp:= `size`(v11) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L31fea8.  v2:= temp;
  #L31feaa.  v2:= (`long`) v2 @kind i2l;
  #L31feac.  v0:= v0 + v2 @kind long;
  #L31feae.  call `e1`(v12, v0) @signature `Lokio/k;.e1:(J)V` @kind virtual;
  #L31feb4.  return @kind void;
}
