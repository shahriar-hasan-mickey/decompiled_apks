record `okio.u` @kind class @AccessFlag FINAL extends `okio.i0` @kind interface {
  `java.io.InputStream` `okio.u.b` @AccessFlag PRIVATE_FINAL;
  `okio.l0` `okio.u.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.u` v0 @kind this, `java.io.InputStream` v1 @kind object, `okio.l0` v2 @kind object) @signature `Lokio/u;.<init>:(Ljava/io/InputStream;Lokio/l0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L31cce8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L31ccee.  v0.`okio.u.b` @type ^`java.io.InputStream` := v1 @kind object;
  #L31ccf2.  v0.`okio.u.c` @type ^`okio.l0` := v2 @kind object;
  #L31ccf6.  return @kind void;
}
procedure `void` `close`(`okio.u` v1 @kind this) @signature `Lokio/u;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31cd08.  v0:= v1.`okio.u.b` @type ^`java.io.InputStream` @kind object;
  #L31cd0c.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L31cd12.  return @kind void;
}
procedure `long` `read`(`okio.u` v4 @kind this, `okio.k` v5 @kind object, `long` v6 ) @signature `Lokio/u;.read:(Lokio/k;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L31cbd8.  v0:= 0L;
  #L31cbdc.  v2:= lcmp(v6, v0);
  #L31cbe0.  if v2 != 0 then goto L31cbe6;
  #L31cbe4.  return v0 @kind wide;
  #L31cbe6.  v2:= 1I;
  #L31cbe8.  v3:= lcmp(v6, v0);
  #L31cbec.  if v3 < 0 then goto L31cbf4;
  #L31cbf0.  v0:= 1I;
  #L31cbf2.  goto L31cbf6;
  #L31cbf4.  v0:= 0I;
  #L31cbf6.  if v0 == 0 then goto L31cc7a;
  #L31cbfa.  v0:= v4.`okio.u.c` @type ^`okio.l0` @kind object;
  #L31cbfe.  call `throwIfReached`(v0) @signature `Lokio/l0;.throwIfReached:()V` @kind virtual;
  #L31cc04.  call temp:= `i1`(v5, v2) @signature `Lokio/k;.i1:(I)Lokio/e0;` @kind virtual;
  #L31cc0a.  v0:= temp @kind object;
  #L31cc0c.  v1:= v0.`okio.e0.d` @type ^`int`;
  #L31cc10.  v1:= v1 - 8192;
  #L31cc14.  v1:= (`long`) v1 @kind i2l;
  #L31cc16.  call temp:= `min`(v6, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L31cc1c.  v6:= temp @kind wide;
  #L31cc1e.  v7:= (`int`) v6 @kind l2i;
  #L31cc20.  v6:= v4.`okio.u.b` @type ^`java.io.InputStream` @kind object;
  #L31cc24.  v1:= v0.`okio.e0.b` @type ^`byte`[] @kind object;
  #L31cc28.  v2:= v0.`okio.e0.d` @type ^`int`;
  #L31cc2c.  call temp:= `read`(v6, v1, v2, v7) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L31cc32.  v6:= temp;
  #L31cc34.  v7:= -1I;
  #L31cc36.  if v6 != v7 then goto L31cc40;
  #L31cc3a.  v5:= -1L;
  #L31cc3e.  return v5 @kind wide;
  #L31cc40.  v7:= v0.`okio.e0.d` @type ^`int`;
  #L31cc44.  v7:= v7 + v6 @kind int;
  #L31cc46.  v0.`okio.e0.d` @type ^`int` := v7;
  #L31cc4a.  call temp:= `f1`(v5) @signature `Lokio/k;.f1:()J` @kind virtual;
  #L31cc50.  v0:= temp @kind wide;
  #L31cc52.  v6:= (`long`) v6 @kind i2l;
  #L31cc54.  v0:= v0 + v6 @kind long;
  #L31cc56.  call `e1`(v5, v0) @signature `Lokio/k;.e1:(J)V` @kind virtual;
  #L31cc5c.  return v6 @kind wide;
  #L31cc5e.  v5:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L31cc60.  call temp:= `e`(v5) @signature `Lokio/v;.e:(Ljava/lang/AssertionError;)Z` @kind static;
  #L31cc66.  v6:= temp;
  #L31cc68.  if v6 == 0 then goto L31cc78;
  #L31cc6c.  v6:= new `java.io.IOException`;
  #L31cc70.  call `<init>`(v6, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L31cc76.  throw v6;
  #L31cc78.  throw v5;
  #L31cc7a.  v5:= new `java.lang.StringBuilder`;
  #L31cc7e.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L31cc84.  v0:= "byteCount < 0: " @kind object;
  #L31cc88.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31cc8e.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L31cc94.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L31cc9a.  v5:= temp @kind object;
  #L31cc9c.  v6:= new `java.lang.IllegalArgumentException`;
  #L31cca0.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L31cca6.  v5:= temp @kind object;
  #L31cca8.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L31ccae.  throw v6;
  catch `java.lang.AssertionError` @[L31cbfa..L31cc5c] goto L31cc5e;
}
procedure `okio.l0` `timeout`(`okio.u` v1 @kind this) @signature `Lokio/u;.timeout:()Lokio/l0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31ccd0.  v0:= v1.`okio.u.c` @type ^`okio.l0` @kind object;
  #L31ccd4.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.u` v2 @kind this) @signature `Lokio/u;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L31cb94.  v0:= new `java.lang.StringBuilder`;
  #L31cb98.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L31cb9e.  v1:= "source(" @kind object;
  #L31cba2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31cba8.  v1:= v2.`okio.u.b` @type ^`java.io.InputStream` @kind object;
  #L31cbac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L31cbb2.  v1:= 41I;
  #L31cbb6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L31cbbc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L31cbc2.  v0:= temp @kind object;
  #L31cbc4.  return v0 @kind object;
}
