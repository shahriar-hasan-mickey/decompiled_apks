record `kotlinx.coroutines.CoroutineStart` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
}
global `kotlinx.coroutines.CoroutineStart`[] `@@kotlinx.coroutines.CoroutineStart.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `kotlinx.coroutines.CoroutineStart` `@@kotlinx.coroutines.CoroutineStart.ATOMIC` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `kotlinx.coroutines.CoroutineStart` `@@kotlinx.coroutines.CoroutineStart.DEFAULT` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `kotlinx.coroutines.CoroutineStart` `@@kotlinx.coroutines.CoroutineStart.LAZY` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `kotlinx.coroutines.CoroutineStart` `@@kotlinx.coroutines.CoroutineStart.UNDISPATCHED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `kotlinx.coroutines.CoroutineStart`[] `$values`() @signature `Lkotlinx/coroutines/CoroutineStart;.$values:()[Lkotlinx/coroutines/CoroutineStart;` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L2cc570.  v0:= 4I;
  #L2cc572.  v0:= new `kotlinx.coroutines.CoroutineStart`[v0];
  #L2cc576.  v1:= `@@kotlinx.coroutines.CoroutineStart.DEFAULT` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L2cc57a.  v2:= 0I;
  #L2cc57c.  v0[v2]:= v1 @kind object;
  #L2cc580.  v1:= `@@kotlinx.coroutines.CoroutineStart.LAZY` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L2cc584.  v2:= 1I;
  #L2cc586.  v0[v2]:= v1 @kind object;
  #L2cc58a.  v1:= `@@kotlinx.coroutines.CoroutineStart.ATOMIC` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L2cc58e.  v2:= 2I;
  #L2cc590.  v0[v2]:= v1 @kind object;
  #L2cc594.  v1:= `@@kotlinx.coroutines.CoroutineStart.UNDISPATCHED` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L2cc598.  v2:= 3I;
  #L2cc59a.  v0[v2]:= v1 @kind object;
  #L2cc59e.  return v0 @kind object;
}
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/CoroutineStart;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2cc5d4.  v0:= new `kotlinx.coroutines.CoroutineStart`;
  #L2cc5d8.  v1:= "DEFAULT" @kind object;
  #L2cc5dc.  v2:= 0I;
  #L2cc5de.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/CoroutineStart;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2cc5e4.  `@@kotlinx.coroutines.CoroutineStart.DEFAULT` @type ^`kotlinx.coroutines.CoroutineStart` := v0 @kind object;
  #L2cc5e8.  v0:= new `kotlinx.coroutines.CoroutineStart`;
  #L2cc5ec.  v1:= "LAZY" @kind object;
  #L2cc5f0.  v2:= 1I;
  #L2cc5f2.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/CoroutineStart;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2cc5f8.  `@@kotlinx.coroutines.CoroutineStart.LAZY` @type ^`kotlinx.coroutines.CoroutineStart` := v0 @kind object;
  #L2cc5fc.  v0:= new `kotlinx.coroutines.CoroutineStart`;
  #L2cc600.  v1:= "ATOMIC" @kind object;
  #L2cc604.  v2:= 2I;
  #L2cc606.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/CoroutineStart;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2cc60c.  `@@kotlinx.coroutines.CoroutineStart.ATOMIC` @type ^`kotlinx.coroutines.CoroutineStart` := v0 @kind object;
  #L2cc610.  v0:= new `kotlinx.coroutines.CoroutineStart`;
  #L2cc614.  v1:= "UNDISPATCHED" @kind object;
  #L2cc618.  v2:= 3I;
  #L2cc61a.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/CoroutineStart;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2cc620.  `@@kotlinx.coroutines.CoroutineStart.UNDISPATCHED` @type ^`kotlinx.coroutines.CoroutineStart` := v0 @kind object;
  #L2cc624.  call temp:= `$values`() @signature `Lkotlinx/coroutines/CoroutineStart;.$values:()[Lkotlinx/coroutines/CoroutineStart;` @kind static;
  #L2cc62a.  v0:= temp @kind object;
  #L2cc62c.  `@@kotlinx.coroutines.CoroutineStart.$VALUES` @type ^`kotlinx.coroutines.CoroutineStart`[] := v0 @kind object;
  #L2cc630.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.CoroutineStart` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/CoroutineStart;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2cc644.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2cc64a.  return @kind void;
}
procedure `void` `isLazy$annotations`() @signature `Lkotlinx/coroutines/CoroutineStart;.isLazy$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2cc728.  return @kind void;
}
procedure `kotlinx.coroutines.CoroutineStart` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lkotlinx/coroutines/CoroutineStart;.valueOf:(Ljava/lang/String;)Lkotlinx/coroutines/CoroutineStart;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cc54c.  v0:= constclass @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L2cc550.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L2cc556.  v1:= temp @kind object;
  #L2cc558.  v1:= (`kotlinx.coroutines.CoroutineStart`) v1 @kind object;
  #L2cc55c.  return v1 @kind object;
}
procedure `kotlinx.coroutines.CoroutineStart`[] `values`() @signature `Lkotlinx/coroutines/CoroutineStart;.values:()[Lkotlinx/coroutines/CoroutineStart;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cc5b0.  v0:= `@@kotlinx.coroutines.CoroutineStart.$VALUES` @type ^`kotlinx.coroutines.CoroutineStart`[] @kind object;
  #L2cc5b4.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2cc5ba.  v0:= temp @kind object;
  #L2cc5bc.  v0:= (`kotlinx.coroutines.CoroutineStart`[]) v0 @kind object;
  #L2cc5c0.  return v0 @kind object;
}
procedure `void` `invoke`(`kotlinx.coroutines.CoroutineStart` v2 @kind this, `kotlin.jvm.functions.Function1` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/CoroutineStart;.invoke:(Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2cc65c.  v0:= `@@kotlinx.coroutines.CoroutineStart$a.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L2cc660.  call temp:= `ordinal`(v2) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2cc666.  v1:= temp;
  #L2cc668.  v0:= v0[v1];
  #L2cc66c.  v1:= 1I;
  #L2cc66e.  if v0 == v1 then goto L2cc6a2;
  #L2cc672.  v1:= 2I;
  #L2cc674.  if v0 == v1 then goto L2cc69a;
  #L2cc678.  v1:= 3I;
  #L2cc67a.  if v0 == v1 then goto L2cc692;
  #L2cc67e.  v3:= 4I;
  #L2cc680.  if v0 != v3 then goto L2cc686;
  #L2cc684.  goto L2cc6a8;
  #L2cc686.  v3:= new `kotlin.NoWhenBranchMatchedException`;
  #L2cc68a.  call `<init>`(v3) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L2cc690.  throw v3;
  #L2cc692.  call `a`(v3, v4) @signature `Lkotlinx/coroutines/j3/b;.a:(Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)V` @kind static;
  #L2cc698.  goto L2cc6a8;
  #L2cc69a.  call `startCoroutine`(v3, v4) @signature `Lkotlin/coroutines/ContinuationKt;.startCoroutine:(Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)V` @kind static;
  #L2cc6a0.  goto L2cc6a8;
  #L2cc6a2.  call `c`(v3, v4) @signature `Lkotlinx/coroutines/j3/a;.c:(Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)V` @kind static;
  #L2cc6a8.  return @kind void;
}
procedure `void` `invoke`(`kotlinx.coroutines.CoroutineStart` v6 @kind this, `kotlin.jvm.functions.Function2` v7 @kind object, `java.lang.Object` v8 @kind object, `kotlin.coroutines.Continuation` v9 @kind object) @signature `Lkotlinx/coroutines/CoroutineStart;.invoke:(Lkotlin/jvm/functions/Function2;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2cc6bc.  v0:= `@@kotlinx.coroutines.CoroutineStart$a.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L2cc6c0.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2cc6c6.  v1:= temp;
  #L2cc6c8.  v0:= v0[v1];
  #L2cc6cc.  v1:= 1I;
  #L2cc6ce.  if v0 == v1 then goto L2cc702;
  #L2cc6d2.  v1:= 2I;
  #L2cc6d4.  if v0 == v1 then goto L2cc6fa;
  #L2cc6d8.  v1:= 3I;
  #L2cc6da.  if v0 == v1 then goto L2cc6f2;
  #L2cc6de.  v7:= 4I;
  #L2cc6e0.  if v0 != v7 then goto L2cc6e6;
  #L2cc6e4.  goto L2cc714;
  #L2cc6e6.  v7:= new `kotlin.NoWhenBranchMatchedException`;
  #L2cc6ea.  call `<init>`(v7) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L2cc6f0.  throw v7;
  #L2cc6f2.  call `b`(v7, v8, v9) @signature `Lkotlinx/coroutines/j3/b;.b:(Lkotlin/jvm/functions/Function2;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)V` @kind static;
  #L2cc6f8.  goto L2cc714;
  #L2cc6fa.  call `startCoroutine`(v7, v8, v9) @signature `Lkotlin/coroutines/ContinuationKt;.startCoroutine:(Lkotlin/jvm/functions/Function2;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)V` @kind static;
  #L2cc700.  goto L2cc714;
  #L2cc702.  v3:= 0I;
  #L2cc704.  v4:= 4I;
  #L2cc706.  v5:= 0I;
  #L2cc708.  v0:= v7 @kind object;
  #L2cc70a.  v1:= v8 @kind object;
  #L2cc70c.  v2:= v9 @kind object;
  #L2cc70e.  call `e`(v0, v1, v2, v3, v4, v5) @signature `Lkotlinx/coroutines/j3/a;.e:(Lkotlin/jvm/functions/Function2;Ljava/lang/Object;Lkotlin/coroutines/Continuation;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V` @kind static;
  #L2cc714.  return @kind void;
}
procedure `boolean` `isLazy`(`kotlinx.coroutines.CoroutineStart` v1 @kind this) @signature `Lkotlinx/coroutines/CoroutineStart;.isLazy:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2cc52c.  v0:= `@@kotlinx.coroutines.CoroutineStart.LAZY` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L2cc530.  if v1 != v0 then goto L2cc538;
  #L2cc534.  v0:= 1I;
  #L2cc536.  goto L2cc53a;
  #L2cc538.  v0:= 0I;
  #L2cc53a.  return v0;
}
