record `kotlinx.coroutines.i1` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.j1` @kind class, `kotlinx.coroutines.t0` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.i1._delayed` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.i1._isCompleted` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.i1._queue` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.i1.f` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.i1.g` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/i1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2ce324.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L2ce328.  v1:= constclass @type ^`kotlinx.coroutines.i1` @kind object;
  #L2ce32c.  v2:= "_queue" @kind object;
  #L2ce330.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L2ce336.  v2:= temp @kind object;
  #L2ce338.  `@@kotlinx.coroutines.i1.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L2ce33c.  v2:= "_delayed" @kind object;
  #L2ce340.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L2ce346.  v0:= temp @kind object;
  #L2ce348.  `@@kotlinx.coroutines.i1.g` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L2ce34c.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.i1` v1 @kind this) @signature `Lkotlinx/coroutines/i1;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ce360.  call `<init>`(v1) @signature `Lkotlinx/coroutines/j1;.<init>:()V` @kind direct;
  #L2ce366.  v0:= 0I;
  #L2ce368.  v1.`kotlinx.coroutines.i1._queue` @type ^`java.lang.Object` := v0 @kind object;
  #L2ce36c.  v1.`kotlinx.coroutines.i1._delayed` @type ^`java.lang.Object` := v0 @kind object;
  #L2ce370.  v0:= 0I;
  #L2ce372.  v1.`kotlinx.coroutines.i1._isCompleted` @type ^`int` := v0;
  #L2ce376.  return @kind void;
}
procedure `boolean` `A0`(`kotlinx.coroutines.i1` v1 @kind this) @signature `Lkotlinx/coroutines/i1;.A0:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2cdf90.  v0:= v1.`kotlinx.coroutines.i1._isCompleted` @type ^`int`;
  #L2cdf94.  return v0;
}
procedure `boolean` `g1`(`kotlinx.coroutines.i1` v0 @kind object) @signature `Lkotlinx/coroutines/i1;.g1:(Lkotlinx/coroutines/i1;)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2cdeb8.  call temp:= `A0`(v0) @signature `Lkotlinx/coroutines/i1;.A0:()Z` @kind direct;
  #L2cdebe.  v0:= temp;
  #L2cdec0.  return v0;
}
procedure `void` `h1`(`kotlinx.coroutines.i1` v4 @kind this) @signature `Lkotlinx/coroutines/i1;.h1:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ce388.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2ce38e.  v0:= temp;
  #L2ce390.  if v0 == 0 then goto L2ce3ae;
  #L2ce394.  call temp:= `A0`(v4) @signature `Lkotlinx/coroutines/i1;.A0:()Z` @kind direct;
  #L2ce39a.  v0:= temp;
  #L2ce39c.  if v0 == 0 then goto L2ce3a2;
  #L2ce3a0.  goto L2ce3ae;
  #L2ce3a2.  v0:= new `java.lang.AssertionError`;
  #L2ce3a6.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2ce3ac.  throw v0;
  #L2ce3ae.  v0:= v4.`kotlinx.coroutines.i1._queue` @type ^`java.lang.Object` @kind object;
  #L2ce3b2.  if v0 != 0 then goto L2ce3d2;
  #L2ce3b6.  v0:= `@@kotlinx.coroutines.i1.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ce3ba.  v1:= 0I;
  #L2ce3bc.  call temp:= `a`() @signature `Lkotlinx/coroutines/l1;.a:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2ce3c2.  v2:= temp @kind object;
  #L2ce3c4.  call temp:= `compareAndSet`(v0, v4, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ce3ca.  v0:= temp;
  #L2ce3cc.  if v0 == 0 then goto L2ce3ae;
  #L2ce3d0.  return @kind void;
  #L2ce3d2.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.b0` @kind boolean;
  #L2ce3d6.  if v1 == 0 then goto L2ce3e6;
  #L2ce3da.  v0:= (`kotlinx.coroutines.internal.b0`) v0 @kind object;
  #L2ce3de.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/b0;.d:()Z` @kind virtual;
  #L2ce3e4.  return @kind void;
  #L2ce3e6.  call temp:= `a`() @signature `Lkotlinx/coroutines/l1;.a:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2ce3ec.  v1:= temp @kind object;
  #L2ce3ee.  if v0 != v1 then goto L2ce3f4;
  #L2ce3f2.  return @kind void;
  #L2ce3f4.  v1:= new `kotlinx.coroutines.internal.b0`;
  #L2ce3f8.  v2:= 8I;
  #L2ce3fc.  v3:= 1I;
  #L2ce3fe.  call `<init>`(v1, v2, v3) @signature `Lkotlinx/coroutines/internal/b0;.<init>:(IZ)V` @kind direct;
  #L2ce404.  v2:= v0 @kind object;
  #L2ce406.  v2:= (`java.lang.Runnable`) v2 @kind object;
  #L2ce40a.  call temp:= `a`(v1, v2) @signature `Lkotlinx/coroutines/internal/b0;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L2ce410.  v2:= `@@kotlinx.coroutines.i1.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ce414.  call temp:= `compareAndSet`(v2, v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ce41a.  v0:= temp;
  #L2ce41c.  if v0 == 0 then goto L2ce3ae;
  #L2ce420.  return @kind void;
}
procedure `java.lang.Runnable` `i1`(`kotlinx.coroutines.i1` v4 @kind this) @signature `Lkotlinx/coroutines/i1;.i1:()Ljava/lang/Runnable;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ce0ac.  v0:= v4.`kotlinx.coroutines.i1._queue` @type ^`java.lang.Object` @kind object;
  #L2ce0b0.  v1:= 0I;
  #L2ce0b2.  if v0 != 0 then goto L2ce0b8;
  #L2ce0b6.  return v1 @kind object;
  #L2ce0b8.  v2:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.b0` @kind boolean;
  #L2ce0bc.  if v2 == 0 then goto L2ce0f0;
  #L2ce0c0.  v1:= v0 @kind object;
  #L2ce0c2.  v1:= (`kotlinx.coroutines.internal.b0`) v1 @kind object;
  #L2ce0c6.  call temp:= `j`(v1) @signature `Lkotlinx/coroutines/internal/b0;.j:()Ljava/lang/Object;` @kind virtual;
  #L2ce0cc.  v2:= temp @kind object;
  #L2ce0ce.  v3:= `@@kotlinx.coroutines.internal.b0.d` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2ce0d2.  if v2 == v3 then goto L2ce0dc;
  #L2ce0d6.  v2:= (`java.lang.Runnable`) v2 @kind object;
  #L2ce0da.  return v2 @kind object;
  #L2ce0dc.  v2:= `@@kotlinx.coroutines.i1.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ce0e0.  call temp:= `i`(v1) @signature `Lkotlinx/coroutines/internal/b0;.i:()Lkotlinx/coroutines/internal/b0;` @kind virtual;
  #L2ce0e6.  v1:= temp @kind object;
  #L2ce0e8.  call temp:= `compareAndSet`(v2, v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ce0ee.  goto L2ce0ac;
  #L2ce0f0.  call temp:= `a`() @signature `Lkotlinx/coroutines/l1;.a:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2ce0f6.  v2:= temp @kind object;
  #L2ce0f8.  if v0 != v2 then goto L2ce0fe;
  #L2ce0fc.  return v1 @kind object;
  #L2ce0fe.  v2:= `@@kotlinx.coroutines.i1.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ce102.  call temp:= `compareAndSet`(v2, v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ce108.  v1:= temp;
  #L2ce10a.  if v1 == 0 then goto L2ce0ac;
  #L2ce10e.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L2ce112.  return v0 @kind object;
}
procedure `boolean` `k1`(`kotlinx.coroutines.i1` v5 @kind this, `java.lang.Runnable` v6 @kind object) @signature `Lkotlinx/coroutines/i1;.k1:(Ljava/lang/Runnable;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2cded4.  v0:= v5.`kotlinx.coroutines.i1._queue` @type ^`java.lang.Object` @kind object;
  #L2cded8.  call temp:= `A0`(v5) @signature `Lkotlinx/coroutines/i1;.A0:()Z` @kind direct;
  #L2cdede.  v1:= temp;
  #L2cdee0.  v2:= 0I;
  #L2cdee2.  if v1 == 0 then goto L2cdee8;
  #L2cdee6.  return v2;
  #L2cdee8.  v1:= 1I;
  #L2cdeea.  if v0 != 0 then goto L2cdf02;
  #L2cdeee.  v0:= `@@kotlinx.coroutines.i1.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2cdef2.  v2:= 0I;
  #L2cdef4.  call temp:= `compareAndSet`(v0, v5, v2, v6) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2cdefa.  v0:= temp;
  #L2cdefc.  if v0 == 0 then goto L2cded4;
  #L2cdf00.  return v1;
  #L2cdf02.  v3:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.b0` @kind boolean;
  #L2cdf06.  if v3 == 0 then goto L2cdf40;
  #L2cdf0a.  v3:= v0 @kind object;
  #L2cdf0c.  v3:= (`kotlinx.coroutines.internal.b0`) v3 @kind object;
  #L2cdf10.  call temp:= `a`(v3, v6) @signature `Lkotlinx/coroutines/internal/b0;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L2cdf16.  v4:= temp;
  #L2cdf18.  if v4 == 0 then goto L2cdf3e;
  #L2cdf1c.  if v4 == v1 then goto L2cdf2a;
  #L2cdf20.  v0:= 2I;
  #L2cdf22.  if v4 == v0 then goto L2cdf28;
  #L2cdf26.  goto L2cded4;
  #L2cdf28.  return v2;
  #L2cdf2a.  v1:= `@@kotlinx.coroutines.i1.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2cdf2e.  call temp:= `i`(v3) @signature `Lkotlinx/coroutines/internal/b0;.i:()Lkotlinx/coroutines/internal/b0;` @kind virtual;
  #L2cdf34.  v2:= temp @kind object;
  #L2cdf36.  call temp:= `compareAndSet`(v1, v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2cdf3c.  goto L2cded4;
  #L2cdf3e.  return v1;
  #L2cdf40.  call temp:= `a`() @signature `Lkotlinx/coroutines/l1;.a:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2cdf46.  v3:= temp @kind object;
  #L2cdf48.  if v0 != v3 then goto L2cdf4e;
  #L2cdf4c.  return v2;
  #L2cdf4e.  v2:= new `kotlinx.coroutines.internal.b0`;
  #L2cdf52.  v3:= 8I;
  #L2cdf56.  call `<init>`(v2, v3, v1) @signature `Lkotlinx/coroutines/internal/b0;.<init>:(IZ)V` @kind direct;
  #L2cdf5c.  v3:= v0 @kind object;
  #L2cdf5e.  v3:= (`java.lang.Runnable`) v3 @kind object;
  #L2cdf62.  call temp:= `a`(v2, v3) @signature `Lkotlinx/coroutines/internal/b0;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L2cdf68.  call temp:= `a`(v2, v6) @signature `Lkotlinx/coroutines/internal/b0;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L2cdf6e.  v3:= `@@kotlinx.coroutines.i1.f` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2cdf72.  call temp:= `compareAndSet`(v3, v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2cdf78.  v0:= temp;
  #L2cdf7a.  if v0 == 0 then goto L2cded4;
  #L2cdf7e.  return v1;
}
procedure `void` `m1`(`kotlinx.coroutines.i1` v4 @kind this) @signature `Lkotlinx/coroutines/i1;.m1:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ce47c.  call temp:= `a`() @signature `Lkotlinx/coroutines/c;.a:()Lkotlinx/coroutines/b;` @kind static;
  #L2ce482.  v0:= temp @kind object;
  #L2ce484.  v1:= 0I;
  #L2ce486.  if v0 != 0 then goto L2ce4bc;
  #L2ce48a.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L2ce490.  v2:= temp @kind wide;
  #L2ce492.  v0:= v4.`kotlinx.coroutines.i1._delayed` @type ^`java.lang.Object` @kind object;
  #L2ce496.  v0:= (`kotlinx.coroutines.h1`) v0 @kind object;
  #L2ce49a.  if v0 != 0 then goto L2ce4a2;
  #L2ce49e.  v0:= v1 @kind object;
  #L2ce4a0.  goto L2ce4ae;
  #L2ce4a2.  call temp:= `i`(v0) @signature `Lkotlinx/coroutines/internal/q0;.i:()Lkotlinx/coroutines/internal/r0;` @kind virtual;
  #L2ce4a8.  v0:= temp @kind object;
  #L2ce4aa.  v0:= (`kotlinx.coroutines.g1`) v0 @kind object;
  #L2ce4ae.  if v0 != 0 then goto L2ce4b4;
  #L2ce4b2.  return @kind void;
  #L2ce4b4.  call `e1`(v4, v2, v0) @signature `Lkotlinx/coroutines/j1;.e1:(JLkotlinx/coroutines/g1;)V` @kind virtual;
  #L2ce4ba.  goto L2ce492;
  #L2ce4bc.  goto L2ce4c0;
  #L2ce4be.  throw v1;
  #L2ce4c0.  goto L2ce4be;
}
procedure `int` `p1`(`kotlinx.coroutines.i1` v3 @kind this, `long` v4 , `kotlinx.coroutines.g1` v6 @kind object) @signature `Lkotlinx/coroutines/i1;.p1:(JLkotlinx/coroutines/g1;)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ce050.  call temp:= `A0`(v3) @signature `Lkotlinx/coroutines/i1;.A0:()Z` @kind direct;
  #L2ce056.  v0:= temp;
  #L2ce058.  if v0 == 0 then goto L2ce060;
  #L2ce05c.  v4:= 1I;
  #L2ce05e.  return v4;
  #L2ce060.  v0:= v3.`kotlinx.coroutines.i1._delayed` @type ^`java.lang.Object` @kind object;
  #L2ce064.  v0:= (`kotlinx.coroutines.h1`) v0 @kind object;
  #L2ce068.  if v0 != 0 then goto L2ce090;
  #L2ce06c.  v0:= `@@kotlinx.coroutines.i1.g` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ce070.  v1:= 0I;
  #L2ce072.  v2:= new `kotlinx.coroutines.h1`;
  #L2ce076.  call `<init>`(v2, v4) @signature `Lkotlinx/coroutines/h1;.<init>:(J)V` @kind direct;
  #L2ce07c.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ce082.  v0:= v3.`kotlinx.coroutines.i1._delayed` @type ^`java.lang.Object` @kind object;
  #L2ce086.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2ce08c.  v0:= (`kotlinx.coroutines.h1`) v0 @kind object;
  #L2ce090.  call temp:= `d`(v6, v4, v0, v3) @signature `Lkotlinx/coroutines/g1;.d:(JLkotlinx/coroutines/h1;Lkotlinx/coroutines/i1;)I` @kind virtual;
  #L2ce096.  v4:= temp;
  #L2ce098.  return v4;
}
procedure `void` `r1`(`kotlinx.coroutines.i1` v0 @kind this, `boolean` v1 ) @signature `Lkotlinx/coroutines/i1;.r1:(Z)V` @AccessFlag PRIVATE_FINAL {
    temp;

  #L2ce5b0.  v0.`kotlinx.coroutines.i1._isCompleted` @type ^`int` := v1;
  #L2ce5b4.  return @kind void;
}
procedure `boolean` `s1`(`kotlinx.coroutines.i1` v1 @kind this, `kotlinx.coroutines.g1` v2 @kind object) @signature `Lkotlinx/coroutines/i1;.s1:(Lkotlinx/coroutines/g1;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2ce018.  v0:= v1.`kotlinx.coroutines.i1._delayed` @type ^`java.lang.Object` @kind object;
  #L2ce01c.  v0:= (`kotlinx.coroutines.h1`) v0 @kind object;
  #L2ce020.  if v0 != 0 then goto L2ce028;
  #L2ce024.  v0:= 0I;
  #L2ce026.  goto L2ce034;
  #L2ce028.  call temp:= `e`(v0) @signature `Lkotlinx/coroutines/internal/q0;.e:()Lkotlinx/coroutines/internal/r0;` @kind virtual;
  #L2ce02e.  v0:= temp @kind object;
  #L2ce030.  v0:= (`kotlinx.coroutines.g1`) v0 @kind object;
  #L2ce034.  if v0 != v2 then goto L2ce03c;
  #L2ce038.  v2:= 1I;
  #L2ce03a.  goto L2ce03e;
  #L2ce03c.  v2:= 0I;
  #L2ce03e.  return v2;
}
procedure `void` `N0`(`kotlinx.coroutines.i1` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `java.lang.Runnable` v2 @kind object) @signature `Lkotlinx/coroutines/i1;.N0:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2ce434.  call `j1`(v0, v2) @signature `Lkotlinx/coroutines/i1;.j1:(Ljava/lang/Runnable;)V` @kind virtual;
  #L2ce43a.  return @kind void;
}
procedure `long` `V0`(`kotlinx.coroutines.i1` v6 @kind this) @signature `Lkotlinx/coroutines/i1;.V0:()J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2ce19c.  call temp:= `V0`(v6) @signature `Lkotlinx/coroutines/d1;.V0:()J` @kind super;
  #L2ce1a2.  v0:= temp @kind wide;
  #L2ce1a4.  v2:= 0L;
  #L2ce1a8.  v4:= lcmp(v0, v2);
  #L2ce1ac.  if v4 != 0 then goto L2ce1b2;
  #L2ce1b0.  return v2 @kind wide;
  #L2ce1b2.  v0:= v6.`kotlinx.coroutines.i1._queue` @type ^`java.lang.Object` @kind object;
  #L2ce1b6.  v4:= 9223372036854775807L;
  #L2ce1c0.  if v0 != 0 then goto L2ce1c6;
  #L2ce1c4.  goto L2ce1e0;
  #L2ce1c6.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.b0` @kind boolean;
  #L2ce1ca.  if v1 == 0 then goto L2ce22a;
  #L2ce1ce.  v0:= (`kotlinx.coroutines.internal.b0`) v0 @kind object;
  #L2ce1d2.  call temp:= `g`(v0) @signature `Lkotlinx/coroutines/internal/b0;.g:()Z` @kind virtual;
  #L2ce1d8.  v0:= temp;
  #L2ce1da.  if v0 != 0 then goto L2ce1e0;
  #L2ce1de.  return v2 @kind wide;
  #L2ce1e0.  v0:= v6.`kotlinx.coroutines.i1._delayed` @type ^`java.lang.Object` @kind object;
  #L2ce1e4.  v0:= (`kotlinx.coroutines.h1`) v0 @kind object;
  #L2ce1e8.  v1:= 0I;
  #L2ce1ea.  if v0 != 0 then goto L2ce1f2;
  #L2ce1ee.  v0:= v1 @kind object;
  #L2ce1f0.  goto L2ce1fe;
  #L2ce1f2.  call temp:= `e`(v0) @signature `Lkotlinx/coroutines/internal/q0;.e:()Lkotlinx/coroutines/internal/r0;` @kind virtual;
  #L2ce1f8.  v0:= temp @kind object;
  #L2ce1fa.  v0:= (`kotlinx.coroutines.g1`) v0 @kind object;
  #L2ce1fe.  if v0 != 0 then goto L2ce204;
  #L2ce202.  return v4 @kind wide;
  #L2ce204.  v4:= v0.`kotlinx.coroutines.g1.b` @type ^`long` @kind wide;
  #L2ce208.  call temp:= `a`() @signature `Lkotlinx/coroutines/c;.a:()Lkotlinx/coroutines/b;` @kind static;
  #L2ce20e.  v0:= temp @kind object;
  #L2ce210.  if v0 != 0 then goto L2ce228;
  #L2ce214.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L2ce21a.  v0:= temp @kind wide;
  #L2ce21c.  v4:= v4 - v0 @kind long;
  #L2ce21e.  call temp:= `coerceAtLeast`(v4, v2) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(JJ)J` @kind static;
  #L2ce224.  v0:= temp @kind wide;
  #L2ce226.  return v0 @kind wide;
  #L2ce228.  throw v1;
  #L2ce22a.  call temp:= `a`() @signature `Lkotlinx/coroutines/l1;.a:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2ce230.  v1:= temp @kind object;
  #L2ce232.  if v0 != v1 then goto L2ce238;
  #L2ce236.  return v4 @kind wide;
  #L2ce238.  return v2 @kind wide;
}
procedure `long` `a1`(`kotlinx.coroutines.i1` v9 @kind this) @signature `Lkotlinx/coroutines/i1;.a1:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2ce24c.  call temp:= `b1`(v9) @signature `Lkotlinx/coroutines/d1;.b1:()Z` @kind virtual;
  #L2ce252.  v0:= temp;
  #L2ce254.  v1:= 0L;
  #L2ce258.  if v0 == 0 then goto L2ce25e;
  #L2ce25c.  return v1 @kind wide;
  #L2ce25e.  v0:= v9.`kotlinx.coroutines.i1._delayed` @type ^`java.lang.Object` @kind object;
  #L2ce262.  v0:= (`kotlinx.coroutines.h1`) v0 @kind object;
  #L2ce266.  if v0 == 0 then goto L2ce2e2;
  #L2ce26a.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/q0;.d:()Z` @kind virtual;
  #L2ce270.  v3:= temp;
  #L2ce272.  if v3 != 0 then goto L2ce2e2;
  #L2ce276.  call temp:= `a`() @signature `Lkotlinx/coroutines/c;.a:()Lkotlinx/coroutines/b;` @kind static;
  #L2ce27c.  v3:= temp @kind object;
  #L2ce27e.  v4:= 0I;
  #L2ce280.  if v3 != 0 then goto L2ce2e0;
  #L2ce284.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L2ce28a.  v5:= temp @kind wide;
  #L2ce28c.  @monitorenter v0
  #L2ce28e.  call temp:= `b`(v0) @signature `Lkotlinx/coroutines/internal/q0;.b:()Lkotlinx/coroutines/internal/r0;` @kind virtual;
  #L2ce294.  v3:= temp @kind object;
  #L2ce296.  if v3 != 0 then goto L2ce2a0;
  #L2ce29a.  @monitorexit v0
  #L2ce29c.  v3:= v4 @kind object;
  #L2ce29e.  goto L2ce2d0;
  #L2ce2a0.  v3:= (`kotlinx.coroutines.g1`) v3 @kind object;
  #L2ce2a4.  call temp:= `i`(v3, v5) @signature `Lkotlinx/coroutines/g1;.i:(J)Z` @kind virtual;
  #L2ce2aa.  v7:= temp;
  #L2ce2ac.  v8:= 0I;
  #L2ce2ae.  if v7 == 0 then goto L2ce2bc;
  #L2ce2b2.  call temp:= `k1`(v9, v3) @signature `Lkotlinx/coroutines/i1;.k1:(Ljava/lang/Runnable;)Z` @kind direct;
  #L2ce2b8.  v3:= temp;
  #L2ce2ba.  goto L2ce2be;
  #L2ce2bc.  v3:= 0I;
  #L2ce2be.  if v3 == 0 then goto L2ce2cc;
  #L2ce2c2.  call temp:= `h`(v0, v8) @signature `Lkotlinx/coroutines/internal/q0;.h:(I)Lkotlinx/coroutines/internal/r0;` @kind virtual;
  #L2ce2c8.  v3:= temp @kind object;
  #L2ce2ca.  goto L2ce2ce;
  #L2ce2cc.  v3:= v4 @kind object;
  #L2ce2ce.  @monitorexit v0
  #L2ce2d0.  v3:= (`kotlinx.coroutines.g1`) v3 @kind object;
  #L2ce2d4.  if v3 != 0 then goto L2ce28c;
  #L2ce2d8.  goto L2ce2e2;
  #L2ce2da.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ce2dc.  @monitorexit v0
  #L2ce2de.  throw v1;
  #L2ce2e0.  throw v4;
  #L2ce2e2.  call temp:= `i1`(v9) @signature `Lkotlinx/coroutines/i1;.i1:()Ljava/lang/Runnable;` @kind direct;
  #L2ce2e8.  v0:= temp @kind object;
  #L2ce2ea.  if v0 == 0 then goto L2ce2f6;
  #L2ce2ee.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L2ce2f4.  return v1 @kind wide;
  #L2ce2f6.  call temp:= `V0`(v9) @signature `Lkotlinx/coroutines/i1;.V0:()J` @kind virtual;
  #L2ce2fc.  v0:= temp @kind wide;
  #L2ce2fe.  return v0 @kind wide;
  catch `java.lang.Throwable` @[L2ce28e..L2ce296] goto L2ce2da;
  catch `java.lang.Throwable` @[L2ce2a0..L2ce2ca] goto L2ce2da;
}
procedure `void` `c`(`kotlinx.coroutines.i1` v3 @kind this, `long` v4 , `kotlinx.coroutines.o` v6 @kind object) @signature `Lkotlinx/coroutines/i1;.c:(JLkotlinx/coroutines/o;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2ce550.  call temp:= `d`(v4) @signature `Lkotlinx/coroutines/l1;.d:(J)J` @kind static;
  #L2ce556.  v4:= temp @kind wide;
  #L2ce558.  v0:= 1.9999999999999998D;
  #L2ce562.  v2:= lcmp(v4, v0);
  #L2ce566.  if v2 >= 0 then goto L2ce59c;
  #L2ce56a.  call temp:= `a`() @signature `Lkotlinx/coroutines/c;.a:()Lkotlinx/coroutines/b;` @kind static;
  #L2ce570.  v0:= temp @kind object;
  #L2ce572.  if v0 != 0 then goto L2ce598;
  #L2ce576.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L2ce57c.  v0:= temp @kind wide;
  #L2ce57e.  v2:= new `kotlinx.coroutines.e1`;
  #L2ce582.  v4:= v4 + v0 @kind long;
  #L2ce584.  call `<init>`(v2, v3, v4, v6) @signature `Lkotlinx/coroutines/e1;.<init>:(Lkotlinx/coroutines/i1;JLkotlinx/coroutines/o;)V` @kind direct;
  #L2ce58a.  call `a`(v6, v2) @signature `Lkotlinx/coroutines/r;.a:(Lkotlinx/coroutines/o;Lkotlinx/coroutines/z0;)V` @kind static;
  #L2ce590.  call `o1`(v3, v0, v2) @signature `Lkotlinx/coroutines/i1;.o1:(JLkotlinx/coroutines/g1;)V` @kind virtual;
  #L2ce596.  goto L2ce59c;
  #L2ce598.  v4:= 0I;
  #L2ce59a.  throw v4;
  #L2ce59c.  return @kind void;
}
procedure `void` `j1`(`kotlinx.coroutines.i1` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lkotlinx/coroutines/i1;.j1:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ce44c.  call temp:= `k1`(v1, v2) @signature `Lkotlinx/coroutines/i1;.k1:(Ljava/lang/Runnable;)Z` @kind direct;
  #L2ce452.  v0:= temp;
  #L2ce454.  if v0 == 0 then goto L2ce460;
  #L2ce458.  call `f1`(v1) @signature `Lkotlinx/coroutines/j1;.f1:()V` @kind virtual;
  #L2ce45e.  goto L2ce46a;
  #L2ce460.  v0:= `@@kotlinx.coroutines.q0.h` @type ^`kotlinx.coroutines.q0` @kind object;
  #L2ce464.  call `j1`(v0, v2) @signature `Lkotlinx/coroutines/q0;.j1:(Ljava/lang/Runnable;)V` @kind virtual;
  #L2ce46a.  return @kind void;
}
procedure `boolean` `l1`(`kotlinx.coroutines.i1` v4 @kind this) @signature `Lkotlinx/coroutines/i1;.l1:()Z` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2cdfa8.  call temp:= `Z0`(v4) @signature `Lkotlinx/coroutines/d1;.Z0:()Z` @kind virtual;
  #L2cdfae.  v0:= temp;
  #L2cdfb0.  v1:= 0I;
  #L2cdfb2.  if v0 != 0 then goto L2cdfb8;
  #L2cdfb6.  return v1;
  #L2cdfb8.  v0:= v4.`kotlinx.coroutines.i1._delayed` @type ^`java.lang.Object` @kind object;
  #L2cdfbc.  v0:= (`kotlinx.coroutines.h1`) v0 @kind object;
  #L2cdfc0.  if v0 == 0 then goto L2cdfd2;
  #L2cdfc4.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/q0;.d:()Z` @kind virtual;
  #L2cdfca.  v0:= temp;
  #L2cdfcc.  if v0 != 0 then goto L2cdfd2;
  #L2cdfd0.  return v1;
  #L2cdfd2.  v0:= v4.`kotlinx.coroutines.i1._queue` @type ^`java.lang.Object` @kind object;
  #L2cdfd6.  v2:= 1I;
  #L2cdfd8.  if v0 != 0 then goto L2cdfe0;
  #L2cdfdc.  v1:= 1I;
  #L2cdfde.  goto L2ce004;
  #L2cdfe0.  v3:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.b0` @kind boolean;
  #L2cdfe4.  if v3 == 0 then goto L2cdff6;
  #L2cdfe8.  v0:= (`kotlinx.coroutines.internal.b0`) v0 @kind object;
  #L2cdfec.  call temp:= `g`(v0) @signature `Lkotlinx/coroutines/internal/b0;.g:()Z` @kind virtual;
  #L2cdff2.  v1:= temp;
  #L2cdff4.  goto L2ce004;
  #L2cdff6.  call temp:= `a`() @signature `Lkotlinx/coroutines/l1;.a:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2cdffc.  v3:= temp @kind object;
  #L2cdffe.  if v0 != v3 then goto L2ce004;
  #L2ce002.  goto L2cdfdc;
  #L2ce004.  return v1;
}
procedure `void` `n1`(`kotlinx.coroutines.i1` v1 @kind this) @signature `Lkotlinx/coroutines/i1;.n1:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L2ce4d4.  v0:= 0I;
  #L2ce4d6.  v1.`kotlinx.coroutines.i1._queue` @type ^`java.lang.Object` := v0 @kind object;
  #L2ce4da.  v1.`kotlinx.coroutines.i1._delayed` @type ^`java.lang.Object` := v0 @kind object;
  #L2ce4de.  return @kind void;
}
procedure `void` `o1`(`kotlinx.coroutines.i1` v2 @kind this, `long` v3 , `kotlinx.coroutines.g1` v5 @kind object) @signature `Lkotlinx/coroutines/i1;.o1:(JLkotlinx/coroutines/g1;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2ce4f0.  call temp:= `p1`(v2, v3, v5) @signature `Lkotlinx/coroutines/i1;.p1:(JLkotlinx/coroutines/g1;)I` @kind direct;
  #L2ce4f6.  v0:= temp;
  #L2ce4f8.  if v0 == 0 then goto L2ce52a;
  #L2ce4fc.  v1:= 1I;
  #L2ce4fe.  if v0 == v1 then goto L2ce522;
  #L2ce502.  v3:= 2I;
  #L2ce504.  if v0 != v3 then goto L2ce50a;
  #L2ce508.  goto L2ce53c;
  #L2ce50a.  v3:= new `java.lang.IllegalStateException`;
  #L2ce50e.  v4:= "unexpected result" @kind object;
  #L2ce512.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ce518.  v4:= temp @kind object;
  #L2ce51a.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ce520.  throw v3;
  #L2ce522.  call `e1`(v2, v3, v5) @signature `Lkotlinx/coroutines/j1;.e1:(JLkotlinx/coroutines/g1;)V` @kind virtual;
  #L2ce528.  goto L2ce53c;
  #L2ce52a.  call temp:= `s1`(v2, v5) @signature `Lkotlinx/coroutines/i1;.s1:(Lkotlinx/coroutines/g1;)Z` @kind direct;
  #L2ce530.  v3:= temp;
  #L2ce532.  if v3 == 0 then goto L2ce53c;
  #L2ce536.  call `f1`(v2) @signature `Lkotlinx/coroutines/j1;.f1:()V` @kind virtual;
  #L2ce53c.  return @kind void;
}
procedure `kotlinx.coroutines.z0` `q1`(`kotlinx.coroutines.i1` v3 @kind this, `long` v4 , `java.lang.Runnable` v6 @kind object) @signature `Lkotlinx/coroutines/i1;.q1:(JLjava/lang/Runnable;)Lkotlinx/coroutines/z0;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ce140.  call temp:= `d`(v4) @signature `Lkotlinx/coroutines/l1;.d:(J)J` @kind static;
  #L2ce146.  v4:= temp @kind wide;
  #L2ce148.  v0:= 1.9999999999999998D;
  #L2ce152.  v2:= lcmp(v4, v0);
  #L2ce156.  if v2 >= 0 then goto L2ce186;
  #L2ce15a.  call temp:= `a`() @signature `Lkotlinx/coroutines/c;.a:()Lkotlinx/coroutines/b;` @kind static;
  #L2ce160.  v0:= temp @kind object;
  #L2ce162.  if v0 != 0 then goto L2ce182;
  #L2ce166.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L2ce16c.  v0:= temp @kind wide;
  #L2ce16e.  v2:= new `kotlinx.coroutines.f1`;
  #L2ce172.  v4:= v4 + v0 @kind long;
  #L2ce174.  call `<init>`(v2, v4, v6) @signature `Lkotlinx/coroutines/f1;.<init>:(JLjava/lang/Runnable;)V` @kind direct;
  #L2ce17a.  call `o1`(v3, v0, v2) @signature `Lkotlinx/coroutines/i1;.o1:(JLkotlinx/coroutines/g1;)V` @kind virtual;
  #L2ce180.  goto L2ce18a;
  #L2ce182.  v4:= 0I;
  #L2ce184.  throw v4;
  #L2ce186.  v2:= `@@kotlinx.coroutines.o2.b` @type ^`kotlinx.coroutines.o2` @kind object;
  #L2ce18a.  return v2 @kind object;
}
procedure `void` `shutdown`(`kotlinx.coroutines.i1` v5 @kind this) @signature `Lkotlinx/coroutines/i1;.shutdown:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2ce5c8.  v0:= `@@kotlinx.coroutines.a3.a` @type ^`kotlinx.coroutines.a3` @kind object;
  #L2ce5cc.  call `c`(v0) @signature `Lkotlinx/coroutines/a3;.c:()V` @kind virtual;
  #L2ce5d2.  v0:= 1I;
  #L2ce5d4.  call `r1`(v5, v0) @signature `Lkotlinx/coroutines/i1;.r1:(Z)V` @kind direct;
  #L2ce5da.  call `h1`(v5) @signature `Lkotlinx/coroutines/i1;.h1:()V` @kind direct;
  #L2ce5e0.  call temp:= `a1`(v5) @signature `Lkotlinx/coroutines/i1;.a1:()J` @kind virtual;
  #L2ce5e6.  v0:= temp @kind wide;
  #L2ce5e8.  v2:= 0L;
  #L2ce5ec.  v4:= lcmp(v0, v2);
  #L2ce5f0.  if v4 > 0 then goto L2ce5f6;
  #L2ce5f4.  goto L2ce5e0;
  #L2ce5f6.  call `m1`(v5) @signature `Lkotlinx/coroutines/i1;.m1:()V` @kind direct;
  #L2ce5fc.  return @kind void;
}
procedure `kotlinx.coroutines.z0` `v`(`kotlinx.coroutines.i1` v0 @kind this, `long` v1 , `java.lang.Runnable` v3 @kind object, `kotlin.coroutines.CoroutineContext` v4 @kind object) @signature `Lkotlinx/coroutines/i1;.v:(JLjava/lang/Runnable;Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/z0;` @AccessFlag PUBLIC {
    temp;

  #L2ce124.  call temp:= `a`(v0, v1, v3, v4) @signature `Lkotlinx/coroutines/s0;.a:(Lkotlinx/coroutines/t0;JLjava/lang/Runnable;Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/z0;` @kind static;
  #L2ce12a.  v1:= temp @kind object;
  #L2ce12c.  return v1 @kind object;
}
