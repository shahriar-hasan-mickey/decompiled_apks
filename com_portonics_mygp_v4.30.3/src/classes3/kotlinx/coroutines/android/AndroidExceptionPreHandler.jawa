record `kotlinx.coroutines.android.AndroidExceptionPreHandler` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.AbstractCoroutineContextElement` @kind class, `kotlinx.coroutines.CoroutineExceptionHandler` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`kotlinx.coroutines.android.AndroidExceptionPreHandler` v1 @kind this) @signature `Lkotlinx/coroutines/android/AndroidExceptionPreHandler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2d1014.  v0:= `@@kotlinx.coroutines.CoroutineExceptionHandler.l0` @type ^`kotlinx.coroutines.f0` @kind object;
  #L2d1018.  call `<init>`(v1, v0) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.<init>:(Lkotlin/coroutines/CoroutineContext$Key;)V` @kind direct;
  #L2d101e.  v1.`kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler` @type ^`java.lang.Object` := v1 @kind object;
  #L2d1022.  return @kind void;
}
procedure `java.lang.reflect.Method` `preHandler`(`kotlinx.coroutines.android.AndroidExceptionPreHandler` v5 @kind this) @signature `Lkotlinx/coroutines/android/AndroidExceptionPreHandler;.preHandler:()Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d0f9c.  v0:= v5.`kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler` @type ^`java.lang.Object` @kind object;
  #L2d0fa0.  if v0 == v5 then goto L2d0faa;
  #L2d0fa4.  v0:= (`java.lang.reflect.Method`) v0 @kind object;
  #L2d0fa8.  return v0 @kind object;
  #L2d0faa.  v0:= 0I;
  #L2d0fac.  v1:= constclass @type ^`java.lang.Thread` @kind object;
  #L2d0fb0.  v2:= "getUncaughtExceptionPreHandler" @kind object;
  #L2d0fb4.  v3:= 0I;
  #L2d0fb6.  v4:= new `java.lang.Class`[v3];
  #L2d0fba.  call temp:= `getDeclaredMethod`(v1, v2, v4) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L2d0fc0.  v1:= temp @kind object;
  #L2d0fc2.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L2d0fc8.  v2:= temp;
  #L2d0fca.  call temp:= `isPublic`(v2) @signature `Ljava/lang/reflect/Modifier;.isPublic:(I)Z` @kind static;
  #L2d0fd0.  v2:= temp;
  #L2d0fd2.  if v2 == 0 then goto L2d0fec;
  #L2d0fd6.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L2d0fdc.  v2:= temp;
  #L2d0fde.  call temp:= `isStatic`(v2) @signature `Ljava/lang/reflect/Modifier;.isStatic:(I)Z` @kind static;
  #L2d0fe4.  v2:= temp;
  #L2d0fe6.  if v2 == 0 then goto L2d0fec;
  #L2d0fea.  v3:= 1I;
  #L2d0fec.  if v3 == 0 then goto L2d0ff2;
  #L2d0ff0.  v0:= v1 @kind object;
  #L2d0ff2.  v5.`kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler` @type ^`java.lang.Object` := v0 @kind object;
  #L2d0ff6.  return v0 @kind object;
  catch `java.lang.Throwable` @[L2d0fac..L2d0fe6] goto L2d0ff2;
}
procedure `void` `handleException`(`kotlinx.coroutines.android.AndroidExceptionPreHandler` v2 @kind this, `kotlin.coroutines.CoroutineContext` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lkotlinx/coroutines/android/AndroidExceptionPreHandler;.handleException:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d1034.  v3:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L2d1038.  v0:= 0I;
  #L2d103a.  v1:= 26I;
  #L2d103e.  if v1 > v3 then goto L2d104e;
  #L2d1042.  v1:= 28I;
  #L2d1046.  if v3 >= v1 then goto L2d104e;
  #L2d104a.  v3:= 1I;
  #L2d104c.  goto L2d1050;
  #L2d104e.  v3:= 0I;
  #L2d1050.  if v3 == 0 then goto L2d1094;
  #L2d1054.  call temp:= `preHandler`(v2) @signature `Lkotlinx/coroutines/android/AndroidExceptionPreHandler;.preHandler:()Ljava/lang/reflect/Method;` @kind direct;
  #L2d105a.  v3:= temp @kind object;
  #L2d105c.  v1:= 0I;
  #L2d105e.  if v3 != 0 then goto L2d1066;
  #L2d1062.  v3:= v1 @kind object;
  #L2d1064.  goto L2d1072;
  #L2d1066.  v0:= new `java.lang.Object`[v0];
  #L2d106a.  call temp:= `invoke`(v3, v1, v0) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2d1070.  v3:= temp @kind object;
  #L2d1072.  v0:= instanceof @variable v3 @type ^`java.lang.Thread$UncaughtExceptionHandler` @kind boolean;
  #L2d1076.  if v0 == 0 then goto L2d1080;
  #L2d107a.  v1:= v3 @kind object;
  #L2d107c.  v1:= (`java.lang.Thread$UncaughtExceptionHandler`) v1 @kind object;
  #L2d1080.  if v1 != 0 then goto L2d1086;
  #L2d1084.  goto L2d1094;
  #L2d1086.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L2d108c.  v3:= temp @kind object;
  #L2d108e.  call `uncaughtException`(v1, v3, v4) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L2d1094.  return @kind void;
}
