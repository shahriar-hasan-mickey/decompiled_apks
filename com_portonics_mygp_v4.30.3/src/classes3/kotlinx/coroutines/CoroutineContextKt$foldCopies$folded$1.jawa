record `kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `boolean` `kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1.$isNewCoroutine` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.internal.Ref$ObjectRef` `kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1.$leftoverContext` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1` v0 @kind this, `kotlin.jvm.internal.Ref$ObjectRef` v1 @kind object, `boolean` v2 ) @signature `Lkotlinx/coroutines/CoroutineContextKt$foldCopies$folded$1;.<init>:(Lkotlin/jvm/internal/Ref$ObjectRef;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2cba8c.  v0.`kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1.$leftoverContext` @type ^`kotlin.jvm.internal.Ref$ObjectRef` := v1 @kind object;
  #L2cba90.  v0.`kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1.$isNewCoroutine` @type ^`boolean` := v2 @kind boolean;
  #L2cba94.  v1:= 2I;
  #L2cba96.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L2cba9c.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/CoroutineContextKt$foldCopies$folded$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2cba4c.  v1:= (`kotlin.coroutines.CoroutineContext`) v1 @kind object;
  #L2cba50.  v2:= (`kotlin.coroutines.CoroutineContext$Element`) v2 @kind object;
  #L2cba54.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/CoroutineContextKt$foldCopies$folded$1;.invoke:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext$Element;)Lkotlin/coroutines/CoroutineContext;` @kind virtual;
  #L2cba5a.  v1:= temp @kind object;
  #L2cba5c.  return v1 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `invoke`(`kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `kotlin.coroutines.CoroutineContext$Element` v2 @kind object) @signature `Lkotlinx/coroutines/CoroutineContextKt$foldCopies$folded$1;.invoke:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext$Element;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2cba70.  call temp:= `plus`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2cba76.  v1:= temp @kind object;
  #L2cba78.  return v1 @kind object;
}
