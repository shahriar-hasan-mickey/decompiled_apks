record `kotlinx.coroutines.flow.DistinctFlowImpl` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.d` @kind interface {
  `kotlinx.coroutines.flow.d` `kotlinx.coroutines.flow.DistinctFlowImpl.b` @AccessFlag PRIVATE_FINAL;
  `kotlin.jvm.functions.Function1` `kotlinx.coroutines.flow.DistinctFlowImpl.c` @AccessFlag PUBLIC_FINAL;
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.DistinctFlowImpl.d` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.DistinctFlowImpl` v0 @kind this, `kotlinx.coroutines.flow.d` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlinx/coroutines/flow/DistinctFlowImpl;.<init>:(Lkotlinx/coroutines/flow/d;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2d9f98.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d9f9e.  v0.`kotlinx.coroutines.flow.DistinctFlowImpl.b` @type ^`kotlinx.coroutines.flow.d` := v1 @kind object;
  #L2d9fa2.  v0.`kotlinx.coroutines.flow.DistinctFlowImpl.c` @type ^`kotlin.jvm.functions.Function1` := v2 @kind object;
  #L2d9fa6.  v0.`kotlinx.coroutines.flow.DistinctFlowImpl.d` @type ^`kotlin.jvm.functions.Function2` := v3 @kind object;
  #L2d9faa.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.DistinctFlowImpl` v3 @kind this, `kotlinx.coroutines.flow.e` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/DistinctFlowImpl;.a:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2d9f4c.  v0:= new `kotlin.jvm.internal.Ref$ObjectRef`;
  #L2d9f50.  call `<init>`(v0) @signature `Lkotlin/jvm/internal/Ref$ObjectRef;.<init>:()V` @kind direct;
  #L2d9f56.  v1:= `@@kotlinx.coroutines.flow.internal.o.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d9f5a.  v0.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` := v1 @kind object;
  #L2d9f5e.  v1:= v3.`kotlinx.coroutines.flow.DistinctFlowImpl.b` @type ^`kotlinx.coroutines.flow.d` @kind object;
  #L2d9f62.  v2:= new `kotlinx.coroutines.flow.DistinctFlowImpl$collect$2`;
  #L2d9f66.  call `<init>`(v2, v3, v0, v4) @signature `Lkotlinx/coroutines/flow/DistinctFlowImpl$collect$2;.<init>:(Lkotlinx/coroutines/flow/DistinctFlowImpl;Lkotlin/jvm/internal/Ref$ObjectRef;Lkotlinx/coroutines/flow/e;)V` @kind direct;
  #L2d9f6c.  call temp:= `a`(v1, v2, v5) @signature `Lkotlinx/coroutines/flow/d;.a:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L2d9f72.  v4:= temp @kind object;
  #L2d9f74.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2d9f7a.  v5:= temp @kind object;
  #L2d9f7c.  if v4 != v5 then goto L2d9f82;
  #L2d9f80.  return v4 @kind object;
  #L2d9f82.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2d9f86.  return v4 @kind object;
}
