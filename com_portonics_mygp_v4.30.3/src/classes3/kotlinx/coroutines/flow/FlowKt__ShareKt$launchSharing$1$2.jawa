record `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.$initialValue` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.n1` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.$shared` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.d` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.$upstream` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.L$0` @AccessFlag SYNTHETIC;
  `int` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.label` @AccessFlag ;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2` v0 @kind this, `kotlinx.coroutines.flow.d` v1 @kind object, `kotlinx.coroutines.flow.n1` v2 @kind object, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.<init>:(Lkotlinx/coroutines/flow/d;Lkotlinx/coroutines/flow/n1;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2defd0.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.$upstream` @type ^`kotlinx.coroutines.flow.d` := v1 @kind object;
  #L2defd4.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.$shared` @type ^`kotlinx.coroutines.flow.n1` := v2 @kind object;
  #L2defd8.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.$initialValue` @type ^`java.lang.Object` := v3 @kind object;
  #L2defdc.  v1:= 2I;
  #L2defde.  call `<init>`(v0, v1, v4) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L2defe4.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2` v4 @kind this, `java.lang.Object` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2defa4.  v0:= new `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2`;
  #L2defa8.  v1:= v4.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.$upstream` @type ^`kotlinx.coroutines.flow.d` @kind object;
  #L2defac.  v2:= v4.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.$shared` @type ^`kotlinx.coroutines.flow.n1` @kind object;
  #L2defb0.  v3:= v4.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.$initialValue` @type ^`java.lang.Object` @kind object;
  #L2defb4.  call `<init>`(v0, v1, v2, v3, v6) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.<init>:(Lkotlinx/coroutines/flow/d;Lkotlinx/coroutines/flow/n1;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2defba.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.L$0` @type ^`java.lang.Object` := v5 @kind object;
  #L2defbe.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2deea8.  v1:= (`kotlinx.coroutines.flow.SharingCommand`) v1 @kind object;
  #L2deeac.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L2deeb0.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.invoke:(Lkotlinx/coroutines/flow/SharingCommand;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2deeb6.  v1:= temp @kind object;
  #L2deeb8.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2` v0 @kind this, `kotlinx.coroutines.flow.SharingCommand` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.invoke:(Lkotlinx/coroutines/flow/SharingCommand;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2deecc.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2deed2.  v1:= temp @kind object;
  #L2deed4.  v1:= (`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2`) v1 @kind object;
  #L2deed8.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2deedc.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2deee2.  v1:= temp @kind object;
  #L2deee4.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2deef8.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2deefe.  v0:= temp @kind object;
  #L2def00.  v1:= v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.label` @type ^`int`;
  #L2def04.  v2:= 1I;
  #L2def06.  if v1 == 0 then goto L2def26;
  #L2def0a.  if v1 != v2 then goto L2def16;
  #L2def0e.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2def14.  goto L2def8e;
  #L2def16.  v4:= new `java.lang.IllegalStateException`;
  #L2def1a.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2def1e.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2def24.  throw v4;
  #L2def26.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2def2c.  v4:= v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.L$0` @type ^`java.lang.Object` @kind object;
  #L2def30.  v4:= (`kotlinx.coroutines.flow.SharingCommand`) v4 @kind object;
  #L2def34.  v1:= `@@kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2$a.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L2def38.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2def3e.  v4:= temp;
  #L2def40.  v4:= v1[v4];
  #L2def44.  if v4 == v2 then goto L2def74;
  #L2def48.  v0:= 3I;
  #L2def4a.  if v4 == v0 then goto L2def50;
  #L2def4e.  goto L2def8e;
  #L2def50.  v4:= v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.$initialValue` @type ^`java.lang.Object` @kind object;
  #L2def54.  v0:= `@@kotlinx.coroutines.flow.t1.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2def58.  if v4 != v0 then goto L2def68;
  #L2def5c.  v4:= v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.$shared` @type ^`kotlinx.coroutines.flow.n1` @kind object;
  #L2def60.  call `c`(v4) @signature `Lkotlinx/coroutines/flow/n1;.c:()V` @kind interface;
  #L2def66.  goto L2def8e;
  #L2def68.  v0:= v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.$shared` @type ^`kotlinx.coroutines.flow.n1` @kind object;
  #L2def6c.  call temp:= `d`(v0, v4) @signature `Lkotlinx/coroutines/flow/n1;.d:(Ljava/lang/Object;)Z` @kind interface;
  #L2def72.  goto L2def8e;
  #L2def74.  v4:= v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.$upstream` @type ^`kotlinx.coroutines.flow.d` @kind object;
  #L2def78.  v1:= v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.$shared` @type ^`kotlinx.coroutines.flow.n1` @kind object;
  #L2def7c.  v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2.label` @type ^`int` := v2;
  #L2def80.  call temp:= `a`(v4, v1, v3) @signature `Lkotlinx/coroutines/flow/d;.a:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L2def86.  v4:= temp @kind object;
  #L2def88.  if v4 != v0 then goto L2def8e;
  #L2def8c.  return v0 @kind object;
  #L2def8e.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2def92.  return v4 @kind object;
}
