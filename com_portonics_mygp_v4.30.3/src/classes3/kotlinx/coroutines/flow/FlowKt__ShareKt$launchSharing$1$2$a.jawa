record `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2$a` @kind class @AccessFlag PUBLIC_ABSTRACT_SYNTHETIC {
}
global `int`[] `@@kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2$a.$EnumSwitchMapping$0` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$2$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2dee4c.  call temp:= `values`() @signature `Lkotlinx/coroutines/flow/SharingCommand;.values:()[Lkotlinx/coroutines/flow/SharingCommand;` @kind static;
  #L2dee52.  v0:= temp @kind object;
  #L2dee54.  v0:= length @variable v0;
  #L2dee56.  v0:= new `int`[v0];
  #L2dee5a.  v1:= `@@kotlinx.coroutines.flow.SharingCommand.START` @type ^`kotlinx.coroutines.flow.SharingCommand` @kind object;
  #L2dee5e.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2dee64.  v1:= temp;
  #L2dee66.  v2:= 1I;
  #L2dee68.  v0[v1]:= v2;
  #L2dee6c.  v1:= `@@kotlinx.coroutines.flow.SharingCommand.STOP` @type ^`kotlinx.coroutines.flow.SharingCommand` @kind object;
  #L2dee70.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2dee76.  v1:= temp;
  #L2dee78.  v2:= 2I;
  #L2dee7a.  v0[v1]:= v2;
  #L2dee7e.  v1:= `@@kotlinx.coroutines.flow.SharingCommand.STOP_AND_RESET_REPLAY_CACHE` @type ^`kotlinx.coroutines.flow.SharingCommand` @kind object;
  #L2dee82.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2dee88.  v1:= temp;
  #L2dee8a.  v2:= 3I;
  #L2dee8c.  v0[v1]:= v2;
  #L2dee90.  `@@kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$2$a.$EnumSwitchMapping$0` @type ^`int`[] := v0 @kind object;
  #L2dee94.  return @kind void;
}
