record `kotlinx.coroutines.flow.b2` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.internal.c` @kind class {
  `java.lang.Object` `kotlinx.coroutines.flow.b2._state` @AccessFlag VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.flow.b2.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/flow/b2;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2e3e04.  v0:= constclass @type ^`kotlinx.coroutines.flow.b2` @kind object;
  #L2e3e08.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L2e3e0c.  v2:= "_state" @kind object;
  #L2e3e10.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L2e3e16.  v0:= temp @kind object;
  #L2e3e18.  `@@kotlinx.coroutines.flow.b2.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L2e3e1c.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.b2` v1 @kind this) @signature `Lkotlinx/coroutines/flow/b2;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2e3e30.  call `<init>`(v1) @signature `Lkotlinx/coroutines/flow/internal/c;.<init>:()V` @kind direct;
  #L2e3e36.  v0:= 0I;
  #L2e3e38.  v1.`kotlinx.coroutines.flow.b2._state` @type ^`java.lang.Object` := v0 @kind object;
  #L2e3e3c.  return @kind void;
}
procedure `boolean` `a`(`kotlinx.coroutines.flow.b2` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/b2;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2e3c34.  v1:= (`kotlinx.coroutines.flow.StateFlowImpl`) v1 @kind object;
  #L2e3c38.  call temp:= `c`(v0, v1) @signature `Lkotlinx/coroutines/flow/b2;.c:(Lkotlinx/coroutines/flow/StateFlowImpl;)Z` @kind virtual;
  #L2e3c3e.  v1:= temp;
  #L2e3c40.  return v1;
}
procedure `kotlin.coroutines.Continuation`[] `b`(`kotlinx.coroutines.flow.b2` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/b2;.b:(Ljava/lang/Object;)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2e3dc8.  v1:= (`kotlinx.coroutines.flow.StateFlowImpl`) v1 @kind object;
  #L2e3dcc.  call temp:= `e`(v0, v1) @signature `Lkotlinx/coroutines/flow/b2;.e:(Lkotlinx/coroutines/flow/StateFlowImpl;)[Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2e3dd2.  v1:= temp @kind object;
  #L2e3dd4.  return v1 @kind object;
}
procedure `boolean` `c`(`kotlinx.coroutines.flow.b2` v0 @kind this, `kotlinx.coroutines.flow.StateFlowImpl` v1 @kind object) @signature `Lkotlinx/coroutines/flow/b2;.c:(Lkotlinx/coroutines/flow/StateFlowImpl;)Z` @AccessFlag PUBLIC {
    temp;

  #L2e3c54.  v1:= v0.`kotlinx.coroutines.flow.b2._state` @type ^`java.lang.Object` @kind object;
  #L2e3c58.  if v1 == 0 then goto L2e3c60;
  #L2e3c5c.  v1:= 0I;
  #L2e3c5e.  return v1;
  #L2e3c60.  call temp:= `b`() @signature `Lkotlinx/coroutines/flow/a2;.b:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2e3c66.  v1:= temp @kind object;
  #L2e3c68.  v0.`kotlinx.coroutines.flow.b2._state` @type ^`java.lang.Object` := v1 @kind object;
  #L2e3c6c.  v1:= 1I;
  #L2e3c6e.  return v1;
}
procedure `java.lang.Object` `d`(`kotlinx.coroutines.flow.b2` v4 @kind this, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/b2;.d:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e3ce4.  v0:= new `kotlinx.coroutines.p`;
  #L2e3ce8.  call temp:= `intercepted`(v5) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.intercepted:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L2e3cee.  v1:= temp @kind object;
  #L2e3cf0.  v2:= 1I;
  #L2e3cf2.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/p;.<init>:(Lkotlin/coroutines/Continuation;I)V` @kind direct;
  #L2e3cf8.  call `A`(v0) @signature `Lkotlinx/coroutines/p;.A:()V` @kind virtual;
  #L2e3cfe.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e3d04.  v1:= temp;
  #L2e3d06.  if v1 == 0 then goto L2e3d26;
  #L2e3d0a.  v1:= v4.`kotlinx.coroutines.flow.b2._state` @type ^`java.lang.Object` @kind object;
  #L2e3d0e.  v1:= instanceof @variable v1 @type ^`kotlinx.coroutines.p` @kind boolean;
  #L2e3d12.  v1:= v1 ^~ v2 @kind int;
  #L2e3d14.  if v1 == 0 then goto L2e3d1a;
  #L2e3d18.  goto L2e3d26;
  #L2e3d1a.  v5:= new `java.lang.AssertionError`;
  #L2e3d1e.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e3d24.  throw v5;
  #L2e3d26.  v1:= `@@kotlinx.coroutines.flow.b2.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e3d2a.  call temp:= `b`() @signature `Lkotlinx/coroutines/flow/a2;.b:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2e3d30.  v3:= temp @kind object;
  #L2e3d32.  call temp:= `compareAndSet`(v1, v4, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e3d38.  v1:= temp;
  #L2e3d3a.  if v1 == 0 then goto L2e3d40;
  #L2e3d3e.  goto L2e3d88;
  #L2e3d40.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e3d46.  v1:= temp;
  #L2e3d48.  if v1 == 0 then goto L2e3d72;
  #L2e3d4c.  v1:= v4.`kotlinx.coroutines.flow.b2._state` @type ^`java.lang.Object` @kind object;
  #L2e3d50.  call temp:= `c`() @signature `Lkotlinx/coroutines/flow/a2;.c:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2e3d56.  v3:= temp @kind object;
  #L2e3d58.  if v1 != v3 then goto L2e3d5e;
  #L2e3d5c.  goto L2e3d60;
  #L2e3d5e.  v2:= 0I;
  #L2e3d60.  if v2 == 0 then goto L2e3d66;
  #L2e3d64.  goto L2e3d72;
  #L2e3d66.  v5:= new `java.lang.AssertionError`;
  #L2e3d6a.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e3d70.  throw v5;
  #L2e3d72.  v1:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L2e3d76.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e3d7a.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2e3d80.  v1:= temp @kind object;
  #L2e3d82.  call `resumeWith`(v0, v1) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L2e3d88.  call temp:= `w`(v0) @signature `Lkotlinx/coroutines/p;.w:()Ljava/lang/Object;` @kind virtual;
  #L2e3d8e.  v0:= temp @kind object;
  #L2e3d90.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e3d96.  v1:= temp @kind object;
  #L2e3d98.  if v0 != v1 then goto L2e3da2;
  #L2e3d9c.  call `probeCoroutineSuspended`(v5) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L2e3da2.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e3da8.  v5:= temp @kind object;
  #L2e3daa.  if v0 != v5 then goto L2e3db0;
  #L2e3dae.  return v0 @kind object;
  #L2e3db0.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e3db4.  return v5 @kind object;
}
procedure `kotlin.coroutines.Continuation`[] `e`(`kotlinx.coroutines.flow.b2` v0 @kind this, `kotlinx.coroutines.flow.StateFlowImpl` v1 @kind object) @signature `Lkotlinx/coroutines/flow/b2;.e:(Lkotlinx/coroutines/flow/StateFlowImpl;)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC {
    temp;

  #L2e3de8.  v1:= 0I;
  #L2e3dea.  v0.`kotlinx.coroutines.flow.b2._state` @type ^`java.lang.Object` := v1 @kind object;
  #L2e3dee.  v1:= `@@kotlinx.coroutines.flow.internal.b.a` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L2e3df2.  return v1 @kind object;
}
procedure `void` `f`(`kotlinx.coroutines.flow.b2` v3 @kind this) @signature `Lkotlinx/coroutines/flow/b2;.f:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2e3e50.  v0:= v3.`kotlinx.coroutines.flow.b2._state` @type ^`java.lang.Object` @kind object;
  #L2e3e54.  if v0 != 0 then goto L2e3e5a;
  #L2e3e58.  return @kind void;
  #L2e3e5a.  call temp:= `c`() @signature `Lkotlinx/coroutines/flow/a2;.c:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2e3e60.  v1:= temp @kind object;
  #L2e3e62.  if v0 != v1 then goto L2e3e68;
  #L2e3e66.  return @kind void;
  #L2e3e68.  call temp:= `b`() @signature `Lkotlinx/coroutines/flow/a2;.b:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2e3e6e.  v1:= temp @kind object;
  #L2e3e70.  if v0 != v1 then goto L2e3e8e;
  #L2e3e74.  v1:= `@@kotlinx.coroutines.flow.b2.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e3e78.  call temp:= `c`() @signature `Lkotlinx/coroutines/flow/a2;.c:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2e3e7e.  v2:= temp @kind object;
  #L2e3e80.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e3e86.  v0:= temp;
  #L2e3e88.  if v0 == 0 then goto L2e3e50;
  #L2e3e8c.  return @kind void;
  #L2e3e8e.  v1:= `@@kotlinx.coroutines.flow.b2.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e3e92.  call temp:= `b`() @signature `Lkotlinx/coroutines/flow/a2;.b:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2e3e98.  v2:= temp @kind object;
  #L2e3e9a.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e3ea0.  v1:= temp;
  #L2e3ea2.  if v1 == 0 then goto L2e3e50;
  #L2e3ea6.  v0:= (`kotlinx.coroutines.p`) v0 @kind object;
  #L2e3eaa.  v1:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L2e3eae.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e3eb2.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2e3eb8.  v1:= temp @kind object;
  #L2e3eba.  call `resumeWith`(v0, v1) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L2e3ec0.  return @kind void;
}
procedure `boolean` `g`(`kotlinx.coroutines.flow.b2` v3 @kind this) @signature `Lkotlinx/coroutines/flow/b2;.g:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2e3c80.  v0:= `@@kotlinx.coroutines.flow.b2.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e3c84.  call temp:= `b`() @signature `Lkotlinx/coroutines/flow/a2;.b:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2e3c8a.  v1:= temp @kind object;
  #L2e3c8c.  call temp:= `getAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2e3c92.  v0:= temp @kind object;
  #L2e3c94.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2e3c9a.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e3ca0.  v1:= temp;
  #L2e3ca2.  v2:= 1I;
  #L2e3ca4.  if v1 == 0 then goto L2e3cc0;
  #L2e3ca8.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.p` @kind boolean;
  #L2e3cac.  v1:= v1 ^~ v2 @kind int;
  #L2e3cae.  if v1 == 0 then goto L2e3cb4;
  #L2e3cb2.  goto L2e3cc0;
  #L2e3cb4.  v0:= new `java.lang.AssertionError`;
  #L2e3cb8.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e3cbe.  throw v0;
  #L2e3cc0.  call temp:= `c`() @signature `Lkotlinx/coroutines/flow/a2;.c:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2e3cc6.  v1:= temp @kind object;
  #L2e3cc8.  if v0 != v1 then goto L2e3cce;
  #L2e3ccc.  goto L2e3cd0;
  #L2e3cce.  v2:= 0I;
  #L2e3cd0.  return v2;
}
