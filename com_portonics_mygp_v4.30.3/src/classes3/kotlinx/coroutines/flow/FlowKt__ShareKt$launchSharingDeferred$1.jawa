record `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `kotlinx.coroutines.x` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.$result` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.d` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.$upstream` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.L$0` @AccessFlag PRIVATE_SYNTHETIC;
  `int` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.label` @AccessFlag ;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1` v0 @kind this, `kotlinx.coroutines.flow.d` v1 @kind object, `kotlinx.coroutines.x` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharingDeferred$1;.<init>:(Lkotlinx/coroutines/flow/d;Lkotlinx/coroutines/x;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2df384.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.$upstream` @type ^`kotlinx.coroutines.flow.d` := v1 @kind object;
  #L2df388.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.$result` @type ^`kotlinx.coroutines.x` := v2 @kind object;
  #L2df38c.  v1:= 2I;
  #L2df38e.  call `<init>`(v0, v1, v3) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L2df394.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharingDeferred$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2df35c.  v0:= new `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1`;
  #L2df360.  v1:= v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.$upstream` @type ^`kotlinx.coroutines.flow.d` @kind object;
  #L2df364.  v2:= v3.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.$result` @type ^`kotlinx.coroutines.x` @kind object;
  #L2df368.  call `<init>`(v0, v1, v2, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharingDeferred$1;.<init>:(Lkotlinx/coroutines/flow/d;Lkotlinx/coroutines/x;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2df36e.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.L$0` @type ^`java.lang.Object` := v4 @kind object;
  #L2df372.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharingDeferred$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2df268.  v1:= (`kotlinx.coroutines.m0`) v1 @kind object;
  #L2df26c.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L2df270.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharingDeferred$1;.invoke:(Lkotlinx/coroutines/m0;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2df276.  v1:= temp @kind object;
  #L2df278.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1` v0 @kind this, `kotlinx.coroutines.m0` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharingDeferred$1;.invoke:(Lkotlinx/coroutines/m0;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2df28c.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharingDeferred$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2df292.  v1:= temp @kind object;
  #L2df294.  v1:= (`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1`) v1 @kind object;
  #L2df298.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2df29c.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharingDeferred$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2df2a2.  v1:= temp @kind object;
  #L2df2a4.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharingDeferred$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2df2b8.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2df2be.  v0:= temp @kind object;
  #L2df2c0.  v1:= v6.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.label` @type ^`int`;
  #L2df2c4.  v2:= 1I;
  #L2df2c6.  if v1 == 0 then goto L2df2ea;
  #L2df2ca.  if v1 != v2 then goto L2df2da;
  #L2df2ce.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2df2d4.  goto L2df326;
  #L2df2d6.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2df2d8.  goto L2df32c;
  #L2df2da.  v7:= new `java.lang.IllegalStateException`;
  #L2df2de.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2df2e2.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2df2e8.  throw v7;
  #L2df2ea.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2df2f0.  v7:= v6.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2df2f4.  v7:= (`kotlinx.coroutines.m0`) v7 @kind object;
  #L2df2f8.  v1:= new `kotlin.jvm.internal.Ref$ObjectRef`;
  #L2df2fc.  call `<init>`(v1) @signature `Lkotlin/jvm/internal/Ref$ObjectRef;.<init>:()V` @kind direct;
  #L2df302.  v3:= v6.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.$upstream` @type ^`kotlinx.coroutines.flow.d` @kind object;
  #L2df306.  v4:= new `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1$a`;
  #L2df30a.  v5:= v6.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.$result` @type ^`kotlinx.coroutines.x` @kind object;
  #L2df30e.  call `<init>`(v4, v1, v7, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharingDeferred$1$a;.<init>:(Lkotlin/jvm/internal/Ref$ObjectRef;Lkotlinx/coroutines/m0;Lkotlinx/coroutines/x;)V` @kind direct;
  #L2df314.  v6.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.label` @type ^`int` := v2;
  #L2df318.  call temp:= `a`(v3, v4, v6) @signature `Lkotlinx/coroutines/flow/d;.a:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L2df31e.  v7:= temp @kind object;
  #L2df320.  if v7 != v0 then goto L2df326;
  #L2df324.  return v0 @kind object;
  #L2df326.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2df32a.  return v7 @kind object;
  #L2df32c.  v0:= v6.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.$result` @type ^`kotlinx.coroutines.x` @kind object;
  #L2df330.  call temp:= `m0`(v0, v7) @signature `Lkotlinx/coroutines/x;.m0:(Ljava/lang/Throwable;)Z` @kind interface;
  #L2df336.  throw v7;
  catch `java.lang.Throwable` @[L2df2ce..L2df2d4] goto L2df2d6;
  catch `java.lang.Throwable` @[L2df2f8..L2df320] goto L2df2d6;
}
