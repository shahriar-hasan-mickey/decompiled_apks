record `kotlinx.coroutines.flow.u1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.internal.c` @kind class {
  `long` `kotlinx.coroutines.flow.u1.a` @AccessFlag PUBLIC;
  `kotlin.coroutines.Continuation` `kotlinx.coroutines.flow.u1.b` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.u1` v2 @kind this) @signature `Lkotlinx/coroutines/flow/u1;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2e2f40.  call `<init>`(v2) @signature `Lkotlinx/coroutines/flow/internal/c;.<init>:()V` @kind direct;
  #L2e2f46.  v0:= -1L;
  #L2e2f4a.  v2.`kotlinx.coroutines.flow.u1.a` @type ^`long` := v0 @kind wide;
  #L2e2f4e.  return @kind void;
}
procedure `boolean` `a`(`kotlinx.coroutines.flow.u1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/u1;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2e2e6c.  v1:= (`kotlinx.coroutines.flow.SharedFlowImpl`) v1 @kind object;
  #L2e2e70.  call temp:= `c`(v0, v1) @signature `Lkotlinx/coroutines/flow/u1;.c:(Lkotlinx/coroutines/flow/SharedFlowImpl;)Z` @kind virtual;
  #L2e2e76.  v1:= temp;
  #L2e2e78.  return v1;
}
procedure `kotlin.coroutines.Continuation`[] `b`(`kotlinx.coroutines.flow.u1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/u1;.b:(Ljava/lang/Object;)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2e2ec0.  v1:= (`kotlinx.coroutines.flow.SharedFlowImpl`) v1 @kind object;
  #L2e2ec4.  call temp:= `d`(v0, v1) @signature `Lkotlinx/coroutines/flow/u1;.d:(Lkotlinx/coroutines/flow/SharedFlowImpl;)[Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2e2eca.  v1:= temp @kind object;
  #L2e2ecc.  return v1 @kind object;
}
procedure `boolean` `c`(`kotlinx.coroutines.flow.u1` v5 @kind this, `kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind object) @signature `Lkotlinx/coroutines/flow/u1;.c:(Lkotlinx/coroutines/flow/SharedFlowImpl;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2e2e8c.  v0:= v5.`kotlinx.coroutines.flow.u1.a` @type ^`long` @kind wide;
  #L2e2e90.  v2:= 0L;
  #L2e2e94.  v4:= lcmp(v0, v2);
  #L2e2e98.  if v4 < 0 then goto L2e2ea0;
  #L2e2e9c.  v6:= 0I;
  #L2e2e9e.  return v6;
  #L2e2ea0.  call temp:= `X`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.X:()J` @kind virtual;
  #L2e2ea6.  v0:= temp @kind wide;
  #L2e2ea8.  v5.`kotlinx.coroutines.flow.u1.a` @type ^`long` := v0 @kind wide;
  #L2e2eac.  v6:= 1I;
  #L2e2eae.  return v6;
}
procedure `kotlin.coroutines.Continuation`[] `d`(`kotlinx.coroutines.flow.u1` v5 @kind this, `kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind object) @signature `Lkotlinx/coroutines/flow/u1;.d:(Lkotlinx/coroutines/flow/SharedFlowImpl;)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2e2ee0.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e2ee6.  v0:= temp;
  #L2e2ee8.  if v0 == 0 then goto L2e2f14;
  #L2e2eec.  v0:= v5.`kotlinx.coroutines.flow.u1.a` @type ^`long` @kind wide;
  #L2e2ef0.  v2:= 0L;
  #L2e2ef4.  v4:= lcmp(v0, v2);
  #L2e2ef8.  if v4 < 0 then goto L2e2f00;
  #L2e2efc.  v0:= 1I;
  #L2e2efe.  goto L2e2f02;
  #L2e2f00.  v0:= 0I;
  #L2e2f02.  if v0 == 0 then goto L2e2f08;
  #L2e2f06.  goto L2e2f14;
  #L2e2f08.  v6:= new `java.lang.AssertionError`;
  #L2e2f0c.  call `<init>`(v6) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e2f12.  throw v6;
  #L2e2f14.  v0:= v5.`kotlinx.coroutines.flow.u1.a` @type ^`long` @kind wide;
  #L2e2f18.  v2:= -1L;
  #L2e2f1c.  v5.`kotlinx.coroutines.flow.u1.a` @type ^`long` := v2 @kind wide;
  #L2e2f20.  v2:= 0I;
  #L2e2f22.  v5.`kotlinx.coroutines.flow.u1.b` @type ^`kotlin.coroutines.Continuation` := v2 @kind object;
  #L2e2f26.  call temp:= `W`(v6, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.W:(J)[Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2e2f2c.  v6:= temp @kind object;
  #L2e2f2e.  return v6 @kind object;
}
