record `kotlinx.coroutines.flow.w` @kind class @AccessFlag ABSTRACT_SYNTHETIC {
}
procedure `kotlinx.coroutines.flow.d` `a`(`kotlinx.coroutines.flow.d` v9 @kind object, `int` v10 , `kotlinx.coroutines.channels.BufferOverflow` v11 @kind object) @signature `Lkotlinx/coroutines/flow/w;.a:(Lkotlinx/coroutines/flow/d;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/d;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2da85c.  v0:= 1I;
  #L2da85e.  v1:= 0I;
  #L2da860.  v2:= -1I;
  #L2da862.  if v10 >= 0 then goto L2da876;
  #L2da866.  v3:= -2I;
  #L2da868.  if v10 == v3 then goto L2da876;
  #L2da86c.  if v10 != v2 then goto L2da872;
  #L2da870.  goto L2da876;
  #L2da872.  v3:= 0I;
  #L2da874.  goto L2da878;
  #L2da876.  v3:= 1I;
  #L2da878.  if v3 == 0 then goto L2da8f6;
  #L2da87c.  if v10 != v2 then goto L2da88c;
  #L2da880.  v3:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L2da884.  if v11 != v3 then goto L2da88a;
  #L2da888.  goto L2da88c;
  #L2da88a.  v0:= 0I;
  #L2da88c.  if v0 == 0 then goto L2da8de;
  #L2da890.  if v10 != v2 then goto L2da89e;
  #L2da894.  v11:= `@@kotlinx.coroutines.channels.BufferOverflow.DROP_OLDEST` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L2da898.  v6:= v11 @kind object;
  #L2da89a.  v5:= 0I;
  #L2da89c.  goto L2da8a2;
  #L2da89e.  v5:= v10;
  #L2da8a0.  v6:= v11 @kind object;
  #L2da8a2.  v10:= instanceof @variable v9 @type ^`kotlinx.coroutines.flow.internal.l` @kind boolean;
  #L2da8a6.  if v10 == 0 then goto L2da8c6;
  #L2da8aa.  v2:= v9 @kind object;
  #L2da8ac.  v2:= (`kotlinx.coroutines.flow.internal.l`) v2 @kind object;
  #L2da8b0.  v3:= 0I;
  #L2da8b2.  v9:= 1I;
  #L2da8b4.  v7:= 0I;
  #L2da8b6.  v4:= v5;
  #L2da8b8.  v5:= v6 @kind object;
  #L2da8ba.  v6:= v9;
  #L2da8bc.  call temp:= `a`(v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/flow/internal/k;.a:(Lkotlinx/coroutines/flow/internal/l;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILjava/lang/Object;)Lkotlinx/coroutines/flow/d;` @kind static;
  #L2da8c2.  v9:= temp @kind object;
  #L2da8c4.  goto L2da8dc;
  #L2da8c6.  v10:= new `kotlinx.coroutines.flow.internal.f`;
  #L2da8ca.  v4:= 0I;
  #L2da8cc.  v7:= 2I;
  #L2da8ce.  v8:= 0I;
  #L2da8d0.  v2:= v10 @kind object;
  #L2da8d2.  v3:= v9 @kind object;
  #L2da8d4.  call `<init>`(v2, v3, v4, v5, v6, v7, v8) @signature `Lkotlinx/coroutines/flow/internal/f;.<init>:(Lkotlinx/coroutines/flow/d;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2da8da.  v9:= v10 @kind object;
  #L2da8dc.  return v9 @kind object;
  #L2da8de.  v9:= new `java.lang.IllegalArgumentException`;
  #L2da8e2.  v10:= "CONFLATED capacity cannot be used with non-default onBufferOverflow" @kind object;
  #L2da8e6.  call temp:= `toString`(v10) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2da8ec.  v10:= temp @kind object;
  #L2da8ee.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2da8f4.  throw v9;
  #L2da8f6.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2da8fc.  v9:= temp @kind object;
  #L2da8fe.  v10:= "Buffer size should be non-negative, BUFFERED, or CONFLATED, but was " @kind object;
  #L2da902.  call temp:= `stringPlus`(v10, v9) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2da908.  v9:= temp @kind object;
  #L2da90a.  v10:= new `java.lang.IllegalArgumentException`;
  #L2da90e.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2da914.  v9:= temp @kind object;
  #L2da916.  call `<init>`(v10, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2da91c.  throw v10;
}
procedure `kotlinx.coroutines.flow.d` `b`(`kotlinx.coroutines.flow.d` v0 @kind object, `int` v1 , `kotlinx.coroutines.channels.BufferOverflow` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/w;.b:(Lkotlinx/coroutines/flow/d;ILkotlinx/coroutines/channels/BufferOverflow;ILjava/lang/Object;)Lkotlinx/coroutines/flow/d;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2da82c.  v4:= v3 ^& 1;
  #L2da830.  if v4 == 0 then goto L2da836;
  #L2da834.  v1:= -2I;
  #L2da836.  v3:= v3 ^& 2;
  #L2da83a.  if v3 == 0 then goto L2da842;
  #L2da83e.  v2:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L2da842.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/f;.a:(Lkotlinx/coroutines/flow/d;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/d;` @kind static;
  #L2da848.  v0:= temp @kind object;
  #L2da84a.  return v0 @kind object;
}
