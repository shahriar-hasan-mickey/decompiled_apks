record `kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.e` @kind interface {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1` v0 @kind this, `kotlin.jvm.functions.Function2` v1 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$collectWhile$collector$1;.<init>:(Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2dcc84.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1.b` @type ^`kotlin.jvm.functions.Function2` := v1 @kind object;
  #L2dcc88.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2dcc8e.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1` v4 @kind this, `java.lang.Object` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$collectWhile$collector$1;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2dcbc4.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1` @kind boolean;
  #L2dcbc8.  if v0 == 0 then goto L2dcbea;
  #L2dcbcc.  v0:= v6 @kind object;
  #L2dcbce.  v0:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1`) v0 @kind object;
  #L2dcbd2.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1.label` @type ^`int`;
  #L2dcbd6.  v2:= -2147483648I;
  #L2dcbda.  v3:= v1 ^& v2 @kind int;
  #L2dcbde.  if v3 == 0 then goto L2dcbea;
  #L2dcbe2.  v1:= v1 - v2 @kind int;
  #L2dcbe4.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1.label` @type ^`int` := v1;
  #L2dcbe8.  goto L2dcbf4;
  #L2dcbea.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1`;
  #L2dcbee.  call `<init>`(v0, v4, v6) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$collectWhile$collector$1$emit$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__LimitKt$collectWhile$collector$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2dcbf4.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1.result` @type ^`java.lang.Object` @kind object;
  #L2dcbf8.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2dcbfe.  v1:= temp @kind object;
  #L2dcc00.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1.label` @type ^`int`;
  #L2dcc04.  v3:= 1I;
  #L2dcc06.  if v2 == 0 then goto L2dcc2e;
  #L2dcc0a.  if v2 != v3 then goto L2dcc1e;
  #L2dcc0e.  v5:= v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2dcc12.  v5:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1`) v5 @kind object;
  #L2dcc16.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2dcc1c.  goto L2dcc50;
  #L2dcc1e.  v5:= new `java.lang.IllegalStateException`;
  #L2dcc22.  v6:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2dcc26.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2dcc2c.  throw v5;
  #L2dcc2e.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2dcc34.  v6:= v4.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L2dcc38.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1.L$0` @type ^`java.lang.Object` := v4 @kind object;
  #L2dcc3c.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1.label` @type ^`int` := v3;
  #L2dcc40.  call temp:= `invoke`(v6, v5, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2dcc46.  v6:= temp @kind object;
  #L2dcc48.  if v6 != v1 then goto L2dcc4e;
  #L2dcc4c.  return v1 @kind object;
  #L2dcc4e.  v5:= v4 @kind object;
  #L2dcc50.  v6:= (`java.lang.Boolean`) v6 @kind object;
  #L2dcc54.  call temp:= `booleanValue`(v6) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L2dcc5a.  v6:= temp;
  #L2dcc5c.  if v6 == 0 then goto L2dcc66;
  #L2dcc60.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2dcc64.  return v5 @kind object;
  #L2dcc66.  v6:= new `kotlinx.coroutines.flow.internal.AbortFlowException`;
  #L2dcc6a.  call `<init>`(v6, v5) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.<init>:(Lkotlinx/coroutines/flow/e;)V` @kind direct;
  #L2dcc70.  throw v6;
}
