record `kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function4` @kind interface {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.$predicate` @AccessFlag FINAL_SYNTHETIC;
  `long` `kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.$retries` @AccessFlag FINAL_SYNTHETIC;
  `long` `kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.J$0` @AccessFlag SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.L$0` @AccessFlag SYNTHETIC;
  `int` `kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.label` @AccessFlag ;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3` v0 @kind this, `long` v1 , `kotlin.jvm.functions.Function2` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$retry$3;.<init>:(JLkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2dc8f8.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.$retries` @type ^`long` := v1 @kind wide;
  #L2dc8fc.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.$predicate` @type ^`kotlin.jvm.functions.Function2` := v3 @kind object;
  #L2dc900.  v1:= 4I;
  #L2dc902.  call `<init>`(v0, v1, v4) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L2dc908.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3` v6 @kind this, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$retry$3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2dc7f4.  v1:= v7 @kind object;
  #L2dc7f6.  v1:= (`kotlinx.coroutines.flow.e`) v1 @kind object;
  #L2dc7fa.  v2:= v8 @kind object;
  #L2dc7fc.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L2dc800.  v9:= (`java.lang.Number`) v9 @kind object;
  #L2dc804.  call temp:= `longValue`(v9) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L2dc80a.  v3:= temp @kind wide;
  #L2dc80c.  v5:= v10 @kind object;
  #L2dc80e.  v5:= (`kotlin.coroutines.Continuation`) v5 @kind object;
  #L2dc812.  v0:= v6 @kind object;
  #L2dc814.  call temp:= `invoke`(v0, v1, v2, v3, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$retry$3;.invoke:(Lkotlinx/coroutines/flow/e;Ljava/lang/Throwable;JLkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2dc81a.  v7:= temp @kind object;
  #L2dc81c.  return v7 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3` v3 @kind this, `kotlinx.coroutines.flow.e` v4 @kind object, `java.lang.Throwable` v5 @kind object, `long` v6 , `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$retry$3;.invoke:(Lkotlinx/coroutines/flow/e;Ljava/lang/Throwable;JLkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2dc830.  v4:= new `kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3`;
  #L2dc834.  v0:= v3.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.$retries` @type ^`long` @kind wide;
  #L2dc838.  v2:= v3.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.$predicate` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L2dc83c.  call `<init>`(v4, v0, v2, v8) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$retry$3;.<init>:(JLkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2dc842.  v4.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.L$0` @type ^`java.lang.Object` := v5 @kind object;
  #L2dc846.  v4.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.J$0` @type ^`long` := v6 @kind wide;
  #L2dc84a.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2dc84e.  call temp:= `invokeSuspend`(v4, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$retry$3;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2dc854.  v4:= temp @kind object;
  #L2dc856.  return v4 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$retry$3;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2dc868.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2dc86e.  v0:= temp @kind object;
  #L2dc870.  v1:= v7.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.label` @type ^`int`;
  #L2dc874.  v2:= 1I;
  #L2dc876.  if v1 == 0 then goto L2dc896;
  #L2dc87a.  if v1 != v2 then goto L2dc886;
  #L2dc87e.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2dc884.  goto L2dc8ca;
  #L2dc886.  v8:= new `java.lang.IllegalStateException`;
  #L2dc88a.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2dc88e.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2dc894.  throw v8;
  #L2dc896.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2dc89c.  v8:= v7.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.L$0` @type ^`java.lang.Object` @kind object;
  #L2dc8a0.  v8:= (`java.lang.Throwable`) v8 @kind object;
  #L2dc8a4.  v3:= v7.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.J$0` @type ^`long` @kind wide;
  #L2dc8a8.  v5:= v7.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.$retries` @type ^`long` @kind wide;
  #L2dc8ac.  v1:= lcmp(v3, v5);
  #L2dc8b0.  if v1 >= 0 then goto L2dc8dc;
  #L2dc8b4.  v1:= v7.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.$predicate` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L2dc8b8.  v7.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$3.label` @type ^`int` := v2;
  #L2dc8bc.  call temp:= `invoke`(v1, v8, v7) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2dc8c2.  v8:= temp @kind object;
  #L2dc8c4.  if v8 != v0 then goto L2dc8ca;
  #L2dc8c8.  return v0 @kind object;
  #L2dc8ca.  v8:= (`java.lang.Boolean`) v8 @kind object;
  #L2dc8ce.  call temp:= `booleanValue`(v8) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L2dc8d4.  v8:= temp;
  #L2dc8d6.  if v8 == 0 then goto L2dc8dc;
  #L2dc8da.  goto L2dc8de;
  #L2dc8dc.  v2:= 0I;
  #L2dc8de.  call temp:= `boxBoolean`(v2) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxBoolean:(Z)Ljava/lang/Boolean;` @kind static;
  #L2dc8e4.  v8:= temp @kind object;
  #L2dc8e6.  return v8 @kind object;
}
