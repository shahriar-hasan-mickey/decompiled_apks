record `kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.d` @kind interface {
  `kotlinx.coroutines.flow.d` `kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function3` `kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1` v0 @kind this, `kotlinx.coroutines.flow.d` v1 @kind object, `kotlin.jvm.functions.Function3` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1;.<init>:(Lkotlinx/coroutines/flow/d;Lkotlin/jvm/functions/Function3;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2dc588.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1.b` @type ^`kotlinx.coroutines.flow.d` := v1 @kind object;
  #L2dc58c.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1.c` @type ^`kotlin.jvm.functions.Function3` := v2 @kind object;
  #L2dc590.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2dc596.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1` v5 @kind this, `kotlinx.coroutines.flow.e` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1;.a:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2dc494.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1` @kind boolean;
  #L2dc498.  if v0 == 0 then goto L2dc4ba;
  #L2dc49c.  v0:= v7 @kind object;
  #L2dc49e.  v0:= (`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1`) v0 @kind object;
  #L2dc4a2.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.label` @type ^`int`;
  #L2dc4a6.  v2:= -2147483648I;
  #L2dc4aa.  v3:= v1 ^& v2 @kind int;
  #L2dc4ae.  if v3 == 0 then goto L2dc4ba;
  #L2dc4b2.  v1:= v1 - v2 @kind int;
  #L2dc4b4.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.label` @type ^`int` := v1;
  #L2dc4b8.  goto L2dc4c4;
  #L2dc4ba.  v0:= new `kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1`;
  #L2dc4be.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2dc4c4.  v7:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.result` @type ^`java.lang.Object` @kind object;
  #L2dc4c8.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2dc4ce.  v1:= temp @kind object;
  #L2dc4d0.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.label` @type ^`int`;
  #L2dc4d4.  v3:= 2I;
  #L2dc4d6.  v4:= 1I;
  #L2dc4d8.  if v2 == 0 then goto L2dc514;
  #L2dc4dc.  if v2 == v4 then goto L2dc4fc;
  #L2dc4e0.  if v2 != v3 then goto L2dc4ec;
  #L2dc4e4.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2dc4ea.  goto L2dc572;
  #L2dc4ec.  v6:= new `java.lang.IllegalStateException`;
  #L2dc4f0.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2dc4f4.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2dc4fa.  throw v6;
  #L2dc4fc.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.L$1` @type ^`java.lang.Object` @kind object;
  #L2dc500.  v6:= (`kotlinx.coroutines.flow.e`) v6 @kind object;
  #L2dc504.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2dc508.  v2:= (`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1`) v2 @kind object;
  #L2dc50c.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2dc512.  goto L2dc53a;
  #L2dc514.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2dc51a.  v7:= v5.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1.b` @type ^`kotlinx.coroutines.flow.d` @kind object;
  #L2dc51e.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.L$0` @type ^`java.lang.Object` := v5 @kind object;
  #L2dc522.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.L$1` @type ^`java.lang.Object` := v6 @kind object;
  #L2dc526.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.label` @type ^`int` := v4;
  #L2dc52a.  call temp:= `d`(v7, v6, v0) @signature `Lkotlinx/coroutines/flow/f;.d:(Lkotlinx/coroutines/flow/d;Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L2dc530.  v7:= temp @kind object;
  #L2dc532.  if v7 != v1 then goto L2dc538;
  #L2dc536.  return v1 @kind object;
  #L2dc538.  v2:= v5 @kind object;
  #L2dc53a.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L2dc53e.  if v7 == 0 then goto L2dc572;
  #L2dc542.  v2:= v2.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1.c` @type ^`kotlin.jvm.functions.Function3` @kind object;
  #L2dc546.  v4:= 0I;
  #L2dc548.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.L$0` @type ^`java.lang.Object` := v4 @kind object;
  #L2dc54c.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.L$1` @type ^`java.lang.Object` := v4 @kind object;
  #L2dc550.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catch$$inlined$unsafeFlow$1$1.label` @type ^`int` := v3;
  #L2dc554.  v3:= 6I;
  #L2dc556.  call `mark`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L2dc55c.  call temp:= `invoke`(v2, v6, v7, v0) @signature `Lkotlin/jvm/functions/Function3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2dc562.  v6:= temp @kind object;
  #L2dc564.  v7:= 7I;
  #L2dc566.  call `mark`(v7) @signature `Lkotlin/jvm/internal/InlineMarker;.mark:(I)V` @kind static;
  #L2dc56c.  if v6 != v1 then goto L2dc572;
  #L2dc570.  return v1 @kind object;
  #L2dc572.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2dc576.  return v6 @kind object;
}
