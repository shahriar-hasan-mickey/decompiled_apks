record `kotlinx.coroutines.flow.p0` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.flow.e` @kind interface {
  `kotlin.jvm.internal.Ref$ObjectRef` `kotlinx.coroutines.flow.p0.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.p0` v0 @kind this, `kotlin.jvm.internal.Ref$ObjectRef` v1 @kind object) @signature `Lkotlinx/coroutines/flow/p0;.<init>:(Lkotlin/jvm/internal/Ref$ObjectRef;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2ddd14.  v0.`kotlinx.coroutines.flow.p0.b` @type ^`kotlin.jvm.internal.Ref$ObjectRef` := v1 @kind object;
  #L2ddd18.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ddd1e.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.p0` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/p0;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L2ddcf0.  v2:= v0.`kotlinx.coroutines.flow.p0.b` @type ^`kotlin.jvm.internal.Ref$ObjectRef` @kind object;
  #L2ddcf4.  v2.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` := v1 @kind object;
  #L2ddcf8.  v1:= new `kotlinx.coroutines.flow.internal.AbortFlowException`;
  #L2ddcfc.  call `<init>`(v1, v0) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.<init>:(Lkotlinx/coroutines/flow/e;)V` @kind direct;
  #L2ddd02.  throw v1;
}
