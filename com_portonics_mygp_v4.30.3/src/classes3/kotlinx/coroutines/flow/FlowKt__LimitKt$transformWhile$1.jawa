record `kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `kotlinx.coroutines.flow.d` `kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.$this_transformWhile` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function3` `kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.$transform` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.L$0` @AccessFlag PRIVATE_SYNTHETIC;
  `int` `kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.label` @AccessFlag ;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1` v0 @kind this, `kotlinx.coroutines.flow.d` v1 @kind object, `kotlin.jvm.functions.Function3` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$transformWhile$1;.<init>:(Lkotlinx/coroutines/flow/d;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2dd0d0.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.$this_transformWhile` @type ^`kotlinx.coroutines.flow.d` := v1 @kind object;
  #L2dd0d4.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.$transform` @type ^`kotlin.jvm.functions.Function3` := v2 @kind object;
  #L2dd0d8.  v1:= 2I;
  #L2dd0da.  call `<init>`(v0, v1, v3) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L2dd0e0.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$transformWhile$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2dd0a8.  v0:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1`;
  #L2dd0ac.  v1:= v3.`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.$this_transformWhile` @type ^`kotlinx.coroutines.flow.d` @kind object;
  #L2dd0b0.  v2:= v3.`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.$transform` @type ^`kotlin.jvm.functions.Function3` @kind object;
  #L2dd0b4.  call `<init>`(v0, v1, v2, v5) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$transformWhile$1;.<init>:(Lkotlinx/coroutines/flow/d;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2dd0ba.  v0.`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.L$0` @type ^`java.lang.Object` := v4 @kind object;
  #L2dd0be.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$transformWhile$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2dcfac.  v1:= (`kotlinx.coroutines.flow.e`) v1 @kind object;
  #L2dcfb0.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L2dcfb4.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$transformWhile$1;.invoke:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2dcfba.  v1:= temp @kind object;
  #L2dcfbc.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1` v0 @kind this, `kotlinx.coroutines.flow.e` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$transformWhile$1;.invoke:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2dcfd0.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$transformWhile$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2dcfd6.  v1:= temp @kind object;
  #L2dcfd8.  v1:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1`) v1 @kind object;
  #L2dcfdc.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2dcfe0.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$transformWhile$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2dcfe6.  v1:= temp @kind object;
  #L2dcfe8.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$transformWhile$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2dcffc.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2dd002.  v0:= temp @kind object;
  #L2dd004.  v1:= v5.`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.label` @type ^`int`;
  #L2dd008.  v2:= 1I;
  #L2dd00a.  if v1 == 0 then goto L2dd036;
  #L2dd00e.  if v1 != v2 then goto L2dd026;
  #L2dd012.  v0:= v5.`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2dd016.  v0:= (`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1$invokeSuspend$$inlined$collectWhile$1`) v0 @kind object;
  #L2dd01a.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2dd020.  goto L2dd076;
  #L2dd022.  v6:= Exception @type ^`kotlinx.coroutines.flow.internal.AbortFlowException` @kind object;
  #L2dd024.  goto L2dd070;
  #L2dd026.  v6:= new `java.lang.IllegalStateException`;
  #L2dd02a.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2dd02e.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2dd034.  throw v6;
  #L2dd036.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2dd03c.  v6:= v5.`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2dd040.  v6:= (`kotlinx.coroutines.flow.e`) v6 @kind object;
  #L2dd044.  v1:= v5.`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.$this_transformWhile` @type ^`kotlinx.coroutines.flow.d` @kind object;
  #L2dd048.  v3:= v5.`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.$transform` @type ^`kotlin.jvm.functions.Function3` @kind object;
  #L2dd04c.  v4:= new `kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1$invokeSuspend$$inlined$collectWhile$1`;
  #L2dd050.  call `<init>`(v4, v3, v6) @signature `Lkotlinx/coroutines/flow/FlowKt__LimitKt$transformWhile$1$invokeSuspend$$inlined$collectWhile$1;.<init>:(Lkotlin/jvm/functions/Function3;Lkotlinx/coroutines/flow/e;)V` @kind direct;
  #L2dd056.  v5.`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.L$0` @type ^`java.lang.Object` := v4 @kind object;
  #L2dd05a.  v5.`kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.label` @type ^`int` := v2;
  #L2dd05e.  call temp:= `a`(v1, v4, v5) @signature `Lkotlinx/coroutines/flow/d;.a:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L2dd064.  v6:= temp @kind object;
  #L2dd066.  if v6 != v0 then goto L2dd076;
  #L2dd06a.  return v0 @kind object;
  #L2dd06c.  v6:= Exception @type ^`kotlinx.coroutines.flow.internal.AbortFlowException` @kind object;
  #L2dd06e.  v0:= v4 @kind object;
  #L2dd070.  call `a`(v6, v0) @signature `Lkotlinx/coroutines/flow/internal/j;.a:(Lkotlinx/coroutines/flow/internal/AbortFlowException;Lkotlinx/coroutines/flow/e;)V` @kind static;
  #L2dd076.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2dd07a.  return v6 @kind object;
  catch `kotlinx.coroutines.flow.internal.AbortFlowException` @[L2dd01a..L2dd020] goto L2dd022;
  catch `kotlinx.coroutines.flow.internal.AbortFlowException` @[L2dd056..L2dd066] goto L2dd06c;
}
