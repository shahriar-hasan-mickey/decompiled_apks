record `kotlinx.coroutines.flow.internal.ChildCancelledException` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CancellationException` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChildCancelledException` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChildCancelledException;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2e5304.  v0:= "Child of the scoped flow was cancelled" @kind object;
  #L2e5308.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e530e.  return @kind void;
}
procedure `java.lang.Throwable` `fillInStackTrace`(`kotlinx.coroutines.flow.internal.ChildCancelledException` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/ChildCancelledException;.fillInStackTrace:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e52d0.  call temp:= `c`() @signature `Lkotlinx/coroutines/o0;.c:()Z` @kind static;
  #L2e52d6.  v0:= temp;
  #L2e52d8.  if v0 == 0 then goto L2e52e6;
  #L2e52dc.  call temp:= `fillInStackTrace`(v1) @signature `Ljava/util/concurrent/CancellationException;.fillInStackTrace:()Ljava/lang/Throwable;` @kind super;
  #L2e52e2.  v0:= temp @kind object;
  #L2e52e4.  return v0 @kind object;
  #L2e52e6.  v0:= 0I;
  #L2e52e8.  v0:= new `java.lang.StackTraceElement`[v0];
  #L2e52ec.  call `setStackTrace`(v1, v0) @signature `Ljava/util/concurrent/CancellationException;.setStackTrace:([Ljava/lang/StackTraceElement;)V` @kind virtual;
  #L2e52f2.  return v1 @kind object;
}
