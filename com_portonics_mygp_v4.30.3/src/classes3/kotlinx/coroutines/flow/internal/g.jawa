record `kotlinx.coroutines.flow.internal.g` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.CoroutineContext` @kind interface {
  `java.lang.Throwable` `kotlinx.coroutines.flow.internal.g.b` @AccessFlag PUBLIC_FINAL;
  `kotlin.coroutines.CoroutineContext` `kotlinx.coroutines.flow.internal.g.c` @AccessFlag PRIVATE_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.g` v0 @kind this, `java.lang.Throwable` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/g;.<init>:(Ljava/lang/Throwable;Lkotlin/coroutines/CoroutineContext;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2e6318.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2e631e.  v0.`kotlinx.coroutines.flow.internal.g.b` @type ^`java.lang.Throwable` := v1 @kind object;
  #L2e6322.  v0.`kotlinx.coroutines.flow.internal.g.c` @type ^`kotlin.coroutines.CoroutineContext` := v2 @kind object;
  #L2e6326.  return @kind void;
}
procedure `java.lang.Object` `fold`(`kotlinx.coroutines.flow.internal.g` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/g;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e6298.  v0:= v1.`kotlinx.coroutines.flow.internal.g.c` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L2e629c.  call temp:= `fold`(v0, v2, v3) @signature `Lkotlin/coroutines/CoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind interface;
  #L2e62a2.  v2:= temp @kind object;
  #L2e62a4.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext$Element` `get`(`kotlinx.coroutines.flow.internal.g` v1 @kind this, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/g;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e62f8.  v0:= v1.`kotlinx.coroutines.flow.internal.g.c` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L2e62fc.  call temp:= `get`(v0, v2) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L2e6302.  v2:= temp @kind object;
  #L2e6304.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `minusKey`(`kotlinx.coroutines.flow.internal.g` v1 @kind this, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/g;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e62b8.  v0:= v1.`kotlinx.coroutines.flow.internal.g.c` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L2e62bc.  call temp:= `minusKey`(v0, v2) @signature `Lkotlin/coroutines/CoroutineContext;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2e62c2.  v2:= temp @kind object;
  #L2e62c4.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `plus`(`kotlinx.coroutines.flow.internal.g` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/g;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e62d8.  v0:= v1.`kotlinx.coroutines.flow.internal.g.c` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L2e62dc.  call temp:= `plus`(v0, v2) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2e62e2.  v2:= temp @kind object;
  #L2e62e4.  return v2 @kind object;
}
