record `kotlinx.coroutines.flow.internal.j` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `a`(`kotlinx.coroutines.flow.internal.AbortFlowException` v1 @kind object, `kotlinx.coroutines.flow.e` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/j;.a:(Lkotlinx/coroutines/flow/internal/AbortFlowException;Lkotlinx/coroutines/flow/e;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2e64c0.  call temp:= `getOwner`(v1) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.getOwner:()Lkotlinx/coroutines/flow/e;` @kind virtual;
  #L2e64c6.  v0:= temp @kind object;
  #L2e64c8.  if v0 != v2 then goto L2e64ce;
  #L2e64cc.  return @kind void;
  #L2e64ce.  throw v1;
}
