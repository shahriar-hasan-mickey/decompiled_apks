record `kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `kotlinx.coroutines.flow.internal.q` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1.$collector` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.d` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1.$inner` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.sync.e` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1.$semaphore` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1.label` @AccessFlag ;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1` v0 @kind this, `kotlinx.coroutines.flow.d` v1 @kind object, `kotlinx.coroutines.flow.internal.q` v2 @kind object, `kotlinx.coroutines.sync.e` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$collectTo$2$1;.<init>:(Lkotlinx/coroutines/flow/d;Lkotlinx/coroutines/flow/internal/q;Lkotlinx/coroutines/sync/e;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2e4614.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1.$inner` @type ^`kotlinx.coroutines.flow.d` := v1 @kind object;
  #L2e4618.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1.$collector` @type ^`kotlinx.coroutines.flow.internal.q` := v2 @kind object;
  #L2e461c.  v0.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1.$semaphore` @type ^`kotlinx.coroutines.sync.e` := v3 @kind object;
  #L2e4620.  v1:= 2I;
  #L2e4622.  call `<init>`(v0, v1, v4) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L2e4628.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$collectTo$2$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2e45ec.  v4:= new `kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1`;
  #L2e45f0.  v0:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1.$inner` @type ^`kotlinx.coroutines.flow.d` @kind object;
  #L2e45f4.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1.$collector` @type ^`kotlinx.coroutines.flow.internal.q` @kind object;
  #L2e45f8.  v2:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1.$semaphore` @type ^`kotlinx.coroutines.sync.e` @kind object;
  #L2e45fc.  call `<init>`(v4, v0, v1, v2, v5) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$collectTo$2$1;.<init>:(Lkotlinx/coroutines/flow/d;Lkotlinx/coroutines/flow/internal/q;Lkotlinx/coroutines/sync/e;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2e4602.  return v4 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$collectTo$2$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2e4508.  v1:= (`kotlinx.coroutines.m0`) v1 @kind object;
  #L2e450c.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L2e4510.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$collectTo$2$1;.invoke:(Lkotlinx/coroutines/m0;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2e4516.  v1:= temp @kind object;
  #L2e4518.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1` v0 @kind this, `kotlinx.coroutines.m0` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$collectTo$2$1;.invoke:(Lkotlinx/coroutines/m0;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2e452c.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$collectTo$2$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2e4532.  v1:= temp @kind object;
  #L2e4534.  v1:= (`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1`) v1 @kind object;
  #L2e4538.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e453c.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$collectTo$2$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2e4542.  v1:= temp @kind object;
  #L2e4544.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelFlowMerge$collectTo$2$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2e4558.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e455e.  v0:= temp @kind object;
  #L2e4560.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1.label` @type ^`int`;
  #L2e4564.  v2:= 1I;
  #L2e4566.  if v1 == 0 then goto L2e458a;
  #L2e456a.  if v1 != v2 then goto L2e457a;
  #L2e456e.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2e4574.  goto L2e45aa;
  #L2e4576.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e4578.  goto L2e45ba;
  #L2e457a.  v4:= new `java.lang.IllegalStateException`;
  #L2e457e.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2e4582.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e4588.  throw v4;
  #L2e458a.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2e4590.  v4:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1.$inner` @type ^`kotlinx.coroutines.flow.d` @kind object;
  #L2e4594.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1.$collector` @type ^`kotlinx.coroutines.flow.internal.q` @kind object;
  #L2e4598.  v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1.label` @type ^`int` := v2;
  #L2e459c.  call temp:= `a`(v4, v1, v3) @signature `Lkotlinx/coroutines/flow/d;.a:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L2e45a2.  v4:= temp @kind object;
  #L2e45a4.  if v4 != v0 then goto L2e45aa;
  #L2e45a8.  return v0 @kind object;
  #L2e45aa.  v4:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1.$semaphore` @type ^`kotlinx.coroutines.sync.e` @kind object;
  #L2e45ae.  call `release`(v4) @signature `Lkotlinx/coroutines/sync/e;.release:()V` @kind interface;
  #L2e45b4.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e45b8.  return v4 @kind object;
  #L2e45ba.  v0:= v3.`kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2$1.$semaphore` @type ^`kotlinx.coroutines.sync.e` @kind object;
  #L2e45be.  call `release`(v0) @signature `Lkotlinx/coroutines/sync/e;.release:()V` @kind interface;
  #L2e45c4.  throw v4;
  catch `java.lang.Throwable` @[L2e456e..L2e4574] goto L2e4576;
  catch `java.lang.Throwable` @[L2e4590..L2e45a4] goto L2e4576;
}
