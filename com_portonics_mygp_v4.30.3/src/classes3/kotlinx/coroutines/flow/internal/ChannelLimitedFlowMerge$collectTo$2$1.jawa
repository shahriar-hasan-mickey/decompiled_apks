record `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `kotlinx.coroutines.flow.internal.q` `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1.$collector` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.d` `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1.$flow` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1.label` @AccessFlag ;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1` v0 @kind this, `kotlinx.coroutines.flow.d` v1 @kind object, `kotlinx.coroutines.flow.internal.q` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$collectTo$2$1;.<init>:(Lkotlinx/coroutines/flow/d;Lkotlinx/coroutines/flow/internal/q;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2e52ac.  v0.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1.$flow` @type ^`kotlinx.coroutines.flow.d` := v1 @kind object;
  #L2e52b0.  v0.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1.$collector` @type ^`kotlinx.coroutines.flow.internal.q` := v2 @kind object;
  #L2e52b4.  v1:= 2I;
  #L2e52b6.  call `<init>`(v0, v1, v3) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L2e52bc.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1` v2 @kind this, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$collectTo$2$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2e5288.  v3:= new `kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1`;
  #L2e528c.  v0:= v2.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1.$flow` @type ^`kotlinx.coroutines.flow.d` @kind object;
  #L2e5290.  v1:= v2.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1.$collector` @type ^`kotlinx.coroutines.flow.internal.q` @kind object;
  #L2e5294.  call `<init>`(v3, v0, v1, v4) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$collectTo$2$1;.<init>:(Lkotlinx/coroutines/flow/d;Lkotlinx/coroutines/flow/internal/q;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2e529a.  return v3 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$collectTo$2$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2e51d4.  v1:= (`kotlinx.coroutines.m0`) v1 @kind object;
  #L2e51d8.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L2e51dc.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$collectTo$2$1;.invoke:(Lkotlinx/coroutines/m0;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2e51e2.  v1:= temp @kind object;
  #L2e51e4.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1` v0 @kind this, `kotlinx.coroutines.m0` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$collectTo$2$1;.invoke:(Lkotlinx/coroutines/m0;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2e51f8.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$collectTo$2$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2e51fe.  v1:= temp @kind object;
  #L2e5200.  v1:= (`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1`) v1 @kind object;
  #L2e5204.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e5208.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$collectTo$2$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2e520e.  v1:= temp @kind object;
  #L2e5210.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/ChannelLimitedFlowMerge$collectTo$2$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2e5224.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e522a.  v0:= temp @kind object;
  #L2e522c.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1.label` @type ^`int`;
  #L2e5230.  v2:= 1I;
  #L2e5232.  if v1 == 0 then goto L2e5252;
  #L2e5236.  if v1 != v2 then goto L2e5242;
  #L2e523a.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2e5240.  goto L2e5272;
  #L2e5242.  v4:= new `java.lang.IllegalStateException`;
  #L2e5246.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2e524a.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e5250.  throw v4;
  #L2e5252.  call `throwOnFailure`(v4) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2e5258.  v4:= v3.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1.$flow` @type ^`kotlinx.coroutines.flow.d` @kind object;
  #L2e525c.  v1:= v3.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1.$collector` @type ^`kotlinx.coroutines.flow.internal.q` @kind object;
  #L2e5260.  v3.`kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1.label` @type ^`int` := v2;
  #L2e5264.  call temp:= `a`(v4, v1, v3) @signature `Lkotlinx/coroutines/flow/d;.a:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L2e526a.  v4:= temp @kind object;
  #L2e526c.  if v4 != v0 then goto L2e5272;
  #L2e5270.  return v0 @kind object;
  #L2e5272.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e5276.  return v4 @kind object;
}
