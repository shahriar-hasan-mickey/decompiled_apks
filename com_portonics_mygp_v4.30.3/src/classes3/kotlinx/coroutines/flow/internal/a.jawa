record `kotlinx.coroutines.flow.internal.a` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `kotlinx.coroutines.flow.internal.c`[] `kotlinx.coroutines.flow.internal.a.b` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.flow.internal.a.c` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.flow.internal.a.d` @AccessFlag PRIVATE;
  `kotlinx.coroutines.flow.internal.s` `kotlinx.coroutines.flow.internal.a.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.a` v0 @kind this) @signature `Lkotlinx/coroutines/flow/internal/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2e416c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2e4172.  return @kind void;
}
procedure `int` `f`(`kotlinx.coroutines.flow.internal.a` v0 @kind object) @signature `Lkotlinx/coroutines/flow/internal/a;.f:(Lkotlinx/coroutines/flow/internal/a;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2e3ff4.  v0:= v0.`kotlinx.coroutines.flow.internal.a.c` @type ^`int`;
  #L2e3ff8.  return v0;
}
procedure `kotlinx.coroutines.flow.internal.c`[] `g`(`kotlinx.coroutines.flow.internal.a` v0 @kind object) @signature `Lkotlinx/coroutines/flow/internal/a;.g:(Lkotlinx/coroutines/flow/internal/a;)[Lkotlinx/coroutines/flow/internal/c;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2e413c.  v0:= v0.`kotlinx.coroutines.flow.internal.a.b` @type ^`kotlinx.coroutines.flow.internal.c`[] @kind object;
  #L2e4140.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.z1` `e`(`kotlinx.coroutines.flow.internal.a` v2 @kind this) @signature `Lkotlinx/coroutines/flow/internal/a;.e:()Lkotlinx/coroutines/flow/z1;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2e4024.  @monitorenter v2
  #L2e4026.  v0:= v2.`kotlinx.coroutines.flow.internal.a.e` @type ^`kotlinx.coroutines.flow.internal.s` @kind object;
  #L2e402a.  if v0 != 0 then goto L2e4044;
  #L2e402e.  v0:= new `kotlinx.coroutines.flow.internal.s`;
  #L2e4032.  call temp:= `l`(v2) @signature `Lkotlinx/coroutines/flow/internal/a;.l:()I` @kind virtual;
  #L2e4038.  v1:= temp;
  #L2e403a.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/flow/internal/s;.<init>:(I)V` @kind direct;
  #L2e4040.  v2.`kotlinx.coroutines.flow.internal.a.e` @type ^`kotlinx.coroutines.flow.internal.s` := v0 @kind object;
  #L2e4044.  @monitorexit v2
  #L2e4046.  return v0 @kind object;
  #L2e4048.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e404a.  @monitorexit v2
  #L2e404c.  throw v0;
  catch `java.lang.Throwable` @[L2e4026..L2e4044] goto L2e4048;
}
procedure `kotlinx.coroutines.flow.internal.c` `h`(`kotlinx.coroutines.flow.internal.a` v4 @kind this) @signature `Lkotlinx/coroutines/flow/internal/a;.h:()Lkotlinx/coroutines/flow/internal/c;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e406c.  @monitorenter v4
  #L2e406e.  call temp:= `m`(v4) @signature `Lkotlinx/coroutines/flow/internal/a;.m:()[Lkotlinx/coroutines/flow/internal/c;` @kind virtual;
  #L2e4074.  v0:= temp @kind object;
  #L2e4076.  v1:= 2I;
  #L2e4078.  if v0 != 0 then goto L2e408a;
  #L2e407c.  call temp:= `j`(v4, v1) @signature `Lkotlinx/coroutines/flow/internal/a;.j:(I)[Lkotlinx/coroutines/flow/internal/c;` @kind virtual;
  #L2e4082.  v0:= temp @kind object;
  #L2e4084.  v4.`kotlinx.coroutines.flow.internal.a.b` @type ^`kotlinx.coroutines.flow.internal.c`[] := v0 @kind object;
  #L2e4088.  goto L2e40be;
  #L2e408a.  call temp:= `l`(v4) @signature `Lkotlinx/coroutines/flow/internal/a;.l:()I` @kind virtual;
  #L2e4090.  v2:= temp;
  #L2e4092.  v3:= length @variable v0;
  #L2e4094.  if v2 < v3 then goto L2e40be;
  #L2e4098.  v2:= length @variable v0;
  #L2e409a.  v2:= v2 * 2;
  #L2e409e.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L2e40a4.  v0:= temp @kind object;
  #L2e40a6.  v1:= "copyOf(this, newSize)" @kind object;
  #L2e40aa.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2e40b0.  v1:= v0 @kind object;
  #L2e40b2.  v1:= (`kotlinx.coroutines.flow.internal.c`[]) v1 @kind object;
  #L2e40b6.  v4.`kotlinx.coroutines.flow.internal.a.b` @type ^`kotlinx.coroutines.flow.internal.c`[] := v1 @kind object;
  #L2e40ba.  v0:= (`kotlinx.coroutines.flow.internal.c`[]) v0 @kind object;
  #L2e40be.  v1:= v4.`kotlinx.coroutines.flow.internal.a.d` @type ^`int`;
  #L2e40c2.  v2:= v0[v1] @kind object;
  #L2e40c6.  if v2 != 0 then goto L2e40d6;
  #L2e40ca.  call temp:= `i`(v4) @signature `Lkotlinx/coroutines/flow/internal/a;.i:()Lkotlinx/coroutines/flow/internal/c;` @kind virtual;
  #L2e40d0.  v2:= temp @kind object;
  #L2e40d2.  v0[v1]:= v2 @kind object;
  #L2e40d6.  v1:= v1 + 1;
  #L2e40da.  v3:= length @variable v0;
  #L2e40dc.  if v1 < v3 then goto L2e40e2;
  #L2e40e0.  v1:= 0I;
  #L2e40e2.  call temp:= `a`(v2, v4) @signature `Lkotlinx/coroutines/flow/internal/c;.a:(Ljava/lang/Object;)Z` @kind virtual;
  #L2e40e8.  v3:= temp;
  #L2e40ea.  if v3 == 0 then goto L2e40c2;
  #L2e40ee.  v4.`kotlinx.coroutines.flow.internal.a.d` @type ^`int` := v1;
  #L2e40f2.  call temp:= `l`(v4) @signature `Lkotlinx/coroutines/flow/internal/a;.l:()I` @kind virtual;
  #L2e40f8.  v0:= temp;
  #L2e40fa.  v1:= 1I;
  #L2e40fc.  v0:= v0 + v1 @kind int;
  #L2e40fe.  v4.`kotlinx.coroutines.flow.internal.a.c` @type ^`int` := v0;
  #L2e4102.  v0:= v4.`kotlinx.coroutines.flow.internal.a.e` @type ^`kotlinx.coroutines.flow.internal.s` @kind object;
  #L2e4106.  @monitorexit v4
  #L2e4108.  if v0 != 0 then goto L2e410e;
  #L2e410c.  goto L2e4114;
  #L2e410e.  call temp:= `Y`(v0, v1) @signature `Lkotlinx/coroutines/flow/internal/s;.Y:(I)Z` @kind virtual;
  #L2e4114.  return v2 @kind object;
  #L2e4116.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e4118.  @monitorexit v4
  #L2e411a.  goto L2e411e;
  #L2e411c.  throw v0;
  #L2e411e.  goto L2e411c;
  catch `java.lang.Throwable` @[L2e406e..L2e4106] goto L2e4116;
}
procedure `kotlinx.coroutines.flow.internal.c` `i`() @signature `Lkotlinx/coroutines/flow/internal/a;.i:()Lkotlinx/coroutines/flow/internal/c;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.flow.internal.c`[] `j`(`int` v0 ) @signature `Lkotlinx/coroutines/flow/internal/a;.j:(I)[Lkotlinx/coroutines/flow/internal/c;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `k`(`kotlinx.coroutines.flow.internal.a` v6 @kind this, `kotlinx.coroutines.flow.internal.c` v7 @kind object) @signature `Lkotlinx/coroutines/flow/internal/a;.k:(Lkotlinx/coroutines/flow/internal/c;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2e4184.  @monitorenter v6
  #L2e4186.  call temp:= `l`(v6) @signature `Lkotlinx/coroutines/flow/internal/a;.l:()I` @kind virtual;
  #L2e418c.  v0:= temp;
  #L2e418e.  v1:= -1I;
  #L2e4190.  v0:= v0 + v1 @kind int;
  #L2e4192.  v6.`kotlinx.coroutines.flow.internal.a.c` @type ^`int` := v0;
  #L2e4196.  v0:= v6.`kotlinx.coroutines.flow.internal.a.e` @type ^`kotlinx.coroutines.flow.internal.s` @kind object;
  #L2e419a.  call temp:= `l`(v6) @signature `Lkotlinx/coroutines/flow/internal/a;.l:()I` @kind virtual;
  #L2e41a0.  v2:= temp;
  #L2e41a2.  v3:= 0I;
  #L2e41a4.  if v2 != 0 then goto L2e41ac;
  #L2e41a8.  v6.`kotlinx.coroutines.flow.internal.a.d` @type ^`int` := v3;
  #L2e41ac.  call temp:= `b`(v7, v6) @signature `Lkotlinx/coroutines/flow/internal/c;.b:(Ljava/lang/Object;)[Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2e41b2.  v7:= temp @kind object;
  #L2e41b4.  @monitorexit v6
  #L2e41b6.  v2:= length @variable v7;
  #L2e41b8.  if v3 >= v2 then goto L2e41e2;
  #L2e41bc.  v4:= v7[v3] @kind object;
  #L2e41c0.  v3:= v3 + 1;
  #L2e41c4.  if v4 != 0 then goto L2e41ca;
  #L2e41c8.  goto L2e41b8;
  #L2e41ca.  v5:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L2e41ce.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e41d2.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2e41d8.  v5:= temp @kind object;
  #L2e41da.  call `resumeWith`(v4, v5) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L2e41e0.  goto L2e41b8;
  #L2e41e2.  if v0 != 0 then goto L2e41e8;
  #L2e41e6.  goto L2e41ee;
  #L2e41e8.  call temp:= `Y`(v0, v1) @signature `Lkotlinx/coroutines/flow/internal/s;.Y:(I)Z` @kind virtual;
  #L2e41ee.  return @kind void;
  #L2e41f0.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e41f2.  @monitorexit v6
  #L2e41f4.  goto L2e41f8;
  #L2e41f6.  throw v7;
  #L2e41f8.  goto L2e41f6;
  catch `java.lang.Throwable` @[L2e4186..L2e41b4] goto L2e41f0;
}
procedure `int` `l`(`kotlinx.coroutines.flow.internal.a` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/a;.l:()I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L2e400c.  v0:= v1.`kotlinx.coroutines.flow.internal.a.c` @type ^`int`;
  #L2e4010.  return v0;
}
procedure `kotlinx.coroutines.flow.internal.c`[] `m`(`kotlinx.coroutines.flow.internal.a` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/a;.m:()[Lkotlinx/coroutines/flow/internal/c;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L2e4154.  v0:= v1.`kotlinx.coroutines.flow.internal.a.b` @type ^`kotlinx.coroutines.flow.internal.c`[] @kind object;
  #L2e4158.  return v0 @kind object;
}
