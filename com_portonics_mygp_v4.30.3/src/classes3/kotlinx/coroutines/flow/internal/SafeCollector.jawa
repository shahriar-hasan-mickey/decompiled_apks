record `kotlinx.coroutines.flow.internal.SafeCollector` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.jvm.internal.ContinuationImpl` @kind class, `kotlinx.coroutines.flow.e` @kind interface, `kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind interface {
  `kotlin.coroutines.CoroutineContext` `kotlinx.coroutines.flow.internal.SafeCollector.collectContext` @AccessFlag PUBLIC_FINAL;
  `int` `kotlinx.coroutines.flow.internal.SafeCollector.collectContextSize` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.flow.e` `kotlinx.coroutines.flow.internal.SafeCollector.collector` @AccessFlag PUBLIC_FINAL;
  `kotlin.coroutines.Continuation` `kotlinx.coroutines.flow.internal.SafeCollector.completion` @AccessFlag PRIVATE;
  `kotlin.coroutines.CoroutineContext` `kotlinx.coroutines.flow.internal.SafeCollector.lastEmissionContext` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.SafeCollector` v2 @kind this, `kotlinx.coroutines.flow.e` v3 @kind object, `kotlin.coroutines.CoroutineContext` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.<init>:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/CoroutineContext;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2e6b18.  v0:= `@@kotlinx.coroutines.flow.internal.m.b` @type ^`kotlinx.coroutines.flow.internal.m` @kind object;
  #L2e6b1c.  v1:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L2e6b20.  call `<init>`(v2, v0, v1) @signature `Lkotlin/coroutines/jvm/internal/ContinuationImpl;.<init>:(Lkotlin/coroutines/Continuation;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L2e6b26.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.collector` @type ^`kotlinx.coroutines.flow.e` := v3 @kind object;
  #L2e6b2a.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.collectContext` @type ^`kotlin.coroutines.CoroutineContext` := v4 @kind object;
  #L2e6b2e.  v3:= 0I;
  #L2e6b30.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2e6b36.  v3:= temp @kind object;
  #L2e6b38.  v0:= `@@kotlinx.coroutines.flow.internal.SafeCollector$collectContextSize$1.INSTANCE` @type ^`kotlinx.coroutines.flow.internal.SafeCollector$collectContextSize$1` @kind object;
  #L2e6b3c.  call temp:= `fold`(v4, v3, v0) @signature `Lkotlin/coroutines/CoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind interface;
  #L2e6b42.  v3:= temp @kind object;
  #L2e6b44.  v3:= (`java.lang.Number`) v3 @kind object;
  #L2e6b48.  call temp:= `intValue`(v3) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L2e6b4e.  v3:= temp;
  #L2e6b50.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.collectContextSize` @type ^`int` := v3;
  #L2e6b54.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.flow.internal.SafeCollector` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `kotlin.coroutines.CoroutineContext` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.a:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2e6b68.  v0:= instanceof @variable v3 @type ^`kotlinx.coroutines.flow.internal.g` @kind boolean;
  #L2e6b6c.  if v0 == 0 then goto L2e6b7a;
  #L2e6b70.  v3:= (`kotlinx.coroutines.flow.internal.g`) v3 @kind object;
  #L2e6b74.  call `g`(v1, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.g:(Lkotlinx/coroutines/flow/internal/g;Ljava/lang/Object;)V` @kind direct;
  #L2e6b7a.  call `a`(v1, v2) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector_commonKt;.a:(Lkotlinx/coroutines/flow/internal/SafeCollector;Lkotlin/coroutines/CoroutineContext;)V` @kind static;
  #L2e6b80.  return @kind void;
}
procedure `java.lang.Object` `f`(`kotlinx.coroutines.flow.internal.SafeCollector` v2 @kind this, `kotlin.coroutines.Continuation` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.f:(Lkotlin/coroutines/Continuation;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2e6a08.  call temp:= `getContext`(v3) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2e6a0e.  v0:= temp @kind object;
  #L2e6a10.  call `g`(v0) @signature `Lkotlinx/coroutines/c2;.g:(Lkotlin/coroutines/CoroutineContext;)V` @kind static;
  #L2e6a16.  v1:= v2.`kotlinx.coroutines.flow.internal.SafeCollector.lastEmissionContext` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L2e6a1a.  if v1 == v0 then goto L2e6a28;
  #L2e6a1e.  call `a`(v2, v0, v1, v4) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.a:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;)V` @kind direct;
  #L2e6a24.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.lastEmissionContext` @type ^`kotlin.coroutines.CoroutineContext` := v0 @kind object;
  #L2e6a28.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.completion` @type ^`kotlin.coroutines.Continuation` := v3 @kind object;
  #L2e6a2c.  call temp:= `a`() @signature `Lkotlinx/coroutines/flow/internal/SafeCollectorKt;.a:()Lkotlin/jvm/functions/Function3;` @kind static;
  #L2e6a32.  v3:= temp @kind object;
  #L2e6a34.  v0:= v2.`kotlinx.coroutines.flow.internal.SafeCollector.collector` @type ^`kotlinx.coroutines.flow.e` @kind object;
  #L2e6a38.  call temp:= `invoke`(v3, v0, v4, v2) @signature `Lkotlin/jvm/functions/Function3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2e6a3e.  v3:= temp @kind object;
  #L2e6a40.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e6a46.  v4:= temp @kind object;
  #L2e6a48.  call temp:= `areEqual`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2e6a4e.  v4:= temp;
  #L2e6a50.  if v4 != 0 then goto L2e6a5a;
  #L2e6a54.  v4:= 0I;
  #L2e6a56.  v2.`kotlinx.coroutines.flow.internal.SafeCollector.completion` @type ^`kotlin.coroutines.Continuation` := v4 @kind object;
  #L2e6a5a.  return v3 @kind object;
}
procedure `void` `g`(`kotlinx.coroutines.flow.internal.SafeCollector` v3 @kind this, `kotlinx.coroutines.flow.internal.g` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.g:(Lkotlinx/coroutines/flow/internal/g;Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2e6b94.  v0:= new `java.lang.IllegalStateException`;
  #L2e6b98.  v1:= new `java.lang.StringBuilder`;
  #L2e6b9c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2e6ba2.  v2:= "\n            Flow exception transparency is violated:\n                Previous 'emit' call has thrown exception " @kind object;
  #L2e6ba6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e6bac.  v4:= v4.`kotlinx.coroutines.flow.internal.g.b` @type ^`java.lang.Throwable` @kind object;
  #L2e6bb0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e6bb6.  v4:= ", but then emission attempt of value '" @kind object;
  #L2e6bba.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e6bc0.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e6bc6.  v4:= "' has been detected.\n                Emissions from 'catch' blocks are prohibited in order to avoid unspecified behaviour, 'Flow.catch' operator can be used instead.\n                For a more detailed explanation, please refer to Flow documentation.\n            " @kind object;
  #L2e6bca.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e6bd0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e6bd6.  v4:= temp @kind object;
  #L2e6bd8.  call temp:= `trimIndent`(v4) @signature `Lkotlin/text/StringsKt;.trimIndent:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L2e6bde.  v4:= temp @kind object;
  #L2e6be0.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e6be6.  v4:= temp @kind object;
  #L2e6be8.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e6bee.  throw v0;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.internal.SafeCollector` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e69a4.  call temp:= `f`(v1, v3, v2) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.f:(Lkotlin/coroutines/Continuation;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L2e69aa.  v2:= temp @kind object;
  #L2e69ac.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e69b2.  v0:= temp @kind object;
  #L2e69b4.  if v2 != v0 then goto L2e69be;
  #L2e69b8.  call `probeCoroutineSuspended`(v3) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L2e69be.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e69c4.  v3:= temp @kind object;
  #L2e69c6.  if v2 != v3 then goto L2e69cc;
  #L2e69ca.  return v2 @kind object;
  #L2e69cc.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e69d0.  return v2 @kind object;
  #L2e69d2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e69d4.  v0:= new `kotlinx.coroutines.flow.internal.g`;
  #L2e69d8.  call temp:= `getContext`(v3) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2e69de.  v3:= temp @kind object;
  #L2e69e0.  call `<init>`(v0, v2, v3) @signature `Lkotlinx/coroutines/flow/internal/g;.<init>:(Ljava/lang/Throwable;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L2e69e6.  v1.`kotlinx.coroutines.flow.internal.SafeCollector.lastEmissionContext` @type ^`kotlin.coroutines.CoroutineContext` := v0 @kind object;
  #L2e69ea.  throw v2;
  catch `java.lang.Throwable` @[L2e69a4..L2e69ac] goto L2e69d2;
}
procedure `kotlin.coroutines.jvm.internal.CoroutineStackFrame` `getCallerFrame`(`kotlinx.coroutines.flow.internal.SafeCollector` v2 @kind this) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2e6af0.  v0:= v2.`kotlinx.coroutines.flow.internal.SafeCollector.completion` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L2e6af4.  v1:= instanceof @variable v0 @type ^`kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind boolean;
  #L2e6af8.  if v1 == 0 then goto L2e6b02;
  #L2e6afc.  v0:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v0 @kind object;
  #L2e6b00.  goto L2e6b04;
  #L2e6b02.  v0:= 0I;
  #L2e6b04.  return v0 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `getContext`(`kotlinx.coroutines.flow.internal.SafeCollector` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.getContext:()Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e6ad0.  v0:= v1.`kotlinx.coroutines.flow.internal.SafeCollector.lastEmissionContext` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L2e6ad4.  if v0 != 0 then goto L2e6adc;
  #L2e6ad8.  v0:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L2e6adc.  return v0 @kind object;
}
procedure `java.lang.StackTraceElement` `getStackTraceElement`(`kotlinx.coroutines.flow.internal.SafeCollector` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e6abc.  v0:= 0I;
  #L2e6abe.  return v0 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.internal.SafeCollector` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2e6a6c.  call temp:= `exceptionOrNull-impl`(v4) @signature `Lkotlin/Result;.exceptionOrNull-impl:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L2e6a72.  v0:= temp @kind object;
  #L2e6a74.  if v0 != 0 then goto L2e6a7a;
  #L2e6a78.  goto L2e6a90;
  #L2e6a7a.  v1:= new `kotlinx.coroutines.flow.internal.g`;
  #L2e6a7e.  call temp:= `getContext`(v3) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind virtual;
  #L2e6a84.  v2:= temp @kind object;
  #L2e6a86.  call `<init>`(v1, v0, v2) @signature `Lkotlinx/coroutines/flow/internal/g;.<init>:(Ljava/lang/Throwable;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L2e6a8c.  v3.`kotlinx.coroutines.flow.internal.SafeCollector.lastEmissionContext` @type ^`kotlin.coroutines.CoroutineContext` := v1 @kind object;
  #L2e6a90.  v0:= v3.`kotlinx.coroutines.flow.internal.SafeCollector.completion` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L2e6a94.  if v0 != 0 then goto L2e6a9a;
  #L2e6a98.  goto L2e6aa0;
  #L2e6a9a.  call `resumeWith`(v0, v4) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L2e6aa0.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e6aa6.  v4:= temp @kind object;
  #L2e6aa8.  return v4 @kind object;
}
procedure `void` `releaseIntercepted`(`kotlinx.coroutines.flow.internal.SafeCollector` v0 @kind this) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.releaseIntercepted:()V` @AccessFlag PUBLIC {
    temp;

  #L2e6c00.  call `releaseIntercepted`(v0) @signature `Lkotlin/coroutines/jvm/internal/ContinuationImpl;.releaseIntercepted:()V` @kind super;
  #L2e6c06.  return @kind void;
}
