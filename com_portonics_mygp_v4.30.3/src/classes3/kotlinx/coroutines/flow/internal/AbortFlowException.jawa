record `kotlinx.coroutines.flow.internal.AbortFlowException` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CancellationException` @kind class {
  `kotlinx.coroutines.flow.e` `kotlinx.coroutines.flow.internal.AbortFlowException.owner` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.AbortFlowException` v1 @kind this, `kotlinx.coroutines.flow.e` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.<init>:(Lkotlinx/coroutines/flow/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2e3fa0.  v0:= "Flow was aborted, no more elements needed" @kind object;
  #L2e3fa4.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e3faa.  v1.`kotlinx.coroutines.flow.internal.AbortFlowException.owner` @type ^`kotlinx.coroutines.flow.e` := v2 @kind object;
  #L2e3fae.  return @kind void;
}
procedure `java.lang.Throwable` `fillInStackTrace`(`kotlinx.coroutines.flow.internal.AbortFlowException` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.fillInStackTrace:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e3f54.  call temp:= `c`() @signature `Lkotlinx/coroutines/o0;.c:()Z` @kind static;
  #L2e3f5a.  v0:= temp;
  #L2e3f5c.  if v0 == 0 then goto L2e3f6a;
  #L2e3f60.  call temp:= `fillInStackTrace`(v1) @signature `Ljava/util/concurrent/CancellationException;.fillInStackTrace:()Ljava/lang/Throwable;` @kind super;
  #L2e3f66.  v0:= temp @kind object;
  #L2e3f68.  return v0 @kind object;
  #L2e3f6a.  v0:= 0I;
  #L2e3f6c.  v0:= new `java.lang.StackTraceElement`[v0];
  #L2e3f70.  call `setStackTrace`(v1, v0) @signature `Ljava/util/concurrent/CancellationException;.setStackTrace:([Ljava/lang/StackTraceElement;)V` @kind virtual;
  #L2e3f76.  return v1 @kind object;
}
procedure `kotlinx.coroutines.flow.e` `getOwner`(`kotlinx.coroutines.flow.internal.AbortFlowException` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/AbortFlowException;.getOwner:()Lkotlinx/coroutines/flow/e;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e3f88.  v0:= v1.`kotlinx.coroutines.flow.internal.AbortFlowException.owner` @type ^`kotlinx.coroutines.flow.e` @kind object;
  #L2e3f8c.  return v0 @kind object;
}
