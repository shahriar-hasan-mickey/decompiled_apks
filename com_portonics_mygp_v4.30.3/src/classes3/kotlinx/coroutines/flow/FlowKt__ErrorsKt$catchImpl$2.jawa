record `kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.e` @kind interface, `kotlin.coroutines.jvm.internal.SuspendFunction` @kind interface {
  `kotlinx.coroutines.flow.e` `kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.internal.Ref$ObjectRef` `kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2` v0 @kind this, `kotlinx.coroutines.flow.e` v1 @kind object, `kotlin.jvm.internal.Ref$ObjectRef` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$catchImpl$2;.<init>:(Lkotlinx/coroutines/flow/e;Lkotlin/jvm/internal/Ref$ObjectRef;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2dc70c.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2.b` @type ^`kotlinx.coroutines.flow.e` := v1 @kind object;
  #L2dc710.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2.c` @type ^`kotlin.jvm.internal.Ref$ObjectRef` := v2 @kind object;
  #L2dc714.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2dc71a.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2` v4 @kind this, `java.lang.Object` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$catchImpl$2;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2dc640.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2$emit$1` @kind boolean;
  #L2dc644.  if v0 == 0 then goto L2dc666;
  #L2dc648.  v0:= v6 @kind object;
  #L2dc64a.  v0:= (`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2$emit$1`) v0 @kind object;
  #L2dc64e.  v1:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2$emit$1.label` @type ^`int`;
  #L2dc652.  v2:= -2147483648I;
  #L2dc656.  v3:= v1 ^& v2 @kind int;
  #L2dc65a.  if v3 == 0 then goto L2dc666;
  #L2dc65e.  v1:= v1 - v2 @kind int;
  #L2dc660.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2$emit$1.label` @type ^`int` := v1;
  #L2dc664.  goto L2dc670;
  #L2dc666.  v0:= new `kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2$emit$1`;
  #L2dc66a.  call `<init>`(v0, v4, v6) @signature `Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$catchImpl$2$emit$1;.<init>:(Lkotlinx/coroutines/flow/FlowKt__ErrorsKt$catchImpl$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2dc670.  v6:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2$emit$1.result` @type ^`java.lang.Object` @kind object;
  #L2dc674.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2dc67a.  v1:= temp @kind object;
  #L2dc67c.  v2:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2$emit$1.label` @type ^`int`;
  #L2dc680.  v3:= 1I;
  #L2dc682.  if v2 == 0 then goto L2dc6ae;
  #L2dc686.  if v2 != v3 then goto L2dc69e;
  #L2dc68a.  v5:= v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2$emit$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2dc68e.  v5:= (`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2`) v5 @kind object;
  #L2dc692.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2dc698.  goto L2dc6ce;
  #L2dc69a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2dc69c.  goto L2dc6d8;
  #L2dc69e.  v5:= new `java.lang.IllegalStateException`;
  #L2dc6a2.  v6:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2dc6a6.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2dc6ac.  throw v5;
  #L2dc6ae.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2dc6b4.  v6:= v4.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2.b` @type ^`kotlinx.coroutines.flow.e` @kind object;
  #L2dc6b8.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2$emit$1.L$0` @type ^`java.lang.Object` := v4 @kind object;
  #L2dc6bc.  v0.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2$emit$1.label` @type ^`int` := v3;
  #L2dc6c0.  call temp:= `emit`(v6, v5, v0) @signature `Lkotlinx/coroutines/flow/e;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L2dc6c6.  v5:= temp @kind object;
  #L2dc6c8.  if v5 != v1 then goto L2dc6ce;
  #L2dc6cc.  return v1 @kind object;
  #L2dc6ce.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2dc6d2.  return v5 @kind object;
  #L2dc6d4.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2dc6d6.  v5:= v4 @kind object;
  #L2dc6d8.  v5:= v5.`kotlinx.coroutines.flow.FlowKt__ErrorsKt$catchImpl$2.c` @type ^`kotlin.jvm.internal.Ref$ObjectRef` @kind object;
  #L2dc6dc.  v5.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` := v6 @kind object;
  #L2dc6e0.  throw v6;
  catch `java.lang.Throwable` @[L2dc692..L2dc698] goto L2dc69a;
  catch `java.lang.Throwable` @[L2dc6b4..L2dc6c8] goto L2dc6d4;
}
