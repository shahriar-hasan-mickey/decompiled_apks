record `kotlinx.coroutines.flow.DistinctFlowImpl$collect$2` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.e` @kind interface, `kotlin.coroutines.jvm.internal.SuspendFunction` @kind interface {
  `kotlinx.coroutines.flow.DistinctFlowImpl` `kotlinx.coroutines.flow.DistinctFlowImpl$collect$2.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.internal.Ref$ObjectRef` `kotlinx.coroutines.flow.DistinctFlowImpl$collect$2.c` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.e` `kotlinx.coroutines.flow.DistinctFlowImpl$collect$2.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2` v0 @kind this, `kotlinx.coroutines.flow.DistinctFlowImpl` v1 @kind object, `kotlin.jvm.internal.Ref$ObjectRef` v2 @kind object, `kotlinx.coroutines.flow.e` v3 @kind object) @signature `Lkotlinx/coroutines/flow/DistinctFlowImpl$collect$2;.<init>:(Lkotlinx/coroutines/flow/DistinctFlowImpl;Lkotlin/jvm/internal/Ref$ObjectRef;Lkotlinx/coroutines/flow/e;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2d9f28.  v0.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2.b` @type ^`kotlinx.coroutines.flow.DistinctFlowImpl` := v1 @kind object;
  #L2d9f2c.  v0.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2.c` @type ^`kotlin.jvm.internal.Ref$ObjectRef` := v2 @kind object;
  #L2d9f30.  v0.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2.d` @type ^`kotlinx.coroutines.flow.e` := v3 @kind object;
  #L2d9f34.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d9f3a.  return @kind void;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2` v5 @kind this, `java.lang.Object` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/DistinctFlowImpl$collect$2;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d9e44.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1` @kind boolean;
  #L2d9e48.  if v0 == 0 then goto L2d9e6a;
  #L2d9e4c.  v0:= v7 @kind object;
  #L2d9e4e.  v0:= (`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1`) v0 @kind object;
  #L2d9e52.  v1:= v0.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1.label` @type ^`int`;
  #L2d9e56.  v2:= -2147483648I;
  #L2d9e5a.  v3:= v1 ^& v2 @kind int;
  #L2d9e5e.  if v3 == 0 then goto L2d9e6a;
  #L2d9e62.  v1:= v1 - v2 @kind int;
  #L2d9e64.  v0.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1.label` @type ^`int` := v1;
  #L2d9e68.  goto L2d9e74;
  #L2d9e6a.  v0:= new `kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1`;
  #L2d9e6e.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/DistinctFlowImpl$collect$2$emit$1;.<init>:(Lkotlinx/coroutines/flow/DistinctFlowImpl$collect$2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2d9e74.  v7:= v0.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1.result` @type ^`java.lang.Object` @kind object;
  #L2d9e78.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2d9e7e.  v1:= temp @kind object;
  #L2d9e80.  v2:= v0.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1.label` @type ^`int`;
  #L2d9e84.  v3:= 1I;
  #L2d9e86.  if v2 == 0 then goto L2d9ea6;
  #L2d9e8a.  if v2 != v3 then goto L2d9e96;
  #L2d9e8e.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2d9e94.  goto L2d9f12;
  #L2d9e96.  v6:= new `java.lang.IllegalStateException`;
  #L2d9e9a.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2d9e9e.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d9ea4.  throw v6;
  #L2d9ea6.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2d9eac.  v7:= v5.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2.b` @type ^`kotlinx.coroutines.flow.DistinctFlowImpl` @kind object;
  #L2d9eb0.  v7:= v7.`kotlinx.coroutines.flow.DistinctFlowImpl.c` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L2d9eb4.  call temp:= `invoke`(v7, v6) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2d9eba.  v7:= temp @kind object;
  #L2d9ebc.  v2:= v5.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2.c` @type ^`kotlin.jvm.internal.Ref$ObjectRef` @kind object;
  #L2d9ec0.  v2:= v2.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` @kind object;
  #L2d9ec4.  v4:= `@@kotlinx.coroutines.flow.internal.o.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d9ec8.  if v2 == v4 then goto L2d9ef4;
  #L2d9ecc.  v4:= v5.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2.b` @type ^`kotlinx.coroutines.flow.DistinctFlowImpl` @kind object;
  #L2d9ed0.  v4:= v4.`kotlinx.coroutines.flow.DistinctFlowImpl.d` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L2d9ed4.  call temp:= `invoke`(v4, v2, v7) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2d9eda.  v2:= temp @kind object;
  #L2d9edc.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L2d9ee0.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L2d9ee6.  v2:= temp;
  #L2d9ee8.  if v2 != 0 then goto L2d9eee;
  #L2d9eec.  goto L2d9ef4;
  #L2d9eee.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2d9ef2.  return v6 @kind object;
  #L2d9ef4.  v2:= v5.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2.c` @type ^`kotlin.jvm.internal.Ref$ObjectRef` @kind object;
  #L2d9ef8.  v2.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` := v7 @kind object;
  #L2d9efc.  v7:= v5.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2.d` @type ^`kotlinx.coroutines.flow.e` @kind object;
  #L2d9f00.  v0.`kotlinx.coroutines.flow.DistinctFlowImpl$collect$2$emit$1.label` @type ^`int` := v3;
  #L2d9f04.  call temp:= `emit`(v7, v6, v0) @signature `Lkotlinx/coroutines/flow/e;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L2d9f0a.  v6:= temp @kind object;
  #L2d9f0c.  if v6 != v1 then goto L2d9f12;
  #L2d9f10.  return v1 @kind object;
  #L2d9f12.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2d9f16.  return v6 @kind object;
}
