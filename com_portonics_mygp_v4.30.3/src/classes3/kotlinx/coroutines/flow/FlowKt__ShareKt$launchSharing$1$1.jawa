record `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1.I$0` @AccessFlag SYNTHETIC;
  `int` `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1.label` @AccessFlag ;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$1;.<init>:(Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2dee30.  v0:= 2I;
  #L2dee32.  call `<init>`(v1, v0, v2) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L2dee38.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2dee04.  v0:= new `kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1`;
  #L2dee08.  call `<init>`(v0, v3) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$1;.<init>:(Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2dee0e.  v2:= (`java.lang.Number`) v2 @kind object;
  #L2dee12.  call temp:= `intValue`(v2) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L2dee18.  v2:= temp;
  #L2dee1a.  v0.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1.I$0` @type ^`int` := v2;
  #L2dee1e.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1` v0 @kind this, `int` v1 , `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$1;.invoke:(ILkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2ded58.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ded5e.  v1:= temp @kind object;
  #L2ded60.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2ded66.  v1:= temp @kind object;
  #L2ded68.  v1:= (`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1`) v1 @kind object;
  #L2ded6c.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2ded70.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2ded76.  v1:= temp @kind object;
  #L2ded78.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2ded8c.  v1:= (`java.lang.Number`) v1 @kind object;
  #L2ded90.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L2ded96.  v1:= temp;
  #L2ded98.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L2ded9c.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$1;.invoke:(ILkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2deda2.  v1:= temp @kind object;
  #L2deda4.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/FlowKt__ShareKt$launchSharing$1$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2dedb8.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2dedbe.  v0:= v1.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1.label` @type ^`int`;
  #L2dedc2.  if v0 != 0 then goto L2dede4;
  #L2dedc6.  call `throwOnFailure`(v2) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2dedcc.  v2:= v1.`kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1.I$0` @type ^`int`;
  #L2dedd0.  if v2 <= 0 then goto L2dedd8;
  #L2dedd4.  v2:= 1I;
  #L2dedd6.  goto L2dedda;
  #L2dedd8.  v2:= 0I;
  #L2dedda.  call temp:= `boxBoolean`(v2) @signature `Lkotlin/coroutines/jvm/internal/Boxing;.boxBoolean:(Z)Ljava/lang/Boolean;` @kind static;
  #L2dede0.  v2:= temp @kind object;
  #L2dede2.  return v2 @kind object;
  #L2dede4.  v2:= new `java.lang.IllegalStateException`;
  #L2dede8.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2dedec.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2dedf2.  throw v2;
}
