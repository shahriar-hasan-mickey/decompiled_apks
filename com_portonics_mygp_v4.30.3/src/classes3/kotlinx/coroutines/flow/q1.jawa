record `kotlinx.coroutines.flow.q1` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.AbstractFlow` @kind class {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.flow.q1.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.q1` v0 @kind this, `kotlin.jvm.functions.Function2` v1 @kind object) @signature `Lkotlinx/coroutines/flow/q1;.<init>:(Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2e1b20.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/AbstractFlow;.<init>:()V` @kind direct;
  #L2e1b26.  v0.`kotlinx.coroutines.flow.q1.b` @type ^`kotlin.jvm.functions.Function2` := v1 @kind object;
  #L2e1b2a.  return @kind void;
}
procedure `java.lang.Object` `f`(`kotlinx.coroutines.flow.q1` v1 @kind this, `kotlinx.coroutines.flow.e` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/q1;.f:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e1af0.  v0:= v1.`kotlinx.coroutines.flow.q1.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L2e1af4.  call temp:= `invoke`(v0, v2, v3) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2e1afa.  v2:= temp @kind object;
  #L2e1afc.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e1b02.  v3:= temp @kind object;
  #L2e1b04.  if v2 != v3 then goto L2e1b0a;
  #L2e1b08.  return v2 @kind object;
  #L2e1b0a.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e1b0e.  return v2 @kind object;
}
