record `kotlinx.coroutines.flow.SharedFlowImpl` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.flow.internal.a` @kind class, `kotlinx.coroutines.flow.n1` @kind interface, `kotlinx.coroutines.flow.d` @kind interface, `kotlinx.coroutines.flow.internal.l` @kind interface {
  `int` `kotlinx.coroutines.flow.SharedFlowImpl.f` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.flow.SharedFlowImpl.g` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.channels.BufferOverflow` `kotlinx.coroutines.flow.SharedFlowImpl.h` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object`[] `kotlinx.coroutines.flow.SharedFlowImpl.i` @AccessFlag PRIVATE;
  `long` `kotlinx.coroutines.flow.SharedFlowImpl.j` @AccessFlag PRIVATE;
  `long` `kotlinx.coroutines.flow.SharedFlowImpl.k` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.flow.SharedFlowImpl.l` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.flow.SharedFlowImpl.m` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind this, `int` v1 , `int` v2 , `kotlinx.coroutines.channels.BufferOverflow` v3 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.<init>:(IILkotlinx/coroutines/channels/BufferOverflow;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2e293c.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/internal/a;.<init>:()V` @kind direct;
  #L2e2942.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int` := v1;
  #L2e2946.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.g` @type ^`int` := v2;
  #L2e294a.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`kotlinx.coroutines.channels.BufferOverflow` := v3 @kind object;
  #L2e294e.  return @kind void;
}
procedure `java.lang.Object` `A`(`kotlinx.coroutines.flow.SharedFlowImpl` v8 @kind object, `kotlinx.coroutines.flow.e` v9 @kind object, `kotlin.coroutines.Continuation` v10 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.A:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2e1f3c.  v0:= instanceof @variable v10 @type ^`kotlinx.coroutines.flow.SharedFlowImpl$collect$1` @kind boolean;
  #L2e1f40.  if v0 == 0 then goto L2e1f62;
  #L2e1f44.  v0:= v10 @kind object;
  #L2e1f46.  v0:= (`kotlinx.coroutines.flow.SharedFlowImpl$collect$1`) v0 @kind object;
  #L2e1f4a.  v1:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.label` @type ^`int`;
  #L2e1f4e.  v2:= -2147483648I;
  #L2e1f52.  v3:= v1 ^& v2 @kind int;
  #L2e1f56.  if v3 == 0 then goto L2e1f62;
  #L2e1f5a.  v1:= v1 - v2 @kind int;
  #L2e1f5c.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.label` @type ^`int` := v1;
  #L2e1f60.  goto L2e1f6c;
  #L2e1f62.  v0:= new `kotlinx.coroutines.flow.SharedFlowImpl$collect$1`;
  #L2e1f66.  call `<init>`(v0, v8, v10) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl$collect$1;.<init>:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2e1f6c.  v10:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.result` @type ^`java.lang.Object` @kind object;
  #L2e1f70.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e1f76.  v1:= temp @kind object;
  #L2e1f78.  v2:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.label` @type ^`int`;
  #L2e1f7c.  v3:= 3I;
  #L2e1f7e.  v4:= 2I;
  #L2e1f80.  if v2 == 0 then goto L2e202a;
  #L2e1f84.  v8:= 1I;
  #L2e1f86.  if v2 == v8 then goto L2e1ffe;
  #L2e1f8a.  if v2 == v4 then goto L2e1fd0;
  #L2e1f8e.  if v2 != v3 then goto L2e1fc0;
  #L2e1f92.  v8:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$3` @type ^`java.lang.Object` @kind object;
  #L2e1f96.  v8:= (`kotlinx.coroutines.z1`) v8 @kind object;
  #L2e1f9a.  v9:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$2` @type ^`java.lang.Object` @kind object;
  #L2e1f9e.  v9:= (`kotlinx.coroutines.flow.u1`) v9 @kind object;
  #L2e1fa2.  v2:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$1` @type ^`java.lang.Object` @kind object;
  #L2e1fa6.  v2:= (`kotlinx.coroutines.flow.e`) v2 @kind object;
  #L2e1faa.  v5:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2e1fae.  v5:= (`kotlinx.coroutines.flow.SharedFlowImpl`) v5 @kind object;
  #L2e1fb2.  call `throwOnFailure`(v10) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2e1fb8.  v10:= v2 @kind object;
  #L2e1fba.  v2:= v8 @kind object;
  #L2e1fbc.  v8:= v5 @kind object;
  #L2e1fbe.  goto L2e205a;
  #L2e1fc0.  v8:= new `java.lang.IllegalStateException`;
  #L2e1fc4.  v9:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2e1fc8.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e1fce.  throw v8;
  #L2e1fd0.  v8:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$3` @type ^`java.lang.Object` @kind object;
  #L2e1fd4.  v8:= (`kotlinx.coroutines.z1`) v8 @kind object;
  #L2e1fd8.  v9:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$2` @type ^`java.lang.Object` @kind object;
  #L2e1fdc.  v9:= (`kotlinx.coroutines.flow.u1`) v9 @kind object;
  #L2e1fe0.  v2:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$1` @type ^`java.lang.Object` @kind object;
  #L2e1fe4.  v2:= (`kotlinx.coroutines.flow.e`) v2 @kind object;
  #L2e1fe8.  v5:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2e1fec.  v5:= (`kotlinx.coroutines.flow.SharedFlowImpl`) v5 @kind object;
  #L2e1ff0.  call `throwOnFailure`(v10) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2e1ff6.  goto L2e2060;
  #L2e1ff8.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e1ffa.  goto L2e20c6;
  #L2e1ffe.  v8:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$2` @type ^`java.lang.Object` @kind object;
  #L2e2002.  v9:= v8 @kind object;
  #L2e2004.  v9:= (`kotlinx.coroutines.flow.u1`) v9 @kind object;
  #L2e2008.  v8:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$1` @type ^`java.lang.Object` @kind object;
  #L2e200c.  v8:= (`kotlinx.coroutines.flow.e`) v8 @kind object;
  #L2e2010.  v2:= v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2e2014.  v2:= (`kotlinx.coroutines.flow.SharedFlowImpl`) v2 @kind object;
  #L2e2018.  call `throwOnFailure`(v10) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2e201e.  v10:= v8 @kind object;
  #L2e2020.  v8:= v2 @kind object;
  #L2e2022.  goto L2e2042;
  #L2e2024.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e2026.  v5:= v2 @kind object;
  #L2e2028.  goto L2e20c6;
  #L2e202a.  call `throwOnFailure`(v10) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2e2030.  call temp:= `h`(v8) @signature `Lkotlinx/coroutines/flow/internal/a;.h:()Lkotlinx/coroutines/flow/internal/c;` @kind virtual;
  #L2e2036.  v10:= temp @kind object;
  #L2e2038.  v10:= (`kotlinx.coroutines.flow.u1`) v10 @kind object;
  #L2e203c.  v7:= v10 @kind object;
  #L2e203e.  v10:= v9 @kind object;
  #L2e2040.  v9:= v7 @kind object;
  #L2e2042.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2e2048.  v2:= temp @kind object;
  #L2e204a.  v5:= `@@kotlinx.coroutines.z1.m0` @type ^`kotlinx.coroutines.y1` @kind object;
  #L2e204e.  call temp:= `get`(v2, v5) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L2e2054.  v2:= temp @kind object;
  #L2e2056.  v2:= (`kotlinx.coroutines.z1`) v2 @kind object;
  #L2e205a.  v5:= v8 @kind object;
  #L2e205c.  v8:= v2 @kind object;
  #L2e205e.  v2:= v10 @kind object;
  #L2e2060.  call temp:= `U`(v5, v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.U:(Lkotlinx/coroutines/flow/u1;)Ljava/lang/Object;` @kind direct;
  #L2e2066.  v10:= temp @kind object;
  #L2e2068.  v6:= `@@kotlinx.coroutines.flow.t1.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2e206c.  if v10 == v6 then goto L2e209e;
  #L2e2070.  if v8 != 0 then goto L2e2076;
  #L2e2074.  goto L2e207c;
  #L2e2076.  call `h`(v8) @signature `Lkotlinx/coroutines/c2;.h:(Lkotlinx/coroutines/z1;)V` @kind static;
  #L2e207c.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$0` @type ^`java.lang.Object` := v5 @kind object;
  #L2e2080.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$1` @type ^`java.lang.Object` := v2 @kind object;
  #L2e2084.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$2` @type ^`java.lang.Object` := v9 @kind object;
  #L2e2088.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$3` @type ^`java.lang.Object` := v8 @kind object;
  #L2e208c.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.label` @type ^`int` := v3;
  #L2e2090.  call temp:= `emit`(v2, v10, v0) @signature `Lkotlinx/coroutines/flow/e;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L2e2096.  v10:= temp @kind object;
  #L2e2098.  if v10 != v1 then goto L2e1fb8;
  #L2e209c.  return v1 @kind object;
  #L2e209e.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$0` @type ^`java.lang.Object` := v5 @kind object;
  #L2e20a2.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$1` @type ^`java.lang.Object` := v2 @kind object;
  #L2e20a6.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$2` @type ^`java.lang.Object` := v9 @kind object;
  #L2e20aa.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.L$3` @type ^`java.lang.Object` := v8 @kind object;
  #L2e20ae.  v0.`kotlinx.coroutines.flow.SharedFlowImpl$collect$1.label` @type ^`int` := v4;
  #L2e20b2.  call temp:= `x`(v5, v9, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.x:(Lkotlinx/coroutines/flow/u1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L2e20b8.  v10:= temp @kind object;
  #L2e20ba.  if v10 != v1 then goto L2e2060;
  #L2e20be.  return v1 @kind object;
  #L2e20c0.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e20c2.  v5:= v8 @kind object;
  #L2e20c4.  v8:= v10 @kind object;
  #L2e20c6.  call `k`(v5, v9) @signature `Lkotlinx/coroutines/flow/internal/a;.k:(Lkotlinx/coroutines/flow/internal/c;)V` @kind virtual;
  #L2e20cc.  goto L2e20d0;
  #L2e20ce.  throw v8;
  #L2e20d0.  goto L2e20ce;
  catch `java.lang.Throwable` @[L2e1fb2..L2e1fb8] goto L2e1ff8;
  catch `java.lang.Throwable` @[L2e1ff0..L2e1ff6] goto L2e1ff8;
  catch `java.lang.Throwable` @[L2e2018..L2e201e] goto L2e2024;
  catch `java.lang.Throwable` @[L2e2042..L2e205a] goto L2e20c0;
  catch `java.lang.Throwable` @[L2e2060..L2e20ba] goto L2e1ff8;
}
procedure `void` `B`(`kotlinx.coroutines.flow.SharedFlowImpl` v9 @kind this, `long` v10 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.B:(J)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2e2abc.  call temp:= `f`(v9) @signature `Lkotlinx/coroutines/flow/internal/a;.f:(Lkotlinx/coroutines/flow/internal/a;)I` @kind static;
  #L2e2ac2.  v0:= temp;
  #L2e2ac4.  if v0 != 0 then goto L2e2aca;
  #L2e2ac8.  goto L2e2b0e;
  #L2e2aca.  call temp:= `g`(v9) @signature `Lkotlinx/coroutines/flow/internal/a;.g:(Lkotlinx/coroutines/flow/internal/a;)[Lkotlinx/coroutines/flow/internal/c;` @kind static;
  #L2e2ad0.  v0:= temp @kind object;
  #L2e2ad2.  if v0 != 0 then goto L2e2ad8;
  #L2e2ad6.  goto L2e2b0e;
  #L2e2ad8.  v1:= 0I;
  #L2e2ada.  v2:= length @variable v0;
  #L2e2adc.  if v1 >= v2 then goto L2e2b0e;
  #L2e2ae0.  v3:= v0[v1] @kind object;
  #L2e2ae4.  v1:= v1 + 1;
  #L2e2ae8.  if v3 == 0 then goto L2e2adc;
  #L2e2aec.  v3:= (`kotlinx.coroutines.flow.u1`) v3 @kind object;
  #L2e2af0.  v4:= v3.`kotlinx.coroutines.flow.u1.a` @type ^`long` @kind wide;
  #L2e2af4.  v6:= 0L;
  #L2e2af8.  v8:= lcmp(v4, v6);
  #L2e2afc.  if v8 < 0 then goto L2e2adc;
  #L2e2b00.  v6:= lcmp(v4, v10);
  #L2e2b04.  if v6 >= 0 then goto L2e2adc;
  #L2e2b08.  v3.`kotlinx.coroutines.flow.u1.a` @type ^`long` := v10 @kind wide;
  #L2e2b0c.  goto L2e2adc;
  #L2e2b0e.  v9.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`long` := v10 @kind wide;
  #L2e2b12.  return @kind void;
}
procedure `void` `E`(`kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.E:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2e2b24.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`java.lang.Object`[] @kind object;
  #L2e2b28.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2e2b2e.  call temp:= `K`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e2b34.  v1:= temp @kind wide;
  #L2e2b36.  v3:= 0I;
  #L2e2b38.  call `b`(v0, v1, v3) @signature `Lkotlinx/coroutines/flow/t1;.b:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L2e2b3e.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L2e2b42.  v0:= v0 + -1;
  #L2e2b46.  v5.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int` := v0;
  #L2e2b4a.  call temp:= `K`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e2b50.  v0:= temp @kind wide;
  #L2e2b52.  v2:= 1L;
  #L2e2b56.  v0:= v0 + v2 @kind long;
  #L2e2b58.  v2:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L2e2b5c.  v4:= lcmp(v2, v0);
  #L2e2b60.  if v4 >= 0 then goto L2e2b68;
  #L2e2b64.  v5.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` := v0 @kind wide;
  #L2e2b68.  v2:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`long` @kind wide;
  #L2e2b6c.  v4:= lcmp(v2, v0);
  #L2e2b70.  if v4 >= 0 then goto L2e2b7a;
  #L2e2b74.  call `B`(v5, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.B:(J)V` @kind direct;
  #L2e2b7a.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e2b80.  v2:= temp;
  #L2e2b82.  if v2 == 0 then goto L2e2bae;
  #L2e2b86.  call temp:= `K`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e2b8c.  v2:= temp @kind wide;
  #L2e2b8e.  v4:= lcmp(v2, v0);
  #L2e2b92.  if v4 != 0 then goto L2e2b9a;
  #L2e2b96.  v0:= 1I;
  #L2e2b98.  goto L2e2b9c;
  #L2e2b9a.  v0:= 0I;
  #L2e2b9c.  if v0 == 0 then goto L2e2ba2;
  #L2e2ba0.  goto L2e2bae;
  #L2e2ba2.  v0:= new `java.lang.AssertionError`;
  #L2e2ba6.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e2bac.  throw v0;
  #L2e2bae.  return @kind void;
}
procedure `java.lang.Object` `F`(`kotlinx.coroutines.flow.SharedFlowImpl` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.F:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L2e2130.  call temp:= `d`(v1, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.d:(Ljava/lang/Object;)Z` @kind virtual;
  #L2e2136.  v0:= temp;
  #L2e2138.  if v0 == 0 then goto L2e2142;
  #L2e213c.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e2140.  return v1 @kind object;
  #L2e2142.  call temp:= `G`(v1, v2, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.G:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L2e2148.  v1:= temp @kind object;
  #L2e214a.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e2150.  v2:= temp @kind object;
  #L2e2152.  if v1 != v2 then goto L2e2158;
  #L2e2156.  return v1 @kind object;
  #L2e2158.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e215c.  return v1 @kind object;
}
procedure `java.lang.Object` `G`(`kotlinx.coroutines.flow.SharedFlowImpl` v10 @kind this, `java.lang.Object` v11 @kind object, `kotlin.coroutines.Continuation` v12 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.G:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2e218c.  v6:= new `kotlinx.coroutines.p`;
  #L2e2190.  call temp:= `intercepted`(v12) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.intercepted:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L2e2196.  v0:= temp @kind object;
  #L2e2198.  v7:= 1I;
  #L2e219a.  call `<init>`(v6, v0, v7) @signature `Lkotlinx/coroutines/p;.<init>:(Lkotlin/coroutines/Continuation;I)V` @kind direct;
  #L2e21a0.  call `A`(v6) @signature `Lkotlinx/coroutines/p;.A:()V` @kind virtual;
  #L2e21a6.  v8:= `@@kotlinx.coroutines.flow.internal.b.a` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L2e21aa.  @monitorenter v10
  #L2e21ac.  call temp:= `v`(v10, v11) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;)Z` @kind static;
  #L2e21b2.  v0:= temp;
  #L2e21b4.  if v0 == 0 then goto L2e21da;
  #L2e21b8.  v11:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L2e21bc.  v11:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e21c0.  call temp:= `constructor-impl`(v11) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2e21c6.  v11:= temp @kind object;
  #L2e21c8.  call `resumeWith`(v6, v11) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L2e21ce.  call temp:= `p`(v10, v8) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.p:(Lkotlinx/coroutines/flow/SharedFlowImpl;[Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @kind static;
  #L2e21d4.  v11:= temp @kind object;
  #L2e21d6.  v0:= 0I;
  #L2e21d8.  goto L2e222e;
  #L2e21da.  v9:= new `kotlinx.coroutines.flow.s1`;
  #L2e21de.  call temp:= `r`(v10) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.r:(Lkotlinx/coroutines/flow/SharedFlowImpl;)J` @kind static;
  #L2e21e4.  v0:= temp @kind wide;
  #L2e21e6.  call temp:= `t`(v10) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.t:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @kind static;
  #L2e21ec.  v2:= temp;
  #L2e21ee.  v2:= (`long`) v2 @kind i2l;
  #L2e21f0.  v2:= v2 + v0 @kind long;
  #L2e21f2.  v0:= v9 @kind object;
  #L2e21f4.  v1:= v10 @kind object;
  #L2e21f6.  v4:= v11 @kind object;
  #L2e21f8.  v5:= v6 @kind object;
  #L2e21fa.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lkotlinx/coroutines/flow/s1;.<init>:(Lkotlinx/coroutines/flow/SharedFlowImpl;JLjava/lang/Object;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2e2200.  call `o`(v10, v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.o:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;)V` @kind static;
  #L2e2206.  call temp:= `s`(v10) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.s:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @kind static;
  #L2e220c.  v11:= temp;
  #L2e220e.  v11:= v11 + v7 @kind int;
  #L2e2210.  call `u`(v10, v11) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.u:(Lkotlinx/coroutines/flow/SharedFlowImpl;I)V` @kind static;
  #L2e2216.  call temp:= `q`(v10) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.q:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @kind static;
  #L2e221c.  v11:= temp;
  #L2e221e.  if v11 != 0 then goto L2e222a;
  #L2e2222.  call temp:= `p`(v10, v8) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.p:(Lkotlinx/coroutines/flow/SharedFlowImpl;[Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @kind static;
  #L2e2228.  v8:= temp @kind object;
  #L2e222a.  v11:= v8 @kind object;
  #L2e222c.  v0:= v9 @kind object;
  #L2e222e.  @monitorexit v10
  #L2e2230.  if v0 != 0 then goto L2e2236;
  #L2e2234.  goto L2e223c;
  #L2e2236.  call `a`(v6, v0) @signature `Lkotlinx/coroutines/r;.a:(Lkotlinx/coroutines/o;Lkotlinx/coroutines/z0;)V` @kind static;
  #L2e223c.  v0:= 0I;
  #L2e223e.  v1:= length @variable v11;
  #L2e2240.  if v0 >= v1 then goto L2e226a;
  #L2e2244.  v2:= v11[v0] @kind object;
  #L2e2248.  v0:= v0 + 1;
  #L2e224c.  if v2 != 0 then goto L2e2252;
  #L2e2250.  goto L2e2240;
  #L2e2252.  v3:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L2e2256.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e225a.  call temp:= `constructor-impl`(v3) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2e2260.  v3:= temp @kind object;
  #L2e2262.  call `resumeWith`(v2, v3) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L2e2268.  goto L2e2240;
  #L2e226a.  call temp:= `w`(v6) @signature `Lkotlinx/coroutines/p;.w:()Ljava/lang/Object;` @kind virtual;
  #L2e2270.  v11:= temp @kind object;
  #L2e2272.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e2278.  v0:= temp @kind object;
  #L2e227a.  if v11 != v0 then goto L2e2284;
  #L2e227e.  call `probeCoroutineSuspended`(v12) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L2e2284.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e228a.  v12:= temp @kind object;
  #L2e228c.  if v11 != v12 then goto L2e2292;
  #L2e2290.  return v11 @kind object;
  #L2e2292.  v11:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e2296.  return v11 @kind object;
  #L2e2298.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e229a.  @monitorexit v10
  #L2e229c.  goto L2e22a0;
  #L2e229e.  throw v11;
  #L2e22a0.  goto L2e229e;
  catch `java.lang.Throwable` @[L2e21ac..L2e222a] goto L2e2298;
}
procedure `void` `H`(`kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.H:(Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2e2bc0.  call temp:= `P`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.P:()I` @kind direct;
  #L2e2bc6.  v0:= temp;
  #L2e2bc8.  v1:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`java.lang.Object`[] @kind object;
  #L2e2bcc.  v2:= 2I;
  #L2e2bce.  if v1 != 0 then goto L2e2be0;
  #L2e2bd2.  v1:= 0I;
  #L2e2bd4.  v3:= 0I;
  #L2e2bd6.  call temp:= `Q`(v6, v1, v3, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.Q:([Ljava/lang/Object;II)[Ljava/lang/Object;` @kind direct;
  #L2e2bdc.  v1:= temp @kind object;
  #L2e2bde.  goto L2e2bf4;
  #L2e2be0.  v3:= length @variable v1;
  #L2e2be2.  if v0 < v3 then goto L2e2bf4;
  #L2e2be6.  v3:= length @variable v1;
  #L2e2be8.  v3:= v3 * 2;
  #L2e2bec.  call temp:= `Q`(v6, v1, v0, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.Q:([Ljava/lang/Object;II)[Ljava/lang/Object;` @kind direct;
  #L2e2bf2.  v1:= temp @kind object;
  #L2e2bf4.  call temp:= `K`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e2bfa.  v2:= temp @kind wide;
  #L2e2bfc.  v4:= (`long`) v0 @kind i2l;
  #L2e2bfe.  v2:= v2 + v4 @kind long;
  #L2e2c00.  call `b`(v1, v2, v7) @signature `Lkotlinx/coroutines/flow/t1;.b:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L2e2c06.  return @kind void;
}
procedure `kotlin.coroutines.Continuation`[] `I`(`kotlinx.coroutines.flow.SharedFlowImpl` v11 @kind this, `kotlin.coroutines.Continuation`[] v12 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.I:([Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2e245c.  v0:= length @variable v12;
  #L2e245e.  call temp:= `f`(v11) @signature `Lkotlinx/coroutines/flow/internal/a;.f:(Lkotlinx/coroutines/flow/internal/a;)I` @kind static;
  #L2e2464.  v1:= temp;
  #L2e2466.  if v1 != 0 then goto L2e246c;
  #L2e246a.  goto L2e24f2;
  #L2e246c.  call temp:= `g`(v11) @signature `Lkotlinx/coroutines/flow/internal/a;.g:(Lkotlinx/coroutines/flow/internal/a;)[Lkotlinx/coroutines/flow/internal/c;` @kind static;
  #L2e2472.  v1:= temp @kind object;
  #L2e2474.  if v1 != 0 then goto L2e247a;
  #L2e2478.  goto L2e24f2;
  #L2e247a.  v2:= 0I;
  #L2e247c.  v3:= length @variable v1;
  #L2e247e.  if v2 >= v3 then goto L2e24f2;
  #L2e2482.  v4:= v1[v2] @kind object;
  #L2e2486.  v2:= v2 + 1;
  #L2e248a.  if v4 == 0 then goto L2e247e;
  #L2e248e.  v4:= (`kotlinx.coroutines.flow.u1`) v4 @kind object;
  #L2e2492.  v5:= v4.`kotlinx.coroutines.flow.u1.b` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L2e2496.  if v5 != 0 then goto L2e249c;
  #L2e249a.  goto L2e247e;
  #L2e249c.  call temp:= `T`(v11, v4) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.T:(Lkotlinx/coroutines/flow/u1;)J` @kind direct;
  #L2e24a2.  v6:= temp @kind wide;
  #L2e24a4.  v8:= 0L;
  #L2e24a8.  v10:= lcmp(v6, v8);
  #L2e24ac.  if v10 >= 0 then goto L2e24b2;
  #L2e24b0.  goto L2e247e;
  #L2e24b2.  v6:= length @variable v12;
  #L2e24b4.  if v0 < v6 then goto L2e24da;
  #L2e24b8.  v6:= length @variable v12;
  #L2e24ba.  v7:= 2I;
  #L2e24bc.  v6:= v6 * 2;
  #L2e24c0.  call temp:= `max`(v7, v6) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2e24c6.  v6:= temp;
  #L2e24c8.  call temp:= `copyOf`(v12, v6) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L2e24ce.  v12:= temp @kind object;
  #L2e24d0.  v6:= "copyOf(this, newSize)" @kind object;
  #L2e24d4.  call `checkNotNullExpressionValue`(v12, v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2e24da.  v6:= v12 @kind object;
  #L2e24dc.  v6:= (`kotlin.coroutines.Continuation`[]) v6 @kind object;
  #L2e24e0.  v7:= v0 + 1;
  #L2e24e4.  v6[v0]:= v5 @kind object;
  #L2e24e8.  v0:= 0I;
  #L2e24ea.  v4.`kotlinx.coroutines.flow.u1.b` @type ^`kotlin.coroutines.Continuation` := v0 @kind object;
  #L2e24ee.  v0:= v7;
  #L2e24f0.  goto L2e247e;
  #L2e24f2.  v12:= (`kotlin.coroutines.Continuation`[]) v12 @kind object;
  #L2e24f6.  return v12 @kind object;
}
procedure `long` `J`(`kotlinx.coroutines.flow.SharedFlowImpl` v4 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.J:()J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e284c.  call temp:= `K`(v4) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e2852.  v0:= temp @kind wide;
  #L2e2854.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L2e2858.  v2:= (`long`) v2 @kind i2l;
  #L2e285a.  v0:= v0 + v2 @kind long;
  #L2e285c.  return v0 @kind wide;
}
procedure `long` `K`(`kotlinx.coroutines.flow.SharedFlowImpl` v4 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e2870.  v0:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`long` @kind wide;
  #L2e2874.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L2e2878.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2e287e.  v0:= temp @kind wide;
  #L2e2880.  return v0 @kind wide;
}
procedure `java.lang.Object` `M`(`kotlinx.coroutines.flow.SharedFlowImpl` v1 @kind this, `long` v2 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.M:(J)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2e22fc.  v0:= v1.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`java.lang.Object`[] @kind object;
  #L2e2300.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2e2306.  call temp:= `a`(v0, v2) @signature `Lkotlinx/coroutines/flow/t1;.a:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L2e230c.  v2:= temp @kind object;
  #L2e230e.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.flow.s1` @kind boolean;
  #L2e2312.  if v3 == 0 then goto L2e231e;
  #L2e2316.  v2:= (`kotlinx.coroutines.flow.s1`) v2 @kind object;
  #L2e231a.  v2:= v2.`kotlinx.coroutines.flow.s1.d` @type ^`java.lang.Object` @kind object;
  #L2e231e.  return v2 @kind object;
}
procedure `long` `N`(`kotlinx.coroutines.flow.SharedFlowImpl` v4 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.N:()J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e2894.  call temp:= `K`(v4) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e289a.  v0:= temp @kind wide;
  #L2e289c.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L2e28a0.  v2:= (`long`) v2 @kind i2l;
  #L2e28a2.  v0:= v0 + v2 @kind long;
  #L2e28a4.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.m` @type ^`int`;
  #L2e28a8.  v2:= (`long`) v2 @kind i2l;
  #L2e28aa.  v0:= v0 + v2 @kind long;
  #L2e28ac.  return v0 @kind wide;
}
procedure `int` `O`(`kotlinx.coroutines.flow.SharedFlowImpl` v4 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.O:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e1e50.  call temp:= `K`(v4) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e1e56.  v0:= temp @kind wide;
  #L2e1e58.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L2e1e5c.  v2:= (`long`) v2 @kind i2l;
  #L2e1e5e.  v0:= v0 + v2 @kind long;
  #L2e1e60.  v2:= v4.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L2e1e64.  v0:= v0 - v2 @kind long;
  #L2e1e66.  v1:= (`int`) v0 @kind l2i;
  #L2e1e68.  return v1;
}
procedure `int` `P`(`kotlinx.coroutines.flow.SharedFlowImpl` v2 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.P:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2e1e7c.  v0:= v2.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L2e1e80.  v1:= v2.`kotlinx.coroutines.flow.SharedFlowImpl.m` @type ^`int`;
  #L2e1e84.  v0:= v0 + v1 @kind int;
  #L2e1e86.  return v0;
}
procedure `java.lang.Object`[] `Q`(`kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind this, `java.lang.Object`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.Q:([Ljava/lang/Object;II)[Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2e23cc.  v0:= 0I;
  #L2e23ce.  if v9 <= 0 then goto L2e23d6;
  #L2e23d2.  v1:= 1I;
  #L2e23d4.  goto L2e23d8;
  #L2e23d6.  v1:= 0I;
  #L2e23d8.  if v1 == 0 then goto L2e2412;
  #L2e23dc.  v9:= new `java.lang.Object`[v9];
  #L2e23e0.  v6.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`java.lang.Object`[] := v9 @kind object;
  #L2e23e4.  if v7 != 0 then goto L2e23ea;
  #L2e23e8.  return v9 @kind object;
  #L2e23ea.  call temp:= `K`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e23f0.  v1:= temp @kind wide;
  #L2e23f2.  if v0 >= v8 then goto L2e2410;
  #L2e23f6.  v3:= v0 + 1;
  #L2e23fa.  v4:= (`long`) v0 @kind i2l;
  #L2e23fc.  v4:= v4 + v1 @kind long;
  #L2e23fe.  call temp:= `a`(v7, v4) @signature `Lkotlinx/coroutines/flow/t1;.a:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L2e2404.  v0:= temp @kind object;
  #L2e2406.  call `b`(v9, v4, v0) @signature `Lkotlinx/coroutines/flow/t1;.b:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L2e240c.  v0:= v3;
  #L2e240e.  goto L2e23f2;
  #L2e2410.  return v9 @kind object;
  #L2e2412.  v7:= new `java.lang.IllegalStateException`;
  #L2e2416.  v8:= "Buffer size overflow" @kind object;
  #L2e241a.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e2420.  v8:= temp @kind object;
  #L2e2422.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e2428.  goto L2e242c;
  #L2e242a.  throw v7;
  #L2e242c.  goto L2e242a;
}
procedure `boolean` `R`(`kotlinx.coroutines.flow.SharedFlowImpl` v14 @kind this, `java.lang.Object` v15 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.R:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L2e1cc0.  call temp:= `l`(v14) @signature `Lkotlinx/coroutines/flow/internal/a;.l:()I` @kind virtual;
  #L2e1cc6.  v0:= temp;
  #L2e1cc8.  if v0 != 0 then goto L2e1cd6;
  #L2e1ccc.  call temp:= `S`(v14, v15) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.S:(Ljava/lang/Object;)Z` @kind direct;
  #L2e1cd2.  v15:= temp;
  #L2e1cd4.  return v15;
  #L2e1cd6.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L2e1cda.  v1:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.g` @type ^`int`;
  #L2e1cde.  v2:= 1I;
  #L2e1ce0.  if v0 < v1 then goto L2e1d1a;
  #L2e1ce4.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`long` @kind wide;
  #L2e1ce8.  v3:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L2e1cec.  v5:= lcmp(v0, v3);
  #L2e1cf0.  if v5 > 0 then goto L2e1d1a;
  #L2e1cf4.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.h` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L2e1cf8.  v1:= `@@kotlinx.coroutines.flow.SharedFlowImpl$a.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L2e1cfc.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2e1d02.  v0:= temp;
  #L2e1d04.  v0:= v1[v0];
  #L2e1d08.  if v0 == v2 then goto L2e1d16;
  #L2e1d0c.  v1:= 2I;
  #L2e1d0e.  if v0 == v1 then goto L2e1d14;
  #L2e1d12.  goto L2e1d1a;
  #L2e1d14.  return v2;
  #L2e1d16.  v15:= 0I;
  #L2e1d18.  return v15;
  #L2e1d1a.  call `H`(v14, v15) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.H:(Ljava/lang/Object;)V` @kind direct;
  #L2e1d20.  v15:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L2e1d24.  v15:= v15 + v2 @kind int;
  #L2e1d26.  v14.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int` := v15;
  #L2e1d2a.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.g` @type ^`int`;
  #L2e1d2e.  if v15 <= v0 then goto L2e1d38;
  #L2e1d32.  call `E`(v14) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.E:()V` @kind direct;
  #L2e1d38.  call temp:= `O`(v14) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.O:()I` @kind direct;
  #L2e1d3e.  v15:= temp;
  #L2e1d40.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L2e1d44.  if v15 <= v0 then goto L2e1d70;
  #L2e1d48.  v0:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L2e1d4c.  v3:= 1L;
  #L2e1d50.  v6:= v0 + v3 @kind long;
  #L2e1d54.  v8:= v14.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`long` @kind wide;
  #L2e1d58.  call temp:= `J`(v14) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.J:()J` @kind direct;
  #L2e1d5e.  v10:= temp @kind wide;
  #L2e1d60.  call temp:= `N`(v14) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.N:()J` @kind direct;
  #L2e1d66.  v12:= temp @kind wide;
  #L2e1d68.  v5:= v14 @kind object;
  #L2e1d6a.  call `V`(v5, v6, v8, v10, v12) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.V:(JJJJ)V` @kind direct;
  #L2e1d70.  return v2;
}
procedure `boolean` `S`(`kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.S:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2e1d84.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e1d8a.  v0:= temp;
  #L2e1d8c.  v1:= 1I;
  #L2e1d8e.  if v0 == 0 then goto L2e1db6;
  #L2e1d92.  call temp:= `l`(v6) @signature `Lkotlinx/coroutines/flow/internal/a;.l:()I` @kind virtual;
  #L2e1d98.  v0:= temp;
  #L2e1d9a.  if v0 != 0 then goto L2e1da2;
  #L2e1d9e.  v0:= 1I;
  #L2e1da0.  goto L2e1da4;
  #L2e1da2.  v0:= 0I;
  #L2e1da4.  if v0 == 0 then goto L2e1daa;
  #L2e1da8.  goto L2e1db6;
  #L2e1daa.  v7:= new `java.lang.AssertionError`;
  #L2e1dae.  call `<init>`(v7) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e1db4.  throw v7;
  #L2e1db6.  v0:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L2e1dba.  if v0 != 0 then goto L2e1dc0;
  #L2e1dbe.  return v1;
  #L2e1dc0.  call `H`(v6, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.H:(Ljava/lang/Object;)V` @kind direct;
  #L2e1dc6.  v7:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L2e1dca.  v7:= v7 + v1 @kind int;
  #L2e1dcc.  v6.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int` := v7;
  #L2e1dd0.  v0:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L2e1dd4.  if v7 <= v0 then goto L2e1dde;
  #L2e1dd8.  call `E`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.E:()V` @kind direct;
  #L2e1dde.  call temp:= `K`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e1de4.  v2:= temp @kind wide;
  #L2e1de6.  v7:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L2e1dea.  v4:= (`long`) v7 @kind i2l;
  #L2e1dec.  v2:= v2 + v4 @kind long;
  #L2e1dee.  v6.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`long` := v2 @kind wide;
  #L2e1df2.  return v1;
}
procedure `long` `T`(`kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind this, `kotlinx.coroutines.flow.u1` v7 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.T:(Lkotlinx/coroutines/flow/u1;)J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2e28c0.  v0:= v7.`kotlinx.coroutines.flow.u1.a` @type ^`long` @kind wide;
  #L2e28c4.  call temp:= `J`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.J:()J` @kind direct;
  #L2e28ca.  v2:= temp @kind wide;
  #L2e28cc.  v7:= lcmp(v0, v2);
  #L2e28d0.  if v7 >= 0 then goto L2e28d6;
  #L2e28d4.  return v0 @kind wide;
  #L2e28d6.  v7:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.g` @type ^`int`;
  #L2e28da.  v2:= -1L;
  #L2e28de.  if v7 <= 0 then goto L2e28e4;
  #L2e28e2.  return v2 @kind wide;
  #L2e28e4.  call temp:= `K`(v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e28ea.  v4:= temp @kind wide;
  #L2e28ec.  v7:= lcmp(v0, v4);
  #L2e28f0.  if v7 <= 0 then goto L2e28f6;
  #L2e28f4.  return v2 @kind wide;
  #L2e28f6.  v7:= v6.`kotlinx.coroutines.flow.SharedFlowImpl.m` @type ^`int`;
  #L2e28fa.  if v7 != 0 then goto L2e2900;
  #L2e28fe.  return v2 @kind wide;
  #L2e2900.  return v0 @kind wide;
}
procedure `java.lang.Object` `U`(`kotlinx.coroutines.flow.SharedFlowImpl` v8 @kind this, `kotlinx.coroutines.flow.u1` v9 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.U:(Lkotlinx/coroutines/flow/u1;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2e2330.  v0:= `@@kotlinx.coroutines.flow.internal.b.a` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L2e2334.  @monitorenter v8
  #L2e2336.  call temp:= `T`(v8, v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.T:(Lkotlinx/coroutines/flow/u1;)J` @kind direct;
  #L2e233c.  v1:= temp @kind wide;
  #L2e233e.  v3:= 0L;
  #L2e2342.  v5:= lcmp(v1, v3);
  #L2e2346.  if v5 >= 0 then goto L2e2350;
  #L2e234a.  v9:= `@@kotlinx.coroutines.flow.t1.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2e234e.  goto L2e2374;
  #L2e2350.  v3:= v9.`kotlinx.coroutines.flow.u1.a` @type ^`long` @kind wide;
  #L2e2354.  call temp:= `M`(v8, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.M:(J)Ljava/lang/Object;` @kind direct;
  #L2e235a.  v0:= temp @kind object;
  #L2e235c.  v5:= 1L;
  #L2e2360.  v1:= v1 + v5 @kind long;
  #L2e2362.  v9.`kotlinx.coroutines.flow.u1.a` @type ^`long` := v1 @kind wide;
  #L2e2366.  call temp:= `W`(v8, v3) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.W:(J)[Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2e236c.  v9:= temp @kind object;
  #L2e236e.  v7:= v0 @kind object;
  #L2e2370.  v0:= v9 @kind object;
  #L2e2372.  v9:= v7 @kind object;
  #L2e2374.  @monitorexit v8
  #L2e2376.  v1:= 0I;
  #L2e2378.  v2:= length @variable v0;
  #L2e237a.  if v1 >= v2 then goto L2e23a4;
  #L2e237e.  v3:= v0[v1] @kind object;
  #L2e2382.  v1:= v1 + 1;
  #L2e2386.  if v3 != 0 then goto L2e238c;
  #L2e238a.  goto L2e237a;
  #L2e238c.  v4:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L2e2390.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e2394.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2e239a.  v4:= temp @kind object;
  #L2e239c.  call `resumeWith`(v3, v4) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L2e23a2.  goto L2e237a;
  #L2e23a4.  return v9 @kind object;
  #L2e23a6.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e23a8.  @monitorexit v8
  #L2e23aa.  goto L2e23ae;
  #L2e23ac.  throw v9;
  #L2e23ae.  goto L2e23ac;
  catch `java.lang.Throwable` @[L2e2336..L2e236e] goto L2e23a6;
}
procedure `void` `V`(`kotlinx.coroutines.flow.SharedFlowImpl` v15 @kind this, `long` v16 , `long` v18 , `long` v20 , `long` v22 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.V:(JJJJ)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L2e2c68.  v0:= v15 @kind object;
  #L2e2c6a.  v1:= v16 @kind wide;
  #L2e2c6e.  v3:= v18 @kind wide;
  #L2e2c72.  call temp:= `min`(v3, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2e2c78.  v5:= temp @kind wide;
  #L2e2c7a.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e2c80.  v7:= temp;
  #L2e2c82.  v8:= 1I;
  #L2e2c84.  v9:= 0I;
  #L2e2c86.  if v7 == 0 then goto L2e2cb2;
  #L2e2c8a.  call temp:= `K`(v15) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e2c90.  v10:= temp @kind wide;
  #L2e2c92.  v7:= lcmp(v5, v10);
  #L2e2c96.  if v7 < 0 then goto L2e2c9e;
  #L2e2c9a.  v7:= 1I;
  #L2e2c9c.  goto L2e2ca0;
  #L2e2c9e.  v7:= 0I;
  #L2e2ca0.  if v7 == 0 then goto L2e2ca6;
  #L2e2ca4.  goto L2e2cb2;
  #L2e2ca6.  v1:= new `java.lang.AssertionError`;
  #L2e2caa.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e2cb0.  throw v1;
  #L2e2cb2.  call temp:= `K`(v15) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e2cb8.  v10:= temp @kind wide;
  #L2e2cba.  v7:= lcmp(v10, v5);
  #L2e2cbe.  if v7 >= 0 then goto L2e2cde;
  #L2e2cc2.  v12:= 1L;
  #L2e2cc6.  v12:= v12 + v10 @kind long;
  #L2e2cc8.  v7:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`java.lang.Object`[] @kind object;
  #L2e2ccc.  call `checkNotNull`(v7) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2e2cd2.  v14:= 0I;
  #L2e2cd4.  call `b`(v7, v10, v14) @signature `Lkotlinx/coroutines/flow/t1;.b:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L2e2cda.  v10:= v12 @kind wide;
  #L2e2cdc.  goto L2e2cba;
  #L2e2cde.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` := v1 @kind wide;
  #L2e2ce2.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`long` := v3 @kind wide;
  #L2e2ce6.  v1:= v20 - v5 @kind long;
  #L2e2cea.  v2:= (`int`) v1 @kind l2i;
  #L2e2cec.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int` := v2;
  #L2e2cf0.  v1:= v22 - v20 @kind long;
  #L2e2cf4.  v2:= (`int`) v1 @kind l2i;
  #L2e2cf6.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.m` @type ^`int` := v2;
  #L2e2cfa.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e2d00.  v1:= temp;
  #L2e2d02.  if v1 == 0 then goto L2e2d26;
  #L2e2d06.  v1:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L2e2d0a.  if v1 < 0 then goto L2e2d12;
  #L2e2d0e.  v1:= 1I;
  #L2e2d10.  goto L2e2d14;
  #L2e2d12.  v1:= 0I;
  #L2e2d14.  if v1 == 0 then goto L2e2d1a;
  #L2e2d18.  goto L2e2d26;
  #L2e2d1a.  v1:= new `java.lang.AssertionError`;
  #L2e2d1e.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e2d24.  throw v1;
  #L2e2d26.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e2d2c.  v1:= temp;
  #L2e2d2e.  if v1 == 0 then goto L2e2d52;
  #L2e2d32.  v1:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.m` @type ^`int`;
  #L2e2d36.  if v1 < 0 then goto L2e2d3e;
  #L2e2d3a.  v1:= 1I;
  #L2e2d3c.  goto L2e2d40;
  #L2e2d3e.  v1:= 0I;
  #L2e2d40.  if v1 == 0 then goto L2e2d46;
  #L2e2d44.  goto L2e2d52;
  #L2e2d46.  v1:= new `java.lang.AssertionError`;
  #L2e2d4a.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e2d50.  throw v1;
  #L2e2d52.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e2d58.  v1:= temp;
  #L2e2d5a.  if v1 == 0 then goto L2e2d90;
  #L2e2d5e.  v1:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L2e2d62.  call temp:= `K`(v15) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e2d68.  v3:= temp @kind wide;
  #L2e2d6a.  v5:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L2e2d6e.  v5:= (`long`) v5 @kind i2l;
  #L2e2d70.  v3:= v3 + v5 @kind long;
  #L2e2d72.  v5:= lcmp(v1, v3);
  #L2e2d76.  if v5 > 0 then goto L2e2d7c;
  #L2e2d7a.  goto L2e2d7e;
  #L2e2d7c.  v8:= 0I;
  #L2e2d7e.  if v8 == 0 then goto L2e2d84;
  #L2e2d82.  goto L2e2d90;
  #L2e2d84.  v1:= new `java.lang.AssertionError`;
  #L2e2d88.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e2d8e.  throw v1;
  #L2e2d90.  return @kind void;
}
procedure `void` `n`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `kotlinx.coroutines.flow.s1` v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.n:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlinx/coroutines/flow/s1;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2e2960.  call `y`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.y:(Lkotlinx/coroutines/flow/s1;)V` @kind direct;
  #L2e2966.  return @kind void;
}
procedure `void` `o`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.o:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2e2978.  call `H`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.H:(Ljava/lang/Object;)V` @kind direct;
  #L2e297e.  return @kind void;
}
procedure `kotlin.coroutines.Continuation`[] `p`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `kotlin.coroutines.Continuation`[] v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.p:(Lkotlinx/coroutines/flow/SharedFlowImpl;[Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2e2440.  call temp:= `I`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.I:([Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @kind direct;
  #L2e2446.  v0:= temp @kind object;
  #L2e2448.  return v0 @kind object;
}
procedure `int` `q`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.q:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2e1e04.  v0:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.g` @type ^`int`;
  #L2e1e08.  return v0;
}
procedure `long` `r`(`kotlinx.coroutines.flow.SharedFlowImpl` v2 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.r:(Lkotlinx/coroutines/flow/SharedFlowImpl;)J` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2e2814.  call temp:= `K`(v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e281a.  v0:= temp @kind wide;
  #L2e281c.  return v0 @kind wide;
}
procedure `int` `s`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.s:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2e1e1c.  v0:= v0.`kotlinx.coroutines.flow.SharedFlowImpl.m` @type ^`int`;
  #L2e1e20.  return v0;
}
procedure `int` `t`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.t:(Lkotlinx/coroutines/flow/SharedFlowImpl;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2e1e34.  call temp:= `P`(v0) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.P:()I` @kind direct;
  #L2e1e3a.  v0:= temp;
  #L2e1e3c.  return v0;
}
procedure `void` `u`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `int` v1 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.u:(Lkotlinx/coroutines/flow/SharedFlowImpl;I)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2e2990.  v0.`kotlinx.coroutines.flow.SharedFlowImpl.m` @type ^`int` := v1;
  #L2e2994.  return @kind void;
}
procedure `boolean` `v`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.v:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2e1c2c.  call temp:= `R`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.R:(Ljava/lang/Object;)Z` @kind direct;
  #L2e1c32.  v0:= temp;
  #L2e1c34.  return v0;
}
procedure `long` `w`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind object, `kotlinx.coroutines.flow.u1` v1 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.w:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlinx/coroutines/flow/u1;)J` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2e2830.  call temp:= `T`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.T:(Lkotlinx/coroutines/flow/u1;)J` @kind direct;
  #L2e2836.  v0:= temp @kind wide;
  #L2e2838.  return v0 @kind wide;
}
procedure `java.lang.Object` `x`(`kotlinx.coroutines.flow.SharedFlowImpl` v6 @kind this, `kotlinx.coroutines.flow.u1` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.x:(Lkotlinx/coroutines/flow/u1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2e1e98.  v0:= new `kotlinx.coroutines.p`;
  #L2e1e9c.  call temp:= `intercepted`(v8) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.intercepted:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L2e1ea2.  v1:= temp @kind object;
  #L2e1ea4.  v2:= 1I;
  #L2e1ea6.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/p;.<init>:(Lkotlin/coroutines/Continuation;I)V` @kind direct;
  #L2e1eac.  call `A`(v0) @signature `Lkotlinx/coroutines/p;.A:()V` @kind virtual;
  #L2e1eb2.  @monitorenter v6
  #L2e1eb4.  call temp:= `w`(v6, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.w:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlinx/coroutines/flow/u1;)J` @kind static;
  #L2e1eba.  v1:= temp @kind wide;
  #L2e1ebc.  v3:= 0L;
  #L2e1ec0.  v5:= lcmp(v1, v3);
  #L2e1ec4.  if v5 >= 0 then goto L2e1ed2;
  #L2e1ec8.  v7.`kotlinx.coroutines.flow.u1.b` @type ^`kotlin.coroutines.Continuation` := v0 @kind object;
  #L2e1ecc.  v7.`kotlinx.coroutines.flow.u1.b` @type ^`kotlin.coroutines.Continuation` := v0 @kind object;
  #L2e1ed0.  goto L2e1ee8;
  #L2e1ed2.  v7:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L2e1ed6.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e1eda.  call temp:= `constructor-impl`(v7) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2e1ee0.  v7:= temp @kind object;
  #L2e1ee2.  call `resumeWith`(v0, v7) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L2e1ee8.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e1eec.  @monitorexit v6
  #L2e1eee.  call temp:= `w`(v0) @signature `Lkotlinx/coroutines/p;.w:()Ljava/lang/Object;` @kind virtual;
  #L2e1ef4.  v0:= temp @kind object;
  #L2e1ef6.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e1efc.  v1:= temp @kind object;
  #L2e1efe.  if v0 != v1 then goto L2e1f08;
  #L2e1f02.  call `probeCoroutineSuspended`(v8) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L2e1f08.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e1f0e.  v8:= temp @kind object;
  #L2e1f10.  if v0 != v8 then goto L2e1f16;
  #L2e1f14.  return v0 @kind object;
  #L2e1f16.  return v7 @kind object;
  #L2e1f18.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e1f1a.  @monitorexit v6
  #L2e1f1c.  throw v7;
  catch `java.lang.Throwable` @[L2e1eb4..L2e1eec] goto L2e1f18;
}
procedure `void` `y`(`kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind this, `kotlinx.coroutines.flow.s1` v6 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.y:(Lkotlinx/coroutines/flow/s1;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2e29a8.  @monitorenter v5
  #L2e29aa.  v0:= v6.`kotlinx.coroutines.flow.s1.c` @type ^`long` @kind wide;
  #L2e29ae.  call temp:= `K`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e29b4.  v2:= temp @kind wide;
  #L2e29b6.  v4:= lcmp(v0, v2);
  #L2e29ba.  if v4 >= 0 then goto L2e29c2;
  #L2e29be.  @monitorexit v5
  #L2e29c0.  return @kind void;
  #L2e29c2.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`java.lang.Object`[] @kind object;
  #L2e29c6.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2e29cc.  v1:= v6.`kotlinx.coroutines.flow.s1.c` @type ^`long` @kind wide;
  #L2e29d0.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/flow/t1;.a:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L2e29d6.  v1:= temp @kind object;
  #L2e29d8.  if v1 == v6 then goto L2e29e0;
  #L2e29dc.  @monitorexit v5
  #L2e29de.  return @kind void;
  #L2e29e0.  v1:= v6.`kotlinx.coroutines.flow.s1.c` @type ^`long` @kind wide;
  #L2e29e4.  v6:= `@@kotlinx.coroutines.flow.t1.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2e29e8.  call `b`(v0, v1, v6) @signature `Lkotlinx/coroutines/flow/t1;.b:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L2e29ee.  call `z`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.z:()V` @kind direct;
  #L2e29f4.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e29f8.  @monitorexit v5
  #L2e29fa.  return @kind void;
  #L2e29fc.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e29fe.  @monitorexit v5
  #L2e2a00.  throw v6;
  catch `java.lang.Throwable` @[L2e29aa..L2e29b6] goto L2e29fc;
  catch `java.lang.Throwable` @[L2e29c2..L2e29d8] goto L2e29fc;
  catch `java.lang.Throwable` @[L2e29e0..L2e29f8] goto L2e29fc;
}
procedure `void` `z`(`kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.z:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2e2a30.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.g` @type ^`int`;
  #L2e2a34.  if v0 != 0 then goto L2e2a44;
  #L2e2a38.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.m` @type ^`int`;
  #L2e2a3c.  v1:= 1I;
  #L2e2a3e.  if v0 > v1 then goto L2e2a44;
  #L2e2a42.  return @kind void;
  #L2e2a44.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`java.lang.Object`[] @kind object;
  #L2e2a48.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2e2a4e.  v1:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.m` @type ^`int`;
  #L2e2a52.  if v1 <= 0 then goto L2e2aaa;
  #L2e2a56.  call temp:= `K`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e2a5c.  v1:= temp @kind wide;
  #L2e2a5e.  call temp:= `P`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.P:()I` @kind direct;
  #L2e2a64.  v3:= temp;
  #L2e2a66.  v3:= (`long`) v3 @kind i2l;
  #L2e2a68.  v1:= v1 + v3 @kind long;
  #L2e2a6a.  v3:= 1L;
  #L2e2a6e.  v1:= v1 - v3 @kind long;
  #L2e2a70.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/flow/t1;.a:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L2e2a76.  v1:= temp @kind object;
  #L2e2a78.  v2:= `@@kotlinx.coroutines.flow.t1.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2e2a7c.  if v1 != v2 then goto L2e2aaa;
  #L2e2a80.  v1:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.m` @type ^`int`;
  #L2e2a84.  v1:= v1 + -1;
  #L2e2a88.  v5.`kotlinx.coroutines.flow.SharedFlowImpl.m` @type ^`int` := v1;
  #L2e2a8c.  call temp:= `K`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e2a92.  v1:= temp @kind wide;
  #L2e2a94.  call temp:= `P`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.P:()I` @kind direct;
  #L2e2a9a.  v3:= temp;
  #L2e2a9c.  v3:= (`long`) v3 @kind i2l;
  #L2e2a9e.  v1:= v1 + v3 @kind long;
  #L2e2aa0.  v3:= 0I;
  #L2e2aa2.  call `b`(v0, v1, v3) @signature `Lkotlinx/coroutines/flow/t1;.b:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L2e2aa8.  goto L2e2a4e;
  #L2e2aaa.  return @kind void;
}
procedure `kotlinx.coroutines.flow.u1` `C`(`kotlinx.coroutines.flow.SharedFlowImpl` v1 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.C:()Lkotlinx/coroutines/flow/u1;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2e27a8.  v0:= new `kotlinx.coroutines.flow.u1`;
  #L2e27ac.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/u1;.<init>:()V` @kind direct;
  #L2e27b2.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.u1`[] `D`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.D:(I)[Lkotlinx/coroutines/flow/u1;` @AccessFlag PROTECTED {
    temp;

  #L2e27c4.  v1:= new `kotlinx.coroutines.flow.u1`[v1];
  #L2e27c8.  return v1 @kind object;
}
procedure `java.lang.Object` `L`(`kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.L:()Ljava/lang/Object;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2e22c0.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`java.lang.Object`[] @kind object;
  #L2e22c4.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2e22ca.  v1:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L2e22ce.  call temp:= `O`(v5) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.O:()I` @kind direct;
  #L2e22d4.  v3:= temp;
  #L2e22d6.  v3:= (`long`) v3 @kind i2l;
  #L2e22d8.  v1:= v1 + v3 @kind long;
  #L2e22da.  v3:= 1L;
  #L2e22de.  v1:= v1 - v3 @kind long;
  #L2e22e0.  call temp:= `a`(v0, v1) @signature `Lkotlinx/coroutines/flow/t1;.a:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L2e22e6.  v0:= temp @kind object;
  #L2e22e8.  return v0 @kind object;
}
procedure `kotlin.coroutines.Continuation`[] `W`(`kotlinx.coroutines.flow.SharedFlowImpl` v22 @kind this, `long` v23 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.W:(J)[Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L2e2508.  v9:= v22 @kind object;
  #L2e250c.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e2512.  v0:= temp;
  #L2e2514.  if v0 == 0 then goto L2e253c;
  #L2e2518.  v0:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`long` @kind wide;
  #L2e251c.  v2:= lcmp(v23, v0);
  #L2e2520.  if v2 < 0 then goto L2e2528;
  #L2e2524.  v0:= 1I;
  #L2e2526.  goto L2e252a;
  #L2e2528.  v0:= 0I;
  #L2e252a.  if v0 == 0 then goto L2e2530;
  #L2e252e.  goto L2e253c;
  #L2e2530.  v0:= new `java.lang.AssertionError`;
  #L2e2534.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e253a.  throw v0;
  #L2e253c.  v0:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`long` @kind wide;
  #L2e2540.  v2:= lcmp(v23, v0);
  #L2e2544.  if v2 <= 0 then goto L2e254e;
  #L2e2548.  v0:= `@@kotlinx.coroutines.flow.internal.b.a` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L2e254c.  return v0 @kind object;
  #L2e254e.  call temp:= `K`(v22) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.K:()J` @kind direct;
  #L2e2554.  v0:= temp @kind wide;
  #L2e2556.  v2:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.l` @type ^`int`;
  #L2e255a.  v2:= (`long`) v2 @kind i2l;
  #L2e255c.  v2:= v2 + v0 @kind long;
  #L2e255e.  v4:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.g` @type ^`int`;
  #L2e2562.  v5:= 1L;
  #L2e2566.  if v4 != 0 then goto L2e2574;
  #L2e256a.  v4:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.m` @type ^`int`;
  #L2e256e.  if v4 <= 0 then goto L2e2574;
  #L2e2572.  v2:= v2 + v5 @kind long;
  #L2e2574.  call temp:= `f`(v22) @signature `Lkotlinx/coroutines/flow/internal/a;.f:(Lkotlinx/coroutines/flow/internal/a;)I` @kind static;
  #L2e257a.  v4:= temp;
  #L2e257c.  if v4 != 0 then goto L2e2582;
  #L2e2580.  goto L2e25c4;
  #L2e2582.  call temp:= `g`(v22) @signature `Lkotlinx/coroutines/flow/internal/a;.g:(Lkotlinx/coroutines/flow/internal/a;)[Lkotlinx/coroutines/flow/internal/c;` @kind static;
  #L2e2588.  v4:= temp @kind object;
  #L2e258a.  if v4 != 0 then goto L2e2590;
  #L2e258e.  goto L2e25c4;
  #L2e2590.  v7:= length @variable v4;
  #L2e2592.  v8:= 0I;
  #L2e2594.  if v8 >= v7 then goto L2e25c4;
  #L2e2598.  v12:= v4[v8] @kind object;
  #L2e259c.  v8:= v8 + 1;
  #L2e25a0.  if v12 == 0 then goto L2e2594;
  #L2e25a4.  v12:= (`kotlinx.coroutines.flow.u1`) v12 @kind object;
  #L2e25a8.  v12:= v12.`kotlinx.coroutines.flow.u1.a` @type ^`long` @kind wide;
  #L2e25ac.  v14:= 0L;
  #L2e25b0.  v16:= lcmp(v12, v14);
  #L2e25b4.  if v16 < 0 then goto L2e2594;
  #L2e25b8.  v14:= lcmp(v12, v2);
  #L2e25bc.  if v14 >= 0 then goto L2e2594;
  #L2e25c0.  v2:= v12 @kind wide;
  #L2e25c2.  goto L2e2594;
  #L2e25c4.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e25ca.  v4:= temp;
  #L2e25cc.  if v4 == 0 then goto L2e25f4;
  #L2e25d0.  v7:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`long` @kind wide;
  #L2e25d4.  v4:= lcmp(v2, v7);
  #L2e25d8.  if v4 < 0 then goto L2e25e0;
  #L2e25dc.  v4:= 1I;
  #L2e25de.  goto L2e25e2;
  #L2e25e0.  v4:= 0I;
  #L2e25e2.  if v4 == 0 then goto L2e25e8;
  #L2e25e6.  goto L2e25f4;
  #L2e25e8.  v0:= new `java.lang.AssertionError`;
  #L2e25ec.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e25f2.  throw v0;
  #L2e25f4.  v7:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`long` @kind wide;
  #L2e25f8.  v4:= lcmp(v2, v7);
  #L2e25fc.  if v4 > 0 then goto L2e2606;
  #L2e2600.  v0:= `@@kotlinx.coroutines.flow.internal.b.a` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L2e2604.  return v0 @kind object;
  #L2e2606.  call temp:= `J`(v22) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.J:()J` @kind direct;
  #L2e260c.  v7:= temp @kind wide;
  #L2e260e.  call temp:= `l`(v22) @signature `Lkotlinx/coroutines/flow/internal/a;.l:()I` @kind virtual;
  #L2e2614.  v4:= temp;
  #L2e2616.  if v4 <= 0 then goto L2e2634;
  #L2e261a.  v12:= v7 - v2 @kind long;
  #L2e261e.  v4:= (`int`) v12 @kind l2i;
  #L2e2620.  v12:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.m` @type ^`int`;
  #L2e2624.  v13:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.g` @type ^`int`;
  #L2e2628.  v13:= v13 - v4 @kind int;
  #L2e262a.  call temp:= `min`(v12, v13) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2e2630.  v4:= temp;
  #L2e2632.  goto L2e2638;
  #L2e2634.  v4:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.m` @type ^`int`;
  #L2e2638.  v12:= `@@kotlinx.coroutines.flow.internal.b.a` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L2e263c.  v13:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.m` @type ^`int`;
  #L2e2640.  v13:= (`long`) v13 @kind i2l;
  #L2e2642.  v13:= v13 + v7 @kind long;
  #L2e2644.  if v4 <= 0 then goto L2e26d2;
  #L2e2648.  v12:= new `kotlin.coroutines.Continuation`[v4];
  #L2e264c.  v15:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`java.lang.Object`[] @kind object;
  #L2e2650.  call `checkNotNull`(v15) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2e2656.  v10:= v7 @kind wide;
  #L2e2658.  v17:= 0I;
  #L2e265c.  v18:= lcmp(v7, v13);
  #L2e2660.  if v18 >= 0 then goto L2e26ca;
  #L2e2664.  v18:= v7 + v5 @kind long;
  #L2e2668.  call temp:= `a`(v15, v7) @signature `Lkotlinx/coroutines/flow/t1;.a:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L2e266e.  v5:= temp @kind object;
  #L2e2670.  v6:= `@@kotlinx.coroutines.flow.t1.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2e2674.  if v5 == v6 then goto L2e26c0;
  #L2e2678.  v20:= v2 @kind wide;
  #L2e267c.  v2:= "null cannot be cast to non-null type kotlinx.coroutines.flow.SharedFlowImpl.Emitter" @kind object;
  #L2e2680.  call temp:= `requireNonNull`(v5, v2) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2e2686.  v5:= (`kotlinx.coroutines.flow.s1`) v5 @kind object;
  #L2e268a.  v2:= v17 + 1;
  #L2e268e.  v3:= v5.`kotlinx.coroutines.flow.s1.e` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L2e2692.  v12[v17]:= v3 @kind object;
  #L2e2696.  call `b`(v15, v7, v6) @signature `Lkotlinx/coroutines/flow/t1;.b:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L2e269c.  v3:= v5.`kotlinx.coroutines.flow.s1.d` @type ^`java.lang.Object` @kind object;
  #L2e26a0.  call `b`(v15, v10, v3) @signature `Lkotlinx/coroutines/flow/t1;.b:([Ljava/lang/Object;JLjava/lang/Object;)V` @kind static;
  #L2e26a6.  v5:= 1L;
  #L2e26aa.  v10:= v10 + v5 @kind long;
  #L2e26ac.  if v2 < v4 then goto L2e26b2;
  #L2e26b0.  goto L2e26ce;
  #L2e26b2.  v17:= v2;
  #L2e26b6.  v7:= v18 @kind wide;
  #L2e26ba.  v2:= v20 @kind wide;
  #L2e26be.  goto L2e26c4;
  #L2e26c0.  v7:= v18 @kind wide;
  #L2e26c4.  v5:= 1L;
  #L2e26c8.  goto L2e265c;
  #L2e26ca.  v20:= v2 @kind wide;
  #L2e26ce.  v7:= v10 @kind wide;
  #L2e26d0.  goto L2e26d6;
  #L2e26d2.  v20:= v2 @kind wide;
  #L2e26d6.  v0:= v7 - v0 @kind long;
  #L2e26da.  v1:= (`int`) v0 @kind l2i;
  #L2e26dc.  call temp:= `l`(v22) @signature `Lkotlinx/coroutines/flow/internal/a;.l:()I` @kind virtual;
  #L2e26e2.  v0:= temp;
  #L2e26e4.  if v0 != 0 then goto L2e26ec;
  #L2e26e8.  v3:= v7 @kind wide;
  #L2e26ea.  goto L2e26f0;
  #L2e26ec.  v3:= v20 @kind wide;
  #L2e26f0.  v5:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L2e26f4.  v0:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.f` @type ^`int`;
  #L2e26f8.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2e26fe.  v0:= temp;
  #L2e2700.  v0:= (`long`) v0 @kind i2l;
  #L2e2702.  v0:= v7 - v0 @kind long;
  #L2e2706.  call temp:= `max`(v5, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L2e270c.  v0:= temp @kind wide;
  #L2e270e.  v2:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.g` @type ^`int`;
  #L2e2712.  if v2 != 0 then goto L2e2748;
  #L2e2716.  v2:= lcmp(v0, v13);
  #L2e271a.  if v2 >= 0 then goto L2e2748;
  #L2e271e.  v2:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.i` @type ^`java.lang.Object`[] @kind object;
  #L2e2722.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2e2728.  call temp:= `a`(v2, v0) @signature `Lkotlinx/coroutines/flow/t1;.a:([Ljava/lang/Object;J)Ljava/lang/Object;` @kind static;
  #L2e272e.  v2:= temp @kind object;
  #L2e2730.  v5:= `@@kotlinx.coroutines.flow.t1.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2e2734.  call temp:= `areEqual`(v2, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2e273a.  v2:= temp;
  #L2e273c.  if v2 == 0 then goto L2e2748;
  #L2e2740.  v5:= 1L;
  #L2e2744.  v7:= v7 + v5 @kind long;
  #L2e2746.  v0:= v0 + v5 @kind long;
  #L2e2748.  v1:= v0 @kind wide;
  #L2e274a.  v5:= v7 @kind wide;
  #L2e274c.  v0:= v22 @kind object;
  #L2e2750.  v7:= v13 @kind wide;
  #L2e2752.  call `V`(v0, v1, v3, v5, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.V:(JJJJ)V` @kind direct;
  #L2e2758.  call `z`(v22) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.z:()V` @kind direct;
  #L2e275e.  v0:= length @variable v12;
  #L2e2760.  if v0 != 0 then goto L2e2768;
  #L2e2764.  v10:= 1I;
  #L2e2766.  goto L2e276a;
  #L2e2768.  v10:= 0I;
  #L2e276a.  v0:= 1I;
  #L2e276c.  v0:= v0 ^~ v10 @kind int;
  #L2e276e.  if v0 == 0 then goto L2e277a;
  #L2e2772.  call temp:= `I`(v9, v12) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.I:([Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @kind direct;
  #L2e2778.  v12:= temp @kind object;
  #L2e277a.  return v12 @kind object;
}
procedure `long` `X`(`kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.X:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2e2914.  v0:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.j` @type ^`long` @kind wide;
  #L2e2918.  v2:= v5.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`long` @kind wide;
  #L2e291c.  v4:= lcmp(v0, v2);
  #L2e2920.  if v4 >= 0 then goto L2e2928;
  #L2e2924.  v5.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`long` := v0 @kind wide;
  #L2e2928.  return v0 @kind wide;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind this, `kotlinx.coroutines.flow.e` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.a:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L2e2114.  call temp:= `A`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.A:(Lkotlinx/coroutines/flow/SharedFlowImpl;Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L2e211a.  v1:= temp @kind object;
  #L2e211c.  return v1 @kind object;
}
procedure `kotlinx.coroutines.flow.d` `b`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `int` v2 , `kotlinx.coroutines.channels.BufferOverflow` v3 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.b:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/d;` @AccessFlag PUBLIC {
    temp;

  #L2e278c.  call temp:= `c`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/flow/t1;.c:(Lkotlinx/coroutines/flow/r1;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/d;` @kind static;
  #L2e2792.  v1:= temp @kind object;
  #L2e2794.  return v1 @kind object;
}
procedure `void` `c`(`kotlinx.coroutines.flow.SharedFlowImpl` v9 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2e2c18.  @monitorenter v9
  #L2e2c1a.  call temp:= `J`(v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.J:()J` @kind direct;
  #L2e2c20.  v1:= temp @kind wide;
  #L2e2c22.  v3:= v9.`kotlinx.coroutines.flow.SharedFlowImpl.k` @type ^`long` @kind wide;
  #L2e2c26.  call temp:= `J`(v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.J:()J` @kind direct;
  #L2e2c2c.  v5:= temp @kind wide;
  #L2e2c2e.  call temp:= `N`(v9) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.N:()J` @kind direct;
  #L2e2c34.  v7:= temp @kind wide;
  #L2e2c36.  v0:= v9 @kind object;
  #L2e2c38.  call `V`(v0, v1, v3, v5, v7) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.V:(JJJJ)V` @kind direct;
  #L2e2c3e.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e2c42.  @monitorexit v9
  #L2e2c44.  return @kind void;
  #L2e2c46.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e2c48.  @monitorexit v9
  #L2e2c4a.  throw v0;
  catch `java.lang.Throwable` @[L2e2c1a..L2e2c42] goto L2e2c46;
}
procedure `boolean` `d`(`kotlinx.coroutines.flow.SharedFlowImpl` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.d:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2e1c48.  v0:= `@@kotlinx.coroutines.flow.internal.b.a` @type ^`kotlin.coroutines.Continuation`[] @kind object;
  #L2e1c4c.  @monitorenter v5
  #L2e1c4e.  call temp:= `R`(v5, v6) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.R:(Ljava/lang/Object;)Z` @kind direct;
  #L2e1c54.  v6:= temp;
  #L2e1c56.  v1:= 0I;
  #L2e1c58.  if v6 == 0 then goto L2e1c68;
  #L2e1c5c.  call temp:= `I`(v5, v0) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.I:([Lkotlin/coroutines/Continuation;)[Lkotlin/coroutines/Continuation;` @kind direct;
  #L2e1c62.  v0:= temp @kind object;
  #L2e1c64.  v6:= 1I;
  #L2e1c66.  goto L2e1c6a;
  #L2e1c68.  v6:= 0I;
  #L2e1c6a.  @monitorexit v5
  #L2e1c6c.  v2:= length @variable v0;
  #L2e1c6e.  if v1 >= v2 then goto L2e1c98;
  #L2e1c72.  v3:= v0[v1] @kind object;
  #L2e1c76.  v1:= v1 + 1;
  #L2e1c7a.  if v3 != 0 then goto L2e1c80;
  #L2e1c7e.  goto L2e1c6e;
  #L2e1c80.  v4:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L2e1c84.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e1c88.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2e1c8e.  v4:= temp @kind object;
  #L2e1c90.  call `resumeWith`(v3, v4) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L2e1c96.  goto L2e1c6e;
  #L2e1c98.  return v6;
  #L2e1c9a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e1c9c.  @monitorexit v5
  #L2e1c9e.  goto L2e1ca2;
  #L2e1ca0.  throw v6;
  #L2e1ca2.  goto L2e1ca0;
  catch `java.lang.Throwable` @[L2e1c4e..L2e1c64] goto L2e1c9a;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L2e2170.  call temp:= `F`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.F:(Lkotlinx/coroutines/flow/SharedFlowImpl;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L2e2176.  v1:= temp @kind object;
  #L2e2178.  return v1 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.c` `i`(`kotlinx.coroutines.flow.SharedFlowImpl` v1 @kind this) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.i:()Lkotlinx/coroutines/flow/internal/c;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2e27dc.  call temp:= `C`(v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.C:()Lkotlinx/coroutines/flow/u1;` @kind virtual;
  #L2e27e2.  v0:= temp @kind object;
  #L2e27e4.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.c`[] `j`(`kotlinx.coroutines.flow.SharedFlowImpl` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.j:(I)[Lkotlinx/coroutines/flow/internal/c;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2e27f8.  call temp:= `D`(v0, v1) @signature `Lkotlinx/coroutines/flow/SharedFlowImpl;.D:(I)[Lkotlinx/coroutines/flow/u1;` @kind virtual;
  #L2e27fe.  v1:= temp @kind object;
  #L2e2800.  return v1 @kind object;
}
