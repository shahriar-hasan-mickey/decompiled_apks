record `kotlinx.coroutines.flow.AbstractFlow` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.flow.d` @kind interface {
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.AbstractFlow` v0 @kind this) @signature `Lkotlinx/coroutines/flow/AbstractFlow;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2d9d5c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d9d62.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.AbstractFlow` v5 @kind this, `kotlinx.coroutines.flow.e` v6 @kind object, `kotlin.coroutines.Continuation` v7 @kind object) @signature `Lkotlinx/coroutines/flow/AbstractFlow;.a:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d9c78.  v0:= instanceof @variable v7 @type ^`kotlinx.coroutines.flow.AbstractFlow$collect$1` @kind boolean;
  #L2d9c7c.  if v0 == 0 then goto L2d9c9e;
  #L2d9c80.  v0:= v7 @kind object;
  #L2d9c82.  v0:= (`kotlinx.coroutines.flow.AbstractFlow$collect$1`) v0 @kind object;
  #L2d9c86.  v1:= v0.`kotlinx.coroutines.flow.AbstractFlow$collect$1.label` @type ^`int`;
  #L2d9c8a.  v2:= -2147483648I;
  #L2d9c8e.  v3:= v1 ^& v2 @kind int;
  #L2d9c92.  if v3 == 0 then goto L2d9c9e;
  #L2d9c96.  v1:= v1 - v2 @kind int;
  #L2d9c98.  v0.`kotlinx.coroutines.flow.AbstractFlow$collect$1.label` @type ^`int` := v1;
  #L2d9c9c.  goto L2d9ca8;
  #L2d9c9e.  v0:= new `kotlinx.coroutines.flow.AbstractFlow$collect$1`;
  #L2d9ca2.  call `<init>`(v0, v5, v7) @signature `Lkotlinx/coroutines/flow/AbstractFlow$collect$1;.<init>:(Lkotlinx/coroutines/flow/AbstractFlow;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2d9ca8.  v7:= v0.`kotlinx.coroutines.flow.AbstractFlow$collect$1.result` @type ^`java.lang.Object` @kind object;
  #L2d9cac.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2d9cb2.  v1:= temp @kind object;
  #L2d9cb4.  v2:= v0.`kotlinx.coroutines.flow.AbstractFlow$collect$1.label` @type ^`int`;
  #L2d9cb8.  v3:= 1I;
  #L2d9cba.  if v2 == 0 then goto L2d9ce6;
  #L2d9cbe.  if v2 != v3 then goto L2d9cd6;
  #L2d9cc2.  v6:= v0.`kotlinx.coroutines.flow.AbstractFlow$collect$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2d9cc6.  v6:= (`kotlinx.coroutines.flow.internal.SafeCollector`) v6 @kind object;
  #L2d9cca.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2d9cd0.  goto L2d9d16;
  #L2d9cd2.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2d9cd4.  goto L2d9d2a;
  #L2d9cd6.  v6:= new `java.lang.IllegalStateException`;
  #L2d9cda.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2d9cde.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d9ce4.  throw v6;
  #L2d9ce6.  call `throwOnFailure`(v7) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2d9cec.  v7:= new `kotlinx.coroutines.flow.internal.SafeCollector`;
  #L2d9cf0.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2d9cf6.  v2:= temp @kind object;
  #L2d9cf8.  call `<init>`(v7, v6, v2) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.<init>:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L2d9cfe.  v0.`kotlinx.coroutines.flow.AbstractFlow$collect$1.L$0` @type ^`java.lang.Object` := v7 @kind object;
  #L2d9d02.  v0.`kotlinx.coroutines.flow.AbstractFlow$collect$1.label` @type ^`int` := v3;
  #L2d9d06.  call temp:= `f`(v5, v7, v0) @signature `Lkotlinx/coroutines/flow/AbstractFlow;.f:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2d9d0c.  v6:= temp @kind object;
  #L2d9d0e.  if v6 != v1 then goto L2d9d14;
  #L2d9d12.  return v1 @kind object;
  #L2d9d14.  v6:= v7 @kind object;
  #L2d9d16.  call `releaseIntercepted`(v6) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.releaseIntercepted:()V` @kind virtual;
  #L2d9d1c.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2d9d20.  return v6 @kind object;
  #L2d9d22.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2d9d24.  v4:= v7 @kind object;
  #L2d9d26.  v7:= v6 @kind object;
  #L2d9d28.  v6:= v4 @kind object;
  #L2d9d2a.  call `releaseIntercepted`(v6) @signature `Lkotlinx/coroutines/flow/internal/SafeCollector;.releaseIntercepted:()V` @kind virtual;
  #L2d9d30.  throw v7;
  catch `java.lang.Throwable` @[L2d9cca..L2d9cd0] goto L2d9cd2;
  catch `java.lang.Throwable` @[L2d9cfe..L2d9d0e] goto L2d9d22;
}
procedure `java.lang.Object` `f`(`kotlinx.coroutines.flow.e` v0 @kind object, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlinx/coroutines/flow/AbstractFlow;.f:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
