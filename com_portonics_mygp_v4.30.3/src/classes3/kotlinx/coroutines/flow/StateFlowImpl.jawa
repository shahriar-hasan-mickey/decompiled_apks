record `kotlinx.coroutines.flow.StateFlowImpl` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.internal.a` @kind class, `kotlinx.coroutines.flow.o1` @kind interface, `kotlinx.coroutines.flow.d` @kind interface, `kotlinx.coroutines.flow.internal.l` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.flow.StateFlowImpl._state` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.flow.StateFlowImpl.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.StateFlowImpl` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2e3adc.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/internal/a;.<init>:()V` @kind direct;
  #L2e3ae2.  v0.`kotlinx.coroutines.flow.StateFlowImpl._state` @type ^`java.lang.Object` := v1 @kind object;
  #L2e3ae6.  return @kind void;
}
procedure `boolean` `p`(`kotlinx.coroutines.flow.StateFlowImpl` v6 @kind this, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.p:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2e3744.  call temp:= `m`(v6) @signature `Lkotlinx/coroutines/flow/internal/a;.m:()[Lkotlinx/coroutines/flow/internal/c;` @kind virtual;
  #L2e374a.  @monitorenter v6
  #L2e374c.  v0:= v6.`kotlinx.coroutines.flow.StateFlowImpl._state` @type ^`java.lang.Object` @kind object;
  #L2e3750.  v1:= 0I;
  #L2e3752.  if v7 == 0 then goto L2e3766;
  #L2e3756.  call temp:= `areEqual`(v0, v7) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2e375c.  v7:= temp;
  #L2e375e.  if v7 != 0 then goto L2e3766;
  #L2e3762.  @monitorexit v6
  #L2e3764.  return v1;
  #L2e3766.  call temp:= `areEqual`(v0, v8) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2e376c.  v7:= temp;
  #L2e376e.  v0:= 1I;
  #L2e3770.  if v7 == 0 then goto L2e3778;
  #L2e3774.  @monitorexit v6
  #L2e3776.  return v0;
  #L2e3778.  v6.`kotlinx.coroutines.flow.StateFlowImpl._state` @type ^`java.lang.Object` := v8 @kind object;
  #L2e377c.  v7:= v6.`kotlinx.coroutines.flow.StateFlowImpl.f` @type ^`int`;
  #L2e3780.  v8:= v7 ^& 1;
  #L2e3784.  if v8 != 0 then goto L2e37f4;
  #L2e3788.  v7:= v7 + v0 @kind int;
  #L2e378a.  v6.`kotlinx.coroutines.flow.StateFlowImpl.f` @type ^`int` := v7;
  #L2e378e.  call temp:= `m`(v6) @signature `Lkotlinx/coroutines/flow/internal/a;.m:()[Lkotlinx/coroutines/flow/internal/c;` @kind virtual;
  #L2e3794.  v8:= temp @kind object;
  #L2e3796.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e379a.  @monitorexit v6
  #L2e379c.  v8:= (`kotlinx.coroutines.flow.b2`[]) v8 @kind object;
  #L2e37a0.  if v8 != 0 then goto L2e37a6;
  #L2e37a4.  goto L2e37c4;
  #L2e37a6.  v2:= length @variable v8;
  #L2e37a8.  v3:= 0I;
  #L2e37aa.  if v3 >= v2 then goto L2e37c4;
  #L2e37ae.  v4:= v8[v3] @kind object;
  #L2e37b2.  v3:= v3 + 1;
  #L2e37b6.  if v4 != 0 then goto L2e37bc;
  #L2e37ba.  goto L2e37aa;
  #L2e37bc.  call `f`(v4) @signature `Lkotlinx/coroutines/flow/b2;.f:()V` @kind virtual;
  #L2e37c2.  goto L2e37aa;
  #L2e37c4.  @monitorenter v6
  #L2e37c6.  v8:= v6.`kotlinx.coroutines.flow.StateFlowImpl.f` @type ^`int`;
  #L2e37ca.  if v8 != v7 then goto L2e37d8;
  #L2e37ce.  v7:= v7 + v0 @kind int;
  #L2e37d0.  v6.`kotlinx.coroutines.flow.StateFlowImpl.f` @type ^`int` := v7;
  #L2e37d4.  @monitorexit v6
  #L2e37d6.  return v0;
  #L2e37d8.  call temp:= `m`(v6) @signature `Lkotlinx/coroutines/flow/internal/a;.m:()[Lkotlinx/coroutines/flow/internal/c;` @kind virtual;
  #L2e37de.  v7:= temp @kind object;
  #L2e37e0.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e37e4.  @monitorexit v6
  #L2e37e6.  v5:= v8;
  #L2e37e8.  v8:= v7 @kind object;
  #L2e37ea.  v7:= v5;
  #L2e37ec.  goto L2e379c;
  #L2e37ee.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e37f0.  @monitorexit v6
  #L2e37f2.  throw v7;
  #L2e37f4.  v7:= v7 + 2;
  #L2e37f8.  v6.`kotlinx.coroutines.flow.StateFlowImpl.f` @type ^`int` := v7;
  #L2e37fc.  @monitorexit v6
  #L2e37fe.  return v0;
  #L2e3800.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e3802.  @monitorexit v6
  #L2e3804.  goto L2e3808;
  #L2e3806.  throw v7;
  #L2e3808.  goto L2e3806;
  catch `java.lang.Throwable` @[L2e374c..L2e375e] goto L2e3800;
  catch `java.lang.Throwable` @[L2e3766..L2e376e] goto L2e3800;
  catch `java.lang.Throwable` @[L2e3778..L2e379a] goto L2e3800;
  catch `java.lang.Throwable` @[L2e37c6..L2e37d4] goto L2e37ee;
  catch `java.lang.Throwable` @[L2e37d8..L2e37e4] goto L2e37ee;
  catch `java.lang.Throwable` @[L2e37f8..L2e37fc] goto L2e3800;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.StateFlowImpl` v10 @kind this, `kotlinx.coroutines.flow.e` v11 @kind object, `kotlin.coroutines.Continuation` v12 @kind object) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.a:(Lkotlinx/coroutines/flow/e;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2e3854.  v0:= instanceof @variable v12 @type ^`kotlinx.coroutines.flow.StateFlowImpl$collect$1` @kind boolean;
  #L2e3858.  if v0 == 0 then goto L2e387a;
  #L2e385c.  v0:= v12 @kind object;
  #L2e385e.  v0:= (`kotlinx.coroutines.flow.StateFlowImpl$collect$1`) v0 @kind object;
  #L2e3862.  v1:= v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.label` @type ^`int`;
  #L2e3866.  v2:= -2147483648I;
  #L2e386a.  v3:= v1 ^& v2 @kind int;
  #L2e386e.  if v3 == 0 then goto L2e387a;
  #L2e3872.  v1:= v1 - v2 @kind int;
  #L2e3874.  v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.label` @type ^`int` := v1;
  #L2e3878.  goto L2e3884;
  #L2e387a.  v0:= new `kotlinx.coroutines.flow.StateFlowImpl$collect$1`;
  #L2e387e.  call `<init>`(v0, v10, v12) @signature `Lkotlinx/coroutines/flow/StateFlowImpl$collect$1;.<init>:(Lkotlinx/coroutines/flow/StateFlowImpl;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2e3884.  v12:= v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.result` @type ^`java.lang.Object` @kind object;
  #L2e3888.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e388e.  v1:= temp @kind object;
  #L2e3890.  v2:= v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.label` @type ^`int`;
  #L2e3894.  v3:= 0I;
  #L2e3896.  v4:= 3I;
  #L2e3898.  v5:= 2I;
  #L2e389a.  if v2 == 0 then goto L2e393c;
  #L2e389e.  v11:= 1I;
  #L2e38a0.  if v2 == v11 then goto L2e3914;
  #L2e38a4.  if v2 == v5 then goto L2e38e8;
  #L2e38a8.  if v2 != v4 then goto L2e38d8;
  #L2e38ac.  v11:= v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$4` @type ^`java.lang.Object` @kind object;
  #L2e38b0.  v2:= v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$3` @type ^`java.lang.Object` @kind object;
  #L2e38b4.  v2:= (`kotlinx.coroutines.z1`) v2 @kind object;
  #L2e38b8.  v6:= v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$2` @type ^`java.lang.Object` @kind object;
  #L2e38bc.  v6:= (`kotlinx.coroutines.flow.b2`) v6 @kind object;
  #L2e38c0.  v7:= v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$1` @type ^`java.lang.Object` @kind object;
  #L2e38c4.  v7:= (`kotlinx.coroutines.flow.e`) v7 @kind object;
  #L2e38c8.  v8:= v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2e38cc.  v8:= (`kotlinx.coroutines.flow.StateFlowImpl`) v8 @kind object;
  #L2e38d0.  call `throwOnFailure`(v12) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2e38d6.  goto L2e3970;
  #L2e38d8.  v11:= new `java.lang.IllegalStateException`;
  #L2e38dc.  v12:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2e38e0.  call `<init>`(v11, v12) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e38e6.  throw v11;
  #L2e38e8.  v11:= v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$4` @type ^`java.lang.Object` @kind object;
  #L2e38ec.  v2:= v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$3` @type ^`java.lang.Object` @kind object;
  #L2e38f0.  v2:= (`kotlinx.coroutines.z1`) v2 @kind object;
  #L2e38f4.  v6:= v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$2` @type ^`java.lang.Object` @kind object;
  #L2e38f8.  v6:= (`kotlinx.coroutines.flow.b2`) v6 @kind object;
  #L2e38fc.  v7:= v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$1` @type ^`java.lang.Object` @kind object;
  #L2e3900.  v7:= (`kotlinx.coroutines.flow.e`) v7 @kind object;
  #L2e3904.  v8:= v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2e3908.  v8:= (`kotlinx.coroutines.flow.StateFlowImpl`) v8 @kind object;
  #L2e390c.  call `throwOnFailure`(v12) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2e3912.  goto L2e39c6;
  #L2e3914.  v11:= v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$2` @type ^`java.lang.Object` @kind object;
  #L2e3918.  v6:= v11 @kind object;
  #L2e391a.  v6:= (`kotlinx.coroutines.flow.b2`) v6 @kind object;
  #L2e391e.  v11:= v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$1` @type ^`java.lang.Object` @kind object;
  #L2e3922.  v11:= (`kotlinx.coroutines.flow.e`) v11 @kind object;
  #L2e3926.  v2:= v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2e392a.  v8:= v2 @kind object;
  #L2e392c.  v8:= (`kotlinx.coroutines.flow.StateFlowImpl`) v8 @kind object;
  #L2e3930.  call `throwOnFailure`(v12) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2e3936.  goto L2e3952;
  #L2e3938.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e393a.  goto L2e39f8;
  #L2e393c.  call `throwOnFailure`(v12) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2e3942.  call temp:= `h`(v10) @signature `Lkotlinx/coroutines/flow/internal/a;.h:()Lkotlinx/coroutines/flow/internal/c;` @kind virtual;
  #L2e3948.  v12:= temp @kind object;
  #L2e394a.  v12:= (`kotlinx.coroutines.flow.b2`) v12 @kind object;
  #L2e394e.  v8:= v10 @kind object;
  #L2e3950.  v6:= v12 @kind object;
  #L2e3952.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2e3958.  v12:= temp @kind object;
  #L2e395a.  v2:= `@@kotlinx.coroutines.z1.m0` @type ^`kotlinx.coroutines.y1` @kind object;
  #L2e395e.  call temp:= `get`(v12, v2) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L2e3964.  v12:= temp @kind object;
  #L2e3966.  v12:= (`kotlinx.coroutines.z1`) v12 @kind object;
  #L2e396a.  v7:= v11 @kind object;
  #L2e396c.  v2:= v12 @kind object;
  #L2e396e.  v11:= v3 @kind object;
  #L2e3970.  v12:= v8.`kotlinx.coroutines.flow.StateFlowImpl._state` @type ^`java.lang.Object` @kind object;
  #L2e3974.  if v2 != 0 then goto L2e397a;
  #L2e3978.  goto L2e3980;
  #L2e397a.  call `h`(v2) @signature `Lkotlinx/coroutines/c2;.h:(Lkotlinx/coroutines/z1;)V` @kind static;
  #L2e3980.  if v11 == 0 then goto L2e3990;
  #L2e3984.  call temp:= `areEqual`(v11, v12) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2e398a.  v9:= temp;
  #L2e398c.  if v9 != 0 then goto L2e39c6;
  #L2e3990.  v11:= `@@kotlinx.coroutines.flow.internal.o.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2e3994.  if v12 != v11 then goto L2e399c;
  #L2e3998.  v11:= v3 @kind object;
  #L2e399a.  goto L2e399e;
  #L2e399c.  v11:= v12 @kind object;
  #L2e399e.  v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$0` @type ^`java.lang.Object` := v8 @kind object;
  #L2e39a2.  v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$1` @type ^`java.lang.Object` := v7 @kind object;
  #L2e39a6.  v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$2` @type ^`java.lang.Object` := v6 @kind object;
  #L2e39aa.  v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$3` @type ^`java.lang.Object` := v2 @kind object;
  #L2e39ae.  v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$4` @type ^`java.lang.Object` := v12 @kind object;
  #L2e39b2.  v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.label` @type ^`int` := v5;
  #L2e39b6.  call temp:= `emit`(v7, v11, v0) @signature `Lkotlinx/coroutines/flow/e;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L2e39bc.  v11:= temp @kind object;
  #L2e39be.  if v11 != v1 then goto L2e39c4;
  #L2e39c2.  return v1 @kind object;
  #L2e39c4.  v11:= v12 @kind object;
  #L2e39c6.  call temp:= `g`(v6) @signature `Lkotlinx/coroutines/flow/b2;.g:()Z` @kind virtual;
  #L2e39cc.  v12:= temp;
  #L2e39ce.  if v12 != 0 then goto L2e3970;
  #L2e39d2.  v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$0` @type ^`java.lang.Object` := v8 @kind object;
  #L2e39d6.  v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$1` @type ^`java.lang.Object` := v7 @kind object;
  #L2e39da.  v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$2` @type ^`java.lang.Object` := v6 @kind object;
  #L2e39de.  v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$3` @type ^`java.lang.Object` := v2 @kind object;
  #L2e39e2.  v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.L$4` @type ^`java.lang.Object` := v11 @kind object;
  #L2e39e6.  v0.`kotlinx.coroutines.flow.StateFlowImpl$collect$1.label` @type ^`int` := v4;
  #L2e39ea.  call temp:= `d`(v6, v0) @signature `Lkotlinx/coroutines/flow/b2;.d:(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2e39f0.  v12:= temp @kind object;
  #L2e39f2.  if v12 != v1 then goto L2e3970;
  #L2e39f6.  return v1 @kind object;
  #L2e39f8.  call `k`(v8, v6) @signature `Lkotlinx/coroutines/flow/internal/a;.k:(Lkotlinx/coroutines/flow/internal/c;)V` @kind virtual;
  #L2e39fe.  goto L2e3a02;
  #L2e3a00.  throw v11;
  #L2e3a02.  goto L2e3a00;
  catch `java.lang.Throwable` @[L2e38d0..L2e38d6] goto L2e3938;
  catch `java.lang.Throwable` @[L2e390c..L2e3912] goto L2e3938;
  catch `java.lang.Throwable` @[L2e3930..L2e3936] goto L2e3938;
  catch `java.lang.Throwable` @[L2e3952..L2e39f2] goto L2e3938;
}
procedure `kotlinx.coroutines.flow.d` `b`(`kotlinx.coroutines.flow.StateFlowImpl` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `int` v2 , `kotlinx.coroutines.channels.BufferOverflow` v3 @kind object) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.b:(Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/d;` @AccessFlag PUBLIC {
    temp;

  #L2e3a54.  call temp:= `d`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/flow/a2;.d:(Lkotlinx/coroutines/flow/z1;Lkotlin/coroutines/CoroutineContext;ILkotlinx/coroutines/channels/BufferOverflow;)Lkotlinx/coroutines/flow/d;` @kind static;
  #L2e3a5a.  v1:= temp @kind object;
  #L2e3a5c.  return v1 @kind object;
}
procedure `void` `c`(`kotlinx.coroutines.flow.StateFlowImpl` v2 @kind this) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2e3af8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2e3afc.  v1:= "MutableStateFlow.resetReplayCache is not supported" @kind object;
  #L2e3b00.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e3b06.  throw v0;
}
procedure `boolean` `d`(`kotlinx.coroutines.flow.StateFlowImpl` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.d:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L2e3728.  call `setValue`(v0, v1) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.setValue:(Ljava/lang/Object;)V` @kind virtual;
  #L2e372e.  v1:= 1I;
  #L2e3730.  return v1;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.StateFlowImpl` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L2e3a38.  call `setValue`(v0, v1) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.setValue:(Ljava/lang/Object;)V` @kind virtual;
  #L2e3a3e.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e3a42.  return v1 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.c` `i`(`kotlinx.coroutines.flow.StateFlowImpl` v1 @kind this) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.i:()Lkotlinx/coroutines/flow/internal/c;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2e3aa4.  call temp:= `n`(v1) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.n:()Lkotlinx/coroutines/flow/b2;` @kind virtual;
  #L2e3aaa.  v0:= temp @kind object;
  #L2e3aac.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.internal.c`[] `j`(`kotlinx.coroutines.flow.StateFlowImpl` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.j:(I)[Lkotlinx/coroutines/flow/internal/c;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2e3ac0.  call temp:= `o`(v0, v1) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.o:(I)[Lkotlinx/coroutines/flow/b2;` @kind virtual;
  #L2e3ac6.  v1:= temp @kind object;
  #L2e3ac8.  return v1 @kind object;
}
procedure `kotlinx.coroutines.flow.b2` `n`(`kotlinx.coroutines.flow.StateFlowImpl` v1 @kind this) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.n:()Lkotlinx/coroutines/flow/b2;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2e3a70.  v0:= new `kotlinx.coroutines.flow.b2`;
  #L2e3a74.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/b2;.<init>:()V` @kind direct;
  #L2e3a7a.  return v0 @kind object;
}
procedure `kotlinx.coroutines.flow.b2`[] `o`(`kotlinx.coroutines.flow.StateFlowImpl` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.o:(I)[Lkotlinx/coroutines/flow/b2;` @AccessFlag PROTECTED {
    temp;

  #L2e3a8c.  v1:= new `kotlinx.coroutines.flow.b2`[v1];
  #L2e3a90.  return v1 @kind object;
}
procedure `void` `setValue`(`kotlinx.coroutines.flow.StateFlowImpl` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.setValue:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e3b18.  if v2 != 0 then goto L2e3b20;
  #L2e3b1c.  v2:= `@@kotlinx.coroutines.flow.internal.o.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2e3b20.  v0:= 0I;
  #L2e3b22.  call temp:= `p`(v1, v0, v2) @signature `Lkotlinx/coroutines/flow/StateFlowImpl;.p:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind direct;
  #L2e3b28.  return @kind void;
}
