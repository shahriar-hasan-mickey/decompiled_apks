record `kotlinx.coroutines.flow.StartedLazily$command$1$1` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.e` @kind interface, `kotlin.coroutines.jvm.internal.SuspendFunction` @kind interface {
  `kotlin.jvm.internal.Ref$BooleanRef` `kotlinx.coroutines.flow.StartedLazily$command$1$1.b` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.flow.e` `kotlinx.coroutines.flow.StartedLazily$command$1$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.StartedLazily$command$1$1` v0 @kind this, `kotlin.jvm.internal.Ref$BooleanRef` v1 @kind object, `kotlinx.coroutines.flow.e` v2 @kind object) @signature `Lkotlinx/coroutines/flow/StartedLazily$command$1$1;.<init>:(Lkotlin/jvm/internal/Ref$BooleanRef;Lkotlinx/coroutines/flow/e;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2e3270.  v0.`kotlinx.coroutines.flow.StartedLazily$command$1$1.b` @type ^`kotlin.jvm.internal.Ref$BooleanRef` := v1 @kind object;
  #L2e3274.  v0.`kotlinx.coroutines.flow.StartedLazily$command$1$1.c` @type ^`kotlinx.coroutines.flow.e` := v2 @kind object;
  #L2e3278.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2e327e.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.flow.StartedLazily$command$1$1` v4 @kind this, `int` v5 , `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlinx/coroutines/flow/StartedLazily$command$1$1;.a:(ILkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e3194.  v0:= instanceof @variable v6 @type ^`kotlinx.coroutines.flow.StartedLazily$command$1$1$emit$1` @kind boolean;
  #L2e3198.  if v0 == 0 then goto L2e31ba;
  #L2e319c.  v0:= v6 @kind object;
  #L2e319e.  v0:= (`kotlinx.coroutines.flow.StartedLazily$command$1$1$emit$1`) v0 @kind object;
  #L2e31a2.  v1:= v0.`kotlinx.coroutines.flow.StartedLazily$command$1$1$emit$1.label` @type ^`int`;
  #L2e31a6.  v2:= -2147483648I;
  #L2e31aa.  v3:= v1 ^& v2 @kind int;
  #L2e31ae.  if v3 == 0 then goto L2e31ba;
  #L2e31b2.  v1:= v1 - v2 @kind int;
  #L2e31b4.  v0.`kotlinx.coroutines.flow.StartedLazily$command$1$1$emit$1.label` @type ^`int` := v1;
  #L2e31b8.  goto L2e31c4;
  #L2e31ba.  v0:= new `kotlinx.coroutines.flow.StartedLazily$command$1$1$emit$1`;
  #L2e31be.  call `<init>`(v0, v4, v6) @signature `Lkotlinx/coroutines/flow/StartedLazily$command$1$1$emit$1;.<init>:(Lkotlinx/coroutines/flow/StartedLazily$command$1$1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2e31c4.  v6:= v0.`kotlinx.coroutines.flow.StartedLazily$command$1$1$emit$1.result` @type ^`java.lang.Object` @kind object;
  #L2e31c8.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2e31ce.  v1:= temp @kind object;
  #L2e31d0.  v2:= v0.`kotlinx.coroutines.flow.StartedLazily$command$1$1$emit$1.label` @type ^`int`;
  #L2e31d4.  v3:= 1I;
  #L2e31d6.  if v2 == 0 then goto L2e31f6;
  #L2e31da.  if v2 != v3 then goto L2e31e6;
  #L2e31de.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2e31e4.  goto L2e322a;
  #L2e31e6.  v5:= new `java.lang.IllegalStateException`;
  #L2e31ea.  v6:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2e31ee.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e31f4.  throw v5;
  #L2e31f6.  call `throwOnFailure`(v6) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2e31fc.  if v5 <= 0 then goto L2e3230;
  #L2e3200.  v5:= v4.`kotlinx.coroutines.flow.StartedLazily$command$1$1.b` @type ^`kotlin.jvm.internal.Ref$BooleanRef` @kind object;
  #L2e3204.  v6:= v5.`kotlin.jvm.internal.Ref$BooleanRef.element` @type ^`boolean` @kind boolean;
  #L2e3208.  if v6 != 0 then goto L2e3230;
  #L2e320c.  v5.`kotlin.jvm.internal.Ref$BooleanRef.element` @type ^`boolean` := v3 @kind boolean;
  #L2e3210.  v5:= v4.`kotlinx.coroutines.flow.StartedLazily$command$1$1.c` @type ^`kotlinx.coroutines.flow.e` @kind object;
  #L2e3214.  v6:= `@@kotlinx.coroutines.flow.SharingCommand.START` @type ^`kotlinx.coroutines.flow.SharingCommand` @kind object;
  #L2e3218.  v0.`kotlinx.coroutines.flow.StartedLazily$command$1$1$emit$1.label` @type ^`int` := v3;
  #L2e321c.  call temp:= `emit`(v5, v6, v0) @signature `Lkotlinx/coroutines/flow/e;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind interface;
  #L2e3222.  v5:= temp @kind object;
  #L2e3224.  if v5 != v1 then goto L2e322a;
  #L2e3228.  return v1 @kind object;
  #L2e322a.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e322e.  return v5 @kind object;
  #L2e3230.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2e3234.  return v5 @kind object;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.StartedLazily$command$1$1` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/flow/StartedLazily$command$1$1;.emit:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2e3248.  v1:= (`java.lang.Number`) v1 @kind object;
  #L2e324c.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L2e3252.  v1:= temp;
  #L2e3254.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/flow/StartedLazily$command$1$1;.a:(ILkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2e325a.  v1:= temp @kind object;
  #L2e325c.  return v1 @kind object;
}
