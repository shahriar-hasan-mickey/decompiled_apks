record `kotlinx.coroutines.channels.AbstractChannel$a` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.e` @kind class {
  `kotlinx.coroutines.channels.d0` `kotlinx.coroutines.channels.AbstractChannel$a.b` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.channels.AbstractChannel` `kotlinx.coroutines.channels.AbstractChannel$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.channels.AbstractChannel$a` v0 @kind this, `kotlinx.coroutines.channels.AbstractChannel` v1 @kind object, `kotlinx.coroutines.channels.d0` v2 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.<init>:(Lkotlinx/coroutines/channels/AbstractChannel;Lkotlinx/coroutines/channels/d0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2d1e4c.  v0.`kotlinx.coroutines.channels.AbstractChannel$a.c` @type ^`kotlinx.coroutines.channels.AbstractChannel` := v1 @kind object;
  #L2d1e50.  call `<init>`(v0) @signature `Lkotlinx/coroutines/e;.<init>:()V` @kind direct;
  #L2d1e56.  v0.`kotlinx.coroutines.channels.AbstractChannel$a.b` @type ^`kotlinx.coroutines.channels.d0` := v2 @kind object;
  #L2d1e5a.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.channels.AbstractChannel$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L2d1e6c.  v1:= v0.`kotlinx.coroutines.channels.AbstractChannel$a.b` @type ^`kotlinx.coroutines.channels.d0` @kind object;
  #L2d1e70.  call temp:= `M`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.M:()Z` @kind virtual;
  #L2d1e76.  v1:= temp;
  #L2d1e78.  if v1 == 0 then goto L2d1e86;
  #L2d1e7c.  v1:= v0.`kotlinx.coroutines.channels.AbstractChannel$a.c` @type ^`kotlinx.coroutines.channels.AbstractChannel` @kind object;
  #L2d1e80.  call `V`(v1) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.V:()V` @kind virtual;
  #L2d1e86.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.channels.AbstractChannel$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2d1de8.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L2d1dec.  call `a`(v0, v1) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2d1df2.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2d1df6.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.channels.AbstractChannel$a` v2 @kind this) @signature `Lkotlinx/coroutines/channels/AbstractChannel$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d1e08.  v0:= new `java.lang.StringBuilder`;
  #L2d1e0c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d1e12.  v1:= "RemoveReceiveOnCancel[" @kind object;
  #L2d1e16.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d1e1c.  v1:= v2.`kotlinx.coroutines.channels.AbstractChannel$a.b` @type ^`kotlinx.coroutines.channels.d0` @kind object;
  #L2d1e20.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d1e26.  v1:= 93I;
  #L2d1e2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d1e30.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d1e36.  v0:= temp @kind object;
  #L2d1e38.  return v0 @kind object;
}
