record `kotlinx.coroutines.channels.f` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.internal.w` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.channels.f` v0 @kind this, `kotlinx.coroutines.internal.r` v1 @kind object) @signature `Lkotlinx/coroutines/channels/f;.<init>:(Lkotlinx/coroutines/internal/r;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2d1f28.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/internal/w;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L2d1f2e.  return @kind void;
}
procedure `java.lang.Object` `e`(`kotlinx.coroutines.channels.f` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/channels/f;.e:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2d1e98.  v0:= instanceof @variable v2 @type ^`kotlinx.coroutines.channels.y` @kind boolean;
  #L2d1e9c.  if v0 == 0 then goto L2d1ea2;
  #L2d1ea0.  goto L2d1eb2;
  #L2d1ea2.  v2:= instanceof @variable v2 @type ^`kotlinx.coroutines.channels.g0` @kind boolean;
  #L2d1ea6.  if v2 != 0 then goto L2d1eb0;
  #L2d1eaa.  v2:= `@@kotlinx.coroutines.channels.j.d` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d1eae.  goto L2d1eb2;
  #L2d1eb0.  v2:= 0I;
  #L2d1eb2.  return v2 @kind object;
}
procedure `java.lang.Object` `j`(`kotlinx.coroutines.channels.f` v1 @kind this, `kotlinx.coroutines.internal.v` v2 @kind object) @signature `Lkotlinx/coroutines/channels/f;.j:(Lkotlinx/coroutines/internal/v;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d1ec4.  v0:= v2.`kotlinx.coroutines.internal.v.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L2d1ec8.  v0:= (`kotlinx.coroutines.channels.g0`) v0 @kind object;
  #L2d1ecc.  call temp:= `U`(v0, v2) @signature `Lkotlinx/coroutines/channels/g0;.U:(Lkotlinx/coroutines/internal/v;)Lkotlinx/coroutines/internal/k0;` @kind virtual;
  #L2d1ed2.  v2:= temp @kind object;
  #L2d1ed4.  if v2 != 0 then goto L2d1ede;
  #L2d1ed8.  v2:= `@@kotlinx.coroutines.internal.x.a` @type ^`java.lang.Object` @kind object;
  #L2d1edc.  return v2 @kind object;
  #L2d1ede.  v0:= `@@kotlinx.coroutines.internal.c.b` @type ^`java.lang.Object` @kind object;
  #L2d1ee2.  if v2 != v0 then goto L2d1ee8;
  #L2d1ee6.  return v0 @kind object;
  #L2d1ee8.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2d1eee.  v0:= temp;
  #L2d1ef0.  if v0 == 0 then goto L2d1f14;
  #L2d1ef4.  v0:= `@@kotlinx.coroutines.q.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d1ef8.  if v2 != v0 then goto L2d1f00;
  #L2d1efc.  v2:= 1I;
  #L2d1efe.  goto L2d1f02;
  #L2d1f00.  v2:= 0I;
  #L2d1f02.  if v2 == 0 then goto L2d1f08;
  #L2d1f06.  goto L2d1f14;
  #L2d1f08.  v2:= new `java.lang.AssertionError`;
  #L2d1f0c.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2d1f12.  throw v2;
  #L2d1f14.  v2:= 0I;
  #L2d1f16.  return v2 @kind object;
}
procedure `void` `k`(`kotlinx.coroutines.channels.f` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/channels/f;.k:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC {
    temp;

  #L2d1f40.  v1:= (`kotlinx.coroutines.channels.g0`) v1 @kind object;
  #L2d1f44.  call `V`(v1) @signature `Lkotlinx/coroutines/channels/g0;.V:()V` @kind virtual;
  #L2d1f4a.  return @kind void;
}
