record `kotlinx.coroutines.channels.n` @kind class @AccessFlag PUBLIC extends `kotlinx.coroutines.channels.AbstractChannel` @kind class {
  `int` `kotlinx.coroutines.channels.n.e` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.channels.BufferOverflow` `kotlinx.coroutines.channels.n.f` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.locks.ReentrantLock` `kotlinx.coroutines.channels.n.g` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object`[] `kotlinx.coroutines.channels.n.h` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.channels.n.i` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.channels.n.size` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.channels.n` v6 @kind this, `int` v7 , `kotlinx.coroutines.channels.BufferOverflow` v8 @kind object, `kotlin.jvm.functions.Function1` v9 @kind object) @signature `Lkotlinx/coroutines/channels/n;.<init>:(ILkotlinx/coroutines/channels/BufferOverflow;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2d3acc.  call `<init>`(v6, v9) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.<init>:(Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L2d3ad2.  v6.`kotlinx.coroutines.channels.n.e` @type ^`int` := v7;
  #L2d3ad6.  v6.`kotlinx.coroutines.channels.n.f` @type ^`kotlinx.coroutines.channels.BufferOverflow` := v8 @kind object;
  #L2d3ada.  v8:= 0I;
  #L2d3adc.  v9:= 1I;
  #L2d3ade.  if v7 < v9 then goto L2d3ae4;
  #L2d3ae2.  goto L2d3ae6;
  #L2d3ae4.  v9:= 0I;
  #L2d3ae6.  if v9 == 0 then goto L2d3b26;
  #L2d3aea.  v9:= new `java.util.concurrent.locks.ReentrantLock`;
  #L2d3aee.  call `<init>`(v9) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L2d3af4.  v6.`kotlinx.coroutines.channels.n.g` @type ^`java.util.concurrent.locks.ReentrantLock` := v9 @kind object;
  #L2d3af8.  v9:= 8I;
  #L2d3afc.  call temp:= `min`(v7, v9) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2d3b02.  v7:= temp;
  #L2d3b04.  v7:= new `java.lang.Object`[v7];
  #L2d3b08.  v1:= `@@kotlinx.coroutines.channels.j.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d3b0c.  v2:= 0I;
  #L2d3b0e.  v3:= 0I;
  #L2d3b10.  v4:= 6I;
  #L2d3b12.  v5:= 0I;
  #L2d3b14.  v0:= v7 @kind object;
  #L2d3b16.  call `fill$default`(v0, v1, v2, v3, v4, v5) @signature `Lkotlin/collections/ArraysKt;.fill$default:([Ljava/lang/Object;Ljava/lang/Object;IIILjava/lang/Object;)V` @kind static;
  #L2d3b1c.  v6.`kotlinx.coroutines.channels.n.h` @type ^`java.lang.Object`[] := v7 @kind object;
  #L2d3b20.  v6.`kotlinx.coroutines.channels.n.size` @type ^`int` := v8;
  #L2d3b24.  return @kind void;
  #L2d3b26.  v8:= new `java.lang.StringBuilder`;
  #L2d3b2a.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d3b30.  v9:= "ArrayChannel capacity must be at least 1, but " @kind object;
  #L2d3b34.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d3b3a.  call temp:= `append`(v8, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d3b40.  v7:= " was specified" @kind object;
  #L2d3b44.  call temp:= `append`(v8, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d3b4a.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d3b50.  v7:= temp @kind object;
  #L2d3b52.  v8:= new `java.lang.IllegalArgumentException`;
  #L2d3b56.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d3b5c.  v7:= temp @kind object;
  #L2d3b5e.  call `<init>`(v8, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d3b64.  throw v8;
}
procedure `void` `d0`(`kotlinx.coroutines.channels.n` v5 @kind this, `int` v6 , `java.lang.Object` v7 @kind object) @signature `Lkotlinx/coroutines/channels/n;.d0:(ILjava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d3b78.  v0:= v5.`kotlinx.coroutines.channels.n.e` @type ^`int`;
  #L2d3b7c.  if v6 >= v0 then goto L2d3b9a;
  #L2d3b80.  call `e0`(v5, v6) @signature `Lkotlinx/coroutines/channels/n;.e0:(I)V` @kind direct;
  #L2d3b86.  v0:= v5.`kotlinx.coroutines.channels.n.h` @type ^`java.lang.Object`[] @kind object;
  #L2d3b8a.  v1:= v5.`kotlinx.coroutines.channels.n.i` @type ^`int`;
  #L2d3b8e.  v1:= v1 + v6 @kind int;
  #L2d3b90.  v6:= length @variable v0;
  #L2d3b92.  v1:= v1 %% v6 @kind int;
  #L2d3b94.  v0[v1]:= v7 @kind object;
  #L2d3b98.  goto L2d3bf4;
  #L2d3b9a.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2d3ba0.  v0:= temp;
  #L2d3ba2.  v1:= 1I;
  #L2d3ba4.  if v0 == 0 then goto L2d3bcc;
  #L2d3ba8.  v0:= v5.`kotlinx.coroutines.channels.n.f` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L2d3bac.  v2:= `@@kotlinx.coroutines.channels.BufferOverflow.DROP_OLDEST` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L2d3bb0.  if v0 != v2 then goto L2d3bb8;
  #L2d3bb4.  v0:= 1I;
  #L2d3bb6.  goto L2d3bba;
  #L2d3bb8.  v0:= 0I;
  #L2d3bba.  if v0 == 0 then goto L2d3bc0;
  #L2d3bbe.  goto L2d3bcc;
  #L2d3bc0.  v6:= new `java.lang.AssertionError`;
  #L2d3bc4.  call `<init>`(v6) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2d3bca.  throw v6;
  #L2d3bcc.  v0:= v5.`kotlinx.coroutines.channels.n.h` @type ^`java.lang.Object`[] @kind object;
  #L2d3bd0.  v2:= v5.`kotlinx.coroutines.channels.n.i` @type ^`int`;
  #L2d3bd4.  v3:= length @variable v0;
  #L2d3bd6.  v3:= v2 %% v3 @kind int;
  #L2d3bda.  v4:= 0I;
  #L2d3bdc.  v0[v3]:= v4 @kind object;
  #L2d3be0.  v6:= v6 + v2 @kind int;
  #L2d3be2.  v3:= length @variable v0;
  #L2d3be4.  v6:= v6 %% v3 @kind int;
  #L2d3be6.  v0[v6]:= v7 @kind object;
  #L2d3bea.  v2:= v2 + v1 @kind int;
  #L2d3bec.  v6:= length @variable v0;
  #L2d3bee.  v2:= v2 %% v6 @kind int;
  #L2d3bf0.  v5.`kotlinx.coroutines.channels.n.i` @type ^`int` := v2;
  #L2d3bf4.  return @kind void;
}
procedure `void` `e0`(`kotlinx.coroutines.channels.n` v8 @kind this, `int` v9 ) @signature `Lkotlinx/coroutines/channels/n;.e0:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2d3c08.  v0:= v8.`kotlinx.coroutines.channels.n.h` @type ^`java.lang.Object`[] @kind object;
  #L2d3c0c.  v1:= length @variable v0;
  #L2d3c0e.  if v9 < v1 then goto L2d3c60;
  #L2d3c12.  v0:= length @variable v0;
  #L2d3c14.  v0:= v0 * 2;
  #L2d3c18.  v1:= v8.`kotlinx.coroutines.channels.n.e` @type ^`int`;
  #L2d3c1c.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2d3c22.  v0:= temp;
  #L2d3c24.  v1:= new `java.lang.Object`[v0];
  #L2d3c28.  v2:= 0I;
  #L2d3c2a.  v3:= 0I;
  #L2d3c2c.  if v3 >= v9 then goto L2d3c4e;
  #L2d3c30.  v4:= v3 + 1;
  #L2d3c34.  v5:= v8.`kotlinx.coroutines.channels.n.h` @type ^`java.lang.Object`[] @kind object;
  #L2d3c38.  v6:= v8.`kotlinx.coroutines.channels.n.i` @type ^`int`;
  #L2d3c3c.  v6:= v6 + v3 @kind int;
  #L2d3c3e.  v7:= length @variable v5;
  #L2d3c40.  v6:= v6 %% v7 @kind int;
  #L2d3c42.  v5:= v5[v6] @kind object;
  #L2d3c46.  v1[v3]:= v5 @kind object;
  #L2d3c4a.  v3:= v4;
  #L2d3c4c.  goto L2d3c2c;
  #L2d3c4e.  v3:= `@@kotlinx.coroutines.channels.j.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d3c52.  call `fill`(v1, v3, v9, v0) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L2d3c58.  v8.`kotlinx.coroutines.channels.n.h` @type ^`java.lang.Object`[] := v1 @kind object;
  #L2d3c5c.  v8.`kotlinx.coroutines.channels.n.i` @type ^`int` := v2;
  #L2d3c60.  return @kind void;
}
procedure `kotlinx.coroutines.internal.k0` `f0`(`kotlinx.coroutines.channels.n` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/channels/n;.f0:(I)Lkotlinx/coroutines/internal/k0;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2d3a68.  v0:= v3.`kotlinx.coroutines.channels.n.e` @type ^`int`;
  #L2d3a6c.  v1:= 0I;
  #L2d3a6e.  v2:= 1I;
  #L2d3a70.  if v4 >= v0 then goto L2d3a7c;
  #L2d3a74.  v4:= v4 + v2 @kind int;
  #L2d3a76.  v3.`kotlinx.coroutines.channels.n.size` @type ^`int` := v4;
  #L2d3a7a.  return v1 @kind object;
  #L2d3a7c.  v4:= v3.`kotlinx.coroutines.channels.n.f` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L2d3a80.  v0:= `@@kotlinx.coroutines.channels.n$a.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L2d3a84.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2d3a8a.  v4:= temp;
  #L2d3a8c.  v4:= v0[v4];
  #L2d3a90.  if v4 == v2 then goto L2d3ab4;
  #L2d3a94.  v0:= 2I;
  #L2d3a96.  if v4 == v0 then goto L2d3aae;
  #L2d3a9a.  v0:= 3I;
  #L2d3a9c.  if v4 != v0 then goto L2d3aa2;
  #L2d3aa0.  goto L2d3ab8;
  #L2d3aa2.  v4:= new `kotlin.NoWhenBranchMatchedException`;
  #L2d3aa6.  call `<init>`(v4) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L2d3aac.  throw v4;
  #L2d3aae.  v1:= `@@kotlinx.coroutines.channels.j.b` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d3ab2.  goto L2d3ab8;
  #L2d3ab4.  v1:= `@@kotlinx.coroutines.channels.j.c` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d3ab8.  return v1 @kind object;
}
procedure `java.lang.Object` `B`(`kotlinx.coroutines.channels.n` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlinx/coroutines/channels/n;.B:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d3620.  v0:= v5.`kotlinx.coroutines.channels.n.g` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L2d3624.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L2d362a.  v1:= v5.`kotlinx.coroutines.channels.n.size` @type ^`int`;
  #L2d362e.  call temp:= `m`(v5) @signature `Lkotlinx/coroutines/channels/m;.m:()Lkotlinx/coroutines/channels/y;` @kind virtual;
  #L2d3634.  v2:= temp @kind object;
  #L2d3636.  if v2 != 0 then goto L2d36de;
  #L2d363a.  call temp:= `f0`(v5, v1) @signature `Lkotlinx/coroutines/channels/n;.f0:(I)Lkotlinx/coroutines/internal/k0;` @kind direct;
  #L2d3640.  v2:= temp @kind object;
  #L2d3642.  if v2 != 0 then goto L2d36d6;
  #L2d3646.  if v1 != 0 then goto L2d36c4;
  #L2d364a.  call temp:= `F`(v5) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.F:()Lkotlinx/coroutines/channels/e0;` @kind virtual;
  #L2d3650.  v2:= temp @kind object;
  #L2d3652.  if v2 != 0 then goto L2d3658;
  #L2d3656.  goto L2d36c4;
  #L2d3658.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.channels.y` @kind boolean;
  #L2d365c.  if v3 == 0 then goto L2d366c;
  #L2d3660.  v5.`kotlinx.coroutines.channels.n.size` @type ^`int` := v1;
  #L2d3664.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d366a.  return v2 @kind object;
  #L2d366c.  v3:= 0I;
  #L2d366e.  call temp:= `s`(v2, v6, v3) @signature `Lkotlinx/coroutines/channels/e0;.s:(Ljava/lang/Object;Lkotlinx/coroutines/internal/v;)Lkotlinx/coroutines/internal/k0;` @kind interface;
  #L2d3674.  v3:= temp @kind object;
  #L2d3676.  if v3 == 0 then goto L2d364a;
  #L2d367a.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2d3680.  v4:= temp;
  #L2d3682.  if v4 == 0 then goto L2d36a6;
  #L2d3686.  v4:= `@@kotlinx.coroutines.q.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d368a.  if v3 != v4 then goto L2d3692;
  #L2d368e.  v3:= 1I;
  #L2d3690.  goto L2d3694;
  #L2d3692.  v3:= 0I;
  #L2d3694.  if v3 == 0 then goto L2d369a;
  #L2d3698.  goto L2d36a6;
  #L2d369a.  v6:= new `java.lang.AssertionError`;
  #L2d369e.  call `<init>`(v6) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2d36a4.  throw v6;
  #L2d36a6.  v5.`kotlinx.coroutines.channels.n.size` @type ^`int` := v1;
  #L2d36aa.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2d36ae.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d36b4.  call `o`(v2, v6) @signature `Lkotlinx/coroutines/channels/e0;.o:(Ljava/lang/Object;)V` @kind interface;
  #L2d36ba.  call temp:= `d`(v2) @signature `Lkotlinx/coroutines/channels/e0;.d:()Ljava/lang/Object;` @kind interface;
  #L2d36c0.  v6:= temp @kind object;
  #L2d36c2.  return v6 @kind object;
  #L2d36c4.  call `d0`(v5, v1, v6) @signature `Lkotlinx/coroutines/channels/n;.d0:(ILjava/lang/Object;)V` @kind direct;
  #L2d36ca.  v6:= `@@kotlinx.coroutines.channels.j.b` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d36ce.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d36d4.  return v6 @kind object;
  #L2d36d6.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d36dc.  return v2 @kind object;
  #L2d36de.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d36e4.  return v2 @kind object;
  #L2d36e6.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2d36e8.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d36ee.  goto L2d36f2;
  #L2d36f0.  throw v6;
  #L2d36f2.  goto L2d36f0;
  catch `java.lang.Throwable` @[L2d362a..L2d3664] goto L2d36e6;
  catch `java.lang.Throwable` @[L2d366e..L2d36ae] goto L2d36e6;
  catch `java.lang.Throwable` @[L2d36c4..L2d36ce] goto L2d36e6;
}
procedure `boolean` `N`(`kotlinx.coroutines.channels.n` v1 @kind this, `kotlinx.coroutines.channels.d0` v2 @kind object) @signature `Lkotlinx/coroutines/channels/n;.N:(Lkotlinx/coroutines/channels/d0;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2d34e8.  v0:= v1.`kotlinx.coroutines.channels.n.g` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L2d34ec.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L2d34f2.  call temp:= `N`(v1, v2) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.N:(Lkotlinx/coroutines/channels/d0;)Z` @kind super;
  #L2d34f8.  v2:= temp;
  #L2d34fa.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d3500.  return v2;
  #L2d3502.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2d3504.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d350a.  throw v2;
  catch `java.lang.Throwable` @[L2d34f2..L2d34fa] goto L2d3502;
}
procedure `boolean` `P`(`kotlinx.coroutines.channels.n` v1 @kind this) @signature `Lkotlinx/coroutines/channels/n;.P:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L2d3528.  v0:= 0I;
  #L2d352a.  return v0;
}
procedure `boolean` `Q`(`kotlinx.coroutines.channels.n` v1 @kind this) @signature `Lkotlinx/coroutines/channels/n;.Q:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L2d3550.  v0:= v1.`kotlinx.coroutines.channels.n.size` @type ^`int`;
  #L2d3554.  if v0 != 0 then goto L2d355c;
  #L2d3558.  v0:= 1I;
  #L2d355a.  goto L2d355e;
  #L2d355c.  v0:= 0I;
  #L2d355e.  return v0;
}
procedure `boolean` `R`(`kotlinx.coroutines.channels.n` v2 @kind this) @signature `Lkotlinx/coroutines/channels/n;.R:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d35a0.  v0:= v2.`kotlinx.coroutines.channels.n.g` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L2d35a4.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L2d35aa.  call temp:= `R`(v2) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.R:()Z` @kind super;
  #L2d35b0.  v1:= temp;
  #L2d35b2.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d35b8.  return v1;
  #L2d35ba.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2d35bc.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d35c2.  throw v1;
  catch `java.lang.Throwable` @[L2d35aa..L2d35b2] goto L2d35ba;
}
procedure `void` `T`(`kotlinx.coroutines.channels.n` v9 @kind this, `boolean` v10 ) @signature `Lkotlinx/coroutines/channels/n;.T:(Z)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2d3c74.  v0:= v9.`kotlinx.coroutines.channels.m.c` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L2d3c78.  v1:= v9.`kotlinx.coroutines.channels.n.g` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L2d3c7c.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L2d3c82.  v2:= v9.`kotlinx.coroutines.channels.n.size` @type ^`int`;
  #L2d3c86.  v3:= 0I;
  #L2d3c88.  v4:= 0I;
  #L2d3c8a.  v5:= 0I;
  #L2d3c8c.  if v5 >= v2 then goto L2d3cd2;
  #L2d3c90.  v5:= v5 + 1;
  #L2d3c94.  v6:= v9.`kotlinx.coroutines.channels.n.h` @type ^`java.lang.Object`[] @kind object;
  #L2d3c98.  v7:= v9.`kotlinx.coroutines.channels.n.i` @type ^`int`;
  #L2d3c9c.  v6:= v6[v7] @kind object;
  #L2d3ca0.  if v0 == 0 then goto L2d3cb4;
  #L2d3ca4.  v7:= `@@kotlinx.coroutines.channels.j.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d3ca8.  if v6 == v7 then goto L2d3cb4;
  #L2d3cac.  call temp:= `c`(v0, v6, v4) @signature `Lkotlinx/coroutines/internal/OnUndeliveredElementKt;.c:(Lkotlin/jvm/functions/Function1;Ljava/lang/Object;Lkotlinx/coroutines/internal/UndeliveredElementException;)Lkotlinx/coroutines/internal/UndeliveredElementException;` @kind static;
  #L2d3cb2.  v4:= temp @kind object;
  #L2d3cb4.  v6:= v9.`kotlinx.coroutines.channels.n.h` @type ^`java.lang.Object`[] @kind object;
  #L2d3cb8.  v7:= v9.`kotlinx.coroutines.channels.n.i` @type ^`int`;
  #L2d3cbc.  v8:= `@@kotlinx.coroutines.channels.j.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d3cc0.  v6[v7]:= v8 @kind object;
  #L2d3cc4.  v7:= v7 + 1;
  #L2d3cc8.  v6:= length @variable v6;
  #L2d3cca.  v7:= v7 %% v6 @kind int;
  #L2d3ccc.  v9.`kotlinx.coroutines.channels.n.i` @type ^`int` := v7;
  #L2d3cd0.  goto L2d3c8c;
  #L2d3cd2.  v9.`kotlinx.coroutines.channels.n.size` @type ^`int` := v3;
  #L2d3cd6.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2d3cda.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d3ce0.  call `T`(v9, v10) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.T:(Z)V` @kind super;
  #L2d3ce6.  if v4 != 0 then goto L2d3cec;
  #L2d3cea.  return @kind void;
  #L2d3cec.  throw v4;
  #L2d3cee.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2d3cf0.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d3cf6.  goto L2d3cfa;
  #L2d3cf8.  throw v10;
  #L2d3cfa.  goto L2d3cf8;
  catch `java.lang.Throwable` @[L2d3c82..L2d3cda] goto L2d3cee;
}
procedure `java.lang.Object` `X`(`kotlinx.coroutines.channels.n` v9 @kind this) @signature `Lkotlinx/coroutines/channels/n;.X:()Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2d3720.  v0:= v9.`kotlinx.coroutines.channels.n.g` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L2d3724.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L2d372a.  v1:= v9.`kotlinx.coroutines.channels.n.size` @type ^`int`;
  #L2d372e.  if v1 != 0 then goto L2d374a;
  #L2d3732.  call temp:= `m`(v9) @signature `Lkotlinx/coroutines/channels/m;.m:()Lkotlinx/coroutines/channels/y;` @kind virtual;
  #L2d3738.  v1:= temp @kind object;
  #L2d373a.  if v1 != 0 then goto L2d3742;
  #L2d373e.  v1:= `@@kotlinx.coroutines.channels.j.d` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d3742.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d3748.  return v1 @kind object;
  #L2d374a.  v2:= v9.`kotlinx.coroutines.channels.n.h` @type ^`java.lang.Object`[] @kind object;
  #L2d374e.  v3:= v9.`kotlinx.coroutines.channels.n.i` @type ^`int`;
  #L2d3752.  v4:= v2[v3] @kind object;
  #L2d3756.  v5:= 0I;
  #L2d3758.  v2[v3]:= v5 @kind object;
  #L2d375c.  v2:= v1 + -1;
  #L2d3760.  v9.`kotlinx.coroutines.channels.n.size` @type ^`int` := v2;
  #L2d3764.  v2:= `@@kotlinx.coroutines.channels.j.d` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d3768.  v3:= v9.`kotlinx.coroutines.channels.n.e` @type ^`int`;
  #L2d376c.  v6:= 0I;
  #L2d376e.  v7:= 1I;
  #L2d3770.  if v1 != v3 then goto L2d37d2;
  #L2d3774.  v3:= v5 @kind object;
  #L2d3776.  call temp:= `G`(v9) @signature `Lkotlinx/coroutines/channels/m;.G:()Lkotlinx/coroutines/channels/g0;` @kind virtual;
  #L2d377c.  v8:= temp @kind object;
  #L2d377e.  if v8 != 0 then goto L2d3786;
  #L2d3782.  v5:= v3 @kind object;
  #L2d3784.  goto L2d37d2;
  #L2d3786.  call temp:= `U`(v8, v5) @signature `Lkotlinx/coroutines/channels/g0;.U:(Lkotlinx/coroutines/internal/v;)Lkotlinx/coroutines/internal/k0;` @kind virtual;
  #L2d378c.  v3:= temp @kind object;
  #L2d378e.  if v3 == 0 then goto L2d37c8;
  #L2d3792.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2d3798.  v2:= temp;
  #L2d379a.  if v2 == 0 then goto L2d37ba;
  #L2d379e.  v2:= `@@kotlinx.coroutines.q.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d37a2.  if v3 != v2 then goto L2d37a8;
  #L2d37a6.  v6:= 1I;
  #L2d37a8.  if v6 == 0 then goto L2d37ae;
  #L2d37ac.  goto L2d37ba;
  #L2d37ae.  v1:= new `java.lang.AssertionError`;
  #L2d37b2.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2d37b8.  throw v1;
  #L2d37ba.  call temp:= `S`(v8) @signature `Lkotlinx/coroutines/channels/g0;.S:()Ljava/lang/Object;` @kind virtual;
  #L2d37c0.  v2:= temp @kind object;
  #L2d37c2.  v5:= v8 @kind object;
  #L2d37c4.  v6:= 1I;
  #L2d37c6.  goto L2d37d2;
  #L2d37c8.  call `V`(v8) @signature `Lkotlinx/coroutines/channels/g0;.V:()V` @kind virtual;
  #L2d37ce.  v3:= v8 @kind object;
  #L2d37d0.  goto L2d3776;
  #L2d37d2.  v3:= `@@kotlinx.coroutines.channels.j.d` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d37d6.  if v2 == v3 then goto L2d37f8;
  #L2d37da.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.channels.y` @kind boolean;
  #L2d37de.  if v3 != 0 then goto L2d37f8;
  #L2d37e2.  v9.`kotlinx.coroutines.channels.n.size` @type ^`int` := v1;
  #L2d37e6.  v3:= v9.`kotlinx.coroutines.channels.n.h` @type ^`java.lang.Object`[] @kind object;
  #L2d37ea.  v8:= v9.`kotlinx.coroutines.channels.n.i` @type ^`int`;
  #L2d37ee.  v8:= v8 + v1 @kind int;
  #L2d37f0.  v1:= length @variable v3;
  #L2d37f2.  v8:= v8 %% v1 @kind int;
  #L2d37f4.  v3[v8]:= v2 @kind object;
  #L2d37f8.  v1:= v9.`kotlinx.coroutines.channels.n.i` @type ^`int`;
  #L2d37fc.  v1:= v1 + v7 @kind int;
  #L2d37fe.  v2:= v9.`kotlinx.coroutines.channels.n.h` @type ^`java.lang.Object`[] @kind object;
  #L2d3802.  v2:= length @variable v2;
  #L2d3804.  v1:= v1 %% v2 @kind int;
  #L2d3806.  v9.`kotlinx.coroutines.channels.n.i` @type ^`int` := v1;
  #L2d380a.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2d380e.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d3814.  if v6 == 0 then goto L2d3824;
  #L2d3818.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2d381e.  call `R`(v5) @signature `Lkotlinx/coroutines/channels/g0;.R:()V` @kind virtual;
  #L2d3824.  return v4 @kind object;
  #L2d3826.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2d3828.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d382e.  goto L2d3832;
  #L2d3830.  throw v1;
  #L2d3832.  goto L2d3830;
  catch `java.lang.Throwable` @[L2d372a..L2d3742] goto L2d3826;
  catch `java.lang.Throwable` @[L2d374a..L2d380e] goto L2d3826;
}
procedure `java.lang.Object` `Y`(`kotlinx.coroutines.channels.n` v8 @kind this, `kotlinx.coroutines.selects.j` v9 @kind object) @signature `Lkotlinx/coroutines/channels/n;.Y:(Lkotlinx/coroutines/selects/j;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2d3858.  v0:= v8.`kotlinx.coroutines.channels.n.g` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L2d385c.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L2d3862.  v1:= v8.`kotlinx.coroutines.channels.n.size` @type ^`int`;
  #L2d3866.  if v1 != 0 then goto L2d3882;
  #L2d386a.  call temp:= `m`(v8) @signature `Lkotlinx/coroutines/channels/m;.m:()Lkotlinx/coroutines/channels/y;` @kind virtual;
  #L2d3870.  v9:= temp @kind object;
  #L2d3872.  if v9 != 0 then goto L2d387a;
  #L2d3876.  v9:= `@@kotlinx.coroutines.channels.j.d` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d387a.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d3880.  return v9 @kind object;
  #L2d3882.  v2:= v8.`kotlinx.coroutines.channels.n.h` @type ^`java.lang.Object`[] @kind object;
  #L2d3886.  v3:= v8.`kotlinx.coroutines.channels.n.i` @type ^`int`;
  #L2d388a.  v4:= v2[v3] @kind object;
  #L2d388e.  v5:= 0I;
  #L2d3890.  v2[v3]:= v5 @kind object;
  #L2d3894.  v2:= v1 + -1;
  #L2d3898.  v8.`kotlinx.coroutines.channels.n.size` @type ^`int` := v2;
  #L2d389c.  v2:= `@@kotlinx.coroutines.channels.j.d` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d38a0.  v3:= v8.`kotlinx.coroutines.channels.n.e` @type ^`int`;
  #L2d38a4.  v6:= 1I;
  #L2d38a6.  if v1 != v3 then goto L2d3944;
  #L2d38aa.  call temp:= `L`(v8) @signature `Lkotlinx/coroutines/channels/AbstractChannel;.L:()Lkotlinx/coroutines/channels/f;` @kind virtual;
  #L2d38b0.  v3:= temp @kind object;
  #L2d38b2.  call temp:= `q`(v9, v3) @signature `Lkotlinx/coroutines/selects/j;.q:(Lkotlinx/coroutines/internal/b;)Ljava/lang/Object;` @kind interface;
  #L2d38b8.  v7:= temp @kind object;
  #L2d38ba.  if v7 != 0 then goto L2d38de;
  #L2d38be.  call temp:= `o`(v3) @signature `Lkotlinx/coroutines/internal/w;.o:()Ljava/lang/Object;` @kind virtual;
  #L2d38c4.  v5:= temp @kind object;
  #L2d38c6.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2d38cc.  v2:= v5 @kind object;
  #L2d38ce.  v2:= (`kotlinx.coroutines.channels.g0`) v2 @kind object;
  #L2d38d2.  call temp:= `S`(v2) @signature `Lkotlinx/coroutines/channels/g0;.S:()Ljava/lang/Object;` @kind virtual;
  #L2d38d8.  v2:= temp @kind object;
  #L2d38da.  v3:= 1I;
  #L2d38dc.  goto L2d3946;
  #L2d38de.  v3:= `@@kotlinx.coroutines.channels.j.d` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d38e2.  if v7 != v3 then goto L2d38e8;
  #L2d38e6.  goto L2d3944;
  #L2d38e8.  v3:= `@@kotlinx.coroutines.internal.c.b` @type ^`java.lang.Object` @kind object;
  #L2d38ec.  if v7 != v3 then goto L2d38f2;
  #L2d38f0.  goto L2d38aa;
  #L2d38f2.  call temp:= `d`() @signature `Lkotlinx/coroutines/selects/k;.d:()Ljava/lang/Object;` @kind static;
  #L2d38f8.  v2:= temp @kind object;
  #L2d38fa.  if v7 != v2 then goto L2d3916;
  #L2d38fe.  v8.`kotlinx.coroutines.channels.n.size` @type ^`int` := v1;
  #L2d3902.  v9:= v8.`kotlinx.coroutines.channels.n.h` @type ^`java.lang.Object`[] @kind object;
  #L2d3906.  v1:= v8.`kotlinx.coroutines.channels.n.i` @type ^`int`;
  #L2d390a.  v9[v1]:= v4 @kind object;
  #L2d390e.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d3914.  return v7 @kind object;
  #L2d3916.  v2:= instanceof @variable v7 @type ^`kotlinx.coroutines.channels.y` @kind boolean;
  #L2d391a.  if v2 == 0 then goto L2d3924;
  #L2d391e.  v2:= v7 @kind object;
  #L2d3920.  v5:= v2 @kind object;
  #L2d3922.  goto L2d38da;
  #L2d3924.  v9:= new `java.lang.IllegalStateException`;
  #L2d3928.  v1:= "performAtomicTrySelect(describeTryOffer) returned " @kind object;
  #L2d392c.  call temp:= `stringPlus`(v1, v7) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2d3932.  v1:= temp @kind object;
  #L2d3934.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d393a.  v1:= temp @kind object;
  #L2d393c.  call `<init>`(v9, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d3942.  throw v9;
  #L2d3944.  v3:= 0I;
  #L2d3946.  v7:= `@@kotlinx.coroutines.channels.j.d` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2d394a.  if v2 == v7 then goto L2d396e;
  #L2d394e.  v7:= instanceof @variable v2 @type ^`kotlinx.coroutines.channels.y` @kind boolean;
  #L2d3952.  if v7 != 0 then goto L2d396e;
  #L2d3956.  v8.`kotlinx.coroutines.channels.n.size` @type ^`int` := v1;
  #L2d395a.  v9:= v8.`kotlinx.coroutines.channels.n.h` @type ^`java.lang.Object`[] @kind object;
  #L2d395e.  v7:= v8.`kotlinx.coroutines.channels.n.i` @type ^`int`;
  #L2d3962.  v7:= v7 + v1 @kind int;
  #L2d3964.  v1:= length @variable v9;
  #L2d3966.  v7:= v7 %% v1 @kind int;
  #L2d3968.  v9[v7]:= v2 @kind object;
  #L2d396c.  goto L2d399a;
  #L2d396e.  call temp:= `e`(v9) @signature `Lkotlinx/coroutines/selects/j;.e:()Z` @kind interface;
  #L2d3974.  v9:= temp;
  #L2d3976.  if v9 != 0 then goto L2d399a;
  #L2d397a.  v8.`kotlinx.coroutines.channels.n.size` @type ^`int` := v1;
  #L2d397e.  v9:= v8.`kotlinx.coroutines.channels.n.h` @type ^`java.lang.Object`[] @kind object;
  #L2d3982.  v1:= v8.`kotlinx.coroutines.channels.n.i` @type ^`int`;
  #L2d3986.  v9[v1]:= v4 @kind object;
  #L2d398a.  call temp:= `d`() @signature `Lkotlinx/coroutines/selects/k;.d:()Ljava/lang/Object;` @kind static;
  #L2d3990.  v9:= temp @kind object;
  #L2d3992.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d3998.  return v9 @kind object;
  #L2d399a.  v9:= v8.`kotlinx.coroutines.channels.n.i` @type ^`int`;
  #L2d399e.  v9:= v9 + v6 @kind int;
  #L2d39a0.  v1:= v8.`kotlinx.coroutines.channels.n.h` @type ^`java.lang.Object`[] @kind object;
  #L2d39a4.  v1:= length @variable v1;
  #L2d39a6.  v9:= v9 %% v1 @kind int;
  #L2d39a8.  v8.`kotlinx.coroutines.channels.n.i` @type ^`int` := v9;
  #L2d39ac.  v9:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2d39b0.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d39b6.  if v3 == 0 then goto L2d39ca;
  #L2d39ba.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2d39c0.  v5:= (`kotlinx.coroutines.channels.g0`) v5 @kind object;
  #L2d39c4.  call `R`(v5) @signature `Lkotlinx/coroutines/channels/g0;.R:()V` @kind virtual;
  #L2d39ca.  return v4 @kind object;
  #L2d39cc.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2d39ce.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d39d4.  goto L2d39d8;
  #L2d39d6.  throw v9;
  #L2d39d8.  goto L2d39d6;
  catch `java.lang.Throwable` @[L2d3862..L2d387a] goto L2d39cc;
  catch `java.lang.Throwable` @[L2d3882..L2d390e] goto L2d39cc;
  catch `java.lang.Throwable` @[L2d3916..L2d3992] goto L2d39cc;
  catch `java.lang.Throwable` @[L2d399a..L2d39b0] goto L2d39cc;
}
procedure `java.lang.Object` `j`(`kotlinx.coroutines.channels.n` v1 @kind this, `kotlinx.coroutines.channels.g0` v2 @kind object) @signature `Lkotlinx/coroutines/channels/n;.j:(Lkotlinx/coroutines/channels/g0;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2d35e0.  v0:= v1.`kotlinx.coroutines.channels.n.g` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L2d35e4.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L2d35ea.  call temp:= `j`(v1, v2) @signature `Lkotlinx/coroutines/channels/m;.j:(Lkotlinx/coroutines/channels/g0;)Ljava/lang/Object;` @kind super;
  #L2d35f0.  v2:= temp @kind object;
  #L2d35f2.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d35f8.  return v2 @kind object;
  #L2d35fa.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2d35fc.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2d3602.  throw v2;
  catch `java.lang.Throwable` @[L2d35ea..L2d35f2] goto L2d35fa;
}
procedure `java.lang.String` `k`(`kotlinx.coroutines.channels.n` v2 @kind this) @signature `Lkotlinx/coroutines/channels/n;.k:()Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2d3a10.  v0:= new `java.lang.StringBuilder`;
  #L2d3a14.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d3a1a.  v1:= "(buffer:capacity=" @kind object;
  #L2d3a1e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d3a24.  v1:= v2.`kotlinx.coroutines.channels.n.e` @type ^`int`;
  #L2d3a28.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d3a2e.  v1:= ",size=" @kind object;
  #L2d3a32.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d3a38.  v1:= v2.`kotlinx.coroutines.channels.n.size` @type ^`int`;
  #L2d3a3c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d3a42.  v1:= 41I;
  #L2d3a46.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d3a4c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d3a52.  v0:= temp @kind object;
  #L2d3a54.  return v0 @kind object;
}
procedure `boolean` `x`(`kotlinx.coroutines.channels.n` v1 @kind this) @signature `Lkotlinx/coroutines/channels/n;.x:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L2d353c.  v0:= 0I;
  #L2d353e.  return v0;
}
procedure `boolean` `z`(`kotlinx.coroutines.channels.n` v2 @kind this) @signature `Lkotlinx/coroutines/channels/n;.z:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L2d3570.  v0:= v2.`kotlinx.coroutines.channels.n.size` @type ^`int`;
  #L2d3574.  v1:= v2.`kotlinx.coroutines.channels.n.e` @type ^`int`;
  #L2d3578.  if v0 != v1 then goto L2d358c;
  #L2d357c.  v0:= v2.`kotlinx.coroutines.channels.n.f` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L2d3580.  v1:= `@@kotlinx.coroutines.channels.BufferOverflow.SUSPEND` @type ^`kotlinx.coroutines.channels.BufferOverflow` @kind object;
  #L2d3584.  if v0 != v1 then goto L2d358c;
  #L2d3588.  v0:= 1I;
  #L2d358a.  goto L2d358e;
  #L2d358c.  v0:= 0I;
  #L2d358e.  return v0;
}
