record `kotlinx.coroutines.b3` @kind class @AccessFlag FINAL extends `kotlin.jvm.functions.Function1` @kind interface {
  `int` `kotlinx.coroutines.b3._state` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `kotlinx.coroutines.z1` `kotlinx.coroutines.b3.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.Thread` `kotlinx.coroutines.b3.d` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.z0` `kotlinx.coroutines.b3.e` @AccessFlag PRIVATE;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.b3.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/b3;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2d0644.  v0:= constclass @type ^`kotlinx.coroutines.b3` @kind object;
  #L2d0648.  v1:= "_state" @kind object;
  #L2d064c.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L2d0652.  v0:= temp @kind object;
  #L2d0654.  `@@kotlinx.coroutines.b3.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L2d0658.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.b3` v0 @kind this, `kotlinx.coroutines.z1` v1 @kind object) @signature `Lkotlinx/coroutines/b3;.<init>:(Lkotlinx/coroutines/z1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2d066c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d0672.  v0.`kotlinx.coroutines.b3.c` @type ^`kotlinx.coroutines.z1` := v1 @kind object;
  #L2d0676.  v1:= 0I;
  #L2d0678.  v0.`kotlinx.coroutines.b3._state` @type ^`int` := v1;
  #L2d067c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L2d0682.  v1:= temp @kind object;
  #L2d0684.  v0.`kotlinx.coroutines.b3.d` @type ^`java.lang.Thread` := v1 @kind object;
  #L2d0688.  return @kind void;
}
procedure `java.lang.Void` `b`(`kotlinx.coroutines.b3` v2 @kind this, `int` v3 ) @signature `Lkotlinx/coroutines/b3;.b:(I)Ljava/lang/Void;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2d060c.  v0:= new `java.lang.IllegalStateException`;
  #L2d0610.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2d0616.  v3:= temp @kind object;
  #L2d0618.  v1:= "Illegal state " @kind object;
  #L2d061c.  call temp:= `stringPlus`(v1, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2d0622.  v3:= temp @kind object;
  #L2d0624.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d062a.  v3:= temp @kind object;
  #L2d062c.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d0632.  throw v0;
}
procedure `void` `a`(`kotlinx.coroutines.b3` v3 @kind this) @signature `Lkotlinx/coroutines/b3;.a:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2d069c.  v0:= v3.`kotlinx.coroutines.b3._state` @type ^`int`;
  #L2d06a0.  if v0 == 0 then goto L2d06ca;
  #L2d06a4.  v1:= 2I;
  #L2d06a6.  if v0 == v1 then goto L2d069c;
  #L2d06aa.  v1:= 3I;
  #L2d06ac.  if v0 != v1 then goto L2d06b8;
  #L2d06b0.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L2d06b6.  return @kind void;
  #L2d06b8.  call temp:= `b`(v3, v0) @signature `Lkotlinx/coroutines/b3;.b:(I)Ljava/lang/Void;` @kind direct;
  #L2d06be.  v0:= new `kotlin.KotlinNothingValueException`;
  #L2d06c2.  call `<init>`(v0) @signature `Lkotlin/KotlinNothingValueException;.<init>:()V` @kind direct;
  #L2d06c8.  throw v0;
  #L2d06ca.  v1:= `@@kotlinx.coroutines.b3.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L2d06ce.  v2:= 1I;
  #L2d06d0.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L2d06d6.  v0:= temp;
  #L2d06d8.  if v0 == 0 then goto L2d069c;
  #L2d06dc.  v0:= v3.`kotlinx.coroutines.b3.e` @type ^`kotlinx.coroutines.z0` @kind object;
  #L2d06e0.  if v0 != 0 then goto L2d06e6;
  #L2d06e4.  goto L2d06ec;
  #L2d06e6.  call `dispose`(v0) @signature `Lkotlinx/coroutines/z0;.dispose:()V` @kind interface;
  #L2d06ec.  return @kind void;
}
procedure `void` `c`(`kotlinx.coroutines.b3` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lkotlinx/coroutines/b3;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2d0700.  v4:= v3.`kotlinx.coroutines.b3._state` @type ^`int`;
  #L2d0704.  v0:= 3I;
  #L2d0706.  v1:= 2I;
  #L2d0708.  if v4 == 0 then goto L2d0730;
  #L2d070c.  v2:= 1I;
  #L2d070e.  if v4 == v2 then goto L2d072e;
  #L2d0712.  if v4 == v1 then goto L2d072e;
  #L2d0716.  if v4 != v0 then goto L2d071c;
  #L2d071a.  goto L2d072e;
  #L2d071c.  call temp:= `b`(v3, v4) @signature `Lkotlinx/coroutines/b3;.b:(I)Ljava/lang/Void;` @kind direct;
  #L2d0722.  v4:= new `kotlin.KotlinNothingValueException`;
  #L2d0726.  call `<init>`(v4) @signature `Lkotlin/KotlinNothingValueException;.<init>:()V` @kind direct;
  #L2d072c.  throw v4;
  #L2d072e.  return @kind void;
  #L2d0730.  v2:= `@@kotlinx.coroutines.b3.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L2d0734.  call temp:= `compareAndSet`(v2, v3, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L2d073a.  v4:= temp;
  #L2d073c.  if v4 == 0 then goto L2d0700;
  #L2d0740.  v4:= v3.`kotlinx.coroutines.b3.d` @type ^`java.lang.Thread` @kind object;
  #L2d0744.  call `interrupt`(v4) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L2d074a.  v3.`kotlinx.coroutines.b3._state` @type ^`int` := v0;
  #L2d074e.  return @kind void;
}
procedure `void` `d`(`kotlinx.coroutines.b3` v3 @kind this) @signature `Lkotlinx/coroutines/b3;.d:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2d0760.  v0:= v3.`kotlinx.coroutines.b3.c` @type ^`kotlinx.coroutines.z1` @kind object;
  #L2d0764.  v1:= 1I;
  #L2d0766.  call temp:= `m`(v0, v1, v1, v3) @signature `Lkotlinx/coroutines/z1;.m:(ZZLkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/z0;` @kind interface;
  #L2d076c.  v0:= temp @kind object;
  #L2d076e.  v3.`kotlinx.coroutines.b3.e` @type ^`kotlinx.coroutines.z0` := v0 @kind object;
  #L2d0772.  v0:= v3.`kotlinx.coroutines.b3._state` @type ^`int`;
  #L2d0776.  if v0 == 0 then goto L2d079c;
  #L2d077a.  v1:= 2I;
  #L2d077c.  if v0 == v1 then goto L2d079a;
  #L2d0780.  v1:= 3I;
  #L2d0782.  if v0 != v1 then goto L2d0788;
  #L2d0786.  goto L2d079a;
  #L2d0788.  call temp:= `b`(v3, v0) @signature `Lkotlinx/coroutines/b3;.b:(I)Ljava/lang/Void;` @kind direct;
  #L2d078e.  v0:= new `kotlin.KotlinNothingValueException`;
  #L2d0792.  call `<init>`(v0) @signature `Lkotlin/KotlinNothingValueException;.<init>:()V` @kind direct;
  #L2d0798.  throw v0;
  #L2d079a.  return @kind void;
  #L2d079c.  v1:= `@@kotlinx.coroutines.b3.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L2d07a0.  v2:= 0I;
  #L2d07a2.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L2d07a8.  v0:= temp;
  #L2d07aa.  if v0 == 0 then goto L2d0772;
  #L2d07ae.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.b3` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/b3;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2d05ec.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L2d05f0.  call `c`(v0, v1) @signature `Lkotlinx/coroutines/b3;.c:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2d05f6.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2d05fa.  return v1 @kind object;
}
