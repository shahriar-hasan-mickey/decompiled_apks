record `kotlinx.coroutines.f` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.a` @kind class {
  `java.lang.Thread` `kotlinx.coroutines.f.d` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.d1` `kotlinx.coroutines.f.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.f` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `java.lang.Thread` v3 @kind object, `kotlinx.coroutines.d1` v4 @kind object) @signature `Lkotlinx/coroutines/f;.<init>:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Thread;Lkotlinx/coroutines/d1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2c9e0c.  v0:= 1I;
  #L2c9e0e.  call `<init>`(v1, v2, v0, v0) @signature `Lkotlinx/coroutines/a;.<init>:(Lkotlin/coroutines/CoroutineContext;ZZ)V` @kind direct;
  #L2c9e14.  v1.`kotlinx.coroutines.f.d` @type ^`java.lang.Thread` := v3 @kind object;
  #L2c9e18.  v1.`kotlinx.coroutines.f.e` @type ^`kotlinx.coroutines.d1` := v4 @kind object;
  #L2c9e1c.  return @kind void;
}
procedure `void` `F`(`kotlinx.coroutines.f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/f;.F:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2c9e30.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L2c9e36.  v2:= temp @kind object;
  #L2c9e38.  v0:= v1.`kotlinx.coroutines.f.d` @type ^`java.lang.Thread` @kind object;
  #L2c9e3c.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2c9e42.  v2:= temp;
  #L2c9e44.  if v2 != 0 then goto L2c9e64;
  #L2c9e48.  v2:= v1.`kotlinx.coroutines.f.d` @type ^`java.lang.Thread` @kind object;
  #L2c9e4c.  call temp:= `a`() @signature `Lkotlinx/coroutines/c;.a:()Lkotlinx/coroutines/b;` @kind static;
  #L2c9e52.  v0:= temp @kind object;
  #L2c9e54.  if v0 != 0 then goto L2c9e60;
  #L2c9e58.  call `unpark`(v2) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L2c9e5e.  goto L2c9e64;
  #L2c9e60.  v2:= 0I;
  #L2c9e62.  throw v2;
  #L2c9e64.  return @kind void;
}
procedure `java.lang.Object` `N0`(`kotlinx.coroutines.f` v6 @kind this) @signature `Lkotlinx/coroutines/f;.N0:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2c9cd8.  call temp:= `a`() @signature `Lkotlinx/coroutines/c;.a:()Lkotlinx/coroutines/b;` @kind static;
  #L2c9cde.  v0:= temp @kind object;
  #L2c9ce0.  v1:= 0I;
  #L2c9ce2.  if v0 != 0 then goto L2c9dc4;
  #L2c9ce6.  v0:= v6.`kotlinx.coroutines.f.e` @type ^`kotlinx.coroutines.d1` @kind object;
  #L2c9cea.  v2:= 1I;
  #L2c9cec.  v3:= 0I;
  #L2c9cee.  if v0 != 0 then goto L2c9cf4;
  #L2c9cf2.  goto L2c9cfa;
  #L2c9cf4.  call `X0`(v0, v3, v2, v1) @signature `Lkotlinx/coroutines/d1;.X0:(Lkotlinx/coroutines/d1;ZILjava/lang/Object;)V` @kind static;
  #L2c9cfa.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L2c9d00.  v0:= temp;
  #L2c9d02.  if v0 != 0 then goto L2c9d8c;
  #L2c9d06.  v0:= v6.`kotlinx.coroutines.f.e` @type ^`kotlinx.coroutines.d1` @kind object;
  #L2c9d0a.  if v0 != 0 then goto L2c9d1a;
  #L2c9d0e.  v4:= 9223372036854775807L;
  #L2c9d18.  goto L2c9d22;
  #L2c9d1a.  call temp:= `a1`(v0) @signature `Lkotlinx/coroutines/d1;.a1:()J` @kind virtual;
  #L2c9d20.  v4:= temp @kind wide;
  #L2c9d22.  call temp:= `A0`(v6) @signature `Lkotlinx/coroutines/j2;.A0:()Z` @kind virtual;
  #L2c9d28.  v0:= temp;
  #L2c9d2a.  if v0 == 0 then goto L2c9d76;
  #L2c9d2e.  v0:= v6.`kotlinx.coroutines.f.e` @type ^`kotlinx.coroutines.d1` @kind object;
  #L2c9d32.  if v0 != 0 then goto L2c9d38;
  #L2c9d36.  goto L2c9d3e;
  #L2c9d38.  call `S0`(v0, v3, v2, v1) @signature `Lkotlinx/coroutines/d1;.S0:(Lkotlinx/coroutines/d1;ZILjava/lang/Object;)V` @kind static;
  #L2c9d3e.  call temp:= `a`() @signature `Lkotlinx/coroutines/c;.a:()Lkotlinx/coroutines/b;` @kind static;
  #L2c9d44.  v0:= temp @kind object;
  #L2c9d46.  if v0 != 0 then goto L2c9d74;
  #L2c9d4a.  call temp:= `Y`(v6) @signature `Lkotlinx/coroutines/j2;.Y:()Ljava/lang/Object;` @kind virtual;
  #L2c9d50.  v0:= temp @kind object;
  #L2c9d52.  call temp:= `h`(v0) @signature `Lkotlinx/coroutines/k2;.h:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2c9d58.  v0:= temp @kind object;
  #L2c9d5a.  v2:= instanceof @variable v0 @type ^`kotlinx.coroutines.a0` @kind boolean;
  #L2c9d5e.  if v2 == 0 then goto L2c9d68;
  #L2c9d62.  v1:= v0 @kind object;
  #L2c9d64.  v1:= (`kotlinx.coroutines.a0`) v1 @kind object;
  #L2c9d68.  if v1 != 0 then goto L2c9d6e;
  #L2c9d6c.  return v0 @kind object;
  #L2c9d6e.  v0:= v1.`kotlinx.coroutines.a0.b` @type ^`java.lang.Throwable` @kind object;
  #L2c9d72.  throw v0;
  #L2c9d74.  throw v1;
  #L2c9d76.  call temp:= `a`() @signature `Lkotlinx/coroutines/c;.a:()Lkotlinx/coroutines/b;` @kind static;
  #L2c9d7c.  v0:= temp @kind object;
  #L2c9d7e.  if v0 != 0 then goto L2c9d8a;
  #L2c9d82.  call `parkNanos`(v6, v4) @signature `Ljava/util/concurrent/locks/LockSupport;.parkNanos:(Ljava/lang/Object;J)V` @kind static;
  #L2c9d88.  goto L2c9cfa;
  #L2c9d8a.  throw v1;
  #L2c9d8c.  v0:= new `java.lang.InterruptedException`;
  #L2c9d90.  call `<init>`(v0) @signature `Ljava/lang/InterruptedException;.<init>:()V` @kind direct;
  #L2c9d96.  call temp:= `G`(v6, v0) @signature `Lkotlinx/coroutines/j2;.G:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L2c9d9c.  throw v0;
  #L2c9d9e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c9da0.  v4:= v6.`kotlinx.coroutines.f.e` @type ^`kotlinx.coroutines.d1` @kind object;
  #L2c9da4.  if v4 != 0 then goto L2c9daa;
  #L2c9da8.  goto L2c9db0;
  #L2c9daa.  call `S0`(v4, v3, v2, v1) @signature `Lkotlinx/coroutines/d1;.S0:(Lkotlinx/coroutines/d1;ZILjava/lang/Object;)V` @kind static;
  #L2c9db0.  throw v0;
  #L2c9db2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c9db4.  call temp:= `a`() @signature `Lkotlinx/coroutines/c;.a:()Lkotlinx/coroutines/b;` @kind static;
  #L2c9dba.  v2:= temp @kind object;
  #L2c9dbc.  if v2 != 0 then goto L2c9dc2;
  #L2c9dc0.  throw v0;
  #L2c9dc2.  throw v1;
  #L2c9dc4.  goto L2c9dc8;
  #L2c9dc6.  throw v1;
  #L2c9dc8.  goto L2c9dc6;
  catch `java.lang.Throwable` @[L2c9ce6..L2c9cfa] goto L2c9db2;
  catch `java.lang.Throwable` @[L2c9cfa..L2c9d2a] goto L2c9d9e;
  catch `java.lang.Throwable` @[L2c9d2e..L2c9d3e] goto L2c9db2;
  catch `java.lang.Throwable` @[L2c9d76..L2c9d9e] goto L2c9d9e;
  catch `java.lang.Throwable` @[L2c9da0..L2c9db2] goto L2c9db2;
}
procedure `boolean` `c0`(`kotlinx.coroutines.f` v1 @kind this) @signature `Lkotlinx/coroutines/f;.c0:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2c9cc4.  v0:= 1I;
  #L2c9cc6.  return v0;
}
