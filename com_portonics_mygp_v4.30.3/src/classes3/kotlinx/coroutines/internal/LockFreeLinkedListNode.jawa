record `kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind class @AccessFlag PUBLIC {
  `java.lang.Object` `kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @AccessFlag VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @AccessFlag VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.internal.LockFreeLinkedListNode._removedRef` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.c` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.d` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2e978c.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L2e9790.  v1:= constclass @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L2e9794.  v2:= "_next" @kind object;
  #L2e9798.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L2e979e.  v2:= temp @kind object;
  #L2e97a0.  `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L2e97a4.  v2:= "_prev" @kind object;
  #L2e97a8.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L2e97ae.  v2:= temp @kind object;
  #L2e97b0.  `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L2e97b4.  v2:= "_removedRef" @kind object;
  #L2e97b8.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L2e97be.  v0:= temp @kind object;
  #L2e97c0.  `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.d` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L2e97c4.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2e97d8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2e97de.  v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @type ^`java.lang.Object` := v1 @kind object;
  #L2e97e2.  v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` := v1 @kind object;
  #L2e97e6.  v0:= 0I;
  #L2e97e8.  v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode._removedRef` @type ^`java.lang.Object` := v0 @kind object;
  #L2e97ec.  return @kind void;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `D`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v7 @kind this, `kotlinx.coroutines.internal.f0` v8 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.D:(Lkotlinx/coroutines/internal/f0;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2e9564.  v0:= v7.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L2e9568.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L2e956c.  v1:= 0I;
  #L2e956e.  v2:= v0 @kind object;
  #L2e9570.  v3:= v1 @kind object;
  #L2e9572.  v4:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @type ^`java.lang.Object` @kind object;
  #L2e9576.  if v4 != v7 then goto L2e9594;
  #L2e957a.  if v0 != v2 then goto L2e9580;
  #L2e957e.  return v2 @kind object;
  #L2e9580.  v1:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e9584.  call temp:= `compareAndSet`(v1, v7, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e958a.  v0:= temp;
  #L2e958c.  if v0 != 0 then goto L2e9592;
  #L2e9590.  goto L2e9564;
  #L2e9592.  return v2 @kind object;
  #L2e9594.  call temp:= `L`(v7) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.L:()Z` @kind virtual;
  #L2e959a.  v5:= temp;
  #L2e959c.  if v5 == 0 then goto L2e95a2;
  #L2e95a0.  return v1 @kind object;
  #L2e95a2.  if v4 != v8 then goto L2e95a8;
  #L2e95a6.  return v2 @kind object;
  #L2e95a8.  v5:= instanceof @variable v4 @type ^`kotlinx.coroutines.internal.f0` @kind boolean;
  #L2e95ac.  if v5 == 0 then goto L2e95d4;
  #L2e95b0.  if v8 == 0 then goto L2e95c8;
  #L2e95b4.  v0:= v4 @kind object;
  #L2e95b6.  v0:= (`kotlinx.coroutines.internal.f0`) v0 @kind object;
  #L2e95ba.  call temp:= `b`(v8, v0) @signature `Lkotlinx/coroutines/internal/f0;.b:(Lkotlinx/coroutines/internal/f0;)Z` @kind virtual;
  #L2e95c0.  v0:= temp;
  #L2e95c2.  if v0 == 0 then goto L2e95c8;
  #L2e95c6.  return v1 @kind object;
  #L2e95c8.  v4:= (`kotlinx.coroutines.internal.f0`) v4 @kind object;
  #L2e95cc.  call temp:= `c`(v4, v2) @signature `Lkotlinx/coroutines/internal/f0;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2e95d2.  goto L2e9564;
  #L2e95d4.  v5:= instanceof @variable v4 @type ^`kotlinx.coroutines.internal.g0` @kind boolean;
  #L2e95d8.  if v5 == 0 then goto L2e9608;
  #L2e95dc.  if v3 == 0 then goto L2e95fe;
  #L2e95e0.  v5:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e95e4.  v4:= (`kotlinx.coroutines.internal.g0`) v4 @kind object;
  #L2e95e8.  v4:= v4.`kotlinx.coroutines.internal.g0.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L2e95ec.  call temp:= `compareAndSet`(v5, v3, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e95f2.  v2:= temp;
  #L2e95f4.  if v2 != 0 then goto L2e95fa;
  #L2e95f8.  goto L2e9564;
  #L2e95fa.  v2:= v3 @kind object;
  #L2e95fc.  goto L2e9570;
  #L2e95fe.  v2:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L2e9602.  v2:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v2 @kind object;
  #L2e9606.  goto L2e9572;
  #L2e9608.  v3:= v4 @kind object;
  #L2e960a.  v3:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v3 @kind object;
  #L2e960e.  v6:= v3 @kind object;
  #L2e9610.  v3:= v2 @kind object;
  #L2e9612.  v2:= v6 @kind object;
  #L2e9614.  goto L2e9572;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `E`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.E:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2e9628.  call temp:= `L`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.L:()Z` @kind virtual;
  #L2e962e.  v0:= temp;
  #L2e9630.  if v0 != 0 then goto L2e9636;
  #L2e9634.  return v2 @kind object;
  #L2e9636.  v2:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L2e963a.  v2:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v2 @kind object;
  #L2e963e.  goto L2e9628;
}
procedure `void` `F`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.F:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2e9840.  v0:= v3.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L2e9844.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L2e9848.  call temp:= `G`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.G:()Ljava/lang/Object;` @kind virtual;
  #L2e984e.  v1:= temp @kind object;
  #L2e9850.  if v1 == v3 then goto L2e9856;
  #L2e9854.  return @kind void;
  #L2e9856.  v1:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e985a.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e9860.  v0:= temp;
  #L2e9862.  if v0 == 0 then goto L2e9840;
  #L2e9866.  call temp:= `L`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.L:()Z` @kind virtual;
  #L2e986c.  v0:= temp;
  #L2e986e.  if v0 == 0 then goto L2e987a;
  #L2e9872.  v0:= 0I;
  #L2e9874.  call temp:= `D`(v3, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.D:(Lkotlinx/coroutines/internal/f0;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L2e987a.  return @kind void;
}
procedure `kotlinx.coroutines.internal.g0` `P`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.P:()Lkotlinx/coroutines/internal/g0;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2e9758.  v0:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode._removedRef` @type ^`java.lang.Object` @kind object;
  #L2e975c.  v0:= (`kotlinx.coroutines.internal.g0`) v0 @kind object;
  #L2e9760.  if v0 != 0 then goto L2e9778;
  #L2e9764.  v0:= new `kotlinx.coroutines.internal.g0`;
  #L2e9768.  call `<init>`(v0, v2) @signature `Lkotlinx/coroutines/internal/g0;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L2e976e.  v1:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.d` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e9772.  call `lazySet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L2e9778.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `w`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object, `kotlinx.coroutines.internal.f0` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.w:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/f0;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2e9548.  call temp:= `D`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.D:(Lkotlinx/coroutines/internal/f0;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L2e954e.  v0:= temp @kind object;
  #L2e9550.  return v0 @kind object;
}
procedure `void` `x`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.x:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2e9800.  call `F`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.F:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L2e9806.  return @kind void;
}
procedure `kotlinx.coroutines.internal.g0` `y`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.y:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Lkotlinx/coroutines/internal/g0;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2e973c.  call temp:= `P`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.P:()Lkotlinx/coroutines/internal/g0;` @kind direct;
  #L2e9742.  v0:= temp @kind object;
  #L2e9744.  return v0 @kind object;
}
procedure `void` `A`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.A:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e9818.  call temp:= `I`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.I:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L2e981e.  v0:= temp @kind object;
  #L2e9820.  call temp:= `B`(v0, v2, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.B:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Z` @kind virtual;
  #L2e9826.  v0:= temp;
  #L2e9828.  if v0 == 0 then goto L2e9818;
  #L2e982c.  return @kind void;
}
procedure `boolean` `B`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.B:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e93b0.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e93b4.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L2e93ba.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e93be.  call `lazySet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L2e93c4.  call temp:= `compareAndSet`(v0, v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e93ca.  v0:= temp;
  #L2e93cc.  if v0 != 0 then goto L2e93d4;
  #L2e93d0.  v2:= 0I;
  #L2e93d2.  return v2;
  #L2e93d4.  call `F`(v2, v3) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.F:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L2e93da.  v2:= 1I;
  #L2e93dc.  return v2;
}
procedure `boolean` `C`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.C:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e93f0.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e93f4.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L2e93fa.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e93fe.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L2e9404.  call temp:= `G`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.G:()Ljava/lang/Object;` @kind virtual;
  #L2e940a.  v0:= temp @kind object;
  #L2e940c.  if v0 == v1 then goto L2e9414;
  #L2e9410.  v2:= 0I;
  #L2e9412.  return v2;
  #L2e9414.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e9418.  call temp:= `compareAndSet`(v0, v1, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e941e.  v0:= temp;
  #L2e9420.  if v0 == 0 then goto L2e9404;
  #L2e9424.  call `F`(v2, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.F:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind direct;
  #L2e942a.  v2:= 1I;
  #L2e942c.  return v2;
}
procedure `java.lang.Object` `G`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.G:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2e94d0.  v0:= v2.`kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @type ^`java.lang.Object` @kind object;
  #L2e94d4.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.f0` @kind boolean;
  #L2e94d8.  if v1 != 0 then goto L2e94de;
  #L2e94dc.  return v0 @kind object;
  #L2e94de.  v0:= (`kotlinx.coroutines.internal.f0`) v0 @kind object;
  #L2e94e2.  call temp:= `c`(v0, v2) @signature `Lkotlinx/coroutines/internal/f0;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2e94e8.  goto L2e94d0;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `H`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.H:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e9650.  call temp:= `G`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.G:()Ljava/lang/Object;` @kind virtual;
  #L2e9656.  v0:= temp @kind object;
  #L2e9658.  call temp:= `c`(v0) @signature `Lkotlinx/coroutines/internal/s;.c:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind static;
  #L2e965e.  v0:= temp @kind object;
  #L2e9660.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `I`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.I:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e9674.  v0:= 0I;
  #L2e9676.  call temp:= `D`(v1, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.D:(Lkotlinx/coroutines/internal/f0;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L2e967c.  v0:= temp @kind object;
  #L2e967e.  if v0 != 0 then goto L2e9692;
  #L2e9682.  v0:= v1.`kotlinx.coroutines.internal.LockFreeLinkedListNode._prev` @type ^`java.lang.Object` @kind object;
  #L2e9686.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L2e968a.  call temp:= `E`(v1, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.E:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L2e9690.  v0:= temp @kind object;
  #L2e9692.  return v0 @kind object;
}
procedure `void` `J`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.J:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e988c.  call temp:= `G`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.G:()Ljava/lang/Object;` @kind virtual;
  #L2e9892.  v0:= temp @kind object;
  #L2e9894.  v0:= (`kotlinx.coroutines.internal.g0`) v0 @kind object;
  #L2e9898.  v0:= v0.`kotlinx.coroutines.internal.g0.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L2e989c.  call `K`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.K:()V` @kind virtual;
  #L2e98a2.  return @kind void;
}
procedure `void` `K`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.K:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2e98b4.  v0:= v3 @kind object;
  #L2e98b6.  call temp:= `G`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.G:()Ljava/lang/Object;` @kind virtual;
  #L2e98bc.  v1:= temp @kind object;
  #L2e98be.  v2:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.g0` @kind boolean;
  #L2e98c2.  if v2 != 0 then goto L2e98d0;
  #L2e98c6.  v1:= 0I;
  #L2e98c8.  call temp:= `D`(v0, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.D:(Lkotlinx/coroutines/internal/f0;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L2e98ce.  return @kind void;
  #L2e98d0.  v1:= (`kotlinx.coroutines.internal.g0`) v1 @kind object;
  #L2e98d4.  v0:= v1.`kotlinx.coroutines.internal.g0.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L2e98d8.  goto L2e98b6;
}
procedure `boolean` `L`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.L:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e9440.  call temp:= `G`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.G:()Ljava/lang/Object;` @kind virtual;
  #L2e9446.  v0:= temp @kind object;
  #L2e9448.  v0:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.g0` @kind boolean;
  #L2e944c.  return v0;
}
procedure `boolean` `M`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.M:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e9460.  call temp:= `O`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.O:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L2e9466.  v0:= temp @kind object;
  #L2e9468.  if v0 != 0 then goto L2e9470;
  #L2e946c.  v0:= 1I;
  #L2e946e.  goto L2e9472;
  #L2e9470.  v0:= 0I;
  #L2e9472.  return v0;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `N`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.N:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2e96a4.  call temp:= `G`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.G:()Ljava/lang/Object;` @kind virtual;
  #L2e96aa.  v0:= temp @kind object;
  #L2e96ac.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L2e96b0.  if v0 != v2 then goto L2e96b8;
  #L2e96b4.  v0:= 0I;
  #L2e96b6.  return v0 @kind object;
  #L2e96b8.  call temp:= `M`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.M:()Z` @kind virtual;
  #L2e96be.  v1:= temp;
  #L2e96c0.  if v1 == 0 then goto L2e96c6;
  #L2e96c4.  return v0 @kind object;
  #L2e96c6.  call `J`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.J:()V` @kind virtual;
  #L2e96cc.  goto L2e96a4;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `O`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v4 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.O:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e96e0.  call temp:= `G`(v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.G:()Ljava/lang/Object;` @kind virtual;
  #L2e96e6.  v0:= temp @kind object;
  #L2e96e8.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.g0` @kind boolean;
  #L2e96ec.  if v1 == 0 then goto L2e96fa;
  #L2e96f0.  v0:= (`kotlinx.coroutines.internal.g0`) v0 @kind object;
  #L2e96f4.  v0:= v0.`kotlinx.coroutines.internal.g0.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L2e96f8.  return v0 @kind object;
  #L2e96fa.  if v0 != v4 then goto L2e9704;
  #L2e96fe.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L2e9702.  return v0 @kind object;
  #L2e9704.  v1:= v0 @kind object;
  #L2e9706.  v1:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v1 @kind object;
  #L2e970a.  call temp:= `P`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.P:()Lkotlinx/coroutines/internal/g0;` @kind direct;
  #L2e9710.  v2:= temp @kind object;
  #L2e9712.  v3:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e9716.  call temp:= `compareAndSet`(v3, v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e971c.  v0:= temp;
  #L2e971e.  if v0 == 0 then goto L2e96e0;
  #L2e9722.  v0:= 0I;
  #L2e9724.  call temp:= `D`(v1, v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.D:(Lkotlinx/coroutines/internal/f0;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind direct;
  #L2e972a.  return v0 @kind object;
}
procedure `int` `Q`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind object, `kotlinx.coroutines.internal.u` v4 @kind object) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.Q:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/u;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e9484.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e9488.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L2e948e.  v0:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e9492.  call `lazySet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L2e9498.  v4.`kotlinx.coroutines.internal.u.c` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` := v3 @kind object;
  #L2e949c.  call temp:= `compareAndSet`(v0, v1, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e94a2.  v2:= temp;
  #L2e94a4.  if v2 != 0 then goto L2e94ac;
  #L2e94a8.  v2:= 0I;
  #L2e94aa.  return v2;
  #L2e94ac.  call temp:= `c`(v4, v1) @signature `Lkotlinx/coroutines/internal/d;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2e94b2.  v2:= temp @kind object;
  #L2e94b4.  if v2 != 0 then goto L2e94bc;
  #L2e94b8.  v2:= 1I;
  #L2e94ba.  goto L2e94be;
  #L2e94bc.  v2:= 2I;
  #L2e94be.  return v2;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind this) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2e94fc.  v0:= new `java.lang.StringBuilder`;
  #L2e9500.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2e9506.  v1:= new `kotlinx.coroutines.internal.LockFreeLinkedListNode$toString$1`;
  #L2e950a.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode$toString$1;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2e9510.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e9516.  v1:= 64I;
  #L2e951a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e9520.  call temp:= `b`(v2) @signature `Lkotlinx/coroutines/p0;.b:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2e9526.  v1:= temp @kind object;
  #L2e9528.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e952e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e9534.  v0:= temp @kind object;
  #L2e9536.  return v0 @kind object;
}
