record `kotlinx.coroutines.internal.q` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `a`(`int` v1 ) @signature `Lkotlinx/coroutines/internal/q;.a:(I)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2e89b0.  v0:= 1I;
  #L2e89b2.  if v1 < v0 then goto L2e89b8;
  #L2e89b6.  goto L2e89ba;
  #L2e89b8.  v0:= 0I;
  #L2e89ba.  if v0 == 0 then goto L2e89c0;
  #L2e89be.  return @kind void;
  #L2e89c0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2e89c6.  v1:= temp @kind object;
  #L2e89c8.  v0:= "Expected positive parallelism level, but got " @kind object;
  #L2e89cc.  call temp:= `stringPlus`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2e89d2.  v1:= temp @kind object;
  #L2e89d4.  v0:= new `java.lang.IllegalArgumentException`;
  #L2e89d8.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e89de.  v1:= temp @kind object;
  #L2e89e0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e89e6.  throw v0;
}
