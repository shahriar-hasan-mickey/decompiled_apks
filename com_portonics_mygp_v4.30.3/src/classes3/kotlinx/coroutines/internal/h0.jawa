record `kotlinx.coroutines.internal.h0` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.internal.h0.array` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.h0` v1 @kind this, `int` v2 ) @signature `Lkotlinx/coroutines/internal/h0;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ea790.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ea796.  v0:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L2ea79a.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L2ea7a0.  v1.`kotlinx.coroutines.internal.h0.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v0 @kind object;
  #L2ea7a4.  return @kind void;
}
procedure `int` `a`(`kotlinx.coroutines.internal.h0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/h0;.a:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ea740.  v0:= v1.`kotlinx.coroutines.internal.h0.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2ea744.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L2ea74a.  v0:= temp;
  #L2ea74c.  return v0;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.internal.h0` v2 @kind this, `int` v3 ) @signature `Lkotlinx/coroutines/internal/h0;.b:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2ea760.  v0:= v2.`kotlinx.coroutines.internal.h0.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2ea764.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L2ea76a.  v1:= temp;
  #L2ea76c.  if v3 >= v1 then goto L2ea77a;
  #L2ea770.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2ea776.  v3:= temp @kind object;
  #L2ea778.  goto L2ea77c;
  #L2ea77a.  v3:= 0I;
  #L2ea77c.  return v3 @kind object;
}
procedure `void` `c`(`kotlinx.coroutines.internal.h0` v6 @kind this, `int` v7 , `java.lang.Object` v8 @kind object) @signature `Lkotlinx/coroutines/internal/h0;.c:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2ea7b8.  v0:= v6.`kotlinx.coroutines.internal.h0.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2ea7bc.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L2ea7c2.  v1:= temp;
  #L2ea7c4.  if v7 >= v1 then goto L2ea7d0;
  #L2ea7c8.  call `set`(v0, v7, v8) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L2ea7ce.  goto L2ea810;
  #L2ea7d0.  v2:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L2ea7d4.  v3:= v7 + 1;
  #L2ea7d8.  v4:= v1 * 2;
  #L2ea7dc.  call temp:= `coerceAtLeast`(v3, v4) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @kind static;
  #L2ea7e2.  v3:= temp;
  #L2ea7e4.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L2ea7ea.  v3:= 0I;
  #L2ea7ec.  if v3 >= v1 then goto L2ea806;
  #L2ea7f0.  v4:= v3 + 1;
  #L2ea7f4.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2ea7fa.  v5:= temp @kind object;
  #L2ea7fc.  call `set`(v2, v3, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L2ea802.  v3:= v4;
  #L2ea804.  goto L2ea7ec;
  #L2ea806.  call `set`(v2, v7, v8) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L2ea80c.  v6.`kotlinx.coroutines.internal.h0.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v2 @kind object;
  #L2ea810.  return @kind void;
}
