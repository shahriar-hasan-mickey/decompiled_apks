record `kotlinx.coroutines.internal.u` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.internal.d` @kind class {
  `kotlinx.coroutines.internal.LockFreeLinkedListNode` `kotlinx.coroutines.internal.u.b` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.internal.LockFreeLinkedListNode` `kotlinx.coroutines.internal.u.c` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.u` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/u;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2e8f7c.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/d;.<init>:()V` @kind direct;
  #L2e8f82.  v0.`kotlinx.coroutines.internal.u.b` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` := v1 @kind object;
  #L2e8f86.  return @kind void;
}
procedure `void` `d`(`kotlinx.coroutines.internal.u` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/internal/u;.d:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2e8f98.  v1:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v1 @kind object;
  #L2e8f9c.  call `j`(v0, v1, v2) @signature `Lkotlinx/coroutines/internal/u;.j:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Ljava/lang/Object;)V` @kind virtual;
  #L2e8fa2.  return @kind void;
}
procedure `void` `j`(`kotlinx.coroutines.internal.u` v2 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/internal/u;.j:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2e8fb4.  if v4 != 0 then goto L2e8fbc;
  #L2e8fb8.  v4:= 1I;
  #L2e8fba.  goto L2e8fbe;
  #L2e8fbc.  v4:= 0I;
  #L2e8fbe.  if v4 == 0 then goto L2e8fc8;
  #L2e8fc2.  v0:= v2.`kotlinx.coroutines.internal.u.b` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L2e8fc6.  goto L2e8fcc;
  #L2e8fc8.  v0:= v2.`kotlinx.coroutines.internal.u.c` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L2e8fcc.  if v0 == 0 then goto L2e8ff8;
  #L2e8fd0.  v1:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e8fd4.  call temp:= `compareAndSet`(v1, v3, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e8fda.  v3:= temp;
  #L2e8fdc.  if v3 == 0 then goto L2e8ff8;
  #L2e8fe0.  if v4 == 0 then goto L2e8ff8;
  #L2e8fe4.  v3:= v2.`kotlinx.coroutines.internal.u.b` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L2e8fe8.  v4:= v2.`kotlinx.coroutines.internal.u.c` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L2e8fec.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2e8ff2.  call `x`(v3, v4) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.x:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind static;
  #L2e8ff8.  return @kind void;
}
