record `kotlinx.coroutines.internal.y` @kind class @AccessFlag PUBLIC {
  `java.lang.Object` `kotlinx.coroutines.internal.y._cur` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.y.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/y;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2ea084.  v0:= constclass @type ^`kotlinx.coroutines.internal.y` @kind object;
  #L2ea088.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L2ea08c.  v2:= "_cur" @kind object;
  #L2ea090.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L2ea096.  v0:= temp @kind object;
  #L2ea098.  `@@kotlinx.coroutines.internal.y.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L2ea09c.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.y` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/internal/y;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2ea0b0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ea0b6.  v0:= new `kotlinx.coroutines.internal.b0`;
  #L2ea0ba.  v1:= 8I;
  #L2ea0be.  call `<init>`(v0, v1, v3) @signature `Lkotlinx/coroutines/internal/b0;.<init>:(IZ)V` @kind direct;
  #L2ea0c4.  v2.`kotlinx.coroutines.internal.y._cur` @type ^`java.lang.Object` := v0 @kind object;
  #L2ea0c8.  return @kind void;
}
procedure `boolean` `a`(`kotlinx.coroutines.internal.y` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/internal/y;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2e9fd4.  v0:= v3.`kotlinx.coroutines.internal.y._cur` @type ^`java.lang.Object` @kind object;
  #L2e9fd8.  v0:= (`kotlinx.coroutines.internal.b0`) v0 @kind object;
  #L2e9fdc.  call temp:= `a`(v0, v4) @signature `Lkotlinx/coroutines/internal/b0;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L2e9fe2.  v1:= temp;
  #L2e9fe4.  v2:= 1I;
  #L2e9fe6.  if v1 == 0 then goto L2ea00e;
  #L2e9fea.  if v1 == v2 then goto L2e9ffa;
  #L2e9fee.  v0:= 2I;
  #L2e9ff0.  if v1 == v0 then goto L2e9ff6;
  #L2e9ff4.  goto L2e9fd4;
  #L2e9ff6.  v4:= 0I;
  #L2e9ff8.  return v4;
  #L2e9ffa.  v1:= `@@kotlinx.coroutines.internal.y.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e9ffe.  call temp:= `i`(v0) @signature `Lkotlinx/coroutines/internal/b0;.i:()Lkotlinx/coroutines/internal/b0;` @kind virtual;
  #L2ea004.  v2:= temp @kind object;
  #L2ea006.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ea00c.  goto L2e9fd4;
  #L2ea00e.  return v2;
}
procedure `void` `b`(`kotlinx.coroutines.internal.y` v3 @kind this) @signature `Lkotlinx/coroutines/internal/y;.b:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ea0dc.  v0:= v3.`kotlinx.coroutines.internal.y._cur` @type ^`java.lang.Object` @kind object;
  #L2ea0e0.  v0:= (`kotlinx.coroutines.internal.b0`) v0 @kind object;
  #L2ea0e4.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/b0;.d:()Z` @kind virtual;
  #L2ea0ea.  v1:= temp;
  #L2ea0ec.  if v1 == 0 then goto L2ea0f2;
  #L2ea0f0.  return @kind void;
  #L2ea0f2.  v1:= `@@kotlinx.coroutines.internal.y.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ea0f6.  call temp:= `i`(v0) @signature `Lkotlinx/coroutines/internal/b0;.i:()Lkotlinx/coroutines/internal/b0;` @kind virtual;
  #L2ea0fc.  v2:= temp @kind object;
  #L2ea0fe.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ea104.  goto L2ea0dc;
}
procedure `int` `c`(`kotlinx.coroutines.internal.y` v1 @kind this) @signature `Lkotlinx/coroutines/internal/y;.c:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ea020.  v0:= v1.`kotlinx.coroutines.internal.y._cur` @type ^`java.lang.Object` @kind object;
  #L2ea024.  v0:= (`kotlinx.coroutines.internal.b0`) v0 @kind object;
  #L2ea028.  call temp:= `f`(v0) @signature `Lkotlinx/coroutines/internal/b0;.f:()I` @kind virtual;
  #L2ea02e.  v0:= temp;
  #L2ea030.  return v0;
}
procedure `java.lang.Object` `d`(`kotlinx.coroutines.internal.y` v3 @kind this) @signature `Lkotlinx/coroutines/internal/y;.d:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ea044.  v0:= v3.`kotlinx.coroutines.internal.y._cur` @type ^`java.lang.Object` @kind object;
  #L2ea048.  v0:= (`kotlinx.coroutines.internal.b0`) v0 @kind object;
  #L2ea04c.  call temp:= `j`(v0) @signature `Lkotlinx/coroutines/internal/b0;.j:()Ljava/lang/Object;` @kind virtual;
  #L2ea052.  v1:= temp @kind object;
  #L2ea054.  v2:= `@@kotlinx.coroutines.internal.b0.d` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2ea058.  if v1 == v2 then goto L2ea05e;
  #L2ea05c.  return v1 @kind object;
  #L2ea05e.  v1:= `@@kotlinx.coroutines.internal.y.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ea062.  call temp:= `i`(v0) @signature `Lkotlinx/coroutines/internal/b0;.i:()Lkotlinx/coroutines/internal/b0;` @kind virtual;
  #L2ea068.  v2:= temp @kind object;
  #L2ea06a.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ea070.  goto L2ea044;
}
