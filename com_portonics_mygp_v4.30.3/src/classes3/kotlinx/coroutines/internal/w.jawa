record `kotlinx.coroutines.internal.w` @kind class @AccessFlag PUBLIC extends `kotlinx.coroutines.internal.t` @kind class {
  `java.lang.Object` `kotlinx.coroutines.internal.w._affectedNode` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.internal.w._originalNext` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `kotlinx.coroutines.internal.LockFreeLinkedListNode` `kotlinx.coroutines.internal.w.d` @AccessFlag PUBLIC_FINAL;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.w.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.w.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/w;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2e92b4.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L2e92b8.  v1:= constclass @type ^`kotlinx.coroutines.internal.w` @kind object;
  #L2e92bc.  v2:= "_affectedNode" @kind object;
  #L2e92c0.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L2e92c6.  v2:= temp @kind object;
  #L2e92c8.  `@@kotlinx.coroutines.internal.w.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L2e92cc.  v2:= "_originalNext" @kind object;
  #L2e92d0.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L2e92d6.  v0:= temp @kind object;
  #L2e92d8.  `@@kotlinx.coroutines.internal.w.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L2e92dc.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.w` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/w;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2e92f0.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/t;.<init>:()V` @kind direct;
  #L2e92f6.  v0.`kotlinx.coroutines.internal.w.d` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` := v1 @kind object;
  #L2e92fa.  v1:= 0I;
  #L2e92fc.  v0.`kotlinx.coroutines.internal.w._affectedNode` @type ^`java.lang.Object` := v1 @kind object;
  #L2e9300.  v0.`kotlinx.coroutines.internal.w._originalNext` @type ^`java.lang.Object` := v1 @kind object;
  #L2e9304.  return @kind void;
}
procedure `java.lang.Object` `e`(`kotlinx.coroutines.internal.w` v1 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/w;.e:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2e91d0.  v0:= v1.`kotlinx.coroutines.internal.w.d` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L2e91d4.  if v2 != v0 then goto L2e91e2;
  #L2e91d8.  call temp:= `b`() @signature `Lkotlinx/coroutines/internal/s;.b:()Ljava/lang/Object;` @kind static;
  #L2e91de.  v2:= temp @kind object;
  #L2e91e0.  goto L2e91e4;
  #L2e91e2.  v2:= 0I;
  #L2e91e4.  return v2 @kind object;
}
procedure `void` `f`(`kotlinx.coroutines.internal.w` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/w;.f:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L2e9318.  v1:= 0I;
  #L2e931a.  call temp:= `w`(v2, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.w:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/f0;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind static;
  #L2e9320.  return @kind void;
}
procedure `void` `g`(`kotlinx.coroutines.internal.w` v3 @kind this, `kotlinx.coroutines.internal.v` v4 @kind object) @signature `Lkotlinx/coroutines/internal/w;.g:(Lkotlinx/coroutines/internal/v;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2e9334.  v0:= `@@kotlinx.coroutines.internal.w.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e9338.  v1:= v4.`kotlinx.coroutines.internal.v.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L2e933c.  v2:= 0I;
  #L2e933e.  call temp:= `compareAndSet`(v0, v3, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e9344.  v0:= `@@kotlinx.coroutines.internal.w.c` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e9348.  v4:= v4.`kotlinx.coroutines.internal.v.b` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L2e934c.  call temp:= `compareAndSet`(v0, v3, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e9352.  return @kind void;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `h`(`kotlinx.coroutines.internal.w` v1 @kind this) @signature `Lkotlinx/coroutines/internal/w;.h:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L2e9234.  v0:= v1.`kotlinx.coroutines.internal.w._affectedNode` @type ^`java.lang.Object` @kind object;
  #L2e9238.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L2e923c.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `i`(`kotlinx.coroutines.internal.w` v1 @kind this) @signature `Lkotlinx/coroutines/internal/w;.i:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L2e9250.  v0:= v1.`kotlinx.coroutines.internal.w._originalNext` @type ^`java.lang.Object` @kind object;
  #L2e9254.  v0:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v0 @kind object;
  #L2e9258.  return v0 @kind object;
}
procedure `boolean` `l`(`kotlinx.coroutines.internal.w` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/internal/w;.l:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Ljava/lang/Object;)Z` @AccessFlag PROTECTED_FINAL {
    temp;

  #L2e91a0.  v1:= instanceof @variable v2 @type ^`kotlinx.coroutines.internal.g0` @kind boolean;
  #L2e91a4.  if v1 != 0 then goto L2e91ac;
  #L2e91a8.  v1:= 0I;
  #L2e91aa.  return v1;
  #L2e91ac.  v2:= (`kotlinx.coroutines.internal.g0`) v2 @kind object;
  #L2e91b0.  v1:= v2.`kotlinx.coroutines.internal.g0.a` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L2e91b4.  call `K`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.K:()V` @kind virtual;
  #L2e91ba.  v1:= 1I;
  #L2e91bc.  return v1;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `m`(`kotlinx.coroutines.internal.w` v3 @kind this, `kotlinx.coroutines.internal.f0` v4 @kind object) @signature `Lkotlinx/coroutines/internal/w;.m:(Lkotlinx/coroutines/internal/f0;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2e926c.  v0:= v3.`kotlinx.coroutines.internal.w.d` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L2e9270.  v1:= v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @type ^`java.lang.Object` @kind object;
  #L2e9274.  v2:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.f0` @kind boolean;
  #L2e9278.  if v2 == 0 then goto L2e929c;
  #L2e927c.  v1:= (`kotlinx.coroutines.internal.f0`) v1 @kind object;
  #L2e9280.  call temp:= `b`(v4, v1) @signature `Lkotlinx/coroutines/internal/f0;.b:(Lkotlinx/coroutines/internal/f0;)Z` @kind virtual;
  #L2e9286.  v2:= temp;
  #L2e9288.  if v2 == 0 then goto L2e9290;
  #L2e928c.  v4:= 0I;
  #L2e928e.  return v4 @kind object;
  #L2e9290.  v2:= v3.`kotlinx.coroutines.internal.w.d` @type ^`kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind object;
  #L2e9294.  call temp:= `c`(v1, v2) @signature `Lkotlinx/coroutines/internal/f0;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2e929a.  goto L2e9270;
  #L2e929c.  v1:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v1 @kind object;
  #L2e92a0.  return v1 @kind object;
}
procedure `java.lang.Object` `n`(`kotlinx.coroutines.internal.w` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v2 @kind object) @signature `Lkotlinx/coroutines/internal/w;.n:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2e9218.  call temp:= `y`(v2) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.y:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Lkotlinx/coroutines/internal/g0;` @kind static;
  #L2e921e.  v1:= temp @kind object;
  #L2e9220.  return v1 @kind object;
}
procedure `java.lang.Object` `o`(`kotlinx.coroutines.internal.w` v1 @kind this) @signature `Lkotlinx/coroutines/internal/w;.o:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e91f8.  call temp:= `h`(v1) @signature `Lkotlinx/coroutines/internal/w;.h:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L2e91fe.  v0:= temp @kind object;
  #L2e9200.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2e9206.  return v0 @kind object;
}
