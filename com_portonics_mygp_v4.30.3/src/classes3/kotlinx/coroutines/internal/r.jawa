record `kotlinx.coroutines.internal.r` @kind class @AccessFlag PUBLIC extends `kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.r` v0 @kind this) @signature `Lkotlinx/coroutines/internal/r;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2e8cd8.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.<init>:()V` @kind direct;
  #L2e8cde.  return @kind void;
}
procedure `boolean` `L`(`kotlinx.coroutines.internal.r` v1 @kind this) @signature `Lkotlinx/coroutines/internal/r;.L:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e8c74.  v0:= 0I;
  #L2e8c76.  return v0;
}
procedure `boolean` `M`(`kotlinx.coroutines.internal.r` v1 @kind this) @signature `Lkotlinx/coroutines/internal/r;.M:()Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2e8c88.  call temp:= `S`(v1) @signature `Lkotlinx/coroutines/internal/r;.S:()Ljava/lang/Void;` @kind virtual;
  #L2e8c8e.  v0:= temp @kind object;
  #L2e8c90.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L2e8c94.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L2e8c9a.  v0:= temp;
  #L2e8c9c.  return v0;
}
procedure `boolean` `R`(`kotlinx.coroutines.internal.r` v1 @kind this) @signature `Lkotlinx/coroutines/internal/r;.R:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e8c50.  call temp:= `G`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.G:()Ljava/lang/Object;` @kind virtual;
  #L2e8c56.  v0:= temp @kind object;
  #L2e8c58.  if v0 != v1 then goto L2e8c60;
  #L2e8c5c.  v0:= 1I;
  #L2e8c5e.  goto L2e8c62;
  #L2e8c60.  v0:= 0I;
  #L2e8c62.  return v0;
}
procedure `java.lang.Void` `S`(`kotlinx.coroutines.internal.r` v2 @kind this) @signature `Lkotlinx/coroutines/internal/r;.S:()Ljava/lang/Void;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2e8cb0.  v0:= new `java.lang.IllegalStateException`;
  #L2e8cb4.  v1:= "head cannot be removed" @kind object;
  #L2e8cb8.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e8cbe.  v1:= temp @kind object;
  #L2e8cc0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e8cc6.  throw v0;
}
