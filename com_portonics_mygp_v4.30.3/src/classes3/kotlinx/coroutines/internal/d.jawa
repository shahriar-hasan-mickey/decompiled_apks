record `kotlinx.coroutines.internal.d` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.internal.f0` @kind class {
  `java.lang.Object` `kotlinx.coroutines.internal.d._consensus` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.d.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2e71a0.  v0:= constclass @type ^`kotlinx.coroutines.internal.d` @kind object;
  #L2e71a4.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L2e71a8.  v2:= "_consensus" @kind object;
  #L2e71ac.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L2e71b2.  v0:= temp @kind object;
  #L2e71b4.  `@@kotlinx.coroutines.internal.d.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L2e71b8.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.d` v1 @kind this) @signature `Lkotlinx/coroutines/internal/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2e71cc.  call `<init>`(v1) @signature `Lkotlinx/coroutines/internal/f0;.<init>:()V` @kind direct;
  #L2e71d2.  v0:= `@@kotlinx.coroutines.internal.c.a` @type ^`java.lang.Object` @kind object;
  #L2e71d6.  v1.`kotlinx.coroutines.internal.d._consensus` @type ^`java.lang.Object` := v0 @kind object;
  #L2e71da.  return @kind void;
}
procedure `kotlinx.coroutines.internal.d` `a`(`kotlinx.coroutines.internal.d` v0 @kind this) @signature `Lkotlinx/coroutines/internal/d;.a:()Lkotlinx/coroutines/internal/d;` @AccessFlag PUBLIC {
    temp;

  #L2e7174.  return v0 @kind object;
}
procedure `java.lang.Object` `c`(`kotlinx.coroutines.internal.d` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/internal/d;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2e7140.  v0:= v2.`kotlinx.coroutines.internal.d._consensus` @type ^`java.lang.Object` @kind object;
  #L2e7144.  v1:= `@@kotlinx.coroutines.internal.c.a` @type ^`java.lang.Object` @kind object;
  #L2e7148.  if v0 != v1 then goto L2e715c;
  #L2e714c.  call temp:= `i`(v2, v3) @signature `Lkotlinx/coroutines/internal/d;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2e7152.  v0:= temp @kind object;
  #L2e7154.  call temp:= `e`(v2, v0) @signature `Lkotlinx/coroutines/internal/d;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2e715a.  v0:= temp @kind object;
  #L2e715c.  call `d`(v2, v3, v0) @signature `Lkotlinx/coroutines/internal/d;.d:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L2e7162.  return v0 @kind object;
}
procedure `void` `d`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/internal/d;.d:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `e`(`kotlinx.coroutines.internal.d` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/internal/d;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2e70c4.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e70ca.  v0:= temp;
  #L2e70cc.  if v0 == 0 then goto L2e70f0;
  #L2e70d0.  v0:= `@@kotlinx.coroutines.internal.c.a` @type ^`java.lang.Object` @kind object;
  #L2e70d4.  if v3 == v0 then goto L2e70dc;
  #L2e70d8.  v0:= 1I;
  #L2e70da.  goto L2e70de;
  #L2e70dc.  v0:= 0I;
  #L2e70de.  if v0 == 0 then goto L2e70e4;
  #L2e70e2.  goto L2e70f0;
  #L2e70e4.  v3:= new `java.lang.AssertionError`;
  #L2e70e8.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e70ee.  throw v3;
  #L2e70f0.  v0:= v2.`kotlinx.coroutines.internal.d._consensus` @type ^`java.lang.Object` @kind object;
  #L2e70f4.  v1:= `@@kotlinx.coroutines.internal.c.a` @type ^`java.lang.Object` @kind object;
  #L2e70f8.  if v0 == v1 then goto L2e70fe;
  #L2e70fc.  return v0 @kind object;
  #L2e70fe.  v0:= `@@kotlinx.coroutines.internal.d.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e7102.  call temp:= `compareAndSet`(v0, v2, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e7108.  v0:= temp;
  #L2e710a.  if v0 == 0 then goto L2e7110;
  #L2e710e.  return v3 @kind object;
  #L2e7110.  v3:= v2.`kotlinx.coroutines.internal.d._consensus` @type ^`java.lang.Object` @kind object;
  #L2e7114.  return v3 @kind object;
}
procedure `java.lang.Object` `f`(`kotlinx.coroutines.internal.d` v1 @kind this) @signature `Lkotlinx/coroutines/internal/d;.f:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e7128.  v0:= v1.`kotlinx.coroutines.internal.d._consensus` @type ^`java.lang.Object` @kind object;
  #L2e712c.  return v0 @kind object;
}
procedure `long` `g`(`kotlinx.coroutines.internal.d` v2 @kind this) @signature `Lkotlinx/coroutines/internal/d;.g:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2e7188.  v0:= 0L;
  #L2e718c.  return v0 @kind wide;
}
procedure `boolean` `h`(`kotlinx.coroutines.internal.d` v2 @kind this) @signature `Lkotlinx/coroutines/internal/d;.h:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2e70a0.  v0:= v2.`kotlinx.coroutines.internal.d._consensus` @type ^`java.lang.Object` @kind object;
  #L2e70a4.  v1:= `@@kotlinx.coroutines.internal.c.a` @type ^`java.lang.Object` @kind object;
  #L2e70a8.  if v0 == v1 then goto L2e70b0;
  #L2e70ac.  v0:= 1I;
  #L2e70ae.  goto L2e70b2;
  #L2e70b0.  v0:= 0I;
  #L2e70b2.  return v0;
}
procedure `java.lang.Object` `i`(`java.lang.Object` v0 @kind object) @signature `Lkotlinx/coroutines/internal/d;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
