record `kotlinx.coroutines.internal.b0` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Object` `kotlinx.coroutines.internal.b0._next` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `long` `kotlinx.coroutines.internal.b0._state` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.internal.b0.e` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlinx.coroutines.internal.b0.f` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.internal.b0.g` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.internal.b0.h` @AccessFlag PRIVATE_SYNTHETIC;
}
global `kotlinx.coroutines.internal.z` `@@kotlinx.coroutines.internal.b0.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.b0.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicLongFieldUpdater` `@@kotlinx.coroutines.internal.b0.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `kotlinx.coroutines.internal.k0` `@@kotlinx.coroutines.internal.b0.d` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/b0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2e9ee4.  v0:= constclass @type ^`kotlinx.coroutines.internal.b0` @kind object;
  #L2e9ee8.  v1:= new `kotlinx.coroutines.internal.z`;
  #L2e9eec.  v2:= 0I;
  #L2e9eee.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/internal/z;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2e9ef4.  `@@kotlinx.coroutines.internal.b0.a` @type ^`kotlinx.coroutines.internal.z` := v1 @kind object;
  #L2e9ef8.  v1:= new `kotlinx.coroutines.internal.k0`;
  #L2e9efc.  v2:= "REMOVE_FROZEN" @kind object;
  #L2e9f00.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/internal/k0;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e9f06.  `@@kotlinx.coroutines.internal.b0.d` @type ^`kotlinx.coroutines.internal.k0` := v1 @kind object;
  #L2e9f0a.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L2e9f0e.  v2:= "_next" @kind object;
  #L2e9f12.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L2e9f18.  v1:= temp @kind object;
  #L2e9f1a.  `@@kotlinx.coroutines.internal.b0.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v1 @kind object;
  #L2e9f1e.  v1:= "_state" @kind object;
  #L2e9f22.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;` @kind static;
  #L2e9f28.  v0:= temp @kind object;
  #L2e9f2a.  `@@kotlinx.coroutines.internal.b0.c` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` := v0 @kind object;
  #L2e9f2e.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.b0` v4 @kind this, `int` v5 , `boolean` v6 ) @signature `Lkotlinx/coroutines/internal/b0;.<init>:(IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e9f40.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2e9f46.  v4.`kotlinx.coroutines.internal.b0.e` @type ^`int` := v5;
  #L2e9f4a.  v4.`kotlinx.coroutines.internal.b0.f` @type ^`boolean` := v6 @kind boolean;
  #L2e9f4e.  v6:= v5 + -1;
  #L2e9f52.  v4.`kotlinx.coroutines.internal.b0.g` @type ^`int` := v6;
  #L2e9f56.  v0:= 0I;
  #L2e9f58.  v4.`kotlinx.coroutines.internal.b0._next` @type ^`java.lang.Object` := v0 @kind object;
  #L2e9f5c.  v0:= 0L;
  #L2e9f60.  v4.`kotlinx.coroutines.internal.b0._state` @type ^`long` := v0 @kind wide;
  #L2e9f64.  v0:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L2e9f68.  call `<init>`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L2e9f6e.  v4.`kotlinx.coroutines.internal.b0.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v0 @kind object;
  #L2e9f72.  v0:= 0I;
  #L2e9f74.  v1:= 1I;
  #L2e9f76.  v2:= 1073741823I;
  #L2e9f7c.  if v6 > v2 then goto L2e9f84;
  #L2e9f80.  v2:= 1I;
  #L2e9f82.  goto L2e9f86;
  #L2e9f84.  v2:= 0I;
  #L2e9f86.  v3:= "Check failed." @kind object;
  #L2e9f8a.  if v2 == 0 then goto L2e9fb0;
  #L2e9f8e.  v5:= v5 ^& v6 @kind int;
  #L2e9f90.  if v5 != 0 then goto L2e9f96;
  #L2e9f94.  v0:= 1I;
  #L2e9f96.  if v0 == 0 then goto L2e9f9c;
  #L2e9f9a.  return @kind void;
  #L2e9f9c.  v5:= new `java.lang.IllegalStateException`;
  #L2e9fa0.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e9fa6.  v6:= temp @kind object;
  #L2e9fa8.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e9fae.  throw v5;
  #L2e9fb0.  v5:= new `java.lang.IllegalStateException`;
  #L2e9fb4.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e9fba.  v6:= temp @kind object;
  #L2e9fbc.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e9fc2.  throw v5;
}
procedure `kotlinx.coroutines.internal.b0` `b`(`kotlinx.coroutines.internal.b0` v6 @kind this, `long` v7 ) @signature `Lkotlinx/coroutines/internal/b0;.b:(J)Lkotlinx/coroutines/internal/b0;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2e9cc4.  v0:= new `kotlinx.coroutines.internal.b0`;
  #L2e9cc8.  v1:= v6.`kotlinx.coroutines.internal.b0.e` @type ^`int`;
  #L2e9ccc.  v1:= v1 * 2;
  #L2e9cd0.  v2:= v6.`kotlinx.coroutines.internal.b0.f` @type ^`boolean` @kind boolean;
  #L2e9cd4.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/internal/b0;.<init>:(IZ)V` @kind direct;
  #L2e9cda.  v1:= 1073741823L;
  #L2e9ce0.  v1:= v1 ^& v7 @kind long;
  #L2e9ce2.  v3:= 0I;
  #L2e9ce4.  v1:= v1 ^> v3 @kind long;
  #L2e9ce6.  v2:= (`int`) v1 @kind l2i;
  #L2e9ce8.  v3:= 1152921503533105152L;
  #L2e9cf2.  v3:= v3 ^& v7 @kind long;
  #L2e9cf4.  v1:= 30I;
  #L2e9cf8.  v3:= v3 ^> v1 @kind long;
  #L2e9cfa.  v1:= (`int`) v3 @kind l2i;
  #L2e9cfc.  v3:= v6.`kotlinx.coroutines.internal.b0.g` @type ^`int`;
  #L2e9d00.  v4:= v2 ^& v3 @kind int;
  #L2e9d04.  v5:= v1 ^& v3 @kind int;
  #L2e9d08.  if v4 == v5 then goto L2e9d3e;
  #L2e9d0c.  v4:= v6.`kotlinx.coroutines.internal.b0.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2e9d10.  v3:= v3 ^& v2 @kind int;
  #L2e9d12.  call temp:= `get`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2e9d18.  v3:= temp @kind object;
  #L2e9d1a.  if v3 != 0 then goto L2e9d28;
  #L2e9d1e.  v3:= new `kotlinx.coroutines.internal.a0`;
  #L2e9d22.  call `<init>`(v3, v2) @signature `Lkotlinx/coroutines/internal/a0;.<init>:(I)V` @kind direct;
  #L2e9d28.  v4:= v0.`kotlinx.coroutines.internal.b0.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2e9d2c.  v5:= v0.`kotlinx.coroutines.internal.b0.g` @type ^`int`;
  #L2e9d30.  v5:= v5 ^& v2 @kind int;
  #L2e9d32.  call `set`(v4, v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L2e9d38.  v2:= v2 + 1;
  #L2e9d3c.  goto L2e9cfc;
  #L2e9d3e.  v1:= `@@kotlinx.coroutines.internal.b0.a` @type ^`kotlinx.coroutines.internal.z` @kind object;
  #L2e9d42.  v2:= 1152921504606846976L;
  #L2e9d46.  call temp:= `d`(v1, v7, v2) @signature `Lkotlinx/coroutines/internal/z;.d:(JJ)J` @kind virtual;
  #L2e9d4c.  v7:= temp @kind wide;
  #L2e9d4e.  v0.`kotlinx.coroutines.internal.b0._state` @type ^`long` := v7 @kind wide;
  #L2e9d52.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.b0` `c`(`kotlinx.coroutines.internal.b0` v3 @kind this, `long` v4 ) @signature `Lkotlinx/coroutines/internal/b0;.c:(J)Lkotlinx/coroutines/internal/b0;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2e9d64.  v0:= v3.`kotlinx.coroutines.internal.b0._next` @type ^`java.lang.Object` @kind object;
  #L2e9d68.  v0:= (`kotlinx.coroutines.internal.b0`) v0 @kind object;
  #L2e9d6c.  if v0 == 0 then goto L2e9d72;
  #L2e9d70.  return v0 @kind object;
  #L2e9d72.  v0:= `@@kotlinx.coroutines.internal.b0.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e9d76.  v1:= 0I;
  #L2e9d78.  call temp:= `b`(v3, v4) @signature `Lkotlinx/coroutines/internal/b0;.b:(J)Lkotlinx/coroutines/internal/b0;` @kind direct;
  #L2e9d7e.  v2:= temp @kind object;
  #L2e9d80.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e9d86.  goto L2e9d64;
}
procedure `kotlinx.coroutines.internal.b0` `e`(`kotlinx.coroutines.internal.b0` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/internal/b0;.e:(ILjava/lang/Object;)Lkotlinx/coroutines/internal/b0;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2e9d98.  v0:= v2.`kotlinx.coroutines.internal.b0.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2e9d9c.  v1:= v2.`kotlinx.coroutines.internal.b0.g` @type ^`int`;
  #L2e9da0.  v1:= v1 ^& v3 @kind int;
  #L2e9da2.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2e9da8.  v0:= temp @kind object;
  #L2e9daa.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.a0` @kind boolean;
  #L2e9dae.  if v1 == 0 then goto L2e9dd0;
  #L2e9db2.  v0:= (`kotlinx.coroutines.internal.a0`) v0 @kind object;
  #L2e9db6.  v0:= v0.`kotlinx.coroutines.internal.a0.a` @type ^`int`;
  #L2e9dba.  if v0 != v3 then goto L2e9dd0;
  #L2e9dbe.  v0:= v2.`kotlinx.coroutines.internal.b0.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2e9dc2.  v1:= v2.`kotlinx.coroutines.internal.b0.g` @type ^`int`;
  #L2e9dc6.  v3:= v3 ^& v1 @kind int;
  #L2e9dc8.  call `set`(v0, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L2e9dce.  return v2 @kind object;
  #L2e9dd0.  v3:= 0I;
  #L2e9dd2.  return v3 @kind object;
}
procedure `long` `h`(`kotlinx.coroutines.internal.b0` v9 @kind this) @signature `Lkotlinx/coroutines/internal/b0;.h:()J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2e9ea0.  v2:= v9.`kotlinx.coroutines.internal.b0._state` @type ^`long` @kind wide;
  #L2e9ea4.  v0:= 1152921504606846976L;
  #L2e9ea8.  v4:= v2 ^& v0 @kind long;
  #L2e9eac.  v6:= 0L;
  #L2e9eb0.  v8:= lcmp(v4, v6);
  #L2e9eb4.  if v8 == 0 then goto L2e9eba;
  #L2e9eb8.  return v2 @kind wide;
  #L2e9eba.  v6:= v2 ^| v0 @kind long;
  #L2e9ebe.  v0:= `@@kotlinx.coroutines.internal.b0.c` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L2e9ec2.  v1:= v9 @kind object;
  #L2e9ec4.  v4:= v6 @kind wide;
  #L2e9ec6.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L2e9ecc.  v0:= temp;
  #L2e9ece.  if v0 == 0 then goto L2e9ea0;
  #L2e9ed2.  return v6 @kind wide;
}
procedure `kotlinx.coroutines.internal.b0` `k`(`kotlinx.coroutines.internal.b0` v9 @kind this, `int` v10 , `int` v11 ) @signature `Lkotlinx/coroutines/internal/b0;.k:(II)Lkotlinx/coroutines/internal/b0;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2e9e08.  v2:= v9.`kotlinx.coroutines.internal.b0._state` @type ^`long` @kind wide;
  #L2e9e0c.  v0:= `@@kotlinx.coroutines.internal.b0.a` @type ^`kotlinx.coroutines.internal.z` @kind object;
  #L2e9e10.  v4:= 1073741823L;
  #L2e9e16.  v4:= v4 ^& v2 @kind long;
  #L2e9e18.  v1:= 0I;
  #L2e9e1a.  v4:= v4 ^> v1 @kind long;
  #L2e9e1c.  v6:= (`int`) v4 @kind l2i;
  #L2e9e1e.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e9e24.  v4:= temp;
  #L2e9e26.  if v4 == 0 then goto L2e9e42;
  #L2e9e2a.  if v6 != v10 then goto L2e9e30;
  #L2e9e2e.  v1:= 1I;
  #L2e9e30.  if v1 == 0 then goto L2e9e36;
  #L2e9e34.  goto L2e9e42;
  #L2e9e36.  v10:= new `java.lang.AssertionError`;
  #L2e9e3a.  call `<init>`(v10) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e9e40.  throw v10;
  #L2e9e42.  v4:= 1152921504606846976L;
  #L2e9e46.  v4:= v4 ^& v2 @kind long;
  #L2e9e48.  v7:= 0L;
  #L2e9e4c.  v1:= lcmp(v4, v7);
  #L2e9e50.  if v1 == 0 then goto L2e9e5e;
  #L2e9e54.  call temp:= `i`(v9) @signature `Lkotlinx/coroutines/internal/b0;.i:()Lkotlinx/coroutines/internal/b0;` @kind virtual;
  #L2e9e5a.  v10:= temp @kind object;
  #L2e9e5c.  return v10 @kind object;
  #L2e9e5e.  v1:= `@@kotlinx.coroutines.internal.b0.c` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L2e9e62.  call temp:= `b`(v0, v2, v11) @signature `Lkotlinx/coroutines/internal/z;.b:(JI)J` @kind virtual;
  #L2e9e68.  v4:= temp @kind wide;
  #L2e9e6a.  v0:= v1 @kind object;
  #L2e9e6c.  v1:= v9 @kind object;
  #L2e9e6e.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L2e9e74.  v0:= temp;
  #L2e9e76.  if v0 == 0 then goto L2e9e08;
  #L2e9e7a.  v10:= v9.`kotlinx.coroutines.internal.b0.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2e9e7e.  v11:= v9.`kotlinx.coroutines.internal.b0.g` @type ^`int`;
  #L2e9e82.  v11:= v11 ^& v6 @kind int;
  #L2e9e84.  v0:= 0I;
  #L2e9e86.  call `set`(v10, v11, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L2e9e8c.  return v0 @kind object;
}
procedure `int` `a`(`kotlinx.coroutines.internal.b0` v13 @kind this, `java.lang.Object` v14 @kind object) @signature `Lkotlinx/coroutines/internal/b0;.a:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L2e9a94.  v2:= v13.`kotlinx.coroutines.internal.b0._state` @type ^`long` @kind wide;
  #L2e9a98.  v0:= 1.727233711018889E-77D;
  #L2e9a9c.  v0:= v0 ^& v2 @kind long;
  #L2e9a9e.  v6:= 0L;
  #L2e9aa2.  v4:= lcmp(v0, v6);
  #L2e9aa6.  if v4 == 0 then goto L2e9ab8;
  #L2e9aaa.  v14:= `@@kotlinx.coroutines.internal.b0.a` @type ^`kotlinx.coroutines.internal.z` @kind object;
  #L2e9aae.  call temp:= `a`(v14, v2) @signature `Lkotlinx/coroutines/internal/z;.a:(J)I` @kind virtual;
  #L2e9ab4.  v14:= temp;
  #L2e9ab6.  return v14;
  #L2e9ab8.  v0:= `@@kotlinx.coroutines.internal.b0.a` @type ^`kotlinx.coroutines.internal.z` @kind object;
  #L2e9abc.  v4:= 1073741823L;
  #L2e9ac2.  v4:= v4 ^& v2 @kind long;
  #L2e9ac4.  v8:= 0I;
  #L2e9ac6.  v4:= v4 ^> v8 @kind long;
  #L2e9ac8.  v1:= (`int`) v4 @kind l2i;
  #L2e9aca.  v4:= 1152921503533105152L;
  #L2e9ad4.  v4:= v4 ^& v2 @kind long;
  #L2e9ad6.  v9:= 30I;
  #L2e9ada.  v4:= v4 ^> v9 @kind long;
  #L2e9adc.  v9:= (`int`) v4 @kind l2i;
  #L2e9ade.  v10:= v13.`kotlinx.coroutines.internal.b0.g` @type ^`int`;
  #L2e9ae2.  v4:= v9 + 2;
  #L2e9ae6.  v4:= v4 ^& v10 @kind int;
  #L2e9ae8.  v5:= v1 ^& v10 @kind int;
  #L2e9aec.  v11:= 1I;
  #L2e9aee.  if v4 != v5 then goto L2e9af4;
  #L2e9af2.  return v11;
  #L2e9af4.  v4:= v13.`kotlinx.coroutines.internal.b0.f` @type ^`boolean` @kind boolean;
  #L2e9af8.  v5:= 1073741823I;
  #L2e9afe.  if v4 != 0 then goto L2e9b32;
  #L2e9b02.  v4:= v13.`kotlinx.coroutines.internal.b0.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2e9b06.  v12:= v9 ^& v10 @kind int;
  #L2e9b0a.  call temp:= `get`(v4, v12) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2e9b10.  v4:= temp @kind object;
  #L2e9b12.  if v4 == 0 then goto L2e9b32;
  #L2e9b16.  v0:= v13.`kotlinx.coroutines.internal.b0.e` @type ^`int`;
  #L2e9b1a.  v2:= 1024I;
  #L2e9b1e.  if v0 < v2 then goto L2e9b30;
  #L2e9b22.  v9:= v9 - v1 @kind int;
  #L2e9b24.  v1:= v9 ^& v5 @kind int;
  #L2e9b28.  v0:= v0 ^> 1;
  #L2e9b2c.  if v1 <= v0 then goto L2e9a94;
  #L2e9b30.  return v11;
  #L2e9b32.  v1:= v9 + 1;
  #L2e9b36.  v1:= v1 ^& v5 @kind int;
  #L2e9b38.  v4:= `@@kotlinx.coroutines.internal.b0.c` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L2e9b3c.  call temp:= `c`(v0, v2, v1) @signature `Lkotlinx/coroutines/internal/z;.c:(JI)J` @kind virtual;
  #L2e9b42.  v11:= temp @kind wide;
  #L2e9b44.  v0:= v4 @kind object;
  #L2e9b46.  v1:= v13 @kind object;
  #L2e9b48.  v4:= v11 @kind wide;
  #L2e9b4a.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L2e9b50.  v0:= temp;
  #L2e9b52.  if v0 == 0 then goto L2e9a94;
  #L2e9b56.  v0:= v13.`kotlinx.coroutines.internal.b0.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2e9b5a.  v1:= v9 ^& v10 @kind int;
  #L2e9b5e.  call `set`(v0, v1, v14) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L2e9b64.  v0:= v13 @kind object;
  #L2e9b66.  v1:= v0.`kotlinx.coroutines.internal.b0._state` @type ^`long` @kind wide;
  #L2e9b6a.  v3:= 1152921504606846976L;
  #L2e9b6e.  v1:= v1 ^& v3 @kind long;
  #L2e9b70.  v3:= lcmp(v1, v6);
  #L2e9b74.  if v3 != 0 then goto L2e9b7a;
  #L2e9b78.  goto L2e9b8e;
  #L2e9b7a.  call temp:= `i`(v0) @signature `Lkotlinx/coroutines/internal/b0;.i:()Lkotlinx/coroutines/internal/b0;` @kind virtual;
  #L2e9b80.  v0:= temp @kind object;
  #L2e9b82.  call temp:= `e`(v0, v9, v14) @signature `Lkotlinx/coroutines/internal/b0;.e:(ILjava/lang/Object;)Lkotlinx/coroutines/internal/b0;` @kind direct;
  #L2e9b88.  v0:= temp @kind object;
  #L2e9b8a.  if v0 != 0 then goto L2e9b66;
  #L2e9b8e.  return v8;
}
procedure `boolean` `d`(`kotlinx.coroutines.internal.b0` v10 @kind this) @signature `Lkotlinx/coroutines/internal/b0;.d:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2e99fc.  v2:= v10.`kotlinx.coroutines.internal.b0._state` @type ^`long` @kind wide;
  #L2e9a00.  v0:= 2305843009213693952L;
  #L2e9a04.  v4:= v2 ^& v0 @kind long;
  #L2e9a08.  v6:= 1I;
  #L2e9a0a.  v7:= 0L;
  #L2e9a0e.  v9:= lcmp(v4, v7);
  #L2e9a12.  if v9 == 0 then goto L2e9a18;
  #L2e9a16.  return v6;
  #L2e9a18.  v4:= 1152921504606846976L;
  #L2e9a1c.  v4:= v4 ^& v2 @kind long;
  #L2e9a1e.  v9:= lcmp(v4, v7);
  #L2e9a22.  if v9 == 0 then goto L2e9a2a;
  #L2e9a26.  v0:= 0I;
  #L2e9a28.  return v0;
  #L2e9a2a.  v4:= v2 ^| v0 @kind long;
  #L2e9a2e.  v0:= `@@kotlinx.coroutines.internal.b0.c` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L2e9a32.  v1:= v10 @kind object;
  #L2e9a34.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L2e9a3a.  v0:= temp;
  #L2e9a3c.  if v0 == 0 then goto L2e99fc;
  #L2e9a40.  return v6;
}
procedure `int` `f`(`kotlinx.coroutines.internal.b0` v6 @kind this) @signature `Lkotlinx/coroutines/internal/b0;.f:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2e9ba0.  v0:= v6.`kotlinx.coroutines.internal.b0._state` @type ^`long` @kind wide;
  #L2e9ba4.  v2:= 1073741823L;
  #L2e9baa.  v2:= v2 ^& v0 @kind long;
  #L2e9bac.  v4:= 0I;
  #L2e9bae.  v2:= v2 ^> v4 @kind long;
  #L2e9bb0.  v3:= (`int`) v2 @kind l2i;
  #L2e9bb2.  v4:= 1152921503533105152L;
  #L2e9bbc.  v0:= v0 ^& v4 @kind long;
  #L2e9bbe.  v2:= 30I;
  #L2e9bc2.  v0:= v0 ^> v2 @kind long;
  #L2e9bc4.  v1:= (`int`) v0 @kind l2i;
  #L2e9bc6.  v1:= v1 - v3 @kind int;
  #L2e9bc8.  v0:= 1073741823I;
  #L2e9bce.  v0:= v0 ^& v1 @kind int;
  #L2e9bd0.  return v0;
}
procedure `boolean` `g`(`kotlinx.coroutines.internal.b0` v7 @kind this) @signature `Lkotlinx/coroutines/internal/b0;.g:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2e9a54.  v0:= v7.`kotlinx.coroutines.internal.b0._state` @type ^`long` @kind wide;
  #L2e9a58.  v2:= 1073741823L;
  #L2e9a5e.  v2:= v2 ^& v0 @kind long;
  #L2e9a60.  v4:= 0I;
  #L2e9a62.  v2:= v2 ^> v4 @kind long;
  #L2e9a64.  v3:= (`int`) v2 @kind l2i;
  #L2e9a66.  v5:= 1152921503533105152L;
  #L2e9a70.  v0:= v0 ^& v5 @kind long;
  #L2e9a72.  v2:= 30I;
  #L2e9a76.  v0:= v0 ^> v2 @kind long;
  #L2e9a78.  v1:= (`int`) v0 @kind l2i;
  #L2e9a7a.  if v3 != v1 then goto L2e9a80;
  #L2e9a7e.  v4:= 1I;
  #L2e9a80.  return v4;
}
procedure `kotlinx.coroutines.internal.b0` `i`(`kotlinx.coroutines.internal.b0` v2 @kind this) @signature `Lkotlinx/coroutines/internal/b0;.i:()Lkotlinx/coroutines/internal/b0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2e9de4.  call temp:= `h`(v2) @signature `Lkotlinx/coroutines/internal/b0;.h:()J` @kind direct;
  #L2e9dea.  v0:= temp @kind wide;
  #L2e9dec.  call temp:= `c`(v2, v0) @signature `Lkotlinx/coroutines/internal/b0;.c:(J)Lkotlinx/coroutines/internal/b0;` @kind direct;
  #L2e9df2.  v0:= temp @kind object;
  #L2e9df4.  return v0 @kind object;
}
procedure `java.lang.Object` `j`(`kotlinx.coroutines.internal.b0` v10 @kind this) @signature `Lkotlinx/coroutines/internal/b0;.j:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2e9be4.  v2:= v10.`kotlinx.coroutines.internal.b0._state` @type ^`long` @kind wide;
  #L2e9be8.  v0:= 1152921504606846976L;
  #L2e9bec.  v0:= v0 ^& v2 @kind long;
  #L2e9bee.  v4:= 0L;
  #L2e9bf2.  v6:= lcmp(v0, v4);
  #L2e9bf6.  if v6 == 0 then goto L2e9c00;
  #L2e9bfa.  v0:= `@@kotlinx.coroutines.internal.b0.d` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2e9bfe.  return v0 @kind object;
  #L2e9c00.  v0:= `@@kotlinx.coroutines.internal.b0.a` @type ^`kotlinx.coroutines.internal.z` @kind object;
  #L2e9c04.  v4:= 1073741823L;
  #L2e9c0a.  v4:= v4 ^& v2 @kind long;
  #L2e9c0c.  v1:= 0I;
  #L2e9c0e.  v4:= v4 ^> v1 @kind long;
  #L2e9c10.  v6:= (`int`) v4 @kind l2i;
  #L2e9c12.  v4:= 1152921503533105152L;
  #L2e9c1c.  v4:= v4 ^& v2 @kind long;
  #L2e9c1e.  v1:= 30I;
  #L2e9c22.  v4:= v4 ^> v1 @kind long;
  #L2e9c24.  v1:= (`int`) v4 @kind l2i;
  #L2e9c26.  v4:= v10.`kotlinx.coroutines.internal.b0.g` @type ^`int`;
  #L2e9c2a.  v1:= v1 ^& v4 @kind int;
  #L2e9c2c.  v5:= v6 ^& v4 @kind int;
  #L2e9c30.  v7:= 0I;
  #L2e9c32.  if v1 != v5 then goto L2e9c38;
  #L2e9c36.  return v7 @kind object;
  #L2e9c38.  v1:= v10.`kotlinx.coroutines.internal.b0.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2e9c3c.  v4:= v4 ^& v6 @kind int;
  #L2e9c3e.  call temp:= `get`(v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2e9c44.  v8:= temp @kind object;
  #L2e9c46.  if v8 != 0 then goto L2e9c54;
  #L2e9c4a.  v0:= v10.`kotlinx.coroutines.internal.b0.f` @type ^`boolean` @kind boolean;
  #L2e9c4e.  if v0 == 0 then goto L2e9be4;
  #L2e9c52.  return v7 @kind object;
  #L2e9c54.  v1:= instanceof @variable v8 @type ^`kotlinx.coroutines.internal.a0` @kind boolean;
  #L2e9c58.  if v1 == 0 then goto L2e9c5e;
  #L2e9c5c.  return v7 @kind object;
  #L2e9c5e.  v1:= v6 + 1;
  #L2e9c62.  v4:= 1073741823I;
  #L2e9c68.  v9:= v1 ^& v4 @kind int;
  #L2e9c6c.  v1:= `@@kotlinx.coroutines.internal.b0.c` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L2e9c70.  call temp:= `b`(v0, v2, v9) @signature `Lkotlinx/coroutines/internal/z;.b:(JI)J` @kind virtual;
  #L2e9c76.  v4:= temp @kind wide;
  #L2e9c78.  v0:= v1 @kind object;
  #L2e9c7a.  v1:= v10 @kind object;
  #L2e9c7c.  call temp:= `compareAndSet`(v0, v1, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L2e9c82.  v0:= temp;
  #L2e9c84.  if v0 == 0 then goto L2e9c9a;
  #L2e9c88.  v0:= v10.`kotlinx.coroutines.internal.b0.h` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2e9c8c.  v1:= v10.`kotlinx.coroutines.internal.b0.g` @type ^`int`;
  #L2e9c90.  v1:= v1 ^& v6 @kind int;
  #L2e9c92.  call `set`(v0, v1, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L2e9c98.  return v8 @kind object;
  #L2e9c9a.  v0:= v10.`kotlinx.coroutines.internal.b0.f` @type ^`boolean` @kind boolean;
  #L2e9c9e.  if v0 != 0 then goto L2e9ca4;
  #L2e9ca2.  goto L2e9be4;
  #L2e9ca4.  v0:= v10 @kind object;
  #L2e9ca6.  call temp:= `k`(v0, v6, v9) @signature `Lkotlinx/coroutines/internal/b0;.k:(II)Lkotlinx/coroutines/internal/b0;` @kind direct;
  #L2e9cac.  v0:= temp @kind object;
  #L2e9cae.  if v0 != 0 then goto L2e9ca6;
  #L2e9cb2.  return v8 @kind object;
}
