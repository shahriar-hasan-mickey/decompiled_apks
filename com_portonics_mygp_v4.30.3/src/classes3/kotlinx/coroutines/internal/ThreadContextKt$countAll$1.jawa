record `kotlinx.coroutines.internal.ThreadContextKt$countAll$1` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
}
global `kotlinx.coroutines.internal.ThreadContextKt$countAll$1` `@@kotlinx.coroutines.internal.ThreadContextKt$countAll$1.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/ThreadContextKt$countAll$1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2eb2e8.  v0:= new `kotlinx.coroutines.internal.ThreadContextKt$countAll$1`;
  #L2eb2ec.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/ThreadContextKt$countAll$1;.<init>:()V` @kind direct;
  #L2eb2f2.  `@@kotlinx.coroutines.internal.ThreadContextKt$countAll$1.INSTANCE` @type ^`kotlinx.coroutines.internal.ThreadContextKt$countAll$1` := v0 @kind object;
  #L2eb2f6.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.ThreadContextKt$countAll$1` v1 @kind this) @signature `Lkotlinx/coroutines/internal/ThreadContextKt$countAll$1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2eb308.  v0:= 2I;
  #L2eb30a.  call `<init>`(v1, v0) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L2eb310.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.internal.ThreadContextKt$countAll$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadContextKt$countAll$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2eb278.  v2:= (`kotlin.coroutines.CoroutineContext$Element`) v2 @kind object;
  #L2eb27c.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/internal/ThreadContextKt$countAll$1;.invoke:(Ljava/lang/Object;Lkotlin/coroutines/CoroutineContext$Element;)Ljava/lang/Object;` @kind virtual;
  #L2eb282.  v1:= temp @kind object;
  #L2eb284.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.internal.ThreadContextKt$countAll$1` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.CoroutineContext$Element` v3 @kind object) @signature `Lkotlinx/coroutines/internal/ThreadContextKt$countAll$1;.invoke:(Ljava/lang/Object;Lkotlin/coroutines/CoroutineContext$Element;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2eb298.  v0:= instanceof @variable v3 @type ^`kotlinx.coroutines.y2` @kind boolean;
  #L2eb29c.  if v0 == 0 then goto L2eb2d4;
  #L2eb2a0.  v0:= instanceof @variable v2 @type ^`java.lang.Integer` @kind boolean;
  #L2eb2a4.  if v0 == 0 then goto L2eb2ae;
  #L2eb2a8.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L2eb2ac.  goto L2eb2b0;
  #L2eb2ae.  v2:= 0I;
  #L2eb2b0.  v0:= 1I;
  #L2eb2b2.  if v2 != 0 then goto L2eb2ba;
  #L2eb2b6.  v2:= 1I;
  #L2eb2b8.  goto L2eb2c2;
  #L2eb2ba.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2eb2c0.  v2:= temp;
  #L2eb2c2.  if v2 != 0 then goto L2eb2c8;
  #L2eb2c6.  goto L2eb2d2;
  #L2eb2c8.  v2:= v2 + v0 @kind int;
  #L2eb2ca.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2eb2d0.  v3:= temp @kind object;
  #L2eb2d2.  return v3 @kind object;
  #L2eb2d4.  return v2 @kind object;
}
