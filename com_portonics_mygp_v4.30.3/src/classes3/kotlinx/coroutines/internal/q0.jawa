record `kotlinx.coroutines.internal.q0` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `int` `kotlinx.coroutines.internal.q0._size` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `kotlinx.coroutines.internal.r0`[] `kotlinx.coroutines.internal.q0.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.q0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/q0;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2eba5c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2eba62.  v0:= 0I;
  #L2eba64.  v1.`kotlinx.coroutines.internal.q0._size` @type ^`int` := v0;
  #L2eba68.  return @kind void;
}
procedure `kotlinx.coroutines.internal.r0`[] `f`(`kotlinx.coroutines.internal.q0` v3 @kind this) @signature `Lkotlinx/coroutines/internal/q0;.f:()[Lkotlinx/coroutines/internal/r0;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2eba00.  v0:= v3.`kotlinx.coroutines.internal.q0.a` @type ^`kotlinx.coroutines.internal.r0`[] @kind object;
  #L2eba04.  if v0 != 0 then goto L2eba14;
  #L2eba08.  v0:= 4I;
  #L2eba0a.  v0:= new `kotlinx.coroutines.internal.r0`[v0];
  #L2eba0e.  v3.`kotlinx.coroutines.internal.q0.a` @type ^`kotlinx.coroutines.internal.r0`[] := v0 @kind object;
  #L2eba12.  goto L2eba48;
  #L2eba14.  call temp:= `c`(v3) @signature `Lkotlinx/coroutines/internal/q0;.c:()I` @kind virtual;
  #L2eba1a.  v1:= temp;
  #L2eba1c.  v2:= length @variable v0;
  #L2eba1e.  if v1 < v2 then goto L2eba48;
  #L2eba22.  call temp:= `c`(v3) @signature `Lkotlinx/coroutines/internal/q0;.c:()I` @kind virtual;
  #L2eba28.  v1:= temp;
  #L2eba2a.  v1:= v1 * 2;
  #L2eba2e.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L2eba34.  v0:= temp @kind object;
  #L2eba36.  v1:= "copyOf(this, newSize)" @kind object;
  #L2eba3a.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2eba40.  v0:= (`kotlinx.coroutines.internal.r0`[]) v0 @kind object;
  #L2eba44.  v3.`kotlinx.coroutines.internal.q0.a` @type ^`kotlinx.coroutines.internal.r0`[] := v0 @kind object;
  #L2eba48.  return v0 @kind object;
}
procedure `void` `j`(`kotlinx.coroutines.internal.q0` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/internal/q0;.j:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;

  #L2ebaf0.  v0.`kotlinx.coroutines.internal.q0._size` @type ^`int` := v1;
  #L2ebaf4.  return @kind void;
}
procedure `void` `k`(`kotlinx.coroutines.internal.q0` v5 @kind this, `int` v6 ) @signature `Lkotlinx/coroutines/internal/q0;.k:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2ebb08.  v0:= v6 * 2;
  #L2ebb0c.  v0:= v0 + 1;
  #L2ebb10.  call temp:= `c`(v5) @signature `Lkotlinx/coroutines/internal/q0;.c:()I` @kind virtual;
  #L2ebb16.  v1:= temp;
  #L2ebb18.  if v0 < v1 then goto L2ebb1e;
  #L2ebb1c.  return @kind void;
  #L2ebb1e.  v1:= v5.`kotlinx.coroutines.internal.q0.a` @type ^`kotlinx.coroutines.internal.r0`[] @kind object;
  #L2ebb22.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2ebb28.  v2:= v0 + 1;
  #L2ebb2c.  call temp:= `c`(v5) @signature `Lkotlinx/coroutines/internal/q0;.c:()I` @kind virtual;
  #L2ebb32.  v3:= temp;
  #L2ebb34.  if v2 >= v3 then goto L2ebb5e;
  #L2ebb38.  v3:= v1[v2] @kind object;
  #L2ebb3c.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2ebb42.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L2ebb46.  v4:= v1[v0] @kind object;
  #L2ebb4a.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2ebb50.  call temp:= `compareTo`(v3, v4) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L2ebb56.  v3:= temp;
  #L2ebb58.  if v3 >= 0 then goto L2ebb5e;
  #L2ebb5c.  v0:= v2;
  #L2ebb5e.  v2:= v1[v6] @kind object;
  #L2ebb62.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2ebb68.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L2ebb6c.  v1:= v1[v0] @kind object;
  #L2ebb70.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2ebb76.  call temp:= `compareTo`(v2, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L2ebb7c.  v1:= temp;
  #L2ebb7e.  if v1 > 0 then goto L2ebb84;
  #L2ebb82.  return @kind void;
  #L2ebb84.  call `m`(v5, v6, v0) @signature `Lkotlinx/coroutines/internal/q0;.m:(II)V` @kind direct;
  #L2ebb8a.  v6:= v0;
  #L2ebb8c.  goto L2ebb08;
}
procedure `void` `l`(`kotlinx.coroutines.internal.q0` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/internal/q0;.l:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ebba0.  if v4 > 0 then goto L2ebba6;
  #L2ebba4.  return @kind void;
  #L2ebba6.  v0:= v3.`kotlinx.coroutines.internal.q0.a` @type ^`kotlinx.coroutines.internal.r0`[] @kind object;
  #L2ebbaa.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2ebbb0.  v1:= v4 + -1;
  #L2ebbb4.  v1:= v1 / 2;
  #L2ebbb8.  v2:= v0[v1] @kind object;
  #L2ebbbc.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2ebbc2.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L2ebbc6.  v0:= v0[v4] @kind object;
  #L2ebbca.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2ebbd0.  call temp:= `compareTo`(v2, v0) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L2ebbd6.  v0:= temp;
  #L2ebbd8.  if v0 > 0 then goto L2ebbde;
  #L2ebbdc.  return @kind void;
  #L2ebbde.  call `m`(v3, v4, v1) @signature `Lkotlinx/coroutines/internal/q0;.m:(II)V` @kind direct;
  #L2ebbe4.  v4:= v1;
  #L2ebbe6.  goto L2ebba0;
}
procedure `void` `m`(`kotlinx.coroutines.internal.q0` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lkotlinx/coroutines/internal/q0;.m:(II)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ebbf8.  v0:= v3.`kotlinx.coroutines.internal.q0.a` @type ^`kotlinx.coroutines.internal.r0`[] @kind object;
  #L2ebbfc.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2ebc02.  v1:= v0[v5] @kind object;
  #L2ebc06.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2ebc0c.  v2:= v0[v4] @kind object;
  #L2ebc10.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2ebc16.  v0[v4]:= v1 @kind object;
  #L2ebc1a.  v0[v5]:= v2 @kind object;
  #L2ebc1e.  call `g`(v1, v4) @signature `Lkotlinx/coroutines/internal/r0;.g:(I)V` @kind interface;
  #L2ebc24.  call `g`(v2, v5) @signature `Lkotlinx/coroutines/internal/r0;.g:(I)V` @kind interface;
  #L2ebc2a.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.internal.q0` v3 @kind this, `kotlinx.coroutines.internal.r0` v4 @kind object) @signature `Lkotlinx/coroutines/internal/q0;.a:(Lkotlinx/coroutines/internal/r0;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2eba7c.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2eba82.  v0:= temp;
  #L2eba84.  if v0 == 0 then goto L2ebaac;
  #L2eba88.  call temp:= `b`(v4) @signature `Lkotlinx/coroutines/internal/r0;.b:()Lkotlinx/coroutines/internal/q0;` @kind interface;
  #L2eba8e.  v0:= temp @kind object;
  #L2eba90.  if v0 != 0 then goto L2eba98;
  #L2eba94.  v0:= 1I;
  #L2eba96.  goto L2eba9a;
  #L2eba98.  v0:= 0I;
  #L2eba9a.  if v0 == 0 then goto L2ebaa0;
  #L2eba9e.  goto L2ebaac;
  #L2ebaa0.  v4:= new `java.lang.AssertionError`;
  #L2ebaa4.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2ebaaa.  throw v4;
  #L2ebaac.  call `a`(v4, v3) @signature `Lkotlinx/coroutines/internal/r0;.a:(Lkotlinx/coroutines/internal/q0;)V` @kind interface;
  #L2ebab2.  call temp:= `f`(v3) @signature `Lkotlinx/coroutines/internal/q0;.f:()[Lkotlinx/coroutines/internal/r0;` @kind direct;
  #L2ebab8.  v0:= temp @kind object;
  #L2ebaba.  call temp:= `c`(v3) @signature `Lkotlinx/coroutines/internal/q0;.c:()I` @kind virtual;
  #L2ebac0.  v1:= temp;
  #L2ebac2.  v2:= v1 + 1;
  #L2ebac6.  call `j`(v3, v2) @signature `Lkotlinx/coroutines/internal/q0;.j:(I)V` @kind direct;
  #L2ebacc.  v0[v1]:= v4 @kind object;
  #L2ebad0.  call `g`(v4, v1) @signature `Lkotlinx/coroutines/internal/r0;.g:(I)V` @kind interface;
  #L2ebad6.  call `l`(v3, v1) @signature `Lkotlinx/coroutines/internal/q0;.l:(I)V` @kind direct;
  #L2ebadc.  return @kind void;
}
procedure `kotlinx.coroutines.internal.r0` `b`(`kotlinx.coroutines.internal.q0` v2 @kind this) @signature `Lkotlinx/coroutines/internal/q0;.b:()Lkotlinx/coroutines/internal/r0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2eb850.  v0:= v2.`kotlinx.coroutines.internal.q0.a` @type ^`kotlinx.coroutines.internal.r0`[] @kind object;
  #L2eb854.  if v0 != 0 then goto L2eb85c;
  #L2eb858.  v0:= 0I;
  #L2eb85a.  goto L2eb862;
  #L2eb85c.  v1:= 0I;
  #L2eb85e.  v0:= v0[v1] @kind object;
  #L2eb862.  return v0 @kind object;
}
procedure `int` `c`(`kotlinx.coroutines.internal.q0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/q0;.c:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2eb838.  v0:= v1.`kotlinx.coroutines.internal.q0._size` @type ^`int`;
  #L2eb83c.  return v0;
}
procedure `boolean` `d`(`kotlinx.coroutines.internal.q0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/q0;.d:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2eb7a4.  call temp:= `c`(v1) @signature `Lkotlinx/coroutines/internal/q0;.c:()I` @kind virtual;
  #L2eb7aa.  v0:= temp;
  #L2eb7ac.  if v0 != 0 then goto L2eb7b4;
  #L2eb7b0.  v0:= 1I;
  #L2eb7b2.  goto L2eb7b6;
  #L2eb7b4.  v0:= 0I;
  #L2eb7b6.  return v0;
}
procedure `kotlinx.coroutines.internal.r0` `e`(`kotlinx.coroutines.internal.q0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/q0;.e:()Lkotlinx/coroutines/internal/r0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2eb874.  @monitorenter v1
  #L2eb876.  call temp:= `b`(v1) @signature `Lkotlinx/coroutines/internal/q0;.b:()Lkotlinx/coroutines/internal/r0;` @kind virtual;
  #L2eb87c.  v0:= temp @kind object;
  #L2eb87e.  @monitorexit v1
  #L2eb880.  return v0 @kind object;
  #L2eb882.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2eb884.  @monitorexit v1
  #L2eb886.  throw v0;
  catch `java.lang.Throwable` @[L2eb876..L2eb87e] goto L2eb882;
}
procedure `boolean` `g`(`kotlinx.coroutines.internal.q0` v3 @kind this, `kotlinx.coroutines.internal.r0` v4 @kind object) @signature `Lkotlinx/coroutines/internal/q0;.g:(Lkotlinx/coroutines/internal/r0;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2eb7c8.  @monitorenter v3
  #L2eb7ca.  call temp:= `b`(v4) @signature `Lkotlinx/coroutines/internal/r0;.b:()Lkotlinx/coroutines/internal/q0;` @kind interface;
  #L2eb7d0.  v0:= temp @kind object;
  #L2eb7d2.  v1:= 1I;
  #L2eb7d4.  v2:= 0I;
  #L2eb7d6.  if v0 != 0 then goto L2eb7de;
  #L2eb7da.  v1:= 0I;
  #L2eb7dc.  goto L2eb810;
  #L2eb7de.  call temp:= `getIndex`(v4) @signature `Lkotlinx/coroutines/internal/r0;.getIndex:()I` @kind interface;
  #L2eb7e4.  v4:= temp;
  #L2eb7e6.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2eb7ec.  v0:= temp;
  #L2eb7ee.  if v0 == 0 then goto L2eb80a;
  #L2eb7f2.  if v4 < 0 then goto L2eb7f8;
  #L2eb7f6.  v2:= 1I;
  #L2eb7f8.  if v2 == 0 then goto L2eb7fe;
  #L2eb7fc.  goto L2eb80a;
  #L2eb7fe.  v4:= new `java.lang.AssertionError`;
  #L2eb802.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2eb808.  throw v4;
  #L2eb80a.  call temp:= `h`(v3, v4) @signature `Lkotlinx/coroutines/internal/q0;.h:(I)Lkotlinx/coroutines/internal/r0;` @kind virtual;
  #L2eb810.  @monitorexit v3
  #L2eb812.  return v1;
  #L2eb814.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2eb816.  @monitorexit v3
  #L2eb818.  throw v4;
  catch `java.lang.Throwable` @[L2eb7ca..L2eb810] goto L2eb814;
}
procedure `kotlinx.coroutines.internal.r0` `h`(`kotlinx.coroutines.internal.q0` v7 @kind this, `int` v8 ) @signature `Lkotlinx/coroutines/internal/q0;.h:(I)Lkotlinx/coroutines/internal/r0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2eb8a4.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2eb8aa.  v0:= temp;
  #L2eb8ac.  v1:= 0I;
  #L2eb8ae.  v2:= 1I;
  #L2eb8b0.  if v0 == 0 then goto L2eb8d8;
  #L2eb8b4.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/q0;.c:()I` @kind virtual;
  #L2eb8ba.  v0:= temp;
  #L2eb8bc.  if v0 <= 0 then goto L2eb8c4;
  #L2eb8c0.  v0:= 1I;
  #L2eb8c2.  goto L2eb8c6;
  #L2eb8c4.  v0:= 0I;
  #L2eb8c6.  if v0 == 0 then goto L2eb8cc;
  #L2eb8ca.  goto L2eb8d8;
  #L2eb8cc.  v8:= new `java.lang.AssertionError`;
  #L2eb8d0.  call `<init>`(v8) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2eb8d6.  throw v8;
  #L2eb8d8.  v0:= v7.`kotlinx.coroutines.internal.q0.a` @type ^`kotlinx.coroutines.internal.r0`[] @kind object;
  #L2eb8dc.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2eb8e2.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/q0;.c:()I` @kind virtual;
  #L2eb8e8.  v3:= temp;
  #L2eb8ea.  v4:= -1I;
  #L2eb8ec.  v3:= v3 + v4 @kind int;
  #L2eb8ee.  call `j`(v7, v3) @signature `Lkotlinx/coroutines/internal/q0;.j:(I)V` @kind direct;
  #L2eb8f4.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/q0;.c:()I` @kind virtual;
  #L2eb8fa.  v3:= temp;
  #L2eb8fc.  if v8 >= v3 then goto L2eb952;
  #L2eb900.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/q0;.c:()I` @kind virtual;
  #L2eb906.  v3:= temp;
  #L2eb908.  call `m`(v7, v8, v3) @signature `Lkotlinx/coroutines/internal/q0;.m:(II)V` @kind direct;
  #L2eb90e.  v3:= v8 + -1;
  #L2eb912.  v3:= v3 / 2;
  #L2eb916.  if v8 <= 0 then goto L2eb94c;
  #L2eb91a.  v5:= v0[v8] @kind object;
  #L2eb91e.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2eb924.  v5:= (`java.lang.Comparable`) v5 @kind object;
  #L2eb928.  v6:= v0[v3] @kind object;
  #L2eb92c.  call `checkNotNull`(v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2eb932.  call temp:= `compareTo`(v5, v6) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L2eb938.  v5:= temp;
  #L2eb93a.  if v5 >= 0 then goto L2eb94c;
  #L2eb93e.  call `m`(v7, v8, v3) @signature `Lkotlinx/coroutines/internal/q0;.m:(II)V` @kind direct;
  #L2eb944.  call `l`(v7, v3) @signature `Lkotlinx/coroutines/internal/q0;.l:(I)V` @kind direct;
  #L2eb94a.  goto L2eb952;
  #L2eb94c.  call `k`(v7, v8) @signature `Lkotlinx/coroutines/internal/q0;.k:(I)V` @kind direct;
  #L2eb952.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/q0;.c:()I` @kind virtual;
  #L2eb958.  v8:= temp;
  #L2eb95a.  v8:= v0[v8] @kind object;
  #L2eb95e.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2eb964.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2eb96a.  v3:= temp;
  #L2eb96c.  if v3 == 0 then goto L2eb990;
  #L2eb970.  call temp:= `b`(v8) @signature `Lkotlinx/coroutines/internal/r0;.b:()Lkotlinx/coroutines/internal/q0;` @kind interface;
  #L2eb976.  v3:= temp @kind object;
  #L2eb978.  if v3 != v7 then goto L2eb97e;
  #L2eb97c.  v1:= 1I;
  #L2eb97e.  if v1 == 0 then goto L2eb984;
  #L2eb982.  goto L2eb990;
  #L2eb984.  v8:= new `java.lang.AssertionError`;
  #L2eb988.  call `<init>`(v8) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2eb98e.  throw v8;
  #L2eb990.  v1:= 0I;
  #L2eb992.  call `a`(v8, v1) @signature `Lkotlinx/coroutines/internal/r0;.a:(Lkotlinx/coroutines/internal/q0;)V` @kind interface;
  #L2eb998.  call `g`(v8, v4) @signature `Lkotlinx/coroutines/internal/r0;.g:(I)V` @kind interface;
  #L2eb99e.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/q0;.c:()I` @kind virtual;
  #L2eb9a4.  v2:= temp;
  #L2eb9a6.  v0[v2]:= v1 @kind object;
  #L2eb9aa.  return v8 @kind object;
}
procedure `kotlinx.coroutines.internal.r0` `i`(`kotlinx.coroutines.internal.q0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/q0;.i:()Lkotlinx/coroutines/internal/r0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2eb9bc.  @monitorenter v1
  #L2eb9be.  call temp:= `c`(v1) @signature `Lkotlinx/coroutines/internal/q0;.c:()I` @kind virtual;
  #L2eb9c4.  v0:= temp;
  #L2eb9c6.  if v0 <= 0 then goto L2eb9d6;
  #L2eb9ca.  v0:= 0I;
  #L2eb9cc.  call temp:= `h`(v1, v0) @signature `Lkotlinx/coroutines/internal/q0;.h:(I)Lkotlinx/coroutines/internal/r0;` @kind virtual;
  #L2eb9d2.  v0:= temp @kind object;
  #L2eb9d4.  goto L2eb9d8;
  #L2eb9d6.  v0:= 0I;
  #L2eb9d8.  @monitorexit v1
  #L2eb9da.  return v0 @kind object;
  #L2eb9dc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2eb9de.  @monitorexit v1
  #L2eb9e0.  throw v0;
  catch `java.lang.Throwable` @[L2eb9be..L2eb9d4] goto L2eb9dc;
}
