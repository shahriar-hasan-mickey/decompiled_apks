record `kotlinx.coroutines.internal.t` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.internal.b` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.t` v0 @kind this) @signature `Lkotlinx/coroutines/internal/t;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2e8ea8.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/b;.<init>:()V` @kind direct;
  #L2e8eae.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.internal.t` v4 @kind this, `kotlinx.coroutines.internal.d` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lkotlinx/coroutines/internal/t;.a:(Lkotlinx/coroutines/internal/d;Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e8ec0.  v0:= 1I;
  #L2e8ec2.  if v6 != 0 then goto L2e8eca;
  #L2e8ec6.  v6:= 1I;
  #L2e8ec8.  goto L2e8ecc;
  #L2e8eca.  v6:= 0I;
  #L2e8ecc.  call temp:= `h`(v4) @signature `Lkotlinx/coroutines/internal/t;.h:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L2e8ed2.  v1:= temp @kind object;
  #L2e8ed4.  if v1 != 0 then goto L2e8efc;
  #L2e8ed8.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e8ede.  v5:= temp;
  #L2e8ee0.  if v5 == 0 then goto L2e8efa;
  #L2e8ee4.  v5:= v6 ^~ 1;
  #L2e8ee8.  if v5 == 0 then goto L2e8eee;
  #L2e8eec.  goto L2e8efa;
  #L2e8eee.  v5:= new `java.lang.AssertionError`;
  #L2e8ef2.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e8ef8.  throw v5;
  #L2e8efa.  return @kind void;
  #L2e8efc.  call temp:= `i`(v4) @signature `Lkotlinx/coroutines/internal/t;.i:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L2e8f02.  v2:= temp @kind object;
  #L2e8f04.  if v2 != 0 then goto L2e8f2c;
  #L2e8f08.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e8f0e.  v5:= temp;
  #L2e8f10.  if v5 == 0 then goto L2e8f2a;
  #L2e8f14.  v5:= v6 ^~ 1;
  #L2e8f18.  if v5 == 0 then goto L2e8f1e;
  #L2e8f1c.  goto L2e8f2a;
  #L2e8f1e.  v5:= new `java.lang.AssertionError`;
  #L2e8f22.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e8f28.  throw v5;
  #L2e8f2a.  return @kind void;
  #L2e8f2c.  if v6 == 0 then goto L2e8f3a;
  #L2e8f30.  call temp:= `n`(v4, v1, v2) @signature `Lkotlinx/coroutines/internal/t;.n:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @kind virtual;
  #L2e8f36.  v0:= temp @kind object;
  #L2e8f38.  goto L2e8f3c;
  #L2e8f3a.  v0:= v2 @kind object;
  #L2e8f3c.  v3:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e8f40.  call temp:= `compareAndSet`(v3, v1, v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e8f46.  v5:= temp;
  #L2e8f48.  if v5 == 0 then goto L2e8f56;
  #L2e8f4c.  if v6 == 0 then goto L2e8f56;
  #L2e8f50.  call `f`(v4, v1, v2) @signature `Lkotlinx/coroutines/internal/t;.f:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind virtual;
  #L2e8f56.  return @kind void;
}
procedure `java.lang.Object` `c`(`kotlinx.coroutines.internal.t` v6 @kind this, `kotlinx.coroutines.internal.d` v7 @kind object) @signature `Lkotlinx/coroutines/internal/t;.c:(Lkotlinx/coroutines/internal/d;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2e8db0.  call temp:= `m`(v6, v7) @signature `Lkotlinx/coroutines/internal/t;.m:(Lkotlinx/coroutines/internal/f0;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L2e8db6.  v0:= temp @kind object;
  #L2e8db8.  if v0 != 0 then goto L2e8dc2;
  #L2e8dbc.  v7:= `@@kotlinx.coroutines.internal.c.b` @type ^`java.lang.Object` @kind object;
  #L2e8dc0.  return v7 @kind object;
  #L2e8dc2.  v1:= v0.`kotlinx.coroutines.internal.LockFreeLinkedListNode._next` @type ^`java.lang.Object` @kind object;
  #L2e8dc6.  v2:= 0I;
  #L2e8dc8.  if v1 != v7 then goto L2e8dce;
  #L2e8dcc.  return v2 @kind object;
  #L2e8dce.  call temp:= `h`(v7) @signature `Lkotlinx/coroutines/internal/d;.h:()Z` @kind virtual;
  #L2e8dd4.  v3:= temp;
  #L2e8dd6.  if v3 == 0 then goto L2e8ddc;
  #L2e8dda.  return v2 @kind object;
  #L2e8ddc.  v3:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.f0` @kind boolean;
  #L2e8de0.  if v3 == 0 then goto L2e8e02;
  #L2e8de4.  v1:= (`kotlinx.coroutines.internal.f0`) v1 @kind object;
  #L2e8de8.  call temp:= `b`(v7, v1) @signature `Lkotlinx/coroutines/internal/f0;.b:(Lkotlinx/coroutines/internal/f0;)Z` @kind virtual;
  #L2e8dee.  v2:= temp;
  #L2e8df0.  if v2 == 0 then goto L2e8dfa;
  #L2e8df4.  v7:= `@@kotlinx.coroutines.internal.c.b` @type ^`java.lang.Object` @kind object;
  #L2e8df8.  return v7 @kind object;
  #L2e8dfa.  call temp:= `c`(v1, v0) @signature `Lkotlinx/coroutines/internal/f0;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2e8e00.  goto L2e8db0;
  #L2e8e02.  call temp:= `e`(v6, v0) @signature `Lkotlinx/coroutines/internal/t;.e:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @kind virtual;
  #L2e8e08.  v3:= temp @kind object;
  #L2e8e0a.  if v3 == 0 then goto L2e8e10;
  #L2e8e0e.  return v3 @kind object;
  #L2e8e10.  call temp:= `l`(v6, v0, v1) @signature `Lkotlinx/coroutines/internal/t;.l:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Ljava/lang/Object;)Z` @kind virtual;
  #L2e8e16.  v3:= temp;
  #L2e8e18.  if v3 == 0 then goto L2e8e1e;
  #L2e8e1c.  goto L2e8db0;
  #L2e8e1e.  v3:= new `kotlinx.coroutines.internal.v`;
  #L2e8e22.  v4:= v1 @kind object;
  #L2e8e24.  v4:= (`kotlinx.coroutines.internal.LockFreeLinkedListNode`) v4 @kind object;
  #L2e8e28.  call `<init>`(v3, v0, v4, v6) @signature `Lkotlinx/coroutines/internal/v;.<init>:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/t;)V` @kind direct;
  #L2e8e2e.  v4:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e8e32.  call temp:= `compareAndSet`(v4, v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e8e38.  v4:= temp;
  #L2e8e3a.  if v4 == 0 then goto L2e8db0;
  #L2e8e3e.  call temp:= `c`(v3, v0) @signature `Lkotlinx/coroutines/internal/v;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2e8e44.  v4:= temp @kind object;
  #L2e8e46.  v5:= `@@kotlinx.coroutines.internal.x.a` @type ^`java.lang.Object` @kind object;
  #L2e8e4a.  if v4 != v5 then goto L2e8e50;
  #L2e8e4e.  goto L2e8db0;
  #L2e8e50.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2e8e56.  v7:= temp;
  #L2e8e58.  if v7 == 0 then goto L2e8e78;
  #L2e8e5c.  if v4 != 0 then goto L2e8e64;
  #L2e8e60.  v7:= 1I;
  #L2e8e62.  goto L2e8e66;
  #L2e8e64.  v7:= 0I;
  #L2e8e66.  if v7 == 0 then goto L2e8e6c;
  #L2e8e6a.  goto L2e8e78;
  #L2e8e6c.  v7:= new `java.lang.AssertionError`;
  #L2e8e70.  call `<init>`(v7) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e8e76.  throw v7;
  #L2e8e78.  return v2 @kind object;
  #L2e8e7a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e8e7c.  v2:= `@@kotlinx.coroutines.internal.LockFreeLinkedListNode.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2e8e80.  call temp:= `compareAndSet`(v2, v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2e8e86.  goto L2e8e8a;
  #L2e8e88.  throw v7;
  #L2e8e8a.  goto L2e8e88;
  catch `java.lang.Throwable` @[L2e8e3e..L2e8e78] goto L2e8e7a;
}
procedure `java.lang.Object` `e`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object) @signature `Lkotlinx/coroutines/internal/t;.e:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `f`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/t;.f:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `g`(`kotlinx.coroutines.internal.v` v0 @kind object) @signature `Lkotlinx/coroutines/internal/t;.g:(Lkotlinx/coroutines/internal/v;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `h`() @signature `Lkotlinx/coroutines/internal/t;.h:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `i`() @signature `Lkotlinx/coroutines/internal/t;.i:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `j`(`kotlinx.coroutines.internal.t` v0 @kind this, `kotlinx.coroutines.internal.v` v1 @kind object) @signature `Lkotlinx/coroutines/internal/t;.j:(Lkotlinx/coroutines/internal/v;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L2e8d94.  call `g`(v0, v1) @signature `Lkotlinx/coroutines/internal/t;.g:(Lkotlinx/coroutines/internal/v;)V` @kind virtual;
  #L2e8d9a.  v1:= 0I;
  #L2e8d9c.  return v1 @kind object;
}
procedure `void` `k`(`kotlinx.coroutines.internal.t` v0 @kind this, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/t;.k:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @AccessFlag PUBLIC {
    temp;

  #L2e8f68.  return @kind void;
}
procedure `boolean` `l`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/internal/t;.l:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Ljava/lang/Object;)Z` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `kotlinx.coroutines.internal.LockFreeLinkedListNode` `m`(`kotlinx.coroutines.internal.f0` v0 @kind object) @signature `Lkotlinx/coroutines/internal/t;.m:(Lkotlinx/coroutines/internal/f0;)Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `n`(`kotlinx.coroutines.internal.LockFreeLinkedListNode` v0 @kind object, `kotlinx.coroutines.internal.LockFreeLinkedListNode` v1 @kind object) @signature `Lkotlinx/coroutines/internal/t;.n:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
