record `kotlinx.coroutines.internal.t0` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.internal.i` @kind class {
}
global `kotlinx.coroutines.internal.t0` `@@kotlinx.coroutines.internal.t0.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.locks.ReentrantReadWriteLock` `@@kotlinx.coroutines.internal.t0.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.WeakHashMap` `@@kotlinx.coroutines.internal.t0.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/t0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ebe10.  v0:= new `kotlinx.coroutines.internal.t0`;
  #L2ebe14.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/t0;.<init>:()V` @kind direct;
  #L2ebe1a.  `@@kotlinx.coroutines.internal.t0.a` @type ^`kotlinx.coroutines.internal.t0` := v0 @kind object;
  #L2ebe1e.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L2ebe22.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L2ebe28.  `@@kotlinx.coroutines.internal.t0.b` @type ^`java.util.concurrent.locks.ReentrantReadWriteLock` := v0 @kind object;
  #L2ebe2c.  v0:= new `java.util.WeakHashMap`;
  #L2ebe30.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L2ebe36.  `@@kotlinx.coroutines.internal.t0.c` @type ^`java.util.WeakHashMap` := v0 @kind object;
  #L2ebe3a.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.t0` v0 @kind this) @signature `Lkotlinx/coroutines/internal/t0;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2ebe4c.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/i;.<init>:()V` @kind direct;
  #L2ebe52.  return @kind void;
}
procedure `kotlin.jvm.functions.Function1` `a`(`kotlinx.coroutines.internal.t0` v6 @kind this, `java.lang.Class` v7 @kind object) @signature `Lkotlinx/coroutines/internal/t0;.a:(Ljava/lang/Class;)Lkotlin/jvm/functions/Function1;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2ebcfc.  v0:= `@@kotlinx.coroutines.internal.t0.b` @type ^`java.util.concurrent.locks.ReentrantReadWriteLock` @kind object;
  #L2ebd00.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;` @kind virtual;
  #L2ebd06.  v1:= temp @kind object;
  #L2ebd08.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L2ebd0e.  v2:= `@@kotlinx.coroutines.internal.t0.c` @type ^`java.util.WeakHashMap` @kind object;
  #L2ebd12.  call temp:= `get`(v2, v7) @signature `Ljava/util/WeakHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2ebd18.  v2:= temp @kind object;
  #L2ebd1a.  v2:= (`kotlin.jvm.functions.Function1`) v2 @kind object;
  #L2ebd1e.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L2ebd24.  if v2 != 0 then goto L2ebdd6;
  #L2ebd28.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;` @kind virtual;
  #L2ebd2e.  v1:= temp @kind object;
  #L2ebd30.  call temp:= `getWriteHoldCount`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.getWriteHoldCount:()I` @kind virtual;
  #L2ebd36.  v2:= temp;
  #L2ebd38.  v3:= 0I;
  #L2ebd3a.  if v2 != 0 then goto L2ebd48;
  #L2ebd3e.  call temp:= `getReadHoldCount`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.getReadHoldCount:()I` @kind virtual;
  #L2ebd44.  v2:= temp;
  #L2ebd46.  goto L2ebd4a;
  #L2ebd48.  v2:= 0I;
  #L2ebd4a.  v4:= 0I;
  #L2ebd4c.  if v4 >= v2 then goto L2ebd5c;
  #L2ebd50.  v4:= v4 + 1;
  #L2ebd54.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L2ebd5a.  goto L2ebd4c;
  #L2ebd5c.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;` @kind virtual;
  #L2ebd62.  v0:= temp @kind object;
  #L2ebd64.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.lock:()V` @kind virtual;
  #L2ebd6a.  v4:= `@@kotlinx.coroutines.internal.t0.c` @type ^`java.util.WeakHashMap` @kind object;
  #L2ebd6e.  call temp:= `get`(v4, v7) @signature `Ljava/util/WeakHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2ebd74.  v5:= temp @kind object;
  #L2ebd76.  v5:= (`kotlin.jvm.functions.Function1`) v5 @kind object;
  #L2ebd7a.  if v5 != 0 then goto L2ebda4;
  #L2ebd7e.  call temp:= `a`(v7) @signature `Lkotlinx/coroutines/internal/ExceptionsConstructorKt;.a:(Ljava/lang/Class;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L2ebd84.  v5:= temp @kind object;
  #L2ebd86.  call temp:= `put`(v4, v7, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2ebd8c.  if v3 >= v2 then goto L2ebd9c;
  #L2ebd90.  v3:= v3 + 1;
  #L2ebd94.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L2ebd9a.  goto L2ebd8c;
  #L2ebd9c.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L2ebda2.  return v5 @kind object;
  #L2ebda4.  if v3 >= v2 then goto L2ebdb4;
  #L2ebda8.  v3:= v3 + 1;
  #L2ebdac.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L2ebdb2.  goto L2ebda4;
  #L2ebdb4.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L2ebdba.  return v5 @kind object;
  #L2ebdbc.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ebdbe.  if v3 >= v2 then goto L2ebdce;
  #L2ebdc2.  v3:= v3 + 1;
  #L2ebdc6.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L2ebdcc.  goto L2ebdbe;
  #L2ebdce.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L2ebdd4.  throw v7;
  #L2ebdd6.  return v2 @kind object;
  #L2ebdd8.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ebdda.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L2ebde0.  goto L2ebde4;
  #L2ebde2.  throw v7;
  #L2ebde4.  goto L2ebde2;
  catch `java.lang.Throwable` @[L2ebd0e..L2ebd1e] goto L2ebdd8;
  catch `java.lang.Throwable` @[L2ebd6a..L2ebd8c] goto L2ebdbc;
}
