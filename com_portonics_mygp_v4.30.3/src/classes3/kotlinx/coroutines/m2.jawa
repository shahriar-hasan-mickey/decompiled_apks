record `kotlinx.coroutines.m2` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.CoroutineDispatcher` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.m2` v0 @kind this) @signature `Lkotlinx/coroutines/m2;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2d0114.  call `<init>`(v0) @signature `Lkotlinx/coroutines/CoroutineDispatcher;.<init>:()V` @kind direct;
  #L2d011a.  return @kind void;
}
procedure `kotlinx.coroutines.m2` `R0`() @signature `Lkotlinx/coroutines/m2;.R0:()Lkotlinx/coroutines/m2;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `S0`(`kotlinx.coroutines.m2` v2 @kind this) @signature `Lkotlinx/coroutines/m2;.S0:()Ljava/lang/String;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L2d00c8.  call temp:= `c`() @signature `Lkotlinx/coroutines/x0;.c:()Lkotlinx/coroutines/m2;` @kind static;
  #L2d00ce.  v0:= temp @kind object;
  #L2d00d0.  if v2 != v0 then goto L2d00da;
  #L2d00d4.  v0:= "Dispatchers.Main" @kind object;
  #L2d00d8.  return v0 @kind object;
  #L2d00da.  v1:= 0I;
  #L2d00dc.  call temp:= `R0`(v0) @signature `Lkotlinx/coroutines/m2;.R0:()Lkotlinx/coroutines/m2;` @kind virtual;
  #L2d00e2.  v0:= temp @kind object;
  #L2d00e4.  goto L2d00e8;
  #L2d00e6.  v0:= v1 @kind object;
  #L2d00e8.  if v2 != v0 then goto L2d00f2;
  #L2d00ec.  v0:= "Dispatchers.Main.immediate" @kind object;
  #L2d00f0.  return v0 @kind object;
  #L2d00f2.  return v1 @kind object;
  catch `java.lang.UnsupportedOperationException` @[L2d00dc..L2d00e4] goto L2d00e6;
}
