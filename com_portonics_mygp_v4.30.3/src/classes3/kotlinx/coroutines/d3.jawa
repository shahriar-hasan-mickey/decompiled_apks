record `kotlinx.coroutines.d3` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.CoroutineDispatcher` @kind class {
}
global `kotlinx.coroutines.d3` `@@kotlinx.coroutines.d3.c` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/d3;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2d0b04.  v0:= new `kotlinx.coroutines.d3`;
  #L2d0b08.  call `<init>`(v0) @signature `Lkotlinx/coroutines/d3;.<init>:()V` @kind direct;
  #L2d0b0e.  `@@kotlinx.coroutines.d3.c` @type ^`kotlinx.coroutines.d3` := v0 @kind object;
  #L2d0b12.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.d3` v0 @kind this) @signature `Lkotlinx/coroutines/d3;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2d0b24.  call `<init>`(v0) @signature `Lkotlinx/coroutines/CoroutineDispatcher;.<init>:()V` @kind direct;
  #L2d0b2a.  return @kind void;
}
procedure `void` `N0`(`kotlinx.coroutines.d3` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `java.lang.Runnable` v2 @kind object) @signature `Lkotlinx/coroutines/d3;.N0:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;

  #L2d0b3c.  v2:= `@@kotlinx.coroutines.h3.b` @type ^`kotlinx.coroutines.g3` @kind object;
  #L2d0b40.  call temp:= `get`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L2d0b46.  v1:= temp @kind object;
  #L2d0b48.  v1:= (`kotlinx.coroutines.h3`) v1 @kind object;
  #L2d0b4c.  if v1 == 0 then goto L2d0b58;
  #L2d0b50.  v2:= 1I;
  #L2d0b52.  v1.`kotlinx.coroutines.h3.c` @type ^`boolean` := v2 @kind boolean;
  #L2d0b56.  return @kind void;
  #L2d0b58.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2d0b5c.  v2:= "Dispatchers.Unconfined.dispatch function can only be used by the yield function. If you wrap Unconfined dispatcher in your code, make sure you properly delegate isDispatchNeeded and dispatch calls." @kind object;
  #L2d0b60.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d0b66.  throw v1;
}
procedure `boolean` `P0`(`kotlinx.coroutines.d3` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object) @signature `Lkotlinx/coroutines/d3;.P0:(Lkotlin/coroutines/CoroutineContext;)Z` @AccessFlag PUBLIC {
    temp;

  #L2d0ad8.  v1:= 0I;
  #L2d0ada.  return v1;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.d3` v1 @kind this) @signature `Lkotlinx/coroutines/d3;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d0aec.  v0:= "Dispatchers.Unconfined" @kind object;
  #L2d0af0.  return v0 @kind object;
}
