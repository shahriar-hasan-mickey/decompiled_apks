record `kotlinx.coroutines.CoroutineContextKt$foldCopies$1` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
}
global `kotlinx.coroutines.CoroutineContextKt$foldCopies$1` `@@kotlinx.coroutines.CoroutineContextKt$foldCopies$1.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/CoroutineContextKt$foldCopies$1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2cba10.  v0:= new `kotlinx.coroutines.CoroutineContextKt$foldCopies$1`;
  #L2cba14.  call `<init>`(v0) @signature `Lkotlinx/coroutines/CoroutineContextKt$foldCopies$1;.<init>:()V` @kind direct;
  #L2cba1a.  `@@kotlinx.coroutines.CoroutineContextKt$foldCopies$1.INSTANCE` @type ^`kotlinx.coroutines.CoroutineContextKt$foldCopies$1` := v0 @kind object;
  #L2cba1e.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.CoroutineContextKt$foldCopies$1` v1 @kind this) @signature `Lkotlinx/coroutines/CoroutineContextKt$foldCopies$1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2cba30.  v0:= 2I;
  #L2cba32.  call `<init>`(v1, v0) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L2cba38.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.CoroutineContextKt$foldCopies$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/CoroutineContextKt$foldCopies$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2cb9d0.  v1:= (`kotlin.coroutines.CoroutineContext`) v1 @kind object;
  #L2cb9d4.  v2:= (`kotlin.coroutines.CoroutineContext$Element`) v2 @kind object;
  #L2cb9d8.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/CoroutineContextKt$foldCopies$1;.invoke:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext$Element;)Lkotlin/coroutines/CoroutineContext;` @kind virtual;
  #L2cb9de.  v1:= temp @kind object;
  #L2cb9e0.  return v1 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `invoke`(`kotlinx.coroutines.CoroutineContextKt$foldCopies$1` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `kotlin.coroutines.CoroutineContext$Element` v2 @kind object) @signature `Lkotlinx/coroutines/CoroutineContextKt$foldCopies$1;.invoke:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext$Element;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2cb9f4.  call temp:= `plus`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2cb9fa.  v1:= temp @kind object;
  #L2cb9fc.  return v1 @kind object;
}
