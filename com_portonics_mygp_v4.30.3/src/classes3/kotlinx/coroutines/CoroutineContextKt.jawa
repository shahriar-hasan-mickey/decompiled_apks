record `kotlinx.coroutines.CoroutineContextKt` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `kotlin.coroutines.CoroutineContext` `a`(`kotlin.coroutines.CoroutineContext` v3 @kind object, `kotlin.coroutines.CoroutineContext` v4 @kind object, `boolean` v5 ) @signature `Lkotlinx/coroutines/CoroutineContextKt;.a:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;Z)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2cbbf0.  call temp:= `c`(v3) @signature `Lkotlinx/coroutines/CoroutineContextKt;.c:(Lkotlin/coroutines/CoroutineContext;)Z` @kind static;
  #L2cbbf6.  v0:= temp;
  #L2cbbf8.  call temp:= `c`(v4) @signature `Lkotlinx/coroutines/CoroutineContextKt;.c:(Lkotlin/coroutines/CoroutineContext;)Z` @kind static;
  #L2cbbfe.  v1:= temp;
  #L2cbc00.  if v0 != 0 then goto L2cbc12;
  #L2cbc04.  if v1 != 0 then goto L2cbc12;
  #L2cbc08.  call temp:= `plus`(v3, v4) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2cbc0e.  v3:= temp @kind object;
  #L2cbc10.  return v3 @kind object;
  #L2cbc12.  v0:= new `kotlin.jvm.internal.Ref$ObjectRef`;
  #L2cbc16.  call `<init>`(v0) @signature `Lkotlin/jvm/internal/Ref$ObjectRef;.<init>:()V` @kind direct;
  #L2cbc1c.  v0.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` := v4 @kind object;
  #L2cbc20.  v4:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L2cbc24.  v2:= new `kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1`;
  #L2cbc28.  call `<init>`(v2, v0, v5) @signature `Lkotlinx/coroutines/CoroutineContextKt$foldCopies$folded$1;.<init>:(Lkotlin/jvm/internal/Ref$ObjectRef;Z)V` @kind direct;
  #L2cbc2e.  call temp:= `fold`(v3, v4, v2) @signature `Lkotlin/coroutines/CoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind interface;
  #L2cbc34.  v3:= temp @kind object;
  #L2cbc36.  v3:= (`kotlin.coroutines.CoroutineContext`) v3 @kind object;
  #L2cbc3a.  if v1 == 0 then goto L2cbc56;
  #L2cbc3e.  v5:= v0.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` @kind object;
  #L2cbc42.  v5:= (`kotlin.coroutines.CoroutineContext`) v5 @kind object;
  #L2cbc46.  v1:= `@@kotlinx.coroutines.CoroutineContextKt$foldCopies$1.INSTANCE` @type ^`kotlinx.coroutines.CoroutineContextKt$foldCopies$1` @kind object;
  #L2cbc4a.  call temp:= `fold`(v5, v4, v1) @signature `Lkotlin/coroutines/CoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind interface;
  #L2cbc50.  v4:= temp @kind object;
  #L2cbc52.  v0.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` := v4 @kind object;
  #L2cbc56.  v4:= v0.`kotlin.jvm.internal.Ref$ObjectRef.element` @type ^`java.lang.Object` @kind object;
  #L2cbc5a.  v4:= (`kotlin.coroutines.CoroutineContext`) v4 @kind object;
  #L2cbc5e.  call temp:= `plus`(v3, v4) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2cbc64.  v3:= temp @kind object;
  #L2cbc66.  return v3 @kind object;
}
procedure `java.lang.String` `b`(`kotlin.coroutines.CoroutineContext` v3 @kind object) @signature `Lkotlinx/coroutines/CoroutineContextKt;.b:(Lkotlin/coroutines/CoroutineContext;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2cbb6c.  call temp:= `c`() @signature `Lkotlinx/coroutines/o0;.c:()Z` @kind static;
  #L2cbb72.  v0:= temp;
  #L2cbb74.  v1:= 0I;
  #L2cbb76.  if v0 != 0 then goto L2cbb7c;
  #L2cbb7a.  return v1 @kind object;
  #L2cbb7c.  v0:= `@@kotlinx.coroutines.j0.b` @type ^`kotlinx.coroutines.i0` @kind object;
  #L2cbb80.  call temp:= `get`(v3, v0) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L2cbb86.  v0:= temp @kind object;
  #L2cbb88.  v0:= (`kotlinx.coroutines.j0`) v0 @kind object;
  #L2cbb8c.  if v0 != 0 then goto L2cbb92;
  #L2cbb90.  return v1 @kind object;
  #L2cbb92.  v2:= `@@kotlinx.coroutines.l0.b` @type ^`kotlinx.coroutines.k0` @kind object;
  #L2cbb96.  call temp:= `get`(v3, v2) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L2cbb9c.  v3:= temp @kind object;
  #L2cbb9e.  v3:= (`kotlinx.coroutines.l0`) v3 @kind object;
  #L2cbba2.  if v3 != 0 then goto L2cbbdc;
  #L2cbba6.  v3:= new `java.lang.StringBuilder`;
  #L2cbbaa.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2cbbb0.  v1:= "coroutine" @kind object;
  #L2cbbb4.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cbbba.  v1:= 35I;
  #L2cbbbe.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cbbc4.  call temp:= `N0`(v0) @signature `Lkotlinx/coroutines/j0;.N0:()J` @kind virtual;
  #L2cbbca.  v0:= temp @kind wide;
  #L2cbbcc.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cbbd2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2cbbd8.  v3:= temp @kind object;
  #L2cbbda.  return v3 @kind object;
  #L2cbbdc.  throw v1;
}
procedure `boolean` `c`(`kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlinx/coroutines/CoroutineContextKt;.c:(Lkotlin/coroutines/CoroutineContext;)Z` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2cbb3c.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L2cbb40.  v1:= `@@kotlinx.coroutines.CoroutineContextKt$hasCopyableElements$1.INSTANCE` @type ^`kotlinx.coroutines.CoroutineContextKt$hasCopyableElements$1` @kind object;
  #L2cbb44.  call temp:= `fold`(v2, v0, v1) @signature `Lkotlin/coroutines/CoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind interface;
  #L2cbb4a.  v2:= temp @kind object;
  #L2cbb4c.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L2cbb50.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L2cbb56.  v2:= temp;
  #L2cbb58.  return v2;
}
procedure `kotlin.coroutines.CoroutineContext` `d`(`kotlin.coroutines.CoroutineContext` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlinx/coroutines/CoroutineContextKt;.d:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2cbc78.  call temp:= `c`(v2) @signature `Lkotlinx/coroutines/CoroutineContextKt;.c:(Lkotlin/coroutines/CoroutineContext;)Z` @kind static;
  #L2cbc7e.  v0:= temp;
  #L2cbc80.  if v0 != 0 then goto L2cbc8e;
  #L2cbc84.  call temp:= `plus`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2cbc8a.  v1:= temp @kind object;
  #L2cbc8c.  return v1 @kind object;
  #L2cbc8e.  v0:= 0I;
  #L2cbc90.  call temp:= `a`(v1, v2, v0) @signature `Lkotlinx/coroutines/CoroutineContextKt;.a:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;Z)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L2cbc96.  v1:= temp @kind object;
  #L2cbc98.  return v1 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `e`(`kotlinx.coroutines.m0` v2 @kind object, `kotlin.coroutines.CoroutineContext` v3 @kind object) @signature `Lkotlinx/coroutines/CoroutineContextKt;.e:(Lkotlinx/coroutines/m0;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2cbcac.  call temp:= `v`(v2) @signature `Lkotlinx/coroutines/m0;.v:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2cbcb2.  v2:= temp @kind object;
  #L2cbcb4.  v0:= 1I;
  #L2cbcb6.  call temp:= `a`(v2, v3, v0) @signature `Lkotlinx/coroutines/CoroutineContextKt;.a:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;Z)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L2cbcbc.  v2:= temp @kind object;
  #L2cbcbe.  call temp:= `c`() @signature `Lkotlinx/coroutines/o0;.c:()Z` @kind static;
  #L2cbcc4.  v3:= temp;
  #L2cbcc6.  if v3 == 0 then goto L2cbcee;
  #L2cbcca.  v3:= new `kotlinx.coroutines.j0`;
  #L2cbcce.  call temp:= `b`() @signature `Lkotlinx/coroutines/o0;.b:()Ljava/util/concurrent/atomic/AtomicLong;` @kind static;
  #L2cbcd4.  v0:= temp @kind object;
  #L2cbcd6.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.incrementAndGet:()J` @kind virtual;
  #L2cbcdc.  v0:= temp @kind wide;
  #L2cbcde.  call `<init>`(v3, v0) @signature `Lkotlinx/coroutines/j0;.<init>:(J)V` @kind direct;
  #L2cbce4.  call temp:= `plus`(v2, v3) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2cbcea.  v3:= temp @kind object;
  #L2cbcec.  goto L2cbcf0;
  #L2cbcee.  v3:= v2 @kind object;
  #L2cbcf0.  call temp:= `a`() @signature `Lkotlinx/coroutines/x0;.a:()Lkotlinx/coroutines/CoroutineDispatcher;` @kind static;
  #L2cbcf6.  v0:= temp @kind object;
  #L2cbcf8.  if v2 == v0 then goto L2cbd1c;
  #L2cbcfc.  v0:= `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L2cbd00.  call temp:= `get`(v2, v0) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L2cbd06.  v2:= temp @kind object;
  #L2cbd08.  if v2 != 0 then goto L2cbd1c;
  #L2cbd0c.  call temp:= `a`() @signature `Lkotlinx/coroutines/x0;.a:()Lkotlinx/coroutines/CoroutineDispatcher;` @kind static;
  #L2cbd12.  v2:= temp @kind object;
  #L2cbd14.  call temp:= `plus`(v3, v2) @signature `Lkotlin/coroutines/CoroutineContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2cbd1a.  v3:= temp @kind object;
  #L2cbd1c.  return v3 @kind object;
}
procedure `kotlinx.coroutines.e3` `f`(`kotlin.coroutines.jvm.internal.CoroutineStackFrame` v2 @kind object) @signature `Lkotlinx/coroutines/CoroutineContextKt;.f:(Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;)Lkotlinx/coroutines/e3;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2cbd30.  v0:= instanceof @variable v2 @type ^`kotlinx.coroutines.u0` @kind boolean;
  #L2cbd34.  v1:= 0I;
  #L2cbd36.  if v0 == 0 then goto L2cbd3c;
  #L2cbd3a.  return v1 @kind object;
  #L2cbd3c.  call temp:= `getCallerFrame`(v2) @signature `Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @kind interface;
  #L2cbd42.  v2:= temp @kind object;
  #L2cbd44.  if v2 != 0 then goto L2cbd4a;
  #L2cbd48.  return v1 @kind object;
  #L2cbd4a.  v0:= instanceof @variable v2 @type ^`kotlinx.coroutines.e3` @kind boolean;
  #L2cbd4e.  if v0 == 0 then goto L2cbd30;
  #L2cbd52.  v2:= (`kotlinx.coroutines.e3`) v2 @kind object;
  #L2cbd56.  return v2 @kind object;
}
procedure `kotlinx.coroutines.e3` `g`(`kotlin.coroutines.Continuation` v2 @kind object, `kotlin.coroutines.CoroutineContext` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/CoroutineContextKt;.g:(Lkotlin/coroutines/Continuation;Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;)Lkotlinx/coroutines/e3;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2cbd68.  v0:= instanceof @variable v2 @type ^`kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind boolean;
  #L2cbd6c.  v1:= 0I;
  #L2cbd6e.  if v0 != 0 then goto L2cbd74;
  #L2cbd72.  return v1 @kind object;
  #L2cbd74.  v0:= `@@kotlinx.coroutines.f3.b` @type ^`kotlinx.coroutines.f3` @kind object;
  #L2cbd78.  call temp:= `get`(v3, v0) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L2cbd7e.  v0:= temp @kind object;
  #L2cbd80.  if v0 == 0 then goto L2cbd88;
  #L2cbd84.  v0:= 1I;
  #L2cbd86.  goto L2cbd8a;
  #L2cbd88.  v0:= 0I;
  #L2cbd8a.  if v0 != 0 then goto L2cbd90;
  #L2cbd8e.  return v1 @kind object;
  #L2cbd90.  v2:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v2 @kind object;
  #L2cbd94.  call temp:= `f`(v2) @signature `Lkotlinx/coroutines/CoroutineContextKt;.f:(Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;)Lkotlinx/coroutines/e3;` @kind static;
  #L2cbd9a.  v2:= temp @kind object;
  #L2cbd9c.  if v2 != 0 then goto L2cbda2;
  #L2cbda0.  goto L2cbda8;
  #L2cbda2.  call `P0`(v2, v3, v4) @signature `Lkotlinx/coroutines/e3;.P0:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Object;)V` @kind virtual;
  #L2cbda8.  return v2 @kind object;
}
