record `kotlinx.coroutines.d1` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.CoroutineDispatcher` @kind class {
  `long` `kotlinx.coroutines.d1.c` @AccessFlag PRIVATE;
  `boolean` `kotlinx.coroutines.d1.d` @AccessFlag PRIVATE;
  `kotlinx.coroutines.internal.a` `kotlinx.coroutines.d1.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.d1` v0 @kind this) @signature `Lkotlinx/coroutines/d1;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2ce874.  call `<init>`(v0) @signature `Lkotlinx/coroutines/CoroutineDispatcher;.<init>:()V` @kind direct;
  #L2ce87a.  return @kind void;
}
procedure `void` `S0`(`kotlinx.coroutines.d1` v0 @kind object, `boolean` v1 , `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/d1;.S0:(Lkotlinx/coroutines/d1;ZILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2ce88c.  if v3 != 0 then goto L2ce8a2;
  #L2ce890.  v2:= v2 ^& 1;
  #L2ce894.  if v2 == 0 then goto L2ce89a;
  #L2ce898.  v1:= 0I;
  #L2ce89a.  call `R0`(v0, v1) @signature `Lkotlinx/coroutines/d1;.R0:(Z)V` @kind virtual;
  #L2ce8a0.  return @kind void;
  #L2ce8a2.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2ce8a6.  v1:= "Super calls with default arguments not supported in this target, function: decrementUseCount" @kind object;
  #L2ce8aa.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ce8b0.  throw v0;
}
procedure `long` `T0`(`kotlinx.coroutines.d1` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/d1;.T0:(Z)J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2ce814.  if v3 == 0 then goto L2ce824;
  #L2ce818.  v0:= 4294967296L;
  #L2ce822.  goto L2ce828;
  #L2ce824.  v0:= 1L;
  #L2ce828.  return v0 @kind wide;
}
procedure `void` `X0`(`kotlinx.coroutines.d1` v0 @kind object, `boolean` v1 , `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/d1;.X0:(Lkotlinx/coroutines/d1;ZILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2ce964.  if v3 != 0 then goto L2ce97a;
  #L2ce968.  v2:= v2 ^& 1;
  #L2ce96c.  if v2 == 0 then goto L2ce972;
  #L2ce970.  v1:= 0I;
  #L2ce972.  call `W0`(v0, v1) @signature `Lkotlinx/coroutines/d1;.W0:(Z)V` @kind virtual;
  #L2ce978.  return @kind void;
  #L2ce97a.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2ce97e.  v1:= "Super calls with default arguments not supported in this target, function: incrementUseCount" @kind object;
  #L2ce982.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ce988.  throw v0;
}
procedure `void` `R0`(`kotlinx.coroutines.d1` v4 @kind this, `boolean` v5 ) @signature `Lkotlinx/coroutines/d1;.R0:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ce8c4.  v0:= v4.`kotlinx.coroutines.d1.c` @type ^`long` @kind wide;
  #L2ce8c8.  call temp:= `T0`(v4, v5) @signature `Lkotlinx/coroutines/d1;.T0:(Z)J` @kind direct;
  #L2ce8ce.  v2:= temp @kind wide;
  #L2ce8d0.  v0:= v0 - v2 @kind long;
  #L2ce8d2.  v4.`kotlinx.coroutines.d1.c` @type ^`long` := v0 @kind wide;
  #L2ce8d6.  v2:= 0L;
  #L2ce8da.  v5:= lcmp(v0, v2);
  #L2ce8de.  if v5 <= 0 then goto L2ce8e4;
  #L2ce8e2.  return @kind void;
  #L2ce8e4.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2ce8ea.  v5:= temp;
  #L2ce8ec.  if v5 == 0 then goto L2ce914;
  #L2ce8f0.  v0:= v4.`kotlinx.coroutines.d1.c` @type ^`long` @kind wide;
  #L2ce8f4.  v5:= lcmp(v0, v2);
  #L2ce8f8.  if v5 != 0 then goto L2ce900;
  #L2ce8fc.  v5:= 1I;
  #L2ce8fe.  goto L2ce902;
  #L2ce900.  v5:= 0I;
  #L2ce902.  if v5 == 0 then goto L2ce908;
  #L2ce906.  goto L2ce914;
  #L2ce908.  v5:= new `java.lang.AssertionError`;
  #L2ce90c.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2ce912.  throw v5;
  #L2ce914.  v5:= v4.`kotlinx.coroutines.d1.d` @type ^`boolean` @kind boolean;
  #L2ce918.  if v5 == 0 then goto L2ce922;
  #L2ce91c.  call `shutdown`(v4) @signature `Lkotlinx/coroutines/d1;.shutdown:()V` @kind virtual;
  #L2ce922.  return @kind void;
}
procedure `void` `U0`(`kotlinx.coroutines.d1` v1 @kind this, `kotlinx.coroutines.v0` v2 @kind object) @signature `Lkotlinx/coroutines/d1;.U0:(Lkotlinx/coroutines/v0;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ce934.  v0:= v1.`kotlinx.coroutines.d1.e` @type ^`kotlinx.coroutines.internal.a` @kind object;
  #L2ce938.  if v0 != 0 then goto L2ce94a;
  #L2ce93c.  v0:= new `kotlinx.coroutines.internal.a`;
  #L2ce940.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/a;.<init>:()V` @kind direct;
  #L2ce946.  v1.`kotlinx.coroutines.d1.e` @type ^`kotlinx.coroutines.internal.a` := v0 @kind object;
  #L2ce94a.  call `a`(v0, v2) @signature `Lkotlinx/coroutines/internal/a;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L2ce950.  return @kind void;
}
procedure `long` `V0`(`kotlinx.coroutines.d1` v3 @kind this) @signature `Lkotlinx/coroutines/d1;.V0:()J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L2ce83c.  v0:= v3.`kotlinx.coroutines.d1.e` @type ^`kotlinx.coroutines.internal.a` @kind object;
  #L2ce840.  v1:= 9223372036854775807L;
  #L2ce84a.  if v0 != 0 then goto L2ce850;
  #L2ce84e.  return v1 @kind wide;
  #L2ce850.  call temp:= `c`(v0) @signature `Lkotlinx/coroutines/internal/a;.c:()Z` @kind virtual;
  #L2ce856.  v0:= temp;
  #L2ce858.  if v0 == 0 then goto L2ce85e;
  #L2ce85c.  goto L2ce862;
  #L2ce85e.  v1:= 0L;
  #L2ce862.  return v1 @kind wide;
}
procedure `void` `W0`(`kotlinx.coroutines.d1` v4 @kind this, `boolean` v5 ) @signature `Lkotlinx/coroutines/d1;.W0:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ce99c.  v0:= v4.`kotlinx.coroutines.d1.c` @type ^`long` @kind wide;
  #L2ce9a0.  call temp:= `T0`(v4, v5) @signature `Lkotlinx/coroutines/d1;.T0:(Z)J` @kind direct;
  #L2ce9a6.  v2:= temp @kind wide;
  #L2ce9a8.  v0:= v0 + v2 @kind long;
  #L2ce9aa.  v4.`kotlinx.coroutines.d1.c` @type ^`long` := v0 @kind wide;
  #L2ce9ae.  if v5 != 0 then goto L2ce9b8;
  #L2ce9b2.  v5:= 1I;
  #L2ce9b4.  v4.`kotlinx.coroutines.d1.d` @type ^`boolean` := v5 @kind boolean;
  #L2ce9b8.  return @kind void;
}
procedure `boolean` `Y0`(`kotlinx.coroutines.d1` v6 @kind this) @signature `Lkotlinx/coroutines/d1;.Y0:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2ce774.  v0:= v6.`kotlinx.coroutines.d1.c` @type ^`long` @kind wide;
  #L2ce778.  v2:= 1I;
  #L2ce77a.  call temp:= `T0`(v6, v2) @signature `Lkotlinx/coroutines/d1;.T0:(Z)J` @kind direct;
  #L2ce780.  v3:= temp @kind wide;
  #L2ce782.  v5:= lcmp(v0, v3);
  #L2ce786.  if v5 < 0 then goto L2ce78c;
  #L2ce78a.  goto L2ce78e;
  #L2ce78c.  v2:= 0I;
  #L2ce78e.  return v2;
}
procedure `boolean` `Z0`(`kotlinx.coroutines.d1` v1 @kind this) @signature `Lkotlinx/coroutines/d1;.Z0:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ce7a0.  v0:= v1.`kotlinx.coroutines.d1.e` @type ^`kotlinx.coroutines.internal.a` @kind object;
  #L2ce7a4.  if v0 != 0 then goto L2ce7ac;
  #L2ce7a8.  v0:= 1I;
  #L2ce7aa.  goto L2ce7b4;
  #L2ce7ac.  call temp:= `c`(v0) @signature `Lkotlinx/coroutines/internal/a;.c:()Z` @kind virtual;
  #L2ce7b2.  v0:= temp;
  #L2ce7b4.  return v0;
}
procedure `long` `a1`() @signature `Lkotlinx/coroutines/d1;.a1:()J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `b1`(`kotlinx.coroutines.d1` v2 @kind this) @signature `Lkotlinx/coroutines/d1;.b1:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2ce7c8.  v0:= v2.`kotlinx.coroutines.d1.e` @type ^`kotlinx.coroutines.internal.a` @kind object;
  #L2ce7cc.  v1:= 0I;
  #L2ce7ce.  if v0 != 0 then goto L2ce7d4;
  #L2ce7d2.  return v1;
  #L2ce7d4.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/a;.d:()Ljava/lang/Object;` @kind virtual;
  #L2ce7da.  v0:= temp @kind object;
  #L2ce7dc.  v0:= (`kotlinx.coroutines.v0`) v0 @kind object;
  #L2ce7e0.  if v0 != 0 then goto L2ce7e6;
  #L2ce7e4.  return v1;
  #L2ce7e6.  call `run`(v0) @signature `Lkotlinx/coroutines/v0;.run:()V` @kind virtual;
  #L2ce7ec.  v0:= 1I;
  #L2ce7ee.  return v0;
}
procedure `boolean` `c1`(`kotlinx.coroutines.d1` v1 @kind this) @signature `Lkotlinx/coroutines/d1;.c1:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ce800.  v0:= 0I;
  #L2ce802.  return v0;
}
procedure `void` `shutdown`() @signature `Lkotlinx/coroutines/d1;.shutdown:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
