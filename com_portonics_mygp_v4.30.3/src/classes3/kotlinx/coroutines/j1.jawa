record `kotlinx.coroutines.j1` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.d1` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.j1` v0 @kind this) @signature `Lkotlinx/coroutines/j1;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2ce610.  call `<init>`(v0) @signature `Lkotlinx/coroutines/d1;.<init>:()V` @kind direct;
  #L2ce616.  return @kind void;
}
procedure `java.lang.Thread` `d1`() @signature `Lkotlinx/coroutines/j1;.d1:()Ljava/lang/Thread;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `e1`(`kotlinx.coroutines.j1` v1 @kind this, `long` v2 , `kotlinx.coroutines.g1` v4 @kind object) @signature `Lkotlinx/coroutines/j1;.e1:(JLkotlinx/coroutines/g1;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2ce628.  v0:= `@@kotlinx.coroutines.q0.h` @type ^`kotlinx.coroutines.q0` @kind object;
  #L2ce62c.  call `o1`(v0, v2, v4) @signature `Lkotlinx/coroutines/i1;.o1:(JLkotlinx/coroutines/g1;)V` @kind virtual;
  #L2ce632.  return @kind void;
}
procedure `void` `f1`(`kotlinx.coroutines.j1` v2 @kind this) @signature `Lkotlinx/coroutines/j1;.f1:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L2ce644.  call temp:= `d1`(v2) @signature `Lkotlinx/coroutines/j1;.d1:()Ljava/lang/Thread;` @kind virtual;
  #L2ce64a.  v0:= temp @kind object;
  #L2ce64c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L2ce652.  v1:= temp @kind object;
  #L2ce654.  if v1 == v0 then goto L2ce670;
  #L2ce658.  call temp:= `a`() @signature `Lkotlinx/coroutines/c;.a:()Lkotlinx/coroutines/b;` @kind static;
  #L2ce65e.  v1:= temp @kind object;
  #L2ce660.  if v1 != 0 then goto L2ce66c;
  #L2ce664.  call `unpark`(v0) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L2ce66a.  goto L2ce670;
  #L2ce66c.  v0:= 0I;
  #L2ce66e.  throw v0;
  #L2ce670.  return @kind void;
}
