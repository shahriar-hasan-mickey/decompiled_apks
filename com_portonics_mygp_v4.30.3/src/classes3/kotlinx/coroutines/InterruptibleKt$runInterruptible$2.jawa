record `kotlinx.coroutines.InterruptibleKt$runInterruptible$2` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.SuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `kotlin.jvm.functions.Function0` `kotlinx.coroutines.InterruptibleKt$runInterruptible$2.$block` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.InterruptibleKt$runInterruptible$2.L$0` @AccessFlag PRIVATE_SYNTHETIC;
  `int` `kotlinx.coroutines.InterruptibleKt$runInterruptible$2.label` @AccessFlag ;
}
procedure `void` `<init>`(`kotlinx.coroutines.InterruptibleKt$runInterruptible$2` v0 @kind this, `kotlin.jvm.functions.Function0` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/InterruptibleKt$runInterruptible$2;.<init>:(Lkotlin/jvm/functions/Function0;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2cef44.  v0.`kotlinx.coroutines.InterruptibleKt$runInterruptible$2.$block` @type ^`kotlin.jvm.functions.Function0` := v1 @kind object;
  #L2cef48.  v1:= 2I;
  #L2cef4a.  call `<init>`(v0, v1, v2) @signature `Lkotlin/coroutines/jvm/internal/SuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L2cef50.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.InterruptibleKt$runInterruptible$2` v2 @kind this, `java.lang.Object` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/InterruptibleKt$runInterruptible$2;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2cef20.  v0:= new `kotlinx.coroutines.InterruptibleKt$runInterruptible$2`;
  #L2cef24.  v1:= v2.`kotlinx.coroutines.InterruptibleKt$runInterruptible$2.$block` @type ^`kotlin.jvm.functions.Function0` @kind object;
  #L2cef28.  call `<init>`(v0, v1, v4) @signature `Lkotlinx/coroutines/InterruptibleKt$runInterruptible$2;.<init>:(Lkotlin/jvm/functions/Function0;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2cef2e.  v0.`kotlinx.coroutines.InterruptibleKt$runInterruptible$2.L$0` @type ^`java.lang.Object` := v3 @kind object;
  #L2cef32.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.InterruptibleKt$runInterruptible$2` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/InterruptibleKt$runInterruptible$2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2cee7c.  v1:= (`kotlinx.coroutines.m0`) v1 @kind object;
  #L2cee80.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L2cee84.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlinx/coroutines/InterruptibleKt$runInterruptible$2;.invoke:(Lkotlinx/coroutines/m0;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2cee8a.  v1:= temp @kind object;
  #L2cee8c.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.InterruptibleKt$runInterruptible$2` v0 @kind this, `kotlinx.coroutines.m0` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/InterruptibleKt$runInterruptible$2;.invoke:(Lkotlinx/coroutines/m0;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2ceea0.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/InterruptibleKt$runInterruptible$2;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2ceea6.  v1:= temp @kind object;
  #L2ceea8.  v1:= (`kotlinx.coroutines.InterruptibleKt$runInterruptible$2`) v1 @kind object;
  #L2ceeac.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2ceeb0.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/InterruptibleKt$runInterruptible$2;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2ceeb6.  v1:= temp @kind object;
  #L2ceeb8.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.InterruptibleKt$runInterruptible$2` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/InterruptibleKt$runInterruptible$2;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ceecc.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2ceed2.  v0:= v1.`kotlinx.coroutines.InterruptibleKt$runInterruptible$2.label` @type ^`int`;
  #L2ceed6.  if v0 != 0 then goto L2ceefe;
  #L2ceeda.  call `throwOnFailure`(v2) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2ceee0.  v2:= v1.`kotlinx.coroutines.InterruptibleKt$runInterruptible$2.L$0` @type ^`java.lang.Object` @kind object;
  #L2ceee4.  v2:= (`kotlinx.coroutines.m0`) v2 @kind object;
  #L2ceee8.  call temp:= `v`(v2) @signature `Lkotlinx/coroutines/m0;.v:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2ceeee.  v2:= temp @kind object;
  #L2ceef0.  v0:= v1.`kotlinx.coroutines.InterruptibleKt$runInterruptible$2.$block` @type ^`kotlin.jvm.functions.Function0` @kind object;
  #L2ceef4.  call temp:= `a`(v2, v0) @signature `Lkotlinx/coroutines/t1;.a:(Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;` @kind static;
  #L2ceefa.  v2:= temp @kind object;
  #L2ceefc.  return v2 @kind object;
  #L2ceefe.  v2:= new `java.lang.IllegalStateException`;
  #L2cef02.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2cef06.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cef0c.  throw v2;
}
