record `kotlinx.coroutines.selects.b` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.internal.d` @kind class {
  `kotlinx.coroutines.selects.e` `kotlinx.coroutines.selects.b.b` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.internal.b` `kotlinx.coroutines.selects.b.c` @AccessFlag PUBLIC_FINAL;
  `long` `kotlinx.coroutines.selects.b.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.selects.b` v2 @kind this, `kotlinx.coroutines.selects.e` v3 @kind object, `kotlinx.coroutines.internal.b` v4 @kind object) @signature `Lkotlinx/coroutines/selects/b;.<init>:(Lkotlinx/coroutines/selects/e;Lkotlinx/coroutines/internal/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2ee82c.  call `<init>`(v2) @signature `Lkotlinx/coroutines/internal/d;.<init>:()V` @kind direct;
  #L2ee832.  v2.`kotlinx.coroutines.selects.b.b` @type ^`kotlinx.coroutines.selects.e` := v3 @kind object;
  #L2ee836.  v2.`kotlinx.coroutines.selects.b.c` @type ^`kotlinx.coroutines.internal.b` := v4 @kind object;
  #L2ee83a.  call temp:= `b`() @signature `Lkotlinx/coroutines/selects/k;.b:()Lkotlinx/coroutines/selects/l;` @kind static;
  #L2ee840.  v3:= temp @kind object;
  #L2ee842.  call temp:= `a`(v3) @signature `Lkotlinx/coroutines/selects/l;.a:()J` @kind virtual;
  #L2ee848.  v0:= temp @kind wide;
  #L2ee84a.  v2.`kotlinx.coroutines.selects.b.d` @type ^`long` := v0 @kind wide;
  #L2ee84e.  call `d`(v4, v2) @signature `Lkotlinx/coroutines/internal/b;.d:(Lkotlinx/coroutines/internal/d;)V` @kind virtual;
  #L2ee854.  return @kind void;
}
procedure `void` `j`(`kotlinx.coroutines.selects.b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/selects/b;.j:(Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ee88c.  if v4 != 0 then goto L2ee894;
  #L2ee890.  v4:= 1I;
  #L2ee892.  goto L2ee896;
  #L2ee894.  v4:= 0I;
  #L2ee896.  if v4 == 0 then goto L2ee89e;
  #L2ee89a.  v0:= 0I;
  #L2ee89c.  goto L2ee8a6;
  #L2ee89e.  call temp:= `e`() @signature `Lkotlinx/coroutines/selects/k;.e:()Ljava/lang/Object;` @kind static;
  #L2ee8a4.  v0:= temp @kind object;
  #L2ee8a6.  v1:= v3.`kotlinx.coroutines.selects.b.b` @type ^`kotlinx.coroutines.selects.e` @kind object;
  #L2ee8aa.  v2:= `@@kotlinx.coroutines.selects.e.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ee8ae.  call temp:= `compareAndSet`(v2, v1, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ee8b4.  v0:= temp;
  #L2ee8b6.  if v0 == 0 then goto L2ee8c8;
  #L2ee8ba.  if v4 == 0 then goto L2ee8c8;
  #L2ee8be.  v4:= v3.`kotlinx.coroutines.selects.b.b` @type ^`kotlinx.coroutines.selects.e` @kind object;
  #L2ee8c2.  call `T`(v4) @signature `Lkotlinx/coroutines/selects/e;.T:(Lkotlinx/coroutines/selects/e;)V` @kind static;
  #L2ee8c8.  return @kind void;
}
procedure `java.lang.Object` `k`(`kotlinx.coroutines.selects.b` v5 @kind this) @signature `Lkotlinx/coroutines/selects/b;.k:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2ee760.  v0:= v5.`kotlinx.coroutines.selects.b.b` @type ^`kotlinx.coroutines.selects.e` @kind object;
  #L2ee764.  v1:= v0.`kotlinx.coroutines.selects.e._state` @type ^`java.lang.Object` @kind object;
  #L2ee768.  v2:= 0I;
  #L2ee76a.  if v1 != v5 then goto L2ee770;
  #L2ee76e.  return v2 @kind object;
  #L2ee770.  v3:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.f0` @kind boolean;
  #L2ee774.  if v3 == 0 then goto L2ee788;
  #L2ee778.  v1:= (`kotlinx.coroutines.internal.f0`) v1 @kind object;
  #L2ee77c.  v2:= v5.`kotlinx.coroutines.selects.b.b` @type ^`kotlinx.coroutines.selects.e` @kind object;
  #L2ee780.  call temp:= `c`(v1, v2) @signature `Lkotlinx/coroutines/internal/f0;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2ee786.  goto L2ee764;
  #L2ee788.  call temp:= `e`() @signature `Lkotlinx/coroutines/selects/k;.e:()Ljava/lang/Object;` @kind static;
  #L2ee78e.  v3:= temp @kind object;
  #L2ee790.  if v1 != v3 then goto L2ee7b2;
  #L2ee794.  v1:= v5.`kotlinx.coroutines.selects.b.b` @type ^`kotlinx.coroutines.selects.e` @kind object;
  #L2ee798.  v3:= `@@kotlinx.coroutines.selects.e.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ee79c.  call temp:= `e`() @signature `Lkotlinx/coroutines/selects/k;.e:()Ljava/lang/Object;` @kind static;
  #L2ee7a2.  v4:= temp @kind object;
  #L2ee7a4.  call temp:= `compareAndSet`(v3, v1, v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ee7aa.  v1:= temp;
  #L2ee7ac.  if v1 == 0 then goto L2ee764;
  #L2ee7b0.  return v2 @kind object;
  #L2ee7b2.  call temp:= `d`() @signature `Lkotlinx/coroutines/selects/k;.d:()Ljava/lang/Object;` @kind static;
  #L2ee7b8.  v0:= temp @kind object;
  #L2ee7ba.  return v0 @kind object;
}
procedure `void` `l`(`kotlinx.coroutines.selects.b` v3 @kind this) @signature `Lkotlinx/coroutines/selects/b;.l:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ee8dc.  v0:= v3.`kotlinx.coroutines.selects.b.b` @type ^`kotlinx.coroutines.selects.e` @kind object;
  #L2ee8e0.  v1:= `@@kotlinx.coroutines.selects.e.e` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ee8e4.  call temp:= `e`() @signature `Lkotlinx/coroutines/selects/k;.e:()Ljava/lang/Object;` @kind static;
  #L2ee8ea.  v2:= temp @kind object;
  #L2ee8ec.  call temp:= `compareAndSet`(v1, v0, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ee8f2.  return @kind void;
}
procedure `void` `d`(`kotlinx.coroutines.selects.b` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/selects/b;.d:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L2ee868.  call `j`(v0, v2) @signature `Lkotlinx/coroutines/selects/b;.j:(Ljava/lang/Object;)V` @kind direct;
  #L2ee86e.  v1:= v0.`kotlinx.coroutines.selects.b.c` @type ^`kotlinx.coroutines.internal.b` @kind object;
  #L2ee872.  call `a`(v1, v0, v2) @signature `Lkotlinx/coroutines/internal/b;.a:(Lkotlinx/coroutines/internal/d;Ljava/lang/Object;)V` @kind virtual;
  #L2ee878.  return @kind void;
}
procedure `long` `g`(`kotlinx.coroutines.selects.b` v2 @kind this) @signature `Lkotlinx/coroutines/selects/b;.g:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ee814.  v0:= v2.`kotlinx.coroutines.selects.b.d` @type ^`long` @kind wide;
  #L2ee818.  return v0 @kind wide;
}
procedure `java.lang.Object` `i`(`kotlinx.coroutines.selects.b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/selects/b;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ee714.  if v2 != 0 then goto L2ee728;
  #L2ee718.  call temp:= `k`(v1) @signature `Lkotlinx/coroutines/selects/b;.k:()Ljava/lang/Object;` @kind direct;
  #L2ee71e.  v0:= temp @kind object;
  #L2ee720.  if v0 != 0 then goto L2ee726;
  #L2ee724.  goto L2ee728;
  #L2ee726.  return v0 @kind object;
  #L2ee728.  v0:= v1.`kotlinx.coroutines.selects.b.c` @type ^`kotlinx.coroutines.internal.b` @kind object;
  #L2ee72c.  call temp:= `c`(v0, v1) @signature `Lkotlinx/coroutines/internal/b;.c:(Lkotlinx/coroutines/internal/d;)Ljava/lang/Object;` @kind virtual;
  #L2ee732.  v2:= temp @kind object;
  #L2ee734.  return v2 @kind object;
  #L2ee736.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ee738.  if v2 != 0 then goto L2ee742;
  #L2ee73c.  call `l`(v1) @signature `Lkotlinx/coroutines/selects/b;.l:()V` @kind direct;
  #L2ee742.  throw v0;
  catch `java.lang.Throwable` @[L2ee728..L2ee734] goto L2ee736;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.selects.b` v3 @kind this) @signature `Lkotlinx/coroutines/selects/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2ee7cc.  v0:= new `java.lang.StringBuilder`;
  #L2ee7d0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ee7d6.  v1:= "AtomicSelectOp(sequence=" @kind object;
  #L2ee7da.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ee7e0.  call temp:= `g`(v3) @signature `Lkotlinx/coroutines/selects/b;.g:()J` @kind virtual;
  #L2ee7e6.  v1:= temp @kind wide;
  #L2ee7e8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ee7ee.  v1:= 41I;
  #L2ee7f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ee7f8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ee7fe.  v0:= temp @kind object;
  #L2ee800.  return v0 @kind object;
}
