record `kotlinx.coroutines.DiagnosticCoroutineContextException` @kind class @AccessFlag FINAL extends `java.lang.RuntimeException` @kind class {
  `kotlin.coroutines.CoroutineContext` `kotlinx.coroutines.DiagnosticCoroutineContextException.context` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.DiagnosticCoroutineContextException` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object) @signature `Lkotlinx/coroutines/DiagnosticCoroutineContextException;.<init>:(Lkotlin/coroutines/CoroutineContext;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2cd11c.  call `<init>`(v0) @signature `Ljava/lang/RuntimeException;.<init>:()V` @kind direct;
  #L2cd122.  v0.`kotlinx.coroutines.DiagnosticCoroutineContextException.context` @type ^`kotlin.coroutines.CoroutineContext` := v1 @kind object;
  #L2cd126.  return @kind void;
}
procedure `java.lang.Throwable` `fillInStackTrace`(`kotlinx.coroutines.DiagnosticCoroutineContextException` v1 @kind this) @signature `Lkotlinx/coroutines/DiagnosticCoroutineContextException;.fillInStackTrace:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2cd0fc.  v0:= 0I;
  #L2cd0fe.  v0:= new `java.lang.StackTraceElement`[v0];
  #L2cd102.  call `setStackTrace`(v1, v0) @signature `Ljava/lang/RuntimeException;.setStackTrace:([Ljava/lang/StackTraceElement;)V` @kind virtual;
  #L2cd108.  return v1 @kind object;
}
procedure `java.lang.String` `getLocalizedMessage`(`kotlinx.coroutines.DiagnosticCoroutineContextException` v1 @kind this) @signature `Lkotlinx/coroutines/DiagnosticCoroutineContextException;.getLocalizedMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2cd0dc.  v0:= v1.`kotlinx.coroutines.DiagnosticCoroutineContextException.context` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L2cd0e0.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2cd0e6.  v0:= temp @kind object;
  #L2cd0e8.  return v0 @kind object;
}
