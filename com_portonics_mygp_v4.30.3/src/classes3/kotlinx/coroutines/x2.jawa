record `kotlinx.coroutines.x2` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.y2` v0 @kind object, `java.lang.Object` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/x2;.a:(Lkotlinx/coroutines/y2;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2d04bc.  call temp:= `fold`(v0, v1, v2) @signature `Lkotlin/coroutines/CoroutineContext$Element$DefaultImpls;.fold:(Lkotlin/coroutines/CoroutineContext$Element;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind static;
  #L2d04c2.  v0:= temp @kind object;
  #L2d04c4.  return v0 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `b`(`kotlinx.coroutines.y2` v0 @kind object, `kotlin.coroutines.CoroutineContext` v1 @kind object) @signature `Lkotlinx/coroutines/x2;.b:(Lkotlinx/coroutines/y2;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2d04d8.  call temp:= `plus`(v0, v1) @signature `Lkotlin/coroutines/CoroutineContext$Element$DefaultImpls;.plus:(Lkotlin/coroutines/CoroutineContext$Element;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L2d04de.  v0:= temp @kind object;
  #L2d04e0.  return v0 @kind object;
}
