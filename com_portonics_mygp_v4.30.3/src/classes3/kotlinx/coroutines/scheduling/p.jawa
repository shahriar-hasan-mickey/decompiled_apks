record `kotlinx.coroutines.scheduling.p` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `kotlinx.coroutines.scheduling.p.blockingTasksInBuffer` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.scheduling.p.consumerIndex` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.scheduling.p.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `kotlinx.coroutines.scheduling.p.lastScheduledTask` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.scheduling.p.producerIndex` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.scheduling.p.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.p.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.p.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.p.d` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/scheduling/p;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2ee5d4.  v0:= constclass @type ^`kotlinx.coroutines.scheduling.p` @kind object;
  #L2ee5d8.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L2ee5dc.  v2:= "lastScheduledTask" @kind object;
  #L2ee5e0.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L2ee5e6.  v1:= temp @kind object;
  #L2ee5e8.  `@@kotlinx.coroutines.scheduling.p.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v1 @kind object;
  #L2ee5ec.  v1:= "producerIndex" @kind object;
  #L2ee5f0.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L2ee5f6.  v1:= temp @kind object;
  #L2ee5f8.  `@@kotlinx.coroutines.scheduling.p.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v1 @kind object;
  #L2ee5fc.  v1:= "consumerIndex" @kind object;
  #L2ee600.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L2ee606.  v1:= temp @kind object;
  #L2ee608.  `@@kotlinx.coroutines.scheduling.p.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v1 @kind object;
  #L2ee60c.  v1:= "blockingTasksInBuffer" @kind object;
  #L2ee610.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L2ee616.  v0:= temp @kind object;
  #L2ee618.  `@@kotlinx.coroutines.scheduling.p.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L2ee61c.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.p` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/p;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2ee630.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ee636.  v0:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L2ee63a.  v1:= 128I;
  #L2ee63e.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L2ee644.  v2.`kotlinx.coroutines.scheduling.p.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v0 @kind object;
  #L2ee648.  v0:= 0I;
  #L2ee64a.  v2.`kotlinx.coroutines.scheduling.p.lastScheduledTask` @type ^`java.lang.Object` := v0 @kind object;
  #L2ee64e.  v0:= 0I;
  #L2ee650.  v2.`kotlinx.coroutines.scheduling.p.producerIndex` @type ^`int` := v0;
  #L2ee654.  v2.`kotlinx.coroutines.scheduling.p.consumerIndex` @type ^`int` := v0;
  #L2ee658.  v2.`kotlinx.coroutines.scheduling.p.blockingTasksInBuffer` @type ^`int` := v0;
  #L2ee65c.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.j` `b`(`kotlinx.coroutines.scheduling.p` v0 @kind object, `kotlinx.coroutines.scheduling.j` v1 @kind object, `boolean` v2 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/scheduling/p;.b:(Lkotlinx/coroutines/scheduling/p;Lkotlinx/coroutines/scheduling/j;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/j;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2ee288.  v3:= v3 ^& 2;
  #L2ee28c.  if v3 == 0 then goto L2ee292;
  #L2ee290.  v2:= 0I;
  #L2ee292.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/scheduling/p;.a:(Lkotlinx/coroutines/scheduling/j;Z)Lkotlinx/coroutines/scheduling/j;` @kind virtual;
  #L2ee298.  v0:= temp @kind object;
  #L2ee29a.  return v0 @kind object;
}
procedure `kotlinx.coroutines.scheduling.j` `c`(`kotlinx.coroutines.scheduling.p` v2 @kind this, `kotlinx.coroutines.scheduling.j` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/p;.c:(Lkotlinx/coroutines/scheduling/j;)Lkotlinx/coroutines/scheduling/j;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2ee2ec.  v0:= v3.`kotlinx.coroutines.scheduling.j.c` @type ^`kotlinx.coroutines.scheduling.k` @kind object;
  #L2ee2f0.  call temp:= `b`(v0) @signature `Lkotlinx/coroutines/scheduling/k;.b:()I` @kind interface;
  #L2ee2f6.  v0:= temp;
  #L2ee2f8.  v1:= 1I;
  #L2ee2fa.  if v0 != v1 then goto L2ee300;
  #L2ee2fe.  goto L2ee302;
  #L2ee300.  v1:= 0I;
  #L2ee302.  if v1 == 0 then goto L2ee310;
  #L2ee306.  v0:= `@@kotlinx.coroutines.scheduling.p.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L2ee30a.  call temp:= `incrementAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L2ee310.  call temp:= `e`(v2) @signature `Lkotlinx/coroutines/scheduling/p;.e:()I` @kind virtual;
  #L2ee316.  v0:= temp;
  #L2ee318.  v1:= 127I;
  #L2ee31c.  if v0 != v1 then goto L2ee322;
  #L2ee320.  return v3 @kind object;
  #L2ee322.  v0:= v2.`kotlinx.coroutines.scheduling.p.producerIndex` @type ^`int`;
  #L2ee326.  v0:= v0 ^& v1 @kind int;
  #L2ee328.  v1:= v2.`kotlinx.coroutines.scheduling.p.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2ee32c.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2ee332.  v1:= temp @kind object;
  #L2ee334.  if v1 == 0 then goto L2ee340;
  #L2ee338.  call `yield`() @signature `Ljava/lang/Thread;.yield:()V` @kind static;
  #L2ee33e.  goto L2ee328;
  #L2ee340.  v1:= v2.`kotlinx.coroutines.scheduling.p.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2ee344.  call `lazySet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L2ee34a.  v3:= `@@kotlinx.coroutines.scheduling.p.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L2ee34e.  call temp:= `incrementAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L2ee354.  v3:= 0I;
  #L2ee356.  return v3 @kind object;
}
procedure `void` `d`(`kotlinx.coroutines.scheduling.p` v3 @kind this, `kotlinx.coroutines.scheduling.j` v4 @kind object) @signature `Lkotlinx/coroutines/scheduling/p;.d:(Lkotlinx/coroutines/scheduling/j;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ee670.  if v4 == 0 then goto L2ee6c2;
  #L2ee674.  v4:= v4.`kotlinx.coroutines.scheduling.j.c` @type ^`kotlinx.coroutines.scheduling.k` @kind object;
  #L2ee678.  call temp:= `b`(v4) @signature `Lkotlinx/coroutines/scheduling/k;.b:()I` @kind interface;
  #L2ee67e.  v4:= temp;
  #L2ee680.  v0:= 0I;
  #L2ee682.  v1:= 1I;
  #L2ee684.  if v4 != v1 then goto L2ee68c;
  #L2ee688.  v4:= 1I;
  #L2ee68a.  goto L2ee68e;
  #L2ee68c.  v4:= 0I;
  #L2ee68e.  if v4 == 0 then goto L2ee6c2;
  #L2ee692.  v4:= `@@kotlinx.coroutines.scheduling.p.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L2ee696.  call temp:= `decrementAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L2ee69c.  v4:= temp;
  #L2ee69e.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2ee6a4.  v2:= temp;
  #L2ee6a6.  if v2 == 0 then goto L2ee6c2;
  #L2ee6aa.  if v4 < 0 then goto L2ee6b0;
  #L2ee6ae.  v0:= 1I;
  #L2ee6b0.  if v0 == 0 then goto L2ee6b6;
  #L2ee6b4.  goto L2ee6c2;
  #L2ee6b6.  v4:= new `java.lang.AssertionError`;
  #L2ee6ba.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2ee6c0.  throw v4;
  #L2ee6c2.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.j` `i`(`kotlinx.coroutines.scheduling.p` v5 @kind this) @signature `Lkotlinx/coroutines/scheduling/p;.i:()Lkotlinx/coroutines/scheduling/j;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2ee398.  v0:= v5.`kotlinx.coroutines.scheduling.p.consumerIndex` @type ^`int`;
  #L2ee39c.  v1:= v5.`kotlinx.coroutines.scheduling.p.producerIndex` @type ^`int`;
  #L2ee3a0.  v1:= v0 - v1 @kind int;
  #L2ee3a4.  v2:= 0I;
  #L2ee3a6.  if v1 != 0 then goto L2ee3ac;
  #L2ee3aa.  return v2 @kind object;
  #L2ee3ac.  v1:= v0 ^& 127;
  #L2ee3b0.  v3:= `@@kotlinx.coroutines.scheduling.p.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L2ee3b4.  v4:= v0 + 1;
  #L2ee3b8.  call temp:= `compareAndSet`(v3, v5, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L2ee3be.  v0:= temp;
  #L2ee3c0.  if v0 == 0 then goto L2ee398;
  #L2ee3c4.  v0:= v5.`kotlinx.coroutines.scheduling.p.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2ee3c8.  call temp:= `getAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.getAndSet:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2ee3ce.  v0:= temp @kind object;
  #L2ee3d0.  v0:= (`kotlinx.coroutines.scheduling.j`) v0 @kind object;
  #L2ee3d4.  if v0 != 0 then goto L2ee3da;
  #L2ee3d8.  goto L2ee398;
  #L2ee3da.  call `d`(v5, v0) @signature `Lkotlinx/coroutines/scheduling/p;.d:(Lkotlinx/coroutines/scheduling/j;)V` @kind direct;
  #L2ee3e0.  return v0 @kind object;
}
procedure `boolean` `j`(`kotlinx.coroutines.scheduling.p` v1 @kind this, `kotlinx.coroutines.scheduling.f` v2 @kind object) @signature `Lkotlinx/coroutines/scheduling/p;.j:(Lkotlinx/coroutines/scheduling/f;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2ee210.  call temp:= `i`(v1) @signature `Lkotlinx/coroutines/scheduling/p;.i:()Lkotlinx/coroutines/scheduling/j;` @kind direct;
  #L2ee216.  v0:= temp @kind object;
  #L2ee218.  if v0 != 0 then goto L2ee220;
  #L2ee21c.  v2:= 0I;
  #L2ee21e.  return v2;
  #L2ee220.  call temp:= `a`(v2, v0) @signature `Lkotlinx/coroutines/internal/y;.a:(Ljava/lang/Object;)Z` @kind virtual;
  #L2ee226.  v2:= 1I;
  #L2ee228.  return v2;
}
procedure `long` `m`(`kotlinx.coroutines.scheduling.p` v7 @kind this, `kotlinx.coroutines.scheduling.p` v8 @kind object, `boolean` v9 ) @signature `Lkotlinx/coroutines/scheduling/p;.m:(Lkotlinx/coroutines/scheduling/p;Z)J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2ee54c.  v0:= v8.`kotlinx.coroutines.scheduling.p.lastScheduledTask` @type ^`java.lang.Object` @kind object;
  #L2ee550.  v0:= (`kotlinx.coroutines.scheduling.j`) v0 @kind object;
  #L2ee554.  v1:= -2L;
  #L2ee558.  if v0 != 0 then goto L2ee55e;
  #L2ee55c.  return v1 @kind wide;
  #L2ee55e.  v3:= 0I;
  #L2ee560.  if v9 == 0 then goto L2ee580;
  #L2ee564.  v4:= v0.`kotlinx.coroutines.scheduling.j.c` @type ^`kotlinx.coroutines.scheduling.k` @kind object;
  #L2ee568.  call temp:= `b`(v4) @signature `Lkotlinx/coroutines/scheduling/k;.b:()I` @kind interface;
  #L2ee56e.  v4:= temp;
  #L2ee570.  v5:= 1I;
  #L2ee572.  if v4 != v5 then goto L2ee578;
  #L2ee576.  goto L2ee57a;
  #L2ee578.  v5:= 0I;
  #L2ee57a.  if v5 != 0 then goto L2ee580;
  #L2ee57e.  return v1 @kind wide;
  #L2ee580.  v1:= `@@kotlinx.coroutines.scheduling.n.e` @type ^`kotlinx.coroutines.scheduling.i` @kind object;
  #L2ee584.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/scheduling/i;.a:()J` @kind virtual;
  #L2ee58a.  v1:= temp @kind wide;
  #L2ee58c.  v4:= v0.`kotlinx.coroutines.scheduling.j.b` @type ^`long` @kind wide;
  #L2ee590.  v1:= v1 - v4 @kind long;
  #L2ee592.  v4:= `@@kotlinx.coroutines.scheduling.n.a` @type ^`long` @kind wide;
  #L2ee596.  v6:= lcmp(v1, v4);
  #L2ee59a.  if v6 >= 0 then goto L2ee5a2;
  #L2ee59e.  v4:= v4 - v1 @kind long;
  #L2ee5a0.  return v4 @kind wide;
  #L2ee5a2.  v1:= `@@kotlinx.coroutines.scheduling.p.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ee5a6.  v2:= 0I;
  #L2ee5a8.  call temp:= `compareAndSet`(v1, v8, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ee5ae.  v1:= temp;
  #L2ee5b0.  if v1 == 0 then goto L2ee54c;
  #L2ee5b4.  v8:= 2I;
  #L2ee5b6.  call temp:= `b`(v7, v0, v3, v8, v2) @signature `Lkotlinx/coroutines/scheduling/p;.b:(Lkotlinx/coroutines/scheduling/p;Lkotlinx/coroutines/scheduling/j;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/j;` @kind static;
  #L2ee5bc.  v8:= -1L;
  #L2ee5c0.  return v8 @kind wide;
}
procedure `kotlinx.coroutines.scheduling.j` `a`(`kotlinx.coroutines.scheduling.p` v0 @kind this, `kotlinx.coroutines.scheduling.j` v1 @kind object, `boolean` v2 ) @signature `Lkotlinx/coroutines/scheduling/p;.a:(Lkotlinx/coroutines/scheduling/j;Z)Lkotlinx/coroutines/scheduling/j;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2ee2ac.  if v2 == 0 then goto L2ee2ba;
  #L2ee2b0.  call temp:= `c`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/p;.c:(Lkotlinx/coroutines/scheduling/j;)Lkotlinx/coroutines/scheduling/j;` @kind direct;
  #L2ee2b6.  v1:= temp @kind object;
  #L2ee2b8.  return v1 @kind object;
  #L2ee2ba.  v2:= `@@kotlinx.coroutines.scheduling.p.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ee2be.  call temp:= `getAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2ee2c4.  v1:= temp @kind object;
  #L2ee2c6.  v1:= (`kotlinx.coroutines.scheduling.j`) v1 @kind object;
  #L2ee2ca.  if v1 != 0 then goto L2ee2d2;
  #L2ee2ce.  v1:= 0I;
  #L2ee2d0.  return v1 @kind object;
  #L2ee2d2.  call temp:= `c`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/p;.c:(Lkotlinx/coroutines/scheduling/j;)Lkotlinx/coroutines/scheduling/j;` @kind direct;
  #L2ee2d8.  v1:= temp @kind object;
  #L2ee2da.  return v1 @kind object;
}
procedure `int` `e`(`kotlinx.coroutines.scheduling.p` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/p;.e:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2ee23c.  v0:= v2.`kotlinx.coroutines.scheduling.p.producerIndex` @type ^`int`;
  #L2ee240.  v1:= v2.`kotlinx.coroutines.scheduling.p.consumerIndex` @type ^`int`;
  #L2ee244.  v0:= v0 - v1 @kind int;
  #L2ee246.  return v0;
}
procedure `int` `f`(`kotlinx.coroutines.scheduling.p` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/p;.f:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ee258.  v0:= v1.`kotlinx.coroutines.scheduling.p.lastScheduledTask` @type ^`java.lang.Object` @kind object;
  #L2ee25c.  if v0 == 0 then goto L2ee26e;
  #L2ee260.  call temp:= `e`(v1) @signature `Lkotlinx/coroutines/scheduling/p;.e:()I` @kind virtual;
  #L2ee266.  v0:= temp;
  #L2ee268.  v0:= v0 + 1;
  #L2ee26c.  goto L2ee276;
  #L2ee26e.  call temp:= `e`(v1) @signature `Lkotlinx/coroutines/scheduling/p;.e:()I` @kind virtual;
  #L2ee274.  v0:= temp;
  #L2ee276.  return v0;
}
procedure `void` `g`(`kotlinx.coroutines.scheduling.p` v2 @kind this, `kotlinx.coroutines.scheduling.f` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/p;.g:(Lkotlinx/coroutines/scheduling/f;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2ee6d4.  v0:= `@@kotlinx.coroutines.scheduling.p.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ee6d8.  v1:= 0I;
  #L2ee6da.  call temp:= `getAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2ee6e0.  v0:= temp @kind object;
  #L2ee6e2.  v0:= (`kotlinx.coroutines.scheduling.j`) v0 @kind object;
  #L2ee6e6.  if v0 != 0 then goto L2ee6ec;
  #L2ee6ea.  goto L2ee6f2;
  #L2ee6ec.  call temp:= `a`(v3, v0) @signature `Lkotlinx/coroutines/internal/y;.a:(Ljava/lang/Object;)Z` @kind virtual;
  #L2ee6f2.  call temp:= `j`(v2, v3) @signature `Lkotlinx/coroutines/scheduling/p;.j:(Lkotlinx/coroutines/scheduling/f;)Z` @kind direct;
  #L2ee6f8.  v0:= temp;
  #L2ee6fa.  if v0 == 0 then goto L2ee700;
  #L2ee6fe.  goto L2ee6f2;
  #L2ee700.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.j` `h`(`kotlinx.coroutines.scheduling.p` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/p;.h:()Lkotlinx/coroutines/scheduling/j;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2ee368.  v0:= `@@kotlinx.coroutines.scheduling.p.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ee36c.  v1:= 0I;
  #L2ee36e.  call temp:= `getAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2ee374.  v0:= temp @kind object;
  #L2ee376.  v0:= (`kotlinx.coroutines.scheduling.j`) v0 @kind object;
  #L2ee37a.  if v0 != 0 then goto L2ee386;
  #L2ee37e.  call temp:= `i`(v2) @signature `Lkotlinx/coroutines/scheduling/p;.i:()Lkotlinx/coroutines/scheduling/j;` @kind direct;
  #L2ee384.  v0:= temp @kind object;
  #L2ee386.  return v0 @kind object;
}
procedure `long` `k`(`kotlinx.coroutines.scheduling.p` v8 @kind this, `kotlinx.coroutines.scheduling.p` v9 @kind object) @signature `Lkotlinx/coroutines/scheduling/p;.k:(Lkotlinx/coroutines/scheduling/p;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2ee3f4.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2ee3fa.  v0:= temp;
  #L2ee3fc.  v1:= 0I;
  #L2ee3fe.  v2:= 1I;
  #L2ee400.  if v0 == 0 then goto L2ee428;
  #L2ee404.  call temp:= `e`(v8) @signature `Lkotlinx/coroutines/scheduling/p;.e:()I` @kind virtual;
  #L2ee40a.  v0:= temp;
  #L2ee40c.  if v0 != 0 then goto L2ee414;
  #L2ee410.  v0:= 1I;
  #L2ee412.  goto L2ee416;
  #L2ee414.  v0:= 0I;
  #L2ee416.  if v0 == 0 then goto L2ee41c;
  #L2ee41a.  goto L2ee428;
  #L2ee41c.  v9:= new `java.lang.AssertionError`;
  #L2ee420.  call `<init>`(v9) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2ee426.  throw v9;
  #L2ee428.  v0:= v9.`kotlinx.coroutines.scheduling.p.consumerIndex` @type ^`int`;
  #L2ee42c.  v3:= v9.`kotlinx.coroutines.scheduling.p.producerIndex` @type ^`int`;
  #L2ee430.  v4:= v9.`kotlinx.coroutines.scheduling.p.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2ee434.  if v0 == v3 then goto L2ee49c;
  #L2ee438.  v5:= v0 ^& 127;
  #L2ee43c.  v6:= v9.`kotlinx.coroutines.scheduling.p.blockingTasksInBuffer` @type ^`int`;
  #L2ee440.  if v6 != 0 then goto L2ee446;
  #L2ee444.  goto L2ee49c;
  #L2ee446.  call temp:= `get`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2ee44c.  v6:= temp @kind object;
  #L2ee44e.  v6:= (`kotlinx.coroutines.scheduling.j`) v6 @kind object;
  #L2ee452.  if v6 == 0 then goto L2ee496;
  #L2ee456.  v7:= v6.`kotlinx.coroutines.scheduling.j.c` @type ^`kotlinx.coroutines.scheduling.k` @kind object;
  #L2ee45a.  call temp:= `b`(v7) @signature `Lkotlinx/coroutines/scheduling/k;.b:()I` @kind interface;
  #L2ee460.  v7:= temp;
  #L2ee462.  if v7 != v2 then goto L2ee46a;
  #L2ee466.  v7:= 1I;
  #L2ee468.  goto L2ee46c;
  #L2ee46a.  v7:= 0I;
  #L2ee46c.  if v7 == 0 then goto L2ee496;
  #L2ee470.  v7:= 0I;
  #L2ee472.  call temp:= `compareAndSet`(v4, v5, v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ee478.  v5:= temp;
  #L2ee47a.  if v5 == 0 then goto L2ee496;
  #L2ee47e.  v0:= `@@kotlinx.coroutines.scheduling.p.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L2ee482.  call temp:= `decrementAndGet`(v0, v9) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L2ee488.  v9:= 2I;
  #L2ee48a.  call temp:= `b`(v8, v6, v1, v9, v7) @signature `Lkotlinx/coroutines/scheduling/p;.b:(Lkotlinx/coroutines/scheduling/p;Lkotlinx/coroutines/scheduling/j;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/j;` @kind static;
  #L2ee490.  v0:= -1L;
  #L2ee494.  return v0 @kind wide;
  #L2ee496.  v0:= v0 + 1;
  #L2ee49a.  goto L2ee434;
  #L2ee49c.  call temp:= `m`(v8, v9, v2) @signature `Lkotlinx/coroutines/scheduling/p;.m:(Lkotlinx/coroutines/scheduling/p;Z)J` @kind direct;
  #L2ee4a2.  v0:= temp @kind wide;
  #L2ee4a4.  return v0 @kind wide;
}
procedure `long` `l`(`kotlinx.coroutines.scheduling.p` v4 @kind this, `kotlinx.coroutines.scheduling.p` v5 @kind object) @signature `Lkotlinx/coroutines/scheduling/p;.l:(Lkotlinx/coroutines/scheduling/p;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ee4b8.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2ee4be.  v0:= temp;
  #L2ee4c0.  v1:= 1I;
  #L2ee4c2.  v2:= 0I;
  #L2ee4c4.  if v0 == 0 then goto L2ee4ec;
  #L2ee4c8.  call temp:= `e`(v4) @signature `Lkotlinx/coroutines/scheduling/p;.e:()I` @kind virtual;
  #L2ee4ce.  v0:= temp;
  #L2ee4d0.  if v0 != 0 then goto L2ee4d8;
  #L2ee4d4.  v0:= 1I;
  #L2ee4d6.  goto L2ee4da;
  #L2ee4d8.  v0:= 0I;
  #L2ee4da.  if v0 == 0 then goto L2ee4e0;
  #L2ee4de.  goto L2ee4ec;
  #L2ee4e0.  v5:= new `java.lang.AssertionError`;
  #L2ee4e4.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2ee4ea.  throw v5;
  #L2ee4ec.  call temp:= `i`(v5) @signature `Lkotlinx/coroutines/scheduling/p;.i:()Lkotlinx/coroutines/scheduling/j;` @kind direct;
  #L2ee4f2.  v0:= temp @kind object;
  #L2ee4f4.  if v0 == 0 then goto L2ee530;
  #L2ee4f8.  v5:= 2I;
  #L2ee4fa.  v3:= 0I;
  #L2ee4fc.  call temp:= `b`(v4, v0, v2, v5, v3) @signature `Lkotlinx/coroutines/scheduling/p;.b:(Lkotlinx/coroutines/scheduling/p;Lkotlinx/coroutines/scheduling/j;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/j;` @kind static;
  #L2ee502.  v5:= temp @kind object;
  #L2ee504.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2ee50a.  v0:= temp;
  #L2ee50c.  if v0 == 0 then goto L2ee52a;
  #L2ee510.  if v5 != 0 then goto L2ee516;
  #L2ee514.  goto L2ee518;
  #L2ee516.  v1:= 0I;
  #L2ee518.  if v1 == 0 then goto L2ee51e;
  #L2ee51c.  goto L2ee52a;
  #L2ee51e.  v5:= new `java.lang.AssertionError`;
  #L2ee522.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2ee528.  throw v5;
  #L2ee52a.  v0:= -1L;
  #L2ee52e.  return v0 @kind wide;
  #L2ee530.  call temp:= `m`(v4, v5, v2) @signature `Lkotlinx/coroutines/scheduling/p;.m:(Lkotlinx/coroutines/scheduling/p;Z)J` @kind direct;
  #L2ee536.  v0:= temp @kind wide;
  #L2ee538.  return v0 @kind wide;
}
