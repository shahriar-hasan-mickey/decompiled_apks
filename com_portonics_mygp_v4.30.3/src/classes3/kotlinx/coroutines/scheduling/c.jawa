record `kotlinx.coroutines.scheduling.c` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Thread` @kind class {
  `kotlinx.coroutines.scheduling.p` `kotlinx.coroutines.scheduling.c.c` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` `kotlinx.coroutines.scheduling.c.d` @AccessFlag PUBLIC;
  `long` `kotlinx.coroutines.scheduling.c.e` @AccessFlag PRIVATE;
  `long` `kotlinx.coroutines.scheduling.c.f` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.scheduling.c.g` @AccessFlag PRIVATE;
  `boolean` `kotlinx.coroutines.scheduling.c.h` @AccessFlag PUBLIC;
  `kotlinx.coroutines.scheduling.CoroutineScheduler` `kotlinx.coroutines.scheduling.c.i` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlinx.coroutines.scheduling.c.indexInArray` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `kotlinx.coroutines.scheduling.c.nextParkedWorker` @AccessFlag PRIVATE_VOLATILE;
  `int` `kotlinx.coroutines.scheduling.c.workerCtl` @AccessFlag VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.c.b` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/scheduling/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2ec9e0.  v0:= constclass @type ^`kotlinx.coroutines.scheduling.c` @kind object;
  #L2ec9e4.  v1:= "workerCtl" @kind object;
  #L2ec9e8.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L2ec9ee.  v0:= temp @kind object;
  #L2ec9f0.  `@@kotlinx.coroutines.scheduling.c.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L2ec9f4.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.c` v0 @kind this, `kotlinx.coroutines.scheduling.CoroutineScheduler` v1 @kind object) @signature `Lkotlinx/coroutines/scheduling/c;.<init>:(Lkotlinx/coroutines/scheduling/CoroutineScheduler;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2eca08.  v0.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` := v1 @kind object;
  #L2eca0c.  call `<init>`(v0) @signature `Ljava/lang/Thread;.<init>:()V` @kind direct;
  #L2eca12.  v1:= 1I;
  #L2eca14.  call `setDaemon`(v0, v1) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L2eca1a.  v1:= new `kotlinx.coroutines.scheduling.p`;
  #L2eca1e.  call `<init>`(v1) @signature `Lkotlinx/coroutines/scheduling/p;.<init>:()V` @kind direct;
  #L2eca24.  v0.`kotlinx.coroutines.scheduling.c.c` @type ^`kotlinx.coroutines.scheduling.p` := v1 @kind object;
  #L2eca28.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.DORMANT` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2eca2c.  v0.`kotlinx.coroutines.scheduling.c.d` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` := v1 @kind object;
  #L2eca30.  v1:= 0I;
  #L2eca32.  v0.`kotlinx.coroutines.scheduling.c.workerCtl` @type ^`int` := v1;
  #L2eca36.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.f` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2eca3a.  v0.`kotlinx.coroutines.scheduling.c.nextParkedWorker` @type ^`java.lang.Object` := v1 @kind object;
  #L2eca3e.  v1:= `@@kotlin.random.Random.Default` @type ^`kotlin.random.Random$Default` @kind object;
  #L2eca42.  call temp:= `nextInt`(v1) @signature `Lkotlin/random/Random$Default;.nextInt:()I` @kind virtual;
  #L2eca48.  v1:= temp;
  #L2eca4a.  v0.`kotlinx.coroutines.scheduling.c.g` @type ^`int` := v1;
  #L2eca4e.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.c` v0 @kind this, `kotlinx.coroutines.scheduling.CoroutineScheduler` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/scheduling/c;.<init>:(Lkotlinx/coroutines/scheduling/CoroutineScheduler;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2eca60.  v0.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` := v1 @kind object;
  #L2eca64.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/c;.<init>:(Lkotlinx/coroutines/scheduling/CoroutineScheduler;)V` @kind direct;
  #L2eca6a.  call `o`(v0, v2) @signature `Lkotlinx/coroutines/scheduling/c;.o:(I)V` @kind virtual;
  #L2eca70.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.CoroutineScheduler` `a`(`kotlinx.coroutines.scheduling.c` v0 @kind object) @signature `Lkotlinx/coroutines/scheduling/c;.a:(Lkotlinx/coroutines/scheduling/c;)Lkotlinx/coroutines/scheduling/CoroutineScheduler;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2ec70c.  v0:= v0.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ec710.  return v0 @kind object;
}
procedure `void` `b`(`kotlinx.coroutines.scheduling.c` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/scheduling/c;.b:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2eca84.  if v4 != 0 then goto L2eca8a;
  #L2eca88.  return @kind void;
  #L2eca8a.  v4:= v3.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2eca8e.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.d` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L2eca92.  v1:= -2097152L;
  #L2eca98.  call temp:= `addAndGet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.addAndGet:(Ljava/lang/Object;J)J` @kind virtual;
  #L2eca9e.  v4:= v3.`kotlinx.coroutines.scheduling.c.d` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ecaa2.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.TERMINATED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ecaa6.  if v4 == v0 then goto L2ecade;
  #L2ecaaa.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2ecab0.  v0:= temp;
  #L2ecab2.  if v0 == 0 then goto L2ecad6;
  #L2ecab6.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.BLOCKING` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ecaba.  if v4 != v0 then goto L2ecac2;
  #L2ecabe.  v4:= 1I;
  #L2ecac0.  goto L2ecac4;
  #L2ecac2.  v4:= 0I;
  #L2ecac4.  if v4 == 0 then goto L2ecaca;
  #L2ecac8.  goto L2ecad6;
  #L2ecaca.  v4:= new `java.lang.AssertionError`;
  #L2ecace.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2ecad4.  throw v4;
  #L2ecad6.  v4:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.DORMANT` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ecada.  v3.`kotlinx.coroutines.scheduling.c.d` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` := v4 @kind object;
  #L2ecade.  return @kind void;
}
procedure `void` `c`(`kotlinx.coroutines.scheduling.c` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/scheduling/c;.c:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;

  #L2ecaf0.  if v1 != 0 then goto L2ecaf6;
  #L2ecaf4.  return @kind void;
  #L2ecaf6.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.BLOCKING` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ecafa.  call temp:= `s`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/c;.s:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;)Z` @kind virtual;
  #L2ecb00.  v1:= temp;
  #L2ecb02.  if v1 == 0 then goto L2ecb10;
  #L2ecb06.  v1:= v0.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ecb0a.  call `A0`(v1) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.A0:()V` @kind virtual;
  #L2ecb10.  return @kind void;
}
procedure `void` `d`(`kotlinx.coroutines.scheduling.c` v2 @kind this, `kotlinx.coroutines.scheduling.j` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/c;.d:(Lkotlinx/coroutines/scheduling/j;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2ecb24.  v0:= v3.`kotlinx.coroutines.scheduling.j.c` @type ^`kotlinx.coroutines.scheduling.k` @kind object;
  #L2ecb28.  call temp:= `b`(v0) @signature `Lkotlinx/coroutines/scheduling/k;.b:()I` @kind interface;
  #L2ecb2e.  v0:= temp;
  #L2ecb30.  call `i`(v2, v0) @signature `Lkotlinx/coroutines/scheduling/c;.i:(I)V` @kind direct;
  #L2ecb36.  call `c`(v2, v0) @signature `Lkotlinx/coroutines/scheduling/c;.c:(I)V` @kind direct;
  #L2ecb3c.  v1:= v2.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ecb40.  call `m0`(v1, v3) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.m0:(Lkotlinx/coroutines/scheduling/j;)V` @kind virtual;
  #L2ecb46.  call `b`(v2, v0) @signature `Lkotlinx/coroutines/scheduling/c;.b:(I)V` @kind direct;
  #L2ecb4c.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.j` `e`(`kotlinx.coroutines.scheduling.c` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/scheduling/c;.e:(Z)Lkotlinx/coroutines/scheduling/j;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2ec724.  v0:= 0I;
  #L2ec726.  if v3 == 0 then goto L2ec782;
  #L2ec72a.  v3:= v2.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ec72e.  v3:= v3.`kotlinx.coroutines.scheduling.CoroutineScheduler.g` @type ^`int`;
  #L2ec732.  v3:= v3 * 2;
  #L2ec736.  call temp:= `k`(v2, v3) @signature `Lkotlinx/coroutines/scheduling/c;.k:(I)I` @kind virtual;
  #L2ec73c.  v3:= temp;
  #L2ec73e.  if v3 != 0 then goto L2ec746;
  #L2ec742.  v3:= 1I;
  #L2ec744.  goto L2ec748;
  #L2ec746.  v3:= 0I;
  #L2ec748.  if v3 == 0 then goto L2ec75c;
  #L2ec74c.  call temp:= `m`(v2) @signature `Lkotlinx/coroutines/scheduling/c;.m:()Lkotlinx/coroutines/scheduling/j;` @kind direct;
  #L2ec752.  v1:= temp @kind object;
  #L2ec754.  if v1 != 0 then goto L2ec75a;
  #L2ec758.  goto L2ec75c;
  #L2ec75a.  return v1 @kind object;
  #L2ec75c.  v1:= v2.`kotlinx.coroutines.scheduling.c.c` @type ^`kotlinx.coroutines.scheduling.p` @kind object;
  #L2ec760.  call temp:= `h`(v1) @signature `Lkotlinx/coroutines/scheduling/p;.h:()Lkotlinx/coroutines/scheduling/j;` @kind virtual;
  #L2ec766.  v1:= temp @kind object;
  #L2ec768.  if v1 != 0 then goto L2ec780;
  #L2ec76c.  if v3 != 0 then goto L2ec78e;
  #L2ec770.  call temp:= `m`(v2) @signature `Lkotlinx/coroutines/scheduling/c;.m:()Lkotlinx/coroutines/scheduling/j;` @kind direct;
  #L2ec776.  v3:= temp @kind object;
  #L2ec778.  if v3 != 0 then goto L2ec77e;
  #L2ec77c.  goto L2ec78e;
  #L2ec77e.  return v3 @kind object;
  #L2ec780.  return v1 @kind object;
  #L2ec782.  call temp:= `m`(v2) @signature `Lkotlinx/coroutines/scheduling/c;.m:()Lkotlinx/coroutines/scheduling/j;` @kind direct;
  #L2ec788.  v3:= temp @kind object;
  #L2ec78a.  if v3 != 0 then goto L2ec796;
  #L2ec78e.  call temp:= `t`(v2, v0) @signature `Lkotlinx/coroutines/scheduling/c;.t:(Z)Lkotlinx/coroutines/scheduling/j;` @kind direct;
  #L2ec794.  v3:= temp @kind object;
  #L2ec796.  return v3 @kind object;
}
procedure `void` `i`(`kotlinx.coroutines.scheduling.c` v2 @kind this, `int` v3 ) @signature `Lkotlinx/coroutines/scheduling/c;.i:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2ecb60.  v0:= 0L;
  #L2ecb64.  v2.`kotlinx.coroutines.scheduling.c.e` @type ^`long` := v0 @kind wide;
  #L2ecb68.  v0:= v2.`kotlinx.coroutines.scheduling.c.d` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ecb6c.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.PARKING` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ecb70.  if v0 != v1 then goto L2ecba4;
  #L2ecb74.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2ecb7a.  v0:= temp;
  #L2ecb7c.  if v0 == 0 then goto L2ecb9c;
  #L2ecb80.  v0:= 1I;
  #L2ecb82.  if v3 != v0 then goto L2ecb88;
  #L2ecb86.  goto L2ecb8a;
  #L2ecb88.  v0:= 0I;
  #L2ecb8a.  if v0 == 0 then goto L2ecb90;
  #L2ecb8e.  goto L2ecb9c;
  #L2ecb90.  v3:= new `java.lang.AssertionError`;
  #L2ecb94.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2ecb9a.  throw v3;
  #L2ecb9c.  v3:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.BLOCKING` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ecba0.  v2.`kotlinx.coroutines.scheduling.c.d` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` := v3 @kind object;
  #L2ecba4.  return @kind void;
}
procedure `boolean` `j`(`kotlinx.coroutines.scheduling.c` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/c;.j:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2ec5ac.  v0:= v2.`kotlinx.coroutines.scheduling.c.nextParkedWorker` @type ^`java.lang.Object` @kind object;
  #L2ec5b0.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.f` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2ec5b4.  if v0 == v1 then goto L2ec5bc;
  #L2ec5b8.  v0:= 1I;
  #L2ec5ba.  goto L2ec5be;
  #L2ec5bc.  v0:= 0I;
  #L2ec5be.  return v0;
}
procedure `void` `l`(`kotlinx.coroutines.scheduling.c` v6 @kind this) @signature `Lkotlinx/coroutines/scheduling/c;.l:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2ecbb8.  v0:= v6.`kotlinx.coroutines.scheduling.c.e` @type ^`long` @kind wide;
  #L2ecbbc.  v2:= 0L;
  #L2ecbc0.  v4:= lcmp(v0, v2);
  #L2ecbc4.  if v4 != 0 then goto L2ecbde;
  #L2ecbc8.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L2ecbce.  v0:= temp @kind wide;
  #L2ecbd0.  v4:= v6.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ecbd4.  v4:= v4.`kotlinx.coroutines.scheduling.CoroutineScheduler.i` @type ^`long` @kind wide;
  #L2ecbd8.  v0:= v0 + v4 @kind long;
  #L2ecbda.  v6.`kotlinx.coroutines.scheduling.c.e` @type ^`long` := v0 @kind wide;
  #L2ecbde.  v0:= v6.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ecbe2.  v0:= v0.`kotlinx.coroutines.scheduling.CoroutineScheduler.i` @type ^`long` @kind wide;
  #L2ecbe6.  call `parkNanos`(v0) @signature `Ljava/util/concurrent/locks/LockSupport;.parkNanos:(J)V` @kind static;
  #L2ecbec.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L2ecbf2.  v0:= temp @kind wide;
  #L2ecbf4.  v4:= v6.`kotlinx.coroutines.scheduling.c.e` @type ^`long` @kind wide;
  #L2ecbf8.  v0:= v0 - v4 @kind long;
  #L2ecbfa.  v4:= lcmp(v0, v2);
  #L2ecbfe.  if v4 < 0 then goto L2ecc0c;
  #L2ecc02.  v6.`kotlinx.coroutines.scheduling.c.e` @type ^`long` := v2 @kind wide;
  #L2ecc06.  call `u`(v6) @signature `Lkotlinx/coroutines/scheduling/c;.u:()V` @kind direct;
  #L2ecc0c.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.j` `m`(`kotlinx.coroutines.scheduling.c` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/c;.m:()Lkotlinx/coroutines/scheduling/j;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2ec81c.  v0:= 2I;
  #L2ec81e.  call temp:= `k`(v1, v0) @signature `Lkotlinx/coroutines/scheduling/c;.k:(I)I` @kind virtual;
  #L2ec824.  v0:= temp;
  #L2ec826.  if v0 != 0 then goto L2ec858;
  #L2ec82a.  v0:= v1.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ec82e.  v0:= v0.`kotlinx.coroutines.scheduling.CoroutineScheduler.k` @type ^`kotlinx.coroutines.scheduling.f` @kind object;
  #L2ec832.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/y;.d:()Ljava/lang/Object;` @kind virtual;
  #L2ec838.  v0:= temp @kind object;
  #L2ec83a.  v0:= (`kotlinx.coroutines.scheduling.j`) v0 @kind object;
  #L2ec83e.  if v0 != 0 then goto L2ec856;
  #L2ec842.  v0:= v1.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ec846.  v0:= v0.`kotlinx.coroutines.scheduling.CoroutineScheduler.l` @type ^`kotlinx.coroutines.scheduling.f` @kind object;
  #L2ec84a.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/y;.d:()Ljava/lang/Object;` @kind virtual;
  #L2ec850.  v0:= temp @kind object;
  #L2ec852.  v0:= (`kotlinx.coroutines.scheduling.j`) v0 @kind object;
  #L2ec856.  return v0 @kind object;
  #L2ec858.  v0:= v1.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ec85c.  v0:= v0.`kotlinx.coroutines.scheduling.CoroutineScheduler.l` @type ^`kotlinx.coroutines.scheduling.f` @kind object;
  #L2ec860.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/y;.d:()Ljava/lang/Object;` @kind virtual;
  #L2ec866.  v0:= temp @kind object;
  #L2ec868.  v0:= (`kotlinx.coroutines.scheduling.j`) v0 @kind object;
  #L2ec86c.  if v0 != 0 then goto L2ec884;
  #L2ec870.  v0:= v1.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ec874.  v0:= v0.`kotlinx.coroutines.scheduling.CoroutineScheduler.k` @type ^`kotlinx.coroutines.scheduling.f` @kind object;
  #L2ec878.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/y;.d:()Ljava/lang/Object;` @kind virtual;
  #L2ec87e.  v0:= temp @kind object;
  #L2ec880.  v0:= (`kotlinx.coroutines.scheduling.j`) v0 @kind object;
  #L2ec884.  return v0 @kind object;
}
procedure `void` `n`(`kotlinx.coroutines.scheduling.c` v7 @kind this) @signature `Lkotlinx/coroutines/scheduling/c;.n:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2ecc38.  v0:= 0I;
  #L2ecc3a.  v1:= 0I;
  #L2ecc3c.  v2:= v7.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ecc40.  call temp:= `isTerminated`(v2) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.isTerminated:()Z` @kind virtual;
  #L2ecc46.  v2:= temp;
  #L2ecc48.  if v2 != 0 then goto L2eccb8;
  #L2ecc4c.  v2:= v7.`kotlinx.coroutines.scheduling.c.d` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ecc50.  v3:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.TERMINATED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ecc54.  if v2 == v3 then goto L2eccb8;
  #L2ecc58.  v2:= v7.`kotlinx.coroutines.scheduling.c.h` @type ^`boolean` @kind boolean;
  #L2ecc5c.  call temp:= `f`(v7, v2) @signature `Lkotlinx/coroutines/scheduling/c;.f:(Z)Lkotlinx/coroutines/scheduling/j;` @kind virtual;
  #L2ecc62.  v2:= temp @kind object;
  #L2ecc64.  v3:= 0L;
  #L2ecc68.  if v2 == 0 then goto L2ecc78;
  #L2ecc6c.  v7.`kotlinx.coroutines.scheduling.c.f` @type ^`long` := v3 @kind wide;
  #L2ecc70.  call `d`(v7, v2) @signature `Lkotlinx/coroutines/scheduling/c;.d:(Lkotlinx/coroutines/scheduling/j;)V` @kind direct;
  #L2ecc76.  goto L2ecc3a;
  #L2ecc78.  v7.`kotlinx.coroutines.scheduling.c.h` @type ^`boolean` := v0 @kind boolean;
  #L2ecc7c.  v5:= v7.`kotlinx.coroutines.scheduling.c.f` @type ^`long` @kind wide;
  #L2ecc80.  v2:= lcmp(v5, v3);
  #L2ecc84.  if v2 == 0 then goto L2eccb0;
  #L2ecc88.  if v1 != 0 then goto L2ecc90;
  #L2ecc8c.  v1:= 1I;
  #L2ecc8e.  goto L2ecc3c;
  #L2ecc90.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.PARKING` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ecc94.  call temp:= `s`(v7, v1) @signature `Lkotlinx/coroutines/scheduling/c;.s:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;)Z` @kind virtual;
  #L2ecc9a.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L2ecca0.  v1:= v7.`kotlinx.coroutines.scheduling.c.f` @type ^`long` @kind wide;
  #L2ecca4.  call `parkNanos`(v1) @signature `Ljava/util/concurrent/locks/LockSupport;.parkNanos:(J)V` @kind static;
  #L2eccaa.  v7.`kotlinx.coroutines.scheduling.c.f` @type ^`long` := v3 @kind wide;
  #L2eccae.  goto L2ecc3a;
  #L2eccb0.  call `r`(v7) @signature `Lkotlinx/coroutines/scheduling/c;.r:()V` @kind direct;
  #L2eccb6.  goto L2ecc3c;
  #L2eccb8.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.TERMINATED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2eccbc.  call temp:= `s`(v7, v0) @signature `Lkotlinx/coroutines/scheduling/c;.s:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;)Z` @kind virtual;
  #L2eccc2.  return @kind void;
}
procedure `boolean` `q`(`kotlinx.coroutines.scheduling.c` v10 @kind this) @signature `Lkotlinx/coroutines/scheduling/c;.q:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2ec5d0.  v0:= v10.`kotlinx.coroutines.scheduling.c.d` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ec5d4.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.CPU_ACQUIRED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ec5d8.  v2:= 0I;
  #L2ec5da.  v3:= 1I;
  #L2ec5dc.  if v0 != v1 then goto L2ec5e4;
  #L2ec5e0.  v2:= 1I;
  #L2ec5e2.  goto L2ec638;
  #L2ec5e4.  v0:= v10.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ec5e8.  v6:= v0.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` @kind wide;
  #L2ec5ec.  v4:= 9223367638808264704L;
  #L2ec5f6.  v4:= v4 ^& v6 @kind long;
  #L2ec5f8.  v1:= 42I;
  #L2ec5fc.  v4:= v4 ^> v1 @kind long;
  #L2ec5fe.  v1:= (`int`) v4 @kind l2i;
  #L2ec600.  if v1 != 0 then goto L2ec608;
  #L2ec604.  v0:= 0I;
  #L2ec606.  goto L2ec62a;
  #L2ec608.  v4:= 4398046511104L;
  #L2ec612.  v8:= v6 - v4 @kind long;
  #L2ec616.  v4:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.d` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L2ec61a.  v5:= v0 @kind object;
  #L2ec61c.  call temp:= `compareAndSet`(v4, v5, v6, v8) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L2ec622.  v1:= temp;
  #L2ec624.  if v1 == 0 then goto L2ec5e8;
  #L2ec628.  v0:= 1I;
  #L2ec62a.  if v0 == 0 then goto L2ec638;
  #L2ec62e.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.CPU_ACQUIRED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ec632.  v10.`kotlinx.coroutines.scheduling.c.d` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` := v0 @kind object;
  #L2ec636.  goto L2ec5e0;
  #L2ec638.  return v2;
}
procedure `void` `r`(`kotlinx.coroutines.scheduling.c` v3 @kind this) @signature `Lkotlinx/coroutines/scheduling/c;.r:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ecd4c.  call temp:= `j`(v3) @signature `Lkotlinx/coroutines/scheduling/c;.j:()Z` @kind direct;
  #L2ecd52.  v0:= temp;
  #L2ecd54.  if v0 != 0 then goto L2ecd64;
  #L2ecd58.  v0:= v3.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ecd5c.  call temp:= `x`(v0, v3) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.x:(Lkotlinx/coroutines/scheduling/c;)Z` @kind virtual;
  #L2ecd62.  return @kind void;
  #L2ecd64.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2ecd6a.  v0:= temp;
  #L2ecd6c.  if v0 == 0 then goto L2ecd98;
  #L2ecd70.  v0:= v3.`kotlinx.coroutines.scheduling.c.c` @type ^`kotlinx.coroutines.scheduling.p` @kind object;
  #L2ecd74.  call temp:= `f`(v0) @signature `Lkotlinx/coroutines/scheduling/p;.f:()I` @kind virtual;
  #L2ecd7a.  v0:= temp;
  #L2ecd7c.  if v0 != 0 then goto L2ecd84;
  #L2ecd80.  v0:= 1I;
  #L2ecd82.  goto L2ecd86;
  #L2ecd84.  v0:= 0I;
  #L2ecd86.  if v0 == 0 then goto L2ecd8c;
  #L2ecd8a.  goto L2ecd98;
  #L2ecd8c.  v0:= new `java.lang.AssertionError`;
  #L2ecd90.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2ecd96.  throw v0;
  #L2ecd98.  v0:= -1I;
  #L2ecd9a.  v3.`kotlinx.coroutines.scheduling.c.workerCtl` @type ^`int` := v0;
  #L2ecd9e.  call temp:= `j`(v3) @signature `Lkotlinx/coroutines/scheduling/c;.j:()Z` @kind direct;
  #L2ecda4.  v1:= temp;
  #L2ecda6.  if v1 == 0 then goto L2ecde8;
  #L2ecdaa.  v1:= v3.`kotlinx.coroutines.scheduling.c.workerCtl` @type ^`int`;
  #L2ecdae.  if v1 != v0 then goto L2ecde8;
  #L2ecdb2.  v1:= v3.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ecdb6.  call temp:= `isTerminated`(v1) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.isTerminated:()Z` @kind virtual;
  #L2ecdbc.  v1:= temp;
  #L2ecdbe.  if v1 != 0 then goto L2ecde8;
  #L2ecdc2.  v1:= v3.`kotlinx.coroutines.scheduling.c.d` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ecdc6.  v2:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.TERMINATED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ecdca.  if v1 != v2 then goto L2ecdd0;
  #L2ecdce.  goto L2ecde8;
  #L2ecdd0.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.PARKING` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ecdd4.  call temp:= `s`(v3, v1) @signature `Lkotlinx/coroutines/scheduling/c;.s:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;)Z` @kind virtual;
  #L2ecdda.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L2ecde0.  call `l`(v3) @signature `Lkotlinx/coroutines/scheduling/c;.l:()V` @kind direct;
  #L2ecde6.  goto L2ecd9e;
  #L2ecde8.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.j` `t`(`kotlinx.coroutines.scheduling.c` v19 @kind this, `boolean` v20 ) @signature `Lkotlinx/coroutines/scheduling/c;.t:(Z)Lkotlinx/coroutines/scheduling/j;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L2ec898.  v0:= v19 @kind object;
  #L2ec89c.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2ec8a2.  v1:= temp;
  #L2ec8a4.  v2:= 0I;
  #L2ec8a6.  v3:= 1I;
  #L2ec8a8.  if v1 == 0 then goto L2ec8d4;
  #L2ec8ac.  v1:= v0.`kotlinx.coroutines.scheduling.c.c` @type ^`kotlinx.coroutines.scheduling.p` @kind object;
  #L2ec8b0.  call temp:= `f`(v1) @signature `Lkotlinx/coroutines/scheduling/p;.f:()I` @kind virtual;
  #L2ec8b6.  v1:= temp;
  #L2ec8b8.  if v1 != 0 then goto L2ec8c0;
  #L2ec8bc.  v1:= 1I;
  #L2ec8be.  goto L2ec8c2;
  #L2ec8c0.  v1:= 0I;
  #L2ec8c2.  if v1 == 0 then goto L2ec8c8;
  #L2ec8c6.  goto L2ec8d4;
  #L2ec8c8.  v1:= new `java.lang.AssertionError`;
  #L2ec8cc.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2ec8d2.  throw v1;
  #L2ec8d4.  v1:= v0.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ec8d8.  v4:= v1.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` @kind wide;
  #L2ec8dc.  v6:= 2097151L;
  #L2ec8e2.  v4:= v4 ^& v6 @kind long;
  #L2ec8e4.  v1:= (`int`) v4 @kind l2i;
  #L2ec8e6.  v4:= 2I;
  #L2ec8e8.  v5:= 0I;
  #L2ec8ea.  if v1 >= v4 then goto L2ec8f0;
  #L2ec8ee.  return v5 @kind object;
  #L2ec8f0.  call temp:= `k`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/c;.k:(I)I` @kind virtual;
  #L2ec8f6.  v4:= temp;
  #L2ec8f8.  v6:= v0.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ec8fc.  v7:= 9223372036854775807L;
  #L2ec906.  v10:= v7 @kind wide;
  #L2ec908.  v9:= 0I;
  #L2ec90a.  v12:= 0L;
  #L2ec90e.  if v9 >= v1 then goto L2ec9bc;
  #L2ec912.  v9:= v9 + 1;
  #L2ec916.  v4:= v4 + v3 @kind int;
  #L2ec918.  if v4 <= v1 then goto L2ec91e;
  #L2ec91c.  v4:= 1I;
  #L2ec91e.  v14:= v6.`kotlinx.coroutines.scheduling.CoroutineScheduler.m` @type ^`kotlinx.coroutines.internal.h0` @kind object;
  #L2ec922.  call temp:= `b`(v14, v4) @signature `Lkotlinx/coroutines/internal/h0;.b:(I)Ljava/lang/Object;` @kind virtual;
  #L2ec928.  v14:= temp @kind object;
  #L2ec92a.  v14:= (`kotlinx.coroutines.scheduling.c`) v14 @kind object;
  #L2ec92e.  if v14 == 0 then goto L2ec90a;
  #L2ec932.  if v14 == v0 then goto L2ec90a;
  #L2ec936.  call temp:= `a`() @signature `Lkotlinx/coroutines/o0;.a:()Z` @kind static;
  #L2ec93c.  v15:= temp;
  #L2ec93e.  if v15 == 0 then goto L2ec96a;
  #L2ec942.  v15:= v0.`kotlinx.coroutines.scheduling.c.c` @type ^`kotlinx.coroutines.scheduling.p` @kind object;
  #L2ec946.  call temp:= `f`(v15) @signature `Lkotlinx/coroutines/scheduling/p;.f:()I` @kind virtual;
  #L2ec94c.  v15:= temp;
  #L2ec94e.  if v15 != 0 then goto L2ec956;
  #L2ec952.  v15:= 1I;
  #L2ec954.  goto L2ec958;
  #L2ec956.  v15:= 0I;
  #L2ec958.  if v15 == 0 then goto L2ec95e;
  #L2ec95c.  goto L2ec96a;
  #L2ec95e.  v1:= new `java.lang.AssertionError`;
  #L2ec962.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2ec968.  throw v1;
  #L2ec96a.  if v20 == 0 then goto L2ec980;
  #L2ec96e.  v15:= v0.`kotlinx.coroutines.scheduling.c.c` @type ^`kotlinx.coroutines.scheduling.p` @kind object;
  #L2ec972.  v14:= v14.`kotlinx.coroutines.scheduling.c.c` @type ^`kotlinx.coroutines.scheduling.p` @kind object;
  #L2ec976.  call temp:= `k`(v15, v14) @signature `Lkotlinx/coroutines/scheduling/p;.k:(Lkotlinx/coroutines/scheduling/p;)J` @kind virtual;
  #L2ec97c.  v14:= temp @kind wide;
  #L2ec97e.  goto L2ec990;
  #L2ec980.  v15:= v0.`kotlinx.coroutines.scheduling.c.c` @type ^`kotlinx.coroutines.scheduling.p` @kind object;
  #L2ec984.  v14:= v14.`kotlinx.coroutines.scheduling.c.c` @type ^`kotlinx.coroutines.scheduling.p` @kind object;
  #L2ec988.  call temp:= `l`(v15, v14) @signature `Lkotlinx/coroutines/scheduling/p;.l:(Lkotlinx/coroutines/scheduling/p;)J` @kind virtual;
  #L2ec98e.  v14:= temp @kind wide;
  #L2ec990.  v16:= -1L;
  #L2ec994.  v18:= lcmp(v14, v16);
  #L2ec998.  if v18 != 0 then goto L2ec9aa;
  #L2ec99c.  v1:= v0.`kotlinx.coroutines.scheduling.c.c` @type ^`kotlinx.coroutines.scheduling.p` @kind object;
  #L2ec9a0.  call temp:= `h`(v1) @signature `Lkotlinx/coroutines/scheduling/p;.h:()Lkotlinx/coroutines/scheduling/j;` @kind virtual;
  #L2ec9a6.  v1:= temp @kind object;
  #L2ec9a8.  return v1 @kind object;
  #L2ec9aa.  v16:= lcmp(v14, v12);
  #L2ec9ae.  if v16 <= 0 then goto L2ec90a;
  #L2ec9b2.  call temp:= `min`(v10, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2ec9b8.  v10:= temp @kind wide;
  #L2ec9ba.  goto L2ec90a;
  #L2ec9bc.  v1:= lcmp(v10, v7);
  #L2ec9c0.  if v1 == 0 then goto L2ec9c6;
  #L2ec9c4.  goto L2ec9c8;
  #L2ec9c6.  v10:= v12 @kind wide;
  #L2ec9c8.  v0.`kotlinx.coroutines.scheduling.c.f` @type ^`long` := v10 @kind wide;
  #L2ec9cc.  return v5 @kind object;
}
procedure `void` `u`(`kotlinx.coroutines.scheduling.c` v8 @kind this) @signature `Lkotlinx/coroutines/scheduling/c;.u:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2ecdfc.  v0:= v8.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ece00.  v1:= v0.`kotlinx.coroutines.scheduling.CoroutineScheduler.m` @type ^`kotlinx.coroutines.internal.h0` @kind object;
  #L2ece04.  @monitorenter v1
  #L2ece06.  call temp:= `isTerminated`(v0) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.isTerminated:()Z` @kind virtual;
  #L2ece0c.  v2:= temp;
  #L2ece0e.  if v2 == 0 then goto L2ece16;
  #L2ece12.  @monitorexit v1
  #L2ece14.  return @kind void;
  #L2ece16.  v2:= v0.`kotlinx.coroutines.scheduling.CoroutineScheduler.controlState` @type ^`long` @kind wide;
  #L2ece1a.  v4:= 2097151L;
  #L2ece20.  v2:= v2 ^& v4 @kind long;
  #L2ece22.  v3:= (`int`) v2 @kind l2i;
  #L2ece24.  v2:= v0.`kotlinx.coroutines.scheduling.CoroutineScheduler.g` @type ^`int`;
  #L2ece28.  if v3 > v2 then goto L2ece30;
  #L2ece2c.  @monitorexit v1
  #L2ece2e.  return @kind void;
  #L2ece30.  v2:= `@@kotlinx.coroutines.scheduling.c.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L2ece34.  v3:= -1I;
  #L2ece36.  v6:= 1I;
  #L2ece38.  call temp:= `compareAndSet`(v2, v8, v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L2ece3e.  v2:= temp;
  #L2ece40.  if v2 != 0 then goto L2ece48;
  #L2ece44.  @monitorexit v1
  #L2ece46.  return @kind void;
  #L2ece48.  call temp:= `g`(v8) @signature `Lkotlinx/coroutines/scheduling/c;.g:()I` @kind virtual;
  #L2ece4e.  v2:= temp;
  #L2ece50.  v3:= 0I;
  #L2ece52.  call `o`(v8, v3) @signature `Lkotlinx/coroutines/scheduling/c;.o:(I)V` @kind virtual;
  #L2ece58.  call `C`(v0, v8, v2, v3) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.C:(Lkotlinx/coroutines/scheduling/c;II)V` @kind virtual;
  #L2ece5e.  v3:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.d` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L2ece62.  call temp:= `getAndDecrement`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.getAndDecrement:(Ljava/lang/Object;)J` @kind virtual;
  #L2ece68.  v6:= temp @kind wide;
  #L2ece6a.  v4:= v4 ^& v6 @kind long;
  #L2ece6c.  v3:= (`int`) v4 @kind l2i;
  #L2ece6e.  if v3 == v2 then goto L2ece9e;
  #L2ece72.  v4:= v0.`kotlinx.coroutines.scheduling.CoroutineScheduler.m` @type ^`kotlinx.coroutines.internal.h0` @kind object;
  #L2ece76.  call temp:= `b`(v4, v3) @signature `Lkotlinx/coroutines/internal/h0;.b:(I)Ljava/lang/Object;` @kind virtual;
  #L2ece7c.  v4:= temp @kind object;
  #L2ece7e.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2ece84.  v4:= (`kotlinx.coroutines.scheduling.c`) v4 @kind object;
  #L2ece88.  v5:= v0.`kotlinx.coroutines.scheduling.CoroutineScheduler.m` @type ^`kotlinx.coroutines.internal.h0` @kind object;
  #L2ece8c.  call `c`(v5, v2, v4) @signature `Lkotlinx/coroutines/internal/h0;.c:(ILjava/lang/Object;)V` @kind virtual;
  #L2ece92.  call `o`(v4, v2) @signature `Lkotlinx/coroutines/scheduling/c;.o:(I)V` @kind virtual;
  #L2ece98.  call `C`(v0, v4, v3, v2) @signature `Lkotlinx/coroutines/scheduling/CoroutineScheduler;.C:(Lkotlinx/coroutines/scheduling/c;II)V` @kind virtual;
  #L2ece9e.  v0:= v0.`kotlinx.coroutines.scheduling.CoroutineScheduler.m` @type ^`kotlinx.coroutines.internal.h0` @kind object;
  #L2ecea2.  v2:= 0I;
  #L2ecea4.  call `c`(v0, v3, v2) @signature `Lkotlinx/coroutines/internal/h0;.c:(ILjava/lang/Object;)V` @kind virtual;
  #L2eceaa.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2eceae.  @monitorexit v1
  #L2eceb0.  v0:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.TERMINATED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2eceb4.  v8.`kotlinx.coroutines.scheduling.c.d` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` := v0 @kind object;
  #L2eceb8.  return @kind void;
  #L2eceba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ecebc.  @monitorexit v1
  #L2ecebe.  throw v0;
  catch `java.lang.Throwable` @[L2ece06..L2ece0e] goto L2eceba;
  catch `java.lang.Throwable` @[L2ece16..L2ece28] goto L2eceba;
  catch `java.lang.Throwable` @[L2ece30..L2ece40] goto L2eceba;
  catch `java.lang.Throwable` @[L2ece48..L2eceae] goto L2eceba;
}
procedure `kotlinx.coroutines.scheduling.j` `f`(`kotlinx.coroutines.scheduling.c` v1 @kind this, `boolean` v2 ) @signature `Lkotlinx/coroutines/scheduling/c;.f:(Z)Lkotlinx/coroutines/scheduling/j;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ec7a8.  call temp:= `q`(v1) @signature `Lkotlinx/coroutines/scheduling/c;.q:()Z` @kind direct;
  #L2ec7ae.  v0:= temp;
  #L2ec7b0.  if v0 == 0 then goto L2ec7be;
  #L2ec7b4.  call temp:= `e`(v1, v2) @signature `Lkotlinx/coroutines/scheduling/c;.e:(Z)Lkotlinx/coroutines/scheduling/j;` @kind direct;
  #L2ec7ba.  v2:= temp @kind object;
  #L2ec7bc.  return v2 @kind object;
  #L2ec7be.  if v2 == 0 then goto L2ec7e8;
  #L2ec7c2.  v2:= v1.`kotlinx.coroutines.scheduling.c.c` @type ^`kotlinx.coroutines.scheduling.p` @kind object;
  #L2ec7c6.  call temp:= `h`(v2) @signature `Lkotlinx/coroutines/scheduling/p;.h:()Lkotlinx/coroutines/scheduling/j;` @kind virtual;
  #L2ec7cc.  v2:= temp @kind object;
  #L2ec7ce.  if v2 != 0 then goto L2ec7fc;
  #L2ec7d2.  v2:= v1.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ec7d6.  v2:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.l` @type ^`kotlinx.coroutines.scheduling.f` @kind object;
  #L2ec7da.  call temp:= `d`(v2) @signature `Lkotlinx/coroutines/internal/y;.d:()Ljava/lang/Object;` @kind virtual;
  #L2ec7e0.  v2:= temp @kind object;
  #L2ec7e2.  v2:= (`kotlinx.coroutines.scheduling.j`) v2 @kind object;
  #L2ec7e6.  goto L2ec7fc;
  #L2ec7e8.  v2:= v1.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ec7ec.  v2:= v2.`kotlinx.coroutines.scheduling.CoroutineScheduler.l` @type ^`kotlinx.coroutines.scheduling.f` @kind object;
  #L2ec7f0.  call temp:= `d`(v2) @signature `Lkotlinx/coroutines/internal/y;.d:()Ljava/lang/Object;` @kind virtual;
  #L2ec7f6.  v2:= temp @kind object;
  #L2ec7f8.  v2:= (`kotlinx.coroutines.scheduling.j`) v2 @kind object;
  #L2ec7fc.  if v2 != 0 then goto L2ec80a;
  #L2ec800.  v2:= 1I;
  #L2ec802.  call temp:= `t`(v1, v2) @signature `Lkotlinx/coroutines/scheduling/c;.t:(Z)Lkotlinx/coroutines/scheduling/j;` @kind direct;
  #L2ec808.  v2:= temp @kind object;
  #L2ec80a.  return v2 @kind object;
}
procedure `int` `g`(`kotlinx.coroutines.scheduling.c` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/c;.g:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ec694.  v0:= v1.`kotlinx.coroutines.scheduling.c.indexInArray` @type ^`int`;
  #L2ec698.  return v0;
}
procedure `java.lang.Object` `h`(`kotlinx.coroutines.scheduling.c` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/c;.h:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2ec6f4.  v0:= v1.`kotlinx.coroutines.scheduling.c.nextParkedWorker` @type ^`java.lang.Object` @kind object;
  #L2ec6f8.  return v0 @kind object;
}
procedure `int` `k`(`kotlinx.coroutines.scheduling.c` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/scheduling/c;.k:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ec6ac.  v0:= v3.`kotlinx.coroutines.scheduling.c.g` @type ^`int`;
  #L2ec6b0.  v1:= v0 ^< 13;
  #L2ec6b4.  v0:= v0 ^~ v1 @kind int;
  #L2ec6b6.  v1:= v0 ^> 17;
  #L2ec6ba.  v0:= v0 ^~ v1 @kind int;
  #L2ec6bc.  v1:= v0 ^< 5;
  #L2ec6c0.  v0:= v0 ^~ v1 @kind int;
  #L2ec6c2.  v3.`kotlinx.coroutines.scheduling.c.g` @type ^`int` := v0;
  #L2ec6c6.  v1:= v4 + -1;
  #L2ec6ca.  v2:= v1 ^& v4 @kind int;
  #L2ec6ce.  if v2 != 0 then goto L2ec6d8;
  #L2ec6d2.  v4:= v0 ^& v1 @kind int;
  #L2ec6d6.  return v4;
  #L2ec6d8.  v1:= 2147483647I;
  #L2ec6de.  v0:= v0 ^& v1 @kind int;
  #L2ec6e0.  v0:= v0 %% v4 @kind int;
  #L2ec6e2.  return v0;
}
procedure `void` `o`(`kotlinx.coroutines.scheduling.c` v2 @kind this, `int` v3 ) @signature `Lkotlinx/coroutines/scheduling/c;.o:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2eccd4.  v0:= new `java.lang.StringBuilder`;
  #L2eccd8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2eccde.  v1:= v2.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ecce2.  v1:= v1.`kotlinx.coroutines.scheduling.CoroutineScheduler.j` @type ^`java.lang.String` @kind object;
  #L2ecce6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2eccec.  v1:= "-worker-" @kind object;
  #L2eccf0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2eccf6.  if v3 != 0 then goto L2ecd00;
  #L2eccfa.  v1:= "TERMINATED" @kind object;
  #L2eccfe.  goto L2ecd08;
  #L2ecd00.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L2ecd06.  v1:= temp @kind object;
  #L2ecd08.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ecd0e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ecd14.  v0:= temp @kind object;
  #L2ecd16.  call `setName`(v2, v0) @signature `Ljava/lang/Thread;.setName:(Ljava/lang/String;)V` @kind virtual;
  #L2ecd1c.  v2.`kotlinx.coroutines.scheduling.c.indexInArray` @type ^`int` := v3;
  #L2ecd20.  return @kind void;
}
procedure `void` `p`(`kotlinx.coroutines.scheduling.c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/scheduling/c;.p:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2ecd34.  v0.`kotlinx.coroutines.scheduling.c.nextParkedWorker` @type ^`java.lang.Object` := v1 @kind object;
  #L2ecd38.  return @kind void;
}
procedure `void` `run`(`kotlinx.coroutines.scheduling.c` v0 @kind this) @signature `Lkotlinx/coroutines/scheduling/c;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L2ecc20.  call `n`(v0) @signature `Lkotlinx/coroutines/scheduling/c;.n:()V` @kind direct;
  #L2ecc26.  return @kind void;
}
procedure `boolean` `s`(`kotlinx.coroutines.scheduling.c` v6 @kind this, `kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` v7 @kind object) @signature `Lkotlinx/coroutines/scheduling/c;.s:(Lkotlinx/coroutines/scheduling/CoroutineScheduler$WorkerState;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2ec64c.  v0:= v6.`kotlinx.coroutines.scheduling.c.d` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ec650.  v1:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState.CPU_ACQUIRED` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` @kind object;
  #L2ec654.  if v0 != v1 then goto L2ec65c;
  #L2ec658.  v1:= 1I;
  #L2ec65a.  goto L2ec65e;
  #L2ec65c.  v1:= 0I;
  #L2ec65e.  if v1 == 0 then goto L2ec67a;
  #L2ec662.  v2:= v6.`kotlinx.coroutines.scheduling.c.i` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler` @kind object;
  #L2ec666.  v3:= `@@kotlinx.coroutines.scheduling.CoroutineScheduler.d` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L2ec66a.  v4:= 4398046511104L;
  #L2ec674.  call temp:= `addAndGet`(v3, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.addAndGet:(Ljava/lang/Object;J)J` @kind virtual;
  #L2ec67a.  if v0 == v7 then goto L2ec682;
  #L2ec67e.  v6.`kotlinx.coroutines.scheduling.c.d` @type ^`kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState` := v7 @kind object;
  #L2ec682.  return v1;
}
