record `kotlinx.coroutines.debug.internal.g` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.ref.WeakReference` @kind class {
  `int` `kotlinx.coroutines.debug.internal.g.a` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.g` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.ref.ReferenceQueue` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/g;.<init>:(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2d9be0.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V` @kind direct;
  #L2d9be6.  if v1 != 0 then goto L2d9bee;
  #L2d9bea.  v1:= 0I;
  #L2d9bec.  goto L2d9bf6;
  #L2d9bee.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2d9bf4.  v1:= temp;
  #L2d9bf6.  v0.`kotlinx.coroutines.debug.internal.g.a` @type ^`int` := v1;
  #L2d9bfa.  return @kind void;
}
