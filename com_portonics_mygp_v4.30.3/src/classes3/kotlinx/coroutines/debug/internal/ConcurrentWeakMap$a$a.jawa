record `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMutableIterator` @kind interface {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.c` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.d` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @AccessFlag PRIVATE;
  `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v0 @kind this, `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2d8a80.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.f` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` := v1 @kind object;
  #L2d8a84.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d8a8a.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @type ^`kotlin.jvm.functions.Function2` := v2 @kind object;
  #L2d8a8e.  v1:= -1I;
  #L2d8a90.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.c` @type ^`int` := v1;
  #L2d8a94.  call `a`(v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.a:()V` @kind direct;
  #L2d8a9a.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.a:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2d8aac.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.c` @type ^`int`;
  #L2d8ab0.  v0:= v0 + 1;
  #L2d8ab4.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.c` @type ^`int` := v0;
  #L2d8ab8.  v1:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.f` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L2d8abc.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.a:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;)I` @kind static;
  #L2d8ac2.  v1:= temp;
  #L2d8ac4.  if v0 >= v1 then goto L2d8b26;
  #L2d8ac8.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.f` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L2d8acc.  v0:= v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2d8ad0.  v1:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.c` @type ^`int`;
  #L2d8ad4.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2d8ada.  v0:= temp @kind object;
  #L2d8adc.  v0:= (`kotlinx.coroutines.debug.internal.g`) v0 @kind object;
  #L2d8ae0.  if v0 != 0 then goto L2d8ae8;
  #L2d8ae4.  v0:= 0I;
  #L2d8ae6.  goto L2d8af0;
  #L2d8ae8.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2d8aee.  v0:= temp @kind object;
  #L2d8af0.  if v0 != 0 then goto L2d8af6;
  #L2d8af4.  goto L2d8aac;
  #L2d8af6.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.d` @type ^`java.lang.Object` := v0 @kind object;
  #L2d8afa.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.f` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L2d8afe.  v0:= v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2d8b02.  v1:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.c` @type ^`int`;
  #L2d8b06.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2d8b0c.  v0:= temp @kind object;
  #L2d8b0e.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.debug.internal.h` @kind boolean;
  #L2d8b12.  if v1 == 0 then goto L2d8b1e;
  #L2d8b16.  v0:= (`kotlinx.coroutines.debug.internal.h`) v0 @kind object;
  #L2d8b1a.  v0:= v0.`kotlinx.coroutines.debug.internal.h.a` @type ^`java.lang.Object` @kind object;
  #L2d8b1e.  if v0 == 0 then goto L2d8aac;
  #L2d8b22.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @type ^`java.lang.Object` := v0 @kind object;
  #L2d8b26.  return @kind void;
}
procedure `java.lang.Void` `b`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.b:()Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d8a5c.  call temp:= `c`() @signature `Lkotlinx/coroutines/debug/internal/b;.c:()Ljava/lang/Void;` @kind static;
  #L2d8a62.  v0:= new `kotlin.KotlinNothingValueException`;
  #L2d8a66.  call `<init>`(v0) @signature `Lkotlin/KotlinNothingValueException;.<init>:()V` @kind direct;
  #L2d8a6c.  throw v0;
}
procedure `boolean` `hasNext`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d89c0.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.c` @type ^`int`;
  #L2d89c4.  v1:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.f` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L2d89c8.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.a:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;)I` @kind static;
  #L2d89ce.  v1:= temp;
  #L2d89d0.  if v0 >= v1 then goto L2d89d8;
  #L2d89d4.  v0:= 1I;
  #L2d89d6.  goto L2d89da;
  #L2d89d8.  v0:= 0I;
  #L2d89da.  return v0;
}
procedure `java.lang.Object` `next`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v3 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2d89ec.  v0:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.c` @type ^`int`;
  #L2d89f0.  v1:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.f` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L2d89f4.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.a:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;)I` @kind static;
  #L2d89fa.  v1:= temp;
  #L2d89fc.  if v0 >= v1 then goto L2d8a40;
  #L2d8a00.  v0:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L2d8a04.  v1:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.d` @type ^`java.lang.Object` @kind object;
  #L2d8a08.  if v1 != 0 then goto L2d8a1a;
  #L2d8a0c.  v1:= "key" @kind object;
  #L2d8a10.  call `throwUninitializedPropertyAccessException`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.throwUninitializedPropertyAccessException:(Ljava/lang/String;)V` @kind static;
  #L2d8a16.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2d8a1a.  v2:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @type ^`java.lang.Object` @kind object;
  #L2d8a1e.  if v2 != 0 then goto L2d8a30;
  #L2d8a22.  v2:= "value" @kind object;
  #L2d8a26.  call `throwUninitializedPropertyAccessException`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.throwUninitializedPropertyAccessException:(Ljava/lang/String;)V` @kind static;
  #L2d8a2c.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2d8a30.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2d8a36.  v0:= temp @kind object;
  #L2d8a38.  call `a`(v3) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.a:()V` @kind direct;
  #L2d8a3e.  return v0 @kind object;
  #L2d8a40.  v0:= new `java.util.NoSuchElementException`;
  #L2d8a44.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2d8a4a.  throw v0;
}
procedure `void` `remove`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v0 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.remove:()V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2d8b38.  call temp:= `b`(v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.b:()Ljava/lang/Void;` @kind virtual;
  #L2d8b3e.  return @kind void;
}
