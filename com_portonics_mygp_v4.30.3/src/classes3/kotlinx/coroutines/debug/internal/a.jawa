record `kotlinx.coroutines.debug.internal.a` @kind class @AccessFlag FINAL extends `java.util.Map$Entry` @kind interface, `kotlin.jvm.internal.markers.KMutableMap$Entry` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.debug.internal.a.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `kotlinx.coroutines.debug.internal.a.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/a;.<init>:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2d8fa0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d8fa6.  v0.`kotlinx.coroutines.debug.internal.a.b` @type ^`java.lang.Object` := v1 @kind object;
  #L2d8faa.  v0.`kotlinx.coroutines.debug.internal.a.c` @type ^`java.lang.Object` := v2 @kind object;
  #L2d8fae.  return @kind void;
}
procedure `java.lang.Object` `getKey`(`kotlinx.coroutines.debug.internal.a` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/a;.getKey:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d8f4c.  v0:= v1.`kotlinx.coroutines.debug.internal.a.b` @type ^`java.lang.Object` @kind object;
  #L2d8f50.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`kotlinx.coroutines.debug.internal.a` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/a;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d8f64.  v0:= v1.`kotlinx.coroutines.debug.internal.a.c` @type ^`java.lang.Object` @kind object;
  #L2d8f68.  return v0 @kind object;
}
procedure `java.lang.Object` `setValue`(`kotlinx.coroutines.debug.internal.a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/debug/internal/a;.setValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L2d8f7c.  call temp:= `c`() @signature `Lkotlinx/coroutines/debug/internal/b;.c:()Ljava/lang/Void;` @kind static;
  #L2d8f82.  v1:= new `kotlin.KotlinNothingValueException`;
  #L2d8f86.  call `<init>`(v1) @signature `Lkotlin/KotlinNothingValueException;.<init>:()V` @kind direct;
  #L2d8f8c.  throw v1;
}
