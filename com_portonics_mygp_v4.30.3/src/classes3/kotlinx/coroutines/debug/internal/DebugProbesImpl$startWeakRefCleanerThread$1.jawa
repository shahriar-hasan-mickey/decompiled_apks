record `kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function0` @kind interface {
}
global `kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1` `@@kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/debug/internal/DebugProbesImpl$startWeakRefCleanerThread$1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2d98a8.  v0:= new `kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1`;
  #L2d98ac.  call `<init>`(v0) @signature `Lkotlinx/coroutines/debug/internal/DebugProbesImpl$startWeakRefCleanerThread$1;.<init>:()V` @kind direct;
  #L2d98b2.  `@@kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1.INSTANCE` @type ^`kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1` := v0 @kind object;
  #L2d98b6.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugProbesImpl$startWeakRefCleanerThread$1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2d98c8.  v0:= 0I;
  #L2d98ca.  call `<init>`(v1, v0) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L2d98d0.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugProbesImpl$startWeakRefCleanerThread$1;.invoke:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2d988c.  call `invoke`(v1) @signature `Lkotlinx/coroutines/debug/internal/DebugProbesImpl$startWeakRefCleanerThread$1;.invoke:()V` @kind virtual;
  #L2d9892.  v0:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2d9896.  return v0 @kind object;
}
procedure `void` `invoke`(`kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugProbesImpl$startWeakRefCleanerThread$1;.invoke:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2d98e4.  call temp:= `a`() @signature `Lkotlinx/coroutines/debug/internal/f;.a:()Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;` @kind static;
  #L2d98ea.  v0:= temp @kind object;
  #L2d98ec.  call `f`(v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.f:()V` @kind virtual;
  #L2d98f2.  return @kind void;
}
