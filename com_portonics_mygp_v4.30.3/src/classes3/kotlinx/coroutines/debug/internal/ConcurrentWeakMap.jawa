record `kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.AbstractMutableMap` @kind class {
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap._size` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.ref.ReferenceQueue` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @AccessFlag VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2d93bc.  v0:= constclass @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L2d93c0.  v1:= "_size" @kind object;
  #L2d93c4.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L2d93ca.  v0:= temp @kind object;
  #L2d93cc.  `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L2d93d0.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2d93e4.  call `<init>`(v2) @signature `Lkotlin/collections/AbstractMutableMap;.<init>:()V` @kind direct;
  #L2d93ea.  v0:= 0I;
  #L2d93ec.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap._size` @type ^`int` := v0;
  #L2d93f0.  v0:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`;
  #L2d93f4.  v1:= 16I;
  #L2d93f8.  call `<init>`(v0, v2, v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;I)V` @kind direct;
  #L2d93fe.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` := v0 @kind object;
  #L2d9402.  if v3 == 0 then goto L2d9412;
  #L2d9406.  v3:= new `java.lang.ref.ReferenceQueue`;
  #L2d940a.  call `<init>`(v3) @signature `Ljava/lang/ref/ReferenceQueue;.<init>:()V` @kind direct;
  #L2d9410.  goto L2d9414;
  #L2d9412.  v3:= 0I;
  #L2d9414.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.c` @type ^`java.lang.ref.ReferenceQueue` := v3 @kind object;
  #L2d9418.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v0 @kind this, `boolean` v1 , `int` v2 , `kotlin.jvm.internal.DefaultConstructorMarker` v3 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.<init>:(ZILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2d942c.  v2:= v2 ^& 1;
  #L2d9430.  if v2 == 0 then goto L2d9436;
  #L2d9434.  v1:= 0I;
  #L2d9436.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.<init>:(Z)V` @kind direct;
  #L2d943c.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v0 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.a:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2d9450.  call `d`(v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.d:()V` @kind direct;
  #L2d9456.  return @kind void;
}
procedure `java.lang.ref.ReferenceQueue` `b`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v0 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.b:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;)Ljava/lang/ref/ReferenceQueue;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2d9364.  v0:= v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.c` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L2d9368.  return v0 @kind object;
}
procedure `void` `c`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v1 @kind this, `kotlinx.coroutines.debug.internal.g` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.c:(Lkotlinx/coroutines/debug/internal/g;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2d9468.  v0:= v1.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` @kind object;
  #L2d946c.  v0:= (`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`) v0 @kind object;
  #L2d9470.  call `b`(v0, v2) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.b:(Lkotlinx/coroutines/debug/internal/g;)V` @kind virtual;
  #L2d9476.  return @kind void;
}
procedure `void` `d`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.d:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2d94c8.  v0:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L2d94cc.  call temp:= `decrementAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L2d94d2.  return @kind void;
}
procedure `java.lang.Object` `e`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v7 @kind this, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.e:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2d92a0.  @monitorenter v7
  #L2d92a2.  v0:= v7.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` @kind object;
  #L2d92a6.  v0:= (`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`) v0 @kind object;
  #L2d92aa.  v4:= 0I;
  #L2d92ac.  v5:= 4I;
  #L2d92ae.  v6:= 0I;
  #L2d92b0.  v1:= v0 @kind object;
  #L2d92b2.  v2:= v8 @kind object;
  #L2d92b4.  v3:= v9 @kind object;
  #L2d92b6.  call temp:= `g`(v1, v2, v3, v4, v5, v6) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.g:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/g;ILjava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2d92bc.  v1:= temp @kind object;
  #L2d92be.  call temp:= `a`() @signature `Lkotlinx/coroutines/debug/internal/b;.a:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2d92c4.  v2:= temp @kind object;
  #L2d92c6.  if v1 == v2 then goto L2d92ce;
  #L2d92ca.  @monitorexit v7
  #L2d92cc.  return v1 @kind object;
  #L2d92ce.  call temp:= `h`(v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.h:()Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;` @kind virtual;
  #L2d92d4.  v0:= temp @kind object;
  #L2d92d6.  v7.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` := v0 @kind object;
  #L2d92da.  goto L2d92aa;
  #L2d92dc.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2d92de.  @monitorexit v7
  #L2d92e0.  goto L2d92e4;
  #L2d92e2.  throw v8;
  #L2d92e4.  goto L2d92e2;
  catch `java.lang.Throwable` @[L2d92a2..L2d92c6] goto L2d92dc;
  catch `java.lang.Throwable` @[L2d92ce..L2d92da] goto L2d92dc;
}
procedure `void` `clear`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d9488.  call temp:= `keySet`(v2) @signature `Lkotlin/collections/AbstractMutableMap;.keySet:()Ljava/util/Set;` @kind virtual;
  #L2d948e.  v0:= temp @kind object;
  #L2d9490.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2d9496.  v0:= temp @kind object;
  #L2d9498.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2d949e.  v1:= temp;
  #L2d94a0.  if v1 == 0 then goto L2d94b4;
  #L2d94a4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2d94aa.  v1:= temp @kind object;
  #L2d94ac.  call temp:= `remove`(v2, v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2d94b2.  goto L2d9498;
  #L2d94b4.  return @kind void;
}
procedure `void` `f`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.f:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2d94e4.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.c` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L2d94e8.  if v0 == 0 then goto L2d94f0;
  #L2d94ec.  v0:= 1I;
  #L2d94ee.  goto L2d94f2;
  #L2d94f0.  v0:= 0I;
  #L2d94f2.  if v0 == 0 then goto L2d9532;
  #L2d94f6.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.c` @type ^`java.lang.ref.ReferenceQueue` @kind object;
  #L2d94fa.  call temp:= `remove`(v0) @signature `Ljava/lang/ref/ReferenceQueue;.remove:()Ljava/lang/ref/Reference;` @kind virtual;
  #L2d9500.  v0:= temp @kind object;
  #L2d9502.  if v0 == 0 then goto L2d9512;
  #L2d9506.  v0:= (`kotlinx.coroutines.debug.internal.g`) v0 @kind object;
  #L2d950a.  call `c`(v2, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.c:(Lkotlinx/coroutines/debug/internal/g;)V` @kind direct;
  #L2d9510.  goto L2d94f6;
  #L2d9512.  v0:= new `java.lang.NullPointerException`;
  #L2d9516.  v1:= "null cannot be cast to non-null type kotlinx.coroutines.debug.internal.HashedWeakRef<*>" @kind object;
  #L2d951a.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d9520.  throw v0;
  #L2d9522.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L2d9528.  v0:= temp @kind object;
  #L2d952a.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L2d9530.  return @kind void;
  #L2d9532.  v0:= new `java.lang.IllegalStateException`;
  #L2d9536.  v1:= "Must be created with weakRefQueue = true" @kind object;
  #L2d953a.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d9540.  v1:= temp @kind object;
  #L2d9542.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d9548.  goto L2d954c;
  #L2d954a.  throw v0;
  #L2d954c.  goto L2d954a;
  catch `java.lang.InterruptedException` @[L2d94f6..L2d9522] goto L2d9522;
}
procedure `java.lang.Object` `get`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d9224.  if v2 != 0 then goto L2d922c;
  #L2d9228.  v2:= 0I;
  #L2d922a.  return v2 @kind object;
  #L2d922c.  v0:= v1.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` @kind object;
  #L2d9230.  v0:= (`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`) v0 @kind object;
  #L2d9234.  call temp:= `c`(v0, v2) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2d923a.  v2:= temp @kind object;
  #L2d923c.  return v2 @kind object;
}
procedure `java.util.Set` `getEntries`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.getEntries:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d937c.  v0:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$b`;
  #L2d9380.  v1:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$entries$1.INSTANCE` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$entries$1` @kind object;
  #L2d9384.  call `<init>`(v0, v2, v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$b;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L2d938a.  return v0 @kind object;
}
procedure `java.util.Set` `getKeys`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.getKeys:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d939c.  v0:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$b`;
  #L2d93a0.  v1:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$keys$1.INSTANCE` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$keys$1` @kind object;
  #L2d93a4.  call `<init>`(v0, v2, v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$b;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L2d93aa.  return v0 @kind object;
}
procedure `int` `getSize`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d920c.  v0:= v1.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap._size` @type ^`int`;
  #L2d9210.  return v0;
}
procedure `java.lang.Object` `put`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v7 @kind this, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2d9250.  v0:= v7.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` @kind object;
  #L2d9254.  v1:= v0 @kind object;
  #L2d9256.  v1:= (`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`) v1 @kind object;
  #L2d925a.  v4:= 0I;
  #L2d925c.  v5:= 4I;
  #L2d925e.  v6:= 0I;
  #L2d9260.  v2:= v8 @kind object;
  #L2d9262.  v3:= v9 @kind object;
  #L2d9264.  call temp:= `g`(v1, v2, v3, v4, v5, v6) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.g:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/g;ILjava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2d926a.  v0:= temp @kind object;
  #L2d926c.  call temp:= `a`() @signature `Lkotlinx/coroutines/debug/internal/b;.a:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2d9272.  v1:= temp @kind object;
  #L2d9274.  if v0 != v1 then goto L2d9280;
  #L2d9278.  call temp:= `e`(v7, v8, v9) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.e:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L2d927e.  v0:= temp @kind object;
  #L2d9280.  if v0 != 0 then goto L2d928e;
  #L2d9284.  v8:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L2d9288.  call temp:= `incrementAndGet`(v8, v7) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L2d928e.  return v0 @kind object;
}
procedure `java.lang.Object` `remove`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2d930c.  v0:= 0I;
  #L2d930e.  if v9 != 0 then goto L2d9314;
  #L2d9312.  return v0 @kind object;
  #L2d9314.  v1:= v8.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` @kind object;
  #L2d9318.  v2:= v1 @kind object;
  #L2d931a.  v2:= (`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`) v2 @kind object;
  #L2d931e.  v4:= 0I;
  #L2d9320.  v5:= 0I;
  #L2d9322.  v6:= 4I;
  #L2d9324.  v7:= 0I;
  #L2d9326.  v3:= v9 @kind object;
  #L2d9328.  call temp:= `g`(v2, v3, v4, v5, v6, v7) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.g:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/g;ILjava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2d932e.  v1:= temp @kind object;
  #L2d9330.  call temp:= `a`() @signature `Lkotlinx/coroutines/debug/internal/b;.a:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2d9336.  v2:= temp @kind object;
  #L2d9338.  if v1 != v2 then goto L2d9344;
  #L2d933c.  call temp:= `e`(v8, v9, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.e:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L2d9342.  v1:= temp @kind object;
  #L2d9344.  if v1 == 0 then goto L2d9352;
  #L2d9348.  v9:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap.b` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L2d934c.  call temp:= `decrementAndGet`(v9, v8) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L2d9352.  return v1 @kind object;
}
