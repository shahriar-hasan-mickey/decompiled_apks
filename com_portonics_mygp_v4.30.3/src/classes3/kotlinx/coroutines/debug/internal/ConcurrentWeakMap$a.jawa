record `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind class @AccessFlag FINAL {
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.c` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @AccessFlag SYNTHETIC;
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @AccessFlag SYNTHETIC;
  `kotlinx.coroutines.debug.internal.ConcurrentWeakMap` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.g` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.load` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2d8e2c.  v0:= constclass @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L2d8e30.  v1:= "load" @kind object;
  #L2d8e34.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L2d8e3a.  v0:= temp @kind object;
  #L2d8e3c.  `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L2d8e40.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v0 @kind this, `kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2d8e54.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.g` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` := v1 @kind object;
  #L2d8e58.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d8e5e.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.b` @type ^`int` := v2;
  #L2d8e62.  call temp:= `numberOfLeadingZeros`(v2) @signature `Ljava/lang/Integer;.numberOfLeadingZeros:(I)I` @kind static;
  #L2d8e68.  v1:= temp;
  #L2d8e6a.  v1:= v1 + 1;
  #L2d8e6e.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.c` @type ^`int` := v1;
  #L2d8e72.  v1:= v2 * 2;
  #L2d8e76.  v1:= v1 / 3;
  #L2d8e7a.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @type ^`int` := v1;
  #L2d8e7e.  v1:= 0I;
  #L2d8e80.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.load` @type ^`int` := v1;
  #L2d8e84.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L2d8e88.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L2d8e8e.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L2d8e92.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L2d8e96.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L2d8e9c.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L2d8ea0.  return @kind void;
}
procedure `int` `a`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v0 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.a:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2d8b50.  v0:= v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.b` @type ^`int`;
  #L2d8b54.  return v0;
}
procedure `int` `d`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v1 @kind this, `int` v2 ) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.d:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2d8b68.  v0:= -1640531527I;
  #L2d8b6e.  v2:= v2 * v0 @kind int;
  #L2d8b72.  v0:= v1.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.c` @type ^`int`;
  #L2d8b76.  v2:= v2 ^>> v0 @kind int;
  #L2d8b78.  return v2;
}
procedure `java.lang.Object` `g`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v0 @kind object, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlinx.coroutines.debug.internal.g` v3 @kind object, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.g:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/g;ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2d8c10.  v4:= v4 ^& 4;
  #L2d8c14.  if v4 == 0 then goto L2d8c1a;
  #L2d8c18.  v3:= 0I;
  #L2d8c1a.  call temp:= `f`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.f:(Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/g;)Ljava/lang/Object;` @kind virtual;
  #L2d8c20.  v0:= temp @kind object;
  #L2d8c22.  return v0 @kind object;
}
procedure `void` `i`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.i:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2d8f00.  v0:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2d8f04.  call temp:= `get`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2d8f0a.  v0:= temp @kind object;
  #L2d8f0c.  if v0 != 0 then goto L2d8f12;
  #L2d8f10.  return @kind void;
  #L2d8f12.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.debug.internal.h` @kind boolean;
  #L2d8f16.  if v1 == 0 then goto L2d8f1c;
  #L2d8f1a.  return @kind void;
  #L2d8f1c.  v1:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2d8f20.  v2:= 0I;
  #L2d8f22.  call temp:= `compareAndSet`(v1, v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2d8f28.  v0:= temp;
  #L2d8f2a.  if v0 == 0 then goto L2d8f00;
  #L2d8f2e.  v4:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.g` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L2d8f32.  call `a`(v4) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.a:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;)V` @kind static;
  #L2d8f38.  return @kind void;
}
procedure `void` `b`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v2 @kind this, `kotlinx.coroutines.debug.internal.g` v3 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.b:(Lkotlinx/coroutines/debug/internal/g;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2d8eb4.  v0:= v3.`kotlinx.coroutines.debug.internal.g.a` @type ^`int`;
  #L2d8eb8.  call temp:= `d`(v2, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.d:(I)I` @kind direct;
  #L2d8ebe.  v0:= temp;
  #L2d8ec0.  v1:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2d8ec4.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2d8eca.  v1:= temp @kind object;
  #L2d8ecc.  v1:= (`kotlinx.coroutines.debug.internal.g`) v1 @kind object;
  #L2d8ed0.  if v1 != 0 then goto L2d8ed6;
  #L2d8ed4.  return @kind void;
  #L2d8ed6.  if v1 != v3 then goto L2d8ee2;
  #L2d8eda.  call `i`(v2, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.i:(I)V` @kind direct;
  #L2d8ee0.  return @kind void;
  #L2d8ee2.  if v0 != 0 then goto L2d8eea;
  #L2d8ee6.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.b` @type ^`int`;
  #L2d8eea.  v0:= v0 + -1;
  #L2d8eee.  goto L2d8ec0;
}
procedure `java.lang.Object` `c`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2d8b8c.  call temp:= `hashCode`(v4) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2d8b92.  v0:= temp;
  #L2d8b94.  call temp:= `d`(v3, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.d:(I)I` @kind direct;
  #L2d8b9a.  v0:= temp;
  #L2d8b9c.  v1:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2d8ba0.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2d8ba6.  v1:= temp @kind object;
  #L2d8ba8.  v1:= (`kotlinx.coroutines.debug.internal.g`) v1 @kind object;
  #L2d8bac.  if v1 != 0 then goto L2d8bb4;
  #L2d8bb0.  v4:= 0I;
  #L2d8bb2.  return v4 @kind object;
  #L2d8bb4.  call temp:= `get`(v1) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2d8bba.  v1:= temp @kind object;
  #L2d8bbc.  call temp:= `areEqual`(v4, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2d8bc2.  v2:= temp;
  #L2d8bc4.  if v2 == 0 then goto L2d8be6;
  #L2d8bc8.  v4:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2d8bcc.  call temp:= `get`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2d8bd2.  v4:= temp @kind object;
  #L2d8bd4.  v0:= instanceof @variable v4 @type ^`kotlinx.coroutines.debug.internal.h` @kind boolean;
  #L2d8bd8.  if v0 == 0 then goto L2d8be4;
  #L2d8bdc.  v4:= (`kotlinx.coroutines.debug.internal.h`) v4 @kind object;
  #L2d8be0.  v4:= v4.`kotlinx.coroutines.debug.internal.h.a` @type ^`java.lang.Object` @kind object;
  #L2d8be4.  return v4 @kind object;
  #L2d8be6.  if v1 != 0 then goto L2d8bf0;
  #L2d8bea.  call `i`(v3, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.i:(I)V` @kind direct;
  #L2d8bf0.  if v0 != 0 then goto L2d8bf8;
  #L2d8bf4.  v0:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.b` @type ^`int`;
  #L2d8bf8.  v0:= v0 + -1;
  #L2d8bfc.  goto L2d8b9c;
}
procedure `java.util.Iterator` `e`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v1 @kind this, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.e:(Lkotlin/jvm/functions/Function2;)Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2d8d38.  v0:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a`;
  #L2d8d3c.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L2d8d42.  return v0 @kind object;
}
procedure `java.lang.Object` `f`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `kotlinx.coroutines.debug.internal.g` v8 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.f:(Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/g;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d8c34.  call temp:= `hashCode`(v6) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2d8c3a.  v0:= temp;
  #L2d8c3c.  call temp:= `d`(v5, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.d:(I)I` @kind direct;
  #L2d8c42.  v0:= temp;
  #L2d8c44.  v1:= 0I;
  #L2d8c46.  v2:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2d8c4a.  call temp:= `get`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2d8c50.  v2:= temp @kind object;
  #L2d8c52.  v2:= (`kotlinx.coroutines.debug.internal.g`) v2 @kind object;
  #L2d8c56.  if v2 != 0 then goto L2d8cbe;
  #L2d8c5a.  v2:= 0I;
  #L2d8c5c.  if v7 != 0 then goto L2d8c62;
  #L2d8c60.  return v2 @kind object;
  #L2d8c62.  if v1 != 0 then goto L2d8c92;
  #L2d8c66.  v1:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.load` @type ^`int`;
  #L2d8c6a.  v3:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @type ^`int`;
  #L2d8c6e.  if v1 < v3 then goto L2d8c7c;
  #L2d8c72.  call temp:= `a`() @signature `Lkotlinx/coroutines/debug/internal/b;.a:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2d8c78.  v6:= temp @kind object;
  #L2d8c7a.  return v6 @kind object;
  #L2d8c7c.  v3:= v1 + 1;
  #L2d8c80.  v4:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L2d8c84.  call temp:= `compareAndSet`(v4, v5, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L2d8c8a.  v1:= temp;
  #L2d8c8c.  if v1 == 0 then goto L2d8c66;
  #L2d8c90.  v1:= 1I;
  #L2d8c92.  if v8 != 0 then goto L2d8cac;
  #L2d8c96.  v8:= new `kotlinx.coroutines.debug.internal.g`;
  #L2d8c9a.  v3:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.g` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L2d8c9e.  call temp:= `b`(v3) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.b:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;)Ljava/lang/ref/ReferenceQueue;` @kind static;
  #L2d8ca4.  v3:= temp @kind object;
  #L2d8ca6.  call `<init>`(v8, v6, v3) @signature `Lkotlinx/coroutines/debug/internal/g;.<init>:(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V` @kind direct;
  #L2d8cac.  v3:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2d8cb0.  call temp:= `compareAndSet`(v3, v0, v2, v8) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2d8cb6.  v2:= temp;
  #L2d8cb8.  if v2 == 0 then goto L2d8c46;
  #L2d8cbc.  goto L2d8ce0;
  #L2d8cbe.  call temp:= `get`(v2) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2d8cc4.  v2:= temp @kind object;
  #L2d8cc6.  call temp:= `areEqual`(v6, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2d8ccc.  v3:= temp;
  #L2d8cce.  if v3 == 0 then goto L2d8d10;
  #L2d8cd2.  if v1 == 0 then goto L2d8ce0;
  #L2d8cd6.  v6:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L2d8cda.  call temp:= `decrementAndGet`(v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L2d8ce0.  v6:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2d8ce4.  call temp:= `get`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2d8cea.  v6:= temp @kind object;
  #L2d8cec.  v8:= instanceof @variable v6 @type ^`kotlinx.coroutines.debug.internal.h` @kind boolean;
  #L2d8cf0.  if v8 == 0 then goto L2d8cfe;
  #L2d8cf4.  call temp:= `a`() @signature `Lkotlinx/coroutines/debug/internal/b;.a:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2d8cfa.  v6:= temp @kind object;
  #L2d8cfc.  return v6 @kind object;
  #L2d8cfe.  v8:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2d8d02.  call temp:= `compareAndSet`(v8, v0, v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2d8d08.  v8:= temp;
  #L2d8d0a.  if v8 == 0 then goto L2d8ce0;
  #L2d8d0e.  return v6 @kind object;
  #L2d8d10.  if v2 != 0 then goto L2d8d1a;
  #L2d8d14.  call `i`(v5, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.i:(I)V` @kind direct;
  #L2d8d1a.  if v0 != 0 then goto L2d8d22;
  #L2d8d1e.  v0:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.b` @type ^`int`;
  #L2d8d22.  v0:= v0 + -1;
  #L2d8d26.  goto L2d8c46;
}
procedure `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` `h`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v9 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.h:()Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2d8d54.  v0:= v9.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.g` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L2d8d58.  call temp:= `size`(v0) @signature `Lkotlin/collections/AbstractMutableMap;.size:()I` @kind virtual;
  #L2d8d5e.  v0:= temp;
  #L2d8d60.  v1:= 4I;
  #L2d8d62.  call temp:= `coerceAtLeast`(v0, v1) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @kind static;
  #L2d8d68.  v0:= temp;
  #L2d8d6a.  call temp:= `highestOneBit`(v0) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L2d8d70.  v0:= temp;
  #L2d8d72.  v0:= v0 * 4;
  #L2d8d76.  v1:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`;
  #L2d8d7a.  v2:= v9.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.g` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L2d8d7e.  call `<init>`(v1, v2, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;I)V` @kind direct;
  #L2d8d84.  v0:= 0I;
  #L2d8d86.  v2:= v9.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.b` @type ^`int`;
  #L2d8d8a.  if v0 >= v2 then goto L2d8e18;
  #L2d8d8e.  v3:= v0 + 1;
  #L2d8d92.  v4:= v9.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2d8d96.  call temp:= `get`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2d8d9c.  v4:= temp @kind object;
  #L2d8d9e.  v4:= (`kotlinx.coroutines.debug.internal.g`) v4 @kind object;
  #L2d8da2.  if v4 != 0 then goto L2d8daa;
  #L2d8da6.  v5:= 0I;
  #L2d8da8.  goto L2d8db2;
  #L2d8daa.  call temp:= `get`(v4) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2d8db0.  v5:= temp @kind object;
  #L2d8db2.  if v4 == 0 then goto L2d8dc0;
  #L2d8db6.  if v5 != 0 then goto L2d8dc0;
  #L2d8dba.  call `i`(v9, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.i:(I)V` @kind direct;
  #L2d8dc0.  v6:= v9.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2d8dc4.  call temp:= `get`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2d8dca.  v6:= temp @kind object;
  #L2d8dcc.  v7:= instanceof @variable v6 @type ^`kotlinx.coroutines.debug.internal.h` @kind boolean;
  #L2d8dd0.  if v7 == 0 then goto L2d8dde;
  #L2d8dd4.  v6:= (`kotlinx.coroutines.debug.internal.h`) v6 @kind object;
  #L2d8dd8.  v6:= v6.`kotlinx.coroutines.debug.internal.h.a` @type ^`java.lang.Object` @kind object;
  #L2d8ddc.  goto L2d8df6;
  #L2d8dde.  v7:= v9.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L2d8de2.  call temp:= `b`(v6) @signature `Lkotlinx/coroutines/debug/internal/b;.b:(Ljava/lang/Object;)Lkotlinx/coroutines/debug/internal/h;` @kind static;
  #L2d8de8.  v8:= temp @kind object;
  #L2d8dea.  call temp:= `compareAndSet`(v7, v0, v6, v8) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2d8df0.  v7:= temp;
  #L2d8df2.  if v7 == 0 then goto L2d8dc0;
  #L2d8df6.  if v5 == 0 then goto L2d8e14;
  #L2d8dfa.  if v6 == 0 then goto L2d8e14;
  #L2d8dfe.  call temp:= `f`(v1, v5, v6, v4) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.f:(Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/g;)Ljava/lang/Object;` @kind virtual;
  #L2d8e04.  v0:= temp @kind object;
  #L2d8e06.  call temp:= `a`() @signature `Lkotlinx/coroutines/debug/internal/b;.a:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2d8e0c.  v4:= temp @kind object;
  #L2d8e0e.  if v0 != v4 then goto L2d8e14;
  #L2d8e12.  goto L2d8d54;
  #L2d8e14.  v0:= v3;
  #L2d8e16.  goto L2d8d8a;
  #L2d8e18.  return v1 @kind object;
}
