record `kotlinx.coroutines.sync.MutexImpl$b` @kind class @AccessFlag ABSTRACT extends `kotlinx.coroutines.internal.LockFreeLinkedListNode` @kind class, `kotlinx.coroutines.z0` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.sync.MutexImpl$b.f` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.sync.MutexImpl` `kotlinx.coroutines.sync.MutexImpl$b.g` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlinx.coroutines.sync.MutexImpl$b.isTaken` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.sync.MutexImpl$b.e` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2ef8a4.  v0:= constclass @type ^`kotlinx.coroutines.sync.MutexImpl$b` @kind object;
  #L2ef8a8.  v1:= "isTaken" @kind object;
  #L2ef8ac.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L2ef8b2.  v0:= temp @kind object;
  #L2ef8b4.  `@@kotlinx.coroutines.sync.MutexImpl$b.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L2ef8b8.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.MutexImpl$b` v0 @kind this, `kotlinx.coroutines.sync.MutexImpl` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2ef8cc.  v0.`kotlinx.coroutines.sync.MutexImpl$b.g` @type ^`kotlinx.coroutines.sync.MutexImpl` := v1 @kind object;
  #L2ef8d0.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.<init>:()V` @kind direct;
  #L2ef8d6.  v0.`kotlinx.coroutines.sync.MutexImpl$b.f` @type ^`java.lang.Object` := v2 @kind object;
  #L2ef8da.  v1:= 0I;
  #L2ef8dc.  v0.`kotlinx.coroutines.sync.MutexImpl$b.isTaken` @type ^`int` := v1;
  #L2ef8e0.  return @kind void;
}
procedure `void` `R`() @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.R:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `S`(`kotlinx.coroutines.sync.MutexImpl$b` v3 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.S:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ef880.  v0:= `@@kotlinx.coroutines.sync.MutexImpl$b.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L2ef884.  v1:= 0I;
  #L2ef886.  v2:= 1I;
  #L2ef888.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L2ef88e.  v0:= temp;
  #L2ef890.  return v0;
}
procedure `boolean` `T`() @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.T:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `dispose`(`kotlinx.coroutines.sync.MutexImpl$b` v0 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2ef8f4.  call temp:= `M`(v0) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.M:()Z` @kind virtual;
  #L2ef8fa.  return @kind void;
}
