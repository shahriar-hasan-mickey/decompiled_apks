record `kotlinx.coroutines.sync.d` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.internal.d` @kind class {
  `kotlinx.coroutines.sync.c` `kotlinx.coroutines.sync.d.b` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.d` v0 @kind this, `kotlinx.coroutines.sync.c` v1 @kind object) @signature `Lkotlinx/coroutines/sync/d;.<init>:(Lkotlinx/coroutines/sync/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2ef9bc.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/d;.<init>:()V` @kind direct;
  #L2ef9c2.  v0.`kotlinx.coroutines.sync.d.b` @type ^`kotlinx.coroutines.sync.c` := v1 @kind object;
  #L2ef9c6.  return @kind void;
}
procedure `void` `d`(`kotlinx.coroutines.sync.d` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/sync/d;.d:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2ef9d8.  v1:= (`kotlinx.coroutines.sync.MutexImpl`) v1 @kind object;
  #L2ef9dc.  call `j`(v0, v1, v2) @signature `Lkotlinx/coroutines/sync/d;.j:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @kind virtual;
  #L2ef9e2.  return @kind void;
}
procedure `java.lang.Object` `i`(`kotlinx.coroutines.sync.d` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/sync/d;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2ef96c.  v1:= (`kotlinx.coroutines.sync.MutexImpl`) v1 @kind object;
  #L2ef970.  call temp:= `k`(v0, v1) @signature `Lkotlinx/coroutines/sync/d;.k:(Lkotlinx/coroutines/sync/MutexImpl;)Ljava/lang/Object;` @kind virtual;
  #L2ef976.  v1:= temp @kind object;
  #L2ef978.  return v1 @kind object;
}
procedure `void` `j`(`kotlinx.coroutines.sync.d` v1 @kind this, `kotlinx.coroutines.sync.MutexImpl` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/sync/d;.j:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ef9f4.  if v3 != 0 then goto L2efa02;
  #L2ef9f8.  call temp:= `d`() @signature `Lkotlinx/coroutines/sync/MutexKt;.d:()Lkotlinx/coroutines/sync/a;` @kind static;
  #L2ef9fe.  v3:= temp @kind object;
  #L2efa00.  goto L2efa06;
  #L2efa02.  v3:= v1.`kotlinx.coroutines.sync.d.b` @type ^`kotlinx.coroutines.sync.c` @kind object;
  #L2efa06.  v0:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2efa0a.  call temp:= `compareAndSet`(v0, v2, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2efa10.  return @kind void;
}
procedure `java.lang.Object` `k`(`kotlinx.coroutines.sync.d` v0 @kind this, `kotlinx.coroutines.sync.MutexImpl` v1 @kind object) @signature `Lkotlinx/coroutines/sync/d;.k:(Lkotlinx/coroutines/sync/MutexImpl;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L2ef98c.  v1:= v0.`kotlinx.coroutines.sync.d.b` @type ^`kotlinx.coroutines.sync.c` @kind object;
  #L2ef990.  call temp:= `R`(v1) @signature `Lkotlinx/coroutines/internal/r;.R:()Z` @kind virtual;
  #L2ef996.  v1:= temp;
  #L2ef998.  if v1 == 0 then goto L2ef9a0;
  #L2ef99c.  v1:= 0I;
  #L2ef99e.  goto L2ef9a8;
  #L2ef9a0.  call temp:= `g`() @signature `Lkotlinx/coroutines/sync/MutexKt;.g:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2ef9a6.  v1:= temp @kind object;
  #L2ef9a8.  return v1 @kind object;
}
