record `kotlinx.coroutines.sync.MutexImpl$LockCont` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.sync.MutexImpl$b` @kind class {
  `kotlinx.coroutines.o` `kotlinx.coroutines.sync.MutexImpl$LockCont.h` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.sync.MutexImpl` `kotlinx.coroutines.sync.MutexImpl$LockCont.i` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.MutexImpl$LockCont` v0 @kind this, `kotlinx.coroutines.sync.MutexImpl` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlinx.coroutines.o` v3 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl$LockCont;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;Lkotlinx/coroutines/o;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2ef7d8.  v0.`kotlinx.coroutines.sync.MutexImpl$LockCont.i` @type ^`kotlinx.coroutines.sync.MutexImpl` := v1 @kind object;
  #L2ef7dc.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @kind direct;
  #L2ef7e2.  v0.`kotlinx.coroutines.sync.MutexImpl$LockCont.h` @type ^`kotlinx.coroutines.o` := v3 @kind object;
  #L2ef7e6.  return @kind void;
}
procedure `void` `R`(`kotlinx.coroutines.sync.MutexImpl$LockCont` v2 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl$LockCont;.R:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ef7f8.  v0:= v2.`kotlinx.coroutines.sync.MutexImpl$LockCont.h` @type ^`kotlinx.coroutines.o` @kind object;
  #L2ef7fc.  v1:= `@@kotlinx.coroutines.q.a` @type ^`kotlinx.coroutines.internal.k0` @kind object;
  #L2ef800.  call `z`(v0, v1) @signature `Lkotlinx/coroutines/o;.z:(Ljava/lang/Object;)V` @kind interface;
  #L2ef806.  return @kind void;
}
procedure `boolean` `T`(`kotlinx.coroutines.sync.MutexImpl$LockCont` v6 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl$LockCont;.T:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2ef730.  call temp:= `S`(v6) @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.S:()Z` @kind virtual;
  #L2ef736.  v0:= temp;
  #L2ef738.  v1:= 0I;
  #L2ef73a.  if v0 != 0 then goto L2ef740;
  #L2ef73e.  return v1;
  #L2ef740.  v0:= v6.`kotlinx.coroutines.sync.MutexImpl$LockCont.h` @type ^`kotlinx.coroutines.o` @kind object;
  #L2ef744.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2ef748.  v3:= 0I;
  #L2ef74a.  v4:= new `kotlinx.coroutines.sync.MutexImpl$LockCont$tryResumeLockWaiter$1`;
  #L2ef74e.  v5:= v6.`kotlinx.coroutines.sync.MutexImpl$LockCont.i` @type ^`kotlinx.coroutines.sync.MutexImpl` @kind object;
  #L2ef752.  call `<init>`(v4, v5, v6) @signature `Lkotlinx/coroutines/sync/MutexImpl$LockCont$tryResumeLockWaiter$1;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Lkotlinx/coroutines/sync/MutexImpl$LockCont;)V` @kind direct;
  #L2ef758.  call temp:= `l`(v0, v2, v3, v4) @signature `Lkotlinx/coroutines/o;.l:(Ljava/lang/Object;Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @kind interface;
  #L2ef75e.  v0:= temp @kind object;
  #L2ef760.  if v0 == 0 then goto L2ef766;
  #L2ef764.  v1:= 1I;
  #L2ef766.  return v1;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.sync.MutexImpl$LockCont` v2 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl$LockCont;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ef778.  v0:= new `java.lang.StringBuilder`;
  #L2ef77c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ef782.  v1:= "LockCont[" @kind object;
  #L2ef786.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ef78c.  v1:= v2.`kotlinx.coroutines.sync.MutexImpl$b.f` @type ^`java.lang.Object` @kind object;
  #L2ef790.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ef796.  v1:= ", " @kind object;
  #L2ef79a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ef7a0.  v1:= v2.`kotlinx.coroutines.sync.MutexImpl$LockCont.h` @type ^`kotlinx.coroutines.o` @kind object;
  #L2ef7a4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ef7aa.  v1:= "] for " @kind object;
  #L2ef7ae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ef7b4.  v1:= v2.`kotlinx.coroutines.sync.MutexImpl$LockCont.i` @type ^`kotlinx.coroutines.sync.MutexImpl` @kind object;
  #L2ef7b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ef7be.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ef7c4.  v0:= temp @kind object;
  #L2ef7c6.  return v0 @kind object;
}
