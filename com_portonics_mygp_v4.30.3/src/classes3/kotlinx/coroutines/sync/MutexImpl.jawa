record `kotlinx.coroutines.sync.MutexImpl` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.sync.b` @kind interface, `kotlinx.coroutines.selects.i` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.sync.MutexImpl._state` @AccessFlag VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.sync.MutexImpl.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/sync/MutexImpl;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2efddc.  v0:= constclass @type ^`kotlinx.coroutines.sync.MutexImpl` @kind object;
  #L2efde0.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L2efde4.  v2:= "_state" @kind object;
  #L2efde8.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L2efdee.  v0:= temp @kind object;
  #L2efdf0.  `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L2efdf4.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.sync.MutexImpl` v0 @kind this, `boolean` v1 ) @signature `Lkotlinx/coroutines/sync/MutexImpl;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2efe08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2efe0e.  if v1 == 0 then goto L2efe1c;
  #L2efe12.  call temp:= `c`() @signature `Lkotlinx/coroutines/sync/MutexKt;.c:()Lkotlinx/coroutines/sync/a;` @kind static;
  #L2efe18.  v1:= temp @kind object;
  #L2efe1a.  goto L2efe24;
  #L2efe1c.  call temp:= `d`() @signature `Lkotlinx/coroutines/sync/MutexKt;.d:()Lkotlinx/coroutines/sync/a;` @kind static;
  #L2efe22.  v1:= temp @kind object;
  #L2efe24.  v0.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` := v1 @kind object;
  #L2efe28.  return @kind void;
}
procedure `java.lang.Object` `c`(`kotlinx.coroutines.sync.MutexImpl` v6 @kind this, `java.lang.Object` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.c:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2efba0.  call temp:= `intercepted`(v8) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.intercepted:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L2efba6.  v0:= temp @kind object;
  #L2efba8.  call temp:= `b`(v0) @signature `Lkotlinx/coroutines/r;.b:(Lkotlin/coroutines/Continuation;)Lkotlinx/coroutines/p;` @kind static;
  #L2efbae.  v0:= temp @kind object;
  #L2efbb0.  v1:= new `kotlinx.coroutines.sync.MutexImpl$LockCont`;
  #L2efbb4.  call `<init>`(v1, v6, v7, v0) @signature `Lkotlinx/coroutines/sync/MutexImpl$LockCont;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;Lkotlinx/coroutines/o;)V` @kind direct;
  #L2efbba.  v2:= v6.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L2efbbe.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.sync.a` @kind boolean;
  #L2efbc2.  if v3 == 0 then goto L2efc34;
  #L2efbc6.  v3:= v2 @kind object;
  #L2efbc8.  v3:= (`kotlinx.coroutines.sync.a`) v3 @kind object;
  #L2efbcc.  v4:= v3.`kotlinx.coroutines.sync.a.a` @type ^`java.lang.Object` @kind object;
  #L2efbd0.  call temp:= `f`() @signature `Lkotlinx/coroutines/sync/MutexKt;.f:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2efbd6.  v5:= temp @kind object;
  #L2efbd8.  if v4 == v5 then goto L2efbf6;
  #L2efbdc.  v4:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2efbe0.  v5:= new `kotlinx.coroutines.sync.c`;
  #L2efbe4.  v3:= v3.`kotlinx.coroutines.sync.a.a` @type ^`java.lang.Object` @kind object;
  #L2efbe8.  call `<init>`(v5, v3) @signature `Lkotlinx/coroutines/sync/c;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2efbee.  call temp:= `compareAndSet`(v4, v6, v2, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2efbf4.  goto L2efbba;
  #L2efbf6.  if v7 != 0 then goto L2efc04;
  #L2efbfa.  call temp:= `c`() @signature `Lkotlinx/coroutines/sync/MutexKt;.c:()Lkotlinx/coroutines/sync/a;` @kind static;
  #L2efc00.  v3:= temp @kind object;
  #L2efc02.  goto L2efc0e;
  #L2efc04.  v3:= new `kotlinx.coroutines.sync.a`;
  #L2efc08.  call `<init>`(v3, v7) @signature `Lkotlinx/coroutines/sync/a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2efc0e.  v4:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2efc12.  call temp:= `compareAndSet`(v4, v6, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2efc18.  v2:= temp;
  #L2efc1a.  if v2 == 0 then goto L2efbba;
  #L2efc1e.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2efc22.  v2:= new `kotlinx.coroutines.sync.MutexImpl$lockSuspend$2$1$1`;
  #L2efc26.  call `<init>`(v2, v6, v7) @signature `Lkotlinx/coroutines/sync/MutexImpl$lockSuspend$2$1$1;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;)V` @kind direct;
  #L2efc2c.  call `r`(v0, v1, v2) @signature `Lkotlinx/coroutines/o;.r:(Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)V` @kind interface;
  #L2efc32.  goto L2efc82;
  #L2efc34.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.sync.c` @kind boolean;
  #L2efc38.  if v3 == 0 then goto L2efcd0;
  #L2efc3c.  v3:= v2 @kind object;
  #L2efc3e.  v3:= (`kotlinx.coroutines.sync.c`) v3 @kind object;
  #L2efc42.  v4:= v3.`kotlinx.coroutines.sync.c.e` @type ^`java.lang.Object` @kind object;
  #L2efc46.  if v4 == v7 then goto L2efc4e;
  #L2efc4a.  v4:= 1I;
  #L2efc4c.  goto L2efc50;
  #L2efc4e.  v4:= 0I;
  #L2efc50.  if v4 == 0 then goto L2efcb0;
  #L2efc54.  call `A`(v3, v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.A:(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind virtual;
  #L2efc5a.  v3:= v6.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L2efc5e.  if v3 == v2 then goto L2efc7c;
  #L2efc62.  call temp:= `S`(v1) @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.S:()Z` @kind virtual;
  #L2efc68.  v2:= temp;
  #L2efc6a.  if v2 != 0 then goto L2efc70;
  #L2efc6e.  goto L2efc7c;
  #L2efc70.  v1:= new `kotlinx.coroutines.sync.MutexImpl$LockCont`;
  #L2efc74.  call `<init>`(v1, v6, v7, v0) @signature `Lkotlinx/coroutines/sync/MutexImpl$LockCont;.<init>:(Lkotlinx/coroutines/sync/MutexImpl;Ljava/lang/Object;Lkotlinx/coroutines/o;)V` @kind direct;
  #L2efc7a.  goto L2efbba;
  #L2efc7c.  call `c`(v0, v1) @signature `Lkotlinx/coroutines/r;.c:(Lkotlinx/coroutines/o;Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V` @kind static;
  #L2efc82.  call temp:= `w`(v0) @signature `Lkotlinx/coroutines/p;.w:()Ljava/lang/Object;` @kind virtual;
  #L2efc88.  v7:= temp @kind object;
  #L2efc8a.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2efc90.  v0:= temp @kind object;
  #L2efc92.  if v7 != v0 then goto L2efc9c;
  #L2efc96.  call `probeCoroutineSuspended`(v8) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L2efc9c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2efca2.  v8:= temp @kind object;
  #L2efca4.  if v7 != v8 then goto L2efcaa;
  #L2efca8.  return v7 @kind object;
  #L2efcaa.  v7:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2efcae.  return v7 @kind object;
  #L2efcb0.  v8:= "Already locked by " @kind object;
  #L2efcb4.  call temp:= `stringPlus`(v8, v7) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2efcba.  v7:= temp @kind object;
  #L2efcbc.  v8:= new `java.lang.IllegalStateException`;
  #L2efcc0.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2efcc6.  v7:= temp @kind object;
  #L2efcc8.  call `<init>`(v8, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2efcce.  throw v8;
  #L2efcd0.  v3:= instanceof @variable v2 @type ^`kotlinx.coroutines.internal.f0` @kind boolean;
  #L2efcd4.  if v3 == 0 then goto L2efce6;
  #L2efcd8.  v2:= (`kotlinx.coroutines.internal.f0`) v2 @kind object;
  #L2efcdc.  call temp:= `c`(v2, v6) @signature `Lkotlinx/coroutines/internal/f0;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2efce2.  goto L2efbba;
  #L2efce6.  v7:= new `java.lang.IllegalStateException`;
  #L2efcea.  v8:= "Illegal state " @kind object;
  #L2efcee.  call temp:= `stringPlus`(v8, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2efcf4.  v8:= temp @kind object;
  #L2efcf6.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2efcfc.  v8:= temp @kind object;
  #L2efcfe.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2efd04.  goto L2efd08;
  #L2efd06.  throw v7;
  #L2efd08.  goto L2efd06;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.sync.MutexImpl` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.a:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2efb60.  call temp:= `d`(v1, v2) @signature `Lkotlinx/coroutines/sync/MutexImpl;.d:(Ljava/lang/Object;)Z` @kind virtual;
  #L2efb66.  v0:= temp;
  #L2efb68.  if v0 == 0 then goto L2efb72;
  #L2efb6c.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2efb70.  return v2 @kind object;
  #L2efb72.  call temp:= `c`(v1, v2, v3) @signature `Lkotlinx/coroutines/sync/MutexImpl;.c:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L2efb78.  v2:= temp @kind object;
  #L2efb7a.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2efb80.  v3:= temp @kind object;
  #L2efb82.  if v2 != v3 then goto L2efb88;
  #L2efb86.  return v2 @kind object;
  #L2efb88.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2efb8c.  return v2 @kind object;
}
procedure `void` `b`(`kotlinx.coroutines.sync.MutexImpl` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2efe3c.  v0:= v7.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L2efe40.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.a` @kind boolean;
  #L2efe44.  v2:= " but expected " @kind object;
  #L2efe48.  v3:= "Mutex is locked by " @kind object;
  #L2efe4c.  v4:= 1I;
  #L2efe4e.  v5:= 0I;
  #L2efe50.  if v1 == 0 then goto L2eff02;
  #L2efe54.  if v8 != 0 then goto L2efe90;
  #L2efe58.  v1:= v0 @kind object;
  #L2efe5a.  v1:= (`kotlinx.coroutines.sync.a`) v1 @kind object;
  #L2efe5e.  v1:= v1.`kotlinx.coroutines.sync.a.a` @type ^`java.lang.Object` @kind object;
  #L2efe62.  call temp:= `f`() @signature `Lkotlinx/coroutines/sync/MutexKt;.f:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2efe68.  v2:= temp @kind object;
  #L2efe6a.  if v1 == v2 then goto L2efe70;
  #L2efe6e.  goto L2efe72;
  #L2efe70.  v4:= 0I;
  #L2efe72.  if v4 == 0 then goto L2efe78;
  #L2efe76.  goto L2efea6;
  #L2efe78.  v8:= new `java.lang.IllegalStateException`;
  #L2efe7c.  v0:= "Mutex is not locked" @kind object;
  #L2efe80.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2efe86.  v0:= temp @kind object;
  #L2efe88.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2efe8e.  throw v8;
  #L2efe90.  v1:= v0 @kind object;
  #L2efe92.  v1:= (`kotlinx.coroutines.sync.a`) v1 @kind object;
  #L2efe96.  v6:= v1.`kotlinx.coroutines.sync.a.a` @type ^`java.lang.Object` @kind object;
  #L2efe9a.  if v6 != v8 then goto L2efea0;
  #L2efe9e.  goto L2efea2;
  #L2efea0.  v4:= 0I;
  #L2efea2.  if v4 == 0 then goto L2efec0;
  #L2efea6.  v1:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2efeaa.  call temp:= `d`() @signature `Lkotlinx/coroutines/sync/MutexKt;.d:()Lkotlinx/coroutines/sync/a;` @kind static;
  #L2efeb0.  v2:= temp @kind object;
  #L2efeb2.  call temp:= `compareAndSet`(v1, v7, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2efeb8.  v0:= temp;
  #L2efeba.  if v0 == 0 then goto L2efe3c;
  #L2efebe.  return @kind void;
  #L2efec0.  v0:= new `java.lang.StringBuilder`;
  #L2efec4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2efeca.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2efed0.  v1:= v1.`kotlinx.coroutines.sync.a.a` @type ^`java.lang.Object` @kind object;
  #L2efed4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2efeda.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2efee0.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2efee6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2efeec.  v8:= temp @kind object;
  #L2efeee.  v0:= new `java.lang.IllegalStateException`;
  #L2efef2.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2efef8.  v8:= temp @kind object;
  #L2efefa.  call `<init>`(v0, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2eff00.  throw v0;
  #L2eff02.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.f0` @kind boolean;
  #L2eff06.  if v1 == 0 then goto L2eff16;
  #L2eff0a.  v0:= (`kotlinx.coroutines.internal.f0`) v0 @kind object;
  #L2eff0e.  call temp:= `c`(v0, v7) @signature `Lkotlinx/coroutines/internal/f0;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2eff14.  goto L2efe3c;
  #L2eff16.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.c` @kind boolean;
  #L2eff1a.  if v1 == 0 then goto L2effe2;
  #L2eff1e.  if v8 == 0 then goto L2eff7c;
  #L2eff22.  v1:= v0 @kind object;
  #L2eff24.  v1:= (`kotlinx.coroutines.sync.c`) v1 @kind object;
  #L2eff28.  v6:= v1.`kotlinx.coroutines.sync.c.e` @type ^`java.lang.Object` @kind object;
  #L2eff2c.  if v6 != v8 then goto L2eff32;
  #L2eff30.  goto L2eff34;
  #L2eff32.  v4:= 0I;
  #L2eff34.  if v4 == 0 then goto L2eff3a;
  #L2eff38.  goto L2eff7c;
  #L2eff3a.  v0:= new `java.lang.StringBuilder`;
  #L2eff3e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2eff44.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2eff4a.  v1:= v1.`kotlinx.coroutines.sync.c.e` @type ^`java.lang.Object` @kind object;
  #L2eff4e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2eff54.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2eff5a.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2eff60.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2eff66.  v8:= temp @kind object;
  #L2eff68.  v0:= new `java.lang.IllegalStateException`;
  #L2eff6c.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2eff72.  v8:= temp @kind object;
  #L2eff74.  call `<init>`(v0, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2eff7a.  throw v0;
  #L2eff7c.  v1:= v0 @kind object;
  #L2eff7e.  v1:= (`kotlinx.coroutines.sync.c`) v1 @kind object;
  #L2eff82.  call temp:= `N`(v1) @signature `Lkotlinx/coroutines/internal/LockFreeLinkedListNode;.N:()Lkotlinx/coroutines/internal/LockFreeLinkedListNode;` @kind virtual;
  #L2eff88.  v2:= temp @kind object;
  #L2eff8a.  if v2 != 0 then goto L2effb6;
  #L2eff8e.  v2:= new `kotlinx.coroutines.sync.d`;
  #L2eff92.  call `<init>`(v2, v1) @signature `Lkotlinx/coroutines/sync/d;.<init>:(Lkotlinx/coroutines/sync/c;)V` @kind direct;
  #L2eff98.  v1:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2eff9c.  call temp:= `compareAndSet`(v1, v7, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2effa2.  v0:= temp;
  #L2effa4.  if v0 == 0 then goto L2efe3c;
  #L2effa8.  call temp:= `c`(v2, v7) @signature `Lkotlinx/coroutines/internal/d;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2effae.  v0:= temp @kind object;
  #L2effb0.  if v0 != 0 then goto L2efe3c;
  #L2effb4.  return @kind void;
  #L2effb6.  v2:= (`kotlinx.coroutines.sync.MutexImpl$b`) v2 @kind object;
  #L2effba.  call temp:= `T`(v2) @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.T:()Z` @kind virtual;
  #L2effc0.  v0:= temp;
  #L2effc2.  if v0 == 0 then goto L2efe3c;
  #L2effc6.  v8:= v2.`kotlinx.coroutines.sync.MutexImpl$b.f` @type ^`java.lang.Object` @kind object;
  #L2effca.  if v8 != 0 then goto L2effd6;
  #L2effce.  call temp:= `e`() @signature `Lkotlinx/coroutines/sync/MutexKt;.e:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2effd4.  v8:= temp @kind object;
  #L2effd6.  v1.`kotlinx.coroutines.sync.c.e` @type ^`java.lang.Object` := v8 @kind object;
  #L2effda.  call `R`(v2) @signature `Lkotlinx/coroutines/sync/MutexImpl$b;.R:()V` @kind virtual;
  #L2effe0.  return @kind void;
  #L2effe2.  v8:= new `java.lang.IllegalStateException`;
  #L2effe6.  v1:= "Illegal state " @kind object;
  #L2effea.  call temp:= `stringPlus`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2efff0.  v0:= temp @kind object;
  #L2efff2.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2efff8.  v0:= temp @kind object;
  #L2efffa.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2f0000.  goto L2f0004;
  #L2f0002.  throw v8;
  #L2f0004.  goto L2f0002;
}
procedure `boolean` `d`(`kotlinx.coroutines.sync.MutexImpl` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlinx/coroutines/sync/MutexImpl;.d:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2efa88.  v0:= v5.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L2efa8c.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.a` @kind boolean;
  #L2efa90.  v2:= 1I;
  #L2efa92.  v3:= 0I;
  #L2efa94.  if v1 == 0 then goto L2efada;
  #L2efa98.  v1:= v0 @kind object;
  #L2efa9a.  v1:= (`kotlinx.coroutines.sync.a`) v1 @kind object;
  #L2efa9e.  v1:= v1.`kotlinx.coroutines.sync.a.a` @type ^`java.lang.Object` @kind object;
  #L2efaa2.  call temp:= `f`() @signature `Lkotlinx/coroutines/sync/MutexKt;.f:()Lkotlinx/coroutines/internal/k0;` @kind static;
  #L2efaa8.  v4:= temp @kind object;
  #L2efaaa.  if v1 == v4 then goto L2efab0;
  #L2efaae.  return v3;
  #L2efab0.  if v6 != 0 then goto L2efabe;
  #L2efab4.  call temp:= `c`() @signature `Lkotlinx/coroutines/sync/MutexKt;.c:()Lkotlinx/coroutines/sync/a;` @kind static;
  #L2efaba.  v1:= temp @kind object;
  #L2efabc.  goto L2efac8;
  #L2efabe.  v1:= new `kotlinx.coroutines.sync.a`;
  #L2efac2.  call `<init>`(v1, v6) @signature `Lkotlinx/coroutines/sync/a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2efac8.  v3:= `@@kotlinx.coroutines.sync.MutexImpl.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2efacc.  call temp:= `compareAndSet`(v3, v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2efad2.  v0:= temp;
  #L2efad4.  if v0 == 0 then goto L2efa88;
  #L2efad8.  return v2;
  #L2efada.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.c` @kind boolean;
  #L2efade.  if v1 == 0 then goto L2efb18;
  #L2efae2.  v0:= (`kotlinx.coroutines.sync.c`) v0 @kind object;
  #L2efae6.  v0:= v0.`kotlinx.coroutines.sync.c.e` @type ^`java.lang.Object` @kind object;
  #L2efaea.  if v0 == v6 then goto L2efaf0;
  #L2efaee.  goto L2efaf2;
  #L2efaf0.  v2:= 0I;
  #L2efaf2.  if v2 == 0 then goto L2efaf8;
  #L2efaf6.  return v3;
  #L2efaf8.  v0:= "Already locked by " @kind object;
  #L2efafc.  call temp:= `stringPlus`(v0, v6) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2efb02.  v6:= temp @kind object;
  #L2efb04.  v0:= new `java.lang.IllegalStateException`;
  #L2efb08.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2efb0e.  v6:= temp @kind object;
  #L2efb10.  call `<init>`(v0, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2efb16.  throw v0;
  #L2efb18.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.f0` @kind boolean;
  #L2efb1c.  if v1 == 0 then goto L2efb2c;
  #L2efb20.  v0:= (`kotlinx.coroutines.internal.f0`) v0 @kind object;
  #L2efb24.  call temp:= `c`(v0, v5) @signature `Lkotlinx/coroutines/internal/f0;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2efb2a.  goto L2efa88;
  #L2efb2c.  v6:= new `java.lang.IllegalStateException`;
  #L2efb30.  v1:= "Illegal state " @kind object;
  #L2efb34.  call temp:= `stringPlus`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2efb3a.  v0:= temp @kind object;
  #L2efb3c.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2efb42.  v0:= temp @kind object;
  #L2efb44.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2efb4a.  goto L2efb4e;
  #L2efb4c.  throw v6;
  #L2efb4e.  goto L2efb4c;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.sync.MutexImpl` v4 @kind this) @signature `Lkotlinx/coroutines/sync/MutexImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2efd1c.  v0:= v4.`kotlinx.coroutines.sync.MutexImpl._state` @type ^`java.lang.Object` @kind object;
  #L2efd20.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.a` @kind boolean;
  #L2efd24.  v2:= 93I;
  #L2efd28.  v3:= "Mutex[" @kind object;
  #L2efd2c.  if v1 == 0 then goto L2efd5e;
  #L2efd30.  v1:= new `java.lang.StringBuilder`;
  #L2efd34.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2efd3a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2efd40.  v0:= (`kotlinx.coroutines.sync.a`) v0 @kind object;
  #L2efd44.  v0:= v0.`kotlinx.coroutines.sync.a.a` @type ^`java.lang.Object` @kind object;
  #L2efd48.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2efd4e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2efd54.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2efd5a.  v0:= temp @kind object;
  #L2efd5c.  return v0 @kind object;
  #L2efd5e.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.f0` @kind boolean;
  #L2efd62.  if v1 == 0 then goto L2efd72;
  #L2efd66.  v0:= (`kotlinx.coroutines.internal.f0`) v0 @kind object;
  #L2efd6a.  call temp:= `c`(v0, v4) @signature `Lkotlinx/coroutines/internal/f0;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2efd70.  goto L2efd1c;
  #L2efd72.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.sync.c` @kind boolean;
  #L2efd76.  if v1 == 0 then goto L2efda8;
  #L2efd7a.  v1:= new `java.lang.StringBuilder`;
  #L2efd7e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2efd84.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2efd8a.  v0:= (`kotlinx.coroutines.sync.c`) v0 @kind object;
  #L2efd8e.  v0:= v0.`kotlinx.coroutines.sync.c.e` @type ^`java.lang.Object` @kind object;
  #L2efd92.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2efd98.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2efd9e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2efda4.  v0:= temp @kind object;
  #L2efda6.  return v0 @kind object;
  #L2efda8.  v1:= new `java.lang.IllegalStateException`;
  #L2efdac.  v2:= "Illegal state " @kind object;
  #L2efdb0.  call temp:= `stringPlus`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.stringPlus:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2efdb6.  v0:= temp @kind object;
  #L2efdb8.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2efdbe.  v0:= temp @kind object;
  #L2efdc0.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2efdc6.  goto L2efdca;
  #L2efdc8.  throw v1;
  #L2efdca.  goto L2efdc8;
}
