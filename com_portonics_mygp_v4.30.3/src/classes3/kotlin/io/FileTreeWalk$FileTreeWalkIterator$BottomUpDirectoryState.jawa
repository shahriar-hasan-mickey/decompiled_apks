record `kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState` @kind class @AccessFlag FINAL extends `kotlin.io.FileTreeWalk$DirectoryState` @kind class {
  `boolean` `kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.failed` @AccessFlag PRIVATE;
  `int` `kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.fileIndex` @AccessFlag PRIVATE;
  `java.io.File`[] `kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.fileList` @AccessFlag PRIVATE;
  `boolean` `kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.rootVisited` @AccessFlag PRIVATE;
  `kotlin.io.FileTreeWalk$FileTreeWalkIterator` `kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState` v1 @kind this, `kotlin.io.FileTreeWalk$FileTreeWalkIterator` v2 @kind object, `java.io.File` v3 @kind object) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState;.<init>:(Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;Ljava/io/File;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2b0d24.  v0:= "rootDir" @kind object;
  #L2b0d28.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b0d2e.  v1.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.this$0` @type ^`kotlin.io.FileTreeWalk$FileTreeWalkIterator` := v2 @kind object;
  #L2b0d32.  call `<init>`(v1, v3) @signature `Lkotlin/io/FileTreeWalk$DirectoryState;.<init>:(Ljava/io/File;)V` @kind direct;
  #L2b0d38.  return @kind void;
}
procedure `java.io.File` `step`(`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState` v11 @kind this) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState;.step:()Ljava/io/File;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2b0bf8.  v0:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.failed` @type ^`boolean` @kind boolean;
  #L2b0bfc.  v1:= 0I;
  #L2b0bfe.  v2:= 1I;
  #L2b0c00.  if v0 != 0 then goto L2b0ca6;
  #L2b0c04.  v0:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.fileList` @type ^`java.io.File`[] @kind object;
  #L2b0c08.  if v0 != 0 then goto L2b0ca6;
  #L2b0c0c.  v0:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.this$0` @type ^`kotlin.io.FileTreeWalk$FileTreeWalkIterator` @kind object;
  #L2b0c10.  v0:= v0.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.this$0` @type ^`kotlin.io.FileTreeWalk` @kind object;
  #L2b0c14.  call temp:= `access$getOnEnter$p`(v0) @signature `Lkotlin/io/FileTreeWalk;.access$getOnEnter$p:(Lkotlin/io/FileTreeWalk;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L2b0c1a.  v0:= temp @kind object;
  #L2b0c1c.  v3:= 0I;
  #L2b0c1e.  if v0 == 0 then goto L2b0c44;
  #L2b0c22.  call temp:= `getRoot`(v11) @signature `Lkotlin/io/FileTreeWalk$WalkState;.getRoot:()Ljava/io/File;` @kind virtual;
  #L2b0c28.  v4:= temp @kind object;
  #L2b0c2a.  call temp:= `invoke`(v0, v4) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2b0c30.  v0:= temp @kind object;
  #L2b0c32.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L2b0c36.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L2b0c3c.  v0:= temp;
  #L2b0c3e.  if v0 != 0 then goto L2b0c44;
  #L2b0c42.  v3:= 1I;
  #L2b0c44.  if v3 == 0 then goto L2b0c4a;
  #L2b0c48.  return v1 @kind object;
  #L2b0c4a.  call temp:= `getRoot`(v11) @signature `Lkotlin/io/FileTreeWalk$WalkState;.getRoot:()Ljava/io/File;` @kind virtual;
  #L2b0c50.  v0:= temp @kind object;
  #L2b0c52.  call temp:= `listFiles`(v0) @signature `Ljava/io/File;.listFiles:()[Ljava/io/File;` @kind virtual;
  #L2b0c58.  v0:= temp @kind object;
  #L2b0c5a.  v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.fileList` @type ^`java.io.File`[] := v0 @kind object;
  #L2b0c5e.  if v0 != 0 then goto L2b0ca6;
  #L2b0c62.  v0:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.this$0` @type ^`kotlin.io.FileTreeWalk$FileTreeWalkIterator` @kind object;
  #L2b0c66.  v0:= v0.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.this$0` @type ^`kotlin.io.FileTreeWalk` @kind object;
  #L2b0c6a.  call temp:= `access$getOnFail$p`(v0) @signature `Lkotlin/io/FileTreeWalk;.access$getOnFail$p:(Lkotlin/io/FileTreeWalk;)Lkotlin/jvm/functions/Function2;` @kind static;
  #L2b0c70.  v0:= temp @kind object;
  #L2b0c72.  if v0 == 0 then goto L2b0ca2;
  #L2b0c76.  call temp:= `getRoot`(v11) @signature `Lkotlin/io/FileTreeWalk$WalkState;.getRoot:()Ljava/io/File;` @kind virtual;
  #L2b0c7c.  v3:= temp @kind object;
  #L2b0c7e.  v10:= new `kotlin.io.AccessDeniedException`;
  #L2b0c82.  call temp:= `getRoot`(v11) @signature `Lkotlin/io/FileTreeWalk$WalkState;.getRoot:()Ljava/io/File;` @kind virtual;
  #L2b0c88.  v5:= temp @kind object;
  #L2b0c8a.  v6:= 0I;
  #L2b0c8c.  v8:= 2I;
  #L2b0c8e.  v9:= 0I;
  #L2b0c90.  v7:= "Cannot list files in a directory" @kind object;
  #L2b0c94.  v4:= v10 @kind object;
  #L2b0c96.  call `<init>`(v4, v5, v6, v7, v8, v9) @signature `Lkotlin/io/AccessDeniedException;.<init>:(Ljava/io/File;Ljava/io/File;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2b0c9c.  call temp:= `invoke`(v0, v3, v10) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2b0ca2.  v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.failed` @type ^`boolean` := v2 @kind boolean;
  #L2b0ca6.  v0:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.fileList` @type ^`java.io.File`[] @kind object;
  #L2b0caa.  if v0 == 0 then goto L2b0cda;
  #L2b0cae.  v3:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.fileIndex` @type ^`int`;
  #L2b0cb2.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2b0cb8.  v0:= length @variable v0;
  #L2b0cba.  if v3 >= v0 then goto L2b0cda;
  #L2b0cbe.  v0:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.fileList` @type ^`java.io.File`[] @kind object;
  #L2b0cc2.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2b0cc8.  v1:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.fileIndex` @type ^`int`;
  #L2b0ccc.  v2:= v1 + 1;
  #L2b0cd0.  v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.fileIndex` @type ^`int` := v2;
  #L2b0cd4.  v0:= v0[v1] @kind object;
  #L2b0cd8.  return v0 @kind object;
  #L2b0cda.  v0:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.rootVisited` @type ^`boolean` @kind boolean;
  #L2b0cde.  if v0 != 0 then goto L2b0cf0;
  #L2b0ce2.  v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.rootVisited` @type ^`boolean` := v2 @kind boolean;
  #L2b0ce6.  call temp:= `getRoot`(v11) @signature `Lkotlin/io/FileTreeWalk$WalkState;.getRoot:()Ljava/io/File;` @kind virtual;
  #L2b0cec.  v0:= temp @kind object;
  #L2b0cee.  return v0 @kind object;
  #L2b0cf0.  v0:= v11.`kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState.this$0` @type ^`kotlin.io.FileTreeWalk$FileTreeWalkIterator` @kind object;
  #L2b0cf4.  v0:= v0.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.this$0` @type ^`kotlin.io.FileTreeWalk` @kind object;
  #L2b0cf8.  call temp:= `access$getOnLeave$p`(v0) @signature `Lkotlin/io/FileTreeWalk;.access$getOnLeave$p:(Lkotlin/io/FileTreeWalk;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L2b0cfe.  v0:= temp @kind object;
  #L2b0d00.  if v0 == 0 then goto L2b0d12;
  #L2b0d04.  call temp:= `getRoot`(v11) @signature `Lkotlin/io/FileTreeWalk$WalkState;.getRoot:()Ljava/io/File;` @kind virtual;
  #L2b0d0a.  v2:= temp @kind object;
  #L2b0d0c.  call temp:= `invoke`(v0, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2b0d12.  return v1 @kind object;
}
