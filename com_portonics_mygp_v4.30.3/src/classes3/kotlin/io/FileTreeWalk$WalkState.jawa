record `kotlin.io.FileTreeWalk$WalkState` @kind class @AccessFlag ABSTRACT {
  `java.io.File` `kotlin.io.FileTreeWalk$WalkState.root` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.io.FileTreeWalk$WalkState` v1 @kind this, `java.io.File` v2 @kind object) @signature `Lkotlin/io/FileTreeWalk$WalkState;.<init>:(Ljava/io/File;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2b112c.  v0:= "root" @kind object;
  #L2b1130.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b1136.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b113c.  v1.`kotlin.io.FileTreeWalk$WalkState.root` @type ^`java.io.File` := v2 @kind object;
  #L2b1140.  return @kind void;
}
procedure `java.io.File` `getRoot`(`kotlin.io.FileTreeWalk$WalkState` v1 @kind this) @signature `Lkotlin/io/FileTreeWalk$WalkState;.getRoot:()Ljava/io/File;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2b1114.  v0:= v1.`kotlin.io.FileTreeWalk$WalkState.root` @type ^`java.io.File` @kind object;
  #L2b1118.  return v0 @kind object;
}
procedure `java.io.File` `step`() @signature `Lkotlin/io/FileTreeWalk$WalkState;.step:()Ljava/io/File;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
