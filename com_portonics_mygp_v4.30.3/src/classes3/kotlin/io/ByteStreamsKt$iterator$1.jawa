record `kotlin.io.ByteStreamsKt$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.ByteIterator` @kind class {
  `java.io.BufferedInputStream` `kotlin.io.ByteStreamsKt$iterator$1.$this_iterator` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `kotlin.io.ByteStreamsKt$iterator$1.finished` @AccessFlag PRIVATE;
  `int` `kotlin.io.ByteStreamsKt$iterator$1.nextByte` @AccessFlag PRIVATE;
  `boolean` `kotlin.io.ByteStreamsKt$iterator$1.nextPrepared` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.io.ByteStreamsKt$iterator$1` v0 @kind this, `java.io.BufferedInputStream` v1 @kind object) @signature `Lkotlin/io/ByteStreamsKt$iterator$1;.<init>:(Ljava/io/BufferedInputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2b0274.  v0.`kotlin.io.ByteStreamsKt$iterator$1.$this_iterator` @type ^`java.io.BufferedInputStream` := v1 @kind object;
  #L2b0278.  call `<init>`(v0) @signature `Lkotlin/collections/ByteIterator;.<init>:()V` @kind direct;
  #L2b027e.  v1:= -1I;
  #L2b0280.  v0.`kotlin.io.ByteStreamsKt$iterator$1.nextByte` @type ^`int` := v1;
  #L2b0284.  return @kind void;
}
procedure `void` `prepareNext`(`kotlin.io.ByteStreamsKt$iterator$1` v3 @kind this) @signature `Lkotlin/io/ByteStreamsKt$iterator$1;.prepareNext:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2b0298.  v0:= v3.`kotlin.io.ByteStreamsKt$iterator$1.nextPrepared` @type ^`boolean` @kind boolean;
  #L2b029c.  if v0 != 0 then goto L2b02cc;
  #L2b02a0.  v0:= v3.`kotlin.io.ByteStreamsKt$iterator$1.finished` @type ^`boolean` @kind boolean;
  #L2b02a4.  if v0 != 0 then goto L2b02cc;
  #L2b02a8.  v0:= v3.`kotlin.io.ByteStreamsKt$iterator$1.$this_iterator` @type ^`java.io.BufferedInputStream` @kind object;
  #L2b02ac.  call temp:= `read`(v0) @signature `Ljava/io/BufferedInputStream;.read:()I` @kind virtual;
  #L2b02b2.  v0:= temp;
  #L2b02b4.  v3.`kotlin.io.ByteStreamsKt$iterator$1.nextByte` @type ^`int` := v0;
  #L2b02b8.  v1:= 1I;
  #L2b02ba.  v3.`kotlin.io.ByteStreamsKt$iterator$1.nextPrepared` @type ^`boolean` := v1 @kind boolean;
  #L2b02be.  v2:= -1I;
  #L2b02c0.  if v0 != v2 then goto L2b02c6;
  #L2b02c4.  goto L2b02c8;
  #L2b02c6.  v1:= 0I;
  #L2b02c8.  v3.`kotlin.io.ByteStreamsKt$iterator$1.finished` @type ^`boolean` := v1 @kind boolean;
  #L2b02cc.  return @kind void;
}
procedure `boolean` `getFinished`(`kotlin.io.ByteStreamsKt$iterator$1` v1 @kind this) @signature `Lkotlin/io/ByteStreamsKt$iterator$1;.getFinished:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2b01d0.  v0:= v1.`kotlin.io.ByteStreamsKt$iterator$1.finished` @type ^`boolean` @kind boolean;
  #L2b01d4.  return v0;
}
procedure `int` `getNextByte`(`kotlin.io.ByteStreamsKt$iterator$1` v1 @kind this) @signature `Lkotlin/io/ByteStreamsKt$iterator$1;.getNextByte:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2b025c.  v0:= v1.`kotlin.io.ByteStreamsKt$iterator$1.nextByte` @type ^`int`;
  #L2b0260.  return v0;
}
procedure `boolean` `getNextPrepared`(`kotlin.io.ByteStreamsKt$iterator$1` v1 @kind this) @signature `Lkotlin/io/ByteStreamsKt$iterator$1;.getNextPrepared:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2b01e8.  v0:= v1.`kotlin.io.ByteStreamsKt$iterator$1.nextPrepared` @type ^`boolean` @kind boolean;
  #L2b01ec.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.io.ByteStreamsKt$iterator$1` v1 @kind this) @signature `Lkotlin/io/ByteStreamsKt$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b0200.  call `prepareNext`(v1) @signature `Lkotlin/io/ByteStreamsKt$iterator$1;.prepareNext:()V` @kind direct;
  #L2b0206.  v0:= v1.`kotlin.io.ByteStreamsKt$iterator$1.finished` @type ^`boolean` @kind boolean;
  #L2b020a.  v0:= v0 ^~ 1;
  #L2b020e.  return v0;
}
procedure `byte` `nextByte`(`kotlin.io.ByteStreamsKt$iterator$1` v2 @kind this) @signature `Lkotlin/io/ByteStreamsKt$iterator$1;.nextByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b0220.  call `prepareNext`(v2) @signature `Lkotlin/io/ByteStreamsKt$iterator$1;.prepareNext:()V` @kind direct;
  #L2b0226.  v0:= v2.`kotlin.io.ByteStreamsKt$iterator$1.finished` @type ^`boolean` @kind boolean;
  #L2b022a.  if v0 != 0 then goto L2b023c;
  #L2b022e.  v0:= v2.`kotlin.io.ByteStreamsKt$iterator$1.nextByte` @type ^`int`;
  #L2b0232.  v0:= (`byte`) v0 @kind i2b;
  #L2b0234.  v1:= 0I;
  #L2b0236.  v2.`kotlin.io.ByteStreamsKt$iterator$1.nextPrepared` @type ^`boolean` := v1 @kind boolean;
  #L2b023a.  return v0;
  #L2b023c.  v0:= new `java.util.NoSuchElementException`;
  #L2b0240.  v1:= "Input stream is over." @kind object;
  #L2b0244.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b024a.  throw v0;
}
procedure `void` `setFinished`(`kotlin.io.ByteStreamsKt$iterator$1` v0 @kind this, `boolean` v1 ) @signature `Lkotlin/io/ByteStreamsKt$iterator$1;.setFinished:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2b02e0.  v0.`kotlin.io.ByteStreamsKt$iterator$1.finished` @type ^`boolean` := v1 @kind boolean;
  #L2b02e4.  return @kind void;
}
procedure `void` `setNextByte`(`kotlin.io.ByteStreamsKt$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/io/ByteStreamsKt$iterator$1;.setNextByte:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2b02f8.  v0.`kotlin.io.ByteStreamsKt$iterator$1.nextByte` @type ^`int` := v1;
  #L2b02fc.  return @kind void;
}
procedure `void` `setNextPrepared`(`kotlin.io.ByteStreamsKt$iterator$1` v0 @kind this, `boolean` v1 ) @signature `Lkotlin/io/ByteStreamsKt$iterator$1;.setNextPrepared:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2b0310.  v0.`kotlin.io.ByteStreamsKt$iterator$1.nextPrepared` @type ^`boolean` := v1 @kind boolean;
  #L2b0314.  return @kind void;
}
