record `kotlin.io.FileTreeWalk$FileTreeWalkIterator` @kind class @AccessFlag FINAL extends `kotlin.collections.AbstractIterator` @kind class {
  `java.util.ArrayDeque` `kotlin.io.FileTreeWalk$FileTreeWalkIterator.state` @AccessFlag PRIVATE_FINAL;
  `kotlin.io.FileTreeWalk` `kotlin.io.FileTreeWalk$FileTreeWalkIterator.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.io.FileTreeWalk$FileTreeWalkIterator` v2 @kind this, `kotlin.io.FileTreeWalk` v3 @kind object) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;.<init>:(Lkotlin/io/FileTreeWalk;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2b105c.  v2.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.this$0` @type ^`kotlin.io.FileTreeWalk` := v3 @kind object;
  #L2b1060.  call `<init>`(v2) @signature `Lkotlin/collections/AbstractIterator;.<init>:()V` @kind direct;
  #L2b1066.  v0:= new `java.util.ArrayDeque`;
  #L2b106a.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L2b1070.  v2.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.state` @type ^`java.util.ArrayDeque` := v0 @kind object;
  #L2b1074.  call temp:= `access$getStart$p`(v3) @signature `Lkotlin/io/FileTreeWalk;.access$getStart$p:(Lkotlin/io/FileTreeWalk;)Ljava/io/File;` @kind static;
  #L2b107a.  v1:= temp @kind object;
  #L2b107c.  call temp:= `isDirectory`(v1) @signature `Ljava/io/File;.isDirectory:()Z` @kind virtual;
  #L2b1082.  v1:= temp;
  #L2b1084.  if v1 == 0 then goto L2b10a0;
  #L2b1088.  call temp:= `access$getStart$p`(v3) @signature `Lkotlin/io/FileTreeWalk;.access$getStart$p:(Lkotlin/io/FileTreeWalk;)Ljava/io/File;` @kind static;
  #L2b108e.  v3:= temp @kind object;
  #L2b1090.  call temp:= `directoryState`(v2, v3) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;.directoryState:(Ljava/io/File;)Lkotlin/io/FileTreeWalk$DirectoryState;` @kind direct;
  #L2b1096.  v3:= temp @kind object;
  #L2b1098.  call `push`(v0, v3) @signature `Ljava/util/ArrayDeque;.push:(Ljava/lang/Object;)V` @kind virtual;
  #L2b109e.  goto L2b10d4;
  #L2b10a0.  call temp:= `access$getStart$p`(v3) @signature `Lkotlin/io/FileTreeWalk;.access$getStart$p:(Lkotlin/io/FileTreeWalk;)Ljava/io/File;` @kind static;
  #L2b10a6.  v1:= temp @kind object;
  #L2b10a8.  call temp:= `isFile`(v1) @signature `Ljava/io/File;.isFile:()Z` @kind virtual;
  #L2b10ae.  v1:= temp;
  #L2b10b0.  if v1 == 0 then goto L2b10ce;
  #L2b10b4.  v1:= new `kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState`;
  #L2b10b8.  call temp:= `access$getStart$p`(v3) @signature `Lkotlin/io/FileTreeWalk;.access$getStart$p:(Lkotlin/io/FileTreeWalk;)Ljava/io/File;` @kind static;
  #L2b10be.  v3:= temp @kind object;
  #L2b10c0.  call `<init>`(v1, v2, v3) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator$SingleFileState;.<init>:(Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;Ljava/io/File;)V` @kind direct;
  #L2b10c6.  call `push`(v0, v1) @signature `Ljava/util/ArrayDeque;.push:(Ljava/lang/Object;)V` @kind virtual;
  #L2b10cc.  goto L2b10d4;
  #L2b10ce.  call `done`(v2) @signature `Lkotlin/collections/AbstractIterator;.done:()V` @kind virtual;
  #L2b10d4.  return @kind void;
}
procedure `kotlin.io.FileTreeWalk$DirectoryState` `directoryState`(`kotlin.io.FileTreeWalk$FileTreeWalkIterator` v2 @kind this, `java.io.File` v3 @kind object) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;.directoryState:(Ljava/io/File;)Lkotlin/io/FileTreeWalk$DirectoryState;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2b1000.  v0:= v2.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.this$0` @type ^`kotlin.io.FileTreeWalk` @kind object;
  #L2b1004.  call temp:= `access$getDirection$p`(v0) @signature `Lkotlin/io/FileTreeWalk;.access$getDirection$p:(Lkotlin/io/FileTreeWalk;)Lkotlin/io/FileWalkDirection;` @kind static;
  #L2b100a.  v0:= temp @kind object;
  #L2b100c.  v1:= `@@kotlin.io.FileTreeWalk$FileTreeWalkIterator$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L2b1010.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2b1016.  v0:= temp;
  #L2b1018.  v0:= v1[v0];
  #L2b101c.  v1:= 1I;
  #L2b101e.  if v0 == v1 then goto L2b1040;
  #L2b1022.  v1:= 2I;
  #L2b1024.  if v0 != v1 then goto L2b1034;
  #L2b1028.  v0:= new `kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState`;
  #L2b102c.  call `<init>`(v0, v2, v3) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState;.<init>:(Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;Ljava/io/File;)V` @kind direct;
  #L2b1032.  goto L2b104a;
  #L2b1034.  v3:= new `kotlin.NoWhenBranchMatchedException`;
  #L2b1038.  call `<init>`(v3) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L2b103e.  throw v3;
  #L2b1040.  v0:= new `kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState`;
  #L2b1044.  call `<init>`(v0, v2, v3) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState;.<init>:(Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;Ljava/io/File;)V` @kind direct;
  #L2b104a.  return v0 @kind object;
}
procedure `java.io.File` `gotoNext`(`kotlin.io.FileTreeWalk$FileTreeWalkIterator` v3 @kind this) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;.gotoNext:()Ljava/io/File;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2b0f6c.  v0:= v3.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.state` @type ^`java.util.ArrayDeque` @kind object;
  #L2b0f70.  call temp:= `peek`(v0) @signature `Ljava/util/ArrayDeque;.peek:()Ljava/lang/Object;` @kind virtual;
  #L2b0f76.  v0:= temp @kind object;
  #L2b0f78.  v0:= (`kotlin.io.FileTreeWalk$WalkState`) v0 @kind object;
  #L2b0f7c.  if v0 != 0 then goto L2b0f84;
  #L2b0f80.  v0:= 0I;
  #L2b0f82.  return v0 @kind object;
  #L2b0f84.  call temp:= `step`(v0) @signature `Lkotlin/io/FileTreeWalk$WalkState;.step:()Ljava/io/File;` @kind virtual;
  #L2b0f8a.  v1:= temp @kind object;
  #L2b0f8c.  if v1 != 0 then goto L2b0f9c;
  #L2b0f90.  v0:= v3.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.state` @type ^`java.util.ArrayDeque` @kind object;
  #L2b0f94.  call temp:= `pop`(v0) @signature `Ljava/util/ArrayDeque;.pop:()Ljava/lang/Object;` @kind virtual;
  #L2b0f9a.  goto L2b0f6c;
  #L2b0f9c.  call temp:= `getRoot`(v0) @signature `Lkotlin/io/FileTreeWalk$WalkState;.getRoot:()Ljava/io/File;` @kind virtual;
  #L2b0fa2.  v0:= temp @kind object;
  #L2b0fa4.  call temp:= `areEqual`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b0faa.  v0:= temp;
  #L2b0fac.  if v0 != 0 then goto L2b0fee;
  #L2b0fb0.  call temp:= `isDirectory`(v1) @signature `Ljava/io/File;.isDirectory:()Z` @kind virtual;
  #L2b0fb6.  v0:= temp;
  #L2b0fb8.  if v0 == 0 then goto L2b0fee;
  #L2b0fbc.  v0:= v3.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.state` @type ^`java.util.ArrayDeque` @kind object;
  #L2b0fc0.  call temp:= `size`(v0) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L2b0fc6.  v0:= temp;
  #L2b0fc8.  v2:= v3.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.this$0` @type ^`kotlin.io.FileTreeWalk` @kind object;
  #L2b0fcc.  call temp:= `access$getMaxDepth$p`(v2) @signature `Lkotlin/io/FileTreeWalk;.access$getMaxDepth$p:(Lkotlin/io/FileTreeWalk;)I` @kind static;
  #L2b0fd2.  v2:= temp;
  #L2b0fd4.  if v0 < v2 then goto L2b0fda;
  #L2b0fd8.  goto L2b0fee;
  #L2b0fda.  v0:= v3.`kotlin.io.FileTreeWalk$FileTreeWalkIterator.state` @type ^`java.util.ArrayDeque` @kind object;
  #L2b0fde.  call temp:= `directoryState`(v3, v1) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;.directoryState:(Ljava/io/File;)Lkotlin/io/FileTreeWalk$DirectoryState;` @kind direct;
  #L2b0fe4.  v1:= temp @kind object;
  #L2b0fe6.  call `push`(v0, v1) @signature `Ljava/util/ArrayDeque;.push:(Ljava/lang/Object;)V` @kind virtual;
  #L2b0fec.  goto L2b0f6c;
  #L2b0fee.  return v1 @kind object;
}
procedure `void` `computeNext`(`kotlin.io.FileTreeWalk$FileTreeWalkIterator` v1 @kind this) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;.computeNext:()V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2b10e8.  call temp:= `gotoNext`(v1) @signature `Lkotlin/io/FileTreeWalk$FileTreeWalkIterator;.gotoNext:()Ljava/io/File;` @kind direct;
  #L2b10ee.  v0:= temp @kind object;
  #L2b10f0.  if v0 == 0 then goto L2b10fc;
  #L2b10f4.  call `setNext`(v1, v0) @signature `Lkotlin/collections/AbstractIterator;.setNext:(Ljava/lang/Object;)V` @kind virtual;
  #L2b10fa.  goto L2b1102;
  #L2b10fc.  call `done`(v1) @signature `Lkotlin/collections/AbstractIterator;.done:()V` @kind virtual;
  #L2b1102.  return @kind void;
}
