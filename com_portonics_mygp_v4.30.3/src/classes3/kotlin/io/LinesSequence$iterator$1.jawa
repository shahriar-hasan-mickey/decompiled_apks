record `kotlin.io.LinesSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `boolean` `kotlin.io.LinesSequence$iterator$1.done` @AccessFlag PRIVATE;
  `java.lang.String` `kotlin.io.LinesSequence$iterator$1.nextValue` @AccessFlag PRIVATE;
  `kotlin.io.LinesSequence` `kotlin.io.LinesSequence$iterator$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.io.LinesSequence$iterator$1` v0 @kind this, `kotlin.io.LinesSequence` v1 @kind object) @signature `Lkotlin/io/LinesSequence$iterator$1;.<init>:(Lkotlin/io/LinesSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2b1ba8.  v0.`kotlin.io.LinesSequence$iterator$1.this$0` @type ^`kotlin.io.LinesSequence` := v1 @kind object;
  #L2b1bac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b1bb2.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.io.LinesSequence$iterator$1` v2 @kind this) @signature `Lkotlin/io/LinesSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b1b00.  v0:= v2.`kotlin.io.LinesSequence$iterator$1.nextValue` @type ^`java.lang.String` @kind object;
  #L2b1b04.  v1:= 1I;
  #L2b1b06.  if v0 != 0 then goto L2b1b32;
  #L2b1b0a.  v0:= v2.`kotlin.io.LinesSequence$iterator$1.done` @type ^`boolean` @kind boolean;
  #L2b1b0e.  if v0 != 0 then goto L2b1b32;
  #L2b1b12.  v0:= v2.`kotlin.io.LinesSequence$iterator$1.this$0` @type ^`kotlin.io.LinesSequence` @kind object;
  #L2b1b16.  call temp:= `access$getReader$p`(v0) @signature `Lkotlin/io/LinesSequence;.access$getReader$p:(Lkotlin/io/LinesSequence;)Ljava/io/BufferedReader;` @kind static;
  #L2b1b1c.  v0:= temp @kind object;
  #L2b1b1e.  call temp:= `readLine`(v0) @signature `Ljava/io/BufferedReader;.readLine:()Ljava/lang/String;` @kind virtual;
  #L2b1b24.  v0:= temp @kind object;
  #L2b1b26.  v2.`kotlin.io.LinesSequence$iterator$1.nextValue` @type ^`java.lang.String` := v0 @kind object;
  #L2b1b2a.  if v0 != 0 then goto L2b1b32;
  #L2b1b2e.  v2.`kotlin.io.LinesSequence$iterator$1.done` @type ^`boolean` := v1 @kind boolean;
  #L2b1b32.  v0:= v2.`kotlin.io.LinesSequence$iterator$1.nextValue` @type ^`java.lang.String` @kind object;
  #L2b1b36.  if v0 == 0 then goto L2b1b3c;
  #L2b1b3a.  goto L2b1b3e;
  #L2b1b3c.  v1:= 0I;
  #L2b1b3e.  return v1;
}
procedure `java.lang.Object` `next`(`kotlin.io.LinesSequence$iterator$1` v1 @kind this) @signature `Lkotlin/io/LinesSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2b1b50.  call temp:= `next`(v1) @signature `Lkotlin/io/LinesSequence$iterator$1;.next:()Ljava/lang/String;` @kind virtual;
  #L2b1b56.  v0:= temp @kind object;
  #L2b1b58.  return v0 @kind object;
}
procedure `java.lang.String` `next`(`kotlin.io.LinesSequence$iterator$1` v2 @kind this) @signature `Lkotlin/io/LinesSequence$iterator$1;.next:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b1b6c.  call temp:= `hasNext`(v2) @signature `Lkotlin/io/LinesSequence$iterator$1;.hasNext:()Z` @kind virtual;
  #L2b1b72.  v0:= temp;
  #L2b1b74.  if v0 == 0 then goto L2b1b8a;
  #L2b1b78.  v0:= v2.`kotlin.io.LinesSequence$iterator$1.nextValue` @type ^`java.lang.String` @kind object;
  #L2b1b7c.  v1:= 0I;
  #L2b1b7e.  v2.`kotlin.io.LinesSequence$iterator$1.nextValue` @type ^`java.lang.String` := v1 @kind object;
  #L2b1b82.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2b1b88.  return v0 @kind object;
  #L2b1b8a.  v0:= new `java.util.NoSuchElementException`;
  #L2b1b8e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2b1b94.  throw v0;
}
procedure `void` `remove`(`kotlin.io.LinesSequence$iterator$1` v2 @kind this) @signature `Lkotlin/io/LinesSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b1bc4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2b1bc8.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2b1bcc.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b1bd2.  throw v0;
}
