record `kotlin.coroutines.ContinuationInterceptor$DefaultImpls` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.Object` `fold`(`kotlin.coroutines.ContinuationInterceptor` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor$DefaultImpls;.fold:(Lkotlin/coroutines/ContinuationInterceptor;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2ad8f4.  v0:= "operation" @kind object;
  #L2ad8f8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ad8fe.  call temp:= `fold`(v1, v2, v3) @signature `Lkotlin/coroutines/CoroutineContext$Element$DefaultImpls;.fold:(Lkotlin/coroutines/CoroutineContext$Element;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind static;
  #L2ad904.  v1:= temp @kind object;
  #L2ad906.  return v1 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext$Element` `get`(`kotlin.coroutines.ContinuationInterceptor` v2 @kind object, `kotlin.coroutines.CoroutineContext$Key` v3 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor$DefaultImpls;.get:(Lkotlin/coroutines/ContinuationInterceptor;Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2ad998.  v0:= "key" @kind object;
  #L2ad99c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ad9a2.  v0:= instanceof @variable v3 @type ^`kotlin.coroutines.AbstractCoroutineContextKey` @kind boolean;
  #L2ad9a6.  v1:= 0I;
  #L2ad9a8.  if v0 == 0 then goto L2ad9d8;
  #L2ad9ac.  v3:= (`kotlin.coroutines.AbstractCoroutineContextKey`) v3 @kind object;
  #L2ad9b0.  call temp:= `getKey`(v2) @signature `Lkotlin/coroutines/CoroutineContext$Element;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @kind interface;
  #L2ad9b6.  v0:= temp @kind object;
  #L2ad9b8.  call temp:= `isSubKey$kotlin_stdlib`(v3, v0) @signature `Lkotlin/coroutines/AbstractCoroutineContextKey;.isSubKey$kotlin_stdlib:(Lkotlin/coroutines/CoroutineContext$Key;)Z` @kind virtual;
  #L2ad9be.  v0:= temp;
  #L2ad9c0.  if v0 == 0 then goto L2ad9d6;
  #L2ad9c4.  call temp:= `tryCast$kotlin_stdlib`(v3, v2) @signature `Lkotlin/coroutines/AbstractCoroutineContextKey;.tryCast$kotlin_stdlib:(Lkotlin/coroutines/CoroutineContext$Element;)Lkotlin/coroutines/CoroutineContext$Element;` @kind virtual;
  #L2ad9ca.  v2:= temp @kind object;
  #L2ad9cc.  v3:= instanceof @variable v2 @type ^`kotlin.coroutines.CoroutineContext$Element` @kind boolean;
  #L2ad9d0.  if v3 == 0 then goto L2ad9d6;
  #L2ad9d4.  v1:= v2 @kind object;
  #L2ad9d6.  return v1 @kind object;
  #L2ad9d8.  v0:= `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L2ad9dc.  if v0 != v3 then goto L2ad9e2;
  #L2ad9e0.  goto L2ad9e4;
  #L2ad9e2.  v2:= v1 @kind object;
  #L2ad9e4.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `minusKey`(`kotlin.coroutines.ContinuationInterceptor` v1 @kind object, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor$DefaultImpls;.minusKey:(Lkotlin/coroutines/ContinuationInterceptor;Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2ad918.  v0:= "key" @kind object;
  #L2ad91c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ad922.  v0:= instanceof @variable v2 @type ^`kotlin.coroutines.AbstractCoroutineContextKey` @kind boolean;
  #L2ad926.  if v0 == 0 then goto L2ad954;
  #L2ad92a.  v2:= (`kotlin.coroutines.AbstractCoroutineContextKey`) v2 @kind object;
  #L2ad92e.  call temp:= `getKey`(v1) @signature `Lkotlin/coroutines/CoroutineContext$Element;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @kind interface;
  #L2ad934.  v0:= temp @kind object;
  #L2ad936.  call temp:= `isSubKey$kotlin_stdlib`(v2, v0) @signature `Lkotlin/coroutines/AbstractCoroutineContextKey;.isSubKey$kotlin_stdlib:(Lkotlin/coroutines/CoroutineContext$Key;)Z` @kind virtual;
  #L2ad93c.  v0:= temp;
  #L2ad93e.  if v0 == 0 then goto L2ad952;
  #L2ad942.  call temp:= `tryCast$kotlin_stdlib`(v2, v1) @signature `Lkotlin/coroutines/AbstractCoroutineContextKey;.tryCast$kotlin_stdlib:(Lkotlin/coroutines/CoroutineContext$Element;)Lkotlin/coroutines/CoroutineContext$Element;` @kind virtual;
  #L2ad948.  v2:= temp @kind object;
  #L2ad94a.  if v2 == 0 then goto L2ad952;
  #L2ad94e.  v1:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L2ad952.  return v1 @kind object;
  #L2ad954.  v0:= `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L2ad958.  if v0 != v2 then goto L2ad960;
  #L2ad95c.  v1:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L2ad960.  return v1 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `plus`(`kotlin.coroutines.ContinuationInterceptor` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor$DefaultImpls;.plus:(Lkotlin/coroutines/ContinuationInterceptor;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2ad974.  v0:= "context" @kind object;
  #L2ad978.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ad97e.  call temp:= `plus`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext$Element$DefaultImpls;.plus:(Lkotlin/coroutines/CoroutineContext$Element;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L2ad984.  v1:= temp @kind object;
  #L2ad986.  return v1 @kind object;
}
procedure `void` `releaseInterceptedContinuation`(`kotlin.coroutines.ContinuationInterceptor` v0 @kind object, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor$DefaultImpls;.releaseInterceptedContinuation:(Lkotlin/coroutines/ContinuationInterceptor;Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2ad9f8.  v0:= "continuation" @kind object;
  #L2ad9fc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ada02.  return @kind void;
}
