record `kotlin.coroutines.jvm.internal.ContinuationImpl` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.coroutines.jvm.internal.BaseContinuationImpl` @kind class {
  `kotlin.coroutines.CoroutineContext` `kotlin.coroutines.jvm.internal.ContinuationImpl._context` @AccessFlag PRIVATE_FINAL;
  `kotlin.coroutines.Continuation` `kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<init>`(`kotlin.coroutines.jvm.internal.ContinuationImpl` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/coroutines/jvm/internal/ContinuationImpl;.<init>:(Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2aee28.  if v2 == 0 then goto L2aee36;
  #L2aee2c.  call temp:= `getContext`(v2) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2aee32.  v0:= temp @kind object;
  #L2aee34.  goto L2aee38;
  #L2aee36.  v0:= 0I;
  #L2aee38.  call `<init>`(v1, v2, v0) @signature `Lkotlin/coroutines/jvm/internal/ContinuationImpl;.<init>:(Lkotlin/coroutines/Continuation;Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L2aee3e.  return @kind void;
}
procedure `void` `<init>`(`kotlin.coroutines.jvm.internal.ContinuationImpl` v0 @kind this, `kotlin.coroutines.Continuation` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlin/coroutines/jvm/internal/ContinuationImpl;.<init>:(Lkotlin/coroutines/Continuation;Lkotlin/coroutines/CoroutineContext;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2aee50.  call `<init>`(v0, v1) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.<init>:(Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2aee56.  v0.`kotlin.coroutines.jvm.internal.ContinuationImpl._context` @type ^`kotlin.coroutines.CoroutineContext` := v2 @kind object;
  #L2aee5a.  return @kind void;
}
procedure `kotlin.coroutines.CoroutineContext` `getContext`(`kotlin.coroutines.jvm.internal.ContinuationImpl` v1 @kind this) @signature `Lkotlin/coroutines/jvm/internal/ContinuationImpl;.getContext:()Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2aee0c.  v0:= v1.`kotlin.coroutines.jvm.internal.ContinuationImpl._context` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L2aee10.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2aee16.  return v0 @kind object;
}
procedure `kotlin.coroutines.Continuation` `intercepted`(`kotlin.coroutines.jvm.internal.ContinuationImpl` v2 @kind this) @signature `Lkotlin/coroutines/jvm/internal/ContinuationImpl;.intercepted:()Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2aedc4.  v0:= v2.`kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L2aedc8.  if v0 != 0 then goto L2aedfa;
  #L2aedcc.  call temp:= `getContext`(v2) @signature `Lkotlin/coroutines/jvm/internal/ContinuationImpl;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind virtual;
  #L2aedd2.  v0:= temp @kind object;
  #L2aedd4.  v1:= `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L2aedd8.  call temp:= `get`(v0, v1) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L2aedde.  v0:= temp @kind object;
  #L2aede0.  v0:= (`kotlin.coroutines.ContinuationInterceptor`) v0 @kind object;
  #L2aede4.  if v0 == 0 then goto L2aedf4;
  #L2aede8.  call temp:= `interceptContinuation`(v0, v2) @signature `Lkotlin/coroutines/ContinuationInterceptor;.interceptContinuation:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind interface;
  #L2aedee.  v0:= temp @kind object;
  #L2aedf0.  if v0 != 0 then goto L2aedf6;
  #L2aedf4.  v0:= v2 @kind object;
  #L2aedf6.  v2.`kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted` @type ^`kotlin.coroutines.Continuation` := v0 @kind object;
  #L2aedfa.  return v0 @kind object;
}
procedure `void` `releaseIntercepted`(`kotlin.coroutines.jvm.internal.ContinuationImpl` v3 @kind this) @signature `Lkotlin/coroutines/jvm/internal/ContinuationImpl;.releaseIntercepted:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L2aee6c.  v0:= v3.`kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L2aee70.  if v0 == 0 then goto L2aee9c;
  #L2aee74.  if v0 == v3 then goto L2aee9c;
  #L2aee78.  call temp:= `getContext`(v3) @signature `Lkotlin/coroutines/jvm/internal/ContinuationImpl;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind virtual;
  #L2aee7e.  v1:= temp @kind object;
  #L2aee80.  v2:= `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L2aee84.  call temp:= `get`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L2aee8a.  v1:= temp @kind object;
  #L2aee8c.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2aee92.  v1:= (`kotlin.coroutines.ContinuationInterceptor`) v1 @kind object;
  #L2aee96.  call `releaseInterceptedContinuation`(v1, v0) @signature `Lkotlin/coroutines/ContinuationInterceptor;.releaseInterceptedContinuation:(Lkotlin/coroutines/Continuation;)V` @kind interface;
  #L2aee9c.  v0:= `@@kotlin.coroutines.jvm.internal.CompletedContinuation.INSTANCE` @type ^`kotlin.coroutines.jvm.internal.CompletedContinuation` @kind object;
  #L2aeea0.  v3.`kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted` @type ^`kotlin.coroutines.Continuation` := v0 @kind object;
  #L2aeea4.  return @kind void;
}
