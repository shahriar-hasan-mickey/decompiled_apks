record `kotlin.coroutines.jvm.internal.BaseContinuationImpl` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.coroutines.Continuation` @kind interface, `kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind interface, `java.io.Serializable` @kind interface {
  `kotlin.coroutines.Continuation` `kotlin.coroutines.jvm.internal.BaseContinuationImpl.completion` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v0 @kind this, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.<init>:(Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2aeb8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2aeb92.  v0.`kotlin.coroutines.jvm.internal.BaseContinuationImpl.completion` @type ^`kotlin.coroutines.Continuation` := v1 @kind object;
  #L2aeb96.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC {
    temp;

  #L2aeaf4.  v1:= "completion" @kind object;
  #L2aeaf8.  call `checkNotNullParameter`(v2, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2aeafe.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2aeb02.  v2:= "create(Any?;Continuation) has not been overridden" @kind object;
  #L2aeb06.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2aeb0c.  throw v1;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.create:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2aeb20.  v0:= "completion" @kind object;
  #L2aeb24.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2aeb2a.  v2:= new `java.lang.UnsupportedOperationException`;
  #L2aeb2e.  v0:= "create(Continuation) has not been overridden" @kind object;
  #L2aeb32.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2aeb38.  throw v2;
}
procedure `kotlin.coroutines.jvm.internal.CoroutineStackFrame` `getCallerFrame`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v2 @kind this) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2aeb64.  v0:= v2.`kotlin.coroutines.jvm.internal.BaseContinuationImpl.completion` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L2aeb68.  v1:= instanceof @variable v0 @type ^`kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind boolean;
  #L2aeb6c.  if v1 == 0 then goto L2aeb76;
  #L2aeb70.  v0:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v0 @kind object;
  #L2aeb74.  goto L2aeb78;
  #L2aeb76.  v0:= 0I;
  #L2aeb78.  return v0 @kind object;
}
procedure `kotlin.coroutines.Continuation` `getCompletion`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v1 @kind this) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.getCompletion:()Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2aeb4c.  v0:= v1.`kotlin.coroutines.jvm.internal.BaseContinuationImpl.completion` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L2aeb50.  return v0 @kind object;
}
procedure `java.lang.StackTraceElement` `getStackTraceElement`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v1 @kind this) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2aea84.  call temp:= `getStackTraceElement`(v1) @signature `Lkotlin/coroutines/jvm/internal/DebugMetadataKt;.getStackTraceElement:(Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;)Ljava/lang/StackTraceElement;` @kind static;
  #L2aea8a.  v0:= temp @kind object;
  #L2aea8c.  return v0 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `releaseIntercepted`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v0 @kind this) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.releaseIntercepted:()V` @AccessFlag PROTECTED {
    temp;

  #L2aeba8.  return @kind void;
}
procedure `void` `resumeWith`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.resumeWith:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2aebbc.  v0:= v3 @kind object;
  #L2aebbe.  call `probeCoroutineResumed`(v0) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineResumed:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L2aebc4.  v0:= (`kotlin.coroutines.jvm.internal.BaseContinuationImpl`) v0 @kind object;
  #L2aebc8.  v1:= v0.`kotlin.coroutines.jvm.internal.BaseContinuationImpl.completion` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L2aebcc.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2aebd2.  call temp:= `invokeSuspend`(v0, v4) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2aebd8.  v4:= temp @kind object;
  #L2aebda.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2aebe0.  v2:= temp @kind object;
  #L2aebe2.  if v4 != v2 then goto L2aebe8;
  #L2aebe6.  return @kind void;
  #L2aebe8.  v2:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L2aebec.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2aebf2.  v4:= temp @kind object;
  #L2aebf4.  goto L2aec0c;
  #L2aebf6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2aebf8.  v2:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L2aebfc.  call temp:= `createFailure`(v4) @signature `Lkotlin/ResultKt;.createFailure:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L2aec02.  v4:= temp @kind object;
  #L2aec04.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2aec0a.  v4:= temp @kind object;
  #L2aec0c.  call `releaseIntercepted`(v0) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.releaseIntercepted:()V` @kind virtual;
  #L2aec12.  v0:= instanceof @variable v1 @type ^`kotlin.coroutines.jvm.internal.BaseContinuationImpl` @kind boolean;
  #L2aec16.  if v0 == 0 then goto L2aec1e;
  #L2aec1a.  v0:= v1 @kind object;
  #L2aec1c.  goto L2aebbe;
  #L2aec1e.  call `resumeWith`(v1, v4) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L2aec24.  return @kind void;
  catch `java.lang.Throwable` @[L2aebd2..L2aebf4] goto L2aebf6;
}
procedure `java.lang.String` `toString`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v2 @kind this) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2aeaa0.  v0:= new `java.lang.StringBuilder`;
  #L2aeaa4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2aeaaa.  v1:= "Continuation at " @kind object;
  #L2aeaae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aeab4.  call temp:= `getStackTraceElement`(v2) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @kind virtual;
  #L2aeaba.  v1:= temp @kind object;
  #L2aeabc.  if v1 == 0 then goto L2aeac2;
  #L2aeac0.  goto L2aead2;
  #L2aeac2.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2aeac8.  v1:= temp @kind object;
  #L2aeaca.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2aead0.  v1:= temp @kind object;
  #L2aead2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2aead8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2aeade.  v0:= temp @kind object;
  #L2aeae0.  return v0 @kind object;
}
