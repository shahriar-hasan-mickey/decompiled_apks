record `kotlin.coroutines.CombinedContext` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.CoroutineContext` @kind interface, `java.io.Serializable` @kind interface {
  `kotlin.coroutines.CoroutineContext$Element` `kotlin.coroutines.CombinedContext.element` @AccessFlag PRIVATE_FINAL;
  `kotlin.coroutines.CoroutineContext` `kotlin.coroutines.CombinedContext.left` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.coroutines.CombinedContext` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `kotlin.coroutines.CoroutineContext$Element` v3 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext$Element;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ad8c0.  v0:= "left" @kind object;
  #L2ad8c4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ad8ca.  v0:= "element" @kind object;
  #L2ad8ce.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ad8d4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ad8da.  v1.`kotlin.coroutines.CombinedContext.left` @type ^`kotlin.coroutines.CoroutineContext` := v2 @kind object;
  #L2ad8de.  v1.`kotlin.coroutines.CombinedContext.element` @type ^`kotlin.coroutines.CoroutineContext$Element` := v3 @kind object;
  #L2ad8e2.  return @kind void;
}
procedure `boolean` `contains`(`kotlin.coroutines.CombinedContext` v1 @kind this, `kotlin.coroutines.CoroutineContext$Element` v2 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.contains:(Lkotlin/coroutines/CoroutineContext$Element;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2ad5dc.  call temp:= `getKey`(v2) @signature `Lkotlin/coroutines/CoroutineContext$Element;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @kind interface;
  #L2ad5e2.  v0:= temp @kind object;
  #L2ad5e4.  call temp:= `get`(v1, v0) @signature `Lkotlin/coroutines/CombinedContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind virtual;
  #L2ad5ea.  v0:= temp @kind object;
  #L2ad5ec.  call temp:= `areEqual`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2ad5f2.  v2:= temp;
  #L2ad5f4.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.coroutines.CombinedContext` v1 @kind this, `kotlin.coroutines.CombinedContext` v2 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.containsAll:(Lkotlin/coroutines/CombinedContext;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2ad608.  v0:= v2.`kotlin.coroutines.CombinedContext.element` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L2ad60c.  call temp:= `contains`(v1, v0) @signature `Lkotlin/coroutines/CombinedContext;.contains:(Lkotlin/coroutines/CoroutineContext$Element;)Z` @kind direct;
  #L2ad612.  v0:= temp;
  #L2ad614.  if v0 != 0 then goto L2ad61c;
  #L2ad618.  v2:= 0I;
  #L2ad61a.  return v2;
  #L2ad61c.  v2:= v2.`kotlin.coroutines.CombinedContext.left` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L2ad620.  v0:= instanceof @variable v2 @type ^`kotlin.coroutines.CombinedContext` @kind boolean;
  #L2ad624.  if v0 == 0 then goto L2ad62e;
  #L2ad628.  v2:= (`kotlin.coroutines.CombinedContext`) v2 @kind object;
  #L2ad62c.  goto L2ad608;
  #L2ad62e.  v2:= (`kotlin.coroutines.CoroutineContext$Element`) v2 @kind object;
  #L2ad632.  call temp:= `contains`(v1, v2) @signature `Lkotlin/coroutines/CombinedContext;.contains:(Lkotlin/coroutines/CoroutineContext$Element;)Z` @kind direct;
  #L2ad638.  v2:= temp;
  #L2ad63a.  return v2;
}
procedure `int` `size`(`kotlin.coroutines.CombinedContext` v3 @kind this) @signature `Lkotlin/coroutines/CombinedContext;.size:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ad6c4.  v0:= 2I;
  #L2ad6c6.  v1:= v3 @kind object;
  #L2ad6c8.  v1:= v1.`kotlin.coroutines.CombinedContext.left` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L2ad6cc.  v2:= instanceof @variable v1 @type ^`kotlin.coroutines.CombinedContext` @kind boolean;
  #L2ad6d0.  if v2 == 0 then goto L2ad6da;
  #L2ad6d4.  v1:= (`kotlin.coroutines.CombinedContext`) v1 @kind object;
  #L2ad6d8.  goto L2ad6dc;
  #L2ad6da.  v1:= 0I;
  #L2ad6dc.  if v1 != 0 then goto L2ad6e2;
  #L2ad6e0.  return v0;
  #L2ad6e2.  v0:= v0 + 1;
  #L2ad6e6.  goto L2ad6c8;
}
procedure `java.lang.Object` `writeReplace`(`kotlin.coroutines.CombinedContext` v5 @kind this) @signature `Lkotlin/coroutines/CombinedContext;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2ad72c.  call temp:= `size`(v5) @signature `Lkotlin/coroutines/CombinedContext;.size:()I` @kind direct;
  #L2ad732.  v0:= temp;
  #L2ad734.  v1:= new `kotlin.coroutines.CoroutineContext`[v0];
  #L2ad738.  v2:= new `kotlin.jvm.internal.Ref$IntRef`;
  #L2ad73c.  call `<init>`(v2) @signature `Lkotlin/jvm/internal/Ref$IntRef;.<init>:()V` @kind direct;
  #L2ad742.  v3:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2ad746.  v4:= new `kotlin.coroutines.CombinedContext$writeReplace$1`;
  #L2ad74a.  call `<init>`(v4, v1, v2) @signature `Lkotlin/coroutines/CombinedContext$writeReplace$1;.<init>:([Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/internal/Ref$IntRef;)V` @kind direct;
  #L2ad750.  call temp:= `fold`(v5, v3, v4) @signature `Lkotlin/coroutines/CombinedContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind virtual;
  #L2ad756.  v2:= v2.`kotlin.jvm.internal.Ref$IntRef.element` @type ^`int`;
  #L2ad75a.  if v2 != v0 then goto L2ad762;
  #L2ad75e.  v0:= 1I;
  #L2ad760.  goto L2ad764;
  #L2ad762.  v0:= 0I;
  #L2ad764.  if v0 == 0 then goto L2ad774;
  #L2ad768.  v0:= new `kotlin.coroutines.CombinedContext$Serialized`;
  #L2ad76c.  call `<init>`(v0, v1) @signature `Lkotlin/coroutines/CombinedContext$Serialized;.<init>:([Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L2ad772.  return v0 @kind object;
  #L2ad774.  v0:= new `java.lang.IllegalStateException`;
  #L2ad778.  v1:= "Check failed." @kind object;
  #L2ad77c.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ad782.  v1:= temp @kind object;
  #L2ad784.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ad78a.  throw v0;
}
procedure `boolean` `equals`(`kotlin.coroutines.CombinedContext` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ad64c.  if v2 == v3 then goto L2ad682;
  #L2ad650.  v0:= instanceof @variable v3 @type ^`kotlin.coroutines.CombinedContext` @kind boolean;
  #L2ad654.  if v0 == 0 then goto L2ad67e;
  #L2ad658.  v3:= (`kotlin.coroutines.CombinedContext`) v3 @kind object;
  #L2ad65c.  call temp:= `size`(v3) @signature `Lkotlin/coroutines/CombinedContext;.size:()I` @kind direct;
  #L2ad662.  v0:= temp;
  #L2ad664.  call temp:= `size`(v2) @signature `Lkotlin/coroutines/CombinedContext;.size:()I` @kind direct;
  #L2ad66a.  v1:= temp;
  #L2ad66c.  if v0 != v1 then goto L2ad67e;
  #L2ad670.  call temp:= `containsAll`(v3, v2) @signature `Lkotlin/coroutines/CombinedContext;.containsAll:(Lkotlin/coroutines/CombinedContext;)Z` @kind direct;
  #L2ad676.  v3:= temp;
  #L2ad678.  if v3 == 0 then goto L2ad67e;
  #L2ad67c.  goto L2ad682;
  #L2ad67e.  v3:= 0I;
  #L2ad680.  goto L2ad684;
  #L2ad682.  v3:= 1I;
  #L2ad684.  return v3;
}
procedure `java.lang.Object` `fold`(`kotlin.coroutines.CombinedContext` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ad6f8.  v0:= "operation" @kind object;
  #L2ad6fc.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ad702.  v0:= v1.`kotlin.coroutines.CombinedContext.left` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L2ad706.  call temp:= `fold`(v0, v2, v3) @signature `Lkotlin/coroutines/CoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind interface;
  #L2ad70c.  v2:= temp @kind object;
  #L2ad70e.  v0:= v1.`kotlin.coroutines.CombinedContext.element` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L2ad712.  call temp:= `invoke`(v3, v2, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2ad718.  v2:= temp @kind object;
  #L2ad71a.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext$Element` `get`(`kotlin.coroutines.CombinedContext` v2 @kind this, `kotlin.coroutines.CoroutineContext$Key` v3 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ad874.  v0:= "key" @kind object;
  #L2ad878.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ad87e.  v0:= v2 @kind object;
  #L2ad880.  v1:= v0.`kotlin.coroutines.CombinedContext.element` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L2ad884.  call temp:= `get`(v1, v3) @signature `Lkotlin/coroutines/CoroutineContext$Element;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L2ad88a.  v1:= temp @kind object;
  #L2ad88c.  if v1 == 0 then goto L2ad892;
  #L2ad890.  return v1 @kind object;
  #L2ad892.  v0:= v0.`kotlin.coroutines.CombinedContext.left` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L2ad896.  v1:= instanceof @variable v0 @type ^`kotlin.coroutines.CombinedContext` @kind boolean;
  #L2ad89a.  if v1 == 0 then goto L2ad8a4;
  #L2ad89e.  v0:= (`kotlin.coroutines.CombinedContext`) v0 @kind object;
  #L2ad8a2.  goto L2ad880;
  #L2ad8a4.  call temp:= `get`(v0, v3) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L2ad8aa.  v3:= temp @kind object;
  #L2ad8ac.  return v3 @kind object;
}
procedure `int` `hashCode`(`kotlin.coroutines.CombinedContext` v2 @kind this) @signature `Lkotlin/coroutines/CombinedContext;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ad698.  v0:= v2.`kotlin.coroutines.CombinedContext.left` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L2ad69c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2ad6a2.  v0:= temp;
  #L2ad6a4.  v1:= v2.`kotlin.coroutines.CombinedContext.element` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L2ad6a8.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2ad6ae.  v1:= temp;
  #L2ad6b0.  v0:= v0 + v1 @kind int;
  #L2ad6b2.  return v0;
}
procedure `kotlin.coroutines.CoroutineContext` `minusKey`(`kotlin.coroutines.CombinedContext` v2 @kind this, `kotlin.coroutines.CoroutineContext$Key` v3 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ad7f0.  v0:= "key" @kind object;
  #L2ad7f4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ad7fa.  v0:= v2.`kotlin.coroutines.CombinedContext.element` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L2ad7fe.  call temp:= `get`(v0, v3) @signature `Lkotlin/coroutines/CoroutineContext$Element;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L2ad804.  v0:= temp @kind object;
  #L2ad806.  if v0 == 0 then goto L2ad810;
  #L2ad80a.  v3:= v2.`kotlin.coroutines.CombinedContext.left` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L2ad80e.  return v3 @kind object;
  #L2ad810.  v0:= v2.`kotlin.coroutines.CombinedContext.left` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L2ad814.  call temp:= `minusKey`(v0, v3) @signature `Lkotlin/coroutines/CoroutineContext;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2ad81a.  v3:= temp @kind object;
  #L2ad81c.  v0:= v2.`kotlin.coroutines.CombinedContext.left` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L2ad820.  if v3 != v0 then goto L2ad828;
  #L2ad824.  v3:= v2 @kind object;
  #L2ad826.  goto L2ad846;
  #L2ad828.  v0:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L2ad82c.  if v3 != v0 then goto L2ad836;
  #L2ad830.  v3:= v2.`kotlin.coroutines.CombinedContext.element` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L2ad834.  goto L2ad846;
  #L2ad836.  v0:= new `kotlin.coroutines.CombinedContext`;
  #L2ad83a.  v1:= v2.`kotlin.coroutines.CombinedContext.element` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L2ad83e.  call `<init>`(v0, v3, v1) @signature `Lkotlin/coroutines/CombinedContext;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext$Element;)V` @kind direct;
  #L2ad844.  v3:= v0 @kind object;
  #L2ad846.  return v3 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `plus`(`kotlin.coroutines.CombinedContext` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;

  #L2ad858.  call temp:= `plus`(v0, v1) @signature `Lkotlin/coroutines/CoroutineContext$DefaultImpls;.plus:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L2ad85e.  v1:= temp @kind object;
  #L2ad860.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.coroutines.CombinedContext` v3 @kind this) @signature `Lkotlin/coroutines/CombinedContext;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2ad79c.  v0:= new `java.lang.StringBuilder`;
  #L2ad7a0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ad7a6.  v1:= 91I;
  #L2ad7aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ad7b0.  v1:= `@@kotlin.coroutines.CombinedContext$toString$1.INSTANCE` @type ^`kotlin.coroutines.CombinedContext$toString$1` @kind object;
  #L2ad7b4.  v2:= "" @kind object;
  #L2ad7b8.  call temp:= `fold`(v3, v2, v1) @signature `Lkotlin/coroutines/CombinedContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind virtual;
  #L2ad7be.  v1:= temp @kind object;
  #L2ad7c0.  v1:= (`java.lang.String`) v1 @kind object;
  #L2ad7c4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ad7ca.  v1:= 93I;
  #L2ad7ce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ad7d4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ad7da.  v0:= temp @kind object;
  #L2ad7dc.  return v0 @kind object;
}
