record `kotlin.coroutines.AbstractCoroutineContextElement` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.coroutines.CoroutineContext$Element` @kind interface {
  `kotlin.coroutines.CoroutineContext$Key` `kotlin.coroutines.AbstractCoroutineContextElement.key` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.coroutines.AbstractCoroutineContextElement` v1 @kind this, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.<init>:(Lkotlin/coroutines/CoroutineContext$Key;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ad2f4.  v0:= "key" @kind object;
  #L2ad2f8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ad2fe.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ad304.  v1.`kotlin.coroutines.AbstractCoroutineContextElement.key` @type ^`kotlin.coroutines.CoroutineContext$Key` := v2 @kind object;
  #L2ad308.  return @kind void;
}
procedure `java.lang.Object` `fold`(`kotlin.coroutines.AbstractCoroutineContextElement` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L2ad26c.  call temp:= `fold`(v0, v1, v2) @signature `Lkotlin/coroutines/CoroutineContext$Element$DefaultImpls;.fold:(Lkotlin/coroutines/CoroutineContext$Element;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind static;
  #L2ad272.  v1:= temp @kind object;
  #L2ad274.  return v1 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext$Element` `get`(`kotlin.coroutines.AbstractCoroutineContextElement` v0 @kind this, `kotlin.coroutines.CoroutineContext$Key` v1 @kind object) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @AccessFlag PUBLIC {
    temp;

  #L2ad2c0.  call temp:= `get`(v0, v1) @signature `Lkotlin/coroutines/CoroutineContext$Element$DefaultImpls;.get:(Lkotlin/coroutines/CoroutineContext$Element;Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind static;
  #L2ad2c6.  v1:= temp @kind object;
  #L2ad2c8.  return v1 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext$Key` `getKey`(`kotlin.coroutines.AbstractCoroutineContextElement` v1 @kind this) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ad2dc.  v0:= v1.`kotlin.coroutines.AbstractCoroutineContextElement.key` @type ^`kotlin.coroutines.CoroutineContext$Key` @kind object;
  #L2ad2e0.  return v0 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `minusKey`(`kotlin.coroutines.AbstractCoroutineContextElement` v0 @kind this, `kotlin.coroutines.CoroutineContext$Key` v1 @kind object) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;

  #L2ad288.  call temp:= `minusKey`(v0, v1) @signature `Lkotlin/coroutines/CoroutineContext$Element$DefaultImpls;.minusKey:(Lkotlin/coroutines/CoroutineContext$Element;Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L2ad28e.  v1:= temp @kind object;
  #L2ad290.  return v1 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `plus`(`kotlin.coroutines.AbstractCoroutineContextElement` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;

  #L2ad2a4.  call temp:= `plus`(v0, v1) @signature `Lkotlin/coroutines/CoroutineContext$Element$DefaultImpls;.plus:(Lkotlin/coroutines/CoroutineContext$Element;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L2ad2aa.  v1:= temp @kind object;
  #L2ad2ac.  return v1 @kind object;
}
