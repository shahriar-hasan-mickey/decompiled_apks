record `kotlin.coroutines.CoroutineContext$DefaultImpls` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `kotlin.coroutines.CoroutineContext` `plus`(`kotlin.coroutines.CoroutineContext` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlin/coroutines/CoroutineContext$DefaultImpls;.plus:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2add14.  v0:= "context" @kind object;
  #L2add18.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2add1e.  v0:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L2add22.  if v2 != v0 then goto L2add28;
  #L2add26.  goto L2add38;
  #L2add28.  v0:= `@@kotlin.coroutines.CoroutineContext$plus$1.INSTANCE` @type ^`kotlin.coroutines.CoroutineContext$plus$1` @kind object;
  #L2add2c.  call temp:= `fold`(v2, v1, v0) @signature `Lkotlin/coroutines/CoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind interface;
  #L2add32.  v1:= temp @kind object;
  #L2add34.  v1:= (`kotlin.coroutines.CoroutineContext`) v1 @kind object;
  #L2add38.  return v1 @kind object;
}
