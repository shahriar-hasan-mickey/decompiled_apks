record `kotlin.coroutines.SafeContinuation` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.Continuation` @kind interface, `kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind interface {
  `kotlin.coroutines.Continuation` `kotlin.coroutines.SafeContinuation.delegate` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `kotlin.coroutines.SafeContinuation.result` @AccessFlag PRIVATE_VOLATILE;
}
global `kotlin.coroutines.SafeContinuation$Companion` `@@kotlin.coroutines.SafeContinuation.Companion` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlin.coroutines.SafeContinuation.RESULT` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/coroutines/SafeContinuation;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2ae1f4.  v0:= new `kotlin.coroutines.SafeContinuation$Companion`;
  #L2ae1f8.  v1:= 0I;
  #L2ae1fa.  call `<init>`(v0, v1) @signature `Lkotlin/coroutines/SafeContinuation$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2ae200.  `@@kotlin.coroutines.SafeContinuation.Companion` @type ^`kotlin.coroutines.SafeContinuation$Companion` := v0 @kind object;
  #L2ae204.  v0:= constclass @type ^`kotlin.coroutines.SafeContinuation` @kind object;
  #L2ae208.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L2ae20c.  v2:= "result" @kind object;
  #L2ae210.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L2ae216.  v0:= temp @kind object;
  #L2ae218.  `@@kotlin.coroutines.SafeContinuation.RESULT` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L2ae21c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.coroutines.SafeContinuation` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/coroutines/SafeContinuation;.<init>:(Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ae230.  v0:= "delegate" @kind object;
  #L2ae234.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ae23a.  v0:= `@@kotlin.coroutines.intrinsics.CoroutineSingletons.UNDECIDED` @type ^`kotlin.coroutines.intrinsics.CoroutineSingletons` @kind object;
  #L2ae23e.  call `<init>`(v1, v2, v0) @signature `Lkotlin/coroutines/SafeContinuation;.<init>:(Lkotlin/coroutines/Continuation;Ljava/lang/Object;)V` @kind direct;
  #L2ae244.  return @kind void;
}
procedure `void` `<init>`(`kotlin.coroutines.SafeContinuation` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/coroutines/SafeContinuation;.<init>:(Lkotlin/coroutines/Continuation;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ae258.  v0:= "delegate" @kind object;
  #L2ae25c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ae262.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ae268.  v1.`kotlin.coroutines.SafeContinuation.delegate` @type ^`kotlin.coroutines.Continuation` := v2 @kind object;
  #L2ae26c.  v1.`kotlin.coroutines.SafeContinuation.result` @type ^`java.lang.Object` := v3 @kind object;
  #L2ae270.  return @kind void;
}
procedure `kotlin.coroutines.jvm.internal.CoroutineStackFrame` `getCallerFrame`(`kotlin.coroutines.SafeContinuation` v2 @kind this) @signature `Lkotlin/coroutines/SafeContinuation;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ae1cc.  v0:= v2.`kotlin.coroutines.SafeContinuation.delegate` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L2ae1d0.  v1:= instanceof @variable v0 @type ^`kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind boolean;
  #L2ae1d4.  if v1 == 0 then goto L2ae1de;
  #L2ae1d8.  v0:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v0 @kind object;
  #L2ae1dc.  goto L2ae1e0;
  #L2ae1de.  v0:= 0I;
  #L2ae1e0.  return v0 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `getContext`(`kotlin.coroutines.SafeContinuation` v1 @kind this) @signature `Lkotlin/coroutines/SafeContinuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ae1ac.  v0:= v1.`kotlin.coroutines.SafeContinuation.delegate` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L2ae1b0.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L2ae1b6.  v0:= temp @kind object;
  #L2ae1b8.  return v0 @kind object;
}
procedure `java.lang.Object` `getOrThrow`(`kotlin.coroutines.SafeContinuation` v3 @kind this) @signature `Lkotlin/coroutines/SafeContinuation;.getOrThrow:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ae0f8.  v0:= v3.`kotlin.coroutines.SafeContinuation.result` @type ^`java.lang.Object` @kind object;
  #L2ae0fc.  v1:= `@@kotlin.coroutines.intrinsics.CoroutineSingletons.UNDECIDED` @type ^`kotlin.coroutines.intrinsics.CoroutineSingletons` @kind object;
  #L2ae100.  if v0 != v1 then goto L2ae12a;
  #L2ae104.  v0:= `@@kotlin.coroutines.SafeContinuation.RESULT` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ae108.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2ae10e.  v2:= temp @kind object;
  #L2ae110.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ae116.  v0:= temp;
  #L2ae118.  if v0 == 0 then goto L2ae126;
  #L2ae11c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2ae122.  v0:= temp @kind object;
  #L2ae124.  return v0 @kind object;
  #L2ae126.  v0:= v3.`kotlin.coroutines.SafeContinuation.result` @type ^`java.lang.Object` @kind object;
  #L2ae12a.  v1:= `@@kotlin.coroutines.intrinsics.CoroutineSingletons.RESUMED` @type ^`kotlin.coroutines.intrinsics.CoroutineSingletons` @kind object;
  #L2ae12e.  if v0 != v1 then goto L2ae13c;
  #L2ae132.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2ae138.  v0:= temp @kind object;
  #L2ae13a.  goto L2ae144;
  #L2ae13c.  v1:= instanceof @variable v0 @type ^`kotlin.Result$Failure` @kind boolean;
  #L2ae140.  if v1 != 0 then goto L2ae146;
  #L2ae144.  return v0 @kind object;
  #L2ae146.  v0:= (`kotlin.Result$Failure`) v0 @kind object;
  #L2ae14a.  v0:= v0.`kotlin.Result$Failure.exception` @type ^`java.lang.Throwable` @kind object;
  #L2ae14e.  throw v0;
}
procedure `java.lang.StackTraceElement` `getStackTraceElement`(`kotlin.coroutines.SafeContinuation` v1 @kind this) @signature `Lkotlin/coroutines/SafeContinuation;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ae160.  v0:= 0I;
  #L2ae162.  return v0 @kind object;
}
procedure `void` `resumeWith`(`kotlin.coroutines.SafeContinuation` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/coroutines/SafeContinuation;.resumeWith:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2ae284.  v0:= v3.`kotlin.coroutines.SafeContinuation.result` @type ^`java.lang.Object` @kind object;
  #L2ae288.  v1:= `@@kotlin.coroutines.intrinsics.CoroutineSingletons.UNDECIDED` @type ^`kotlin.coroutines.intrinsics.CoroutineSingletons` @kind object;
  #L2ae28c.  if v0 != v1 then goto L2ae2a2;
  #L2ae290.  v0:= `@@kotlin.coroutines.SafeContinuation.RESULT` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ae294.  call temp:= `compareAndSet`(v0, v3, v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ae29a.  v0:= temp;
  #L2ae29c.  if v0 == 0 then goto L2ae284;
  #L2ae2a0.  return @kind void;
  #L2ae2a2.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2ae2a8.  v1:= temp @kind object;
  #L2ae2aa.  if v0 != v1 then goto L2ae2d6;
  #L2ae2ae.  v0:= `@@kotlin.coroutines.SafeContinuation.RESULT` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L2ae2b2.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2ae2b8.  v1:= temp @kind object;
  #L2ae2ba.  v2:= `@@kotlin.coroutines.intrinsics.CoroutineSingletons.RESUMED` @type ^`kotlin.coroutines.intrinsics.CoroutineSingletons` @kind object;
  #L2ae2be.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ae2c4.  v0:= temp;
  #L2ae2c6.  if v0 == 0 then goto L2ae284;
  #L2ae2ca.  v0:= v3.`kotlin.coroutines.SafeContinuation.delegate` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L2ae2ce.  call `resumeWith`(v0, v4) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L2ae2d4.  return @kind void;
  #L2ae2d6.  v4:= new `java.lang.IllegalStateException`;
  #L2ae2da.  v0:= "Already resumed" @kind object;
  #L2ae2de.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ae2e4.  goto L2ae2e8;
  #L2ae2e6.  throw v4;
  #L2ae2e8.  goto L2ae2e6;
}
procedure `java.lang.String` `toString`(`kotlin.coroutines.SafeContinuation` v2 @kind this) @signature `Lkotlin/coroutines/SafeContinuation;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ae174.  v0:= new `java.lang.StringBuilder`;
  #L2ae178.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ae17e.  v1:= "SafeContinuation for " @kind object;
  #L2ae182.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ae188.  v1:= v2.`kotlin.coroutines.SafeContinuation.delegate` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L2ae18c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ae192.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ae198.  v0:= temp @kind object;
  #L2ae19a.  return v0 @kind object;
}
