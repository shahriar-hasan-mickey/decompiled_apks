record `kotlin.jvm.internal.ArrayIterator` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.lang.Object`[] `kotlin.jvm.internal.ArrayIterator.array` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.jvm.internal.ArrayIterator.index` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.jvm.internal.ArrayIterator` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/jvm/internal/ArrayIterator;.<init>:([Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2b2d58.  v0:= "array" @kind object;
  #L2b2d5c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b2d62.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b2d68.  v1.`kotlin.jvm.internal.ArrayIterator.array` @type ^`java.lang.Object`[] := v2 @kind object;
  #L2b2d6c.  return @kind void;
}
procedure `java.lang.Object`[] `getArray`(`kotlin.jvm.internal.ArrayIterator` v1 @kind this) @signature `Lkotlin/jvm/internal/ArrayIterator;.getArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2b2c00.  v0:= v1.`kotlin.jvm.internal.ArrayIterator.array` @type ^`java.lang.Object`[] @kind object;
  #L2b2c04.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.jvm.internal.ArrayIterator` v2 @kind this) @signature `Lkotlin/jvm/internal/ArrayIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b2b80.  v0:= v2.`kotlin.jvm.internal.ArrayIterator.index` @type ^`int`;
  #L2b2b84.  v1:= v2.`kotlin.jvm.internal.ArrayIterator.array` @type ^`java.lang.Object`[] @kind object;
  #L2b2b88.  v1:= length @variable v1;
  #L2b2b8a.  if v0 >= v1 then goto L2b2b92;
  #L2b2b8e.  v0:= 1I;
  #L2b2b90.  goto L2b2b94;
  #L2b2b92.  v0:= 0I;
  #L2b2b94.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.jvm.internal.ArrayIterator` v3 @kind this) @signature `Lkotlin/jvm/internal/ArrayIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2b2ba8.  v0:= v3.`kotlin.jvm.internal.ArrayIterator.array` @type ^`java.lang.Object`[] @kind object;
  #L2b2bac.  v1:= v3.`kotlin.jvm.internal.ArrayIterator.index` @type ^`int`;
  #L2b2bb0.  v2:= v1 + 1;
  #L2b2bb4.  v3.`kotlin.jvm.internal.ArrayIterator.index` @type ^`int` := v2;
  #L2b2bb8.  v0:= v0[v1] @kind object;
  #L2b2bbc.  return v0 @kind object;
  #L2b2bbe.  v0:= Exception @type ^`java.lang.ArrayIndexOutOfBoundsException` @kind object;
  #L2b2bc0.  v1:= v3.`kotlin.jvm.internal.ArrayIterator.index` @type ^`int`;
  #L2b2bc4.  v1:= v1 + -1;
  #L2b2bc8.  v3.`kotlin.jvm.internal.ArrayIterator.index` @type ^`int` := v1;
  #L2b2bcc.  v1:= new `java.util.NoSuchElementException`;
  #L2b2bd0.  call temp:= `getMessage`(v0) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L2b2bd6.  v0:= temp @kind object;
  #L2b2bd8.  call `<init>`(v1, v0) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b2bde.  throw v1;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L2b2ba8..L2b2bbc] goto L2b2bbe;
}
procedure `void` `remove`(`kotlin.jvm.internal.ArrayIterator` v2 @kind this) @signature `Lkotlin/jvm/internal/ArrayIterator;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b2d80.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2b2d84.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2b2d88.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b2d8e.  throw v0;
}
