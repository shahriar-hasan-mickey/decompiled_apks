record `kotlin.jvm.internal.FloatSpreadBuilder` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.jvm.internal.PrimitiveSpreadBuilder` @kind class {
  `float`[] `kotlin.jvm.internal.FloatSpreadBuilder.values` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.jvm.internal.FloatSpreadBuilder` v0 @kind this, `int` v1 ) @signature `Lkotlin/jvm/internal/FloatSpreadBuilder;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2b49f0.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.<init>:(I)V` @kind direct;
  #L2b49f6.  v1:= new `float`[v1];
  #L2b49fa.  v0.`kotlin.jvm.internal.FloatSpreadBuilder.values` @type ^`float`[] := v1 @kind object;
  #L2b49fe.  return @kind void;
}
procedure `void` `add`(`kotlin.jvm.internal.FloatSpreadBuilder` v3 @kind this, `float` v4 ) @signature `Lkotlin/jvm/internal/FloatSpreadBuilder;.add:(F)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2b4a10.  v0:= v3.`kotlin.jvm.internal.FloatSpreadBuilder.values` @type ^`float`[] @kind object;
  #L2b4a14.  call temp:= `getPosition`(v3) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getPosition:()I` @kind virtual;
  #L2b4a1a.  v1:= temp;
  #L2b4a1c.  v2:= v1 + 1;
  #L2b4a20.  call `setPosition`(v3, v2) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.setPosition:(I)V` @kind virtual;
  #L2b4a26.  v0[v1]:= v4;
  #L2b4a2a.  return @kind void;
}
procedure `int` `getSize`(`kotlin.jvm.internal.FloatSpreadBuilder` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/FloatSpreadBuilder;.getSize:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2b49d0.  v1:= (`float`[]) v1 @kind object;
  #L2b49d4.  call temp:= `getSize`(v0, v1) @signature `Lkotlin/jvm/internal/FloatSpreadBuilder;.getSize:([F)I` @kind virtual;
  #L2b49da.  v1:= temp;
  #L2b49dc.  return v1;
}
procedure `int` `getSize`(`kotlin.jvm.internal.FloatSpreadBuilder` v1 @kind this, `float`[] v2 @kind object) @signature `Lkotlin/jvm/internal/FloatSpreadBuilder;.getSize:([F)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2b49b0.  v0:= "<this>" @kind object;
  #L2b49b4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b49ba.  v2:= length @variable v2;
  #L2b49bc.  return v2;
}
procedure `float`[] `toArray`(`kotlin.jvm.internal.FloatSpreadBuilder` v2 @kind this) @signature `Lkotlin/jvm/internal/FloatSpreadBuilder;.toArray:()[F` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2b4980.  v0:= v2.`kotlin.jvm.internal.FloatSpreadBuilder.values` @type ^`float`[] @kind object;
  #L2b4984.  call temp:= `size`(v2) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.size:()I` @kind virtual;
  #L2b498a.  v1:= temp;
  #L2b498c.  v1:= new `float`[v1];
  #L2b4990.  call temp:= `toArray`(v2, v0, v1) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.toArray:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2b4996.  v0:= temp @kind object;
  #L2b4998.  v0:= (`float`[]) v0 @kind object;
  #L2b499c.  return v0 @kind object;
}
