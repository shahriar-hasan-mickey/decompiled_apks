record `kotlin.jvm.internal.CallableReference` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.reflect.KCallable` @kind interface, `java.io.Serializable` @kind interface {
  `boolean` `kotlin.jvm.internal.CallableReference.isTopLevel` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `kotlin.jvm.internal.CallableReference.name` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `kotlin.jvm.internal.CallableReference.owner` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `kotlin.jvm.internal.CallableReference.receiver` @AccessFlag PROTECTED_FINAL;
  `kotlin.reflect.KCallable` `kotlin.jvm.internal.CallableReference.reflected` @AccessFlag PRIVATE_TRANSIENT;
  `java.lang.String` `kotlin.jvm.internal.CallableReference.signature` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.Object` `@@kotlin.jvm.internal.CallableReference.NO_RECEIVER` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/jvm/internal/CallableReference;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2b33c8.  call temp:= `access$000`() @signature `Lkotlin/jvm/internal/CallableReference$NoReceiver;.access$000:()Lkotlin/jvm/internal/CallableReference$NoReceiver;` @kind static;
  #L2b33ce.  v0:= temp @kind object;
  #L2b33d0.  `@@kotlin.jvm.internal.CallableReference.NO_RECEIVER` @type ^`java.lang.Object` := v0 @kind object;
  #L2b33d4.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2b33e8.  v0:= `@@kotlin.jvm.internal.CallableReference.NO_RECEIVER` @type ^`java.lang.Object` @kind object;
  #L2b33ec.  call `<init>`(v1, v0) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2b33f2.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.CallableReference` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2b3404.  v2:= 0I;
  #L2b3406.  v3:= 0I;
  #L2b3408.  v4:= 0I;
  #L2b340a.  v5:= 0I;
  #L2b340c.  v0:= v6 @kind object;
  #L2b340e.  v1:= v7 @kind object;
  #L2b3410.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L2b3416.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.CallableReference` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object, `boolean` v5 ) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Z)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L2b3428.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b342e.  v0.`kotlin.jvm.internal.CallableReference.receiver` @type ^`java.lang.Object` := v1 @kind object;
  #L2b3432.  v0.`kotlin.jvm.internal.CallableReference.owner` @type ^`java.lang.Class` := v2 @kind object;
  #L2b3436.  v0.`kotlin.jvm.internal.CallableReference.name` @type ^`java.lang.String` := v3 @kind object;
  #L2b343a.  v0.`kotlin.jvm.internal.CallableReference.signature` @type ^`java.lang.String` := v4 @kind object;
  #L2b343e.  v0.`kotlin.jvm.internal.CallableReference.isTopLevel` @type ^`boolean` := v5 @kind boolean;
  #L2b3442.  return @kind void;
}
procedure `java.lang.Object` `call`(`kotlin.jvm.internal.CallableReference` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/jvm/internal/CallableReference;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b31f8.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L2b31fe.  v0:= temp @kind object;
  #L2b3200.  call temp:= `call`(v0, v2) @signature `Lkotlin/reflect/KCallable;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2b3206.  v2:= temp @kind object;
  #L2b3208.  return v2 @kind object;
}
procedure `java.lang.Object` `callBy`(`kotlin.jvm.internal.CallableReference` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lkotlin/jvm/internal/CallableReference;.callBy:(Ljava/util/Map;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b321c.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L2b3222.  v0:= temp @kind object;
  #L2b3224.  call temp:= `callBy`(v0, v2) @signature `Lkotlin/reflect/KCallable;.callBy:(Ljava/util/Map;)Ljava/lang/Object;` @kind interface;
  #L2b322a.  v2:= temp @kind object;
  #L2b322c.  return v2 @kind object;
}
procedure `kotlin.reflect.KCallable` `compute`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.compute:()Lkotlin/reflect/KCallable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b32f4.  v0:= v1.`kotlin.jvm.internal.CallableReference.reflected` @type ^`kotlin.reflect.KCallable` @kind object;
  #L2b32f8.  if v0 != 0 then goto L2b3308;
  #L2b32fc.  call temp:= `computeReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.computeReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L2b3302.  v0:= temp @kind object;
  #L2b3304.  v1.`kotlin.jvm.internal.CallableReference.reflected` @type ^`kotlin.reflect.KCallable` := v0 @kind object;
  #L2b3308.  return v0 @kind object;
}
procedure `kotlin.reflect.KCallable` `computeReflected`() @signature `Lkotlin/jvm/internal/CallableReference;.computeReflected:()Lkotlin/reflect/KCallable;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.util.List` `getAnnotations`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getAnnotations:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b3288.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L2b328e.  v0:= temp @kind object;
  #L2b3290.  call temp:= `getAnnotations`(v0) @signature `Lkotlin/reflect/KAnnotatedElement;.getAnnotations:()Ljava/util/List;` @kind interface;
  #L2b3296.  v0:= temp @kind object;
  #L2b3298.  return v0 @kind object;
}
procedure `java.lang.Object` `getBoundReceiver`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getBoundReceiver:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b3240.  v0:= v1.`kotlin.jvm.internal.CallableReference.receiver` @type ^`java.lang.Object` @kind object;
  #L2b3244.  return v0 @kind object;
}
procedure `java.lang.String` `getName`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b3258.  v0:= v1.`kotlin.jvm.internal.CallableReference.name` @type ^`java.lang.String` @kind object;
  #L2b325c.  return v0 @kind object;
}
procedure `kotlin.reflect.KDeclarationContainer` `getOwner`(`kotlin.jvm.internal.CallableReference` v2 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getOwner:()Lkotlin/reflect/KDeclarationContainer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b3348.  v0:= v2.`kotlin.jvm.internal.CallableReference.owner` @type ^`java.lang.Class` @kind object;
  #L2b334c.  if v0 != 0 then goto L2b3354;
  #L2b3350.  v0:= 0I;
  #L2b3352.  goto L2b336e;
  #L2b3354.  v1:= v2.`kotlin.jvm.internal.CallableReference.isTopLevel` @type ^`boolean` @kind boolean;
  #L2b3358.  if v1 == 0 then goto L2b3366;
  #L2b335c.  call temp:= `getOrCreateKotlinPackage`(v0) @signature `Lkotlin/jvm/internal/Reflection;.getOrCreateKotlinPackage:(Ljava/lang/Class;)Lkotlin/reflect/KDeclarationContainer;` @kind static;
  #L2b3362.  v0:= temp @kind object;
  #L2b3364.  goto L2b336e;
  #L2b3366.  call temp:= `getOrCreateKotlinClass`(v0) @signature `Lkotlin/jvm/internal/Reflection;.getOrCreateKotlinClass:(Ljava/lang/Class;)Lkotlin/reflect/KClass;` @kind static;
  #L2b336c.  v0:= temp @kind object;
  #L2b336e.  return v0 @kind object;
}
procedure `java.util.List` `getParameters`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getParameters:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b32ac.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L2b32b2.  v0:= temp @kind object;
  #L2b32b4.  call temp:= `getParameters`(v0) @signature `Lkotlin/reflect/KCallable;.getParameters:()Ljava/util/List;` @kind interface;
  #L2b32ba.  v0:= temp @kind object;
  #L2b32bc.  return v0 @kind object;
}
procedure `kotlin.reflect.KCallable` `getReflected`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2b331c.  call temp:= `compute`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.compute:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L2b3322.  v0:= temp @kind object;
  #L2b3324.  if v0 == v1 then goto L2b332a;
  #L2b3328.  return v0 @kind object;
  #L2b332a.  v0:= new `kotlin.jvm.KotlinReflectionNotSupportedError`;
  #L2b332e.  call `<init>`(v0) @signature `Lkotlin/jvm/KotlinReflectionNotSupportedError;.<init>:()V` @kind direct;
  #L2b3334.  throw v0;
}
procedure `kotlin.reflect.KType` `getReturnType`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getReturnType:()Lkotlin/reflect/KType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b3380.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L2b3386.  v0:= temp @kind object;
  #L2b3388.  call temp:= `getReturnType`(v0) @signature `Lkotlin/reflect/KCallable;.getReturnType:()Lkotlin/reflect/KType;` @kind interface;
  #L2b338e.  v0:= temp @kind object;
  #L2b3390.  return v0 @kind object;
}
procedure `java.lang.String` `getSignature`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getSignature:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b3270.  v0:= v1.`kotlin.jvm.internal.CallableReference.signature` @type ^`java.lang.String` @kind object;
  #L2b3274.  return v0 @kind object;
}
procedure `java.util.List` `getTypeParameters`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getTypeParameters:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b32d0.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L2b32d6.  v0:= temp @kind object;
  #L2b32d8.  call temp:= `getTypeParameters`(v0) @signature `Lkotlin/reflect/KCallable;.getTypeParameters:()Ljava/util/List;` @kind interface;
  #L2b32de.  v0:= temp @kind object;
  #L2b32e0.  return v0 @kind object;
}
procedure `kotlin.reflect.KVisibility` `getVisibility`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getVisibility:()Lkotlin/reflect/KVisibility;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b33a4.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L2b33aa.  v0:= temp @kind object;
  #L2b33ac.  call temp:= `getVisibility`(v0) @signature `Lkotlin/reflect/KCallable;.getVisibility:()Lkotlin/reflect/KVisibility;` @kind interface;
  #L2b33b2.  v0:= temp @kind object;
  #L2b33b4.  return v0 @kind object;
}
procedure `boolean` `isAbstract`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.isAbstract:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b3168.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L2b316e.  v0:= temp @kind object;
  #L2b3170.  call temp:= `isAbstract`(v0) @signature `Lkotlin/reflect/KCallable;.isAbstract:()Z` @kind interface;
  #L2b3176.  v0:= temp;
  #L2b3178.  return v0;
}
procedure `boolean` `isFinal`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.isFinal:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b318c.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L2b3192.  v0:= temp @kind object;
  #L2b3194.  call temp:= `isFinal`(v0) @signature `Lkotlin/reflect/KCallable;.isFinal:()Z` @kind interface;
  #L2b319a.  v0:= temp;
  #L2b319c.  return v0;
}
procedure `boolean` `isOpen`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b31b0.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L2b31b6.  v0:= temp @kind object;
  #L2b31b8.  call temp:= `isOpen`(v0) @signature `Lkotlin/reflect/KCallable;.isOpen:()Z` @kind interface;
  #L2b31be.  v0:= temp;
  #L2b31c0.  return v0;
}
procedure `boolean` `isSuspend`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.isSuspend:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b31d4.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L2b31da.  v0:= temp @kind object;
  #L2b31dc.  call temp:= `isSuspend`(v0) @signature `Lkotlin/reflect/KCallable;.isSuspend:()Z` @kind interface;
  #L2b31e2.  v0:= temp;
  #L2b31e4.  return v0;
}
