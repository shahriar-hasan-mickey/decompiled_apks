record `kotlin.jvm.internal.TypeReference$asString$args$1` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function1` @kind interface {
  `kotlin.jvm.internal.TypeReference` `kotlin.jvm.internal.TypeReference$asString$args$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.jvm.internal.TypeReference$asString$args$1` v0 @kind this, `kotlin.jvm.internal.TypeReference` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeReference$asString$args$1;.<init>:(Lkotlin/jvm/internal/TypeReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2b7e0c.  v0.`kotlin.jvm.internal.TypeReference$asString$args$1.this$0` @type ^`kotlin.jvm.internal.TypeReference` := v1 @kind object;
  #L2b7e10.  v1:= 1I;
  #L2b7e12.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L2b7e18.  return @kind void;
}
procedure `java.lang.CharSequence` `invoke`(`kotlin.jvm.internal.TypeReference$asString$args$1` v1 @kind this, `kotlin.reflect.KTypeProjection` v2 @kind object) @signature `Lkotlin/jvm/internal/TypeReference$asString$args$1;.invoke:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/CharSequence;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2b7dc4.  v0:= "it" @kind object;
  #L2b7dc8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b7dce.  v0:= v1.`kotlin.jvm.internal.TypeReference$asString$args$1.this$0` @type ^`kotlin.jvm.internal.TypeReference` @kind object;
  #L2b7dd2.  call temp:= `access$asString`(v0, v2) @signature `Lkotlin/jvm/internal/TypeReference;.access$asString:(Lkotlin/jvm/internal/TypeReference;Lkotlin/reflect/KTypeProjection;)Ljava/lang/String;` @kind static;
  #L2b7dd8.  v2:= temp @kind object;
  #L2b7dda.  return v2 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.jvm.internal.TypeReference$asString$args$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeReference$asString$args$1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2b7dec.  v1:= (`kotlin.reflect.KTypeProjection`) v1 @kind object;
  #L2b7df0.  call temp:= `invoke`(v0, v1) @signature `Lkotlin/jvm/internal/TypeReference$asString$args$1;.invoke:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/CharSequence;` @kind virtual;
  #L2b7df6.  v1:= temp @kind object;
  #L2b7df8.  return v1 @kind object;
}
