record `kotlin.jvm.internal.BooleanSpreadBuilder` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.jvm.internal.PrimitiveSpreadBuilder` @kind class {
  `boolean`[] `kotlin.jvm.internal.BooleanSpreadBuilder.values` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.jvm.internal.BooleanSpreadBuilder` v0 @kind this, `int` v1 ) @signature `Lkotlin/jvm/internal/BooleanSpreadBuilder;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2b2f98.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.<init>:(I)V` @kind direct;
  #L2b2f9e.  v1:= new `boolean`[v1];
  #L2b2fa2.  v0.`kotlin.jvm.internal.BooleanSpreadBuilder.values` @type ^`boolean`[] := v1 @kind object;
  #L2b2fa6.  return @kind void;
}
procedure `void` `add`(`kotlin.jvm.internal.BooleanSpreadBuilder` v3 @kind this, `boolean` v4 ) @signature `Lkotlin/jvm/internal/BooleanSpreadBuilder;.add:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2b2fb8.  v0:= v3.`kotlin.jvm.internal.BooleanSpreadBuilder.values` @type ^`boolean`[] @kind object;
  #L2b2fbc.  call temp:= `getPosition`(v3) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getPosition:()I` @kind virtual;
  #L2b2fc2.  v1:= temp;
  #L2b2fc4.  v2:= v1 + 1;
  #L2b2fc8.  call `setPosition`(v3, v2) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.setPosition:(I)V` @kind virtual;
  #L2b2fce.  v0[v1]:= v4 @kind boolean;
  #L2b2fd2.  return @kind void;
}
procedure `int` `getSize`(`kotlin.jvm.internal.BooleanSpreadBuilder` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/BooleanSpreadBuilder;.getSize:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2b2f78.  v1:= (`boolean`[]) v1 @kind object;
  #L2b2f7c.  call temp:= `getSize`(v0, v1) @signature `Lkotlin/jvm/internal/BooleanSpreadBuilder;.getSize:([Z)I` @kind virtual;
  #L2b2f82.  v1:= temp;
  #L2b2f84.  return v1;
}
procedure `int` `getSize`(`kotlin.jvm.internal.BooleanSpreadBuilder` v1 @kind this, `boolean`[] v2 @kind object) @signature `Lkotlin/jvm/internal/BooleanSpreadBuilder;.getSize:([Z)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2b2f58.  v0:= "<this>" @kind object;
  #L2b2f5c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b2f62.  v2:= length @variable v2;
  #L2b2f64.  return v2;
}
procedure `boolean`[] `toArray`(`kotlin.jvm.internal.BooleanSpreadBuilder` v2 @kind this) @signature `Lkotlin/jvm/internal/BooleanSpreadBuilder;.toArray:()[Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2b2f28.  v0:= v2.`kotlin.jvm.internal.BooleanSpreadBuilder.values` @type ^`boolean`[] @kind object;
  #L2b2f2c.  call temp:= `size`(v2) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.size:()I` @kind virtual;
  #L2b2f32.  v1:= temp;
  #L2b2f34.  v1:= new `boolean`[v1];
  #L2b2f38.  call temp:= `toArray`(v2, v0, v1) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.toArray:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2b2f3e.  v0:= temp @kind object;
  #L2b2f40.  v0:= (`boolean`[]) v0 @kind object;
  #L2b2f44.  return v0 @kind object;
}
