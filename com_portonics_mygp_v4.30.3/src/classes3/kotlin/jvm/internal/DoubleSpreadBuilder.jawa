record `kotlin.jvm.internal.DoubleSpreadBuilder` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.jvm.internal.PrimitiveSpreadBuilder` @kind class {
  `double`[] `kotlin.jvm.internal.DoubleSpreadBuilder.values` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.jvm.internal.DoubleSpreadBuilder` v0 @kind this, `int` v1 ) @signature `Lkotlin/jvm/internal/DoubleSpreadBuilder;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2b47c4.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.<init>:(I)V` @kind direct;
  #L2b47ca.  v1:= new `double`[v1];
  #L2b47ce.  v0.`kotlin.jvm.internal.DoubleSpreadBuilder.values` @type ^`double`[] := v1 @kind object;
  #L2b47d2.  return @kind void;
}
procedure `void` `add`(`kotlin.jvm.internal.DoubleSpreadBuilder` v3 @kind this, `double` v4 ) @signature `Lkotlin/jvm/internal/DoubleSpreadBuilder;.add:(D)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2b47e4.  v0:= v3.`kotlin.jvm.internal.DoubleSpreadBuilder.values` @type ^`double`[] @kind object;
  #L2b47e8.  call temp:= `getPosition`(v3) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getPosition:()I` @kind virtual;
  #L2b47ee.  v1:= temp;
  #L2b47f0.  v2:= v1 + 1;
  #L2b47f4.  call `setPosition`(v3, v2) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.setPosition:(I)V` @kind virtual;
  #L2b47fa.  v0[v1]:= v4 @kind wide;
  #L2b47fe.  return @kind void;
}
procedure `int` `getSize`(`kotlin.jvm.internal.DoubleSpreadBuilder` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/DoubleSpreadBuilder;.getSize:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2b47a4.  v1:= (`double`[]) v1 @kind object;
  #L2b47a8.  call temp:= `getSize`(v0, v1) @signature `Lkotlin/jvm/internal/DoubleSpreadBuilder;.getSize:([D)I` @kind virtual;
  #L2b47ae.  v1:= temp;
  #L2b47b0.  return v1;
}
procedure `int` `getSize`(`kotlin.jvm.internal.DoubleSpreadBuilder` v1 @kind this, `double`[] v2 @kind object) @signature `Lkotlin/jvm/internal/DoubleSpreadBuilder;.getSize:([D)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2b4784.  v0:= "<this>" @kind object;
  #L2b4788.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b478e.  v2:= length @variable v2;
  #L2b4790.  return v2;
}
procedure `double`[] `toArray`(`kotlin.jvm.internal.DoubleSpreadBuilder` v2 @kind this) @signature `Lkotlin/jvm/internal/DoubleSpreadBuilder;.toArray:()[D` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2b4754.  v0:= v2.`kotlin.jvm.internal.DoubleSpreadBuilder.values` @type ^`double`[] @kind object;
  #L2b4758.  call temp:= `size`(v2) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.size:()I` @kind virtual;
  #L2b475e.  v1:= temp;
  #L2b4760.  v1:= new `double`[v1];
  #L2b4764.  call temp:= `toArray`(v2, v0, v1) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.toArray:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2b476a.  v0:= temp @kind object;
  #L2b476c.  v0:= (`double`[]) v0 @kind object;
  #L2b4770.  return v0 @kind object;
}
