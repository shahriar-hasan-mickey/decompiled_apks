record `kotlin.jvm.internal.ShortSpreadBuilder` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.jvm.internal.PrimitiveSpreadBuilder` @kind class {
  `short`[] `kotlin.jvm.internal.ShortSpreadBuilder.values` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.jvm.internal.ShortSpreadBuilder` v0 @kind this, `int` v1 ) @signature `Lkotlin/jvm/internal/ShortSpreadBuilder;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2b6efc.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.<init>:(I)V` @kind direct;
  #L2b6f02.  v1:= new `short`[v1];
  #L2b6f06.  v0.`kotlin.jvm.internal.ShortSpreadBuilder.values` @type ^`short`[] := v1 @kind object;
  #L2b6f0a.  return @kind void;
}
procedure `void` `add`(`kotlin.jvm.internal.ShortSpreadBuilder` v3 @kind this, `short` v4 ) @signature `Lkotlin/jvm/internal/ShortSpreadBuilder;.add:(S)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2b6f1c.  v0:= v3.`kotlin.jvm.internal.ShortSpreadBuilder.values` @type ^`short`[] @kind object;
  #L2b6f20.  call temp:= `getPosition`(v3) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getPosition:()I` @kind virtual;
  #L2b6f26.  v1:= temp;
  #L2b6f28.  v2:= v1 + 1;
  #L2b6f2c.  call `setPosition`(v3, v2) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.setPosition:(I)V` @kind virtual;
  #L2b6f32.  v0[v1]:= v4 @kind short;
  #L2b6f36.  return @kind void;
}
procedure `int` `getSize`(`kotlin.jvm.internal.ShortSpreadBuilder` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/ShortSpreadBuilder;.getSize:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2b6e8c.  v1:= (`short`[]) v1 @kind object;
  #L2b6e90.  call temp:= `getSize`(v0, v1) @signature `Lkotlin/jvm/internal/ShortSpreadBuilder;.getSize:([S)I` @kind virtual;
  #L2b6e96.  v1:= temp;
  #L2b6e98.  return v1;
}
procedure `int` `getSize`(`kotlin.jvm.internal.ShortSpreadBuilder` v1 @kind this, `short`[] v2 @kind object) @signature `Lkotlin/jvm/internal/ShortSpreadBuilder;.getSize:([S)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2b6eac.  v0:= "<this>" @kind object;
  #L2b6eb0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b6eb6.  v2:= length @variable v2;
  #L2b6eb8.  return v2;
}
procedure `short`[] `toArray`(`kotlin.jvm.internal.ShortSpreadBuilder` v2 @kind this) @signature `Lkotlin/jvm/internal/ShortSpreadBuilder;.toArray:()[S` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2b6ecc.  v0:= v2.`kotlin.jvm.internal.ShortSpreadBuilder.values` @type ^`short`[] @kind object;
  #L2b6ed0.  call temp:= `size`(v2) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.size:()I` @kind virtual;
  #L2b6ed6.  v1:= temp;
  #L2b6ed8.  v1:= new `short`[v1];
  #L2b6edc.  call temp:= `toArray`(v2, v0, v1) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.toArray:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2b6ee2.  v0:= temp @kind object;
  #L2b6ee4.  v0:= (`short`[]) v0 @kind object;
  #L2b6ee8.  return v0 @kind object;
}
