record `kotlin.jvm.internal.TypeIntrinsics` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`kotlin.jvm.internal.TypeIntrinsics` v0 @kind this) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2b7988.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b798e.  return @kind void;
}
procedure `java.util.Collection` `asMutableCollection`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.asMutableCollection:(Ljava/lang/Object;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b7560.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b7564.  if v0 == 0 then goto L2b757a;
  #L2b7568.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableCollection` @kind boolean;
  #L2b756c.  if v0 != 0 then goto L2b757a;
  #L2b7570.  v0:= "kotlin.collections.MutableCollection" @kind object;
  #L2b7574.  call `throwCce`(v1, v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b757a.  call temp:= `castToCollection`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToCollection:(Ljava/lang/Object;)Ljava/util/Collection;` @kind static;
  #L2b7580.  v1:= temp @kind object;
  #L2b7582.  return v1 @kind object;
}
procedure `java.util.Collection` `asMutableCollection`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.asMutableCollection:(Ljava/lang/Object;Ljava/lang/String;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b7594.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b7598.  if v0 == 0 then goto L2b75aa;
  #L2b759c.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableCollection` @kind boolean;
  #L2b75a0.  if v0 != 0 then goto L2b75aa;
  #L2b75a4.  call `throwCce`(v2) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/String;)V` @kind static;
  #L2b75aa.  call temp:= `castToCollection`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToCollection:(Ljava/lang/Object;)Ljava/util/Collection;` @kind static;
  #L2b75b0.  v1:= temp @kind object;
  #L2b75b2.  return v1 @kind object;
}
procedure `java.lang.Iterable` `asMutableIterable`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.asMutableIterable:(Ljava/lang/Object;)Ljava/lang/Iterable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b742c.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b7430.  if v0 == 0 then goto L2b7446;
  #L2b7434.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableIterable` @kind boolean;
  #L2b7438.  if v0 != 0 then goto L2b7446;
  #L2b743c.  v0:= "kotlin.collections.MutableIterable" @kind object;
  #L2b7440.  call `throwCce`(v1, v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b7446.  call temp:= `castToIterable`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToIterable:(Ljava/lang/Object;)Ljava/lang/Iterable;` @kind static;
  #L2b744c.  v1:= temp @kind object;
  #L2b744e.  return v1 @kind object;
}
procedure `java.lang.Iterable` `asMutableIterable`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.asMutableIterable:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Iterable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b7460.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b7464.  if v0 == 0 then goto L2b7476;
  #L2b7468.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableIterable` @kind boolean;
  #L2b746c.  if v0 != 0 then goto L2b7476;
  #L2b7470.  call `throwCce`(v2) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/String;)V` @kind static;
  #L2b7476.  call temp:= `castToIterable`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToIterable:(Ljava/lang/Object;)Ljava/lang/Iterable;` @kind static;
  #L2b747c.  v1:= temp @kind object;
  #L2b747e.  return v1 @kind object;
}
procedure `java.util.Iterator` `asMutableIterator`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.asMutableIterator:(Ljava/lang/Object;)Ljava/util/Iterator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b75f8.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b75fc.  if v0 == 0 then goto L2b7612;
  #L2b7600.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableIterator` @kind boolean;
  #L2b7604.  if v0 != 0 then goto L2b7612;
  #L2b7608.  v0:= "kotlin.collections.MutableIterator" @kind object;
  #L2b760c.  call `throwCce`(v1, v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b7612.  call temp:= `castToIterator`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToIterator:(Ljava/lang/Object;)Ljava/util/Iterator;` @kind static;
  #L2b7618.  v1:= temp @kind object;
  #L2b761a.  return v1 @kind object;
}
procedure `java.util.Iterator` `asMutableIterator`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.asMutableIterator:(Ljava/lang/Object;Ljava/lang/String;)Ljava/util/Iterator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b762c.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b7630.  if v0 == 0 then goto L2b7642;
  #L2b7634.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableIterator` @kind boolean;
  #L2b7638.  if v0 != 0 then goto L2b7642;
  #L2b763c.  call `throwCce`(v2) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/String;)V` @kind static;
  #L2b7642.  call temp:= `castToIterator`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToIterator:(Ljava/lang/Object;)Ljava/util/Iterator;` @kind static;
  #L2b7648.  v1:= temp @kind object;
  #L2b764a.  return v1 @kind object;
}
procedure `java.util.List` `asMutableList`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.asMutableList:(Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b7690.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b7694.  if v0 == 0 then goto L2b76aa;
  #L2b7698.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableList` @kind boolean;
  #L2b769c.  if v0 != 0 then goto L2b76aa;
  #L2b76a0.  v0:= "kotlin.collections.MutableList" @kind object;
  #L2b76a4.  call `throwCce`(v1, v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b76aa.  call temp:= `castToList`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2b76b0.  v1:= temp @kind object;
  #L2b76b2.  return v1 @kind object;
}
procedure `java.util.List` `asMutableList`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.asMutableList:(Ljava/lang/Object;Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b76c4.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b76c8.  if v0 == 0 then goto L2b76da;
  #L2b76cc.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableList` @kind boolean;
  #L2b76d0.  if v0 != 0 then goto L2b76da;
  #L2b76d4.  call `throwCce`(v2) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/String;)V` @kind static;
  #L2b76da.  call temp:= `castToList`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2b76e0.  v1:= temp @kind object;
  #L2b76e2.  return v1 @kind object;
}
procedure `java.util.ListIterator` `asMutableListIterator`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.asMutableListIterator:(Ljava/lang/Object;)Ljava/util/ListIterator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b7728.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b772c.  if v0 == 0 then goto L2b7742;
  #L2b7730.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableListIterator` @kind boolean;
  #L2b7734.  if v0 != 0 then goto L2b7742;
  #L2b7738.  v0:= "kotlin.collections.MutableListIterator" @kind object;
  #L2b773c.  call `throwCce`(v1, v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b7742.  call temp:= `castToListIterator`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToListIterator:(Ljava/lang/Object;)Ljava/util/ListIterator;` @kind static;
  #L2b7748.  v1:= temp @kind object;
  #L2b774a.  return v1 @kind object;
}
procedure `java.util.ListIterator` `asMutableListIterator`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.asMutableListIterator:(Ljava/lang/Object;Ljava/lang/String;)Ljava/util/ListIterator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b775c.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b7760.  if v0 == 0 then goto L2b7772;
  #L2b7764.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableListIterator` @kind boolean;
  #L2b7768.  if v0 != 0 then goto L2b7772;
  #L2b776c.  call `throwCce`(v2) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/String;)V` @kind static;
  #L2b7772.  call temp:= `castToListIterator`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToListIterator:(Ljava/lang/Object;)Ljava/util/ListIterator;` @kind static;
  #L2b7778.  v1:= temp @kind object;
  #L2b777a.  return v1 @kind object;
}
procedure `java.util.Map` `asMutableMap`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.asMutableMap:(Ljava/lang/Object;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b77c0.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b77c4.  if v0 == 0 then goto L2b77da;
  #L2b77c8.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableMap` @kind boolean;
  #L2b77cc.  if v0 != 0 then goto L2b77da;
  #L2b77d0.  v0:= "kotlin.collections.MutableMap" @kind object;
  #L2b77d4.  call `throwCce`(v1, v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b77da.  call temp:= `castToMap`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToMap:(Ljava/lang/Object;)Ljava/util/Map;` @kind static;
  #L2b77e0.  v1:= temp @kind object;
  #L2b77e2.  return v1 @kind object;
}
procedure `java.util.Map` `asMutableMap`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.asMutableMap:(Ljava/lang/Object;Ljava/lang/String;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b77f4.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b77f8.  if v0 == 0 then goto L2b780a;
  #L2b77fc.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableMap` @kind boolean;
  #L2b7800.  if v0 != 0 then goto L2b780a;
  #L2b7804.  call `throwCce`(v2) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/String;)V` @kind static;
  #L2b780a.  call temp:= `castToMap`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToMap:(Ljava/lang/Object;)Ljava/util/Map;` @kind static;
  #L2b7810.  v1:= temp @kind object;
  #L2b7812.  return v1 @kind object;
}
procedure `java.util.Map$Entry` `asMutableMapEntry`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.asMutableMapEntry:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b7858.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b785c.  if v0 == 0 then goto L2b7872;
  #L2b7860.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableMap$Entry` @kind boolean;
  #L2b7864.  if v0 != 0 then goto L2b7872;
  #L2b7868.  v0:= "kotlin.collections.MutableMap.MutableEntry" @kind object;
  #L2b786c.  call `throwCce`(v1, v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b7872.  call temp:= `castToMapEntry`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToMapEntry:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @kind static;
  #L2b7878.  v1:= temp @kind object;
  #L2b787a.  return v1 @kind object;
}
procedure `java.util.Map$Entry` `asMutableMapEntry`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.asMutableMapEntry:(Ljava/lang/Object;Ljava/lang/String;)Ljava/util/Map$Entry;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b788c.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b7890.  if v0 == 0 then goto L2b78a2;
  #L2b7894.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableMap$Entry` @kind boolean;
  #L2b7898.  if v0 != 0 then goto L2b78a2;
  #L2b789c.  call `throwCce`(v2) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/String;)V` @kind static;
  #L2b78a2.  call temp:= `castToMapEntry`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToMapEntry:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @kind static;
  #L2b78a8.  v1:= temp @kind object;
  #L2b78aa.  return v1 @kind object;
}
procedure `java.util.Set` `asMutableSet`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.asMutableSet:(Ljava/lang/Object;)Ljava/util/Set;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b78f0.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b78f4.  if v0 == 0 then goto L2b790a;
  #L2b78f8.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableSet` @kind boolean;
  #L2b78fc.  if v0 != 0 then goto L2b790a;
  #L2b7900.  v0:= "kotlin.collections.MutableSet" @kind object;
  #L2b7904.  call `throwCce`(v1, v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b790a.  call temp:= `castToSet`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToSet:(Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L2b7910.  v1:= temp @kind object;
  #L2b7912.  return v1 @kind object;
}
procedure `java.util.Set` `asMutableSet`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.asMutableSet:(Ljava/lang/Object;Ljava/lang/String;)Ljava/util/Set;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b7924.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b7928.  if v0 == 0 then goto L2b793a;
  #L2b792c.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableSet` @kind boolean;
  #L2b7930.  if v0 != 0 then goto L2b793a;
  #L2b7934.  call `throwCce`(v2) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/String;)V` @kind static;
  #L2b793a.  call temp:= `castToSet`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToSet:(Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L2b7940.  v1:= temp @kind object;
  #L2b7942.  return v1 @kind object;
}
procedure `java.lang.Object` `beforeCheckcastToFunctionOfArity`(`java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.beforeCheckcastToFunctionOfArity:(Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2b74c4.  if v2 == 0 then goto L2b74fc;
  #L2b74c8.  call temp:= `isFunctionOfArity`(v2, v3) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.isFunctionOfArity:(Ljava/lang/Object;I)Z` @kind static;
  #L2b74ce.  v0:= temp;
  #L2b74d0.  if v0 != 0 then goto L2b74fc;
  #L2b74d4.  v0:= new `java.lang.StringBuilder`;
  #L2b74d8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b74de.  v1:= "kotlin.jvm.functions.Function" @kind object;
  #L2b74e2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b74e8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b74ee.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b74f4.  v3:= temp @kind object;
  #L2b74f6.  call `throwCce`(v2, v3) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b74fc.  return v2 @kind object;
}
procedure `java.lang.Object` `beforeCheckcastToFunctionOfArity`(`java.lang.Object` v0 @kind object, `int` v1 , `java.lang.String` v2 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.beforeCheckcastToFunctionOfArity:(Ljava/lang/Object;ILjava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2b7510.  if v0 == 0 then goto L2b7526;
  #L2b7514.  call temp:= `isFunctionOfArity`(v0, v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.isFunctionOfArity:(Ljava/lang/Object;I)Z` @kind static;
  #L2b751a.  v1:= temp;
  #L2b751c.  if v1 != 0 then goto L2b7526;
  #L2b7520.  call `throwCce`(v2) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/String;)V` @kind static;
  #L2b7526.  return v0 @kind object;
}
procedure `java.util.Collection` `castToCollection`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToCollection:(Ljava/lang/Object;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2b75c4.  v0:= (`java.util.Collection`) v0 @kind object;
  #L2b75c8.  return v0 @kind object;
  #L2b75ca.  v0:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L2b75cc.  call temp:= `throwCce`(v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/ClassCastException;)Ljava/lang/ClassCastException;` @kind static;
  #L2b75d2.  v0:= temp @kind object;
  #L2b75d4.  throw v0;
  catch `java.lang.ClassCastException` @[L2b75c4..L2b75c8] goto L2b75ca;
}
procedure `java.lang.Iterable` `castToIterable`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToIterable:(Ljava/lang/Object;)Ljava/lang/Iterable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2b7490.  v0:= (`java.lang.Iterable`) v0 @kind object;
  #L2b7494.  return v0 @kind object;
  #L2b7496.  v0:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L2b7498.  call temp:= `throwCce`(v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/ClassCastException;)Ljava/lang/ClassCastException;` @kind static;
  #L2b749e.  v0:= temp @kind object;
  #L2b74a0.  throw v0;
  catch `java.lang.ClassCastException` @[L2b7490..L2b7494] goto L2b7496;
}
procedure `java.util.Iterator` `castToIterator`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToIterator:(Ljava/lang/Object;)Ljava/util/Iterator;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2b765c.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L2b7660.  return v0 @kind object;
  #L2b7662.  v0:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L2b7664.  call temp:= `throwCce`(v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/ClassCastException;)Ljava/lang/ClassCastException;` @kind static;
  #L2b766a.  v0:= temp @kind object;
  #L2b766c.  throw v0;
  catch `java.lang.ClassCastException` @[L2b765c..L2b7660] goto L2b7662;
}
procedure `java.util.List` `castToList`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToList:(Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2b76f4.  v0:= (`java.util.List`) v0 @kind object;
  #L2b76f8.  return v0 @kind object;
  #L2b76fa.  v0:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L2b76fc.  call temp:= `throwCce`(v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/ClassCastException;)Ljava/lang/ClassCastException;` @kind static;
  #L2b7702.  v0:= temp @kind object;
  #L2b7704.  throw v0;
  catch `java.lang.ClassCastException` @[L2b76f4..L2b76f8] goto L2b76fa;
}
procedure `java.util.ListIterator` `castToListIterator`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToListIterator:(Ljava/lang/Object;)Ljava/util/ListIterator;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2b778c.  v0:= (`java.util.ListIterator`) v0 @kind object;
  #L2b7790.  return v0 @kind object;
  #L2b7792.  v0:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L2b7794.  call temp:= `throwCce`(v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/ClassCastException;)Ljava/lang/ClassCastException;` @kind static;
  #L2b779a.  v0:= temp @kind object;
  #L2b779c.  throw v0;
  catch `java.lang.ClassCastException` @[L2b778c..L2b7790] goto L2b7792;
}
procedure `java.util.Map` `castToMap`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToMap:(Ljava/lang/Object;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2b7824.  v0:= (`java.util.Map`) v0 @kind object;
  #L2b7828.  return v0 @kind object;
  #L2b782a.  v0:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L2b782c.  call temp:= `throwCce`(v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/ClassCastException;)Ljava/lang/ClassCastException;` @kind static;
  #L2b7832.  v0:= temp @kind object;
  #L2b7834.  throw v0;
  catch `java.lang.ClassCastException` @[L2b7824..L2b7828] goto L2b782a;
}
procedure `java.util.Map$Entry` `castToMapEntry`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToMapEntry:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2b78bc.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L2b78c0.  return v0 @kind object;
  #L2b78c2.  v0:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L2b78c4.  call temp:= `throwCce`(v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/ClassCastException;)Ljava/lang/ClassCastException;` @kind static;
  #L2b78ca.  v0:= temp @kind object;
  #L2b78cc.  throw v0;
  catch `java.lang.ClassCastException` @[L2b78bc..L2b78c0] goto L2b78c2;
}
procedure `java.util.Set` `castToSet`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.castToSet:(Ljava/lang/Object;)Ljava/util/Set;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2b7954.  v0:= (`java.util.Set`) v0 @kind object;
  #L2b7958.  return v0 @kind object;
  #L2b795a.  v0:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L2b795c.  call temp:= `throwCce`(v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/ClassCastException;)Ljava/lang/ClassCastException;` @kind static;
  #L2b7962.  v0:= temp @kind object;
  #L2b7964.  throw v0;
  catch `java.lang.ClassCastException` @[L2b7954..L2b7958] goto L2b795a;
}
procedure `int` `getFunctionArity`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.getFunctionArity:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b72b0.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.FunctionBase` @kind boolean;
  #L2b72b4.  if v0 == 0 then goto L2b72c6;
  #L2b72b8.  v1:= (`kotlin.jvm.internal.FunctionBase`) v1 @kind object;
  #L2b72bc.  call temp:= `getArity`(v1) @signature `Lkotlin/jvm/internal/FunctionBase;.getArity:()I` @kind interface;
  #L2b72c2.  v1:= temp;
  #L2b72c4.  return v1;
  #L2b72c6.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function0` @kind boolean;
  #L2b72ca.  if v0 == 0 then goto L2b72d2;
  #L2b72ce.  v1:= 0I;
  #L2b72d0.  return v1;
  #L2b72d2.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function1` @kind boolean;
  #L2b72d6.  if v0 == 0 then goto L2b72de;
  #L2b72da.  v1:= 1I;
  #L2b72dc.  return v1;
  #L2b72de.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function2` @kind boolean;
  #L2b72e2.  if v0 == 0 then goto L2b72ea;
  #L2b72e6.  v1:= 2I;
  #L2b72e8.  return v1;
  #L2b72ea.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function3` @kind boolean;
  #L2b72ee.  if v0 == 0 then goto L2b72f6;
  #L2b72f2.  v1:= 3I;
  #L2b72f4.  return v1;
  #L2b72f6.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function4` @kind boolean;
  #L2b72fa.  if v0 == 0 then goto L2b7302;
  #L2b72fe.  v1:= 4I;
  #L2b7300.  return v1;
  #L2b7302.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function5` @kind boolean;
  #L2b7306.  if v0 == 0 then goto L2b730e;
  #L2b730a.  v1:= 5I;
  #L2b730c.  return v1;
  #L2b730e.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function6` @kind boolean;
  #L2b7312.  if v0 == 0 then goto L2b731a;
  #L2b7316.  v1:= 6I;
  #L2b7318.  return v1;
  #L2b731a.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function7` @kind boolean;
  #L2b731e.  if v0 == 0 then goto L2b7326;
  #L2b7322.  v1:= 7I;
  #L2b7324.  return v1;
  #L2b7326.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function8` @kind boolean;
  #L2b732a.  if v0 == 0 then goto L2b7334;
  #L2b732e.  v1:= 8I;
  #L2b7332.  return v1;
  #L2b7334.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function9` @kind boolean;
  #L2b7338.  if v0 == 0 then goto L2b7342;
  #L2b733c.  v1:= 9I;
  #L2b7340.  return v1;
  #L2b7342.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function10` @kind boolean;
  #L2b7346.  if v0 == 0 then goto L2b7350;
  #L2b734a.  v1:= 10I;
  #L2b734e.  return v1;
  #L2b7350.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function11` @kind boolean;
  #L2b7354.  if v0 == 0 then goto L2b735e;
  #L2b7358.  v1:= 11I;
  #L2b735c.  return v1;
  #L2b735e.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function12` @kind boolean;
  #L2b7362.  if v0 == 0 then goto L2b736c;
  #L2b7366.  v1:= 12I;
  #L2b736a.  return v1;
  #L2b736c.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function13` @kind boolean;
  #L2b7370.  if v0 == 0 then goto L2b737a;
  #L2b7374.  v1:= 13I;
  #L2b7378.  return v1;
  #L2b737a.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function14` @kind boolean;
  #L2b737e.  if v0 == 0 then goto L2b7388;
  #L2b7382.  v1:= 14I;
  #L2b7386.  return v1;
  #L2b7388.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function15` @kind boolean;
  #L2b738c.  if v0 == 0 then goto L2b7396;
  #L2b7390.  v1:= 15I;
  #L2b7394.  return v1;
  #L2b7396.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function16` @kind boolean;
  #L2b739a.  if v0 == 0 then goto L2b73a4;
  #L2b739e.  v1:= 16I;
  #L2b73a2.  return v1;
  #L2b73a4.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function17` @kind boolean;
  #L2b73a8.  if v0 == 0 then goto L2b73b2;
  #L2b73ac.  v1:= 17I;
  #L2b73b0.  return v1;
  #L2b73b2.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function18` @kind boolean;
  #L2b73b6.  if v0 == 0 then goto L2b73c0;
  #L2b73ba.  v1:= 18I;
  #L2b73be.  return v1;
  #L2b73c0.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function19` @kind boolean;
  #L2b73c4.  if v0 == 0 then goto L2b73ce;
  #L2b73c8.  v1:= 19I;
  #L2b73cc.  return v1;
  #L2b73ce.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function20` @kind boolean;
  #L2b73d2.  if v0 == 0 then goto L2b73dc;
  #L2b73d6.  v1:= 20I;
  #L2b73da.  return v1;
  #L2b73dc.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function21` @kind boolean;
  #L2b73e0.  if v0 == 0 then goto L2b73ea;
  #L2b73e4.  v1:= 21I;
  #L2b73e8.  return v1;
  #L2b73ea.  v1:= instanceof @variable v1 @type ^`kotlin.jvm.functions.Function22` @kind boolean;
  #L2b73ee.  if v1 == 0 then goto L2b73f8;
  #L2b73f2.  v1:= 22I;
  #L2b73f6.  return v1;
  #L2b73f8.  v1:= -1I;
  #L2b73fa.  return v1;
}
procedure `boolean` `isFunctionOfArity`(`java.lang.Object` v1 @kind object, `int` v2 ) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.isFunctionOfArity:(Ljava/lang/Object;I)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b7104.  v0:= instanceof @variable v1 @type ^`kotlin.Function` @kind boolean;
  #L2b7108.  if v0 == 0 then goto L2b711c;
  #L2b710c.  call temp:= `getFunctionArity`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.getFunctionArity:(Ljava/lang/Object;)I` @kind static;
  #L2b7112.  v1:= temp;
  #L2b7114.  if v1 != v2 then goto L2b711c;
  #L2b7118.  v1:= 1I;
  #L2b711a.  goto L2b711e;
  #L2b711c.  v1:= 0I;
  #L2b711e.  return v1;
}
procedure `boolean` `isMutableCollection`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.isMutableCollection:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b7130.  v0:= instanceof @variable v1 @type ^`java.util.Collection` @kind boolean;
  #L2b7134.  if v0 == 0 then goto L2b714c;
  #L2b7138.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b713c.  if v0 == 0 then goto L2b7148;
  #L2b7140.  v1:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableCollection` @kind boolean;
  #L2b7144.  if v1 == 0 then goto L2b714c;
  #L2b7148.  v1:= 1I;
  #L2b714a.  goto L2b714e;
  #L2b714c.  v1:= 0I;
  #L2b714e.  return v1;
}
procedure `boolean` `isMutableIterable`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.isMutableIterable:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b7160.  v0:= instanceof @variable v1 @type ^`java.lang.Iterable` @kind boolean;
  #L2b7164.  if v0 == 0 then goto L2b717c;
  #L2b7168.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b716c.  if v0 == 0 then goto L2b7178;
  #L2b7170.  v1:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableIterable` @kind boolean;
  #L2b7174.  if v1 == 0 then goto L2b717c;
  #L2b7178.  v1:= 1I;
  #L2b717a.  goto L2b717e;
  #L2b717c.  v1:= 0I;
  #L2b717e.  return v1;
}
procedure `boolean` `isMutableIterator`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.isMutableIterator:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b7190.  v0:= instanceof @variable v1 @type ^`java.util.Iterator` @kind boolean;
  #L2b7194.  if v0 == 0 then goto L2b71ac;
  #L2b7198.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b719c.  if v0 == 0 then goto L2b71a8;
  #L2b71a0.  v1:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableIterator` @kind boolean;
  #L2b71a4.  if v1 == 0 then goto L2b71ac;
  #L2b71a8.  v1:= 1I;
  #L2b71aa.  goto L2b71ae;
  #L2b71ac.  v1:= 0I;
  #L2b71ae.  return v1;
}
procedure `boolean` `isMutableList`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.isMutableList:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b71c0.  v0:= instanceof @variable v1 @type ^`java.util.List` @kind boolean;
  #L2b71c4.  if v0 == 0 then goto L2b71dc;
  #L2b71c8.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b71cc.  if v0 == 0 then goto L2b71d8;
  #L2b71d0.  v1:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableList` @kind boolean;
  #L2b71d4.  if v1 == 0 then goto L2b71dc;
  #L2b71d8.  v1:= 1I;
  #L2b71da.  goto L2b71de;
  #L2b71dc.  v1:= 0I;
  #L2b71de.  return v1;
}
procedure `boolean` `isMutableListIterator`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.isMutableListIterator:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b71f0.  v0:= instanceof @variable v1 @type ^`java.util.ListIterator` @kind boolean;
  #L2b71f4.  if v0 == 0 then goto L2b720c;
  #L2b71f8.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b71fc.  if v0 == 0 then goto L2b7208;
  #L2b7200.  v1:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableListIterator` @kind boolean;
  #L2b7204.  if v1 == 0 then goto L2b720c;
  #L2b7208.  v1:= 1I;
  #L2b720a.  goto L2b720e;
  #L2b720c.  v1:= 0I;
  #L2b720e.  return v1;
}
procedure `boolean` `isMutableMap`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.isMutableMap:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b7220.  v0:= instanceof @variable v1 @type ^`java.util.Map` @kind boolean;
  #L2b7224.  if v0 == 0 then goto L2b723c;
  #L2b7228.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b722c.  if v0 == 0 then goto L2b7238;
  #L2b7230.  v1:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableMap` @kind boolean;
  #L2b7234.  if v1 == 0 then goto L2b723c;
  #L2b7238.  v1:= 1I;
  #L2b723a.  goto L2b723e;
  #L2b723c.  v1:= 0I;
  #L2b723e.  return v1;
}
procedure `boolean` `isMutableMapEntry`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.isMutableMapEntry:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b7250.  v0:= instanceof @variable v1 @type ^`java.util.Map$Entry` @kind boolean;
  #L2b7254.  if v0 == 0 then goto L2b726c;
  #L2b7258.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b725c.  if v0 == 0 then goto L2b7268;
  #L2b7260.  v1:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableMap$Entry` @kind boolean;
  #L2b7264.  if v1 == 0 then goto L2b726c;
  #L2b7268.  v1:= 1I;
  #L2b726a.  goto L2b726e;
  #L2b726c.  v1:= 0I;
  #L2b726e.  return v1;
}
procedure `boolean` `isMutableSet`(`java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.isMutableSet:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b7280.  v0:= instanceof @variable v1 @type ^`java.util.Set` @kind boolean;
  #L2b7284.  if v0 == 0 then goto L2b729c;
  #L2b7288.  v0:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMappedMarker` @kind boolean;
  #L2b728c.  if v0 == 0 then goto L2b7298;
  #L2b7290.  v1:= instanceof @variable v1 @type ^`kotlin.jvm.internal.markers.KMutableSet` @kind boolean;
  #L2b7294.  if v1 == 0 then goto L2b729c;
  #L2b7298.  v1:= 1I;
  #L2b729a.  goto L2b729e;
  #L2b729c.  v1:= 0I;
  #L2b729e.  return v1;
}
procedure `java.lang.Throwable` `sanitizeStackTrace`(`java.lang.Throwable` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.sanitizeStackTrace:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2b7538.  v0:= constclass @type ^`kotlin.jvm.internal.TypeIntrinsics` @kind object;
  #L2b753c.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2b7542.  v0:= temp @kind object;
  #L2b7544.  call temp:= `sanitizeStackTrace`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.sanitizeStackTrace:(Ljava/lang/Throwable;Ljava/lang/String;)Ljava/lang/Throwable;` @kind static;
  #L2b754a.  v1:= temp @kind object;
  #L2b754c.  return v1 @kind object;
}
procedure `java.lang.ClassCastException` `throwCce`(`java.lang.ClassCastException` v0 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/ClassCastException;)Ljava/lang/ClassCastException;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2b740c.  call temp:= `sanitizeStackTrace`(v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.sanitizeStackTrace:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L2b7412.  v0:= temp @kind object;
  #L2b7414.  v0:= (`java.lang.ClassCastException`) v0 @kind object;
  #L2b7418.  throw v0;
}
procedure `void` `throwCce`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/Object;Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b79a0.  if v1 != 0 then goto L2b79aa;
  #L2b79a4.  v1:= "null" @kind object;
  #L2b79a8.  goto L2b79ba;
  #L2b79aa.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2b79b0.  v1:= temp @kind object;
  #L2b79b2.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2b79b8.  v1:= temp @kind object;
  #L2b79ba.  v0:= new `java.lang.StringBuilder`;
  #L2b79be.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b79c4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b79ca.  v1:= " cannot be cast to " @kind object;
  #L2b79ce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b79d4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b79da.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b79e0.  v1:= temp @kind object;
  #L2b79e2.  call `throwCce`(v1) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/String;)V` @kind static;
  #L2b79e8.  return @kind void;
}
procedure `void` `throwCce`(`java.lang.String` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b79fc.  v0:= new `java.lang.ClassCastException`;
  #L2b7a00.  call `<init>`(v0, v1) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b7a06.  call temp:= `throwCce`(v0) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.throwCce:(Ljava/lang/ClassCastException;)Ljava/lang/ClassCastException;` @kind static;
  #L2b7a0c.  v1:= temp @kind object;
  #L2b7a0e.  throw v1;
}
