record `kotlin.jvm.internal.ArrayBooleanIterator` @kind class @AccessFlag FINAL extends `kotlin.collections.BooleanIterator` @kind class {
  `boolean`[] `kotlin.jvm.internal.ArrayBooleanIterator.array` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.jvm.internal.ArrayBooleanIterator.index` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.jvm.internal.ArrayBooleanIterator` v1 @kind this, `boolean`[] v2 @kind object) @signature `Lkotlin/jvm/internal/ArrayBooleanIterator;.<init>:([Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2b27e8.  v0:= "array" @kind object;
  #L2b27ec.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b27f2.  call `<init>`(v1) @signature `Lkotlin/collections/BooleanIterator;.<init>:()V` @kind direct;
  #L2b27f8.  v1.`kotlin.jvm.internal.ArrayBooleanIterator.array` @type ^`boolean`[] := v2 @kind object;
  #L2b27fc.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.jvm.internal.ArrayBooleanIterator` v2 @kind this) @signature `Lkotlin/jvm/internal/ArrayBooleanIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b2768.  v0:= v2.`kotlin.jvm.internal.ArrayBooleanIterator.index` @type ^`int`;
  #L2b276c.  v1:= v2.`kotlin.jvm.internal.ArrayBooleanIterator.array` @type ^`boolean`[] @kind object;
  #L2b2770.  v1:= length @variable v1;
  #L2b2772.  if v0 >= v1 then goto L2b277a;
  #L2b2776.  v0:= 1I;
  #L2b2778.  goto L2b277c;
  #L2b277a.  v0:= 0I;
  #L2b277c.  return v0;
}
procedure `boolean` `nextBoolean`(`kotlin.jvm.internal.ArrayBooleanIterator` v3 @kind this) @signature `Lkotlin/jvm/internal/ArrayBooleanIterator;.nextBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2b2790.  v0:= v3.`kotlin.jvm.internal.ArrayBooleanIterator.array` @type ^`boolean`[] @kind object;
  #L2b2794.  v1:= v3.`kotlin.jvm.internal.ArrayBooleanIterator.index` @type ^`int`;
  #L2b2798.  v2:= v1 + 1;
  #L2b279c.  v3.`kotlin.jvm.internal.ArrayBooleanIterator.index` @type ^`int` := v2;
  #L2b27a0.  v0:= v0[v1] @kind boolean;
  #L2b27a4.  return v0;
  #L2b27a6.  v0:= Exception @type ^`java.lang.ArrayIndexOutOfBoundsException` @kind object;
  #L2b27a8.  v1:= v3.`kotlin.jvm.internal.ArrayBooleanIterator.index` @type ^`int`;
  #L2b27ac.  v1:= v1 + -1;
  #L2b27b0.  v3.`kotlin.jvm.internal.ArrayBooleanIterator.index` @type ^`int` := v1;
  #L2b27b4.  v1:= new `java.util.NoSuchElementException`;
  #L2b27b8.  call temp:= `getMessage`(v0) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L2b27be.  v0:= temp @kind object;
  #L2b27c0.  call `<init>`(v1, v0) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b27c6.  throw v1;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L2b2790..L2b27a4] goto L2b27a6;
}
