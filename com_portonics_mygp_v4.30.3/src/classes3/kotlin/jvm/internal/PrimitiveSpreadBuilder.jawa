record `kotlin.jvm.internal.PrimitiveSpreadBuilder` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `int` `kotlin.jvm.internal.PrimitiveSpreadBuilder.position` @AccessFlag PRIVATE;
  `int` `kotlin.jvm.internal.PrimitiveSpreadBuilder.size` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object`[] `kotlin.jvm.internal.PrimitiveSpreadBuilder.spreads` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v0 @kind this, `int` v1 ) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2b5cc0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b5cc6.  v0.`kotlin.jvm.internal.PrimitiveSpreadBuilder.size` @type ^`int` := v1;
  #L2b5cca.  v1:= new `java.lang.Object`[v1];
  #L2b5cce.  v0.`kotlin.jvm.internal.PrimitiveSpreadBuilder.spreads` @type ^`java.lang.Object`[] := v1 @kind object;
  #L2b5cd2.  return @kind void;
}
procedure `void` `getSpreads$annotations`() @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getSpreads$annotations:()V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;

  #L2b5d14.  return @kind void;
}
procedure `void` `addSpread`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.addSpread:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2b5ce4.  v0:= "spreadArgument" @kind object;
  #L2b5ce8.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b5cee.  v0:= v3.`kotlin.jvm.internal.PrimitiveSpreadBuilder.spreads` @type ^`java.lang.Object`[] @kind object;
  #L2b5cf2.  v1:= v3.`kotlin.jvm.internal.PrimitiveSpreadBuilder.position` @type ^`int`;
  #L2b5cf6.  v2:= v1 + 1;
  #L2b5cfa.  v3.`kotlin.jvm.internal.PrimitiveSpreadBuilder.position` @type ^`int` := v2;
  #L2b5cfe.  v0[v1]:= v4 @kind object;
  #L2b5d02.  return @kind void;
}
procedure `int` `getPosition`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v1 @kind this) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getPosition:()I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L2b5bd4.  v0:= v1.`kotlin.jvm.internal.PrimitiveSpreadBuilder.position` @type ^`int`;
  #L2b5bd8.  return v0;
}
procedure `int` `getSize`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getSize:(Ljava/lang/Object;)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `setPosition`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v0 @kind this, `int` v1 ) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.setPosition:(I)V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L2b5d28.  v0.`kotlin.jvm.internal.PrimitiveSpreadBuilder.position` @type ^`int` := v1;
  #L2b5d2c.  return @kind void;
}
procedure `int` `size`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v5 @kind this) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.size:()I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2b5bec.  v0:= v5.`kotlin.jvm.internal.PrimitiveSpreadBuilder.size` @type ^`int`;
  #L2b5bf0.  v1:= 1I;
  #L2b5bf2.  v0:= v0 - v1 @kind int;
  #L2b5bf4.  v2:= 0I;
  #L2b5bf6.  if v0 < 0 then goto L2b5c20;
  #L2b5bfa.  v3:= 0I;
  #L2b5bfc.  v4:= v5.`kotlin.jvm.internal.PrimitiveSpreadBuilder.spreads` @type ^`java.lang.Object`[] @kind object;
  #L2b5c00.  v4:= v4[v3] @kind object;
  #L2b5c04.  if v4 == 0 then goto L2b5c12;
  #L2b5c08.  call temp:= `getSize`(v5, v4) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L2b5c0e.  v4:= temp;
  #L2b5c10.  goto L2b5c14;
  #L2b5c12.  v4:= 1I;
  #L2b5c14.  v2:= v2 + v4 @kind int;
  #L2b5c16.  if v3 == v0 then goto L2b5c20;
  #L2b5c1a.  v3:= v3 + 1;
  #L2b5c1e.  goto L2b5bfc;
  #L2b5c20.  return v2;
}
procedure `java.lang.Object` `toArray`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v7 @kind this, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.toArray:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2b5c34.  v0:= "values" @kind object;
  #L2b5c38.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b5c3e.  v0:= "result" @kind object;
  #L2b5c42.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b5c48.  v0:= v7.`kotlin.jvm.internal.PrimitiveSpreadBuilder.size` @type ^`int`;
  #L2b5c4c.  v0:= v0 + -1;
  #L2b5c50.  v1:= 0I;
  #L2b5c52.  if v0 < 0 then goto L2b5c9a;
  #L2b5c56.  v2:= 0I;
  #L2b5c58.  v3:= 0I;
  #L2b5c5a.  v4:= 0I;
  #L2b5c5c.  v5:= v7.`kotlin.jvm.internal.PrimitiveSpreadBuilder.spreads` @type ^`java.lang.Object`[] @kind object;
  #L2b5c60.  v5:= v5[v2] @kind object;
  #L2b5c64.  if v5 == 0 then goto L2b5c8c;
  #L2b5c68.  if v3 >= v2 then goto L2b5c78;
  #L2b5c6c.  v6:= v2 - v3 @kind int;
  #L2b5c70.  call `arraycopy`(v8, v3, v9, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2b5c76.  v4:= v4 + v6 @kind int;
  #L2b5c78.  call temp:= `getSize`(v7, v5) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L2b5c7e.  v3:= temp;
  #L2b5c80.  call `arraycopy`(v5, v1, v9, v4, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2b5c86.  v4:= v4 + v3 @kind int;
  #L2b5c88.  v3:= v2 + 1;
  #L2b5c8c.  if v2 == v0 then goto L2b5c96;
  #L2b5c90.  v2:= v2 + 1;
  #L2b5c94.  goto L2b5c5c;
  #L2b5c96.  v1:= v3;
  #L2b5c98.  goto L2b5c9c;
  #L2b5c9a.  v4:= 0I;
  #L2b5c9c.  v0:= v7.`kotlin.jvm.internal.PrimitiveSpreadBuilder.size` @type ^`int`;
  #L2b5ca0.  if v1 >= v0 then goto L2b5cac;
  #L2b5ca4.  v0:= v0 - v1 @kind int;
  #L2b5ca6.  call `arraycopy`(v8, v1, v9, v4, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2b5cac.  return v9 @kind object;
}
