record `kotlin.jvm.internal.ArrayDoubleIterator` @kind class @AccessFlag FINAL extends `kotlin.collections.DoubleIterator` @kind class {
  `double`[] `kotlin.jvm.internal.ArrayDoubleIterator.array` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.jvm.internal.ArrayDoubleIterator.index` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.jvm.internal.ArrayDoubleIterator` v1 @kind this, `double`[] v2 @kind object) @signature `Lkotlin/jvm/internal/ArrayDoubleIterator;.<init>:([D)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2b29e0.  v0:= "array" @kind object;
  #L2b29e4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b29ea.  call `<init>`(v1) @signature `Lkotlin/collections/DoubleIterator;.<init>:()V` @kind direct;
  #L2b29f0.  v1.`kotlin.jvm.internal.ArrayDoubleIterator.array` @type ^`double`[] := v2 @kind object;
  #L2b29f4.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.jvm.internal.ArrayDoubleIterator` v2 @kind this) @signature `Lkotlin/jvm/internal/ArrayDoubleIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b2960.  v0:= v2.`kotlin.jvm.internal.ArrayDoubleIterator.index` @type ^`int`;
  #L2b2964.  v1:= v2.`kotlin.jvm.internal.ArrayDoubleIterator.array` @type ^`double`[] @kind object;
  #L2b2968.  v1:= length @variable v1;
  #L2b296a.  if v0 >= v1 then goto L2b2972;
  #L2b296e.  v0:= 1I;
  #L2b2970.  goto L2b2974;
  #L2b2972.  v0:= 0I;
  #L2b2974.  return v0;
}
procedure `double` `nextDouble`(`kotlin.jvm.internal.ArrayDoubleIterator` v3 @kind this) @signature `Lkotlin/jvm/internal/ArrayDoubleIterator;.nextDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2b2988.  v0:= v3.`kotlin.jvm.internal.ArrayDoubleIterator.array` @type ^`double`[] @kind object;
  #L2b298c.  v1:= v3.`kotlin.jvm.internal.ArrayDoubleIterator.index` @type ^`int`;
  #L2b2990.  v2:= v1 + 1;
  #L2b2994.  v3.`kotlin.jvm.internal.ArrayDoubleIterator.index` @type ^`int` := v2;
  #L2b2998.  v1:= v0[v1] @kind wide;
  #L2b299c.  return v1 @kind wide;
  #L2b299e.  v0:= Exception @type ^`java.lang.ArrayIndexOutOfBoundsException` @kind object;
  #L2b29a0.  v1:= v3.`kotlin.jvm.internal.ArrayDoubleIterator.index` @type ^`int`;
  #L2b29a4.  v1:= v1 + -1;
  #L2b29a8.  v3.`kotlin.jvm.internal.ArrayDoubleIterator.index` @type ^`int` := v1;
  #L2b29ac.  v1:= new `java.util.NoSuchElementException`;
  #L2b29b0.  call temp:= `getMessage`(v0) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L2b29b6.  v0:= temp @kind object;
  #L2b29b8.  call `<init>`(v1, v0) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b29be.  throw v1;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L2b2988..L2b299c] goto L2b299e;
}
