record `kotlin.jvm.internal.TypeParameterReference` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.reflect.KTypeParameter` @kind interface {
  `java.util.List` `kotlin.jvm.internal.TypeParameterReference.bounds` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `kotlin.jvm.internal.TypeParameterReference.container` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.jvm.internal.TypeParameterReference.isReified` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `kotlin.jvm.internal.TypeParameterReference.name` @AccessFlag PRIVATE_FINAL;
  `kotlin.reflect.KVariance` `kotlin.jvm.internal.TypeParameterReference.variance` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.jvm.internal.TypeParameterReference$Companion` `@@kotlin.jvm.internal.TypeParameterReference.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/jvm/internal/TypeParameterReference;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2b7c5c.  v0:= new `kotlin.jvm.internal.TypeParameterReference$Companion`;
  #L2b7c60.  v1:= 0I;
  #L2b7c62.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/TypeParameterReference$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2b7c68.  `@@kotlin.jvm.internal.TypeParameterReference.Companion` @type ^`kotlin.jvm.internal.TypeParameterReference$Companion` := v0 @kind object;
  #L2b7c6c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.String` v3 @kind object, `kotlin.reflect.KVariance` v4 @kind object, `boolean` v5 ) @signature `Lkotlin/jvm/internal/TypeParameterReference;.<init>:(Ljava/lang/Object;Ljava/lang/String;Lkotlin/reflect/KVariance;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2b7c80.  v0:= "name" @kind object;
  #L2b7c84.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b7c8a.  v0:= "variance" @kind object;
  #L2b7c8e.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b7c94.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b7c9a.  v1.`kotlin.jvm.internal.TypeParameterReference.container` @type ^`java.lang.Object` := v2 @kind object;
  #L2b7c9e.  v1.`kotlin.jvm.internal.TypeParameterReference.name` @type ^`java.lang.String` := v3 @kind object;
  #L2b7ca2.  v1.`kotlin.jvm.internal.TypeParameterReference.variance` @type ^`kotlin.reflect.KVariance` := v4 @kind object;
  #L2b7ca6.  v1.`kotlin.jvm.internal.TypeParameterReference.isReified` @type ^`boolean` := v5 @kind boolean;
  #L2b7caa.  return @kind void;
}
procedure `void` `getUpperBounds$annotations`() @signature `Lkotlin/jvm/internal/TypeParameterReference;.getUpperBounds$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2b7cbc.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.jvm.internal.TypeParameterReference` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/jvm/internal/TypeParameterReference;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b7b30.  v0:= instanceof @variable v3 @type ^`kotlin.jvm.internal.TypeParameterReference` @kind boolean;
  #L2b7b34.  if v0 == 0 then goto L2b7b70;
  #L2b7b38.  v0:= v2.`kotlin.jvm.internal.TypeParameterReference.container` @type ^`java.lang.Object` @kind object;
  #L2b7b3c.  v3:= (`kotlin.jvm.internal.TypeParameterReference`) v3 @kind object;
  #L2b7b40.  v1:= v3.`kotlin.jvm.internal.TypeParameterReference.container` @type ^`java.lang.Object` @kind object;
  #L2b7b44.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b7b4a.  v0:= temp;
  #L2b7b4c.  if v0 == 0 then goto L2b7b70;
  #L2b7b50.  call temp:= `getName`(v2) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getName:()Ljava/lang/String;` @kind virtual;
  #L2b7b56.  v0:= temp @kind object;
  #L2b7b58.  call temp:= `getName`(v3) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getName:()Ljava/lang/String;` @kind virtual;
  #L2b7b5e.  v3:= temp @kind object;
  #L2b7b60.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b7b66.  v3:= temp;
  #L2b7b68.  if v3 == 0 then goto L2b7b70;
  #L2b7b6c.  v3:= 1I;
  #L2b7b6e.  goto L2b7b72;
  #L2b7b70.  v3:= 0I;
  #L2b7b72.  return v3;
}
procedure `java.lang.String` `getName`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b7bd8.  v0:= v1.`kotlin.jvm.internal.TypeParameterReference.name` @type ^`java.lang.String` @kind object;
  #L2b7bdc.  return v0 @kind object;
}
procedure `java.util.List` `getUpperBounds`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getUpperBounds:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b7c10.  v0:= v1.`kotlin.jvm.internal.TypeParameterReference.bounds` @type ^`java.util.List` @kind object;
  #L2b7c14.  if v0 != 0 then goto L2b7c30;
  #L2b7c18.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L2b7c1c.  call temp:= `nullableTypeOf`(v0) @signature `Lkotlin/jvm/internal/Reflection;.nullableTypeOf:(Ljava/lang/Class;)Lkotlin/reflect/KType;` @kind static;
  #L2b7c22.  v0:= temp @kind object;
  #L2b7c24.  call temp:= `listOf`(v0) @signature `Lkotlin/collections/CollectionsKt;.listOf:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2b7c2a.  v0:= temp @kind object;
  #L2b7c2c.  v1.`kotlin.jvm.internal.TypeParameterReference.bounds` @type ^`java.util.List` := v0 @kind object;
  #L2b7c30.  return v0 @kind object;
}
procedure `kotlin.reflect.KVariance` `getVariance`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getVariance:()Lkotlin/reflect/KVariance;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b7c44.  v0:= v1.`kotlin.jvm.internal.TypeParameterReference.variance` @type ^`kotlin.reflect.KVariance` @kind object;
  #L2b7c48.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.jvm.internal.TypeParameterReference` v2 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b7b9c.  v0:= v2.`kotlin.jvm.internal.TypeParameterReference.container` @type ^`java.lang.Object` @kind object;
  #L2b7ba0.  if v0 == 0 then goto L2b7bae;
  #L2b7ba4.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2b7baa.  v0:= temp;
  #L2b7bac.  goto L2b7bb0;
  #L2b7bae.  v0:= 0I;
  #L2b7bb0.  v0:= v0 * 31;
  #L2b7bb4.  call temp:= `getName`(v2) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getName:()Ljava/lang/String;` @kind virtual;
  #L2b7bba.  v1:= temp @kind object;
  #L2b7bbc.  call temp:= `hashCode`(v1) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L2b7bc2.  v1:= temp;
  #L2b7bc4.  v0:= v0 + v1 @kind int;
  #L2b7bc6.  return v0;
}
procedure `boolean` `isReified`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.isReified:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b7b84.  v0:= v1.`kotlin.jvm.internal.TypeParameterReference.isReified` @type ^`boolean` @kind boolean;
  #L2b7b88.  return v0;
}
procedure `void` `setUpperBounds`(`kotlin.jvm.internal.TypeParameterReference` v2 @kind this, `java.util.List` v3 @kind object) @signature `Lkotlin/jvm/internal/TypeParameterReference;.setUpperBounds:(Ljava/util/List;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2b7cd0.  v0:= "upperBounds" @kind object;
  #L2b7cd4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b7cda.  v0:= v2.`kotlin.jvm.internal.TypeParameterReference.bounds` @type ^`java.util.List` @kind object;
  #L2b7cde.  if v0 != 0 then goto L2b7ce8;
  #L2b7ce2.  v2.`kotlin.jvm.internal.TypeParameterReference.bounds` @type ^`java.util.List` := v3 @kind object;
  #L2b7ce6.  return @kind void;
  #L2b7ce8.  v3:= new `java.lang.IllegalStateException`;
  #L2b7cec.  v0:= new `java.lang.StringBuilder`;
  #L2b7cf0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b7cf6.  v1:= "Upper bounds of type parameter '" @kind object;
  #L2b7cfa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b7d00.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b7d06.  v1:= "' have already been initialized." @kind object;
  #L2b7d0a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b7d10.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b7d16.  v0:= temp @kind object;
  #L2b7d18.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b7d1e.  v0:= temp @kind object;
  #L2b7d20.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b7d26.  throw v3;
}
procedure `java.lang.String` `toString`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b7bf0.  v0:= `@@kotlin.jvm.internal.TypeParameterReference.Companion` @type ^`kotlin.jvm.internal.TypeParameterReference$Companion` @kind object;
  #L2b7bf4.  call temp:= `toString`(v0, v1) @signature `Lkotlin/jvm/internal/TypeParameterReference$Companion;.toString:(Lkotlin/reflect/KTypeParameter;)Ljava/lang/String;` @kind virtual;
  #L2b7bfa.  v0:= temp @kind object;
  #L2b7bfc.  return v0 @kind object;
}
