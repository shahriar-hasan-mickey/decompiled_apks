record `kotlin.jvm.internal.TypeReference` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.reflect.KType` @kind interface {
  `java.util.List` `kotlin.jvm.internal.TypeReference.arguments` @AccessFlag PRIVATE_FINAL;
  `kotlin.reflect.KClassifier` `kotlin.jvm.internal.TypeReference.classifier` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.jvm.internal.TypeReference.flags` @AccessFlag PRIVATE_FINAL;
  `kotlin.reflect.KType` `kotlin.jvm.internal.TypeReference.platformTypeUpperBound` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.jvm.internal.TypeReference$Companion` `@@kotlin.jvm.internal.TypeReference.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlin.jvm.internal.TypeReference.IS_MARKED_NULLABLE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlin.jvm.internal.TypeReference.IS_MUTABLE_COLLECTION_TYPE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlin.jvm.internal.TypeReference.IS_NOTHING_TYPE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/jvm/internal/TypeReference;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2b837c.  v0:= new `kotlin.jvm.internal.TypeReference$Companion`;
  #L2b8380.  v1:= 0I;
  #L2b8382.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/TypeReference$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2b8388.  `@@kotlin.jvm.internal.TypeReference.Companion` @type ^`kotlin.jvm.internal.TypeReference$Companion` := v0 @kind object;
  #L2b838c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.TypeReference` v1 @kind this, `kotlin.reflect.KClassifier` v2 @kind object, `java.util.List` v3 @kind object, `kotlin.reflect.KType` v4 @kind object, `int` v5 ) @signature `Lkotlin/jvm/internal/TypeReference;.<init>:(Lkotlin/reflect/KClassifier;Ljava/util/List;Lkotlin/reflect/KType;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2b83d0.  v0:= "classifier" @kind object;
  #L2b83d4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b83da.  v0:= "arguments" @kind object;
  #L2b83de.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b83e4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b83ea.  v1.`kotlin.jvm.internal.TypeReference.classifier` @type ^`kotlin.reflect.KClassifier` := v2 @kind object;
  #L2b83ee.  v1.`kotlin.jvm.internal.TypeReference.arguments` @type ^`java.util.List` := v3 @kind object;
  #L2b83f2.  v1.`kotlin.jvm.internal.TypeReference.platformTypeUpperBound` @type ^`kotlin.reflect.KType` := v4 @kind object;
  #L2b83f6.  v1.`kotlin.jvm.internal.TypeReference.flags` @type ^`int` := v5;
  #L2b83fa.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.TypeReference` v1 @kind this, `kotlin.reflect.KClassifier` v2 @kind object, `java.util.List` v3 @kind object, `boolean` v4 ) @signature `Lkotlin/jvm/internal/TypeReference;.<init>:(Lkotlin/reflect/KClassifier;Ljava/util/List;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2b83a0.  v0:= "classifier" @kind object;
  #L2b83a4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b83aa.  v0:= "arguments" @kind object;
  #L2b83ae.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b83b4.  v0:= 0I;
  #L2b83b6.  call `<init>`(v1, v2, v3, v0, v4) @signature `Lkotlin/jvm/internal/TypeReference;.<init>:(Lkotlin/reflect/KClassifier;Ljava/util/List;Lkotlin/reflect/KType;I)V` @kind direct;
  #L2b83bc.  return @kind void;
}
procedure `java.lang.String` `access$asString`(`kotlin.jvm.internal.TypeReference` v0 @kind object, `kotlin.reflect.KTypeProjection` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeReference;.access$asString:(Lkotlin/jvm/internal/TypeReference;Lkotlin/reflect/KTypeProjection;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2b7f38.  call temp:= `asString`(v0, v1) @signature `Lkotlin/jvm/internal/TypeReference;.asString:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/String;` @kind direct;
  #L2b7f3e.  v0:= temp @kind object;
  #L2b7f40.  return v0 @kind object;
}
procedure `java.lang.String` `asString`(`kotlin.jvm.internal.TypeReference` v3 @kind this, `kotlin.reflect.KTypeProjection` v4 @kind object) @signature `Lkotlin/jvm/internal/TypeReference;.asString:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2b8138.  call temp:= `getVariance`(v4) @signature `Lkotlin/reflect/KTypeProjection;.getVariance:()Lkotlin/reflect/KVariance;` @kind virtual;
  #L2b813e.  v0:= temp @kind object;
  #L2b8140.  if v0 != 0 then goto L2b814a;
  #L2b8144.  v4:= "*" @kind object;
  #L2b8148.  return v4 @kind object;
  #L2b814a.  call temp:= `getType`(v4) @signature `Lkotlin/reflect/KTypeProjection;.getType:()Lkotlin/reflect/KType;` @kind virtual;
  #L2b8150.  v0:= temp @kind object;
  #L2b8152.  v1:= instanceof @variable v0 @type ^`kotlin.jvm.internal.TypeReference` @kind boolean;
  #L2b8156.  if v1 == 0 then goto L2b8160;
  #L2b815a.  v0:= (`kotlin.jvm.internal.TypeReference`) v0 @kind object;
  #L2b815e.  goto L2b8162;
  #L2b8160.  v0:= 0I;
  #L2b8162.  v1:= 1I;
  #L2b8164.  if v0 == 0 then goto L2b8174;
  #L2b8168.  call temp:= `asString`(v0, v1) @signature `Lkotlin/jvm/internal/TypeReference;.asString:(Z)Ljava/lang/String;` @kind direct;
  #L2b816e.  v0:= temp @kind object;
  #L2b8170.  if v0 != 0 then goto L2b8184;
  #L2b8174.  call temp:= `getType`(v4) @signature `Lkotlin/reflect/KTypeProjection;.getType:()Lkotlin/reflect/KType;` @kind virtual;
  #L2b817a.  v0:= temp @kind object;
  #L2b817c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2b8182.  v0:= temp @kind object;
  #L2b8184.  call temp:= `getVariance`(v4) @signature `Lkotlin/reflect/KTypeProjection;.getVariance:()Lkotlin/reflect/KVariance;` @kind virtual;
  #L2b818a.  v4:= temp @kind object;
  #L2b818c.  v2:= `@@kotlin.jvm.internal.TypeReference$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L2b8190.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2b8196.  v4:= temp;
  #L2b8198.  v4:= v2[v4];
  #L2b819c.  if v4 == v1 then goto L2b81fe;
  #L2b81a0.  v1:= 2I;
  #L2b81a2.  if v4 == v1 then goto L2b81dc;
  #L2b81a6.  v1:= 3I;
  #L2b81a8.  if v4 != v1 then goto L2b81d0;
  #L2b81ac.  v4:= new `java.lang.StringBuilder`;
  #L2b81b0.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b81b6.  v1:= "out " @kind object;
  #L2b81ba.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b81c0.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b81c6.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b81cc.  v0:= temp @kind object;
  #L2b81ce.  goto L2b81fe;
  #L2b81d0.  v4:= new `kotlin.NoWhenBranchMatchedException`;
  #L2b81d4.  call `<init>`(v4) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L2b81da.  throw v4;
  #L2b81dc.  v4:= new `java.lang.StringBuilder`;
  #L2b81e0.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b81e6.  v1:= "in " @kind object;
  #L2b81ea.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b81f0.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b81f6.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b81fc.  v0:= temp @kind object;
  #L2b81fe.  return v0 @kind object;
}
procedure `java.lang.String` `asString`(`kotlin.jvm.internal.TypeReference` v11 @kind this, `boolean` v12 ) @signature `Lkotlin/jvm/internal/TypeReference;.asString:(Z)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2b7f54.  call temp:= `getClassifier`(v11) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L2b7f5a.  v0:= temp @kind object;
  #L2b7f5c.  v1:= instanceof @variable v0 @type ^`kotlin.reflect.KClass` @kind boolean;
  #L2b7f60.  v2:= 0I;
  #L2b7f62.  if v1 == 0 then goto L2b7f6c;
  #L2b7f66.  v0:= (`kotlin.reflect.KClass`) v0 @kind object;
  #L2b7f6a.  goto L2b7f6e;
  #L2b7f6c.  v0:= v2 @kind object;
  #L2b7f6e.  if v0 == 0 then goto L2b7f7a;
  #L2b7f72.  call temp:= `getJavaClass`(v0) @signature `Lkotlin/jvm/JvmClassMappingKt;.getJavaClass:(Lkotlin/reflect/KClass;)Ljava/lang/Class;` @kind static;
  #L2b7f78.  v2:= temp @kind object;
  #L2b7f7a.  if v2 != 0 then goto L2b7f90;
  #L2b7f7e.  call temp:= `getClassifier`(v11) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L2b7f84.  v12:= temp @kind object;
  #L2b7f86.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b7f8c.  v12:= temp @kind object;
  #L2b7f8e.  goto L2b7fee;
  #L2b7f90.  v0:= v11.`kotlin.jvm.internal.TypeReference.flags` @type ^`int`;
  #L2b7f94.  v0:= v0 ^& 4;
  #L2b7f98.  if v0 == 0 then goto L2b7fa2;
  #L2b7f9c.  v12:= "kotlin.Nothing" @kind object;
  #L2b7fa0.  goto L2b7fee;
  #L2b7fa2.  call temp:= `isArray`(v2) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L2b7fa8.  v0:= temp;
  #L2b7faa.  if v0 == 0 then goto L2b7fb8;
  #L2b7fae.  call temp:= `getArrayClassName`(v11, v2) @signature `Lkotlin/jvm/internal/TypeReference;.getArrayClassName:(Ljava/lang/Class;)Ljava/lang/String;` @kind direct;
  #L2b7fb4.  v12:= temp @kind object;
  #L2b7fb6.  goto L2b7fee;
  #L2b7fb8.  if v12 == 0 then goto L2b7fe6;
  #L2b7fbc.  call temp:= `isPrimitive`(v2) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L2b7fc2.  v12:= temp;
  #L2b7fc4.  if v12 == 0 then goto L2b7fe6;
  #L2b7fc8.  call temp:= `getClassifier`(v11) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L2b7fce.  v12:= temp @kind object;
  #L2b7fd0.  v12:= (`kotlin.reflect.KClass`) v12 @kind object;
  #L2b7fd4.  call temp:= `getJavaObjectType`(v12) @signature `Lkotlin/jvm/JvmClassMappingKt;.getJavaObjectType:(Lkotlin/reflect/KClass;)Ljava/lang/Class;` @kind static;
  #L2b7fda.  v12:= temp @kind object;
  #L2b7fdc.  call temp:= `getName`(v12) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2b7fe2.  v12:= temp @kind object;
  #L2b7fe4.  goto L2b7fee;
  #L2b7fe6.  call temp:= `getName`(v2) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2b7fec.  v12:= temp @kind object;
  #L2b7fee.  call temp:= `getArguments`(v11) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @kind virtual;
  #L2b7ff4.  v0:= temp @kind object;
  #L2b7ff6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2b7ffc.  v0:= temp;
  #L2b7ffe.  v1:= "" @kind object;
  #L2b8002.  if v0 == 0 then goto L2b800a;
  #L2b8006.  v0:= v1 @kind object;
  #L2b8008.  goto L2b803a;
  #L2b800a.  call temp:= `getArguments`(v11) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @kind virtual;
  #L2b8010.  v2:= temp @kind object;
  #L2b8012.  v6:= 0I;
  #L2b8014.  v7:= 0I;
  #L2b8016.  v8:= new `kotlin.jvm.internal.TypeReference$asString$args$1`;
  #L2b801a.  call `<init>`(v8, v11) @signature `Lkotlin/jvm/internal/TypeReference$asString$args$1;.<init>:(Lkotlin/jvm/internal/TypeReference;)V` @kind direct;
  #L2b8020.  v9:= 24I;
  #L2b8024.  v10:= 0I;
  #L2b8026.  v3:= ", " @kind object;
  #L2b802a.  v4:= "<" @kind object;
  #L2b802e.  v5:= ">" @kind object;
  #L2b8032.  call temp:= `joinToString$default`(v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lkotlin/collections/CollectionsKt;.joinToString$default:(Ljava/lang/Iterable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2b8038.  v0:= temp @kind object;
  #L2b803a.  call temp:= `isMarkedNullable`(v11) @signature `Lkotlin/jvm/internal/TypeReference;.isMarkedNullable:()Z` @kind virtual;
  #L2b8040.  v2:= temp;
  #L2b8042.  if v2 == 0 then goto L2b804a;
  #L2b8046.  v1:= "?" @kind object;
  #L2b804a.  v2:= new `java.lang.StringBuilder`;
  #L2b804e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b8054.  call temp:= `append`(v2, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b805a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b8060.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b8066.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b806c.  v12:= temp @kind object;
  #L2b806e.  v0:= v11.`kotlin.jvm.internal.TypeReference.platformTypeUpperBound` @type ^`kotlin.reflect.KType` @kind object;
  #L2b8072.  v1:= instanceof @variable v0 @type ^`kotlin.jvm.internal.TypeReference` @kind boolean;
  #L2b8076.  if v1 == 0 then goto L2b8124;
  #L2b807a.  v0:= (`kotlin.jvm.internal.TypeReference`) v0 @kind object;
  #L2b807e.  v1:= 1I;
  #L2b8080.  call temp:= `asString`(v0, v1) @signature `Lkotlin/jvm/internal/TypeReference;.asString:(Z)Ljava/lang/String;` @kind direct;
  #L2b8086.  v0:= temp @kind object;
  #L2b8088.  call temp:= `areEqual`(v0, v12) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b808e.  v1:= temp;
  #L2b8090.  if v1 == 0 then goto L2b8096;
  #L2b8094.  goto L2b8124;
  #L2b8096.  v1:= new `java.lang.StringBuilder`;
  #L2b809a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b80a0.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b80a6.  v2:= 63I;
  #L2b80aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b80b0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b80b6.  v1:= temp @kind object;
  #L2b80b8.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b80be.  v1:= temp;
  #L2b80c0.  if v1 == 0 then goto L2b80e8;
  #L2b80c4.  v0:= new `java.lang.StringBuilder`;
  #L2b80c8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b80ce.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b80d4.  v12:= 33I;
  #L2b80d8.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b80de.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b80e4.  v12:= temp @kind object;
  #L2b80e6.  goto L2b8124;
  #L2b80e8.  v1:= new `java.lang.StringBuilder`;
  #L2b80ec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b80f2.  v2:= 40I;
  #L2b80f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b80fc.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b8102.  v12:= ".." @kind object;
  #L2b8106.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b810c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b8112.  v12:= 41I;
  #L2b8116.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b811c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b8122.  v12:= temp @kind object;
  #L2b8124.  return v12 @kind object;
}
procedure `java.lang.String` `getArrayClassName`(`kotlin.jvm.internal.TypeReference` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lkotlin/jvm/internal/TypeReference;.getArrayClassName:(Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2b8210.  v0:= constclass @type ^`boolean`[] @kind object;
  #L2b8214.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b821a.  v0:= temp;
  #L2b821c.  if v0 == 0 then goto L2b8226;
  #L2b8220.  v2:= "kotlin.BooleanArray" @kind object;
  #L2b8224.  goto L2b82c4;
  #L2b8226.  v0:= constclass @type ^`char`[] @kind object;
  #L2b822a.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b8230.  v0:= temp;
  #L2b8232.  if v0 == 0 then goto L2b823c;
  #L2b8236.  v2:= "kotlin.CharArray" @kind object;
  #L2b823a.  goto L2b82c4;
  #L2b823c.  v0:= constclass @type ^`byte`[] @kind object;
  #L2b8240.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b8246.  v0:= temp;
  #L2b8248.  if v0 == 0 then goto L2b8252;
  #L2b824c.  v2:= "kotlin.ByteArray" @kind object;
  #L2b8250.  goto L2b82c4;
  #L2b8252.  v0:= constclass @type ^`short`[] @kind object;
  #L2b8256.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b825c.  v0:= temp;
  #L2b825e.  if v0 == 0 then goto L2b8268;
  #L2b8262.  v2:= "kotlin.ShortArray" @kind object;
  #L2b8266.  goto L2b82c4;
  #L2b8268.  v0:= constclass @type ^`int`[] @kind object;
  #L2b826c.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b8272.  v0:= temp;
  #L2b8274.  if v0 == 0 then goto L2b827e;
  #L2b8278.  v2:= "kotlin.IntArray" @kind object;
  #L2b827c.  goto L2b82c4;
  #L2b827e.  v0:= constclass @type ^`float`[] @kind object;
  #L2b8282.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b8288.  v0:= temp;
  #L2b828a.  if v0 == 0 then goto L2b8294;
  #L2b828e.  v2:= "kotlin.FloatArray" @kind object;
  #L2b8292.  goto L2b82c4;
  #L2b8294.  v0:= constclass @type ^`long`[] @kind object;
  #L2b8298.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b829e.  v0:= temp;
  #L2b82a0.  if v0 == 0 then goto L2b82aa;
  #L2b82a4.  v2:= "kotlin.LongArray" @kind object;
  #L2b82a8.  goto L2b82c4;
  #L2b82aa.  v0:= constclass @type ^`double`[] @kind object;
  #L2b82ae.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b82b4.  v2:= temp;
  #L2b82b6.  if v2 == 0 then goto L2b82c0;
  #L2b82ba.  v2:= "kotlin.DoubleArray" @kind object;
  #L2b82be.  goto L2b82c4;
  #L2b82c0.  v2:= "kotlin.Array" @kind object;
  #L2b82c4.  return v2 @kind object;
}
procedure `void` `getFlags$kotlin_stdlib$annotations`() @signature `Lkotlin/jvm/internal/TypeReference;.getFlags$kotlin_stdlib$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2b840c.  return @kind void;
}
procedure `void` `getPlatformTypeUpperBound$kotlin_stdlib$annotations`() @signature `Lkotlin/jvm/internal/TypeReference;.getPlatformTypeUpperBound$kotlin_stdlib$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2b8420.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.jvm.internal.TypeReference` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/jvm/internal/TypeReference;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b7e2c.  v0:= instanceof @variable v3 @type ^`kotlin.jvm.internal.TypeReference` @kind boolean;
  #L2b7e30.  if v0 == 0 then goto L2b7e94;
  #L2b7e34.  call temp:= `getClassifier`(v2) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L2b7e3a.  v0:= temp @kind object;
  #L2b7e3c.  v3:= (`kotlin.jvm.internal.TypeReference`) v3 @kind object;
  #L2b7e40.  call temp:= `getClassifier`(v3) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L2b7e46.  v1:= temp @kind object;
  #L2b7e48.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b7e4e.  v0:= temp;
  #L2b7e50.  if v0 == 0 then goto L2b7e94;
  #L2b7e54.  call temp:= `getArguments`(v2) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @kind virtual;
  #L2b7e5a.  v0:= temp @kind object;
  #L2b7e5c.  call temp:= `getArguments`(v3) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @kind virtual;
  #L2b7e62.  v1:= temp @kind object;
  #L2b7e64.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b7e6a.  v0:= temp;
  #L2b7e6c.  if v0 == 0 then goto L2b7e94;
  #L2b7e70.  v0:= v2.`kotlin.jvm.internal.TypeReference.platformTypeUpperBound` @type ^`kotlin.reflect.KType` @kind object;
  #L2b7e74.  v1:= v3.`kotlin.jvm.internal.TypeReference.platformTypeUpperBound` @type ^`kotlin.reflect.KType` @kind object;
  #L2b7e78.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b7e7e.  v0:= temp;
  #L2b7e80.  if v0 == 0 then goto L2b7e94;
  #L2b7e84.  v0:= v2.`kotlin.jvm.internal.TypeReference.flags` @type ^`int`;
  #L2b7e88.  v3:= v3.`kotlin.jvm.internal.TypeReference.flags` @type ^`int`;
  #L2b7e8c.  if v0 != v3 then goto L2b7e94;
  #L2b7e90.  v3:= 1I;
  #L2b7e92.  goto L2b7e96;
  #L2b7e94.  v3:= 0I;
  #L2b7e96.  return v3;
}
procedure `java.util.List` `getAnnotations`(`kotlin.jvm.internal.TypeReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.getAnnotations:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b8318.  call temp:= `emptyList`() @signature `Lkotlin/collections/CollectionsKt;.emptyList:()Ljava/util/List;` @kind static;
  #L2b831e.  v0:= temp @kind object;
  #L2b8320.  return v0 @kind object;
}
procedure `java.util.List` `getArguments`(`kotlin.jvm.internal.TypeReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b8334.  v0:= v1.`kotlin.jvm.internal.TypeReference.arguments` @type ^`java.util.List` @kind object;
  #L2b8338.  return v0 @kind object;
}
procedure `kotlin.reflect.KClassifier` `getClassifier`(`kotlin.jvm.internal.TypeReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b834c.  v0:= v1.`kotlin.jvm.internal.TypeReference.classifier` @type ^`kotlin.reflect.KClassifier` @kind object;
  #L2b8350.  return v0 @kind object;
}
procedure `int` `getFlags$kotlin_stdlib`(`kotlin.jvm.internal.TypeReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.getFlags$kotlin_stdlib:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2b7ecc.  v0:= v1.`kotlin.jvm.internal.TypeReference.flags` @type ^`int`;
  #L2b7ed0.  return v0;
}
procedure `kotlin.reflect.KType` `getPlatformTypeUpperBound$kotlin_stdlib`(`kotlin.jvm.internal.TypeReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.getPlatformTypeUpperBound$kotlin_stdlib:()Lkotlin/reflect/KType;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2b8364.  v0:= v1.`kotlin.jvm.internal.TypeReference.platformTypeUpperBound` @type ^`kotlin.reflect.KType` @kind object;
  #L2b8368.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.jvm.internal.TypeReference` v2 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b7ee4.  call temp:= `getClassifier`(v2) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L2b7eea.  v0:= temp @kind object;
  #L2b7eec.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2b7ef2.  v0:= temp;
  #L2b7ef4.  v0:= v0 * 31;
  #L2b7ef8.  call temp:= `getArguments`(v2) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @kind virtual;
  #L2b7efe.  v1:= temp @kind object;
  #L2b7f00.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2b7f06.  v1:= temp;
  #L2b7f08.  v0:= v0 + v1 @kind int;
  #L2b7f0a.  v0:= v0 * 31;
  #L2b7f0e.  v1:= v2.`kotlin.jvm.internal.TypeReference.flags` @type ^`int`;
  #L2b7f12.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2b7f18.  v1:= temp @kind object;
  #L2b7f1a.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2b7f20.  v1:= temp;
  #L2b7f22.  v0:= v0 + v1 @kind int;
  #L2b7f24.  return v0;
}
procedure `boolean` `isMarkedNullable`(`kotlin.jvm.internal.TypeReference` v2 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.isMarkedNullable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b7ea8.  v0:= v2.`kotlin.jvm.internal.TypeReference.flags` @type ^`int`;
  #L2b7eac.  v1:= 1I;
  #L2b7eae.  v0:= v0 ^& v1 @kind int;
  #L2b7eb0.  if v0 == 0 then goto L2b7eb6;
  #L2b7eb4.  goto L2b7eb8;
  #L2b7eb6.  v1:= 0I;
  #L2b7eb8.  return v1;
}
procedure `java.lang.String` `toString`(`kotlin.jvm.internal.TypeReference` v2 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b82d8.  v0:= new `java.lang.StringBuilder`;
  #L2b82dc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b82e2.  v1:= 0I;
  #L2b82e4.  call temp:= `asString`(v2, v1) @signature `Lkotlin/jvm/internal/TypeReference;.asString:(Z)Ljava/lang/String;` @kind direct;
  #L2b82ea.  v1:= temp @kind object;
  #L2b82ec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b82f2.  v1:= " (Kotlin reflection is not available)" @kind object;
  #L2b82f6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b82fc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b8302.  v0:= temp @kind object;
  #L2b8304.  return v0 @kind object;
}
