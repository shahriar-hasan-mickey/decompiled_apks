record `kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.RestrictedSuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `kotlin.sequences.Sequence` `kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.$this_zipWithNext` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function2` `kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.$transform` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$0` @AccessFlag PRIVATE_SYNTHETIC;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$1` @AccessFlag ;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$2` @AccessFlag ;
  `int` `kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.label` @AccessFlag ;
}
procedure `void` `<init>`(`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2` v0 @kind this, `kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c2f5c.  v0.`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.$this_zipWithNext` @type ^`kotlin.sequences.Sequence` := v1 @kind object;
  #L2c2f60.  v0.`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.$transform` @type ^`kotlin.jvm.functions.Function2` := v2 @kind object;
  #L2c2f64.  v1:= 2I;
  #L2c2f66.  call `<init>`(v0, v1, v3) @signature `Lkotlin/coroutines/jvm/internal/RestrictedSuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L2c2f6c.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2c2f34.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2`;
  #L2c2f38.  v1:= v3.`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.$this_zipWithNext` @type ^`kotlin.sequences.Sequence` @kind object;
  #L2c2f3c.  v2:= v3.`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.$transform` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L2c2f40.  call `<init>`(v0, v1, v2, v5) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2c2f46.  v0.`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$0` @type ^`java.lang.Object` := v4 @kind object;
  #L2c2f4a.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2c2e0c.  v1:= (`kotlin.sequences.SequenceScope`) v1 @kind object;
  #L2c2e10.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L2c2e14.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2c2e1a.  v1:= temp @kind object;
  #L2c2e1c.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2` v0 @kind this, `kotlin.sequences.SequenceScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c2e30.  call temp:= `create`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2c2e36.  v1:= temp @kind object;
  #L2c2e38.  v1:= (`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2`) v1 @kind object;
  #L2c2e3c.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2c2e40.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2c2e46.  v1:= temp @kind object;
  #L2c2e48.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$zipWithNext$2;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2c2e5c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2c2e62.  v0:= temp @kind object;
  #L2c2e64.  v1:= v7.`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.label` @type ^`int`;
  #L2c2e68.  v2:= 1I;
  #L2c2e6a.  if v1 == 0 then goto L2c2ea0;
  #L2c2e6e.  if v1 != v2 then goto L2c2e90;
  #L2c2e72.  v1:= v7.`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$2` @type ^`java.lang.Object` @kind object;
  #L2c2e76.  v3:= v7.`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$1` @type ^`java.lang.Object` @kind object;
  #L2c2e7a.  v3:= (`java.util.Iterator`) v3 @kind object;
  #L2c2e7e.  v4:= v7.`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$0` @type ^`java.lang.Object` @kind object;
  #L2c2e82.  v4:= (`kotlin.sequences.SequenceScope`) v4 @kind object;
  #L2c2e86.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2c2e8c.  v8:= v1 @kind object;
  #L2c2e8e.  goto L2c2eda;
  #L2c2e90.  v8:= new `java.lang.IllegalStateException`;
  #L2c2e94.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2c2e98.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c2e9e.  throw v8;
  #L2c2ea0.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2c2ea6.  v8:= v7.`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$0` @type ^`java.lang.Object` @kind object;
  #L2c2eaa.  v8:= (`kotlin.sequences.SequenceScope`) v8 @kind object;
  #L2c2eae.  v1:= v7.`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.$this_zipWithNext` @type ^`kotlin.sequences.Sequence` @kind object;
  #L2c2eb2.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c2eb8.  v1:= temp @kind object;
  #L2c2eba.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c2ec0.  v3:= temp;
  #L2c2ec2.  if v3 != 0 then goto L2c2ecc;
  #L2c2ec6.  v8:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2c2eca.  return v8 @kind object;
  #L2c2ecc.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c2ed2.  v3:= temp @kind object;
  #L2c2ed4.  v4:= v8 @kind object;
  #L2c2ed6.  v8:= v3 @kind object;
  #L2c2ed8.  v3:= v1 @kind object;
  #L2c2eda.  v1:= v7 @kind object;
  #L2c2edc.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c2ee2.  v5:= temp;
  #L2c2ee4.  if v5 == 0 then goto L2c2f1e;
  #L2c2ee8.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c2eee.  v5:= temp @kind object;
  #L2c2ef0.  v6:= v1.`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.$transform` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L2c2ef4.  call temp:= `invoke`(v6, v8, v5) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2c2efa.  v8:= temp @kind object;
  #L2c2efc.  v1.`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$0` @type ^`java.lang.Object` := v4 @kind object;
  #L2c2f00.  v1.`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$1` @type ^`java.lang.Object` := v3 @kind object;
  #L2c2f04.  v1.`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$2` @type ^`java.lang.Object` := v5 @kind object;
  #L2c2f08.  v1.`kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.label` @type ^`int` := v2;
  #L2c2f0c.  call temp:= `yield`(v4, v8, v1) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2c2f12.  v8:= temp @kind object;
  #L2c2f14.  if v8 != v0 then goto L2c2f1a;
  #L2c2f18.  return v0 @kind object;
  #L2c2f1a.  v8:= v5 @kind object;
  #L2c2f1c.  goto L2c2edc;
  #L2c2f1e.  v8:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2c2f22.  return v8 @kind object;
}
