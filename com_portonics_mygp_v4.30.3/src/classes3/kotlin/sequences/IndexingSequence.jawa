record `kotlin.sequences.IndexingSequence` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface {
  `kotlin.sequences.Sequence` `kotlin.sequences.IndexingSequence.sequence` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.IndexingSequence` v1 @kind this, `kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/IndexingSequence;.<init>:(Lkotlin/sequences/Sequence;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2c0ef0.  v0:= "sequence" @kind object;
  #L2c0ef4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2c0efa.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c0f00.  v1.`kotlin.sequences.IndexingSequence.sequence` @type ^`kotlin.sequences.Sequence` := v2 @kind object;
  #L2c0f04.  return @kind void;
}
procedure `kotlin.sequences.Sequence` `access$getSequence$p`(`kotlin.sequences.IndexingSequence` v0 @kind object) @signature `Lkotlin/sequences/IndexingSequence;.access$getSequence$p:(Lkotlin/sequences/IndexingSequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2c0ed8.  v0:= v0.`kotlin.sequences.IndexingSequence.sequence` @type ^`kotlin.sequences.Sequence` @kind object;
  #L2c0edc.  return v0 @kind object;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.IndexingSequence` v1 @kind this) @signature `Lkotlin/sequences/IndexingSequence;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c0ebc.  v0:= new `kotlin.sequences.IndexingSequence$iterator$1`;
  #L2c0ec0.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.<init>:(Lkotlin/sequences/IndexingSequence;)V` @kind direct;
  #L2c0ec6.  return v0 @kind object;
}
