record `kotlin.sequences.SequenceBuilderIterator` @kind class @AccessFlag FINAL extends `kotlin.sequences.SequenceScope` @kind class, `java.util.Iterator` @kind interface, `kotlin.coroutines.Continuation` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.SequenceBuilderIterator.nextIterator` @AccessFlag PRIVATE;
  `kotlin.coroutines.Continuation` `kotlin.sequences.SequenceBuilderIterator.nextStep` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlin.sequences.SequenceBuilderIterator.nextValue` @AccessFlag PRIVATE;
  `int` `kotlin.sequences.SequenceBuilderIterator.state` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.sequences.SequenceBuilderIterator` v0 @kind this) @signature `Lkotlin/sequences/SequenceBuilderIterator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2c1344.  call `<init>`(v0) @signature `Lkotlin/sequences/SequenceScope;.<init>:()V` @kind direct;
  #L2c134a.  return @kind void;
}
procedure `java.lang.Throwable` `exceptionalState`(`kotlin.sequences.SequenceBuilderIterator` v3 @kind this) @signature `Lkotlin/sequences/SequenceBuilderIterator;.exceptionalState:()Ljava/lang/Throwable;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2c12a4.  v0:= v3.`kotlin.sequences.SequenceBuilderIterator.state` @type ^`int`;
  #L2c12a8.  v1:= 4I;
  #L2c12aa.  if v0 == v1 then goto L2c12f6;
  #L2c12ae.  v1:= 5I;
  #L2c12b0.  if v0 == v1 then goto L2c12e6;
  #L2c12b4.  v0:= new `java.lang.IllegalStateException`;
  #L2c12b8.  v1:= new `java.lang.StringBuilder`;
  #L2c12bc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c12c2.  v2:= "Unexpected state of the iterator: " @kind object;
  #L2c12c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c12cc.  v2:= v3.`kotlin.sequences.SequenceBuilderIterator.state` @type ^`int`;
  #L2c12d0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c12d6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c12dc.  v1:= temp @kind object;
  #L2c12de.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c12e4.  goto L2c1300;
  #L2c12e6.  v0:= new `java.lang.IllegalStateException`;
  #L2c12ea.  v1:= "Iterator has failed." @kind object;
  #L2c12ee.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c12f4.  goto L2c1300;
  #L2c12f6.  v0:= new `java.util.NoSuchElementException`;
  #L2c12fa.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2c1300.  return v0 @kind object;
}
procedure `java.lang.Object` `nextNotReady`(`kotlin.sequences.SequenceBuilderIterator` v1 @kind this) @signature `Lkotlin/sequences/SequenceBuilderIterator;.nextNotReady:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2c11c4.  call temp:= `hasNext`(v1) @signature `Lkotlin/sequences/SequenceBuilderIterator;.hasNext:()Z` @kind virtual;
  #L2c11ca.  v0:= temp;
  #L2c11cc.  if v0 == 0 then goto L2c11da;
  #L2c11d0.  call temp:= `next`(v1) @signature `Lkotlin/sequences/SequenceBuilderIterator;.next:()Ljava/lang/Object;` @kind virtual;
  #L2c11d6.  v0:= temp @kind object;
  #L2c11d8.  return v0 @kind object;
  #L2c11da.  v0:= new `java.util.NoSuchElementException`;
  #L2c11de.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2c11e4.  throw v0;
}
procedure `kotlin.coroutines.CoroutineContext` `getContext`(`kotlin.sequences.SequenceBuilderIterator` v1 @kind this) @signature `Lkotlin/sequences/SequenceBuilderIterator;.getContext:()Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c132c.  v0:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L2c1330.  return v0 @kind object;
}
procedure `kotlin.coroutines.Continuation` `getNextStep`(`kotlin.sequences.SequenceBuilderIterator` v1 @kind this) @signature `Lkotlin/sequences/SequenceBuilderIterator;.getNextStep:()Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c1314.  v0:= v1.`kotlin.sequences.SequenceBuilderIterator.nextStep` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L2c1318.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.SequenceBuilderIterator` v4 @kind this) @signature `Lkotlin/sequences/SequenceBuilderIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c10cc.  v0:= v4.`kotlin.sequences.SequenceBuilderIterator.state` @type ^`int`;
  #L2c10d0.  v1:= 0I;
  #L2c10d2.  if v0 == 0 then goto L2c111e;
  #L2c10d6.  v2:= 2I;
  #L2c10d8.  v3:= 1I;
  #L2c10da.  if v0 == v3 then goto L2c10fe;
  #L2c10de.  if v0 == v2 then goto L2c10fc;
  #L2c10e2.  v1:= 3I;
  #L2c10e4.  if v0 == v1 then goto L2c10fc;
  #L2c10e8.  v1:= 4I;
  #L2c10ea.  if v0 != v1 then goto L2c10f2;
  #L2c10ee.  v0:= 0I;
  #L2c10f0.  return v0;
  #L2c10f2.  call temp:= `exceptionalState`(v4) @signature `Lkotlin/sequences/SequenceBuilderIterator;.exceptionalState:()Ljava/lang/Throwable;` @kind direct;
  #L2c10f8.  v0:= temp @kind object;
  #L2c10fa.  throw v0;
  #L2c10fc.  return v3;
  #L2c10fe.  v0:= v4.`kotlin.sequences.SequenceBuilderIterator.nextIterator` @type ^`java.util.Iterator` @kind object;
  #L2c1102.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2c1108.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c110e.  v0:= temp;
  #L2c1110.  if v0 == 0 then goto L2c111a;
  #L2c1114.  v4.`kotlin.sequences.SequenceBuilderIterator.state` @type ^`int` := v2;
  #L2c1118.  return v3;
  #L2c111a.  v4.`kotlin.sequences.SequenceBuilderIterator.nextIterator` @type ^`java.util.Iterator` := v1 @kind object;
  #L2c111e.  v0:= 5I;
  #L2c1120.  v4.`kotlin.sequences.SequenceBuilderIterator.state` @type ^`int` := v0;
  #L2c1124.  v0:= v4.`kotlin.sequences.SequenceBuilderIterator.nextStep` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L2c1128.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2c112e.  v4.`kotlin.sequences.SequenceBuilderIterator.nextStep` @type ^`kotlin.coroutines.Continuation` := v1 @kind object;
  #L2c1132.  v1:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L2c1136.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2c113a.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2c1140.  v1:= temp @kind object;
  #L2c1142.  call `resumeWith`(v0, v1) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L2c1148.  goto L2c10cc;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.SequenceBuilderIterator` v3 @kind this) @signature `Lkotlin/sequences/SequenceBuilderIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c115c.  v0:= v3.`kotlin.sequences.SequenceBuilderIterator.state` @type ^`int`;
  #L2c1160.  if v0 == 0 then goto L2c11aa;
  #L2c1164.  v1:= 1I;
  #L2c1166.  if v0 == v1 then goto L2c11aa;
  #L2c116a.  v2:= 2I;
  #L2c116c.  if v0 == v2 then goto L2c1192;
  #L2c1170.  v1:= 3I;
  #L2c1172.  if v0 != v1 then goto L2c1188;
  #L2c1176.  v0:= 0I;
  #L2c1178.  v3.`kotlin.sequences.SequenceBuilderIterator.state` @type ^`int` := v0;
  #L2c117c.  v0:= v3.`kotlin.sequences.SequenceBuilderIterator.nextValue` @type ^`java.lang.Object` @kind object;
  #L2c1180.  v1:= 0I;
  #L2c1182.  v3.`kotlin.sequences.SequenceBuilderIterator.nextValue` @type ^`java.lang.Object` := v1 @kind object;
  #L2c1186.  return v0 @kind object;
  #L2c1188.  call temp:= `exceptionalState`(v3) @signature `Lkotlin/sequences/SequenceBuilderIterator;.exceptionalState:()Ljava/lang/Throwable;` @kind direct;
  #L2c118e.  v0:= temp @kind object;
  #L2c1190.  throw v0;
  #L2c1192.  v3.`kotlin.sequences.SequenceBuilderIterator.state` @type ^`int` := v1;
  #L2c1196.  v0:= v3.`kotlin.sequences.SequenceBuilderIterator.nextIterator` @type ^`java.util.Iterator` @kind object;
  #L2c119a.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2c11a0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c11a6.  v0:= temp @kind object;
  #L2c11a8.  return v0 @kind object;
  #L2c11aa.  call temp:= `nextNotReady`(v3) @signature `Lkotlin/sequences/SequenceBuilderIterator;.nextNotReady:()Ljava/lang/Object;` @kind direct;
  #L2c11b0.  v0:= temp @kind object;
  #L2c11b2.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.sequences.SequenceBuilderIterator` v2 @kind this) @signature `Lkotlin/sequences/SequenceBuilderIterator;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c135c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2c1360.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2c1364.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c136a.  throw v0;
}
procedure `void` `resumeWith`(`kotlin.sequences.SequenceBuilderIterator` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/SequenceBuilderIterator;.resumeWith:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L2c137c.  call `throwOnFailure`(v1) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2c1382.  v1:= 4I;
  #L2c1384.  v0.`kotlin.sequences.SequenceBuilderIterator.state` @type ^`int` := v1;
  #L2c1388.  return @kind void;
}
procedure `void` `setNextStep`(`kotlin.sequences.SequenceBuilderIterator` v0 @kind this, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlin/sequences/SequenceBuilderIterator;.setNextStep:(Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c139c.  v0.`kotlin.sequences.SequenceBuilderIterator.nextStep` @type ^`kotlin.coroutines.Continuation` := v1 @kind object;
  #L2c13a0.  return @kind void;
}
procedure `java.lang.Object` `yield`(`kotlin.sequences.SequenceBuilderIterator` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlin/sequences/SequenceBuilderIterator;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c11f8.  v1.`kotlin.sequences.SequenceBuilderIterator.nextValue` @type ^`java.lang.Object` := v2 @kind object;
  #L2c11fc.  v2:= 3I;
  #L2c11fe.  v1.`kotlin.sequences.SequenceBuilderIterator.state` @type ^`int` := v2;
  #L2c1202.  v1.`kotlin.sequences.SequenceBuilderIterator.nextStep` @type ^`kotlin.coroutines.Continuation` := v3 @kind object;
  #L2c1206.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2c120c.  v2:= temp @kind object;
  #L2c120e.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2c1214.  v0:= temp @kind object;
  #L2c1216.  if v2 != v0 then goto L2c1220;
  #L2c121a.  call `probeCoroutineSuspended`(v3) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L2c1220.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2c1226.  v3:= temp @kind object;
  #L2c1228.  if v2 != v3 then goto L2c122e;
  #L2c122c.  return v2 @kind object;
  #L2c122e.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2c1232.  return v2 @kind object;
}
procedure `java.lang.Object` `yieldAll`(`kotlin.sequences.SequenceBuilderIterator` v1 @kind this, `java.util.Iterator` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlin/sequences/SequenceBuilderIterator;.yieldAll:(Ljava/util/Iterator;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c1244.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c124a.  v0:= temp;
  #L2c124c.  if v0 != 0 then goto L2c1256;
  #L2c1250.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2c1254.  return v2 @kind object;
  #L2c1256.  v1.`kotlin.sequences.SequenceBuilderIterator.nextIterator` @type ^`java.util.Iterator` := v2 @kind object;
  #L2c125a.  v2:= 2I;
  #L2c125c.  v1.`kotlin.sequences.SequenceBuilderIterator.state` @type ^`int` := v2;
  #L2c1260.  v1.`kotlin.sequences.SequenceBuilderIterator.nextStep` @type ^`kotlin.coroutines.Continuation` := v3 @kind object;
  #L2c1264.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2c126a.  v2:= temp @kind object;
  #L2c126c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2c1272.  v0:= temp @kind object;
  #L2c1274.  if v2 != v0 then goto L2c127e;
  #L2c1278.  call `probeCoroutineSuspended`(v3) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L2c127e.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2c1284.  v3:= temp @kind object;
  #L2c1286.  if v2 != v3 then goto L2c128c;
  #L2c128a.  return v2 @kind object;
  #L2c128c.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2c1290.  return v2 @kind object;
}
