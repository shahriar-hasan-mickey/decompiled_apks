record `kotlin.sequences.FlatteningSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.FlatteningSequence$iterator$1.itemIterator` @AccessFlag PRIVATE;
  `java.util.Iterator` `kotlin.sequences.FlatteningSequence$iterator$1.iterator` @AccessFlag PRIVATE_FINAL;
  `kotlin.sequences.FlatteningSequence` `kotlin.sequences.FlatteningSequence$iterator$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.FlatteningSequence$iterator$1` v0 @kind this, `kotlin.sequences.FlatteningSequence` v1 @kind object) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.<init>:(Lkotlin/sequences/FlatteningSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c0a9c.  v0.`kotlin.sequences.FlatteningSequence$iterator$1.this$0` @type ^`kotlin.sequences.FlatteningSequence` := v1 @kind object;
  #L2c0aa0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c0aa6.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/FlatteningSequence;.access$getSequence$p:(Lkotlin/sequences/FlatteningSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L2c0aac.  v1:= temp @kind object;
  #L2c0aae.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c0ab4.  v1:= temp @kind object;
  #L2c0ab6.  v0.`kotlin.sequences.FlatteningSequence$iterator$1.iterator` @type ^`java.util.Iterator` := v1 @kind object;
  #L2c0aba.  return @kind void;
}
procedure `boolean` `ensureItemIterator`(`kotlin.sequences.FlatteningSequence$iterator$1` v5 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.ensureItemIterator:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2c0978.  v0:= v5.`kotlin.sequences.FlatteningSequence$iterator$1.itemIterator` @type ^`java.util.Iterator` @kind object;
  #L2c097c.  v1:= 1I;
  #L2c097e.  v2:= 0I;
  #L2c0980.  if v0 == 0 then goto L2c0994;
  #L2c0984.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c098a.  v0:= temp;
  #L2c098c.  if v0 != 0 then goto L2c0994;
  #L2c0990.  v0:= 1I;
  #L2c0992.  goto L2c0996;
  #L2c0994.  v0:= 0I;
  #L2c0996.  if v0 == 0 then goto L2c09a0;
  #L2c099a.  v0:= 0I;
  #L2c099c.  v5.`kotlin.sequences.FlatteningSequence$iterator$1.itemIterator` @type ^`java.util.Iterator` := v0 @kind object;
  #L2c09a0.  v0:= v5.`kotlin.sequences.FlatteningSequence$iterator$1.itemIterator` @type ^`java.util.Iterator` @kind object;
  #L2c09a4.  if v0 != 0 then goto L2c0a02;
  #L2c09a8.  v0:= v5.`kotlin.sequences.FlatteningSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c09ac.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c09b2.  v0:= temp;
  #L2c09b4.  if v0 != 0 then goto L2c09ba;
  #L2c09b8.  return v2;
  #L2c09ba.  v0:= v5.`kotlin.sequences.FlatteningSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c09be.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c09c4.  v0:= temp @kind object;
  #L2c09c6.  v3:= v5.`kotlin.sequences.FlatteningSequence$iterator$1.this$0` @type ^`kotlin.sequences.FlatteningSequence` @kind object;
  #L2c09ca.  call temp:= `access$getIterator$p`(v3) @signature `Lkotlin/sequences/FlatteningSequence;.access$getIterator$p:(Lkotlin/sequences/FlatteningSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L2c09d0.  v3:= temp @kind object;
  #L2c09d2.  v4:= v5.`kotlin.sequences.FlatteningSequence$iterator$1.this$0` @type ^`kotlin.sequences.FlatteningSequence` @kind object;
  #L2c09d6.  call temp:= `access$getTransformer$p`(v4) @signature `Lkotlin/sequences/FlatteningSequence;.access$getTransformer$p:(Lkotlin/sequences/FlatteningSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L2c09dc.  v4:= temp @kind object;
  #L2c09de.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2c09e4.  v0:= temp @kind object;
  #L2c09e6.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2c09ec.  v0:= temp @kind object;
  #L2c09ee.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L2c09f2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c09f8.  v3:= temp;
  #L2c09fa.  if v3 == 0 then goto L2c09a0;
  #L2c09fe.  v5.`kotlin.sequences.FlatteningSequence$iterator$1.itemIterator` @type ^`java.util.Iterator` := v0 @kind object;
  #L2c0a02.  return v1;
}
procedure `java.util.Iterator` `getItemIterator`(`kotlin.sequences.FlatteningSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.getItemIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0a6c.  v0:= v1.`kotlin.sequences.FlatteningSequence$iterator$1.itemIterator` @type ^`java.util.Iterator` @kind object;
  #L2c0a70.  return v0 @kind object;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.FlatteningSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0a84.  v0:= v1.`kotlin.sequences.FlatteningSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c0a88.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.FlatteningSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c0a14.  call temp:= `ensureItemIterator`(v1) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.ensureItemIterator:()Z` @kind direct;
  #L2c0a1a.  v0:= temp;
  #L2c0a1c.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.FlatteningSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c0a30.  call temp:= `ensureItemIterator`(v1) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.ensureItemIterator:()Z` @kind direct;
  #L2c0a36.  v0:= temp;
  #L2c0a38.  if v0 == 0 then goto L2c0a50;
  #L2c0a3c.  v0:= v1.`kotlin.sequences.FlatteningSequence$iterator$1.itemIterator` @type ^`java.util.Iterator` @kind object;
  #L2c0a40.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2c0a46.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c0a4c.  v0:= temp @kind object;
  #L2c0a4e.  return v0 @kind object;
  #L2c0a50.  v0:= new `java.util.NoSuchElementException`;
  #L2c0a54.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2c0a5a.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.FlatteningSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c0acc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2c0ad0.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2c0ad4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c0ada.  throw v0;
}
procedure `void` `setItemIterator`(`kotlin.sequences.FlatteningSequence$iterator$1` v0 @kind this, `java.util.Iterator` v1 @kind object) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.setItemIterator:(Ljava/util/Iterator;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c0aec.  v0.`kotlin.sequences.FlatteningSequence$iterator$1.itemIterator` @type ^`java.util.Iterator` := v1 @kind object;
  #L2c0af0.  return @kind void;
}
