record `kotlin.sequences.TransformingSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.TransformingSequence$iterator$1.iterator` @AccessFlag PRIVATE_FINAL;
  `kotlin.sequences.TransformingSequence` `kotlin.sequences.TransformingSequence$iterator$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.TransformingSequence$iterator$1` v0 @kind this, `kotlin.sequences.TransformingSequence` v1 @kind object) @signature `Lkotlin/sequences/TransformingSequence$iterator$1;.<init>:(Lkotlin/sequences/TransformingSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c3af0.  v0.`kotlin.sequences.TransformingSequence$iterator$1.this$0` @type ^`kotlin.sequences.TransformingSequence` := v1 @kind object;
  #L2c3af4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c3afa.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/TransformingSequence;.access$getSequence$p:(Lkotlin/sequences/TransformingSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L2c3b00.  v1:= temp @kind object;
  #L2c3b02.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c3b08.  v1:= temp @kind object;
  #L2c3b0a.  v0.`kotlin.sequences.TransformingSequence$iterator$1.iterator` @type ^`java.util.Iterator` := v1 @kind object;
  #L2c3b0e.  return @kind void;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.TransformingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TransformingSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c3ad8.  v0:= v1.`kotlin.sequences.TransformingSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c3adc.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.TransformingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TransformingSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c3a84.  v0:= v1.`kotlin.sequences.TransformingSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c3a88.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c3a8e.  v0:= temp;
  #L2c3a90.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.TransformingSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/TransformingSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c3aa4.  v0:= v2.`kotlin.sequences.TransformingSequence$iterator$1.this$0` @type ^`kotlin.sequences.TransformingSequence` @kind object;
  #L2c3aa8.  call temp:= `access$getTransformer$p`(v0) @signature `Lkotlin/sequences/TransformingSequence;.access$getTransformer$p:(Lkotlin/sequences/TransformingSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L2c3aae.  v0:= temp @kind object;
  #L2c3ab0.  v1:= v2.`kotlin.sequences.TransformingSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c3ab4.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c3aba.  v1:= temp @kind object;
  #L2c3abc.  call temp:= `invoke`(v0, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2c3ac2.  v0:= temp @kind object;
  #L2c3ac4.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.sequences.TransformingSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/TransformingSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c3b20.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2c3b24.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2c3b28.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c3b2e.  throw v0;
}
