record `kotlin.sequences.SubSequence` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface, `kotlin.sequences.DropTakeSequence` @kind interface {
  `int` `kotlin.sequences.SubSequence.endIndex` @AccessFlag PRIVATE_FINAL;
  `kotlin.sequences.Sequence` `kotlin.sequences.SubSequence.sequence` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.SubSequence.startIndex` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.SubSequence` v2 @kind this, `kotlin.sequences.Sequence` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lkotlin/sequences/SubSequence;.<init>:(Lkotlin/sequences/Sequence;II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2c3398.  v0:= "sequence" @kind object;
  #L2c339c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2c33a2.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c33a8.  v2.`kotlin.sequences.SubSequence.sequence` @type ^`kotlin.sequences.Sequence` := v3 @kind object;
  #L2c33ac.  v2.`kotlin.sequences.SubSequence.startIndex` @type ^`int` := v4;
  #L2c33b0.  v2.`kotlin.sequences.SubSequence.endIndex` @type ^`int` := v5;
  #L2c33b4.  v3:= 1I;
  #L2c33b6.  v0:= 0I;
  #L2c33b8.  if v4 < 0 then goto L2c33c0;
  #L2c33bc.  v1:= 1I;
  #L2c33be.  goto L2c33c2;
  #L2c33c0.  v1:= 0I;
  #L2c33c2.  if v1 == 0 then goto L2c345e;
  #L2c33c6.  if v5 < 0 then goto L2c33ce;
  #L2c33ca.  v1:= 1I;
  #L2c33cc.  goto L2c33d0;
  #L2c33ce.  v1:= 0I;
  #L2c33d0.  if v1 == 0 then goto L2c3428;
  #L2c33d4.  if v5 < v4 then goto L2c33da;
  #L2c33d8.  goto L2c33dc;
  #L2c33da.  v3:= 0I;
  #L2c33dc.  if v3 == 0 then goto L2c33e2;
  #L2c33e0.  return @kind void;
  #L2c33e2.  v3:= new `java.lang.StringBuilder`;
  #L2c33e6.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c33ec.  v0:= "endIndex should be not less than startIndex, but was " @kind object;
  #L2c33f0.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c33f6.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c33fc.  v5:= " < " @kind object;
  #L2c3400.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c3406.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c340c.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c3412.  v3:= temp @kind object;
  #L2c3414.  v4:= new `java.lang.IllegalArgumentException`;
  #L2c3418.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c341e.  v3:= temp @kind object;
  #L2c3420.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c3426.  throw v4;
  #L2c3428.  v3:= new `java.lang.StringBuilder`;
  #L2c342c.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c3432.  v4:= "endIndex should be non-negative, but is " @kind object;
  #L2c3436.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c343c.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c3442.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c3448.  v3:= temp @kind object;
  #L2c344a.  v4:= new `java.lang.IllegalArgumentException`;
  #L2c344e.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c3454.  v3:= temp @kind object;
  #L2c3456.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c345c.  throw v4;
  #L2c345e.  v3:= new `java.lang.StringBuilder`;
  #L2c3462.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c3468.  v5:= "startIndex should be non-negative, but is " @kind object;
  #L2c346c.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c3472.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c3478.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c347e.  v3:= temp @kind object;
  #L2c3480.  v4:= new `java.lang.IllegalArgumentException`;
  #L2c3484.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c348a.  v3:= temp @kind object;
  #L2c348c.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c3492.  throw v4;
}
procedure `int` `access$getEndIndex$p`(`kotlin.sequences.SubSequence` v0 @kind object) @signature `Lkotlin/sequences/SubSequence;.access$getEndIndex$p:(Lkotlin/sequences/SubSequence;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2c329c.  v0:= v0.`kotlin.sequences.SubSequence.endIndex` @type ^`int`;
  #L2c32a0.  return v0;
}
procedure `kotlin.sequences.Sequence` `access$getSequence$p`(`kotlin.sequences.SubSequence` v0 @kind object) @signature `Lkotlin/sequences/SubSequence;.access$getSequence$p:(Lkotlin/sequences/SubSequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2c3304.  v0:= v0.`kotlin.sequences.SubSequence.sequence` @type ^`kotlin.sequences.Sequence` @kind object;
  #L2c3308.  return v0 @kind object;
}
procedure `int` `access$getStartIndex$p`(`kotlin.sequences.SubSequence` v0 @kind object) @signature `Lkotlin/sequences/SubSequence;.access$getStartIndex$p:(Lkotlin/sequences/SubSequence;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2c32b4.  v0:= v0.`kotlin.sequences.SubSequence.startIndex` @type ^`int`;
  #L2c32b8.  return v0;
}
procedure `int` `getCount`(`kotlin.sequences.SubSequence` v2 @kind this) @signature `Lkotlin/sequences/SubSequence;.getCount:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2c32cc.  v0:= v2.`kotlin.sequences.SubSequence.endIndex` @type ^`int`;
  #L2c32d0.  v1:= v2.`kotlin.sequences.SubSequence.startIndex` @type ^`int`;
  #L2c32d4.  v0:= v0 - v1 @kind int;
  #L2c32d6.  return v0;
}
procedure `kotlin.sequences.Sequence` `drop`(`kotlin.sequences.SubSequence` v3 @kind this, `int` v4 ) @signature `Lkotlin/sequences/SubSequence;.drop:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c331c.  call temp:= `getCount`(v3) @signature `Lkotlin/sequences/SubSequence;.getCount:()I` @kind direct;
  #L2c3322.  v0:= temp;
  #L2c3324.  if v4 < v0 then goto L2c3332;
  #L2c3328.  call temp:= `emptySequence`() @signature `Lkotlin/sequences/SequencesKt;.emptySequence:()Lkotlin/sequences/Sequence;` @kind static;
  #L2c332e.  v4:= temp @kind object;
  #L2c3330.  goto L2c334c;
  #L2c3332.  v0:= new `kotlin.sequences.SubSequence`;
  #L2c3336.  v1:= v3.`kotlin.sequences.SubSequence.sequence` @type ^`kotlin.sequences.Sequence` @kind object;
  #L2c333a.  v2:= v3.`kotlin.sequences.SubSequence.startIndex` @type ^`int`;
  #L2c333e.  v2:= v2 + v4 @kind int;
  #L2c3340.  v4:= v3.`kotlin.sequences.SubSequence.endIndex` @type ^`int`;
  #L2c3344.  call `<init>`(v0, v1, v2, v4) @signature `Lkotlin/sequences/SubSequence;.<init>:(Lkotlin/sequences/Sequence;II)V` @kind direct;
  #L2c334a.  v4:= v0 @kind object;
  #L2c334c.  return v4 @kind object;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.SubSequence` v1 @kind this) @signature `Lkotlin/sequences/SubSequence;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c32e8.  v0:= new `kotlin.sequences.SubSequence$iterator$1`;
  #L2c32ec.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/SubSequence$iterator$1;.<init>:(Lkotlin/sequences/SubSequence;)V` @kind direct;
  #L2c32f2.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `take`(`kotlin.sequences.SubSequence` v3 @kind this, `int` v4 ) @signature `Lkotlin/sequences/SubSequence;.take:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c3360.  call temp:= `getCount`(v3) @signature `Lkotlin/sequences/SubSequence;.getCount:()I` @kind direct;
  #L2c3366.  v0:= temp;
  #L2c3368.  if v4 < v0 then goto L2c3370;
  #L2c336c.  v0:= v3 @kind object;
  #L2c336e.  goto L2c3384;
  #L2c3370.  v0:= new `kotlin.sequences.SubSequence`;
  #L2c3374.  v1:= v3.`kotlin.sequences.SubSequence.sequence` @type ^`kotlin.sequences.Sequence` @kind object;
  #L2c3378.  v2:= v3.`kotlin.sequences.SubSequence.startIndex` @type ^`int`;
  #L2c337c.  v4:= v4 + v2 @kind int;
  #L2c337e.  call `<init>`(v0, v1, v2, v4) @signature `Lkotlin/sequences/SubSequence;.<init>:(Lkotlin/sequences/Sequence;II)V` @kind direct;
  #L2c3384.  return v0 @kind object;
}
