record `kotlin.sequences.EmptySequence` @kind class @AccessFlag FINAL extends `kotlin.sequences.Sequence` @kind interface, `kotlin.sequences.DropTakeSequence` @kind interface {
}
global `kotlin.sequences.EmptySequence` `@@kotlin.sequences.EmptySequence.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/sequences/EmptySequence;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2c06cc.  v0:= new `kotlin.sequences.EmptySequence`;
  #L2c06d0.  call `<init>`(v0) @signature `Lkotlin/sequences/EmptySequence;.<init>:()V` @kind direct;
  #L2c06d6.  `@@kotlin.sequences.EmptySequence.INSTANCE` @type ^`kotlin.sequences.EmptySequence` := v0 @kind object;
  #L2c06da.  return @kind void;
}
procedure `void` `<init>`(`kotlin.sequences.EmptySequence` v0 @kind this) @signature `Lkotlin/sequences/EmptySequence;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2c06ec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c06f2.  return @kind void;
}
procedure `kotlin.sequences.EmptySequence` `drop`(`kotlin.sequences.EmptySequence` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/EmptySequence;.drop:(I)Lkotlin/sequences/EmptySequence;` @AccessFlag PUBLIC {
    temp;

  #L2c0664.  v1:= `@@kotlin.sequences.EmptySequence.INSTANCE` @type ^`kotlin.sequences.EmptySequence` @kind object;
  #L2c0668.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `drop`(`kotlin.sequences.EmptySequence` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/EmptySequence;.drop:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2c0694.  call temp:= `drop`(v0, v1) @signature `Lkotlin/sequences/EmptySequence;.drop:(I)Lkotlin/sequences/EmptySequence;` @kind virtual;
  #L2c069a.  v1:= temp @kind object;
  #L2c069c.  return v1 @kind object;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.EmptySequence` v1 @kind this) @signature `Lkotlin/sequences/EmptySequence;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c064c.  v0:= `@@kotlin.collections.EmptyIterator.INSTANCE` @type ^`kotlin.collections.EmptyIterator` @kind object;
  #L2c0650.  return v0 @kind object;
}
procedure `kotlin.sequences.EmptySequence` `take`(`kotlin.sequences.EmptySequence` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/EmptySequence;.take:(I)Lkotlin/sequences/EmptySequence;` @AccessFlag PUBLIC {
    temp;

  #L2c067c.  v1:= `@@kotlin.sequences.EmptySequence.INSTANCE` @type ^`kotlin.sequences.EmptySequence` @kind object;
  #L2c0680.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `take`(`kotlin.sequences.EmptySequence` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/EmptySequence;.take:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2c06b0.  call temp:= `take`(v0, v1) @signature `Lkotlin/sequences/EmptySequence;.take:(I)Lkotlin/sequences/EmptySequence;` @kind virtual;
  #L2c06b6.  v1:= temp @kind object;
  #L2c06b8.  return v1 @kind object;
}
