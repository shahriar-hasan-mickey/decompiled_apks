record `kotlin.sequences.IndexingSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int` `kotlin.sequences.IndexingSequence$iterator$1.index` @AccessFlag PRIVATE;
  `java.util.Iterator` `kotlin.sequences.IndexingSequence$iterator$1.iterator` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.IndexingSequence$iterator$1` v0 @kind this, `kotlin.sequences.IndexingSequence` v1 @kind object) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.<init>:(Lkotlin/sequences/IndexingSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c0e58.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c0e5e.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/IndexingSequence;.access$getSequence$p:(Lkotlin/sequences/IndexingSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L2c0e64.  v1:= temp @kind object;
  #L2c0e66.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c0e6c.  v1:= temp @kind object;
  #L2c0e6e.  v0.`kotlin.sequences.IndexingSequence$iterator$1.iterator` @type ^`java.util.Iterator` := v1 @kind object;
  #L2c0e72.  return @kind void;
}
procedure `int` `getIndex`(`kotlin.sequences.IndexingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.getIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0dcc.  v0:= v1.`kotlin.sequences.IndexingSequence$iterator$1.index` @type ^`int`;
  #L2c0dd0.  return v0;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.IndexingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0e00.  v0:= v1.`kotlin.sequences.IndexingSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c0e04.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.IndexingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c0dac.  v0:= v1.`kotlin.sequences.IndexingSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c0db0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c0db6.  v0:= temp;
  #L2c0db8.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.IndexingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2c0de4.  call temp:= `next`(v1) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.next:()Lkotlin/collections/IndexedValue;` @kind virtual;
  #L2c0dea.  v0:= temp @kind object;
  #L2c0dec.  return v0 @kind object;
}
procedure `kotlin.collections.IndexedValue` `next`(`kotlin.sequences.IndexingSequence$iterator$1` v3 @kind this) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.next:()Lkotlin/collections/IndexedValue;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c0e18.  v0:= new `kotlin.collections.IndexedValue`;
  #L2c0e1c.  v1:= v3.`kotlin.sequences.IndexingSequence$iterator$1.index` @type ^`int`;
  #L2c0e20.  v2:= v1 + 1;
  #L2c0e24.  v3.`kotlin.sequences.IndexingSequence$iterator$1.index` @type ^`int` := v2;
  #L2c0e28.  if v1 >= 0 then goto L2c0e32;
  #L2c0e2c.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L2c0e32.  v2:= v3.`kotlin.sequences.IndexingSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c0e36.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c0e3c.  v2:= temp @kind object;
  #L2c0e3e.  call `<init>`(v0, v1, v2) @signature `Lkotlin/collections/IndexedValue;.<init>:(ILjava/lang/Object;)V` @kind direct;
  #L2c0e44.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.sequences.IndexingSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c0e84.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2c0e88.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2c0e8c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c0e92.  throw v0;
}
procedure `void` `setIndex`(`kotlin.sequences.IndexingSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/IndexingSequence$iterator$1;.setIndex:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c0ea4.  v0.`kotlin.sequences.IndexingSequence$iterator$1.index` @type ^`int` := v1;
  #L2c0ea8.  return @kind void;
}
