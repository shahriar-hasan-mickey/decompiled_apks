record `kotlin.sequences.TransformingIndexedSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int` `kotlin.sequences.TransformingIndexedSequence$iterator$1.index` @AccessFlag PRIVATE;
  `java.util.Iterator` `kotlin.sequences.TransformingIndexedSequence$iterator$1.iterator` @AccessFlag PRIVATE_FINAL;
  `kotlin.sequences.TransformingIndexedSequence` `kotlin.sequences.TransformingIndexedSequence$iterator$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.TransformingIndexedSequence$iterator$1` v0 @kind this, `kotlin.sequences.TransformingIndexedSequence` v1 @kind object) @signature `Lkotlin/sequences/TransformingIndexedSequence$iterator$1;.<init>:(Lkotlin/sequences/TransformingIndexedSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c399c.  v0.`kotlin.sequences.TransformingIndexedSequence$iterator$1.this$0` @type ^`kotlin.sequences.TransformingIndexedSequence` := v1 @kind object;
  #L2c39a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c39a6.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/TransformingIndexedSequence;.access$getSequence$p:(Lkotlin/sequences/TransformingIndexedSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L2c39ac.  v1:= temp @kind object;
  #L2c39ae.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c39b4.  v1:= temp @kind object;
  #L2c39b6.  v0.`kotlin.sequences.TransformingIndexedSequence$iterator$1.iterator` @type ^`java.util.Iterator` := v1 @kind object;
  #L2c39ba.  return @kind void;
}
procedure `int` `getIndex`(`kotlin.sequences.TransformingIndexedSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TransformingIndexedSequence$iterator$1;.getIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c391c.  v0:= v1.`kotlin.sequences.TransformingIndexedSequence$iterator$1.index` @type ^`int`;
  #L2c3920.  return v0;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.TransformingIndexedSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TransformingIndexedSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c3984.  v0:= v1.`kotlin.sequences.TransformingIndexedSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c3988.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.TransformingIndexedSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TransformingIndexedSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c38fc.  v0:= v1.`kotlin.sequences.TransformingIndexedSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c3900.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c3906.  v0:= temp;
  #L2c3908.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.TransformingIndexedSequence$iterator$1` v3 @kind this) @signature `Lkotlin/sequences/TransformingIndexedSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c3934.  v0:= v3.`kotlin.sequences.TransformingIndexedSequence$iterator$1.this$0` @type ^`kotlin.sequences.TransformingIndexedSequence` @kind object;
  #L2c3938.  call temp:= `access$getTransformer$p`(v0) @signature `Lkotlin/sequences/TransformingIndexedSequence;.access$getTransformer$p:(Lkotlin/sequences/TransformingIndexedSequence;)Lkotlin/jvm/functions/Function2;` @kind static;
  #L2c393e.  v0:= temp @kind object;
  #L2c3940.  v1:= v3.`kotlin.sequences.TransformingIndexedSequence$iterator$1.index` @type ^`int`;
  #L2c3944.  v2:= v1 + 1;
  #L2c3948.  v3.`kotlin.sequences.TransformingIndexedSequence$iterator$1.index` @type ^`int` := v2;
  #L2c394c.  if v1 >= 0 then goto L2c3956;
  #L2c3950.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L2c3956.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2c395c.  v1:= temp @kind object;
  #L2c395e.  v2:= v3.`kotlin.sequences.TransformingIndexedSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c3962.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c3968.  v2:= temp @kind object;
  #L2c396a.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2c3970.  v0:= temp @kind object;
  #L2c3972.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.sequences.TransformingIndexedSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/TransformingIndexedSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c39cc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2c39d0.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2c39d4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c39da.  throw v0;
}
procedure `void` `setIndex`(`kotlin.sequences.TransformingIndexedSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/TransformingIndexedSequence$iterator$1;.setIndex:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c39ec.  v0.`kotlin.sequences.TransformingIndexedSequence$iterator$1.index` @type ^`int` := v1;
  #L2c39f0.  return @kind void;
}
