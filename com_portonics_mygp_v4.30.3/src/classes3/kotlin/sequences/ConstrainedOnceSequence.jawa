record `kotlin.sequences.ConstrainedOnceSequence` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `kotlin.sequences.ConstrainedOnceSequence.sequenceRef` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.ConstrainedOnceSequence` v1 @kind this, `kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/ConstrainedOnceSequence;.<init>:(Lkotlin/sequences/Sequence;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2c007c.  v0:= "sequence" @kind object;
  #L2c0080.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2c0086.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c008c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2c0090.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2c0096.  v1.`kotlin.sequences.ConstrainedOnceSequence.sequenceRef` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L2c009a.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.ConstrainedOnceSequence` v2 @kind this) @signature `Lkotlin/sequences/ConstrainedOnceSequence;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c003c.  v0:= v2.`kotlin.sequences.ConstrainedOnceSequence.sequenceRef` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2c0040.  v1:= 0I;
  #L2c0042.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2c0048.  v0:= temp @kind object;
  #L2c004a.  v0:= (`kotlin.sequences.Sequence`) v0 @kind object;
  #L2c004e.  if v0 == 0 then goto L2c005c;
  #L2c0052.  call temp:= `iterator`(v0) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c0058.  v0:= temp @kind object;
  #L2c005a.  return v0 @kind object;
  #L2c005c.  v0:= new `java.lang.IllegalStateException`;
  #L2c0060.  v1:= "This sequence can be consumed only once." @kind object;
  #L2c0064.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c006a.  throw v0;
}
