record `kotlin.sequences.SequencesKt___SequencesKt$runningFold$1` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.RestrictedSuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$initial` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function2` `kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$operation` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.sequences.Sequence` `kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$this_runningFold` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$0` @AccessFlag PRIVATE_SYNTHETIC;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$1` @AccessFlag ;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$2` @AccessFlag ;
  `int` `kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.label` @AccessFlag ;
}
procedure `void` `<init>`(`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$runningFold$1;.<init>:(Ljava/lang/Object;Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c274c.  v0.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$initial` @type ^`java.lang.Object` := v1 @kind object;
  #L2c2750.  v0.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$this_runningFold` @type ^`kotlin.sequences.Sequence` := v2 @kind object;
  #L2c2754.  v0.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$operation` @type ^`kotlin.jvm.functions.Function2` := v3 @kind object;
  #L2c2758.  v1:= 2I;
  #L2c275a.  call `<init>`(v0, v1, v4) @signature `Lkotlin/coroutines/jvm/internal/RestrictedSuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L2c2760.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1` v4 @kind this, `java.lang.Object` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$runningFold$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c2720.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$runningFold$1`;
  #L2c2724.  v1:= v4.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$initial` @type ^`java.lang.Object` @kind object;
  #L2c2728.  v2:= v4.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$this_runningFold` @type ^`kotlin.sequences.Sequence` @kind object;
  #L2c272c.  v3:= v4.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$operation` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L2c2730.  call `<init>`(v0, v1, v2, v3, v6) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$runningFold$1;.<init>:(Ljava/lang/Object;Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2c2736.  v0.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$0` @type ^`java.lang.Object` := v5 @kind object;
  #L2c273a.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$runningFold$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2c25e0.  v1:= (`kotlin.sequences.SequenceScope`) v1 @kind object;
  #L2c25e4.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L2c25e8.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$runningFold$1;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2c25ee.  v1:= temp @kind object;
  #L2c25f0.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1` v0 @kind this, `kotlin.sequences.SequenceScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$runningFold$1;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c2604.  call temp:= `create`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$runningFold$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2c260a.  v1:= temp @kind object;
  #L2c260c.  v1:= (`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1`) v1 @kind object;
  #L2c2610.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2c2614.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$runningFold$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2c261a.  v1:= temp @kind object;
  #L2c261c.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$runningFold$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2c2630.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2c2636.  v0:= temp @kind object;
  #L2c2638.  v1:= v7.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.label` @type ^`int`;
  #L2c263c.  v2:= 2I;
  #L2c263e.  v3:= 1I;
  #L2c2640.  if v1 == 0 then goto L2c268a;
  #L2c2644.  if v1 == v3 then goto L2c267a;
  #L2c2648.  if v1 != v2 then goto L2c266a;
  #L2c264c.  v1:= v7.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$2` @type ^`java.lang.Object` @kind object;
  #L2c2650.  v1:= (`java.util.Iterator`) v1 @kind object;
  #L2c2654.  v3:= v7.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$1` @type ^`java.lang.Object` @kind object;
  #L2c2658.  v4:= v7.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2c265c.  v4:= (`kotlin.sequences.SequenceScope`) v4 @kind object;
  #L2c2660.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2c2666.  v8:= v3 @kind object;
  #L2c2668.  goto L2c26c8;
  #L2c266a.  v8:= new `java.lang.IllegalStateException`;
  #L2c266e.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2c2672.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c2678.  throw v8;
  #L2c267a.  v1:= v7.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2c267e.  v1:= (`kotlin.sequences.SequenceScope`) v1 @kind object;
  #L2c2682.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2c2688.  goto L2c26b4;
  #L2c268a.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2c2690.  v8:= v7.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2c2694.  v1:= v8 @kind object;
  #L2c2696.  v1:= (`kotlin.sequences.SequenceScope`) v1 @kind object;
  #L2c269a.  v8:= v7.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$initial` @type ^`java.lang.Object` @kind object;
  #L2c269e.  v7.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$0` @type ^`java.lang.Object` := v1 @kind object;
  #L2c26a2.  v7.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.label` @type ^`int` := v3;
  #L2c26a6.  call temp:= `yield`(v1, v8, v7) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2c26ac.  v8:= temp @kind object;
  #L2c26ae.  if v8 != v0 then goto L2c26b4;
  #L2c26b2.  return v0 @kind object;
  #L2c26b4.  v8:= v7.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$initial` @type ^`java.lang.Object` @kind object;
  #L2c26b8.  v3:= v7.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$this_runningFold` @type ^`kotlin.sequences.Sequence` @kind object;
  #L2c26bc.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c26c2.  v3:= temp @kind object;
  #L2c26c4.  v4:= v1 @kind object;
  #L2c26c6.  v1:= v3 @kind object;
  #L2c26c8.  v3:= v7 @kind object;
  #L2c26ca.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c26d0.  v5:= temp;
  #L2c26d2.  if v5 == 0 then goto L2c2708;
  #L2c26d6.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c26dc.  v5:= temp @kind object;
  #L2c26de.  v6:= v3.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$operation` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L2c26e2.  call temp:= `invoke`(v6, v8, v5) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2c26e8.  v8:= temp @kind object;
  #L2c26ea.  v3.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$0` @type ^`java.lang.Object` := v4 @kind object;
  #L2c26ee.  v3.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$1` @type ^`java.lang.Object` := v8 @kind object;
  #L2c26f2.  v3.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$2` @type ^`java.lang.Object` := v1 @kind object;
  #L2c26f6.  v3.`kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.label` @type ^`int` := v2;
  #L2c26fa.  call temp:= `yield`(v4, v8, v3) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2c2700.  v5:= temp @kind object;
  #L2c2702.  if v5 != v0 then goto L2c26ca;
  #L2c2706.  return v0 @kind object;
  #L2c2708.  v8:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2c270c.  return v8 @kind object;
}
