record `kotlin.sequences.MergingSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.MergingSequence$iterator$1.iterator1` @AccessFlag PRIVATE_FINAL;
  `java.util.Iterator` `kotlin.sequences.MergingSequence$iterator$1.iterator2` @AccessFlag PRIVATE_FINAL;
  `kotlin.sequences.MergingSequence` `kotlin.sequences.MergingSequence$iterator$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.MergingSequence$iterator$1` v1 @kind this, `kotlin.sequences.MergingSequence` v2 @kind object) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.<init>:(Lkotlin/sequences/MergingSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2c0fc0.  v1.`kotlin.sequences.MergingSequence$iterator$1.this$0` @type ^`kotlin.sequences.MergingSequence` := v2 @kind object;
  #L2c0fc4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c0fca.  call temp:= `access$getSequence1$p`(v2) @signature `Lkotlin/sequences/MergingSequence;.access$getSequence1$p:(Lkotlin/sequences/MergingSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L2c0fd0.  v0:= temp @kind object;
  #L2c0fd2.  call temp:= `iterator`(v0) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c0fd8.  v0:= temp @kind object;
  #L2c0fda.  v1.`kotlin.sequences.MergingSequence$iterator$1.iterator1` @type ^`java.util.Iterator` := v0 @kind object;
  #L2c0fde.  call temp:= `access$getSequence2$p`(v2) @signature `Lkotlin/sequences/MergingSequence;.access$getSequence2$p:(Lkotlin/sequences/MergingSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L2c0fe4.  v2:= temp @kind object;
  #L2c0fe6.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c0fec.  v2:= temp @kind object;
  #L2c0fee.  v1.`kotlin.sequences.MergingSequence$iterator$1.iterator2` @type ^`java.util.Iterator` := v2 @kind object;
  #L2c0ff2.  return @kind void;
}
procedure `java.util.Iterator` `getIterator1`(`kotlin.sequences.MergingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.getIterator1:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0f90.  v0:= v1.`kotlin.sequences.MergingSequence$iterator$1.iterator1` @type ^`java.util.Iterator` @kind object;
  #L2c0f94.  return v0 @kind object;
}
procedure `java.util.Iterator` `getIterator2`(`kotlin.sequences.MergingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.getIterator2:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0fa8.  v0:= v1.`kotlin.sequences.MergingSequence$iterator$1.iterator2` @type ^`java.util.Iterator` @kind object;
  #L2c0fac.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.MergingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c0f18.  v0:= v1.`kotlin.sequences.MergingSequence$iterator$1.iterator1` @type ^`java.util.Iterator` @kind object;
  #L2c0f1c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c0f22.  v0:= temp;
  #L2c0f24.  if v0 == 0 then goto L2c0f3c;
  #L2c0f28.  v0:= v1.`kotlin.sequences.MergingSequence$iterator$1.iterator2` @type ^`java.util.Iterator` @kind object;
  #L2c0f2c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c0f32.  v0:= temp;
  #L2c0f34.  if v0 == 0 then goto L2c0f3c;
  #L2c0f38.  v0:= 1I;
  #L2c0f3a.  goto L2c0f3e;
  #L2c0f3c.  v0:= 0I;
  #L2c0f3e.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.MergingSequence$iterator$1` v3 @kind this) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c0f50.  v0:= v3.`kotlin.sequences.MergingSequence$iterator$1.this$0` @type ^`kotlin.sequences.MergingSequence` @kind object;
  #L2c0f54.  call temp:= `access$getTransform$p`(v0) @signature `Lkotlin/sequences/MergingSequence;.access$getTransform$p:(Lkotlin/sequences/MergingSequence;)Lkotlin/jvm/functions/Function2;` @kind static;
  #L2c0f5a.  v0:= temp @kind object;
  #L2c0f5c.  v1:= v3.`kotlin.sequences.MergingSequence$iterator$1.iterator1` @type ^`java.util.Iterator` @kind object;
  #L2c0f60.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c0f66.  v1:= temp @kind object;
  #L2c0f68.  v2:= v3.`kotlin.sequences.MergingSequence$iterator$1.iterator2` @type ^`java.util.Iterator` @kind object;
  #L2c0f6c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c0f72.  v2:= temp @kind object;
  #L2c0f74.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2c0f7a.  v0:= temp @kind object;
  #L2c0f7c.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.sequences.MergingSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c1004.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2c1008.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2c100c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c1012.  throw v0;
}
