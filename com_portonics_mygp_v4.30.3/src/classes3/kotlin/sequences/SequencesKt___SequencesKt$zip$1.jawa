record `kotlin.sequences.SequencesKt___SequencesKt$zip$1` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
}
global `kotlin.sequences.SequencesKt___SequencesKt$zip$1` `@@kotlin.sequences.SequencesKt___SequencesKt$zip$1.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/sequences/SequencesKt___SequencesKt$zip$1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2c2d5c.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$zip$1`;
  #L2c2d60.  call `<init>`(v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$zip$1;.<init>:()V` @kind direct;
  #L2c2d66.  `@@kotlin.sequences.SequencesKt___SequencesKt$zip$1.INSTANCE` @type ^`kotlin.sequences.SequencesKt___SequencesKt$zip$1` := v0 @kind object;
  #L2c2d6a.  return @kind void;
}
procedure `void` `<init>`(`kotlin.sequences.SequencesKt___SequencesKt$zip$1` v1 @kind this) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$zip$1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2c2d7c.  v0:= 2I;
  #L2c2d7e.  call `<init>`(v1, v0) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L2c2d84.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlin.sequences.SequencesKt___SequencesKt$zip$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$zip$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2c2d24.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$zip$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Lkotlin/Pair;` @kind virtual;
  #L2c2d2a.  v1:= temp @kind object;
  #L2c2d2c.  return v1 @kind object;
}
procedure `kotlin.Pair` `invoke`(`kotlin.sequences.SequencesKt___SequencesKt$zip$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$zip$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Lkotlin/Pair;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c2d40.  call temp:= `to`(v1, v2) @signature `Lkotlin/TuplesKt;.to:(Ljava/lang/Object;Ljava/lang/Object;)Lkotlin/Pair;` @kind static;
  #L2c2d46.  v1:= temp @kind object;
  #L2c2d48.  return v1 @kind object;
}
