record `kotlin.sequences.TakeWhileSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.TakeWhileSequence$iterator$1.iterator` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `kotlin.sequences.TakeWhileSequence$iterator$1.nextItem` @AccessFlag PRIVATE;
  `int` `kotlin.sequences.TakeWhileSequence$iterator$1.nextState` @AccessFlag PRIVATE;
  `kotlin.sequences.TakeWhileSequence` `kotlin.sequences.TakeWhileSequence$iterator$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.TakeWhileSequence$iterator$1` v0 @kind this, `kotlin.sequences.TakeWhileSequence` v1 @kind object) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.<init>:(Lkotlin/sequences/TakeWhileSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c3790.  v0.`kotlin.sequences.TakeWhileSequence$iterator$1.this$0` @type ^`kotlin.sequences.TakeWhileSequence` := v1 @kind object;
  #L2c3794.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c379a.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/TakeWhileSequence;.access$getSequence$p:(Lkotlin/sequences/TakeWhileSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L2c37a0.  v1:= temp @kind object;
  #L2c37a2.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c37a8.  v1:= temp @kind object;
  #L2c37aa.  v0.`kotlin.sequences.TakeWhileSequence$iterator$1.iterator` @type ^`java.util.Iterator` := v1 @kind object;
  #L2c37ae.  v1:= -1I;
  #L2c37b0.  v0.`kotlin.sequences.TakeWhileSequence$iterator$1.nextState` @type ^`int` := v1;
  #L2c37b4.  return @kind void;
}
procedure `void` `calcNext`(`kotlin.sequences.TakeWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.calcNext:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2c37c8.  v0:= v2.`kotlin.sequences.TakeWhileSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c37cc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c37d2.  v0:= temp;
  #L2c37d4.  if v0 == 0 then goto L2c3814;
  #L2c37d8.  v0:= v2.`kotlin.sequences.TakeWhileSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c37dc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c37e2.  v0:= temp @kind object;
  #L2c37e4.  v1:= v2.`kotlin.sequences.TakeWhileSequence$iterator$1.this$0` @type ^`kotlin.sequences.TakeWhileSequence` @kind object;
  #L2c37e8.  call temp:= `access$getPredicate$p`(v1) @signature `Lkotlin/sequences/TakeWhileSequence;.access$getPredicate$p:(Lkotlin/sequences/TakeWhileSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L2c37ee.  v1:= temp @kind object;
  #L2c37f0.  call temp:= `invoke`(v1, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2c37f6.  v1:= temp @kind object;
  #L2c37f8.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L2c37fc.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L2c3802.  v1:= temp;
  #L2c3804.  if v1 == 0 then goto L2c3814;
  #L2c3808.  v1:= 1I;
  #L2c380a.  v2.`kotlin.sequences.TakeWhileSequence$iterator$1.nextState` @type ^`int` := v1;
  #L2c380e.  v2.`kotlin.sequences.TakeWhileSequence$iterator$1.nextItem` @type ^`java.lang.Object` := v0 @kind object;
  #L2c3812.  return @kind void;
  #L2c3814.  v0:= 0I;
  #L2c3816.  v2.`kotlin.sequences.TakeWhileSequence$iterator$1.nextState` @type ^`int` := v0;
  #L2c381a.  return @kind void;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.TakeWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c3778.  v0:= v1.`kotlin.sequences.TakeWhileSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c377c.  return v0 @kind object;
}
procedure `java.lang.Object` `getNextItem`(`kotlin.sequences.TakeWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.getNextItem:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c371c.  v0:= v1.`kotlin.sequences.TakeWhileSequence$iterator$1.nextItem` @type ^`java.lang.Object` @kind object;
  #L2c3720.  return v0 @kind object;
}
procedure `int` `getNextState`(`kotlin.sequences.TakeWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.getNextState:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c3704.  v0:= v1.`kotlin.sequences.TakeWhileSequence$iterator$1.nextState` @type ^`int`;
  #L2c3708.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.sequences.TakeWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c36d4.  v0:= v2.`kotlin.sequences.TakeWhileSequence$iterator$1.nextState` @type ^`int`;
  #L2c36d8.  v1:= -1I;
  #L2c36da.  if v0 != v1 then goto L2c36e4;
  #L2c36de.  call `calcNext`(v2) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.calcNext:()V` @kind direct;
  #L2c36e4.  v0:= v2.`kotlin.sequences.TakeWhileSequence$iterator$1.nextState` @type ^`int`;
  #L2c36e8.  v1:= 1I;
  #L2c36ea.  if v0 != v1 then goto L2c36f0;
  #L2c36ee.  goto L2c36f2;
  #L2c36f0.  v1:= 0I;
  #L2c36f2.  return v1;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.TakeWhileSequence$iterator$1` v3 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c3734.  v0:= v3.`kotlin.sequences.TakeWhileSequence$iterator$1.nextState` @type ^`int`;
  #L2c3738.  v1:= -1I;
  #L2c373a.  if v0 != v1 then goto L2c3744;
  #L2c373e.  call `calcNext`(v3) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.calcNext:()V` @kind direct;
  #L2c3744.  v0:= v3.`kotlin.sequences.TakeWhileSequence$iterator$1.nextState` @type ^`int`;
  #L2c3748.  if v0 == 0 then goto L2c375c;
  #L2c374c.  v0:= v3.`kotlin.sequences.TakeWhileSequence$iterator$1.nextItem` @type ^`java.lang.Object` @kind object;
  #L2c3750.  v2:= 0I;
  #L2c3752.  v3.`kotlin.sequences.TakeWhileSequence$iterator$1.nextItem` @type ^`java.lang.Object` := v2 @kind object;
  #L2c3756.  v3.`kotlin.sequences.TakeWhileSequence$iterator$1.nextState` @type ^`int` := v1;
  #L2c375a.  return v0 @kind object;
  #L2c375c.  v0:= new `java.util.NoSuchElementException`;
  #L2c3760.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2c3766.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.TakeWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c382c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2c3830.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2c3834.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c383a.  throw v0;
}
procedure `void` `setNextItem`(`kotlin.sequences.TakeWhileSequence$iterator$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.setNextItem:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c384c.  v0.`kotlin.sequences.TakeWhileSequence$iterator$1.nextItem` @type ^`java.lang.Object` := v1 @kind object;
  #L2c3850.  return @kind void;
}
procedure `void` `setNextState`(`kotlin.sequences.TakeWhileSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.setNextState:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c3864.  v0.`kotlin.sequences.TakeWhileSequence$iterator$1.nextState` @type ^`int` := v1;
  #L2c3868.  return @kind void;
}
