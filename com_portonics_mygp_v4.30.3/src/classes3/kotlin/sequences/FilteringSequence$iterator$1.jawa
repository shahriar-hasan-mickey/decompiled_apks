record `kotlin.sequences.FilteringSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.FilteringSequence$iterator$1.iterator` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `kotlin.sequences.FilteringSequence$iterator$1.nextItem` @AccessFlag PRIVATE;
  `int` `kotlin.sequences.FilteringSequence$iterator$1.nextState` @AccessFlag PRIVATE;
  `kotlin.sequences.FilteringSequence` `kotlin.sequences.FilteringSequence$iterator$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.FilteringSequence$iterator$1` v0 @kind this, `kotlin.sequences.FilteringSequence` v1 @kind object) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.<init>:(Lkotlin/sequences/FilteringSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c07c0.  v0.`kotlin.sequences.FilteringSequence$iterator$1.this$0` @type ^`kotlin.sequences.FilteringSequence` := v1 @kind object;
  #L2c07c4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c07ca.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/FilteringSequence;.access$getSequence$p:(Lkotlin/sequences/FilteringSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L2c07d0.  v1:= temp @kind object;
  #L2c07d2.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c07d8.  v1:= temp @kind object;
  #L2c07da.  v0.`kotlin.sequences.FilteringSequence$iterator$1.iterator` @type ^`java.util.Iterator` := v1 @kind object;
  #L2c07de.  v1:= -1I;
  #L2c07e0.  v0.`kotlin.sequences.FilteringSequence$iterator$1.nextState` @type ^`int` := v1;
  #L2c07e4.  return @kind void;
}
procedure `void` `calcNext`(`kotlin.sequences.FilteringSequence$iterator$1` v3 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.calcNext:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2c07f8.  v0:= v3.`kotlin.sequences.FilteringSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c07fc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c0802.  v0:= temp;
  #L2c0804.  if v0 == 0 then goto L2c0850;
  #L2c0808.  v0:= v3.`kotlin.sequences.FilteringSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c080c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c0812.  v0:= temp @kind object;
  #L2c0814.  v1:= v3.`kotlin.sequences.FilteringSequence$iterator$1.this$0` @type ^`kotlin.sequences.FilteringSequence` @kind object;
  #L2c0818.  call temp:= `access$getPredicate$p`(v1) @signature `Lkotlin/sequences/FilteringSequence;.access$getPredicate$p:(Lkotlin/sequences/FilteringSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L2c081e.  v1:= temp @kind object;
  #L2c0820.  call temp:= `invoke`(v1, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2c0826.  v1:= temp @kind object;
  #L2c0828.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L2c082c.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L2c0832.  v1:= temp;
  #L2c0834.  v2:= v3.`kotlin.sequences.FilteringSequence$iterator$1.this$0` @type ^`kotlin.sequences.FilteringSequence` @kind object;
  #L2c0838.  call temp:= `access$getSendWhen$p`(v2) @signature `Lkotlin/sequences/FilteringSequence;.access$getSendWhen$p:(Lkotlin/sequences/FilteringSequence;)Z` @kind static;
  #L2c083e.  v2:= temp;
  #L2c0840.  if v1 != v2 then goto L2c07f8;
  #L2c0844.  v3.`kotlin.sequences.FilteringSequence$iterator$1.nextItem` @type ^`java.lang.Object` := v0 @kind object;
  #L2c0848.  v0:= 1I;
  #L2c084a.  v3.`kotlin.sequences.FilteringSequence$iterator$1.nextState` @type ^`int` := v0;
  #L2c084e.  return @kind void;
  #L2c0850.  v0:= 0I;
  #L2c0852.  v3.`kotlin.sequences.FilteringSequence$iterator$1.nextState` @type ^`int` := v0;
  #L2c0856.  return @kind void;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.FilteringSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c07a8.  v0:= v1.`kotlin.sequences.FilteringSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c07ac.  return v0 @kind object;
}
procedure `java.lang.Object` `getNextItem`(`kotlin.sequences.FilteringSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.getNextItem:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c074c.  v0:= v1.`kotlin.sequences.FilteringSequence$iterator$1.nextItem` @type ^`java.lang.Object` @kind object;
  #L2c0750.  return v0 @kind object;
}
procedure `int` `getNextState`(`kotlin.sequences.FilteringSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.getNextState:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0734.  v0:= v1.`kotlin.sequences.FilteringSequence$iterator$1.nextState` @type ^`int`;
  #L2c0738.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.sequences.FilteringSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c0704.  v0:= v2.`kotlin.sequences.FilteringSequence$iterator$1.nextState` @type ^`int`;
  #L2c0708.  v1:= -1I;
  #L2c070a.  if v0 != v1 then goto L2c0714;
  #L2c070e.  call `calcNext`(v2) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.calcNext:()V` @kind direct;
  #L2c0714.  v0:= v2.`kotlin.sequences.FilteringSequence$iterator$1.nextState` @type ^`int`;
  #L2c0718.  v1:= 1I;
  #L2c071a.  if v0 != v1 then goto L2c0720;
  #L2c071e.  goto L2c0722;
  #L2c0720.  v1:= 0I;
  #L2c0722.  return v1;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.FilteringSequence$iterator$1` v3 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c0764.  v0:= v3.`kotlin.sequences.FilteringSequence$iterator$1.nextState` @type ^`int`;
  #L2c0768.  v1:= -1I;
  #L2c076a.  if v0 != v1 then goto L2c0774;
  #L2c076e.  call `calcNext`(v3) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.calcNext:()V` @kind direct;
  #L2c0774.  v0:= v3.`kotlin.sequences.FilteringSequence$iterator$1.nextState` @type ^`int`;
  #L2c0778.  if v0 == 0 then goto L2c078c;
  #L2c077c.  v0:= v3.`kotlin.sequences.FilteringSequence$iterator$1.nextItem` @type ^`java.lang.Object` @kind object;
  #L2c0780.  v2:= 0I;
  #L2c0782.  v3.`kotlin.sequences.FilteringSequence$iterator$1.nextItem` @type ^`java.lang.Object` := v2 @kind object;
  #L2c0786.  v3.`kotlin.sequences.FilteringSequence$iterator$1.nextState` @type ^`int` := v1;
  #L2c078a.  return v0 @kind object;
  #L2c078c.  v0:= new `java.util.NoSuchElementException`;
  #L2c0790.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2c0796.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.FilteringSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c0868.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2c086c.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2c0870.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c0876.  throw v0;
}
procedure `void` `setNextItem`(`kotlin.sequences.FilteringSequence$iterator$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.setNextItem:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c0888.  v0.`kotlin.sequences.FilteringSequence$iterator$1.nextItem` @type ^`java.lang.Object` := v1 @kind object;
  #L2c088c.  return @kind void;
}
procedure `void` `setNextState`(`kotlin.sequences.FilteringSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.setNextState:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c08a0.  v0.`kotlin.sequences.FilteringSequence$iterator$1.nextState` @type ^`int` := v1;
  #L2c08a4.  return @kind void;
}
