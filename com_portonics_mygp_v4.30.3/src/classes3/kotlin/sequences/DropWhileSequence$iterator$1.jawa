record `kotlin.sequences.DropWhileSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int` `kotlin.sequences.DropWhileSequence$iterator$1.dropState` @AccessFlag PRIVATE;
  `java.util.Iterator` `kotlin.sequences.DropWhileSequence$iterator$1.iterator` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `kotlin.sequences.DropWhileSequence$iterator$1.nextItem` @AccessFlag PRIVATE;
  `kotlin.sequences.DropWhileSequence` `kotlin.sequences.DropWhileSequence$iterator$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.DropWhileSequence$iterator$1` v0 @kind this, `kotlin.sequences.DropWhileSequence` v1 @kind object) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.<init>:(Lkotlin/sequences/DropWhileSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c04e0.  v0.`kotlin.sequences.DropWhileSequence$iterator$1.this$0` @type ^`kotlin.sequences.DropWhileSequence` := v1 @kind object;
  #L2c04e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c04ea.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/DropWhileSequence;.access$getSequence$p:(Lkotlin/sequences/DropWhileSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L2c04f0.  v1:= temp @kind object;
  #L2c04f2.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c04f8.  v1:= temp @kind object;
  #L2c04fa.  v0.`kotlin.sequences.DropWhileSequence$iterator$1.iterator` @type ^`java.util.Iterator` := v1 @kind object;
  #L2c04fe.  v1:= -1I;
  #L2c0500.  v0.`kotlin.sequences.DropWhileSequence$iterator$1.dropState` @type ^`int` := v1;
  #L2c0504.  return @kind void;
}
procedure `void` `drop`(`kotlin.sequences.DropWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.drop:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2c0518.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c051c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c0522.  v0:= temp;
  #L2c0524.  if v0 == 0 then goto L2c0564;
  #L2c0528.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c052c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c0532.  v0:= temp @kind object;
  #L2c0534.  v1:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.this$0` @type ^`kotlin.sequences.DropWhileSequence` @kind object;
  #L2c0538.  call temp:= `access$getPredicate$p`(v1) @signature `Lkotlin/sequences/DropWhileSequence;.access$getPredicate$p:(Lkotlin/sequences/DropWhileSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L2c053e.  v1:= temp @kind object;
  #L2c0540.  call temp:= `invoke`(v1, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2c0546.  v1:= temp @kind object;
  #L2c0548.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L2c054c.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L2c0552.  v1:= temp;
  #L2c0554.  if v1 != 0 then goto L2c0518;
  #L2c0558.  v2.`kotlin.sequences.DropWhileSequence$iterator$1.nextItem` @type ^`java.lang.Object` := v0 @kind object;
  #L2c055c.  v0:= 1I;
  #L2c055e.  v2.`kotlin.sequences.DropWhileSequence$iterator$1.dropState` @type ^`int` := v0;
  #L2c0562.  return @kind void;
  #L2c0564.  v0:= 0I;
  #L2c0566.  v2.`kotlin.sequences.DropWhileSequence$iterator$1.dropState` @type ^`int` := v0;
  #L2c056a.  return @kind void;
}
procedure `int` `getDropState`(`kotlin.sequences.DropWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.getDropState:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c044c.  v0:= v1.`kotlin.sequences.DropWhileSequence$iterator$1.dropState` @type ^`int`;
  #L2c0450.  return v0;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.DropWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c04c8.  v0:= v1.`kotlin.sequences.DropWhileSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c04cc.  return v0 @kind object;
}
procedure `java.lang.Object` `getNextItem`(`kotlin.sequences.DropWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.getNextItem:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0464.  v0:= v1.`kotlin.sequences.DropWhileSequence$iterator$1.nextItem` @type ^`java.lang.Object` @kind object;
  #L2c0468.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.DropWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c040c.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.dropState` @type ^`int`;
  #L2c0410.  v1:= -1I;
  #L2c0412.  if v0 != v1 then goto L2c041c;
  #L2c0416.  call `drop`(v2) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.drop:()V` @kind direct;
  #L2c041c.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.dropState` @type ^`int`;
  #L2c0420.  v1:= 1I;
  #L2c0422.  if v0 == v1 then goto L2c043a;
  #L2c0426.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c042a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c0430.  v0:= temp;
  #L2c0432.  if v0 == 0 then goto L2c0438;
  #L2c0436.  goto L2c043a;
  #L2c0438.  v1:= 0I;
  #L2c043a.  return v1;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.DropWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c047c.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.dropState` @type ^`int`;
  #L2c0480.  v1:= -1I;
  #L2c0482.  if v0 != v1 then goto L2c048c;
  #L2c0486.  call `drop`(v2) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.drop:()V` @kind direct;
  #L2c048c.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.dropState` @type ^`int`;
  #L2c0490.  v1:= 1I;
  #L2c0492.  if v0 != v1 then goto L2c04a8;
  #L2c0496.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.nextItem` @type ^`java.lang.Object` @kind object;
  #L2c049a.  v1:= 0I;
  #L2c049c.  v2.`kotlin.sequences.DropWhileSequence$iterator$1.nextItem` @type ^`java.lang.Object` := v1 @kind object;
  #L2c04a0.  v1:= 0I;
  #L2c04a2.  v2.`kotlin.sequences.DropWhileSequence$iterator$1.dropState` @type ^`int` := v1;
  #L2c04a6.  return v0 @kind object;
  #L2c04a8.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c04ac.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c04b2.  v0:= temp @kind object;
  #L2c04b4.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.sequences.DropWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c057c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2c0580.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2c0584.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c058a.  throw v0;
}
procedure `void` `setDropState`(`kotlin.sequences.DropWhileSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.setDropState:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c059c.  v0.`kotlin.sequences.DropWhileSequence$iterator$1.dropState` @type ^`int` := v1;
  #L2c05a0.  return @kind void;
}
procedure `void` `setNextItem`(`kotlin.sequences.DropWhileSequence$iterator$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.setNextItem:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c05b4.  v0.`kotlin.sequences.DropWhileSequence$iterator$1.nextItem` @type ^`java.lang.Object` := v1 @kind object;
  #L2c05b8.  return @kind void;
}
