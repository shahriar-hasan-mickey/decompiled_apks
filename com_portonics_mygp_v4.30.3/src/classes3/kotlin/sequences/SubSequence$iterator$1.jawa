record `kotlin.sequences.SubSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.SubSequence$iterator$1.iterator` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.SubSequence$iterator$1.position` @AccessFlag PRIVATE;
  `kotlin.sequences.SubSequence` `kotlin.sequences.SubSequence$iterator$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.SubSequence$iterator$1` v0 @kind this, `kotlin.sequences.SubSequence` v1 @kind object) @signature `Lkotlin/sequences/SubSequence$iterator$1;.<init>:(Lkotlin/sequences/SubSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c31e4.  v0.`kotlin.sequences.SubSequence$iterator$1.this$0` @type ^`kotlin.sequences.SubSequence` := v1 @kind object;
  #L2c31e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c31ee.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/SubSequence;.access$getSequence$p:(Lkotlin/sequences/SubSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L2c31f4.  v1:= temp @kind object;
  #L2c31f6.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c31fc.  v1:= temp @kind object;
  #L2c31fe.  v0.`kotlin.sequences.SubSequence$iterator$1.iterator` @type ^`java.util.Iterator` := v1 @kind object;
  #L2c3202.  return @kind void;
}
procedure `void` `drop`(`kotlin.sequences.SubSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.drop:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2c3214.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.position` @type ^`int`;
  #L2c3218.  v1:= v2.`kotlin.sequences.SubSequence$iterator$1.this$0` @type ^`kotlin.sequences.SubSequence` @kind object;
  #L2c321c.  call temp:= `access$getStartIndex$p`(v1) @signature `Lkotlin/sequences/SubSequence;.access$getStartIndex$p:(Lkotlin/sequences/SubSequence;)I` @kind static;
  #L2c3222.  v1:= temp;
  #L2c3224.  if v0 >= v1 then goto L2c3250;
  #L2c3228.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c322c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c3232.  v0:= temp;
  #L2c3234.  if v0 == 0 then goto L2c3250;
  #L2c3238.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c323c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c3242.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.position` @type ^`int`;
  #L2c3246.  v0:= v0 + 1;
  #L2c324a.  v2.`kotlin.sequences.SubSequence$iterator$1.position` @type ^`int` := v0;
  #L2c324e.  goto L2c3214;
  #L2c3250.  return @kind void;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.SubSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c31cc.  v0:= v1.`kotlin.sequences.SubSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c31d0.  return v0 @kind object;
}
procedure `int` `getPosition`(`kotlin.sequences.SubSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.getPosition:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c3164.  v0:= v1.`kotlin.sequences.SubSequence$iterator$1.position` @type ^`int`;
  #L2c3168.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.sequences.SubSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c3120.  call `drop`(v2) @signature `Lkotlin/sequences/SubSequence$iterator$1;.drop:()V` @kind direct;
  #L2c3126.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.position` @type ^`int`;
  #L2c312a.  v1:= v2.`kotlin.sequences.SubSequence$iterator$1.this$0` @type ^`kotlin.sequences.SubSequence` @kind object;
  #L2c312e.  call temp:= `access$getEndIndex$p`(v1) @signature `Lkotlin/sequences/SubSequence;.access$getEndIndex$p:(Lkotlin/sequences/SubSequence;)I` @kind static;
  #L2c3134.  v1:= temp;
  #L2c3136.  if v0 >= v1 then goto L2c314e;
  #L2c313a.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c313e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c3144.  v0:= temp;
  #L2c3146.  if v0 == 0 then goto L2c314e;
  #L2c314a.  v0:= 1I;
  #L2c314c.  goto L2c3150;
  #L2c314e.  v0:= 0I;
  #L2c3150.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.SubSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c317c.  call `drop`(v2) @signature `Lkotlin/sequences/SubSequence$iterator$1;.drop:()V` @kind direct;
  #L2c3182.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.position` @type ^`int`;
  #L2c3186.  v1:= v2.`kotlin.sequences.SubSequence$iterator$1.this$0` @type ^`kotlin.sequences.SubSequence` @kind object;
  #L2c318a.  call temp:= `access$getEndIndex$p`(v1) @signature `Lkotlin/sequences/SubSequence;.access$getEndIndex$p:(Lkotlin/sequences/SubSequence;)I` @kind static;
  #L2c3190.  v1:= temp;
  #L2c3192.  if v0 >= v1 then goto L2c31b0;
  #L2c3196.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.position` @type ^`int`;
  #L2c319a.  v0:= v0 + 1;
  #L2c319e.  v2.`kotlin.sequences.SubSequence$iterator$1.position` @type ^`int` := v0;
  #L2c31a2.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c31a6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c31ac.  v0:= temp @kind object;
  #L2c31ae.  return v0 @kind object;
  #L2c31b0.  v0:= new `java.util.NoSuchElementException`;
  #L2c31b4.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2c31ba.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.SubSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c3264.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2c3268.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2c326c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c3272.  throw v0;
}
procedure `void` `setPosition`(`kotlin.sequences.SubSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/SubSequence$iterator$1;.setPosition:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c3284.  v0.`kotlin.sequences.SubSequence$iterator$1.position` @type ^`int` := v1;
  #L2c3288.  return @kind void;
}
