record `kotlin.sequences.TakeSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.TakeSequence$iterator$1.iterator` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.TakeSequence$iterator$1.left` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.sequences.TakeSequence$iterator$1` v1 @kind this, `kotlin.sequences.TakeSequence` v2 @kind object) @signature `Lkotlin/sequences/TakeSequence$iterator$1;.<init>:(Lkotlin/sequences/TakeSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2c3540.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c3546.  call temp:= `access$getCount$p`(v2) @signature `Lkotlin/sequences/TakeSequence;.access$getCount$p:(Lkotlin/sequences/TakeSequence;)I` @kind static;
  #L2c354c.  v0:= temp;
  #L2c354e.  v1.`kotlin.sequences.TakeSequence$iterator$1.left` @type ^`int` := v0;
  #L2c3552.  call temp:= `access$getSequence$p`(v2) @signature `Lkotlin/sequences/TakeSequence;.access$getSequence$p:(Lkotlin/sequences/TakeSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L2c3558.  v2:= temp @kind object;
  #L2c355a.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c3560.  v2:= temp @kind object;
  #L2c3562.  v1.`kotlin.sequences.TakeSequence$iterator$1.iterator` @type ^`java.util.Iterator` := v2 @kind object;
  #L2c3566.  return @kind void;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.TakeSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c3528.  v0:= v1.`kotlin.sequences.TakeSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c352c.  return v0 @kind object;
}
procedure `int` `getLeft`(`kotlin.sequences.TakeSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeSequence$iterator$1;.getLeft:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c34d4.  v0:= v1.`kotlin.sequences.TakeSequence$iterator$1.left` @type ^`int`;
  #L2c34d8.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.sequences.TakeSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c34a4.  v0:= v1.`kotlin.sequences.TakeSequence$iterator$1.left` @type ^`int`;
  #L2c34a8.  if v0 <= 0 then goto L2c34c0;
  #L2c34ac.  v0:= v1.`kotlin.sequences.TakeSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c34b0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2c34b6.  v0:= temp;
  #L2c34b8.  if v0 == 0 then goto L2c34c0;
  #L2c34bc.  v0:= 1I;
  #L2c34be.  goto L2c34c2;
  #L2c34c0.  v0:= 0I;
  #L2c34c2.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.TakeSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c34ec.  v0:= v1.`kotlin.sequences.TakeSequence$iterator$1.left` @type ^`int`;
  #L2c34f0.  if v0 == 0 then goto L2c350a;
  #L2c34f4.  v0:= v0 + -1;
  #L2c34f8.  v1.`kotlin.sequences.TakeSequence$iterator$1.left` @type ^`int` := v0;
  #L2c34fc.  v0:= v1.`kotlin.sequences.TakeSequence$iterator$1.iterator` @type ^`java.util.Iterator` @kind object;
  #L2c3500.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2c3506.  v0:= temp @kind object;
  #L2c3508.  return v0 @kind object;
  #L2c350a.  v0:= new `java.util.NoSuchElementException`;
  #L2c350e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2c3514.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.TakeSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/TakeSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c3578.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2c357c.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2c3580.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c3586.  throw v0;
}
procedure `void` `setLeft`(`kotlin.sequences.TakeSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/TakeSequence$iterator$1;.setLeft:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c3598.  v0.`kotlin.sequences.TakeSequence$iterator$1.left` @type ^`int` := v1;
  #L2c359c.  return @kind void;
}
