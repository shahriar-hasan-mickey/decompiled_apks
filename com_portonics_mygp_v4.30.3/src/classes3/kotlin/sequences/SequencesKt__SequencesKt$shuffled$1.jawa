record `kotlin.sequences.SequencesKt__SequencesKt$shuffled$1` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.RestrictedSuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `kotlin.random.Random` `kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.$random` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.sequences.Sequence` `kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.$this_shuffled` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.L$0` @AccessFlag PRIVATE_SYNTHETIC;
  `java.lang.Object` `kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.L$1` @AccessFlag ;
  `int` `kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.label` @AccessFlag ;
}
procedure `void` `<init>`(`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1` v0 @kind this, `kotlin.sequences.Sequence` v1 @kind object, `kotlin.random.Random` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt$shuffled$1;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/random/Random;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c1b1c.  v0.`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.$this_shuffled` @type ^`kotlin.sequences.Sequence` := v1 @kind object;
  #L2c1b20.  v0.`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.$random` @type ^`kotlin.random.Random` := v2 @kind object;
  #L2c1b24.  v1:= 2I;
  #L2c1b26.  call `<init>`(v0, v1, v3) @signature `Lkotlin/coroutines/jvm/internal/RestrictedSuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L2c1b2c.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt$shuffled$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2c1af4.  v0:= new `kotlin.sequences.SequencesKt__SequencesKt$shuffled$1`;
  #L2c1af8.  v1:= v3.`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.$this_shuffled` @type ^`kotlin.sequences.Sequence` @kind object;
  #L2c1afc.  v2:= v3.`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.$random` @type ^`kotlin.random.Random` @kind object;
  #L2c1b00.  call `<init>`(v0, v1, v2, v5) @signature `Lkotlin/sequences/SequencesKt__SequencesKt$shuffled$1;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/random/Random;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L2c1b06.  v0.`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.L$0` @type ^`java.lang.Object` := v4 @kind object;
  #L2c1b0a.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt$shuffled$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2c19d8.  v1:= (`kotlin.sequences.SequenceScope`) v1 @kind object;
  #L2c19dc.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L2c19e0.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt__SequencesKt$shuffled$1;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2c19e6.  v1:= temp @kind object;
  #L2c19e8.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1` v0 @kind this, `kotlin.sequences.SequenceScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt$shuffled$1;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c19fc.  call temp:= `create`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt__SequencesKt$shuffled$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2c1a02.  v1:= temp @kind object;
  #L2c1a04.  v1:= (`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1`) v1 @kind object;
  #L2c1a08.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2c1a0c.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlin/sequences/SequencesKt__SequencesKt$shuffled$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2c1a12.  v1:= temp @kind object;
  #L2c1a14.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt$shuffled$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2c1a28.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2c1a2e.  v0:= temp @kind object;
  #L2c1a30.  v1:= v7.`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.label` @type ^`int`;
  #L2c1a34.  v2:= 1I;
  #L2c1a36.  if v1 == 0 then goto L2c1a66;
  #L2c1a3a.  if v1 != v2 then goto L2c1a56;
  #L2c1a3e.  v1:= v7.`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.L$1` @type ^`java.lang.Object` @kind object;
  #L2c1a42.  v1:= (`java.util.List`) v1 @kind object;
  #L2c1a46.  v3:= v7.`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2c1a4a.  v3:= (`kotlin.sequences.SequenceScope`) v3 @kind object;
  #L2c1a4e.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2c1a54.  goto L2c1a82;
  #L2c1a56.  v8:= new `java.lang.IllegalStateException`;
  #L2c1a5a.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2c1a5e.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c1a64.  throw v8;
  #L2c1a66.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2c1a6c.  v8:= v7.`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2c1a70.  v8:= (`kotlin.sequences.SequenceScope`) v8 @kind object;
  #L2c1a74.  v1:= v7.`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.$this_shuffled` @type ^`kotlin.sequences.Sequence` @kind object;
  #L2c1a78.  call temp:= `toMutableList`(v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toMutableList:(Lkotlin/sequences/Sequence;)Ljava/util/List;` @kind static;
  #L2c1a7e.  v1:= temp @kind object;
  #L2c1a80.  v3:= v8 @kind object;
  #L2c1a82.  v8:= v7 @kind object;
  #L2c1a84.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L2c1a8a.  v4:= temp;
  #L2c1a8c.  v4:= v4 ^~ v2 @kind int;
  #L2c1a8e.  if v4 == 0 then goto L2c1adc;
  #L2c1a92.  v4:= v8.`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.$random` @type ^`kotlin.random.Random` @kind object;
  #L2c1a96.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2c1a9c.  v5:= temp;
  #L2c1a9e.  call temp:= `nextInt`(v4, v5) @signature `Lkotlin/random/Random;.nextInt:(I)I` @kind virtual;
  #L2c1aa4.  v4:= temp;
  #L2c1aa6.  call temp:= `removeLast`(v1) @signature `Lkotlin/collections/CollectionsKt;.removeLast:(Ljava/util/List;)Ljava/lang/Object;` @kind static;
  #L2c1aac.  v5:= temp @kind object;
  #L2c1aae.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2c1ab4.  v6:= temp;
  #L2c1ab6.  if v4 >= v6 then goto L2c1ac2;
  #L2c1aba.  call temp:= `set`(v1, v4, v5) @signature `Ljava/util/List;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2c1ac0.  v5:= temp @kind object;
  #L2c1ac2.  v8.`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.L$0` @type ^`java.lang.Object` := v3 @kind object;
  #L2c1ac6.  v8.`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.L$1` @type ^`java.lang.Object` := v1 @kind object;
  #L2c1aca.  v8.`kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.label` @type ^`int` := v2;
  #L2c1ace.  call temp:= `yield`(v3, v5, v8) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2c1ad4.  v4:= temp @kind object;
  #L2c1ad6.  if v4 != v0 then goto L2c1a84;
  #L2c1ada.  return v0 @kind object;
  #L2c1adc.  v8:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2c1ae0.  return v8 @kind object;
}
