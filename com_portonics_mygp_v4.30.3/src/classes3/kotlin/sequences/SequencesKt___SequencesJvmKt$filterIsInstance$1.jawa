record `kotlin.sequences.SequencesKt___SequencesJvmKt$filterIsInstance$1` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function1` @kind interface {
  `java.lang.Class` `kotlin.sequences.SequencesKt___SequencesJvmKt$filterIsInstance$1.$klass` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.SequencesKt___SequencesJvmKt$filterIsInstance$1` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesJvmKt$filterIsInstance$1;.<init>:(Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c1b84.  v0.`kotlin.sequences.SequencesKt___SequencesJvmKt$filterIsInstance$1.$klass` @type ^`java.lang.Class` := v1 @kind object;
  #L2c1b88.  v1:= 1I;
  #L2c1b8a.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L2c1b90.  return @kind void;
}
procedure `java.lang.Boolean` `invoke`(`kotlin.sequences.SequencesKt___SequencesJvmKt$filterIsInstance$1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesJvmKt$filterIsInstance$1;.invoke:(Ljava/lang/Object;)Ljava/lang/Boolean;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c1b40.  v0:= v1.`kotlin.sequences.SequencesKt___SequencesJvmKt$filterIsInstance$1.$klass` @type ^`java.lang.Class` @kind object;
  #L2c1b44.  call temp:= `isInstance`(v0, v2) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L2c1b4a.  v2:= temp;
  #L2c1b4c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L2c1b52.  v2:= temp @kind object;
  #L2c1b54.  return v2 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.sequences.SequencesKt___SequencesJvmKt$filterIsInstance$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesJvmKt$filterIsInstance$1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2c1b68.  call temp:= `invoke`(v0, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesJvmKt$filterIsInstance$1;.invoke:(Ljava/lang/Object;)Ljava/lang/Boolean;` @kind virtual;
  #L2c1b6e.  v1:= temp @kind object;
  #L2c1b70.  return v1 @kind object;
}
