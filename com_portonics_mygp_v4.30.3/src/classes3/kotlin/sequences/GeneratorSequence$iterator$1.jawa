record `kotlin.sequences.GeneratorSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.lang.Object` `kotlin.sequences.GeneratorSequence$iterator$1.nextItem` @AccessFlag PRIVATE;
  `int` `kotlin.sequences.GeneratorSequence$iterator$1.nextState` @AccessFlag PRIVATE;
  `kotlin.sequences.GeneratorSequence` `kotlin.sequences.GeneratorSequence$iterator$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.GeneratorSequence$iterator$1` v0 @kind this, `kotlin.sequences.GeneratorSequence` v1 @kind object) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.<init>:(Lkotlin/sequences/GeneratorSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c0c54.  v0.`kotlin.sequences.GeneratorSequence$iterator$1.this$0` @type ^`kotlin.sequences.GeneratorSequence` := v1 @kind object;
  #L2c0c58.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c0c5e.  v1:= -2I;
  #L2c0c60.  v0.`kotlin.sequences.GeneratorSequence$iterator$1.nextState` @type ^`int` := v1;
  #L2c0c64.  return @kind void;
}
procedure `void` `calcNext`(`kotlin.sequences.GeneratorSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.calcNext:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2c0c78.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.nextState` @type ^`int`;
  #L2c0c7c.  v1:= -2I;
  #L2c0c7e.  if v0 != v1 then goto L2c0c98;
  #L2c0c82.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.this$0` @type ^`kotlin.sequences.GeneratorSequence` @kind object;
  #L2c0c86.  call temp:= `access$getGetInitialValue$p`(v0) @signature `Lkotlin/sequences/GeneratorSequence;.access$getGetInitialValue$p:(Lkotlin/sequences/GeneratorSequence;)Lkotlin/jvm/functions/Function0;` @kind static;
  #L2c0c8c.  v0:= temp @kind object;
  #L2c0c8e.  call temp:= `invoke`(v0) @signature `Lkotlin/jvm/functions/Function0;.invoke:()Ljava/lang/Object;` @kind interface;
  #L2c0c94.  v0:= temp @kind object;
  #L2c0c96.  goto L2c0cb6;
  #L2c0c98.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.this$0` @type ^`kotlin.sequences.GeneratorSequence` @kind object;
  #L2c0c9c.  call temp:= `access$getGetNextValue$p`(v0) @signature `Lkotlin/sequences/GeneratorSequence;.access$getGetNextValue$p:(Lkotlin/sequences/GeneratorSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L2c0ca2.  v0:= temp @kind object;
  #L2c0ca4.  v1:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.nextItem` @type ^`java.lang.Object` @kind object;
  #L2c0ca8.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2c0cae.  call temp:= `invoke`(v0, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2c0cb4.  v0:= temp @kind object;
  #L2c0cb6.  v2.`kotlin.sequences.GeneratorSequence$iterator$1.nextItem` @type ^`java.lang.Object` := v0 @kind object;
  #L2c0cba.  if v0 != 0 then goto L2c0cc2;
  #L2c0cbe.  v0:= 0I;
  #L2c0cc0.  goto L2c0cc4;
  #L2c0cc2.  v0:= 1I;
  #L2c0cc4.  v2.`kotlin.sequences.GeneratorSequence$iterator$1.nextState` @type ^`int` := v0;
  #L2c0cc8.  return @kind void;
}
procedure `java.lang.Object` `getNextItem`(`kotlin.sequences.GeneratorSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.getNextItem:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0bf4.  v0:= v1.`kotlin.sequences.GeneratorSequence$iterator$1.nextItem` @type ^`java.lang.Object` @kind object;
  #L2c0bf8.  return v0 @kind object;
}
procedure `int` `getNextState`(`kotlin.sequences.GeneratorSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.getNextState:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c0bdc.  v0:= v1.`kotlin.sequences.GeneratorSequence$iterator$1.nextState` @type ^`int`;
  #L2c0be0.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.sequences.GeneratorSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c0bac.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.nextState` @type ^`int`;
  #L2c0bb0.  if v0 >= 0 then goto L2c0bba;
  #L2c0bb4.  call `calcNext`(v2) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.calcNext:()V` @kind direct;
  #L2c0bba.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.nextState` @type ^`int`;
  #L2c0bbe.  v1:= 1I;
  #L2c0bc0.  if v0 != v1 then goto L2c0bc6;
  #L2c0bc4.  goto L2c0bc8;
  #L2c0bc6.  v1:= 0I;
  #L2c0bc8.  return v1;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.GeneratorSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c0c0c.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.nextState` @type ^`int`;
  #L2c0c10.  if v0 >= 0 then goto L2c0c1a;
  #L2c0c14.  call `calcNext`(v2) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.calcNext:()V` @kind direct;
  #L2c0c1a.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.nextState` @type ^`int`;
  #L2c0c1e.  if v0 == 0 then goto L2c0c38;
  #L2c0c22.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.nextItem` @type ^`java.lang.Object` @kind object;
  #L2c0c26.  v1:= "null cannot be cast to non-null type T of kotlin.sequences.GeneratorSequence" @kind object;
  #L2c0c2a.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2c0c30.  v1:= -1I;
  #L2c0c32.  v2.`kotlin.sequences.GeneratorSequence$iterator$1.nextState` @type ^`int` := v1;
  #L2c0c36.  return v0 @kind object;
  #L2c0c38.  v0:= new `java.util.NoSuchElementException`;
  #L2c0c3c.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2c0c42.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.GeneratorSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c0cdc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2c0ce0.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2c0ce4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c0cea.  throw v0;
}
procedure `void` `setNextItem`(`kotlin.sequences.GeneratorSequence$iterator$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.setNextItem:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c0cfc.  v0.`kotlin.sequences.GeneratorSequence$iterator$1.nextItem` @type ^`java.lang.Object` := v1 @kind object;
  #L2c0d00.  return @kind void;
}
procedure `void` `setNextState`(`kotlin.sequences.GeneratorSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.setNextState:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c0d14.  v0.`kotlin.sequences.GeneratorSequence$iterator$1.nextState` @type ^`int` := v1;
  #L2c0d18.  return @kind void;
}
