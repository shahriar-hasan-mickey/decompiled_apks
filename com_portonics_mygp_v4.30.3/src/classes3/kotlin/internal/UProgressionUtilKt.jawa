record `kotlin.internal.UProgressionUtilKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `differenceModulo-WZ9TVnA`(`int` v1 , `int` v2 , `int` v3 ) @signature `Lkotlin/internal/UProgressionUtilKt;.differenceModulo-WZ9TVnA:(III)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;

  #L2afe94.  call temp:= `uintRemainder-J1ME1BU`(v1, v3) @signature `Lkotlin/UnsignedKt;.uintRemainder-J1ME1BU:(II)I` @kind static;
  #L2afe9a.  v1:= temp;
  #L2afe9c.  call temp:= `uintRemainder-J1ME1BU`(v2, v3) @signature `Lkotlin/UnsignedKt;.uintRemainder-J1ME1BU:(II)I` @kind static;
  #L2afea2.  v2:= temp;
  #L2afea4.  call temp:= `uintCompare`(v1, v2) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @kind static;
  #L2afeaa.  v0:= temp;
  #L2afeac.  v1:= v1 - v2 @kind int;
  #L2afeae.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L2afeb4.  v1:= temp;
  #L2afeb6.  if v0 < 0 then goto L2afebc;
  #L2afeba.  goto L2afec6;
  #L2afebc.  v1:= v1 + v3 @kind int;
  #L2afebe.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L2afec4.  v1:= temp;
  #L2afec6.  return v1;
}
procedure `long` `differenceModulo-sambcqE`(`long` v1 , `long` v3 , `long` v5 ) @signature `Lkotlin/internal/UProgressionUtilKt;.differenceModulo-sambcqE:(JJJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;

  #L2aff58.  call temp:= `ulongRemainder-eb3DHEI`(v1, v5) @signature `Lkotlin/UnsignedKt;.ulongRemainder-eb3DHEI:(JJ)J` @kind static;
  #L2aff5e.  v1:= temp @kind wide;
  #L2aff60.  call temp:= `ulongRemainder-eb3DHEI`(v3, v5) @signature `Lkotlin/UnsignedKt;.ulongRemainder-eb3DHEI:(JJ)J` @kind static;
  #L2aff66.  v3:= temp @kind wide;
  #L2aff68.  call temp:= `ulongCompare`(v1, v3) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L2aff6e.  v0:= temp;
  #L2aff70.  v1:= v1 - v3 @kind long;
  #L2aff72.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L2aff78.  v1:= temp @kind wide;
  #L2aff7a.  if v0 < 0 then goto L2aff80;
  #L2aff7e.  goto L2aff8a;
  #L2aff80.  v1:= v1 + v5 @kind long;
  #L2aff82.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L2aff88.  v1:= temp @kind wide;
  #L2aff8a.  return v1 @kind wide;
}
procedure `long` `getProgressionLastElement-7ftBX0g`(`long` v7 , `long` v9 , `long` v11 ) @signature `Lkotlin/internal/UProgressionUtilKt;.getProgressionLastElement-7ftBX0g:(JJJ)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2aff9c.  v0:= 0L;
  #L2affa0.  v2:= lcmp(v11, v0);
  #L2affa4.  if v2 <= 0 then goto L2affd6;
  #L2affa8.  call temp:= `ulongCompare`(v7, v9) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L2affae.  v0:= temp;
  #L2affb0.  if v0 < 0 then goto L2affb6;
  #L2affb4.  goto L2b000c;
  #L2affb6.  call temp:= `constructor-impl`(v11) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L2affbc.  v5:= temp @kind wide;
  #L2affbe.  v1:= v9 @kind wide;
  #L2affc0.  v3:= v7 @kind wide;
  #L2affc2.  call temp:= `differenceModulo-sambcqE`(v1, v3, v5) @signature `Lkotlin/internal/UProgressionUtilKt;.differenceModulo-sambcqE:(JJJ)J` @kind static;
  #L2affc8.  v7:= temp @kind wide;
  #L2affca.  v9:= v9 - v7 @kind long;
  #L2affcc.  call temp:= `constructor-impl`(v9) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L2affd2.  v9:= temp @kind wide;
  #L2affd4.  goto L2b000c;
  #L2affd6.  v2:= lcmp(v11, v0);
  #L2affda.  if v2 >= 0 then goto L2b000e;
  #L2affde.  call temp:= `ulongCompare`(v7, v9) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L2affe4.  v0:= temp;
  #L2affe6.  if v0 > 0 then goto L2affec;
  #L2affea.  goto L2b000c;
  #L2affec.  v11:= -v11 @kind long;
  #L2affee.  call temp:= `constructor-impl`(v11) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L2afff4.  v4:= temp @kind wide;
  #L2afff6.  v0:= v7 @kind wide;
  #L2afff8.  v2:= v9 @kind wide;
  #L2afffa.  call temp:= `differenceModulo-sambcqE`(v0, v2, v4) @signature `Lkotlin/internal/UProgressionUtilKt;.differenceModulo-sambcqE:(JJJ)J` @kind static;
  #L2b0000.  v7:= temp @kind wide;
  #L2b0002.  v9:= v9 + v7 @kind long;
  #L2b0004.  call temp:= `constructor-impl`(v9) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L2b000a.  v9:= temp @kind wide;
  #L2b000c.  return v9 @kind wide;
  #L2b000e.  v7:= new `java.lang.IllegalArgumentException`;
  #L2b0012.  v8:= "Step is zero." @kind object;
  #L2b0016.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b001c.  throw v7;
}
procedure `int` `getProgressionLastElement-Nkh28Cs`(`int` v1 , `int` v2 , `int` v3 ) @signature `Lkotlin/internal/UProgressionUtilKt;.getProgressionLastElement-Nkh28Cs:(III)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2afed8.  if v3 <= 0 then goto L2aff06;
  #L2afedc.  call temp:= `uintCompare`(v1, v2) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @kind static;
  #L2afee2.  v0:= temp;
  #L2afee4.  if v0 < 0 then goto L2afeea;
  #L2afee8.  goto L2aff34;
  #L2afeea.  call temp:= `constructor-impl`(v3) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L2afef0.  v3:= temp;
  #L2afef2.  call temp:= `differenceModulo-WZ9TVnA`(v2, v1, v3) @signature `Lkotlin/internal/UProgressionUtilKt;.differenceModulo-WZ9TVnA:(III)I` @kind static;
  #L2afef8.  v1:= temp;
  #L2afefa.  v2:= v2 - v1 @kind int;
  #L2afefc.  call temp:= `constructor-impl`(v2) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L2aff02.  v2:= temp;
  #L2aff04.  goto L2aff34;
  #L2aff06.  if v3 >= 0 then goto L2aff36;
  #L2aff0a.  call temp:= `uintCompare`(v1, v2) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @kind static;
  #L2aff10.  v0:= temp;
  #L2aff12.  if v0 > 0 then goto L2aff18;
  #L2aff16.  goto L2aff34;
  #L2aff18.  v3:= -v3 @kind int;
  #L2aff1a.  call temp:= `constructor-impl`(v3) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L2aff20.  v3:= temp;
  #L2aff22.  call temp:= `differenceModulo-WZ9TVnA`(v1, v2, v3) @signature `Lkotlin/internal/UProgressionUtilKt;.differenceModulo-WZ9TVnA:(III)I` @kind static;
  #L2aff28.  v1:= temp;
  #L2aff2a.  v2:= v2 + v1 @kind int;
  #L2aff2c.  call temp:= `constructor-impl`(v2) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L2aff32.  v2:= temp;
  #L2aff34.  return v2;
  #L2aff36.  v1:= new `java.lang.IllegalArgumentException`;
  #L2aff3a.  v2:= "Step is zero." @kind object;
  #L2aff3e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2aff44.  throw v1;
}
