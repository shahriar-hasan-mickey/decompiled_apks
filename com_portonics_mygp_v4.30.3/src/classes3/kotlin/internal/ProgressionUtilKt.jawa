record `kotlin.internal.ProgressionUtilKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `differenceModulo`(`int` v0 , `int` v1 , `int` v2 ) @signature `Lkotlin/internal/ProgressionUtilKt;.differenceModulo:(III)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2afd40.  call temp:= `mod`(v0, v2) @signature `Lkotlin/internal/ProgressionUtilKt;.mod:(II)I` @kind static;
  #L2afd46.  v0:= temp;
  #L2afd48.  call temp:= `mod`(v1, v2) @signature `Lkotlin/internal/ProgressionUtilKt;.mod:(II)I` @kind static;
  #L2afd4e.  v1:= temp;
  #L2afd50.  v0:= v0 - v1 @kind int;
  #L2afd52.  call temp:= `mod`(v0, v2) @signature `Lkotlin/internal/ProgressionUtilKt;.mod:(II)I` @kind static;
  #L2afd58.  v0:= temp;
  #L2afd5a.  return v0;
}
procedure `long` `differenceModulo`(`long` v0 , `long` v2 , `long` v4 ) @signature `Lkotlin/internal/ProgressionUtilKt;.differenceModulo:(JJJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2afdd8.  call temp:= `mod`(v0, v4) @signature `Lkotlin/internal/ProgressionUtilKt;.mod:(JJ)J` @kind static;
  #L2afdde.  v0:= temp @kind wide;
  #L2afde0.  call temp:= `mod`(v2, v4) @signature `Lkotlin/internal/ProgressionUtilKt;.mod:(JJ)J` @kind static;
  #L2afde6.  v2:= temp @kind wide;
  #L2afde8.  v0:= v0 - v2 @kind long;
  #L2afdea.  call temp:= `mod`(v0, v4) @signature `Lkotlin/internal/ProgressionUtilKt;.mod:(JJ)J` @kind static;
  #L2afdf0.  v0:= temp @kind wide;
  #L2afdf2.  return v0 @kind wide;
}
procedure `int` `getProgressionLastElement`(`int` v0 , `int` v1 , `int` v2 ) @signature `Lkotlin/internal/ProgressionUtilKt;.getProgressionLastElement:(III)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L2afd6c.  if v2 <= 0 then goto L2afd82;
  #L2afd70.  if v0 < v1 then goto L2afd76;
  #L2afd74.  goto L2afd98;
  #L2afd76.  call temp:= `differenceModulo`(v1, v0, v2) @signature `Lkotlin/internal/ProgressionUtilKt;.differenceModulo:(III)I` @kind static;
  #L2afd7c.  v0:= temp;
  #L2afd7e.  v1:= v1 - v0 @kind int;
  #L2afd80.  goto L2afd98;
  #L2afd82.  if v2 >= 0 then goto L2afd9a;
  #L2afd86.  if v0 > v1 then goto L2afd8c;
  #L2afd8a.  goto L2afd98;
  #L2afd8c.  v2:= -v2 @kind int;
  #L2afd8e.  call temp:= `differenceModulo`(v0, v1, v2) @signature `Lkotlin/internal/ProgressionUtilKt;.differenceModulo:(III)I` @kind static;
  #L2afd94.  v0:= temp;
  #L2afd96.  v1:= v1 + v0 @kind int;
  #L2afd98.  return v1;
  #L2afd9a.  v0:= new `java.lang.IllegalArgumentException`;
  #L2afd9e.  v1:= "Step is zero." @kind object;
  #L2afda2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2afda8.  throw v0;
}
procedure `long` `getProgressionLastElement`(`long` v7 , `long` v9 , `long` v11 ) @signature `Lkotlin/internal/ProgressionUtilKt;.getProgressionLastElement:(JJJ)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2afe04.  v0:= 0L;
  #L2afe08.  v2:= lcmp(v11, v0);
  #L2afe0c.  if v2 <= 0 then goto L2afe2c;
  #L2afe10.  v0:= lcmp(v7, v9);
  #L2afe14.  if v0 < 0 then goto L2afe1a;
  #L2afe18.  goto L2afe4e;
  #L2afe1a.  v0:= v9 @kind wide;
  #L2afe1c.  v2:= v7 @kind wide;
  #L2afe1e.  v4:= v11 @kind wide;
  #L2afe20.  call temp:= `differenceModulo`(v0, v2, v4) @signature `Lkotlin/internal/ProgressionUtilKt;.differenceModulo:(JJJ)J` @kind static;
  #L2afe26.  v7:= temp @kind wide;
  #L2afe28.  v9:= v9 - v7 @kind long;
  #L2afe2a.  goto L2afe4e;
  #L2afe2c.  v2:= lcmp(v11, v0);
  #L2afe30.  if v2 >= 0 then goto L2afe50;
  #L2afe34.  v0:= lcmp(v7, v9);
  #L2afe38.  if v0 > 0 then goto L2afe3e;
  #L2afe3c.  goto L2afe4e;
  #L2afe3e.  v5:= -v11 @kind long;
  #L2afe40.  v1:= v7 @kind wide;
  #L2afe42.  v3:= v9 @kind wide;
  #L2afe44.  call temp:= `differenceModulo`(v1, v3, v5) @signature `Lkotlin/internal/ProgressionUtilKt;.differenceModulo:(JJJ)J` @kind static;
  #L2afe4a.  v7:= temp @kind wide;
  #L2afe4c.  v9:= v9 + v7 @kind long;
  #L2afe4e.  return v9 @kind wide;
  #L2afe50.  v7:= new `java.lang.IllegalArgumentException`;
  #L2afe54.  v8:= "Step is zero." @kind object;
  #L2afe58.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2afe5e.  throw v7;
}
procedure `int` `mod`(`int` v0 , `int` v1 ) @signature `Lkotlin/internal/ProgressionUtilKt;.mod:(II)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2afdbc.  v0:= v0 %% v1 @kind int;
  #L2afdbe.  if v0 < 0 then goto L2afdc4;
  #L2afdc2.  goto L2afdc6;
  #L2afdc4.  v0:= v0 + v1 @kind int;
  #L2afdc6.  return v0;
}
procedure `long` `mod`(`long` v3 , `long` v5 ) @signature `Lkotlin/internal/ProgressionUtilKt;.mod:(JJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2afe70.  v3:= v3 %% v5 @kind long;
  #L2afe72.  v0:= 0L;
  #L2afe76.  v2:= lcmp(v3, v0);
  #L2afe7a.  if v2 < 0 then goto L2afe80;
  #L2afe7e.  goto L2afe82;
  #L2afe80.  v3:= v3 + v5 @kind long;
  #L2afe82.  return v3 @kind wide;
}
