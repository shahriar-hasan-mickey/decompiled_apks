record `kotlin.random.KotlinRandom` @kind class @AccessFlag FINAL extends `java.util.Random` @kind class {
  `kotlin.random.Random` `kotlin.random.KotlinRandom.impl` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.random.KotlinRandom.seedInitialized` @AccessFlag PRIVATE;
}
global `kotlin.random.KotlinRandom$Companion` `@@kotlin.random.KotlinRandom.Companion` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@kotlin.random.KotlinRandom.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/random/KotlinRandom;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2b9b0c.  v0:= new `kotlin.random.KotlinRandom$Companion`;
  #L2b9b10.  v1:= 0I;
  #L2b9b12.  call `<init>`(v0, v1) @signature `Lkotlin/random/KotlinRandom$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2b9b18.  `@@kotlin.random.KotlinRandom.Companion` @type ^`kotlin.random.KotlinRandom$Companion` := v0 @kind object;
  #L2b9b1c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.random.KotlinRandom` v1 @kind this, `kotlin.random.Random` v2 @kind object) @signature `Lkotlin/random/KotlinRandom;.<init>:(Lkotlin/random/Random;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2b9b30.  v0:= "impl" @kind object;
  #L2b9b34.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b9b3a.  call `<init>`(v1) @signature `Ljava/util/Random;.<init>:()V` @kind direct;
  #L2b9b40.  v1.`kotlin.random.KotlinRandom.impl` @type ^`kotlin.random.Random` := v2 @kind object;
  #L2b9b44.  return @kind void;
}
procedure `kotlin.random.Random` `getImpl`(`kotlin.random.KotlinRandom` v1 @kind this) @signature `Lkotlin/random/KotlinRandom;.getImpl:()Lkotlin/random/Random;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2b9ad4.  v0:= v1.`kotlin.random.KotlinRandom.impl` @type ^`kotlin.random.Random` @kind object;
  #L2b9ad8.  return v0 @kind object;
}
procedure `int` `next`(`kotlin.random.KotlinRandom` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/KotlinRandom;.next:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2b9a74.  v0:= v1.`kotlin.random.KotlinRandom.impl` @type ^`kotlin.random.Random` @kind object;
  #L2b9a78.  call temp:= `nextBits`(v0, v2) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L2b9a7e.  v2:= temp;
  #L2b9a80.  return v2;
}
procedure `boolean` `nextBoolean`(`kotlin.random.KotlinRandom` v1 @kind this) @signature `Lkotlin/random/KotlinRandom;.nextBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b9a14.  v0:= v1.`kotlin.random.KotlinRandom.impl` @type ^`kotlin.random.Random` @kind object;
  #L2b9a18.  call temp:= `nextBoolean`(v0) @signature `Lkotlin/random/Random;.nextBoolean:()Z` @kind virtual;
  #L2b9a1e.  v0:= temp;
  #L2b9a20.  return v0;
}
procedure `void` `nextBytes`(`kotlin.random.KotlinRandom` v1 @kind this, `byte`[] v2 @kind object) @signature `Lkotlin/random/KotlinRandom;.nextBytes:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b9b58.  v0:= "bytes" @kind object;
  #L2b9b5c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b9b62.  v0:= v1.`kotlin.random.KotlinRandom.impl` @type ^`kotlin.random.Random` @kind object;
  #L2b9b66.  call temp:= `nextBytes`(v0, v2) @signature `Lkotlin/random/Random;.nextBytes:([B)[B` @kind virtual;
  #L2b9b6c.  return @kind void;
}
procedure `double` `nextDouble`(`kotlin.random.KotlinRandom` v2 @kind this) @signature `Lkotlin/random/KotlinRandom;.nextDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b9a34.  v0:= v2.`kotlin.random.KotlinRandom.impl` @type ^`kotlin.random.Random` @kind object;
  #L2b9a38.  call temp:= `nextDouble`(v0) @signature `Lkotlin/random/Random;.nextDouble:()D` @kind virtual;
  #L2b9a3e.  v0:= temp @kind wide;
  #L2b9a40.  return v0 @kind wide;
}
procedure `float` `nextFloat`(`kotlin.random.KotlinRandom` v1 @kind this) @signature `Lkotlin/random/KotlinRandom;.nextFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b9a54.  v0:= v1.`kotlin.random.KotlinRandom.impl` @type ^`kotlin.random.Random` @kind object;
  #L2b9a58.  call temp:= `nextFloat`(v0) @signature `Lkotlin/random/Random;.nextFloat:()F` @kind virtual;
  #L2b9a5e.  v0:= temp;
  #L2b9a60.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.KotlinRandom` v1 @kind this) @signature `Lkotlin/random/KotlinRandom;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b9a94.  v0:= v1.`kotlin.random.KotlinRandom.impl` @type ^`kotlin.random.Random` @kind object;
  #L2b9a98.  call temp:= `nextInt`(v0) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L2b9a9e.  v0:= temp;
  #L2b9aa0.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.KotlinRandom` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/KotlinRandom;.nextInt:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b9ab4.  v0:= v1.`kotlin.random.KotlinRandom.impl` @type ^`kotlin.random.Random` @kind object;
  #L2b9ab8.  call temp:= `nextInt`(v0, v2) @signature `Lkotlin/random/Random;.nextInt:(I)I` @kind virtual;
  #L2b9abe.  v2:= temp;
  #L2b9ac0.  return v2;
}
procedure `long` `nextLong`(`kotlin.random.KotlinRandom` v2 @kind this) @signature `Lkotlin/random/KotlinRandom;.nextLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b9aec.  v0:= v2.`kotlin.random.KotlinRandom.impl` @type ^`kotlin.random.Random` @kind object;
  #L2b9af0.  call temp:= `nextLong`(v0) @signature `Lkotlin/random/Random;.nextLong:()J` @kind virtual;
  #L2b9af6.  v0:= temp @kind wide;
  #L2b9af8.  return v0 @kind wide;
}
procedure `void` `setSeed`(`kotlin.random.KotlinRandom` v0 @kind this, `long` v1 ) @signature `Lkotlin/random/KotlinRandom;.setSeed:(J)V` @AccessFlag PUBLIC {
    temp;

  #L2b9b80.  v1:= v0.`kotlin.random.KotlinRandom.seedInitialized` @type ^`boolean` @kind boolean;
  #L2b9b84.  if v1 != 0 then goto L2b9b90;
  #L2b9b88.  v1:= 1I;
  #L2b9b8a.  v0.`kotlin.random.KotlinRandom.seedInitialized` @type ^`boolean` := v1 @kind boolean;
  #L2b9b8e.  return @kind void;
  #L2b9b90.  v1:= new `java.lang.UnsupportedOperationException`;
  #L2b9b94.  v2:= "Setting seed is not supported." @kind object;
  #L2b9b98.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b9b9e.  throw v1;
}
