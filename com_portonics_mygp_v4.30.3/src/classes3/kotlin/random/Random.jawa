record `kotlin.random.Random` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `kotlin.random.Random$Default` `@@kotlin.random.Random.Default` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.random.Random` `@@kotlin.random.Random.defaultRandom` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/random/Random;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2ba8d4.  v0:= new `kotlin.random.Random$Default`;
  #L2ba8d8.  v1:= 0I;
  #L2ba8da.  call `<init>`(v0, v1) @signature `Lkotlin/random/Random$Default;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2ba8e0.  `@@kotlin.random.Random.Default` @type ^`kotlin.random.Random$Default` := v0 @kind object;
  #L2ba8e4.  v0:= `@@kotlin.internal.PlatformImplementationsKt.IMPLEMENTATIONS` @type ^`kotlin.internal.PlatformImplementations` @kind object;
  #L2ba8e8.  call temp:= `defaultPlatformRandom`(v0) @signature `Lkotlin/internal/PlatformImplementations;.defaultPlatformRandom:()Lkotlin/random/Random;` @kind virtual;
  #L2ba8ee.  v0:= temp @kind object;
  #L2ba8f0.  `@@kotlin.random.Random.defaultRandom` @type ^`kotlin.random.Random` := v0 @kind object;
  #L2ba8f4.  return @kind void;
}
procedure `void` `<init>`(`kotlin.random.Random` v0 @kind this) @signature `Lkotlin/random/Random;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2ba908.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ba90e.  return @kind void;
}
procedure `kotlin.random.Random` `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L2ba78c.  v0:= `@@kotlin.random.Random.defaultRandom` @type ^`kotlin.random.Random` @kind object;
  #L2ba790.  return v0 @kind object;
}
procedure `byte`[] `nextBytes$default`(`kotlin.random.Random` v0 @kind object, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlin/random/Random;.nextBytes$default:(Lkotlin/random/Random;[BIIILjava/lang/Object;)[B` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2ba380.  if v5 != 0 then goto L2ba3a2;
  #L2ba384.  v5:= v4 ^& 2;
  #L2ba388.  if v5 == 0 then goto L2ba38e;
  #L2ba38c.  v2:= 0I;
  #L2ba38e.  v4:= v4 ^& 4;
  #L2ba392.  if v4 == 0 then goto L2ba398;
  #L2ba396.  v3:= length @variable v1;
  #L2ba398.  call temp:= `nextBytes`(v0, v1, v2, v3) @signature `Lkotlin/random/Random;.nextBytes:([BII)[B` @kind virtual;
  #L2ba39e.  v0:= temp @kind object;
  #L2ba3a0.  return v0 @kind object;
  #L2ba3a2.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2ba3a6.  v1:= "Super calls with default arguments not supported in this target, function: nextBytes" @kind object;
  #L2ba3aa.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ba3b0.  throw v0;
}
procedure `int` `nextBits`(`int` v0 ) @signature `Lkotlin/random/Random;.nextBits:(I)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `nextBoolean`(`kotlin.random.Random` v2 @kind this) @signature `Lkotlin/random/Random;.nextBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ba35c.  v0:= 1I;
  #L2ba35e.  call temp:= `nextBits`(v2, v0) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L2ba364.  v1:= temp;
  #L2ba366.  if v1 == 0 then goto L2ba36c;
  #L2ba36a.  goto L2ba36e;
  #L2ba36c.  v0:= 0I;
  #L2ba36e.  return v0;
}
procedure `byte`[] `nextBytes`(`kotlin.random.Random` v0 @kind this, `int` v1 ) @signature `Lkotlin/random/Random;.nextBytes:(I)[B` @AccessFlag PUBLIC {
    temp;

  #L2ba578.  v1:= new `byte`[v1];
  #L2ba57c.  call temp:= `nextBytes`(v0, v1) @signature `Lkotlin/random/Random;.nextBytes:([B)[B` @kind virtual;
  #L2ba582.  v1:= temp @kind object;
  #L2ba584.  return v1 @kind object;
}
procedure `byte`[] `nextBytes`(`kotlin.random.Random` v2 @kind this, `byte`[] v3 @kind object) @signature `Lkotlin/random/Random;.nextBytes:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ba3c4.  v0:= "array" @kind object;
  #L2ba3c8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ba3ce.  v0:= length @variable v3;
  #L2ba3d0.  v1:= 0I;
  #L2ba3d2.  call temp:= `nextBytes`(v2, v3, v1, v0) @signature `Lkotlin/random/Random;.nextBytes:([BII)[B` @kind virtual;
  #L2ba3d8.  v3:= temp @kind object;
  #L2ba3da.  return v3 @kind object;
}
procedure `byte`[] `nextBytes`(`kotlin.random.Random` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lkotlin/random/Random;.nextBytes:([BII)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2ba3ec.  v0:= "array" @kind object;
  #L2ba3f0.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ba3f6.  v0:= 1I;
  #L2ba3f8.  v1:= 0I;
  #L2ba3fa.  if v8 < 0 then goto L2ba408;
  #L2ba3fe.  v2:= length @variable v7;
  #L2ba400.  if v8 > v2 then goto L2ba408;
  #L2ba404.  v2:= 1I;
  #L2ba406.  goto L2ba40a;
  #L2ba408.  v2:= 0I;
  #L2ba40a.  if v2 == 0 then goto L2ba426;
  #L2ba40e.  if v9 < 0 then goto L2ba41c;
  #L2ba412.  v2:= length @variable v7;
  #L2ba414.  if v9 > v2 then goto L2ba41c;
  #L2ba418.  v2:= 1I;
  #L2ba41a.  goto L2ba41e;
  #L2ba41c.  v2:= 0I;
  #L2ba41e.  if v2 == 0 then goto L2ba426;
  #L2ba422.  v2:= 1I;
  #L2ba424.  goto L2ba428;
  #L2ba426.  v2:= 0I;
  #L2ba428.  v3:= "fromIndex (" @kind object;
  #L2ba42c.  if v2 == 0 then goto L2ba504;
  #L2ba430.  if v8 > v9 then goto L2ba436;
  #L2ba434.  goto L2ba438;
  #L2ba436.  v0:= 0I;
  #L2ba438.  if v0 == 0 then goto L2ba4b8;
  #L2ba43c.  v0:= v9 - v8 @kind int;
  #L2ba440.  v0:= v0 / 4;
  #L2ba444.  v2:= 0I;
  #L2ba446.  if v2 >= v0 then goto L2ba48c;
  #L2ba44a.  call temp:= `nextInt`(v6) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L2ba450.  v3:= temp;
  #L2ba452.  v4:= (`byte`) v3 @kind i2b;
  #L2ba454.  v7[v8]:= v4 @kind byte;
  #L2ba458.  v4:= v8 + 1;
  #L2ba45c.  v5:= v3 ^>> 8;
  #L2ba460.  v5:= (`byte`) v5 @kind i2b;
  #L2ba462.  v7[v4]:= v5 @kind byte;
  #L2ba466.  v4:= v8 + 2;
  #L2ba46a.  v5:= v3 ^>> 16;
  #L2ba46e.  v5:= (`byte`) v5 @kind i2b;
  #L2ba470.  v7[v4]:= v5 @kind byte;
  #L2ba474.  v4:= v8 + 3;
  #L2ba478.  v3:= v3 ^>> 24;
  #L2ba47c.  v3:= (`byte`) v3 @kind i2b;
  #L2ba47e.  v7[v4]:= v3 @kind byte;
  #L2ba482.  v8:= v8 + 4;
  #L2ba486.  v2:= v2 + 1;
  #L2ba48a.  goto L2ba446;
  #L2ba48c.  v9:= v9 - v8 @kind int;
  #L2ba48e.  v0:= v9 * 8;
  #L2ba492.  call temp:= `nextBits`(v6, v0) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L2ba498.  v0:= temp;
  #L2ba49a.  if v1 >= v9 then goto L2ba4b6;
  #L2ba49e.  v2:= v8 + v1 @kind int;
  #L2ba4a2.  v3:= v1 * 8;
  #L2ba4a6.  v3:= v0 ^>> v3 @kind int;
  #L2ba4aa.  v3:= (`byte`) v3 @kind i2b;
  #L2ba4ac.  v7[v2]:= v3 @kind byte;
  #L2ba4b0.  v1:= v1 + 1;
  #L2ba4b4.  goto L2ba49a;
  #L2ba4b6.  return v7 @kind object;
  #L2ba4b8.  v7:= new `java.lang.StringBuilder`;
  #L2ba4bc.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ba4c2.  call temp:= `append`(v7, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba4c8.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba4ce.  v8:= ") must be not greater than toIndex (" @kind object;
  #L2ba4d2.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba4d8.  call temp:= `append`(v7, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba4de.  v8:= ")." @kind object;
  #L2ba4e2.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba4e8.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ba4ee.  v7:= temp @kind object;
  #L2ba4f0.  v8:= new `java.lang.IllegalArgumentException`;
  #L2ba4f4.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ba4fa.  v7:= temp @kind object;
  #L2ba4fc.  call `<init>`(v8, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ba502.  throw v8;
  #L2ba504.  v0:= new `java.lang.StringBuilder`;
  #L2ba508.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ba50e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba514.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba51a.  v8:= ") or toIndex (" @kind object;
  #L2ba51e.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba524.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba52a.  v8:= ") are out of range: 0.." @kind object;
  #L2ba52e.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba534.  v7:= length @variable v7;
  #L2ba536.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba53c.  v7:= 46I;
  #L2ba540.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba546.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ba54c.  v7:= temp @kind object;
  #L2ba54e.  v8:= new `java.lang.IllegalArgumentException`;
  #L2ba552.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ba558.  v7:= temp @kind object;
  #L2ba55a.  call `<init>`(v8, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ba560.  goto L2ba564;
  #L2ba562.  throw v8;
  #L2ba564.  goto L2ba562;
}
procedure `double` `nextDouble`(`kotlin.random.Random` v2 @kind this) @signature `Lkotlin/random/Random;.nextDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ba598.  v0:= 26I;
  #L2ba59c.  call temp:= `nextBits`(v2, v0) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L2ba5a2.  v0:= temp;
  #L2ba5a4.  v1:= 27I;
  #L2ba5a8.  call temp:= `nextBits`(v2, v1) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L2ba5ae.  v1:= temp;
  #L2ba5b0.  call temp:= `doubleFromParts`(v0, v1) @signature `Lkotlin/random/PlatformRandomKt;.doubleFromParts:(II)D` @kind static;
  #L2ba5b6.  v0:= temp @kind wide;
  #L2ba5b8.  return v0 @kind wide;
}
procedure `double` `nextDouble`(`kotlin.random.Random` v2 @kind this, `double` v3 ) @signature `Lkotlin/random/Random;.nextDouble:(D)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ba5cc.  v0:= 0L;
  #L2ba5d0.  call temp:= `nextDouble`(v2, v0, v3) @signature `Lkotlin/random/Random;.nextDouble:(DD)D` @kind virtual;
  #L2ba5d6.  v3:= temp @kind wide;
  #L2ba5d8.  return v3 @kind wide;
}
procedure `double` `nextDouble`(`kotlin.random.Random` v6 @kind this, `double` v7 , `double` v9 ) @signature `Lkotlin/random/Random;.nextDouble:(DD)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2ba5ec.  call `checkRangeBounds`(v7, v9) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(DD)V` @kind static;
  #L2ba5f2.  v0:= v9 - v7 @kind double;
  #L2ba5f6.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L2ba5fc.  v2:= temp;
  #L2ba5fe.  if v2 == 0 then goto L2ba674;
  #L2ba602.  call temp:= `isInfinite`(v7) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L2ba608.  v2:= temp;
  #L2ba60a.  v3:= 1I;
  #L2ba60c.  v4:= 0I;
  #L2ba60e.  if v2 != 0 then goto L2ba622;
  #L2ba612.  call temp:= `isNaN`(v7) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2ba618.  v2:= temp;
  #L2ba61a.  if v2 != 0 then goto L2ba622;
  #L2ba61e.  v2:= 1I;
  #L2ba620.  goto L2ba624;
  #L2ba622.  v2:= 0I;
  #L2ba624.  if v2 == 0 then goto L2ba674;
  #L2ba628.  call temp:= `isInfinite`(v9) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L2ba62e.  v2:= temp;
  #L2ba630.  if v2 != 0 then goto L2ba642;
  #L2ba634.  call temp:= `isNaN`(v9) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2ba63a.  v2:= temp;
  #L2ba63c.  if v2 != 0 then goto L2ba642;
  #L2ba640.  goto L2ba644;
  #L2ba642.  v3:= 0I;
  #L2ba644.  if v3 == 0 then goto L2ba674;
  #L2ba648.  call temp:= `nextDouble`(v6) @signature `Lkotlin/random/Random;.nextDouble:()D` @kind virtual;
  #L2ba64e.  v0:= temp @kind wide;
  #L2ba650.  v2:= 2I;
  #L2ba652.  v2:= (`double`) v2 @kind i2d;
  #L2ba654.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2ba65a.  v4:= v9 / v2 @kind double;
  #L2ba65e.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2ba664.  v2:= v7 / v2 @kind double;
  #L2ba668.  v4:= v4 - v2 @kind double;
  #L2ba66a.  v0:= v0 * v4 @kind double;
  #L2ba66e.  v7:= v7 + v0 @kind double;
  #L2ba670.  v7:= v7 + v0 @kind double;
  #L2ba672.  goto L2ba682;
  #L2ba674.  call temp:= `nextDouble`(v6) @signature `Lkotlin/random/Random;.nextDouble:()D` @kind virtual;
  #L2ba67a.  v2:= temp @kind wide;
  #L2ba67c.  v2:= v2 * v0 @kind double;
  #L2ba680.  v7:= v7 + v2 @kind double;
  #L2ba682.  v0:= dcmpl(v7, v9);
  #L2ba686.  if v0 < 0 then goto L2ba696;
  #L2ba68a.  v7:= -InfinityD;
  #L2ba68e.  call temp:= `nextAfter`(v9, v7) @signature `Ljava/lang/Math;.nextAfter:(DD)D` @kind static;
  #L2ba694.  v7:= temp @kind wide;
  #L2ba696.  return v7 @kind wide;
}
procedure `float` `nextFloat`(`kotlin.random.Random` v2 @kind this) @signature `Lkotlin/random/Random;.nextFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ba6a8.  v0:= 24I;
  #L2ba6ac.  call temp:= `nextBits`(v2, v0) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L2ba6b2.  v0:= temp;
  #L2ba6b4.  v0:= (`float`) v0 @kind i2f;
  #L2ba6b6.  v1:= 1.6777216E7F;
  #L2ba6ba.  v0:= v0 / v1 @kind float;
  #L2ba6bc.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.Random` v1 @kind this) @signature `Lkotlin/random/Random;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ba6d0.  v0:= 32I;
  #L2ba6d4.  call temp:= `nextBits`(v1, v0) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L2ba6da.  v0:= temp;
  #L2ba6dc.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.Random` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/Random;.nextInt:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ba6f0.  v0:= 0I;
  #L2ba6f2.  call temp:= `nextInt`(v1, v0, v2) @signature `Lkotlin/random/Random;.nextInt:(II)I` @kind virtual;
  #L2ba6f8.  v2:= temp;
  #L2ba6fa.  return v2;
}
procedure `int` `nextInt`(`kotlin.random.Random` v4 @kind this, `int` v5 , `int` v6 ) @signature `Lkotlin/random/Random;.nextInt:(II)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ba70c.  call `checkRangeBounds`(v5, v6) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(II)V` @kind static;
  #L2ba712.  v0:= v6 - v5 @kind int;
  #L2ba716.  v1:= 1I;
  #L2ba718.  if v0 > 0 then goto L2ba740;
  #L2ba71c.  v2:= -2147483648I;
  #L2ba720.  if v0 != v2 then goto L2ba726;
  #L2ba724.  goto L2ba740;
  #L2ba726.  call temp:= `nextInt`(v4) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L2ba72c.  v0:= temp;
  #L2ba72e.  v2:= 0I;
  #L2ba730.  if v5 > v0 then goto L2ba73a;
  #L2ba734.  if v0 >= v6 then goto L2ba73a;
  #L2ba738.  v2:= 1I;
  #L2ba73a.  if v2 == 0 then goto L2ba726;
  #L2ba73e.  return v0;
  #L2ba740.  v6:= -v0 @kind int;
  #L2ba742.  v6:= v6 ^& v0 @kind int;
  #L2ba744.  if v6 != v0 then goto L2ba75a;
  #L2ba748.  call temp:= `fastLog2`(v0) @signature `Lkotlin/random/RandomKt;.fastLog2:(I)I` @kind static;
  #L2ba74e.  v6:= temp;
  #L2ba750.  call temp:= `nextBits`(v4, v6) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L2ba756.  v6:= temp;
  #L2ba758.  goto L2ba776;
  #L2ba75a.  call temp:= `nextInt`(v4) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L2ba760.  v6:= temp;
  #L2ba762.  v6:= v6 ^>> v1 @kind int;
  #L2ba764.  v2:= v6 %% v0 @kind int;
  #L2ba768.  v6:= v6 - v2 @kind int;
  #L2ba76a.  v3:= v0 + -1;
  #L2ba76e.  v6:= v6 + v3 @kind int;
  #L2ba770.  if v6 < 0 then goto L2ba75a;
  #L2ba774.  v6:= v2;
  #L2ba776.  v5:= v5 + v6 @kind int;
  #L2ba778.  return v5;
}
procedure `long` `nextLong`(`kotlin.random.Random` v4 @kind this) @signature `Lkotlin/random/Random;.nextLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ba7a4.  call temp:= `nextInt`(v4) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L2ba7aa.  v0:= temp;
  #L2ba7ac.  v0:= (`long`) v0 @kind i2l;
  #L2ba7ae.  v2:= 32I;
  #L2ba7b2.  v0:= v0 ^< v2 @kind long;
  #L2ba7b4.  call temp:= `nextInt`(v4) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L2ba7ba.  v2:= temp;
  #L2ba7bc.  v2:= (`long`) v2 @kind i2l;
  #L2ba7be.  v0:= v0 + v2 @kind long;
  #L2ba7c0.  return v0 @kind wide;
}
procedure `long` `nextLong`(`kotlin.random.Random` v2 @kind this, `long` v3 ) @signature `Lkotlin/random/Random;.nextLong:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ba7d4.  v0:= 0L;
  #L2ba7d8.  call temp:= `nextLong`(v2, v0, v3) @signature `Lkotlin/random/Random;.nextLong:(JJ)J` @kind virtual;
  #L2ba7de.  v3:= temp @kind wide;
  #L2ba7e0.  return v3 @kind wide;
}
procedure `long` `nextLong`(`kotlin.random.Random` v9 @kind this, `long` v10 , `long` v12 ) @signature `Lkotlin/random/Random;.nextLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2ba7f4.  call `checkRangeBounds`(v10, v12) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(JJ)V` @kind static;
  #L2ba7fa.  v0:= v12 - v10 @kind long;
  #L2ba7fe.  v2:= 0L;
  #L2ba802.  v4:= 1I;
  #L2ba804.  v5:= lcmp(v0, v2);
  #L2ba808.  if v5 <= 0 then goto L2ba8a2;
  #L2ba80c.  v12:= -v0 @kind long;
  #L2ba80e.  v12:= v12 ^& v0 @kind long;
  #L2ba810.  v5:= lcmp(v12, v0);
  #L2ba814.  if v5 != 0 then goto L2ba87a;
  #L2ba818.  v12:= (`int`) v0 @kind l2i;
  #L2ba81a.  v13:= 32I;
  #L2ba81e.  v0:= v0 ^>> v13 @kind long;
  #L2ba820.  v1:= (`int`) v0 @kind l2i;
  #L2ba822.  v2:= 4294967295L;
  #L2ba82c.  if v12 == 0 then goto L2ba846;
  #L2ba830.  call temp:= `fastLog2`(v12) @signature `Lkotlin/random/RandomKt;.fastLog2:(I)I` @kind static;
  #L2ba836.  v12:= temp;
  #L2ba838.  call temp:= `nextBits`(v9, v12) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L2ba83e.  v12:= temp;
  #L2ba840.  v12:= (`long`) v12 @kind i2l;
  #L2ba842.  v12:= v12 ^& v2 @kind long;
  #L2ba844.  goto L2ba89e;
  #L2ba846.  if v1 != v4 then goto L2ba854;
  #L2ba84a.  call temp:= `nextInt`(v9) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L2ba850.  v12:= temp;
  #L2ba852.  goto L2ba840;
  #L2ba854.  call temp:= `fastLog2`(v1) @signature `Lkotlin/random/RandomKt;.fastLog2:(I)I` @kind static;
  #L2ba85a.  v12:= temp;
  #L2ba85c.  call temp:= `nextBits`(v9, v12) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L2ba862.  v12:= temp;
  #L2ba864.  v0:= (`long`) v12 @kind i2l;
  #L2ba866.  v12:= v0 ^< v13 @kind long;
  #L2ba86a.  call temp:= `nextInt`(v9) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L2ba870.  v0:= temp;
  #L2ba872.  v0:= (`long`) v0 @kind i2l;
  #L2ba874.  v0:= v0 ^& v2 @kind long;
  #L2ba876.  v12:= v12 + v0 @kind long;
  #L2ba878.  goto L2ba89e;
  #L2ba87a.  call temp:= `nextLong`(v9) @signature `Lkotlin/random/Random;.nextLong:()J` @kind virtual;
  #L2ba880.  v12:= temp @kind wide;
  #L2ba882.  v12:= v12 ^>> v4 @kind long;
  #L2ba884.  v5:= v12 %% v0 @kind long;
  #L2ba888.  v12:= v12 - v5 @kind long;
  #L2ba88a.  v7:= 1L;
  #L2ba88e.  v7:= v0 - v7 @kind long;
  #L2ba892.  v12:= v12 + v7 @kind long;
  #L2ba894.  v7:= lcmp(v12, v2);
  #L2ba898.  if v7 < 0 then goto L2ba87a;
  #L2ba89c.  v12:= v5 @kind wide;
  #L2ba89e.  v10:= v10 + v12 @kind long;
  #L2ba8a0.  return v10 @kind wide;
  #L2ba8a2.  call temp:= `nextLong`(v9) @signature `Lkotlin/random/Random;.nextLong:()J` @kind virtual;
  #L2ba8a8.  v0:= temp @kind wide;
  #L2ba8aa.  v2:= 0I;
  #L2ba8ac.  v3:= lcmp(v10, v0);
  #L2ba8b0.  if v3 > 0 then goto L2ba8be;
  #L2ba8b4.  v3:= lcmp(v0, v12);
  #L2ba8b8.  if v3 >= 0 then goto L2ba8be;
  #L2ba8bc.  v2:= 1I;
  #L2ba8be.  if v2 == 0 then goto L2ba8a2;
  #L2ba8c2.  return v0 @kind wide;
}
