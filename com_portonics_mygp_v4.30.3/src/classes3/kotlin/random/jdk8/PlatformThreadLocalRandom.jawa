record `kotlin.random.jdk8.PlatformThreadLocalRandom` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.random.AbstractPlatformRandom` @kind class {
}
procedure `void` `<init>`(`kotlin.random.jdk8.PlatformThreadLocalRandom` v0 @kind this) @signature `Lkotlin/random/jdk8/PlatformThreadLocalRandom;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2bafdc.  call `<init>`(v0) @signature `Lkotlin/random/AbstractPlatformRandom;.<init>:()V` @kind direct;
  #L2bafe2.  return @kind void;
}
procedure `java.util.Random` `getImpl`(`kotlin.random.jdk8.PlatformThreadLocalRandom` v2 @kind this) @signature `Lkotlin/random/jdk8/PlatformThreadLocalRandom;.getImpl:()Ljava/util/Random;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2baf70.  call temp:= `current`() @signature `Ljava/util/concurrent/ThreadLocalRandom;.current:()Ljava/util/concurrent/ThreadLocalRandom;` @kind static;
  #L2baf76.  v0:= temp @kind object;
  #L2baf78.  v1:= "current()" @kind object;
  #L2baf7c.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2baf82.  return v0 @kind object;
}
procedure `double` `nextDouble`(`kotlin.random.jdk8.PlatformThreadLocalRandom` v1 @kind this, `double` v2 ) @signature `Lkotlin/random/jdk8/PlatformThreadLocalRandom;.nextDouble:(D)D` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2baf28.  call temp:= `current`() @signature `Ljava/util/concurrent/ThreadLocalRandom;.current:()Ljava/util/concurrent/ThreadLocalRandom;` @kind static;
  #L2baf2e.  v0:= temp @kind object;
  #L2baf30.  call temp:= `nextDouble`(v0, v2) @signature `Ljava/util/concurrent/ThreadLocalRandom;.nextDouble:(D)D` @kind virtual;
  #L2baf36.  v2:= temp @kind wide;
  #L2baf38.  return v2 @kind wide;
}
procedure `int` `nextInt`(`kotlin.random.jdk8.PlatformThreadLocalRandom` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/random/jdk8/PlatformThreadLocalRandom;.nextInt:(II)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2baf4c.  call temp:= `current`() @signature `Ljava/util/concurrent/ThreadLocalRandom;.current:()Ljava/util/concurrent/ThreadLocalRandom;` @kind static;
  #L2baf52.  v0:= temp @kind object;
  #L2baf54.  call temp:= `nextInt`(v0, v2, v3) @signature `Ljava/util/concurrent/ThreadLocalRandom;.nextInt:(II)I` @kind virtual;
  #L2baf5a.  v2:= temp;
  #L2baf5c.  return v2;
}
procedure `long` `nextLong`(`kotlin.random.jdk8.PlatformThreadLocalRandom` v1 @kind this, `long` v2 ) @signature `Lkotlin/random/jdk8/PlatformThreadLocalRandom;.nextLong:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2baf94.  call temp:= `current`() @signature `Ljava/util/concurrent/ThreadLocalRandom;.current:()Ljava/util/concurrent/ThreadLocalRandom;` @kind static;
  #L2baf9a.  v0:= temp @kind object;
  #L2baf9c.  call temp:= `nextLong`(v0, v2) @signature `Ljava/util/concurrent/ThreadLocalRandom;.nextLong:(J)J` @kind virtual;
  #L2bafa2.  v2:= temp @kind wide;
  #L2bafa4.  return v2 @kind wide;
}
procedure `long` `nextLong`(`kotlin.random.jdk8.PlatformThreadLocalRandom` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lkotlin/random/jdk8/PlatformThreadLocalRandom;.nextLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bafb8.  call temp:= `current`() @signature `Ljava/util/concurrent/ThreadLocalRandom;.current:()Ljava/util/concurrent/ThreadLocalRandom;` @kind static;
  #L2bafbe.  v0:= temp @kind object;
  #L2bafc0.  call temp:= `nextLong`(v0, v2, v4) @signature `Ljava/util/concurrent/ThreadLocalRandom;.nextLong:(JJ)J` @kind virtual;
  #L2bafc6.  v2:= temp @kind wide;
  #L2bafc8.  return v2 @kind wide;
}
