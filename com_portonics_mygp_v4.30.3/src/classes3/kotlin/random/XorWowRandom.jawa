record `kotlin.random.XorWowRandom` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.random.Random` @kind class, `java.io.Serializable` @kind interface {
  `int` `kotlin.random.XorWowRandom.addend` @AccessFlag PRIVATE;
  `int` `kotlin.random.XorWowRandom.v` @AccessFlag PRIVATE;
  `int` `kotlin.random.XorWowRandom.w` @AccessFlag PRIVATE;
  `int` `kotlin.random.XorWowRandom.x` @AccessFlag PRIVATE;
  `int` `kotlin.random.XorWowRandom.y` @AccessFlag PRIVATE;
  `int` `kotlin.random.XorWowRandom.z` @AccessFlag PRIVATE;
}
global `kotlin.random.XorWowRandom$Companion` `@@kotlin.random.XorWowRandom.Companion` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@kotlin.random.XorWowRandom.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/random/XorWowRandom;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2bae58.  v0:= new `kotlin.random.XorWowRandom$Companion`;
  #L2bae5c.  v1:= 0I;
  #L2bae5e.  call `<init>`(v0, v1) @signature `Lkotlin/random/XorWowRandom$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2bae64.  `@@kotlin.random.XorWowRandom.Companion` @type ^`kotlin.random.XorWowRandom$Companion` := v0 @kind object;
  #L2bae68.  return @kind void;
}
procedure `void` `<init>`(`kotlin.random.XorWowRandom` v7 @kind this, `int` v8 , `int` v9 ) @signature `Lkotlin/random/XorWowRandom;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2bae7c.  v5:= v8 ^~ -1;
  #L2bae80.  v0:= v8 ^< 10;
  #L2bae84.  v1:= v9 ^>> 4;
  #L2bae88.  v6:= v0 ^~ v1 @kind int;
  #L2bae8c.  v3:= 0I;
  #L2bae8e.  v4:= 0I;
  #L2bae90.  v0:= v7 @kind object;
  #L2bae92.  v1:= v8;
  #L2bae94.  v2:= v9;
  #L2bae96.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lkotlin/random/XorWowRandom;.<init>:(IIIIII)V` @kind direct;
  #L2bae9c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.random.XorWowRandom` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 , `int` v5 , `int` v6 ) @signature `Lkotlin/random/XorWowRandom;.<init>:(IIIIII)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2baeb0.  call `<init>`(v0) @signature `Lkotlin/random/Random;.<init>:()V` @kind direct;
  #L2baeb6.  v0.`kotlin.random.XorWowRandom.x` @type ^`int` := v1;
  #L2baeba.  v0.`kotlin.random.XorWowRandom.y` @type ^`int` := v2;
  #L2baebe.  v0.`kotlin.random.XorWowRandom.z` @type ^`int` := v3;
  #L2baec2.  v0.`kotlin.random.XorWowRandom.w` @type ^`int` := v4;
  #L2baec6.  v0.`kotlin.random.XorWowRandom.v` @type ^`int` := v5;
  #L2baeca.  v0.`kotlin.random.XorWowRandom.addend` @type ^`int` := v6;
  #L2baece.  v1:= v1 ^| v2 @kind int;
  #L2baed0.  v1:= v1 ^| v3 @kind int;
  #L2baed2.  v1:= v1 ^| v4 @kind int;
  #L2baed4.  v1:= v1 ^| v5 @kind int;
  #L2baed6.  v2:= 0I;
  #L2baed8.  if v1 == 0 then goto L2baee0;
  #L2baedc.  v1:= 1I;
  #L2baede.  goto L2baee2;
  #L2baee0.  v1:= 0I;
  #L2baee2.  if v1 == 0 then goto L2baefc;
  #L2baee6.  v1:= 64I;
  #L2baeea.  if v2 >= v1 then goto L2baefa;
  #L2baeee.  call temp:= `nextInt`(v0) @signature `Lkotlin/random/XorWowRandom;.nextInt:()I` @kind virtual;
  #L2baef4.  v2:= v2 + 1;
  #L2baef8.  goto L2baeea;
  #L2baefa.  return @kind void;
  #L2baefc.  v1:= new `java.lang.IllegalArgumentException`;
  #L2baf00.  v2:= "Initial state must have at least one non-zero element." @kind object;
  #L2baf04.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2baf0a.  v2:= temp @kind object;
  #L2baf0c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2baf12.  goto L2baf16;
  #L2baf14.  throw v1;
  #L2baf16.  goto L2baf14;
}
procedure `int` `nextBits`(`kotlin.random.XorWowRandom` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/XorWowRandom;.nextBits:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2badd4.  call temp:= `nextInt`(v1) @signature `Lkotlin/random/XorWowRandom;.nextInt:()I` @kind virtual;
  #L2badda.  v0:= temp;
  #L2baddc.  call temp:= `takeUpperBits`(v0, v2) @signature `Lkotlin/random/RandomKt;.takeUpperBits:(II)I` @kind static;
  #L2bade2.  v2:= temp;
  #L2bade4.  return v2;
}
procedure `int` `nextInt`(`kotlin.random.XorWowRandom` v3 @kind this) @signature `Lkotlin/random/XorWowRandom;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2badf8.  v0:= v3.`kotlin.random.XorWowRandom.x` @type ^`int`;
  #L2badfc.  v1:= v0 ^>> 2;
  #L2bae00.  v0:= v0 ^~ v1 @kind int;
  #L2bae02.  v1:= v3.`kotlin.random.XorWowRandom.y` @type ^`int`;
  #L2bae06.  v3.`kotlin.random.XorWowRandom.x` @type ^`int` := v1;
  #L2bae0a.  v1:= v3.`kotlin.random.XorWowRandom.z` @type ^`int`;
  #L2bae0e.  v3.`kotlin.random.XorWowRandom.y` @type ^`int` := v1;
  #L2bae12.  v1:= v3.`kotlin.random.XorWowRandom.w` @type ^`int`;
  #L2bae16.  v3.`kotlin.random.XorWowRandom.z` @type ^`int` := v1;
  #L2bae1a.  v1:= v3.`kotlin.random.XorWowRandom.v` @type ^`int`;
  #L2bae1e.  v3.`kotlin.random.XorWowRandom.w` @type ^`int` := v1;
  #L2bae22.  v2:= v0 ^< 1;
  #L2bae26.  v0:= v0 ^~ v2 @kind int;
  #L2bae28.  v0:= v0 ^~ v1 @kind int;
  #L2bae2a.  v1:= v1 ^< 4;
  #L2bae2e.  v0:= v0 ^~ v1 @kind int;
  #L2bae30.  v3.`kotlin.random.XorWowRandom.v` @type ^`int` := v0;
  #L2bae34.  v1:= v3.`kotlin.random.XorWowRandom.addend` @type ^`int`;
  #L2bae38.  v2:= 362437I;
  #L2bae3e.  v1:= v1 + v2 @kind int;
  #L2bae40.  v3.`kotlin.random.XorWowRandom.addend` @type ^`int` := v1;
  #L2bae44.  v0:= v0 + v1 @kind int;
  #L2bae46.  return v0;
}
