record `kotlin.random.RandomKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `kotlin.random.Random` `Random`(`int` v2 ) @signature `Lkotlin/random/RandomKt;.Random:(I)Lkotlin/random/Random;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2ba154.  v0:= new `kotlin.random.XorWowRandom`;
  #L2ba158.  v1:= v2 ^> 31;
  #L2ba15c.  call `<init>`(v0, v2, v1) @signature `Lkotlin/random/XorWowRandom;.<init>:(II)V` @kind direct;
  #L2ba162.  return v0 @kind object;
}
procedure `kotlin.random.Random` `Random`(`long` v3 ) @signature `Lkotlin/random/RandomKt;.Random:(J)Lkotlin/random/Random;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ba174.  v0:= new `kotlin.random.XorWowRandom`;
  #L2ba178.  v1:= (`int`) v3 @kind l2i;
  #L2ba17a.  v2:= 32I;
  #L2ba17e.  v3:= v3 ^> v2 @kind long;
  #L2ba180.  v4:= (`int`) v3 @kind l2i;
  #L2ba182.  call `<init>`(v0, v1, v4) @signature `Lkotlin/random/XorWowRandom;.<init>:(II)V` @kind direct;
  #L2ba188.  return v0 @kind object;
}
procedure `java.lang.String` `boundsErrorMessage`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/random/RandomKt;.boundsErrorMessage:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2ba0f0.  v0:= "from" @kind object;
  #L2ba0f4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ba0fa.  v0:= "until" @kind object;
  #L2ba0fe.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ba104.  v0:= new `java.lang.StringBuilder`;
  #L2ba108.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ba10e.  v1:= "Random range is empty: [" @kind object;
  #L2ba112.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba118.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba11e.  v2:= ", " @kind object;
  #L2ba122.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba128.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba12e.  v2:= ")." @kind object;
  #L2ba132.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba138.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ba13e.  v2:= temp @kind object;
  #L2ba140.  return v2 @kind object;
}
procedure `void` `checkRangeBounds`(`double` v1 , `double` v3 ) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(DD)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2ba270.  v0:= dcmpl(v3, v1);
  #L2ba274.  if v0 <= 0 then goto L2ba27c;
  #L2ba278.  v0:= 1I;
  #L2ba27a.  goto L2ba27e;
  #L2ba27c.  v0:= 0I;
  #L2ba27e.  if v0 == 0 then goto L2ba284;
  #L2ba282.  return @kind void;
  #L2ba284.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L2ba28a.  v1:= temp @kind object;
  #L2ba28c.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L2ba292.  v2:= temp @kind object;
  #L2ba294.  call temp:= `boundsErrorMessage`(v1, v2) @signature `Lkotlin/random/RandomKt;.boundsErrorMessage:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2ba29a.  v1:= temp @kind object;
  #L2ba29c.  v2:= new `java.lang.IllegalArgumentException`;
  #L2ba2a0.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ba2a6.  v1:= temp @kind object;
  #L2ba2a8.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ba2ae.  throw v2;
}
procedure `void` `checkRangeBounds`(`int` v1 , `int` v2 ) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(II)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2ba2c0.  if v2 <= v1 then goto L2ba2c8;
  #L2ba2c4.  v0:= 1I;
  #L2ba2c6.  goto L2ba2ca;
  #L2ba2c8.  v0:= 0I;
  #L2ba2ca.  if v0 == 0 then goto L2ba2d0;
  #L2ba2ce.  return @kind void;
  #L2ba2d0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ba2d6.  v1:= temp @kind object;
  #L2ba2d8.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ba2de.  v2:= temp @kind object;
  #L2ba2e0.  call temp:= `boundsErrorMessage`(v1, v2) @signature `Lkotlin/random/RandomKt;.boundsErrorMessage:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2ba2e6.  v1:= temp @kind object;
  #L2ba2e8.  v2:= new `java.lang.IllegalArgumentException`;
  #L2ba2ec.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ba2f2.  v1:= temp @kind object;
  #L2ba2f4.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ba2fa.  throw v2;
}
procedure `void` `checkRangeBounds`(`long` v1 , `long` v3 ) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(JJ)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2ba30c.  v0:= lcmp(v3, v1);
  #L2ba310.  if v0 <= 0 then goto L2ba318;
  #L2ba314.  v0:= 1I;
  #L2ba316.  goto L2ba31a;
  #L2ba318.  v0:= 0I;
  #L2ba31a.  if v0 == 0 then goto L2ba320;
  #L2ba31e.  return @kind void;
  #L2ba320.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2ba326.  v1:= temp @kind object;
  #L2ba328.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2ba32e.  v2:= temp @kind object;
  #L2ba330.  call temp:= `boundsErrorMessage`(v1, v2) @signature `Lkotlin/random/RandomKt;.boundsErrorMessage:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2ba336.  v1:= temp @kind object;
  #L2ba338.  v2:= new `java.lang.IllegalArgumentException`;
  #L2ba33c.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ba342.  v1:= temp @kind object;
  #L2ba344.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ba34a.  throw v2;
}
procedure `int` `fastLog2`(`int` v0 ) @signature `Lkotlin/random/RandomKt;.fastLog2:(I)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L2b9fe4.  call temp:= `numberOfLeadingZeros`(v0) @signature `Ljava/lang/Integer;.numberOfLeadingZeros:(I)I` @kind static;
  #L2b9fea.  v0:= temp;
  #L2b9fec.  v0:= v0 - 31;
  #L2b9ff0.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.Random` v2 @kind object, `kotlin.ranges.IntRange` v3 @kind object) @signature `Lkotlin/random/RandomKt;.nextInt:(Lkotlin/random/Random;Lkotlin/ranges/IntRange;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2ba004.  v0:= "<this>" @kind object;
  #L2ba008.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ba00e.  v0:= "range" @kind object;
  #L2ba012.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ba018.  call temp:= `isEmpty`(v3) @signature `Lkotlin/ranges/IntRange;.isEmpty:()Z` @kind virtual;
  #L2ba01e.  v0:= temp;
  #L2ba020.  if v0 != 0 then goto L2ba090;
  #L2ba024.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L2ba02a.  v0:= temp;
  #L2ba02c.  v1:= 2147483647I;
  #L2ba032.  if v0 >= v1 then goto L2ba054;
  #L2ba036.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L2ba03c.  v0:= temp;
  #L2ba03e.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L2ba044.  v3:= temp;
  #L2ba046.  v3:= v3 + 1;
  #L2ba04a.  call temp:= `nextInt`(v2, v0, v3) @signature `Lkotlin/random/Random;.nextInt:(II)I` @kind virtual;
  #L2ba050.  v2:= temp;
  #L2ba052.  goto L2ba08e;
  #L2ba054.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L2ba05a.  v0:= temp;
  #L2ba05c.  v1:= -2147483648I;
  #L2ba060.  if v0 <= v1 then goto L2ba086;
  #L2ba064.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L2ba06a.  v0:= temp;
  #L2ba06c.  v0:= v0 + -1;
  #L2ba070.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L2ba076.  v3:= temp;
  #L2ba078.  call temp:= `nextInt`(v2, v0, v3) @signature `Lkotlin/random/Random;.nextInt:(II)I` @kind virtual;
  #L2ba07e.  v2:= temp;
  #L2ba080.  v2:= v2 + 1;
  #L2ba084.  goto L2ba08e;
  #L2ba086.  call temp:= `nextInt`(v2) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L2ba08c.  v2:= temp;
  #L2ba08e.  return v2;
  #L2ba090.  v2:= new `java.lang.IllegalArgumentException`;
  #L2ba094.  v0:= new `java.lang.StringBuilder`;
  #L2ba098.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ba09e.  v1:= "Cannot get random in empty range: " @kind object;
  #L2ba0a2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba0a8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba0ae.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ba0b4.  v3:= temp @kind object;
  #L2ba0b6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ba0bc.  throw v2;
}
procedure `long` `nextLong`(`kotlin.random.Random` v7 @kind object, `kotlin.ranges.LongRange` v8 @kind object) @signature `Lkotlin/random/RandomKt;.nextLong:(Lkotlin/random/Random;Lkotlin/ranges/LongRange;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2ba19c.  v0:= "<this>" @kind object;
  #L2ba1a0.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ba1a6.  v0:= "range" @kind object;
  #L2ba1aa.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ba1b0.  call temp:= `isEmpty`(v8) @signature `Lkotlin/ranges/LongRange;.isEmpty:()Z` @kind virtual;
  #L2ba1b6.  v0:= temp;
  #L2ba1b8.  if v0 != 0 then goto L2ba232;
  #L2ba1bc.  call temp:= `getLast`(v8) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L2ba1c2.  v0:= temp @kind wide;
  #L2ba1c4.  v2:= 9223372036854775807L;
  #L2ba1ce.  v4:= 1L;
  #L2ba1d2.  v6:= lcmp(v0, v2);
  #L2ba1d6.  if v6 >= 0 then goto L2ba1f6;
  #L2ba1da.  call temp:= `getFirst`(v8) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L2ba1e0.  v0:= temp @kind wide;
  #L2ba1e2.  call temp:= `getLast`(v8) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L2ba1e8.  v2:= temp @kind wide;
  #L2ba1ea.  v2:= v2 + v4 @kind long;
  #L2ba1ec.  call temp:= `nextLong`(v7, v0, v2) @signature `Lkotlin/random/Random;.nextLong:(JJ)J` @kind virtual;
  #L2ba1f2.  v7:= temp @kind wide;
  #L2ba1f4.  goto L2ba230;
  #L2ba1f6.  call temp:= `getFirst`(v8) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L2ba1fc.  v0:= temp @kind wide;
  #L2ba1fe.  v2:= -9223372036854775808L;
  #L2ba202.  v6:= lcmp(v0, v2);
  #L2ba206.  if v6 <= 0 then goto L2ba228;
  #L2ba20a.  call temp:= `getFirst`(v8) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L2ba210.  v0:= temp @kind wide;
  #L2ba212.  v0:= v0 - v4 @kind long;
  #L2ba214.  call temp:= `getLast`(v8) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L2ba21a.  v2:= temp @kind wide;
  #L2ba21c.  call temp:= `nextLong`(v7, v0, v2) @signature `Lkotlin/random/Random;.nextLong:(JJ)J` @kind virtual;
  #L2ba222.  v7:= temp @kind wide;
  #L2ba224.  v7:= v7 + v4 @kind long;
  #L2ba226.  goto L2ba230;
  #L2ba228.  call temp:= `nextLong`(v7) @signature `Lkotlin/random/Random;.nextLong:()J` @kind virtual;
  #L2ba22e.  v7:= temp @kind wide;
  #L2ba230.  return v7 @kind wide;
  #L2ba232.  v7:= new `java.lang.IllegalArgumentException`;
  #L2ba236.  v0:= new `java.lang.StringBuilder`;
  #L2ba23a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ba240.  v1:= "Cannot get random in empty range: " @kind object;
  #L2ba244.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba24a.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba250.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ba256.  v8:= temp @kind object;
  #L2ba258.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ba25e.  throw v7;
}
procedure `int` `takeUpperBits`(`int` v1 , `int` v2 ) @signature `Lkotlin/random/RandomKt;.takeUpperBits:(II)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2ba0d0.  v0:= v2 - 32;
  #L2ba0d4.  v1:= v1 ^>> v0 @kind int;
  #L2ba0d6.  v2:= -v2 @kind int;
  #L2ba0d8.  v2:= v2 ^> 31;
  #L2ba0dc.  v1:= v1 ^& v2 @kind int;
  #L2ba0de.  return v1;
}
