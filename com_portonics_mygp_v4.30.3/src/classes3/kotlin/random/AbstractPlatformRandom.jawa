record `kotlin.random.AbstractPlatformRandom` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.random.Random` @kind class {
}
procedure `void` `<init>`(`kotlin.random.AbstractPlatformRandom` v0 @kind this) @signature `Lkotlin/random/AbstractPlatformRandom;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2b9928.  call `<init>`(v0) @signature `Lkotlin/random/Random;.<init>:()V` @kind direct;
  #L2b992e.  return @kind void;
}
procedure `java.util.Random` `getImpl`() @signature `Lkotlin/random/AbstractPlatformRandom;.getImpl:()Ljava/util/Random;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `nextBits`(`kotlin.random.AbstractPlatformRandom` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/AbstractPlatformRandom;.nextBits:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b9890.  call temp:= `getImpl`(v1) @signature `Lkotlin/random/AbstractPlatformRandom;.getImpl:()Ljava/util/Random;` @kind virtual;
  #L2b9896.  v0:= temp @kind object;
  #L2b9898.  call temp:= `nextInt`(v0) @signature `Ljava/util/Random;.nextInt:()I` @kind virtual;
  #L2b989e.  v0:= temp;
  #L2b98a0.  call temp:= `takeUpperBits`(v0, v2) @signature `Lkotlin/random/RandomKt;.takeUpperBits:(II)I` @kind static;
  #L2b98a6.  v2:= temp;
  #L2b98a8.  return v2;
}
procedure `boolean` `nextBoolean`(`kotlin.random.AbstractPlatformRandom` v1 @kind this) @signature `Lkotlin/random/AbstractPlatformRandom;.nextBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b97f8.  call temp:= `getImpl`(v1) @signature `Lkotlin/random/AbstractPlatformRandom;.getImpl:()Ljava/util/Random;` @kind virtual;
  #L2b97fe.  v0:= temp @kind object;
  #L2b9800.  call temp:= `nextBoolean`(v0) @signature `Ljava/util/Random;.nextBoolean:()Z` @kind virtual;
  #L2b9806.  v0:= temp;
  #L2b9808.  return v0;
}
procedure `byte`[] `nextBytes`(`kotlin.random.AbstractPlatformRandom` v1 @kind this, `byte`[] v2 @kind object) @signature `Lkotlin/random/AbstractPlatformRandom;.nextBytes:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b981c.  v0:= "array" @kind object;
  #L2b9820.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b9826.  call temp:= `getImpl`(v1) @signature `Lkotlin/random/AbstractPlatformRandom;.getImpl:()Ljava/util/Random;` @kind virtual;
  #L2b982c.  v0:= temp @kind object;
  #L2b982e.  call `nextBytes`(v0, v2) @signature `Ljava/util/Random;.nextBytes:([B)V` @kind virtual;
  #L2b9834.  return v2 @kind object;
}
procedure `double` `nextDouble`(`kotlin.random.AbstractPlatformRandom` v2 @kind this) @signature `Lkotlin/random/AbstractPlatformRandom;.nextDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b9848.  call temp:= `getImpl`(v2) @signature `Lkotlin/random/AbstractPlatformRandom;.getImpl:()Ljava/util/Random;` @kind virtual;
  #L2b984e.  v0:= temp @kind object;
  #L2b9850.  call temp:= `nextDouble`(v0) @signature `Ljava/util/Random;.nextDouble:()D` @kind virtual;
  #L2b9856.  v0:= temp @kind wide;
  #L2b9858.  return v0 @kind wide;
}
procedure `float` `nextFloat`(`kotlin.random.AbstractPlatformRandom` v1 @kind this) @signature `Lkotlin/random/AbstractPlatformRandom;.nextFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b986c.  call temp:= `getImpl`(v1) @signature `Lkotlin/random/AbstractPlatformRandom;.getImpl:()Ljava/util/Random;` @kind virtual;
  #L2b9872.  v0:= temp @kind object;
  #L2b9874.  call temp:= `nextFloat`(v0) @signature `Ljava/util/Random;.nextFloat:()F` @kind virtual;
  #L2b987a.  v0:= temp;
  #L2b987c.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.AbstractPlatformRandom` v1 @kind this) @signature `Lkotlin/random/AbstractPlatformRandom;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b98bc.  call temp:= `getImpl`(v1) @signature `Lkotlin/random/AbstractPlatformRandom;.getImpl:()Ljava/util/Random;` @kind virtual;
  #L2b98c2.  v0:= temp @kind object;
  #L2b98c4.  call temp:= `nextInt`(v0) @signature `Ljava/util/Random;.nextInt:()I` @kind virtual;
  #L2b98ca.  v0:= temp;
  #L2b98cc.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.AbstractPlatformRandom` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/AbstractPlatformRandom;.nextInt:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b98e0.  call temp:= `getImpl`(v1) @signature `Lkotlin/random/AbstractPlatformRandom;.getImpl:()Ljava/util/Random;` @kind virtual;
  #L2b98e6.  v0:= temp @kind object;
  #L2b98e8.  call temp:= `nextInt`(v0, v2) @signature `Ljava/util/Random;.nextInt:(I)I` @kind virtual;
  #L2b98ee.  v2:= temp;
  #L2b98f0.  return v2;
}
procedure `long` `nextLong`(`kotlin.random.AbstractPlatformRandom` v2 @kind this) @signature `Lkotlin/random/AbstractPlatformRandom;.nextLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b9904.  call temp:= `getImpl`(v2) @signature `Lkotlin/random/AbstractPlatformRandom;.getImpl:()Ljava/util/Random;` @kind virtual;
  #L2b990a.  v0:= temp @kind object;
  #L2b990c.  call temp:= `nextLong`(v0) @signature `Ljava/util/Random;.nextLong:()J` @kind virtual;
  #L2b9912.  v0:= temp @kind wide;
  #L2b9914.  return v0 @kind wide;
}
