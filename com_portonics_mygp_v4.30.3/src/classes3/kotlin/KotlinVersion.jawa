record `kotlin.KotlinVersion` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Comparable` @kind interface {
  `int` `kotlin.KotlinVersion.major` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.KotlinVersion.minor` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.KotlinVersion.patch` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.KotlinVersion.version` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.KotlinVersion` `@@kotlin.KotlinVersion.CURRENT` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.KotlinVersion$Companion` `@@kotlin.KotlinVersion.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlin.KotlinVersion.MAX_COMPONENT_VALUE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/KotlinVersion;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L296874.  v0:= new `kotlin.KotlinVersion$Companion`;
  #L296878.  v1:= 0I;
  #L29687a.  call `<init>`(v0, v1) @signature `Lkotlin/KotlinVersion$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L296880.  `@@kotlin.KotlinVersion.Companion` @type ^`kotlin.KotlinVersion$Companion` := v0 @kind object;
  #L296884.  call temp:= `get`() @signature `Lkotlin/KotlinVersionCurrentValue;.get:()Lkotlin/KotlinVersion;` @kind static;
  #L29688a.  v0:= temp @kind object;
  #L29688c.  `@@kotlin.KotlinVersion.CURRENT` @type ^`kotlin.KotlinVersion` := v0 @kind object;
  #L296890.  return @kind void;
}
procedure `void` `<init>`(`kotlin.KotlinVersion` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/KotlinVersion;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2968a4.  v0:= 0I;
  #L2968a6.  call `<init>`(v1, v2, v3, v0) @signature `Lkotlin/KotlinVersion;.<init>:(III)V` @kind direct;
  #L2968ac.  return @kind void;
}
procedure `void` `<init>`(`kotlin.KotlinVersion` v0 @kind this, `int` v1 , `int` v2 , `int` v3 ) @signature `Lkotlin/KotlinVersion;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2968c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2968c6.  v0.`kotlin.KotlinVersion.major` @type ^`int` := v1;
  #L2968ca.  v0.`kotlin.KotlinVersion.minor` @type ^`int` := v2;
  #L2968ce.  v0.`kotlin.KotlinVersion.patch` @type ^`int` := v3;
  #L2968d2.  call temp:= `versionOf`(v0, v1, v2, v3) @signature `Lkotlin/KotlinVersion;.versionOf:(III)I` @kind direct;
  #L2968d8.  v1:= temp;
  #L2968da.  v0.`kotlin.KotlinVersion.version` @type ^`int` := v1;
  #L2968de.  return @kind void;
}
procedure `int` `versionOf`(`kotlin.KotlinVersion` v4 @kind this, `int` v5 , `int` v6 , `int` v7 ) @signature `Lkotlin/KotlinVersion;.versionOf:(III)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L296768.  v0:= 256I;
  #L29676c.  v1:= 1I;
  #L29676e.  v2:= 0I;
  #L296770.  if v5 < 0 then goto L29677c;
  #L296774.  if v5 >= v0 then goto L29677c;
  #L296778.  v3:= 1I;
  #L29677a.  goto L29677e;
  #L29677c.  v3:= 0I;
  #L29677e.  if v3 == 0 then goto L2967a8;
  #L296782.  if v6 < 0 then goto L29678e;
  #L296786.  if v6 >= v0 then goto L29678e;
  #L29678a.  v3:= 1I;
  #L29678c.  goto L296790;
  #L29678e.  v3:= 0I;
  #L296790.  if v3 == 0 then goto L2967a8;
  #L296794.  if v7 < 0 then goto L2967a0;
  #L296798.  if v7 >= v0 then goto L2967a0;
  #L29679c.  v0:= 1I;
  #L29679e.  goto L2967a2;
  #L2967a0.  v0:= 0I;
  #L2967a2.  if v0 == 0 then goto L2967a8;
  #L2967a6.  goto L2967aa;
  #L2967a8.  v1:= 0I;
  #L2967aa.  if v1 == 0 then goto L2967bc;
  #L2967ae.  v5:= v5 ^< 16;
  #L2967b2.  v6:= v6 ^< 8;
  #L2967b6.  v5:= v5 + v6 @kind int;
  #L2967b8.  v5:= v5 + v7 @kind int;
  #L2967ba.  return v5;
  #L2967bc.  v0:= new `java.lang.StringBuilder`;
  #L2967c0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2967c6.  v1:= "Version components are out of range: " @kind object;
  #L2967ca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2967d0.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2967d6.  v5:= 46I;
  #L2967da.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2967e0.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2967e6.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2967ec.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2967f2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2967f8.  v5:= temp @kind object;
  #L2967fa.  v6:= new `java.lang.IllegalArgumentException`;
  #L2967fe.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L296804.  v5:= temp @kind object;
  #L296806.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29680c.  throw v6;
}
procedure `int` `compareTo`(`kotlin.KotlinVersion` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/KotlinVersion;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2966c0.  v1:= (`kotlin.KotlinVersion`) v1 @kind object;
  #L2966c4.  call temp:= `compareTo`(v0, v1) @signature `Lkotlin/KotlinVersion;.compareTo:(Lkotlin/KotlinVersion;)I` @kind virtual;
  #L2966ca.  v1:= temp;
  #L2966cc.  return v1;
}
procedure `int` `compareTo`(`kotlin.KotlinVersion` v1 @kind this, `kotlin.KotlinVersion` v2 @kind object) @signature `Lkotlin/KotlinVersion;.compareTo:(Lkotlin/KotlinVersion;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2966e0.  v0:= "other" @kind object;
  #L2966e4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2966ea.  v0:= v1.`kotlin.KotlinVersion.version` @type ^`int`;
  #L2966ee.  v2:= v2.`kotlin.KotlinVersion.version` @type ^`int`;
  #L2966f2.  v0:= v0 - v2 @kind int;
  #L2966f4.  return v0;
}
procedure `boolean` `equals`(`kotlin.KotlinVersion` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/KotlinVersion;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L296610.  v0:= 1I;
  #L296612.  if v3 != v4 then goto L296618;
  #L296616.  return v0;
  #L296618.  v1:= instanceof @variable v4 @type ^`kotlin.KotlinVersion` @kind boolean;
  #L29661c.  if v1 == 0 then goto L296626;
  #L296620.  v4:= (`kotlin.KotlinVersion`) v4 @kind object;
  #L296624.  goto L296628;
  #L296626.  v4:= 0I;
  #L296628.  v1:= 0I;
  #L29662a.  if v4 != 0 then goto L296630;
  #L29662e.  return v1;
  #L296630.  v2:= v3.`kotlin.KotlinVersion.version` @type ^`int`;
  #L296634.  v4:= v4.`kotlin.KotlinVersion.version` @type ^`int`;
  #L296638.  if v2 != v4 then goto L29663e;
  #L29663c.  goto L296640;
  #L29663e.  v0:= 0I;
  #L296640.  return v0;
}
procedure `int` `getMajor`(`kotlin.KotlinVersion` v1 @kind this) @signature `Lkotlin/KotlinVersion;.getMajor:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L296708.  v0:= v1.`kotlin.KotlinVersion.major` @type ^`int`;
  #L29670c.  return v0;
}
procedure `int` `getMinor`(`kotlin.KotlinVersion` v1 @kind this) @signature `Lkotlin/KotlinVersion;.getMinor:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L296720.  v0:= v1.`kotlin.KotlinVersion.minor` @type ^`int`;
  #L296724.  return v0;
}
procedure `int` `getPatch`(`kotlin.KotlinVersion` v1 @kind this) @signature `Lkotlin/KotlinVersion;.getPatch:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L296738.  v0:= v1.`kotlin.KotlinVersion.patch` @type ^`int`;
  #L29673c.  return v0;
}
procedure `int` `hashCode`(`kotlin.KotlinVersion` v1 @kind this) @signature `Lkotlin/KotlinVersion;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L296750.  v0:= v1.`kotlin.KotlinVersion.version` @type ^`int`;
  #L296754.  return v0;
}
procedure `boolean` `isAtLeast`(`kotlin.KotlinVersion` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/KotlinVersion;.isAtLeast:(II)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L296654.  v0:= v1.`kotlin.KotlinVersion.major` @type ^`int`;
  #L296658.  if v0 > v2 then goto L29666e;
  #L29665c.  if v0 != v2 then goto L29666a;
  #L296660.  v2:= v1.`kotlin.KotlinVersion.minor` @type ^`int`;
  #L296664.  if v2 < v3 then goto L29666a;
  #L296668.  goto L29666e;
  #L29666a.  v2:= 0I;
  #L29666c.  goto L296670;
  #L29666e.  v2:= 1I;
  #L296670.  return v2;
}
procedure `boolean` `isAtLeast`(`kotlin.KotlinVersion` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lkotlin/KotlinVersion;.isAtLeast:(III)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L296684.  v0:= v1.`kotlin.KotlinVersion.major` @type ^`int`;
  #L296688.  if v0 > v2 then goto L2966aa;
  #L29668c.  if v0 != v2 then goto L2966a6;
  #L296690.  v2:= v1.`kotlin.KotlinVersion.minor` @type ^`int`;
  #L296694.  if v2 > v3 then goto L2966aa;
  #L296698.  if v2 != v3 then goto L2966a6;
  #L29669c.  v2:= v1.`kotlin.KotlinVersion.patch` @type ^`int`;
  #L2966a0.  if v2 < v4 then goto L2966a6;
  #L2966a4.  goto L2966aa;
  #L2966a6.  v2:= 0I;
  #L2966a8.  goto L2966ac;
  #L2966aa.  v2:= 1I;
  #L2966ac.  return v2;
}
procedure `java.lang.String` `toString`(`kotlin.KotlinVersion` v3 @kind this) @signature `Lkotlin/KotlinVersion;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L296820.  v0:= new `java.lang.StringBuilder`;
  #L296824.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L29682a.  v1:= v3.`kotlin.KotlinVersion.major` @type ^`int`;
  #L29682e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L296834.  v1:= 46I;
  #L296838.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L29683e.  v2:= v3.`kotlin.KotlinVersion.minor` @type ^`int`;
  #L296842.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L296848.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L29684e.  v1:= v3.`kotlin.KotlinVersion.patch` @type ^`int`;
  #L296852.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L296858.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L29685e.  v0:= temp @kind object;
  #L296860.  return v0 @kind object;
}
