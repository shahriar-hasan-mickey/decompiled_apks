record `kotlin.UnsignedKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `doubleToUInt`(`double` v5 ) @signature `Lkotlin/UnsignedKt;.doubleToUInt:(D)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L29dd54.  call temp:= `isNaN`(v5) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L29dd5a.  v0:= temp;
  #L29dd5c.  v1:= -1I;
  #L29dd5e.  v2:= 0I;
  #L29dd60.  if v0 == 0 then goto L29dd68;
  #L29dd64.  v1:= 0I;
  #L29dd66.  goto L29ddd6;
  #L29dd68.  call temp:= `uintToDouble`(v2) @signature `Lkotlin/UnsignedKt;.uintToDouble:(I)D` @kind static;
  #L29dd6e.  v3:= temp @kind wide;
  #L29dd70.  v0:= dcmpg(v5, v3);
  #L29dd74.  if v0 > 0 then goto L29dd7a;
  #L29dd78.  goto L29dd64;
  #L29dd7a.  call temp:= `uintToDouble`(v1) @signature `Lkotlin/UnsignedKt;.uintToDouble:(I)D` @kind static;
  #L29dd80.  v2:= temp @kind wide;
  #L29dd82.  v0:= dcmpl(v5, v2);
  #L29dd86.  if v0 < 0 then goto L29dd8c;
  #L29dd8a.  goto L29ddd6;
  #L29dd8c.  v0:= 2.147483647E9D;
  #L29dd96.  v2:= dcmpg(v5, v0);
  #L29dd9a.  if v2 > 0 then goto L29ddaa;
  #L29dd9e.  v5:= (`int`) v5 @kind d2i;
  #L29dda0.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L29dda6.  v1:= temp;
  #L29dda8.  goto L29ddd6;
  #L29ddaa.  v0:= 2147483647I;
  #L29ddb0.  v1:= (`double`) v0 @kind i2d;
  #L29ddb2.  call temp:= `isNaN`(v1) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L29ddb8.  v5:= v5 - v1 @kind double;
  #L29ddba.  v5:= (`int`) v5 @kind d2i;
  #L29ddbc.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L29ddc2.  v5:= temp;
  #L29ddc4.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L29ddca.  v6:= temp;
  #L29ddcc.  v5:= v5 + v6 @kind int;
  #L29ddce.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L29ddd4.  v1:= temp;
  #L29ddd6.  return v1;
}
procedure `long` `doubleToULong`(`double` v7 ) @signature `Lkotlin/UnsignedKt;.doubleToULong:(D)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L29df58.  call temp:= `isNaN`(v7) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L29df5e.  v0:= temp;
  #L29df60.  v1:= -1L;
  #L29df64.  v3:= 0L;
  #L29df68.  if v0 == 0 then goto L29df70;
  #L29df6c.  v1:= v3 @kind wide;
  #L29df6e.  goto L29dfc6;
  #L29df70.  call temp:= `ulongToDouble`(v3) @signature `Lkotlin/UnsignedKt;.ulongToDouble:(J)D` @kind static;
  #L29df76.  v5:= temp @kind wide;
  #L29df78.  v0:= dcmpg(v7, v5);
  #L29df7c.  if v0 > 0 then goto L29df82;
  #L29df80.  goto L29df6c;
  #L29df82.  call temp:= `ulongToDouble`(v1) @signature `Lkotlin/UnsignedKt;.ulongToDouble:(J)D` @kind static;
  #L29df88.  v3:= temp @kind wide;
  #L29df8a.  v0:= dcmpl(v7, v3);
  #L29df8e.  if v0 < 0 then goto L29df94;
  #L29df92.  goto L29dfc6;
  #L29df94.  v0:= 9.223372036854776E18D;
  #L29df98.  v2:= dcmpg(v7, v0);
  #L29df9c.  if v2 >= 0 then goto L29dfac;
  #L29dfa0.  v7:= (`long`) v7 @kind d2l;
  #L29dfa2.  call temp:= `constructor-impl`(v7) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L29dfa8.  v1:= temp @kind wide;
  #L29dfaa.  goto L29dfc6;
  #L29dfac.  v7:= v7 - v0 @kind double;
  #L29dfae.  v7:= (`long`) v7 @kind d2l;
  #L29dfb0.  call temp:= `constructor-impl`(v7) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L29dfb6.  v7:= temp @kind wide;
  #L29dfb8.  v0:= -9223372036854775808L;
  #L29dfbc.  v7:= v7 + v0 @kind long;
  #L29dfbe.  call temp:= `constructor-impl`(v7) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L29dfc4.  v1:= temp @kind wide;
  #L29dfc6.  return v1 @kind wide;
}
procedure `int` `uintCompare`(`int` v1 , `int` v2 ) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L29dde8.  v0:= -2147483648I;
  #L29ddec.  v1:= v1 ^~ v0 @kind int;
  #L29ddee.  v2:= v2 ^~ v0 @kind int;
  #L29ddf0.  call temp:= `compare`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L29ddf6.  v1:= temp;
  #L29ddf8.  return v1;
}
procedure `int` `uintDivide-J1ME1BU`(`int` v4 , `int` v5 ) @signature `Lkotlin/UnsignedKt;.uintDivide-J1ME1BU:(II)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L29de0c.  v0:= (`long`) v4 @kind i2l;
  #L29de0e.  v2:= 4294967295L;
  #L29de18.  v0:= v0 ^& v2 @kind long;
  #L29de1a.  v4:= (`long`) v5 @kind i2l;
  #L29de1c.  v4:= v4 ^& v2 @kind long;
  #L29de1e.  v0:= v0 / v4 @kind long;
  #L29de20.  v4:= (`int`) v0 @kind l2i;
  #L29de22.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L29de28.  v4:= temp;
  #L29de2a.  return v4;
}
procedure `int` `uintRemainder-J1ME1BU`(`int` v4 , `int` v5 ) @signature `Lkotlin/UnsignedKt;.uintRemainder-J1ME1BU:(II)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L29de3c.  v0:= (`long`) v4 @kind i2l;
  #L29de3e.  v2:= 4294967295L;
  #L29de48.  v0:= v0 ^& v2 @kind long;
  #L29de4a.  v4:= (`long`) v5 @kind i2l;
  #L29de4c.  v4:= v4 ^& v2 @kind long;
  #L29de4e.  v0:= v0 %% v4 @kind long;
  #L29de50.  v4:= (`int`) v0 @kind l2i;
  #L29de52.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L29de58.  v4:= temp;
  #L29de5a.  return v4;
}
procedure `double` `uintToDouble`(`int` v6 ) @signature `Lkotlin/UnsignedKt;.uintToDouble:(I)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L29dccc.  v0:= 2147483647I;
  #L29dcd2.  v0:= v0 ^& v6 @kind int;
  #L29dcd4.  v0:= (`double`) v0 @kind i2d;
  #L29dcd6.  v6:= v6 ^>> 31;
  #L29dcda.  v6:= v6 ^< 30;
  #L29dcde.  v2:= (`double`) v6 @kind i2d;
  #L29dce0.  v6:= 2I;
  #L29dce2.  v4:= (`double`) v6 @kind i2d;
  #L29dce4.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L29dcea.  call temp:= `isNaN`(v4) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L29dcf0.  v2:= v2 * v4 @kind double;
  #L29dcf4.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L29dcfa.  v0:= v0 + v2 @kind double;
  #L29dcfc.  return v0 @kind wide;
}
procedure `int` `ulongCompare`(`long` v2 , `long` v4 ) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L29de6c.  v0:= -9223372036854775808L;
  #L29de70.  v2:= v2 ^~ v0 @kind long;
  #L29de72.  v4:= v4 ^~ v0 @kind long;
  #L29de74.  call temp:= `compare`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(JJ)I` @kind static;
  #L29de7a.  v2:= temp;
  #L29de7c.  return v2;
}
procedure `long` `ulongDivide-eb3DHEI`(`long` v5 , `long` v7 ) @signature `Lkotlin/UnsignedKt;.ulongDivide-eb3DHEI:(JJ)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L29dfd8.  v0:= 0L;
  #L29dfdc.  v2:= lcmp(v7, v0);
  #L29dfe0.  if v2 >= 0 then goto L29e008;
  #L29dfe4.  call temp:= `ulongCompare`(v5, v7) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L29dfea.  v5:= temp;
  #L29dfec.  if v5 >= 0 then goto L29dffa;
  #L29dff0.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L29dff6.  v5:= temp @kind wide;
  #L29dff8.  goto L29e006;
  #L29dffa.  v5:= 1L;
  #L29dffe.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L29e004.  v5:= temp @kind wide;
  #L29e006.  return v5 @kind wide;
  #L29e008.  v2:= lcmp(v5, v0);
  #L29e00c.  if v2 < 0 then goto L29e01c;
  #L29e010.  v5:= v5 / v7 @kind long;
  #L29e012.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L29e018.  v5:= temp @kind wide;
  #L29e01a.  return v5 @kind wide;
  #L29e01c.  v0:= 1I;
  #L29e01e.  v1:= v5 ^>> v0 @kind long;
  #L29e022.  v1:= v1 / v7 @kind long;
  #L29e024.  v1:= v1 ^< v0 @kind long;
  #L29e026.  v3:= v1 * v7 @kind long;
  #L29e02a.  v5:= v5 - v3 @kind long;
  #L29e02c.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L29e032.  v5:= temp @kind wide;
  #L29e034.  call temp:= `constructor-impl`(v7) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L29e03a.  v7:= temp @kind wide;
  #L29e03c.  call temp:= `ulongCompare`(v5, v7) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L29e042.  v5:= temp;
  #L29e044.  if v5 < 0 then goto L29e04a;
  #L29e048.  goto L29e04c;
  #L29e04a.  v0:= 0I;
  #L29e04c.  v5:= (`long`) v0 @kind i2l;
  #L29e04e.  v1:= v1 + v5 @kind long;
  #L29e050.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L29e056.  v5:= temp @kind wide;
  #L29e058.  return v5 @kind wide;
}
procedure `long` `ulongRemainder-eb3DHEI`(`long` v6 , `long` v8 ) @signature `Lkotlin/UnsignedKt;.ulongRemainder-eb3DHEI:(JJ)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L29e06c.  v0:= 0L;
  #L29e070.  v2:= lcmp(v8, v0);
  #L29e074.  if v2 >= 0 then goto L29e092;
  #L29e078.  call temp:= `ulongCompare`(v6, v8) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L29e07e.  v0:= temp;
  #L29e080.  if v0 >= 0 then goto L29e086;
  #L29e084.  goto L29e090;
  #L29e086.  v6:= v6 - v8 @kind long;
  #L29e088.  call temp:= `constructor-impl`(v6) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L29e08e.  v6:= temp @kind wide;
  #L29e090.  return v6 @kind wide;
  #L29e092.  v2:= lcmp(v6, v0);
  #L29e096.  if v2 < 0 then goto L29e0a6;
  #L29e09a.  v6:= v6 %% v8 @kind long;
  #L29e09c.  call temp:= `constructor-impl`(v6) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L29e0a2.  v6:= temp @kind wide;
  #L29e0a4.  return v6 @kind wide;
  #L29e0a6.  v2:= 1I;
  #L29e0a8.  v3:= v6 ^>> v2 @kind long;
  #L29e0ac.  v3:= v3 / v8 @kind long;
  #L29e0ae.  v2:= v3 ^< v2 @kind long;
  #L29e0b2.  v2:= v2 * v8 @kind long;
  #L29e0b6.  v6:= v6 - v2 @kind long;
  #L29e0b8.  call temp:= `constructor-impl`(v6) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L29e0be.  v2:= temp @kind wide;
  #L29e0c0.  call temp:= `constructor-impl`(v8) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L29e0c6.  v4:= temp @kind wide;
  #L29e0c8.  call temp:= `ulongCompare`(v2, v4) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L29e0ce.  v2:= temp;
  #L29e0d0.  if v2 < 0 then goto L29e0d6;
  #L29e0d4.  goto L29e0d8;
  #L29e0d6.  v8:= v0 @kind wide;
  #L29e0d8.  v6:= v6 - v8 @kind long;
  #L29e0da.  call temp:= `constructor-impl`(v6) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L29e0e0.  v6:= temp @kind wide;
  #L29e0e2.  return v6 @kind wide;
}
procedure `double` `ulongToDouble`(`long` v4 ) @signature `Lkotlin/UnsignedKt;.ulongToDouble:(J)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L29dd10.  v0:= 11I;
  #L29dd14.  v0:= v4 ^>> v0 @kind long;
  #L29dd18.  v0:= (`double`) v0 @kind l2d;
  #L29dd1a.  v2:= 2048I;
  #L29dd1e.  v2:= (`double`) v2 @kind i2d;
  #L29dd20.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L29dd26.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L29dd2c.  v0:= v0 * v2 @kind double;
  #L29dd30.  v2:= 2047L;
  #L29dd34.  v4:= v4 ^& v2 @kind long;
  #L29dd36.  v4:= (`double`) v4 @kind l2d;
  #L29dd38.  call temp:= `isNaN`(v4) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L29dd3e.  v0:= v0 + v4 @kind double;
  #L29dd40.  return v0 @kind wide;
}
procedure `java.lang.String` `ulongToString`(`long` v1 ) @signature `Lkotlin/UnsignedKt;.ulongToString:(J)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L29de90.  v0:= 10I;
  #L29de94.  call temp:= `ulongToString`(v1, v0) @signature `Lkotlin/UnsignedKt;.ulongToString:(JI)Ljava/lang/String;` @kind static;
  #L29de9a.  v1:= temp @kind object;
  #L29de9c.  return v1 @kind object;
}
procedure `java.lang.String` `ulongToString`(`long` v8 , `int` v10 ) @signature `Lkotlin/UnsignedKt;.ulongToString:(JI)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L29deb0.  v0:= "toString(this, checkRadix(radix))" @kind object;
  #L29deb4.  v1:= 0L;
  #L29deb8.  v3:= lcmp(v8, v1);
  #L29debc.  if v3 < 0 then goto L29ded8;
  #L29dec0.  call temp:= `checkRadix`(v10) @signature `Lkotlin/text/CharsKt;.checkRadix:(I)I` @kind static;
  #L29dec6.  v10:= temp;
  #L29dec8.  call temp:= `toString`(v8, v10) @signature `Ljava/lang/Long;.toString:(JI)Ljava/lang/String;` @kind static;
  #L29dece.  v8:= temp @kind object;
  #L29ded0.  call `checkNotNullExpressionValue`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29ded6.  return v8 @kind object;
  #L29ded8.  v1:= 1I;
  #L29deda.  v2:= v8 ^>> v1 @kind long;
  #L29dede.  v4:= (`long`) v10 @kind i2l;
  #L29dee0.  v2:= v2 / v4 @kind long;
  #L29dee2.  v1:= v2 ^< v1 @kind long;
  #L29dee6.  v6:= v1 * v4 @kind long;
  #L29deea.  v8:= v8 - v6 @kind long;
  #L29deec.  v3:= lcmp(v8, v4);
  #L29def0.  if v3 < 0 then goto L29defc;
  #L29def4.  v8:= v8 - v4 @kind long;
  #L29def6.  v3:= 1L;
  #L29defa.  v1:= v1 + v3 @kind long;
  #L29defc.  v3:= new `java.lang.StringBuilder`;
  #L29df00.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L29df06.  call temp:= `checkRadix`(v10) @signature `Lkotlin/text/CharsKt;.checkRadix:(I)I` @kind static;
  #L29df0c.  v4:= temp;
  #L29df0e.  call temp:= `toString`(v1, v4) @signature `Ljava/lang/Long;.toString:(JI)Ljava/lang/String;` @kind static;
  #L29df14.  v1:= temp @kind object;
  #L29df16.  call `checkNotNullExpressionValue`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29df1c.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29df22.  call temp:= `checkRadix`(v10) @signature `Lkotlin/text/CharsKt;.checkRadix:(I)I` @kind static;
  #L29df28.  v10:= temp;
  #L29df2a.  call temp:= `toString`(v8, v10) @signature `Ljava/lang/Long;.toString:(JI)Ljava/lang/String;` @kind static;
  #L29df30.  v8:= temp @kind object;
  #L29df32.  call `checkNotNullExpressionValue`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29df38.  call temp:= `append`(v3, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29df3e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L29df44.  v8:= temp @kind object;
  #L29df46.  return v8 @kind object;
}
