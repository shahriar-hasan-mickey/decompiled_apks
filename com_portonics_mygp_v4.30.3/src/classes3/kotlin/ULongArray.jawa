record `kotlin.ULongArray` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Collection` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `long`[] `kotlin.ULongArray.storage` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ULongArray` v0 @kind this, `long`[] v1 @kind object) @signature `Lkotlin/ULongArray;.<init>:([J)V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L29bbec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29bbf2.  v0.`kotlin.ULongArray.storage` @type ^`long`[] := v1 @kind object;
  #L29bbf6.  return @kind void;
}
procedure `kotlin.ULongArray` `box-impl`(`long`[] v1 @kind object) @signature `Lkotlin/ULongArray;.box-impl:([J)Lkotlin/ULongArray;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L29bb5c.  v0:= new `kotlin.ULongArray`;
  #L29bb60.  call `<init>`(v0, v1) @signature `Lkotlin/ULongArray;.<init>:([J)V` @kind direct;
  #L29bb66.  return v0 @kind object;
}
procedure `long`[] `constructor-impl`(`int` v0 ) @signature `Lkotlin/ULongArray;.constructor-impl:(I)[J` @AccessFlag PUBLIC_STATIC {
    temp;

  #L29bb98.  v0:= new `long`[v0];
  #L29bb9c.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/ULongArray;.constructor-impl:([J)[J` @kind static;
  #L29bba2.  v0:= temp @kind object;
  #L29bba4.  return v0 @kind object;
}
procedure `long`[] `constructor-impl`(`long`[] v1 @kind object) @signature `Lkotlin/ULongArray;.constructor-impl:([J)[J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L29bbb8.  v0:= "storage" @kind object;
  #L29bbbc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29bbc2.  return v1 @kind object;
}
procedure `boolean` `contains-VKZWuLQ`(`long`[] v0 @kind object, `long` v1 ) @signature `Lkotlin/ULongArray;.contains-VKZWuLQ:([JJ)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L29b818.  call temp:= `contains`(v0, v1) @signature `Lkotlin/collections/ArraysKt;.contains:([JJ)Z` @kind static;
  #L29b81e.  v0:= temp;
  #L29b820.  return v0;
}
procedure `boolean` `containsAll-impl`(`long`[] v5 @kind object, `java.util.Collection` v6 @kind object) @signature `Lkotlin/ULongArray;.containsAll-impl:([JLjava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L29b85c.  v0:= "elements" @kind object;
  #L29b860.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29b866.  call temp:= `isEmpty`(v6) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L29b86c.  v0:= temp;
  #L29b86e.  v1:= 0I;
  #L29b870.  v2:= 1I;
  #L29b872.  if v0 == 0 then goto L29b87a;
  #L29b876.  v1:= 1I;
  #L29b878.  goto L29b8c0;
  #L29b87a.  call temp:= `iterator`(v6) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29b880.  v6:= temp @kind object;
  #L29b882.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29b888.  v0:= temp;
  #L29b88a.  if v0 == 0 then goto L29b876;
  #L29b88e.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29b894.  v0:= temp @kind object;
  #L29b896.  v3:= instanceof @variable v0 @type ^`kotlin.ULong` @kind boolean;
  #L29b89a.  if v3 == 0 then goto L29b8ba;
  #L29b89e.  v0:= (`kotlin.ULong`) v0 @kind object;
  #L29b8a2.  call temp:= `unbox-impl`(v0) @signature `Lkotlin/ULong;.unbox-impl:()J` @kind virtual;
  #L29b8a8.  v3:= temp @kind wide;
  #L29b8aa.  call temp:= `contains`(v5, v3) @signature `Lkotlin/collections/ArraysKt;.contains:([JJ)Z` @kind static;
  #L29b8b0.  v0:= temp;
  #L29b8b2.  if v0 == 0 then goto L29b8ba;
  #L29b8b6.  v0:= 1I;
  #L29b8b8.  goto L29b8bc;
  #L29b8ba.  v0:= 0I;
  #L29b8bc.  if v0 != 0 then goto L29b882;
  #L29b8c0.  return v1;
}
procedure `boolean` `equals-impl`(`long`[] v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ULongArray;.equals-impl:([JLjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L29b8f4.  v0:= instanceof @variable v3 @type ^`kotlin.ULongArray` @kind boolean;
  #L29b8f8.  v1:= 0I;
  #L29b8fa.  if v0 != 0 then goto L29b900;
  #L29b8fe.  return v1;
  #L29b900.  v3:= (`kotlin.ULongArray`) v3 @kind object;
  #L29b904.  call temp:= `unbox-impl`(v3) @signature `Lkotlin/ULongArray;.unbox-impl:()[J` @kind virtual;
  #L29b90a.  v3:= temp @kind object;
  #L29b90c.  call temp:= `areEqual`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L29b912.  v2:= temp;
  #L29b914.  if v2 != 0 then goto L29b91a;
  #L29b918.  return v1;
  #L29b91a.  v2:= 1I;
  #L29b91c.  return v2;
}
procedure `boolean` `equals-impl0`(`long`[] v0 @kind object, `long`[] v1 @kind object) @signature `Lkotlin/ULongArray;.equals-impl0:([J[J)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L29b930.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L29b936.  v0:= temp;
  #L29b938.  return v0;
}
procedure `long` `get-s-VKNKU`(`long`[] v2 @kind object, `int` v3 ) @signature `Lkotlin/ULongArray;.get-s-VKNKU:([JI)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L29bb78.  v0:= v2[v3] @kind wide;
  #L29bb7c.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L29bb82.  v2:= temp @kind wide;
  #L29bb84.  return v2 @kind wide;
}
procedure `int` `getSize-impl`(`long`[] v0 @kind object) @signature `Lkotlin/ULongArray;.getSize-impl:([J)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L29ba0c.  v0:= length @variable v0;
  #L29ba0e.  return v0;
}
procedure `void` `getStorage$annotations`() @signature `Lkotlin/ULongArray;.getStorage$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L29bc28.  return @kind void;
}
procedure `int` `hashCode-impl`(`long`[] v0 @kind object) @signature `Lkotlin/ULongArray;.hashCode-impl:([J)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L29ba40.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([J)I` @kind static;
  #L29ba46.  v0:= temp;
  #L29ba48.  return v0;
}
procedure `boolean` `isEmpty-impl`(`long`[] v0 @kind object) @signature `Lkotlin/ULongArray;.isEmpty-impl:([J)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L29b96c.  v0:= length @variable v0;
  #L29b96e.  if v0 != 0 then goto L29b976;
  #L29b972.  v0:= 1I;
  #L29b974.  goto L29b978;
  #L29b976.  v0:= 0I;
  #L29b978.  return v0;
}
procedure `java.util.Iterator` `iterator-impl`(`long`[] v1 @kind object) @signature `Lkotlin/ULongArray;.iterator-impl:([J)Ljava/util/Iterator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L29bb40.  v0:= new `kotlin.ULongArray$Iterator`;
  #L29bb44.  call `<init>`(v0, v1) @signature `Lkotlin/ULongArray$Iterator;.<init>:([J)V` @kind direct;
  #L29bb4a.  return v0 @kind object;
}
procedure `void` `set-k8EXiF4`(`long`[] v0 @kind object, `int` v1 , `long` v2 ) @signature `Lkotlin/ULongArray;.set-k8EXiF4:([JIJ)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L29bc3c.  v0[v1]:= v2 @kind wide;
  #L29bc40.  return @kind void;
}
procedure `java.lang.String` `toString-impl`(`long`[] v2 @kind object) @signature `Lkotlin/ULongArray;.toString-impl:([J)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L29bad8.  v0:= new `java.lang.StringBuilder`;
  #L29badc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L29bae2.  v1:= "ULongArray(storage=" @kind object;
  #L29bae6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29baec.  call temp:= `toString`(v2) @signature `Ljava/util/Arrays;.toString:([J)Ljava/lang/String;` @kind static;
  #L29baf2.  v2:= temp @kind object;
  #L29baf4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29bafa.  v2:= 41I;
  #L29bafe.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L29bb04.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L29bb0a.  v2:= temp @kind object;
  #L29bb0c.  return v2 @kind object;
}
procedure `boolean` `add`(`kotlin.ULongArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/ULongArray;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L29b764.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29b768.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29b76c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29b772.  throw v2;
}
procedure `boolean` `add-VKZWuLQ`(`kotlin.ULongArray` v0 @kind this, `long` v1 ) @signature `Lkotlin/ULongArray;.add-VKZWuLQ:(J)Z` @AccessFlag PUBLIC {
    temp;

  #L29b784.  v1:= new `java.lang.UnsupportedOperationException`;
  #L29b788.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L29b78c.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29b792.  throw v1;
}
procedure `boolean` `addAll`(`kotlin.ULongArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/ULongArray;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29b7a4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29b7a8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29b7ac.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29b7b2.  throw v2;
}
procedure `void` `clear`(`kotlin.ULongArray` v2 @kind this) @signature `Lkotlin/ULongArray;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29bc08.  v0:= new `java.lang.UnsupportedOperationException`;
  #L29bc0c.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L29bc10.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29bc16.  throw v0;
}
procedure `boolean` `contains`(`kotlin.ULongArray` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ULongArray;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L29b7c4.  v0:= instanceof @variable v3 @type ^`kotlin.ULong` @kind boolean;
  #L29b7c8.  if v0 != 0 then goto L29b7d0;
  #L29b7cc.  v3:= 0I;
  #L29b7ce.  return v3;
  #L29b7d0.  v3:= (`kotlin.ULong`) v3 @kind object;
  #L29b7d4.  call temp:= `unbox-impl`(v3) @signature `Lkotlin/ULong;.unbox-impl:()J` @kind virtual;
  #L29b7da.  v0:= temp @kind wide;
  #L29b7dc.  call temp:= `contains-VKZWuLQ`(v2, v0) @signature `Lkotlin/ULongArray;.contains-VKZWuLQ:(J)Z` @kind virtual;
  #L29b7e2.  v3:= temp;
  #L29b7e4.  return v3;
}
procedure `boolean` `contains-VKZWuLQ`(`kotlin.ULongArray` v1 @kind this, `long` v2 ) @signature `Lkotlin/ULongArray;.contains-VKZWuLQ:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29b7f8.  v0:= v1.`kotlin.ULongArray.storage` @type ^`long`[] @kind object;
  #L29b7fc.  call temp:= `contains-VKZWuLQ`(v0, v2) @signature `Lkotlin/ULongArray;.contains-VKZWuLQ:([JJ)Z` @kind static;
  #L29b802.  v2:= temp;
  #L29b804.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.ULongArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/ULongArray;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29b834.  v0:= "elements" @kind object;
  #L29b838.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29b83e.  v0:= v1.`kotlin.ULongArray.storage` @type ^`long`[] @kind object;
  #L29b842.  call temp:= `containsAll-impl`(v0, v2) @signature `Lkotlin/ULongArray;.containsAll-impl:([JLjava/util/Collection;)Z` @kind static;
  #L29b848.  v2:= temp;
  #L29b84a.  return v2;
}
procedure `boolean` `equals`(`kotlin.ULongArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/ULongArray;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29b8d4.  v0:= v1.`kotlin.ULongArray.storage` @type ^`long`[] @kind object;
  #L29b8d8.  call temp:= `equals-impl`(v0, v2) @signature `Lkotlin/ULongArray;.equals-impl:([JLjava/lang/Object;)Z` @kind static;
  #L29b8de.  v2:= temp;
  #L29b8e0.  return v2;
}
procedure `int` `getSize`(`kotlin.ULongArray` v1 @kind this) @signature `Lkotlin/ULongArray;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29b9ec.  v0:= v1.`kotlin.ULongArray.storage` @type ^`long`[] @kind object;
  #L29b9f0.  call temp:= `getSize-impl`(v0) @signature `Lkotlin/ULongArray;.getSize-impl:([J)I` @kind static;
  #L29b9f6.  v0:= temp;
  #L29b9f8.  return v0;
}
procedure `int` `hashCode`(`kotlin.ULongArray` v1 @kind this) @signature `Lkotlin/ULongArray;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ba20.  v0:= v1.`kotlin.ULongArray.storage` @type ^`long`[] @kind object;
  #L29ba24.  call temp:= `hashCode-impl`(v0) @signature `Lkotlin/ULongArray;.hashCode-impl:([J)I` @kind static;
  #L29ba2a.  v0:= temp;
  #L29ba2c.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ULongArray` v1 @kind this) @signature `Lkotlin/ULongArray;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29b94c.  v0:= v1.`kotlin.ULongArray.storage` @type ^`long`[] @kind object;
  #L29b950.  call temp:= `isEmpty-impl`(v0) @signature `Lkotlin/ULongArray;.isEmpty-impl:([J)Z` @kind static;
  #L29b956.  v0:= temp;
  #L29b958.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.ULongArray` v1 @kind this) @signature `Lkotlin/ULongArray;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29bb20.  v0:= v1.`kotlin.ULongArray.storage` @type ^`long`[] @kind object;
  #L29bb24.  call temp:= `iterator-impl`(v0) @signature `Lkotlin/ULongArray;.iterator-impl:([J)Ljava/util/Iterator;` @kind static;
  #L29bb2a.  v0:= temp @kind object;
  #L29bb2c.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.ULongArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/ULongArray;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29b98c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29b990.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29b994.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29b99a.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.ULongArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/ULongArray;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29b9ac.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29b9b0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29b9b4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29b9ba.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.ULongArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/ULongArray;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29b9cc.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29b9d0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29b9d4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29b9da.  throw v2;
}
procedure `int` `size`(`kotlin.ULongArray` v1 @kind this) @signature `Lkotlin/ULongArray;.size:()I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L29ba5c.  call temp:= `getSize`(v1) @signature `Lkotlin/ULongArray;.getSize:()I` @kind virtual;
  #L29ba62.  v0:= temp;
  #L29ba64.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.ULongArray` v1 @kind this) @signature `Lkotlin/ULongArray;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ba78.  call temp:= `toArray`(v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L29ba7e.  v0:= temp @kind object;
  #L29ba80.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.ULongArray` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/ULongArray;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ba94.  v0:= "array" @kind object;
  #L29ba98.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29ba9e.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L29baa4.  v2:= temp @kind object;
  #L29baa6.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.ULongArray` v1 @kind this) @signature `Lkotlin/ULongArray;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29bab8.  v0:= v1.`kotlin.ULongArray.storage` @type ^`long`[] @kind object;
  #L29babc.  call temp:= `toString-impl`(v0) @signature `Lkotlin/ULongArray;.toString-impl:([J)Ljava/lang/String;` @kind static;
  #L29bac2.  v0:= temp @kind object;
  #L29bac4.  return v0 @kind object;
}
procedure `long`[] `unbox-impl`(`kotlin.ULongArray` v1 @kind this) @signature `Lkotlin/ULongArray;.unbox-impl:()[J` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L29bbd4.  v0:= v1.`kotlin.ULongArray.storage` @type ^`long`[] @kind object;
  #L29bbd8.  return v0 @kind object;
}
