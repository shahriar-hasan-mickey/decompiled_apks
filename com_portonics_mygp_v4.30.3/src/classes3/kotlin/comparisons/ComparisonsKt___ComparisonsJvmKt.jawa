record `kotlin.comparisons.ComparisonsKt___ComparisonsJvmKt` @kind class @AccessFlag  extends `kotlin.comparisons.ComparisonsKt__ComparisonsKt` @kind class {
}
procedure `void` `<init>`(`kotlin.comparisons.ComparisonsKt___ComparisonsJvmKt` v0 @kind this) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2ac114.  call `<init>`(v0) @signature `Lkotlin/comparisons/ComparisonsKt__ComparisonsKt;.<init>:()V` @kind direct;
  #L2ac11a.  return @kind void;
}
procedure `byte` `maxOf`(`byte` v0 , `byte` v1 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(BB)B` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2aba04.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2aba0a.  v0:= temp;
  #L2aba0c.  v0:= (`byte`) v0 @kind i2b;
  #L2aba0e.  return v0;
}
procedure `byte` `maxOf`(`byte` v0 , `byte` v1 , `byte` v2 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(BBB)B` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2aba20.  call temp:= `max`(v1, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2aba26.  v1:= temp;
  #L2aba28.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2aba2e.  v0:= temp;
  #L2aba30.  v0:= (`byte`) v0 @kind i2b;
  #L2aba32.  return v0;
}
procedure `byte` `maxOf`(`byte` v3 , `byte`[] v4 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(B[B)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2aba44.  v0:= "other" @kind object;
  #L2aba48.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2aba4e.  v0:= length @variable v4;
  #L2aba50.  v1:= 0I;
  #L2aba52.  if v1 >= v0 then goto L2aba6a;
  #L2aba56.  v2:= v4[v1] @kind byte;
  #L2aba5a.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2aba60.  v3:= temp;
  #L2aba62.  v3:= (`byte`) v3 @kind i2b;
  #L2aba64.  v1:= v1 + 1;
  #L2aba68.  goto L2aba52;
  #L2aba6a.  return v3;
}
procedure `double` `maxOf`(`double` v0 , `double` v2 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(DD)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2abaf4.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(DD)D` @kind static;
  #L2abafa.  v0:= temp @kind wide;
  #L2abafc.  return v0 @kind wide;
}
procedure `double` `maxOf`(`double` v0 , `double` v2 , `double` v4 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(DDD)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2abb10.  call temp:= `max`(v2, v4) @signature `Ljava/lang/Math;.max:(DD)D` @kind static;
  #L2abb16.  v2:= temp @kind wide;
  #L2abb18.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(DD)D` @kind static;
  #L2abb1e.  v0:= temp @kind wide;
  #L2abb20.  return v0 @kind wide;
}
procedure `double` `maxOf`(`double` v4 , `double`[] v6 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(D[D)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2abb34.  v0:= "other" @kind object;
  #L2abb38.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abb3e.  v0:= length @variable v6;
  #L2abb40.  v1:= 0I;
  #L2abb42.  if v1 >= v0 then goto L2abb58;
  #L2abb46.  v2:= v6[v1] @kind wide;
  #L2abb4a.  call temp:= `max`(v4, v2) @signature `Ljava/lang/Math;.max:(DD)D` @kind static;
  #L2abb50.  v4:= temp @kind wide;
  #L2abb52.  v1:= v1 + 1;
  #L2abb56.  goto L2abb42;
  #L2abb58.  return v4 @kind wide;
}
procedure `float` `maxOf`(`float` v0 , `float` v1 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(FF)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2abbe4.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L2abbea.  v0:= temp;
  #L2abbec.  return v0;
}
procedure `float` `maxOf`(`float` v0 , `float` v1 , `float` v2 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(FFF)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2abc00.  call temp:= `max`(v1, v2) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L2abc06.  v1:= temp;
  #L2abc08.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L2abc0e.  v0:= temp;
  #L2abc10.  return v0;
}
procedure `float` `maxOf`(`float` v3 , `float`[] v4 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(F[F)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2abc24.  v0:= "other" @kind object;
  #L2abc28.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abc2e.  v0:= length @variable v4;
  #L2abc30.  v1:= 0I;
  #L2abc32.  if v1 >= v0 then goto L2abc48;
  #L2abc36.  v2:= v4[v1];
  #L2abc3a.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L2abc40.  v3:= temp;
  #L2abc42.  v1:= v1 + 1;
  #L2abc46.  goto L2abc32;
  #L2abc48.  return v3;
}
procedure `int` `maxOf`(`int` v0 , `int` v1 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(II)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2abcd4.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2abcda.  v0:= temp;
  #L2abcdc.  return v0;
}
procedure `int` `maxOf`(`int` v0 , `int` v1 , `int` v2 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(III)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2abcf0.  call temp:= `max`(v1, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2abcf6.  v1:= temp;
  #L2abcf8.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2abcfe.  v0:= temp;
  #L2abd00.  return v0;
}
procedure `int` `maxOf`(`int` v3 , `int`[] v4 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(I[I)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2abd14.  v0:= "other" @kind object;
  #L2abd18.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abd1e.  v0:= length @variable v4;
  #L2abd20.  v1:= 0I;
  #L2abd22.  if v1 >= v0 then goto L2abd38;
  #L2abd26.  v2:= v4[v1];
  #L2abd2a.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2abd30.  v3:= temp;
  #L2abd32.  v1:= v1 + 1;
  #L2abd36.  goto L2abd22;
  #L2abd38.  return v3;
}
procedure `long` `maxOf`(`long` v0 , `long` v2 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(JJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2abf34.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L2abf3a.  v0:= temp @kind wide;
  #L2abf3c.  return v0 @kind wide;
}
procedure `long` `maxOf`(`long` v0 , `long` v2 , `long` v4 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(JJJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2abf50.  call temp:= `max`(v2, v4) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L2abf56.  v2:= temp @kind wide;
  #L2abf58.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L2abf5e.  v0:= temp @kind wide;
  #L2abf60.  return v0 @kind wide;
}
procedure `long` `maxOf`(`long` v4 , `long`[] v6 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(J[J)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2abf74.  v0:= "other" @kind object;
  #L2abf78.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abf7e.  v0:= length @variable v6;
  #L2abf80.  v1:= 0I;
  #L2abf82.  if v1 >= v0 then goto L2abf98;
  #L2abf86.  v2:= v6[v1] @kind wide;
  #L2abf8a.  call temp:= `max`(v4, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L2abf90.  v4:= temp @kind wide;
  #L2abf92.  v1:= v1 + 1;
  #L2abf96.  goto L2abf82;
  #L2abf98.  return v4 @kind wide;
}
procedure `java.lang.Comparable` `maxOf`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2abdc4.  v0:= "a" @kind object;
  #L2abdc8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abdce.  v0:= "b" @kind object;
  #L2abdd2.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abdd8.  call temp:= `compareTo`(v1, v2) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L2abdde.  v0:= temp;
  #L2abde0.  if v0 < 0 then goto L2abde6;
  #L2abde4.  goto L2abde8;
  #L2abde6.  v1:= v2 @kind object;
  #L2abde8.  return v1 @kind object;
}
procedure `java.lang.Comparable` `maxOf`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object, `java.lang.Comparable` v3 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2abdfc.  v0:= "a" @kind object;
  #L2abe00.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abe06.  v0:= "b" @kind object;
  #L2abe0a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abe10.  v0:= "c" @kind object;
  #L2abe14.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abe1a.  call temp:= `maxOf`(v2, v3) @signature `Lkotlin/comparisons/ComparisonsKt;.maxOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L2abe20.  v2:= temp @kind object;
  #L2abe22.  call temp:= `maxOf`(v1, v2) @signature `Lkotlin/comparisons/ComparisonsKt;.maxOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L2abe28.  v1:= temp @kind object;
  #L2abe2a.  return v1 @kind object;
}
procedure `java.lang.Comparable` `maxOf`(`java.lang.Comparable` v3 @kind object, `java.lang.Comparable`[] v4 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(Ljava/lang/Comparable;[Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2abe3c.  v0:= "a" @kind object;
  #L2abe40.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abe46.  v0:= "other" @kind object;
  #L2abe4a.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abe50.  v0:= length @variable v4;
  #L2abe52.  v1:= 0I;
  #L2abe54.  if v1 >= v0 then goto L2abe6a;
  #L2abe58.  v2:= v4[v1] @kind object;
  #L2abe5c.  call temp:= `maxOf`(v3, v2) @signature `Lkotlin/comparisons/ComparisonsKt;.maxOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L2abe62.  v3:= temp @kind object;
  #L2abe64.  v1:= v1 + 1;
  #L2abe68.  goto L2abe54;
  #L2abe6a.  return v3 @kind object;
}
procedure `short` `maxOf`(`short` v0 , `short` v1 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(SS)S` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2ac024.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2ac02a.  v0:= temp;
  #L2ac02c.  v0:= (`short`) v0 @kind i2s;
  #L2ac02e.  return v0;
}
procedure `short` `maxOf`(`short` v0 , `short` v1 , `short` v2 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(SSS)S` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2ac040.  call temp:= `max`(v1, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2ac046.  v1:= temp;
  #L2ac048.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2ac04e.  v0:= temp;
  #L2ac050.  v0:= (`short`) v0 @kind i2s;
  #L2ac052.  return v0;
}
procedure `short` `maxOf`(`short` v3 , `short`[] v4 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.maxOf:(S[S)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ac064.  v0:= "other" @kind object;
  #L2ac068.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ac06e.  v0:= length @variable v4;
  #L2ac070.  v1:= 0I;
  #L2ac072.  if v1 >= v0 then goto L2ac08a;
  #L2ac076.  v2:= v4[v1] @kind short;
  #L2ac07a.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2ac080.  v3:= temp;
  #L2ac082.  v3:= (`short`) v3 @kind i2s;
  #L2ac084.  v1:= v1 + 1;
  #L2ac088.  goto L2ac072;
  #L2ac08a.  return v3;
}
procedure `byte` `minOf`(`byte` v0 , `byte` v1 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(BB)B` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2aba7c.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2aba82.  v0:= temp;
  #L2aba84.  v0:= (`byte`) v0 @kind i2b;
  #L2aba86.  return v0;
}
procedure `byte` `minOf`(`byte` v0 , `byte` v1 , `byte` v2 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(BBB)B` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2aba98.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2aba9e.  v1:= temp;
  #L2abaa0.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2abaa6.  v0:= temp;
  #L2abaa8.  v0:= (`byte`) v0 @kind i2b;
  #L2abaaa.  return v0;
}
procedure `byte` `minOf`(`byte` v3 , `byte`[] v4 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(B[B)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ababc.  v0:= "other" @kind object;
  #L2abac0.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abac6.  v0:= length @variable v4;
  #L2abac8.  v1:= 0I;
  #L2abaca.  if v1 >= v0 then goto L2abae2;
  #L2abace.  v2:= v4[v1] @kind byte;
  #L2abad2.  call temp:= `min`(v3, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2abad8.  v3:= temp;
  #L2abada.  v3:= (`byte`) v3 @kind i2b;
  #L2abadc.  v1:= v1 + 1;
  #L2abae0.  goto L2abaca;
  #L2abae2.  return v3;
}
procedure `double` `minOf`(`double` v0 , `double` v2 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(DD)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2abb6c.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(DD)D` @kind static;
  #L2abb72.  v0:= temp @kind wide;
  #L2abb74.  return v0 @kind wide;
}
procedure `double` `minOf`(`double` v0 , `double` v2 , `double` v4 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(DDD)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2abb88.  call temp:= `min`(v2, v4) @signature `Ljava/lang/Math;.min:(DD)D` @kind static;
  #L2abb8e.  v2:= temp @kind wide;
  #L2abb90.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(DD)D` @kind static;
  #L2abb96.  v0:= temp @kind wide;
  #L2abb98.  return v0 @kind wide;
}
procedure `double` `minOf`(`double` v4 , `double`[] v6 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(D[D)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2abbac.  v0:= "other" @kind object;
  #L2abbb0.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abbb6.  v0:= length @variable v6;
  #L2abbb8.  v1:= 0I;
  #L2abbba.  if v1 >= v0 then goto L2abbd0;
  #L2abbbe.  v2:= v6[v1] @kind wide;
  #L2abbc2.  call temp:= `min`(v4, v2) @signature `Ljava/lang/Math;.min:(DD)D` @kind static;
  #L2abbc8.  v4:= temp @kind wide;
  #L2abbca.  v1:= v1 + 1;
  #L2abbce.  goto L2abbba;
  #L2abbd0.  return v4 @kind wide;
}
procedure `float` `minOf`(`float` v0 , `float` v1 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(FF)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2abc5c.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L2abc62.  v0:= temp;
  #L2abc64.  return v0;
}
procedure `float` `minOf`(`float` v0 , `float` v1 , `float` v2 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(FFF)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2abc78.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L2abc7e.  v1:= temp;
  #L2abc80.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L2abc86.  v0:= temp;
  #L2abc88.  return v0;
}
procedure `float` `minOf`(`float` v3 , `float`[] v4 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(F[F)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2abc9c.  v0:= "other" @kind object;
  #L2abca0.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abca6.  v0:= length @variable v4;
  #L2abca8.  v1:= 0I;
  #L2abcaa.  if v1 >= v0 then goto L2abcc0;
  #L2abcae.  v2:= v4[v1];
  #L2abcb2.  call temp:= `min`(v3, v2) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L2abcb8.  v3:= temp;
  #L2abcba.  v1:= v1 + 1;
  #L2abcbe.  goto L2abcaa;
  #L2abcc0.  return v3;
}
procedure `int` `minOf`(`int` v0 , `int` v1 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(II)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2abd4c.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2abd52.  v0:= temp;
  #L2abd54.  return v0;
}
procedure `int` `minOf`(`int` v0 , `int` v1 , `int` v2 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(III)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2abd68.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2abd6e.  v1:= temp;
  #L2abd70.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2abd76.  v0:= temp;
  #L2abd78.  return v0;
}
procedure `int` `minOf`(`int` v3 , `int`[] v4 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(I[I)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2abd8c.  v0:= "other" @kind object;
  #L2abd90.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abd96.  v0:= length @variable v4;
  #L2abd98.  v1:= 0I;
  #L2abd9a.  if v1 >= v0 then goto L2abdb0;
  #L2abd9e.  v2:= v4[v1];
  #L2abda2.  call temp:= `min`(v3, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2abda8.  v3:= temp;
  #L2abdaa.  v1:= v1 + 1;
  #L2abdae.  goto L2abd9a;
  #L2abdb0.  return v3;
}
procedure `long` `minOf`(`long` v0 , `long` v2 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(JJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2abfac.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2abfb2.  v0:= temp @kind wide;
  #L2abfb4.  return v0 @kind wide;
}
procedure `long` `minOf`(`long` v0 , `long` v2 , `long` v4 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(JJJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2abfc8.  call temp:= `min`(v2, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2abfce.  v2:= temp @kind wide;
  #L2abfd0.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2abfd6.  v0:= temp @kind wide;
  #L2abfd8.  return v0 @kind wide;
}
procedure `long` `minOf`(`long` v4 , `long`[] v6 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(J[J)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2abfec.  v0:= "other" @kind object;
  #L2abff0.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abff6.  v0:= length @variable v6;
  #L2abff8.  v1:= 0I;
  #L2abffa.  if v1 >= v0 then goto L2ac010;
  #L2abffe.  v2:= v6[v1] @kind wide;
  #L2ac002.  call temp:= `min`(v4, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2ac008.  v4:= temp @kind wide;
  #L2ac00a.  v1:= v1 + 1;
  #L2ac00e.  goto L2abffa;
  #L2ac010.  return v4 @kind wide;
}
procedure `java.lang.Comparable` `minOf`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2abe7c.  v0:= "a" @kind object;
  #L2abe80.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abe86.  v0:= "b" @kind object;
  #L2abe8a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abe90.  call temp:= `compareTo`(v1, v2) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L2abe96.  v0:= temp;
  #L2abe98.  if v0 > 0 then goto L2abe9e;
  #L2abe9c.  goto L2abea0;
  #L2abe9e.  v1:= v2 @kind object;
  #L2abea0.  return v1 @kind object;
}
procedure `java.lang.Comparable` `minOf`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object, `java.lang.Comparable` v3 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2abeb4.  v0:= "a" @kind object;
  #L2abeb8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abebe.  v0:= "b" @kind object;
  #L2abec2.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abec8.  v0:= "c" @kind object;
  #L2abecc.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abed2.  call temp:= `minOf`(v2, v3) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L2abed8.  v2:= temp @kind object;
  #L2abeda.  call temp:= `minOf`(v1, v2) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L2abee0.  v1:= temp @kind object;
  #L2abee2.  return v1 @kind object;
}
procedure `java.lang.Comparable` `minOf`(`java.lang.Comparable` v3 @kind object, `java.lang.Comparable`[] v4 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(Ljava/lang/Comparable;[Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2abef4.  v0:= "a" @kind object;
  #L2abef8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abefe.  v0:= "other" @kind object;
  #L2abf02.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2abf08.  v0:= length @variable v4;
  #L2abf0a.  v1:= 0I;
  #L2abf0c.  if v1 >= v0 then goto L2abf22;
  #L2abf10.  v2:= v4[v1] @kind object;
  #L2abf14.  call temp:= `minOf`(v3, v2) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L2abf1a.  v3:= temp @kind object;
  #L2abf1c.  v1:= v1 + 1;
  #L2abf20.  goto L2abf0c;
  #L2abf22.  return v3 @kind object;
}
procedure `short` `minOf`(`short` v0 , `short` v1 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(SS)S` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2ac09c.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2ac0a2.  v0:= temp;
  #L2ac0a4.  v0:= (`short`) v0 @kind i2s;
  #L2ac0a6.  return v0;
}
procedure `short` `minOf`(`short` v0 , `short` v1 , `short` v2 ) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(SSS)S` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2ac0b8.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2ac0be.  v1:= temp;
  #L2ac0c0.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2ac0c6.  v0:= temp;
  #L2ac0c8.  v0:= (`short`) v0 @kind i2s;
  #L2ac0ca.  return v0;
}
procedure `short` `minOf`(`short` v3 , `short`[] v4 @kind object) @signature `Lkotlin/comparisons/ComparisonsKt___ComparisonsJvmKt;.minOf:(S[S)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ac0dc.  v0:= "other" @kind object;
  #L2ac0e0.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ac0e6.  v0:= length @variable v4;
  #L2ac0e8.  v1:= 0I;
  #L2ac0ea.  if v1 >= v0 then goto L2ac102;
  #L2ac0ee.  v2:= v4[v1] @kind short;
  #L2ac0f2.  call temp:= `min`(v3, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2ac0f8.  v3:= temp;
  #L2ac0fa.  v3:= (`short`) v3 @kind i2s;
  #L2ac0fc.  v1:= v1 + 1;
  #L2ac100.  goto L2ac0ea;
  #L2ac102.  return v3;
}
