record `kotlin.UShortArray` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Collection` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `short`[] `kotlin.UShortArray.storage` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.UShortArray` v0 @kind this, `short`[] v1 @kind object) @signature `Lkotlin/UShortArray;.<init>:([S)V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L29d030.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29d036.  v0.`kotlin.UShortArray.storage` @type ^`short`[] := v1 @kind object;
  #L29d03a.  return @kind void;
}
procedure `kotlin.UShortArray` `box-impl`(`short`[] v1 @kind object) @signature `Lkotlin/UShortArray;.box-impl:([S)Lkotlin/UShortArray;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L29cfa0.  v0:= new `kotlin.UShortArray`;
  #L29cfa4.  call `<init>`(v0, v1) @signature `Lkotlin/UShortArray;.<init>:([S)V` @kind direct;
  #L29cfaa.  return v0 @kind object;
}
procedure `short`[] `constructor-impl`(`int` v0 ) @signature `Lkotlin/UShortArray;.constructor-impl:(I)[S` @AccessFlag PUBLIC_STATIC {
    temp;

  #L29cfdc.  v0:= new `short`[v0];
  #L29cfe0.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UShortArray;.constructor-impl:([S)[S` @kind static;
  #L29cfe6.  v0:= temp @kind object;
  #L29cfe8.  return v0 @kind object;
}
procedure `short`[] `constructor-impl`(`short`[] v1 @kind object) @signature `Lkotlin/UShortArray;.constructor-impl:([S)[S` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L29cffc.  v0:= "storage" @kind object;
  #L29d000.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29d006.  return v1 @kind object;
}
procedure `boolean` `contains-xj2QHRw`(`short`[] v0 @kind object, `short` v1 ) @signature `Lkotlin/UShortArray;.contains-xj2QHRw:([SS)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L29cc5c.  call temp:= `contains`(v0, v1) @signature `Lkotlin/collections/ArraysKt;.contains:([SS)Z` @kind static;
  #L29cc62.  v0:= temp;
  #L29cc64.  return v0;
}
procedure `boolean` `containsAll-impl`(`short`[] v4 @kind object, `java.util.Collection` v5 @kind object) @signature `Lkotlin/UShortArray;.containsAll-impl:([SLjava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L29cca0.  v0:= "elements" @kind object;
  #L29cca4.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29ccaa.  call temp:= `isEmpty`(v5) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L29ccb0.  v0:= temp;
  #L29ccb2.  v1:= 0I;
  #L29ccb4.  v2:= 1I;
  #L29ccb6.  if v0 == 0 then goto L29ccbe;
  #L29ccba.  v1:= 1I;
  #L29ccbc.  goto L29cd04;
  #L29ccbe.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29ccc4.  v5:= temp @kind object;
  #L29ccc6.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29cccc.  v0:= temp;
  #L29ccce.  if v0 == 0 then goto L29ccba;
  #L29ccd2.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29ccd8.  v0:= temp @kind object;
  #L29ccda.  v3:= instanceof @variable v0 @type ^`kotlin.UShort` @kind boolean;
  #L29ccde.  if v3 == 0 then goto L29ccfe;
  #L29cce2.  v0:= (`kotlin.UShort`) v0 @kind object;
  #L29cce6.  call temp:= `unbox-impl`(v0) @signature `Lkotlin/UShort;.unbox-impl:()S` @kind virtual;
  #L29ccec.  v0:= temp;
  #L29ccee.  call temp:= `contains`(v4, v0) @signature `Lkotlin/collections/ArraysKt;.contains:([SS)Z` @kind static;
  #L29ccf4.  v0:= temp;
  #L29ccf6.  if v0 == 0 then goto L29ccfe;
  #L29ccfa.  v0:= 1I;
  #L29ccfc.  goto L29cd00;
  #L29ccfe.  v0:= 0I;
  #L29cd00.  if v0 != 0 then goto L29ccc6;
  #L29cd04.  return v1;
}
procedure `boolean` `equals-impl`(`short`[] v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/UShortArray;.equals-impl:([SLjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L29cd38.  v0:= instanceof @variable v3 @type ^`kotlin.UShortArray` @kind boolean;
  #L29cd3c.  v1:= 0I;
  #L29cd3e.  if v0 != 0 then goto L29cd44;
  #L29cd42.  return v1;
  #L29cd44.  v3:= (`kotlin.UShortArray`) v3 @kind object;
  #L29cd48.  call temp:= `unbox-impl`(v3) @signature `Lkotlin/UShortArray;.unbox-impl:()[S` @kind virtual;
  #L29cd4e.  v3:= temp @kind object;
  #L29cd50.  call temp:= `areEqual`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L29cd56.  v2:= temp;
  #L29cd58.  if v2 != 0 then goto L29cd5e;
  #L29cd5c.  return v1;
  #L29cd5e.  v2:= 1I;
  #L29cd60.  return v2;
}
procedure `boolean` `equals-impl0`(`short`[] v0 @kind object, `short`[] v1 @kind object) @signature `Lkotlin/UShortArray;.equals-impl0:([S[S)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L29cd74.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L29cd7a.  v0:= temp;
  #L29cd7c.  return v0;
}
procedure `short` `get-Mh2AYeg`(`short`[] v0 @kind object, `int` v1 ) @signature `Lkotlin/UShortArray;.get-Mh2AYeg:([SI)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L29cfbc.  v0:= v0[v1] @kind short;
  #L29cfc0.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UShort;.constructor-impl:(S)S` @kind static;
  #L29cfc6.  v0:= temp;
  #L29cfc8.  return v0;
}
procedure `int` `getSize-impl`(`short`[] v0 @kind object) @signature `Lkotlin/UShortArray;.getSize-impl:([S)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L29ce50.  v0:= length @variable v0;
  #L29ce52.  return v0;
}
procedure `void` `getStorage$annotations`() @signature `Lkotlin/UShortArray;.getStorage$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L29d06c.  return @kind void;
}
procedure `int` `hashCode-impl`(`short`[] v0 @kind object) @signature `Lkotlin/UShortArray;.hashCode-impl:([S)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L29ce84.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([S)I` @kind static;
  #L29ce8a.  v0:= temp;
  #L29ce8c.  return v0;
}
procedure `boolean` `isEmpty-impl`(`short`[] v0 @kind object) @signature `Lkotlin/UShortArray;.isEmpty-impl:([S)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L29cdb0.  v0:= length @variable v0;
  #L29cdb2.  if v0 != 0 then goto L29cdba;
  #L29cdb6.  v0:= 1I;
  #L29cdb8.  goto L29cdbc;
  #L29cdba.  v0:= 0I;
  #L29cdbc.  return v0;
}
procedure `java.util.Iterator` `iterator-impl`(`short`[] v1 @kind object) @signature `Lkotlin/UShortArray;.iterator-impl:([S)Ljava/util/Iterator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L29cf84.  v0:= new `kotlin.UShortArray$Iterator`;
  #L29cf88.  call `<init>`(v0, v1) @signature `Lkotlin/UShortArray$Iterator;.<init>:([S)V` @kind direct;
  #L29cf8e.  return v0 @kind object;
}
procedure `void` `set-01HTLdE`(`short`[] v0 @kind object, `int` v1 , `short` v2 ) @signature `Lkotlin/UShortArray;.set-01HTLdE:([SIS)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L29d080.  v0[v1]:= v2 @kind short;
  #L29d084.  return @kind void;
}
procedure `java.lang.String` `toString-impl`(`short`[] v2 @kind object) @signature `Lkotlin/UShortArray;.toString-impl:([S)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L29cf1c.  v0:= new `java.lang.StringBuilder`;
  #L29cf20.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L29cf26.  v1:= "UShortArray(storage=" @kind object;
  #L29cf2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29cf30.  call temp:= `toString`(v2) @signature `Ljava/util/Arrays;.toString:([S)Ljava/lang/String;` @kind static;
  #L29cf36.  v2:= temp @kind object;
  #L29cf38.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29cf3e.  v2:= 41I;
  #L29cf42.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L29cf48.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L29cf4e.  v2:= temp @kind object;
  #L29cf50.  return v2 @kind object;
}
procedure `boolean` `add`(`kotlin.UShortArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UShortArray;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L29cba8.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29cbac.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29cbb0.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29cbb6.  throw v2;
}
procedure `boolean` `add-xj2QHRw`(`kotlin.UShortArray` v1 @kind this, `short` v2 ) @signature `Lkotlin/UShortArray;.add-xj2QHRw:(S)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29cbc8.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29cbcc.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29cbd0.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29cbd6.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.UShortArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UShortArray;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29cbe8.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29cbec.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29cbf0.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29cbf6.  throw v2;
}
procedure `void` `clear`(`kotlin.UShortArray` v2 @kind this) @signature `Lkotlin/UShortArray;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29d04c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L29d050.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L29d054.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29d05a.  throw v0;
}
procedure `boolean` `contains`(`kotlin.UShortArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UShortArray;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L29cc08.  v0:= instanceof @variable v2 @type ^`kotlin.UShort` @kind boolean;
  #L29cc0c.  if v0 != 0 then goto L29cc14;
  #L29cc10.  v2:= 0I;
  #L29cc12.  return v2;
  #L29cc14.  v2:= (`kotlin.UShort`) v2 @kind object;
  #L29cc18.  call temp:= `unbox-impl`(v2) @signature `Lkotlin/UShort;.unbox-impl:()S` @kind virtual;
  #L29cc1e.  v2:= temp;
  #L29cc20.  call temp:= `contains-xj2QHRw`(v1, v2) @signature `Lkotlin/UShortArray;.contains-xj2QHRw:(S)Z` @kind virtual;
  #L29cc26.  v2:= temp;
  #L29cc28.  return v2;
}
procedure `boolean` `contains-xj2QHRw`(`kotlin.UShortArray` v1 @kind this, `short` v2 ) @signature `Lkotlin/UShortArray;.contains-xj2QHRw:(S)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29cc3c.  v0:= v1.`kotlin.UShortArray.storage` @type ^`short`[] @kind object;
  #L29cc40.  call temp:= `contains-xj2QHRw`(v0, v2) @signature `Lkotlin/UShortArray;.contains-xj2QHRw:([SS)Z` @kind static;
  #L29cc46.  v2:= temp;
  #L29cc48.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.UShortArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UShortArray;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29cc78.  v0:= "elements" @kind object;
  #L29cc7c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29cc82.  v0:= v1.`kotlin.UShortArray.storage` @type ^`short`[] @kind object;
  #L29cc86.  call temp:= `containsAll-impl`(v0, v2) @signature `Lkotlin/UShortArray;.containsAll-impl:([SLjava/util/Collection;)Z` @kind static;
  #L29cc8c.  v2:= temp;
  #L29cc8e.  return v2;
}
procedure `boolean` `equals`(`kotlin.UShortArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UShortArray;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29cd18.  v0:= v1.`kotlin.UShortArray.storage` @type ^`short`[] @kind object;
  #L29cd1c.  call temp:= `equals-impl`(v0, v2) @signature `Lkotlin/UShortArray;.equals-impl:([SLjava/lang/Object;)Z` @kind static;
  #L29cd22.  v2:= temp;
  #L29cd24.  return v2;
}
procedure `int` `getSize`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ce30.  v0:= v1.`kotlin.UShortArray.storage` @type ^`short`[] @kind object;
  #L29ce34.  call temp:= `getSize-impl`(v0) @signature `Lkotlin/UShortArray;.getSize-impl:([S)I` @kind static;
  #L29ce3a.  v0:= temp;
  #L29ce3c.  return v0;
}
procedure `int` `hashCode`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ce64.  v0:= v1.`kotlin.UShortArray.storage` @type ^`short`[] @kind object;
  #L29ce68.  call temp:= `hashCode-impl`(v0) @signature `Lkotlin/UShortArray;.hashCode-impl:([S)I` @kind static;
  #L29ce6e.  v0:= temp;
  #L29ce70.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29cd90.  v0:= v1.`kotlin.UShortArray.storage` @type ^`short`[] @kind object;
  #L29cd94.  call temp:= `isEmpty-impl`(v0) @signature `Lkotlin/UShortArray;.isEmpty-impl:([S)Z` @kind static;
  #L29cd9a.  v0:= temp;
  #L29cd9c.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29cf64.  v0:= v1.`kotlin.UShortArray.storage` @type ^`short`[] @kind object;
  #L29cf68.  call temp:= `iterator-impl`(v0) @signature `Lkotlin/UShortArray;.iterator-impl:([S)Ljava/util/Iterator;` @kind static;
  #L29cf6e.  v0:= temp @kind object;
  #L29cf70.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.UShortArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UShortArray;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29cdd0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29cdd4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29cdd8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29cdde.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.UShortArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UShortArray;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29cdf0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29cdf4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29cdf8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29cdfe.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.UShortArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UShortArray;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ce10.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29ce14.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29ce18.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29ce1e.  throw v2;
}
procedure `int` `size`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.size:()I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L29cea0.  call temp:= `getSize`(v1) @signature `Lkotlin/UShortArray;.getSize:()I` @kind virtual;
  #L29cea6.  v0:= temp;
  #L29cea8.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29cebc.  call temp:= `toArray`(v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L29cec2.  v0:= temp @kind object;
  #L29cec4.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.UShortArray` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/UShortArray;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ced8.  v0:= "array" @kind object;
  #L29cedc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29cee2.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L29cee8.  v2:= temp @kind object;
  #L29ceea.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29cefc.  v0:= v1.`kotlin.UShortArray.storage` @type ^`short`[] @kind object;
  #L29cf00.  call temp:= `toString-impl`(v0) @signature `Lkotlin/UShortArray;.toString-impl:([S)Ljava/lang/String;` @kind static;
  #L29cf06.  v0:= temp @kind object;
  #L29cf08.  return v0 @kind object;
}
procedure `short`[] `unbox-impl`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.unbox-impl:()[S` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L29d018.  v0:= v1.`kotlin.UShortArray.storage` @type ^`short`[] @kind object;
  #L29d01c.  return v0 @kind object;
}
