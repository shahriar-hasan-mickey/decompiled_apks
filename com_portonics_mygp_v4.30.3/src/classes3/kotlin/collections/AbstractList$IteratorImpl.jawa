record `kotlin.collections.AbstractList$IteratorImpl` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int` `kotlin.collections.AbstractList$IteratorImpl.index` @AccessFlag PRIVATE;
  `kotlin.collections.AbstractList` `kotlin.collections.AbstractList$IteratorImpl.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.collections.AbstractList$IteratorImpl` v0 @kind this, `kotlin.collections.AbstractList` v1 @kind object) @signature `Lkotlin/collections/AbstractList$IteratorImpl;.<init>:(Lkotlin/collections/AbstractList;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L29e900.  v0.`kotlin.collections.AbstractList$IteratorImpl.this$0` @type ^`kotlin.collections.AbstractList` := v1 @kind object;
  #L29e904.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29e90a.  return @kind void;
}
procedure `int` `getIndex`(`kotlin.collections.AbstractList$IteratorImpl` v1 @kind this) @signature `Lkotlin/collections/AbstractList$IteratorImpl;.getIndex:()I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L29e8a4.  v0:= v1.`kotlin.collections.AbstractList$IteratorImpl.index` @type ^`int`;
  #L29e8a8.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.collections.AbstractList$IteratorImpl` v2 @kind this) @signature `Lkotlin/collections/AbstractList$IteratorImpl;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29e878.  v0:= v2.`kotlin.collections.AbstractList$IteratorImpl.index` @type ^`int`;
  #L29e87c.  v1:= v2.`kotlin.collections.AbstractList$IteratorImpl.this$0` @type ^`kotlin.collections.AbstractList` @kind object;
  #L29e880.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L29e886.  v1:= temp;
  #L29e888.  if v0 >= v1 then goto L29e890;
  #L29e88c.  v0:= 1I;
  #L29e88e.  goto L29e892;
  #L29e890.  v0:= 0I;
  #L29e892.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.collections.AbstractList$IteratorImpl` v3 @kind this) @signature `Lkotlin/collections/AbstractList$IteratorImpl;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L29e8bc.  call temp:= `hasNext`(v3) @signature `Lkotlin/collections/AbstractList$IteratorImpl;.hasNext:()Z` @kind virtual;
  #L29e8c2.  v0:= temp;
  #L29e8c4.  if v0 == 0 then goto L29e8e2;
  #L29e8c8.  v0:= v3.`kotlin.collections.AbstractList$IteratorImpl.this$0` @type ^`kotlin.collections.AbstractList` @kind object;
  #L29e8cc.  v1:= v3.`kotlin.collections.AbstractList$IteratorImpl.index` @type ^`int`;
  #L29e8d0.  v2:= v1 + 1;
  #L29e8d4.  v3.`kotlin.collections.AbstractList$IteratorImpl.index` @type ^`int` := v2;
  #L29e8d8.  call temp:= `get`(v0, v1) @signature `Lkotlin/collections/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L29e8de.  v0:= temp @kind object;
  #L29e8e0.  return v0 @kind object;
  #L29e8e2.  v0:= new `java.util.NoSuchElementException`;
  #L29e8e6.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L29e8ec.  throw v0;
}
procedure `void` `remove`(`kotlin.collections.AbstractList$IteratorImpl` v2 @kind this) @signature `Lkotlin/collections/AbstractList$IteratorImpl;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29e91c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L29e920.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L29e924.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29e92a.  throw v0;
}
procedure `void` `setIndex`(`kotlin.collections.AbstractList$IteratorImpl` v0 @kind this, `int` v1 ) @signature `Lkotlin/collections/AbstractList$IteratorImpl;.setIndex:(I)V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L29e93c.  v0.`kotlin.collections.AbstractList$IteratorImpl.index` @type ^`int` := v1;
  #L29e940.  return @kind void;
}
