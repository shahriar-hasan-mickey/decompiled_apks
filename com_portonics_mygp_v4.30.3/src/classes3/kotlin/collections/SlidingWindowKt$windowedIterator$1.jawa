record `kotlin.collections.SlidingWindowKt$windowedIterator$1` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.RestrictedSuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `java.util.Iterator` `kotlin.collections.SlidingWindowKt$windowedIterator$1.$iterator` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `kotlin.collections.SlidingWindowKt$windowedIterator$1.$partialWindows` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `kotlin.collections.SlidingWindowKt$windowedIterator$1.$reuseBuffer` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlin.collections.SlidingWindowKt$windowedIterator$1.$size` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlin.collections.SlidingWindowKt$windowedIterator$1.$step` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlin.collections.SlidingWindowKt$windowedIterator$1.I$0` @AccessFlag ;
  `java.lang.Object` `kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0` @AccessFlag PRIVATE_SYNTHETIC;
  `java.lang.Object` `kotlin.collections.SlidingWindowKt$windowedIterator$1.L$1` @AccessFlag ;
  `java.lang.Object` `kotlin.collections.SlidingWindowKt$windowedIterator$1.L$2` @AccessFlag ;
  `int` `kotlin.collections.SlidingWindowKt$windowedIterator$1.label` @AccessFlag ;
}
procedure `void` `<init>`(`kotlin.collections.SlidingWindowKt$windowedIterator$1` v0 @kind this, `int` v1 , `int` v2 , `java.util.Iterator` v3 @kind object, `boolean` v4 , `boolean` v5 , `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlin/collections/SlidingWindowKt$windowedIterator$1;.<init>:(IILjava/util/Iterator;ZZLkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2a6d0c.  v0.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$size` @type ^`int` := v1;
  #L2a6d10.  v0.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$step` @type ^`int` := v2;
  #L2a6d14.  v0.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$iterator` @type ^`java.util.Iterator` := v3 @kind object;
  #L2a6d18.  v0.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$reuseBuffer` @type ^`boolean` := v4 @kind boolean;
  #L2a6d1c.  v0.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$partialWindows` @type ^`boolean` := v5 @kind boolean;
  #L2a6d20.  v1:= 2I;
  #L2a6d22.  call `<init>`(v0, v1, v6) @signature `Lkotlin/coroutines/jvm/internal/RestrictedSuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L2a6d28.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlin.collections.SlidingWindowKt$windowedIterator$1` v8 @kind this, `java.lang.Object` v9 @kind object, `kotlin.coroutines.Continuation` v10 @kind object) @signature `Lkotlin/collections/SlidingWindowKt$windowedIterator$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2a6cd4.  v7:= new `kotlin.collections.SlidingWindowKt$windowedIterator$1`;
  #L2a6cd8.  v1:= v8.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$size` @type ^`int`;
  #L2a6cdc.  v2:= v8.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$step` @type ^`int`;
  #L2a6ce0.  v3:= v8.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$iterator` @type ^`java.util.Iterator` @kind object;
  #L2a6ce4.  v4:= v8.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$reuseBuffer` @type ^`boolean` @kind boolean;
  #L2a6ce8.  v5:= v8.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$partialWindows` @type ^`boolean` @kind boolean;
  #L2a6cec.  v0:= v7 @kind object;
  #L2a6cee.  v6:= v10 @kind object;
  #L2a6cf0.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lkotlin/collections/SlidingWindowKt$windowedIterator$1;.<init>:(IILjava/util/Iterator;ZZLkotlin/coroutines/Continuation;)V` @kind direct;
  #L2a6cf6.  v7.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0` @type ^`java.lang.Object` := v9 @kind object;
  #L2a6cfa.  return v7 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.collections.SlidingWindowKt$windowedIterator$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/SlidingWindowKt$windowedIterator$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2a699c.  v1:= (`kotlin.sequences.SequenceScope`) v1 @kind object;
  #L2a69a0.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L2a69a4.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/collections/SlidingWindowKt$windowedIterator$1;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2a69aa.  v1:= temp @kind object;
  #L2a69ac.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.collections.SlidingWindowKt$windowedIterator$1` v0 @kind this, `kotlin.sequences.SequenceScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/collections/SlidingWindowKt$windowedIterator$1;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2a69c0.  call temp:= `create`(v0, v1, v2) @signature `Lkotlin/collections/SlidingWindowKt$windowedIterator$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2a69c6.  v1:= temp @kind object;
  #L2a69c8.  v1:= (`kotlin.collections.SlidingWindowKt$windowedIterator$1`) v1 @kind object;
  #L2a69cc.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2a69d0.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlin/collections/SlidingWindowKt$windowedIterator$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2a69d6.  v1:= temp @kind object;
  #L2a69d8.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlin.collections.SlidingWindowKt$windowedIterator$1` v12 @kind this, `java.lang.Object` v13 @kind object) @signature `Lkotlin/collections/SlidingWindowKt$windowedIterator$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L2a69ec.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2a69f2.  v0:= temp @kind object;
  #L2a69f4.  v1:= v12.`kotlin.collections.SlidingWindowKt$windowedIterator$1.label` @type ^`int`;
  #L2a69f8.  v2:= 5I;
  #L2a69fa.  v3:= 4I;
  #L2a69fc.  v4:= 3I;
  #L2a69fe.  v5:= 2I;
  #L2a6a00.  v6:= 1I;
  #L2a6a02.  v7:= 0I;
  #L2a6a04.  if v1 == 0 then goto L2a6aa0;
  #L2a6a08.  if v1 == v6 then goto L2a6a78;
  #L2a6a0c.  if v1 == v5 then goto L2a6a6e;
  #L2a6a10.  if v1 == v4 then goto L2a6a4a;
  #L2a6a14.  if v1 == v3 then goto L2a6a2e;
  #L2a6a18.  if v1 != v2 then goto L2a6a1e;
  #L2a6a1c.  goto L2a6a6e;
  #L2a6a1e.  v13:= new `java.lang.IllegalStateException`;
  #L2a6a22.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2a6a26.  call `<init>`(v13, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a6a2c.  throw v13;
  #L2a6a2e.  v1:= v12.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$1` @type ^`java.lang.Object` @kind object;
  #L2a6a32.  v1:= (`kotlin.collections.RingBuffer`) v1 @kind object;
  #L2a6a36.  v4:= v12.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2a6a3a.  v4:= (`kotlin.sequences.SequenceScope`) v4 @kind object;
  #L2a6a3e.  call `throwOnFailure`(v13) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2a6a44.  v13:= v12 @kind object;
  #L2a6a46.  goto L2a6c86;
  #L2a6a4a.  v1:= v12.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$2` @type ^`java.lang.Object` @kind object;
  #L2a6a4e.  v1:= (`java.util.Iterator`) v1 @kind object;
  #L2a6a52.  v5:= v12.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$1` @type ^`java.lang.Object` @kind object;
  #L2a6a56.  v5:= (`kotlin.collections.RingBuffer`) v5 @kind object;
  #L2a6a5a.  v8:= v12.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2a6a5e.  v8:= (`kotlin.sequences.SequenceScope`) v8 @kind object;
  #L2a6a62.  call `throwOnFailure`(v13) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2a6a68.  v13:= v12 @kind object;
  #L2a6a6a.  goto L2a6c2a;
  #L2a6a6e.  call `throwOnFailure`(v13) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2a6a74.  goto L2a6cbe;
  #L2a6a78.  v1:= v12.`kotlin.collections.SlidingWindowKt$windowedIterator$1.I$0` @type ^`int`;
  #L2a6a7c.  v2:= v12.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$2` @type ^`java.lang.Object` @kind object;
  #L2a6a80.  v2:= (`java.util.Iterator`) v2 @kind object;
  #L2a6a84.  v3:= v12.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$1` @type ^`java.lang.Object` @kind object;
  #L2a6a88.  v3:= (`java.util.ArrayList`) v3 @kind object;
  #L2a6a8c.  v4:= v12.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2a6a90.  v4:= (`kotlin.sequences.SequenceScope`) v4 @kind object;
  #L2a6a94.  call `throwOnFailure`(v13) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2a6a9a.  v13:= v12 @kind object;
  #L2a6a9c.  v8:= v1;
  #L2a6a9e.  goto L2a6b3c;
  #L2a6aa0.  call `throwOnFailure`(v13) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2a6aa6.  v13:= v12.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2a6aaa.  v13:= (`kotlin.sequences.SequenceScope`) v13 @kind object;
  #L2a6aae.  v1:= v12.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$size` @type ^`int`;
  #L2a6ab2.  v8:= 1024I;
  #L2a6ab6.  call temp:= `coerceAtMost`(v1, v8) @signature `Lkotlin/ranges/RangesKt;.coerceAtMost:(II)I` @kind static;
  #L2a6abc.  v1:= temp;
  #L2a6abe.  v8:= v12.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$step` @type ^`int`;
  #L2a6ac2.  v9:= v12.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$size` @type ^`int`;
  #L2a6ac6.  v8:= v8 - v9 @kind int;
  #L2a6ac8.  if v8 < 0 then goto L2a6ba4;
  #L2a6acc.  v2:= new `java.util.ArrayList`;
  #L2a6ad0.  call `<init>`(v2, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2a6ad6.  v1:= 0I;
  #L2a6ad8.  v3:= v12.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$iterator` @type ^`java.util.Iterator` @kind object;
  #L2a6adc.  v4:= v13 @kind object;
  #L2a6ade.  v13:= v12 @kind object;
  #L2a6ae0.  v11:= v3 @kind object;
  #L2a6ae2.  v3:= v2 @kind object;
  #L2a6ae4.  v2:= v11 @kind object;
  #L2a6ae6.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a6aec.  v9:= temp;
  #L2a6aee.  if v9 == 0 then goto L2a6b60;
  #L2a6af2.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a6af8.  v9:= temp @kind object;
  #L2a6afa.  if v1 <= 0 then goto L2a6b04;
  #L2a6afe.  v1:= v1 + -1;
  #L2a6b02.  goto L2a6ae6;
  #L2a6b04.  call temp:= `add`(v3, v9) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L2a6b0a.  call temp:= `size`(v3) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L2a6b10.  v9:= temp;
  #L2a6b12.  v10:= v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$size` @type ^`int`;
  #L2a6b16.  if v9 != v10 then goto L2a6ae6;
  #L2a6b1a.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0` @type ^`java.lang.Object` := v4 @kind object;
  #L2a6b1e.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$1` @type ^`java.lang.Object` := v3 @kind object;
  #L2a6b22.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$2` @type ^`java.lang.Object` := v2 @kind object;
  #L2a6b26.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.I$0` @type ^`int` := v8;
  #L2a6b2a.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.label` @type ^`int` := v6;
  #L2a6b2e.  call temp:= `yield`(v4, v3, v13) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2a6b34.  v1:= temp @kind object;
  #L2a6b36.  if v1 != v0 then goto L2a6b3c;
  #L2a6b3a.  return v0 @kind object;
  #L2a6b3c.  v1:= v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$reuseBuffer` @type ^`boolean` @kind boolean;
  #L2a6b40.  if v1 == 0 then goto L2a6b4c;
  #L2a6b44.  call `clear`(v3) @signature `Ljava/util/ArrayList;.clear:()V` @kind virtual;
  #L2a6b4a.  goto L2a6b5c;
  #L2a6b4c.  v1:= new `java.util.ArrayList`;
  #L2a6b50.  v3:= v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$size` @type ^`int`;
  #L2a6b54.  call `<init>`(v1, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2a6b5a.  v3:= v1 @kind object;
  #L2a6b5c.  v1:= v8;
  #L2a6b5e.  goto L2a6ae6;
  #L2a6b60.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L2a6b66.  v1:= temp;
  #L2a6b68.  v1:= v1 ^~ v6 @kind int;
  #L2a6b6a.  if v1 == 0 then goto L2a6cbe;
  #L2a6b6e.  v1:= v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$partialWindows` @type ^`boolean` @kind boolean;
  #L2a6b72.  if v1 != 0 then goto L2a6b86;
  #L2a6b76.  call temp:= `size`(v3) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L2a6b7c.  v1:= temp;
  #L2a6b7e.  v2:= v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$size` @type ^`int`;
  #L2a6b82.  if v1 != v2 then goto L2a6cbe;
  #L2a6b86.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0` @type ^`java.lang.Object` := v7 @kind object;
  #L2a6b8a.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$1` @type ^`java.lang.Object` := v7 @kind object;
  #L2a6b8e.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$2` @type ^`java.lang.Object` := v7 @kind object;
  #L2a6b92.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.label` @type ^`int` := v5;
  #L2a6b96.  call temp:= `yield`(v4, v3, v13) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2a6b9c.  v13:= temp @kind object;
  #L2a6b9e.  if v13 != v0 then goto L2a6cbe;
  #L2a6ba2.  return v0 @kind object;
  #L2a6ba4.  v5:= new `kotlin.collections.RingBuffer`;
  #L2a6ba8.  call `<init>`(v5, v1) @signature `Lkotlin/collections/RingBuffer;.<init>:(I)V` @kind direct;
  #L2a6bae.  v1:= v12.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$iterator` @type ^`java.util.Iterator` @kind object;
  #L2a6bb2.  v8:= v13 @kind object;
  #L2a6bb4.  v13:= v12 @kind object;
  #L2a6bb6.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a6bbc.  v9:= temp;
  #L2a6bbe.  if v9 == 0 then goto L2a6c36;
  #L2a6bc2.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a6bc8.  v9:= temp @kind object;
  #L2a6bca.  call `add`(v5, v9) @signature `Lkotlin/collections/RingBuffer;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L2a6bd0.  call temp:= `isFull`(v5) @signature `Lkotlin/collections/RingBuffer;.isFull:()Z` @kind virtual;
  #L2a6bd6.  v9:= temp;
  #L2a6bd8.  if v9 == 0 then goto L2a6bb6;
  #L2a6bdc.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a6be2.  v9:= temp;
  #L2a6be4.  v10:= v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$size` @type ^`int`;
  #L2a6be8.  if v9 >= v10 then goto L2a6bf6;
  #L2a6bec.  call temp:= `expanded`(v5, v10) @signature `Lkotlin/collections/RingBuffer;.expanded:(I)Lkotlin/collections/RingBuffer;` @kind virtual;
  #L2a6bf2.  v5:= temp @kind object;
  #L2a6bf4.  goto L2a6bb6;
  #L2a6bf6.  v9:= v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$reuseBuffer` @type ^`boolean` @kind boolean;
  #L2a6bfa.  if v9 == 0 then goto L2a6c02;
  #L2a6bfe.  v9:= v5 @kind object;
  #L2a6c00.  goto L2a6c0c;
  #L2a6c02.  v9:= new `java.util.ArrayList`;
  #L2a6c06.  call `<init>`(v9, v5) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2a6c0c.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0` @type ^`java.lang.Object` := v8 @kind object;
  #L2a6c10.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$1` @type ^`java.lang.Object` := v5 @kind object;
  #L2a6c14.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$2` @type ^`java.lang.Object` := v1 @kind object;
  #L2a6c18.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.label` @type ^`int` := v4;
  #L2a6c1c.  call temp:= `yield`(v8, v9, v13) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2a6c22.  v9:= temp @kind object;
  #L2a6c24.  if v9 != v0 then goto L2a6c2a;
  #L2a6c28.  return v0 @kind object;
  #L2a6c2a.  v9:= v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$step` @type ^`int`;
  #L2a6c2e.  call `removeFirst`(v5, v9) @signature `Lkotlin/collections/RingBuffer;.removeFirst:(I)V` @kind virtual;
  #L2a6c34.  goto L2a6bb6;
  #L2a6c36.  v1:= v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$partialWindows` @type ^`boolean` @kind boolean;
  #L2a6c3a.  if v1 == 0 then goto L2a6cbe;
  #L2a6c3e.  v1:= v5 @kind object;
  #L2a6c40.  v4:= v8 @kind object;
  #L2a6c42.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a6c48.  v5:= temp;
  #L2a6c4a.  v8:= v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$step` @type ^`int`;
  #L2a6c4e.  if v5 <= v8 then goto L2a6c92;
  #L2a6c52.  v5:= v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$reuseBuffer` @type ^`boolean` @kind boolean;
  #L2a6c56.  if v5 == 0 then goto L2a6c5e;
  #L2a6c5a.  v5:= v1 @kind object;
  #L2a6c5c.  goto L2a6c68;
  #L2a6c5e.  v5:= new `java.util.ArrayList`;
  #L2a6c62.  call `<init>`(v5, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2a6c68.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0` @type ^`java.lang.Object` := v4 @kind object;
  #L2a6c6c.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$1` @type ^`java.lang.Object` := v1 @kind object;
  #L2a6c70.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$2` @type ^`java.lang.Object` := v7 @kind object;
  #L2a6c74.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.label` @type ^`int` := v3;
  #L2a6c78.  call temp:= `yield`(v4, v5, v13) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2a6c7e.  v5:= temp @kind object;
  #L2a6c80.  if v5 != v0 then goto L2a6c86;
  #L2a6c84.  return v0 @kind object;
  #L2a6c86.  v5:= v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.$step` @type ^`int`;
  #L2a6c8a.  call `removeFirst`(v1, v5) @signature `Lkotlin/collections/RingBuffer;.removeFirst:(I)V` @kind virtual;
  #L2a6c90.  goto L2a6c42;
  #L2a6c92.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L2a6c98.  v3:= temp;
  #L2a6c9a.  v3:= v3 ^~ v6 @kind int;
  #L2a6c9c.  if v3 == 0 then goto L2a6cbe;
  #L2a6ca0.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$0` @type ^`java.lang.Object` := v7 @kind object;
  #L2a6ca4.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$1` @type ^`java.lang.Object` := v7 @kind object;
  #L2a6ca8.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.L$2` @type ^`java.lang.Object` := v7 @kind object;
  #L2a6cac.  v13.`kotlin.collections.SlidingWindowKt$windowedIterator$1.label` @type ^`int` := v2;
  #L2a6cb0.  call temp:= `yield`(v4, v1, v13) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2a6cb6.  v13:= temp @kind object;
  #L2a6cb8.  if v13 != v0 then goto L2a6cbe;
  #L2a6cbc.  return v0 @kind object;
  #L2a6cbe.  v13:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2a6cc2.  return v13 @kind object;
}
