record `kotlin.collections.ArrayDeque` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.AbstractMutableList` @kind class {
  `java.lang.Object`[] `kotlin.collections.ArrayDeque.elementData` @AccessFlag PRIVATE;
  `int` `kotlin.collections.ArrayDeque.head` @AccessFlag PRIVATE;
  `int` `kotlin.collections.ArrayDeque.size` @AccessFlag PRIVATE;
}
global `kotlin.collections.ArrayDeque$Companion` `@@kotlin.collections.ArrayDeque.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlin.collections.ArrayDeque.defaultMinCapacity` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object`[] `@@kotlin.collections.ArrayDeque.emptyElementData` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@kotlin.collections.ArrayDeque.maxArraySize` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/collections/ArrayDeque;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2a0994.  v0:= new `kotlin.collections.ArrayDeque$Companion`;
  #L2a0998.  v1:= 0I;
  #L2a099a.  call `<init>`(v0, v1) @signature `Lkotlin/collections/ArrayDeque$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2a09a0.  `@@kotlin.collections.ArrayDeque.Companion` @type ^`kotlin.collections.ArrayDeque$Companion` := v0 @kind object;
  #L2a09a4.  v0:= 0I;
  #L2a09a6.  v0:= new `java.lang.Object`[v0];
  #L2a09aa.  `@@kotlin.collections.ArrayDeque.emptyElementData` @type ^`java.lang.Object`[] := v0 @kind object;
  #L2a09ae.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2a09c0.  call `<init>`(v1) @signature `Lkotlin/collections/AbstractMutableList;.<init>:()V` @kind direct;
  #L2a09c6.  v0:= `@@kotlin.collections.ArrayDeque.emptyElementData` @type ^`java.lang.Object`[] @kind object;
  #L2a09ca.  v1.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] := v0 @kind object;
  #L2a09ce.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.ArrayDeque` v3 @kind this, `int` v4 ) @signature `Lkotlin/collections/ArrayDeque;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2a09e0.  call `<init>`(v3) @signature `Lkotlin/collections/AbstractMutableList;.<init>:()V` @kind direct;
  #L2a09e6.  if v4 != 0 then goto L2a09f0;
  #L2a09ea.  v4:= `@@kotlin.collections.ArrayDeque.emptyElementData` @type ^`java.lang.Object`[] @kind object;
  #L2a09ee.  goto L2a09f8;
  #L2a09f0.  if v4 <= 0 then goto L2a09fe;
  #L2a09f4.  v4:= new `java.lang.Object`[v4];
  #L2a09f8.  v3.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] := v4 @kind object;
  #L2a09fc.  return @kind void;
  #L2a09fe.  v0:= new `java.lang.IllegalArgumentException`;
  #L2a0a02.  v1:= new `java.lang.StringBuilder`;
  #L2a0a06.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2a0a0c.  v2:= "Illegal Capacity: " @kind object;
  #L2a0a10.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a0a16.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a0a1c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a0a22.  v4:= temp @kind object;
  #L2a0a24.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a0a2a.  throw v0;
}
procedure `void` `<init>`(`kotlin.collections.ArrayDeque` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lkotlin/collections/ArrayDeque;.<init>:(Ljava/util/Collection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2a0a3c.  v0:= "elements" @kind object;
  #L2a0a40.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2a0a46.  call `<init>`(v2) @signature `Lkotlin/collections/AbstractMutableList;.<init>:()V` @kind direct;
  #L2a0a4c.  v0:= 0I;
  #L2a0a4e.  v1:= new `java.lang.Object`[v0];
  #L2a0a52.  call temp:= `toArray`(v3, v1) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L2a0a58.  v3:= temp @kind object;
  #L2a0a5a.  v1:= "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>" @kind object;
  #L2a0a5e.  call temp:= `requireNonNull`(v3, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2a0a64.  v2.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] := v3 @kind object;
  #L2a0a68.  v1:= length @variable v3;
  #L2a0a6a.  v2.`kotlin.collections.ArrayDeque.size` @type ^`int` := v1;
  #L2a0a6e.  v3:= length @variable v3;
  #L2a0a70.  if v3 != 0 then goto L2a0a76;
  #L2a0a74.  v0:= 1I;
  #L2a0a76.  if v0 == 0 then goto L2a0a82;
  #L2a0a7a.  v3:= `@@kotlin.collections.ArrayDeque.emptyElementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0a7e.  v2.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] := v3 @kind object;
  #L2a0a82.  return @kind void;
}
procedure `void` `copyCollectionElements`(`kotlin.collections.ArrayDeque` v4 @kind this, `int` v5 , `java.util.Collection` v6 @kind object) @signature `Lkotlin/collections/ArrayDeque;.copyCollectionElements:(ILjava/util/Collection;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2a0cf8.  call temp:= `iterator`(v6) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a0cfe.  v0:= temp @kind object;
  #L2a0d00.  v1:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0d04.  v1:= length @variable v1;
  #L2a0d06.  if v5 >= v1 then goto L2a0d2c;
  #L2a0d0a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a0d10.  v2:= temp;
  #L2a0d12.  if v2 == 0 then goto L2a0d2c;
  #L2a0d16.  v2:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0d1a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a0d20.  v3:= temp @kind object;
  #L2a0d22.  v2[v5]:= v3 @kind object;
  #L2a0d26.  v5:= v5 + 1;
  #L2a0d2a.  goto L2a0d06;
  #L2a0d2c.  v5:= 0I;
  #L2a0d2e.  v1:= v4.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0d32.  if v5 >= v1 then goto L2a0d58;
  #L2a0d36.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a0d3c.  v2:= temp;
  #L2a0d3e.  if v2 == 0 then goto L2a0d58;
  #L2a0d42.  v2:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0d46.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a0d4c.  v3:= temp @kind object;
  #L2a0d4e.  v2[v5]:= v3 @kind object;
  #L2a0d52.  v5:= v5 + 1;
  #L2a0d56.  goto L2a0d32;
  #L2a0d58.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0d5e.  v5:= temp;
  #L2a0d60.  call temp:= `size`(v6) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L2a0d66.  v6:= temp;
  #L2a0d68.  v5:= v5 + v6 @kind int;
  #L2a0d6a.  v4.`kotlin.collections.ArrayDeque.size` @type ^`int` := v5;
  #L2a0d6e.  return @kind void;
}
procedure `void` `copyElements`(`kotlin.collections.ArrayDeque` v4 @kind this, `int` v5 ) @signature `Lkotlin/collections/ArrayDeque;.copyElements:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2a0d80.  v5:= new `java.lang.Object`[v5];
  #L2a0d84.  v0:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0d88.  v1:= v4.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0d8c.  v2:= length @variable v0;
  #L2a0d8e.  v3:= 0I;
  #L2a0d90.  call temp:= `copyInto`(v0, v5, v3, v1, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L2a0d96.  v0:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0d9a.  v1:= length @variable v0;
  #L2a0d9c.  v2:= v4.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0da0.  v1:= v1 - v2 @kind int;
  #L2a0da2.  call temp:= `copyInto`(v0, v5, v1, v3, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L2a0da8.  v4.`kotlin.collections.ArrayDeque.head` @type ^`int` := v3;
  #L2a0dac.  v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] := v5 @kind object;
  #L2a0db0.  return @kind void;
}
procedure `int` `decremented`(`kotlin.collections.ArrayDeque` v0 @kind this, `int` v1 ) @signature `Lkotlin/collections/ArrayDeque;.decremented:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;

  #L2a0238.  if v1 != 0 then goto L2a024a;
  #L2a023c.  v1:= v0.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0240.  call temp:= `getLastIndex`(v1) @signature `Lkotlin/collections/ArraysKt___ArraysKt;.getLastIndex:([Ljava/lang/Object;)I` @kind static;
  #L2a0246.  v1:= temp;
  #L2a0248.  goto L2a024e;
  #L2a024a.  v1:= v1 + -1;
  #L2a024e.  return v1;
}
procedure `void` `ensureCapacity`(`kotlin.collections.ArrayDeque` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/ArrayDeque;.ensureCapacity:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2a0dc4.  if v3 < 0 then goto L2a0e08;
  #L2a0dc8.  v0:= v2.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0dcc.  v1:= length @variable v0;
  #L2a0dce.  if v3 > v1 then goto L2a0dd4;
  #L2a0dd2.  return @kind void;
  #L2a0dd4.  v1:= `@@kotlin.collections.ArrayDeque.emptyElementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0dd8.  if v0 != v1 then goto L2a0df2;
  #L2a0ddc.  v0:= 10I;
  #L2a0de0.  call temp:= `coerceAtLeast`(v3, v0) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @kind static;
  #L2a0de6.  v3:= temp;
  #L2a0de8.  v3:= new `java.lang.Object`[v3];
  #L2a0dec.  v2.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] := v3 @kind object;
  #L2a0df0.  return @kind void;
  #L2a0df2.  v1:= `@@kotlin.collections.ArrayDeque.Companion` @type ^`kotlin.collections.ArrayDeque$Companion` @kind object;
  #L2a0df6.  v0:= length @variable v0;
  #L2a0df8.  call temp:= `newCapacity$kotlin_stdlib`(v1, v0, v3) @signature `Lkotlin/collections/ArrayDeque$Companion;.newCapacity$kotlin_stdlib:(II)I` @kind virtual;
  #L2a0dfe.  v3:= temp;
  #L2a0e00.  call `copyElements`(v2, v3) @signature `Lkotlin/collections/ArrayDeque;.copyElements:(I)V` @kind direct;
  #L2a0e06.  return @kind void;
  #L2a0e08.  v3:= new `java.lang.IllegalStateException`;
  #L2a0e0c.  v0:= "Deque is too big." @kind object;
  #L2a0e10.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a0e16.  throw v3;
}
procedure `boolean` `filterInPlace`(`kotlin.collections.ArrayDeque` v11 @kind this, `kotlin.jvm.functions.Function1` v12 @kind object) @signature `Lkotlin/collections/ArrayDeque;.filterInPlace:(Lkotlin/jvm/functions/Function1;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L29fe1c.  call temp:= `isEmpty`(v11) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L29fe22.  v0:= temp;
  #L29fe24.  v1:= 0I;
  #L29fe26.  if v0 != 0 then goto L29ff5c;
  #L29fe2a.  v0:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fe2e.  v0:= length @variable v0;
  #L29fe30.  v2:= 1I;
  #L29fe32.  if v0 != 0 then goto L29fe3a;
  #L29fe36.  v0:= 1I;
  #L29fe38.  goto L29fe3c;
  #L29fe3a.  v0:= 0I;
  #L29fe3c.  if v0 == 0 then goto L29fe44;
  #L29fe40.  goto L29ff5c;
  #L29fe44.  v0:= v11.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L29fe48.  call temp:= `size`(v11) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L29fe4e.  v3:= temp;
  #L29fe50.  v0:= v0 + v3 @kind int;
  #L29fe52.  call temp:= `positiveMod`(v11, v0) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L29fe58.  v0:= temp;
  #L29fe5a.  v3:= v11.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L29fe5e.  v4:= 0I;
  #L29fe60.  if v3 >= v0 then goto L29feae;
  #L29fe64.  v5:= v3;
  #L29fe66.  if v3 >= v0 then goto L29fea2;
  #L29fe6a.  v6:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fe6e.  v6:= v6[v3] @kind object;
  #L29fe72.  call temp:= `invoke`(v12, v6) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L29fe78.  v7:= temp @kind object;
  #L29fe7a.  v7:= (`java.lang.Boolean`) v7 @kind object;
  #L29fe7e.  call temp:= `booleanValue`(v7) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L29fe84.  v7:= temp;
  #L29fe86.  if v7 == 0 then goto L29fe9a;
  #L29fe8a.  v7:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fe8e.  v8:= v5 + 1;
  #L29fe92.  v7[v5]:= v6 @kind object;
  #L29fe96.  v5:= v8;
  #L29fe98.  goto L29fe9c;
  #L29fe9a.  v1:= 1I;
  #L29fe9c.  v3:= v3 + 1;
  #L29fea0.  goto L29fe66;
  #L29fea2.  v12:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fea6.  call `fill`(v12, v4, v5, v0) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L29feac.  goto L29ff46;
  #L29feae.  v5:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29feb2.  v5:= length @variable v5;
  #L29feb4.  v6:= v3;
  #L29feb6.  v7:= 0I;
  #L29feb8.  if v3 >= v5 then goto L29fef8;
  #L29febc.  v8:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fec0.  v9:= v8[v3] @kind object;
  #L29fec4.  v8[v3]:= v4 @kind object;
  #L29fec8.  call temp:= `invoke`(v12, v9) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L29fece.  v8:= temp @kind object;
  #L29fed0.  v8:= (`java.lang.Boolean`) v8 @kind object;
  #L29fed4.  call temp:= `booleanValue`(v8) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L29feda.  v8:= temp;
  #L29fedc.  if v8 == 0 then goto L29fef0;
  #L29fee0.  v8:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fee4.  v10:= v6 + 1;
  #L29fee8.  v8[v6]:= v9 @kind object;
  #L29feec.  v6:= v10;
  #L29feee.  goto L29fef2;
  #L29fef0.  v7:= 1I;
  #L29fef2.  v3:= v3 + 1;
  #L29fef6.  goto L29feb8;
  #L29fef8.  call temp:= `positiveMod`(v11, v6) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L29fefe.  v3:= temp;
  #L29ff00.  v5:= v3;
  #L29ff02.  if v1 >= v0 then goto L29ff44;
  #L29ff06.  v3:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29ff0a.  v6:= v3[v1] @kind object;
  #L29ff0e.  v3[v1]:= v4 @kind object;
  #L29ff12.  call temp:= `invoke`(v12, v6) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L29ff18.  v3:= temp @kind object;
  #L29ff1a.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L29ff1e.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L29ff24.  v3:= temp;
  #L29ff26.  if v3 == 0 then goto L29ff3c;
  #L29ff2a.  v3:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29ff2e.  v3[v5]:= v6 @kind object;
  #L29ff32.  call temp:= `incremented`(v11, v5) @signature `Lkotlin/collections/ArrayDeque;.incremented:(I)I` @kind direct;
  #L29ff38.  v5:= temp;
  #L29ff3a.  goto L29ff3e;
  #L29ff3c.  v7:= 1I;
  #L29ff3e.  v1:= v1 + 1;
  #L29ff42.  goto L29ff02;
  #L29ff44.  v1:= v7;
  #L29ff46.  if v1 == 0 then goto L29ff5c;
  #L29ff4a.  v12:= v11.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L29ff4e.  v5:= v5 - v12 @kind int;
  #L29ff50.  call temp:= `negativeMod`(v11, v5) @signature `Lkotlin/collections/ArrayDeque;.negativeMod:(I)I` @kind direct;
  #L29ff56.  v12:= temp;
  #L29ff58.  v11.`kotlin.collections.ArrayDeque.size` @type ^`int` := v12;
  #L29ff5c.  return v1;
}
procedure `int` `incremented`(`kotlin.collections.ArrayDeque` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/ArrayDeque;.incremented:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2a0278.  v0:= v1.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a027c.  call temp:= `getLastIndex`(v0) @signature `Lkotlin/collections/ArraysKt___ArraysKt;.getLastIndex:([Ljava/lang/Object;)I` @kind static;
  #L2a0282.  v0:= temp;
  #L2a0284.  if v2 != v0 then goto L2a028c;
  #L2a0288.  v2:= 0I;
  #L2a028a.  goto L2a0290;
  #L2a028c.  v2:= v2 + 1;
  #L2a0290.  return v2;
}
procedure `java.lang.Object` `internalGet`(`kotlin.collections.ArrayDeque` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/ArrayDeque;.internalGet:(I)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2a052c.  v0:= v1.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0530.  v2:= v0[v2] @kind object;
  #L2a0534.  return v2 @kind object;
}
procedure `int` `internalIndex`(`kotlin.collections.ArrayDeque` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/ArrayDeque;.internalIndex:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2a0358.  v0:= v1.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a035c.  v0:= v0 + v2 @kind int;
  #L2a035e.  call temp:= `positiveMod`(v1, v0) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a0364.  v2:= temp;
  #L2a0366.  return v2;
}
procedure `int` `negativeMod`(`kotlin.collections.ArrayDeque` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/ArrayDeque;.negativeMod:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2a0444.  if v2 >= 0 then goto L2a0450;
  #L2a0448.  v0:= v1.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a044c.  v0:= length @variable v0;
  #L2a044e.  v2:= v2 + v0 @kind int;
  #L2a0450.  return v2;
}
procedure `int` `positiveMod`(`kotlin.collections.ArrayDeque` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L2a0464.  v0:= v2.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0468.  v1:= length @variable v0;
  #L2a046a.  if v3 < v1 then goto L2a0472;
  #L2a046e.  v0:= length @variable v0;
  #L2a0470.  v3:= v3 - v0 @kind int;
  #L2a0472.  return v3;
}
procedure `void` `add`(`kotlin.collections.ArrayDeque` v7 @kind this, `int` v8 , `java.lang.Object` v9 @kind object) @signature `Lkotlin/collections/ArrayDeque;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2a0a94.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L2a0a98.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0a9e.  v1:= temp;
  #L2a0aa0.  call `checkPositionIndex$kotlin_stdlib`(v0, v8, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkPositionIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L2a0aa6.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0aac.  v0:= temp;
  #L2a0aae.  if v8 != v0 then goto L2a0aba;
  #L2a0ab2.  call `addLast`(v7, v9) @signature `Lkotlin/collections/ArrayDeque;.addLast:(Ljava/lang/Object;)V` @kind virtual;
  #L2a0ab8.  return @kind void;
  #L2a0aba.  if v8 != 0 then goto L2a0ac6;
  #L2a0abe.  call `addFirst`(v7, v9) @signature `Lkotlin/collections/ArrayDeque;.addFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L2a0ac4.  return @kind void;
  #L2a0ac6.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0acc.  v0:= temp;
  #L2a0ace.  v1:= 1I;
  #L2a0ad0.  v0:= v0 + v1 @kind int;
  #L2a0ad2.  call `ensureCapacity`(v7, v0) @signature `Lkotlin/collections/ArrayDeque;.ensureCapacity:(I)V` @kind direct;
  #L2a0ad8.  v0:= v7.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0adc.  v0:= v0 + v8 @kind int;
  #L2a0ade.  call temp:= `positiveMod`(v7, v0) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a0ae4.  v0:= temp;
  #L2a0ae6.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0aec.  v2:= temp;
  #L2a0aee.  v2:= v2 + v1 @kind int;
  #L2a0af0.  v2:= v2 ^> v1 @kind int;
  #L2a0af2.  v3:= 0I;
  #L2a0af4.  if v8 >= v2 then goto L2a0b68;
  #L2a0af8.  call temp:= `decremented`(v7, v0) @signature `Lkotlin/collections/ArrayDeque;.decremented:(I)I` @kind direct;
  #L2a0afe.  v8:= temp;
  #L2a0b00.  v0:= v7.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0b04.  call temp:= `decremented`(v7, v0) @signature `Lkotlin/collections/ArrayDeque;.decremented:(I)I` @kind direct;
  #L2a0b0a.  v0:= temp;
  #L2a0b0c.  v2:= v7.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0b10.  if v8 < v2 then goto L2a0b30;
  #L2a0b14.  v3:= v7.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0b18.  v4:= v3[v2] @kind object;
  #L2a0b1c.  v3[v0]:= v4 @kind object;
  #L2a0b20.  v4:= v2 + 1;
  #L2a0b24.  v5:= v8 + 1;
  #L2a0b28.  call temp:= `copyInto`(v3, v3, v2, v4, v5) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L2a0b2e.  goto L2a0b5a;
  #L2a0b30.  v4:= v7.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0b34.  v5:= v2 + -1;
  #L2a0b38.  v6:= length @variable v4;
  #L2a0b3a.  call temp:= `copyInto`(v4, v4, v5, v2, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L2a0b40.  v2:= v7.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0b44.  v4:= length @variable v2;
  #L2a0b46.  v4:= v4 - v1 @kind int;
  #L2a0b48.  v5:= v2[v3] @kind object;
  #L2a0b4c.  v2[v4]:= v5 @kind object;
  #L2a0b50.  v4:= v8 + 1;
  #L2a0b54.  call temp:= `copyInto`(v2, v2, v3, v1, v4) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L2a0b5a.  v2:= v7.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0b5e.  v2[v8]:= v9 @kind object;
  #L2a0b62.  v7.`kotlin.collections.ArrayDeque.head` @type ^`int` := v0;
  #L2a0b66.  goto L2a0bc2;
  #L2a0b68.  v8:= v7.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0b6c.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0b72.  v2:= temp;
  #L2a0b74.  v8:= v8 + v2 @kind int;
  #L2a0b76.  call temp:= `positiveMod`(v7, v8) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a0b7c.  v8:= temp;
  #L2a0b7e.  if v0 >= v8 then goto L2a0b92;
  #L2a0b82.  v2:= v7.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0b86.  v3:= v0 + 1;
  #L2a0b8a.  call temp:= `copyInto`(v2, v2, v3, v0, v8) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L2a0b90.  goto L2a0bba;
  #L2a0b92.  v2:= v7.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0b96.  call temp:= `copyInto`(v2, v2, v1, v3, v8) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L2a0b9c.  v8:= v7.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0ba0.  v2:= length @variable v8;
  #L2a0ba2.  v2:= v2 - v1 @kind int;
  #L2a0ba4.  v2:= v8[v2] @kind object;
  #L2a0ba8.  v8[v3]:= v2 @kind object;
  #L2a0bac.  v2:= v0 + 1;
  #L2a0bb0.  v3:= length @variable v8;
  #L2a0bb2.  v3:= v3 - v1 @kind int;
  #L2a0bb4.  call temp:= `copyInto`(v8, v8, v2, v0, v3) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L2a0bba.  v8:= v7.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0bbe.  v8[v0]:= v9 @kind object;
  #L2a0bc2.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0bc8.  v8:= temp;
  #L2a0bca.  v8:= v8 + v1 @kind int;
  #L2a0bcc.  v7.`kotlin.collections.ArrayDeque.size` @type ^`int` := v8;
  #L2a0bd0.  return @kind void;
}
procedure `boolean` `add`(`kotlin.collections.ArrayDeque` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/ArrayDeque;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L29fb9c.  call `addLast`(v0, v1) @signature `Lkotlin/collections/ArrayDeque;.addLast:(Ljava/lang/Object;)V` @kind virtual;
  #L29fba2.  v1:= 1I;
  #L29fba4.  return v1;
}
procedure `boolean` `addAll`(`kotlin.collections.ArrayDeque` v8 @kind this, `int` v9 , `java.util.Collection` v10 @kind object) @signature `Lkotlin/collections/ArrayDeque;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L29fbb8.  v0:= "elements" @kind object;
  #L29fbbc.  call `checkNotNullParameter`(v10, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29fbc2.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L29fbc6.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L29fbcc.  v1:= temp;
  #L29fbce.  call `checkPositionIndex$kotlin_stdlib`(v0, v9, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkPositionIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L29fbd4.  call temp:= `isEmpty`(v10) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L29fbda.  v0:= temp;
  #L29fbdc.  v1:= 0I;
  #L29fbde.  if v0 == 0 then goto L29fbe4;
  #L29fbe2.  return v1;
  #L29fbe4.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L29fbea.  v0:= temp;
  #L29fbec.  if v9 != v0 then goto L29fbfa;
  #L29fbf0.  call temp:= `addAll`(v8, v10) @signature `Lkotlin/collections/ArrayDeque;.addAll:(Ljava/util/Collection;)Z` @kind virtual;
  #L29fbf6.  v9:= temp;
  #L29fbf8.  return v9;
  #L29fbfa.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L29fc00.  v0:= temp;
  #L29fc02.  call temp:= `size`(v10) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L29fc08.  v2:= temp;
  #L29fc0a.  v0:= v0 + v2 @kind int;
  #L29fc0c.  call `ensureCapacity`(v8, v0) @signature `Lkotlin/collections/ArrayDeque;.ensureCapacity:(I)V` @kind direct;
  #L29fc12.  v0:= v8.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L29fc16.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L29fc1c.  v2:= temp;
  #L29fc1e.  v0:= v0 + v2 @kind int;
  #L29fc20.  call temp:= `positiveMod`(v8, v0) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L29fc26.  v0:= temp;
  #L29fc28.  v2:= v8.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L29fc2c.  v2:= v2 + v9 @kind int;
  #L29fc2e.  call temp:= `positiveMod`(v8, v2) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L29fc34.  v2:= temp;
  #L29fc36.  call temp:= `size`(v10) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L29fc3c.  v3:= temp;
  #L29fc3e.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L29fc44.  v4:= temp;
  #L29fc46.  v5:= 1I;
  #L29fc48.  v4:= v4 + v5 @kind int;
  #L29fc4a.  v4:= v4 ^> v5 @kind int;
  #L29fc4c.  if v9 >= v4 then goto L29fcf2;
  #L29fc50.  v9:= v8.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L29fc54.  v0:= v9 - v3 @kind int;
  #L29fc58.  if v2 < v9 then goto L29fca4;
  #L29fc5c.  if v0 < 0 then goto L29fc6c;
  #L29fc60.  v1:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fc64.  call temp:= `copyInto`(v1, v1, v0, v9, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L29fc6a.  goto L29fcdc;
  #L29fc6c.  v4:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fc70.  v6:= length @variable v4;
  #L29fc72.  v0:= v0 + v6 @kind int;
  #L29fc74.  v6:= v2 - v9 @kind int;
  #L29fc78.  v7:= length @variable v4;
  #L29fc7a.  v7:= v7 - v0 @kind int;
  #L29fc7c.  if v7 < v6 then goto L29fc88;
  #L29fc80.  call temp:= `copyInto`(v4, v4, v0, v9, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L29fc86.  goto L29fcdc;
  #L29fc88.  v6:= v9 + v7 @kind int;
  #L29fc8c.  call temp:= `copyInto`(v4, v4, v0, v9, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L29fc92.  v9:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fc96.  v4:= v8.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L29fc9a.  v4:= v4 + v7 @kind int;
  #L29fc9c.  call temp:= `copyInto`(v9, v9, v1, v4, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L29fca2.  goto L29fcdc;
  #L29fca4.  v4:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fca8.  v6:= length @variable v4;
  #L29fcaa.  call temp:= `copyInto`(v4, v4, v0, v9, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L29fcb0.  if v3 < v2 then goto L29fcc4;
  #L29fcb4.  v9:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fcb8.  v4:= length @variable v9;
  #L29fcba.  v4:= v4 - v3 @kind int;
  #L29fcbc.  call temp:= `copyInto`(v9, v9, v4, v1, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L29fcc2.  goto L29fcdc;
  #L29fcc4.  v9:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fcc8.  v4:= length @variable v9;
  #L29fcca.  v4:= v4 - v3 @kind int;
  #L29fccc.  call temp:= `copyInto`(v9, v9, v4, v1, v3) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L29fcd2.  v9:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fcd6.  call temp:= `copyInto`(v9, v9, v1, v3, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L29fcdc.  v8.`kotlin.collections.ArrayDeque.head` @type ^`int` := v0;
  #L29fce0.  v2:= v2 - v3 @kind int;
  #L29fce2.  call temp:= `negativeMod`(v8, v2) @signature `Lkotlin/collections/ArrayDeque;.negativeMod:(I)I` @kind direct;
  #L29fce8.  v9:= temp;
  #L29fcea.  call `copyCollectionElements`(v8, v9, v10) @signature `Lkotlin/collections/ArrayDeque;.copyCollectionElements:(ILjava/util/Collection;)V` @kind direct;
  #L29fcf0.  goto L29fd7c;
  #L29fcf2.  v9:= v2 + v3 @kind int;
  #L29fcf6.  if v2 >= v0 then goto L29fd3a;
  #L29fcfa.  v3:= v3 + v0 @kind int;
  #L29fcfc.  v4:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fd00.  v6:= length @variable v4;
  #L29fd02.  if v3 > v6 then goto L29fd0e;
  #L29fd06.  call temp:= `copyInto`(v4, v4, v9, v2, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L29fd0c.  goto L29fd76;
  #L29fd0e.  v6:= length @variable v4;
  #L29fd10.  if v9 < v6 then goto L29fd20;
  #L29fd14.  v1:= length @variable v4;
  #L29fd16.  v9:= v9 - v1 @kind int;
  #L29fd18.  call temp:= `copyInto`(v4, v4, v9, v2, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L29fd1e.  goto L29fd76;
  #L29fd20.  v6:= length @variable v4;
  #L29fd22.  v3:= v3 - v6 @kind int;
  #L29fd24.  v3:= v0 - v3 @kind int;
  #L29fd28.  call temp:= `copyInto`(v4, v4, v1, v3, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L29fd2e.  v0:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fd32.  call temp:= `copyInto`(v0, v0, v9, v2, v3) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L29fd38.  goto L29fd76;
  #L29fd3a.  v4:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fd3e.  call temp:= `copyInto`(v4, v4, v3, v1, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L29fd44.  v0:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fd48.  v4:= length @variable v0;
  #L29fd4a.  if v9 < v4 then goto L29fd5c;
  #L29fd4e.  v1:= length @variable v0;
  #L29fd50.  v9:= v9 - v1 @kind int;
  #L29fd52.  v1:= length @variable v0;
  #L29fd54.  call temp:= `copyInto`(v0, v0, v9, v2, v1) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L29fd5a.  goto L29fd76;
  #L29fd5c.  v4:= length @variable v0;
  #L29fd5e.  v4:= v4 - v3 @kind int;
  #L29fd60.  v6:= length @variable v0;
  #L29fd62.  call temp:= `copyInto`(v0, v0, v1, v4, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L29fd68.  v0:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29fd6c.  v1:= length @variable v0;
  #L29fd6e.  v1:= v1 - v3 @kind int;
  #L29fd70.  call temp:= `copyInto`(v0, v0, v9, v2, v1) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L29fd76.  call `copyCollectionElements`(v8, v2, v10) @signature `Lkotlin/collections/ArrayDeque;.copyCollectionElements:(ILjava/util/Collection;)V` @kind direct;
  #L29fd7c.  return v5;
}
procedure `boolean` `addAll`(`kotlin.collections.ArrayDeque` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lkotlin/collections/ArrayDeque;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29fd90.  v0:= "elements" @kind object;
  #L29fd94.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29fd9a.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L29fda0.  v0:= temp;
  #L29fda2.  if v0 == 0 then goto L29fdaa;
  #L29fda6.  v3:= 0I;
  #L29fda8.  return v3;
  #L29fdaa.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L29fdb0.  v0:= temp;
  #L29fdb2.  call temp:= `size`(v3) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L29fdb8.  v1:= temp;
  #L29fdba.  v0:= v0 + v1 @kind int;
  #L29fdbc.  call `ensureCapacity`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.ensureCapacity:(I)V` @kind direct;
  #L29fdc2.  v0:= v2.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L29fdc6.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L29fdcc.  v1:= temp;
  #L29fdce.  v0:= v0 + v1 @kind int;
  #L29fdd0.  call temp:= `positiveMod`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L29fdd6.  v0:= temp;
  #L29fdd8.  call `copyCollectionElements`(v2, v0, v3) @signature `Lkotlin/collections/ArrayDeque;.copyCollectionElements:(ILjava/util/Collection;)V` @kind direct;
  #L29fdde.  v3:= 1I;
  #L29fde0.  return v3;
}
procedure `void` `addFirst`(`kotlin.collections.ArrayDeque` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/collections/ArrayDeque;.addFirst:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2a0be4.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0bea.  v0:= temp;
  #L2a0bec.  v0:= v0 + 1;
  #L2a0bf0.  call `ensureCapacity`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.ensureCapacity:(I)V` @kind direct;
  #L2a0bf6.  v0:= v2.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0bfa.  call temp:= `decremented`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.decremented:(I)I` @kind direct;
  #L2a0c00.  v0:= temp;
  #L2a0c02.  v2.`kotlin.collections.ArrayDeque.head` @type ^`int` := v0;
  #L2a0c06.  v1:= v2.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0c0a.  v1[v0]:= v3 @kind object;
  #L2a0c0e.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0c14.  v3:= temp;
  #L2a0c16.  v3:= v3 + 1;
  #L2a0c1a.  v2.`kotlin.collections.ArrayDeque.size` @type ^`int` := v3;
  #L2a0c1e.  return @kind void;
}
procedure `void` `addLast`(`kotlin.collections.ArrayDeque` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/ArrayDeque;.addLast:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2a0c30.  call temp:= `size`(v3) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0c36.  v0:= temp;
  #L2a0c38.  v0:= v0 + 1;
  #L2a0c3c.  call `ensureCapacity`(v3, v0) @signature `Lkotlin/collections/ArrayDeque;.ensureCapacity:(I)V` @kind direct;
  #L2a0c42.  v0:= v3.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0c46.  v1:= v3.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0c4a.  call temp:= `size`(v3) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0c50.  v2:= temp;
  #L2a0c52.  v1:= v1 + v2 @kind int;
  #L2a0c54.  call temp:= `positiveMod`(v3, v1) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a0c5a.  v1:= temp;
  #L2a0c5c.  v0[v1]:= v4 @kind object;
  #L2a0c60.  call temp:= `size`(v3) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0c66.  v4:= temp;
  #L2a0c68.  v4:= v4 + 1;
  #L2a0c6c.  v3.`kotlin.collections.ArrayDeque.size` @type ^`int` := v4;
  #L2a0c70.  return @kind void;
}
procedure `void` `clear`(`kotlin.collections.ArrayDeque` v6 @kind this) @signature `Lkotlin/collections/ArrayDeque;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2a0c84.  v0:= v6.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0c88.  call temp:= `size`(v6) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0c8e.  v1:= temp;
  #L2a0c90.  v0:= v0 + v1 @kind int;
  #L2a0c92.  call temp:= `positiveMod`(v6, v0) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a0c98.  v0:= temp;
  #L2a0c9a.  v1:= v6.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0c9e.  v2:= 0I;
  #L2a0ca0.  v3:= 0I;
  #L2a0ca2.  if v1 >= v0 then goto L2a0cb2;
  #L2a0ca6.  v4:= v6.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0caa.  call `fill`(v4, v3, v1, v0) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L2a0cb0.  goto L2a0cdc;
  #L2a0cb2.  call temp:= `isEmpty`(v6) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L2a0cb8.  v1:= temp;
  #L2a0cba.  v1:= v1 ^~ 1;
  #L2a0cbe.  if v1 == 0 then goto L2a0cdc;
  #L2a0cc2.  v1:= v6.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0cc6.  v4:= v6.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0cca.  v5:= length @variable v1;
  #L2a0ccc.  call `fill`(v1, v3, v4, v5) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L2a0cd2.  v1:= v6.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0cd6.  call `fill`(v1, v3, v2, v0) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L2a0cdc.  v6.`kotlin.collections.ArrayDeque.head` @type ^`int` := v2;
  #L2a0ce0.  v6.`kotlin.collections.ArrayDeque.size` @type ^`int` := v2;
  #L2a0ce4.  return @kind void;
}
procedure `boolean` `contains`(`kotlin.collections.ArrayDeque` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/ArrayDeque;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29fdf4.  call temp:= `indexOf`(v1, v2) @signature `Lkotlin/collections/ArrayDeque;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L29fdfa.  v2:= temp;
  #L29fdfc.  v0:= -1I;
  #L29fdfe.  if v2 == v0 then goto L29fe06;
  #L29fe02.  v2:= 1I;
  #L29fe04.  goto L29fe08;
  #L29fe06.  v2:= 0I;
  #L29fe08.  return v2;
}
procedure `java.lang.Object` `first`(`kotlin.collections.ArrayDeque` v2 @kind this) @signature `Lkotlin/collections/ArrayDeque;.first:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2a0484.  call temp:= `isEmpty`(v2) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L2a048a.  v0:= temp;
  #L2a048c.  if v0 != 0 then goto L2a049e;
  #L2a0490.  v0:= v2.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0494.  v1:= v2.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0498.  v0:= v0[v1] @kind object;
  #L2a049c.  return v0 @kind object;
  #L2a049e.  v0:= new `java.util.NoSuchElementException`;
  #L2a04a2.  v1:= "ArrayDeque is empty." @kind object;
  #L2a04a6.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a04ac.  throw v0;
}
procedure `java.lang.Object` `firstOrNull`(`kotlin.collections.ArrayDeque` v2 @kind this) @signature `Lkotlin/collections/ArrayDeque;.firstOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2a04c0.  call temp:= `isEmpty`(v2) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L2a04c6.  v0:= temp;
  #L2a04c8.  if v0 == 0 then goto L2a04d0;
  #L2a04cc.  v0:= 0I;
  #L2a04ce.  goto L2a04dc;
  #L2a04d0.  v0:= v2.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a04d4.  v1:= v2.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a04d8.  v0:= v0[v1] @kind object;
  #L2a04dc.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`kotlin.collections.ArrayDeque` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/ArrayDeque;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a04f0.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L2a04f4.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a04fa.  v1:= temp;
  #L2a04fc.  call `checkElementIndex$kotlin_stdlib`(v0, v3, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L2a0502.  v0:= v2.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0506.  v1:= v2.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a050a.  v1:= v1 + v3 @kind int;
  #L2a050c.  call temp:= `positiveMod`(v2, v1) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a0512.  v3:= temp;
  #L2a0514.  v3:= v0[v3] @kind object;
  #L2a0518.  return v3 @kind object;
}
procedure `int` `getSize`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a0260.  v0:= v1.`kotlin.collections.ArrayDeque.size` @type ^`int`;
  #L2a0264.  return v0;
}
procedure `int` `indexOf`(`kotlin.collections.ArrayDeque` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlin/collections/ArrayDeque;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2a02a4.  v0:= v4.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a02a8.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a02ae.  v1:= temp;
  #L2a02b0.  v0:= v0 + v1 @kind int;
  #L2a02b2.  call temp:= `positiveMod`(v4, v0) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a02b8.  v0:= temp;
  #L2a02ba.  v1:= v4.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a02be.  if v1 >= v0 then goto L2a02e8;
  #L2a02c2.  if v1 >= v0 then goto L2a0344;
  #L2a02c6.  v2:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a02ca.  v2:= v2[v1] @kind object;
  #L2a02ce.  call temp:= `areEqual`(v5, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2a02d4.  v2:= temp;
  #L2a02d6.  if v2 == 0 then goto L2a02e2;
  #L2a02da.  v5:= v4.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a02de.  v1:= v1 - v5 @kind int;
  #L2a02e0.  return v1;
  #L2a02e2.  v1:= v1 + 1;
  #L2a02e6.  goto L2a02c2;
  #L2a02e8.  if v1 < v0 then goto L2a0344;
  #L2a02ec.  v2:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a02f0.  v2:= length @variable v2;
  #L2a02f2.  if v1 >= v2 then goto L2a0316;
  #L2a02f6.  v3:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a02fa.  v3:= v3[v1] @kind object;
  #L2a02fe.  call temp:= `areEqual`(v5, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2a0304.  v3:= temp;
  #L2a0306.  if v3 == 0 then goto L2a0310;
  #L2a030a.  v5:= v4.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a030e.  goto L2a02de;
  #L2a0310.  v1:= v1 + 1;
  #L2a0314.  goto L2a02f2;
  #L2a0316.  v1:= 0I;
  #L2a0318.  if v1 >= v0 then goto L2a0344;
  #L2a031c.  v2:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0320.  v2:= v2[v1] @kind object;
  #L2a0324.  call temp:= `areEqual`(v5, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2a032a.  v2:= temp;
  #L2a032c.  if v2 == 0 then goto L2a033e;
  #L2a0330.  v5:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0334.  v5:= length @variable v5;
  #L2a0336.  v1:= v1 + v5 @kind int;
  #L2a0338.  v5:= v4.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a033c.  goto L2a02de;
  #L2a033e.  v1:= v1 + 1;
  #L2a0342.  goto L2a0318;
  #L2a0344.  v5:= -1I;
  #L2a0346.  return v5;
}
procedure `void` `internalStructure$kotlin_stdlib`(`kotlin.collections.ArrayDeque` v2 @kind this, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/collections/ArrayDeque;.internalStructure$kotlin_stdlib:(Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2a0e28.  v0:= "structure" @kind object;
  #L2a0e2c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2a0e32.  v0:= v2.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0e36.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0e3c.  v1:= temp;
  #L2a0e3e.  v0:= v0 + v1 @kind int;
  #L2a0e40.  call temp:= `positiveMod`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a0e46.  v0:= temp;
  #L2a0e48.  call temp:= `isEmpty`(v2) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L2a0e4e.  v1:= temp;
  #L2a0e50.  if v1 != 0 then goto L2a0e68;
  #L2a0e54.  v1:= v2.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0e58.  if v1 >= v0 then goto L2a0e5e;
  #L2a0e5c.  goto L2a0e68;
  #L2a0e5e.  v0:= v2.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0e62.  v0:= length @variable v0;
  #L2a0e64.  v1:= v1 - v0 @kind int;
  #L2a0e66.  goto L2a0e6c;
  #L2a0e68.  v1:= v2.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0e6c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2a0e72.  v0:= temp @kind object;
  #L2a0e74.  call temp:= `toArray`(v2) @signature `Lkotlin/collections/ArrayDeque;.toArray:()[Ljava/lang/Object;` @kind virtual;
  #L2a0e7a.  v1:= temp @kind object;
  #L2a0e7c.  call temp:= `invoke`(v3, v0, v1) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2a0e82.  return @kind void;
}
procedure `boolean` `isEmpty`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ff70.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L29ff76.  v0:= temp;
  #L29ff78.  if v0 != 0 then goto L29ff80;
  #L29ff7c.  v0:= 1I;
  #L29ff7e.  goto L29ff82;
  #L29ff80.  v0:= 0I;
  #L29ff82.  return v0;
}
procedure `java.lang.Object` `last`(`kotlin.collections.ArrayDeque` v3 @kind this) @signature `Lkotlin/collections/ArrayDeque;.last:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2a0548.  call temp:= `isEmpty`(v3) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L2a054e.  v0:= temp;
  #L2a0550.  if v0 != 0 then goto L2a0574;
  #L2a0554.  v0:= v3.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0558.  v1:= v3.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a055c.  call temp:= `getLastIndex`(v3) @signature `Lkotlin/collections/CollectionsKt;.getLastIndex:(Ljava/util/List;)I` @kind static;
  #L2a0562.  v2:= temp;
  #L2a0564.  v1:= v1 + v2 @kind int;
  #L2a0566.  call temp:= `positiveMod`(v3, v1) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a056c.  v1:= temp;
  #L2a056e.  v0:= v0[v1] @kind object;
  #L2a0572.  return v0 @kind object;
  #L2a0574.  v0:= new `java.util.NoSuchElementException`;
  #L2a0578.  v1:= "ArrayDeque is empty." @kind object;
  #L2a057c.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a0582.  throw v0;
}
procedure `int` `lastIndexOf`(`kotlin.collections.ArrayDeque` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlin/collections/ArrayDeque;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2a0378.  v0:= v4.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a037c.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0382.  v1:= temp;
  #L2a0384.  v0:= v0 + v1 @kind int;
  #L2a0386.  call temp:= `positiveMod`(v4, v0) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a038c.  v0:= temp;
  #L2a038e.  v1:= v4.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0392.  v2:= -1I;
  #L2a0394.  if v1 >= v0 then goto L2a03c6;
  #L2a0398.  v0:= v0 + -1;
  #L2a039c.  if v1 > v0 then goto L2a0432;
  #L2a03a0.  v3:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a03a4.  v3:= v3[v0] @kind object;
  #L2a03a8.  call temp:= `areEqual`(v5, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2a03ae.  v3:= temp;
  #L2a03b0.  if v3 == 0 then goto L2a03bc;
  #L2a03b4.  v5:= v4.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a03b8.  v0:= v0 - v5 @kind int;
  #L2a03ba.  return v0;
  #L2a03bc.  if v0 == v1 then goto L2a0432;
  #L2a03c0.  v0:= v0 + -1;
  #L2a03c4.  goto L2a03a0;
  #L2a03c6.  if v1 <= v0 then goto L2a0432;
  #L2a03ca.  v0:= v0 + -1;
  #L2a03ce.  if v2 >= v0 then goto L2a03fa;
  #L2a03d2.  v1:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a03d6.  v1:= v1[v0] @kind object;
  #L2a03da.  call temp:= `areEqual`(v5, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2a03e0.  v1:= temp;
  #L2a03e2.  if v1 == 0 then goto L2a03f4;
  #L2a03e6.  v5:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a03ea.  v5:= length @variable v5;
  #L2a03ec.  v0:= v0 + v5 @kind int;
  #L2a03ee.  v5:= v4.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a03f2.  goto L2a03b8;
  #L2a03f4.  v0:= v0 + -1;
  #L2a03f8.  goto L2a03ce;
  #L2a03fa.  v0:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a03fe.  call temp:= `getLastIndex`(v0) @signature `Lkotlin/collections/ArraysKt___ArraysKt;.getLastIndex:([Ljava/lang/Object;)I` @kind static;
  #L2a0404.  v0:= temp;
  #L2a0406.  v1:= v4.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a040a.  if v1 > v0 then goto L2a0432;
  #L2a040e.  v3:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0412.  v3:= v3[v0] @kind object;
  #L2a0416.  call temp:= `areEqual`(v5, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2a041c.  v3:= temp;
  #L2a041e.  if v3 == 0 then goto L2a0428;
  #L2a0422.  v5:= v4.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0426.  goto L2a03b8;
  #L2a0428.  if v0 == v1 then goto L2a0432;
  #L2a042c.  v0:= v0 + -1;
  #L2a0430.  goto L2a040e;
  #L2a0432.  return v2;
}
procedure `java.lang.Object` `lastOrNull`(`kotlin.collections.ArrayDeque` v3 @kind this) @signature `Lkotlin/collections/ArrayDeque;.lastOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2a0594.  call temp:= `isEmpty`(v3) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L2a059a.  v0:= temp;
  #L2a059c.  if v0 == 0 then goto L2a05a4;
  #L2a05a0.  v0:= 0I;
  #L2a05a2.  goto L2a05c2;
  #L2a05a4.  v0:= v3.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a05a8.  v1:= v3.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a05ac.  call temp:= `getLastIndex`(v3) @signature `Lkotlin/collections/CollectionsKt;.getLastIndex:(Ljava/util/List;)I` @kind static;
  #L2a05b2.  v2:= temp;
  #L2a05b4.  v1:= v1 + v2 @kind int;
  #L2a05b6.  call temp:= `positiveMod`(v3, v1) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a05bc.  v1:= temp;
  #L2a05be.  v0:= v0[v1] @kind object;
  #L2a05c2.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.collections.ArrayDeque` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/ArrayDeque;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ff94.  call temp:= `indexOf`(v1, v2) @signature `Lkotlin/collections/ArrayDeque;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L29ff9a.  v2:= temp;
  #L29ff9c.  v0:= -1I;
  #L29ff9e.  if v2 != v0 then goto L29ffa6;
  #L29ffa2.  v2:= 0I;
  #L29ffa4.  return v2;
  #L29ffa6.  call temp:= `remove`(v1, v2) @signature `Lkotlin/collections/AbstractMutableList;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L29ffac.  v2:= 1I;
  #L29ffae.  return v2;
}
procedure `boolean` `removeAll`(`kotlin.collections.ArrayDeque` v11 @kind this, `java.util.Collection` v12 @kind object) @signature `Lkotlin/collections/ArrayDeque;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L29ffc0.  v0:= "elements" @kind object;
  #L29ffc4.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29ffca.  call temp:= `isEmpty`(v11) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L29ffd0.  v0:= temp;
  #L29ffd2.  v1:= 0I;
  #L29ffd4.  if v0 != 0 then goto L2a00ec;
  #L29ffd8.  v0:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L29ffdc.  v0:= length @variable v0;
  #L29ffde.  v2:= 1I;
  #L29ffe0.  if v0 != 0 then goto L29ffe8;
  #L29ffe4.  v0:= 1I;
  #L29ffe6.  goto L29ffea;
  #L29ffe8.  v0:= 0I;
  #L29ffea.  if v0 == 0 then goto L29fff2;
  #L29ffee.  goto L2a00ec;
  #L29fff2.  v0:= v11.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L29fff6.  call temp:= `size`(v11) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L29fffc.  v3:= temp;
  #L29fffe.  v0:= v0 + v3 @kind int;
  #L2a0000.  call temp:= `positiveMod`(v11, v0) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a0006.  v0:= temp;
  #L2a0008.  v3:= v11.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a000c.  v4:= 0I;
  #L2a000e.  if v3 >= v0 then goto L2a0052;
  #L2a0012.  v5:= v3;
  #L2a0014.  if v3 >= v0 then goto L2a0046;
  #L2a0018.  v6:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a001c.  v6:= v6[v3] @kind object;
  #L2a0020.  call temp:= `contains`(v12, v6) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2a0026.  v7:= temp;
  #L2a0028.  v7:= v7 ^~ v2 @kind int;
  #L2a002a.  if v7 == 0 then goto L2a003e;
  #L2a002e.  v7:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0032.  v8:= v5 + 1;
  #L2a0036.  v7[v5]:= v6 @kind object;
  #L2a003a.  v5:= v8;
  #L2a003c.  goto L2a0040;
  #L2a003e.  v1:= 1I;
  #L2a0040.  v3:= v3 + 1;
  #L2a0044.  goto L2a0014;
  #L2a0046.  v12:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a004a.  call `fill`(v12, v4, v5, v0) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L2a0050.  goto L2a00d6;
  #L2a0052.  v5:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0056.  v5:= length @variable v5;
  #L2a0058.  v6:= v3;
  #L2a005a.  v7:= 0I;
  #L2a005c.  if v3 >= v5 then goto L2a0092;
  #L2a0060.  v8:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0064.  v9:= v8[v3] @kind object;
  #L2a0068.  v8[v3]:= v4 @kind object;
  #L2a006c.  call temp:= `contains`(v12, v9) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2a0072.  v8:= temp;
  #L2a0074.  v8:= v8 ^~ v2 @kind int;
  #L2a0076.  if v8 == 0 then goto L2a008a;
  #L2a007a.  v8:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a007e.  v10:= v6 + 1;
  #L2a0082.  v8[v6]:= v9 @kind object;
  #L2a0086.  v6:= v10;
  #L2a0088.  goto L2a008c;
  #L2a008a.  v7:= 1I;
  #L2a008c.  v3:= v3 + 1;
  #L2a0090.  goto L2a005c;
  #L2a0092.  call temp:= `positiveMod`(v11, v6) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a0098.  v3:= temp;
  #L2a009a.  v5:= v3;
  #L2a009c.  if v1 >= v0 then goto L2a00d4;
  #L2a00a0.  v3:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a00a4.  v6:= v3[v1] @kind object;
  #L2a00a8.  v3[v1]:= v4 @kind object;
  #L2a00ac.  call temp:= `contains`(v12, v6) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2a00b2.  v3:= temp;
  #L2a00b4.  v3:= v3 ^~ v2 @kind int;
  #L2a00b6.  if v3 == 0 then goto L2a00cc;
  #L2a00ba.  v3:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a00be.  v3[v5]:= v6 @kind object;
  #L2a00c2.  call temp:= `incremented`(v11, v5) @signature `Lkotlin/collections/ArrayDeque;.incremented:(I)I` @kind direct;
  #L2a00c8.  v5:= temp;
  #L2a00ca.  goto L2a00ce;
  #L2a00cc.  v7:= 1I;
  #L2a00ce.  v1:= v1 + 1;
  #L2a00d2.  goto L2a009c;
  #L2a00d4.  v1:= v7;
  #L2a00d6.  if v1 == 0 then goto L2a00ec;
  #L2a00da.  v12:= v11.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a00de.  v5:= v5 - v12 @kind int;
  #L2a00e0.  call temp:= `negativeMod`(v11, v5) @signature `Lkotlin/collections/ArrayDeque;.negativeMod:(I)I` @kind direct;
  #L2a00e6.  v12:= temp;
  #L2a00e8.  v11.`kotlin.collections.ArrayDeque.size` @type ^`int` := v12;
  #L2a00ec.  return v1;
}
procedure `java.lang.Object` `removeAt`(`kotlin.collections.ArrayDeque` v8 @kind this, `int` v9 ) @signature `Lkotlin/collections/ArrayDeque;.removeAt:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2a05d4.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L2a05d8.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a05de.  v1:= temp;
  #L2a05e0.  call `checkElementIndex$kotlin_stdlib`(v0, v9, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L2a05e6.  call temp:= `getLastIndex`(v8) @signature `Lkotlin/collections/CollectionsKt;.getLastIndex:(Ljava/util/List;)I` @kind static;
  #L2a05ec.  v0:= temp;
  #L2a05ee.  if v9 != v0 then goto L2a05fc;
  #L2a05f2.  call temp:= `removeLast`(v8) @signature `Lkotlin/collections/ArrayDeque;.removeLast:()Ljava/lang/Object;` @kind virtual;
  #L2a05f8.  v9:= temp @kind object;
  #L2a05fa.  return v9 @kind object;
  #L2a05fc.  if v9 != 0 then goto L2a060a;
  #L2a0600.  call temp:= `removeFirst`(v8) @signature `Lkotlin/collections/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @kind virtual;
  #L2a0606.  v9:= temp @kind object;
  #L2a0608.  return v9 @kind object;
  #L2a060a.  v0:= v8.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a060e.  v0:= v0 + v9 @kind int;
  #L2a0610.  call temp:= `positiveMod`(v8, v0) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a0616.  v0:= temp;
  #L2a0618.  v1:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a061c.  v1:= v1[v0] @kind object;
  #L2a0620.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0626.  v2:= temp;
  #L2a0628.  v3:= 1I;
  #L2a062a.  v2:= v2 ^> v3 @kind int;
  #L2a062c.  v4:= 0I;
  #L2a062e.  v5:= 0I;
  #L2a0630.  if v9 >= v2 then goto L2a0692;
  #L2a0634.  v9:= v8.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0638.  if v0 < v9 then goto L2a064c;
  #L2a063c.  v2:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0640.  v5:= v9 + 1;
  #L2a0644.  call temp:= `copyInto`(v2, v2, v5, v9, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L2a064a.  goto L2a0678;
  #L2a064c.  v9:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0650.  call temp:= `copyInto`(v9, v9, v3, v5, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L2a0656.  v9:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a065a.  v0:= length @variable v9;
  #L2a065c.  v0:= v0 - v3 @kind int;
  #L2a065e.  v0:= v9[v0] @kind object;
  #L2a0662.  v9[v5]:= v0 @kind object;
  #L2a0666.  v0:= v8.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a066a.  v2:= v0 + 1;
  #L2a066e.  v5:= length @variable v9;
  #L2a0670.  v5:= v5 - v3 @kind int;
  #L2a0672.  call temp:= `copyInto`(v9, v9, v2, v0, v5) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L2a0678.  v9:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a067c.  v0:= v8.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0680.  v9[v0]:= v4 @kind object;
  #L2a0684.  call temp:= `incremented`(v8, v0) @signature `Lkotlin/collections/ArrayDeque;.incremented:(I)I` @kind direct;
  #L2a068a.  v9:= temp;
  #L2a068c.  v8.`kotlin.collections.ArrayDeque.head` @type ^`int` := v9;
  #L2a0690.  goto L2a06f2;
  #L2a0692.  v9:= v8.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0696.  call temp:= `getLastIndex`(v8) @signature `Lkotlin/collections/CollectionsKt;.getLastIndex:(Ljava/util/List;)I` @kind static;
  #L2a069c.  v2:= temp;
  #L2a069e.  v9:= v9 + v2 @kind int;
  #L2a06a0.  call temp:= `positiveMod`(v8, v9) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a06a6.  v9:= temp;
  #L2a06a8.  if v0 > v9 then goto L2a06c0;
  #L2a06ac.  v2:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a06b0.  v5:= v0 + 1;
  #L2a06b4.  v6:= v9 + 1;
  #L2a06b8.  call temp:= `copyInto`(v2, v2, v0, v5, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L2a06be.  goto L2a06ea;
  #L2a06c0.  v2:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a06c4.  v6:= v0 + 1;
  #L2a06c8.  v7:= length @variable v2;
  #L2a06ca.  call temp:= `copyInto`(v2, v2, v0, v6, v7) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L2a06d0.  v0:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a06d4.  v2:= length @variable v0;
  #L2a06d6.  v2:= v2 - v3 @kind int;
  #L2a06d8.  v6:= v0[v5] @kind object;
  #L2a06dc.  v0[v2]:= v6 @kind object;
  #L2a06e0.  v2:= v9 + 1;
  #L2a06e4.  call temp:= `copyInto`(v0, v0, v5, v3, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L2a06ea.  v0:= v8.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a06ee.  v0[v9]:= v4 @kind object;
  #L2a06f2.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a06f8.  v9:= temp;
  #L2a06fa.  v9:= v9 - v3 @kind int;
  #L2a06fc.  v8.`kotlin.collections.ArrayDeque.size` @type ^`int` := v9;
  #L2a0700.  return v1 @kind object;
}
procedure `java.lang.Object` `removeFirst`(`kotlin.collections.ArrayDeque` v4 @kind this) @signature `Lkotlin/collections/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2a0714.  call temp:= `isEmpty`(v4) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L2a071a.  v0:= temp;
  #L2a071c.  if v0 != 0 then goto L2a0750;
  #L2a0720.  v0:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0724.  v1:= v4.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0728.  v2:= v0[v1] @kind object;
  #L2a072c.  v3:= 0I;
  #L2a072e.  v0[v1]:= v3 @kind object;
  #L2a0732.  call temp:= `incremented`(v4, v1) @signature `Lkotlin/collections/ArrayDeque;.incremented:(I)I` @kind direct;
  #L2a0738.  v0:= temp;
  #L2a073a.  v4.`kotlin.collections.ArrayDeque.head` @type ^`int` := v0;
  #L2a073e.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0744.  v0:= temp;
  #L2a0746.  v0:= v0 + -1;
  #L2a074a.  v4.`kotlin.collections.ArrayDeque.size` @type ^`int` := v0;
  #L2a074e.  return v2 @kind object;
  #L2a0750.  v0:= new `java.util.NoSuchElementException`;
  #L2a0754.  v1:= "ArrayDeque is empty." @kind object;
  #L2a0758.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a075e.  throw v0;
}
procedure `java.lang.Object` `removeFirstOrNull`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.removeFirstOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a0770.  call temp:= `isEmpty`(v1) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L2a0776.  v0:= temp;
  #L2a0778.  if v0 == 0 then goto L2a0780;
  #L2a077c.  v0:= 0I;
  #L2a077e.  goto L2a0788;
  #L2a0780.  call temp:= `removeFirst`(v1) @signature `Lkotlin/collections/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @kind virtual;
  #L2a0786.  v0:= temp @kind object;
  #L2a0788.  return v0 @kind object;
}
procedure `java.lang.Object` `removeLast`(`kotlin.collections.ArrayDeque` v4 @kind this) @signature `Lkotlin/collections/ArrayDeque;.removeLast:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2a079c.  call temp:= `isEmpty`(v4) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L2a07a2.  v0:= temp;
  #L2a07a4.  if v0 != 0 then goto L2a07de;
  #L2a07a8.  v0:= v4.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a07ac.  call temp:= `getLastIndex`(v4) @signature `Lkotlin/collections/CollectionsKt;.getLastIndex:(Ljava/util/List;)I` @kind static;
  #L2a07b2.  v1:= temp;
  #L2a07b4.  v0:= v0 + v1 @kind int;
  #L2a07b6.  call temp:= `positiveMod`(v4, v0) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a07bc.  v0:= temp;
  #L2a07be.  v1:= v4.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a07c2.  v2:= v1[v0] @kind object;
  #L2a07c6.  v3:= 0I;
  #L2a07c8.  v1[v0]:= v3 @kind object;
  #L2a07cc.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a07d2.  v0:= temp;
  #L2a07d4.  v0:= v0 + -1;
  #L2a07d8.  v4.`kotlin.collections.ArrayDeque.size` @type ^`int` := v0;
  #L2a07dc.  return v2 @kind object;
  #L2a07de.  v0:= new `java.util.NoSuchElementException`;
  #L2a07e2.  v1:= "ArrayDeque is empty." @kind object;
  #L2a07e6.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a07ec.  throw v0;
}
procedure `java.lang.Object` `removeLastOrNull`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.removeLastOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a0800.  call temp:= `isEmpty`(v1) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L2a0806.  v0:= temp;
  #L2a0808.  if v0 == 0 then goto L2a0810;
  #L2a080c.  v0:= 0I;
  #L2a080e.  goto L2a0818;
  #L2a0810.  call temp:= `removeLast`(v1) @signature `Lkotlin/collections/ArrayDeque;.removeLast:()Ljava/lang/Object;` @kind virtual;
  #L2a0816.  v0:= temp @kind object;
  #L2a0818.  return v0 @kind object;
}
procedure `boolean` `retainAll`(`kotlin.collections.ArrayDeque` v11 @kind this, `java.util.Collection` v12 @kind object) @signature `Lkotlin/collections/ArrayDeque;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2a0100.  v0:= "elements" @kind object;
  #L2a0104.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2a010a.  call temp:= `isEmpty`(v11) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L2a0110.  v0:= temp;
  #L2a0112.  v1:= 0I;
  #L2a0114.  if v0 != 0 then goto L2a0226;
  #L2a0118.  v0:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a011c.  v0:= length @variable v0;
  #L2a011e.  v2:= 1I;
  #L2a0120.  if v0 != 0 then goto L2a0128;
  #L2a0124.  v0:= 1I;
  #L2a0126.  goto L2a012a;
  #L2a0128.  v0:= 0I;
  #L2a012a.  if v0 == 0 then goto L2a0132;
  #L2a012e.  goto L2a0226;
  #L2a0132.  v0:= v11.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0136.  call temp:= `size`(v11) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a013c.  v3:= temp;
  #L2a013e.  v0:= v0 + v3 @kind int;
  #L2a0140.  call temp:= `positiveMod`(v11, v0) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a0146.  v0:= temp;
  #L2a0148.  v3:= v11.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a014c.  v4:= 0I;
  #L2a014e.  if v3 >= v0 then goto L2a0190;
  #L2a0152.  v5:= v3;
  #L2a0154.  if v3 >= v0 then goto L2a0184;
  #L2a0158.  v6:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a015c.  v6:= v6[v3] @kind object;
  #L2a0160.  call temp:= `contains`(v12, v6) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2a0166.  v7:= temp;
  #L2a0168.  if v7 == 0 then goto L2a017c;
  #L2a016c.  v7:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0170.  v8:= v5 + 1;
  #L2a0174.  v7[v5]:= v6 @kind object;
  #L2a0178.  v5:= v8;
  #L2a017a.  goto L2a017e;
  #L2a017c.  v1:= 1I;
  #L2a017e.  v3:= v3 + 1;
  #L2a0182.  goto L2a0154;
  #L2a0184.  v12:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0188.  call `fill`(v12, v4, v5, v0) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L2a018e.  goto L2a0210;
  #L2a0190.  v5:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0194.  v5:= length @variable v5;
  #L2a0196.  v6:= v3;
  #L2a0198.  v7:= 0I;
  #L2a019a.  if v3 >= v5 then goto L2a01ce;
  #L2a019e.  v8:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a01a2.  v9:= v8[v3] @kind object;
  #L2a01a6.  v8[v3]:= v4 @kind object;
  #L2a01aa.  call temp:= `contains`(v12, v9) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2a01b0.  v8:= temp;
  #L2a01b2.  if v8 == 0 then goto L2a01c6;
  #L2a01b6.  v8:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a01ba.  v10:= v6 + 1;
  #L2a01be.  v8[v6]:= v9 @kind object;
  #L2a01c2.  v6:= v10;
  #L2a01c4.  goto L2a01c8;
  #L2a01c6.  v7:= 1I;
  #L2a01c8.  v3:= v3 + 1;
  #L2a01cc.  goto L2a019a;
  #L2a01ce.  call temp:= `positiveMod`(v11, v6) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a01d4.  v3:= temp;
  #L2a01d6.  v5:= v3;
  #L2a01d8.  if v1 >= v0 then goto L2a020e;
  #L2a01dc.  v3:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a01e0.  v6:= v3[v1] @kind object;
  #L2a01e4.  v3[v1]:= v4 @kind object;
  #L2a01e8.  call temp:= `contains`(v12, v6) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2a01ee.  v3:= temp;
  #L2a01f0.  if v3 == 0 then goto L2a0206;
  #L2a01f4.  v3:= v11.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a01f8.  v3[v5]:= v6 @kind object;
  #L2a01fc.  call temp:= `incremented`(v11, v5) @signature `Lkotlin/collections/ArrayDeque;.incremented:(I)I` @kind direct;
  #L2a0202.  v5:= temp;
  #L2a0204.  goto L2a0208;
  #L2a0206.  v7:= 1I;
  #L2a0208.  v1:= v1 + 1;
  #L2a020c.  goto L2a01d8;
  #L2a020e.  v1:= v7;
  #L2a0210.  if v1 == 0 then goto L2a0226;
  #L2a0214.  v12:= v11.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0218.  v5:= v5 - v12 @kind int;
  #L2a021a.  call temp:= `negativeMod`(v11, v5) @signature `Lkotlin/collections/ArrayDeque;.negativeMod:(I)I` @kind direct;
  #L2a0220.  v12:= temp;
  #L2a0222.  v11.`kotlin.collections.ArrayDeque.size` @type ^`int` := v12;
  #L2a0226.  return v1;
}
procedure `java.lang.Object` `set`(`kotlin.collections.ArrayDeque` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/ArrayDeque;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a082c.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L2a0830.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0836.  v1:= temp;
  #L2a0838.  call `checkElementIndex$kotlin_stdlib`(v0, v3, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L2a083e.  v0:= v2.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0842.  v0:= v0 + v3 @kind int;
  #L2a0844.  call temp:= `positiveMod`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a084a.  v3:= temp;
  #L2a084c.  v0:= v2.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0850.  v1:= v0[v3] @kind object;
  #L2a0854.  v0[v3]:= v4 @kind object;
  #L2a0858.  return v1 @kind object;
}
procedure `java.lang.Object`[] `testToArray$kotlin_stdlib`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.testToArray$kotlin_stdlib:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a086c.  call temp:= `toArray`(v1) @signature `Lkotlin/collections/ArrayDeque;.toArray:()[Ljava/lang/Object;` @kind virtual;
  #L2a0872.  v0:= temp @kind object;
  #L2a0874.  return v0 @kind object;
}
procedure `java.lang.Object`[] `testToArray$kotlin_stdlib`(`kotlin.collections.ArrayDeque` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/collections/ArrayDeque;.testToArray$kotlin_stdlib:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a0888.  v0:= "array" @kind object;
  #L2a088c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2a0892.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/collections/ArrayDeque;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L2a0898.  v2:= temp @kind object;
  #L2a089a.  return v2 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a08ac.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a08b2.  v0:= temp;
  #L2a08b4.  v0:= new `java.lang.Object`[v0];
  #L2a08b8.  call temp:= `toArray`(v1, v0) @signature `Lkotlin/collections/ArrayDeque;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L2a08be.  v0:= temp @kind object;
  #L2a08c0.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.ArrayDeque` v7 @kind this, `java.lang.Object`[] v8 @kind object) @signature `Lkotlin/collections/ArrayDeque;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2a08d4.  v0:= "array" @kind object;
  #L2a08d8.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2a08de.  v0:= length @variable v8;
  #L2a08e0.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a08e6.  v1:= temp;
  #L2a08e8.  if v0 < v1 then goto L2a08ee;
  #L2a08ec.  goto L2a08fe;
  #L2a08ee.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a08f4.  v0:= temp;
  #L2a08f6.  call temp:= `arrayOfNulls`(v8, v0) @signature `Lkotlin/collections/ArraysKt__ArraysJVMKt;.arrayOfNulls:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L2a08fc.  v8:= temp @kind object;
  #L2a08fe.  v0:= v7.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0902.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0908.  v1:= temp;
  #L2a090a.  v0:= v0 + v1 @kind int;
  #L2a090c.  call temp:= `positiveMod`(v7, v0) @signature `Lkotlin/collections/ArrayDeque;.positiveMod:(I)I` @kind direct;
  #L2a0912.  v4:= temp;
  #L2a0914.  v3:= v7.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0918.  if v3 >= v4 then goto L2a0930;
  #L2a091c.  v0:= v7.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0920.  v2:= 0I;
  #L2a0922.  v5:= 2I;
  #L2a0924.  v6:= 0I;
  #L2a0926.  v1:= v8 @kind object;
  #L2a0928.  call temp:= `copyInto$default`(v0, v1, v2, v3, v4, v5, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto$default:([Ljava/lang/Object;[Ljava/lang/Object;IIIILjava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L2a092e.  goto L2a0964;
  #L2a0930.  call temp:= `isEmpty`(v7) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L2a0936.  v0:= temp;
  #L2a0938.  v0:= v0 ^~ 1;
  #L2a093c.  if v0 == 0 then goto L2a0964;
  #L2a0940.  v0:= v7.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0944.  v1:= v7.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a0948.  v2:= length @variable v0;
  #L2a094a.  v3:= 0I;
  #L2a094c.  call temp:= `copyInto`(v0, v8, v3, v1, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L2a0952.  v0:= v7.`kotlin.collections.ArrayDeque.elementData` @type ^`java.lang.Object`[] @kind object;
  #L2a0956.  v1:= length @variable v0;
  #L2a0958.  v2:= v7.`kotlin.collections.ArrayDeque.head` @type ^`int`;
  #L2a095c.  v1:= v1 - v2 @kind int;
  #L2a095e.  call temp:= `copyInto`(v0, v8, v1, v3, v4) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L2a0964.  v0:= length @variable v8;
  #L2a0966.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a096c.  v1:= temp;
  #L2a096e.  if v0 <= v1 then goto L2a0980;
  #L2a0972.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L2a0978.  v0:= temp;
  #L2a097a.  v1:= 0I;
  #L2a097c.  v8[v0]:= v1 @kind object;
  #L2a0980.  return v8 @kind object;
}
