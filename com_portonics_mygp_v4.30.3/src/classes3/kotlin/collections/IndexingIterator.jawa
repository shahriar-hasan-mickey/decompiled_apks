record `kotlin.collections.IndexingIterator` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int` `kotlin.collections.IndexingIterator.index` @AccessFlag PRIVATE;
  `java.util.Iterator` `kotlin.collections.IndexingIterator.iterator` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.collections.IndexingIterator` v1 @kind this, `java.util.Iterator` v2 @kind object) @signature `Lkotlin/collections/IndexingIterator;.<init>:(Ljava/util/Iterator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2a5080.  v0:= "iterator" @kind object;
  #L2a5084.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2a508a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a5090.  v1.`kotlin.collections.IndexingIterator.iterator` @type ^`java.util.Iterator` := v2 @kind object;
  #L2a5094.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.collections.IndexingIterator` v1 @kind this) @signature `Lkotlin/collections/IndexingIterator;.hasNext:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a5004.  v0:= v1.`kotlin.collections.IndexingIterator.iterator` @type ^`java.util.Iterator` @kind object;
  #L2a5008.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2a500e.  v0:= temp;
  #L2a5010.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.collections.IndexingIterator` v1 @kind this) @signature `Lkotlin/collections/IndexingIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2a5024.  call temp:= `next`(v1) @signature `Lkotlin/collections/IndexingIterator;.next:()Lkotlin/collections/IndexedValue;` @kind virtual;
  #L2a502a.  v0:= temp @kind object;
  #L2a502c.  return v0 @kind object;
}
procedure `kotlin.collections.IndexedValue` `next`(`kotlin.collections.IndexingIterator` v3 @kind this) @signature `Lkotlin/collections/IndexingIterator;.next:()Lkotlin/collections/IndexedValue;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2a5040.  v0:= new `kotlin.collections.IndexedValue`;
  #L2a5044.  v1:= v3.`kotlin.collections.IndexingIterator.index` @type ^`int`;
  #L2a5048.  v2:= v1 + 1;
  #L2a504c.  v3.`kotlin.collections.IndexingIterator.index` @type ^`int` := v2;
  #L2a5050.  if v1 >= 0 then goto L2a505a;
  #L2a5054.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L2a505a.  v2:= v3.`kotlin.collections.IndexingIterator.iterator` @type ^`java.util.Iterator` @kind object;
  #L2a505e.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2a5064.  v2:= temp @kind object;
  #L2a5066.  call `<init>`(v0, v1, v2) @signature `Lkotlin/collections/IndexedValue;.<init>:(ILjava/lang/Object;)V` @kind direct;
  #L2a506c.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.collections.IndexingIterator` v2 @kind this) @signature `Lkotlin/collections/IndexingIterator;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a50a8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2a50ac.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2a50b0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a50b6.  throw v0;
}
