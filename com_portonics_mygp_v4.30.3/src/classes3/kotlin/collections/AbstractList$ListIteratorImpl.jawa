record `kotlin.collections.AbstractList$ListIteratorImpl` @kind class @AccessFlag  extends `kotlin.collections.AbstractList$IteratorImpl` @kind class, `java.util.ListIterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `kotlin.collections.AbstractList` `kotlin.collections.AbstractList$ListIteratorImpl.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.collections.AbstractList$ListIteratorImpl` v1 @kind this, `kotlin.collections.AbstractList` v2 @kind object, `int` v3 ) @signature `Lkotlin/collections/AbstractList$ListIteratorImpl;.<init>:(Lkotlin/collections/AbstractList;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L29ea04.  v1.`kotlin.collections.AbstractList$ListIteratorImpl.this$0` @type ^`kotlin.collections.AbstractList` := v2 @kind object;
  #L29ea08.  call `<init>`(v1, v2) @signature `Lkotlin/collections/AbstractList$IteratorImpl;.<init>:(Lkotlin/collections/AbstractList;)V` @kind direct;
  #L29ea0e.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L29ea12.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L29ea18.  v2:= temp;
  #L29ea1a.  call `checkPositionIndex$kotlin_stdlib`(v0, v3, v2) @signature `Lkotlin/collections/AbstractList$Companion;.checkPositionIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L29ea20.  call `setIndex`(v1, v3) @signature `Lkotlin/collections/AbstractList$IteratorImpl;.setIndex:(I)V` @kind virtual;
  #L29ea26.  return @kind void;
}
procedure `void` `add`(`kotlin.collections.AbstractList$ListIteratorImpl` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractList$ListIteratorImpl;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ea38.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29ea3c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29ea40.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29ea46.  throw v2;
}
procedure `boolean` `hasPrevious`(`kotlin.collections.AbstractList$ListIteratorImpl` v1 @kind this) @signature `Lkotlin/collections/AbstractList$ListIteratorImpl;.hasPrevious:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29e954.  call temp:= `getIndex`(v1) @signature `Lkotlin/collections/AbstractList$IteratorImpl;.getIndex:()I` @kind virtual;
  #L29e95a.  v0:= temp;
  #L29e95c.  if v0 <= 0 then goto L29e964;
  #L29e960.  v0:= 1I;
  #L29e962.  goto L29e966;
  #L29e964.  v0:= 0I;
  #L29e966.  return v0;
}
procedure `int` `nextIndex`(`kotlin.collections.AbstractList$ListIteratorImpl` v1 @kind this) @signature `Lkotlin/collections/AbstractList$ListIteratorImpl;.nextIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29e978.  call temp:= `getIndex`(v1) @signature `Lkotlin/collections/AbstractList$IteratorImpl;.getIndex:()I` @kind virtual;
  #L29e97e.  v0:= temp;
  #L29e980.  return v0;
}
procedure `java.lang.Object` `previous`(`kotlin.collections.AbstractList$ListIteratorImpl` v2 @kind this) @signature `Lkotlin/collections/AbstractList$ListIteratorImpl;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29e9b4.  call temp:= `hasPrevious`(v2) @signature `Lkotlin/collections/AbstractList$ListIteratorImpl;.hasPrevious:()Z` @kind virtual;
  #L29e9ba.  v0:= temp;
  #L29e9bc.  if v0 == 0 then goto L29e9e8;
  #L29e9c0.  v0:= v2.`kotlin.collections.AbstractList$ListIteratorImpl.this$0` @type ^`kotlin.collections.AbstractList` @kind object;
  #L29e9c4.  call temp:= `getIndex`(v2) @signature `Lkotlin/collections/AbstractList$IteratorImpl;.getIndex:()I` @kind virtual;
  #L29e9ca.  v1:= temp;
  #L29e9cc.  v1:= v1 + -1;
  #L29e9d0.  call `setIndex`(v2, v1) @signature `Lkotlin/collections/AbstractList$IteratorImpl;.setIndex:(I)V` @kind virtual;
  #L29e9d6.  call temp:= `getIndex`(v2) @signature `Lkotlin/collections/AbstractList$IteratorImpl;.getIndex:()I` @kind virtual;
  #L29e9dc.  v1:= temp;
  #L29e9de.  call temp:= `get`(v0, v1) @signature `Lkotlin/collections/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L29e9e4.  v0:= temp @kind object;
  #L29e9e6.  return v0 @kind object;
  #L29e9e8.  v0:= new `java.util.NoSuchElementException`;
  #L29e9ec.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L29e9f2.  throw v0;
}
procedure `int` `previousIndex`(`kotlin.collections.AbstractList$ListIteratorImpl` v1 @kind this) @signature `Lkotlin/collections/AbstractList$ListIteratorImpl;.previousIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29e994.  call temp:= `getIndex`(v1) @signature `Lkotlin/collections/AbstractList$IteratorImpl;.getIndex:()I` @kind virtual;
  #L29e99a.  v0:= temp;
  #L29e99c.  v0:= v0 + -1;
  #L29e9a0.  return v0;
}
procedure `void` `set`(`kotlin.collections.AbstractList$ListIteratorImpl` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractList$ListIteratorImpl;.set:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ea58.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29ea5c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29ea60.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29ea66.  throw v2;
}
