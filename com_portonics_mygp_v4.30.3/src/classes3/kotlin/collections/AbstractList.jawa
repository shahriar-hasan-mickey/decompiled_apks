record `kotlin.collections.AbstractList` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.collections.AbstractCollection` @kind class, `java.util.List` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
}
global `kotlin.collections.AbstractList$Companion` `@@kotlin.collections.AbstractList.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/collections/AbstractList;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L29eccc.  v0:= new `kotlin.collections.AbstractList$Companion`;
  #L29ecd0.  v1:= 0I;
  #L29ecd2.  call `<init>`(v0, v1) @signature `Lkotlin/collections/AbstractList$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L29ecd8.  `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` := v0 @kind object;
  #L29ecdc.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.AbstractList` v0 @kind this) @signature `Lkotlin/collections/AbstractList;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L29ecf0.  call `<init>`(v0) @signature `Lkotlin/collections/AbstractCollection;.<init>:()V` @kind direct;
  #L29ecf6.  return @kind void;
}
procedure `void` `add`(`kotlin.collections.AbstractList` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractList;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L29ed08.  v1:= new `java.lang.UnsupportedOperationException`;
  #L29ed0c.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L29ed10.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29ed16.  throw v1;
}
procedure `boolean` `addAll`(`kotlin.collections.AbstractList` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/AbstractList;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L29eb08.  v1:= new `java.lang.UnsupportedOperationException`;
  #L29eb0c.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L29eb10.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29eb16.  throw v1;
}
procedure `boolean` `equals`(`kotlin.collections.AbstractList` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractList;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29eb28.  if v2 != v1 then goto L29eb30;
  #L29eb2c.  v2:= 1I;
  #L29eb2e.  return v2;
  #L29eb30.  v0:= instanceof @variable v2 @type ^`java.util.List` @kind boolean;
  #L29eb34.  if v0 != 0 then goto L29eb3c;
  #L29eb38.  v2:= 0I;
  #L29eb3a.  return v2;
  #L29eb3c.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L29eb40.  v2:= (`java.util.Collection`) v2 @kind object;
  #L29eb44.  call temp:= `orderedEquals$kotlin_stdlib`(v0, v1, v2) @signature `Lkotlin/collections/AbstractList$Companion;.orderedEquals$kotlin_stdlib:(Ljava/util/Collection;Ljava/util/Collection;)Z` @kind virtual;
  #L29eb4a.  v2:= temp;
  #L29eb4c.  return v2;
}
procedure `java.lang.Object` `get`(`int` v0 ) @signature `Lkotlin/collections/AbstractList;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getSize`() @signature `Lkotlin/collections/AbstractList;.getSize:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `hashCode`(`kotlin.collections.AbstractList` v1 @kind this) @signature `Lkotlin/collections/AbstractList;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29eb60.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L29eb64.  call temp:= `orderedHashCode$kotlin_stdlib`(v0, v1) @signature `Lkotlin/collections/AbstractList$Companion;.orderedHashCode$kotlin_stdlib:(Ljava/util/Collection;)I` @kind virtual;
  #L29eb6a.  v0:= temp;
  #L29eb6c.  return v0;
}
procedure `int` `indexOf`(`kotlin.collections.AbstractList` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/AbstractList;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L29eb80.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29eb86.  v0:= temp @kind object;
  #L29eb88.  v1:= 0I;
  #L29eb8a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29eb90.  v2:= temp;
  #L29eb92.  if v2 == 0 then goto L29ebb2;
  #L29eb96.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29eb9c.  v2:= temp @kind object;
  #L29eb9e.  call temp:= `areEqual`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L29eba4.  v2:= temp;
  #L29eba6.  if v2 == 0 then goto L29ebac;
  #L29ebaa.  goto L29ebb4;
  #L29ebac.  v1:= v1 + 1;
  #L29ebb0.  goto L29eb8a;
  #L29ebb2.  v1:= -1I;
  #L29ebb4.  return v1;
}
procedure `java.util.Iterator` `iterator`(`kotlin.collections.AbstractList` v1 @kind this) @signature `Lkotlin/collections/AbstractList;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ec58.  v0:= new `kotlin.collections.AbstractList$IteratorImpl`;
  #L29ec5c.  call `<init>`(v0, v1) @signature `Lkotlin/collections/AbstractList$IteratorImpl;.<init>:(Lkotlin/collections/AbstractList;)V` @kind direct;
  #L29ec62.  return v0 @kind object;
}
procedure `int` `lastIndexOf`(`kotlin.collections.AbstractList` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/collections/AbstractList;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29ebc8.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L29ebce.  v0:= temp;
  #L29ebd0.  call temp:= `listIterator`(v2, v0) @signature `Ljava/util/List;.listIterator:(I)Ljava/util/ListIterator;` @kind interface;
  #L29ebd6.  v0:= temp @kind object;
  #L29ebd8.  call temp:= `hasPrevious`(v0) @signature `Ljava/util/ListIterator;.hasPrevious:()Z` @kind interface;
  #L29ebde.  v1:= temp;
  #L29ebe0.  if v1 == 0 then goto L29ec02;
  #L29ebe4.  call temp:= `previous`(v0) @signature `Ljava/util/ListIterator;.previous:()Ljava/lang/Object;` @kind interface;
  #L29ebea.  v1:= temp @kind object;
  #L29ebec.  call temp:= `areEqual`(v1, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L29ebf2.  v1:= temp;
  #L29ebf4.  if v1 == 0 then goto L29ebd8;
  #L29ebf8.  call temp:= `nextIndex`(v0) @signature `Ljava/util/ListIterator;.nextIndex:()I` @kind interface;
  #L29ebfe.  v3:= temp;
  #L29ec00.  goto L29ec04;
  #L29ec02.  v3:= -1I;
  #L29ec04.  return v3;
}
procedure `java.util.ListIterator` `listIterator`(`kotlin.collections.AbstractList` v2 @kind this) @signature `Lkotlin/collections/AbstractList;.listIterator:()Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29ec90.  v0:= new `kotlin.collections.AbstractList$ListIteratorImpl`;
  #L29ec94.  v1:= 0I;
  #L29ec96.  call `<init>`(v0, v2, v1) @signature `Lkotlin/collections/AbstractList$ListIteratorImpl;.<init>:(Lkotlin/collections/AbstractList;I)V` @kind direct;
  #L29ec9c.  return v0 @kind object;
}
procedure `java.util.ListIterator` `listIterator`(`kotlin.collections.AbstractList` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/AbstractList;.listIterator:(I)Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ecb0.  v0:= new `kotlin.collections.AbstractList$ListIteratorImpl`;
  #L29ecb4.  call `<init>`(v0, v1, v2) @signature `Lkotlin/collections/AbstractList$ListIteratorImpl;.<init>:(Lkotlin/collections/AbstractList;I)V` @kind direct;
  #L29ecba.  return v0 @kind object;
}
procedure `java.lang.Object` `remove`(`kotlin.collections.AbstractList` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/AbstractList;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ec18.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29ec1c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29ec20.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29ec26.  throw v2;
}
procedure `java.lang.Object` `set`(`kotlin.collections.AbstractList` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractList;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L29ec38.  v1:= new `java.lang.UnsupportedOperationException`;
  #L29ec3c.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L29ec40.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29ec46.  throw v1;
}
procedure `java.util.List` `subList`(`kotlin.collections.AbstractList` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/collections/AbstractList;.subList:(II)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ec74.  v0:= new `kotlin.collections.AbstractList$SubList`;
  #L29ec78.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/collections/AbstractList$SubList;.<init>:(Lkotlin/collections/AbstractList;II)V` @kind direct;
  #L29ec7e.  return v0 @kind object;
}
