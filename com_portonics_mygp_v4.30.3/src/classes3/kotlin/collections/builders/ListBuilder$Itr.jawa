record `kotlin.collections.builders.ListBuilder$Itr` @kind class @AccessFlag FINAL extends `java.util.ListIterator` @kind interface, `kotlin.jvm.internal.markers.KMutableListIterator` @kind interface {
  `int` `kotlin.collections.builders.ListBuilder$Itr.index` @AccessFlag PRIVATE;
  `int` `kotlin.collections.builders.ListBuilder$Itr.lastIndex` @AccessFlag PRIVATE;
  `kotlin.collections.builders.ListBuilder` `kotlin.collections.builders.ListBuilder$Itr.list` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.collections.builders.ListBuilder$Itr` v1 @kind this, `kotlin.collections.builders.ListBuilder` v2 @kind object, `int` v3 ) @signature `Lkotlin/collections/builders/ListBuilder$Itr;.<init>:(Lkotlin/collections/builders/ListBuilder;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2a7904.  v0:= "list" @kind object;
  #L2a7908.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2a790e.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a7914.  v1.`kotlin.collections.builders.ListBuilder$Itr.list` @type ^`kotlin.collections.builders.ListBuilder` := v2 @kind object;
  #L2a7918.  v1.`kotlin.collections.builders.ListBuilder$Itr.index` @type ^`int` := v3;
  #L2a791c.  v2:= -1I;
  #L2a791e.  v1.`kotlin.collections.builders.ListBuilder$Itr.lastIndex` @type ^`int` := v2;
  #L2a7922.  return @kind void;
}
procedure `void` `add`(`kotlin.collections.builders.ListBuilder$Itr` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/builders/ListBuilder$Itr;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a7934.  v0:= v3.`kotlin.collections.builders.ListBuilder$Itr.list` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L2a7938.  v1:= v3.`kotlin.collections.builders.ListBuilder$Itr.index` @type ^`int`;
  #L2a793c.  v2:= v1 + 1;
  #L2a7940.  v3.`kotlin.collections.builders.ListBuilder$Itr.index` @type ^`int` := v2;
  #L2a7944.  call `add`(v0, v1, v4) @signature `Lkotlin/collections/builders/ListBuilder;.add:(ILjava/lang/Object;)V` @kind virtual;
  #L2a794a.  v4:= -1I;
  #L2a794c.  v3.`kotlin.collections.builders.ListBuilder$Itr.lastIndex` @type ^`int` := v4;
  #L2a7950.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.collections.builders.ListBuilder$Itr` v2 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$Itr;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a77cc.  v0:= v2.`kotlin.collections.builders.ListBuilder$Itr.index` @type ^`int`;
  #L2a77d0.  v1:= v2.`kotlin.collections.builders.ListBuilder$Itr.list` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L2a77d4.  call temp:= `access$getLength$p`(v1) @signature `Lkotlin/collections/builders/ListBuilder;.access$getLength$p:(Lkotlin/collections/builders/ListBuilder;)I` @kind static;
  #L2a77da.  v1:= temp;
  #L2a77dc.  if v0 >= v1 then goto L2a77e4;
  #L2a77e0.  v0:= 1I;
  #L2a77e2.  goto L2a77e6;
  #L2a77e4.  v0:= 0I;
  #L2a77e6.  return v0;
}
procedure `boolean` `hasPrevious`(`kotlin.collections.builders.ListBuilder$Itr` v1 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$Itr;.hasPrevious:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a77f8.  v0:= v1.`kotlin.collections.builders.ListBuilder$Itr.index` @type ^`int`;
  #L2a77fc.  if v0 <= 0 then goto L2a7804;
  #L2a7800.  v0:= 1I;
  #L2a7802.  goto L2a7806;
  #L2a7804.  v0:= 0I;
  #L2a7806.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.collections.builders.ListBuilder$Itr` v3 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$Itr;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a784c.  v0:= v3.`kotlin.collections.builders.ListBuilder$Itr.index` @type ^`int`;
  #L2a7850.  v1:= v3.`kotlin.collections.builders.ListBuilder$Itr.list` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L2a7854.  call temp:= `access$getLength$p`(v1) @signature `Lkotlin/collections/builders/ListBuilder;.access$getLength$p:(Lkotlin/collections/builders/ListBuilder;)I` @kind static;
  #L2a785a.  v1:= temp;
  #L2a785c.  if v0 >= v1 then goto L2a7894;
  #L2a7860.  v0:= v3.`kotlin.collections.builders.ListBuilder$Itr.index` @type ^`int`;
  #L2a7864.  v1:= v0 + 1;
  #L2a7868.  v3.`kotlin.collections.builders.ListBuilder$Itr.index` @type ^`int` := v1;
  #L2a786c.  v3.`kotlin.collections.builders.ListBuilder$Itr.lastIndex` @type ^`int` := v0;
  #L2a7870.  v0:= v3.`kotlin.collections.builders.ListBuilder$Itr.list` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L2a7874.  call temp:= `access$getArray$p`(v0) @signature `Lkotlin/collections/builders/ListBuilder;.access$getArray$p:(Lkotlin/collections/builders/ListBuilder;)[Ljava/lang/Object;` @kind static;
  #L2a787a.  v0:= temp @kind object;
  #L2a787c.  v1:= v3.`kotlin.collections.builders.ListBuilder$Itr.list` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L2a7880.  call temp:= `access$getOffset$p`(v1) @signature `Lkotlin/collections/builders/ListBuilder;.access$getOffset$p:(Lkotlin/collections/builders/ListBuilder;)I` @kind static;
  #L2a7886.  v1:= temp;
  #L2a7888.  v2:= v3.`kotlin.collections.builders.ListBuilder$Itr.lastIndex` @type ^`int`;
  #L2a788c.  v1:= v1 + v2 @kind int;
  #L2a788e.  v0:= v0[v1] @kind object;
  #L2a7892.  return v0 @kind object;
  #L2a7894.  v0:= new `java.util.NoSuchElementException`;
  #L2a7898.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2a789e.  throw v0;
}
procedure `int` `nextIndex`(`kotlin.collections.builders.ListBuilder$Itr` v1 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$Itr;.nextIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a7818.  v0:= v1.`kotlin.collections.builders.ListBuilder$Itr.index` @type ^`int`;
  #L2a781c.  return v0;
}
procedure `java.lang.Object` `previous`(`kotlin.collections.builders.ListBuilder$Itr` v3 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$Itr;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a78b0.  v0:= v3.`kotlin.collections.builders.ListBuilder$Itr.index` @type ^`int`;
  #L2a78b4.  if v0 <= 0 then goto L2a78e8;
  #L2a78b8.  v0:= v0 + -1;
  #L2a78bc.  v3.`kotlin.collections.builders.ListBuilder$Itr.index` @type ^`int` := v0;
  #L2a78c0.  v3.`kotlin.collections.builders.ListBuilder$Itr.lastIndex` @type ^`int` := v0;
  #L2a78c4.  v0:= v3.`kotlin.collections.builders.ListBuilder$Itr.list` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L2a78c8.  call temp:= `access$getArray$p`(v0) @signature `Lkotlin/collections/builders/ListBuilder;.access$getArray$p:(Lkotlin/collections/builders/ListBuilder;)[Ljava/lang/Object;` @kind static;
  #L2a78ce.  v0:= temp @kind object;
  #L2a78d0.  v1:= v3.`kotlin.collections.builders.ListBuilder$Itr.list` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L2a78d4.  call temp:= `access$getOffset$p`(v1) @signature `Lkotlin/collections/builders/ListBuilder;.access$getOffset$p:(Lkotlin/collections/builders/ListBuilder;)I` @kind static;
  #L2a78da.  v1:= temp;
  #L2a78dc.  v2:= v3.`kotlin.collections.builders.ListBuilder$Itr.lastIndex` @type ^`int`;
  #L2a78e0.  v1:= v1 + v2 @kind int;
  #L2a78e2.  v0:= v0[v1] @kind object;
  #L2a78e6.  return v0 @kind object;
  #L2a78e8.  v0:= new `java.util.NoSuchElementException`;
  #L2a78ec.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2a78f2.  throw v0;
}
procedure `int` `previousIndex`(`kotlin.collections.builders.ListBuilder$Itr` v1 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$Itr;.previousIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a7830.  v0:= v1.`kotlin.collections.builders.ListBuilder$Itr.index` @type ^`int`;
  #L2a7834.  v0:= v0 + -1;
  #L2a7838.  return v0;
}
procedure `void` `remove`(`kotlin.collections.builders.ListBuilder$Itr` v3 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$Itr;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a7964.  v0:= v3.`kotlin.collections.builders.ListBuilder$Itr.lastIndex` @type ^`int`;
  #L2a7968.  v1:= -1I;
  #L2a796a.  if v0 == v1 then goto L2a7972;
  #L2a796e.  v2:= 1I;
  #L2a7970.  goto L2a7974;
  #L2a7972.  v2:= 0I;
  #L2a7974.  if v2 == 0 then goto L2a7990;
  #L2a7978.  v2:= v3.`kotlin.collections.builders.ListBuilder$Itr.list` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L2a797c.  call temp:= `remove`(v2, v0) @signature `Lkotlin/collections/AbstractMutableList;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L2a7982.  v0:= v3.`kotlin.collections.builders.ListBuilder$Itr.lastIndex` @type ^`int`;
  #L2a7986.  v3.`kotlin.collections.builders.ListBuilder$Itr.index` @type ^`int` := v0;
  #L2a798a.  v3.`kotlin.collections.builders.ListBuilder$Itr.lastIndex` @type ^`int` := v1;
  #L2a798e.  return @kind void;
  #L2a7990.  v0:= new `java.lang.IllegalStateException`;
  #L2a7994.  v1:= "Call next() or previous() before removing element from the iterator." @kind object;
  #L2a7998.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a799e.  v1:= temp @kind object;
  #L2a79a0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a79a6.  throw v0;
}
procedure `void` `set`(`kotlin.collections.builders.ListBuilder$Itr` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/collections/builders/ListBuilder$Itr;.set:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a79b8.  v0:= v2.`kotlin.collections.builders.ListBuilder$Itr.lastIndex` @type ^`int`;
  #L2a79bc.  v1:= -1I;
  #L2a79be.  if v0 == v1 then goto L2a79c6;
  #L2a79c2.  v1:= 1I;
  #L2a79c4.  goto L2a79c8;
  #L2a79c6.  v1:= 0I;
  #L2a79c8.  if v1 == 0 then goto L2a79d8;
  #L2a79cc.  v1:= v2.`kotlin.collections.builders.ListBuilder$Itr.list` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L2a79d0.  call temp:= `set`(v1, v0, v3) @signature `Lkotlin/collections/builders/ListBuilder;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2a79d6.  return @kind void;
  #L2a79d8.  v3:= new `java.lang.IllegalStateException`;
  #L2a79dc.  v0:= "Call next() or previous() before replacing element from the iterator." @kind object;
  #L2a79e0.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a79e6.  v0:= temp @kind object;
  #L2a79e8.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a79ee.  throw v3;
}
