record `kotlin.collections.RingBuffer$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.AbstractIterator` @kind class {
  `int` `kotlin.collections.RingBuffer$iterator$1.count` @AccessFlag PRIVATE;
  `int` `kotlin.collections.RingBuffer$iterator$1.index` @AccessFlag PRIVATE;
  `kotlin.collections.RingBuffer` `kotlin.collections.RingBuffer$iterator$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.collections.RingBuffer$iterator$1` v1 @kind this, `kotlin.collections.RingBuffer` v2 @kind object) @signature `Lkotlin/collections/RingBuffer$iterator$1;.<init>:(Lkotlin/collections/RingBuffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2a5bbc.  v1.`kotlin.collections.RingBuffer$iterator$1.this$0` @type ^`kotlin.collections.RingBuffer` := v2 @kind object;
  #L2a5bc0.  call `<init>`(v1) @signature `Lkotlin/collections/AbstractIterator;.<init>:()V` @kind direct;
  #L2a5bc6.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a5bcc.  v0:= temp;
  #L2a5bce.  v1.`kotlin.collections.RingBuffer$iterator$1.count` @type ^`int` := v0;
  #L2a5bd2.  call temp:= `access$getStartIndex$p`(v2) @signature `Lkotlin/collections/RingBuffer;.access$getStartIndex$p:(Lkotlin/collections/RingBuffer;)I` @kind static;
  #L2a5bd8.  v2:= temp;
  #L2a5bda.  v1.`kotlin.collections.RingBuffer$iterator$1.index` @type ^`int` := v2;
  #L2a5bde.  return @kind void;
}
procedure `void` `computeNext`(`kotlin.collections.RingBuffer$iterator$1` v2 @kind this) @signature `Lkotlin/collections/RingBuffer$iterator$1;.computeNext:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2a5bf0.  v0:= v2.`kotlin.collections.RingBuffer$iterator$1.count` @type ^`int`;
  #L2a5bf4.  if v0 != 0 then goto L2a5c00;
  #L2a5bf8.  call `done`(v2) @signature `Lkotlin/collections/AbstractIterator;.done:()V` @kind virtual;
  #L2a5bfe.  goto L2a5c40;
  #L2a5c00.  v0:= v2.`kotlin.collections.RingBuffer$iterator$1.this$0` @type ^`kotlin.collections.RingBuffer` @kind object;
  #L2a5c04.  call temp:= `access$getBuffer$p`(v0) @signature `Lkotlin/collections/RingBuffer;.access$getBuffer$p:(Lkotlin/collections/RingBuffer;)[Ljava/lang/Object;` @kind static;
  #L2a5c0a.  v0:= temp @kind object;
  #L2a5c0c.  v1:= v2.`kotlin.collections.RingBuffer$iterator$1.index` @type ^`int`;
  #L2a5c10.  v0:= v0[v1] @kind object;
  #L2a5c14.  call `setNext`(v2, v0) @signature `Lkotlin/collections/AbstractIterator;.setNext:(Ljava/lang/Object;)V` @kind virtual;
  #L2a5c1a.  v0:= v2.`kotlin.collections.RingBuffer$iterator$1.this$0` @type ^`kotlin.collections.RingBuffer` @kind object;
  #L2a5c1e.  v1:= v2.`kotlin.collections.RingBuffer$iterator$1.index` @type ^`int`;
  #L2a5c22.  v1:= v1 + 1;
  #L2a5c26.  call temp:= `access$getCapacity$p`(v0) @signature `Lkotlin/collections/RingBuffer;.access$getCapacity$p:(Lkotlin/collections/RingBuffer;)I` @kind static;
  #L2a5c2c.  v0:= temp;
  #L2a5c2e.  v1:= v1 %% v0 @kind int;
  #L2a5c30.  v2.`kotlin.collections.RingBuffer$iterator$1.index` @type ^`int` := v1;
  #L2a5c34.  v0:= v2.`kotlin.collections.RingBuffer$iterator$1.count` @type ^`int`;
  #L2a5c38.  v0:= v0 + -1;
  #L2a5c3c.  v2.`kotlin.collections.RingBuffer$iterator$1.count` @type ^`int` := v0;
  #L2a5c40.  return @kind void;
}
