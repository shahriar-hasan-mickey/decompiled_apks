record `kotlin.collections.AbstractList$SubList` @kind class @AccessFlag FINAL extends `kotlin.collections.AbstractList` @kind class, `java.util.RandomAccess` @kind interface {
  `int` `kotlin.collections.AbstractList$SubList._size` @AccessFlag PRIVATE;
  `int` `kotlin.collections.AbstractList$SubList.fromIndex` @AccessFlag PRIVATE_FINAL;
  `kotlin.collections.AbstractList` `kotlin.collections.AbstractList$SubList.list` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.collections.AbstractList$SubList` v1 @kind this, `kotlin.collections.AbstractList` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lkotlin/collections/AbstractList$SubList;.<init>:(Lkotlin/collections/AbstractList;II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L29eac4.  v0:= "list" @kind object;
  #L29eac8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29eace.  call `<init>`(v1) @signature `Lkotlin/collections/AbstractList;.<init>:()V` @kind direct;
  #L29ead4.  v1.`kotlin.collections.AbstractList$SubList.list` @type ^`kotlin.collections.AbstractList` := v2 @kind object;
  #L29ead8.  v1.`kotlin.collections.AbstractList$SubList.fromIndex` @type ^`int` := v3;
  #L29eadc.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L29eae0.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L29eae6.  v2:= temp;
  #L29eae8.  call `checkRangeIndexes$kotlin_stdlib`(v0, v3, v4, v2) @signature `Lkotlin/collections/AbstractList$Companion;.checkRangeIndexes$kotlin_stdlib:(III)V` @kind virtual;
  #L29eaee.  v4:= v4 - v3 @kind int;
  #L29eaf0.  v1.`kotlin.collections.AbstractList$SubList._size` @type ^`int` := v4;
  #L29eaf4.  return @kind void;
}
procedure `java.lang.Object` `get`(`kotlin.collections.AbstractList$SubList` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/AbstractList$SubList;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29ea90.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L29ea94.  v1:= v2.`kotlin.collections.AbstractList$SubList._size` @type ^`int`;
  #L29ea98.  call `checkElementIndex$kotlin_stdlib`(v0, v3, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L29ea9e.  v0:= v2.`kotlin.collections.AbstractList$SubList.list` @type ^`kotlin.collections.AbstractList` @kind object;
  #L29eaa2.  v1:= v2.`kotlin.collections.AbstractList$SubList.fromIndex` @type ^`int`;
  #L29eaa6.  v1:= v1 + v3 @kind int;
  #L29eaa8.  call temp:= `get`(v0, v1) @signature `Lkotlin/collections/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L29eaae.  v3:= temp @kind object;
  #L29eab0.  return v3 @kind object;
}
procedure `int` `getSize`(`kotlin.collections.AbstractList$SubList` v1 @kind this) @signature `Lkotlin/collections/AbstractList$SubList;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ea78.  v0:= v1.`kotlin.collections.AbstractList$SubList._size` @type ^`int`;
  #L29ea7c.  return v0;
}
