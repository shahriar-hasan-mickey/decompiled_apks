record `kotlin.collections.ArrayAsCollection` @kind class @AccessFlag FINAL extends `java.util.Collection` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `boolean` `kotlin.collections.ArrayAsCollection.isVarargs` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object`[] `kotlin.collections.ArrayAsCollection.values` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.collections.ArrayAsCollection` v1 @kind this, `java.lang.Object`[] v2 @kind object, `boolean` v3 ) @signature `Lkotlin/collections/ArrayAsCollection;.<init>:([Ljava/lang/Object;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L29fadc.  v0:= "values" @kind object;
  #L29fae0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29fae6.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29faec.  v1.`kotlin.collections.ArrayAsCollection.values` @type ^`java.lang.Object`[] := v2 @kind object;
  #L29faf0.  v1.`kotlin.collections.ArrayAsCollection.isVarargs` @type ^`boolean` := v3 @kind boolean;
  #L29faf4.  return @kind void;
}
procedure `boolean` `add`(`kotlin.collections.ArrayAsCollection` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/ArrayAsCollection;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29f8d4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29f8d8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29f8dc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29f8e2.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.collections.ArrayAsCollection` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/ArrayAsCollection;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29f8f4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29f8f8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29f8fc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29f902.  throw v2;
}
procedure `void` `clear`(`kotlin.collections.ArrayAsCollection` v2 @kind this) @signature `Lkotlin/collections/ArrayAsCollection;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29fb08.  v0:= new `java.lang.UnsupportedOperationException`;
  #L29fb0c.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L29fb10.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29fb16.  throw v0;
}
procedure `boolean` `contains`(`kotlin.collections.ArrayAsCollection` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/ArrayAsCollection;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29f914.  v0:= v1.`kotlin.collections.ArrayAsCollection.values` @type ^`java.lang.Object`[] @kind object;
  #L29f918.  call temp:= `contains`(v0, v2) @signature `Lkotlin/collections/ArraysKt___ArraysKt;.contains:([Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L29f91e.  v2:= temp;
  #L29f920.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.collections.ArrayAsCollection` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lkotlin/collections/ArrayAsCollection;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29f934.  v0:= "elements" @kind object;
  #L29f938.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29f93e.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L29f944.  v0:= temp;
  #L29f946.  v1:= 1I;
  #L29f948.  if v0 == 0 then goto L29f94e;
  #L29f94c.  goto L29f978;
  #L29f94e.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29f954.  v3:= temp @kind object;
  #L29f956.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29f95c.  v0:= temp;
  #L29f95e.  if v0 == 0 then goto L29f978;
  #L29f962.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29f968.  v0:= temp @kind object;
  #L29f96a.  call temp:= `contains`(v2, v0) @signature `Lkotlin/collections/ArrayAsCollection;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L29f970.  v0:= temp;
  #L29f972.  if v0 != 0 then goto L29f956;
  #L29f976.  v1:= 0I;
  #L29f978.  return v1;
}
procedure `int` `getSize`(`kotlin.collections.ArrayAsCollection` v1 @kind this) @signature `Lkotlin/collections/ArrayAsCollection;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29fa28.  v0:= v1.`kotlin.collections.ArrayAsCollection.values` @type ^`java.lang.Object`[] @kind object;
  #L29fa2c.  v0:= length @variable v0;
  #L29fa2e.  return v0;
}
procedure `java.lang.Object`[] `getValues`(`kotlin.collections.ArrayAsCollection` v1 @kind this) @signature `Lkotlin/collections/ArrayAsCollection;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L29fa5c.  v0:= v1.`kotlin.collections.ArrayAsCollection.values` @type ^`java.lang.Object`[] @kind object;
  #L29fa60.  return v0 @kind object;
}
procedure `boolean` `isEmpty`(`kotlin.collections.ArrayAsCollection` v1 @kind this) @signature `Lkotlin/collections/ArrayAsCollection;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29f98c.  v0:= v1.`kotlin.collections.ArrayAsCollection.values` @type ^`java.lang.Object`[] @kind object;
  #L29f990.  v0:= length @variable v0;
  #L29f992.  if v0 != 0 then goto L29f99a;
  #L29f996.  v0:= 1I;
  #L29f998.  goto L29f99c;
  #L29f99a.  v0:= 0I;
  #L29f99c.  return v0;
}
procedure `boolean` `isVarargs`(`kotlin.collections.ArrayAsCollection` v1 @kind this) @signature `Lkotlin/collections/ArrayAsCollection;.isVarargs:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L29f9b0.  v0:= v1.`kotlin.collections.ArrayAsCollection.isVarargs` @type ^`boolean` @kind boolean;
  #L29f9b4.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.collections.ArrayAsCollection` v1 @kind this) @signature `Lkotlin/collections/ArrayAsCollection;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29fabc.  v0:= v1.`kotlin.collections.ArrayAsCollection.values` @type ^`java.lang.Object`[] @kind object;
  #L29fac0.  call temp:= `iterator`(v0) @signature `Lkotlin/jvm/internal/ArrayIteratorKt;.iterator:([Ljava/lang/Object;)Ljava/util/Iterator;` @kind static;
  #L29fac6.  v0:= temp @kind object;
  #L29fac8.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.collections.ArrayAsCollection` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/ArrayAsCollection;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29f9c8.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29f9cc.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29f9d0.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29f9d6.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.collections.ArrayAsCollection` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/ArrayAsCollection;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29f9e8.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29f9ec.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29f9f0.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29f9f6.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.collections.ArrayAsCollection` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/ArrayAsCollection;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29fa08.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29fa0c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29fa10.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29fa16.  throw v2;
}
procedure `int` `size`(`kotlin.collections.ArrayAsCollection` v1 @kind this) @signature `Lkotlin/collections/ArrayAsCollection;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L29fa40.  call temp:= `getSize`(v1) @signature `Lkotlin/collections/ArrayAsCollection;.getSize:()I` @kind virtual;
  #L29fa46.  v0:= temp;
  #L29fa48.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.ArrayAsCollection` v2 @kind this) @signature `Lkotlin/collections/ArrayAsCollection;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L29fa74.  v0:= v2.`kotlin.collections.ArrayAsCollection.values` @type ^`java.lang.Object`[] @kind object;
  #L29fa78.  v1:= v2.`kotlin.collections.ArrayAsCollection.isVarargs` @type ^`boolean` @kind boolean;
  #L29fa7c.  call temp:= `copyToArrayOfAny`(v0, v1) @signature `Lkotlin/collections/CollectionsKt__CollectionsJVMKt;.copyToArrayOfAny:([Ljava/lang/Object;Z)[Ljava/lang/Object;` @kind static;
  #L29fa82.  v0:= temp @kind object;
  #L29fa84.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.ArrayAsCollection` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/collections/ArrayAsCollection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29fa98.  v0:= "array" @kind object;
  #L29fa9c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29faa2.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L29faa8.  v2:= temp @kind object;
  #L29faaa.  return v2 @kind object;
}
