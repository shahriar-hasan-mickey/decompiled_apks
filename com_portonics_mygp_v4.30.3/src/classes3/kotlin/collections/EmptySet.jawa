record `kotlin.collections.EmptySet` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Set` @kind interface, `java.io.Serializable` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
}
global `kotlin.collections.EmptySet` `@@kotlin.collections.EmptySet.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlin.collections.EmptySet.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/collections/EmptySet;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2a4690.  v0:= new `kotlin.collections.EmptySet`;
  #L2a4694.  call `<init>`(v0) @signature `Lkotlin/collections/EmptySet;.<init>:()V` @kind direct;
  #L2a469a.  `@@kotlin.collections.EmptySet.INSTANCE` @type ^`kotlin.collections.EmptySet` := v0 @kind object;
  #L2a469e.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.EmptySet` v0 @kind this) @signature `Lkotlin/collections/EmptySet;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2a46b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a46b6.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L2a4608.  v0:= `@@kotlin.collections.EmptySet.INSTANCE` @type ^`kotlin.collections.EmptySet` @kind object;
  #L2a460c.  return v0 @kind object;
}
procedure `boolean` `add`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2a4450.  v2:= new `java.lang.UnsupportedOperationException`;
  #L2a4454.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L2a4458.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a445e.  throw v2;
}
procedure `boolean` `add`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.add:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4470.  v2:= new `java.lang.UnsupportedOperationException`;
  #L2a4474.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L2a4478.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a447e.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.collections.EmptySet` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4490.  v2:= new `java.lang.UnsupportedOperationException`;
  #L2a4494.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L2a4498.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a449e.  throw v2;
}
procedure `void` `clear`(`kotlin.collections.EmptySet` v2 @kind this) @signature `Lkotlin/collections/EmptySet;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a46c8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2a46cc.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2a46d0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a46d6.  throw v0;
}
procedure `boolean` `contains`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a44b0.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L2a44b4.  if v0 != 0 then goto L2a44bc;
  #L2a44b8.  v2:= 0I;
  #L2a44ba.  return v2;
  #L2a44bc.  v2:= (`java.lang.Void`) v2 @kind object;
  #L2a44c0.  call temp:= `contains`(v1, v2) @signature `Lkotlin/collections/EmptySet;.contains:(Ljava/lang/Void;)Z` @kind virtual;
  #L2a44c6.  v2:= temp;
  #L2a44c8.  return v2;
}
procedure `boolean` `contains`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.contains:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a44dc.  v0:= "element" @kind object;
  #L2a44e0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2a44e6.  v2:= 0I;
  #L2a44e8.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.collections.EmptySet` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a44fc.  v0:= "elements" @kind object;
  #L2a4500.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2a4506.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L2a450c.  v2:= temp;
  #L2a450e.  return v2;
}
procedure `boolean` `equals`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4520.  v0:= instanceof @variable v2 @type ^`java.util.Set` @kind boolean;
  #L2a4524.  if v0 == 0 then goto L2a453c;
  #L2a4528.  v2:= (`java.util.Set`) v2 @kind object;
  #L2a452c.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L2a4532.  v2:= temp;
  #L2a4534.  if v2 == 0 then goto L2a453c;
  #L2a4538.  v2:= 1I;
  #L2a453a.  goto L2a453e;
  #L2a453c.  v2:= 0I;
  #L2a453e.  return v2;
}
procedure `int` `getSize`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a45c4.  v0:= 0I;
  #L2a45c6.  return v0;
}
procedure `int` `hashCode`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a45d8.  v0:= 0I;
  #L2a45da.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4550.  v0:= 1I;
  #L2a4552.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4678.  v0:= `@@kotlin.collections.EmptyIterator.INSTANCE` @type ^`kotlin.collections.EmptyIterator` @kind object;
  #L2a467c.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4564.  v2:= new `java.lang.UnsupportedOperationException`;
  #L2a4568.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L2a456c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a4572.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.collections.EmptySet` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4584.  v2:= new `java.lang.UnsupportedOperationException`;
  #L2a4588.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L2a458c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a4592.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.collections.EmptySet` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a45a4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L2a45a8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L2a45ac.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a45b2.  throw v2;
}
procedure `int` `size`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2a45ec.  call temp:= `getSize`(v1) @signature `Lkotlin/collections/EmptySet;.getSize:()I` @kind virtual;
  #L2a45f2.  v0:= temp;
  #L2a45f4.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4620.  call temp:= `toArray`(v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L2a4626.  v0:= temp @kind object;
  #L2a4628.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/collections/EmptySet;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a463c.  v0:= "array" @kind object;
  #L2a4640.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2a4646.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L2a464c.  v2:= temp @kind object;
  #L2a464e.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4660.  v0:= "[]" @kind object;
  #L2a4664.  return v0 @kind object;
}
