record `kotlin.collections.AbstractMap` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Map` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Set` `kotlin.collections.AbstractMap._keys` @AccessFlag PRIVATE_VOLATILE;
  `java.util.Collection` `kotlin.collections.AbstractMap._values` @AccessFlag PRIVATE_VOLATILE;
}
global `kotlin.collections.AbstractMap$Companion` `@@kotlin.collections.AbstractMap.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/collections/AbstractMap;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L29f548.  v0:= new `kotlin.collections.AbstractMap$Companion`;
  #L29f54c.  v1:= 0I;
  #L29f54e.  call `<init>`(v0, v1) @signature `Lkotlin/collections/AbstractMap$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L29f554.  `@@kotlin.collections.AbstractMap.Companion` @type ^`kotlin.collections.AbstractMap$Companion` := v0 @kind object;
  #L29f558.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.AbstractMap` v0 @kind this) @signature `Lkotlin/collections/AbstractMap;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L29f56c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29f572.  return @kind void;
}
procedure `java.lang.String` `access$toString`(`kotlin.collections.AbstractMap` v0 @kind object, `java.util.Map$Entry` v1 @kind object) @signature `Lkotlin/collections/AbstractMap;.access$toString:(Lkotlin/collections/AbstractMap;Ljava/util/Map$Entry;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L29f354.  call temp:= `toString`(v0, v1) @signature `Lkotlin/collections/AbstractMap;.toString:(Ljava/util/Map$Entry;)Ljava/lang/String;` @kind direct;
  #L29f35a.  v0:= temp @kind object;
  #L29f35c.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `implFindEntry`(`kotlin.collections.AbstractMap` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/AbstractMap;.implFindEntry:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L29f484.  call temp:= `entrySet`(v3) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L29f48a.  v0:= temp @kind object;
  #L29f48c.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29f492.  v0:= temp @kind object;
  #L29f494.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29f49a.  v1:= temp;
  #L29f49c.  if v1 == 0 then goto L29f4c4;
  #L29f4a0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29f4a6.  v1:= temp @kind object;
  #L29f4a8.  v2:= v1 @kind object;
  #L29f4aa.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L29f4ae.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L29f4b4.  v2:= temp @kind object;
  #L29f4b6.  call temp:= `areEqual`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L29f4bc.  v2:= temp;
  #L29f4be.  if v2 == 0 then goto L29f494;
  #L29f4c2.  goto L29f4c6;
  #L29f4c4.  v1:= 0I;
  #L29f4c6.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L29f4ca.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.collections.AbstractMap` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/AbstractMap;.toString:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;

  #L29f3b4.  if v1 != v0 then goto L29f3be;
  #L29f3b8.  v1:= "(this Map)" @kind object;
  #L29f3bc.  goto L29f3c6;
  #L29f3be.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L29f3c4.  v1:= temp @kind object;
  #L29f3c6.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.collections.AbstractMap` v2 @kind this, `java.util.Map$Entry` v3 @kind object) @signature `Lkotlin/collections/AbstractMap;.toString:(Ljava/util/Map$Entry;)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L29f3d8.  v0:= new `java.lang.StringBuilder`;
  #L29f3dc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L29f3e2.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L29f3e8.  v1:= temp @kind object;
  #L29f3ea.  call temp:= `toString`(v2, v1) @signature `Lkotlin/collections/AbstractMap;.toString:(Ljava/lang/Object;)Ljava/lang/String;` @kind direct;
  #L29f3f0.  v1:= temp @kind object;
  #L29f3f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29f3f8.  v1:= 61I;
  #L29f3fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L29f402.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L29f408.  v3:= temp @kind object;
  #L29f40a.  call temp:= `toString`(v2, v3) @signature `Lkotlin/collections/AbstractMap;.toString:(Ljava/lang/Object;)Ljava/lang/String;` @kind direct;
  #L29f410.  v3:= temp @kind object;
  #L29f412.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29f418.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L29f41e.  v3:= temp @kind object;
  #L29f420.  return v3 @kind object;
}
procedure `void` `clear`(`kotlin.collections.AbstractMap` v2 @kind this) @signature `Lkotlin/collections/AbstractMap;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29f584.  v0:= new `java.lang.UnsupportedOperationException`;
  #L29f588.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L29f58c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29f592.  throw v0;
}
procedure `boolean` `containsEntry$kotlin_stdlib`(`kotlin.collections.AbstractMap` v3 @kind this, `java.util.Map$Entry` v4 @kind object) @signature `Lkotlin/collections/AbstractMap;.containsEntry$kotlin_stdlib:(Ljava/util/Map$Entry;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L29f0f4.  v0:= 0I;
  #L29f0f6.  if v4 != 0 then goto L29f0fc;
  #L29f0fa.  return v0;
  #L29f0fc.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L29f102.  v1:= temp @kind object;
  #L29f104.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L29f10a.  v4:= temp @kind object;
  #L29f10c.  call temp:= `get`(v3, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L29f112.  v2:= temp @kind object;
  #L29f114.  call temp:= `areEqual`(v4, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L29f11a.  v4:= temp;
  #L29f11c.  if v4 != 0 then goto L29f122;
  #L29f120.  return v0;
  #L29f122.  if v2 != 0 then goto L29f134;
  #L29f126.  call temp:= `containsKey`(v3, v1) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L29f12c.  v4:= temp;
  #L29f12e.  if v4 != 0 then goto L29f134;
  #L29f132.  return v0;
  #L29f134.  v4:= 1I;
  #L29f136.  return v4;
}
procedure `boolean` `containsKey`(`kotlin.collections.AbstractMap` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/AbstractMap;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L29f148.  call temp:= `implFindEntry`(v0, v1) @signature `Lkotlin/collections/AbstractMap;.implFindEntry:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @kind direct;
  #L29f14e.  v1:= temp @kind object;
  #L29f150.  if v1 == 0 then goto L29f158;
  #L29f154.  v1:= 1I;
  #L29f156.  goto L29f15a;
  #L29f158.  v1:= 0I;
  #L29f15a.  return v1;
}
procedure `boolean` `containsValue`(`kotlin.collections.AbstractMap` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/AbstractMap;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L29f16c.  call temp:= `entrySet`(v3) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L29f172.  v0:= temp @kind object;
  #L29f174.  v1:= instanceof @variable v0 @type ^`java.util.Collection` @kind boolean;
  #L29f178.  v2:= 0I;
  #L29f17a.  if v1 == 0 then goto L29f18c;
  #L29f17e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L29f184.  v1:= temp;
  #L29f186.  if v1 == 0 then goto L29f18c;
  #L29f18a.  goto L29f1c2;
  #L29f18c.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29f192.  v0:= temp @kind object;
  #L29f194.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29f19a.  v1:= temp;
  #L29f19c.  if v1 == 0 then goto L29f1c2;
  #L29f1a0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29f1a6.  v1:= temp @kind object;
  #L29f1a8.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L29f1ac.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L29f1b2.  v1:= temp @kind object;
  #L29f1b4.  call temp:= `areEqual`(v1, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L29f1ba.  v1:= temp;
  #L29f1bc.  if v1 == 0 then goto L29f194;
  #L29f1c0.  v2:= 1I;
  #L29f1c2.  return v2;
}
procedure `java.util.Set` `entrySet`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L29f4dc.  call temp:= `getEntries`(v1) @signature `Lkotlin/collections/AbstractMap;.getEntries:()Ljava/util/Set;` @kind virtual;
  #L29f4e2.  v0:= temp @kind object;
  #L29f4e4.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlin.collections.AbstractMap` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlin/collections/AbstractMap;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L29f1d4.  v0:= 1I;
  #L29f1d6.  if v5 != v4 then goto L29f1dc;
  #L29f1da.  return v0;
  #L29f1dc.  v1:= instanceof @variable v5 @type ^`java.util.Map` @kind boolean;
  #L29f1e0.  v2:= 0I;
  #L29f1e2.  if v1 != 0 then goto L29f1e8;
  #L29f1e6.  return v2;
  #L29f1e8.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMap;.size:()I` @kind virtual;
  #L29f1ee.  v1:= temp;
  #L29f1f0.  v5:= (`java.util.Map`) v5 @kind object;
  #L29f1f4.  call temp:= `size`(v5) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L29f1fa.  v3:= temp;
  #L29f1fc.  if v1 == v3 then goto L29f202;
  #L29f200.  return v2;
  #L29f202.  call temp:= `entrySet`(v5) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L29f208.  v5:= temp @kind object;
  #L29f20a.  v1:= instanceof @variable v5 @type ^`java.util.Collection` @kind boolean;
  #L29f20e.  if v1 == 0 then goto L29f220;
  #L29f212.  call temp:= `isEmpty`(v5) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L29f218.  v1:= temp;
  #L29f21a.  if v1 == 0 then goto L29f220;
  #L29f21e.  goto L29f24e;
  #L29f220.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29f226.  v5:= temp @kind object;
  #L29f228.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29f22e.  v1:= temp;
  #L29f230.  if v1 == 0 then goto L29f24e;
  #L29f234.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29f23a.  v1:= temp @kind object;
  #L29f23c.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L29f240.  call temp:= `containsEntry$kotlin_stdlib`(v4, v1) @signature `Lkotlin/collections/AbstractMap;.containsEntry$kotlin_stdlib:(Ljava/util/Map$Entry;)Z` @kind virtual;
  #L29f246.  v1:= temp;
  #L29f248.  if v1 != 0 then goto L29f228;
  #L29f24c.  v0:= 0I;
  #L29f24e.  return v0;
}
procedure `java.lang.Object` `get`(`kotlin.collections.AbstractMap` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/AbstractMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L29f2e8.  call temp:= `implFindEntry`(v0, v1) @signature `Lkotlin/collections/AbstractMap;.implFindEntry:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @kind direct;
  #L29f2ee.  v1:= temp @kind object;
  #L29f2f0.  if v1 == 0 then goto L29f2fe;
  #L29f2f4.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L29f2fa.  v1:= temp @kind object;
  #L29f2fc.  goto L29f300;
  #L29f2fe.  v1:= 0I;
  #L29f300.  return v1 @kind object;
}
procedure `java.util.Set` `getEntries`() @signature `Lkotlin/collections/AbstractMap;.getEntries:()Ljava/util/Set;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.Set` `getKeys`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.getKeys:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29f4f8.  v0:= v1.`kotlin.collections.AbstractMap._keys` @type ^`java.util.Set` @kind object;
  #L29f4fc.  if v0 != 0 then goto L29f50e;
  #L29f500.  v0:= new `kotlin.collections.AbstractMap$keys$1`;
  #L29f504.  call `<init>`(v0, v1) @signature `Lkotlin/collections/AbstractMap$keys$1;.<init>:(Lkotlin/collections/AbstractMap;)V` @kind direct;
  #L29f50a.  v1.`kotlin.collections.AbstractMap._keys` @type ^`java.util.Set` := v0 @kind object;
  #L29f50e.  v0:= v1.`kotlin.collections.AbstractMap._keys` @type ^`java.util.Set` @kind object;
  #L29f512.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L29f518.  return v0 @kind object;
}
procedure `int` `getSize`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29f284.  call temp:= `entrySet`(v1) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L29f28a.  v0:= temp @kind object;
  #L29f28c.  call temp:= `size`(v0) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L29f292.  v0:= temp;
  #L29f294.  return v0;
}
procedure `java.util.Collection` `getValues`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.getValues:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29f434.  v0:= v1.`kotlin.collections.AbstractMap._values` @type ^`java.util.Collection` @kind object;
  #L29f438.  if v0 != 0 then goto L29f44a;
  #L29f43c.  v0:= new `kotlin.collections.AbstractMap$values$1`;
  #L29f440.  call `<init>`(v0, v1) @signature `Lkotlin/collections/AbstractMap$values$1;.<init>:(Lkotlin/collections/AbstractMap;)V` @kind direct;
  #L29f446.  v1.`kotlin.collections.AbstractMap._values` @type ^`java.util.Collection` := v0 @kind object;
  #L29f44a.  v0:= v1.`kotlin.collections.AbstractMap._values` @type ^`java.util.Collection` @kind object;
  #L29f44e.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L29f454.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29f2a8.  call temp:= `entrySet`(v1) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L29f2ae.  v0:= temp @kind object;
  #L29f2b0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L29f2b6.  v0:= temp;
  #L29f2b8.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29f260.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractMap;.size:()I` @kind virtual;
  #L29f266.  v0:= temp;
  #L29f268.  if v0 != 0 then goto L29f270;
  #L29f26c.  v0:= 1I;
  #L29f26e.  goto L29f272;
  #L29f270.  v0:= 0I;
  #L29f272.  return v0;
}
procedure `java.util.Set` `keySet`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L29f52c.  call temp:= `getKeys`(v1) @signature `Lkotlin/collections/AbstractMap;.getKeys:()Ljava/util/Set;` @kind virtual;
  #L29f532.  v0:= temp @kind object;
  #L29f534.  return v0 @kind object;
}
procedure `java.lang.Object` `put`(`kotlin.collections.AbstractMap` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L29f314.  v1:= new `java.lang.UnsupportedOperationException`;
  #L29f318.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L29f31c.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29f322.  throw v1;
}
procedure `void` `putAll`(`kotlin.collections.AbstractMap` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lkotlin/collections/AbstractMap;.putAll:(Ljava/util/Map;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29f5a4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29f5a8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29f5ac.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29f5b2.  throw v2;
}
procedure `java.lang.Object` `remove`(`kotlin.collections.AbstractMap` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29f334.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29f338.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29f33c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29f342.  throw v2;
}
procedure `int` `size`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L29f2cc.  call temp:= `getSize`(v1) @signature `Lkotlin/collections/AbstractMap;.getSize:()I` @kind virtual;
  #L29f2d2.  v0:= temp;
  #L29f2d4.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.collections.AbstractMap` v9 @kind this) @signature `Lkotlin/collections/AbstractMap;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L29f370.  call temp:= `entrySet`(v9) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L29f376.  v0:= temp @kind object;
  #L29f378.  v6:= new `kotlin.collections.AbstractMap$toString$1`;
  #L29f37c.  call `<init>`(v6, v9) @signature `Lkotlin/collections/AbstractMap$toString$1;.<init>:(Lkotlin/collections/AbstractMap;)V` @kind direct;
  #L29f382.  v1:= ", " @kind object;
  #L29f386.  v2:= "{" @kind object;
  #L29f38a.  v3:= "}" @kind object;
  #L29f38e.  v4:= 0I;
  #L29f390.  v5:= 0I;
  #L29f392.  v7:= 24I;
  #L29f396.  v8:= 0I;
  #L29f398.  call temp:= `joinToString$default`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lkotlin/collections/CollectionsKt;.joinToString$default:(Ljava/lang/Iterable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L29f39e.  v0:= temp @kind object;
  #L29f3a0.  return v0 @kind object;
}
procedure `java.util.Collection` `values`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L29f468.  call temp:= `getValues`(v1) @signature `Lkotlin/collections/AbstractMap;.getValues:()Ljava/util/Collection;` @kind virtual;
  #L29f46e.  v0:= temp @kind object;
  #L29f470.  return v0 @kind object;
}
