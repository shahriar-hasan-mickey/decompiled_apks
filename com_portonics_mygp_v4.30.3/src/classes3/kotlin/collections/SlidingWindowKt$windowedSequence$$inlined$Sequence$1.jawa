record `kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface {
  `boolean` `kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$partialWindows$inlined` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$reuseBuffer$inlined` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$size$inlined` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$step$inlined` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.sequences.Sequence` `kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$this_windowedSequence$inlined` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1` v0 @kind this, `kotlin.sequences.Sequence` v1 @kind object, `int` v2 , `int` v3 , `boolean` v4 , `boolean` v5 ) @signature `Lkotlin/collections/SlidingWindowKt$windowedSequence$$inlined$Sequence$1;.<init>:(Lkotlin/sequences/Sequence;IIZZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2a6d74.  v0.`kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$this_windowedSequence$inlined` @type ^`kotlin.sequences.Sequence` := v1 @kind object;
  #L2a6d78.  v0.`kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$size$inlined` @type ^`int` := v2;
  #L2a6d7c.  v0.`kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$step$inlined` @type ^`int` := v3;
  #L2a6d80.  v0.`kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$partialWindows$inlined` @type ^`boolean` := v4 @kind boolean;
  #L2a6d84.  v0.`kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$reuseBuffer$inlined` @type ^`boolean` := v5 @kind boolean;
  #L2a6d88.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a6d8e.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1` v5 @kind this) @signature `Lkotlin/collections/SlidingWindowKt$windowedSequence$$inlined$Sequence$1;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2a6d3c.  v0:= v5.`kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$this_windowedSequence$inlined` @type ^`kotlin.sequences.Sequence` @kind object;
  #L2a6d40.  call temp:= `iterator`(v0) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2a6d46.  v0:= temp @kind object;
  #L2a6d48.  v1:= v5.`kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$size$inlined` @type ^`int`;
  #L2a6d4c.  v2:= v5.`kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$step$inlined` @type ^`int`;
  #L2a6d50.  v3:= v5.`kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$partialWindows$inlined` @type ^`boolean` @kind boolean;
  #L2a6d54.  v4:= v5.`kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$reuseBuffer$inlined` @type ^`boolean` @kind boolean;
  #L2a6d58.  call temp:= `windowedIterator`(v0, v1, v2, v3, v4) @signature `Lkotlin/collections/SlidingWindowKt;.windowedIterator:(Ljava/util/Iterator;IIZZ)Ljava/util/Iterator;` @kind static;
  #L2a6d5e.  v0:= temp @kind object;
  #L2a6d60.  return v0 @kind object;
}
