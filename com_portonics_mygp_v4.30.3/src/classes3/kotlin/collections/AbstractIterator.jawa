record `kotlin.collections.AbstractIterator` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.lang.Object` `kotlin.collections.AbstractIterator.nextValue` @AccessFlag PRIVATE;
  `kotlin.collections.State` `kotlin.collections.AbstractIterator.state` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.collections.AbstractIterator` v1 @kind this) @signature `Lkotlin/collections/AbstractIterator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L29e4fc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29e502.  v0:= `@@kotlin.collections.State.NotReady` @type ^`kotlin.collections.State` @kind object;
  #L29e506.  v1.`kotlin.collections.AbstractIterator.state` @type ^`kotlin.collections.State` := v0 @kind object;
  #L29e50a.  return @kind void;
}
procedure `boolean` `tryToComputeNext`(`kotlin.collections.AbstractIterator` v2 @kind this) @signature `Lkotlin/collections/AbstractIterator;.tryToComputeNext:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L29e490.  v0:= `@@kotlin.collections.State.Failed` @type ^`kotlin.collections.State` @kind object;
  #L29e494.  v2.`kotlin.collections.AbstractIterator.state` @type ^`kotlin.collections.State` := v0 @kind object;
  #L29e498.  call `computeNext`(v2) @signature `Lkotlin/collections/AbstractIterator;.computeNext:()V` @kind virtual;
  #L29e49e.  v0:= v2.`kotlin.collections.AbstractIterator.state` @type ^`kotlin.collections.State` @kind object;
  #L29e4a2.  v1:= `@@kotlin.collections.State.Ready` @type ^`kotlin.collections.State` @kind object;
  #L29e4a6.  if v0 != v1 then goto L29e4ae;
  #L29e4aa.  v0:= 1I;
  #L29e4ac.  goto L29e4b0;
  #L29e4ae.  v0:= 0I;
  #L29e4b0.  return v0;
}
procedure `void` `computeNext`() @signature `Lkotlin/collections/AbstractIterator;.computeNext:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `done`(`kotlin.collections.AbstractIterator` v1 @kind this) @signature `Lkotlin/collections/AbstractIterator;.done:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L29e51c.  v0:= `@@kotlin.collections.State.Done` @type ^`kotlin.collections.State` @kind object;
  #L29e520.  v1.`kotlin.collections.AbstractIterator.state` @type ^`kotlin.collections.State` := v0 @kind object;
  #L29e524.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.collections.AbstractIterator` v4 @kind this) @signature `Lkotlin/collections/AbstractIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L29e424.  v0:= v4.`kotlin.collections.AbstractIterator.state` @type ^`kotlin.collections.State` @kind object;
  #L29e428.  v1:= `@@kotlin.collections.State.Failed` @type ^`kotlin.collections.State` @kind object;
  #L29e42c.  v2:= 0I;
  #L29e42e.  v3:= 1I;
  #L29e430.  if v0 == v1 then goto L29e438;
  #L29e434.  v1:= 1I;
  #L29e436.  goto L29e43a;
  #L29e438.  v1:= 0I;
  #L29e43a.  if v1 == 0 then goto L29e466;
  #L29e43e.  v1:= `@@kotlin.collections.AbstractIterator$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L29e442.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L29e448.  v0:= temp;
  #L29e44a.  v0:= v1[v0];
  #L29e44e.  if v0 == v3 then goto L29e464;
  #L29e452.  v1:= 2I;
  #L29e454.  if v0 == v1 then goto L29e462;
  #L29e458.  call temp:= `tryToComputeNext`(v4) @signature `Lkotlin/collections/AbstractIterator;.tryToComputeNext:()Z` @kind direct;
  #L29e45e.  v2:= temp;
  #L29e460.  goto L29e464;
  #L29e462.  v2:= 1I;
  #L29e464.  return v2;
  #L29e466.  v0:= new `java.lang.IllegalArgumentException`;
  #L29e46a.  v1:= "Failed requirement." @kind object;
  #L29e46e.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L29e474.  v1:= temp @kind object;
  #L29e476.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29e47c.  throw v0;
}
procedure `java.lang.Object` `next`(`kotlin.collections.AbstractIterator` v1 @kind this) @signature `Lkotlin/collections/AbstractIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29e4c4.  call temp:= `hasNext`(v1) @signature `Lkotlin/collections/AbstractIterator;.hasNext:()Z` @kind virtual;
  #L29e4ca.  v0:= temp;
  #L29e4cc.  if v0 == 0 then goto L29e4de;
  #L29e4d0.  v0:= `@@kotlin.collections.State.NotReady` @type ^`kotlin.collections.State` @kind object;
  #L29e4d4.  v1.`kotlin.collections.AbstractIterator.state` @type ^`kotlin.collections.State` := v0 @kind object;
  #L29e4d8.  v0:= v1.`kotlin.collections.AbstractIterator.nextValue` @type ^`java.lang.Object` @kind object;
  #L29e4dc.  return v0 @kind object;
  #L29e4de.  v0:= new `java.util.NoSuchElementException`;
  #L29e4e2.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L29e4e8.  throw v0;
}
procedure `void` `remove`(`kotlin.collections.AbstractIterator` v2 @kind this) @signature `Lkotlin/collections/AbstractIterator;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29e538.  v0:= new `java.lang.UnsupportedOperationException`;
  #L29e53c.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L29e540.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29e546.  throw v0;
}
procedure `void` `setNext`(`kotlin.collections.AbstractIterator` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/AbstractIterator;.setNext:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L29e558.  v0.`kotlin.collections.AbstractIterator.nextValue` @type ^`java.lang.Object` := v1 @kind object;
  #L29e55c.  v1:= `@@kotlin.collections.State.Ready` @type ^`kotlin.collections.State` @kind object;
  #L29e560.  v0.`kotlin.collections.AbstractIterator.state` @type ^`kotlin.collections.State` := v1 @kind object;
  #L29e564.  return @kind void;
}
