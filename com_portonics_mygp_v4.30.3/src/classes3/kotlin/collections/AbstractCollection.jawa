record `kotlin.collections.AbstractCollection` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Collection` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
}
procedure `void` `<init>`(`kotlin.collections.AbstractCollection` v0 @kind this) @signature `Lkotlin/collections/AbstractCollection;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L29e3a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29e3aa.  return @kind void;
}
procedure `boolean` `add`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29e1a4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29e1a8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29e1ac.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29e1b2.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29e1c4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29e1c8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29e1cc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29e1d2.  throw v2;
}
procedure `void` `clear`(`kotlin.collections.AbstractCollection` v2 @kind this) @signature `Lkotlin/collections/AbstractCollection;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29e3bc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L29e3c0.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L29e3c4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29e3ca.  throw v0;
}
procedure `boolean` `contains`(`kotlin.collections.AbstractCollection` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/AbstractCollection;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L29e1e4.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L29e1ea.  v0:= temp;
  #L29e1ec.  v1:= 0I;
  #L29e1ee.  if v0 == 0 then goto L29e1f4;
  #L29e1f2.  goto L29e21e;
  #L29e1f4.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29e1fa.  v0:= temp @kind object;
  #L29e1fc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29e202.  v2:= temp;
  #L29e204.  if v2 == 0 then goto L29e21e;
  #L29e208.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29e20e.  v2:= temp @kind object;
  #L29e210.  call temp:= `areEqual`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L29e216.  v2:= temp;
  #L29e218.  if v2 == 0 then goto L29e1fc;
  #L29e21c.  v1:= 1I;
  #L29e21e.  return v1;
}
procedure `boolean` `containsAll`(`kotlin.collections.AbstractCollection` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lkotlin/collections/AbstractCollection;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29e230.  v0:= "elements" @kind object;
  #L29e234.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29e23a.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L29e240.  v0:= temp;
  #L29e242.  v1:= 1I;
  #L29e244.  if v0 == 0 then goto L29e24a;
  #L29e248.  goto L29e274;
  #L29e24a.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29e250.  v3:= temp @kind object;
  #L29e252.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29e258.  v0:= temp;
  #L29e25a.  if v0 == 0 then goto L29e274;
  #L29e25e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29e264.  v0:= temp @kind object;
  #L29e266.  call temp:= `contains`(v2, v0) @signature `Lkotlin/collections/AbstractCollection;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L29e26c.  v0:= temp;
  #L29e26e.  if v0 != 0 then goto L29e252;
  #L29e272.  v1:= 0I;
  #L29e274.  return v1;
}
procedure `int` `getSize`() @signature `Lkotlin/collections/AbstractCollection;.getSize:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`kotlin.collections.AbstractCollection` v1 @kind this) @signature `Lkotlin/collections/AbstractCollection;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29e288.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L29e28e.  v0:= temp;
  #L29e290.  if v0 != 0 then goto L29e298;
  #L29e294.  v0:= 1I;
  #L29e296.  goto L29e29a;
  #L29e298.  v0:= 0I;
  #L29e29a.  return v0;
}
procedure `java.util.Iterator` `iterator`() @signature `Lkotlin/collections/AbstractCollection;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `remove`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29e2ac.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29e2b0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29e2b4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29e2ba.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29e2cc.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29e2d0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29e2d4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29e2da.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29e2ec.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29e2f0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29e2f4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29e2fa.  throw v2;
}
procedure `int` `size`(`kotlin.collections.AbstractCollection` v1 @kind this) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L29e30c.  call temp:= `getSize`(v1) @signature `Lkotlin/collections/AbstractCollection;.getSize:()I` @kind virtual;
  #L29e312.  v0:= temp;
  #L29e314.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.AbstractCollection` v1 @kind this) @signature `Lkotlin/collections/AbstractCollection;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29e328.  call temp:= `toArray`(v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L29e32e.  v0:= temp @kind object;
  #L29e330.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29e344.  v0:= "array" @kind object;
  #L29e348.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29e34e.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L29e354.  v2:= temp @kind object;
  #L29e356.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.collections.AbstractCollection` v9 @kind this) @signature `Lkotlin/collections/AbstractCollection;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L29e368.  v6:= new `kotlin.collections.AbstractCollection$toString$1`;
  #L29e36c.  call `<init>`(v6, v9) @signature `Lkotlin/collections/AbstractCollection$toString$1;.<init>:(Lkotlin/collections/AbstractCollection;)V` @kind direct;
  #L29e372.  v1:= ", " @kind object;
  #L29e376.  v2:= "[" @kind object;
  #L29e37a.  v3:= "]" @kind object;
  #L29e37e.  v4:= 0I;
  #L29e380.  v5:= 0I;
  #L29e382.  v7:= 24I;
  #L29e386.  v8:= 0I;
  #L29e388.  v0:= v9 @kind object;
  #L29e38a.  call temp:= `joinToString$default`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lkotlin/collections/CollectionsKt;.joinToString$default:(Ljava/lang/Iterable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L29e390.  v0:= temp @kind object;
  #L29e392.  return v0 @kind object;
}
