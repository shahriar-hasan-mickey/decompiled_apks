record `kotlin.collections.RingBuffer` @kind class @AccessFlag FINAL extends `kotlin.collections.AbstractList` @kind class, `java.util.RandomAccess` @kind interface {
  `java.lang.Object`[] `kotlin.collections.RingBuffer.buffer` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.collections.RingBuffer.capacity` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.collections.RingBuffer.size` @AccessFlag PRIVATE;
  `int` `kotlin.collections.RingBuffer.startIndex` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.collections.RingBuffer` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/RingBuffer;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2a5e90.  v2:= new `java.lang.Object`[v2];
  #L2a5e94.  v0:= 0I;
  #L2a5e96.  call `<init>`(v1, v2, v0) @signature `Lkotlin/collections/RingBuffer;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L2a5e9c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.RingBuffer` v3 @kind this, `java.lang.Object`[] v4 @kind object, `int` v5 ) @signature `Lkotlin/collections/RingBuffer;.<init>:([Ljava/lang/Object;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2a5eb0.  v0:= "buffer" @kind object;
  #L2a5eb4.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2a5eba.  call `<init>`(v3) @signature `Lkotlin/collections/AbstractList;.<init>:()V` @kind direct;
  #L2a5ec0.  v3.`kotlin.collections.RingBuffer.buffer` @type ^`java.lang.Object`[] := v4 @kind object;
  #L2a5ec4.  v0:= 1I;
  #L2a5ec6.  v1:= 0I;
  #L2a5ec8.  if v5 < 0 then goto L2a5ed0;
  #L2a5ecc.  v2:= 1I;
  #L2a5ece.  goto L2a5ed2;
  #L2a5ed0.  v2:= 0I;
  #L2a5ed2.  if v2 == 0 then goto L2a5f38;
  #L2a5ed6.  v2:= length @variable v4;
  #L2a5ed8.  if v5 > v2 then goto L2a5ede;
  #L2a5edc.  goto L2a5ee0;
  #L2a5ede.  v0:= 0I;
  #L2a5ee0.  if v0 == 0 then goto L2a5ef0;
  #L2a5ee4.  v4:= length @variable v4;
  #L2a5ee6.  v3.`kotlin.collections.RingBuffer.capacity` @type ^`int` := v4;
  #L2a5eea.  v3.`kotlin.collections.RingBuffer.size` @type ^`int` := v5;
  #L2a5eee.  return @kind void;
  #L2a5ef0.  v0:= new `java.lang.StringBuilder`;
  #L2a5ef4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2a5efa.  v1:= "ring buffer filled size: " @kind object;
  #L2a5efe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a5f04.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a5f0a.  v5:= " cannot be larger than the buffer size: " @kind object;
  #L2a5f0e.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a5f14.  v4:= length @variable v4;
  #L2a5f16.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a5f1c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a5f22.  v4:= temp @kind object;
  #L2a5f24.  v5:= new `java.lang.IllegalArgumentException`;
  #L2a5f28.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a5f2e.  v4:= temp @kind object;
  #L2a5f30.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a5f36.  throw v5;
  #L2a5f38.  v4:= new `java.lang.StringBuilder`;
  #L2a5f3c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2a5f42.  v0:= "ring buffer filled size should not be negative but it is " @kind object;
  #L2a5f46.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a5f4c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a5f52.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a5f58.  v4:= temp @kind object;
  #L2a5f5a.  v5:= new `java.lang.IllegalArgumentException`;
  #L2a5f5e.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a5f64.  v4:= temp @kind object;
  #L2a5f66.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a5f6c.  throw v5;
}
procedure `java.lang.Object`[] `access$getBuffer$p`(`kotlin.collections.RingBuffer` v0 @kind object) @signature `Lkotlin/collections/RingBuffer;.access$getBuffer$p:(Lkotlin/collections/RingBuffer;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2a5d20.  v0:= v0.`kotlin.collections.RingBuffer.buffer` @type ^`java.lang.Object`[] @kind object;
  #L2a5d24.  return v0 @kind object;
}
procedure `int` `access$getCapacity$p`(`kotlin.collections.RingBuffer` v0 @kind object) @signature `Lkotlin/collections/RingBuffer;.access$getCapacity$p:(Lkotlin/collections/RingBuffer;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2a5c7c.  v0:= v0.`kotlin.collections.RingBuffer.capacity` @type ^`int`;
  #L2a5c80.  return v0;
}
procedure `int` `access$getStartIndex$p`(`kotlin.collections.RingBuffer` v0 @kind object) @signature `Lkotlin/collections/RingBuffer;.access$getStartIndex$p:(Lkotlin/collections/RingBuffer;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2a5c94.  v0:= v0.`kotlin.collections.RingBuffer.startIndex` @type ^`int`;
  #L2a5c98.  return v0;
}
procedure `int` `forward`(`kotlin.collections.RingBuffer` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lkotlin/collections/RingBuffer;.forward:(II)I` @AccessFlag PRIVATE_FINAL {
    temp;

  #L2a5cac.  v1:= v1 + v2 @kind int;
  #L2a5cae.  call temp:= `access$getCapacity$p`(v0) @signature `Lkotlin/collections/RingBuffer;.access$getCapacity$p:(Lkotlin/collections/RingBuffer;)I` @kind static;
  #L2a5cb4.  v2:= temp;
  #L2a5cb6.  v1:= v1 %% v2 @kind int;
  #L2a5cb8.  return v1;
}
procedure `void` `add`(`kotlin.collections.RingBuffer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/RingBuffer;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2a5f80.  call temp:= `isFull`(v3) @signature `Lkotlin/collections/RingBuffer;.isFull:()Z` @kind virtual;
  #L2a5f86.  v0:= temp;
  #L2a5f88.  if v0 != 0 then goto L2a5fbe;
  #L2a5f8c.  v0:= v3.`kotlin.collections.RingBuffer.buffer` @type ^`java.lang.Object`[] @kind object;
  #L2a5f90.  v1:= v3.`kotlin.collections.RingBuffer.startIndex` @type ^`int`;
  #L2a5f94.  call temp:= `size`(v3) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a5f9a.  v2:= temp;
  #L2a5f9c.  v1:= v1 + v2 @kind int;
  #L2a5f9e.  call temp:= `access$getCapacity$p`(v3) @signature `Lkotlin/collections/RingBuffer;.access$getCapacity$p:(Lkotlin/collections/RingBuffer;)I` @kind static;
  #L2a5fa4.  v2:= temp;
  #L2a5fa6.  v1:= v1 %% v2 @kind int;
  #L2a5fa8.  v0[v1]:= v4 @kind object;
  #L2a5fac.  call temp:= `size`(v3) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a5fb2.  v4:= temp;
  #L2a5fb4.  v4:= v4 + 1;
  #L2a5fb8.  v3.`kotlin.collections.RingBuffer.size` @type ^`int` := v4;
  #L2a5fbc.  return @kind void;
  #L2a5fbe.  v4:= new `java.lang.IllegalStateException`;
  #L2a5fc2.  v0:= "ring buffer is full" @kind object;
  #L2a5fc6.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a5fcc.  throw v4;
}
procedure `kotlin.collections.RingBuffer` `expanded`(`kotlin.collections.RingBuffer` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/RingBuffer;.expanded:(I)Lkotlin/collections/RingBuffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2a5e28.  v0:= v2.`kotlin.collections.RingBuffer.capacity` @type ^`int`;
  #L2a5e2c.  v1:= v0 ^> 1;
  #L2a5e30.  v0:= v0 + v1 @kind int;
  #L2a5e32.  v0:= v0 + 1;
  #L2a5e36.  call temp:= `coerceAtMost`(v0, v3) @signature `Lkotlin/ranges/RangesKt;.coerceAtMost:(II)I` @kind static;
  #L2a5e3c.  v3:= temp;
  #L2a5e3e.  v0:= v2.`kotlin.collections.RingBuffer.startIndex` @type ^`int`;
  #L2a5e42.  if v0 != 0 then goto L2a5e5e;
  #L2a5e46.  v0:= v2.`kotlin.collections.RingBuffer.buffer` @type ^`java.lang.Object`[] @kind object;
  #L2a5e4a.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L2a5e50.  v3:= temp @kind object;
  #L2a5e52.  v0:= "copyOf(this, newSize)" @kind object;
  #L2a5e56.  call `checkNotNullExpressionValue`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2a5e5c.  goto L2a5e6a;
  #L2a5e5e.  v3:= new `java.lang.Object`[v3];
  #L2a5e62.  call temp:= `toArray`(v2, v3) @signature `Lkotlin/collections/RingBuffer;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L2a5e68.  v3:= temp @kind object;
  #L2a5e6a.  v0:= new `kotlin.collections.RingBuffer`;
  #L2a5e6e.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a5e74.  v1:= temp;
  #L2a5e76.  call `<init>`(v0, v3, v1) @signature `Lkotlin/collections/RingBuffer;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L2a5e7c.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`kotlin.collections.RingBuffer` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/RingBuffer;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a5ce4.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L2a5ce8.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a5cee.  v1:= temp;
  #L2a5cf0.  call `checkElementIndex$kotlin_stdlib`(v0, v3, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L2a5cf6.  v0:= v2.`kotlin.collections.RingBuffer.buffer` @type ^`java.lang.Object`[] @kind object;
  #L2a5cfa.  v1:= v2.`kotlin.collections.RingBuffer.startIndex` @type ^`int`;
  #L2a5cfe.  v1:= v1 + v3 @kind int;
  #L2a5d00.  call temp:= `access$getCapacity$p`(v2) @signature `Lkotlin/collections/RingBuffer;.access$getCapacity$p:(Lkotlin/collections/RingBuffer;)I` @kind static;
  #L2a5d06.  v3:= temp;
  #L2a5d08.  v1:= v1 %% v3 @kind int;
  #L2a5d0a.  v3:= v0[v1] @kind object;
  #L2a5d0e.  return v3 @kind object;
}
procedure `int` `getSize`(`kotlin.collections.RingBuffer` v1 @kind this) @signature `Lkotlin/collections/RingBuffer;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a5ccc.  v0:= v1.`kotlin.collections.RingBuffer.size` @type ^`int`;
  #L2a5cd0.  return v0;
}
procedure `boolean` `isFull`(`kotlin.collections.RingBuffer` v2 @kind this) @signature `Lkotlin/collections/RingBuffer;.isFull:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2a5c54.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a5c5a.  v0:= temp;
  #L2a5c5c.  v1:= v2.`kotlin.collections.RingBuffer.capacity` @type ^`int`;
  #L2a5c60.  if v0 != v1 then goto L2a5c68;
  #L2a5c64.  v0:= 1I;
  #L2a5c66.  goto L2a5c6a;
  #L2a5c68.  v0:= 0I;
  #L2a5c6a.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.collections.RingBuffer` v1 @kind this) @signature `Lkotlin/collections/RingBuffer;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a5e0c.  v0:= new `kotlin.collections.RingBuffer$iterator$1`;
  #L2a5e10.  call `<init>`(v0, v1) @signature `Lkotlin/collections/RingBuffer$iterator$1;.<init>:(Lkotlin/collections/RingBuffer;)V` @kind direct;
  #L2a5e16.  return v0 @kind object;
}
procedure `void` `removeFirst`(`kotlin.collections.RingBuffer` v6 @kind this, `int` v7 ) @signature `Lkotlin/collections/RingBuffer;.removeFirst:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2a5fe0.  v0:= 1I;
  #L2a5fe2.  v1:= 0I;
  #L2a5fe4.  if v7 < 0 then goto L2a5fec;
  #L2a5fe8.  v2:= 1I;
  #L2a5fea.  goto L2a5fee;
  #L2a5fec.  v2:= 0I;
  #L2a5fee.  if v2 == 0 then goto L2a60a8;
  #L2a5ff2.  call temp:= `size`(v6) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a5ff8.  v2:= temp;
  #L2a5ffa.  if v7 > v2 then goto L2a6000;
  #L2a5ffe.  goto L2a6002;
  #L2a6000.  v0:= 0I;
  #L2a6002.  if v0 == 0 then goto L2a605a;
  #L2a6006.  if v7 <= 0 then goto L2a6058;
  #L2a600a.  v0:= v6.`kotlin.collections.RingBuffer.startIndex` @type ^`int`;
  #L2a600e.  v2:= v0 + v7 @kind int;
  #L2a6012.  call temp:= `access$getCapacity$p`(v6) @signature `Lkotlin/collections/RingBuffer;.access$getCapacity$p:(Lkotlin/collections/RingBuffer;)I` @kind static;
  #L2a6018.  v3:= temp;
  #L2a601a.  v2:= v2 %% v3 @kind int;
  #L2a601c.  v3:= 0I;
  #L2a601e.  if v0 <= v2 then goto L2a603c;
  #L2a6022.  v4:= v6.`kotlin.collections.RingBuffer.buffer` @type ^`java.lang.Object`[] @kind object;
  #L2a6026.  v5:= v6.`kotlin.collections.RingBuffer.capacity` @type ^`int`;
  #L2a602a.  call `fill`(v4, v3, v0, v5) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L2a6030.  v0:= v6.`kotlin.collections.RingBuffer.buffer` @type ^`java.lang.Object`[] @kind object;
  #L2a6034.  call `fill`(v0, v3, v1, v2) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L2a603a.  goto L2a6046;
  #L2a603c.  v1:= v6.`kotlin.collections.RingBuffer.buffer` @type ^`java.lang.Object`[] @kind object;
  #L2a6040.  call `fill`(v1, v3, v0, v2) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L2a6046.  v6.`kotlin.collections.RingBuffer.startIndex` @type ^`int` := v2;
  #L2a604a.  call temp:= `size`(v6) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a6050.  v0:= temp;
  #L2a6052.  v0:= v0 - v7 @kind int;
  #L2a6054.  v6.`kotlin.collections.RingBuffer.size` @type ^`int` := v0;
  #L2a6058.  return @kind void;
  #L2a605a.  v0:= new `java.lang.StringBuilder`;
  #L2a605e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2a6064.  v1:= "n shouldn't be greater than the buffer size: n = " @kind object;
  #L2a6068.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a606e.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a6074.  v7:= ", size = " @kind object;
  #L2a6078.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a607e.  call temp:= `size`(v6) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a6084.  v7:= temp;
  #L2a6086.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a608c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a6092.  v7:= temp @kind object;
  #L2a6094.  v0:= new `java.lang.IllegalArgumentException`;
  #L2a6098.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a609e.  v7:= temp @kind object;
  #L2a60a0.  call `<init>`(v0, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a60a6.  throw v0;
  #L2a60a8.  v0:= new `java.lang.StringBuilder`;
  #L2a60ac.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2a60b2.  v1:= "n shouldn't be negative but it is " @kind object;
  #L2a60b6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a60bc.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2a60c2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a60c8.  v7:= temp @kind object;
  #L2a60ca.  v0:= new `java.lang.IllegalArgumentException`;
  #L2a60ce.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2a60d4.  v7:= temp @kind object;
  #L2a60d6.  call `<init>`(v0, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a60dc.  throw v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.RingBuffer` v1 @kind this) @signature `Lkotlin/collections/RingBuffer;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a5d38.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a5d3e.  v0:= temp;
  #L2a5d40.  v0:= new `java.lang.Object`[v0];
  #L2a5d44.  call temp:= `toArray`(v1, v0) @signature `Lkotlin/collections/RingBuffer;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L2a5d4a.  v0:= temp @kind object;
  #L2a5d4c.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.RingBuffer` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lkotlin/collections/RingBuffer;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2a5d60.  v0:= "array" @kind object;
  #L2a5d64.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2a5d6a.  v0:= length @variable v6;
  #L2a5d6c.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a5d72.  v1:= temp;
  #L2a5d74.  if v0 >= v1 then goto L2a5d92;
  #L2a5d78.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a5d7e.  v0:= temp;
  #L2a5d80.  call temp:= `copyOf`(v6, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L2a5d86.  v6:= temp @kind object;
  #L2a5d88.  v0:= "copyOf(this, newSize)" @kind object;
  #L2a5d8c.  call `checkNotNullExpressionValue`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2a5d92.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a5d98.  v0:= temp;
  #L2a5d9a.  v1:= v5.`kotlin.collections.RingBuffer.startIndex` @type ^`int`;
  #L2a5d9e.  v2:= 0I;
  #L2a5da0.  v3:= 0I;
  #L2a5da2.  if v3 >= v0 then goto L2a5dc4;
  #L2a5da6.  v4:= v5.`kotlin.collections.RingBuffer.capacity` @type ^`int`;
  #L2a5daa.  if v1 >= v4 then goto L2a5dc4;
  #L2a5dae.  v4:= v5.`kotlin.collections.RingBuffer.buffer` @type ^`java.lang.Object`[] @kind object;
  #L2a5db2.  v4:= v4[v1] @kind object;
  #L2a5db6.  v6[v3]:= v4 @kind object;
  #L2a5dba.  v3:= v3 + 1;
  #L2a5dbe.  v1:= v1 + 1;
  #L2a5dc2.  goto L2a5da2;
  #L2a5dc4.  if v3 >= v0 then goto L2a5dde;
  #L2a5dc8.  v1:= v5.`kotlin.collections.RingBuffer.buffer` @type ^`java.lang.Object`[] @kind object;
  #L2a5dcc.  v1:= v1[v2] @kind object;
  #L2a5dd0.  v6[v3]:= v1 @kind object;
  #L2a5dd4.  v3:= v3 + 1;
  #L2a5dd8.  v2:= v2 + 1;
  #L2a5ddc.  goto L2a5dc4;
  #L2a5dde.  v0:= length @variable v6;
  #L2a5de0.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a5de6.  v1:= temp;
  #L2a5de8.  if v0 <= v1 then goto L2a5dfa;
  #L2a5dec.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L2a5df2.  v0:= temp;
  #L2a5df4.  v1:= 0I;
  #L2a5df6.  v6[v0]:= v1 @kind object;
  #L2a5dfa.  return v6 @kind object;
}
