record `kotlin.SafePublicationLazyImpl` @kind class @AccessFlag FINAL extends `kotlin.Lazy` @kind interface, `java.io.Serializable` @kind interface {
  `java.lang.Object` `kotlin.SafePublicationLazyImpl._value` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `kotlin.SafePublicationLazyImpl.final` @AccessFlag PRIVATE_FINAL;
  `kotlin.jvm.functions.Function0` `kotlin.SafePublicationLazyImpl.initializer` @AccessFlag PRIVATE_VOLATILE;
}
global `kotlin.SafePublicationLazyImpl$Companion` `@@kotlin.SafePublicationLazyImpl.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlin.SafePublicationLazyImpl.valueUpdater` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/SafePublicationLazyImpl;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L298cf4.  v0:= new `kotlin.SafePublicationLazyImpl$Companion`;
  #L298cf8.  v1:= 0I;
  #L298cfa.  call `<init>`(v0, v1) @signature `Lkotlin/SafePublicationLazyImpl$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L298d00.  `@@kotlin.SafePublicationLazyImpl.Companion` @type ^`kotlin.SafePublicationLazyImpl$Companion` := v0 @kind object;
  #L298d04.  v0:= constclass @type ^`kotlin.SafePublicationLazyImpl` @kind object;
  #L298d08.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L298d0c.  v2:= "_value" @kind object;
  #L298d10.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L298d16.  v0:= temp @kind object;
  #L298d18.  `@@kotlin.SafePublicationLazyImpl.valueUpdater` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L298d1c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.SafePublicationLazyImpl` v1 @kind this, `kotlin.jvm.functions.Function0` v2 @kind object) @signature `Lkotlin/SafePublicationLazyImpl;.<init>:(Lkotlin/jvm/functions/Function0;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L298d30.  v0:= "initializer" @kind object;
  #L298d34.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L298d3a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L298d40.  v1.`kotlin.SafePublicationLazyImpl.initializer` @type ^`kotlin.jvm.functions.Function0` := v2 @kind object;
  #L298d44.  v2:= `@@kotlin.UNINITIALIZED_VALUE.INSTANCE` @type ^`kotlin.UNINITIALIZED_VALUE` @kind object;
  #L298d48.  v1.`kotlin.SafePublicationLazyImpl._value` @type ^`java.lang.Object` := v2 @kind object;
  #L298d4c.  v1.`kotlin.SafePublicationLazyImpl.final` @type ^`java.lang.Object` := v2 @kind object;
  #L298d50.  return @kind void;
}
procedure `java.lang.Object` `writeReplace`(`kotlin.SafePublicationLazyImpl` v2 @kind this) @signature `Lkotlin/SafePublicationLazyImpl;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L298c9c.  v0:= new `kotlin.InitializedLazyImpl`;
  #L298ca0.  call temp:= `getValue`(v2) @signature `Lkotlin/SafePublicationLazyImpl;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L298ca6.  v1:= temp @kind object;
  #L298ca8.  call `<init>`(v0, v1) @signature `Lkotlin/InitializedLazyImpl;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L298cae.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`kotlin.SafePublicationLazyImpl` v3 @kind this) @signature `Lkotlin/SafePublicationLazyImpl;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L298c50.  v0:= v3.`kotlin.SafePublicationLazyImpl._value` @type ^`java.lang.Object` @kind object;
  #L298c54.  v1:= `@@kotlin.UNINITIALIZED_VALUE.INSTANCE` @type ^`kotlin.UNINITIALIZED_VALUE` @kind object;
  #L298c58.  if v0 == v1 then goto L298c5e;
  #L298c5c.  return v0 @kind object;
  #L298c5e.  v0:= v3.`kotlin.SafePublicationLazyImpl.initializer` @type ^`kotlin.jvm.functions.Function0` @kind object;
  #L298c62.  if v0 == 0 then goto L298c86;
  #L298c66.  call temp:= `invoke`(v0) @signature `Lkotlin/jvm/functions/Function0;.invoke:()Ljava/lang/Object;` @kind interface;
  #L298c6c.  v0:= temp @kind object;
  #L298c6e.  v2:= `@@kotlin.SafePublicationLazyImpl.valueUpdater` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L298c72.  call temp:= `compareAndSet`(v2, v3, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L298c78.  v1:= temp;
  #L298c7a.  if v1 == 0 then goto L298c86;
  #L298c7e.  v1:= 0I;
  #L298c80.  v3.`kotlin.SafePublicationLazyImpl.initializer` @type ^`kotlin.jvm.functions.Function0` := v1 @kind object;
  #L298c84.  return v0 @kind object;
  #L298c86.  v0:= v3.`kotlin.SafePublicationLazyImpl._value` @type ^`java.lang.Object` @kind object;
  #L298c8a.  return v0 @kind object;
}
procedure `boolean` `isInitialized`(`kotlin.SafePublicationLazyImpl` v2 @kind this) @signature `Lkotlin/SafePublicationLazyImpl;.isInitialized:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L298c2c.  v0:= v2.`kotlin.SafePublicationLazyImpl._value` @type ^`java.lang.Object` @kind object;
  #L298c30.  v1:= `@@kotlin.UNINITIALIZED_VALUE.INSTANCE` @type ^`kotlin.UNINITIALIZED_VALUE` @kind object;
  #L298c34.  if v0 == v1 then goto L298c3c;
  #L298c38.  v0:= 1I;
  #L298c3a.  goto L298c3e;
  #L298c3c.  v0:= 0I;
  #L298c3e.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.SafePublicationLazyImpl` v1 @kind this) @signature `Lkotlin/SafePublicationLazyImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L298cc0.  call temp:= `isInitialized`(v1) @signature `Lkotlin/SafePublicationLazyImpl;.isInitialized:()Z` @kind virtual;
  #L298cc6.  v0:= temp;
  #L298cc8.  if v0 == 0 then goto L298cde;
  #L298ccc.  call temp:= `getValue`(v1) @signature `Lkotlin/SafePublicationLazyImpl;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L298cd2.  v0:= temp @kind object;
  #L298cd4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L298cda.  v0:= temp @kind object;
  #L298cdc.  goto L298ce2;
  #L298cde.  v0:= "Lazy value not initialized yet." @kind object;
  #L298ce2.  return v0 @kind object;
}
