record `kotlin.concurrent.LocksKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.Object` `read`(`java.util.concurrent.locks.ReentrantReadWriteLock` v1 @kind object, `kotlin.jvm.functions.Function0` v2 @kind object) @signature `Lkotlin/concurrent/LocksKt;.read:(Ljava/util/concurrent/locks/ReentrantReadWriteLock;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;

  #L2ac9b8.  v0:= "<this>" @kind object;
  #L2ac9bc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ac9c2.  v0:= "action" @kind object;
  #L2ac9c6.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2ac9cc.  call temp:= `readLock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;` @kind virtual;
  #L2ac9d2.  v1:= temp @kind object;
  #L2ac9d4.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L2ac9da.  v0:= 1I;
  #L2ac9dc.  call temp:= `invoke`(v2) @signature `Lkotlin/jvm/functions/Function0;.invoke:()Ljava/lang/Object;` @kind interface;
  #L2ac9e2.  v2:= temp @kind object;
  #L2ac9e4.  call `finallyStart`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L2ac9ea.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L2ac9f0.  call `finallyEnd`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L2ac9f6.  return v2 @kind object;
  #L2ac9f8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ac9fa.  call `finallyStart`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L2aca00.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L2aca06.  call `finallyEnd`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L2aca0c.  throw v2;
  catch `java.lang.Throwable` @[L2ac9dc..L2ac9e4] goto L2ac9f8;
}
procedure `java.lang.Object` `withLock`(`java.util.concurrent.locks.Lock` v1 @kind object, `kotlin.jvm.functions.Function0` v2 @kind object) @signature `Lkotlin/concurrent/LocksKt;.withLock:(Ljava/util/concurrent/locks/Lock;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;

  #L2aca2c.  v0:= "<this>" @kind object;
  #L2aca30.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2aca36.  v0:= "action" @kind object;
  #L2aca3a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2aca40.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L2aca46.  v0:= 1I;
  #L2aca48.  call temp:= `invoke`(v2) @signature `Lkotlin/jvm/functions/Function0;.invoke:()Ljava/lang/Object;` @kind interface;
  #L2aca4e.  v2:= temp @kind object;
  #L2aca50.  call `finallyStart`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L2aca56.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2aca5c.  call `finallyEnd`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L2aca62.  return v2 @kind object;
  #L2aca64.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2aca66.  call `finallyStart`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L2aca6c.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L2aca72.  call `finallyEnd`(v0) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L2aca78.  throw v2;
  catch `java.lang.Throwable` @[L2aca48..L2aca50] goto L2aca64;
}
procedure `java.lang.Object` `write`(`java.util.concurrent.locks.ReentrantReadWriteLock` v4 @kind object, `kotlin.jvm.functions.Function0` v5 @kind object) @signature `Lkotlin/concurrent/LocksKt;.write:(Ljava/util/concurrent/locks/ReentrantReadWriteLock;Lkotlin/jvm/functions/Function0;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2aca98.  v0:= "<this>" @kind object;
  #L2aca9c.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2acaa2.  v0:= "action" @kind object;
  #L2acaa6.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2acaac.  call temp:= `readLock`(v4) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;` @kind virtual;
  #L2acab2.  v0:= temp @kind object;
  #L2acab4.  call temp:= `getWriteHoldCount`(v4) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.getWriteHoldCount:()I` @kind virtual;
  #L2acaba.  v1:= temp;
  #L2acabc.  v2:= 0I;
  #L2acabe.  if v1 != 0 then goto L2acacc;
  #L2acac2.  call temp:= `getReadHoldCount`(v4) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.getReadHoldCount:()I` @kind virtual;
  #L2acac8.  v1:= temp;
  #L2acaca.  goto L2acace;
  #L2acacc.  v1:= 0I;
  #L2acace.  v3:= 0I;
  #L2acad0.  if v3 >= v1 then goto L2acae0;
  #L2acad4.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L2acada.  v3:= v3 + 1;
  #L2acade.  goto L2acad0;
  #L2acae0.  call temp:= `writeLock`(v4) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;` @kind virtual;
  #L2acae6.  v4:= temp @kind object;
  #L2acae8.  call `lock`(v4) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.lock:()V` @kind virtual;
  #L2acaee.  v3:= 1I;
  #L2acaf0.  call temp:= `invoke`(v5) @signature `Lkotlin/jvm/functions/Function0;.invoke:()Ljava/lang/Object;` @kind interface;
  #L2acaf6.  v5:= temp @kind object;
  #L2acaf8.  call `finallyStart`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L2acafe.  if v2 >= v1 then goto L2acb0e;
  #L2acb02.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L2acb08.  v2:= v2 + 1;
  #L2acb0c.  goto L2acafe;
  #L2acb0e.  call `unlock`(v4) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L2acb14.  call `finallyEnd`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L2acb1a.  return v5 @kind object;
  #L2acb1c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2acb1e.  call `finallyStart`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyStart:(I)V` @kind static;
  #L2acb24.  if v2 >= v1 then goto L2acb34;
  #L2acb28.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L2acb2e.  v2:= v2 + 1;
  #L2acb32.  goto L2acb24;
  #L2acb34.  call `unlock`(v4) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L2acb3a.  call `finallyEnd`(v3) @signature `Lkotlin/jvm/internal/InlineMarker;.finallyEnd:(I)V` @kind static;
  #L2acb40.  goto L2acb44;
  #L2acb42.  throw v5;
  #L2acb44.  goto L2acb42;
  catch `java.lang.Throwable` @[L2acaf0..L2acaf8] goto L2acb1c;
}
