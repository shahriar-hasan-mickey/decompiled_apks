record `kotlin.time.MonotonicTimeSource` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.time.AbstractLongTimeSource` @kind class, `kotlin.time.TimeSource` @kind interface {
}
global `kotlin.time.MonotonicTimeSource` `@@kotlin.time.MonotonicTimeSource.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/time/MonotonicTimeSource;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2c9368.  v0:= new `kotlin.time.MonotonicTimeSource`;
  #L2c936c.  call `<init>`(v0) @signature `Lkotlin/time/MonotonicTimeSource;.<init>:()V` @kind direct;
  #L2c9372.  `@@kotlin.time.MonotonicTimeSource.INSTANCE` @type ^`kotlin.time.MonotonicTimeSource` := v0 @kind object;
  #L2c9376.  return @kind void;
}
procedure `void` `<init>`(`kotlin.time.MonotonicTimeSource` v1 @kind this) @signature `Lkotlin/time/MonotonicTimeSource;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L2c9388.  v0:= `@@kotlin.time.DurationUnit.NANOSECONDS` @type ^`kotlin.time.DurationUnit` @kind object;
  #L2c938c.  call `<init>`(v1, v0) @signature `Lkotlin/time/AbstractLongTimeSource;.<init>:(Lkotlin/time/DurationUnit;)V` @kind direct;
  #L2c9392.  return @kind void;
}
procedure `long` `read`(`kotlin.time.MonotonicTimeSource` v2 @kind this) @signature `Lkotlin/time/MonotonicTimeSource;.read:()J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2c934c.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L2c9352.  v0:= temp @kind wide;
  #L2c9354.  return v0 @kind wide;
}
procedure `java.lang.String` `toString`(`kotlin.time.MonotonicTimeSource` v1 @kind this) @signature `Lkotlin/time/MonotonicTimeSource;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c9334.  v0:= "TimeSource(System.nanoTime())" @kind object;
  #L2c9338.  return v0 @kind object;
}
