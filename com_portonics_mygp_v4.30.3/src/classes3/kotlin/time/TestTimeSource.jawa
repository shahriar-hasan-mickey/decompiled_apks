record `kotlin.time.TestTimeSource` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.time.AbstractLongTimeSource` @kind class {
  `long` `kotlin.time.TestTimeSource.reading` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.time.TestTimeSource` v1 @kind this) @signature `Lkotlin/time/TestTimeSource;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2c93bc.  v0:= `@@kotlin.time.DurationUnit.NANOSECONDS` @type ^`kotlin.time.DurationUnit` @kind object;
  #L2c93c0.  call `<init>`(v1, v0) @signature `Lkotlin/time/AbstractLongTimeSource;.<init>:(Lkotlin/time/DurationUnit;)V` @kind direct;
  #L2c93c6.  return @kind void;
}
procedure `void` `overflow-LRDsOJo`(`kotlin.time.TestTimeSource` v4 @kind this, `long` v5 ) @signature `Lkotlin/time/TestTimeSource;.overflow-LRDsOJo:(J)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c93d8.  v0:= new `java.lang.IllegalStateException`;
  #L2c93dc.  v1:= new `java.lang.StringBuilder`;
  #L2c93e0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c93e6.  v2:= "TestTimeSource will overflow if its reading " @kind object;
  #L2c93ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c93f0.  v2:= v4.`kotlin.time.TestTimeSource.reading` @type ^`long` @kind wide;
  #L2c93f4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c93fa.  v2:= "ns is advanced by " @kind object;
  #L2c93fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c9404.  call temp:= `toString-impl`(v5) @signature `Lkotlin/time/Duration;.toString-impl:(J)Ljava/lang/String;` @kind static;
  #L2c940a.  v5:= temp @kind object;
  #L2c940c.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c9412.  v5:= 46I;
  #L2c9416.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c941c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c9422.  v5:= temp @kind object;
  #L2c9424.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c942a.  throw v0;
}
procedure `void` `plusAssign-LRDsOJo`(`kotlin.time.TestTimeSource` v9 @kind this, `long` v10 ) @signature `Lkotlin/time/TestTimeSource;.plusAssign-LRDsOJo:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2c943c.  call temp:= `getUnit`(v9) @signature `Lkotlin/time/AbstractLongTimeSource;.getUnit:()Lkotlin/time/DurationUnit;` @kind virtual;
  #L2c9442.  v0:= temp @kind object;
  #L2c9444.  call temp:= `toLong-impl`(v10, v0) @signature `Lkotlin/time/Duration;.toLong-impl:(JLkotlin/time/DurationUnit;)J` @kind static;
  #L2c944a.  v0:= temp @kind wide;
  #L2c944c.  v2:= -9223372036854775808L;
  #L2c9450.  v4:= lcmp(v0, v2);
  #L2c9454.  if v4 == 0 then goto L2c9494;
  #L2c9458.  v2:= 9223372036854775807L;
  #L2c9462.  v4:= lcmp(v0, v2);
  #L2c9466.  if v4 == 0 then goto L2c9494;
  #L2c946a.  v2:= v9.`kotlin.time.TestTimeSource.reading` @type ^`long` @kind wide;
  #L2c946e.  v4:= v2 + v0 @kind long;
  #L2c9472.  v0:= v0 ^~ v2 @kind long;
  #L2c9474.  v6:= 0L;
  #L2c9478.  v8:= lcmp(v0, v6);
  #L2c947c.  if v8 < 0 then goto L2c94d2;
  #L2c9480.  v0:= v2 ^~ v4 @kind long;
  #L2c9484.  v2:= lcmp(v0, v6);
  #L2c9488.  if v2 >= 0 then goto L2c94d2;
  #L2c948c.  call `overflow-LRDsOJo`(v9, v10) @signature `Lkotlin/time/TestTimeSource;.overflow-LRDsOJo:(J)V` @kind direct;
  #L2c9492.  goto L2c94d2;
  #L2c9494.  call temp:= `getUnit`(v9) @signature `Lkotlin/time/AbstractLongTimeSource;.getUnit:()Lkotlin/time/DurationUnit;` @kind virtual;
  #L2c949a.  v0:= temp @kind object;
  #L2c949c.  call temp:= `toDouble-impl`(v10, v0) @signature `Lkotlin/time/Duration;.toDouble-impl:(JLkotlin/time/DurationUnit;)D` @kind static;
  #L2c94a2.  v0:= temp @kind wide;
  #L2c94a4.  v2:= v9.`kotlin.time.TestTimeSource.reading` @type ^`long` @kind wide;
  #L2c94a8.  v2:= (`double`) v2 @kind l2d;
  #L2c94aa.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2c94b0.  v2:= v2 + v0 @kind double;
  #L2c94b2.  v0:= 9.223372036854776E18D;
  #L2c94b6.  v4:= dcmpl(v2, v0);
  #L2c94ba.  if v4 > 0 then goto L2c94ca;
  #L2c94be.  v0:= -9.223372036854776E18D;
  #L2c94c2.  v4:= dcmpg(v2, v0);
  #L2c94c6.  if v4 >= 0 then goto L2c94d0;
  #L2c94ca.  call `overflow-LRDsOJo`(v9, v10) @signature `Lkotlin/time/TestTimeSource;.overflow-LRDsOJo:(J)V` @kind direct;
  #L2c94d0.  v4:= (`long`) v2 @kind d2l;
  #L2c94d2.  v9.`kotlin.time.TestTimeSource.reading` @type ^`long` := v4 @kind wide;
  #L2c94d6.  return @kind void;
}
procedure `long` `read`(`kotlin.time.TestTimeSource` v2 @kind this) @signature `Lkotlin/time/TestTimeSource;.read:()J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2c93a4.  v0:= v2.`kotlin.time.TestTimeSource.reading` @type ^`long` @kind wide;
  #L2c93a8.  return v0 @kind wide;
}
