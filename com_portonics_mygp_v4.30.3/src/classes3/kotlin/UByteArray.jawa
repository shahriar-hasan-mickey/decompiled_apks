record `kotlin.UByteArray` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Collection` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `byte`[] `kotlin.UByteArray.storage` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.UByteArray` v0 @kind this, `byte`[] v1 @kind object) @signature `Lkotlin/UByteArray;.<init>:([B)V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L299b74.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L299b7a.  v0.`kotlin.UByteArray.storage` @type ^`byte`[] := v1 @kind object;
  #L299b7e.  return @kind void;
}
procedure `kotlin.UByteArray` `box-impl`(`byte`[] v1 @kind object) @signature `Lkotlin/UByteArray;.box-impl:([B)Lkotlin/UByteArray;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L299b58.  v0:= new `kotlin.UByteArray`;
  #L299b5c.  call `<init>`(v0, v1) @signature `Lkotlin/UByteArray;.<init>:([B)V` @kind direct;
  #L299b62.  return v0 @kind object;
}
procedure `byte`[] `constructor-impl`(`int` v0 ) @signature `Lkotlin/UByteArray;.constructor-impl:(I)[B` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2999b0.  v0:= new `byte`[v0];
  #L2999b4.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UByteArray;.constructor-impl:([B)[B` @kind static;
  #L2999ba.  v0:= temp @kind object;
  #L2999bc.  return v0 @kind object;
}
procedure `byte`[] `constructor-impl`(`byte`[] v1 @kind object) @signature `Lkotlin/UByteArray;.constructor-impl:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L299994.  v0:= "storage" @kind object;
  #L299998.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29999e.  return v1 @kind object;
}
procedure `boolean` `contains-7apg3OU`(`byte`[] v0 @kind object, `byte` v1 ) @signature `Lkotlin/UByteArray;.contains-7apg3OU:([BB)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2997a0.  call temp:= `contains`(v0, v1) @signature `Lkotlin/collections/ArraysKt;.contains:([BB)Z` @kind static;
  #L2997a6.  v0:= temp;
  #L2997a8.  return v0;
}
procedure `boolean` `containsAll-impl`(`byte`[] v4 @kind object, `java.util.Collection` v5 @kind object) @signature `Lkotlin/UByteArray;.containsAll-impl:([BLjava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2997e4.  v0:= "elements" @kind object;
  #L2997e8.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2997ee.  call temp:= `isEmpty`(v5) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L2997f4.  v0:= temp;
  #L2997f6.  v1:= 0I;
  #L2997f8.  v2:= 1I;
  #L2997fa.  if v0 == 0 then goto L299802;
  #L2997fe.  v1:= 1I;
  #L299800.  goto L299848;
  #L299802.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L299808.  v5:= temp @kind object;
  #L29980a.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L299810.  v0:= temp;
  #L299812.  if v0 == 0 then goto L2997fe;
  #L299816.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29981c.  v0:= temp @kind object;
  #L29981e.  v3:= instanceof @variable v0 @type ^`kotlin.UByte` @kind boolean;
  #L299822.  if v3 == 0 then goto L299842;
  #L299826.  v0:= (`kotlin.UByte`) v0 @kind object;
  #L29982a.  call temp:= `unbox-impl`(v0) @signature `Lkotlin/UByte;.unbox-impl:()B` @kind virtual;
  #L299830.  v0:= temp;
  #L299832.  call temp:= `contains`(v4, v0) @signature `Lkotlin/collections/ArraysKt;.contains:([BB)Z` @kind static;
  #L299838.  v0:= temp;
  #L29983a.  if v0 == 0 then goto L299842;
  #L29983e.  v0:= 1I;
  #L299840.  goto L299844;
  #L299842.  v0:= 0I;
  #L299844.  if v0 != 0 then goto L29980a;
  #L299848.  return v1;
}
procedure `boolean` `equals-impl`(`byte`[] v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/UByteArray;.equals-impl:([BLjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L29987c.  v0:= instanceof @variable v3 @type ^`kotlin.UByteArray` @kind boolean;
  #L299880.  v1:= 0I;
  #L299882.  if v0 != 0 then goto L299888;
  #L299886.  return v1;
  #L299888.  v3:= (`kotlin.UByteArray`) v3 @kind object;
  #L29988c.  call temp:= `unbox-impl`(v3) @signature `Lkotlin/UByteArray;.unbox-impl:()[B` @kind virtual;
  #L299892.  v3:= temp @kind object;
  #L299894.  call temp:= `areEqual`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L29989a.  v2:= temp;
  #L29989c.  if v2 != 0 then goto L2998a2;
  #L2998a0.  return v1;
  #L2998a2.  v2:= 1I;
  #L2998a4.  return v2;
}
procedure `boolean` `equals-impl0`(`byte`[] v0 @kind object, `byte`[] v1 @kind object) @signature `Lkotlin/UByteArray;.equals-impl0:([B[B)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L2998b8.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2998be.  v0:= temp;
  #L2998c0.  return v0;
}
procedure `byte` `get-w2LRezQ`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lkotlin/UByteArray;.get-w2LRezQ:([BI)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L299974.  v0:= v0[v1] @kind byte;
  #L299978.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UByte;.constructor-impl:(B)B` @kind static;
  #L29997e.  v0:= temp;
  #L299980.  return v0;
}
procedure `int` `getSize-impl`(`byte`[] v0 @kind object) @signature `Lkotlin/UByteArray;.getSize-impl:([B)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L299a08.  v0:= length @variable v0;
  #L299a0a.  return v0;
}
procedure `void` `getStorage$annotations`() @signature `Lkotlin/UByteArray;.getStorage$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L299bb0.  return @kind void;
}
procedure `int` `hashCode-impl`(`byte`[] v0 @kind object) @signature `Lkotlin/UByteArray;.hashCode-impl:([B)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L299a3c.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L299a42.  v0:= temp;
  #L299a44.  return v0;
}
procedure `boolean` `isEmpty-impl`(`byte`[] v0 @kind object) @signature `Lkotlin/UByteArray;.isEmpty-impl:([B)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2998f4.  v0:= length @variable v0;
  #L2998f6.  if v0 != 0 then goto L2998fe;
  #L2998fa.  v0:= 1I;
  #L2998fc.  goto L299900;
  #L2998fe.  v0:= 0I;
  #L299900.  return v0;
}
procedure `java.util.Iterator` `iterator-impl`(`byte`[] v1 @kind object) @signature `Lkotlin/UByteArray;.iterator-impl:([B)Ljava/util/Iterator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L299b3c.  v0:= new `kotlin.UByteArray$Iterator`;
  #L299b40.  call `<init>`(v0, v1) @signature `Lkotlin/UByteArray$Iterator;.<init>:([B)V` @kind direct;
  #L299b46.  return v0 @kind object;
}
procedure `void` `set-VurrAj0`(`byte`[] v0 @kind object, `int` v1 , `byte` v2 ) @signature `Lkotlin/UByteArray;.set-VurrAj0:([BIB)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L299bc4.  v0[v1]:= v2 @kind byte;
  #L299bc8.  return @kind void;
}
procedure `java.lang.String` `toString-impl`(`byte`[] v2 @kind object) @signature `Lkotlin/UByteArray;.toString-impl:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L299ad4.  v0:= new `java.lang.StringBuilder`;
  #L299ad8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L299ade.  v1:= "UByteArray(storage=" @kind object;
  #L299ae2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L299ae8.  call temp:= `toString`(v2) @signature `Ljava/util/Arrays;.toString:([B)Ljava/lang/String;` @kind static;
  #L299aee.  v2:= temp @kind object;
  #L299af0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L299af6.  v2:= 41I;
  #L299afa.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L299b00.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L299b06.  v2:= temp @kind object;
  #L299b08.  return v2 @kind object;
}
procedure `boolean` `add`(`kotlin.UByteArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UByteArray;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2996ec.  v2:= new `java.lang.UnsupportedOperationException`;
  #L2996f0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L2996f4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2996fa.  throw v2;
}
procedure `boolean` `add-7apg3OU`(`kotlin.UByteArray` v1 @kind this, `byte` v2 ) @signature `Lkotlin/UByteArray;.add-7apg3OU:(B)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29970c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L299710.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L299714.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29971a.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.UByteArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UByteArray;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29972c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L299730.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L299734.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29973a.  throw v2;
}
procedure `void` `clear`(`kotlin.UByteArray` v2 @kind this) @signature `Lkotlin/UByteArray;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L299b90.  v0:= new `java.lang.UnsupportedOperationException`;
  #L299b94.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L299b98.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L299b9e.  throw v0;
}
procedure `boolean` `contains`(`kotlin.UByteArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UByteArray;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L29974c.  v0:= instanceof @variable v2 @type ^`kotlin.UByte` @kind boolean;
  #L299750.  if v0 != 0 then goto L299758;
  #L299754.  v2:= 0I;
  #L299756.  return v2;
  #L299758.  v2:= (`kotlin.UByte`) v2 @kind object;
  #L29975c.  call temp:= `unbox-impl`(v2) @signature `Lkotlin/UByte;.unbox-impl:()B` @kind virtual;
  #L299762.  v2:= temp;
  #L299764.  call temp:= `contains-7apg3OU`(v1, v2) @signature `Lkotlin/UByteArray;.contains-7apg3OU:(B)Z` @kind virtual;
  #L29976a.  v2:= temp;
  #L29976c.  return v2;
}
procedure `boolean` `contains-7apg3OU`(`kotlin.UByteArray` v1 @kind this, `byte` v2 ) @signature `Lkotlin/UByteArray;.contains-7apg3OU:(B)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L299780.  v0:= v1.`kotlin.UByteArray.storage` @type ^`byte`[] @kind object;
  #L299784.  call temp:= `contains-7apg3OU`(v0, v2) @signature `Lkotlin/UByteArray;.contains-7apg3OU:([BB)Z` @kind static;
  #L29978a.  v2:= temp;
  #L29978c.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.UByteArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UByteArray;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2997bc.  v0:= "elements" @kind object;
  #L2997c0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2997c6.  v0:= v1.`kotlin.UByteArray.storage` @type ^`byte`[] @kind object;
  #L2997ca.  call temp:= `containsAll-impl`(v0, v2) @signature `Lkotlin/UByteArray;.containsAll-impl:([BLjava/util/Collection;)Z` @kind static;
  #L2997d0.  v2:= temp;
  #L2997d2.  return v2;
}
procedure `boolean` `equals`(`kotlin.UByteArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UByteArray;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29985c.  v0:= v1.`kotlin.UByteArray.storage` @type ^`byte`[] @kind object;
  #L299860.  call temp:= `equals-impl`(v0, v2) @signature `Lkotlin/UByteArray;.equals-impl:([BLjava/lang/Object;)Z` @kind static;
  #L299866.  v2:= temp;
  #L299868.  return v2;
}
procedure `int` `getSize`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2999e8.  v0:= v1.`kotlin.UByteArray.storage` @type ^`byte`[] @kind object;
  #L2999ec.  call temp:= `getSize-impl`(v0) @signature `Lkotlin/UByteArray;.getSize-impl:([B)I` @kind static;
  #L2999f2.  v0:= temp;
  #L2999f4.  return v0;
}
procedure `int` `hashCode`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L299a1c.  v0:= v1.`kotlin.UByteArray.storage` @type ^`byte`[] @kind object;
  #L299a20.  call temp:= `hashCode-impl`(v0) @signature `Lkotlin/UByteArray;.hashCode-impl:([B)I` @kind static;
  #L299a26.  v0:= temp;
  #L299a28.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2998d4.  v0:= v1.`kotlin.UByteArray.storage` @type ^`byte`[] @kind object;
  #L2998d8.  call temp:= `isEmpty-impl`(v0) @signature `Lkotlin/UByteArray;.isEmpty-impl:([B)Z` @kind static;
  #L2998de.  v0:= temp;
  #L2998e0.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L299b1c.  v0:= v1.`kotlin.UByteArray.storage` @type ^`byte`[] @kind object;
  #L299b20.  call temp:= `iterator-impl`(v0) @signature `Lkotlin/UByteArray;.iterator-impl:([B)Ljava/util/Iterator;` @kind static;
  #L299b26.  v0:= temp @kind object;
  #L299b28.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.UByteArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UByteArray;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L299914.  v2:= new `java.lang.UnsupportedOperationException`;
  #L299918.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29991c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L299922.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.UByteArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UByteArray;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L299934.  v2:= new `java.lang.UnsupportedOperationException`;
  #L299938.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29993c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L299942.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.UByteArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UByteArray;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L299954.  v2:= new `java.lang.UnsupportedOperationException`;
  #L299958.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29995c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L299962.  throw v2;
}
procedure `int` `size`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.size:()I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L299a58.  call temp:= `getSize`(v1) @signature `Lkotlin/UByteArray;.getSize:()I` @kind virtual;
  #L299a5e.  v0:= temp;
  #L299a60.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L299a74.  call temp:= `toArray`(v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L299a7a.  v0:= temp @kind object;
  #L299a7c.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.UByteArray` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/UByteArray;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L299a90.  v0:= "array" @kind object;
  #L299a94.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L299a9a.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L299aa0.  v2:= temp @kind object;
  #L299aa2.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L299ab4.  v0:= v1.`kotlin.UByteArray.storage` @type ^`byte`[] @kind object;
  #L299ab8.  call temp:= `toString-impl`(v0) @signature `Lkotlin/UByteArray;.toString-impl:([B)Ljava/lang/String;` @kind static;
  #L299abe.  v0:= temp @kind object;
  #L299ac0.  return v0 @kind object;
}
procedure `byte`[] `unbox-impl`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.unbox-impl:()[B` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L2999d0.  v0:= v1.`kotlin.UByteArray.storage` @type ^`byte`[] @kind object;
  #L2999d4.  return v0 @kind object;
}
