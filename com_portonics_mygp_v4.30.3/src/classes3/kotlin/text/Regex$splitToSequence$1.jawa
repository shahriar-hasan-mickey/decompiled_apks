record `kotlin.text.Regex$splitToSequence$1` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.RestrictedSuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `java.lang.CharSequence` `kotlin.text.Regex$splitToSequence$1.$input` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlin.text.Regex$splitToSequence$1.$limit` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlin.text.Regex$splitToSequence$1.I$0` @AccessFlag ;
  `java.lang.Object` `kotlin.text.Regex$splitToSequence$1.L$0` @AccessFlag PRIVATE_SYNTHETIC;
  `java.lang.Object` `kotlin.text.Regex$splitToSequence$1.L$1` @AccessFlag ;
  `int` `kotlin.text.Regex$splitToSequence$1.label` @AccessFlag ;
  `kotlin.text.Regex` `kotlin.text.Regex$splitToSequence$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.text.Regex$splitToSequence$1` v0 @kind this, `kotlin.text.Regex` v1 @kind object, `java.lang.CharSequence` v2 @kind object, `int` v3 , `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlin/text/Regex$splitToSequence$1;.<init>:(Lkotlin/text/Regex;Ljava/lang/CharSequence;ILkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c64c4.  v0.`kotlin.text.Regex$splitToSequence$1.this$0` @type ^`kotlin.text.Regex` := v1 @kind object;
  #L2c64c8.  v0.`kotlin.text.Regex$splitToSequence$1.$input` @type ^`java.lang.CharSequence` := v2 @kind object;
  #L2c64cc.  v0.`kotlin.text.Regex$splitToSequence$1.$limit` @type ^`int` := v3;
  #L2c64d0.  v1:= 2I;
  #L2c64d2.  call `<init>`(v0, v1, v4) @signature `Lkotlin/coroutines/jvm/internal/RestrictedSuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L2c64d8.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlin.text.Regex$splitToSequence$1` v4 @kind this, `java.lang.Object` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlin/text/Regex$splitToSequence$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2c6498.  v0:= new `kotlin.text.Regex$splitToSequence$1`;
  #L2c649c.  v1:= v4.`kotlin.text.Regex$splitToSequence$1.this$0` @type ^`kotlin.text.Regex` @kind object;
  #L2c64a0.  v2:= v4.`kotlin.text.Regex$splitToSequence$1.$input` @type ^`java.lang.CharSequence` @kind object;
  #L2c64a4.  v3:= v4.`kotlin.text.Regex$splitToSequence$1.$limit` @type ^`int`;
  #L2c64a8.  call `<init>`(v0, v1, v2, v3, v6) @signature `Lkotlin/text/Regex$splitToSequence$1;.<init>:(Lkotlin/text/Regex;Ljava/lang/CharSequence;ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L2c64ae.  v0.`kotlin.text.Regex$splitToSequence$1.L$0` @type ^`java.lang.Object` := v5 @kind object;
  #L2c64b2.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.text.Regex$splitToSequence$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/text/Regex$splitToSequence$1;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2c62d0.  v1:= (`kotlin.sequences.SequenceScope`) v1 @kind object;
  #L2c62d4.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L2c62d8.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/text/Regex$splitToSequence$1;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2c62de.  v1:= temp @kind object;
  #L2c62e0.  return v1 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.text.Regex$splitToSequence$1` v0 @kind this, `kotlin.sequences.SequenceScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/text/Regex$splitToSequence$1;.invoke:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c62f4.  call temp:= `create`(v0, v1, v2) @signature `Lkotlin/text/Regex$splitToSequence$1;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L2c62fa.  v1:= temp @kind object;
  #L2c62fc.  v1:= (`kotlin.text.Regex$splitToSequence$1`) v1 @kind object;
  #L2c6300.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2c6304.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlin/text/Regex$splitToSequence$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2c630a.  v1:= temp @kind object;
  #L2c630c.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlin.text.Regex$splitToSequence$1` v10 @kind this, `java.lang.Object` v11 @kind object) @signature `Lkotlin/text/Regex$splitToSequence$1;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2c6320.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L2c6326.  v0:= temp @kind object;
  #L2c6328.  v1:= v10.`kotlin.text.Regex$splitToSequence$1.label` @type ^`int`;
  #L2c632c.  v2:= 0I;
  #L2c632e.  v3:= 3I;
  #L2c6330.  v4:= 2I;
  #L2c6332.  v5:= 1I;
  #L2c6334.  if v1 == 0 then goto L2c638a;
  #L2c6338.  if v1 == v5 then goto L2c6380;
  #L2c633c.  if v1 == v4 then goto L2c635e;
  #L2c6340.  if v1 != v3 then goto L2c634e;
  #L2c6344.  call `throwOnFailure`(v11) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2c634a.  goto L2c645e;
  #L2c634e.  v11:= new `java.lang.IllegalStateException`;
  #L2c6352.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L2c6356.  call `<init>`(v11, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c635c.  throw v11;
  #L2c635e.  v1:= v10.`kotlin.text.Regex$splitToSequence$1.I$0` @type ^`int`;
  #L2c6362.  v2:= v10.`kotlin.text.Regex$splitToSequence$1.L$1` @type ^`java.lang.Object` @kind object;
  #L2c6366.  v2:= (`java.util.regex.Matcher`) v2 @kind object;
  #L2c636a.  v6:= v10.`kotlin.text.Regex$splitToSequence$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2c636e.  v6:= (`kotlin.sequences.SequenceScope`) v6 @kind object;
  #L2c6372.  call `throwOnFailure`(v11) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2c6378.  v7:= v10 @kind object;
  #L2c637a.  v11:= v1;
  #L2c637c.  v1:= v2 @kind object;
  #L2c637e.  goto L2c6406;
  #L2c6380.  call `throwOnFailure`(v11) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2c6386.  goto L2c6482;
  #L2c638a.  call `throwOnFailure`(v11) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L2c6390.  v11:= v10.`kotlin.text.Regex$splitToSequence$1.L$0` @type ^`java.lang.Object` @kind object;
  #L2c6394.  v11:= (`kotlin.sequences.SequenceScope`) v11 @kind object;
  #L2c6398.  v1:= v10.`kotlin.text.Regex$splitToSequence$1.this$0` @type ^`kotlin.text.Regex` @kind object;
  #L2c639c.  call temp:= `access$getNativePattern$p`(v1) @signature `Lkotlin/text/Regex;.access$getNativePattern$p:(Lkotlin/text/Regex;)Ljava/util/regex/Pattern;` @kind static;
  #L2c63a2.  v1:= temp @kind object;
  #L2c63a4.  v6:= v10.`kotlin.text.Regex$splitToSequence$1.$input` @type ^`java.lang.CharSequence` @kind object;
  #L2c63a8.  call temp:= `matcher`(v1, v6) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L2c63ae.  v1:= temp @kind object;
  #L2c63b0.  v6:= v10.`kotlin.text.Regex$splitToSequence$1.$limit` @type ^`int`;
  #L2c63b4.  if v6 == v5 then goto L2c6464;
  #L2c63b8.  call temp:= `find`(v1) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L2c63be.  v6:= temp;
  #L2c63c0.  if v6 != 0 then goto L2c63c6;
  #L2c63c4.  goto L2c6464;
  #L2c63c6.  v7:= v10 @kind object;
  #L2c63c8.  v6:= v11 @kind object;
  #L2c63ca.  v11:= 0I;
  #L2c63cc.  v8:= v7.`kotlin.text.Regex$splitToSequence$1.$input` @type ^`java.lang.CharSequence` @kind object;
  #L2c63d0.  call temp:= `start`(v1) @signature `Ljava/util/regex/Matcher;.start:()I` @kind virtual;
  #L2c63d6.  v9:= temp;
  #L2c63d8.  call temp:= `subSequence`(v8, v2, v9) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L2c63de.  v2:= temp @kind object;
  #L2c63e0.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c63e6.  v2:= temp @kind object;
  #L2c63e8.  v7.`kotlin.text.Regex$splitToSequence$1.L$0` @type ^`java.lang.Object` := v6 @kind object;
  #L2c63ec.  v7.`kotlin.text.Regex$splitToSequence$1.L$1` @type ^`java.lang.Object` := v1 @kind object;
  #L2c63f0.  v7.`kotlin.text.Regex$splitToSequence$1.I$0` @type ^`int` := v11;
  #L2c63f4.  v7.`kotlin.text.Regex$splitToSequence$1.label` @type ^`int` := v4;
  #L2c63f8.  call temp:= `yield`(v6, v2, v7) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2c63fe.  v2:= temp @kind object;
  #L2c6400.  if v2 != v0 then goto L2c6406;
  #L2c6404.  return v0 @kind object;
  #L2c6406.  call temp:= `end`(v1) @signature `Ljava/util/regex/Matcher;.end:()I` @kind virtual;
  #L2c640c.  v2:= temp;
  #L2c640e.  v11:= v11 + v5 @kind int;
  #L2c6410.  v8:= v7.`kotlin.text.Regex$splitToSequence$1.$limit` @type ^`int`;
  #L2c6414.  v8:= v8 - v5 @kind int;
  #L2c6416.  if v11 == v8 then goto L2c6426;
  #L2c641a.  call temp:= `find`(v1) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L2c6420.  v8:= temp;
  #L2c6422.  if v8 != 0 then goto L2c63cc;
  #L2c6426.  v11:= v7.`kotlin.text.Regex$splitToSequence$1.$input` @type ^`java.lang.CharSequence` @kind object;
  #L2c642a.  call temp:= `length`(v11) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2c6430.  v1:= temp;
  #L2c6432.  call temp:= `subSequence`(v11, v2, v1) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L2c6438.  v11:= temp @kind object;
  #L2c643a.  call temp:= `toString`(v11) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c6440.  v11:= temp @kind object;
  #L2c6442.  v1:= 0I;
  #L2c6444.  v7.`kotlin.text.Regex$splitToSequence$1.L$0` @type ^`java.lang.Object` := v1 @kind object;
  #L2c6448.  v7.`kotlin.text.Regex$splitToSequence$1.L$1` @type ^`java.lang.Object` := v1 @kind object;
  #L2c644c.  v7.`kotlin.text.Regex$splitToSequence$1.label` @type ^`int` := v3;
  #L2c6450.  call temp:= `yield`(v6, v11, v7) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2c6456.  v11:= temp @kind object;
  #L2c6458.  if v11 != v0 then goto L2c645e;
  #L2c645c.  return v0 @kind object;
  #L2c645e.  v11:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2c6462.  return v11 @kind object;
  #L2c6464.  v1:= v10.`kotlin.text.Regex$splitToSequence$1.$input` @type ^`java.lang.CharSequence` @kind object;
  #L2c6468.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c646e.  v1:= temp @kind object;
  #L2c6470.  v10.`kotlin.text.Regex$splitToSequence$1.label` @type ^`int` := v5;
  #L2c6474.  call temp:= `yield`(v11, v1, v10) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L2c647a.  v11:= temp @kind object;
  #L2c647c.  if v11 != v0 then goto L2c6482;
  #L2c6480.  return v0 @kind object;
  #L2c6482.  v11:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L2c6486.  return v11 @kind object;
}
