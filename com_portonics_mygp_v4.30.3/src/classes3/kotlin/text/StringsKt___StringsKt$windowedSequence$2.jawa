record `kotlin.text.StringsKt___StringsKt$windowedSequence$2` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function1` @kind interface {
  `int` `kotlin.text.StringsKt___StringsKt$windowedSequence$2.$size` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.CharSequence` `kotlin.text.StringsKt___StringsKt$windowedSequence$2.$this_windowedSequence` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function1` `kotlin.text.StringsKt___StringsKt$windowedSequence$2.$transform` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.text.StringsKt___StringsKt$windowedSequence$2` v0 @kind this, `int` v1 , `java.lang.CharSequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/text/StringsKt___StringsKt$windowedSequence$2;.<init>:(ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c7950.  v0.`kotlin.text.StringsKt___StringsKt$windowedSequence$2.$size` @type ^`int` := v1;
  #L2c7954.  v0.`kotlin.text.StringsKt___StringsKt$windowedSequence$2.$this_windowedSequence` @type ^`java.lang.CharSequence` := v2 @kind object;
  #L2c7958.  v0.`kotlin.text.StringsKt___StringsKt$windowedSequence$2.$transform` @type ^`kotlin.jvm.functions.Function1` := v3 @kind object;
  #L2c795c.  v1:= 1I;
  #L2c795e.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L2c7964.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlin.text.StringsKt___StringsKt$windowedSequence$2` v3 @kind this, `int` v4 ) @signature `Lkotlin/text/StringsKt___StringsKt$windowedSequence$2;.invoke:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2c78d8.  v0:= v3.`kotlin.text.StringsKt___StringsKt$windowedSequence$2.$size` @type ^`int`;
  #L2c78dc.  v0:= v0 + v4 @kind int;
  #L2c78de.  if v0 < 0 then goto L2c78f2;
  #L2c78e2.  v1:= v3.`kotlin.text.StringsKt___StringsKt$windowedSequence$2.$this_windowedSequence` @type ^`java.lang.CharSequence` @kind object;
  #L2c78e6.  call temp:= `length`(v1) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2c78ec.  v1:= temp;
  #L2c78ee.  if v0 <= v1 then goto L2c78fe;
  #L2c78f2.  v0:= v3.`kotlin.text.StringsKt___StringsKt$windowedSequence$2.$this_windowedSequence` @type ^`java.lang.CharSequence` @kind object;
  #L2c78f6.  call temp:= `length`(v0) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2c78fc.  v0:= temp;
  #L2c78fe.  v1:= v3.`kotlin.text.StringsKt___StringsKt$windowedSequence$2.$transform` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L2c7902.  v2:= v3.`kotlin.text.StringsKt___StringsKt$windowedSequence$2.$this_windowedSequence` @type ^`java.lang.CharSequence` @kind object;
  #L2c7906.  call temp:= `subSequence`(v2, v4, v0) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L2c790c.  v4:= temp @kind object;
  #L2c790e.  call temp:= `invoke`(v1, v4) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2c7914.  v4:= temp @kind object;
  #L2c7916.  return v4 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.text.StringsKt___StringsKt$windowedSequence$2` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/text/StringsKt___StringsKt$windowedSequence$2;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2c7928.  v1:= (`java.lang.Number`) v1 @kind object;
  #L2c792c.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L2c7932.  v1:= temp;
  #L2c7934.  call temp:= `invoke`(v0, v1) @signature `Lkotlin/text/StringsKt___StringsKt$windowedSequence$2;.invoke:(I)Ljava/lang/Object;` @kind virtual;
  #L2c793a.  v1:= temp @kind object;
  #L2c793c.  return v1 @kind object;
}
