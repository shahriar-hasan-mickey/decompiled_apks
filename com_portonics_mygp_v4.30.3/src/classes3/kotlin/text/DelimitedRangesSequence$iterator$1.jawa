record `kotlin.text.DelimitedRangesSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int` `kotlin.text.DelimitedRangesSequence$iterator$1.counter` @AccessFlag PRIVATE;
  `int` `kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex` @AccessFlag PRIVATE;
  `kotlin.ranges.IntRange` `kotlin.text.DelimitedRangesSequence$iterator$1.nextItem` @AccessFlag PRIVATE;
  `int` `kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex` @AccessFlag PRIVATE;
  `int` `kotlin.text.DelimitedRangesSequence$iterator$1.nextState` @AccessFlag PRIVATE;
  `kotlin.text.DelimitedRangesSequence` `kotlin.text.DelimitedRangesSequence$iterator$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.text.DelimitedRangesSequence$iterator$1` v2 @kind this, `kotlin.text.DelimitedRangesSequence` v3 @kind object) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.<init>:(Lkotlin/text/DelimitedRangesSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2c5314.  v2.`kotlin.text.DelimitedRangesSequence$iterator$1.this$0` @type ^`kotlin.text.DelimitedRangesSequence` := v3 @kind object;
  #L2c5318.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c531e.  v0:= -1I;
  #L2c5320.  v2.`kotlin.text.DelimitedRangesSequence$iterator$1.nextState` @type ^`int` := v0;
  #L2c5324.  call temp:= `access$getStartIndex$p`(v3) @signature `Lkotlin/text/DelimitedRangesSequence;.access$getStartIndex$p:(Lkotlin/text/DelimitedRangesSequence;)I` @kind static;
  #L2c532a.  v0:= temp;
  #L2c532c.  call temp:= `access$getInput$p`(v3) @signature `Lkotlin/text/DelimitedRangesSequence;.access$getInput$p:(Lkotlin/text/DelimitedRangesSequence;)Ljava/lang/CharSequence;` @kind static;
  #L2c5332.  v3:= temp @kind object;
  #L2c5334.  call temp:= `length`(v3) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2c533a.  v3:= temp;
  #L2c533c.  v1:= 0I;
  #L2c533e.  call temp:= `coerceIn`(v0, v1, v3) @signature `Lkotlin/ranges/RangesKt;.coerceIn:(III)I` @kind static;
  #L2c5344.  v3:= temp;
  #L2c5346.  v2.`kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex` @type ^`int` := v3;
  #L2c534a.  v2.`kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex` @type ^`int` := v3;
  #L2c534e.  return @kind void;
}
procedure `void` `calcNext`(`kotlin.text.DelimitedRangesSequence$iterator$1` v6 @kind this) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.calcNext:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2c5360.  v0:= v6.`kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex` @type ^`int`;
  #L2c5364.  v1:= 0I;
  #L2c5366.  if v0 >= 0 then goto L2c5378;
  #L2c536a.  v6.`kotlin.text.DelimitedRangesSequence$iterator$1.nextState` @type ^`int` := v1;
  #L2c536e.  v0:= 0I;
  #L2c5370.  v6.`kotlin.text.DelimitedRangesSequence$iterator$1.nextItem` @type ^`kotlin.ranges.IntRange` := v0 @kind object;
  #L2c5374.  goto L2c549c;
  #L2c5378.  v0:= v6.`kotlin.text.DelimitedRangesSequence$iterator$1.this$0` @type ^`kotlin.text.DelimitedRangesSequence` @kind object;
  #L2c537c.  call temp:= `access$getLimit$p`(v0) @signature `Lkotlin/text/DelimitedRangesSequence;.access$getLimit$p:(Lkotlin/text/DelimitedRangesSequence;)I` @kind static;
  #L2c5382.  v0:= temp;
  #L2c5384.  v2:= -1I;
  #L2c5386.  v3:= 1I;
  #L2c5388.  if v0 <= 0 then goto L2c53a6;
  #L2c538c.  v0:= v6.`kotlin.text.DelimitedRangesSequence$iterator$1.counter` @type ^`int`;
  #L2c5390.  v0:= v0 + v3 @kind int;
  #L2c5392.  v6.`kotlin.text.DelimitedRangesSequence$iterator$1.counter` @type ^`int` := v0;
  #L2c5396.  v4:= v6.`kotlin.text.DelimitedRangesSequence$iterator$1.this$0` @type ^`kotlin.text.DelimitedRangesSequence` @kind object;
  #L2c539a.  call temp:= `access$getLimit$p`(v4) @signature `Lkotlin/text/DelimitedRangesSequence;.access$getLimit$p:(Lkotlin/text/DelimitedRangesSequence;)I` @kind static;
  #L2c53a0.  v4:= temp;
  #L2c53a2.  if v0 >= v4 then goto L2c53c2;
  #L2c53a6.  v0:= v6.`kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex` @type ^`int`;
  #L2c53aa.  v4:= v6.`kotlin.text.DelimitedRangesSequence$iterator$1.this$0` @type ^`kotlin.text.DelimitedRangesSequence` @kind object;
  #L2c53ae.  call temp:= `access$getInput$p`(v4) @signature `Lkotlin/text/DelimitedRangesSequence;.access$getInput$p:(Lkotlin/text/DelimitedRangesSequence;)Ljava/lang/CharSequence;` @kind static;
  #L2c53b4.  v4:= temp @kind object;
  #L2c53b6.  call temp:= `length`(v4) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L2c53bc.  v4:= temp;
  #L2c53be.  if v0 <= v4 then goto L2c53ee;
  #L2c53c2.  v0:= new `kotlin.ranges.IntRange`;
  #L2c53c6.  v1:= v6.`kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex` @type ^`int`;
  #L2c53ca.  v4:= v6.`kotlin.text.DelimitedRangesSequence$iterator$1.this$0` @type ^`kotlin.text.DelimitedRangesSequence` @kind object;
  #L2c53ce.  call temp:= `access$getInput$p`(v4) @signature `Lkotlin/text/DelimitedRangesSequence;.access$getInput$p:(Lkotlin/text/DelimitedRangesSequence;)Ljava/lang/CharSequence;` @kind static;
  #L2c53d4.  v4:= temp @kind object;
  #L2c53d6.  call temp:= `getLastIndex`(v4) @signature `Lkotlin/text/StringsKt;.getLastIndex:(Ljava/lang/CharSequence;)I` @kind static;
  #L2c53dc.  v4:= temp;
  #L2c53de.  call `<init>`(v0, v1, v4) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L2c53e4.  v6.`kotlin.text.DelimitedRangesSequence$iterator$1.nextItem` @type ^`kotlin.ranges.IntRange` := v0 @kind object;
  #L2c53e8.  v6.`kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex` @type ^`int` := v2;
  #L2c53ec.  goto L2c5498;
  #L2c53ee.  v0:= v6.`kotlin.text.DelimitedRangesSequence$iterator$1.this$0` @type ^`kotlin.text.DelimitedRangesSequence` @kind object;
  #L2c53f2.  call temp:= `access$getGetNextMatch$p`(v0) @signature `Lkotlin/text/DelimitedRangesSequence;.access$getGetNextMatch$p:(Lkotlin/text/DelimitedRangesSequence;)Lkotlin/jvm/functions/Function2;` @kind static;
  #L2c53f8.  v0:= temp @kind object;
  #L2c53fa.  v4:= v6.`kotlin.text.DelimitedRangesSequence$iterator$1.this$0` @type ^`kotlin.text.DelimitedRangesSequence` @kind object;
  #L2c53fe.  call temp:= `access$getInput$p`(v4) @signature `Lkotlin/text/DelimitedRangesSequence;.access$getInput$p:(Lkotlin/text/DelimitedRangesSequence;)Ljava/lang/CharSequence;` @kind static;
  #L2c5404.  v4:= temp @kind object;
  #L2c5406.  v5:= v6.`kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex` @type ^`int`;
  #L2c540a.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2c5410.  v5:= temp @kind object;
  #L2c5412.  call temp:= `invoke`(v0, v4, v5) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2c5418.  v0:= temp @kind object;
  #L2c541a.  v0:= (`kotlin.Pair`) v0 @kind object;
  #L2c541e.  if v0 != 0 then goto L2c544e;
  #L2c5422.  v0:= new `kotlin.ranges.IntRange`;
  #L2c5426.  v1:= v6.`kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex` @type ^`int`;
  #L2c542a.  v4:= v6.`kotlin.text.DelimitedRangesSequence$iterator$1.this$0` @type ^`kotlin.text.DelimitedRangesSequence` @kind object;
  #L2c542e.  call temp:= `access$getInput$p`(v4) @signature `Lkotlin/text/DelimitedRangesSequence;.access$getInput$p:(Lkotlin/text/DelimitedRangesSequence;)Ljava/lang/CharSequence;` @kind static;
  #L2c5434.  v4:= temp @kind object;
  #L2c5436.  call temp:= `getLastIndex`(v4) @signature `Lkotlin/text/StringsKt;.getLastIndex:(Ljava/lang/CharSequence;)I` @kind static;
  #L2c543c.  v4:= temp;
  #L2c543e.  call `<init>`(v0, v1, v4) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L2c5444.  v6.`kotlin.text.DelimitedRangesSequence$iterator$1.nextItem` @type ^`kotlin.ranges.IntRange` := v0 @kind object;
  #L2c5448.  v6.`kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex` @type ^`int` := v2;
  #L2c544c.  goto L2c5498;
  #L2c544e.  call temp:= `component1`(v0) @signature `Lkotlin/Pair;.component1:()Ljava/lang/Object;` @kind virtual;
  #L2c5454.  v2:= temp @kind object;
  #L2c5456.  v2:= (`java.lang.Number`) v2 @kind object;
  #L2c545a.  call temp:= `intValue`(v2) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L2c5460.  v2:= temp;
  #L2c5462.  call temp:= `component2`(v0) @signature `Lkotlin/Pair;.component2:()Ljava/lang/Object;` @kind virtual;
  #L2c5468.  v0:= temp @kind object;
  #L2c546a.  v0:= (`java.lang.Number`) v0 @kind object;
  #L2c546e.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L2c5474.  v0:= temp;
  #L2c5476.  v4:= v6.`kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex` @type ^`int`;
  #L2c547a.  call temp:= `until`(v4, v2) @signature `Lkotlin/ranges/RangesKt;.until:(II)Lkotlin/ranges/IntRange;` @kind static;
  #L2c5480.  v4:= temp @kind object;
  #L2c5482.  v6.`kotlin.text.DelimitedRangesSequence$iterator$1.nextItem` @type ^`kotlin.ranges.IntRange` := v4 @kind object;
  #L2c5486.  v2:= v2 + v0 @kind int;
  #L2c5488.  v6.`kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex` @type ^`int` := v2;
  #L2c548c.  if v0 != 0 then goto L2c5492;
  #L2c5490.  v1:= 1I;
  #L2c5492.  v2:= v2 + v1 @kind int;
  #L2c5494.  v6.`kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex` @type ^`int` := v2;
  #L2c5498.  v6.`kotlin.text.DelimitedRangesSequence$iterator$1.nextState` @type ^`int` := v3;
  #L2c549c.  return @kind void;
}
procedure `int` `getCounter`(`kotlin.text.DelimitedRangesSequence$iterator$1` v1 @kind this) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.getCounter:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c5230.  v0:= v1.`kotlin.text.DelimitedRangesSequence$iterator$1.counter` @type ^`int`;
  #L2c5234.  return v0;
}
procedure `int` `getCurrentStartIndex`(`kotlin.text.DelimitedRangesSequence$iterator$1` v1 @kind this) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.getCurrentStartIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c5248.  v0:= v1.`kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex` @type ^`int`;
  #L2c524c.  return v0;
}
procedure `kotlin.ranges.IntRange` `getNextItem`(`kotlin.text.DelimitedRangesSequence$iterator$1` v1 @kind this) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.getNextItem:()Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c52ac.  v0:= v1.`kotlin.text.DelimitedRangesSequence$iterator$1.nextItem` @type ^`kotlin.ranges.IntRange` @kind object;
  #L2c52b0.  return v0 @kind object;
}
procedure `int` `getNextSearchIndex`(`kotlin.text.DelimitedRangesSequence$iterator$1` v1 @kind this) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.getNextSearchIndex:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c5260.  v0:= v1.`kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex` @type ^`int`;
  #L2c5264.  return v0;
}
procedure `int` `getNextState`(`kotlin.text.DelimitedRangesSequence$iterator$1` v1 @kind this) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.getNextState:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c5278.  v0:= v1.`kotlin.text.DelimitedRangesSequence$iterator$1.nextState` @type ^`int`;
  #L2c527c.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.text.DelimitedRangesSequence$iterator$1` v2 @kind this) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c5200.  v0:= v2.`kotlin.text.DelimitedRangesSequence$iterator$1.nextState` @type ^`int`;
  #L2c5204.  v1:= -1I;
  #L2c5206.  if v0 != v1 then goto L2c5210;
  #L2c520a.  call `calcNext`(v2) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.calcNext:()V` @kind direct;
  #L2c5210.  v0:= v2.`kotlin.text.DelimitedRangesSequence$iterator$1.nextState` @type ^`int`;
  #L2c5214.  v1:= 1I;
  #L2c5216.  if v0 != v1 then goto L2c521c;
  #L2c521a.  goto L2c521e;
  #L2c521c.  v1:= 0I;
  #L2c521e.  return v1;
}
procedure `java.lang.Object` `next`(`kotlin.text.DelimitedRangesSequence$iterator$1` v1 @kind this) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2c5290.  call temp:= `next`(v1) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.next:()Lkotlin/ranges/IntRange;` @kind virtual;
  #L2c5296.  v0:= temp @kind object;
  #L2c5298.  return v0 @kind object;
}
procedure `kotlin.ranges.IntRange` `next`(`kotlin.text.DelimitedRangesSequence$iterator$1` v3 @kind this) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.next:()Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c52c4.  v0:= v3.`kotlin.text.DelimitedRangesSequence$iterator$1.nextState` @type ^`int`;
  #L2c52c8.  v1:= -1I;
  #L2c52ca.  if v0 != v1 then goto L2c52d4;
  #L2c52ce.  call `calcNext`(v3) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.calcNext:()V` @kind direct;
  #L2c52d4.  v0:= v3.`kotlin.text.DelimitedRangesSequence$iterator$1.nextState` @type ^`int`;
  #L2c52d8.  if v0 == 0 then goto L2c52f6;
  #L2c52dc.  v0:= v3.`kotlin.text.DelimitedRangesSequence$iterator$1.nextItem` @type ^`kotlin.ranges.IntRange` @kind object;
  #L2c52e0.  v2:= "null cannot be cast to non-null type kotlin.ranges.IntRange" @kind object;
  #L2c52e4.  call temp:= `requireNonNull`(v0, v2) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2c52ea.  v2:= 0I;
  #L2c52ec.  v3.`kotlin.text.DelimitedRangesSequence$iterator$1.nextItem` @type ^`kotlin.ranges.IntRange` := v2 @kind object;
  #L2c52f0.  v3.`kotlin.text.DelimitedRangesSequence$iterator$1.nextState` @type ^`int` := v1;
  #L2c52f4.  return v0 @kind object;
  #L2c52f6.  v0:= new `java.util.NoSuchElementException`;
  #L2c52fa.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2c5300.  throw v0;
}
procedure `void` `remove`(`kotlin.text.DelimitedRangesSequence$iterator$1` v2 @kind this) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c54b0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2c54b4.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L2c54b8.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c54be.  throw v0;
}
procedure `void` `setCounter`(`kotlin.text.DelimitedRangesSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.setCounter:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c54d0.  v0.`kotlin.text.DelimitedRangesSequence$iterator$1.counter` @type ^`int` := v1;
  #L2c54d4.  return @kind void;
}
procedure `void` `setCurrentStartIndex`(`kotlin.text.DelimitedRangesSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.setCurrentStartIndex:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c54e8.  v0.`kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex` @type ^`int` := v1;
  #L2c54ec.  return @kind void;
}
procedure `void` `setNextItem`(`kotlin.text.DelimitedRangesSequence$iterator$1` v0 @kind this, `kotlin.ranges.IntRange` v1 @kind object) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.setNextItem:(Lkotlin/ranges/IntRange;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c5500.  v0.`kotlin.text.DelimitedRangesSequence$iterator$1.nextItem` @type ^`kotlin.ranges.IntRange` := v1 @kind object;
  #L2c5504.  return @kind void;
}
procedure `void` `setNextSearchIndex`(`kotlin.text.DelimitedRangesSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.setNextSearchIndex:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c5518.  v0.`kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex` @type ^`int` := v1;
  #L2c551c.  return @kind void;
}
procedure `void` `setNextState`(`kotlin.text.DelimitedRangesSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/text/DelimitedRangesSequence$iterator$1;.setNextState:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c5530.  v0.`kotlin.text.DelimitedRangesSequence$iterator$1.nextState` @type ^`int` := v1;
  #L2c5534.  return @kind void;
}
