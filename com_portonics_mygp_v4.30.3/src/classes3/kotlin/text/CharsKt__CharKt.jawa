record `kotlin.text.CharsKt__CharKt` @kind class @AccessFlag  extends `kotlin.text.CharsKt__CharJVMKt` @kind class {
}
procedure `void` `<init>`(`kotlin.text.CharsKt__CharKt` v0 @kind this) @signature `Lkotlin/text/CharsKt__CharKt;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2c5014.  call `<init>`(v0) @signature `Lkotlin/text/CharsKt__CharJVMKt;.<init>:()V` @kind direct;
  #L2c501a.  return @kind void;
}
procedure `char` `digitToChar`(`int` v3 ) @signature `Lkotlin/text/CharsKt__CharKt;.digitToChar:(I)C` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2c4d54.  v0:= 0I;
  #L2c4d56.  if v3 < 0 then goto L2c4d64;
  #L2c4d5a.  v1:= 10I;
  #L2c4d5e.  if v3 >= v1 then goto L2c4d64;
  #L2c4d62.  v0:= 1I;
  #L2c4d64.  if v0 == 0 then goto L2c4d70;
  #L2c4d68.  v3:= v3 + 48;
  #L2c4d6c.  v3:= (`char`) v3 @kind i2c;
  #L2c4d6e.  return v3;
  #L2c4d70.  v0:= new `java.lang.IllegalArgumentException`;
  #L2c4d74.  v1:= new `java.lang.StringBuilder`;
  #L2c4d78.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c4d7e.  v2:= "Int " @kind object;
  #L2c4d82.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4d88.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4d8e.  v3:= " is not a decimal digit" @kind object;
  #L2c4d92.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4d98.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c4d9e.  v3:= temp @kind object;
  #L2c4da0.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c4da6.  throw v0;
}
procedure `char` `digitToChar`(`int` v3 , `int` v4 ) @signature `Lkotlin/text/CharsKt__CharKt;.digitToChar:(II)C` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2c4db8.  v0:= 0I;
  #L2c4dba.  v1:= 2I;
  #L2c4dbc.  if v1 > v4 then goto L2c4dca;
  #L2c4dc0.  v1:= 37I;
  #L2c4dc4.  if v4 >= v1 then goto L2c4dca;
  #L2c4dc8.  v0:= 1I;
  #L2c4dca.  if v0 == 0 then goto L2c4e2e;
  #L2c4dce.  if v3 < 0 then goto L2c4df0;
  #L2c4dd2.  if v3 >= v4 then goto L2c4df0;
  #L2c4dd6.  v4:= 10I;
  #L2c4dda.  if v3 >= v4 then goto L2c4de4;
  #L2c4dde.  v3:= v3 + 48;
  #L2c4de2.  goto L2c4dec;
  #L2c4de4.  v3:= v3 + 65;
  #L2c4de8.  v3:= (`char`) v3 @kind i2c;
  #L2c4dea.  v3:= v3 - v4 @kind int;
  #L2c4dec.  v3:= (`char`) v3 @kind i2c;
  #L2c4dee.  return v3;
  #L2c4df0.  v0:= new `java.lang.IllegalArgumentException`;
  #L2c4df4.  v1:= new `java.lang.StringBuilder`;
  #L2c4df8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c4dfe.  v2:= "Digit " @kind object;
  #L2c4e02.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4e08.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4e0e.  v3:= " does not represent a valid digit in radix " @kind object;
  #L2c4e12.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4e18.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4e1e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c4e24.  v3:= temp @kind object;
  #L2c4e26.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c4e2c.  throw v0;
  #L2c4e2e.  v3:= new `java.lang.IllegalArgumentException`;
  #L2c4e32.  v0:= new `java.lang.StringBuilder`;
  #L2c4e36.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c4e3c.  v1:= "Invalid radix: " @kind object;
  #L2c4e40.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4e46.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4e4c.  v4:= ". Valid radix values are in range 2..36" @kind object;
  #L2c4e50.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4e56.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c4e5c.  v4:= temp @kind object;
  #L2c4e5e.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c4e64.  throw v3;
}
procedure `int` `digitToInt`(`char` v3 ) @signature `Lkotlin/text/CharsKt__CharKt;.digitToInt:(C)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2c4e78.  v0:= 10I;
  #L2c4e7c.  call temp:= `digitOf`(v3, v0) @signature `Lkotlin/text/CharsKt__CharJVMKt;.digitOf:(CI)I` @kind static;
  #L2c4e82.  v0:= temp;
  #L2c4e84.  if v0 < 0 then goto L2c4e8a;
  #L2c4e88.  return v0;
  #L2c4e8a.  v0:= new `java.lang.IllegalArgumentException`;
  #L2c4e8e.  v1:= new `java.lang.StringBuilder`;
  #L2c4e92.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c4e98.  v2:= "Char " @kind object;
  #L2c4e9c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4ea2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4ea8.  v3:= " is not a decimal digit" @kind object;
  #L2c4eac.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4eb2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c4eb8.  v3:= temp @kind object;
  #L2c4eba.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c4ec0.  throw v0;
}
procedure `int` `digitToInt`(`char` v3 , `int` v4 ) @signature `Lkotlin/text/CharsKt__CharKt;.digitToInt:(CI)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2c4ed4.  call temp:= `digitToIntOrNull`(v3, v4) @signature `Lkotlin/text/CharsKt__CharKt;.digitToIntOrNull:(CI)Ljava/lang/Integer;` @kind static;
  #L2c4eda.  v0:= temp @kind object;
  #L2c4edc.  if v0 == 0 then goto L2c4eea;
  #L2c4ee0.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2c4ee6.  v3:= temp;
  #L2c4ee8.  return v3;
  #L2c4eea.  v0:= new `java.lang.IllegalArgumentException`;
  #L2c4eee.  v1:= new `java.lang.StringBuilder`;
  #L2c4ef2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c4ef8.  v2:= "Char " @kind object;
  #L2c4efc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4f02.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4f08.  v3:= " is not a digit in the given radix=" @kind object;
  #L2c4f0c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4f12.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4f18.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c4f1e.  v3:= temp @kind object;
  #L2c4f20.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c4f26.  throw v0;
}
procedure `java.lang.Integer` `digitToIntOrNull`(`char` v1 ) @signature `Lkotlin/text/CharsKt__CharKt;.digitToIntOrNull:(C)Ljava/lang/Integer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2c4f38.  v0:= 10I;
  #L2c4f3c.  call temp:= `digitOf`(v1, v0) @signature `Lkotlin/text/CharsKt__CharJVMKt;.digitOf:(CI)I` @kind static;
  #L2c4f42.  v1:= temp;
  #L2c4f44.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2c4f4a.  v1:= temp @kind object;
  #L2c4f4c.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L2c4f52.  v0:= temp;
  #L2c4f54.  if v0 < 0 then goto L2c4f5c;
  #L2c4f58.  v0:= 1I;
  #L2c4f5a.  goto L2c4f5e;
  #L2c4f5c.  v0:= 0I;
  #L2c4f5e.  if v0 == 0 then goto L2c4f64;
  #L2c4f62.  goto L2c4f66;
  #L2c4f64.  v1:= 0I;
  #L2c4f66.  return v1 @kind object;
}
procedure `java.lang.Integer` `digitToIntOrNull`(`char` v0 , `int` v1 ) @signature `Lkotlin/text/CharsKt__CharKt;.digitToIntOrNull:(CI)Ljava/lang/Integer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L2c4f78.  call temp:= `checkRadix`(v1) @signature `Lkotlin/text/CharsKt;.checkRadix:(I)I` @kind static;
  #L2c4f7e.  call temp:= `digitOf`(v0, v1) @signature `Lkotlin/text/CharsKt__CharJVMKt;.digitOf:(CI)I` @kind static;
  #L2c4f84.  v0:= temp;
  #L2c4f86.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2c4f8c.  v0:= temp @kind object;
  #L2c4f8e.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L2c4f94.  v1:= temp;
  #L2c4f96.  if v1 < 0 then goto L2c4f9e;
  #L2c4f9a.  v1:= 1I;
  #L2c4f9c.  goto L2c4fa0;
  #L2c4f9e.  v1:= 0I;
  #L2c4fa0.  if v1 == 0 then goto L2c4fa6;
  #L2c4fa4.  goto L2c4fa8;
  #L2c4fa6.  v0:= 0I;
  #L2c4fa8.  return v0 @kind object;
}
procedure `boolean` `equals`(`char` v2 , `char` v3 , `boolean` v4 ) @signature `Lkotlin/text/CharsKt__CharKt;.equals:(CCZ)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2c4cd8.  v0:= 1I;
  #L2c4cda.  if v2 != v3 then goto L2c4ce0;
  #L2c4cde.  return v0;
  #L2c4ce0.  v1:= 0I;
  #L2c4ce2.  if v4 != 0 then goto L2c4ce8;
  #L2c4ce6.  return v1;
  #L2c4ce8.  call temp:= `toUpperCase`(v2) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L2c4cee.  v2:= temp;
  #L2c4cf0.  call temp:= `toUpperCase`(v3) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L2c4cf6.  v3:= temp;
  #L2c4cf8.  if v2 == v3 then goto L2c4d14;
  #L2c4cfc.  call temp:= `toLowerCase`(v2) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L2c4d02.  v2:= temp;
  #L2c4d04.  call temp:= `toLowerCase`(v3) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L2c4d0a.  v3:= temp;
  #L2c4d0c.  if v2 != v3 then goto L2c4d12;
  #L2c4d10.  goto L2c4d14;
  #L2c4d12.  v0:= 0I;
  #L2c4d14.  return v0;
}
procedure `boolean` `equals$default`(`char` v0 , `char` v1 , `boolean` v2 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlin/text/CharsKt__CharKt;.equals$default:(CCZILjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2c4cb4.  v3:= v3 ^& 2;
  #L2c4cb8.  if v3 == 0 then goto L2c4cbe;
  #L2c4cbc.  v2:= 0I;
  #L2c4cbe.  call temp:= `equals`(v0, v1, v2) @signature `Lkotlin/text/CharsKt__CharKt;.equals:(CCZ)Z` @kind static;
  #L2c4cc4.  v0:= temp;
  #L2c4cc6.  return v0;
}
procedure `boolean` `isSurrogate`(`char` v2 ) @signature `Lkotlin/text/CharsKt__CharKt;.isSurrogate:(C)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2c4d28.  v0:= 0I;
  #L2c4d2a.  v1:= 55296I;
  #L2c4d30.  if v1 > v2 then goto L2c4d40;
  #L2c4d34.  v1:= 57344I;
  #L2c4d3a.  if v2 >= v1 then goto L2c4d40;
  #L2c4d3e.  v0:= 1I;
  #L2c4d40.  return v0;
}
procedure `java.lang.String` `plus`(`char` v1 , `java.lang.String` v2 @kind object) @signature `Lkotlin/text/CharsKt__CharKt;.plus:(CLjava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;

  #L2c4fbc.  v0:= "other" @kind object;
  #L2c4fc0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2c4fc6.  v0:= new `java.lang.StringBuilder`;
  #L2c4fca.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c4fd0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4fd6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c4fdc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c4fe2.  v1:= temp @kind object;
  #L2c4fe4.  return v1 @kind object;
}
procedure `java.lang.String` `titlecase`(`char` v0 ) @signature `Lkotlin/text/CharsKt__CharKt;.titlecase:(C)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L2c4ff8.  call temp:= `titlecaseImpl`(v0) @signature `Lkotlin/text/_OneToManyTitlecaseMappingsKt;.titlecaseImpl:(C)Ljava/lang/String;` @kind static;
  #L2c4ffe.  v0:= temp @kind object;
  #L2c5000.  return v0 @kind object;
}
