record `kotlin.text.MatcherMatchResult$groups$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.AbstractCollection` @kind class, `kotlin.text.MatchNamedGroupCollection` @kind interface {
  `kotlin.text.MatcherMatchResult` `kotlin.text.MatcherMatchResult$groups$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.text.MatcherMatchResult$groups$1` v0 @kind this, `kotlin.text.MatcherMatchResult` v1 @kind object) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.<init>:(Lkotlin/text/MatcherMatchResult;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c5d98.  v0.`kotlin.text.MatcherMatchResult$groups$1.this$0` @type ^`kotlin.text.MatcherMatchResult` := v1 @kind object;
  #L2c5d9c.  call `<init>`(v0) @signature `Lkotlin/collections/AbstractCollection;.<init>:()V` @kind direct;
  #L2c5da2.  return @kind void;
}
procedure `boolean` `contains`(`kotlin.text.MatcherMatchResult$groups$1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2c5c30.  if v2 != 0 then goto L2c5c38;
  #L2c5c34.  v0:= 1I;
  #L2c5c36.  goto L2c5c3c;
  #L2c5c38.  v0:= instanceof @variable v2 @type ^`kotlin.text.MatchGroup` @kind boolean;
  #L2c5c3c.  if v0 != 0 then goto L2c5c44;
  #L2c5c40.  v2:= 0I;
  #L2c5c42.  return v2;
  #L2c5c44.  v2:= (`kotlin.text.MatchGroup`) v2 @kind object;
  #L2c5c48.  call temp:= `contains`(v1, v2) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.contains:(Lkotlin/text/MatchGroup;)Z` @kind virtual;
  #L2c5c4e.  v2:= temp;
  #L2c5c50.  return v2;
}
procedure `boolean` `contains`(`kotlin.text.MatcherMatchResult$groups$1` v0 @kind this, `kotlin.text.MatchGroup` v1 @kind object) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.contains:(Lkotlin/text/MatchGroup;)Z` @AccessFlag PUBLIC {
    temp;

  #L2c5c64.  call temp:= `contains`(v0, v1) @signature `Lkotlin/collections/AbstractCollection;.contains:(Ljava/lang/Object;)Z` @kind super;
  #L2c5c6a.  v1:= temp;
  #L2c5c6c.  return v1;
}
procedure `kotlin.text.MatchGroup` `get`(`kotlin.text.MatcherMatchResult$groups$1` v3 @kind this, `int` v4 ) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.get:(I)Lkotlin/text/MatchGroup;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c5cfc.  v0:= v3.`kotlin.text.MatcherMatchResult$groups$1.this$0` @type ^`kotlin.text.MatcherMatchResult` @kind object;
  #L2c5d00.  call temp:= `access$getMatchResult`(v0) @signature `Lkotlin/text/MatcherMatchResult;.access$getMatchResult:(Lkotlin/text/MatcherMatchResult;)Ljava/util/regex/MatchResult;` @kind static;
  #L2c5d06.  v0:= temp @kind object;
  #L2c5d08.  call temp:= `access$range`(v0, v4) @signature `Lkotlin/text/RegexKt;.access$range:(Ljava/util/regex/MatchResult;I)Lkotlin/ranges/IntRange;` @kind static;
  #L2c5d0e.  v0:= temp @kind object;
  #L2c5d10.  call temp:= `getStart`(v0) @signature `Lkotlin/ranges/IntRange;.getStart:()Ljava/lang/Integer;` @kind virtual;
  #L2c5d16.  v1:= temp @kind object;
  #L2c5d18.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2c5d1e.  v1:= temp;
  #L2c5d20.  if v1 < 0 then goto L2c5d4e;
  #L2c5d24.  v1:= new `kotlin.text.MatchGroup`;
  #L2c5d28.  v2:= v3.`kotlin.text.MatcherMatchResult$groups$1.this$0` @type ^`kotlin.text.MatcherMatchResult` @kind object;
  #L2c5d2c.  call temp:= `access$getMatchResult`(v2) @signature `Lkotlin/text/MatcherMatchResult;.access$getMatchResult:(Lkotlin/text/MatcherMatchResult;)Ljava/util/regex/MatchResult;` @kind static;
  #L2c5d32.  v2:= temp @kind object;
  #L2c5d34.  call temp:= `group`(v2, v4) @signature `Ljava/util/regex/MatchResult;.group:(I)Ljava/lang/String;` @kind interface;
  #L2c5d3a.  v4:= temp @kind object;
  #L2c5d3c.  v2:= "matchResult.group(index)" @kind object;
  #L2c5d40.  call `checkNotNullExpressionValue`(v4, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2c5d46.  call `<init>`(v1, v4, v0) @signature `Lkotlin/text/MatchGroup;.<init>:(Ljava/lang/String;Lkotlin/ranges/IntRange;)V` @kind direct;
  #L2c5d4c.  goto L2c5d50;
  #L2c5d4e.  v1:= 0I;
  #L2c5d50.  return v1 @kind object;
}
procedure `kotlin.text.MatchGroup` `get`(`kotlin.text.MatcherMatchResult$groups$1` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.get:(Ljava/lang/String;)Lkotlin/text/MatchGroup;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c5d64.  v0:= "name" @kind object;
  #L2c5d68.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2c5d6e.  v0:= `@@kotlin.internal.PlatformImplementationsKt.IMPLEMENTATIONS` @type ^`kotlin.internal.PlatformImplementations` @kind object;
  #L2c5d72.  v1:= v2.`kotlin.text.MatcherMatchResult$groups$1.this$0` @type ^`kotlin.text.MatcherMatchResult` @kind object;
  #L2c5d76.  call temp:= `access$getMatchResult`(v1) @signature `Lkotlin/text/MatcherMatchResult;.access$getMatchResult:(Lkotlin/text/MatcherMatchResult;)Ljava/util/regex/MatchResult;` @kind static;
  #L2c5d7c.  v1:= temp @kind object;
  #L2c5d7e.  call temp:= `getMatchResultNamedGroup`(v0, v1, v3) @signature `Lkotlin/internal/PlatformImplementations;.getMatchResultNamedGroup:(Ljava/util/regex/MatchResult;Ljava/lang/String;)Lkotlin/text/MatchGroup;` @kind virtual;
  #L2c5d84.  v3:= temp @kind object;
  #L2c5d86.  return v3 @kind object;
}
procedure `int` `getSize`(`kotlin.text.MatcherMatchResult$groups$1` v1 @kind this) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c5c94.  v0:= v1.`kotlin.text.MatcherMatchResult$groups$1.this$0` @type ^`kotlin.text.MatcherMatchResult` @kind object;
  #L2c5c98.  call temp:= `access$getMatchResult`(v0) @signature `Lkotlin/text/MatcherMatchResult;.access$getMatchResult:(Lkotlin/text/MatcherMatchResult;)Ljava/util/regex/MatchResult;` @kind static;
  #L2c5c9e.  v0:= temp @kind object;
  #L2c5ca0.  call temp:= `groupCount`(v0) @signature `Ljava/util/regex/MatchResult;.groupCount:()I` @kind interface;
  #L2c5ca6.  v0:= temp;
  #L2c5ca8.  v0:= v0 + 1;
  #L2c5cac.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.text.MatcherMatchResult$groups$1` v1 @kind this) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c5c80.  v0:= 0I;
  #L2c5c82.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.text.MatcherMatchResult$groups$1` v2 @kind this) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c5cc0.  call temp:= `getIndices`(v2) @signature `Lkotlin/collections/CollectionsKt;.getIndices:(Ljava/util/Collection;)Lkotlin/ranges/IntRange;` @kind static;
  #L2c5cc6.  v0:= temp @kind object;
  #L2c5cc8.  call temp:= `asSequence`(v0) @signature `Lkotlin/collections/CollectionsKt;.asSequence:(Ljava/lang/Iterable;)Lkotlin/sequences/Sequence;` @kind static;
  #L2c5cce.  v0:= temp @kind object;
  #L2c5cd0.  v1:= new `kotlin.text.MatcherMatchResult$groups$1$iterator$1`;
  #L2c5cd4.  call `<init>`(v1, v2) @signature `Lkotlin/text/MatcherMatchResult$groups$1$iterator$1;.<init>:(Lkotlin/text/MatcherMatchResult$groups$1;)V` @kind direct;
  #L2c5cda.  call temp:= `map`(v0, v1) @signature `Lkotlin/sequences/SequencesKt;.map:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L2c5ce0.  v0:= temp @kind object;
  #L2c5ce2.  call temp:= `iterator`(v0) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c5ce8.  v0:= temp @kind object;
  #L2c5cea.  return v0 @kind object;
}
