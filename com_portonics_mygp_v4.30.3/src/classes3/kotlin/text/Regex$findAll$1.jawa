record `kotlin.text.Regex$findAll$1` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function0` @kind interface {
  `java.lang.CharSequence` `kotlin.text.Regex$findAll$1.$input` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlin.text.Regex$findAll$1.$startIndex` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.text.Regex` `kotlin.text.Regex$findAll$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.text.Regex$findAll$1` v0 @kind this, `kotlin.text.Regex` v1 @kind object, `java.lang.CharSequence` v2 @kind object, `int` v3 ) @signature `Lkotlin/text/Regex$findAll$1;.<init>:(Lkotlin/text/Regex;Ljava/lang/CharSequence;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2c6198.  v0.`kotlin.text.Regex$findAll$1.this$0` @type ^`kotlin.text.Regex` := v1 @kind object;
  #L2c619c.  v0.`kotlin.text.Regex$findAll$1.$input` @type ^`java.lang.CharSequence` := v2 @kind object;
  #L2c61a0.  v0.`kotlin.text.Regex$findAll$1.$startIndex` @type ^`int` := v3;
  #L2c61a4.  v1:= 0I;
  #L2c61a6.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L2c61ac.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlin.text.Regex$findAll$1` v1 @kind this) @signature `Lkotlin/text/Regex$findAll$1;.invoke:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2c6154.  call temp:= `invoke`(v1) @signature `Lkotlin/text/Regex$findAll$1;.invoke:()Lkotlin/text/MatchResult;` @kind virtual;
  #L2c615a.  v0:= temp @kind object;
  #L2c615c.  return v0 @kind object;
}
procedure `kotlin.text.MatchResult` `invoke`(`kotlin.text.Regex$findAll$1` v3 @kind this) @signature `Lkotlin/text/Regex$findAll$1;.invoke:()Lkotlin/text/MatchResult;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2c6170.  v0:= v3.`kotlin.text.Regex$findAll$1.this$0` @type ^`kotlin.text.Regex` @kind object;
  #L2c6174.  v1:= v3.`kotlin.text.Regex$findAll$1.$input` @type ^`java.lang.CharSequence` @kind object;
  #L2c6178.  v2:= v3.`kotlin.text.Regex$findAll$1.$startIndex` @type ^`int`;
  #L2c617c.  call temp:= `find`(v0, v1, v2) @signature `Lkotlin/text/Regex;.find:(Ljava/lang/CharSequence;I)Lkotlin/text/MatchResult;` @kind virtual;
  #L2c6182.  v0:= temp @kind object;
  #L2c6184.  return v0 @kind object;
}
