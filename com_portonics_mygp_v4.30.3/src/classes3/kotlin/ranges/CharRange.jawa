record `kotlin.ranges.CharRange` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.ranges.CharProgression` @kind class, `kotlin.ranges.ClosedRange` @kind interface {
}
global `kotlin.ranges.CharRange$Companion` `@@kotlin.ranges.CharRange.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.ranges.CharRange` `@@kotlin.ranges.CharRange.EMPTY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/CharRange;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2bb610.  v0:= new `kotlin.ranges.CharRange$Companion`;
  #L2bb614.  v1:= 0I;
  #L2bb616.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/CharRange$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2bb61c.  `@@kotlin.ranges.CharRange.Companion` @type ^`kotlin.ranges.CharRange$Companion` := v0 @kind object;
  #L2bb620.  v0:= new `kotlin.ranges.CharRange`;
  #L2bb624.  v1:= 1I;
  #L2bb626.  v2:= 0I;
  #L2bb628.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/CharRange;.<init>:(CC)V` @kind direct;
  #L2bb62e.  `@@kotlin.ranges.CharRange.EMPTY` @type ^`kotlin.ranges.CharRange` := v0 @kind object;
  #L2bb632.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.CharRange` v1 @kind this, `char` v2 , `char` v3 ) @signature `Lkotlin/ranges/CharRange;.<init>:(CC)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2bb644.  v0:= 1I;
  #L2bb646.  call `<init>`(v1, v2, v3, v0) @signature `Lkotlin/ranges/CharProgression;.<init>:(CCI)V` @kind direct;
  #L2bb64c.  return @kind void;
}
procedure `kotlin.ranges.CharRange` `access$getEMPTY$cp`() @signature `Lkotlin/ranges/CharRange;.access$getEMPTY$cp:()Lkotlin/ranges/CharRange;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L2bb5f8.  v0:= `@@kotlin.ranges.CharRange.EMPTY` @type ^`kotlin.ranges.CharRange` @kind object;
  #L2bb5fc.  return v0 @kind object;
}
procedure `boolean` `contains`(`kotlin.ranges.CharRange` v1 @kind this, `char` v2 ) @signature `Lkotlin/ranges/CharRange;.contains:(C)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bb3ec.  call temp:= `getFirst`(v1) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L2bb3f2.  v0:= temp;
  #L2bb3f4.  call temp:= `compare`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L2bb3fa.  v0:= temp;
  #L2bb3fc.  if v0 > 0 then goto L2bb418;
  #L2bb400.  call temp:= `getLast`(v1) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L2bb406.  v0:= temp;
  #L2bb408.  call temp:= `compare`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L2bb40e.  v2:= temp;
  #L2bb410.  if v2 > 0 then goto L2bb418;
  #L2bb414.  v2:= 1I;
  #L2bb416.  goto L2bb41a;
  #L2bb418.  v2:= 0I;
  #L2bb41a.  return v2;
}
procedure `boolean` `contains`(`kotlin.ranges.CharRange` v0 @kind this, `java.lang.Comparable` v1 @kind object) @signature `Lkotlin/ranges/CharRange;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2bb42c.  v1:= (`java.lang.Character`) v1 @kind object;
  #L2bb430.  call temp:= `charValue`(v1) @signature `Ljava/lang/Character;.charValue:()C` @kind virtual;
  #L2bb436.  v1:= temp;
  #L2bb438.  call temp:= `contains`(v0, v1) @signature `Lkotlin/ranges/CharRange;.contains:(C)Z` @kind virtual;
  #L2bb43e.  v1:= temp;
  #L2bb440.  return v1;
}
procedure `boolean` `equals`(`kotlin.ranges.CharRange` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ranges/CharRange;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bb454.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.CharRange` @kind boolean;
  #L2bb458.  if v0 == 0 then goto L2bb4aa;
  #L2bb45c.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/CharRange;.isEmpty:()Z` @kind virtual;
  #L2bb462.  v0:= temp;
  #L2bb464.  if v0 == 0 then goto L2bb47a;
  #L2bb468.  v0:= v3 @kind object;
  #L2bb46a.  v0:= (`kotlin.ranges.CharRange`) v0 @kind object;
  #L2bb46e.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/CharRange;.isEmpty:()Z` @kind virtual;
  #L2bb474.  v0:= temp;
  #L2bb476.  if v0 != 0 then goto L2bb4a6;
  #L2bb47a.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L2bb480.  v0:= temp;
  #L2bb482.  v3:= (`kotlin.ranges.CharRange`) v3 @kind object;
  #L2bb486.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L2bb48c.  v1:= temp;
  #L2bb48e.  if v0 != v1 then goto L2bb4aa;
  #L2bb492.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L2bb498.  v0:= temp;
  #L2bb49a.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L2bb4a0.  v3:= temp;
  #L2bb4a2.  if v0 != v3 then goto L2bb4aa;
  #L2bb4a6.  v3:= 1I;
  #L2bb4a8.  goto L2bb4ac;
  #L2bb4aa.  v3:= 0I;
  #L2bb4ac.  return v3;
}
procedure `java.lang.Character` `getEndInclusive`(`kotlin.ranges.CharRange` v1 @kind this) @signature `Lkotlin/ranges/CharRange;.getEndInclusive:()Ljava/lang/Character;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bb52c.  call temp:= `getLast`(v1) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L2bb532.  v0:= temp;
  #L2bb534.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L2bb53a.  v0:= temp @kind object;
  #L2bb53c.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.CharRange` v1 @kind this) @signature `Lkotlin/ranges/CharRange;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2bb574.  call temp:= `getEndInclusive`(v1) @signature `Lkotlin/ranges/CharRange;.getEndInclusive:()Ljava/lang/Character;` @kind virtual;
  #L2bb57a.  v0:= temp @kind object;
  #L2bb57c.  return v0 @kind object;
}
procedure `java.lang.Character` `getStart`(`kotlin.ranges.CharRange` v1 @kind this) @signature `Lkotlin/ranges/CharRange;.getStart:()Ljava/lang/Character;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bb550.  call temp:= `getFirst`(v1) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L2bb556.  v0:= temp;
  #L2bb558.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L2bb55e.  v0:= temp @kind object;
  #L2bb560.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.CharRange` v1 @kind this) @signature `Lkotlin/ranges/CharRange;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2bb590.  call temp:= `getStart`(v1) @signature `Lkotlin/ranges/CharRange;.getStart:()Ljava/lang/Character;` @kind virtual;
  #L2bb596.  v0:= temp @kind object;
  #L2bb598.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.CharRange` v2 @kind this) @signature `Lkotlin/ranges/CharRange;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bb4f4.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/CharRange;.isEmpty:()Z` @kind virtual;
  #L2bb4fa.  v0:= temp;
  #L2bb4fc.  if v0 == 0 then goto L2bb504;
  #L2bb500.  v0:= -1I;
  #L2bb502.  goto L2bb51a;
  #L2bb504.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L2bb50a.  v0:= temp;
  #L2bb50c.  v0:= v0 * 31;
  #L2bb510.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L2bb516.  v1:= temp;
  #L2bb518.  v0:= v0 + v1 @kind int;
  #L2bb51a.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.CharRange` v2 @kind this) @signature `Lkotlin/ranges/CharRange;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bb4c0.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L2bb4c6.  v0:= temp;
  #L2bb4c8.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L2bb4ce.  v1:= temp;
  #L2bb4d0.  call temp:= `compare`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L2bb4d6.  v0:= temp;
  #L2bb4d8.  if v0 <= 0 then goto L2bb4e0;
  #L2bb4dc.  v0:= 1I;
  #L2bb4de.  goto L2bb4e2;
  #L2bb4e0.  v0:= 0I;
  #L2bb4e2.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.CharRange` v2 @kind this) @signature `Lkotlin/ranges/CharRange;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bb5ac.  v0:= new `java.lang.StringBuilder`;
  #L2bb5b0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bb5b6.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L2bb5bc.  v1:= temp;
  #L2bb5be.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bb5c4.  v1:= ".." @kind object;
  #L2bb5c8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bb5ce.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L2bb5d4.  v1:= temp;
  #L2bb5d6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bb5dc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bb5e2.  v0:= temp @kind object;
  #L2bb5e4.  return v0 @kind object;
}
