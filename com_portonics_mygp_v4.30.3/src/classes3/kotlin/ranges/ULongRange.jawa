record `kotlin.ranges.ULongRange` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.ranges.ULongProgression` @kind class, `kotlin.ranges.ClosedRange` @kind interface {
}
global `kotlin.ranges.ULongRange$Companion` `@@kotlin.ranges.ULongRange.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.ranges.ULongRange` `@@kotlin.ranges.ULongRange.EMPTY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/ULongRange;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2bda64.  v0:= new `kotlin.ranges.ULongRange$Companion`;
  #L2bda68.  v1:= 0I;
  #L2bda6a.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/ULongRange$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2bda70.  `@@kotlin.ranges.ULongRange.Companion` @type ^`kotlin.ranges.ULongRange$Companion` := v0 @kind object;
  #L2bda74.  v0:= new `kotlin.ranges.ULongRange`;
  #L2bda78.  v3:= -1L;
  #L2bda7c.  v5:= 0L;
  #L2bda80.  v7:= 0I;
  #L2bda82.  v2:= v0 @kind object;
  #L2bda84.  call `<init>`(v2, v3, v5, v7) @signature `Lkotlin/ranges/ULongRange;.<init>:(JJLkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2bda8a.  `@@kotlin.ranges.ULongRange.EMPTY` @type ^`kotlin.ranges.ULongRange` := v0 @kind object;
  #L2bda8e.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.ULongRange` v8 @kind this, `long` v9 , `long` v11 ) @signature `Lkotlin/ranges/ULongRange;.<init>:(JJ)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2bdaa0.  v5:= 1L;
  #L2bdaa4.  v7:= 0I;
  #L2bdaa6.  v0:= v8 @kind object;
  #L2bdaa8.  v1:= v9 @kind wide;
  #L2bdaaa.  v3:= v11 @kind wide;
  #L2bdaac.  call `<init>`(v0, v1, v3, v5, v7) @signature `Lkotlin/ranges/ULongProgression;.<init>:(JJJLkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2bdab2.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.ULongRange` v0 @kind this, `long` v1 , `long` v3 , `kotlin.jvm.internal.DefaultConstructorMarker` v5 @kind object) @signature `Lkotlin/ranges/ULongRange;.<init>:(JJLkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2bdac4.  call `<init>`(v0, v1, v3) @signature `Lkotlin/ranges/ULongRange;.<init>:(JJ)V` @kind direct;
  #L2bdaca.  return @kind void;
}
procedure `kotlin.ranges.ULongRange` `access$getEMPTY$cp`() @signature `Lkotlin/ranges/ULongRange;.access$getEMPTY$cp:()Lkotlin/ranges/ULongRange;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L2bda14.  v0:= `@@kotlin.ranges.ULongRange.EMPTY` @type ^`kotlin.ranges.ULongRange` @kind object;
  #L2bda18.  return v0 @kind object;
}
procedure `boolean` `contains`(`kotlin.ranges.ULongRange` v2 @kind this, `java.lang.Comparable` v3 @kind object) @signature `Lkotlin/ranges/ULongRange;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2bd7e4.  v3:= (`kotlin.ULong`) v3 @kind object;
  #L2bd7e8.  call temp:= `unbox-impl`(v3) @signature `Lkotlin/ULong;.unbox-impl:()J` @kind virtual;
  #L2bd7ee.  v0:= temp @kind wide;
  #L2bd7f0.  call temp:= `contains-VKZWuLQ`(v2, v0) @signature `Lkotlin/ranges/ULongRange;.contains-VKZWuLQ:(J)Z` @kind virtual;
  #L2bd7f6.  v3:= temp;
  #L2bd7f8.  return v3;
}
procedure `boolean` `contains-VKZWuLQ`(`kotlin.ranges.ULongRange` v2 @kind this, `long` v3 ) @signature `Lkotlin/ranges/ULongRange;.contains-VKZWuLQ:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bd80c.  call temp:= `getFirst-s-VKNKU`(v2) @signature `Lkotlin/ranges/ULongProgression;.getFirst-s-VKNKU:()J` @kind virtual;
  #L2bd812.  v0:= temp @kind wide;
  #L2bd814.  call temp:= `ulongCompare`(v0, v3) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L2bd81a.  v0:= temp;
  #L2bd81c.  if v0 > 0 then goto L2bd838;
  #L2bd820.  call temp:= `getLast-s-VKNKU`(v2) @signature `Lkotlin/ranges/ULongProgression;.getLast-s-VKNKU:()J` @kind virtual;
  #L2bd826.  v0:= temp @kind wide;
  #L2bd828.  call temp:= `ulongCompare`(v3, v0) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L2bd82e.  v3:= temp;
  #L2bd830.  if v3 > 0 then goto L2bd838;
  #L2bd834.  v3:= 1I;
  #L2bd836.  goto L2bd83a;
  #L2bd838.  v3:= 0I;
  #L2bd83a.  return v3;
}
procedure `boolean` `equals`(`kotlin.ranges.ULongRange` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlin/ranges/ULongRange;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2bd84c.  v0:= instanceof @variable v6 @type ^`kotlin.ranges.ULongRange` @kind boolean;
  #L2bd850.  if v0 == 0 then goto L2bd8aa;
  #L2bd854.  call temp:= `isEmpty`(v5) @signature `Lkotlin/ranges/ULongRange;.isEmpty:()Z` @kind virtual;
  #L2bd85a.  v0:= temp;
  #L2bd85c.  if v0 == 0 then goto L2bd872;
  #L2bd860.  v0:= v6 @kind object;
  #L2bd862.  v0:= (`kotlin.ranges.ULongRange`) v0 @kind object;
  #L2bd866.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/ULongRange;.isEmpty:()Z` @kind virtual;
  #L2bd86c.  v0:= temp;
  #L2bd86e.  if v0 != 0 then goto L2bd8a6;
  #L2bd872.  call temp:= `getFirst-s-VKNKU`(v5) @signature `Lkotlin/ranges/ULongProgression;.getFirst-s-VKNKU:()J` @kind virtual;
  #L2bd878.  v0:= temp @kind wide;
  #L2bd87a.  v6:= (`kotlin.ranges.ULongRange`) v6 @kind object;
  #L2bd87e.  call temp:= `getFirst-s-VKNKU`(v6) @signature `Lkotlin/ranges/ULongProgression;.getFirst-s-VKNKU:()J` @kind virtual;
  #L2bd884.  v2:= temp @kind wide;
  #L2bd886.  v4:= lcmp(v0, v2);
  #L2bd88a.  if v4 != 0 then goto L2bd8aa;
  #L2bd88e.  call temp:= `getLast-s-VKNKU`(v5) @signature `Lkotlin/ranges/ULongProgression;.getLast-s-VKNKU:()J` @kind virtual;
  #L2bd894.  v0:= temp @kind wide;
  #L2bd896.  call temp:= `getLast-s-VKNKU`(v6) @signature `Lkotlin/ranges/ULongProgression;.getLast-s-VKNKU:()J` @kind virtual;
  #L2bd89c.  v2:= temp @kind wide;
  #L2bd89e.  v6:= lcmp(v0, v2);
  #L2bd8a2.  if v6 != 0 then goto L2bd8aa;
  #L2bd8a6.  v6:= 1I;
  #L2bd8a8.  goto L2bd8ac;
  #L2bd8aa.  v6:= 0I;
  #L2bd8ac.  return v6;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.ULongRange` v2 @kind this) @signature `Lkotlin/ranges/ULongRange;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2bd970.  call temp:= `getEndInclusive-s-VKNKU`(v2) @signature `Lkotlin/ranges/ULongRange;.getEndInclusive-s-VKNKU:()J` @kind virtual;
  #L2bd976.  v0:= temp @kind wide;
  #L2bd978.  call temp:= `box-impl`(v0) @signature `Lkotlin/ULong;.box-impl:(J)Lkotlin/ULong;` @kind static;
  #L2bd97e.  v0:= temp @kind object;
  #L2bd980.  return v0 @kind object;
}
procedure `long` `getEndInclusive-s-VKNKU`(`kotlin.ranges.ULongRange` v2 @kind this) @signature `Lkotlin/ranges/ULongRange;.getEndInclusive-s-VKNKU:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bda2c.  call temp:= `getLast-s-VKNKU`(v2) @signature `Lkotlin/ranges/ULongProgression;.getLast-s-VKNKU:()J` @kind virtual;
  #L2bda32.  v0:= temp @kind wide;
  #L2bda34.  return v0 @kind wide;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.ULongRange` v2 @kind this) @signature `Lkotlin/ranges/ULongRange;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2bd994.  call temp:= `getStart-s-VKNKU`(v2) @signature `Lkotlin/ranges/ULongRange;.getStart-s-VKNKU:()J` @kind virtual;
  #L2bd99a.  v0:= temp @kind wide;
  #L2bd99c.  call temp:= `box-impl`(v0) @signature `Lkotlin/ULong;.box-impl:(J)Lkotlin/ULong;` @kind static;
  #L2bd9a2.  v0:= temp @kind object;
  #L2bd9a4.  return v0 @kind object;
}
procedure `long` `getStart-s-VKNKU`(`kotlin.ranges.ULongRange` v2 @kind this) @signature `Lkotlin/ranges/ULongRange;.getStart-s-VKNKU:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bda48.  call temp:= `getFirst-s-VKNKU`(v2) @signature `Lkotlin/ranges/ULongProgression;.getFirst-s-VKNKU:()J` @kind virtual;
  #L2bda4e.  v0:= temp @kind wide;
  #L2bda50.  return v0 @kind wide;
}
procedure `int` `hashCode`(`kotlin.ranges.ULongRange` v7 @kind this) @signature `Lkotlin/ranges/ULongRange;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2bd8f4.  call temp:= `isEmpty`(v7) @signature `Lkotlin/ranges/ULongRange;.isEmpty:()Z` @kind virtual;
  #L2bd8fa.  v0:= temp;
  #L2bd8fc.  if v0 == 0 then goto L2bd904;
  #L2bd900.  v0:= -1I;
  #L2bd902.  goto L2bd95c;
  #L2bd904.  call temp:= `getFirst-s-VKNKU`(v7) @signature `Lkotlin/ranges/ULongProgression;.getFirst-s-VKNKU:()J` @kind virtual;
  #L2bd90a.  v0:= temp @kind wide;
  #L2bd90c.  call temp:= `getFirst-s-VKNKU`(v7) @signature `Lkotlin/ranges/ULongProgression;.getFirst-s-VKNKU:()J` @kind virtual;
  #L2bd912.  v2:= temp @kind wide;
  #L2bd914.  v4:= 32I;
  #L2bd918.  v2:= v2 ^>> v4 @kind long;
  #L2bd91a.  call temp:= `constructor-impl`(v2) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L2bd920.  v2:= temp @kind wide;
  #L2bd922.  v0:= v0 ^~ v2 @kind long;
  #L2bd924.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L2bd92a.  v0:= temp @kind wide;
  #L2bd92c.  v1:= (`int`) v0 @kind l2i;
  #L2bd92e.  v1:= v1 * 31;
  #L2bd932.  call temp:= `getLast-s-VKNKU`(v7) @signature `Lkotlin/ranges/ULongProgression;.getLast-s-VKNKU:()J` @kind virtual;
  #L2bd938.  v2:= temp @kind wide;
  #L2bd93a.  call temp:= `getLast-s-VKNKU`(v7) @signature `Lkotlin/ranges/ULongProgression;.getLast-s-VKNKU:()J` @kind virtual;
  #L2bd940.  v5:= temp @kind wide;
  #L2bd942.  v4:= v5 ^>> v4 @kind long;
  #L2bd946.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L2bd94c.  v4:= temp @kind wide;
  #L2bd94e.  v2:= v2 ^~ v4 @kind long;
  #L2bd950.  call temp:= `constructor-impl`(v2) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L2bd956.  v2:= temp @kind wide;
  #L2bd958.  v0:= (`int`) v2 @kind l2i;
  #L2bd95a.  v0:= v0 + v1 @kind int;
  #L2bd95c.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.ULongRange` v4 @kind this) @signature `Lkotlin/ranges/ULongRange;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bd8c0.  call temp:= `getFirst-s-VKNKU`(v4) @signature `Lkotlin/ranges/ULongProgression;.getFirst-s-VKNKU:()J` @kind virtual;
  #L2bd8c6.  v0:= temp @kind wide;
  #L2bd8c8.  call temp:= `getLast-s-VKNKU`(v4) @signature `Lkotlin/ranges/ULongProgression;.getLast-s-VKNKU:()J` @kind virtual;
  #L2bd8ce.  v2:= temp @kind wide;
  #L2bd8d0.  call temp:= `ulongCompare`(v0, v2) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L2bd8d6.  v0:= temp;
  #L2bd8d8.  if v0 <= 0 then goto L2bd8e0;
  #L2bd8dc.  v0:= 1I;
  #L2bd8de.  goto L2bd8e2;
  #L2bd8e0.  v0:= 0I;
  #L2bd8e2.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.ULongRange` v3 @kind this) @signature `Lkotlin/ranges/ULongRange;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bd9b8.  v0:= new `java.lang.StringBuilder`;
  #L2bd9bc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bd9c2.  call temp:= `getFirst-s-VKNKU`(v3) @signature `Lkotlin/ranges/ULongProgression;.getFirst-s-VKNKU:()J` @kind virtual;
  #L2bd9c8.  v1:= temp @kind wide;
  #L2bd9ca.  call temp:= `toString-impl`(v1) @signature `Lkotlin/ULong;.toString-impl:(J)Ljava/lang/String;` @kind static;
  #L2bd9d0.  v1:= temp @kind object;
  #L2bd9d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bd9d8.  v1:= ".." @kind object;
  #L2bd9dc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bd9e2.  call temp:= `getLast-s-VKNKU`(v3) @signature `Lkotlin/ranges/ULongProgression;.getLast-s-VKNKU:()J` @kind virtual;
  #L2bd9e8.  v1:= temp @kind wide;
  #L2bd9ea.  call temp:= `toString-impl`(v1) @signature `Lkotlin/ULong;.toString-impl:(J)Ljava/lang/String;` @kind static;
  #L2bd9f0.  v1:= temp @kind object;
  #L2bd9f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bd9f8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bd9fe.  v0:= temp @kind object;
  #L2bda00.  return v0 @kind object;
}
