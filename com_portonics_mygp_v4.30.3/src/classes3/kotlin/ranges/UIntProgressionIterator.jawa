record `kotlin.ranges.UIntProgressionIterator` @kind class @AccessFlag FINAL extends `kotlin.collections.UIntIterator` @kind class {
  `int` `kotlin.ranges.UIntProgressionIterator.finalElement` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.ranges.UIntProgressionIterator.hasNext` @AccessFlag PRIVATE;
  `int` `kotlin.ranges.UIntProgressionIterator.next` @AccessFlag PRIVATE;
  `int` `kotlin.ranges.UIntProgressionIterator.step` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.UIntProgressionIterator` v3 @kind this, `int` v4 , `int` v5 , `int` v6 ) @signature `Lkotlin/ranges/UIntProgressionIterator;.<init>:(III)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2bccd4.  call `<init>`(v3) @signature `Lkotlin/collections/UIntIterator;.<init>:()V` @kind direct;
  #L2bccda.  v3.`kotlin.ranges.UIntProgressionIterator.finalElement` @type ^`int` := v5;
  #L2bccde.  v0:= 1I;
  #L2bcce0.  v1:= 0I;
  #L2bcce2.  call temp:= `uintCompare`(v4, v5) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @kind static;
  #L2bcce8.  v2:= temp;
  #L2bccea.  if v6 <= 0 then goto L2bccf4;
  #L2bccee.  if v2 > 0 then goto L2bccfa;
  #L2bccf2.  goto L2bccfc;
  #L2bccf4.  if v2 < 0 then goto L2bccfa;
  #L2bccf8.  goto L2bccfc;
  #L2bccfa.  v0:= 0I;
  #L2bccfc.  v3.`kotlin.ranges.UIntProgressionIterator.hasNext` @type ^`boolean` := v0 @kind boolean;
  #L2bcd00.  call temp:= `constructor-impl`(v6) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L2bcd06.  v6:= temp;
  #L2bcd08.  v3.`kotlin.ranges.UIntProgressionIterator.step` @type ^`int` := v6;
  #L2bcd0c.  v6:= v3.`kotlin.ranges.UIntProgressionIterator.hasNext` @type ^`boolean` @kind boolean;
  #L2bcd10.  if v6 == 0 then goto L2bcd16;
  #L2bcd14.  goto L2bcd18;
  #L2bcd16.  v4:= v5;
  #L2bcd18.  v3.`kotlin.ranges.UIntProgressionIterator.next` @type ^`int` := v4;
  #L2bcd1c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.UIntProgressionIterator` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `kotlin.jvm.internal.DefaultConstructorMarker` v4 @kind object) @signature `Lkotlin/ranges/UIntProgressionIterator;.<init>:(IIILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2bcd30.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/ranges/UIntProgressionIterator;.<init>:(III)V` @kind direct;
  #L2bcd36.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.ranges.UIntProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/UIntProgressionIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bcc70.  v0:= v1.`kotlin.ranges.UIntProgressionIterator.hasNext` @type ^`boolean` @kind boolean;
  #L2bcc74.  return v0;
}
procedure `int` `nextUInt-pVg5ArA`(`kotlin.ranges.UIntProgressionIterator` v2 @kind this) @signature `Lkotlin/ranges/UIntProgressionIterator;.nextUInt-pVg5ArA:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bcc88.  v0:= v2.`kotlin.ranges.UIntProgressionIterator.next` @type ^`int`;
  #L2bcc8c.  v1:= v2.`kotlin.ranges.UIntProgressionIterator.finalElement` @type ^`int`;
  #L2bcc90.  if v0 != v1 then goto L2bccb0;
  #L2bcc94.  v1:= v2.`kotlin.ranges.UIntProgressionIterator.hasNext` @type ^`boolean` @kind boolean;
  #L2bcc98.  if v1 == 0 then goto L2bcca4;
  #L2bcc9c.  v1:= 0I;
  #L2bcc9e.  v2.`kotlin.ranges.UIntProgressionIterator.hasNext` @type ^`boolean` := v1 @kind boolean;
  #L2bcca2.  goto L2bccc2;
  #L2bcca4.  v0:= new `java.util.NoSuchElementException`;
  #L2bcca8.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2bccae.  throw v0;
  #L2bccb0.  v1:= v2.`kotlin.ranges.UIntProgressionIterator.step` @type ^`int`;
  #L2bccb4.  v1:= v1 + v0 @kind int;
  #L2bccb6.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L2bccbc.  v1:= temp;
  #L2bccbe.  v2.`kotlin.ranges.UIntProgressionIterator.next` @type ^`int` := v1;
  #L2bccc2.  return v0;
}
