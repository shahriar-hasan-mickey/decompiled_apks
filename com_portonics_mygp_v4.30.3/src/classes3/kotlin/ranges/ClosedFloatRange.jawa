record `kotlin.ranges.ClosedFloatRange` @kind class @AccessFlag FINAL extends `kotlin.ranges.ClosedFloatingPointRange` @kind interface {
  `float` `kotlin.ranges.ClosedFloatRange._endInclusive` @AccessFlag PRIVATE_FINAL;
  `float` `kotlin.ranges.ClosedFloatRange._start` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.ClosedFloatRange` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lkotlin/ranges/ClosedFloatRange;.<init>:(FF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2bbb30.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bbb36.  v0.`kotlin.ranges.ClosedFloatRange._start` @type ^`float` := v1;
  #L2bbb3a.  v0.`kotlin.ranges.ClosedFloatRange._endInclusive` @type ^`float` := v2;
  #L2bbb3e.  return @kind void;
}
procedure `boolean` `contains`(`kotlin.ranges.ClosedFloatRange` v1 @kind this, `float` v2 ) @signature `Lkotlin/ranges/ClosedFloatRange;.contains:(F)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bb8d8.  v0:= v1.`kotlin.ranges.ClosedFloatRange._start` @type ^`float`;
  #L2bb8dc.  v0:= fcmpl(v2, v0);
  #L2bb8e0.  if v0 < 0 then goto L2bb8f4;
  #L2bb8e4.  v0:= v1.`kotlin.ranges.ClosedFloatRange._endInclusive` @type ^`float`;
  #L2bb8e8.  v2:= fcmpg(v2, v0);
  #L2bb8ec.  if v2 > 0 then goto L2bb8f4;
  #L2bb8f0.  v2:= 1I;
  #L2bb8f2.  goto L2bb8f6;
  #L2bb8f4.  v2:= 0I;
  #L2bb8f6.  return v2;
}
procedure `boolean` `contains`(`kotlin.ranges.ClosedFloatRange` v0 @kind this, `java.lang.Comparable` v1 @kind object) @signature `Lkotlin/ranges/ClosedFloatRange;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2bb908.  v1:= (`java.lang.Number`) v1 @kind object;
  #L2bb90c.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L2bb912.  v1:= temp;
  #L2bb914.  call temp:= `contains`(v0, v1) @signature `Lkotlin/ranges/ClosedFloatRange;.contains:(F)Z` @kind virtual;
  #L2bb91a.  v1:= temp;
  #L2bb91c.  return v1;
}
procedure `boolean` `equals`(`kotlin.ranges.ClosedFloatRange` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlin/ranges/ClosedFloatRange;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bb930.  v0:= instanceof @variable v5 @type ^`kotlin.ranges.ClosedFloatRange` @kind boolean;
  #L2bb934.  v1:= 1I;
  #L2bb936.  v2:= 0I;
  #L2bb938.  if v0 == 0 then goto L2bb994;
  #L2bb93c.  call temp:= `isEmpty`(v4) @signature `Lkotlin/ranges/ClosedFloatRange;.isEmpty:()Z` @kind virtual;
  #L2bb942.  v0:= temp;
  #L2bb944.  if v0 == 0 then goto L2bb95a;
  #L2bb948.  v0:= v5 @kind object;
  #L2bb94a.  v0:= (`kotlin.ranges.ClosedFloatRange`) v0 @kind object;
  #L2bb94e.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/ClosedFloatRange;.isEmpty:()Z` @kind virtual;
  #L2bb954.  v0:= temp;
  #L2bb956.  if v0 != 0 then goto L2bb996;
  #L2bb95a.  v0:= v4.`kotlin.ranges.ClosedFloatRange._start` @type ^`float`;
  #L2bb95e.  v5:= (`kotlin.ranges.ClosedFloatRange`) v5 @kind object;
  #L2bb962.  v3:= v5.`kotlin.ranges.ClosedFloatRange._start` @type ^`float`;
  #L2bb966.  v0:= fcmpg(v0, v3);
  #L2bb96a.  if v0 != 0 then goto L2bb972;
  #L2bb96e.  v0:= 1I;
  #L2bb970.  goto L2bb974;
  #L2bb972.  v0:= 0I;
  #L2bb974.  if v0 == 0 then goto L2bb994;
  #L2bb978.  v0:= v4.`kotlin.ranges.ClosedFloatRange._endInclusive` @type ^`float`;
  #L2bb97c.  v5:= v5.`kotlin.ranges.ClosedFloatRange._endInclusive` @type ^`float`;
  #L2bb980.  v5:= fcmpg(v0, v5);
  #L2bb984.  if v5 != 0 then goto L2bb98c;
  #L2bb988.  v5:= 1I;
  #L2bb98a.  goto L2bb98e;
  #L2bb98c.  v5:= 0I;
  #L2bb98e.  if v5 == 0 then goto L2bb994;
  #L2bb992.  goto L2bb996;
  #L2bb994.  v1:= 0I;
  #L2bb996.  return v1;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.ClosedFloatRange` v1 @kind this) @signature `Lkotlin/ranges/ClosedFloatRange;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2bba74.  call temp:= `getEndInclusive`(v1) @signature `Lkotlin/ranges/ClosedFloatRange;.getEndInclusive:()Ljava/lang/Float;` @kind virtual;
  #L2bba7a.  v0:= temp @kind object;
  #L2bba7c.  return v0 @kind object;
}
procedure `java.lang.Float` `getEndInclusive`(`kotlin.ranges.ClosedFloatRange` v1 @kind this) @signature `Lkotlin/ranges/ClosedFloatRange;.getEndInclusive:()Ljava/lang/Float;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bbaac.  v0:= v1.`kotlin.ranges.ClosedFloatRange._endInclusive` @type ^`float`;
  #L2bbab0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L2bbab6.  v0:= temp @kind object;
  #L2bbab8.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.ClosedFloatRange` v1 @kind this) @signature `Lkotlin/ranges/ClosedFloatRange;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2bba90.  call temp:= `getStart`(v1) @signature `Lkotlin/ranges/ClosedFloatRange;.getStart:()Ljava/lang/Float;` @kind virtual;
  #L2bba96.  v0:= temp @kind object;
  #L2bba98.  return v0 @kind object;
}
procedure `java.lang.Float` `getStart`(`kotlin.ranges.ClosedFloatRange` v1 @kind this) @signature `Lkotlin/ranges/ClosedFloatRange;.getStart:()Ljava/lang/Float;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bbacc.  v0:= v1.`kotlin.ranges.ClosedFloatRange._start` @type ^`float`;
  #L2bbad0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L2bbad6.  v0:= temp @kind object;
  #L2bbad8.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.ClosedFloatRange` v2 @kind this) @signature `Lkotlin/ranges/ClosedFloatRange;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bba24.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/ClosedFloatRange;.isEmpty:()Z` @kind virtual;
  #L2bba2a.  v0:= temp;
  #L2bba2c.  if v0 == 0 then goto L2bba34;
  #L2bba30.  v0:= -1I;
  #L2bba32.  goto L2bba62;
  #L2bba34.  v0:= v2.`kotlin.ranges.ClosedFloatRange._start` @type ^`float`;
  #L2bba38.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L2bba3e.  v0:= temp @kind object;
  #L2bba40.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2bba46.  v0:= temp;
  #L2bba48.  v0:= v0 * 31;
  #L2bba4c.  v1:= v2.`kotlin.ranges.ClosedFloatRange._endInclusive` @type ^`float`;
  #L2bba50.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L2bba56.  v1:= temp @kind object;
  #L2bba58.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2bba5e.  v1:= temp;
  #L2bba60.  v0:= v0 + v1 @kind int;
  #L2bba62.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.ClosedFloatRange` v2 @kind this) @signature `Lkotlin/ranges/ClosedFloatRange;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bb9a8.  v0:= v2.`kotlin.ranges.ClosedFloatRange._start` @type ^`float`;
  #L2bb9ac.  v1:= v2.`kotlin.ranges.ClosedFloatRange._endInclusive` @type ^`float`;
  #L2bb9b0.  v0:= fcmpg(v0, v1);
  #L2bb9b4.  if v0 <= 0 then goto L2bb9bc;
  #L2bb9b8.  v0:= 1I;
  #L2bb9ba.  goto L2bb9be;
  #L2bb9bc.  v0:= 0I;
  #L2bb9be.  return v0;
}
procedure `boolean` `lessThanOrEquals`(`kotlin.ranges.ClosedFloatRange` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lkotlin/ranges/ClosedFloatRange;.lessThanOrEquals:(FF)Z` @AccessFlag PUBLIC {
    temp;

  #L2bb9d0.  v1:= fcmpg(v1, v2);
  #L2bb9d4.  if v1 > 0 then goto L2bb9dc;
  #L2bb9d8.  v1:= 1I;
  #L2bb9da.  goto L2bb9de;
  #L2bb9dc.  v1:= 0I;
  #L2bb9de.  return v1;
}
procedure `boolean` `lessThanOrEquals`(`kotlin.ranges.ClosedFloatRange` v0 @kind this, `java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lkotlin/ranges/ClosedFloatRange;.lessThanOrEquals:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2bb9f0.  v1:= (`java.lang.Number`) v1 @kind object;
  #L2bb9f4.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L2bb9fa.  v1:= temp;
  #L2bb9fc.  v2:= (`java.lang.Number`) v2 @kind object;
  #L2bba00.  call temp:= `floatValue`(v2) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L2bba06.  v2:= temp;
  #L2bba08.  call temp:= `lessThanOrEquals`(v0, v1, v2) @signature `Lkotlin/ranges/ClosedFloatRange;.lessThanOrEquals:(FF)Z` @kind virtual;
  #L2bba0e.  v1:= temp;
  #L2bba10.  return v1;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.ClosedFloatRange` v2 @kind this) @signature `Lkotlin/ranges/ClosedFloatRange;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bbaec.  v0:= new `java.lang.StringBuilder`;
  #L2bbaf0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bbaf6.  v1:= v2.`kotlin.ranges.ClosedFloatRange._start` @type ^`float`;
  #L2bbafa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bbb00.  v1:= ".." @kind object;
  #L2bbb04.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bbb0a.  v1:= v2.`kotlin.ranges.ClosedFloatRange._endInclusive` @type ^`float`;
  #L2bbb0e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bbb14.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bbb1a.  v0:= temp @kind object;
  #L2bbb1c.  return v0 @kind object;
}
