record `kotlin.ranges.CharProgressionIterator` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.CharIterator` @kind class {
  `int` `kotlin.ranges.CharProgressionIterator.finalElement` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.ranges.CharProgressionIterator.hasNext` @AccessFlag PRIVATE;
  `int` `kotlin.ranges.CharProgressionIterator.next` @AccessFlag PRIVATE;
  `int` `kotlin.ranges.CharProgressionIterator.step` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.CharProgressionIterator` v2 @kind this, `char` v3 , `char` v4 , `int` v5 ) @signature `Lkotlin/ranges/CharProgressionIterator;.<init>:(CCI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2bb0b8.  call `<init>`(v2) @signature `Lkotlin/collections/CharIterator;.<init>:()V` @kind direct;
  #L2bb0be.  v2.`kotlin.ranges.CharProgressionIterator.step` @type ^`int` := v5;
  #L2bb0c2.  v2.`kotlin.ranges.CharProgressionIterator.finalElement` @type ^`int` := v4;
  #L2bb0c6.  v0:= 1I;
  #L2bb0c8.  v1:= 0I;
  #L2bb0ca.  if v5 <= 0 then goto L2bb0dc;
  #L2bb0ce.  call temp:= `compare`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L2bb0d4.  v5:= temp;
  #L2bb0d6.  if v5 > 0 then goto L2bb0ea;
  #L2bb0da.  goto L2bb0ec;
  #L2bb0dc.  call temp:= `compare`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L2bb0e2.  v5:= temp;
  #L2bb0e4.  if v5 < 0 then goto L2bb0ea;
  #L2bb0e8.  goto L2bb0ec;
  #L2bb0ea.  v0:= 0I;
  #L2bb0ec.  v2.`kotlin.ranges.CharProgressionIterator.hasNext` @type ^`boolean` := v0 @kind boolean;
  #L2bb0f0.  if v0 == 0 then goto L2bb0f6;
  #L2bb0f4.  goto L2bb0f8;
  #L2bb0f6.  v3:= v4;
  #L2bb0f8.  v2.`kotlin.ranges.CharProgressionIterator.next` @type ^`int` := v3;
  #L2bb0fc.  return @kind void;
}
procedure `int` `getStep`(`kotlin.ranges.CharProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/CharProgressionIterator;.getStep:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bb0a0.  v0:= v1.`kotlin.ranges.CharProgressionIterator.step` @type ^`int`;
  #L2bb0a4.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.ranges.CharProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/CharProgressionIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bb040.  v0:= v1.`kotlin.ranges.CharProgressionIterator.hasNext` @type ^`boolean` @kind boolean;
  #L2bb044.  return v0;
}
procedure `char` `nextChar`(`kotlin.ranges.CharProgressionIterator` v2 @kind this) @signature `Lkotlin/ranges/CharProgressionIterator;.nextChar:()C` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bb058.  v0:= v2.`kotlin.ranges.CharProgressionIterator.next` @type ^`int`;
  #L2bb05c.  v1:= v2.`kotlin.ranges.CharProgressionIterator.finalElement` @type ^`int`;
  #L2bb060.  if v0 != v1 then goto L2bb080;
  #L2bb064.  v1:= v2.`kotlin.ranges.CharProgressionIterator.hasNext` @type ^`boolean` @kind boolean;
  #L2bb068.  if v1 == 0 then goto L2bb074;
  #L2bb06c.  v1:= 0I;
  #L2bb06e.  v2.`kotlin.ranges.CharProgressionIterator.hasNext` @type ^`boolean` := v1 @kind boolean;
  #L2bb072.  goto L2bb08a;
  #L2bb074.  v0:= new `java.util.NoSuchElementException`;
  #L2bb078.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2bb07e.  throw v0;
  #L2bb080.  v1:= v2.`kotlin.ranges.CharProgressionIterator.step` @type ^`int`;
  #L2bb084.  v1:= v1 + v0 @kind int;
  #L2bb086.  v2.`kotlin.ranges.CharProgressionIterator.next` @type ^`int` := v1;
  #L2bb08a.  v0:= (`char`) v0 @kind i2c;
  #L2bb08c.  return v0;
}
