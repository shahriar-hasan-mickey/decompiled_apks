record `kotlin.ranges.ClosedDoubleRange` @kind class @AccessFlag FINAL extends `kotlin.ranges.ClosedFloatingPointRange` @kind interface {
  `double` `kotlin.ranges.ClosedDoubleRange._endInclusive` @AccessFlag PRIVATE_FINAL;
  `double` `kotlin.ranges.ClosedDoubleRange._start` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.ClosedDoubleRange` v0 @kind this, `double` v1 , `double` v3 ) @signature `Lkotlin/ranges/ClosedDoubleRange;.<init>:(DD)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2bb8b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bb8be.  v0.`kotlin.ranges.ClosedDoubleRange._start` @type ^`double` := v1 @kind wide;
  #L2bb8c2.  v0.`kotlin.ranges.ClosedDoubleRange._endInclusive` @type ^`double` := v3 @kind wide;
  #L2bb8c6.  return @kind void;
}
procedure `boolean` `contains`(`kotlin.ranges.ClosedDoubleRange` v3 @kind this, `double` v4 ) @signature `Lkotlin/ranges/ClosedDoubleRange;.contains:(D)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bb660.  v0:= v3.`kotlin.ranges.ClosedDoubleRange._start` @type ^`double` @kind wide;
  #L2bb664.  v2:= dcmpl(v4, v0);
  #L2bb668.  if v2 < 0 then goto L2bb67c;
  #L2bb66c.  v0:= v3.`kotlin.ranges.ClosedDoubleRange._endInclusive` @type ^`double` @kind wide;
  #L2bb670.  v2:= dcmpg(v4, v0);
  #L2bb674.  if v2 > 0 then goto L2bb67c;
  #L2bb678.  v4:= 1I;
  #L2bb67a.  goto L2bb67e;
  #L2bb67c.  v4:= 0I;
  #L2bb67e.  return v4;
}
procedure `boolean` `contains`(`kotlin.ranges.ClosedDoubleRange` v2 @kind this, `java.lang.Comparable` v3 @kind object) @signature `Lkotlin/ranges/ClosedDoubleRange;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2bb690.  v3:= (`java.lang.Number`) v3 @kind object;
  #L2bb694.  call temp:= `doubleValue`(v3) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L2bb69a.  v0:= temp @kind wide;
  #L2bb69c.  call temp:= `contains`(v2, v0) @signature `Lkotlin/ranges/ClosedDoubleRange;.contains:(D)Z` @kind virtual;
  #L2bb6a2.  v3:= temp;
  #L2bb6a4.  return v3;
}
procedure `boolean` `equals`(`kotlin.ranges.ClosedDoubleRange` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lkotlin/ranges/ClosedDoubleRange;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2bb6b8.  v0:= instanceof @variable v8 @type ^`kotlin.ranges.ClosedDoubleRange` @kind boolean;
  #L2bb6bc.  v1:= 1I;
  #L2bb6be.  v2:= 0I;
  #L2bb6c0.  if v0 == 0 then goto L2bb71c;
  #L2bb6c4.  call temp:= `isEmpty`(v7) @signature `Lkotlin/ranges/ClosedDoubleRange;.isEmpty:()Z` @kind virtual;
  #L2bb6ca.  v0:= temp;
  #L2bb6cc.  if v0 == 0 then goto L2bb6e2;
  #L2bb6d0.  v0:= v8 @kind object;
  #L2bb6d2.  v0:= (`kotlin.ranges.ClosedDoubleRange`) v0 @kind object;
  #L2bb6d6.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/ClosedDoubleRange;.isEmpty:()Z` @kind virtual;
  #L2bb6dc.  v0:= temp;
  #L2bb6de.  if v0 != 0 then goto L2bb71e;
  #L2bb6e2.  v3:= v7.`kotlin.ranges.ClosedDoubleRange._start` @type ^`double` @kind wide;
  #L2bb6e6.  v8:= (`kotlin.ranges.ClosedDoubleRange`) v8 @kind object;
  #L2bb6ea.  v5:= v8.`kotlin.ranges.ClosedDoubleRange._start` @type ^`double` @kind wide;
  #L2bb6ee.  v0:= dcmpg(v3, v5);
  #L2bb6f2.  if v0 != 0 then goto L2bb6fa;
  #L2bb6f6.  v0:= 1I;
  #L2bb6f8.  goto L2bb6fc;
  #L2bb6fa.  v0:= 0I;
  #L2bb6fc.  if v0 == 0 then goto L2bb71c;
  #L2bb700.  v3:= v7.`kotlin.ranges.ClosedDoubleRange._endInclusive` @type ^`double` @kind wide;
  #L2bb704.  v5:= v8.`kotlin.ranges.ClosedDoubleRange._endInclusive` @type ^`double` @kind wide;
  #L2bb708.  v8:= dcmpg(v3, v5);
  #L2bb70c.  if v8 != 0 then goto L2bb714;
  #L2bb710.  v8:= 1I;
  #L2bb712.  goto L2bb716;
  #L2bb714.  v8:= 0I;
  #L2bb716.  if v8 == 0 then goto L2bb71c;
  #L2bb71a.  goto L2bb71e;
  #L2bb71c.  v1:= 0I;
  #L2bb71e.  return v1;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.ClosedDoubleRange` v1 @kind this) @signature `Lkotlin/ranges/ClosedDoubleRange;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2bb7fc.  call temp:= `getEndInclusive`(v1) @signature `Lkotlin/ranges/ClosedDoubleRange;.getEndInclusive:()Ljava/lang/Double;` @kind virtual;
  #L2bb802.  v0:= temp @kind object;
  #L2bb804.  return v0 @kind object;
}
procedure `java.lang.Double` `getEndInclusive`(`kotlin.ranges.ClosedDoubleRange` v2 @kind this) @signature `Lkotlin/ranges/ClosedDoubleRange;.getEndInclusive:()Ljava/lang/Double;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bb834.  v0:= v2.`kotlin.ranges.ClosedDoubleRange._endInclusive` @type ^`double` @kind wide;
  #L2bb838.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L2bb83e.  v0:= temp @kind object;
  #L2bb840.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.ClosedDoubleRange` v1 @kind this) @signature `Lkotlin/ranges/ClosedDoubleRange;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2bb818.  call temp:= `getStart`(v1) @signature `Lkotlin/ranges/ClosedDoubleRange;.getStart:()Ljava/lang/Double;` @kind virtual;
  #L2bb81e.  v0:= temp @kind object;
  #L2bb820.  return v0 @kind object;
}
procedure `java.lang.Double` `getStart`(`kotlin.ranges.ClosedDoubleRange` v2 @kind this) @signature `Lkotlin/ranges/ClosedDoubleRange;.getStart:()Ljava/lang/Double;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bb854.  v0:= v2.`kotlin.ranges.ClosedDoubleRange._start` @type ^`double` @kind wide;
  #L2bb858.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L2bb85e.  v0:= temp @kind object;
  #L2bb860.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.ClosedDoubleRange` v3 @kind this) @signature `Lkotlin/ranges/ClosedDoubleRange;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bb7ac.  call temp:= `isEmpty`(v3) @signature `Lkotlin/ranges/ClosedDoubleRange;.isEmpty:()Z` @kind virtual;
  #L2bb7b2.  v0:= temp;
  #L2bb7b4.  if v0 == 0 then goto L2bb7bc;
  #L2bb7b8.  v0:= -1I;
  #L2bb7ba.  goto L2bb7ea;
  #L2bb7bc.  v0:= v3.`kotlin.ranges.ClosedDoubleRange._start` @type ^`double` @kind wide;
  #L2bb7c0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L2bb7c6.  v0:= temp @kind object;
  #L2bb7c8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2bb7ce.  v0:= temp;
  #L2bb7d0.  v0:= v0 * 31;
  #L2bb7d4.  v1:= v3.`kotlin.ranges.ClosedDoubleRange._endInclusive` @type ^`double` @kind wide;
  #L2bb7d8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L2bb7de.  v1:= temp @kind object;
  #L2bb7e0.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2bb7e6.  v1:= temp;
  #L2bb7e8.  v0:= v0 + v1 @kind int;
  #L2bb7ea.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.ClosedDoubleRange` v5 @kind this) @signature `Lkotlin/ranges/ClosedDoubleRange;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2bb730.  v0:= v5.`kotlin.ranges.ClosedDoubleRange._start` @type ^`double` @kind wide;
  #L2bb734.  v2:= v5.`kotlin.ranges.ClosedDoubleRange._endInclusive` @type ^`double` @kind wide;
  #L2bb738.  v4:= dcmpg(v0, v2);
  #L2bb73c.  if v4 <= 0 then goto L2bb744;
  #L2bb740.  v0:= 1I;
  #L2bb742.  goto L2bb746;
  #L2bb744.  v0:= 0I;
  #L2bb746.  return v0;
}
procedure `boolean` `lessThanOrEquals`(`kotlin.ranges.ClosedDoubleRange` v1 @kind this, `double` v2 , `double` v4 ) @signature `Lkotlin/ranges/ClosedDoubleRange;.lessThanOrEquals:(DD)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bb758.  v0:= dcmpg(v2, v4);
  #L2bb75c.  if v0 > 0 then goto L2bb764;
  #L2bb760.  v2:= 1I;
  #L2bb762.  goto L2bb766;
  #L2bb764.  v2:= 0I;
  #L2bb766.  return v2;
}
procedure `boolean` `lessThanOrEquals`(`kotlin.ranges.ClosedDoubleRange` v2 @kind this, `java.lang.Comparable` v3 @kind object, `java.lang.Comparable` v4 @kind object) @signature `Lkotlin/ranges/ClosedDoubleRange;.lessThanOrEquals:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2bb778.  v3:= (`java.lang.Number`) v3 @kind object;
  #L2bb77c.  call temp:= `doubleValue`(v3) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L2bb782.  v0:= temp @kind wide;
  #L2bb784.  v4:= (`java.lang.Number`) v4 @kind object;
  #L2bb788.  call temp:= `doubleValue`(v4) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L2bb78e.  v3:= temp @kind wide;
  #L2bb790.  call temp:= `lessThanOrEquals`(v2, v0, v3) @signature `Lkotlin/ranges/ClosedDoubleRange;.lessThanOrEquals:(DD)Z` @kind virtual;
  #L2bb796.  v3:= temp;
  #L2bb798.  return v3;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.ClosedDoubleRange` v3 @kind this) @signature `Lkotlin/ranges/ClosedDoubleRange;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bb874.  v0:= new `java.lang.StringBuilder`;
  #L2bb878.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bb87e.  v1:= v3.`kotlin.ranges.ClosedDoubleRange._start` @type ^`double` @kind wide;
  #L2bb882.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bb888.  v1:= ".." @kind object;
  #L2bb88c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bb892.  v1:= v3.`kotlin.ranges.ClosedDoubleRange._endInclusive` @type ^`double` @kind wide;
  #L2bb896.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bb89c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bb8a2.  v0:= temp @kind object;
  #L2bb8a4.  return v0 @kind object;
}
