record `kotlin.ranges.ClosedRange$DefaultImpls` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `boolean` `contains`(`kotlin.ranges.ClosedRange` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lkotlin/ranges/ClosedRange$DefaultImpls;.contains:(Lkotlin/ranges/ClosedRange;Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2bbbcc.  v0:= "value" @kind object;
  #L2bbbd0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2bbbd6.  call temp:= `getStart`(v1) @signature `Lkotlin/ranges/ClosedRange;.getStart:()Ljava/lang/Comparable;` @kind interface;
  #L2bbbdc.  v0:= temp @kind object;
  #L2bbbde.  call temp:= `compareTo`(v2, v0) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L2bbbe4.  v0:= temp;
  #L2bbbe6.  if v0 < 0 then goto L2bbc02;
  #L2bbbea.  call temp:= `getEndInclusive`(v1) @signature `Lkotlin/ranges/ClosedRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind interface;
  #L2bbbf0.  v1:= temp @kind object;
  #L2bbbf2.  call temp:= `compareTo`(v2, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L2bbbf8.  v1:= temp;
  #L2bbbfa.  if v1 > 0 then goto L2bbc02;
  #L2bbbfe.  v1:= 1I;
  #L2bbc00.  goto L2bbc04;
  #L2bbc02.  v1:= 0I;
  #L2bbc04.  return v1;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.ClosedRange` v1 @kind object) @signature `Lkotlin/ranges/ClosedRange$DefaultImpls;.isEmpty:(Lkotlin/ranges/ClosedRange;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2bbc18.  call temp:= `getStart`(v1) @signature `Lkotlin/ranges/ClosedRange;.getStart:()Ljava/lang/Comparable;` @kind interface;
  #L2bbc1e.  v0:= temp @kind object;
  #L2bbc20.  call temp:= `getEndInclusive`(v1) @signature `Lkotlin/ranges/ClosedRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind interface;
  #L2bbc26.  v1:= temp @kind object;
  #L2bbc28.  call temp:= `compareTo`(v0, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L2bbc2e.  v1:= temp;
  #L2bbc30.  if v1 <= 0 then goto L2bbc38;
  #L2bbc34.  v1:= 1I;
  #L2bbc36.  goto L2bbc3a;
  #L2bbc38.  v1:= 0I;
  #L2bbc3a.  return v1;
}
