record `kotlin.ranges.ULongProgressionIterator` @kind class @AccessFlag FINAL extends `kotlin.collections.ULongIterator` @kind class {
  `long` `kotlin.ranges.ULongProgressionIterator.finalElement` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.ranges.ULongProgressionIterator.hasNext` @AccessFlag PRIVATE;
  `long` `kotlin.ranges.ULongProgressionIterator.next` @AccessFlag PRIVATE;
  `long` `kotlin.ranges.ULongProgressionIterator.step` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.ULongProgressionIterator` v5 @kind this, `long` v6 , `long` v8 , `long` v10 ) @signature `Lkotlin/ranges/ULongProgressionIterator;.<init>:(JJJ)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2bd3dc.  call `<init>`(v5) @signature `Lkotlin/collections/ULongIterator;.<init>:()V` @kind direct;
  #L2bd3e2.  v5.`kotlin.ranges.ULongProgressionIterator.finalElement` @type ^`long` := v8 @kind wide;
  #L2bd3e6.  v0:= 1I;
  #L2bd3e8.  v1:= 0I;
  #L2bd3ea.  v2:= 0L;
  #L2bd3ee.  v4:= lcmp(v10, v2);
  #L2bd3f2.  call temp:= `ulongCompare`(v6, v8) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L2bd3f8.  v2:= temp;
  #L2bd3fa.  if v4 <= 0 then goto L2bd404;
  #L2bd3fe.  if v2 > 0 then goto L2bd40a;
  #L2bd402.  goto L2bd40c;
  #L2bd404.  if v2 < 0 then goto L2bd40a;
  #L2bd408.  goto L2bd40c;
  #L2bd40a.  v0:= 0I;
  #L2bd40c.  v5.`kotlin.ranges.ULongProgressionIterator.hasNext` @type ^`boolean` := v0 @kind boolean;
  #L2bd410.  call temp:= `constructor-impl`(v10) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L2bd416.  v10:= temp @kind wide;
  #L2bd418.  v5.`kotlin.ranges.ULongProgressionIterator.step` @type ^`long` := v10 @kind wide;
  #L2bd41c.  v10:= v5.`kotlin.ranges.ULongProgressionIterator.hasNext` @type ^`boolean` @kind boolean;
  #L2bd420.  if v10 == 0 then goto L2bd426;
  #L2bd424.  goto L2bd428;
  #L2bd426.  v6:= v8 @kind wide;
  #L2bd428.  v5.`kotlin.ranges.ULongProgressionIterator.next` @type ^`long` := v6 @kind wide;
  #L2bd42c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.ULongProgressionIterator` v0 @kind this, `long` v1 , `long` v3 , `long` v5 , `kotlin.jvm.internal.DefaultConstructorMarker` v7 @kind object) @signature `Lkotlin/ranges/ULongProgressionIterator;.<init>:(JJJLkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2bd440.  call `<init>`(v0, v1, v3, v5) @signature `Lkotlin/ranges/ULongProgressionIterator;.<init>:(JJJ)V` @kind direct;
  #L2bd446.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.ranges.ULongProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/ULongProgressionIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bd374.  v0:= v1.`kotlin.ranges.ULongProgressionIterator.hasNext` @type ^`boolean` @kind boolean;
  #L2bd378.  return v0;
}
procedure `long` `nextULong-s-VKNKU`(`kotlin.ranges.ULongProgressionIterator` v5 @kind this) @signature `Lkotlin/ranges/ULongProgressionIterator;.nextULong-s-VKNKU:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2bd38c.  v0:= v5.`kotlin.ranges.ULongProgressionIterator.next` @type ^`long` @kind wide;
  #L2bd390.  v2:= v5.`kotlin.ranges.ULongProgressionIterator.finalElement` @type ^`long` @kind wide;
  #L2bd394.  v4:= lcmp(v0, v2);
  #L2bd398.  if v4 != 0 then goto L2bd3b8;
  #L2bd39c.  v2:= v5.`kotlin.ranges.ULongProgressionIterator.hasNext` @type ^`boolean` @kind boolean;
  #L2bd3a0.  if v2 == 0 then goto L2bd3ac;
  #L2bd3a4.  v2:= 0I;
  #L2bd3a6.  v5.`kotlin.ranges.ULongProgressionIterator.hasNext` @type ^`boolean` := v2 @kind boolean;
  #L2bd3aa.  goto L2bd3ca;
  #L2bd3ac.  v0:= new `java.util.NoSuchElementException`;
  #L2bd3b0.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2bd3b6.  throw v0;
  #L2bd3b8.  v2:= v5.`kotlin.ranges.ULongProgressionIterator.step` @type ^`long` @kind wide;
  #L2bd3bc.  v2:= v2 + v0 @kind long;
  #L2bd3be.  call temp:= `constructor-impl`(v2) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L2bd3c4.  v2:= temp @kind wide;
  #L2bd3c6.  v5.`kotlin.ranges.ULongProgressionIterator.next` @type ^`long` := v2 @kind wide;
  #L2bd3ca.  return v0 @kind wide;
}
