record `kotlin.ranges.IntProgressionIterator` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.IntIterator` @kind class {
  `int` `kotlin.ranges.IntProgressionIterator.finalElement` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.ranges.IntProgressionIterator.hasNext` @AccessFlag PRIVATE;
  `int` `kotlin.ranges.IntProgressionIterator.next` @AccessFlag PRIVATE;
  `int` `kotlin.ranges.IntProgressionIterator.step` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.IntProgressionIterator` v2 @kind this, `int` v3 , `int` v4 , `int` v5 ) @signature `Lkotlin/ranges/IntProgressionIterator;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2bbeb8.  call `<init>`(v2) @signature `Lkotlin/collections/IntIterator;.<init>:()V` @kind direct;
  #L2bbebe.  v2.`kotlin.ranges.IntProgressionIterator.step` @type ^`int` := v5;
  #L2bbec2.  v2.`kotlin.ranges.IntProgressionIterator.finalElement` @type ^`int` := v4;
  #L2bbec6.  v0:= 1I;
  #L2bbec8.  v1:= 0I;
  #L2bbeca.  if v5 <= 0 then goto L2bbed4;
  #L2bbece.  if v3 > v4 then goto L2bbeda;
  #L2bbed2.  goto L2bbedc;
  #L2bbed4.  if v3 < v4 then goto L2bbeda;
  #L2bbed8.  goto L2bbedc;
  #L2bbeda.  v0:= 0I;
  #L2bbedc.  v2.`kotlin.ranges.IntProgressionIterator.hasNext` @type ^`boolean` := v0 @kind boolean;
  #L2bbee0.  if v0 == 0 then goto L2bbee6;
  #L2bbee4.  goto L2bbee8;
  #L2bbee6.  v3:= v4;
  #L2bbee8.  v2.`kotlin.ranges.IntProgressionIterator.next` @type ^`int` := v3;
  #L2bbeec.  return @kind void;
}
procedure `int` `getStep`(`kotlin.ranges.IntProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/IntProgressionIterator;.getStep:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bbe5c.  v0:= v1.`kotlin.ranges.IntProgressionIterator.step` @type ^`int`;
  #L2bbe60.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.ranges.IntProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/IntProgressionIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bbe44.  v0:= v1.`kotlin.ranges.IntProgressionIterator.hasNext` @type ^`boolean` @kind boolean;
  #L2bbe48.  return v0;
}
procedure `int` `nextInt`(`kotlin.ranges.IntProgressionIterator` v2 @kind this) @signature `Lkotlin/ranges/IntProgressionIterator;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bbe74.  v0:= v2.`kotlin.ranges.IntProgressionIterator.next` @type ^`int`;
  #L2bbe78.  v1:= v2.`kotlin.ranges.IntProgressionIterator.finalElement` @type ^`int`;
  #L2bbe7c.  if v0 != v1 then goto L2bbe9c;
  #L2bbe80.  v1:= v2.`kotlin.ranges.IntProgressionIterator.hasNext` @type ^`boolean` @kind boolean;
  #L2bbe84.  if v1 == 0 then goto L2bbe90;
  #L2bbe88.  v1:= 0I;
  #L2bbe8a.  v2.`kotlin.ranges.IntProgressionIterator.hasNext` @type ^`boolean` := v1 @kind boolean;
  #L2bbe8e.  goto L2bbea6;
  #L2bbe90.  v0:= new `java.util.NoSuchElementException`;
  #L2bbe94.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2bbe9a.  throw v0;
  #L2bbe9c.  v1:= v2.`kotlin.ranges.IntProgressionIterator.step` @type ^`int`;
  #L2bbea0.  v1:= v1 + v0 @kind int;
  #L2bbea2.  v2.`kotlin.ranges.IntProgressionIterator.next` @type ^`int` := v1;
  #L2bbea6.  return v0;
}
