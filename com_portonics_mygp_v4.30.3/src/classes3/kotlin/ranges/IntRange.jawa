record `kotlin.ranges.IntRange` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.ranges.IntProgression` @kind class, `kotlin.ranges.ClosedRange` @kind interface {
}
global `kotlin.ranges.IntRange$Companion` `@@kotlin.ranges.IntRange.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.ranges.IntRange` `@@kotlin.ranges.IntRange.EMPTY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/IntRange;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2bc3d4.  v0:= new `kotlin.ranges.IntRange$Companion`;
  #L2bc3d8.  v1:= 0I;
  #L2bc3da.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/IntRange$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2bc3e0.  `@@kotlin.ranges.IntRange.Companion` @type ^`kotlin.ranges.IntRange$Companion` := v0 @kind object;
  #L2bc3e4.  v0:= new `kotlin.ranges.IntRange`;
  #L2bc3e8.  v1:= 1I;
  #L2bc3ea.  v2:= 0I;
  #L2bc3ec.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L2bc3f2.  `@@kotlin.ranges.IntRange.EMPTY` @type ^`kotlin.ranges.IntRange` := v0 @kind object;
  #L2bc3f6.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.IntRange` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2bc408.  v0:= 1I;
  #L2bc40a.  call `<init>`(v1, v2, v3, v0) @signature `Lkotlin/ranges/IntProgression;.<init>:(III)V` @kind direct;
  #L2bc410.  return @kind void;
}
procedure `kotlin.ranges.IntRange` `access$getEMPTY$cp`() @signature `Lkotlin/ranges/IntRange;.access$getEMPTY$cp:()Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L2bc3bc.  v0:= `@@kotlin.ranges.IntRange.EMPTY` @type ^`kotlin.ranges.IntRange` @kind object;
  #L2bc3c0.  return v0 @kind object;
}
procedure `boolean` `contains`(`kotlin.ranges.IntRange` v1 @kind this, `int` v2 ) @signature `Lkotlin/ranges/IntRange;.contains:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bc1c8.  call temp:= `getFirst`(v1) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L2bc1ce.  v0:= temp;
  #L2bc1d0.  if v0 > v2 then goto L2bc1e4;
  #L2bc1d4.  call temp:= `getLast`(v1) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L2bc1da.  v0:= temp;
  #L2bc1dc.  if v2 > v0 then goto L2bc1e4;
  #L2bc1e0.  v2:= 1I;
  #L2bc1e2.  goto L2bc1e6;
  #L2bc1e4.  v2:= 0I;
  #L2bc1e6.  return v2;
}
procedure `boolean` `contains`(`kotlin.ranges.IntRange` v0 @kind this, `java.lang.Comparable` v1 @kind object) @signature `Lkotlin/ranges/IntRange;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2bc1f8.  v1:= (`java.lang.Number`) v1 @kind object;
  #L2bc1fc.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L2bc202.  v1:= temp;
  #L2bc204.  call temp:= `contains`(v0, v1) @signature `Lkotlin/ranges/IntRange;.contains:(I)Z` @kind virtual;
  #L2bc20a.  v1:= temp;
  #L2bc20c.  return v1;
}
procedure `boolean` `equals`(`kotlin.ranges.IntRange` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ranges/IntRange;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bc220.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.IntRange` @kind boolean;
  #L2bc224.  if v0 == 0 then goto L2bc276;
  #L2bc228.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/IntRange;.isEmpty:()Z` @kind virtual;
  #L2bc22e.  v0:= temp;
  #L2bc230.  if v0 == 0 then goto L2bc246;
  #L2bc234.  v0:= v3 @kind object;
  #L2bc236.  v0:= (`kotlin.ranges.IntRange`) v0 @kind object;
  #L2bc23a.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/IntRange;.isEmpty:()Z` @kind virtual;
  #L2bc240.  v0:= temp;
  #L2bc242.  if v0 != 0 then goto L2bc272;
  #L2bc246.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L2bc24c.  v0:= temp;
  #L2bc24e.  v3:= (`kotlin.ranges.IntRange`) v3 @kind object;
  #L2bc252.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L2bc258.  v1:= temp;
  #L2bc25a.  if v0 != v1 then goto L2bc276;
  #L2bc25e.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L2bc264.  v0:= temp;
  #L2bc266.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L2bc26c.  v3:= temp;
  #L2bc26e.  if v0 != v3 then goto L2bc276;
  #L2bc272.  v3:= 1I;
  #L2bc274.  goto L2bc278;
  #L2bc276.  v3:= 0I;
  #L2bc278.  return v3;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.IntRange` v1 @kind this) @signature `Lkotlin/ranges/IntRange;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2bc2f0.  call temp:= `getEndInclusive`(v1) @signature `Lkotlin/ranges/IntRange;.getEndInclusive:()Ljava/lang/Integer;` @kind virtual;
  #L2bc2f6.  v0:= temp @kind object;
  #L2bc2f8.  return v0 @kind object;
}
procedure `java.lang.Integer` `getEndInclusive`(`kotlin.ranges.IntRange` v1 @kind this) @signature `Lkotlin/ranges/IntRange;.getEndInclusive:()Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bc328.  call temp:= `getLast`(v1) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L2bc32e.  v0:= temp;
  #L2bc330.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2bc336.  v0:= temp @kind object;
  #L2bc338.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.IntRange` v1 @kind this) @signature `Lkotlin/ranges/IntRange;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2bc30c.  call temp:= `getStart`(v1) @signature `Lkotlin/ranges/IntRange;.getStart:()Ljava/lang/Integer;` @kind virtual;
  #L2bc312.  v0:= temp @kind object;
  #L2bc314.  return v0 @kind object;
}
procedure `java.lang.Integer` `getStart`(`kotlin.ranges.IntRange` v1 @kind this) @signature `Lkotlin/ranges/IntRange;.getStart:()Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bc34c.  call temp:= `getFirst`(v1) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L2bc352.  v0:= temp;
  #L2bc354.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2bc35a.  v0:= temp @kind object;
  #L2bc35c.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.IntRange` v2 @kind this) @signature `Lkotlin/ranges/IntRange;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bc2b8.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/IntRange;.isEmpty:()Z` @kind virtual;
  #L2bc2be.  v0:= temp;
  #L2bc2c0.  if v0 == 0 then goto L2bc2c8;
  #L2bc2c4.  v0:= -1I;
  #L2bc2c6.  goto L2bc2de;
  #L2bc2c8.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L2bc2ce.  v0:= temp;
  #L2bc2d0.  v0:= v0 * 31;
  #L2bc2d4.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L2bc2da.  v1:= temp;
  #L2bc2dc.  v0:= v0 + v1 @kind int;
  #L2bc2de.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.IntRange` v2 @kind this) @signature `Lkotlin/ranges/IntRange;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bc28c.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L2bc292.  v0:= temp;
  #L2bc294.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L2bc29a.  v1:= temp;
  #L2bc29c.  if v0 <= v1 then goto L2bc2a4;
  #L2bc2a0.  v0:= 1I;
  #L2bc2a2.  goto L2bc2a6;
  #L2bc2a4.  v0:= 0I;
  #L2bc2a6.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.IntRange` v2 @kind this) @signature `Lkotlin/ranges/IntRange;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bc370.  v0:= new `java.lang.StringBuilder`;
  #L2bc374.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bc37a.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L2bc380.  v1:= temp;
  #L2bc382.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc388.  v1:= ".." @kind object;
  #L2bc38c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc392.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L2bc398.  v1:= temp;
  #L2bc39a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc3a0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bc3a6.  v0:= temp @kind object;
  #L2bc3a8.  return v0 @kind object;
}
