record `kotlin.ranges.LongProgression` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `long` `kotlin.ranges.LongProgression.first` @AccessFlag PRIVATE_FINAL;
  `long` `kotlin.ranges.LongProgression.last` @AccessFlag PRIVATE_FINAL;
  `long` `kotlin.ranges.LongProgression.step` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.ranges.LongProgression$Companion` `@@kotlin.ranges.LongProgression.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/LongProgression;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2bc77c.  v0:= new `kotlin.ranges.LongProgression$Companion`;
  #L2bc780.  v1:= 0I;
  #L2bc782.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/LongProgression$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2bc788.  `@@kotlin.ranges.LongProgression.Companion` @type ^`kotlin.ranges.LongProgression$Companion` := v0 @kind object;
  #L2bc78c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.LongProgression` v3 @kind this, `long` v4 , `long` v6 , `long` v8 ) @signature `Lkotlin/ranges/LongProgression;.<init>:(JJJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2bc7a0.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bc7a6.  v0:= 0L;
  #L2bc7aa.  v2:= lcmp(v8, v0);
  #L2bc7ae.  if v2 == 0 then goto L2bc7e4;
  #L2bc7b2.  v0:= -9223372036854775808L;
  #L2bc7b6.  v2:= lcmp(v8, v0);
  #L2bc7ba.  if v2 == 0 then goto L2bc7d4;
  #L2bc7be.  v3.`kotlin.ranges.LongProgression.first` @type ^`long` := v4 @kind wide;
  #L2bc7c2.  call temp:= `getProgressionLastElement`(v4, v6, v8) @signature `Lkotlin/internal/ProgressionUtilKt;.getProgressionLastElement:(JJJ)J` @kind static;
  #L2bc7c8.  v4:= temp @kind wide;
  #L2bc7ca.  v3.`kotlin.ranges.LongProgression.last` @type ^`long` := v4 @kind wide;
  #L2bc7ce.  v3.`kotlin.ranges.LongProgression.step` @type ^`long` := v8 @kind wide;
  #L2bc7d2.  return @kind void;
  #L2bc7d4.  v4:= new `java.lang.IllegalArgumentException`;
  #L2bc7d8.  v5:= "Step must be greater than Long.MIN_VALUE to avoid overflow on negation." @kind object;
  #L2bc7dc.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bc7e2.  throw v4;
  #L2bc7e4.  v4:= new `java.lang.IllegalArgumentException`;
  #L2bc7e8.  v5:= "Step must be non-zero." @kind object;
  #L2bc7ec.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bc7f2.  throw v4;
}
procedure `boolean` `equals`(`kotlin.ranges.LongProgression` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlin/ranges/LongProgression;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2bc544.  v0:= instanceof @variable v6 @type ^`kotlin.ranges.LongProgression` @kind boolean;
  #L2bc548.  if v0 == 0 then goto L2bc5a2;
  #L2bc54c.  call temp:= `isEmpty`(v5) @signature `Lkotlin/ranges/LongProgression;.isEmpty:()Z` @kind virtual;
  #L2bc552.  v0:= temp;
  #L2bc554.  if v0 == 0 then goto L2bc56a;
  #L2bc558.  v0:= v6 @kind object;
  #L2bc55a.  v0:= (`kotlin.ranges.LongProgression`) v0 @kind object;
  #L2bc55e.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/LongProgression;.isEmpty:()Z` @kind virtual;
  #L2bc564.  v0:= temp;
  #L2bc566.  if v0 != 0 then goto L2bc59e;
  #L2bc56a.  v0:= v5.`kotlin.ranges.LongProgression.first` @type ^`long` @kind wide;
  #L2bc56e.  v6:= (`kotlin.ranges.LongProgression`) v6 @kind object;
  #L2bc572.  v2:= v6.`kotlin.ranges.LongProgression.first` @type ^`long` @kind wide;
  #L2bc576.  v4:= lcmp(v0, v2);
  #L2bc57a.  if v4 != 0 then goto L2bc5a2;
  #L2bc57e.  v0:= v5.`kotlin.ranges.LongProgression.last` @type ^`long` @kind wide;
  #L2bc582.  v2:= v6.`kotlin.ranges.LongProgression.last` @type ^`long` @kind wide;
  #L2bc586.  v4:= lcmp(v0, v2);
  #L2bc58a.  if v4 != 0 then goto L2bc5a2;
  #L2bc58e.  v0:= v5.`kotlin.ranges.LongProgression.step` @type ^`long` @kind wide;
  #L2bc592.  v2:= v6.`kotlin.ranges.LongProgression.step` @type ^`long` @kind wide;
  #L2bc596.  v6:= lcmp(v0, v2);
  #L2bc59a.  if v6 != 0 then goto L2bc5a2;
  #L2bc59e.  v6:= 1I;
  #L2bc5a0.  goto L2bc5a4;
  #L2bc5a2.  v6:= 0I;
  #L2bc5a4.  return v6;
}
procedure `long` `getFirst`(`kotlin.ranges.LongProgression` v2 @kind this) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2bc734.  v0:= v2.`kotlin.ranges.LongProgression.first` @type ^`long` @kind wide;
  #L2bc738.  return v0 @kind wide;
}
procedure `long` `getLast`(`kotlin.ranges.LongProgression` v2 @kind this) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2bc74c.  v0:= v2.`kotlin.ranges.LongProgression.last` @type ^`long` @kind wide;
  #L2bc750.  return v0 @kind wide;
}
procedure `long` `getStep`(`kotlin.ranges.LongProgression` v2 @kind this) @signature `Lkotlin/ranges/LongProgression;.getStep:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2bc764.  v0:= v2.`kotlin.ranges.LongProgression.step` @type ^`long` @kind wide;
  #L2bc768.  return v0 @kind wide;
}
procedure `int` `hashCode`(`kotlin.ranges.LongProgression` v9 @kind this) @signature `Lkotlin/ranges/LongProgression;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2bc5fc.  call temp:= `isEmpty`(v9) @signature `Lkotlin/ranges/LongProgression;.isEmpty:()Z` @kind virtual;
  #L2bc602.  v0:= temp;
  #L2bc604.  if v0 == 0 then goto L2bc60c;
  #L2bc608.  v0:= -1I;
  #L2bc60a.  goto L2bc642;
  #L2bc60c.  v0:= 31I;
  #L2bc610.  v0:= (`long`) v0 @kind i2l;
  #L2bc612.  v2:= v9.`kotlin.ranges.LongProgression.first` @type ^`long` @kind wide;
  #L2bc616.  v4:= 32I;
  #L2bc61a.  v5:= v2 ^>> v4 @kind long;
  #L2bc61e.  v2:= v2 ^~ v5 @kind long;
  #L2bc620.  v2:= v2 * v0 @kind long;
  #L2bc624.  v5:= v9.`kotlin.ranges.LongProgression.last` @type ^`long` @kind wide;
  #L2bc628.  v7:= v5 ^>> v4 @kind long;
  #L2bc62c.  v5:= v5 ^~ v7 @kind long;
  #L2bc62e.  v2:= v2 + v5 @kind long;
  #L2bc630.  v0:= v0 * v2 @kind long;
  #L2bc634.  v2:= v9.`kotlin.ranges.LongProgression.step` @type ^`long` @kind wide;
  #L2bc638.  v4:= v2 ^>> v4 @kind long;
  #L2bc63c.  v2:= v2 ^~ v4 @kind long;
  #L2bc63e.  v0:= v0 + v2 @kind long;
  #L2bc640.  v0:= (`int`) v0 @kind l2i;
  #L2bc642.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.LongProgression` v7 @kind this) @signature `Lkotlin/ranges/LongProgression;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2bc5b8.  v0:= v7.`kotlin.ranges.LongProgression.step` @type ^`long` @kind wide;
  #L2bc5bc.  v2:= 1I;
  #L2bc5be.  v3:= 0I;
  #L2bc5c0.  v4:= 0L;
  #L2bc5c4.  v6:= lcmp(v0, v4);
  #L2bc5c8.  v0:= v7.`kotlin.ranges.LongProgression.first` @type ^`long` @kind wide;
  #L2bc5cc.  v4:= v7.`kotlin.ranges.LongProgression.last` @type ^`long` @kind wide;
  #L2bc5d0.  if v6 <= 0 then goto L2bc5de;
  #L2bc5d4.  v6:= lcmp(v0, v4);
  #L2bc5d8.  if v6 <= 0 then goto L2bc5e8;
  #L2bc5dc.  goto L2bc5ea;
  #L2bc5de.  v6:= lcmp(v0, v4);
  #L2bc5e2.  if v6 >= 0 then goto L2bc5e8;
  #L2bc5e6.  goto L2bc5ea;
  #L2bc5e8.  v2:= 0I;
  #L2bc5ea.  return v2;
}
procedure `java.util.Iterator` `iterator`(`kotlin.ranges.LongProgression` v1 @kind this) @signature `Lkotlin/ranges/LongProgression;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2bc6ec.  call temp:= `iterator`(v1) @signature `Lkotlin/ranges/LongProgression;.iterator:()Lkotlin/collections/LongIterator;` @kind virtual;
  #L2bc6f2.  v0:= temp @kind object;
  #L2bc6f4.  return v0 @kind object;
}
procedure `kotlin.collections.LongIterator` `iterator`(`kotlin.ranges.LongProgression` v8 @kind this) @signature `Lkotlin/ranges/LongProgression;.iterator:()Lkotlin/collections/LongIterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2bc708.  v7:= new `kotlin.ranges.LongProgressionIterator`;
  #L2bc70c.  v1:= v8.`kotlin.ranges.LongProgression.first` @type ^`long` @kind wide;
  #L2bc710.  v3:= v8.`kotlin.ranges.LongProgression.last` @type ^`long` @kind wide;
  #L2bc714.  v5:= v8.`kotlin.ranges.LongProgression.step` @type ^`long` @kind wide;
  #L2bc718.  v0:= v7 @kind object;
  #L2bc71a.  call `<init>`(v0, v1, v3, v5) @signature `Lkotlin/ranges/LongProgressionIterator;.<init>:(JJJ)V` @kind direct;
  #L2bc720.  return v7 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.LongProgression` v6 @kind this) @signature `Lkotlin/ranges/LongProgression;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2bc654.  v0:= v6.`kotlin.ranges.LongProgression.step` @type ^`long` @kind wide;
  #L2bc658.  v2:= " step " @kind object;
  #L2bc65c.  v3:= 0L;
  #L2bc660.  v5:= lcmp(v0, v3);
  #L2bc664.  v0:= new `java.lang.StringBuilder`;
  #L2bc668.  if v5 <= 0 then goto L2bc69c;
  #L2bc66c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bc672.  v3:= v6.`kotlin.ranges.LongProgression.first` @type ^`long` @kind wide;
  #L2bc676.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc67c.  v1:= ".." @kind object;
  #L2bc680.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc686.  v3:= v6.`kotlin.ranges.LongProgression.last` @type ^`long` @kind wide;
  #L2bc68a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc690.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc696.  v1:= v6.`kotlin.ranges.LongProgression.step` @type ^`long` @kind wide;
  #L2bc69a.  goto L2bc6cc;
  #L2bc69c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bc6a2.  v3:= v6.`kotlin.ranges.LongProgression.first` @type ^`long` @kind wide;
  #L2bc6a6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc6ac.  v1:= " downTo " @kind object;
  #L2bc6b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc6b6.  v3:= v6.`kotlin.ranges.LongProgression.last` @type ^`long` @kind wide;
  #L2bc6ba.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc6c0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc6c6.  v1:= v6.`kotlin.ranges.LongProgression.step` @type ^`long` @kind wide;
  #L2bc6ca.  v1:= -v1 @kind long;
  #L2bc6cc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc6d2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bc6d8.  v0:= temp @kind object;
  #L2bc6da.  return v0 @kind object;
}
