record `kotlin.ranges.LongProgressionIterator` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.LongIterator` @kind class {
  `long` `kotlin.ranges.LongProgressionIterator.finalElement` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.ranges.LongProgressionIterator.hasNext` @AccessFlag PRIVATE;
  `long` `kotlin.ranges.LongProgressionIterator.next` @AccessFlag PRIVATE;
  `long` `kotlin.ranges.LongProgressionIterator.step` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.LongProgressionIterator` v5 @kind this, `long` v6 , `long` v8 , `long` v10 ) @signature `Lkotlin/ranges/LongProgressionIterator;.<init>:(JJJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2bc4f0.  call `<init>`(v5) @signature `Lkotlin/collections/LongIterator;.<init>:()V` @kind direct;
  #L2bc4f6.  v5.`kotlin.ranges.LongProgressionIterator.step` @type ^`long` := v10 @kind wide;
  #L2bc4fa.  v5.`kotlin.ranges.LongProgressionIterator.finalElement` @type ^`long` := v8 @kind wide;
  #L2bc4fe.  v0:= 1I;
  #L2bc500.  v1:= 0I;
  #L2bc502.  v2:= 0L;
  #L2bc506.  v4:= lcmp(v10, v2);
  #L2bc50a.  v10:= lcmp(v6, v8);
  #L2bc50e.  if v4 <= 0 then goto L2bc518;
  #L2bc512.  if v10 > 0 then goto L2bc51e;
  #L2bc516.  goto L2bc520;
  #L2bc518.  if v10 < 0 then goto L2bc51e;
  #L2bc51c.  goto L2bc520;
  #L2bc51e.  v0:= 0I;
  #L2bc520.  v5.`kotlin.ranges.LongProgressionIterator.hasNext` @type ^`boolean` := v0 @kind boolean;
  #L2bc524.  if v0 == 0 then goto L2bc52a;
  #L2bc528.  goto L2bc52c;
  #L2bc52a.  v6:= v8 @kind wide;
  #L2bc52c.  v5.`kotlin.ranges.LongProgressionIterator.next` @type ^`long` := v6 @kind wide;
  #L2bc530.  return @kind void;
}
procedure `long` `getStep`(`kotlin.ranges.LongProgressionIterator` v2 @kind this) @signature `Lkotlin/ranges/LongProgressionIterator;.getStep:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2bc490.  v0:= v2.`kotlin.ranges.LongProgressionIterator.step` @type ^`long` @kind wide;
  #L2bc494.  return v0 @kind wide;
}
procedure `boolean` `hasNext`(`kotlin.ranges.LongProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/LongProgressionIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bc478.  v0:= v1.`kotlin.ranges.LongProgressionIterator.hasNext` @type ^`boolean` @kind boolean;
  #L2bc47c.  return v0;
}
procedure `long` `nextLong`(`kotlin.ranges.LongProgressionIterator` v5 @kind this) @signature `Lkotlin/ranges/LongProgressionIterator;.nextLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2bc4a8.  v0:= v5.`kotlin.ranges.LongProgressionIterator.next` @type ^`long` @kind wide;
  #L2bc4ac.  v2:= v5.`kotlin.ranges.LongProgressionIterator.finalElement` @type ^`long` @kind wide;
  #L2bc4b0.  v4:= lcmp(v0, v2);
  #L2bc4b4.  if v4 != 0 then goto L2bc4d4;
  #L2bc4b8.  v2:= v5.`kotlin.ranges.LongProgressionIterator.hasNext` @type ^`boolean` @kind boolean;
  #L2bc4bc.  if v2 == 0 then goto L2bc4c8;
  #L2bc4c0.  v2:= 0I;
  #L2bc4c2.  v5.`kotlin.ranges.LongProgressionIterator.hasNext` @type ^`boolean` := v2 @kind boolean;
  #L2bc4c6.  goto L2bc4de;
  #L2bc4c8.  v0:= new `java.util.NoSuchElementException`;
  #L2bc4cc.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L2bc4d2.  throw v0;
  #L2bc4d4.  v2:= v5.`kotlin.ranges.LongProgressionIterator.step` @type ^`long` @kind wide;
  #L2bc4d8.  v2:= v2 + v0 @kind long;
  #L2bc4da.  v5.`kotlin.ranges.LongProgressionIterator.next` @type ^`long` := v2 @kind wide;
  #L2bc4de.  return v0 @kind wide;
}
