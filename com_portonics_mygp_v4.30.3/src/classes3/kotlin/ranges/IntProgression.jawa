record `kotlin.ranges.IntProgression` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int` `kotlin.ranges.IntProgression.first` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.IntProgression.last` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.IntProgression.step` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.ranges.IntProgression$Companion` `@@kotlin.ranges.IntProgression.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/IntProgression;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2bc100.  v0:= new `kotlin.ranges.IntProgression$Companion`;
  #L2bc104.  v1:= 0I;
  #L2bc106.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/IntProgression$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2bc10c.  `@@kotlin.ranges.IntProgression.Companion` @type ^`kotlin.ranges.IntProgression$Companion` := v0 @kind object;
  #L2bc110.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.IntProgression` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lkotlin/ranges/IntProgression;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2bc124.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bc12a.  if v4 == 0 then goto L2bc15c;
  #L2bc12e.  v0:= -2147483648I;
  #L2bc132.  if v4 == v0 then goto L2bc14c;
  #L2bc136.  v1.`kotlin.ranges.IntProgression.first` @type ^`int` := v2;
  #L2bc13a.  call temp:= `getProgressionLastElement`(v2, v3, v4) @signature `Lkotlin/internal/ProgressionUtilKt;.getProgressionLastElement:(III)I` @kind static;
  #L2bc140.  v2:= temp;
  #L2bc142.  v1.`kotlin.ranges.IntProgression.last` @type ^`int` := v2;
  #L2bc146.  v1.`kotlin.ranges.IntProgression.step` @type ^`int` := v4;
  #L2bc14a.  return @kind void;
  #L2bc14c.  v2:= new `java.lang.IllegalArgumentException`;
  #L2bc150.  v3:= "Step must be greater than Int.MIN_VALUE to avoid overflow on negation." @kind object;
  #L2bc154.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bc15a.  throw v2;
  #L2bc15c.  v2:= new `java.lang.IllegalArgumentException`;
  #L2bc160.  v3:= "Step must be non-zero." @kind object;
  #L2bc164.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bc16a.  throw v2;
}
procedure `boolean` `equals`(`kotlin.ranges.IntProgression` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ranges/IntProgression;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bbf00.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.IntProgression` @kind boolean;
  #L2bbf04.  if v0 == 0 then goto L2bbf52;
  #L2bbf08.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/IntProgression;.isEmpty:()Z` @kind virtual;
  #L2bbf0e.  v0:= temp;
  #L2bbf10.  if v0 == 0 then goto L2bbf26;
  #L2bbf14.  v0:= v3 @kind object;
  #L2bbf16.  v0:= (`kotlin.ranges.IntProgression`) v0 @kind object;
  #L2bbf1a.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/IntProgression;.isEmpty:()Z` @kind virtual;
  #L2bbf20.  v0:= temp;
  #L2bbf22.  if v0 != 0 then goto L2bbf4e;
  #L2bbf26.  v0:= v2.`kotlin.ranges.IntProgression.first` @type ^`int`;
  #L2bbf2a.  v3:= (`kotlin.ranges.IntProgression`) v3 @kind object;
  #L2bbf2e.  v1:= v3.`kotlin.ranges.IntProgression.first` @type ^`int`;
  #L2bbf32.  if v0 != v1 then goto L2bbf52;
  #L2bbf36.  v0:= v2.`kotlin.ranges.IntProgression.last` @type ^`int`;
  #L2bbf3a.  v1:= v3.`kotlin.ranges.IntProgression.last` @type ^`int`;
  #L2bbf3e.  if v0 != v1 then goto L2bbf52;
  #L2bbf42.  v0:= v2.`kotlin.ranges.IntProgression.step` @type ^`int`;
  #L2bbf46.  v3:= v3.`kotlin.ranges.IntProgression.step` @type ^`int`;
  #L2bbf4a.  if v0 != v3 then goto L2bbf52;
  #L2bbf4e.  v3:= 1I;
  #L2bbf50.  goto L2bbf54;
  #L2bbf52.  v3:= 0I;
  #L2bbf54.  return v3;
}
procedure `int` `getFirst`(`kotlin.ranges.IntProgression` v1 @kind this) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bbfa4.  v0:= v1.`kotlin.ranges.IntProgression.first` @type ^`int`;
  #L2bbfa8.  return v0;
}
procedure `int` `getLast`(`kotlin.ranges.IntProgression` v1 @kind this) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bbfbc.  v0:= v1.`kotlin.ranges.IntProgression.last` @type ^`int`;
  #L2bbfc0.  return v0;
}
procedure `int` `getStep`(`kotlin.ranges.IntProgression` v1 @kind this) @signature `Lkotlin/ranges/IntProgression;.getStep:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bbfd4.  v0:= v1.`kotlin.ranges.IntProgression.step` @type ^`int`;
  #L2bbfd8.  return v0;
}
procedure `int` `hashCode`(`kotlin.ranges.IntProgression` v2 @kind this) @signature `Lkotlin/ranges/IntProgression;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bbfec.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/IntProgression;.isEmpty:()Z` @kind virtual;
  #L2bbff2.  v0:= temp;
  #L2bbff4.  if v0 == 0 then goto L2bbffc;
  #L2bbff8.  v0:= -1I;
  #L2bbffa.  goto L2bc014;
  #L2bbffc.  v0:= v2.`kotlin.ranges.IntProgression.first` @type ^`int`;
  #L2bc000.  v0:= v0 * 31;
  #L2bc004.  v1:= v2.`kotlin.ranges.IntProgression.last` @type ^`int`;
  #L2bc008.  v0:= v0 + v1 @kind int;
  #L2bc00a.  v0:= v0 * 31;
  #L2bc00e.  v1:= v2.`kotlin.ranges.IntProgression.step` @type ^`int`;
  #L2bc012.  v0:= v0 + v1 @kind int;
  #L2bc014.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.IntProgression` v4 @kind this) @signature `Lkotlin/ranges/IntProgression;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bbf68.  v0:= v4.`kotlin.ranges.IntProgression.step` @type ^`int`;
  #L2bbf6c.  v1:= 1I;
  #L2bbf6e.  v2:= 0I;
  #L2bbf70.  if v0 <= 0 then goto L2bbf82;
  #L2bbf74.  v0:= v4.`kotlin.ranges.IntProgression.first` @type ^`int`;
  #L2bbf78.  v3:= v4.`kotlin.ranges.IntProgression.last` @type ^`int`;
  #L2bbf7c.  if v0 <= v3 then goto L2bbf90;
  #L2bbf80.  goto L2bbf92;
  #L2bbf82.  v0:= v4.`kotlin.ranges.IntProgression.first` @type ^`int`;
  #L2bbf86.  v3:= v4.`kotlin.ranges.IntProgression.last` @type ^`int`;
  #L2bbf8a.  if v0 >= v3 then goto L2bbf90;
  #L2bbf8e.  goto L2bbf92;
  #L2bbf90.  v1:= 0I;
  #L2bbf92.  return v1;
}
procedure `java.util.Iterator` `iterator`(`kotlin.ranges.IntProgression` v1 @kind this) @signature `Lkotlin/ranges/IntProgression;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2bc0bc.  call temp:= `iterator`(v1) @signature `Lkotlin/ranges/IntProgression;.iterator:()Lkotlin/collections/IntIterator;` @kind virtual;
  #L2bc0c2.  v0:= temp @kind object;
  #L2bc0c4.  return v0 @kind object;
}
procedure `kotlin.collections.IntIterator` `iterator`(`kotlin.ranges.IntProgression` v4 @kind this) @signature `Lkotlin/ranges/IntProgression;.iterator:()Lkotlin/collections/IntIterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bc0d8.  v0:= new `kotlin.ranges.IntProgressionIterator`;
  #L2bc0dc.  v1:= v4.`kotlin.ranges.IntProgression.first` @type ^`int`;
  #L2bc0e0.  v2:= v4.`kotlin.ranges.IntProgression.last` @type ^`int`;
  #L2bc0e4.  v3:= v4.`kotlin.ranges.IntProgression.step` @type ^`int`;
  #L2bc0e8.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/ranges/IntProgressionIterator;.<init>:(III)V` @kind direct;
  #L2bc0ee.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.IntProgression` v3 @kind this) @signature `Lkotlin/ranges/IntProgression;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bc028.  v0:= v3.`kotlin.ranges.IntProgression.step` @type ^`int`;
  #L2bc02c.  v1:= " step " @kind object;
  #L2bc030.  if v0 <= 0 then goto L2bc068;
  #L2bc034.  v0:= new `java.lang.StringBuilder`;
  #L2bc038.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bc03e.  v2:= v3.`kotlin.ranges.IntProgression.first` @type ^`int`;
  #L2bc042.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc048.  v2:= ".." @kind object;
  #L2bc04c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc052.  v2:= v3.`kotlin.ranges.IntProgression.last` @type ^`int`;
  #L2bc056.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc05c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc062.  v1:= v3.`kotlin.ranges.IntProgression.step` @type ^`int`;
  #L2bc066.  goto L2bc09c;
  #L2bc068.  v0:= new `java.lang.StringBuilder`;
  #L2bc06c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bc072.  v2:= v3.`kotlin.ranges.IntProgression.first` @type ^`int`;
  #L2bc076.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc07c.  v2:= " downTo " @kind object;
  #L2bc080.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc086.  v2:= v3.`kotlin.ranges.IntProgression.last` @type ^`int`;
  #L2bc08a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc090.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc096.  v1:= v3.`kotlin.ranges.IntProgression.step` @type ^`int`;
  #L2bc09a.  v1:= -v1 @kind int;
  #L2bc09c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bc0a2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bc0a8.  v0:= temp @kind object;
  #L2bc0aa.  return v0 @kind object;
}
