record `kotlin.ranges.LongRange` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.ranges.LongProgression` @kind class, `kotlin.ranges.ClosedRange` @kind interface {
}
global `kotlin.ranges.LongRange$Companion` `@@kotlin.ranges.LongRange.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.ranges.LongRange` `@@kotlin.ranges.LongRange.EMPTY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/LongRange;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2bca94.  v0:= new `kotlin.ranges.LongRange$Companion`;
  #L2bca98.  v1:= 0I;
  #L2bca9a.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/LongRange$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2bcaa0.  `@@kotlin.ranges.LongRange.Companion` @type ^`kotlin.ranges.LongRange$Companion` := v0 @kind object;
  #L2bcaa4.  v0:= new `kotlin.ranges.LongRange`;
  #L2bcaa8.  v1:= 1L;
  #L2bcaac.  v3:= 0L;
  #L2bcab0.  call `<init>`(v0, v1, v3) @signature `Lkotlin/ranges/LongRange;.<init>:(JJ)V` @kind direct;
  #L2bcab6.  `@@kotlin.ranges.LongRange.EMPTY` @type ^`kotlin.ranges.LongRange` := v0 @kind object;
  #L2bcaba.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.LongRange` v7 @kind this, `long` v8 , `long` v10 ) @signature `Lkotlin/ranges/LongRange;.<init>:(JJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2bcacc.  v5:= 1L;
  #L2bcad0.  v0:= v7 @kind object;
  #L2bcad2.  v1:= v8 @kind wide;
  #L2bcad4.  v3:= v10 @kind wide;
  #L2bcad6.  call `<init>`(v0, v1, v3, v5) @signature `Lkotlin/ranges/LongProgression;.<init>:(JJJ)V` @kind direct;
  #L2bcadc.  return @kind void;
}
procedure `kotlin.ranges.LongRange` `access$getEMPTY$cp`() @signature `Lkotlin/ranges/LongRange;.access$getEMPTY$cp:()Lkotlin/ranges/LongRange;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L2bca7c.  v0:= `@@kotlin.ranges.LongRange.EMPTY` @type ^`kotlin.ranges.LongRange` @kind object;
  #L2bca80.  return v0 @kind object;
}
procedure `boolean` `contains`(`kotlin.ranges.LongRange` v3 @kind this, `long` v4 ) @signature `Lkotlin/ranges/LongRange;.contains:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bc878.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L2bc87e.  v0:= temp @kind wide;
  #L2bc880.  v2:= lcmp(v0, v4);
  #L2bc884.  if v2 > 0 then goto L2bc89c;
  #L2bc888.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L2bc88e.  v0:= temp @kind wide;
  #L2bc890.  v2:= lcmp(v4, v0);
  #L2bc894.  if v2 > 0 then goto L2bc89c;
  #L2bc898.  v4:= 1I;
  #L2bc89a.  goto L2bc89e;
  #L2bc89c.  v4:= 0I;
  #L2bc89e.  return v4;
}
procedure `boolean` `contains`(`kotlin.ranges.LongRange` v2 @kind this, `java.lang.Comparable` v3 @kind object) @signature `Lkotlin/ranges/LongRange;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2bc850.  v3:= (`java.lang.Number`) v3 @kind object;
  #L2bc854.  call temp:= `longValue`(v3) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L2bc85a.  v0:= temp @kind wide;
  #L2bc85c.  call temp:= `contains`(v2, v0) @signature `Lkotlin/ranges/LongRange;.contains:(J)Z` @kind virtual;
  #L2bc862.  v3:= temp;
  #L2bc864.  return v3;
}
procedure `boolean` `equals`(`kotlin.ranges.LongRange` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlin/ranges/LongRange;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2bc8b0.  v0:= instanceof @variable v6 @type ^`kotlin.ranges.LongRange` @kind boolean;
  #L2bc8b4.  if v0 == 0 then goto L2bc90e;
  #L2bc8b8.  call temp:= `isEmpty`(v5) @signature `Lkotlin/ranges/LongRange;.isEmpty:()Z` @kind virtual;
  #L2bc8be.  v0:= temp;
  #L2bc8c0.  if v0 == 0 then goto L2bc8d6;
  #L2bc8c4.  v0:= v6 @kind object;
  #L2bc8c6.  v0:= (`kotlin.ranges.LongRange`) v0 @kind object;
  #L2bc8ca.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/LongRange;.isEmpty:()Z` @kind virtual;
  #L2bc8d0.  v0:= temp;
  #L2bc8d2.  if v0 != 0 then goto L2bc90a;
  #L2bc8d6.  call temp:= `getFirst`(v5) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L2bc8dc.  v0:= temp @kind wide;
  #L2bc8de.  v6:= (`kotlin.ranges.LongRange`) v6 @kind object;
  #L2bc8e2.  call temp:= `getFirst`(v6) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L2bc8e8.  v2:= temp @kind wide;
  #L2bc8ea.  v4:= lcmp(v0, v2);
  #L2bc8ee.  if v4 != 0 then goto L2bc90e;
  #L2bc8f2.  call temp:= `getLast`(v5) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L2bc8f8.  v0:= temp @kind wide;
  #L2bc8fa.  call temp:= `getLast`(v6) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L2bc900.  v2:= temp @kind wide;
  #L2bc902.  v6:= lcmp(v0, v2);
  #L2bc906.  if v6 != 0 then goto L2bc90e;
  #L2bc90a.  v6:= 1I;
  #L2bc90c.  goto L2bc910;
  #L2bc90e.  v6:= 0I;
  #L2bc910.  return v6;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.LongRange` v1 @kind this) @signature `Lkotlin/ranges/LongRange;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2bc9b0.  call temp:= `getEndInclusive`(v1) @signature `Lkotlin/ranges/LongRange;.getEndInclusive:()Ljava/lang/Long;` @kind virtual;
  #L2bc9b6.  v0:= temp @kind object;
  #L2bc9b8.  return v0 @kind object;
}
procedure `java.lang.Long` `getEndInclusive`(`kotlin.ranges.LongRange` v2 @kind this) @signature `Lkotlin/ranges/LongRange;.getEndInclusive:()Ljava/lang/Long;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bc9e8.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L2bc9ee.  v0:= temp @kind wide;
  #L2bc9f0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2bc9f6.  v0:= temp @kind object;
  #L2bc9f8.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.LongRange` v1 @kind this) @signature `Lkotlin/ranges/LongRange;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2bc9cc.  call temp:= `getStart`(v1) @signature `Lkotlin/ranges/LongRange;.getStart:()Ljava/lang/Long;` @kind virtual;
  #L2bc9d2.  v0:= temp @kind object;
  #L2bc9d4.  return v0 @kind object;
}
procedure `java.lang.Long` `getStart`(`kotlin.ranges.LongRange` v2 @kind this) @signature `Lkotlin/ranges/LongRange;.getStart:()Ljava/lang/Long;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bca0c.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L2bca12.  v0:= temp @kind wide;
  #L2bca14.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2bca1a.  v0:= temp @kind object;
  #L2bca1c.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.LongRange` v7 @kind this) @signature `Lkotlin/ranges/LongRange;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2bc954.  call temp:= `isEmpty`(v7) @signature `Lkotlin/ranges/LongRange;.isEmpty:()Z` @kind virtual;
  #L2bc95a.  v0:= temp;
  #L2bc95c.  if v0 == 0 then goto L2bc964;
  #L2bc960.  v0:= -1I;
  #L2bc962.  goto L2bc99e;
  #L2bc964.  v0:= 31I;
  #L2bc968.  v0:= (`long`) v0 @kind i2l;
  #L2bc96a.  call temp:= `getFirst`(v7) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L2bc970.  v2:= temp @kind wide;
  #L2bc972.  call temp:= `getFirst`(v7) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L2bc978.  v4:= temp @kind wide;
  #L2bc97a.  v6:= 32I;
  #L2bc97e.  v4:= v4 ^>> v6 @kind long;
  #L2bc980.  v2:= v2 ^~ v4 @kind long;
  #L2bc982.  v0:= v0 * v2 @kind long;
  #L2bc986.  call temp:= `getLast`(v7) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L2bc98c.  v2:= temp @kind wide;
  #L2bc98e.  call temp:= `getLast`(v7) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L2bc994.  v4:= temp @kind wide;
  #L2bc996.  v4:= v4 ^>> v6 @kind long;
  #L2bc998.  v2:= v2 ^~ v4 @kind long;
  #L2bc99a.  v0:= v0 + v2 @kind long;
  #L2bc99c.  v0:= (`int`) v0 @kind l2i;
  #L2bc99e.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.LongRange` v5 @kind this) @signature `Lkotlin/ranges/LongRange;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2bc924.  call temp:= `getFirst`(v5) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L2bc92a.  v0:= temp @kind wide;
  #L2bc92c.  call temp:= `getLast`(v5) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L2bc932.  v2:= temp @kind wide;
  #L2bc934.  v4:= lcmp(v0, v2);
  #L2bc938.  if v4 <= 0 then goto L2bc940;
  #L2bc93c.  v0:= 1I;
  #L2bc93e.  goto L2bc942;
  #L2bc940.  v0:= 0I;
  #L2bc942.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.LongRange` v3 @kind this) @signature `Lkotlin/ranges/LongRange;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bca30.  v0:= new `java.lang.StringBuilder`;
  #L2bca34.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bca3a.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L2bca40.  v1:= temp @kind wide;
  #L2bca42.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bca48.  v1:= ".." @kind object;
  #L2bca4c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bca52.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L2bca58.  v1:= temp @kind wide;
  #L2bca5a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bca60.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bca66.  v0:= temp @kind object;
  #L2bca68.  return v0 @kind object;
}
