record `kotlin.ranges.ComparableRange` @kind class @AccessFlag  extends `kotlin.ranges.ClosedRange` @kind interface {
  `java.lang.Comparable` `kotlin.ranges.ComparableRange.endInclusive` @AccessFlag PRIVATE_FINAL;
  `java.lang.Comparable` `kotlin.ranges.ComparableRange.start` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.ComparableRange` v1 @kind this, `java.lang.Comparable` v2 @kind object, `java.lang.Comparable` v3 @kind object) @signature `Lkotlin/ranges/ComparableRange;.<init>:(Ljava/lang/Comparable;Ljava/lang/Comparable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2bbdc4.  v0:= "start" @kind object;
  #L2bbdc8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2bbdce.  v0:= "endInclusive" @kind object;
  #L2bbdd2.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2bbdd8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bbdde.  v1.`kotlin.ranges.ComparableRange.start` @type ^`java.lang.Comparable` := v2 @kind object;
  #L2bbde2.  v1.`kotlin.ranges.ComparableRange.endInclusive` @type ^`java.lang.Comparable` := v3 @kind object;
  #L2bbde6.  return @kind void;
}
procedure `boolean` `contains`(`kotlin.ranges.ComparableRange` v0 @kind this, `java.lang.Comparable` v1 @kind object) @signature `Lkotlin/ranges/ComparableRange;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC {
    temp;

  #L2bbc4c.  call temp:= `contains`(v0, v1) @signature `Lkotlin/ranges/ClosedRange$DefaultImpls;.contains:(Lkotlin/ranges/ClosedRange;Ljava/lang/Comparable;)Z` @kind static;
  #L2bbc52.  v1:= temp;
  #L2bbc54.  return v1;
}
procedure `boolean` `equals`(`kotlin.ranges.ComparableRange` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ranges/ComparableRange;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bbc68.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.ComparableRange` @kind boolean;
  #L2bbc6c.  if v0 == 0 then goto L2bbcce;
  #L2bbc70.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/ComparableRange;.isEmpty:()Z` @kind virtual;
  #L2bbc76.  v0:= temp;
  #L2bbc78.  if v0 == 0 then goto L2bbc8e;
  #L2bbc7c.  v0:= v3 @kind object;
  #L2bbc7e.  v0:= (`kotlin.ranges.ComparableRange`) v0 @kind object;
  #L2bbc82.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/ComparableRange;.isEmpty:()Z` @kind virtual;
  #L2bbc88.  v0:= temp;
  #L2bbc8a.  if v0 != 0 then goto L2bbcca;
  #L2bbc8e.  call temp:= `getStart`(v2) @signature `Lkotlin/ranges/ComparableRange;.getStart:()Ljava/lang/Comparable;` @kind virtual;
  #L2bbc94.  v0:= temp @kind object;
  #L2bbc96.  v3:= (`kotlin.ranges.ComparableRange`) v3 @kind object;
  #L2bbc9a.  call temp:= `getStart`(v3) @signature `Lkotlin/ranges/ComparableRange;.getStart:()Ljava/lang/Comparable;` @kind virtual;
  #L2bbca0.  v1:= temp @kind object;
  #L2bbca2.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2bbca8.  v0:= temp;
  #L2bbcaa.  if v0 == 0 then goto L2bbcce;
  #L2bbcae.  call temp:= `getEndInclusive`(v2) @signature `Lkotlin/ranges/ComparableRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind virtual;
  #L2bbcb4.  v0:= temp @kind object;
  #L2bbcb6.  call temp:= `getEndInclusive`(v3) @signature `Lkotlin/ranges/ComparableRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind virtual;
  #L2bbcbc.  v3:= temp @kind object;
  #L2bbcbe.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2bbcc4.  v3:= temp;
  #L2bbcc6.  if v3 == 0 then goto L2bbcce;
  #L2bbcca.  v3:= 1I;
  #L2bbccc.  goto L2bbcd0;
  #L2bbcce.  v3:= 0I;
  #L2bbcd0.  return v3;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.ComparableRange` v1 @kind this) @signature `Lkotlin/ranges/ComparableRange;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bbd48.  v0:= v1.`kotlin.ranges.ComparableRange.endInclusive` @type ^`java.lang.Comparable` @kind object;
  #L2bbd4c.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.ComparableRange` v1 @kind this) @signature `Lkotlin/ranges/ComparableRange;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bbd60.  v0:= v1.`kotlin.ranges.ComparableRange.start` @type ^`java.lang.Comparable` @kind object;
  #L2bbd64.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.ComparableRange` v2 @kind this) @signature `Lkotlin/ranges/ComparableRange;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bbd00.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/ComparableRange;.isEmpty:()Z` @kind virtual;
  #L2bbd06.  v0:= temp;
  #L2bbd08.  if v0 == 0 then goto L2bbd10;
  #L2bbd0c.  v0:= -1I;
  #L2bbd0e.  goto L2bbd36;
  #L2bbd10.  call temp:= `getStart`(v2) @signature `Lkotlin/ranges/ComparableRange;.getStart:()Ljava/lang/Comparable;` @kind virtual;
  #L2bbd16.  v0:= temp @kind object;
  #L2bbd18.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2bbd1e.  v0:= temp;
  #L2bbd20.  v0:= v0 * 31;
  #L2bbd24.  call temp:= `getEndInclusive`(v2) @signature `Lkotlin/ranges/ComparableRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind virtual;
  #L2bbd2a.  v1:= temp @kind object;
  #L2bbd2c.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2bbd32.  v1:= temp;
  #L2bbd34.  v0:= v0 + v1 @kind int;
  #L2bbd36.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.ComparableRange` v1 @kind this) @signature `Lkotlin/ranges/ComparableRange;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bbce4.  call temp:= `isEmpty`(v1) @signature `Lkotlin/ranges/ClosedRange$DefaultImpls;.isEmpty:(Lkotlin/ranges/ClosedRange;)Z` @kind static;
  #L2bbcea.  v0:= temp;
  #L2bbcec.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.ComparableRange` v2 @kind this) @signature `Lkotlin/ranges/ComparableRange;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bbd78.  v0:= new `java.lang.StringBuilder`;
  #L2bbd7c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bbd82.  call temp:= `getStart`(v2) @signature `Lkotlin/ranges/ComparableRange;.getStart:()Ljava/lang/Comparable;` @kind virtual;
  #L2bbd88.  v1:= temp @kind object;
  #L2bbd8a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bbd90.  v1:= ".." @kind object;
  #L2bbd94.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bbd9a.  call temp:= `getEndInclusive`(v2) @signature `Lkotlin/ranges/ComparableRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind virtual;
  #L2bbda0.  v1:= temp @kind object;
  #L2bbda2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bbda8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bbdae.  v0:= temp @kind object;
  #L2bbdb0.  return v0 @kind object;
}
