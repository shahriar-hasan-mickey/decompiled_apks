record `kotlin.reflect.TypesJVMKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.reflect.Type` `access$computeJavaType`(`kotlin.reflect.KType` v0 @kind object, `boolean` v1 ) @signature `Lkotlin/reflect/TypesJVMKt;.access$computeJavaType:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2bf9d8.  call temp:= `computeJavaType`(v0, v1) @signature `Lkotlin/reflect/TypesJVMKt;.computeJavaType:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L2bf9de.  v0:= temp @kind object;
  #L2bf9e0.  return v0 @kind object;
}
procedure `java.lang.String` `access$typeToString`(`java.lang.reflect.Type` v0 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.access$typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L2bf920.  call temp:= `typeToString`(v0) @signature `Lkotlin/reflect/TypesJVMKt;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L2bf926.  v0:= temp @kind object;
  #L2bf928.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `computeJavaType`(`kotlin.reflect.KType` v3 @kind object, `boolean` v4 ) @signature `Lkotlin/reflect/TypesJVMKt;.computeJavaType:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2bfa18.  call temp:= `getClassifier`(v3) @signature `Lkotlin/reflect/KType;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind interface;
  #L2bfa1e.  v0:= temp @kind object;
  #L2bfa20.  v1:= instanceof @variable v0 @type ^`kotlin.reflect.KTypeParameter` @kind boolean;
  #L2bfa24.  if v1 == 0 then goto L2bfa38;
  #L2bfa28.  v3:= new `kotlin.reflect.TypeVariableImpl`;
  #L2bfa2c.  v0:= (`kotlin.reflect.KTypeParameter`) v0 @kind object;
  #L2bfa30.  call `<init>`(v3, v0) @signature `Lkotlin/reflect/TypeVariableImpl;.<init>:(Lkotlin/reflect/KTypeParameter;)V` @kind direct;
  #L2bfa36.  return v3 @kind object;
  #L2bfa38.  v1:= instanceof @variable v0 @type ^`kotlin.reflect.KClass` @kind boolean;
  #L2bfa3c.  if v1 == 0 then goto L2bfb50;
  #L2bfa40.  v0:= (`kotlin.reflect.KClass`) v0 @kind object;
  #L2bfa44.  if v4 == 0 then goto L2bfa52;
  #L2bfa48.  call temp:= `getJavaObjectType`(v0) @signature `Lkotlin/jvm/JvmClassMappingKt;.getJavaObjectType:(Lkotlin/reflect/KClass;)Ljava/lang/Class;` @kind static;
  #L2bfa4e.  v4:= temp @kind object;
  #L2bfa50.  goto L2bfa5a;
  #L2bfa52.  call temp:= `getJavaClass`(v0) @signature `Lkotlin/jvm/JvmClassMappingKt;.getJavaClass:(Lkotlin/reflect/KClass;)Ljava/lang/Class;` @kind static;
  #L2bfa58.  v4:= temp @kind object;
  #L2bfa5a.  call temp:= `getArguments`(v3) @signature `Lkotlin/reflect/KType;.getArguments:()Ljava/util/List;` @kind interface;
  #L2bfa60.  v0:= temp @kind object;
  #L2bfa62.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2bfa68.  v1:= temp;
  #L2bfa6a.  if v1 == 0 then goto L2bfa70;
  #L2bfa6e.  return v4 @kind object;
  #L2bfa70.  call temp:= `isArray`(v4) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L2bfa76.  v1:= temp;
  #L2bfa78.  if v1 == 0 then goto L2bfb46;
  #L2bfa7c.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L2bfa82.  v1:= temp @kind object;
  #L2bfa84.  call temp:= `isPrimitive`(v1) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L2bfa8a.  v1:= temp;
  #L2bfa8c.  if v1 == 0 then goto L2bfa92;
  #L2bfa90.  return v4 @kind object;
  #L2bfa92.  call temp:= `singleOrNull`(v0) @signature `Lkotlin/collections/CollectionsKt;.singleOrNull:(Ljava/util/List;)Ljava/lang/Object;` @kind static;
  #L2bfa98.  v0:= temp @kind object;
  #L2bfa9a.  v0:= (`kotlin.reflect.KTypeProjection`) v0 @kind object;
  #L2bfa9e.  if v0 == 0 then goto L2bfb18;
  #L2bfaa2.  call temp:= `component1`(v0) @signature `Lkotlin/reflect/KTypeProjection;.component1:()Lkotlin/reflect/KVariance;` @kind virtual;
  #L2bfaa8.  v3:= temp @kind object;
  #L2bfaaa.  call temp:= `component2`(v0) @signature `Lkotlin/reflect/KTypeProjection;.component2:()Lkotlin/reflect/KType;` @kind virtual;
  #L2bfab0.  v0:= temp @kind object;
  #L2bfab2.  v1:= -1I;
  #L2bfab4.  if v3 != 0 then goto L2bfabc;
  #L2bfab8.  v3:= -1I;
  #L2bfaba.  goto L2bfacc;
  #L2bfabc.  v2:= `@@kotlin.reflect.TypesJVMKt$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L2bfac0.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2bfac6.  v3:= temp;
  #L2bfac8.  v3:= v2[v3];
  #L2bfacc.  if v3 == v1 then goto L2bfb16;
  #L2bfad0.  v1:= 1I;
  #L2bfad2.  if v3 == v1 then goto L2bfb16;
  #L2bfad6.  v2:= 2I;
  #L2bfad8.  if v3 == v2 then goto L2bfaf0;
  #L2bfadc.  v2:= 3I;
  #L2bfade.  if v3 != v2 then goto L2bfae4;
  #L2bfae2.  goto L2bfaf0;
  #L2bfae4.  v3:= new `kotlin.NoWhenBranchMatchedException`;
  #L2bfae8.  call `<init>`(v3) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L2bfaee.  throw v3;
  #L2bfaf0.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2bfaf6.  v3:= 0I;
  #L2bfaf8.  v2:= 0I;
  #L2bfafa.  call temp:= `computeJavaType$default`(v0, v3, v1, v2) @signature `Lkotlin/reflect/TypesJVMKt;.computeJavaType$default:(Lkotlin/reflect/KType;ZILjava/lang/Object;)Ljava/lang/reflect/Type;` @kind static;
  #L2bfb00.  v3:= temp @kind object;
  #L2bfb02.  v0:= instanceof @variable v3 @type ^`java.lang.Class` @kind boolean;
  #L2bfb06.  if v0 == 0 then goto L2bfb0c;
  #L2bfb0a.  goto L2bfb16;
  #L2bfb0c.  v4:= new `kotlin.reflect.GenericArrayTypeImpl`;
  #L2bfb10.  call `<init>`(v4, v3) @signature `Lkotlin/reflect/GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L2bfb16.  return v4 @kind object;
  #L2bfb18.  v4:= new `java.lang.IllegalArgumentException`;
  #L2bfb1c.  v0:= new `java.lang.StringBuilder`;
  #L2bfb20.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bfb26.  v1:= "kotlin.Array must have exactly one type argument: " @kind object;
  #L2bfb2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bfb30.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bfb36.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bfb3c.  v3:= temp @kind object;
  #L2bfb3e.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bfb44.  throw v4;
  #L2bfb46.  call temp:= `createPossiblyInnerType`(v4, v0) @signature `Lkotlin/reflect/TypesJVMKt;.createPossiblyInnerType:(Ljava/lang/Class;Ljava/util/List;)Ljava/lang/reflect/Type;` @kind static;
  #L2bfb4c.  v3:= temp @kind object;
  #L2bfb4e.  return v3 @kind object;
  #L2bfb50.  v4:= new `java.lang.UnsupportedOperationException`;
  #L2bfb54.  v0:= new `java.lang.StringBuilder`;
  #L2bfb58.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bfb5e.  v1:= "Unsupported type classifier: " @kind object;
  #L2bfb62.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bfb68.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bfb6e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bfb74.  v3:= temp @kind object;
  #L2bfb76.  call `<init>`(v4, v3) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bfb7c.  throw v4;
}
procedure `java.lang.reflect.Type` `computeJavaType$default`(`kotlin.reflect.KType` v0 @kind object, `boolean` v1 , `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.computeJavaType$default:(Lkotlin/reflect/KType;ZILjava/lang/Object;)Ljava/lang/reflect/Type;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2bf9f4.  v2:= v2 ^& 1;
  #L2bf9f8.  if v2 == 0 then goto L2bf9fe;
  #L2bf9fc.  v1:= 0I;
  #L2bf9fe.  call temp:= `computeJavaType`(v0, v1) @signature `Lkotlin/reflect/TypesJVMKt;.computeJavaType:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L2bfa04.  v0:= temp @kind object;
  #L2bfa06.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `createPossiblyInnerType`(`java.lang.Class` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.createPossiblyInnerType:(Ljava/lang/Class;Ljava/util/List;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bfb90.  call temp:= `getDeclaringClass`(v4) @signature `Ljava/lang/Class;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L2bfb96.  v0:= temp @kind object;
  #L2bfb98.  v1:= 10I;
  #L2bfb9c.  if v0 != 0 then goto L2bfbf0;
  #L2bfba0.  v0:= 0I;
  #L2bfba2.  v2:= new `java.util.ArrayList`;
  #L2bfba6.  call temp:= `collectionSizeOrDefault`(v5, v1) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L2bfbac.  v1:= temp;
  #L2bfbae.  call `<init>`(v2, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2bfbb4.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2bfbba.  v5:= temp @kind object;
  #L2bfbbc.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2bfbc2.  v1:= temp;
  #L2bfbc4.  if v1 == 0 then goto L2bfbe4;
  #L2bfbc8.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2bfbce.  v1:= temp @kind object;
  #L2bfbd0.  v1:= (`kotlin.reflect.KTypeProjection`) v1 @kind object;
  #L2bfbd4.  call temp:= `getJavaType`(v1) @signature `Lkotlin/reflect/TypesJVMKt;.getJavaType:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/reflect/Type;` @kind static;
  #L2bfbda.  v1:= temp @kind object;
  #L2bfbdc.  call temp:= `add`(v2, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2bfbe2.  goto L2bfbbc;
  #L2bfbe4.  v5:= new `kotlin.reflect.ParameterizedTypeImpl`;
  #L2bfbe8.  call `<init>`(v5, v4, v0, v2) @signature `Lkotlin/reflect/ParameterizedTypeImpl;.<init>:(Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/List;)V` @kind direct;
  #L2bfbee.  return v5 @kind object;
  #L2bfbf0.  call temp:= `getModifiers`(v4) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L2bfbf6.  v2:= temp;
  #L2bfbf8.  call temp:= `isStatic`(v2) @signature `Ljava/lang/reflect/Modifier;.isStatic:(I)Z` @kind static;
  #L2bfbfe.  v2:= temp;
  #L2bfc00.  if v2 == 0 then goto L2bfc52;
  #L2bfc04.  v2:= new `java.util.ArrayList`;
  #L2bfc08.  call temp:= `collectionSizeOrDefault`(v5, v1) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L2bfc0e.  v1:= temp;
  #L2bfc10.  call `<init>`(v2, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2bfc16.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2bfc1c.  v5:= temp @kind object;
  #L2bfc1e.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2bfc24.  v1:= temp;
  #L2bfc26.  if v1 == 0 then goto L2bfc46;
  #L2bfc2a.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2bfc30.  v1:= temp @kind object;
  #L2bfc32.  v1:= (`kotlin.reflect.KTypeProjection`) v1 @kind object;
  #L2bfc36.  call temp:= `getJavaType`(v1) @signature `Lkotlin/reflect/TypesJVMKt;.getJavaType:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/reflect/Type;` @kind static;
  #L2bfc3c.  v1:= temp @kind object;
  #L2bfc3e.  call temp:= `add`(v2, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2bfc44.  goto L2bfc1e;
  #L2bfc46.  v5:= new `kotlin.reflect.ParameterizedTypeImpl`;
  #L2bfc4a.  call `<init>`(v5, v4, v0, v2) @signature `Lkotlin/reflect/ParameterizedTypeImpl;.<init>:(Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/List;)V` @kind direct;
  #L2bfc50.  return v5 @kind object;
  #L2bfc52.  call temp:= `getTypeParameters`(v4) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L2bfc58.  v2:= temp @kind object;
  #L2bfc5a.  v2:= length @variable v2;
  #L2bfc5c.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2bfc62.  v3:= temp;
  #L2bfc64.  call temp:= `subList`(v5, v2, v3) @signature `Ljava/util/List;.subList:(II)Ljava/util/List;` @kind interface;
  #L2bfc6a.  v3:= temp @kind object;
  #L2bfc6c.  call temp:= `createPossiblyInnerType`(v0, v3) @signature `Lkotlin/reflect/TypesJVMKt;.createPossiblyInnerType:(Ljava/lang/Class;Ljava/util/List;)Ljava/lang/reflect/Type;` @kind static;
  #L2bfc72.  v0:= temp @kind object;
  #L2bfc74.  v3:= 0I;
  #L2bfc76.  call temp:= `subList`(v5, v3, v2) @signature `Ljava/util/List;.subList:(II)Ljava/util/List;` @kind interface;
  #L2bfc7c.  v5:= temp @kind object;
  #L2bfc7e.  v2:= new `java.util.ArrayList`;
  #L2bfc82.  call temp:= `collectionSizeOrDefault`(v5, v1) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L2bfc88.  v1:= temp;
  #L2bfc8a.  call `<init>`(v2, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2bfc90.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2bfc96.  v5:= temp @kind object;
  #L2bfc98.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2bfc9e.  v1:= temp;
  #L2bfca0.  if v1 == 0 then goto L2bfcc0;
  #L2bfca4.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2bfcaa.  v1:= temp @kind object;
  #L2bfcac.  v1:= (`kotlin.reflect.KTypeProjection`) v1 @kind object;
  #L2bfcb0.  call temp:= `getJavaType`(v1) @signature `Lkotlin/reflect/TypesJVMKt;.getJavaType:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/reflect/Type;` @kind static;
  #L2bfcb6.  v1:= temp @kind object;
  #L2bfcb8.  call temp:= `add`(v2, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2bfcbe.  goto L2bfc98;
  #L2bfcc0.  v5:= new `kotlin.reflect.ParameterizedTypeImpl`;
  #L2bfcc4.  call `<init>`(v5, v4, v0, v2) @signature `Lkotlin/reflect/ParameterizedTypeImpl;.<init>:(Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/List;)V` @kind direct;
  #L2bfcca.  return v5 @kind object;
}
procedure `java.lang.reflect.Type` `getJavaType`(`kotlin.reflect.KType` v3 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.getJavaType:(Lkotlin/reflect/KType;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2bfcdc.  v0:= "<this>" @kind object;
  #L2bfce0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2bfce6.  v0:= instanceof @variable v3 @type ^`kotlin.jvm.internal.KTypeBase` @kind boolean;
  #L2bfcea.  if v0 == 0 then goto L2bfd02;
  #L2bfcee.  v0:= v3 @kind object;
  #L2bfcf0.  v0:= (`kotlin.jvm.internal.KTypeBase`) v0 @kind object;
  #L2bfcf4.  call temp:= `getJavaType`(v0) @signature `Lkotlin/jvm/internal/KTypeBase;.getJavaType:()Ljava/lang/reflect/Type;` @kind interface;
  #L2bfcfa.  v0:= temp @kind object;
  #L2bfcfc.  if v0 == 0 then goto L2bfd02;
  #L2bfd00.  return v0 @kind object;
  #L2bfd02.  v0:= 0I;
  #L2bfd04.  v1:= 1I;
  #L2bfd06.  v2:= 0I;
  #L2bfd08.  call temp:= `computeJavaType$default`(v3, v0, v1, v2) @signature `Lkotlin/reflect/TypesJVMKt;.computeJavaType$default:(Lkotlin/reflect/KType;ZILjava/lang/Object;)Ljava/lang/reflect/Type;` @kind static;
  #L2bfd0e.  v3:= temp @kind object;
  #L2bfd10.  return v3 @kind object;
}
procedure `java.lang.reflect.Type` `getJavaType`(`kotlin.reflect.KTypeProjection` v4 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.getJavaType:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bfd24.  call temp:= `getVariance`(v4) @signature `Lkotlin/reflect/KTypeProjection;.getVariance:()Lkotlin/reflect/KVariance;` @kind virtual;
  #L2bfd2a.  v0:= temp @kind object;
  #L2bfd2c.  if v0 != 0 then goto L2bfd3e;
  #L2bfd30.  v4:= `@@kotlin.reflect.WildcardTypeImpl.Companion` @type ^`kotlin.reflect.WildcardTypeImpl$Companion` @kind object;
  #L2bfd34.  call temp:= `getSTAR`(v4) @signature `Lkotlin/reflect/WildcardTypeImpl$Companion;.getSTAR:()Lkotlin/reflect/WildcardTypeImpl;` @kind virtual;
  #L2bfd3a.  v4:= temp @kind object;
  #L2bfd3c.  return v4 @kind object;
  #L2bfd3e.  call temp:= `getType`(v4) @signature `Lkotlin/reflect/KTypeProjection;.getType:()Lkotlin/reflect/KType;` @kind virtual;
  #L2bfd44.  v4:= temp @kind object;
  #L2bfd46.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L2bfd4c.  v1:= `@@kotlin.reflect.TypesJVMKt$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L2bfd50.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2bfd56.  v0:= temp;
  #L2bfd58.  v0:= v1[v0];
  #L2bfd5c.  v1:= 0I;
  #L2bfd5e.  v2:= 1I;
  #L2bfd60.  if v0 == v2 then goto L2bfd9a;
  #L2bfd64.  v3:= 2I;
  #L2bfd66.  if v0 == v3 then goto L2bfd90;
  #L2bfd6a.  v3:= 3I;
  #L2bfd6c.  if v0 != v3 then goto L2bfd84;
  #L2bfd70.  v0:= new `kotlin.reflect.WildcardTypeImpl`;
  #L2bfd74.  call temp:= `computeJavaType`(v4, v2) @signature `Lkotlin/reflect/TypesJVMKt;.computeJavaType:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L2bfd7a.  v4:= temp @kind object;
  #L2bfd7c.  call `<init>`(v0, v4, v1) @signature `Lkotlin/reflect/WildcardTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V` @kind direct;
  #L2bfd82.  goto L2bfdac;
  #L2bfd84.  v4:= new `kotlin.NoWhenBranchMatchedException`;
  #L2bfd88.  call `<init>`(v4) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L2bfd8e.  throw v4;
  #L2bfd90.  call temp:= `computeJavaType`(v4, v2) @signature `Lkotlin/reflect/TypesJVMKt;.computeJavaType:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L2bfd96.  v0:= temp @kind object;
  #L2bfd98.  goto L2bfdac;
  #L2bfd9a.  v0:= new `kotlin.reflect.WildcardTypeImpl`;
  #L2bfd9e.  call temp:= `computeJavaType`(v4, v2) @signature `Lkotlin/reflect/TypesJVMKt;.computeJavaType:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L2bfda4.  v4:= temp @kind object;
  #L2bfda6.  call `<init>`(v0, v1, v4) @signature `Lkotlin/reflect/WildcardTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V` @kind direct;
  #L2bfdac.  return v0 @kind object;
}
procedure `void` `getJavaType$annotations`(`kotlin.reflect.KType` v0 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.getJavaType$annotations:(Lkotlin/reflect/KType;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2bfdc0.  return @kind void;
}
procedure `void` `getJavaType$annotations`(`kotlin.reflect.KTypeProjection` v0 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.getJavaType$annotations:(Lkotlin/reflect/KTypeProjection;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;

  #L2bfdd4.  return @kind void;
}
procedure `java.lang.String` `typeToString`(`java.lang.reflect.Type` v2 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2bf93c.  v0:= instanceof @variable v2 @type ^`java.lang.Class` @kind boolean;
  #L2bf940.  if v0 == 0 then goto L2bf9be;
  #L2bf944.  v0:= v2 @kind object;
  #L2bf946.  v0:= (`java.lang.Class`) v0 @kind object;
  #L2bf94a.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L2bf950.  v1:= temp;
  #L2bf952.  if v1 == 0 then goto L2bf9aa;
  #L2bf956.  v0:= `@@kotlin.reflect.TypesJVMKt$typeToString$unwrap$1.INSTANCE` @type ^`kotlin.reflect.TypesJVMKt$typeToString$unwrap$1` @kind object;
  #L2bf95a.  call temp:= `generateSequence`(v2, v0) @signature `Lkotlin/sequences/SequencesKt;.generateSequence:(Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L2bf960.  v2:= temp @kind object;
  #L2bf962.  v0:= new `java.lang.StringBuilder`;
  #L2bf966.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bf96c.  call temp:= `last`(v2) @signature `Lkotlin/sequences/SequencesKt;.last:(Lkotlin/sequences/Sequence;)Ljava/lang/Object;` @kind static;
  #L2bf972.  v1:= temp @kind object;
  #L2bf974.  v1:= (`java.lang.Class`) v1 @kind object;
  #L2bf978.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2bf97e.  v1:= temp @kind object;
  #L2bf980.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf986.  call temp:= `count`(v2) @signature `Lkotlin/sequences/SequencesKt;.count:(Lkotlin/sequences/Sequence;)I` @kind static;
  #L2bf98c.  v2:= temp;
  #L2bf98e.  v1:= "[]" @kind object;
  #L2bf992.  call temp:= `repeat`(v1, v2) @signature `Lkotlin/text/StringsKt;.repeat:(Ljava/lang/CharSequence;I)Ljava/lang/String;` @kind static;
  #L2bf998.  v2:= temp @kind object;
  #L2bf99a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf9a0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bf9a6.  v2:= temp @kind object;
  #L2bf9a8.  goto L2bf9b2;
  #L2bf9aa.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2bf9b0.  v2:= temp @kind object;
  #L2bf9b2.  v0:= "{\n        if (type.isArr…   } else type.name\n    }" @kind object;
  #L2bf9b6.  call `checkNotNullExpressionValue`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2bf9bc.  goto L2bf9c6;
  #L2bf9be.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bf9c4.  v2:= temp @kind object;
  #L2bf9c6.  return v2 @kind object;
}
