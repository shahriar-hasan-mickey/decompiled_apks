record `kotlin.reflect.WildcardTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.WildcardType` @kind interface, `kotlin.reflect.TypeImpl` @kind interface {
  `java.lang.reflect.Type` `kotlin.reflect.WildcardTypeImpl.lowerBound` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `kotlin.reflect.WildcardTypeImpl.upperBound` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.reflect.WildcardTypeImpl$Companion` `@@kotlin.reflect.WildcardTypeImpl.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.reflect.WildcardTypeImpl` `@@kotlin.reflect.WildcardTypeImpl.STAR` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/reflect/WildcardTypeImpl;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2bffec.  v0:= new `kotlin.reflect.WildcardTypeImpl$Companion`;
  #L2bfff0.  v1:= 0I;
  #L2bfff2.  call `<init>`(v0, v1) @signature `Lkotlin/reflect/WildcardTypeImpl$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2bfff8.  `@@kotlin.reflect.WildcardTypeImpl.Companion` @type ^`kotlin.reflect.WildcardTypeImpl$Companion` := v0 @kind object;
  #L2bfffc.  v0:= new `kotlin.reflect.WildcardTypeImpl`;
  #L2c0000.  call `<init>`(v0, v1, v1) @signature `Lkotlin/reflect/WildcardTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V` @kind direct;
  #L2c0006.  `@@kotlin.reflect.WildcardTypeImpl.STAR` @type ^`kotlin.reflect.WildcardTypeImpl` := v0 @kind object;
  #L2c000a.  return @kind void;
}
procedure `void` `<init>`(`kotlin.reflect.WildcardTypeImpl` v0 @kind this, `java.lang.reflect.Type` v1 @kind object, `java.lang.reflect.Type` v2 @kind object) @signature `Lkotlin/reflect/WildcardTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2c001c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c0022.  v0.`kotlin.reflect.WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v1 @kind object;
  #L2c0026.  v0.`kotlin.reflect.WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v2 @kind object;
  #L2c002a.  return @kind void;
}
procedure `kotlin.reflect.WildcardTypeImpl` `access$getSTAR$cp`() @signature `Lkotlin/reflect/WildcardTypeImpl;.access$getSTAR$cp:()Lkotlin/reflect/WildcardTypeImpl;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L2bffd4.  v0:= `@@kotlin.reflect.WildcardTypeImpl.STAR` @type ^`kotlin.reflect.WildcardTypeImpl` @kind object;
  #L2bffd8.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlin.reflect.WildcardTypeImpl` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/reflect/WildcardTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bfe34.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L2bfe38.  if v0 == 0 then goto L2bfe7c;
  #L2bfe3c.  call temp:= `getUpperBounds`(v2) @signature `Lkotlin/reflect/WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L2bfe42.  v0:= temp @kind object;
  #L2bfe44.  v3:= (`java.lang.reflect.WildcardType`) v3 @kind object;
  #L2bfe48.  call temp:= `getUpperBounds`(v3) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L2bfe4e.  v1:= temp @kind object;
  #L2bfe50.  call temp:= `equals`(v0, v1) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L2bfe56.  v0:= temp;
  #L2bfe58.  if v0 == 0 then goto L2bfe7c;
  #L2bfe5c.  call temp:= `getLowerBounds`(v2) @signature `Lkotlin/reflect/WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L2bfe62.  v0:= temp @kind object;
  #L2bfe64.  call temp:= `getLowerBounds`(v3) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L2bfe6a.  v3:= temp @kind object;
  #L2bfe6c.  call temp:= `equals`(v0, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L2bfe72.  v3:= temp;
  #L2bfe74.  if v3 == 0 then goto L2bfe7c;
  #L2bfe78.  v3:= 1I;
  #L2bfe7a.  goto L2bfe7e;
  #L2bfe7c.  v3:= 0I;
  #L2bfe7e.  return v3;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`kotlin.reflect.WildcardTypeImpl` v3 @kind this) @signature `Lkotlin/reflect/WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bff78.  v0:= v3.`kotlin.reflect.WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L2bff7c.  v1:= 0I;
  #L2bff7e.  if v0 != 0 then goto L2bff88;
  #L2bff82.  v0:= new `java.lang.reflect.Type`[v1];
  #L2bff86.  goto L2bff94;
  #L2bff88.  v2:= 1I;
  #L2bff8a.  v2:= new `java.lang.reflect.Type`[v2];
  #L2bff8e.  v2[v1]:= v0 @kind object;
  #L2bff92.  v0:= v2 @kind object;
  #L2bff94.  return v0 @kind object;
}
procedure `java.lang.String` `getTypeName`(`kotlin.reflect.WildcardTypeImpl` v2 @kind this) @signature `Lkotlin/reflect/WildcardTypeImpl;.getTypeName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bfec4.  v0:= v2.`kotlin.reflect.WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L2bfec8.  if v0 == 0 then goto L2bfefc;
  #L2bfecc.  v0:= new `java.lang.StringBuilder`;
  #L2bfed0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bfed6.  v1:= "? super " @kind object;
  #L2bfeda.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bfee0.  v1:= v2.`kotlin.reflect.WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L2bfee4.  call temp:= `access$typeToString`(v1) @signature `Lkotlin/reflect/TypesJVMKt;.access$typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L2bfeea.  v1:= temp @kind object;
  #L2bfeec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bfef2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bfef8.  v0:= temp @kind object;
  #L2bfefa.  goto L2bff48;
  #L2bfefc.  v0:= v2.`kotlin.reflect.WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L2bff00.  if v0 == 0 then goto L2bff44;
  #L2bff04.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L2bff08.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2bff0e.  v0:= temp;
  #L2bff10.  if v0 != 0 then goto L2bff44;
  #L2bff14.  v0:= new `java.lang.StringBuilder`;
  #L2bff18.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bff1e.  v1:= "? extends " @kind object;
  #L2bff22.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bff28.  v1:= v2.`kotlin.reflect.WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L2bff2c.  call temp:= `access$typeToString`(v1) @signature `Lkotlin/reflect/TypesJVMKt;.access$typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L2bff32.  v1:= temp @kind object;
  #L2bff34.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bff3a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bff40.  v0:= temp @kind object;
  #L2bff42.  goto L2bff48;
  #L2bff44.  v0:= "?" @kind object;
  #L2bff48.  return v0 @kind object;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`kotlin.reflect.WildcardTypeImpl` v3 @kind this) @signature `Lkotlin/reflect/WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bffa8.  v0:= 1I;
  #L2bffaa.  v0:= new `java.lang.reflect.Type`[v0];
  #L2bffae.  v1:= v3.`kotlin.reflect.WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L2bffb2.  if v1 != 0 then goto L2bffba;
  #L2bffb6.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L2bffba.  v2:= 0I;
  #L2bffbc.  v0[v2]:= v1 @kind object;
  #L2bffc0.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.reflect.WildcardTypeImpl` v2 @kind this) @signature `Lkotlin/reflect/WildcardTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bfe90.  call temp:= `getUpperBounds`(v2) @signature `Lkotlin/reflect/WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L2bfe96.  v0:= temp @kind object;
  #L2bfe98.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L2bfe9e.  v0:= temp;
  #L2bfea0.  call temp:= `getLowerBounds`(v2) @signature `Lkotlin/reflect/WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L2bfea6.  v1:= temp @kind object;
  #L2bfea8.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L2bfeae.  v1:= temp;
  #L2bfeb0.  v0:= v0 ^~ v1 @kind int;
  #L2bfeb2.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.reflect.WildcardTypeImpl` v1 @kind this) @signature `Lkotlin/reflect/WildcardTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bff5c.  call temp:= `getTypeName`(v1) @signature `Lkotlin/reflect/WildcardTypeImpl;.getTypeName:()Ljava/lang/String;` @kind virtual;
  #L2bff62.  v0:= temp @kind object;
  #L2bff64.  return v0 @kind object;
}
