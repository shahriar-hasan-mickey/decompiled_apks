record `kotlin.reflect.KTypeProjection$Companion` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`kotlin.reflect.KTypeProjection$Companion` v0 @kind this) @signature `Lkotlin/reflect/KTypeProjection$Companion;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2bed50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bed56.  return @kind void;
}
procedure `void` `<init>`(`kotlin.reflect.KTypeProjection$Companion` v0 @kind this, `kotlin.jvm.internal.DefaultConstructorMarker` v1 @kind object) @signature `Lkotlin/reflect/KTypeProjection$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2bed68.  call `<init>`(v0) @signature `Lkotlin/reflect/KTypeProjection$Companion;.<init>:()V` @kind direct;
  #L2bed6e.  return @kind void;
}
procedure `void` `getStar$annotations`() @signature `Lkotlin/reflect/KTypeProjection$Companion;.getStar$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2bed80.  return @kind void;
}
procedure `kotlin.reflect.KTypeProjection` `contravariant`(`kotlin.reflect.KTypeProjection$Companion` v2 @kind this, `kotlin.reflect.KType` v3 @kind object) @signature `Lkotlin/reflect/KTypeProjection$Companion;.contravariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2becb4.  v0:= "type" @kind object;
  #L2becb8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2becbe.  v0:= new `kotlin.reflect.KTypeProjection`;
  #L2becc2.  v1:= `@@kotlin.reflect.KVariance.IN` @type ^`kotlin.reflect.KVariance` @kind object;
  #L2becc6.  call `<init>`(v0, v1, v3) @signature `Lkotlin/reflect/KTypeProjection;.<init>:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)V` @kind direct;
  #L2beccc.  return v0 @kind object;
}
procedure `kotlin.reflect.KTypeProjection` `covariant`(`kotlin.reflect.KTypeProjection$Companion` v2 @kind this, `kotlin.reflect.KType` v3 @kind object) @signature `Lkotlin/reflect/KTypeProjection$Companion;.covariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2bece0.  v0:= "type" @kind object;
  #L2bece4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2becea.  v0:= new `kotlin.reflect.KTypeProjection`;
  #L2becee.  v1:= `@@kotlin.reflect.KVariance.OUT` @type ^`kotlin.reflect.KVariance` @kind object;
  #L2becf2.  call `<init>`(v0, v1, v3) @signature `Lkotlin/reflect/KTypeProjection;.<init>:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)V` @kind direct;
  #L2becf8.  return v0 @kind object;
}
procedure `kotlin.reflect.KTypeProjection` `getSTAR`(`kotlin.reflect.KTypeProjection$Companion` v1 @kind this) @signature `Lkotlin/reflect/KTypeProjection$Companion;.getSTAR:()Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bed0c.  v0:= `@@kotlin.reflect.KTypeProjection.star` @type ^`kotlin.reflect.KTypeProjection` @kind object;
  #L2bed10.  return v0 @kind object;
}
procedure `kotlin.reflect.KTypeProjection` `invariant`(`kotlin.reflect.KTypeProjection$Companion` v2 @kind this, `kotlin.reflect.KType` v3 @kind object) @signature `Lkotlin/reflect/KTypeProjection$Companion;.invariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2bed24.  v0:= "type" @kind object;
  #L2bed28.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2bed2e.  v0:= new `kotlin.reflect.KTypeProjection`;
  #L2bed32.  v1:= `@@kotlin.reflect.KVariance.INVARIANT` @type ^`kotlin.reflect.KVariance` @kind object;
  #L2bed36.  call `<init>`(v0, v1, v3) @signature `Lkotlin/reflect/KTypeProjection;.<init>:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)V` @kind direct;
  #L2bed3c.  return v0 @kind object;
}
