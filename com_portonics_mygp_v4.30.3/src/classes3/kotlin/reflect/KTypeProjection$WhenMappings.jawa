record `kotlin.reflect.KTypeProjection$WhenMappings` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC {
}
global `int`[] `@@kotlin.reflect.KTypeProjection$WhenMappings.$EnumSwitchMapping$0` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlin/reflect/KTypeProjection$WhenMappings;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2bed94.  call temp:= `values`() @signature `Lkotlin/reflect/KVariance;.values:()[Lkotlin/reflect/KVariance;` @kind static;
  #L2bed9a.  v0:= temp @kind object;
  #L2bed9c.  v0:= length @variable v0;
  #L2bed9e.  v0:= new `int`[v0];
  #L2beda2.  v1:= `@@kotlin.reflect.KVariance.INVARIANT` @type ^`kotlin.reflect.KVariance` @kind object;
  #L2beda6.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2bedac.  v1:= temp;
  #L2bedae.  v2:= 1I;
  #L2bedb0.  v0[v1]:= v2;
  #L2bedb4.  v1:= `@@kotlin.reflect.KVariance.IN` @type ^`kotlin.reflect.KVariance` @kind object;
  #L2bedb8.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2bedbe.  v1:= temp;
  #L2bedc0.  v2:= 2I;
  #L2bedc2.  v0[v1]:= v2;
  #L2bedc6.  v1:= `@@kotlin.reflect.KVariance.OUT` @type ^`kotlin.reflect.KVariance` @kind object;
  #L2bedca.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2bedd0.  v1:= temp;
  #L2bedd2.  v2:= 3I;
  #L2bedd4.  v0[v1]:= v2;
  #L2bedd8.  `@@kotlin.reflect.KTypeProjection$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] := v0 @kind object;
  #L2beddc.  return @kind void;
}
