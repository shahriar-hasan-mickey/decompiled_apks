record `kotlin.reflect.KTypeProjection` @kind class @AccessFlag PUBLIC_FINAL {
  `kotlin.reflect.KType` `kotlin.reflect.KTypeProjection.type` @AccessFlag PRIVATE_FINAL;
  `kotlin.reflect.KVariance` `kotlin.reflect.KTypeProjection.variance` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.reflect.KTypeProjection$Companion` `@@kotlin.reflect.KTypeProjection.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.reflect.KTypeProjection` `@@kotlin.reflect.KTypeProjection.star` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/reflect/KTypeProjection;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2bf044.  v0:= new `kotlin.reflect.KTypeProjection$Companion`;
  #L2bf048.  v1:= 0I;
  #L2bf04a.  call `<init>`(v0, v1) @signature `Lkotlin/reflect/KTypeProjection$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L2bf050.  `@@kotlin.reflect.KTypeProjection.Companion` @type ^`kotlin.reflect.KTypeProjection$Companion` := v0 @kind object;
  #L2bf054.  v0:= new `kotlin.reflect.KTypeProjection`;
  #L2bf058.  call `<init>`(v0, v1, v1) @signature `Lkotlin/reflect/KTypeProjection;.<init>:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)V` @kind direct;
  #L2bf05e.  `@@kotlin.reflect.KTypeProjection.star` @type ^`kotlin.reflect.KTypeProjection` := v0 @kind object;
  #L2bf062.  return @kind void;
}
procedure `void` `<init>`(`kotlin.reflect.KTypeProjection` v3 @kind this, `kotlin.reflect.KVariance` v4 @kind object, `kotlin.reflect.KType` v5 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.<init>:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2bf074.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bf07a.  v3.`kotlin.reflect.KTypeProjection.variance` @type ^`kotlin.reflect.KVariance` := v4 @kind object;
  #L2bf07e.  v3.`kotlin.reflect.KTypeProjection.type` @type ^`kotlin.reflect.KType` := v5 @kind object;
  #L2bf082.  v0:= 1I;
  #L2bf084.  v1:= 0I;
  #L2bf086.  if v4 != 0 then goto L2bf08e;
  #L2bf08a.  v2:= 1I;
  #L2bf08c.  goto L2bf090;
  #L2bf08e.  v2:= 0I;
  #L2bf090.  if v5 != 0 then goto L2bf098;
  #L2bf094.  v5:= 1I;
  #L2bf096.  goto L2bf09a;
  #L2bf098.  v5:= 0I;
  #L2bf09a.  if v2 != v5 then goto L2bf0a0;
  #L2bf09e.  goto L2bf0a2;
  #L2bf0a0.  v0:= 0I;
  #L2bf0a2.  if v0 != 0 then goto L2bf0f0;
  #L2bf0a6.  if v4 != 0 then goto L2bf0b0;
  #L2bf0aa.  v4:= "Star projection must have no type specified." @kind object;
  #L2bf0ae.  goto L2bf0dc;
  #L2bf0b0.  v5:= new `java.lang.StringBuilder`;
  #L2bf0b4.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bf0ba.  v0:= "The projection variance " @kind object;
  #L2bf0be.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf0c4.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf0ca.  v4:= " requires type to be specified." @kind object;
  #L2bf0ce.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf0d4.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bf0da.  v4:= temp @kind object;
  #L2bf0dc.  v5:= new `java.lang.IllegalArgumentException`;
  #L2bf0e0.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bf0e6.  v4:= temp @kind object;
  #L2bf0e8.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bf0ee.  throw v5;
  #L2bf0f0.  return @kind void;
}
procedure `kotlin.reflect.KTypeProjection` `contravariant`(`kotlin.reflect.KType` v1 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.contravariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2bef64.  v0:= `@@kotlin.reflect.KTypeProjection.Companion` @type ^`kotlin.reflect.KTypeProjection$Companion` @kind object;
  #L2bef68.  call temp:= `contravariant`(v0, v1) @signature `Lkotlin/reflect/KTypeProjection$Companion;.contravariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @kind virtual;
  #L2bef6e.  v1:= temp @kind object;
  #L2bef70.  return v1 @kind object;
}
procedure `kotlin.reflect.KTypeProjection` `copy$default`(`kotlin.reflect.KTypeProjection` v0 @kind object, `kotlin.reflect.KVariance` v1 @kind object, `kotlin.reflect.KType` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.copy$default:(Lkotlin/reflect/KTypeProjection;Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;ILjava/lang/Object;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2bef84.  v4:= v3 ^& 1;
  #L2bef88.  if v4 == 0 then goto L2bef90;
  #L2bef8c.  v1:= v0.`kotlin.reflect.KTypeProjection.variance` @type ^`kotlin.reflect.KVariance` @kind object;
  #L2bef90.  v3:= v3 ^& 2;
  #L2bef94.  if v3 == 0 then goto L2bef9c;
  #L2bef98.  v2:= v0.`kotlin.reflect.KTypeProjection.type` @type ^`kotlin.reflect.KType` @kind object;
  #L2bef9c.  call temp:= `copy`(v0, v1, v2) @signature `Lkotlin/reflect/KTypeProjection;.copy:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @kind virtual;
  #L2befa2.  v0:= temp @kind object;
  #L2befa4.  return v0 @kind object;
}
procedure `kotlin.reflect.KTypeProjection` `covariant`(`kotlin.reflect.KType` v1 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.covariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2befd4.  v0:= `@@kotlin.reflect.KTypeProjection.Companion` @type ^`kotlin.reflect.KTypeProjection$Companion` @kind object;
  #L2befd8.  call temp:= `covariant`(v0, v1) @signature `Lkotlin/reflect/KTypeProjection$Companion;.covariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @kind virtual;
  #L2befde.  v1:= temp @kind object;
  #L2befe0.  return v1 @kind object;
}
procedure `kotlin.reflect.KTypeProjection` `invariant`(`kotlin.reflect.KType` v1 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.invariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L2beff4.  v0:= `@@kotlin.reflect.KTypeProjection.Companion` @type ^`kotlin.reflect.KTypeProjection$Companion` @kind object;
  #L2beff8.  call temp:= `invariant`(v0, v1) @signature `Lkotlin/reflect/KTypeProjection$Companion;.invariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @kind virtual;
  #L2beffe.  v1:= temp @kind object;
  #L2bf000.  return v1 @kind object;
}
procedure `kotlin.reflect.KVariance` `component1`(`kotlin.reflect.KTypeProjection` v1 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.component1:()Lkotlin/reflect/KVariance;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bf014.  v0:= v1.`kotlin.reflect.KTypeProjection.variance` @type ^`kotlin.reflect.KVariance` @kind object;
  #L2bf018.  return v0 @kind object;
}
procedure `kotlin.reflect.KType` `component2`(`kotlin.reflect.KTypeProjection` v1 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.component2:()Lkotlin/reflect/KType;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bef34.  v0:= v1.`kotlin.reflect.KTypeProjection.type` @type ^`kotlin.reflect.KType` @kind object;
  #L2bef38.  return v0 @kind object;
}
procedure `kotlin.reflect.KTypeProjection` `copy`(`kotlin.reflect.KTypeProjection` v1 @kind this, `kotlin.reflect.KVariance` v2 @kind object, `kotlin.reflect.KType` v3 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.copy:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2befb8.  v0:= new `kotlin.reflect.KTypeProjection`;
  #L2befbc.  call `<init>`(v0, v2, v3) @signature `Lkotlin/reflect/KTypeProjection;.<init>:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)V` @kind direct;
  #L2befc2.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlin.reflect.KTypeProjection` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bedf0.  v0:= 1I;
  #L2bedf2.  if v4 != v5 then goto L2bedf8;
  #L2bedf6.  return v0;
  #L2bedf8.  v1:= instanceof @variable v5 @type ^`kotlin.reflect.KTypeProjection` @kind boolean;
  #L2bedfc.  v2:= 0I;
  #L2bedfe.  if v1 != 0 then goto L2bee04;
  #L2bee02.  return v2;
  #L2bee04.  v5:= (`kotlin.reflect.KTypeProjection`) v5 @kind object;
  #L2bee08.  v1:= v4.`kotlin.reflect.KTypeProjection.variance` @type ^`kotlin.reflect.KVariance` @kind object;
  #L2bee0c.  v3:= v5.`kotlin.reflect.KTypeProjection.variance` @type ^`kotlin.reflect.KVariance` @kind object;
  #L2bee10.  if v1 == v3 then goto L2bee16;
  #L2bee14.  return v2;
  #L2bee16.  v1:= v4.`kotlin.reflect.KTypeProjection.type` @type ^`kotlin.reflect.KType` @kind object;
  #L2bee1a.  v5:= v5.`kotlin.reflect.KTypeProjection.type` @type ^`kotlin.reflect.KType` @kind object;
  #L2bee1e.  call temp:= `areEqual`(v1, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2bee24.  v5:= temp;
  #L2bee26.  if v5 != 0 then goto L2bee2c;
  #L2bee2a.  return v2;
  #L2bee2c.  return v0;
}
procedure `kotlin.reflect.KType` `getType`(`kotlin.reflect.KTypeProjection` v1 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.getType:()Lkotlin/reflect/KType;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bef4c.  v0:= v1.`kotlin.reflect.KTypeProjection.type` @type ^`kotlin.reflect.KType` @kind object;
  #L2bef50.  return v0 @kind object;
}
procedure `kotlin.reflect.KVariance` `getVariance`(`kotlin.reflect.KTypeProjection` v1 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.getVariance:()Lkotlin/reflect/KVariance;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bf02c.  v0:= v1.`kotlin.reflect.KTypeProjection.variance` @type ^`kotlin.reflect.KVariance` @kind object;
  #L2bf030.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.reflect.KTypeProjection` v3 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bee40.  v0:= v3.`kotlin.reflect.KTypeProjection.variance` @type ^`kotlin.reflect.KVariance` @kind object;
  #L2bee44.  v1:= 0I;
  #L2bee46.  if v0 != 0 then goto L2bee4e;
  #L2bee4a.  v0:= 0I;
  #L2bee4c.  goto L2bee56;
  #L2bee4e.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Enum;.hashCode:()I` @kind virtual;
  #L2bee54.  v0:= temp;
  #L2bee56.  v0:= v0 * 31;
  #L2bee5a.  v2:= v3.`kotlin.reflect.KTypeProjection.type` @type ^`kotlin.reflect.KType` @kind object;
  #L2bee5e.  if v2 != 0 then goto L2bee64;
  #L2bee62.  goto L2bee6c;
  #L2bee64.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2bee6a.  v1:= temp;
  #L2bee6c.  v0:= v0 + v1 @kind int;
  #L2bee6e.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.reflect.KTypeProjection` v3 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bee80.  v0:= v3.`kotlin.reflect.KTypeProjection.variance` @type ^`kotlin.reflect.KVariance` @kind object;
  #L2bee84.  v1:= -1I;
  #L2bee86.  if v0 != 0 then goto L2bee8e;
  #L2bee8a.  v0:= -1I;
  #L2bee8c.  goto L2bee9e;
  #L2bee8e.  v2:= `@@kotlin.reflect.KTypeProjection$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L2bee92.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2bee98.  v0:= temp;
  #L2bee9a.  v0:= v2[v0];
  #L2bee9e.  if v0 == v1 then goto L2bef1e;
  #L2beea2.  v1:= 1I;
  #L2beea4.  if v0 == v1 then goto L2bef10;
  #L2beea8.  v1:= 2I;
  #L2beeaa.  if v0 == v1 then goto L2beee8;
  #L2beeae.  v1:= 3I;
  #L2beeb0.  if v0 != v1 then goto L2beedc;
  #L2beeb4.  v0:= new `java.lang.StringBuilder`;
  #L2beeb8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2beebe.  v1:= "out " @kind object;
  #L2beec2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2beec8.  v1:= v3.`kotlin.reflect.KTypeProjection.type` @type ^`kotlin.reflect.KType` @kind object;
  #L2beecc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2beed2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2beed8.  v0:= temp @kind object;
  #L2beeda.  goto L2bef22;
  #L2beedc.  v0:= new `kotlin.NoWhenBranchMatchedException`;
  #L2beee0.  call `<init>`(v0) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L2beee6.  throw v0;
  #L2beee8.  v0:= new `java.lang.StringBuilder`;
  #L2beeec.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2beef2.  v1:= "in " @kind object;
  #L2beef6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2beefc.  v1:= v3.`kotlin.reflect.KTypeProjection.type` @type ^`kotlin.reflect.KType` @kind object;
  #L2bef00.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bef06.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bef0c.  v0:= temp @kind object;
  #L2bef0e.  goto L2bef22;
  #L2bef10.  v0:= v3.`kotlin.reflect.KTypeProjection.type` @type ^`kotlin.reflect.KType` @kind object;
  #L2bef14.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2bef1a.  v0:= temp @kind object;
  #L2bef1c.  goto L2bef22;
  #L2bef1e.  v0:= "*" @kind object;
  #L2bef22.  return v0 @kind object;
}
