record `kotlin.reflect.ParameterizedTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.ParameterizedType` @kind interface, `kotlin.reflect.TypeImpl` @kind interface {
  `java.lang.reflect.Type` `kotlin.reflect.ParameterizedTypeImpl.ownerType` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `kotlin.reflect.ParameterizedTypeImpl.rawType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `kotlin.reflect.ParameterizedTypeImpl.typeArguments` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.reflect.ParameterizedTypeImpl` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.reflect.Type` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lkotlin/reflect/ParameterizedTypeImpl;.<init>:(Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2bf560.  v0:= "rawType" @kind object;
  #L2bf564.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2bf56a.  v0:= "typeArguments" @kind object;
  #L2bf56e.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2bf574.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bf57a.  v1.`kotlin.reflect.ParameterizedTypeImpl.rawType` @type ^`java.lang.Class` := v2 @kind object;
  #L2bf57e.  v1.`kotlin.reflect.ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` := v3 @kind object;
  #L2bf582.  v2:= 0I;
  #L2bf584.  v2:= new `java.lang.reflect.Type`[v2];
  #L2bf588.  call temp:= `toArray`(v4, v2) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L2bf58e.  v2:= temp @kind object;
  #L2bf590.  v3:= "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>" @kind object;
  #L2bf594.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2bf59a.  v2:= (`java.lang.reflect.Type`[]) v2 @kind object;
  #L2bf59e.  v1.`kotlin.reflect.ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] := v2 @kind object;
  #L2bf5a2.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.reflect.ParameterizedTypeImpl` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/reflect/ParameterizedTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bf398.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L2bf39c.  if v0 == 0 then goto L2bf3f4;
  #L2bf3a0.  v0:= v2.`kotlin.reflect.ParameterizedTypeImpl.rawType` @type ^`java.lang.Class` @kind object;
  #L2bf3a4.  v3:= (`java.lang.reflect.ParameterizedType`) v3 @kind object;
  #L2bf3a8.  call temp:= `getRawType`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L2bf3ae.  v1:= temp @kind object;
  #L2bf3b0.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2bf3b6.  v0:= temp;
  #L2bf3b8.  if v0 == 0 then goto L2bf3f4;
  #L2bf3bc.  v0:= v2.`kotlin.reflect.ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L2bf3c0.  call temp:= `getOwnerType`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L2bf3c6.  v1:= temp @kind object;
  #L2bf3c8.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2bf3ce.  v0:= temp;
  #L2bf3d0.  if v0 == 0 then goto L2bf3f4;
  #L2bf3d4.  call temp:= `getActualTypeArguments`(v2) @signature `Lkotlin/reflect/ParameterizedTypeImpl;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L2bf3da.  v0:= temp @kind object;
  #L2bf3dc.  call temp:= `getActualTypeArguments`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L2bf3e2.  v3:= temp @kind object;
  #L2bf3e4.  call temp:= `equals`(v0, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L2bf3ea.  v3:= temp;
  #L2bf3ec.  if v3 == 0 then goto L2bf3f4;
  #L2bf3f0.  v3:= 1I;
  #L2bf3f2.  goto L2bf3f6;
  #L2bf3f4.  v3:= 0I;
  #L2bf3f6.  return v3;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`kotlin.reflect.ParameterizedTypeImpl` v1 @kind this) @signature `Lkotlin/reflect/ParameterizedTypeImpl;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bf548.  v0:= v1.`kotlin.reflect.ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L2bf54c.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`kotlin.reflect.ParameterizedTypeImpl` v1 @kind this) @signature `Lkotlin/reflect/ParameterizedTypeImpl;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bf518.  v0:= v1.`kotlin.reflect.ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L2bf51c.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`kotlin.reflect.ParameterizedTypeImpl` v1 @kind this) @signature `Lkotlin/reflect/ParameterizedTypeImpl;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bf530.  v0:= v1.`kotlin.reflect.ParameterizedTypeImpl.rawType` @type ^`java.lang.Class` @kind object;
  #L2bf534.  return v0 @kind object;
}
procedure `java.lang.String` `getTypeName`(`kotlin.reflect.ParameterizedTypeImpl` v11 @kind this) @signature `Lkotlin/reflect/ParameterizedTypeImpl;.getTypeName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2bf450.  v10:= new `java.lang.StringBuilder`;
  #L2bf454.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bf45a.  v0:= v11.`kotlin.reflect.ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L2bf45e.  if v0 == 0 then goto L2bf48e;
  #L2bf462.  call temp:= `access$typeToString`(v0) @signature `Lkotlin/reflect/TypesJVMKt;.access$typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L2bf468.  v0:= temp @kind object;
  #L2bf46a.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf470.  v0:= "$" @kind object;
  #L2bf474.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf47a.  v0:= v11.`kotlin.reflect.ParameterizedTypeImpl.rawType` @type ^`java.lang.Class` @kind object;
  #L2bf47e.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L2bf484.  v0:= temp @kind object;
  #L2bf486.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf48c.  goto L2bf4a0;
  #L2bf48e.  v0:= v11.`kotlin.reflect.ParameterizedTypeImpl.rawType` @type ^`java.lang.Class` @kind object;
  #L2bf492.  call temp:= `access$typeToString`(v0) @signature `Lkotlin/reflect/TypesJVMKt;.access$typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L2bf498.  v0:= temp @kind object;
  #L2bf49a.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf4a0.  v0:= v11.`kotlin.reflect.ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L2bf4a4.  v1:= length @variable v0;
  #L2bf4a6.  v2:= 1I;
  #L2bf4a8.  if v1 != 0 then goto L2bf4b0;
  #L2bf4ac.  v1:= 1I;
  #L2bf4ae.  goto L2bf4b2;
  #L2bf4b0.  v1:= 0I;
  #L2bf4b2.  v1:= v1 ^~ v2 @kind int;
  #L2bf4b4.  if v1 == 0 then goto L2bf4d8;
  #L2bf4b8.  v2:= 0I;
  #L2bf4ba.  v5:= 0I;
  #L2bf4bc.  v6:= 0I;
  #L2bf4be.  v7:= `@@kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1.INSTANCE` @type ^`kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1` @kind object;
  #L2bf4c2.  v8:= 50I;
  #L2bf4c6.  v9:= 0I;
  #L2bf4c8.  v3:= "<" @kind object;
  #L2bf4cc.  v4:= ">" @kind object;
  #L2bf4d0.  v1:= v10 @kind object;
  #L2bf4d2.  call temp:= `joinTo$default`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lkotlin/collections/ArraysKt;.joinTo$default:([Ljava/lang/Object;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/Appendable;` @kind static;
  #L2bf4d8.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bf4de.  v0:= temp @kind object;
  #L2bf4e0.  v1:= "StringBuilder().apply(builderAction).toString()" @kind object;
  #L2bf4e4.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2bf4ea.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.reflect.ParameterizedTypeImpl` v2 @kind this) @signature `Lkotlin/reflect/ParameterizedTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bf408.  v0:= v2.`kotlin.reflect.ParameterizedTypeImpl.rawType` @type ^`java.lang.Class` @kind object;
  #L2bf40c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Class;.hashCode:()I` @kind virtual;
  #L2bf412.  v0:= temp;
  #L2bf414.  v1:= v2.`kotlin.reflect.ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L2bf418.  if v1 == 0 then goto L2bf426;
  #L2bf41c.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2bf422.  v1:= temp;
  #L2bf424.  goto L2bf428;
  #L2bf426.  v1:= 0I;
  #L2bf428.  v0:= v0 ^~ v1 @kind int;
  #L2bf42a.  call temp:= `getActualTypeArguments`(v2) @signature `Lkotlin/reflect/ParameterizedTypeImpl;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L2bf430.  v1:= temp @kind object;
  #L2bf432.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L2bf438.  v1:= temp;
  #L2bf43a.  v0:= v0 ^~ v1 @kind int;
  #L2bf43c.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.reflect.ParameterizedTypeImpl` v1 @kind this) @signature `Lkotlin/reflect/ParameterizedTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bf4fc.  call temp:= `getTypeName`(v1) @signature `Lkotlin/reflect/ParameterizedTypeImpl;.getTypeName:()Ljava/lang/String;` @kind virtual;
  #L2bf502.  v0:= temp @kind object;
  #L2bf504.  return v0 @kind object;
}
