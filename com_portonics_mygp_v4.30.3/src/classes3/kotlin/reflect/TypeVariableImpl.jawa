record `kotlin.reflect.TypeVariableImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.TypeVariable` @kind interface, `kotlin.reflect.TypeImpl` @kind interface {
  `kotlin.reflect.KTypeParameter` `kotlin.reflect.TypeVariableImpl.typeParameter` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.reflect.TypeVariableImpl` v1 @kind this, `kotlin.reflect.KTypeParameter` v2 @kind object) @signature `Lkotlin/reflect/TypeVariableImpl;.<init>:(Lkotlin/reflect/KTypeParameter;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2bf80c.  v0:= "typeParameter" @kind object;
  #L2bf810.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2bf816.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bf81c.  v1.`kotlin.reflect.TypeVariableImpl.typeParameter` @type ^`kotlin.reflect.KTypeParameter` := v2 @kind object;
  #L2bf820.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.reflect.TypeVariableImpl` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/reflect/TypeVariableImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bf5d4.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L2bf5d8.  if v0 == 0 then goto L2bf61c;
  #L2bf5dc.  call temp:= `getName`(v2) @signature `Lkotlin/reflect/TypeVariableImpl;.getName:()Ljava/lang/String;` @kind virtual;
  #L2bf5e2.  v0:= temp @kind object;
  #L2bf5e4.  v3:= (`java.lang.reflect.TypeVariable`) v3 @kind object;
  #L2bf5e8.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L2bf5ee.  v1:= temp @kind object;
  #L2bf5f0.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2bf5f6.  v0:= temp;
  #L2bf5f8.  if v0 == 0 then goto L2bf61c;
  #L2bf5fc.  call temp:= `getGenericDeclaration`(v2) @signature `Lkotlin/reflect/TypeVariableImpl;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind virtual;
  #L2bf602.  v0:= temp @kind object;
  #L2bf604.  call temp:= `getGenericDeclaration`(v3) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L2bf60a.  v3:= temp @kind object;
  #L2bf60c.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2bf612.  v3:= temp;
  #L2bf614.  if v3 == 0 then goto L2bf61c;
  #L2bf618.  v3:= 1I;
  #L2bf61a.  goto L2bf61e;
  #L2bf61c.  v3:= 0I;
  #L2bf61e.  return v3;
}
procedure `java.lang.annotation.Annotation`[] `getAnnotatedBounds`(`kotlin.reflect.TypeVariableImpl` v1 @kind this) @signature `Lkotlin/reflect/TypeVariableImpl;.getAnnotatedBounds:()[Ljava/lang/annotation/Annotation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bf6dc.  v0:= 0I;
  #L2bf6de.  v0:= new `java.lang.annotation.Annotation`[v0];
  #L2bf6e2.  return v0 @kind object;
}
procedure `java.lang.annotation.Annotation` `getAnnotation`(`kotlin.reflect.TypeVariableImpl` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lkotlin/reflect/TypeVariableImpl;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bf6bc.  v0:= "annotationClass" @kind object;
  #L2bf6c0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2bf6c6.  v2:= 0I;
  #L2bf6c8.  return v2 @kind object;
}
procedure `java.lang.annotation.Annotation`[] `getAnnotations`(`kotlin.reflect.TypeVariableImpl` v1 @kind this) @signature `Lkotlin/reflect/TypeVariableImpl;.getAnnotations:()[Ljava/lang/annotation/Annotation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bf6f4.  v0:= 0I;
  #L2bf6f6.  v0:= new `java.lang.annotation.Annotation`[v0];
  #L2bf6fa.  return v0 @kind object;
}
procedure `java.lang.reflect.Type`[] `getBounds`(`kotlin.reflect.TypeVariableImpl` v4 @kind this) @signature `Lkotlin/reflect/TypeVariableImpl;.getBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bf788.  v0:= v4.`kotlin.reflect.TypeVariableImpl.typeParameter` @type ^`kotlin.reflect.KTypeParameter` @kind object;
  #L2bf78c.  call temp:= `getUpperBounds`(v0) @signature `Lkotlin/reflect/KTypeParameter;.getUpperBounds:()Ljava/util/List;` @kind interface;
  #L2bf792.  v0:= temp @kind object;
  #L2bf794.  v1:= new `java.util.ArrayList`;
  #L2bf798.  v2:= 10I;
  #L2bf79c.  call temp:= `collectionSizeOrDefault`(v0, v2) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L2bf7a2.  v2:= temp;
  #L2bf7a4.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2bf7aa.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2bf7b0.  v0:= temp @kind object;
  #L2bf7b2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2bf7b8.  v2:= temp;
  #L2bf7ba.  if v2 == 0 then goto L2bf7dc;
  #L2bf7be.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2bf7c4.  v2:= temp @kind object;
  #L2bf7c6.  v2:= (`kotlin.reflect.KType`) v2 @kind object;
  #L2bf7ca.  v3:= 1I;
  #L2bf7cc.  call temp:= `access$computeJavaType`(v2, v3) @signature `Lkotlin/reflect/TypesJVMKt;.access$computeJavaType:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L2bf7d2.  v2:= temp @kind object;
  #L2bf7d4.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2bf7da.  goto L2bf7b2;
  #L2bf7dc.  v0:= 0I;
  #L2bf7de.  v0:= new `java.lang.reflect.Type`[v0];
  #L2bf7e2.  call temp:= `toArray`(v1, v0) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L2bf7e8.  v0:= temp @kind object;
  #L2bf7ea.  v1:= "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>" @kind object;
  #L2bf7ee.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2bf7f4.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L2bf7f8.  return v0 @kind object;
}
procedure `java.lang.annotation.Annotation`[] `getDeclaredAnnotations`(`kotlin.reflect.TypeVariableImpl` v1 @kind this) @signature `Lkotlin/reflect/TypeVariableImpl;.getDeclaredAnnotations:()[Ljava/lang/annotation/Annotation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2bf70c.  v0:= 0I;
  #L2bf70e.  v0:= new `java.lang.annotation.Annotation`[v0];
  #L2bf712.  return v0 @kind object;
}
procedure `java.lang.reflect.GenericDeclaration` `getGenericDeclaration`(`kotlin.reflect.TypeVariableImpl` v4 @kind this) @signature `Lkotlin/reflect/TypeVariableImpl;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bf724.  v0:= new `java.lang.StringBuilder`;
  #L2bf728.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bf72e.  v1:= "getGenericDeclaration() is not yet supported for type variables created from KType: " @kind object;
  #L2bf732.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf738.  v1:= v4.`kotlin.reflect.TypeVariableImpl.typeParameter` @type ^`kotlin.reflect.KTypeParameter` @kind object;
  #L2bf73c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf742.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bf748.  v0:= temp @kind object;
  #L2bf74a.  v1:= new `kotlin.NotImplementedError`;
  #L2bf74e.  v2:= new `java.lang.StringBuilder`;
  #L2bf752.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bf758.  v3:= "An operation is not implemented: " @kind object;
  #L2bf75c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf762.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf768.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bf76e.  v0:= temp @kind object;
  #L2bf770.  call `<init>`(v1, v0) @signature `Lkotlin/NotImplementedError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bf776.  throw v1;
}
procedure `java.lang.String` `getName`(`kotlin.reflect.TypeVariableImpl` v1 @kind this) @signature `Lkotlin/reflect/TypeVariableImpl;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bf664.  v0:= v1.`kotlin.reflect.TypeVariableImpl.typeParameter` @type ^`kotlin.reflect.KTypeParameter` @kind object;
  #L2bf668.  call temp:= `getName`(v0) @signature `Lkotlin/reflect/KTypeParameter;.getName:()Ljava/lang/String;` @kind interface;
  #L2bf66e.  v0:= temp @kind object;
  #L2bf670.  return v0 @kind object;
}
procedure `java.lang.String` `getTypeName`(`kotlin.reflect.TypeVariableImpl` v1 @kind this) @signature `Lkotlin/reflect/TypeVariableImpl;.getTypeName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bf684.  call temp:= `getName`(v1) @signature `Lkotlin/reflect/TypeVariableImpl;.getName:()Ljava/lang/String;` @kind virtual;
  #L2bf68a.  v0:= temp @kind object;
  #L2bf68c.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.reflect.TypeVariableImpl` v2 @kind this) @signature `Lkotlin/reflect/TypeVariableImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bf630.  call temp:= `getName`(v2) @signature `Lkotlin/reflect/TypeVariableImpl;.getName:()Ljava/lang/String;` @kind virtual;
  #L2bf636.  v0:= temp @kind object;
  #L2bf638.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L2bf63e.  v0:= temp;
  #L2bf640.  call temp:= `getGenericDeclaration`(v2) @signature `Lkotlin/reflect/TypeVariableImpl;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind virtual;
  #L2bf646.  v1:= temp @kind object;
  #L2bf648.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2bf64e.  v1:= temp;
  #L2bf650.  v0:= v0 ^~ v1 @kind int;
  #L2bf652.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.reflect.TypeVariableImpl` v1 @kind this) @signature `Lkotlin/reflect/TypeVariableImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bf6a0.  call temp:= `getTypeName`(v1) @signature `Lkotlin/reflect/TypeVariableImpl;.getTypeName:()Ljava/lang/String;` @kind virtual;
  #L2bf6a6.  v0:= temp @kind object;
  #L2bf6a8.  return v0 @kind object;
}
