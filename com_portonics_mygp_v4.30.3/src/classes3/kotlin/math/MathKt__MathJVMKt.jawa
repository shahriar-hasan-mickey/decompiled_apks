record `kotlin.math.MathKt__MathJVMKt` @kind class @AccessFlag  extends `kotlin.math.MathKt__MathHKt` @kind class {
}
procedure `void` `<init>`(`kotlin.math.MathKt__MathJVMKt` v0 @kind this) @signature `Lkotlin/math/MathKt__MathJVMKt;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2b9374.  call `<init>`(v0) @signature `Lkotlin/math/MathKt__MathHKt;.<init>:()V` @kind direct;
  #L2b937a.  return @kind void;
}
procedure `double` `IEEErem`(`double` v0 , `double` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.IEEErem:(DD)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8558.  call temp:= `IEEEremainder`(v0, v2) @signature `Ljava/lang/Math;.IEEEremainder:(DD)D` @kind static;
  #L2b855e.  v0:= temp @kind wide;
  #L2b8560.  return v0 @kind wide;
}
procedure `float` `IEEErem`(`float` v2 , `float` v3 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.IEEErem:(FF)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8bf4.  v0:= (`double`) v2 @kind f2d;
  #L2b8bf6.  v2:= (`double`) v3 @kind f2d;
  #L2b8bf8.  call temp:= `IEEEremainder`(v0, v2) @signature `Ljava/lang/Math;.IEEEremainder:(DD)D` @kind static;
  #L2b8bfe.  v2:= temp @kind wide;
  #L2b8c00.  v2:= (`float`) v2 @kind d2f;
  #L2b8c02.  return v2;
}
procedure `double` `abs`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.abs:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8574.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(D)D` @kind static;
  #L2b857a.  v0:= temp @kind wide;
  #L2b857c.  return v0 @kind wide;
}
procedure `float` `abs`(`float` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.abs:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8c14.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L2b8c1a.  v0:= temp;
  #L2b8c1c.  return v0;
}
procedure `int` `abs`(`int` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.abs:(I)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b9150.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L2b9156.  v0:= temp;
  #L2b9158.  return v0;
}
procedure `long` `abs`(`long` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.abs:(J)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b92b0.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(J)J` @kind static;
  #L2b92b6.  v0:= temp @kind wide;
  #L2b92b8.  return v0 @kind wide;
}
procedure `double` `acos`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.acos:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8590.  call temp:= `acos`(v0) @signature `Ljava/lang/Math;.acos:(D)D` @kind static;
  #L2b8596.  v0:= temp @kind wide;
  #L2b8598.  return v0 @kind wide;
}
procedure `float` `acos`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.acos:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8c30.  v0:= (`double`) v2 @kind f2d;
  #L2b8c32.  call temp:= `acos`(v0) @signature `Ljava/lang/Math;.acos:(D)D` @kind static;
  #L2b8c38.  v0:= temp @kind wide;
  #L2b8c3a.  v2:= (`float`) v0 @kind d2f;
  #L2b8c3c.  return v2;
}
procedure `double` `acosh`(`double` v7 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.acosh:(D)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2b85ac.  v0:= 1.0D;
  #L2b85b0.  v2:= dcmpg(v7, v0);
  #L2b85b4.  if v2 >= 0 then goto L2b85be;
  #L2b85b8.  v7:= NaND;
  #L2b85bc.  goto L2b8650;
  #L2b85be.  v0:= `@@kotlin.math.Constants.upper_taylor_2_bound` @type ^`double` @kind wide;
  #L2b85c2.  v2:= dcmpl(v7, v0);
  #L2b85c6.  if v2 <= 0 then goto L2b85da;
  #L2b85ca.  call temp:= `log`(v7) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L2b85d0.  v7:= temp @kind wide;
  #L2b85d2.  v0:= `@@kotlin.math.Constants.LN2` @type ^`double` @kind wide;
  #L2b85d6.  v7:= v7 + v0 @kind double;
  #L2b85d8.  goto L2b8650;
  #L2b85da.  v0:= 1I;
  #L2b85dc.  v0:= (`double`) v0 @kind i2d;
  #L2b85de.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2b85e4.  v2:= v7 - v0 @kind double;
  #L2b85e8.  v4:= `@@kotlin.math.Constants.taylor_n_bound` @type ^`double` @kind wide;
  #L2b85ec.  v6:= dcmpl(v2, v4);
  #L2b85f0.  if v6 < 0 then goto L2b8614;
  #L2b85f4.  v2:= v7 * v7 @kind double;
  #L2b85f8.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2b85fe.  v2:= v2 - v0 @kind double;
  #L2b8600.  call temp:= `sqrt`(v2) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2b8606.  v0:= temp @kind wide;
  #L2b8608.  v7:= v7 + v0 @kind double;
  #L2b860a.  call temp:= `log`(v7) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L2b8610.  v7:= temp @kind wide;
  #L2b8612.  goto L2b8650;
  #L2b8614.  call temp:= `sqrt`(v2) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2b861a.  v7:= temp @kind wide;
  #L2b861c.  v0:= `@@kotlin.math.Constants.taylor_2_bound` @type ^`double` @kind wide;
  #L2b8620.  v2:= dcmpl(v7, v0);
  #L2b8624.  if v2 < 0 then goto L2b8640;
  #L2b8628.  v0:= v7 * v7 @kind double;
  #L2b862c.  v0:= v0 * v7 @kind double;
  #L2b8630.  v2:= 12I;
  #L2b8634.  v2:= (`double`) v2 @kind i2d;
  #L2b8636.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2b863c.  v0:= v0 / v2 @kind double;
  #L2b863e.  v7:= v7 - v0 @kind double;
  #L2b8640.  v0:= 2.0D;
  #L2b8644.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2b864a.  v0:= temp @kind wide;
  #L2b864c.  v7:= v7 * v0 @kind double;
  #L2b8650.  return v7 @kind wide;
}
procedure `float` `acosh`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.acosh:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8c50.  v0:= (`double`) v2 @kind f2d;
  #L2b8c52.  call temp:= `acosh`(v0) @signature `Lkotlin/math/MathKt__MathJVMKt;.acosh:(D)D` @kind static;
  #L2b8c58.  v0:= temp @kind wide;
  #L2b8c5a.  v2:= (`float`) v0 @kind d2f;
  #L2b8c5c.  return v2;
}
procedure `double` `asin`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.asin:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8664.  call temp:= `asin`(v0) @signature `Ljava/lang/Math;.asin:(D)D` @kind static;
  #L2b866a.  v0:= temp @kind wide;
  #L2b866c.  return v0 @kind wide;
}
procedure `float` `asin`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.asin:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8c70.  v0:= (`double`) v2 @kind f2d;
  #L2b8c72.  call temp:= `asin`(v0) @signature `Ljava/lang/Math;.asin:(D)D` @kind static;
  #L2b8c78.  v0:= temp @kind wide;
  #L2b8c7a.  v2:= (`float`) v0 @kind d2f;
  #L2b8c7c.  return v2;
}
procedure `double` `asinh`(`double` v5 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.asinh:(D)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2b8680.  v0:= `@@kotlin.math.Constants.taylor_n_bound` @type ^`double` @kind wide;
  #L2b8684.  v2:= dcmpl(v5, v0);
  #L2b8688.  if v2 < 0 then goto L2b86fc;
  #L2b868c.  v0:= `@@kotlin.math.Constants.upper_taylor_n_bound` @type ^`double` @kind wide;
  #L2b8690.  v2:= 1I;
  #L2b8692.  v3:= dcmpl(v5, v0);
  #L2b8696.  if v3 <= 0 then goto L2b86da;
  #L2b869a.  v0:= `@@kotlin.math.Constants.upper_taylor_2_bound` @type ^`double` @kind wide;
  #L2b869e.  v3:= dcmpl(v5, v0);
  #L2b86a2.  if v3 <= 0 then goto L2b86b6;
  #L2b86a6.  call temp:= `log`(v5) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L2b86ac.  v5:= temp @kind wide;
  #L2b86ae.  v0:= `@@kotlin.math.Constants.LN2` @type ^`double` @kind wide;
  #L2b86b2.  v5:= v5 + v0 @kind double;
  #L2b86b4.  goto L2b873e;
  #L2b86b6.  v0:= 2I;
  #L2b86b8.  v0:= (`double`) v0 @kind i2d;
  #L2b86ba.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2b86c0.  v5:= v5 * v0 @kind double;
  #L2b86c4.  v0:= (`double`) v2 @kind i2d;
  #L2b86c6.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2b86cc.  v0:= v0 / v5 @kind double;
  #L2b86ce.  v5:= v5 + v0 @kind double;
  #L2b86d0.  call temp:= `log`(v5) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L2b86d6.  v5:= temp @kind wide;
  #L2b86d8.  goto L2b873e;
  #L2b86da.  v0:= v5 * v5 @kind double;
  #L2b86de.  v2:= (`double`) v2 @kind i2d;
  #L2b86e0.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2b86e6.  v0:= v0 + v2 @kind double;
  #L2b86e8.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2b86ee.  v0:= temp @kind wide;
  #L2b86f0.  v5:= v5 + v0 @kind double;
  #L2b86f2.  call temp:= `log`(v5) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L2b86f8.  v5:= temp @kind wide;
  #L2b86fa.  goto L2b873e;
  #L2b86fc.  v0:= -v0 @kind double;
  #L2b86fe.  v2:= dcmpg(v5, v0);
  #L2b8702.  if v2 > 0 then goto L2b8714;
  #L2b8706.  v5:= -v5 @kind double;
  #L2b8708.  call temp:= `asinh`(v5) @signature `Lkotlin/math/MathKt__MathJVMKt;.asinh:(D)D` @kind static;
  #L2b870e.  v5:= temp @kind wide;
  #L2b8710.  v5:= -v5 @kind double;
  #L2b8712.  goto L2b873e;
  #L2b8714.  call temp:= `abs`(v5) @signature `Ljava/lang/Math;.abs:(D)D` @kind static;
  #L2b871a.  v0:= temp @kind wide;
  #L2b871c.  v2:= `@@kotlin.math.Constants.taylor_2_bound` @type ^`double` @kind wide;
  #L2b8720.  v4:= dcmpl(v0, v2);
  #L2b8724.  if v4 < 0 then goto L2b873e;
  #L2b8728.  v0:= v5 * v5 @kind double;
  #L2b872c.  v0:= v0 * v5 @kind double;
  #L2b8730.  v2:= 6I;
  #L2b8732.  v2:= (`double`) v2 @kind i2d;
  #L2b8734.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2b873a.  v0:= v0 / v2 @kind double;
  #L2b873c.  v5:= v5 - v0 @kind double;
  #L2b873e.  return v5 @kind wide;
}
procedure `float` `asinh`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.asinh:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8c90.  v0:= (`double`) v2 @kind f2d;
  #L2b8c92.  call temp:= `asinh`(v0) @signature `Lkotlin/math/MathKt__MathJVMKt;.asinh:(D)D` @kind static;
  #L2b8c98.  v0:= temp @kind wide;
  #L2b8c9a.  v2:= (`float`) v0 @kind d2f;
  #L2b8c9c.  return v2;
}
procedure `double` `atan`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.atan:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8750.  call temp:= `atan`(v0) @signature `Ljava/lang/Math;.atan:(D)D` @kind static;
  #L2b8756.  v0:= temp @kind wide;
  #L2b8758.  return v0 @kind wide;
}
procedure `float` `atan`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.atan:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8cb0.  v0:= (`double`) v2 @kind f2d;
  #L2b8cb2.  call temp:= `atan`(v0) @signature `Ljava/lang/Math;.atan:(D)D` @kind static;
  #L2b8cb8.  v0:= temp @kind wide;
  #L2b8cba.  v2:= (`float`) v0 @kind d2f;
  #L2b8cbc.  return v2;
}
procedure `double` `atan2`(`double` v0 , `double` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.atan2:(DD)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b876c.  call temp:= `atan2`(v0, v2) @signature `Ljava/lang/Math;.atan2:(DD)D` @kind static;
  #L2b8772.  v0:= temp @kind wide;
  #L2b8774.  return v0 @kind wide;
}
procedure `float` `atan2`(`float` v2 , `float` v3 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.atan2:(FF)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8cd0.  v0:= (`double`) v2 @kind f2d;
  #L2b8cd2.  v2:= (`double`) v3 @kind f2d;
  #L2b8cd4.  call temp:= `atan2`(v0, v2) @signature `Ljava/lang/Math;.atan2:(DD)D` @kind static;
  #L2b8cda.  v2:= temp @kind wide;
  #L2b8cdc.  v2:= (`float`) v2 @kind d2f;
  #L2b8cde.  return v2;
}
procedure `double` `atanh`(`double` v5 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.atanh:(D)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2b8788.  call temp:= `abs`(v5) @signature `Ljava/lang/Math;.abs:(D)D` @kind static;
  #L2b878e.  v0:= temp @kind wide;
  #L2b8790.  v2:= `@@kotlin.math.Constants.taylor_n_bound` @type ^`double` @kind wide;
  #L2b8794.  v4:= dcmpg(v0, v2);
  #L2b8798.  if v4 >= 0 then goto L2b87c8;
  #L2b879c.  call temp:= `abs`(v5) @signature `Ljava/lang/Math;.abs:(D)D` @kind static;
  #L2b87a2.  v0:= temp @kind wide;
  #L2b87a4.  v2:= `@@kotlin.math.Constants.taylor_2_bound` @type ^`double` @kind wide;
  #L2b87a8.  v4:= dcmpl(v0, v2);
  #L2b87ac.  if v4 <= 0 then goto L2b87c6;
  #L2b87b0.  v0:= v5 * v5 @kind double;
  #L2b87b4.  v0:= v0 * v5 @kind double;
  #L2b87b8.  v2:= 3I;
  #L2b87ba.  v2:= (`double`) v2 @kind i2d;
  #L2b87bc.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2b87c2.  v0:= v0 / v2 @kind double;
  #L2b87c4.  v5:= v5 + v0 @kind double;
  #L2b87c6.  return v5 @kind wide;
  #L2b87c8.  v0:= 1I;
  #L2b87ca.  v0:= (`double`) v0 @kind i2d;
  #L2b87cc.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2b87d2.  v2:= v0 + v5 @kind double;
  #L2b87d6.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2b87dc.  v0:= v0 - v5 @kind double;
  #L2b87de.  v2:= v2 / v0 @kind double;
  #L2b87e0.  call temp:= `log`(v2) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L2b87e6.  v5:= temp @kind wide;
  #L2b87e8.  v0:= 2I;
  #L2b87ea.  v0:= (`double`) v0 @kind i2d;
  #L2b87ec.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2b87f2.  v5:= v5 / v0 @kind double;
  #L2b87f4.  return v5 @kind wide;
}
procedure `float` `atanh`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.atanh:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8cf0.  v0:= (`double`) v2 @kind f2d;
  #L2b8cf2.  call temp:= `atanh`(v0) @signature `Lkotlin/math/MathKt__MathJVMKt;.atanh:(D)D` @kind static;
  #L2b8cf8.  v0:= temp @kind wide;
  #L2b8cfa.  v2:= (`float`) v0 @kind d2f;
  #L2b8cfc.  return v2;
}
procedure `double` `ceil`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.ceil:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8808.  call temp:= `ceil`(v0) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L2b880e.  v0:= temp @kind wide;
  #L2b8810.  return v0 @kind wide;
}
procedure `float` `ceil`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.ceil:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8d10.  v0:= (`double`) v2 @kind f2d;
  #L2b8d12.  call temp:= `ceil`(v0) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L2b8d18.  v0:= temp @kind wide;
  #L2b8d1a.  v2:= (`float`) v0 @kind d2f;
  #L2b8d1c.  return v2;
}
procedure `double` `cos`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.cos:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8824.  call temp:= `cos`(v0) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L2b882a.  v0:= temp @kind wide;
  #L2b882c.  return v0 @kind wide;
}
procedure `float` `cos`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.cos:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8d30.  v0:= (`double`) v2 @kind f2d;
  #L2b8d32.  call temp:= `cos`(v0) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L2b8d38.  v0:= temp @kind wide;
  #L2b8d3a.  v2:= (`float`) v0 @kind d2f;
  #L2b8d3c.  return v2;
}
procedure `double` `cosh`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.cosh:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8840.  call temp:= `cosh`(v0) @signature `Ljava/lang/Math;.cosh:(D)D` @kind static;
  #L2b8846.  v0:= temp @kind wide;
  #L2b8848.  return v0 @kind wide;
}
procedure `float` `cosh`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.cosh:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8d50.  v0:= (`double`) v2 @kind f2d;
  #L2b8d52.  call temp:= `cosh`(v0) @signature `Ljava/lang/Math;.cosh:(D)D` @kind static;
  #L2b8d58.  v0:= temp @kind wide;
  #L2b8d5a.  v2:= (`float`) v0 @kind d2f;
  #L2b8d5c.  return v2;
}
procedure `double` `exp`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.exp:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b885c.  call temp:= `exp`(v0) @signature `Ljava/lang/Math;.exp:(D)D` @kind static;
  #L2b8862.  v0:= temp @kind wide;
  #L2b8864.  return v0 @kind wide;
}
procedure `float` `exp`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.exp:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8d70.  v0:= (`double`) v2 @kind f2d;
  #L2b8d72.  call temp:= `exp`(v0) @signature `Ljava/lang/Math;.exp:(D)D` @kind static;
  #L2b8d78.  v0:= temp @kind wide;
  #L2b8d7a.  v2:= (`float`) v0 @kind d2f;
  #L2b8d7c.  return v2;
}
procedure `double` `expm1`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.expm1:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8878.  call temp:= `expm1`(v0) @signature `Ljava/lang/Math;.expm1:(D)D` @kind static;
  #L2b887e.  v0:= temp @kind wide;
  #L2b8880.  return v0 @kind wide;
}
procedure `float` `expm1`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.expm1:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8d90.  v0:= (`double`) v2 @kind f2d;
  #L2b8d92.  call temp:= `expm1`(v0) @signature `Ljava/lang/Math;.expm1:(D)D` @kind static;
  #L2b8d98.  v0:= temp @kind wide;
  #L2b8d9a.  v2:= (`float`) v0 @kind d2f;
  #L2b8d9c.  return v2;
}
procedure `double` `floor`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.floor:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8894.  call temp:= `floor`(v0) @signature `Ljava/lang/Math;.floor:(D)D` @kind static;
  #L2b889a.  v0:= temp @kind wide;
  #L2b889c.  return v0 @kind wide;
}
procedure `float` `floor`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.floor:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8db0.  v0:= (`double`) v2 @kind f2d;
  #L2b8db2.  call temp:= `floor`(v0) @signature `Ljava/lang/Math;.floor:(D)D` @kind static;
  #L2b8db8.  v0:= temp @kind wide;
  #L2b8dba.  v2:= (`float`) v0 @kind d2f;
  #L2b8dbc.  return v2;
}
procedure `double` `getAbsoluteValue`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getAbsoluteValue:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b88b0.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(D)D` @kind static;
  #L2b88b6.  v0:= temp @kind wide;
  #L2b88b8.  return v0 @kind wide;
}
procedure `float` `getAbsoluteValue`(`float` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getAbsoluteValue:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8dd0.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L2b8dd6.  v0:= temp;
  #L2b8dd8.  return v0;
}
procedure `int` `getAbsoluteValue`(`int` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getAbsoluteValue:(I)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b916c.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L2b9172.  v0:= temp;
  #L2b9174.  return v0;
}
procedure `long` `getAbsoluteValue`(`long` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getAbsoluteValue:(J)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b92cc.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(J)J` @kind static;
  #L2b92d2.  v0:= temp @kind wide;
  #L2b92d4.  return v0 @kind wide;
}
procedure `void` `getAbsoluteValue$annotations`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getAbsoluteValue$annotations:(D)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2b938c.  return @kind void;
}
procedure `void` `getAbsoluteValue$annotations`(`float` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getAbsoluteValue$annotations:(F)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2b93a0.  return @kind void;
}
procedure `void` `getAbsoluteValue$annotations`(`int` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getAbsoluteValue$annotations:(I)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2b93b4.  return @kind void;
}
procedure `void` `getAbsoluteValue$annotations`(`long` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getAbsoluteValue$annotations:(J)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2b93c8.  return @kind void;
}
procedure `double` `getSign`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getSign:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b88cc.  call temp:= `signum`(v0) @signature `Ljava/lang/Math;.signum:(D)D` @kind static;
  #L2b88d2.  v0:= temp @kind wide;
  #L2b88d4.  return v0 @kind wide;
}
procedure `float` `getSign`(`float` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getSign:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8dec.  call temp:= `signum`(v0) @signature `Ljava/lang/Math;.signum:(F)F` @kind static;
  #L2b8df2.  v0:= temp;
  #L2b8df4.  return v0;
}
procedure `int` `getSign`(`int` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getSign:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2b9188.  if v0 >= 0 then goto L2b9190;
  #L2b918c.  v0:= -1I;
  #L2b918e.  goto L2b919a;
  #L2b9190.  if v0 <= 0 then goto L2b9198;
  #L2b9194.  v0:= 1I;
  #L2b9196.  goto L2b919a;
  #L2b9198.  v0:= 0I;
  #L2b919a.  return v0;
}
procedure `int` `getSign`(`long` v3 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getSign:(J)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2b91ac.  v0:= 0L;
  #L2b91b0.  v2:= lcmp(v3, v0);
  #L2b91b4.  if v2 >= 0 then goto L2b91bc;
  #L2b91b8.  v3:= -1I;
  #L2b91ba.  goto L2b91ca;
  #L2b91bc.  v2:= lcmp(v3, v0);
  #L2b91c0.  if v2 <= 0 then goto L2b91c8;
  #L2b91c4.  v3:= 1I;
  #L2b91c6.  goto L2b91ca;
  #L2b91c8.  v3:= 0I;
  #L2b91ca.  return v3;
}
procedure `void` `getSign$annotations`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getSign$annotations:(D)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2b93dc.  return @kind void;
}
procedure `void` `getSign$annotations`(`float` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getSign$annotations:(F)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2b93f0.  return @kind void;
}
procedure `void` `getSign$annotations`(`int` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getSign$annotations:(I)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2b9404.  return @kind void;
}
procedure `void` `getSign$annotations`(`long` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getSign$annotations:(J)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2b9418.  return @kind void;
}
procedure `double` `getUlp`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getUlp:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b88e8.  call temp:= `ulp`(v0) @signature `Ljava/lang/Math;.ulp:(D)D` @kind static;
  #L2b88ee.  v0:= temp @kind wide;
  #L2b88f0.  return v0 @kind wide;
}
procedure `float` `getUlp`(`float` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getUlp:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8e08.  call temp:= `ulp`(v0) @signature `Ljava/lang/Math;.ulp:(F)F` @kind static;
  #L2b8e0e.  v0:= temp;
  #L2b8e10.  return v0;
}
procedure `void` `getUlp$annotations`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getUlp$annotations:(D)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2b942c.  return @kind void;
}
procedure `void` `getUlp$annotations`(`float` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.getUlp$annotations:(F)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L2b9440.  return @kind void;
}
procedure `double` `hypot`(`double` v0 , `double` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.hypot:(DD)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8904.  call temp:= `hypot`(v0, v2) @signature `Ljava/lang/Math;.hypot:(DD)D` @kind static;
  #L2b890a.  v0:= temp @kind wide;
  #L2b890c.  return v0 @kind wide;
}
procedure `float` `hypot`(`float` v2 , `float` v3 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.hypot:(FF)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8e24.  v0:= (`double`) v2 @kind f2d;
  #L2b8e26.  v2:= (`double`) v3 @kind f2d;
  #L2b8e28.  call temp:= `hypot`(v0, v2) @signature `Ljava/lang/Math;.hypot:(DD)D` @kind static;
  #L2b8e2e.  v2:= temp @kind wide;
  #L2b8e30.  v2:= (`float`) v2 @kind d2f;
  #L2b8e32.  return v2;
}
procedure `double` `ln`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.ln:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8920.  call temp:= `log`(v0) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L2b8926.  v0:= temp @kind wide;
  #L2b8928.  return v0 @kind wide;
}
procedure `float` `ln`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.ln:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8e44.  v0:= (`double`) v2 @kind f2d;
  #L2b8e46.  call temp:= `log`(v0) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L2b8e4c.  v0:= temp @kind wide;
  #L2b8e4e.  v2:= (`float`) v0 @kind d2f;
  #L2b8e50.  return v2;
}
procedure `double` `ln1p`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.ln1p:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b893c.  call temp:= `log1p`(v0) @signature `Ljava/lang/Math;.log1p:(D)D` @kind static;
  #L2b8942.  v0:= temp @kind wide;
  #L2b8944.  return v0 @kind wide;
}
procedure `float` `ln1p`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.ln1p:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8e64.  v0:= (`double`) v2 @kind f2d;
  #L2b8e66.  call temp:= `log1p`(v0) @signature `Ljava/lang/Math;.log1p:(D)D` @kind static;
  #L2b8e6c.  v0:= temp @kind wide;
  #L2b8e6e.  v2:= (`float`) v0 @kind d2f;
  #L2b8e70.  return v2;
}
procedure `double` `log`(`double` v3 , `double` v5 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.log:(DD)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2b8958.  v0:= 0L;
  #L2b895c.  v2:= dcmpg(v5, v0);
  #L2b8960.  if v2 <= 0 then goto L2b8990;
  #L2b8964.  v0:= 1.0D;
  #L2b8968.  v2:= dcmpg(v5, v0);
  #L2b896c.  if v2 != 0 then goto L2b8974;
  #L2b8970.  v0:= 1I;
  #L2b8972.  goto L2b8976;
  #L2b8974.  v0:= 0I;
  #L2b8976.  if v0 == 0 then goto L2b897c;
  #L2b897a.  goto L2b8990;
  #L2b897c.  call temp:= `log`(v3) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L2b8982.  v3:= temp @kind wide;
  #L2b8984.  call temp:= `log`(v5) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L2b898a.  v5:= temp @kind wide;
  #L2b898c.  v3:= v3 / v5 @kind double;
  #L2b898e.  return v3 @kind wide;
  #L2b8990.  v3:= NaND;
  #L2b8994.  return v3 @kind wide;
}
procedure `float` `log`(`float` v2 , `float` v3 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.log:(FF)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8e84.  v0:= 0I;
  #L2b8e86.  v0:= fcmpg(v3, v0);
  #L2b8e8a.  if v0 <= 0 then goto L2b8ec0;
  #L2b8e8e.  v0:= 1.0F;
  #L2b8e92.  v0:= fcmpg(v3, v0);
  #L2b8e96.  if v0 != 0 then goto L2b8e9e;
  #L2b8e9a.  v0:= 1I;
  #L2b8e9c.  goto L2b8ea0;
  #L2b8e9e.  v0:= 0I;
  #L2b8ea0.  if v0 == 0 then goto L2b8ea6;
  #L2b8ea4.  goto L2b8ec0;
  #L2b8ea6.  v0:= (`double`) v2 @kind f2d;
  #L2b8ea8.  call temp:= `log`(v0) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L2b8eae.  v0:= temp @kind wide;
  #L2b8eb0.  v2:= (`double`) v3 @kind f2d;
  #L2b8eb2.  call temp:= `log`(v2) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L2b8eb8.  v2:= temp @kind wide;
  #L2b8eba.  v0:= v0 / v2 @kind double;
  #L2b8ebc.  v2:= (`float`) v0 @kind d2f;
  #L2b8ebe.  return v2;
  #L2b8ec0.  v2:= NaNF;
  #L2b8ec4.  return v2;
}
procedure `double` `log10`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.log10:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b89a8.  call temp:= `log10`(v0) @signature `Ljava/lang/Math;.log10:(D)D` @kind static;
  #L2b89ae.  v0:= temp @kind wide;
  #L2b89b0.  return v0 @kind wide;
}
procedure `float` `log10`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.log10:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8ed8.  v0:= (`double`) v2 @kind f2d;
  #L2b8eda.  call temp:= `log10`(v0) @signature `Ljava/lang/Math;.log10:(D)D` @kind static;
  #L2b8ee0.  v0:= temp @kind wide;
  #L2b8ee2.  v2:= (`float`) v0 @kind d2f;
  #L2b8ee4.  return v2;
}
procedure `double` `log2`(`double` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.log2:(D)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b89c4.  call temp:= `log`(v2) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L2b89ca.  v2:= temp @kind wide;
  #L2b89cc.  v0:= `@@kotlin.math.Constants.LN2` @type ^`double` @kind wide;
  #L2b89d0.  v2:= v2 / v0 @kind double;
  #L2b89d2.  return v2 @kind wide;
}
procedure `float` `log2`(`float` v4 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.log2:(F)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2b8ef8.  v0:= (`double`) v4 @kind f2d;
  #L2b8efa.  call temp:= `log`(v0) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L2b8f00.  v0:= temp @kind wide;
  #L2b8f02.  v2:= `@@kotlin.math.Constants.LN2` @type ^`double` @kind wide;
  #L2b8f06.  v0:= v0 / v2 @kind double;
  #L2b8f08.  v4:= (`float`) v0 @kind d2f;
  #L2b8f0a.  return v4;
}
procedure `double` `max`(`double` v0 , `double` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.max:(DD)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b89e4.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(DD)D` @kind static;
  #L2b89ea.  v0:= temp @kind wide;
  #L2b89ec.  return v0 @kind wide;
}
procedure `float` `max`(`float` v0 , `float` v1 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.max:(FF)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8f1c.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L2b8f22.  v0:= temp;
  #L2b8f24.  return v0;
}
procedure `int` `max`(`int` v0 , `int` v1 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.max:(II)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b91dc.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2b91e2.  v0:= temp;
  #L2b91e4.  return v0;
}
procedure `long` `max`(`long` v0 , `long` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.max:(JJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b92e8.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L2b92ee.  v0:= temp @kind wide;
  #L2b92f0.  return v0 @kind wide;
}
procedure `double` `min`(`double` v0 , `double` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.min:(DD)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8a00.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(DD)D` @kind static;
  #L2b8a06.  v0:= temp @kind wide;
  #L2b8a08.  return v0 @kind wide;
}
procedure `float` `min`(`float` v0 , `float` v1 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.min:(FF)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8f38.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L2b8f3e.  v0:= temp;
  #L2b8f40.  return v0;
}
procedure `int` `min`(`int` v0 , `int` v1 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.min:(II)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b91f8.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2b91fe.  v0:= temp;
  #L2b9200.  return v0;
}
procedure `long` `min`(`long` v0 , `long` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.min:(JJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b9304.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2b930a.  v0:= temp @kind wide;
  #L2b930c.  return v0 @kind wide;
}
procedure `double` `nextDown`(`double` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.nextDown:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8a1c.  v0:= -InfinityD;
  #L2b8a20.  call temp:= `nextAfter`(v2, v0) @signature `Ljava/lang/Math;.nextAfter:(DD)D` @kind static;
  #L2b8a26.  v2:= temp @kind wide;
  #L2b8a28.  return v2 @kind wide;
}
procedure `float` `nextDown`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.nextDown:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8f54.  v0:= -InfinityD;
  #L2b8f58.  call temp:= `nextAfter`(v2, v0) @signature `Ljava/lang/Math;.nextAfter:(FD)F` @kind static;
  #L2b8f5e.  v2:= temp;
  #L2b8f60.  return v2;
}
procedure `double` `nextTowards`(`double` v0 , `double` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.nextTowards:(DD)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8a3c.  call temp:= `nextAfter`(v0, v2) @signature `Ljava/lang/Math;.nextAfter:(DD)D` @kind static;
  #L2b8a42.  v0:= temp @kind wide;
  #L2b8a44.  return v0 @kind wide;
}
procedure `float` `nextTowards`(`float` v2 , `float` v3 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.nextTowards:(FF)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8f74.  v0:= (`double`) v3 @kind f2d;
  #L2b8f76.  call temp:= `nextAfter`(v2, v0) @signature `Ljava/lang/Math;.nextAfter:(FD)F` @kind static;
  #L2b8f7c.  v2:= temp;
  #L2b8f7e.  return v2;
}
procedure `double` `nextUp`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.nextUp:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8a58.  call temp:= `nextUp`(v0) @signature `Ljava/lang/Math;.nextUp:(D)D` @kind static;
  #L2b8a5e.  v0:= temp @kind wide;
  #L2b8a60.  return v0 @kind wide;
}
procedure `float` `nextUp`(`float` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.nextUp:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8f90.  call temp:= `nextUp`(v0) @signature `Ljava/lang/Math;.nextUp:(F)F` @kind static;
  #L2b8f96.  v0:= temp;
  #L2b8f98.  return v0;
}
procedure `double` `pow`(`double` v0 , `double` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.pow:(DD)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8a74.  call temp:= `pow`(v0, v2) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2b8a7a.  v0:= temp @kind wide;
  #L2b8a7c.  return v0 @kind wide;
}
procedure `double` `pow`(`double` v2 , `int` v4 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.pow:(DI)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8a90.  v0:= (`double`) v4 @kind i2d;
  #L2b8a92.  call temp:= `pow`(v2, v0) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2b8a98.  v2:= temp @kind wide;
  #L2b8a9a.  return v2 @kind wide;
}
procedure `float` `pow`(`float` v2 , `float` v3 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.pow:(FF)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8fac.  v0:= (`double`) v2 @kind f2d;
  #L2b8fae.  v2:= (`double`) v3 @kind f2d;
  #L2b8fb0.  call temp:= `pow`(v0, v2) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2b8fb6.  v2:= temp @kind wide;
  #L2b8fb8.  v2:= (`float`) v2 @kind d2f;
  #L2b8fba.  return v2;
}
procedure `float` `pow`(`float` v2 , `int` v3 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.pow:(FI)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8fcc.  v0:= (`double`) v2 @kind f2d;
  #L2b8fce.  v2:= (`double`) v3 @kind i2d;
  #L2b8fd0.  call temp:= `pow`(v0, v2) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2b8fd6.  v2:= temp @kind wide;
  #L2b8fd8.  v2:= (`float`) v2 @kind d2f;
  #L2b8fda.  return v2;
}
procedure `double` `round`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.round:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8aac.  call temp:= `rint`(v0) @signature `Ljava/lang/Math;.rint:(D)D` @kind static;
  #L2b8ab2.  v0:= temp @kind wide;
  #L2b8ab4.  return v0 @kind wide;
}
procedure `float` `round`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.round:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8fec.  v0:= (`double`) v2 @kind f2d;
  #L2b8fee.  call temp:= `rint`(v0) @signature `Ljava/lang/Math;.rint:(D)D` @kind static;
  #L2b8ff4.  v0:= temp @kind wide;
  #L2b8ff6.  v2:= (`float`) v0 @kind d2f;
  #L2b8ff8.  return v2;
}
procedure `int` `roundToInt`(`double` v3 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.roundToInt:(D)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2b9214.  call temp:= `isNaN`(v3) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2b921a.  v0:= temp;
  #L2b921c.  if v0 != 0 then goto L2b9258;
  #L2b9220.  v0:= 2.147483647E9D;
  #L2b922a.  v2:= dcmpl(v3, v0);
  #L2b922e.  if v2 <= 0 then goto L2b923a;
  #L2b9232.  v3:= 2147483647I;
  #L2b9238.  goto L2b9256;
  #L2b923a.  v0:= -2.147483648E9D;
  #L2b923e.  v2:= dcmpg(v3, v0);
  #L2b9242.  if v2 >= 0 then goto L2b924c;
  #L2b9246.  v3:= -2147483648I;
  #L2b924a.  goto L2b9256;
  #L2b924c.  call temp:= `round`(v3) @signature `Ljava/lang/Math;.round:(D)J` @kind static;
  #L2b9252.  v3:= temp @kind wide;
  #L2b9254.  v3:= (`int`) v3 @kind l2i;
  #L2b9256.  return v3;
  #L2b9258.  v3:= new `java.lang.IllegalArgumentException`;
  #L2b925c.  v4:= "Cannot round NaN value." @kind object;
  #L2b9260.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b9266.  throw v3;
}
procedure `int` `roundToInt`(`float` v1 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.roundToInt:(F)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b9278.  call temp:= `isNaN`(v1) @signature `Ljava/lang/Float;.isNaN:(F)Z` @kind static;
  #L2b927e.  v0:= temp;
  #L2b9280.  if v0 != 0 then goto L2b928e;
  #L2b9284.  call temp:= `round`(v1) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L2b928a.  v1:= temp;
  #L2b928c.  return v1;
  #L2b928e.  v1:= new `java.lang.IllegalArgumentException`;
  #L2b9292.  v0:= "Cannot round NaN value." @kind object;
  #L2b9296.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b929c.  throw v1;
}
procedure `long` `roundToLong`(`double` v1 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.roundToLong:(D)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b9320.  call temp:= `isNaN`(v1) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2b9326.  v0:= temp;
  #L2b9328.  if v0 != 0 then goto L2b9336;
  #L2b932c.  call temp:= `round`(v1) @signature `Ljava/lang/Math;.round:(D)J` @kind static;
  #L2b9332.  v1:= temp @kind wide;
  #L2b9334.  return v1 @kind wide;
  #L2b9336.  v1:= new `java.lang.IllegalArgumentException`;
  #L2b933a.  v2:= "Cannot round NaN value." @kind object;
  #L2b933e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b9344.  throw v1;
}
procedure `long` `roundToLong`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.roundToLong:(F)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b9358.  v0:= (`double`) v2 @kind f2d;
  #L2b935a.  call temp:= `roundToLong`(v0) @signature `Lkotlin/math/MathKt;.roundToLong:(D)J` @kind static;
  #L2b9360.  v0:= temp @kind wide;
  #L2b9362.  return v0 @kind wide;
}
procedure `double` `sign`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.sign:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8ac8.  call temp:= `signum`(v0) @signature `Ljava/lang/Math;.signum:(D)D` @kind static;
  #L2b8ace.  v0:= temp @kind wide;
  #L2b8ad0.  return v0 @kind wide;
}
procedure `float` `sign`(`float` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.sign:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b900c.  call temp:= `signum`(v0) @signature `Ljava/lang/Math;.signum:(F)F` @kind static;
  #L2b9012.  v0:= temp;
  #L2b9014.  return v0;
}
procedure `double` `sin`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.sin:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8ae4.  call temp:= `sin`(v0) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L2b8aea.  v0:= temp @kind wide;
  #L2b8aec.  return v0 @kind wide;
}
procedure `float` `sin`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.sin:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b9028.  v0:= (`double`) v2 @kind f2d;
  #L2b902a.  call temp:= `sin`(v0) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L2b9030.  v0:= temp @kind wide;
  #L2b9032.  v2:= (`float`) v0 @kind d2f;
  #L2b9034.  return v2;
}
procedure `double` `sinh`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.sinh:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8b00.  call temp:= `sinh`(v0) @signature `Ljava/lang/Math;.sinh:(D)D` @kind static;
  #L2b8b06.  v0:= temp @kind wide;
  #L2b8b08.  return v0 @kind wide;
}
procedure `float` `sinh`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.sinh:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b9048.  v0:= (`double`) v2 @kind f2d;
  #L2b904a.  call temp:= `sinh`(v0) @signature `Ljava/lang/Math;.sinh:(D)D` @kind static;
  #L2b9050.  v0:= temp @kind wide;
  #L2b9052.  v2:= (`float`) v0 @kind d2f;
  #L2b9054.  return v2;
}
procedure `double` `sqrt`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.sqrt:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8b1c.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2b8b22.  v0:= temp @kind wide;
  #L2b8b24.  return v0 @kind wide;
}
procedure `float` `sqrt`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.sqrt:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b9068.  v0:= (`double`) v2 @kind f2d;
  #L2b906a.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2b9070.  v0:= temp @kind wide;
  #L2b9072.  v2:= (`float`) v0 @kind d2f;
  #L2b9074.  return v2;
}
procedure `double` `tan`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.tan:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8b38.  call temp:= `tan`(v0) @signature `Ljava/lang/Math;.tan:(D)D` @kind static;
  #L2b8b3e.  v0:= temp @kind wide;
  #L2b8b40.  return v0 @kind wide;
}
procedure `float` `tan`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.tan:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b9088.  v0:= (`double`) v2 @kind f2d;
  #L2b908a.  call temp:= `tan`(v0) @signature `Ljava/lang/Math;.tan:(D)D` @kind static;
  #L2b9090.  v0:= temp @kind wide;
  #L2b9092.  v2:= (`float`) v0 @kind d2f;
  #L2b9094.  return v2;
}
procedure `double` `tanh`(`double` v0 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.tanh:(D)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8b54.  call temp:= `tanh`(v0) @signature `Ljava/lang/Math;.tanh:(D)D` @kind static;
  #L2b8b5a.  v0:= temp @kind wide;
  #L2b8b5c.  return v0 @kind wide;
}
procedure `float` `tanh`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.tanh:(F)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b90a8.  v0:= (`double`) v2 @kind f2d;
  #L2b90aa.  call temp:= `tanh`(v0) @signature `Ljava/lang/Math;.tanh:(D)D` @kind static;
  #L2b90b0.  v0:= temp @kind wide;
  #L2b90b2.  v2:= (`float`) v0 @kind d2f;
  #L2b90b4.  return v2;
}
procedure `double` `truncate`(`double` v3 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.truncate:(D)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2b8b70.  call temp:= `isNaN`(v3) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2b8b76.  v0:= temp;
  #L2b8b78.  if v0 != 0 then goto L2b8ba8;
  #L2b8b7c.  call temp:= `isInfinite`(v3) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L2b8b82.  v0:= temp;
  #L2b8b84.  if v0 == 0 then goto L2b8b8a;
  #L2b8b88.  goto L2b8ba8;
  #L2b8b8a.  v0:= 0L;
  #L2b8b8e.  v2:= dcmpl(v3, v0);
  #L2b8b92.  if v2 <= 0 then goto L2b8ba0;
  #L2b8b96.  call temp:= `floor`(v3) @signature `Ljava/lang/Math;.floor:(D)D` @kind static;
  #L2b8b9c.  v3:= temp @kind wide;
  #L2b8b9e.  goto L2b8ba8;
  #L2b8ba0.  call temp:= `ceil`(v3) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L2b8ba6.  v3:= temp @kind wide;
  #L2b8ba8.  return v3 @kind wide;
}
procedure `float` `truncate`(`float` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.truncate:(F)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b90c8.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Float;.isNaN:(F)Z` @kind static;
  #L2b90ce.  v0:= temp;
  #L2b90d0.  if v0 != 0 then goto L2b9104;
  #L2b90d4.  call temp:= `isInfinite`(v2) @signature `Ljava/lang/Float;.isInfinite:(F)Z` @kind static;
  #L2b90da.  v0:= temp;
  #L2b90dc.  if v0 == 0 then goto L2b90e2;
  #L2b90e0.  goto L2b9104;
  #L2b90e2.  v0:= 0I;
  #L2b90e4.  v0:= fcmpl(v2, v0);
  #L2b90e8.  if v0 <= 0 then goto L2b90f8;
  #L2b90ec.  v0:= (`double`) v2 @kind f2d;
  #L2b90ee.  call temp:= `floor`(v0) @signature `Ljava/lang/Math;.floor:(D)D` @kind static;
  #L2b90f4.  v0:= temp @kind wide;
  #L2b90f6.  goto L2b9102;
  #L2b90f8.  v0:= (`double`) v2 @kind f2d;
  #L2b90fa.  call temp:= `ceil`(v0) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L2b9100.  v0:= temp @kind wide;
  #L2b9102.  v2:= (`float`) v0 @kind d2f;
  #L2b9104.  return v2;
}
procedure `double` `withSign`(`double` v0 , `double` v2 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.withSign:(DD)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b8bbc.  call temp:= `copySign`(v0, v2) @signature `Ljava/lang/Math;.copySign:(DD)D` @kind static;
  #L2b8bc2.  v0:= temp @kind wide;
  #L2b8bc4.  return v0 @kind wide;
}
procedure `double` `withSign`(`double` v2 , `int` v4 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.withSign:(DI)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2b8bd8.  v0:= (`double`) v4 @kind i2d;
  #L2b8bda.  call temp:= `copySign`(v2, v0) @signature `Ljava/lang/Math;.copySign:(DD)D` @kind static;
  #L2b8be0.  v2:= temp @kind wide;
  #L2b8be2.  return v2 @kind wide;
}
procedure `float` `withSign`(`float` v0 , `float` v1 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.withSign:(FF)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b9118.  call temp:= `copySign`(v0, v1) @signature `Ljava/lang/Math;.copySign:(FF)F` @kind static;
  #L2b911e.  v0:= temp;
  #L2b9120.  return v0;
}
procedure `float` `withSign`(`float` v0 , `int` v1 ) @signature `Lkotlin/math/MathKt__MathJVMKt;.withSign:(FI)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L2b9134.  v1:= (`float`) v1 @kind i2f;
  #L2b9136.  call temp:= `copySign`(v0, v1) @signature `Ljava/lang/Math;.copySign:(FF)F` @kind static;
  #L2b913c.  v0:= temp;
  #L2b913e.  return v0;
}
