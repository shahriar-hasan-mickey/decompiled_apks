record `kotlin.math.Constants` @kind class @AccessFlag FINAL {
}
global `kotlin.math.Constants` `@@kotlin.math.Constants.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
global `double` `@@kotlin.math.Constants.LN2` @AccessFlag PUBLIC_STATIC_FINAL;
global `double` `@@kotlin.math.Constants.epsilon` @AccessFlag PUBLIC_STATIC_FINAL;
global `double` `@@kotlin.math.Constants.taylor_2_bound` @AccessFlag PUBLIC_STATIC_FINAL;
global `double` `@@kotlin.math.Constants.taylor_n_bound` @AccessFlag PUBLIC_STATIC_FINAL;
global `double` `@@kotlin.math.Constants.upper_taylor_2_bound` @AccessFlag PUBLIC_STATIC_FINAL;
global `double` `@@kotlin.math.Constants.upper_taylor_n_bound` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/math/Constants;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2b8488.  v0:= new `kotlin.math.Constants`;
  #L2b848c.  call `<init>`(v0) @signature `Lkotlin/math/Constants;.<init>:()V` @kind direct;
  #L2b8492.  `@@kotlin.math.Constants.INSTANCE` @type ^`kotlin.math.Constants` := v0 @kind object;
  #L2b8496.  v0:= 2.0D;
  #L2b849a.  call temp:= `log`(v0) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L2b84a0.  v0:= temp @kind wide;
  #L2b84a2.  `@@kotlin.math.Constants.LN2` @type ^`double` := v0 @kind wide;
  #L2b84a6.  v0:= 1.0D;
  #L2b84aa.  call temp:= `ulp`(v0) @signature `Ljava/lang/Math;.ulp:(D)D` @kind static;
  #L2b84b0.  v0:= temp @kind wide;
  #L2b84b2.  `@@kotlin.math.Constants.epsilon` @type ^`double` := v0 @kind wide;
  #L2b84b6.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2b84bc.  v0:= temp @kind wide;
  #L2b84be.  `@@kotlin.math.Constants.taylor_2_bound` @type ^`double` := v0 @kind wide;
  #L2b84c2.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2b84c8.  v2:= temp @kind wide;
  #L2b84ca.  `@@kotlin.math.Constants.taylor_n_bound` @type ^`double` := v2 @kind wide;
  #L2b84ce.  v4:= 1I;
  #L2b84d0.  v4:= (`double`) v4 @kind i2d;
  #L2b84d2.  call temp:= `isNaN`(v4) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2b84d8.  v0:= v4 / v0 @kind double;
  #L2b84dc.  `@@kotlin.math.Constants.upper_taylor_2_bound` @type ^`double` := v0 @kind wide;
  #L2b84e0.  call temp:= `isNaN`(v4) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2b84e6.  v4:= v4 / v2 @kind double;
  #L2b84e8.  `@@kotlin.math.Constants.upper_taylor_n_bound` @type ^`double` := v4 @kind wide;
  #L2b84ec.  return @kind void;
}
procedure `void` `<init>`(`kotlin.math.Constants` v0 @kind this) @signature `Lkotlin/math/Constants;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2b8500.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b8506.  return @kind void;
}
