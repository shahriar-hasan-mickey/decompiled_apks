record `kotlin.properties.ObservableProperty` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.properties.ReadWriteProperty` @kind interface {
  `java.lang.Object` `kotlin.properties.ObservableProperty.value` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.properties.ObservableProperty` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/properties/ObservableProperty;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2b9788.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b978e.  v0.`kotlin.properties.ObservableProperty.value` @type ^`java.lang.Object` := v1 @kind object;
  #L2b9792.  return @kind void;
}
procedure `void` `afterChange`(`kotlin.properties.ObservableProperty` v0 @kind this, `kotlin.reflect.KProperty` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/properties/ObservableProperty;.afterChange:(Lkotlin/reflect/KProperty;Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L2b97a4.  v2:= "property" @kind object;
  #L2b97a8.  call `checkNotNullParameter`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b97ae.  return @kind void;
}
procedure `boolean` `beforeChange`(`kotlin.properties.ObservableProperty` v0 @kind this, `kotlin.reflect.KProperty` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/properties/ObservableProperty;.beforeChange:(Lkotlin/reflect/KProperty;Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PROTECTED {
    temp;

  #L2b9748.  v2:= "property" @kind object;
  #L2b974c.  call `checkNotNullParameter`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b9752.  v1:= 1I;
  #L2b9754.  return v1;
}
procedure `java.lang.Object` `getValue`(`kotlin.properties.ObservableProperty` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.reflect.KProperty` v2 @kind object) @signature `Lkotlin/properties/ObservableProperty;.getValue:(Ljava/lang/Object;Lkotlin/reflect/KProperty;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L2b9768.  v1:= "property" @kind object;
  #L2b976c.  call `checkNotNullParameter`(v2, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b9772.  v1:= v0.`kotlin.properties.ObservableProperty.value` @type ^`java.lang.Object` @kind object;
  #L2b9776.  return v1 @kind object;
}
procedure `void` `setValue`(`kotlin.properties.ObservableProperty` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.reflect.KProperty` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlin/properties/ObservableProperty;.setValue:(Ljava/lang/Object;Lkotlin/reflect/KProperty;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b97c0.  v2:= "property" @kind object;
  #L2b97c4.  call `checkNotNullParameter`(v3, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2b97ca.  v2:= v1.`kotlin.properties.ObservableProperty.value` @type ^`java.lang.Object` @kind object;
  #L2b97ce.  call temp:= `beforeChange`(v1, v3, v2, v4) @signature `Lkotlin/properties/ObservableProperty;.beforeChange:(Lkotlin/reflect/KProperty;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2b97d4.  v0:= temp;
  #L2b97d6.  if v0 != 0 then goto L2b97dc;
  #L2b97da.  return @kind void;
  #L2b97dc.  v1.`kotlin.properties.ObservableProperty.value` @type ^`java.lang.Object` := v4 @kind object;
  #L2b97e0.  call `afterChange`(v1, v3, v2, v4) @signature `Lkotlin/properties/ObservableProperty;.afterChange:(Lkotlin/reflect/KProperty;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L2b97e6.  return @kind void;
}
