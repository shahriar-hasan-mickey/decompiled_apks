record `kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface {
  `java.util.stream.Stream` `kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$1.$this_asSequence$inlined` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$1` v0 @kind this, `java.util.stream.Stream` v1 @kind object) @signature `Lkotlin/streams/jdk8/StreamsKt$asSequence$$inlined$Sequence$1;.<init>:(Ljava/util/stream/Stream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2c3df0.  v0.`kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$1.$this_asSequence$inlined` @type ^`java.util.stream.Stream` := v1 @kind object;
  #L2c3df4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c3dfa.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$1` v2 @kind this) @signature `Lkotlin/streams/jdk8/StreamsKt$asSequence$$inlined$Sequence$1;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2c3dc8.  v0:= v2.`kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$1.$this_asSequence$inlined` @type ^`java.util.stream.Stream` @kind object;
  #L2c3dcc.  call temp:= `iterator`(v0) @signature `Ljava/util/stream/Stream;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2c3dd2.  v0:= temp @kind object;
  #L2c3dd4.  v1:= "iterator()" @kind object;
  #L2c3dd8.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2c3dde.  return v0 @kind object;
}
