record `kotlin.NumbersKt__FloorDivModKt` @kind class @AccessFlag  extends `kotlin.NumbersKt__BigIntegersKt` @kind class {
}
procedure `void` `<init>`(`kotlin.NumbersKt__FloorDivModKt` v0 @kind this) @signature `Lkotlin/NumbersKt__FloorDivModKt;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L297ae8.  call `<init>`(v0) @signature `Lkotlin/NumbersKt__BigIntegersKt;.<init>:()V` @kind direct;
  #L297aee.  return @kind void;
}
procedure `int` `floorDiv`(`byte` v2 , `byte` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.floorDiv:(BB)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2975c4.  v0:= v2 / v3 @kind int;
  #L2975c8.  v1:= v2 ^~ v3 @kind int;
  #L2975cc.  if v1 >= 0 then goto L2975dc;
  #L2975d0.  v3:= v3 * v0 @kind int;
  #L2975d4.  if v3 == v2 then goto L2975dc;
  #L2975d8.  v0:= v0 + -1;
  #L2975dc.  return v0;
}
procedure `int` `floorDiv`(`byte` v2 , `int` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.floorDiv:(BI)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2975f0.  v0:= v2 / v3 @kind int;
  #L2975f4.  v1:= v2 ^~ v3 @kind int;
  #L2975f8.  if v1 >= 0 then goto L297608;
  #L2975fc.  v3:= v3 * v0 @kind int;
  #L297600.  if v3 == v2 then goto L297608;
  #L297604.  v0:= v0 + -1;
  #L297608.  return v0;
}
procedure `int` `floorDiv`(`byte` v2 , `short` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.floorDiv:(BS)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L29761c.  v0:= v2 / v3 @kind int;
  #L297620.  v1:= v2 ^~ v3 @kind int;
  #L297624.  if v1 >= 0 then goto L297634;
  #L297628.  v3:= v3 * v0 @kind int;
  #L29762c.  if v3 == v2 then goto L297634;
  #L297630.  v0:= v0 + -1;
  #L297634.  return v0;
}
procedure `int` `floorDiv`(`int` v2 , `byte` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.floorDiv:(IB)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L297648.  v0:= v2 / v3 @kind int;
  #L29764c.  v1:= v2 ^~ v3 @kind int;
  #L297650.  if v1 >= 0 then goto L297660;
  #L297654.  v3:= v3 * v0 @kind int;
  #L297658.  if v3 == v2 then goto L297660;
  #L29765c.  v0:= v0 + -1;
  #L297660.  return v0;
}
procedure `int` `floorDiv`(`int` v2 , `int` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.floorDiv:(II)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L297674.  v0:= v2 / v3 @kind int;
  #L297678.  v1:= v2 ^~ v3 @kind int;
  #L29767c.  if v1 >= 0 then goto L29768c;
  #L297680.  v3:= v3 * v0 @kind int;
  #L297684.  if v3 == v2 then goto L29768c;
  #L297688.  v0:= v0 + -1;
  #L29768c.  return v0;
}
procedure `int` `floorDiv`(`int` v2 , `short` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.floorDiv:(IS)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2976a0.  v0:= v2 / v3 @kind int;
  #L2976a4.  v1:= v2 ^~ v3 @kind int;
  #L2976a8.  if v1 >= 0 then goto L2976b8;
  #L2976ac.  v3:= v3 * v0 @kind int;
  #L2976b0.  if v3 == v2 then goto L2976b8;
  #L2976b4.  v0:= v0 + -1;
  #L2976b8.  return v0;
}
procedure `int` `floorDiv`(`short` v2 , `byte` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.floorDiv:(SB)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2976cc.  v0:= v2 / v3 @kind int;
  #L2976d0.  v1:= v2 ^~ v3 @kind int;
  #L2976d4.  if v1 >= 0 then goto L2976e4;
  #L2976d8.  v3:= v3 * v0 @kind int;
  #L2976dc.  if v3 == v2 then goto L2976e4;
  #L2976e0.  v0:= v0 + -1;
  #L2976e4.  return v0;
}
procedure `int` `floorDiv`(`short` v2 , `int` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.floorDiv:(SI)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2976f8.  v0:= v2 / v3 @kind int;
  #L2976fc.  v1:= v2 ^~ v3 @kind int;
  #L297700.  if v1 >= 0 then goto L297710;
  #L297704.  v3:= v3 * v0 @kind int;
  #L297708.  if v3 == v2 then goto L297710;
  #L29770c.  v0:= v0 + -1;
  #L297710.  return v0;
}
procedure `int` `floorDiv`(`short` v2 , `short` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.floorDiv:(SS)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L297724.  v0:= v2 / v3 @kind int;
  #L297728.  v1:= v2 ^~ v3 @kind int;
  #L29772c.  if v1 >= 0 then goto L29773c;
  #L297730.  v3:= v3 * v0 @kind int;
  #L297734.  if v3 == v2 then goto L29773c;
  #L297738.  v0:= v0 + -1;
  #L29773c.  return v0;
}
procedure `long` `floorDiv`(`byte` v8 , `long` v9 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.floorDiv:(BJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2977f4.  v0:= (`long`) v8 @kind i2l;
  #L2977f6.  v2:= v0 / v9 @kind long;
  #L2977fa.  v4:= v0 ^~ v9 @kind long;
  #L2977fe.  v6:= 0L;
  #L297802.  v8:= lcmp(v4, v6);
  #L297806.  if v8 >= 0 then goto L29781c;
  #L29780a.  v9:= v9 * v2 @kind long;
  #L29780e.  v8:= lcmp(v9, v0);
  #L297812.  if v8 == 0 then goto L29781c;
  #L297816.  v8:= -1L;
  #L29781a.  v2:= v2 + v8 @kind long;
  #L29781c.  return v2 @kind wide;
}
procedure `long` `floorDiv`(`int` v8 , `long` v9 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.floorDiv:(IJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L297830.  v0:= (`long`) v8 @kind i2l;
  #L297832.  v2:= v0 / v9 @kind long;
  #L297836.  v4:= v0 ^~ v9 @kind long;
  #L29783a.  v6:= 0L;
  #L29783e.  v8:= lcmp(v4, v6);
  #L297842.  if v8 >= 0 then goto L297858;
  #L297846.  v9:= v9 * v2 @kind long;
  #L29784a.  v8:= lcmp(v9, v0);
  #L29784e.  if v8 == 0 then goto L297858;
  #L297852.  v8:= -1L;
  #L297856.  v2:= v2 + v8 @kind long;
  #L297858.  return v2 @kind wide;
}
procedure `long` `floorDiv`(`long` v8 , `byte` v10 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.floorDiv:(JB)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L29786c.  v0:= (`long`) v10 @kind i2l;
  #L29786e.  v2:= v8 / v0 @kind long;
  #L297872.  v4:= v8 ^~ v0 @kind long;
  #L297876.  v6:= 0L;
  #L29787a.  v10:= lcmp(v4, v6);
  #L29787e.  if v10 >= 0 then goto L297894;
  #L297882.  v0:= v0 * v2 @kind long;
  #L297886.  v10:= lcmp(v0, v8);
  #L29788a.  if v10 == 0 then goto L297894;
  #L29788e.  v8:= -1L;
  #L297892.  v2:= v2 + v8 @kind long;
  #L297894.  return v2 @kind wide;
}
procedure `long` `floorDiv`(`long` v8 , `int` v10 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.floorDiv:(JI)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2978a8.  v0:= (`long`) v10 @kind i2l;
  #L2978aa.  v2:= v8 / v0 @kind long;
  #L2978ae.  v4:= v8 ^~ v0 @kind long;
  #L2978b2.  v6:= 0L;
  #L2978b6.  v10:= lcmp(v4, v6);
  #L2978ba.  if v10 >= 0 then goto L2978d0;
  #L2978be.  v0:= v0 * v2 @kind long;
  #L2978c2.  v10:= lcmp(v0, v8);
  #L2978c6.  if v10 == 0 then goto L2978d0;
  #L2978ca.  v8:= -1L;
  #L2978ce.  v2:= v2 + v8 @kind long;
  #L2978d0.  return v2 @kind wide;
}
procedure `long` `floorDiv`(`long` v7 , `long` v9 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.floorDiv:(JJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2978e4.  v0:= v7 / v9 @kind long;
  #L2978e8.  v2:= v7 ^~ v9 @kind long;
  #L2978ec.  v4:= 0L;
  #L2978f0.  v6:= lcmp(v2, v4);
  #L2978f4.  if v6 >= 0 then goto L29790a;
  #L2978f8.  v9:= v9 * v0 @kind long;
  #L2978fc.  v2:= lcmp(v9, v7);
  #L297900.  if v2 == 0 then goto L29790a;
  #L297904.  v7:= -1L;
  #L297908.  v0:= v0 + v7 @kind long;
  #L29790a.  return v0 @kind wide;
}
procedure `long` `floorDiv`(`long` v8 , `short` v10 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.floorDiv:(JS)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L29791c.  v0:= (`long`) v10 @kind i2l;
  #L29791e.  v2:= v8 / v0 @kind long;
  #L297922.  v4:= v8 ^~ v0 @kind long;
  #L297926.  v6:= 0L;
  #L29792a.  v10:= lcmp(v4, v6);
  #L29792e.  if v10 >= 0 then goto L297944;
  #L297932.  v0:= v0 * v2 @kind long;
  #L297936.  v10:= lcmp(v0, v8);
  #L29793a.  if v10 == 0 then goto L297944;
  #L29793e.  v8:= -1L;
  #L297942.  v2:= v2 + v8 @kind long;
  #L297944.  return v2 @kind wide;
}
procedure `long` `floorDiv`(`short` v8 , `long` v9 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.floorDiv:(SJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L297958.  v0:= (`long`) v8 @kind i2l;
  #L29795a.  v2:= v0 / v9 @kind long;
  #L29795e.  v4:= v0 ^~ v9 @kind long;
  #L297962.  v6:= 0L;
  #L297966.  v8:= lcmp(v4, v6);
  #L29796a.  if v8 >= 0 then goto L297980;
  #L29796e.  v9:= v9 * v2 @kind long;
  #L297972.  v8:= lcmp(v9, v0);
  #L297976.  if v8 == 0 then goto L297980;
  #L29797a.  v8:= -1L;
  #L29797e.  v2:= v2 + v8 @kind long;
  #L297980.  return v2 @kind wide;
}
procedure `byte` `mod`(`byte` v2 , `byte` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(BB)B` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2973c4.  v2:= v2 %% v3 @kind int;
  #L2973c6.  v0:= v2 ^~ v3 @kind int;
  #L2973ca.  v1:= -v2 @kind int;
  #L2973cc.  v1:= v1 ^| v2 @kind int;
  #L2973ce.  v0:= v0 ^& v1 @kind int;
  #L2973d0.  v0:= v0 ^> 31;
  #L2973d4.  v3:= v3 ^& v0 @kind int;
  #L2973d6.  v2:= v2 + v3 @kind int;
  #L2973d8.  v2:= (`byte`) v2 @kind i2b;
  #L2973da.  return v2;
}
procedure `byte` `mod`(`int` v2 , `byte` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(IB)B` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2973ec.  v2:= v2 %% v3 @kind int;
  #L2973ee.  v0:= v2 ^~ v3 @kind int;
  #L2973f2.  v1:= -v2 @kind int;
  #L2973f4.  v1:= v1 ^| v2 @kind int;
  #L2973f6.  v0:= v0 ^& v1 @kind int;
  #L2973f8.  v0:= v0 ^> 31;
  #L2973fc.  v3:= v3 ^& v0 @kind int;
  #L2973fe.  v2:= v2 + v3 @kind int;
  #L297400.  v2:= (`byte`) v2 @kind i2b;
  #L297402.  return v2;
}
procedure `byte` `mod`(`long` v6 , `byte` v8 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(JB)B` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L297414.  v0:= (`long`) v8 @kind i2l;
  #L297416.  v6:= v6 %% v0 @kind long;
  #L297418.  v2:= v6 ^~ v0 @kind long;
  #L29741c.  v4:= -v6 @kind long;
  #L29741e.  v4:= v4 ^| v6 @kind long;
  #L297420.  v2:= v2 ^& v4 @kind long;
  #L297422.  v8:= 63I;
  #L297426.  v2:= v2 ^> v8 @kind long;
  #L297428.  v0:= v0 ^& v2 @kind long;
  #L29742a.  v6:= v6 + v0 @kind long;
  #L29742c.  v7:= (`int`) v6 @kind l2i;
  #L29742e.  v6:= (`byte`) v7 @kind i2b;
  #L297430.  return v6;
}
procedure `byte` `mod`(`short` v2 , `byte` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(SB)B` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L297444.  v2:= v2 %% v3 @kind int;
  #L297446.  v0:= v2 ^~ v3 @kind int;
  #L29744a.  v1:= -v2 @kind int;
  #L29744c.  v1:= v1 ^| v2 @kind int;
  #L29744e.  v0:= v0 ^& v1 @kind int;
  #L297450.  v0:= v0 ^> 31;
  #L297454.  v3:= v3 ^& v0 @kind int;
  #L297456.  v2:= v2 + v3 @kind int;
  #L297458.  v2:= (`byte`) v2 @kind i2b;
  #L29745a.  return v2;
}
procedure `double` `mod`(`double` v7 , `double` v9 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(DD)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L29746c.  v7:= v7 %% v9 @kind double;
  #L29746e.  v0:= 1I;
  #L297470.  v1:= 0I;
  #L297472.  v2:= 0L;
  #L297476.  v4:= dcmpg(v7, v2);
  #L29747a.  if v4 != 0 then goto L297482;
  #L29747e.  v2:= 1I;
  #L297480.  goto L297484;
  #L297482.  v2:= 0I;
  #L297484.  if v2 != 0 then goto L2974aa;
  #L297488.  call temp:= `signum`(v7) @signature `Ljava/lang/Math;.signum:(D)D` @kind static;
  #L29748e.  v2:= temp @kind wide;
  #L297490.  call temp:= `signum`(v9) @signature `Ljava/lang/Math;.signum:(D)D` @kind static;
  #L297496.  v4:= temp @kind wide;
  #L297498.  v6:= dcmpg(v2, v4);
  #L29749c.  if v6 != 0 then goto L2974a2;
  #L2974a0.  goto L2974a4;
  #L2974a2.  v0:= 0I;
  #L2974a4.  if v0 != 0 then goto L2974aa;
  #L2974a8.  v7:= v7 + v9 @kind double;
  #L2974aa.  return v7 @kind wide;
}
procedure `double` `mod`(`double` v8 , `float` v10 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(DF)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2974bc.  v0:= (`double`) v10 @kind f2d;
  #L2974be.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L2974c4.  v8:= v8 %% v0 @kind double;
  #L2974c6.  v10:= 1I;
  #L2974c8.  v2:= 0I;
  #L2974ca.  v3:= 0L;
  #L2974ce.  v5:= dcmpg(v8, v3);
  #L2974d2.  if v5 != 0 then goto L2974da;
  #L2974d6.  v3:= 1I;
  #L2974d8.  goto L2974dc;
  #L2974da.  v3:= 0I;
  #L2974dc.  if v3 != 0 then goto L297508;
  #L2974e0.  call temp:= `signum`(v8) @signature `Ljava/lang/Math;.signum:(D)D` @kind static;
  #L2974e6.  v3:= temp @kind wide;
  #L2974e8.  call temp:= `signum`(v0) @signature `Ljava/lang/Math;.signum:(D)D` @kind static;
  #L2974ee.  v5:= temp @kind wide;
  #L2974f0.  v7:= dcmpg(v3, v5);
  #L2974f4.  if v7 != 0 then goto L2974fa;
  #L2974f8.  goto L2974fc;
  #L2974fa.  v10:= 0I;
  #L2974fc.  if v10 != 0 then goto L297508;
  #L297500.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L297506.  v8:= v8 + v0 @kind double;
  #L297508.  return v8 @kind wide;
}
procedure `double` `mod`(`float` v8 , `double` v9 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(FD)D` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L29751c.  v0:= (`double`) v8 @kind f2d;
  #L29751e.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L297524.  v0:= v0 %% v9 @kind double;
  #L297526.  v8:= 1I;
  #L297528.  v2:= 0I;
  #L29752a.  v3:= 0L;
  #L29752e.  v5:= dcmpg(v0, v3);
  #L297532.  if v5 != 0 then goto L29753a;
  #L297536.  v3:= 1I;
  #L297538.  goto L29753c;
  #L29753a.  v3:= 0I;
  #L29753c.  if v3 != 0 then goto L297562;
  #L297540.  call temp:= `signum`(v0) @signature `Ljava/lang/Math;.signum:(D)D` @kind static;
  #L297546.  v3:= temp @kind wide;
  #L297548.  call temp:= `signum`(v9) @signature `Ljava/lang/Math;.signum:(D)D` @kind static;
  #L29754e.  v5:= temp @kind wide;
  #L297550.  v7:= dcmpg(v3, v5);
  #L297554.  if v7 != 0 then goto L29755a;
  #L297558.  goto L29755c;
  #L29755a.  v8:= 0I;
  #L29755c.  if v8 != 0 then goto L297562;
  #L297560.  v0:= v0 + v9 @kind double;
  #L297562.  return v0 @kind wide;
}
procedure `float` `mod`(`float` v4 , `float` v5 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(FF)F` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L297574.  v4:= v4 %% v5 @kind float;
  #L297576.  v0:= 1I;
  #L297578.  v1:= 0I;
  #L29757a.  v2:= 0I;
  #L29757c.  v2:= fcmpg(v4, v2);
  #L297580.  if v2 != 0 then goto L297588;
  #L297584.  v2:= 1I;
  #L297586.  goto L29758a;
  #L297588.  v2:= 0I;
  #L29758a.  if v2 != 0 then goto L2975b0;
  #L29758e.  call temp:= `signum`(v4) @signature `Ljava/lang/Math;.signum:(F)F` @kind static;
  #L297594.  v2:= temp;
  #L297596.  call temp:= `signum`(v5) @signature `Ljava/lang/Math;.signum:(F)F` @kind static;
  #L29759c.  v3:= temp;
  #L29759e.  v2:= fcmpg(v2, v3);
  #L2975a2.  if v2 != 0 then goto L2975a8;
  #L2975a6.  goto L2975aa;
  #L2975a8.  v0:= 0I;
  #L2975aa.  if v0 != 0 then goto L2975b0;
  #L2975ae.  v4:= v4 + v5 @kind float;
  #L2975b0.  return v4;
}
procedure `int` `mod`(`byte` v2 , `int` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(BI)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L297750.  v2:= v2 %% v3 @kind int;
  #L297752.  v0:= v2 ^~ v3 @kind int;
  #L297756.  v1:= -v2 @kind int;
  #L297758.  v1:= v1 ^| v2 @kind int;
  #L29775a.  v0:= v0 ^& v1 @kind int;
  #L29775c.  v0:= v0 ^> 31;
  #L297760.  v3:= v3 ^& v0 @kind int;
  #L297762.  v2:= v2 + v3 @kind int;
  #L297764.  return v2;
}
procedure `int` `mod`(`int` v2 , `int` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(II)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L297778.  v2:= v2 %% v3 @kind int;
  #L29777a.  v0:= v2 ^~ v3 @kind int;
  #L29777e.  v1:= -v2 @kind int;
  #L297780.  v1:= v1 ^| v2 @kind int;
  #L297782.  v0:= v0 ^& v1 @kind int;
  #L297784.  v0:= v0 ^> 31;
  #L297788.  v3:= v3 ^& v0 @kind int;
  #L29778a.  v2:= v2 + v3 @kind int;
  #L29778c.  return v2;
}
procedure `int` `mod`(`long` v6 , `int` v8 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(JI)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2977a0.  v0:= (`long`) v8 @kind i2l;
  #L2977a2.  v6:= v6 %% v0 @kind long;
  #L2977a4.  v2:= v6 ^~ v0 @kind long;
  #L2977a8.  v4:= -v6 @kind long;
  #L2977aa.  v4:= v4 ^| v6 @kind long;
  #L2977ac.  v2:= v2 ^& v4 @kind long;
  #L2977ae.  v8:= 63I;
  #L2977b2.  v2:= v2 ^> v8 @kind long;
  #L2977b4.  v0:= v0 ^& v2 @kind long;
  #L2977b6.  v6:= v6 + v0 @kind long;
  #L2977b8.  v7:= (`int`) v6 @kind l2i;
  #L2977ba.  return v7;
}
procedure `int` `mod`(`short` v2 , `int` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(SI)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L2977cc.  v2:= v2 %% v3 @kind int;
  #L2977ce.  v0:= v2 ^~ v3 @kind int;
  #L2977d2.  v1:= -v2 @kind int;
  #L2977d4.  v1:= v1 ^| v2 @kind int;
  #L2977d6.  v0:= v0 ^& v1 @kind int;
  #L2977d8.  v0:= v0 ^> 31;
  #L2977dc.  v3:= v3 ^& v0 @kind int;
  #L2977de.  v2:= v2 + v3 @kind int;
  #L2977e0.  return v2;
}
procedure `long` `mod`(`byte` v6 , `long` v7 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(BJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L297994.  v0:= (`long`) v6 @kind i2l;
  #L297996.  v0:= v0 %% v7 @kind long;
  #L297998.  v2:= v0 ^~ v7 @kind long;
  #L29799c.  v4:= -v0 @kind long;
  #L29799e.  v4:= v4 ^| v0 @kind long;
  #L2979a0.  v2:= v2 ^& v4 @kind long;
  #L2979a2.  v6:= 63I;
  #L2979a6.  v2:= v2 ^> v6 @kind long;
  #L2979a8.  v7:= v7 ^& v2 @kind long;
  #L2979aa.  v0:= v0 + v7 @kind long;
  #L2979ac.  return v0 @kind wide;
}
procedure `long` `mod`(`int` v6 , `long` v7 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(IJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2979c0.  v0:= (`long`) v6 @kind i2l;
  #L2979c2.  v0:= v0 %% v7 @kind long;
  #L2979c4.  v2:= v0 ^~ v7 @kind long;
  #L2979c8.  v4:= -v0 @kind long;
  #L2979ca.  v4:= v4 ^| v0 @kind long;
  #L2979cc.  v2:= v2 ^& v4 @kind long;
  #L2979ce.  v6:= 63I;
  #L2979d2.  v2:= v2 ^> v6 @kind long;
  #L2979d4.  v7:= v7 ^& v2 @kind long;
  #L2979d6.  v0:= v0 + v7 @kind long;
  #L2979d8.  return v0 @kind wide;
}
procedure `long` `mod`(`long` v4 , `long` v6 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(JJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2979ec.  v4:= v4 %% v6 @kind long;
  #L2979ee.  v0:= v4 ^~ v6 @kind long;
  #L2979f2.  v2:= -v4 @kind long;
  #L2979f4.  v2:= v2 ^| v4 @kind long;
  #L2979f6.  v0:= v0 ^& v2 @kind long;
  #L2979f8.  v2:= 63I;
  #L2979fc.  v0:= v0 ^> v2 @kind long;
  #L2979fe.  v6:= v6 ^& v0 @kind long;
  #L297a00.  v4:= v4 + v6 @kind long;
  #L297a02.  return v4 @kind wide;
}
procedure `long` `mod`(`short` v6 , `long` v7 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(SJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L297a14.  v0:= (`long`) v6 @kind i2l;
  #L297a16.  v0:= v0 %% v7 @kind long;
  #L297a18.  v2:= v0 ^~ v7 @kind long;
  #L297a1c.  v4:= -v0 @kind long;
  #L297a1e.  v4:= v4 ^| v0 @kind long;
  #L297a20.  v2:= v2 ^& v4 @kind long;
  #L297a22.  v6:= 63I;
  #L297a26.  v2:= v2 ^> v6 @kind long;
  #L297a28.  v7:= v7 ^& v2 @kind long;
  #L297a2a.  v0:= v0 + v7 @kind long;
  #L297a2c.  return v0 @kind wide;
}
procedure `short` `mod`(`byte` v2 , `short` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(BS)S` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L297a40.  v2:= v2 %% v3 @kind int;
  #L297a42.  v0:= v2 ^~ v3 @kind int;
  #L297a46.  v1:= -v2 @kind int;
  #L297a48.  v1:= v1 ^| v2 @kind int;
  #L297a4a.  v0:= v0 ^& v1 @kind int;
  #L297a4c.  v0:= v0 ^> 31;
  #L297a50.  v3:= v3 ^& v0 @kind int;
  #L297a52.  v2:= v2 + v3 @kind int;
  #L297a54.  v2:= (`short`) v2 @kind i2s;
  #L297a56.  return v2;
}
procedure `short` `mod`(`int` v2 , `short` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(IS)S` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L297a68.  v2:= v2 %% v3 @kind int;
  #L297a6a.  v0:= v2 ^~ v3 @kind int;
  #L297a6e.  v1:= -v2 @kind int;
  #L297a70.  v1:= v1 ^| v2 @kind int;
  #L297a72.  v0:= v0 ^& v1 @kind int;
  #L297a74.  v0:= v0 ^> 31;
  #L297a78.  v3:= v3 ^& v0 @kind int;
  #L297a7a.  v2:= v2 + v3 @kind int;
  #L297a7c.  v2:= (`short`) v2 @kind i2s;
  #L297a7e.  return v2;
}
procedure `short` `mod`(`long` v6 , `short` v8 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(JS)S` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L297a90.  v0:= (`long`) v8 @kind i2l;
  #L297a92.  v6:= v6 %% v0 @kind long;
  #L297a94.  v2:= v6 ^~ v0 @kind long;
  #L297a98.  v4:= -v6 @kind long;
  #L297a9a.  v4:= v4 ^| v6 @kind long;
  #L297a9c.  v2:= v2 ^& v4 @kind long;
  #L297a9e.  v8:= 63I;
  #L297aa2.  v2:= v2 ^> v8 @kind long;
  #L297aa4.  v0:= v0 ^& v2 @kind long;
  #L297aa6.  v6:= v6 + v0 @kind long;
  #L297aa8.  v7:= (`int`) v6 @kind l2i;
  #L297aaa.  v6:= (`short`) v7 @kind i2s;
  #L297aac.  return v6;
}
procedure `short` `mod`(`short` v2 , `short` v3 ) @signature `Lkotlin/NumbersKt__FloorDivModKt;.mod:(SS)S` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L297ac0.  v2:= v2 %% v3 @kind int;
  #L297ac2.  v0:= v2 ^~ v3 @kind int;
  #L297ac6.  v1:= -v2 @kind int;
  #L297ac8.  v1:= v1 ^| v2 @kind int;
  #L297aca.  v0:= v0 ^& v1 @kind int;
  #L297acc.  v0:= v0 ^> 31;
  #L297ad0.  v3:= v3 ^& v0 @kind int;
  #L297ad2.  v2:= v2 + v3 @kind int;
  #L297ad4.  v2:= (`short`) v2 @kind i2s;
  #L297ad6.  return v2;
}
