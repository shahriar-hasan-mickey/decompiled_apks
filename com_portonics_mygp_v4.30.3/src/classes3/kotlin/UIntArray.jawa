record `kotlin.UIntArray` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Collection` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int`[] `kotlin.UIntArray.storage` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.UIntArray` v0 @kind this, `int`[] v1 @kind object) @signature `Lkotlin/UIntArray;.<init>:([I)V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L29ac00.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L29ac06.  v0.`kotlin.UIntArray.storage` @type ^`int`[] := v1 @kind object;
  #L29ac0a.  return @kind void;
}
procedure `kotlin.UIntArray` `box-impl`(`int`[] v1 @kind object) @signature `Lkotlin/UIntArray;.box-impl:([I)Lkotlin/UIntArray;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L29abe4.  v0:= new `kotlin.UIntArray`;
  #L29abe8.  call `<init>`(v0, v1) @signature `Lkotlin/UIntArray;.<init>:([I)V` @kind direct;
  #L29abee.  return v0 @kind object;
}
procedure `int`[] `constructor-impl`(`int` v0 ) @signature `Lkotlin/UIntArray;.constructor-impl:(I)[I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L29aaac.  v0:= new `int`[v0];
  #L29aab0.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UIntArray;.constructor-impl:([I)[I` @kind static;
  #L29aab6.  v0:= temp @kind object;
  #L29aab8.  return v0 @kind object;
}
procedure `int`[] `constructor-impl`(`int`[] v1 @kind object) @signature `Lkotlin/UIntArray;.constructor-impl:([I)[I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L29aacc.  v0:= "storage" @kind object;
  #L29aad0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29aad6.  return v1 @kind object;
}
procedure `boolean` `contains-WZ4Q5Ns`(`int`[] v0 @kind object, `int` v1 ) @signature `Lkotlin/UIntArray;.contains-WZ4Q5Ns:([II)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L29a82c.  call temp:= `contains`(v0, v1) @signature `Lkotlin/collections/ArraysKt;.contains:([II)Z` @kind static;
  #L29a832.  v0:= temp;
  #L29a834.  return v0;
}
procedure `boolean` `containsAll-impl`(`int`[] v4 @kind object, `java.util.Collection` v5 @kind object) @signature `Lkotlin/UIntArray;.containsAll-impl:([ILjava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L29a870.  v0:= "elements" @kind object;
  #L29a874.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29a87a.  call temp:= `isEmpty`(v5) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L29a880.  v0:= temp;
  #L29a882.  v1:= 0I;
  #L29a884.  v2:= 1I;
  #L29a886.  if v0 == 0 then goto L29a88e;
  #L29a88a.  v1:= 1I;
  #L29a88c.  goto L29a8d4;
  #L29a88e.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L29a894.  v5:= temp @kind object;
  #L29a896.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L29a89c.  v0:= temp;
  #L29a89e.  if v0 == 0 then goto L29a88a;
  #L29a8a2.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L29a8a8.  v0:= temp @kind object;
  #L29a8aa.  v3:= instanceof @variable v0 @type ^`kotlin.UInt` @kind boolean;
  #L29a8ae.  if v3 == 0 then goto L29a8ce;
  #L29a8b2.  v0:= (`kotlin.UInt`) v0 @kind object;
  #L29a8b6.  call temp:= `unbox-impl`(v0) @signature `Lkotlin/UInt;.unbox-impl:()I` @kind virtual;
  #L29a8bc.  v0:= temp;
  #L29a8be.  call temp:= `contains`(v4, v0) @signature `Lkotlin/collections/ArraysKt;.contains:([II)Z` @kind static;
  #L29a8c4.  v0:= temp;
  #L29a8c6.  if v0 == 0 then goto L29a8ce;
  #L29a8ca.  v0:= 1I;
  #L29a8cc.  goto L29a8d0;
  #L29a8ce.  v0:= 0I;
  #L29a8d0.  if v0 != 0 then goto L29a896;
  #L29a8d4.  return v1;
}
procedure `boolean` `equals-impl`(`int`[] v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/UIntArray;.equals-impl:([ILjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L29a908.  v0:= instanceof @variable v3 @type ^`kotlin.UIntArray` @kind boolean;
  #L29a90c.  v1:= 0I;
  #L29a90e.  if v0 != 0 then goto L29a914;
  #L29a912.  return v1;
  #L29a914.  v3:= (`kotlin.UIntArray`) v3 @kind object;
  #L29a918.  call temp:= `unbox-impl`(v3) @signature `Lkotlin/UIntArray;.unbox-impl:()[I` @kind virtual;
  #L29a91e.  v3:= temp @kind object;
  #L29a920.  call temp:= `areEqual`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L29a926.  v2:= temp;
  #L29a928.  if v2 != 0 then goto L29a92e;
  #L29a92c.  return v1;
  #L29a92e.  v2:= 1I;
  #L29a930.  return v2;
}
procedure `boolean` `equals-impl0`(`int`[] v0 @kind object, `int`[] v1 @kind object) @signature `Lkotlin/UIntArray;.equals-impl0:([I[I)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L29a944.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L29a94a.  v0:= temp;
  #L29a94c.  return v0;
}
procedure `int` `get-pVg5ArA`(`int`[] v0 @kind object, `int` v1 ) @signature `Lkotlin/UIntArray;.get-pVg5ArA:([II)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L29aa00.  v0:= v0[v1];
  #L29aa04.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L29aa0a.  v0:= temp;
  #L29aa0c.  return v0;
}
procedure `int` `getSize-impl`(`int`[] v0 @kind object) @signature `Lkotlin/UIntArray;.getSize-impl:([I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L29aa40.  v0:= length @variable v0;
  #L29aa42.  return v0;
}
procedure `void` `getStorage$annotations`() @signature `Lkotlin/UIntArray;.getStorage$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L29ac3c.  return @kind void;
}
procedure `int` `hashCode-impl`(`int`[] v0 @kind object) @signature `Lkotlin/UIntArray;.hashCode-impl:([I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L29aa74.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([I)I` @kind static;
  #L29aa7a.  v0:= temp;
  #L29aa7c.  return v0;
}
procedure `boolean` `isEmpty-impl`(`int`[] v0 @kind object) @signature `Lkotlin/UIntArray;.isEmpty-impl:([I)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L29a980.  v0:= length @variable v0;
  #L29a982.  if v0 != 0 then goto L29a98a;
  #L29a986.  v0:= 1I;
  #L29a988.  goto L29a98c;
  #L29a98a.  v0:= 0I;
  #L29a98c.  return v0;
}
procedure `java.util.Iterator` `iterator-impl`(`int`[] v1 @kind object) @signature `Lkotlin/UIntArray;.iterator-impl:([I)Ljava/util/Iterator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L29abc8.  v0:= new `kotlin.UIntArray$Iterator`;
  #L29abcc.  call `<init>`(v0, v1) @signature `Lkotlin/UIntArray$Iterator;.<init>:([I)V` @kind direct;
  #L29abd2.  return v0 @kind object;
}
procedure `void` `set-VXSXFK8`(`int`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lkotlin/UIntArray;.set-VXSXFK8:([III)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L29ac50.  v0[v1]:= v2;
  #L29ac54.  return @kind void;
}
procedure `java.lang.String` `toString-impl`(`int`[] v2 @kind object) @signature `Lkotlin/UIntArray;.toString-impl:([I)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L29ab60.  v0:= new `java.lang.StringBuilder`;
  #L29ab64.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L29ab6a.  v1:= "UIntArray(storage=" @kind object;
  #L29ab6e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29ab74.  call temp:= `toString`(v2) @signature `Ljava/util/Arrays;.toString:([I)Ljava/lang/String;` @kind static;
  #L29ab7a.  v2:= temp @kind object;
  #L29ab7c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L29ab82.  v2:= 41I;
  #L29ab86.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L29ab8c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L29ab92.  v2:= temp @kind object;
  #L29ab94.  return v2 @kind object;
}
procedure `boolean` `add`(`kotlin.UIntArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UIntArray;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L29a778.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29a77c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29a780.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29a786.  throw v2;
}
procedure `boolean` `add-WZ4Q5Ns`(`kotlin.UIntArray` v1 @kind this, `int` v2 ) @signature `Lkotlin/UIntArray;.add-WZ4Q5Ns:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29a798.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29a79c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29a7a0.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29a7a6.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.UIntArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UIntArray;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29a7b8.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29a7bc.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29a7c0.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29a7c6.  throw v2;
}
procedure `void` `clear`(`kotlin.UIntArray` v2 @kind this) @signature `Lkotlin/UIntArray;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29ac1c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L29ac20.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L29ac24.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29ac2a.  throw v0;
}
procedure `boolean` `contains`(`kotlin.UIntArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UIntArray;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L29a7d8.  v0:= instanceof @variable v2 @type ^`kotlin.UInt` @kind boolean;
  #L29a7dc.  if v0 != 0 then goto L29a7e4;
  #L29a7e0.  v2:= 0I;
  #L29a7e2.  return v2;
  #L29a7e4.  v2:= (`kotlin.UInt`) v2 @kind object;
  #L29a7e8.  call temp:= `unbox-impl`(v2) @signature `Lkotlin/UInt;.unbox-impl:()I` @kind virtual;
  #L29a7ee.  v2:= temp;
  #L29a7f0.  call temp:= `contains-WZ4Q5Ns`(v1, v2) @signature `Lkotlin/UIntArray;.contains-WZ4Q5Ns:(I)Z` @kind virtual;
  #L29a7f6.  v2:= temp;
  #L29a7f8.  return v2;
}
procedure `boolean` `contains-WZ4Q5Ns`(`kotlin.UIntArray` v1 @kind this, `int` v2 ) @signature `Lkotlin/UIntArray;.contains-WZ4Q5Ns:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29a80c.  v0:= v1.`kotlin.UIntArray.storage` @type ^`int`[] @kind object;
  #L29a810.  call temp:= `contains-WZ4Q5Ns`(v0, v2) @signature `Lkotlin/UIntArray;.contains-WZ4Q5Ns:([II)Z` @kind static;
  #L29a816.  v2:= temp;
  #L29a818.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.UIntArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UIntArray;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29a848.  v0:= "elements" @kind object;
  #L29a84c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29a852.  v0:= v1.`kotlin.UIntArray.storage` @type ^`int`[] @kind object;
  #L29a856.  call temp:= `containsAll-impl`(v0, v2) @signature `Lkotlin/UIntArray;.containsAll-impl:([ILjava/util/Collection;)Z` @kind static;
  #L29a85c.  v2:= temp;
  #L29a85e.  return v2;
}
procedure `boolean` `equals`(`kotlin.UIntArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UIntArray;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29a8e8.  v0:= v1.`kotlin.UIntArray.storage` @type ^`int`[] @kind object;
  #L29a8ec.  call temp:= `equals-impl`(v0, v2) @signature `Lkotlin/UIntArray;.equals-impl:([ILjava/lang/Object;)Z` @kind static;
  #L29a8f2.  v2:= temp;
  #L29a8f4.  return v2;
}
procedure `int` `getSize`(`kotlin.UIntArray` v1 @kind this) @signature `Lkotlin/UIntArray;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29aa20.  v0:= v1.`kotlin.UIntArray.storage` @type ^`int`[] @kind object;
  #L29aa24.  call temp:= `getSize-impl`(v0) @signature `Lkotlin/UIntArray;.getSize-impl:([I)I` @kind static;
  #L29aa2a.  v0:= temp;
  #L29aa2c.  return v0;
}
procedure `int` `hashCode`(`kotlin.UIntArray` v1 @kind this) @signature `Lkotlin/UIntArray;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29aa54.  v0:= v1.`kotlin.UIntArray.storage` @type ^`int`[] @kind object;
  #L29aa58.  call temp:= `hashCode-impl`(v0) @signature `Lkotlin/UIntArray;.hashCode-impl:([I)I` @kind static;
  #L29aa5e.  v0:= temp;
  #L29aa60.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.UIntArray` v1 @kind this) @signature `Lkotlin/UIntArray;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29a960.  v0:= v1.`kotlin.UIntArray.storage` @type ^`int`[] @kind object;
  #L29a964.  call temp:= `isEmpty-impl`(v0) @signature `Lkotlin/UIntArray;.isEmpty-impl:([I)Z` @kind static;
  #L29a96a.  v0:= temp;
  #L29a96c.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.UIntArray` v1 @kind this) @signature `Lkotlin/UIntArray;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29aba8.  v0:= v1.`kotlin.UIntArray.storage` @type ^`int`[] @kind object;
  #L29abac.  call temp:= `iterator-impl`(v0) @signature `Lkotlin/UIntArray;.iterator-impl:([I)Ljava/util/Iterator;` @kind static;
  #L29abb2.  v0:= temp @kind object;
  #L29abb4.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.UIntArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UIntArray;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29a9a0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29a9a4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29a9a8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29a9ae.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.UIntArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UIntArray;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29a9c0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29a9c4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29a9c8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29a9ce.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.UIntArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UIntArray;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29a9e0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L29a9e4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L29a9e8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L29a9ee.  throw v2;
}
procedure `int` `size`(`kotlin.UIntArray` v1 @kind this) @signature `Lkotlin/UIntArray;.size:()I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L29aa90.  call temp:= `getSize`(v1) @signature `Lkotlin/UIntArray;.getSize:()I` @kind virtual;
  #L29aa96.  v0:= temp;
  #L29aa98.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.UIntArray` v1 @kind this) @signature `Lkotlin/UIntArray;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ab00.  call temp:= `toArray`(v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L29ab06.  v0:= temp @kind object;
  #L29ab08.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.UIntArray` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/UIntArray;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ab1c.  v0:= "array" @kind object;
  #L29ab20.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L29ab26.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L29ab2c.  v2:= temp @kind object;
  #L29ab2e.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.UIntArray` v1 @kind this) @signature `Lkotlin/UIntArray;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L29ab40.  v0:= v1.`kotlin.UIntArray.storage` @type ^`int`[] @kind object;
  #L29ab44.  call temp:= `toString-impl`(v0) @signature `Lkotlin/UIntArray;.toString-impl:([I)Ljava/lang/String;` @kind static;
  #L29ab4a.  v0:= temp @kind object;
  #L29ab4c.  return v0 @kind object;
}
procedure `int`[] `unbox-impl`(`kotlin.UIntArray` v1 @kind this) @signature `Lkotlin/UIntArray;.unbox-impl:()[I` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L29aae8.  v0:= v1.`kotlin.UIntArray.storage` @type ^`int`[] @kind object;
  #L29aaec.  return v0 @kind object;
}
