record `org.apache.commons.io.IOCase` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Serializable` @kind interface {
  `boolean` `org.apache.commons.io.IOCase.b` @AccessFlag PRIVATE_FINAL_TRANSIENT;
  `java.lang.String` `org.apache.commons.io.IOCase.name` @AccessFlag PRIVATE_FINAL;
}
global `org.apache.commons.io.IOCase` `@@org.apache.commons.io.IOCase.INSENSITIVE` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.apache.commons.io.IOCase` `@@org.apache.commons.io.IOCase.SENSITIVE` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.apache.commons.io.IOCase` `@@org.apache.commons.io.IOCase.SYSTEM` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@org.apache.commons.io.IOCase.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/io/IOCase;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.io.IOCase` v0 @kind this, `java.lang.String` v1 @kind object, `boolean` v2 ) @signature `Lorg/apache/commons/io/IOCase;.<init>:(Ljava/lang/String;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `org.apache.commons.io.IOCase` `forName`(`java.lang.String` v3 @kind object) @signature `Lorg/apache/commons/io/IOCase;.forName:(Ljava/lang/String;)Lorg/apache/commons/io/IOCase;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Object` `readResolve`(`org.apache.commons.io.IOCase` v1 @kind this) @signature `Lorg/apache/commons/io/IOCase;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `checkCompareTo`(`org.apache.commons.io.IOCase` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/apache/commons/io/IOCase;.checkCompareTo:(Ljava/lang/String;Ljava/lang/String;)I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `checkEndsWith`(`org.apache.commons.io.IOCase` v6 @kind this, `java.lang.String` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lorg/apache/commons/io/IOCase;.checkEndsWith:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `checkEquals`(`org.apache.commons.io.IOCase` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/apache/commons/io/IOCase;.checkEquals:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `checkIndexOf`(`org.apache.commons.io.IOCase` v2 @kind this, `java.lang.String` v3 @kind object, `int` v4 , `java.lang.String` v5 @kind object) @signature `Lorg/apache/commons/io/IOCase;.checkIndexOf:(Ljava/lang/String;ILjava/lang/String;)I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `checkRegionMatches`(`org.apache.commons.io.IOCase` v7 @kind this, `java.lang.String` v8 @kind object, `int` v9 , `java.lang.String` v10 @kind object) @signature `Lorg/apache/commons/io/IOCase;.checkRegionMatches:(Ljava/lang/String;ILjava/lang/String;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `checkStartsWith`(`org.apache.commons.io.IOCase` v7 @kind this, `java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object) @signature `Lorg/apache/commons/io/IOCase;.checkStartsWith:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getName`(`org.apache.commons.io.IOCase` v1 @kind this) @signature `Lorg/apache/commons/io/IOCase;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isCaseSensitive`(`org.apache.commons.io.IOCase` v1 @kind this) @signature `Lorg/apache/commons/io/IOCase;.isCaseSensitive:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`org.apache.commons.io.IOCase` v1 @kind this) @signature `Lorg/apache/commons/io/IOCase;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
