record `org.apache.commons.io.TaggedIOException` @kind class @AccessFlag PUBLIC extends `org.apache.commons.io.IOExceptionWithCause` @kind class {
  `java.io.Serializable` `org.apache.commons.io.TaggedIOException.tag` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@org.apache.commons.io.TaggedIOException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.apache.commons.io.TaggedIOException` v1 @kind this, `java.io.IOException` v2 @kind object, `java.io.Serializable` v3 @kind object) @signature `Lorg/apache/commons/io/TaggedIOException;.<init>:(Ljava/io/IOException;Ljava/io/Serializable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `isTaggedWith`(`java.lang.Throwable` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/apache/commons/io/TaggedIOException;.isTaggedWith:(Ljava/lang/Throwable;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `throwCauseIfTaggedWith`(`java.lang.Throwable` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lorg/apache/commons/io/TaggedIOException;.throwCauseIfTaggedWith:(Ljava/lang/Throwable;Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.io.IOException` `getCause`(`org.apache.commons.io.TaggedIOException` v1 @kind this) @signature `Lorg/apache/commons/io/TaggedIOException;.getCause:()Ljava/io/IOException;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Throwable` `getCause`(`org.apache.commons.io.TaggedIOException` v1 @kind this) @signature `Lorg/apache/commons/io/TaggedIOException;.getCause:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `java.io.Serializable` `getTag`(`org.apache.commons.io.TaggedIOException` v1 @kind this) @signature `Lorg/apache/commons/io/TaggedIOException;.getTag:()Ljava/io/Serializable;` @AccessFlag PUBLIC {

  # return;
}
