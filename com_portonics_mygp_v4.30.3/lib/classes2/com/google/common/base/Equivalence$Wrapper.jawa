record `com.google.common.base.Equivalence$Wrapper` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Serializable` @kind interface {
  `com.google.common.base.Equivalence` `com.google.common.base.Equivalence$Wrapper.equivalence` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `com.google.common.base.Equivalence$Wrapper.reference` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@com.google.common.base.Equivalence$Wrapper.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.google.common.base.Equivalence$Wrapper` v0 @kind this, `com.google.common.base.Equivalence` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/base/Equivalence$Wrapper;.<init>:(Lcom/google/common/base/Equivalence;Ljava/lang/Object;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.base.Equivalence$Wrapper` v0 @kind this, `com.google.common.base.Equivalence` v1 @kind object, `java.lang.Object` v2 @kind object, `com.google.common.base.Equivalence$a` v3 @kind object) @signature `Lcom/google/common/base/Equivalence$Wrapper;.<init>:(Lcom/google/common/base/Equivalence;Ljava/lang/Object;Lcom/google/common/base/Equivalence$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `equals`(`com.google.common.base.Equivalence$Wrapper` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/google/common/base/Equivalence$Wrapper;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `get`(`com.google.common.base.Equivalence$Wrapper` v1 @kind this) @signature `Lcom/google/common/base/Equivalence$Wrapper;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`com.google.common.base.Equivalence$Wrapper` v2 @kind this) @signature `Lcom/google/common/base/Equivalence$Wrapper;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.base.Equivalence$Wrapper` v2 @kind this) @signature `Lcom/google/common/base/Equivalence$Wrapper;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
