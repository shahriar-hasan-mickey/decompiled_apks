record `com.google.common.base.Absent` @kind class @AccessFlag FINAL extends `com.google.common.base.Optional` @kind class {
}
global `com.google.common.base.Absent` `@@com.google.common.base.Absent.INSTANCE` @AccessFlag STATIC_FINAL;
global `long` `@@com.google.common.base.Absent.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/base/Absent;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.base.Absent` v0 @kind this) @signature `Lcom/google/common/base/Absent;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `java.lang.Object` `readResolve`(`com.google.common.base.Absent` v1 @kind this) @signature `Lcom/google/common/base/Absent;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {

  # return;
}
procedure `com.google.common.base.Optional` `withType`() @signature `Lcom/google/common/base/Absent;.withType:()Lcom/google/common/base/Optional;` @AccessFlag STATIC {

  # return;
}
procedure `java.util.Set` `asSet`(`com.google.common.base.Absent` v1 @kind this) @signature `Lcom/google/common/base/Absent;.asSet:()Ljava/util/Set;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `equals`(`com.google.common.base.Absent` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/base/Absent;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `get`(`com.google.common.base.Absent` v2 @kind this) @signature `Lcom/google/common/base/Absent;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`com.google.common.base.Absent` v1 @kind this) @signature `Lcom/google/common/base/Absent;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isPresent`(`com.google.common.base.Absent` v1 @kind this) @signature `Lcom/google/common/base/Absent;.isPresent:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.base.Optional` `or`(`com.google.common.base.Absent` v0 @kind this, `com.google.common.base.Optional` v1 @kind object) @signature `Lcom/google/common/base/Absent;.or:(Lcom/google/common/base/Optional;)Lcom/google/common/base/Optional;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `or`(`com.google.common.base.Absent` v1 @kind this, `com.google.common.base.l0` v2 @kind object) @signature `Lcom/google/common/base/Absent;.or:(Lcom/google/common/base/l0;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `or`(`com.google.common.base.Absent` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/base/Absent;.or:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `orNull`(`com.google.common.base.Absent` v1 @kind this) @signature `Lcom/google/common/base/Absent;.orNull:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.base.Absent` v1 @kind this) @signature `Lcom/google/common/base/Absent;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.base.Optional` `transform`(`com.google.common.base.Absent` v0 @kind this, `com.google.common.base.o` v1 @kind object) @signature `Lcom/google/common/base/Absent;.transform:(Lcom/google/common/base/o;)Lcom/google/common/base/Optional;` @AccessFlag PUBLIC {

  # return;
}
