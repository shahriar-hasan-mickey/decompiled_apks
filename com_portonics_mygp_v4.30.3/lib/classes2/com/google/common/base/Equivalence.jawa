record `com.google.common.base.Equivalence` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`com.google.common.base.Equivalence` v0 @kind this) @signature `Lcom/google/common/base/Equivalence;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `com.google.common.base.Equivalence` `a`() @signature `Lcom/google/common/base/Equivalence;.a:()Lcom/google/common/base/Equivalence;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.base.Equivalence` `b`() @signature `Lcom/google/common/base/Equivalence;.b:()Lcom/google/common/base/Equivalence;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `doEquivalent`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/base/Equivalence;.doEquivalent:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `doHash`(`java.lang.Object` v0 @kind object) @signature `Lcom/google/common/base/Equivalence;.doHash:(Ljava/lang/Object;)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `equivalent`(`com.google.common.base.Equivalence` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/base/Equivalence;.equivalent:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `com.google.common.base.c0` `equivalentTo`(`com.google.common.base.Equivalence` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/base/Equivalence;.equivalentTo:(Ljava/lang/Object;)Lcom/google/common/base/c0;` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `int` `hash`(`com.google.common.base.Equivalence` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/base/Equivalence;.hash:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `com.google.common.base.Equivalence` `onResultOf`(`com.google.common.base.Equivalence` v1 @kind this, `com.google.common.base.o` v2 @kind object) @signature `Lcom/google/common/base/Equivalence;.onResultOf:(Lcom/google/common/base/o;)Lcom/google/common/base/Equivalence;` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `com.google.common.base.Equivalence` `pairwise`(`com.google.common.base.Equivalence` v1 @kind this) @signature `Lcom/google/common/base/Equivalence;.pairwise:()Lcom/google/common/base/Equivalence;` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `com.google.common.base.Equivalence$Wrapper` `wrap`(`com.google.common.base.Equivalence` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/google/common/base/Equivalence;.wrap:(Ljava/lang/Object;)Lcom/google/common/base/Equivalence$Wrapper;` @AccessFlag PUBLIC_FINAL {

  # return;
}
