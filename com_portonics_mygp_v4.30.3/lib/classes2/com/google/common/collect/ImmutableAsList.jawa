record `com.google.common.collect.ImmutableAsList` @kind class @AccessFlag ABSTRACT extends `com.google.common.collect.ImmutableList` @kind class {
}
procedure `void` `<init>`(`com.google.common.collect.ImmutableAsList` v0 @kind this) @signature `Lcom/google/common/collect/ImmutableAsList;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `readObject`(`com.google.common.collect.ImmutableAsList` v1 @kind this, `java.io.ObjectInputStream` v2 @kind object) @signature `Lcom/google/common/collect/ImmutableAsList;.readObject:(Ljava/io/ObjectInputStream;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `contains`(`com.google.common.collect.ImmutableAsList` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/collect/ImmutableAsList;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.collect.ImmutableCollection` `delegateCollection`() @signature `Lcom/google/common/collect/ImmutableAsList;.delegateCollection:()Lcom/google/common/collect/ImmutableCollection;` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`com.google.common.collect.ImmutableAsList` v1 @kind this) @signature `Lcom/google/common/collect/ImmutableAsList;.isEmpty:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isPartialView`(`com.google.common.collect.ImmutableAsList` v1 @kind this) @signature `Lcom/google/common/collect/ImmutableAsList;.isPartialView:()Z` @AccessFlag  {

  # return;
}
procedure `int` `size`(`com.google.common.collect.ImmutableAsList` v1 @kind this) @signature `Lcom/google/common/collect/ImmutableAsList;.size:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `writeReplace`(`com.google.common.collect.ImmutableAsList` v2 @kind this) @signature `Lcom/google/common/collect/ImmutableAsList;.writeReplace:()Ljava/lang/Object;` @AccessFlag  {

  # return;
}
