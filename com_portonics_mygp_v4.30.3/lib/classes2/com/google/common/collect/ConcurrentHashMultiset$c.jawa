record `com.google.common.collect.ConcurrentHashMultiset$c` @kind class @AccessFlag  extends `com.google.common.collect.i0` @kind class {
  `com.google.common.collect.u2$a` `com.google.common.collect.ConcurrentHashMultiset$c.b` @AccessFlag PRIVATE;
  `java.util.Iterator` `com.google.common.collect.ConcurrentHashMultiset$c.c` @AccessFlag FINAL_SYNTHETIC;
  `com.google.common.collect.ConcurrentHashMultiset` `com.google.common.collect.ConcurrentHashMultiset$c.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.collect.ConcurrentHashMultiset$c` v0 @kind this, `com.google.common.collect.ConcurrentHashMultiset` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$c;.<init>:(Lcom/google/common/collect/ConcurrentHashMultiset;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.util.Iterator` `c`(`com.google.common.collect.ConcurrentHashMultiset$c` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$c;.c:()Ljava/util/Iterator;` @AccessFlag PROTECTED {

  # return;
}
procedure `java.lang.Object` `delegate`(`com.google.common.collect.ConcurrentHashMultiset$c` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$c;.delegate:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {

  # return;
}
procedure `com.google.common.collect.u2$a` `e`(`com.google.common.collect.ConcurrentHashMultiset$c` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$c;.e:()Lcom/google/common/collect/u2$a;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `next`(`com.google.common.collect.ConcurrentHashMultiset$c` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$c;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `void` `remove`(`com.google.common.collect.ConcurrentHashMultiset$c` v3 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset$c;.remove:()V` @AccessFlag PUBLIC {

  # return;
}
