record `com.google.common.collect.RegularImmutableTable$CellSet` @kind class @AccessFlag FINAL extends `com.google.common.collect.IndexedImmutableSet` @kind class {
  `com.google.common.collect.RegularImmutableTable` `com.google.common.collect.RegularImmutableTable$CellSet.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.collect.RegularImmutableTable$CellSet` v0 @kind this, `com.google.common.collect.RegularImmutableTable` v1 @kind object) @signature `Lcom/google/common/collect/RegularImmutableTable$CellSet;.<init>:(Lcom/google/common/collect/RegularImmutableTable;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.collect.RegularImmutableTable$CellSet` v0 @kind this, `com.google.common.collect.RegularImmutableTable` v1 @kind object, `com.google.common.collect.RegularImmutableTable$a` v2 @kind object) @signature `Lcom/google/common/collect/RegularImmutableTable$CellSet;.<init>:(Lcom/google/common/collect/RegularImmutableTable;Lcom/google/common/collect/RegularImmutableTable$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `contains`(`com.google.common.collect.RegularImmutableTable$CellSet` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/google/common/collect/RegularImmutableTable$CellSet;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.collect.f4$a` `get`(`com.google.common.collect.RegularImmutableTable$CellSet` v1 @kind this, `int` v2 ) @signature `Lcom/google/common/collect/RegularImmutableTable$CellSet;.get:(I)Lcom/google/common/collect/f4$a;` @AccessFlag  {

  # return;
}
procedure `java.lang.Object` `get`(`com.google.common.collect.RegularImmutableTable$CellSet` v0 @kind this, `int` v1 ) @signature `Lcom/google/common/collect/RegularImmutableTable$CellSet;.get:(I)Ljava/lang/Object;` @AccessFlag SYNTHETIC {

  # return;
}
procedure `boolean` `isPartialView`(`com.google.common.collect.RegularImmutableTable$CellSet` v1 @kind this) @signature `Lcom/google/common/collect/RegularImmutableTable$CellSet;.isPartialView:()Z` @AccessFlag  {

  # return;
}
procedure `int` `size`(`com.google.common.collect.RegularImmutableTable$CellSet` v1 @kind this) @signature `Lcom/google/common/collect/RegularImmutableTable$CellSet;.size:()I` @AccessFlag PUBLIC {

  # return;
}
