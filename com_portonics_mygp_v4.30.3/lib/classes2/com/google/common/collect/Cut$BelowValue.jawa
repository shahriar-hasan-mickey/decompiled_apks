record `com.google.common.collect.Cut$BelowValue` @kind class @AccessFlag FINAL extends `com.google.common.collect.Cut` @kind class {
}
global `long` `@@com.google.common.collect.Cut$BelowValue.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.google.common.collect.Cut$BelowValue` v0 @kind this, `java.lang.Comparable` v1 @kind object) @signature `Lcom/google/common/collect/Cut$BelowValue;.<init>:(Ljava/lang/Comparable;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `int` `compareTo`(`com.google.common.collect.Cut$BelowValue` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/collect/Cut$BelowValue;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `void` `describeAsLowerBound`(`com.google.common.collect.Cut$BelowValue` v1 @kind this, `java.lang.StringBuilder` v2 @kind object) @signature `Lcom/google/common/collect/Cut$BelowValue;.describeAsLowerBound:(Ljava/lang/StringBuilder;)V` @AccessFlag  {

  # return;
}
procedure `void` `describeAsUpperBound`(`com.google.common.collect.Cut$BelowValue` v1 @kind this, `java.lang.StringBuilder` v2 @kind object) @signature `Lcom/google/common/collect/Cut$BelowValue;.describeAsUpperBound:(Ljava/lang/StringBuilder;)V` @AccessFlag  {

  # return;
}
procedure `java.lang.Comparable` `greatestValueBelow`(`com.google.common.collect.Cut$BelowValue` v1 @kind this, `com.google.common.collect.DiscreteDomain` v2 @kind object) @signature `Lcom/google/common/collect/Cut$BelowValue;.greatestValueBelow:(Lcom/google/common/collect/DiscreteDomain;)Ljava/lang/Comparable;` @AccessFlag  {

  # return;
}
procedure `int` `hashCode`(`com.google.common.collect.Cut$BelowValue` v1 @kind this) @signature `Lcom/google/common/collect/Cut$BelowValue;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isLessThan`(`com.google.common.collect.Cut$BelowValue` v1 @kind this, `java.lang.Comparable` v2 @kind object) @signature `Lcom/google/common/collect/Cut$BelowValue;.isLessThan:(Ljava/lang/Comparable;)Z` @AccessFlag  {

  # return;
}
procedure `java.lang.Comparable` `leastValueAbove`(`com.google.common.collect.Cut$BelowValue` v0 @kind this, `com.google.common.collect.DiscreteDomain` v1 @kind object) @signature `Lcom/google/common/collect/Cut$BelowValue;.leastValueAbove:(Lcom/google/common/collect/DiscreteDomain;)Ljava/lang/Comparable;` @AccessFlag  {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.collect.Cut$BelowValue` v2 @kind this) @signature `Lcom/google/common/collect/Cut$BelowValue;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.collect.BoundType` `typeAsLowerBound`(`com.google.common.collect.Cut$BelowValue` v1 @kind this) @signature `Lcom/google/common/collect/Cut$BelowValue;.typeAsLowerBound:()Lcom/google/common/collect/BoundType;` @AccessFlag  {

  # return;
}
procedure `com.google.common.collect.BoundType` `typeAsUpperBound`(`com.google.common.collect.Cut$BelowValue` v1 @kind this) @signature `Lcom/google/common/collect/Cut$BelowValue;.typeAsUpperBound:()Lcom/google/common/collect/BoundType;` @AccessFlag  {

  # return;
}
procedure `com.google.common.collect.Cut` `withLowerBoundType`(`com.google.common.collect.Cut$BelowValue` v1 @kind this, `com.google.common.collect.BoundType` v2 @kind object, `com.google.common.collect.DiscreteDomain` v3 @kind object) @signature `Lcom/google/common/collect/Cut$BelowValue;.withLowerBoundType:(Lcom/google/common/collect/BoundType;Lcom/google/common/collect/DiscreteDomain;)Lcom/google/common/collect/Cut;` @AccessFlag  {

  # return;
}
procedure `com.google.common.collect.Cut` `withUpperBoundType`(`com.google.common.collect.Cut$BelowValue` v1 @kind this, `com.google.common.collect.BoundType` v2 @kind object, `com.google.common.collect.DiscreteDomain` v3 @kind object) @signature `Lcom/google/common/collect/Cut$BelowValue;.withUpperBoundType:(Lcom/google/common/collect/BoundType;Lcom/google/common/collect/DiscreteDomain;)Lcom/google/common/collect/Cut;` @AccessFlag  {

  # return;
}
