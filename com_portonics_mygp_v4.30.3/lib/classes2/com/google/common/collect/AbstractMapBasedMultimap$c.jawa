record `com.google.common.collect.AbstractMapBasedMultimap$c` @kind class @AccessFlag  extends `com.google.common.collect.i2` @kind class {
  `java.util.Map` `com.google.common.collect.AbstractMapBasedMultimap$c.e` @AccessFlag FINAL_TRANSIENT;
  `com.google.common.collect.AbstractMapBasedMultimap` `com.google.common.collect.AbstractMapBasedMultimap$c.f` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.collect.AbstractMapBasedMultimap$c` v0 @kind this, `com.google.common.collect.AbstractMapBasedMultimap` v1 @kind object, `java.util.Map` v2 @kind object) @signature `Lcom/google/common/collect/AbstractMapBasedMultimap$c;.<init>:(Lcom/google/common/collect/AbstractMapBasedMultimap;Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.util.Set` `a`(`com.google.common.collect.AbstractMapBasedMultimap$c` v1 @kind this) @signature `Lcom/google/common/collect/AbstractMapBasedMultimap$c;.a:()Ljava/util/Set;` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `clear`(`com.google.common.collect.AbstractMapBasedMultimap$c` v2 @kind this) @signature `Lcom/google/common/collect/AbstractMapBasedMultimap$c;.clear:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `containsKey`(`com.google.common.collect.AbstractMapBasedMultimap$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/collect/AbstractMapBasedMultimap$c;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Collection` `d`(`com.google.common.collect.AbstractMapBasedMultimap$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/google/common/collect/AbstractMapBasedMultimap$c;.d:(Ljava/lang/Object;)Ljava/util/Collection;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Collection` `e`(`com.google.common.collect.AbstractMapBasedMultimap$c` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/google/common/collect/AbstractMapBasedMultimap$c;.e:(Ljava/lang/Object;)Ljava/util/Collection;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `equals`(`com.google.common.collect.AbstractMapBasedMultimap$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/collect/AbstractMapBasedMultimap$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Map$Entry` `f`(`com.google.common.collect.AbstractMapBasedMultimap$c` v2 @kind this, `java.util.Map$Entry` v3 @kind object) @signature `Lcom/google/common/collect/AbstractMapBasedMultimap$c;.f:(Ljava/util/Map$Entry;)Ljava/util/Map$Entry;` @AccessFlag  {

  # return;
}
procedure `java.lang.Object` `get`(`com.google.common.collect.AbstractMapBasedMultimap$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/collect/AbstractMapBasedMultimap$c;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `int` `hashCode`(`com.google.common.collect.AbstractMapBasedMultimap$c` v1 @kind this) @signature `Lcom/google/common/collect/AbstractMapBasedMultimap$c;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Set` `keySet`(`com.google.common.collect.AbstractMapBasedMultimap$c` v1 @kind this) @signature `Lcom/google/common/collect/AbstractMapBasedMultimap$c;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `remove`(`com.google.common.collect.AbstractMapBasedMultimap$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/collect/AbstractMapBasedMultimap$c;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `int` `size`(`com.google.common.collect.AbstractMapBasedMultimap$c` v1 @kind this) @signature `Lcom/google/common/collect/AbstractMapBasedMultimap$c;.size:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.collect.AbstractMapBasedMultimap$c` v1 @kind this) @signature `Lcom/google/common/collect/AbstractMapBasedMultimap$c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
