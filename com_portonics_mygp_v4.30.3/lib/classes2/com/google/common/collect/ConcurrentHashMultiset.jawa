record `com.google.common.collect.ConcurrentHashMultiset` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.common.collect.f` @kind class, `java.io.Serializable` @kind interface {
  `java.util.concurrent.ConcurrentMap` `com.google.common.collect.ConcurrentHashMultiset.d` @AccessFlag PRIVATE_FINAL_TRANSIENT;
}
global `long` `@@com.google.common.collect.ConcurrentHashMultiset.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.google.common.collect.ConcurrentHashMultiset` v2 @kind this, `java.util.concurrent.ConcurrentMap` v3 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.<init>:(Ljava/util/concurrent/ConcurrentMap;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.util.concurrent.ConcurrentMap` `access$100`(`com.google.common.collect.ConcurrentHashMultiset` v0 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.access$100:(Lcom/google/common/collect/ConcurrentHashMultiset;)Ljava/util/concurrent/ConcurrentMap;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.List` `c`(`com.google.common.collect.ConcurrentHashMultiset` v4 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.c:()Ljava/util/List;` @AccessFlag PRIVATE {

  # return;
}
procedure `com.google.common.collect.ConcurrentHashMultiset` `create`() @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.create:()Lcom/google/common/collect/ConcurrentHashMultiset;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.collect.ConcurrentHashMultiset` `create`(`java.lang.Iterable` v1 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.create:(Ljava/lang/Iterable;)Lcom/google/common/collect/ConcurrentHashMultiset;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.common.collect.ConcurrentHashMultiset` `create`(`java.util.concurrent.ConcurrentMap` v1 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.create:(Ljava/util/concurrent/ConcurrentMap;)Lcom/google/common/collect/ConcurrentHashMultiset;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `readObject`(`com.google.common.collect.ConcurrentHashMultiset` v1 @kind this, `java.io.ObjectInputStream` v2 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.readObject:(Ljava/io/ObjectInputStream;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `writeObject`(`com.google.common.collect.ConcurrentHashMultiset` v1 @kind this, `java.io.ObjectOutputStream` v2 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.writeObject:(Ljava/io/ObjectOutputStream;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `add`(`com.google.common.collect.ConcurrentHashMultiset` v4 @kind this, `java.lang.Object` v5 @kind object, `int` v6 ) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.add:(Ljava/lang/Object;I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `clear`(`com.google.common.collect.ConcurrentHashMultiset` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.clear:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `contains`(`com.google.common.collect.ConcurrentHashMultiset` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `int` `count`(`com.google.common.collect.ConcurrentHashMultiset` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.count:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Set` `createElementSet`(`com.google.common.collect.ConcurrentHashMultiset` v2 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.createElementSet:()Ljava/util/Set;` @AccessFlag  {

  # return;
}
procedure `java.util.Set` `createEntrySet`(`com.google.common.collect.ConcurrentHashMultiset` v2 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.createEntrySet:()Ljava/util/Set;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `distinctElements`(`com.google.common.collect.ConcurrentHashMultiset` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.distinctElements:()I` @AccessFlag  {

  # return;
}
procedure `java.util.Iterator` `elementIterator`(`com.google.common.collect.ConcurrentHashMultiset` v2 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.elementIterator:()Ljava/util/Iterator;` @AccessFlag  {

  # return;
}
procedure `java.util.Set` `elementSet`(`com.google.common.collect.ConcurrentHashMultiset` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.elementSet:()Ljava/util/Set;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `java.util.Iterator` `entryIterator`(`com.google.common.collect.ConcurrentHashMultiset` v2 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.entryIterator:()Ljava/util/Iterator;` @AccessFlag  {

  # return;
}
procedure `java.util.Set` `entrySet`(`com.google.common.collect.ConcurrentHashMultiset` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `boolean` `isEmpty`(`com.google.common.collect.ConcurrentHashMultiset` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.isEmpty:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Iterator` `iterator`(`com.google.common.collect.ConcurrentHashMultiset` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `remove`(`com.google.common.collect.ConcurrentHashMultiset` v5 @kind this, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.remove:(Ljava/lang/Object;I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `removeExactly`(`com.google.common.collect.ConcurrentHashMultiset` v5 @kind this, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.removeExactly:(Ljava/lang/Object;I)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `setCount`(`com.google.common.collect.ConcurrentHashMultiset` v4 @kind this, `java.lang.Object` v5 @kind object, `int` v6 ) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.setCount:(Ljava/lang/Object;I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `setCount`(`com.google.common.collect.ConcurrentHashMultiset` v4 @kind this, `java.lang.Object` v5 @kind object, `int` v6 , `int` v7 ) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.setCount:(Ljava/lang/Object;II)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `size`(`com.google.common.collect.ConcurrentHashMultiset` v5 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.size:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object`[] `toArray`(`com.google.common.collect.ConcurrentHashMultiset` v1 @kind this) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object`[] `toArray`(`com.google.common.collect.ConcurrentHashMultiset` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lcom/google/common/collect/ConcurrentHashMultiset;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
