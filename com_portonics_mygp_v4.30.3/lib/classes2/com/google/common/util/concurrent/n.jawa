record `com.google.common.util.concurrent.n` @kind class @AccessFlag ABSTRACT extends `com.google.common.util.concurrent.q` @kind class, `java.lang.Runnable` @kind interface {
  `com.google.common.util.concurrent.a0` `com.google.common.util.concurrent.n.i` @AccessFlag ;
  `java.lang.Object` `com.google.common.util.concurrent.n.j` @AccessFlag ;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.n` v0 @kind this, `com.google.common.util.concurrent.a0` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/util/concurrent/n;.<init>:(Lcom/google/common/util/concurrent/a0;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `com.google.common.util.concurrent.a0` `F`(`com.google.common.util.concurrent.a0` v1 @kind object, `com.google.common.base.o` v2 @kind object, `java.util.concurrent.Executor` v3 @kind object) @signature `Lcom/google/common/util/concurrent/n;.F:(Lcom/google/common/util/concurrent/a0;Lcom/google/common/base/o;Ljava/util/concurrent/Executor;)Lcom/google/common/util/concurrent/a0;` @AccessFlag STATIC {

  # return;
}
procedure `java.lang.Object` `G`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/util/concurrent/n;.G:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `H`(`java.lang.Object` v0 @kind object) @signature `Lcom/google/common/util/concurrent/n;.H:(Ljava/lang/Object;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `n`(`com.google.common.util.concurrent.n` v1 @kind this) @signature `Lcom/google/common/util/concurrent/n;.n:()V` @AccessFlag PROTECTED_FINAL {

  # return;
}
procedure `void` `run`(`com.google.common.util.concurrent.n` v6 @kind this) @signature `Lcom/google/common/util/concurrent/n;.run:()V` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `java.lang.String` `x`(`com.google.common.util.concurrent.n` v5 @kind this) @signature `Lcom/google/common/util/concurrent/n;.x:()Ljava/lang/String;` @AccessFlag PROTECTED {

  # return;
}
