record `com.google.common.util.concurrent.i0` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `com.google.common.util.concurrent.i0.a` @AccessFlag PRIVATE;
  `java.lang.Boolean` `com.google.common.util.concurrent.i0.b` @AccessFlag PRIVATE;
  `java.lang.Integer` `com.google.common.util.concurrent.i0.c` @AccessFlag PRIVATE;
  `java.lang.Thread$UncaughtExceptionHandler` `com.google.common.util.concurrent.i0.d` @AccessFlag PRIVATE;
  `java.util.concurrent.ThreadFactory` `com.google.common.util.concurrent.i0.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.i0` v1 @kind this) @signature `Lcom/google/common/util/concurrent/i0;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.lang.String` `a`(`java.lang.String` v0 @kind object, `java.lang.Object`[] v1 @kind object) @signature `Lcom/google/common/util/concurrent/i0;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.concurrent.ThreadFactory` `c`(`com.google.common.util.concurrent.i0` v9 @kind object) @signature `Lcom/google/common/util/concurrent/i0;.c:(Lcom/google/common/util/concurrent/i0;)Ljava/util/concurrent/ThreadFactory;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.String` `d`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lcom/google/common/util/concurrent/i0;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.concurrent.ThreadFactory` `b`(`com.google.common.util.concurrent.i0` v1 @kind this) @signature `Lcom/google/common/util/concurrent/i0;.b:()Ljava/util/concurrent/ThreadFactory;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.util.concurrent.i0` `e`(`com.google.common.util.concurrent.i0` v0 @kind this, `boolean` v1 ) @signature `Lcom/google/common/util/concurrent/i0;.e:(Z)Lcom/google/common/util/concurrent/i0;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.common.util.concurrent.i0` `f`(`com.google.common.util.concurrent.i0` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lcom/google/common/util/concurrent/i0;.f:(Ljava/lang/String;)Lcom/google/common/util/concurrent/i0;` @AccessFlag PUBLIC {

  # return;
}
