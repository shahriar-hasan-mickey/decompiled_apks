record `com.google.common.util.concurrent.b` @kind class @AccessFlag ABSTRACT {
}
procedure `void` `<init>`(`com.google.common.util.concurrent.b` v0 @kind this) @signature `Lcom/google/common/util/concurrent/b;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.b` v0 @kind this, `com.google.common.util.concurrent.a` v1 @kind object) @signature `Lcom/google/common/util/concurrent/b;.<init>:(Lcom/google/common/util/concurrent/a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `a`(`com.google.common.util.concurrent.AbstractFuture` v0 @kind object, `com.google.common.util.concurrent.d` v1 @kind object, `com.google.common.util.concurrent.d` v2 @kind object) @signature `Lcom/google/common/util/concurrent/b;.a:(Lcom/google/common/util/concurrent/AbstractFuture;Lcom/google/common/util/concurrent/d;Lcom/google/common/util/concurrent/d;)Z` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `b`(`com.google.common.util.concurrent.AbstractFuture` v0 @kind object, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/util/concurrent/b;.b:(Lcom/google/common/util/concurrent/AbstractFuture;Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `c`(`com.google.common.util.concurrent.AbstractFuture` v0 @kind object, `com.google.common.util.concurrent.l` v1 @kind object, `com.google.common.util.concurrent.l` v2 @kind object) @signature `Lcom/google/common/util/concurrent/b;.c:(Lcom/google/common/util/concurrent/AbstractFuture;Lcom/google/common/util/concurrent/l;Lcom/google/common/util/concurrent/l;)Z` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `d`(`com.google.common.util.concurrent.l` v0 @kind object, `com.google.common.util.concurrent.l` v1 @kind object) @signature `Lcom/google/common/util/concurrent/b;.d:(Lcom/google/common/util/concurrent/l;Lcom/google/common/util/concurrent/l;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `e`(`com.google.common.util.concurrent.l` v0 @kind object, `java.lang.Thread` v1 @kind object) @signature `Lcom/google/common/util/concurrent/b;.e:(Lcom/google/common/util/concurrent/l;Ljava/lang/Thread;)V` @AccessFlag ABSTRACT {

  # return;
}
