record `com.google.common.util.concurrent.AtomicDouble` @kind class @AccessFlag PUBLIC extends `java.lang.Number` @kind class, `java.io.Serializable` @kind interface {
  `java.util.concurrent.atomic.AtomicLong` `com.google.common.util.concurrent.AtomicDouble.b` @AccessFlag PRIVATE_TRANSIENT;
}
global `long` `@@com.google.common.util.concurrent.AtomicDouble.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.google.common.util.concurrent.AtomicDouble` v2 @kind this) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.AtomicDouble` v1 @kind this, `double` v2 ) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.<init>:(D)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `readObject`(`com.google.common.util.concurrent.AtomicDouble` v2 @kind this, `java.io.ObjectInputStream` v3 @kind object) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.readObject:(Ljava/io/ObjectInputStream;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `writeObject`(`com.google.common.util.concurrent.AtomicDouble` v2 @kind this, `java.io.ObjectOutputStream` v3 @kind object) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.writeObject:(Ljava/io/ObjectOutputStream;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `double` `addAndGet`(`com.google.common.util.concurrent.AtomicDouble` v7 @kind this, `double` v8 ) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.addAndGet:(D)D` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `boolean` `compareAndSet`(`com.google.common.util.concurrent.AtomicDouble` v1 @kind this, `double` v2 , `double` v4 ) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.compareAndSet:(DD)Z` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `double` `doubleValue`(`com.google.common.util.concurrent.AtomicDouble` v2 @kind this) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.doubleValue:()D` @AccessFlag PUBLIC {

  # return;
}
procedure `float` `floatValue`(`com.google.common.util.concurrent.AtomicDouble` v2 @kind this) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.floatValue:()F` @AccessFlag PUBLIC {

  # return;
}
procedure `double` `get`(`com.google.common.util.concurrent.AtomicDouble` v2 @kind this) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.get:()D` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `double` `getAndAdd`(`com.google.common.util.concurrent.AtomicDouble` v7 @kind this, `double` v8 ) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.getAndAdd:(D)D` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `double` `getAndSet`(`com.google.common.util.concurrent.AtomicDouble` v1 @kind this, `double` v2 ) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.getAndSet:(D)D` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `int` `intValue`(`com.google.common.util.concurrent.AtomicDouble` v2 @kind this) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.intValue:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `lazySet`(`com.google.common.util.concurrent.AtomicDouble` v1 @kind this, `double` v2 ) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.lazySet:(D)V` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `long` `longValue`(`com.google.common.util.concurrent.AtomicDouble` v2 @kind this) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.longValue:()J` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `set`(`com.google.common.util.concurrent.AtomicDouble` v1 @kind this, `double` v2 ) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.set:(D)V` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.util.concurrent.AtomicDouble` v2 @kind this) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `weakCompareAndSet`(`com.google.common.util.concurrent.AtomicDouble` v1 @kind this, `double` v2 , `double` v4 ) @signature `Lcom/google/common/util/concurrent/AtomicDouble;.weakCompareAndSet:(DD)Z` @AccessFlag PUBLIC_FINAL {

  # return;
}
