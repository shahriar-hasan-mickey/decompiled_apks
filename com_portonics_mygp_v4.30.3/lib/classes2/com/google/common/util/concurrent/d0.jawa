record `com.google.common.util.concurrent.d0` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `java.util.concurrent.Executor` `a`() @signature `Lcom/google/common/util/concurrent/d0;.a:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `b`() @signature `Lcom/google/common/util/concurrent/d0;.b:()Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.concurrent.ThreadFactory` `c`() @signature `Lcom/google/common/util/concurrent/d0;.c:()Ljava/util/concurrent/ThreadFactory;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.concurrent.Executor` `d`(`java.util.concurrent.Executor` v1 @kind object, `com.google.common.util.concurrent.AbstractFuture` v2 @kind object) @signature `Lcom/google/common/util/concurrent/d0;.d:(Ljava/util/concurrent/Executor;Lcom/google/common/util/concurrent/AbstractFuture;)Ljava/util/concurrent/Executor;` @AccessFlag STATIC {

  # return;
}
