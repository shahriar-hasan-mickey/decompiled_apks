record `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock` @kind class @AccessFlag FINAL extends `java.util.concurrent.locks.ReentrantReadWriteLock` @kind class, `com.google.common.util.concurrent.CycleDetectingLockFactory$b` @kind interface {
  `com.google.common.util.concurrent.CycleDetectingLockFactory$c` `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.lockGraphNode` @AccessFlag PRIVATE_FINAL;
  `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock` `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.readLock` @AccessFlag PRIVATE_FINAL;
  `com.google.common.util.concurrent.CycleDetectingLockFactory` `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.this$0` @AccessFlag FINAL_SYNTHETIC;
  `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock` `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.writeLock` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock` v0 @kind this, `com.google.common.util.concurrent.CycleDetectingLockFactory` v1 @kind object, `com.google.common.util.concurrent.CycleDetectingLockFactory$c` v2 @kind object, `boolean` v3 ) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;.<init>:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$c;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock` v0 @kind this, `com.google.common.util.concurrent.CycleDetectingLockFactory` v1 @kind object, `com.google.common.util.concurrent.CycleDetectingLockFactory$c` v2 @kind object, `boolean` v3 , `com.google.common.util.concurrent.CycleDetectingLockFactory$a` v4 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;.<init>:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$c;ZLcom/google/common/util/concurrent/CycleDetectingLockFactory$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `com.google.common.util.concurrent.CycleDetectingLockFactory$c` `getLockGraphNode`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;.getLockGraphNode:()Lcom/google/common/util/concurrent/CycleDetectingLockFactory$c;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isAcquiredByCurrentThread`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;.isAcquiredByCurrentThread:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.locks.Lock` `readLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;.readLock:()Ljava/util/concurrent/locks/Lock;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock` `readLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.locks.Lock` `writeLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/Lock;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock` `writeLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock` v1 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;` @AccessFlag PUBLIC {

  # return;
}
