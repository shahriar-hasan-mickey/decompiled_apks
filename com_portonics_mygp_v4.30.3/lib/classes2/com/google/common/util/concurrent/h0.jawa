record `com.google.common.util.concurrent.h0` @kind class @AccessFlag FINAL extends `java.util.concurrent.ThreadFactory` @kind interface {
  `java.util.concurrent.ThreadFactory` `com.google.common.util.concurrent.h0.b` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.String` `com.google.common.util.concurrent.h0.c` @AccessFlag FINAL_SYNTHETIC;
  `java.util.concurrent.atomic.AtomicLong` `com.google.common.util.concurrent.h0.d` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Boolean` `com.google.common.util.concurrent.h0.e` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Integer` `com.google.common.util.concurrent.h0.f` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Thread$UncaughtExceptionHandler` `com.google.common.util.concurrent.h0.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.h0` v0 @kind this, `java.util.concurrent.ThreadFactory` v1 @kind object, `java.lang.String` v2 @kind object, `java.util.concurrent.atomic.AtomicLong` v3 @kind object, `java.lang.Boolean` v4 @kind object, `java.lang.Integer` v5 @kind object, `java.lang.Thread$UncaughtExceptionHandler` v6 @kind object) @signature `Lcom/google/common/util/concurrent/h0;.<init>:(Ljava/util/concurrent/ThreadFactory;Ljava/lang/String;Ljava/util/concurrent/atomic/AtomicLong;Ljava/lang/Boolean;Ljava/lang/Integer;Ljava/lang/Thread$UncaughtExceptionHandler;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.lang.Thread` `newThread`(`com.google.common.util.concurrent.h0` v5 @kind this, `java.lang.Runnable` v6 @kind object) @signature `Lcom/google/common/util/concurrent/h0;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {

  # return;
}
