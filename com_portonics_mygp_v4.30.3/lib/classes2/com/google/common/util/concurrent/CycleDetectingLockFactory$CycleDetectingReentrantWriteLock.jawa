record `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock` @kind class @AccessFlag  extends `java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock` @kind class {
  `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock` `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.readWriteLock` @AccessFlag FINAL;
  `com.google.common.util.concurrent.CycleDetectingLockFactory` `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock` v0 @kind this, `com.google.common.util.concurrent.CycleDetectingLockFactory` v1 @kind object, `com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock` v2 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantWriteLock;.<init>:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `lock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock` v2 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantWriteLock;.lock:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `lockInterruptibly`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock` v2 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantWriteLock;.lockInterruptibly:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `tryLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock` v2 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantWriteLock;.tryLock:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `tryLock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock` v2 @kind this, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantWriteLock;.tryLock:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `unlock`(`com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock` v2 @kind this) @signature `Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantWriteLock;.unlock:()V` @AccessFlag PUBLIC {

  # return;
}
