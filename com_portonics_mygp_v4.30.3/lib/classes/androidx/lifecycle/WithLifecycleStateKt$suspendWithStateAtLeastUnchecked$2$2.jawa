record `androidx.lifecycle.WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$2` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function1` @kind interface {
  `kotlinx.coroutines.CoroutineDispatcher` `androidx.lifecycle.WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$2.$lifecycleDispatcher` @AccessFlag FINAL_SYNTHETIC;
  `androidx.lifecycle.WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$observer$1` `androidx.lifecycle.WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$2.$observer` @AccessFlag FINAL_SYNTHETIC;
  `androidx.lifecycle.Lifecycle` `androidx.lifecycle.WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$2.$this_suspendWithStateAtLeastUnchecked` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`androidx.lifecycle.WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$2` v0 @kind this, `kotlinx.coroutines.CoroutineDispatcher` v1 @kind object, `androidx.lifecycle.Lifecycle` v2 @kind object, `androidx.lifecycle.WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$observer$1` v3 @kind object) @signature `Landroidx/lifecycle/WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$2;.<init>:(Lkotlinx/coroutines/CoroutineDispatcher;Landroidx/lifecycle/Lifecycle;Landroidx/lifecycle/WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$observer$1;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.lang.Object` `invoke`(`androidx.lifecycle.WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$2` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Landroidx/lifecycle/WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$2;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `void` `invoke`(`androidx.lifecycle.WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$2` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Landroidx/lifecycle/WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$2;.invoke:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {

  # return;
}
