record `androidx.room.x1` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `androidx.room.RoomDatabase` `androidx.room.x1.mDatabase` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `androidx.room.x1.mLock` @AccessFlag PRIVATE_FINAL;
  `e.t.a.f` `androidx.room.x1.mStmt` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`androidx.room.x1` v2 @kind this, `androidx.room.RoomDatabase` v3 @kind object) @signature `Landroidx/room/x1;.<init>:(Landroidx/room/RoomDatabase;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `e.t.a.f` `a`(`androidx.room.x1` v2 @kind this) @signature `Landroidx/room/x1;.a:()Le/t/a/f;` @AccessFlag PRIVATE {

  # return;
}
procedure `e.t.a.f` `b`(`androidx.room.x1` v0 @kind this, `boolean` v1 ) @signature `Landroidx/room/x1;.b:(Z)Le/t/a/f;` @AccessFlag PRIVATE {

  # return;
}
procedure `e.t.a.f` `acquire`(`androidx.room.x1` v3 @kind this) @signature `Landroidx/room/x1;.acquire:()Le/t/a/f;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `assertNotMainThread`(`androidx.room.x1` v1 @kind this) @signature `Landroidx/room/x1;.assertNotMainThread:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `java.lang.String` `createQuery`() @signature `Landroidx/room/x1;.createQuery:()Ljava/lang/String;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `release`(`androidx.room.x1` v1 @kind this, `e.t.a.f` v2 @kind object) @signature `Landroidx/room/x1;.release:(Le/t/a/f;)V` @AccessFlag PUBLIC {

  # return;
}
