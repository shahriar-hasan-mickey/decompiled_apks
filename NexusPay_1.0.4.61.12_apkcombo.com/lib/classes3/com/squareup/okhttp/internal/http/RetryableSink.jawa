record `com.squareup.okhttp.internal.http.RetryableSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Sink` @kind interface {
  `boolean` `com.squareup.okhttp.internal.http.RetryableSink.closed` @AccessFlag PRIVATE;
  `okio.Buffer` `com.squareup.okhttp.internal.http.RetryableSink.content` @AccessFlag PRIVATE_FINAL;
  `int` `com.squareup.okhttp.internal.http.RetryableSink.limit` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.squareup.okhttp.internal.http.RetryableSink` v1 @kind this) @signature `Lcom/squareup/okhttp/internal/http/RetryableSink;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.squareup.okhttp.internal.http.RetryableSink` v1 @kind this, `int` v2 ) @signature `Lcom/squareup/okhttp/internal/http/RetryableSink;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `close`(`com.squareup.okhttp.internal.http.RetryableSink` v5 @kind this) @signature `Lcom/squareup/okhttp/internal/http/RetryableSink;.close:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `long` `contentLength`(`com.squareup.okhttp.internal.http.RetryableSink` v2 @kind this) @signature `Lcom/squareup/okhttp/internal/http/RetryableSink;.contentLength:()J` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `flush`(`com.squareup.okhttp.internal.http.RetryableSink` v0 @kind this) @signature `Lcom/squareup/okhttp/internal/http/RetryableSink;.flush:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `okio.Timeout` `timeout`(`com.squareup.okhttp.internal.http.RetryableSink` v1 @kind this) @signature `Lcom/squareup/okhttp/internal/http/RetryableSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `write`(`com.squareup.okhttp.internal.http.RetryableSink` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lcom/squareup/okhttp/internal/http/RetryableSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `writeToSocket`(`com.squareup.okhttp.internal.http.RetryableSink` v7 @kind this, `okio.Sink` v8 @kind object) @signature `Lcom/squareup/okhttp/internal/http/RetryableSink;.writeToSocket:(Lokio/Sink;)V` @AccessFlag PUBLIC {

  # return;
}
