record `com.squareup.okhttp.internal.http.RouteException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Exception` @kind class {
  `java.io.IOException` `com.squareup.okhttp.internal.http.RouteException.lastException` @AccessFlag PRIVATE;
}
global `java.lang.reflect.Method` `@@com.squareup.okhttp.internal.http.RouteException.addSuppressedExceptionMethod` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/squareup/okhttp/internal/http/RouteException;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.squareup.okhttp.internal.http.RouteException` v0 @kind this, `java.io.IOException` v1 @kind object) @signature `Lcom/squareup/okhttp/internal/http/RouteException;.<init>:(Ljava/io/IOException;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `addSuppressedIfPossible`(`com.squareup.okhttp.internal.http.RouteException` v3 @kind this, `java.io.IOException` v4 @kind object, `java.io.IOException` v5 @kind object) @signature `Lcom/squareup/okhttp/internal/http/RouteException;.addSuppressedIfPossible:(Ljava/io/IOException;Ljava/io/IOException;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `addConnectException`(`com.squareup.okhttp.internal.http.RouteException` v1 @kind this, `java.io.IOException` v2 @kind object) @signature `Lcom/squareup/okhttp/internal/http/RouteException;.addConnectException:(Ljava/io/IOException;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.io.IOException` `getLastConnectException`(`com.squareup.okhttp.internal.http.RouteException` v1 @kind this) @signature `Lcom/squareup/okhttp/internal/http/RouteException;.getLastConnectException:()Ljava/io/IOException;` @AccessFlag PUBLIC {

  # return;
}
