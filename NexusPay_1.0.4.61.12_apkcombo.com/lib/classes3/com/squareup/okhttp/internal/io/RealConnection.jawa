record `com.squareup.okhttp.internal.io.RealConnection` @kind class @AccessFlag PUBLIC_FINAL extends `com.squareup.okhttp.Connection` @kind interface {
  `java.util.List` `com.squareup.okhttp.internal.io.RealConnection.allocations` @AccessFlag PUBLIC_FINAL;
  `com.squareup.okhttp.internal.framed.FramedConnection` `com.squareup.okhttp.internal.io.RealConnection.framedConnection` @AccessFlag PUBLIC_VOLATILE;
  `com.squareup.okhttp.Handshake` `com.squareup.okhttp.internal.io.RealConnection.handshake` @AccessFlag PRIVATE;
  `long` `com.squareup.okhttp.internal.io.RealConnection.idleAtNanos` @AccessFlag PUBLIC;
  `boolean` `com.squareup.okhttp.internal.io.RealConnection.noNewStreams` @AccessFlag PUBLIC;
  `com.squareup.okhttp.Protocol` `com.squareup.okhttp.internal.io.RealConnection.protocol` @AccessFlag PRIVATE;
  `java.net.Socket` `com.squareup.okhttp.internal.io.RealConnection.rawSocket` @AccessFlag PRIVATE;
  `com.squareup.okhttp.Route` `com.squareup.okhttp.internal.io.RealConnection.route` @AccessFlag PRIVATE_FINAL;
  `okio.BufferedSink` `com.squareup.okhttp.internal.io.RealConnection.sink` @AccessFlag PUBLIC;
  `java.net.Socket` `com.squareup.okhttp.internal.io.RealConnection.socket` @AccessFlag PUBLIC;
  `okio.BufferedSource` `com.squareup.okhttp.internal.io.RealConnection.source` @AccessFlag PUBLIC;
  `int` `com.squareup.okhttp.internal.io.RealConnection.streamCount` @AccessFlag PUBLIC;
}
global `javax.net.ssl.SSLSocketFactory` `@@com.squareup.okhttp.internal.io.RealConnection.lastSslSocketFactory` @AccessFlag PRIVATE_STATIC;
global `com.squareup.okhttp.internal.tls.TrustRootIndex` `@@com.squareup.okhttp.internal.io.RealConnection.lastTrustRootIndex` @AccessFlag PRIVATE_STATIC;
procedure `void` `<init>`(`com.squareup.okhttp.internal.io.RealConnection` v2 @kind this, `com.squareup.okhttp.Route` v3 @kind object) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.<init>:(Lcom/squareup/okhttp/Route;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `connectSocket`(`com.squareup.okhttp.internal.io.RealConnection` v3 @kind this, `int` v4 , `int` v5 , `int` v6 , `com.squareup.okhttp.internal.ConnectionSpecSelector` v7 @kind object) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.connectSocket:(IIILcom/squareup/okhttp/internal/ConnectionSpecSelector;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `connectTls`(`com.squareup.okhttp.internal.io.RealConnection` v5 @kind this, `int` v6 , `int` v7 , `com.squareup.okhttp.internal.ConnectionSpecSelector` v8 @kind object) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.connectTls:(IILcom/squareup/okhttp/internal/ConnectionSpecSelector;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `createTunnel`(`com.squareup.okhttp.internal.io.RealConnection` v8 @kind this, `int` v9 , `int` v10 ) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.createTunnel:(II)V` @AccessFlag PRIVATE {

  # return;
}
procedure `com.squareup.okhttp.Request` `createTunnelRequest`(`com.squareup.okhttp.internal.io.RealConnection` v3 @kind this) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.createTunnelRequest:()Lcom/squareup/okhttp/Request;` @AccessFlag PRIVATE {

  # return;
}
procedure `com.squareup.okhttp.internal.tls.TrustRootIndex` `trustRootIndex`(`javax.net.ssl.SSLSocketFactory` v3 @kind object) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.trustRootIndex:(Ljavax/net/ssl/SSLSocketFactory;)Lcom/squareup/okhttp/internal/tls/TrustRootIndex;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `allocationLimit`(`com.squareup.okhttp.internal.io.RealConnection` v1 @kind this) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.allocationLimit:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `cancel`(`com.squareup.okhttp.internal.io.RealConnection` v1 @kind this) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.cancel:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `connect`(`com.squareup.okhttp.internal.io.RealConnection` v6 @kind this, `int` v7 , `int` v8 , `int` v9 , `java.util.List` v10 @kind object, `boolean` v11 ) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.connect:(IIILjava/util/List;Z)V` @AccessFlag PUBLIC {

  # return;
}
procedure `com.squareup.okhttp.Handshake` `getHandshake`(`com.squareup.okhttp.internal.io.RealConnection` v1 @kind this) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.getHandshake:()Lcom/squareup/okhttp/Handshake;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.squareup.okhttp.Protocol` `getProtocol`(`com.squareup.okhttp.internal.io.RealConnection` v1 @kind this) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.getProtocol:()Lcom/squareup/okhttp/Protocol;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.squareup.okhttp.Route` `getRoute`(`com.squareup.okhttp.internal.io.RealConnection` v1 @kind this) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.getRoute:()Lcom/squareup/okhttp/Route;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.net.Socket` `getSocket`(`com.squareup.okhttp.internal.io.RealConnection` v1 @kind this) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.getSocket:()Ljava/net/Socket;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isConnected`(`com.squareup.okhttp.internal.io.RealConnection` v1 @kind this) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.isConnected:()Z` @AccessFlag  {

  # return;
}
procedure `boolean` `isHealthy`(`com.squareup.okhttp.internal.io.RealConnection` v4 @kind this, `boolean` v5 ) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.isHealthy:(Z)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isMultiplexed`(`com.squareup.okhttp.internal.io.RealConnection` v1 @kind this) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.isMultiplexed:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`com.squareup.okhttp.internal.io.RealConnection` v2 @kind this) @signature `Lcom/squareup/okhttp/internal/io/RealConnection;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
