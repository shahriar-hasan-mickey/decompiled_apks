record `androidx.work.Configuration` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `androidx.work.Configuration.mDefaultProcessName` @AccessFlag FINAL;
  `androidx.work.InitializationExceptionHandler` `androidx.work.Configuration.mExceptionHandler` @AccessFlag FINAL;
  `java.util.concurrent.Executor` `androidx.work.Configuration.mExecutor` @AccessFlag FINAL;
  `androidx.work.InputMergerFactory` `androidx.work.Configuration.mInputMergerFactory` @AccessFlag FINAL;
  `boolean` `androidx.work.Configuration.mIsUsingDefaultTaskExecutor` @AccessFlag PRIVATE_FINAL;
  `int` `androidx.work.Configuration.mLoggingLevel` @AccessFlag FINAL;
  `int` `androidx.work.Configuration.mMaxJobSchedulerId` @AccessFlag FINAL;
  `int` `androidx.work.Configuration.mMaxSchedulerLimit` @AccessFlag FINAL;
  `int` `androidx.work.Configuration.mMinJobSchedulerId` @AccessFlag FINAL;
  `androidx.work.RunnableScheduler` `androidx.work.Configuration.mRunnableScheduler` @AccessFlag FINAL;
  `java.util.concurrent.Executor` `androidx.work.Configuration.mTaskExecutor` @AccessFlag FINAL;
  `androidx.work.WorkerFactory` `androidx.work.Configuration.mWorkerFactory` @AccessFlag FINAL;
}
global `int` `@@androidx.work.Configuration.MIN_SCHEDULER_LIMIT` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<init>`(`androidx.work.Configuration` v2 @kind this, `androidx.work.Configuration$Builder` v3 @kind object) @signature `Landroidx/work/Configuration;.<init>:(Landroidx/work/Configuration$Builder;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.util.concurrent.Executor` `createDefaultExecutor`(`androidx.work.Configuration` v2 @kind this, `boolean` v3 ) @signature `Landroidx/work/Configuration;.createDefaultExecutor:(Z)Ljava/util/concurrent/Executor;` @AccessFlag PRIVATE {

  # return;
}
procedure `java.util.concurrent.ThreadFactory` `createDefaultThreadFactory`(`androidx.work.Configuration` v1 @kind this, `boolean` v2 ) @signature `Landroidx/work/Configuration;.createDefaultThreadFactory:(Z)Ljava/util/concurrent/ThreadFactory;` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.String` `getDefaultProcessName`(`androidx.work.Configuration` v1 @kind this) @signature `Landroidx/work/Configuration;.getDefaultProcessName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.work.InitializationExceptionHandler` `getExceptionHandler`(`androidx.work.Configuration` v1 @kind this) @signature `Landroidx/work/Configuration;.getExceptionHandler:()Landroidx/work/InitializationExceptionHandler;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.Executor` `getExecutor`(`androidx.work.Configuration` v1 @kind this) @signature `Landroidx/work/Configuration;.getExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.work.InputMergerFactory` `getInputMergerFactory`(`androidx.work.Configuration` v1 @kind this) @signature `Landroidx/work/Configuration;.getInputMergerFactory:()Landroidx/work/InputMergerFactory;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getMaxJobSchedulerId`(`androidx.work.Configuration` v1 @kind this) @signature `Landroidx/work/Configuration;.getMaxJobSchedulerId:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getMaxSchedulerLimit`(`androidx.work.Configuration` v2 @kind this) @signature `Landroidx/work/Configuration;.getMaxSchedulerLimit:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getMinJobSchedulerId`(`androidx.work.Configuration` v1 @kind this) @signature `Landroidx/work/Configuration;.getMinJobSchedulerId:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getMinimumLoggingLevel`(`androidx.work.Configuration` v1 @kind this) @signature `Landroidx/work/Configuration;.getMinimumLoggingLevel:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.work.RunnableScheduler` `getRunnableScheduler`(`androidx.work.Configuration` v1 @kind this) @signature `Landroidx/work/Configuration;.getRunnableScheduler:()Landroidx/work/RunnableScheduler;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.Executor` `getTaskExecutor`(`androidx.work.Configuration` v1 @kind this) @signature `Landroidx/work/Configuration;.getTaskExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC {

  # return;
}
procedure `androidx.work.WorkerFactory` `getWorkerFactory`(`androidx.work.Configuration` v1 @kind this) @signature `Landroidx/work/Configuration;.getWorkerFactory:()Landroidx/work/WorkerFactory;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isUsingDefaultTaskExecutor`(`androidx.work.Configuration` v1 @kind this) @signature `Landroidx/work/Configuration;.isUsingDefaultTaskExecutor:()Z` @AccessFlag PUBLIC {

  # return;
}
