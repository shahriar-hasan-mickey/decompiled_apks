record `androidx.work.impl.Processor` @kind class @AccessFlag PUBLIC extends `androidx.work.impl.ExecutionListener` @kind interface, `androidx.work.impl.foreground.ForegroundProcessor` @kind interface {
  `android.content.Context` `androidx.work.impl.Processor.mAppContext` @AccessFlag PRIVATE;
  `java.util.Set` `androidx.work.impl.Processor.mCancelledIds` @AccessFlag PRIVATE;
  `androidx.work.Configuration` `androidx.work.impl.Processor.mConfiguration` @AccessFlag PRIVATE;
  `java.util.Map` `androidx.work.impl.Processor.mEnqueuedWorkMap` @AccessFlag PRIVATE;
  `android.os.PowerManager$WakeLock` `androidx.work.impl.Processor.mForegroundLock` @AccessFlag PRIVATE;
  `java.util.Map` `androidx.work.impl.Processor.mForegroundWorkMap` @AccessFlag PRIVATE;
  `java.lang.Object` `androidx.work.impl.Processor.mLock` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `androidx.work.impl.Processor.mOuterListeners` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `androidx.work.impl.Processor.mSchedulers` @AccessFlag PRIVATE;
  `androidx.work.impl.WorkDatabase` `androidx.work.impl.Processor.mWorkDatabase` @AccessFlag PRIVATE;
  `androidx.work.impl.utils.taskexecutor.TaskExecutor` `androidx.work.impl.Processor.mWorkTaskExecutor` @AccessFlag PRIVATE;
}
global `java.lang.String` `@@androidx.work.impl.Processor.FOREGROUND_WAKELOCK_TAG` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@androidx.work.impl.Processor.TAG` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Landroidx/work/impl/Processor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`androidx.work.impl.Processor` v0 @kind this, `android.content.Context` v1 @kind object, `androidx.work.Configuration` v2 @kind object, `androidx.work.impl.utils.taskexecutor.TaskExecutor` v3 @kind object, `androidx.work.impl.WorkDatabase` v4 @kind object, `java.util.List` v5 @kind object) @signature `Landroidx/work/impl/Processor;.<init>:(Landroid/content/Context;Landroidx/work/Configuration;Landroidx/work/impl/utils/taskexecutor/TaskExecutor;Landroidx/work/impl/WorkDatabase;Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `interrupt`(`java.lang.String` v4 @kind object, `androidx.work.impl.WorkerWrapper` v5 @kind object) @signature `Landroidx/work/impl/Processor;.interrupt:(Ljava/lang/String;Landroidx/work/impl/WorkerWrapper;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `stopForegroundService`(`androidx.work.impl.Processor` v7 @kind this) @signature `Landroidx/work/impl/Processor;.stopForegroundService:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `addExecutionListener`(`androidx.work.impl.Processor` v2 @kind this, `androidx.work.impl.ExecutionListener` v3 @kind object) @signature `Landroidx/work/impl/Processor;.addExecutionListener:(Landroidx/work/impl/ExecutionListener;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `hasWork`(`androidx.work.impl.Processor` v2 @kind this) @signature `Landroidx/work/impl/Processor;.hasWork:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isCancelled`(`androidx.work.impl.Processor` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Landroidx/work/impl/Processor;.isCancelled:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isEnqueued`(`androidx.work.impl.Processor` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Landroidx/work/impl/Processor;.isEnqueued:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isEnqueuedInForeground`(`androidx.work.impl.Processor` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Landroidx/work/impl/Processor;.isEnqueuedInForeground:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `onExecuted`(`androidx.work.impl.Processor` v8 @kind this, `java.lang.String` v9 @kind object, `boolean` v10 ) @signature `Landroidx/work/impl/Processor;.onExecuted:(Ljava/lang/String;Z)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `removeExecutionListener`(`androidx.work.impl.Processor` v2 @kind this, `androidx.work.impl.ExecutionListener` v3 @kind object) @signature `Landroidx/work/impl/Processor;.removeExecutionListener:(Landroidx/work/impl/ExecutionListener;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `startForeground`(`androidx.work.impl.Processor` v6 @kind this, `java.lang.String` v7 @kind object, `androidx.work.ForegroundInfo` v8 @kind object) @signature `Landroidx/work/impl/Processor;.startForeground:(Ljava/lang/String;Landroidx/work/ForegroundInfo;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `startWork`(`androidx.work.impl.Processor` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Landroidx/work/impl/Processor;.startWork:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `startWork`(`androidx.work.impl.Processor` v11 @kind this, `java.lang.String` v12 @kind object, `androidx.work.WorkerParameters$RuntimeExtras` v13 @kind object) @signature `Landroidx/work/impl/Processor;.startWork:(Ljava/lang/String;Landroidx/work/WorkerParameters$RuntimeExtras;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `stopAndCancelWork`(`androidx.work.impl.Processor` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Landroidx/work/impl/Processor;.stopAndCancelWork:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `stopForeground`(`androidx.work.impl.Processor` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Landroidx/work/impl/Processor;.stopForeground:(Ljava/lang/String;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `stopForegroundWork`(`androidx.work.impl.Processor` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Landroidx/work/impl/Processor;.stopForegroundWork:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `stopWork`(`androidx.work.impl.Processor` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Landroidx/work/impl/Processor;.stopWork:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {

  # return;
}
