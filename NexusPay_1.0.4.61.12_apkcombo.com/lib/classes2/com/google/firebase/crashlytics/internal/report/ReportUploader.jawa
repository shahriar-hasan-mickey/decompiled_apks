record `com.google.firebase.crashlytics.internal.report.ReportUploader` @kind class @AccessFlag PUBLIC {
  `com.google.firebase.crashlytics.internal.report.network.CreateReportSpiCall` `com.google.firebase.crashlytics.internal.report.ReportUploader.createReportCall` @AccessFlag PRIVATE_FINAL;
  `com.google.firebase.crashlytics.internal.common.DataTransportState` `com.google.firebase.crashlytics.internal.report.ReportUploader.dataTransportState` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.google.firebase.crashlytics.internal.report.ReportUploader.googleAppId` @AccessFlag PRIVATE_FINAL;
  `com.google.firebase.crashlytics.internal.report.ReportUploader$HandlingExceptionCheck` `com.google.firebase.crashlytics.internal.report.ReportUploader.handlingExceptionCheck` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.google.firebase.crashlytics.internal.report.ReportUploader.organizationId` @AccessFlag PRIVATE_FINAL;
  `com.google.firebase.crashlytics.internal.report.ReportManager` `com.google.firebase.crashlytics.internal.report.ReportUploader.reportManager` @AccessFlag PRIVATE_FINAL;
  `java.lang.Thread` `com.google.firebase.crashlytics.internal.report.ReportUploader.uploadThread` @AccessFlag PRIVATE;
}
global `short`[] `@@com.google.firebase.crashlytics.internal.report.ReportUploader.RETRY_INTERVALS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/firebase/crashlytics/internal/report/ReportUploader;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.firebase.crashlytics.internal.report.ReportUploader` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object, `com.google.firebase.crashlytics.internal.common.DataTransportState` v3 @kind object, `com.google.firebase.crashlytics.internal.report.ReportManager` v4 @kind object, `com.google.firebase.crashlytics.internal.report.network.CreateReportSpiCall` v5 @kind object, `com.google.firebase.crashlytics.internal.report.ReportUploader$HandlingExceptionCheck` v6 @kind object) @signature `Lcom/google/firebase/crashlytics/internal/report/ReportUploader;.<init>:(Ljava/lang/String;Ljava/lang/String;Lcom/google/firebase/crashlytics/internal/common/DataTransportState;Lcom/google/firebase/crashlytics/internal/report/ReportManager;Lcom/google/firebase/crashlytics/internal/report/network/CreateReportSpiCall;Lcom/google/firebase/crashlytics/internal/report/ReportUploader$HandlingExceptionCheck;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.lang.Thread` `access$002`(`com.google.firebase.crashlytics.internal.report.ReportUploader` v0 @kind object, `java.lang.Thread` v1 @kind object) @signature `Lcom/google/firebase/crashlytics/internal/report/ReportUploader;.access$002:(Lcom/google/firebase/crashlytics/internal/report/ReportUploader;Ljava/lang/Thread;)Ljava/lang/Thread;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `com.google.firebase.crashlytics.internal.report.ReportUploader$HandlingExceptionCheck` `access$100`(`com.google.firebase.crashlytics.internal.report.ReportUploader` v0 @kind object) @signature `Lcom/google/firebase/crashlytics/internal/report/ReportUploader;.access$100:(Lcom/google/firebase/crashlytics/internal/report/ReportUploader;)Lcom/google/firebase/crashlytics/internal/report/ReportUploader$HandlingExceptionCheck;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `short`[] `access$200`() @signature `Lcom/google/firebase/crashlytics/internal/report/ReportUploader;.access$200:()[S` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `isUploading`(`com.google.firebase.crashlytics.internal.report.ReportUploader` v1 @kind this) @signature `Lcom/google/firebase/crashlytics/internal/report/ReportUploader;.isUploading:()Z` @AccessFlag  {

  # return;
}
procedure `boolean` `uploadReport`(`com.google.firebase.crashlytics.internal.report.ReportUploader` v5 @kind this, `com.google.firebase.crashlytics.internal.report.model.Report` v6 @kind object, `boolean` v7 ) @signature `Lcom/google/firebase/crashlytics/internal/report/ReportUploader;.uploadReport:(Lcom/google/firebase/crashlytics/internal/report/model/Report;Z)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `uploadReportsAsync`(`com.google.firebase.crashlytics.internal.report.ReportUploader` v1 @kind this, `java.util.List` v2 @kind object, `boolean` v3 , `float` v4 ) @signature `Lcom/google/firebase/crashlytics/internal/report/ReportUploader;.uploadReportsAsync:(Ljava/util/List;ZF)V` @AccessFlag PUBLIC {

  # return;
}
