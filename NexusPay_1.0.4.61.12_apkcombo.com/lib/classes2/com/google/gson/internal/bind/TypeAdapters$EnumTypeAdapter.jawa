record `com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter` @kind class @AccessFlag FINAL extends `com.google.gson.TypeAdapter` @kind class {
  `java.util.Map` `com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.constantToName` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.nameToConstant` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter` v11 @kind this, `java.lang.Class` v12 @kind object) @signature `Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;.<init>:(Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.lang.Enum` `read`(`com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter` v2 @kind this, `com.google.gson.stream.JsonReader` v3 @kind object) @signature `Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;.read:(Lcom/google/gson/stream/JsonReader;)Ljava/lang/Enum;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `read`(`com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter` v0 @kind this, `com.google.gson.stream.JsonReader` v1 @kind object) @signature `Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;.read:(Lcom/google/gson/stream/JsonReader;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `void` `write`(`com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter` v1 @kind this, `com.google.gson.stream.JsonWriter` v2 @kind object, `java.lang.Enum` v3 @kind object) @signature `Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;.write:(Lcom/google/gson/stream/JsonWriter;Ljava/lang/Enum;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `write`(`com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter` v0 @kind this, `com.google.gson.stream.JsonWriter` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;.write:(Lcom/google/gson/stream/JsonWriter;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
