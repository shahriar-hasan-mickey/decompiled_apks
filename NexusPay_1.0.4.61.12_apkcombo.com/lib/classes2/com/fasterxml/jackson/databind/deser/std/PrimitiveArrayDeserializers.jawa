record `com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.fasterxml.jackson.databind.deser.std.StdDeserializer` @kind class, `com.fasterxml.jackson.databind.deser.ContextualDeserializer` @kind interface {
  `java.lang.Boolean` `com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers._unwrapSingle` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers` v0 @kind this, `com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers` v1 @kind object, `java.lang.Boolean` v2 @kind object) @signature `Lcom/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;.<init>:(Lcom/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;Ljava/lang/Boolean;)V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lcom/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;.<init>:(Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `com.fasterxml.jackson.databind.JsonDeserializer` `forType`(`java.lang.Class` v1 @kind object) @signature `Lcom/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;.forType:(Ljava/lang/Class;)Lcom/fasterxml/jackson/databind/JsonDeserializer;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.fasterxml.jackson.databind.JsonDeserializer` `createContextual`(`com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers` v2 @kind this, `com.fasterxml.jackson.databind.DeserializationContext` v3 @kind object, `com.fasterxml.jackson.databind.BeanProperty` v4 @kind object) @signature `Lcom/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;.createContextual:(Lcom/fasterxml/jackson/databind/DeserializationContext;Lcom/fasterxml/jackson/databind/BeanProperty;)Lcom/fasterxml/jackson/databind/JsonDeserializer;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `deserializeWithType`(`com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers` v0 @kind this, `com.fasterxml.jackson.core.JsonParser` v1 @kind object, `com.fasterxml.jackson.databind.DeserializationContext` v2 @kind object, `com.fasterxml.jackson.databind.jsontype.TypeDeserializer` v3 @kind object) @signature `Lcom/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;.deserializeWithType:(Lcom/fasterxml/jackson/core/JsonParser;Lcom/fasterxml/jackson/databind/DeserializationContext;Lcom/fasterxml/jackson/databind/jsontype/TypeDeserializer;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `handleNonArray`(`com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers` v2 @kind this, `com.fasterxml.jackson.core.JsonParser` v3 @kind object, `com.fasterxml.jackson.databind.DeserializationContext` v4 @kind object) @signature `Lcom/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;.handleNonArray:(Lcom/fasterxml/jackson/core/JsonParser;Lcom/fasterxml/jackson/databind/DeserializationContext;)Ljava/lang/Object;` @AccessFlag PROTECTED {

  # return;
}
procedure `java.lang.Object` `handleSingleElementUnwrapped`(`com.fasterxml.jackson.core.JsonParser` v0 @kind object, `com.fasterxml.jackson.databind.DeserializationContext` v1 @kind object) @signature `Lcom/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;.handleSingleElementUnwrapped:(Lcom/fasterxml/jackson/core/JsonParser;Lcom/fasterxml/jackson/databind/DeserializationContext;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers` `withResolved`(`java.lang.Boolean` v0 @kind object) @signature `Lcom/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;.withResolved:(Ljava/lang/Boolean;)Lcom/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
