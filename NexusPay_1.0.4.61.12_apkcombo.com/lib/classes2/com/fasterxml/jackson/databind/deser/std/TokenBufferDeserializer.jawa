record `com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer` @kind class @AccessFlag PUBLIC extends `com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer` @kind class {
}
global `long` `@@com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer` v1 @kind this) @signature `Lcom/fasterxml/jackson/databind/deser/std/TokenBufferDeserializer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `com.fasterxml.jackson.databind.util.TokenBuffer` `createBufferInstance`(`com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer` v1 @kind this, `com.fasterxml.jackson.core.JsonParser` v2 @kind object) @signature `Lcom/fasterxml/jackson/databind/deser/std/TokenBufferDeserializer;.createBufferInstance:(Lcom/fasterxml/jackson/core/JsonParser;)Lcom/fasterxml/jackson/databind/util/TokenBuffer;` @AccessFlag PROTECTED {

  # return;
}
procedure `com.fasterxml.jackson.databind.util.TokenBuffer` `deserialize`(`com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer` v1 @kind this, `com.fasterxml.jackson.core.JsonParser` v2 @kind object, `com.fasterxml.jackson.databind.DeserializationContext` v3 @kind object) @signature `Lcom/fasterxml/jackson/databind/deser/std/TokenBufferDeserializer;.deserialize:(Lcom/fasterxml/jackson/core/JsonParser;Lcom/fasterxml/jackson/databind/DeserializationContext;)Lcom/fasterxml/jackson/databind/util/TokenBuffer;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `deserialize`(`com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer` v0 @kind this, `com.fasterxml.jackson.core.JsonParser` v1 @kind object, `com.fasterxml.jackson.databind.DeserializationContext` v2 @kind object) @signature `Lcom/fasterxml/jackson/databind/deser/std/TokenBufferDeserializer;.deserialize:(Lcom/fasterxml/jackson/core/JsonParser;Lcom/fasterxml/jackson/databind/DeserializationContext;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
