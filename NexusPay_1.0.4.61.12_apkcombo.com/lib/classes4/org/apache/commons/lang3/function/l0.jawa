record `org.apache.commons.lang3.function.l0` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC extends `org.apache.commons.lang3.function.FailableDoublePredicate` @kind interface {
  `org.apache.commons.lang3.function.FailableDoublePredicate` `org.apache.commons.lang3.function.l0.a` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
  `org.apache.commons.lang3.function.FailableDoublePredicate` `org.apache.commons.lang3.function.l0.b` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`org.apache.commons.lang3.function.l0` v0 @kind this, `org.apache.commons.lang3.function.FailableDoublePredicate` v1 @kind object, `org.apache.commons.lang3.function.FailableDoublePredicate` v2 @kind object) @signature `Lorg/apache/commons/lang3/function/l0;.<init>:(Lorg/apache/commons/lang3/function/FailableDoublePredicate;Lorg/apache/commons/lang3/function/FailableDoublePredicate;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableDoublePredicate` `and`(`org.apache.commons.lang3.function.l0` v0 @kind this, `org.apache.commons.lang3.function.FailableDoublePredicate` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/l0;.and:(Lorg/apache/commons/lang3/function/FailableDoublePredicate;)Lorg/apache/commons/lang3/function/FailableDoublePredicate;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableDoublePredicate` `negate`(`org.apache.commons.lang3.function.l0` v1 @kind this) @signature `Lorg/apache/commons/lang3/function/l0;.negate:()Lorg/apache/commons/lang3/function/FailableDoublePredicate;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableDoublePredicate` `or`(`org.apache.commons.lang3.function.l0` v0 @kind this, `org.apache.commons.lang3.function.FailableDoublePredicate` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/l0;.or:(Lorg/apache/commons/lang3/function/FailableDoublePredicate;)Lorg/apache/commons/lang3/function/FailableDoublePredicate;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `boolean` `test`(`org.apache.commons.lang3.function.l0` v2 @kind this, `double` v3 ) @signature `Lorg/apache/commons/lang3/function/l0;.test:(D)Z` @AccessFlag PUBLIC_FINAL {

  # return;
}
