record `org.apache.commons.lang3.function.p0` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC extends `org.apache.commons.lang3.function.FailableDoubleUnaryOperator` @kind interface {
}
global `org.apache.commons.lang3.function.p0` `@@org.apache.commons.lang3.function.p0.a` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/function/p0;.<clinit>:()V` @AccessFlag STATIC_SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.function.p0` v0 @kind this) @signature `Lorg/apache/commons/lang3/function/p0;.<init>:()V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableDoubleUnaryOperator` `andThen`(`org.apache.commons.lang3.function.p0` v0 @kind this, `org.apache.commons.lang3.function.FailableDoubleUnaryOperator` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/p0;.andThen:(Lorg/apache/commons/lang3/function/FailableDoubleUnaryOperator;)Lorg/apache/commons/lang3/function/FailableDoubleUnaryOperator;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `double` `applyAsDouble`(`org.apache.commons.lang3.function.p0` v0 @kind this, `double` v1 ) @signature `Lorg/apache/commons/lang3/function/p0;.applyAsDouble:(D)D` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableDoubleUnaryOperator` `compose`(`org.apache.commons.lang3.function.p0` v0 @kind this, `org.apache.commons.lang3.function.FailableDoubleUnaryOperator` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/p0;.compose:(Lorg/apache/commons/lang3/function/FailableDoubleUnaryOperator;)Lorg/apache/commons/lang3/function/FailableDoubleUnaryOperator;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
