record `org.apache.commons.lang3.function.FailableLongConsumer` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `org.apache.commons.lang3.function.FailableLongConsumer` `@@org.apache.commons.lang3.function.FailableLongConsumer.NOP` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/function/FailableLongConsumer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `accept`(`long` v0 ) @signature `Lorg/apache/commons/lang3/function/FailableLongConsumer;.accept:(J)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableLongConsumer` `andThen`(`org.apache.commons.lang3.function.FailableLongConsumer` v0 @kind object) @signature `Lorg/apache/commons/lang3/function/FailableLongConsumer;.andThen:(Lorg/apache/commons/lang3/function/FailableLongConsumer;)Lorg/apache/commons/lang3/function/FailableLongConsumer;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
