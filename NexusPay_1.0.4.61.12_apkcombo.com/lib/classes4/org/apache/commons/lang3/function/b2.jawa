record `org.apache.commons.lang3.function.b2` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC extends `org.apache.commons.lang3.function.FailablePredicate` @kind interface {
}
global `org.apache.commons.lang3.function.b2` `@@org.apache.commons.lang3.function.b2.a` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/function/b2;.<clinit>:()V` @AccessFlag STATIC_SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.function.b2` v0 @kind this) @signature `Lorg/apache/commons/lang3/function/b2;.<init>:()V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `org.apache.commons.lang3.function.FailablePredicate` `and`(`org.apache.commons.lang3.function.b2` v0 @kind this, `org.apache.commons.lang3.function.FailablePredicate` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/b2;.and:(Lorg/apache/commons/lang3/function/FailablePredicate;)Lorg/apache/commons/lang3/function/FailablePredicate;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `org.apache.commons.lang3.function.FailablePredicate` `negate`(`org.apache.commons.lang3.function.b2` v1 @kind this) @signature `Lorg/apache/commons/lang3/function/b2;.negate:()Lorg/apache/commons/lang3/function/FailablePredicate;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `org.apache.commons.lang3.function.FailablePredicate` `or`(`org.apache.commons.lang3.function.b2` v0 @kind this, `org.apache.commons.lang3.function.FailablePredicate` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/b2;.or:(Lorg/apache/commons/lang3/function/FailablePredicate;)Lorg/apache/commons/lang3/function/FailablePredicate;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `boolean` `test`(`org.apache.commons.lang3.function.b2` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/b2;.test:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {

  # return;
}
