record `org.apache.commons.lang3.function.FailableDoubleConsumer` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `org.apache.commons.lang3.function.FailableDoubleConsumer` `@@org.apache.commons.lang3.function.FailableDoubleConsumer.NOP` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/function/FailableDoubleConsumer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `accept`(`double` v0 ) @signature `Lorg/apache/commons/lang3/function/FailableDoubleConsumer;.accept:(D)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableDoubleConsumer` `andThen`(`org.apache.commons.lang3.function.FailableDoubleConsumer` v0 @kind object) @signature `Lorg/apache/commons/lang3/function/FailableDoubleConsumer;.andThen:(Lorg/apache/commons/lang3/function/FailableDoubleConsumer;)Lorg/apache/commons/lang3/function/FailableDoubleConsumer;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
