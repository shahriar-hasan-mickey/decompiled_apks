record `org.apache.commons.lang3.function.k0` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC extends `org.apache.commons.lang3.function.FailableDoublePredicate` @kind interface {
}
global `org.apache.commons.lang3.function.k0` `@@org.apache.commons.lang3.function.k0.a` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/function/k0;.<clinit>:()V` @AccessFlag STATIC_SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.function.k0` v0 @kind this) @signature `Lorg/apache/commons/lang3/function/k0;.<init>:()V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableDoublePredicate` `and`(`org.apache.commons.lang3.function.k0` v0 @kind this, `org.apache.commons.lang3.function.FailableDoublePredicate` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/k0;.and:(Lorg/apache/commons/lang3/function/FailableDoublePredicate;)Lorg/apache/commons/lang3/function/FailableDoublePredicate;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableDoublePredicate` `negate`(`org.apache.commons.lang3.function.k0` v1 @kind this) @signature `Lorg/apache/commons/lang3/function/k0;.negate:()Lorg/apache/commons/lang3/function/FailableDoublePredicate;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableDoublePredicate` `or`(`org.apache.commons.lang3.function.k0` v0 @kind this, `org.apache.commons.lang3.function.FailableDoublePredicate` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/k0;.or:(Lorg/apache/commons/lang3/function/FailableDoublePredicate;)Lorg/apache/commons/lang3/function/FailableDoublePredicate;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `boolean` `test`(`org.apache.commons.lang3.function.k0` v0 @kind this, `double` v1 ) @signature `Lorg/apache/commons/lang3/function/k0;.test:(D)Z` @AccessFlag PUBLIC_FINAL {

  # return;
}
