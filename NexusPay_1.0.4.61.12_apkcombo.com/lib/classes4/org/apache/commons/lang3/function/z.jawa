record `org.apache.commons.lang3.function.z` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC extends `org.apache.commons.lang3.function.FailableBiPredicate` @kind interface {
}
global `org.apache.commons.lang3.function.z` `@@org.apache.commons.lang3.function.z.a` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/function/z;.<clinit>:()V` @AccessFlag STATIC_SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.function.z` v0 @kind this) @signature `Lorg/apache/commons/lang3/function/z;.<init>:()V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableBiPredicate` `and`(`org.apache.commons.lang3.function.z` v0 @kind this, `org.apache.commons.lang3.function.FailableBiPredicate` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/z;.and:(Lorg/apache/commons/lang3/function/FailableBiPredicate;)Lorg/apache/commons/lang3/function/FailableBiPredicate;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableBiPredicate` `negate`(`org.apache.commons.lang3.function.z` v1 @kind this) @signature `Lorg/apache/commons/lang3/function/z;.negate:()Lorg/apache/commons/lang3/function/FailableBiPredicate;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableBiPredicate` `or`(`org.apache.commons.lang3.function.z` v0 @kind this, `org.apache.commons.lang3.function.FailableBiPredicate` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/z;.or:(Lorg/apache/commons/lang3/function/FailableBiPredicate;)Lorg/apache/commons/lang3/function/FailableBiPredicate;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `boolean` `test`(`org.apache.commons.lang3.function.z` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/apache/commons/lang3/function/z;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {

  # return;
}
