record `org.apache.commons.lang3.function.FailableIntUnaryOperator` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `org.apache.commons.lang3.function.FailableIntUnaryOperator` `@@org.apache.commons.lang3.function.FailableIntUnaryOperator.NOP` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/function/FailableIntUnaryOperator;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableIntUnaryOperator` `andThen`(`org.apache.commons.lang3.function.FailableIntUnaryOperator` v0 @kind object) @signature `Lorg/apache/commons/lang3/function/FailableIntUnaryOperator;.andThen:(Lorg/apache/commons/lang3/function/FailableIntUnaryOperator;)Lorg/apache/commons/lang3/function/FailableIntUnaryOperator;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `applyAsInt`(`int` v0 ) @signature `Lorg/apache/commons/lang3/function/FailableIntUnaryOperator;.applyAsInt:(I)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableIntUnaryOperator` `compose`(`org.apache.commons.lang3.function.FailableIntUnaryOperator` v0 @kind object) @signature `Lorg/apache/commons/lang3/function/FailableIntUnaryOperator;.compose:(Lorg/apache/commons/lang3/function/FailableIntUnaryOperator;)Lorg/apache/commons/lang3/function/FailableIntUnaryOperator;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
