record `org.apache.commons.lang3.function.FailableIntPredicate` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `org.apache.commons.lang3.function.FailableIntPredicate` `@@org.apache.commons.lang3.function.FailableIntPredicate.FALSE` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.apache.commons.lang3.function.FailableIntPredicate` `@@org.apache.commons.lang3.function.FailableIntPredicate.TRUE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/function/FailableIntPredicate;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableIntPredicate` `and`(`org.apache.commons.lang3.function.FailableIntPredicate` v0 @kind object) @signature `Lorg/apache/commons/lang3/function/FailableIntPredicate;.and:(Lorg/apache/commons/lang3/function/FailableIntPredicate;)Lorg/apache/commons/lang3/function/FailableIntPredicate;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableIntPredicate` `negate`() @signature `Lorg/apache/commons/lang3/function/FailableIntPredicate;.negate:()Lorg/apache/commons/lang3/function/FailableIntPredicate;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableIntPredicate` `or`(`org.apache.commons.lang3.function.FailableIntPredicate` v0 @kind object) @signature `Lorg/apache/commons/lang3/function/FailableIntPredicate;.or:(Lorg/apache/commons/lang3/function/FailableIntPredicate;)Lorg/apache/commons/lang3/function/FailableIntPredicate;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `test`(`int` v0 ) @signature `Lorg/apache/commons/lang3/function/FailableIntPredicate;.test:(I)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
