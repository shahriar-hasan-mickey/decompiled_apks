record `org.apache.commons.lang3.function.FailableDoubleUnaryOperator` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `org.apache.commons.lang3.function.FailableDoubleUnaryOperator` `@@org.apache.commons.lang3.function.FailableDoubleUnaryOperator.NOP` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/function/FailableDoubleUnaryOperator;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableDoubleUnaryOperator` `andThen`(`org.apache.commons.lang3.function.FailableDoubleUnaryOperator` v0 @kind object) @signature `Lorg/apache/commons/lang3/function/FailableDoubleUnaryOperator;.andThen:(Lorg/apache/commons/lang3/function/FailableDoubleUnaryOperator;)Lorg/apache/commons/lang3/function/FailableDoubleUnaryOperator;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `double` `applyAsDouble`(`double` v0 ) @signature `Lorg/apache/commons/lang3/function/FailableDoubleUnaryOperator;.applyAsDouble:(D)D` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableDoubleUnaryOperator` `compose`(`org.apache.commons.lang3.function.FailableDoubleUnaryOperator` v0 @kind object) @signature `Lorg/apache/commons/lang3/function/FailableDoubleUnaryOperator;.compose:(Lorg/apache/commons/lang3/function/FailableDoubleUnaryOperator;)Lorg/apache/commons/lang3/function/FailableDoubleUnaryOperator;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
