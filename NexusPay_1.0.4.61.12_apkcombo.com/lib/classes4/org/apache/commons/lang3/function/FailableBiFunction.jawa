record `org.apache.commons.lang3.function.FailableBiFunction` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `org.apache.commons.lang3.function.FailableBiFunction` `@@org.apache.commons.lang3.function.FailableBiFunction.NOP` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/function/FailableBiFunction;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableBiFunction` `andThen`(`org.apache.commons.lang3.function.FailableFunction` v0 @kind object) @signature `Lorg/apache/commons/lang3/function/FailableBiFunction;.andThen:(Lorg/apache/commons/lang3/function/FailableFunction;)Lorg/apache/commons/lang3/function/FailableBiFunction;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `apply`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/FailableBiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
