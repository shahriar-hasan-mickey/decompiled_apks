record `org.apache.commons.lang3.function.FailableIntConsumer` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `org.apache.commons.lang3.function.FailableIntConsumer` `@@org.apache.commons.lang3.function.FailableIntConsumer.NOP` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/function/FailableIntConsumer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `accept`(`int` v0 ) @signature `Lorg/apache/commons/lang3/function/FailableIntConsumer;.accept:(I)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableIntConsumer` `andThen`(`org.apache.commons.lang3.function.FailableIntConsumer` v0 @kind object) @signature `Lorg/apache/commons/lang3/function/FailableIntConsumer;.andThen:(Lorg/apache/commons/lang3/function/FailableIntConsumer;)Lorg/apache/commons/lang3/function/FailableIntConsumer;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
