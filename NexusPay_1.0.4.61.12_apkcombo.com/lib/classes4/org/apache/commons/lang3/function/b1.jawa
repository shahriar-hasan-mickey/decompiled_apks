record `org.apache.commons.lang3.function.b1` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC extends `org.apache.commons.lang3.function.FailableIntPredicate` @kind interface {
}
global `org.apache.commons.lang3.function.b1` `@@org.apache.commons.lang3.function.b1.a` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/function/b1;.<clinit>:()V` @AccessFlag STATIC_SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.function.b1` v0 @kind this) @signature `Lorg/apache/commons/lang3/function/b1;.<init>:()V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableIntPredicate` `and`(`org.apache.commons.lang3.function.b1` v0 @kind this, `org.apache.commons.lang3.function.FailableIntPredicate` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/b1;.and:(Lorg/apache/commons/lang3/function/FailableIntPredicate;)Lorg/apache/commons/lang3/function/FailableIntPredicate;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableIntPredicate` `negate`(`org.apache.commons.lang3.function.b1` v1 @kind this) @signature `Lorg/apache/commons/lang3/function/b1;.negate:()Lorg/apache/commons/lang3/function/FailableIntPredicate;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableIntPredicate` `or`(`org.apache.commons.lang3.function.b1` v0 @kind this, `org.apache.commons.lang3.function.FailableIntPredicate` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/b1;.or:(Lorg/apache/commons/lang3/function/FailableIntPredicate;)Lorg/apache/commons/lang3/function/FailableIntPredicate;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `boolean` `test`(`org.apache.commons.lang3.function.b1` v0 @kind this, `int` v1 ) @signature `Lorg/apache/commons/lang3/function/b1;.test:(I)Z` @AccessFlag PUBLIC_FINAL {

  # return;
}
