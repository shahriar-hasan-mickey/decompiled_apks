record `org.apache.commons.lang3.function.u0` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC extends `org.apache.commons.lang3.function.FailableIntConsumer` @kind interface {
  `org.apache.commons.lang3.function.FailableIntConsumer` `org.apache.commons.lang3.function.u0.a` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
  `org.apache.commons.lang3.function.FailableIntConsumer` `org.apache.commons.lang3.function.u0.b` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`org.apache.commons.lang3.function.u0` v0 @kind this, `org.apache.commons.lang3.function.FailableIntConsumer` v1 @kind object, `org.apache.commons.lang3.function.FailableIntConsumer` v2 @kind object) @signature `Lorg/apache/commons/lang3/function/u0;.<init>:(Lorg/apache/commons/lang3/function/FailableIntConsumer;Lorg/apache/commons/lang3/function/FailableIntConsumer;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `void` `accept`(`org.apache.commons.lang3.function.u0` v2 @kind this, `int` v3 ) @signature `Lorg/apache/commons/lang3/function/u0;.accept:(I)V` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableIntConsumer` `andThen`(`org.apache.commons.lang3.function.u0` v0 @kind this, `org.apache.commons.lang3.function.FailableIntConsumer` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/u0;.andThen:(Lorg/apache/commons/lang3/function/FailableIntConsumer;)Lorg/apache/commons/lang3/function/FailableIntConsumer;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
