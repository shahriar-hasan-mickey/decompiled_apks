record `org.apache.commons.lang3.function.FailableBiConsumer` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `org.apache.commons.lang3.function.FailableBiConsumer` `@@org.apache.commons.lang3.function.FailableBiConsumer.NOP` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/function/FailableBiConsumer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `accept`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/FailableBiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableBiConsumer` `andThen`(`org.apache.commons.lang3.function.FailableBiConsumer` v0 @kind object) @signature `Lorg/apache/commons/lang3/function/FailableBiConsumer;.andThen:(Lorg/apache/commons/lang3/function/FailableBiConsumer;)Lorg/apache/commons/lang3/function/FailableBiConsumer;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
