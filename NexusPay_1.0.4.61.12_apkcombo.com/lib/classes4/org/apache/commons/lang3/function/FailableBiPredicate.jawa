record `org.apache.commons.lang3.function.FailableBiPredicate` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `org.apache.commons.lang3.function.FailableBiPredicate` `@@org.apache.commons.lang3.function.FailableBiPredicate.FALSE` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.apache.commons.lang3.function.FailableBiPredicate` `@@org.apache.commons.lang3.function.FailableBiPredicate.TRUE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/function/FailableBiPredicate;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableBiPredicate` `and`(`org.apache.commons.lang3.function.FailableBiPredicate` v0 @kind object) @signature `Lorg/apache/commons/lang3/function/FailableBiPredicate;.and:(Lorg/apache/commons/lang3/function/FailableBiPredicate;)Lorg/apache/commons/lang3/function/FailableBiPredicate;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableBiPredicate` `negate`() @signature `Lorg/apache/commons/lang3/function/FailableBiPredicate;.negate:()Lorg/apache/commons/lang3/function/FailableBiPredicate;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.apache.commons.lang3.function.FailableBiPredicate` `or`(`org.apache.commons.lang3.function.FailableBiPredicate` v0 @kind object) @signature `Lorg/apache/commons/lang3/function/FailableBiPredicate;.or:(Lorg/apache/commons/lang3/function/FailableBiPredicate;)Lorg/apache/commons/lang3/function/FailableBiPredicate;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `test`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lorg/apache/commons/lang3/function/FailableBiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
