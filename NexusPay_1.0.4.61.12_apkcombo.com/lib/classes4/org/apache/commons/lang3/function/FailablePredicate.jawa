record `org.apache.commons.lang3.function.FailablePredicate` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `org.apache.commons.lang3.function.FailablePredicate` `@@org.apache.commons.lang3.function.FailablePredicate.FALSE` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.apache.commons.lang3.function.FailablePredicate` `@@org.apache.commons.lang3.function.FailablePredicate.TRUE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/function/FailablePredicate;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `org.apache.commons.lang3.function.FailablePredicate` `and`(`org.apache.commons.lang3.function.FailablePredicate` v0 @kind object) @signature `Lorg/apache/commons/lang3/function/FailablePredicate;.and:(Lorg/apache/commons/lang3/function/FailablePredicate;)Lorg/apache/commons/lang3/function/FailablePredicate;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.apache.commons.lang3.function.FailablePredicate` `negate`() @signature `Lorg/apache/commons/lang3/function/FailablePredicate;.negate:()Lorg/apache/commons/lang3/function/FailablePredicate;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.apache.commons.lang3.function.FailablePredicate` `or`(`org.apache.commons.lang3.function.FailablePredicate` v0 @kind object) @signature `Lorg/apache/commons/lang3/function/FailablePredicate;.or:(Lorg/apache/commons/lang3/function/FailablePredicate;)Lorg/apache/commons/lang3/function/FailablePredicate;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `test`(`java.lang.Object` v0 @kind object) @signature `Lorg/apache/commons/lang3/function/FailablePredicate;.test:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
