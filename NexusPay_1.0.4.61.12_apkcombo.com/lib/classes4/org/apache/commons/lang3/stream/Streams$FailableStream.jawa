record `org.apache.commons.lang3.stream.Streams$FailableStream` @kind class @AccessFlag PUBLIC {
  `java.util.stream.Stream` `org.apache.commons.lang3.stream.Streams$FailableStream.a` @AccessFlag PRIVATE;
  `boolean` `org.apache.commons.lang3.stream.Streams$FailableStream.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.apache.commons.lang3.stream.Streams$FailableStream` v0 @kind this, `java.util.stream.Stream` v1 @kind object) @signature `Lorg/apache/commons/lang3/stream/Streams$FailableStream;.<init>:(Ljava/util/stream/Stream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `allMatch`(`org.apache.commons.lang3.stream.Streams$FailableStream` v1 @kind this, `org.apache.commons.lang3.function.FailablePredicate` v2 @kind object) @signature `Lorg/apache/commons/lang3/stream/Streams$FailableStream;.allMatch:(Lorg/apache/commons/lang3/function/FailablePredicate;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `anyMatch`(`org.apache.commons.lang3.stream.Streams$FailableStream` v1 @kind this, `org.apache.commons.lang3.function.FailablePredicate` v2 @kind object) @signature `Lorg/apache/commons/lang3/stream/Streams$FailableStream;.anyMatch:(Lorg/apache/commons/lang3/function/FailablePredicate;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `assertNotTerminated`(`org.apache.commons.lang3.stream.Streams$FailableStream` v2 @kind this) @signature `Lorg/apache/commons/lang3/stream/Streams$FailableStream;.assertNotTerminated:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `java.lang.Object` `collect`(`org.apache.commons.lang3.stream.Streams$FailableStream` v1 @kind this, `java.util.function.Supplier` v2 @kind object, `java.util.function.BiConsumer` v3 @kind object, `java.util.function.BiConsumer` v4 @kind object) @signature `Lorg/apache/commons/lang3/stream/Streams$FailableStream;.collect:(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `collect`(`org.apache.commons.lang3.stream.Streams$FailableStream` v1 @kind this, `java.util.stream.Collector` v2 @kind object) @signature `Lorg/apache/commons/lang3/stream/Streams$FailableStream;.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.apache.commons.lang3.stream.Streams$FailableStream` `filter`(`org.apache.commons.lang3.stream.Streams$FailableStream` v1 @kind this, `org.apache.commons.lang3.function.FailablePredicate` v2 @kind object) @signature `Lorg/apache/commons/lang3/stream/Streams$FailableStream;.filter:(Lorg/apache/commons/lang3/function/FailablePredicate;)Lorg/apache/commons/lang3/stream/Streams$FailableStream;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `forEach`(`org.apache.commons.lang3.stream.Streams$FailableStream` v1 @kind this, `org.apache.commons.lang3.function.FailableConsumer` v2 @kind object) @signature `Lorg/apache/commons/lang3/stream/Streams$FailableStream;.forEach:(Lorg/apache/commons/lang3/function/FailableConsumer;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `makeTerminated`(`org.apache.commons.lang3.stream.Streams$FailableStream` v1 @kind this) @signature `Lorg/apache/commons/lang3/stream/Streams$FailableStream;.makeTerminated:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `org.apache.commons.lang3.stream.Streams$FailableStream` `map`(`org.apache.commons.lang3.stream.Streams$FailableStream` v2 @kind this, `org.apache.commons.lang3.function.FailableFunction` v3 @kind object) @signature `Lorg/apache/commons/lang3/stream/Streams$FailableStream;.map:(Lorg/apache/commons/lang3/function/FailableFunction;)Lorg/apache/commons/lang3/stream/Streams$FailableStream;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `reduce`(`org.apache.commons.lang3.stream.Streams$FailableStream` v1 @kind this, `java.lang.Object` v2 @kind object, `java.util.function.BinaryOperator` v3 @kind object) @signature `Lorg/apache/commons/lang3/stream/Streams$FailableStream;.reduce:(Ljava/lang/Object;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.stream.Stream` `stream`(`org.apache.commons.lang3.stream.Streams$FailableStream` v1 @kind this) @signature `Lorg/apache/commons/lang3/stream/Streams$FailableStream;.stream:()Ljava/util/stream/Stream;` @AccessFlag PUBLIC {

  # return;
}
