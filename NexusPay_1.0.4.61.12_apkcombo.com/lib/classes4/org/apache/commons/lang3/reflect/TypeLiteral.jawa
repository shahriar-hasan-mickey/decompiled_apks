record `org.apache.commons.lang3.reflect.TypeLiteral` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.apache.commons.lang3.reflect.Typed` @kind interface {
  `java.lang.String` `org.apache.commons.lang3.reflect.TypeLiteral.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `org.apache.commons.lang3.reflect.TypeLiteral.value` @AccessFlag PUBLIC_FINAL;
}
global `java.lang.reflect.TypeVariable` `@@org.apache.commons.lang3.reflect.TypeLiteral.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/reflect/TypeLiteral;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.reflect.TypeLiteral` v7 @kind this) @signature `Lorg/apache/commons/lang3/reflect/TypeLiteral;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `boolean` `equals`(`org.apache.commons.lang3.reflect.TypeLiteral` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeLiteral;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `java.lang.reflect.Type` `getType`(`org.apache.commons.lang3.reflect.TypeLiteral` v1 @kind this) @signature `Lorg/apache/commons/lang3/reflect/TypeLiteral;.getType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`org.apache.commons.lang3.reflect.TypeLiteral` v1 @kind this) @signature `Lorg/apache/commons/lang3/reflect/TypeLiteral;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`org.apache.commons.lang3.reflect.TypeLiteral` v1 @kind this) @signature `Lorg/apache/commons/lang3/reflect/TypeLiteral;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
