record `org.apache.commons.lang3.tuple.Pair` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Map$Entry` @kind interface, `java.lang.Comparable` @kind interface, `java.io.Serializable` @kind interface {
}
global `org.apache.commons.lang3.tuple.Pair`[] `@@org.apache.commons.lang3.tuple.Pair.EMPTY_ARRAY` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@org.apache.commons.lang3.tuple.Pair.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/tuple/Pair;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.tuple.Pair` v0 @kind this) @signature `Lorg/apache/commons/lang3/tuple/Pair;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.apache.commons.lang3.tuple.Pair`[] `emptyArray`() @signature `Lorg/apache/commons/lang3/tuple/Pair;.emptyArray:()[Lorg/apache/commons/lang3/tuple/Pair;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.tuple.Pair` `of`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lorg/apache/commons/lang3/tuple/Pair;.of:(Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/commons/lang3/tuple/Pair;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.tuple.Pair` `of`(`java.util.Map$Entry` v0 @kind object) @signature `Lorg/apache/commons/lang3/tuple/Pair;.of:(Ljava/util/Map$Entry;)Lorg/apache/commons/lang3/tuple/Pair;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `compareTo`(`org.apache.commons.lang3.tuple.Pair` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/apache/commons/lang3/tuple/Pair;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `int` `compareTo`(`org.apache.commons.lang3.tuple.Pair` v3 @kind this, `org.apache.commons.lang3.tuple.Pair` v4 @kind object) @signature `Lorg/apache/commons/lang3/tuple/Pair;.compareTo:(Lorg/apache/commons/lang3/tuple/Pair;)I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `equals`(`org.apache.commons.lang3.tuple.Pair` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/apache/commons/lang3/tuple/Pair;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `getKey`(`org.apache.commons.lang3.tuple.Pair` v1 @kind this) @signature `Lorg/apache/commons/lang3/tuple/Pair;.getKey:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `java.lang.Object` `getLeft`() @signature `Lorg/apache/commons/lang3/tuple/Pair;.getLeft:()Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `getRight`() @signature `Lorg/apache/commons/lang3/tuple/Pair;.getRight:()Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `getValue`(`org.apache.commons.lang3.tuple.Pair` v1 @kind this) @signature `Lorg/apache/commons/lang3/tuple/Pair;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`org.apache.commons.lang3.tuple.Pair` v2 @kind this) @signature `Lorg/apache/commons/lang3/tuple/Pair;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`org.apache.commons.lang3.tuple.Pair` v2 @kind this) @signature `Lorg/apache/commons/lang3/tuple/Pair;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`org.apache.commons.lang3.tuple.Pair` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/apache/commons/lang3/tuple/Pair;.toString:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
