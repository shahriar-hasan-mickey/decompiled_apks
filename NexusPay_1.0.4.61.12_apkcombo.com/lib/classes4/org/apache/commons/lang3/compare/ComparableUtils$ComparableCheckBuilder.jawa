record `org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder` @kind class @AccessFlag PUBLIC {
  `java.lang.Comparable` `org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder` v0 @kind this, `java.lang.Comparable` v1 @kind object) @signature `Lorg/apache/commons/lang3/compare/ComparableUtils$ComparableCheckBuilder;.<init>:(Ljava/lang/Comparable;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder` v0 @kind this, `java.lang.Comparable` v1 @kind object, `org.apache.commons.lang3.compare.ComparableUtils$a` v2 @kind object) @signature `Lorg/apache/commons/lang3/compare/ComparableUtils$ComparableCheckBuilder;.<init>:(Ljava/lang/Comparable;Lorg/apache/commons/lang3/compare/ComparableUtils$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `a`(`org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder` v0 @kind this, `java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lorg/apache/commons/lang3/compare/ComparableUtils$ComparableCheckBuilder;.a:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `b`(`org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder` v0 @kind this, `java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lorg/apache/commons/lang3/compare/ComparableUtils$ComparableCheckBuilder;.b:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `between`(`org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder` v1 @kind this, `java.lang.Comparable` v2 @kind object, `java.lang.Comparable` v3 @kind object) @signature `Lorg/apache/commons/lang3/compare/ComparableUtils$ComparableCheckBuilder;.between:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `betweenExclusive`(`org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder` v1 @kind this, `java.lang.Comparable` v2 @kind object, `java.lang.Comparable` v3 @kind object) @signature `Lorg/apache/commons/lang3/compare/ComparableUtils$ComparableCheckBuilder;.betweenExclusive:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `equalTo`(`org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder` v1 @kind this, `java.lang.Comparable` v2 @kind object) @signature `Lorg/apache/commons/lang3/compare/ComparableUtils$ComparableCheckBuilder;.equalTo:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `greaterThan`(`org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder` v1 @kind this, `java.lang.Comparable` v2 @kind object) @signature `Lorg/apache/commons/lang3/compare/ComparableUtils$ComparableCheckBuilder;.greaterThan:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `greaterThanOrEqualTo`(`org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder` v1 @kind this, `java.lang.Comparable` v2 @kind object) @signature `Lorg/apache/commons/lang3/compare/ComparableUtils$ComparableCheckBuilder;.greaterThanOrEqualTo:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `lessThan`(`org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder` v1 @kind this, `java.lang.Comparable` v2 @kind object) @signature `Lorg/apache/commons/lang3/compare/ComparableUtils$ComparableCheckBuilder;.lessThan:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `lessThanOrEqualTo`(`org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder` v1 @kind this, `java.lang.Comparable` v2 @kind object) @signature `Lorg/apache/commons/lang3/compare/ComparableUtils$ComparableCheckBuilder;.lessThanOrEqualTo:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC {

  # return;
}
