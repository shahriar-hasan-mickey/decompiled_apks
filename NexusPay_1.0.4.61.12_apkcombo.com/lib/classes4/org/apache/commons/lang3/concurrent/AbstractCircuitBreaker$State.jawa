record `org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State` @kind class @AccessFlag PUBLIC_ABSTRACT_ENUM extends `java.lang.Enum` @kind class {
}
global `org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State`[] `@@org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State` `@@org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State.CLOSED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State` `@@org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State.OPEN` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$a` v3 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;.<init>:(Ljava/lang/String;ILorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;.valueOf:(Ljava/lang/String;)Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State`[] `values`() @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;.values:()[Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State` `oppositeState`() @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;.oppositeState:()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
