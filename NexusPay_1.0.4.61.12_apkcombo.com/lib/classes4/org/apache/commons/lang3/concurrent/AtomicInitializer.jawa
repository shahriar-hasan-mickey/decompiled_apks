record `org.apache.commons.lang3.concurrent.AtomicInitializer` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.apache.commons.lang3.concurrent.ConcurrentInitializer` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `org.apache.commons.lang3.concurrent.AtomicInitializer.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.AtomicInitializer` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/AtomicInitializer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.lang.Object` `get`(`org.apache.commons.lang3.concurrent.AtomicInitializer` v3 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/AtomicInitializer;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `initialize`() @signature `Lorg/apache/commons/lang3/concurrent/AtomicInitializer;.initialize:()Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
