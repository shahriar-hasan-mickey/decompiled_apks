record `org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor` @kind class @AccessFlag PUBLIC {
  `java.lang.Object` `org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor.b` @AccessFlag PRIVATE_FINAL;
  `java.util.function.Supplier` `org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor.c` @AccessFlag PRIVATE_FINAL;
  `java.util.function.Supplier` `org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.util.function.Supplier` v4 @kind object, `java.util.function.Supplier` v5 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/locks/LockingVisitors$LockVisitor;.<init>:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/Supplier;Ljava/util/function/Supplier;)V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `void` `acceptReadLocked`(`org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor` v1 @kind this, `org.apache.commons.lang3.function.FailableConsumer` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/locks/LockingVisitors$LockVisitor;.acceptReadLocked:(Lorg/apache/commons/lang3/function/FailableConsumer;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `acceptWriteLocked`(`org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor` v1 @kind this, `org.apache.commons.lang3.function.FailableConsumer` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/locks/LockingVisitors$LockVisitor;.acceptWriteLocked:(Lorg/apache/commons/lang3/function/FailableConsumer;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `applyReadLocked`(`org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor` v1 @kind this, `org.apache.commons.lang3.function.FailableFunction` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/locks/LockingVisitors$LockVisitor;.applyReadLocked:(Lorg/apache/commons/lang3/function/FailableFunction;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `applyWriteLocked`(`org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor` v1 @kind this, `org.apache.commons.lang3.function.FailableFunction` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/locks/LockingVisitors$LockVisitor;.applyWriteLocked:(Lorg/apache/commons/lang3/function/FailableFunction;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `getLock`(`org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/locks/LockingVisitors$LockVisitor;.getLock:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `getObject`(`org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/locks/LockingVisitors$LockVisitor;.getObject:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `lockAcceptUnlock`(`org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor` v1 @kind this, `java.util.function.Supplier` v2 @kind object, `org.apache.commons.lang3.function.FailableConsumer` v3 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/locks/LockingVisitors$LockVisitor;.lockAcceptUnlock:(Ljava/util/function/Supplier;Lorg/apache/commons/lang3/function/FailableConsumer;)V` @AccessFlag PROTECTED {

  # return;
}
procedure `java.lang.Object` `lockApplyUnlock`(`org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor` v1 @kind this, `java.util.function.Supplier` v2 @kind object, `org.apache.commons.lang3.function.FailableFunction` v3 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/locks/LockingVisitors$LockVisitor;.lockApplyUnlock:(Ljava/util/function/Supplier;Lorg/apache/commons/lang3/function/FailableFunction;)Ljava/lang/Object;` @AccessFlag PROTECTED {

  # return;
}
