record `org.apache.commons.lang3.concurrent.AbstractCircuitBreaker` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.apache.commons.lang3.concurrent.CircuitBreaker` @kind interface {
  `java.beans.PropertyChangeSupport` `org.apache.commons.lang3.concurrent.AbstractCircuitBreaker.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `org.apache.commons.lang3.concurrent.AbstractCircuitBreaker.state` @AccessFlag PROTECTED_FINAL;
}
global `java.lang.String` `@@org.apache.commons.lang3.concurrent.AbstractCircuitBreaker.PROPERTY_NAME` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.AbstractCircuitBreaker` v2 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `isOpen`(`org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State` v1 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker;.isOpen:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `void` `addChangeListener`(`org.apache.commons.lang3.concurrent.AbstractCircuitBreaker` v1 @kind this, `java.beans.PropertyChangeListener` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker;.addChangeListener:(Ljava/beans/PropertyChangeListener;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `changeState`(`org.apache.commons.lang3.concurrent.AbstractCircuitBreaker` v3 @kind this, `org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State` v4 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker;.changeState:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V` @AccessFlag PROTECTED {

  # return;
}
procedure `boolean` `checkState`() @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker;.checkState:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `close`(`org.apache.commons.lang3.concurrent.AbstractCircuitBreaker` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker;.close:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `incrementAndCheckState`(`java.lang.Object` v0 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker;.incrementAndCheckState:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isClosed`(`org.apache.commons.lang3.concurrent.AbstractCircuitBreaker` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker;.isClosed:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isOpen`(`org.apache.commons.lang3.concurrent.AbstractCircuitBreaker` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker;.isOpen:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `open`(`org.apache.commons.lang3.concurrent.AbstractCircuitBreaker` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker;.open:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `removeChangeListener`(`org.apache.commons.lang3.concurrent.AbstractCircuitBreaker` v1 @kind this, `java.beans.PropertyChangeListener` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker;.removeChangeListener:(Ljava/beans/PropertyChangeListener;)V` @AccessFlag PUBLIC {

  # return;
}
