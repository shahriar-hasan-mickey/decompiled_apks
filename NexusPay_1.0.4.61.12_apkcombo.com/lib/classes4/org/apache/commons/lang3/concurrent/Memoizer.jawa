record `org.apache.commons.lang3.concurrent.Memoizer` @kind class @AccessFlag PUBLIC extends `org.apache.commons.lang3.concurrent.Computable` @kind interface {
  `java.util.concurrent.ConcurrentMap` `org.apache.commons.lang3.concurrent.Memoizer.a` @AccessFlag PRIVATE_FINAL;
  `org.apache.commons.lang3.concurrent.Computable` `org.apache.commons.lang3.concurrent.Memoizer.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.apache.commons.lang3.concurrent.Memoizer.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.Memoizer` v1 @kind this, `org.apache.commons.lang3.concurrent.Computable` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/Memoizer;.<init>:(Lorg/apache/commons/lang3/concurrent/Computable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.Memoizer` v1 @kind this, `org.apache.commons.lang3.concurrent.Computable` v2 @kind object, `boolean` v3 ) @signature `Lorg/apache/commons/lang3/concurrent/Memoizer;.<init>:(Lorg/apache/commons/lang3/concurrent/Computable;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.lang.RuntimeException` `b`(`org.apache.commons.lang3.concurrent.Memoizer` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/Memoizer;.b:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.Object` `a`(`org.apache.commons.lang3.concurrent.Memoizer` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/Memoizer;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `java.lang.Object` `compute`(`org.apache.commons.lang3.concurrent.Memoizer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/Memoizer;.compute:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
