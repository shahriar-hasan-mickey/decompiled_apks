record `org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker` @kind class @AccessFlag PUBLIC extends `org.apache.commons.lang3.concurrent.AbstractCircuitBreaker` @kind class {
  `long` `org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker.b` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicLong` `org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker` v3 @kind this, `long` v4 ) @signature `Lorg/apache/commons/lang3/concurrent/ThresholdCircuitBreaker;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `checkState`(`org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/ThresholdCircuitBreaker;.checkState:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `close`(`org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker` v3 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/ThresholdCircuitBreaker;.close:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `long` `getThreshold`(`org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker` v2 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/ThresholdCircuitBreaker;.getThreshold:()J` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `incrementAndCheckState`(`org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker` v5 @kind this, `java.lang.Long` v6 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/ThresholdCircuitBreaker;.incrementAndCheckState:(Ljava/lang/Long;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `incrementAndCheckState`(`org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/ThresholdCircuitBreaker;.incrementAndCheckState:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
