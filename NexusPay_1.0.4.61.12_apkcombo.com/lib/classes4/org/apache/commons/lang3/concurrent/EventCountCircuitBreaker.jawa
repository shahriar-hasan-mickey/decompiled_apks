record `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` @kind class @AccessFlag PUBLIC extends `org.apache.commons.lang3.concurrent.AbstractCircuitBreaker` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.b` @AccessFlag PRIVATE_FINAL;
  `int` `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.c` @AccessFlag PRIVATE_FINAL;
  `long` `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.d` @AccessFlag PRIVATE_FINAL;
  `int` `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.e` @AccessFlag PRIVATE_FINAL;
  `long` `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.f` @AccessFlag PRIVATE_FINAL;
}
global `java.util.Map` `@@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v6 @kind this, `int` v7 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v9 @kind this, `int` v10 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object, `int` v14 ) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.<init>:(IJLjava/util/concurrent/TimeUnit;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v5 @kind this, `int` v6 , `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `int` v10 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.<init>:(IJLjava/util/concurrent/TimeUnit;IJLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `a`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v4 @kind this, `org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State` v5 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.a:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `java.util.Map` `b`() @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.b:()Ljava/util/Map;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$b` `d`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v0 @kind this, `int` v1 , `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$b` v2 @kind object, `org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State` v3 @kind object, `long` v4 ) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.d:(ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$b;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$b;` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `e`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v8 @kind this, `int` v9 ) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.e:(I)Z` @AccessFlag PRIVATE {

  # return;
}
procedure `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$c` `f`(`org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State` v1 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.f:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$c;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `g`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v1 @kind this, `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$b` v2 @kind object, `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$b` v3 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.g:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$b;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$b;)Z` @AccessFlag PRIVATE {

  # return;
}
procedure `long` `c`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v2 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.c:()J` @AccessFlag  {

  # return;
}
procedure `boolean` `checkState`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.checkState:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `close`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v5 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.close:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `long` `getClosingInterval`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v2 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.getClosingInterval:()J` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getClosingThreshold`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.getClosingThreshold:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `long` `getOpeningInterval`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v2 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.getOpeningInterval:()J` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getOpeningThreshold`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.getOpeningThreshold:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `incrementAndCheckState`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.incrementAndCheckState:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `incrementAndCheckState`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v0 @kind this, `java.lang.Integer` v1 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.incrementAndCheckState:(Ljava/lang/Integer;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `incrementAndCheckState`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.incrementAndCheckState:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `void` `open`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v5 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;.open:()V` @AccessFlag PUBLIC {

  # return;
}
