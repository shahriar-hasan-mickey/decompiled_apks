record `org.bouncycastle.crypto.params.KDFDoublePipelineIterationParameters` @kind class @AccessFlag PUBLIC_FINAL extends `org.bouncycastle.crypto.DerivationParameters` @kind interface {
  `byte`[] `org.bouncycastle.crypto.params.KDFDoublePipelineIterationParameters.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.bouncycastle.crypto.params.KDFDoublePipelineIterationParameters.b` @AccessFlag PRIVATE_FINAL;
  `int` `org.bouncycastle.crypto.params.KDFDoublePipelineIterationParameters.c` @AccessFlag PRIVATE_FINAL;
  `byte`[] `org.bouncycastle.crypto.params.KDFDoublePipelineIterationParameters.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.bouncycastle.crypto.params.KDFDoublePipelineIterationParameters` v0 @kind this, `byte`[] v1 @kind object, `byte`[] v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lorg/bouncycastle/crypto/params/KDFDoublePipelineIterationParameters;.<init>:([B[BIZ)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `org.bouncycastle.crypto.params.KDFDoublePipelineIterationParameters` `createWithCounter`(`byte`[] v2 @kind object, `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/bouncycastle/crypto/params/KDFDoublePipelineIterationParameters;.createWithCounter:([B[BI)Lorg/bouncycastle/crypto/params/KDFDoublePipelineIterationParameters;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.bouncycastle.crypto.params.KDFDoublePipelineIterationParameters` `createWithoutCounter`(`byte`[] v3 @kind object, `byte`[] v4 @kind object) @signature `Lorg/bouncycastle/crypto/params/KDFDoublePipelineIterationParameters;.createWithoutCounter:([B[B)Lorg/bouncycastle/crypto/params/KDFDoublePipelineIterationParameters;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `getFixedInputData`(`org.bouncycastle.crypto.params.KDFDoublePipelineIterationParameters` v1 @kind this) @signature `Lorg/bouncycastle/crypto/params/KDFDoublePipelineIterationParameters;.getFixedInputData:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getKI`(`org.bouncycastle.crypto.params.KDFDoublePipelineIterationParameters` v1 @kind this) @signature `Lorg/bouncycastle/crypto/params/KDFDoublePipelineIterationParameters;.getKI:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getR`(`org.bouncycastle.crypto.params.KDFDoublePipelineIterationParameters` v1 @kind this) @signature `Lorg/bouncycastle/crypto/params/KDFDoublePipelineIterationParameters;.getR:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `useCounter`(`org.bouncycastle.crypto.params.KDFDoublePipelineIterationParameters` v1 @kind this) @signature `Lorg/bouncycastle/crypto/params/KDFDoublePipelineIterationParameters;.useCounter:()Z` @AccessFlag PUBLIC {

  # return;
}
