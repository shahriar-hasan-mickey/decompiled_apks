record `org.bouncycastle.crypto.params.IESParameters` @kind class @AccessFlag PUBLIC extends `org.bouncycastle.crypto.CipherParameters` @kind interface {
  `byte`[] `org.bouncycastle.crypto.params.IESParameters.a` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.params.IESParameters.b` @AccessFlag PRIVATE;
  `int` `org.bouncycastle.crypto.params.IESParameters.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.bouncycastle.crypto.params.IESParameters` v0 @kind this, `byte`[] v1 @kind object, `byte`[] v2 @kind object, `int` v3 ) @signature `Lorg/bouncycastle/crypto/params/IESParameters;.<init>:([B[BI)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `byte`[] `getDerivationV`(`org.bouncycastle.crypto.params.IESParameters` v1 @kind this) @signature `Lorg/bouncycastle/crypto/params/IESParameters;.getDerivationV:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getEncodingV`(`org.bouncycastle.crypto.params.IESParameters` v1 @kind this) @signature `Lorg/bouncycastle/crypto/params/IESParameters;.getEncodingV:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getMacKeySize`(`org.bouncycastle.crypto.params.IESParameters` v1 @kind this) @signature `Lorg/bouncycastle/crypto/params/IESParameters;.getMacKeySize:()I` @AccessFlag PUBLIC {

  # return;
}
