record `org.bouncycastle.crypto.tls.TlsMac` @kind class @AccessFlag PUBLIC {
  `org.bouncycastle.crypto.tls.TlsContext` `org.bouncycastle.crypto.tls.TlsMac.context` @AccessFlag PROTECTED;
  `int` `org.bouncycastle.crypto.tls.TlsMac.digestBlockSize` @AccessFlag PROTECTED;
  `int` `org.bouncycastle.crypto.tls.TlsMac.digestOverhead` @AccessFlag PROTECTED;
  `org.bouncycastle.crypto.Mac` `org.bouncycastle.crypto.tls.TlsMac.mac` @AccessFlag PROTECTED;
  `int` `org.bouncycastle.crypto.tls.TlsMac.macLength` @AccessFlag PROTECTED;
  `byte`[] `org.bouncycastle.crypto.tls.TlsMac.secret` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`org.bouncycastle.crypto.tls.TlsMac` v1 @kind this, `org.bouncycastle.crypto.tls.TlsContext` v2 @kind object, `org.bouncycastle.crypto.Digest` v3 @kind object, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lorg/bouncycastle/crypto/tls/TlsMac;.<init>:(Lorg/bouncycastle/crypto/tls/TlsContext;Lorg/bouncycastle/crypto/Digest;[BII)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `byte`[] `calculateMac`(`org.bouncycastle.crypto.tls.TlsMac` v5 @kind this, `long` v6 , `short` v8 , `byte`[] v9 @kind object, `int` v10 , `int` v11 ) @signature `Lorg/bouncycastle/crypto/tls/TlsMac;.calculateMac:(JS[BII)[B` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `calculateMacConstantTime`(`org.bouncycastle.crypto.tls.TlsMac` v0 @kind this, `long` v1 , `short` v3 , `byte`[] v4 @kind object, `int` v5 , `int` v6 , `int` v7 , `byte`[] v8 @kind object) @signature `Lorg/bouncycastle/crypto/tls/TlsMac;.calculateMacConstantTime:(JS[BIII[B)[B` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getDigestBlockCount`(`org.bouncycastle.crypto.tls.TlsMac` v1 @kind this, `int` v2 ) @signature `Lorg/bouncycastle/crypto/tls/TlsMac;.getDigestBlockCount:(I)I` @AccessFlag PROTECTED {

  # return;
}
procedure `byte`[] `getMACSecret`(`org.bouncycastle.crypto.tls.TlsMac` v1 @kind this) @signature `Lorg/bouncycastle/crypto/tls/TlsMac;.getMACSecret:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getSize`(`org.bouncycastle.crypto.tls.TlsMac` v1 @kind this) @signature `Lorg/bouncycastle/crypto/tls/TlsMac;.getSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `truncate`(`org.bouncycastle.crypto.tls.TlsMac` v2 @kind this, `byte`[] v3 @kind object) @signature `Lorg/bouncycastle/crypto/tls/TlsMac;.truncate:([B)[B` @AccessFlag PROTECTED {

  # return;
}
