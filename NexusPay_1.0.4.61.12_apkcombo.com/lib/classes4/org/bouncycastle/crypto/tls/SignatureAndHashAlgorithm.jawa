record `org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm` @kind class @AccessFlag PUBLIC {
  `short` `org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm.hash` @AccessFlag PROTECTED;
  `short` `org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm.signature` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm` v1 @kind this, `short` v2 , `short` v3 ) @signature `Lorg/bouncycastle/crypto/tls/SignatureAndHashAlgorithm;.<init>:(SS)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm` `parse`(`java.io.InputStream` v2 @kind object) @signature `Lorg/bouncycastle/crypto/tls/SignatureAndHashAlgorithm;.parse:(Ljava/io/InputStream;)Lorg/bouncycastle/crypto/tls/SignatureAndHashAlgorithm;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `encode`(`org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm` v1 @kind this, `java.io.OutputStream` v2 @kind object) @signature `Lorg/bouncycastle/crypto/tls/SignatureAndHashAlgorithm;.encode:(Ljava/io/OutputStream;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `equals`(`org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lorg/bouncycastle/crypto/tls/SignatureAndHashAlgorithm;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `short` `getHash`(`org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm` v1 @kind this) @signature `Lorg/bouncycastle/crypto/tls/SignatureAndHashAlgorithm;.getHash:()S` @AccessFlag PUBLIC {

  # return;
}
procedure `short` `getSignature`(`org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm` v1 @kind this) @signature `Lorg/bouncycastle/crypto/tls/SignatureAndHashAlgorithm;.getSignature:()S` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm` v2 @kind this) @signature `Lorg/bouncycastle/crypto/tls/SignatureAndHashAlgorithm;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
