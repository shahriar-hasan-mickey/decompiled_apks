record `org.bouncycastle.crypto.tls.AbstractTlsClient` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.bouncycastle.crypto.tls.AbstractTlsPeer` @kind class, `org.bouncycastle.crypto.tls.TlsClient` @kind interface {
  `org.bouncycastle.crypto.tls.TlsCipherFactory` `org.bouncycastle.crypto.tls.AbstractTlsClient.cipherFactory` @AccessFlag PROTECTED;
  `short`[] `org.bouncycastle.crypto.tls.AbstractTlsClient.clientECPointFormats` @AccessFlag PROTECTED;
  `org.bouncycastle.crypto.tls.TlsClientContext` `org.bouncycastle.crypto.tls.AbstractTlsClient.context` @AccessFlag PROTECTED;
  `int`[] `org.bouncycastle.crypto.tls.AbstractTlsClient.namedCurves` @AccessFlag PROTECTED;
  `int` `org.bouncycastle.crypto.tls.AbstractTlsClient.selectedCipherSuite` @AccessFlag PROTECTED;
  `short` `org.bouncycastle.crypto.tls.AbstractTlsClient.selectedCompressionMethod` @AccessFlag PROTECTED;
  `short`[] `org.bouncycastle.crypto.tls.AbstractTlsClient.serverECPointFormats` @AccessFlag PROTECTED;
  `java.util.Vector` `org.bouncycastle.crypto.tls.AbstractTlsClient.supportedSignatureAlgorithms` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v1 @kind this) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v0 @kind this, `org.bouncycastle.crypto.tls.TlsCipherFactory` v1 @kind object) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.<init>:(Lorg/bouncycastle/crypto/tls/TlsCipherFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.util.Hashtable` `getClientExtensions`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v13 @kind this) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.getClientExtensions:()Ljava/util/Hashtable;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.bouncycastle.crypto.tls.ProtocolVersion` `getClientHelloRecordLayerVersion`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v1 @kind this) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.getClientHelloRecordLayerVersion:()Lorg/bouncycastle/crypto/tls/ProtocolVersion;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Vector` `getClientSupplementalData`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v1 @kind this) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.getClientSupplementalData:()Ljava/util/Vector;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.bouncycastle.crypto.tls.ProtocolVersion` `getClientVersion`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v1 @kind this) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.getClientVersion:()Lorg/bouncycastle/crypto/tls/ProtocolVersion;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.bouncycastle.crypto.tls.TlsCompression` `getCompression`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v2 @kind this) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.getCompression:()Lorg/bouncycastle/crypto/tls/TlsCompression;` @AccessFlag PUBLIC {

  # return;
}
procedure `short`[] `getCompressionMethods`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v2 @kind this) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.getCompressionMethods:()[S` @AccessFlag PUBLIC {

  # return;
}
procedure `org.bouncycastle.crypto.tls.ProtocolVersion` `getMinimumVersion`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v1 @kind this) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.getMinimumVersion:()Lorg/bouncycastle/crypto/tls/ProtocolVersion;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.bouncycastle.crypto.tls.TlsSession` `getSessionToResume`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v1 @kind this) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.getSessionToResume:()Lorg/bouncycastle/crypto/tls/TlsSession;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v0 @kind this, `org.bouncycastle.crypto.tls.TlsClientContext` v1 @kind object) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.init:(Lorg/bouncycastle/crypto/tls/TlsClientContext;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `notifyNewSessionTicket`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v0 @kind this, `org.bouncycastle.crypto.tls.NewSessionTicket` v1 @kind object) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.notifyNewSessionTicket:(Lorg/bouncycastle/crypto/tls/NewSessionTicket;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `notifySelectedCipherSuite`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v0 @kind this, `int` v1 ) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.notifySelectedCipherSuite:(I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `notifySelectedCompressionMethod`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v0 @kind this, `short` v1 ) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.notifySelectedCompressionMethod:(S)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `notifyServerVersion`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v1 @kind this, `org.bouncycastle.crypto.tls.ProtocolVersion` v2 @kind object) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.notifyServerVersion:(Lorg/bouncycastle/crypto/tls/ProtocolVersion;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `notifySessionID`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v0 @kind this, `byte`[] v1 @kind object) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.notifySessionID:([B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processServerExtensions`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v2 @kind this, `java.util.Hashtable` v3 @kind object) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.processServerExtensions:(Ljava/util/Hashtable;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processServerSupplementalData`(`org.bouncycastle.crypto.tls.AbstractTlsClient` v1 @kind this, `java.util.Vector` v2 @kind object) @signature `Lorg/bouncycastle/crypto/tls/AbstractTlsClient;.processServerSupplementalData:(Ljava/util/Vector;)V` @AccessFlag PUBLIC {

  # return;
}
