record `org.bouncycastle.crypto.tls.UDPTransport` @kind class @AccessFlag PUBLIC extends `org.bouncycastle.crypto.tls.DatagramTransport` @kind interface {
  `int` `org.bouncycastle.crypto.tls.UDPTransport.receiveLimit` @AccessFlag PROTECTED_FINAL;
  `int` `org.bouncycastle.crypto.tls.UDPTransport.sendLimit` @AccessFlag PROTECTED_FINAL;
  `java.net.DatagramSocket` `org.bouncycastle.crypto.tls.UDPTransport.socket` @AccessFlag PROTECTED_FINAL;
}
global `int` `@@org.bouncycastle.crypto.tls.UDPTransport.MAX_IP_OVERHEAD` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@org.bouncycastle.crypto.tls.UDPTransport.MIN_IP_OVERHEAD` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@org.bouncycastle.crypto.tls.UDPTransport.UDP_OVERHEAD` @AccessFlag PROTECTED_STATIC_FINAL;
procedure `void` `<init>`(`org.bouncycastle.crypto.tls.UDPTransport` v1 @kind this, `java.net.DatagramSocket` v2 @kind object, `int` v3 ) @signature `Lorg/bouncycastle/crypto/tls/UDPTransport;.<init>:(Ljava/net/DatagramSocket;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `close`(`org.bouncycastle.crypto.tls.UDPTransport` v1 @kind this) @signature `Lorg/bouncycastle/crypto/tls/UDPTransport;.close:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getReceiveLimit`(`org.bouncycastle.crypto.tls.UDPTransport` v1 @kind this) @signature `Lorg/bouncycastle/crypto/tls/UDPTransport;.getReceiveLimit:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getSendLimit`(`org.bouncycastle.crypto.tls.UDPTransport` v1 @kind this) @signature `Lorg/bouncycastle/crypto/tls/UDPTransport;.getSendLimit:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `receive`(`org.bouncycastle.crypto.tls.UDPTransport` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 , `int` v5 ) @signature `Lorg/bouncycastle/crypto/tls/UDPTransport;.receive:([BIII)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `send`(`org.bouncycastle.crypto.tls.UDPTransport` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/bouncycastle/crypto/tls/UDPTransport;.send:([BII)V` @AccessFlag PUBLIC {

  # return;
}
