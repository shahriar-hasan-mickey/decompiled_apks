record `org.bouncycastle.crypto.Signer` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
procedure `byte`[] `generateSignature`() @signature `Lorg/bouncycastle/crypto/Signer;.generateSignature:()[B` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `init`(`boolean` v0 , `org.bouncycastle.crypto.CipherParameters` v1 @kind object) @signature `Lorg/bouncycastle/crypto/Signer;.init:(ZLorg/bouncycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `reset`() @signature `Lorg/bouncycastle/crypto/Signer;.reset:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `update`(`byte` v0 ) @signature `Lorg/bouncycastle/crypto/Signer;.update:(B)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `update`(`byte`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lorg/bouncycastle/crypto/Signer;.update:([BII)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `verifySignature`(`byte`[] v0 @kind object) @signature `Lorg/bouncycastle/crypto/Signer;.verifySignature:([B)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
