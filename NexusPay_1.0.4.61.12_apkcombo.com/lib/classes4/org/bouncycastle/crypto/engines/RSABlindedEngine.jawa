record `org.bouncycastle.crypto.engines.RSABlindedEngine` @kind class @AccessFlag PUBLIC extends `org.bouncycastle.crypto.AsymmetricBlockCipher` @kind interface {
  `org.bouncycastle.crypto.engines.a` `org.bouncycastle.crypto.engines.RSABlindedEngine.a` @AccessFlag PRIVATE;
  `org.bouncycastle.crypto.params.RSAKeyParameters` `org.bouncycastle.crypto.engines.RSABlindedEngine.b` @AccessFlag PRIVATE;
  `java.security.SecureRandom` `org.bouncycastle.crypto.engines.RSABlindedEngine.c` @AccessFlag PRIVATE;
}
global `java.math.BigInteger` `@@org.bouncycastle.crypto.engines.RSABlindedEngine.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/bouncycastle/crypto/engines/RSABlindedEngine;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.bouncycastle.crypto.engines.RSABlindedEngine` v1 @kind this) @signature `Lorg/bouncycastle/crypto/engines/RSABlindedEngine;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `getInputBlockSize`(`org.bouncycastle.crypto.engines.RSABlindedEngine` v1 @kind this) @signature `Lorg/bouncycastle/crypto/engines/RSABlindedEngine;.getInputBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getOutputBlockSize`(`org.bouncycastle.crypto.engines.RSABlindedEngine` v1 @kind this) @signature `Lorg/bouncycastle/crypto/engines/RSABlindedEngine;.getOutputBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.bouncycastle.crypto.engines.RSABlindedEngine` v1 @kind this, `boolean` v2 , `org.bouncycastle.crypto.CipherParameters` v3 @kind object) @signature `Lorg/bouncycastle/crypto/engines/RSABlindedEngine;.init:(ZLorg/bouncycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `processBlock`(`org.bouncycastle.crypto.engines.RSABlindedEngine` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lorg/bouncycastle/crypto/engines/RSABlindedEngine;.processBlock:([BII)[B` @AccessFlag PUBLIC {

  # return;
}
