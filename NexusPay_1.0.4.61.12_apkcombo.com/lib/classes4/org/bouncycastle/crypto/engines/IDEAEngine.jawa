record `org.bouncycastle.crypto.engines.IDEAEngine` @kind class @AccessFlag PUBLIC extends `org.bouncycastle.crypto.BlockCipher` @kind interface {
  `int`[] `org.bouncycastle.crypto.engines.IDEAEngine.a` @AccessFlag PRIVATE;
}
global `int` `@@org.bouncycastle.crypto.engines.IDEAEngine.BLOCK_SIZE` @AccessFlag PROTECTED_STATIC_FINAL;
procedure `void` `<init>`(`org.bouncycastle.crypto.engines.IDEAEngine` v1 @kind this) @signature `Lorg/bouncycastle/crypto/engines/IDEAEngine;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `b`(`org.bouncycastle.crypto.engines.IDEAEngine` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/bouncycastle/crypto/engines/IDEAEngine;.b:([BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int`[] `c`(`org.bouncycastle.crypto.engines.IDEAEngine` v6 @kind this, `byte`[] v7 @kind object) @signature `Lorg/bouncycastle/crypto/engines/IDEAEngine;.c:([B)[I` @AccessFlag PRIVATE {

  # return;
}
procedure `int`[] `d`(`org.bouncycastle.crypto.engines.IDEAEngine` v0 @kind this, `boolean` v1 , `byte`[] v2 @kind object) @signature `Lorg/bouncycastle/crypto/engines/IDEAEngine;.d:(Z[B)[I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `e`(`org.bouncycastle.crypto.engines.IDEAEngine` v8 @kind this, `int`[] v9 @kind object, `byte`[] v10 @kind object, `int` v11 , `byte`[] v12 @kind object, `int` v13 ) @signature `Lorg/bouncycastle/crypto/engines/IDEAEngine;.e:([I[BI[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `int`[] `f`(`org.bouncycastle.crypto.engines.IDEAEngine` v8 @kind this, `int`[] v9 @kind object) @signature `Lorg/bouncycastle/crypto/engines/IDEAEngine;.f:([I)[I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `g`(`org.bouncycastle.crypto.engines.IDEAEngine` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lorg/bouncycastle/crypto/engines/IDEAEngine;.g:(II)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `h`(`org.bouncycastle.crypto.engines.IDEAEngine` v6 @kind this, `int` v7 ) @signature `Lorg/bouncycastle/crypto/engines/IDEAEngine;.h:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `i`(`org.bouncycastle.crypto.engines.IDEAEngine` v1 @kind this, `int` v2 , `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/bouncycastle/crypto/engines/IDEAEngine;.i:(I[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `a`(`org.bouncycastle.crypto.engines.IDEAEngine` v1 @kind this, `int` v2 ) @signature `Lorg/bouncycastle/crypto/engines/IDEAEngine;.a:(I)I` @AccessFlag  {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.bouncycastle.crypto.engines.IDEAEngine` v1 @kind this) @signature `Lorg/bouncycastle/crypto/engines/IDEAEngine;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.bouncycastle.crypto.engines.IDEAEngine` v1 @kind this) @signature `Lorg/bouncycastle/crypto/engines/IDEAEngine;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.bouncycastle.crypto.engines.IDEAEngine` v2 @kind this, `boolean` v3 , `org.bouncycastle.crypto.CipherParameters` v4 @kind object) @signature `Lorg/bouncycastle/crypto/engines/IDEAEngine;.init:(ZLorg/bouncycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.bouncycastle.crypto.engines.IDEAEngine` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/bouncycastle/crypto/engines/IDEAEngine;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.bouncycastle.crypto.engines.IDEAEngine` v0 @kind this) @signature `Lorg/bouncycastle/crypto/engines/IDEAEngine;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
