record `org.bouncycastle.crypto.EphemeralKeyPair` @kind class @AccessFlag PUBLIC {
  `org.bouncycastle.crypto.AsymmetricCipherKeyPair` `org.bouncycastle.crypto.EphemeralKeyPair.a` @AccessFlag PRIVATE;
  `org.bouncycastle.crypto.KeyEncoder` `org.bouncycastle.crypto.EphemeralKeyPair.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.bouncycastle.crypto.EphemeralKeyPair` v0 @kind this, `org.bouncycastle.crypto.AsymmetricCipherKeyPair` v1 @kind object, `org.bouncycastle.crypto.KeyEncoder` v2 @kind object) @signature `Lorg/bouncycastle/crypto/EphemeralKeyPair;.<init>:(Lorg/bouncycastle/crypto/AsymmetricCipherKeyPair;Lorg/bouncycastle/crypto/KeyEncoder;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `byte`[] `getEncodedPublicKey`(`org.bouncycastle.crypto.EphemeralKeyPair` v2 @kind this) @signature `Lorg/bouncycastle/crypto/EphemeralKeyPair;.getEncodedPublicKey:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `org.bouncycastle.crypto.AsymmetricCipherKeyPair` `getKeyPair`(`org.bouncycastle.crypto.EphemeralKeyPair` v1 @kind this) @signature `Lorg/bouncycastle/crypto/EphemeralKeyPair;.getKeyPair:()Lorg/bouncycastle/crypto/AsymmetricCipherKeyPair;` @AccessFlag PUBLIC {

  # return;
}
