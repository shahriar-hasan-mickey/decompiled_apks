record `org.bouncycastle.crypto.signers.a` @kind class @AccessFlag  extends `org.bouncycastle.crypto.signers.DSAKCalculator` @kind interface {
  `java.math.BigInteger` `org.bouncycastle.crypto.signers.a.a` @AccessFlag PRIVATE;
  `java.security.SecureRandom` `org.bouncycastle.crypto.signers.a.b` @AccessFlag PRIVATE;
}
global `java.math.BigInteger` `@@org.bouncycastle.crypto.signers.a.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/bouncycastle/crypto/signers/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.bouncycastle.crypto.signers.a` v0 @kind this) @signature `Lorg/bouncycastle/crypto/signers/a;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `init`(`org.bouncycastle.crypto.signers.a` v0 @kind this, `java.math.BigInteger` v1 @kind object, `java.math.BigInteger` v2 @kind object, `byte`[] v3 @kind object) @signature `Lorg/bouncycastle/crypto/signers/a;.init:(Ljava/math/BigInteger;Ljava/math/BigInteger;[B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.bouncycastle.crypto.signers.a` v0 @kind this, `java.math.BigInteger` v1 @kind object, `java.security.SecureRandom` v2 @kind object) @signature `Lorg/bouncycastle/crypto/signers/a;.init:(Ljava/math/BigInteger;Ljava/security/SecureRandom;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isDeterministic`(`org.bouncycastle.crypto.signers.a` v1 @kind this) @signature `Lorg/bouncycastle/crypto/signers/a;.isDeterministic:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.math.BigInteger` `nextK`(`org.bouncycastle.crypto.signers.a` v3 @kind this) @signature `Lorg/bouncycastle/crypto/signers/a;.nextK:()Ljava/math/BigInteger;` @AccessFlag PUBLIC {

  # return;
}
