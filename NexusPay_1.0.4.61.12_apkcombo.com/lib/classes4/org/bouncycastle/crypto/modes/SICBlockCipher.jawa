record `org.bouncycastle.crypto.modes.SICBlockCipher` @kind class @AccessFlag PUBLIC extends `org.bouncycastle.crypto.BlockCipher` @kind interface {
  `org.bouncycastle.crypto.BlockCipher` `org.bouncycastle.crypto.modes.SICBlockCipher.a` @AccessFlag PRIVATE_FINAL;
  `int` `org.bouncycastle.crypto.modes.SICBlockCipher.b` @AccessFlag PRIVATE_FINAL;
  `byte`[] `org.bouncycastle.crypto.modes.SICBlockCipher.c` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.modes.SICBlockCipher.d` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.modes.SICBlockCipher.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.bouncycastle.crypto.modes.SICBlockCipher` v1 @kind this, `org.bouncycastle.crypto.BlockCipher` v2 @kind object) @signature `Lorg/bouncycastle/crypto/modes/SICBlockCipher;.<init>:(Lorg/bouncycastle/crypto/BlockCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.bouncycastle.crypto.modes.SICBlockCipher` v2 @kind this) @signature `Lorg/bouncycastle/crypto/modes/SICBlockCipher;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.bouncycastle.crypto.modes.SICBlockCipher` v1 @kind this) @signature `Lorg/bouncycastle/crypto/modes/SICBlockCipher;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.bouncycastle.crypto.BlockCipher` `getUnderlyingCipher`(`org.bouncycastle.crypto.modes.SICBlockCipher` v1 @kind this) @signature `Lorg/bouncycastle/crypto/modes/SICBlockCipher;.getUnderlyingCipher:()Lorg/bouncycastle/crypto/BlockCipher;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.bouncycastle.crypto.modes.SICBlockCipher` v3 @kind this, `boolean` v4 , `org.bouncycastle.crypto.CipherParameters` v5 @kind object) @signature `Lorg/bouncycastle/crypto/modes/SICBlockCipher;.init:(ZLorg/bouncycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.bouncycastle.crypto.modes.SICBlockCipher` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `byte`[] v7 @kind object, `int` v8 ) @signature `Lorg/bouncycastle/crypto/modes/SICBlockCipher;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.bouncycastle.crypto.modes.SICBlockCipher` v4 @kind this) @signature `Lorg/bouncycastle/crypto/modes/SICBlockCipher;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
