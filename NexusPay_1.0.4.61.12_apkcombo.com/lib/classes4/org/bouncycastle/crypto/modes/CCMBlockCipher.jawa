record `org.bouncycastle.crypto.modes.CCMBlockCipher` @kind class @AccessFlag PUBLIC extends `org.bouncycastle.crypto.modes.AEADBlockCipher` @kind interface {
  `org.bouncycastle.crypto.BlockCipher` `org.bouncycastle.crypto.modes.CCMBlockCipher.a` @AccessFlag PRIVATE;
  `int` `org.bouncycastle.crypto.modes.CCMBlockCipher.b` @AccessFlag PRIVATE;
  `boolean` `org.bouncycastle.crypto.modes.CCMBlockCipher.c` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.modes.CCMBlockCipher.d` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.modes.CCMBlockCipher.e` @AccessFlag PRIVATE;
  `int` `org.bouncycastle.crypto.modes.CCMBlockCipher.f` @AccessFlag PRIVATE;
  `org.bouncycastle.crypto.CipherParameters` `org.bouncycastle.crypto.modes.CCMBlockCipher.g` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.modes.CCMBlockCipher.h` @AccessFlag PRIVATE;
  `org.bouncycastle.crypto.modes.CCMBlockCipher$a` `org.bouncycastle.crypto.modes.CCMBlockCipher.i` @AccessFlag PRIVATE;
  `org.bouncycastle.crypto.modes.CCMBlockCipher$a` `org.bouncycastle.crypto.modes.CCMBlockCipher.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v1 @kind this, `org.bouncycastle.crypto.BlockCipher` v2 @kind object) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.<init>:(Lorg/bouncycastle/crypto/BlockCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `a`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v10 @kind this, `byte`[] v11 @kind object, `int` v12 , `int` v13 , `byte`[] v14 @kind object) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.a:([BII[B)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `b`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v2 @kind this) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.b:()I` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `c`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v1 @kind this) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.c:()Z` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `doFinal`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v7 @kind this, `byte`[] v8 @kind object, `int` v9 ) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.doFinal:([BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v2 @kind this) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getMac`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v4 @kind this) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.getMac:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getOutputSize`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v1 @kind this, `int` v2 ) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.getOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.bouncycastle.crypto.BlockCipher` `getUnderlyingCipher`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v1 @kind this) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.getUnderlyingCipher:()Lorg/bouncycastle/crypto/BlockCipher;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getUpdateOutputSize`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v0 @kind this, `int` v1 ) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.getUpdateOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v1 @kind this, `boolean` v2 , `org.bouncycastle.crypto.CipherParameters` v3 @kind object) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.init:(ZLorg/bouncycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processAADByte`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v1 @kind this, `byte` v2 ) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.processAADByte:(B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processAADBytes`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.processAADBytes:([BII)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processByte`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v0 @kind this, `byte` v1 , `byte`[] v2 @kind object, `int` v3 ) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.processByte:(B[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBytes`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.processBytes:([BII[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processPacket`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v8 @kind this, `byte`[] v9 @kind object, `int` v10 , `int` v11 , `byte`[] v12 @kind object, `int` v13 ) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.processPacket:([BII[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `processPacket`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.processPacket:([BII)[B` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.bouncycastle.crypto.modes.CCMBlockCipher` v1 @kind this) @signature `Lorg/bouncycastle/crypto/modes/CCMBlockCipher;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
