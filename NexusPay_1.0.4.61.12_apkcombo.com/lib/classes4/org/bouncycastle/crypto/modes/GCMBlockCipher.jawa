record `org.bouncycastle.crypto.modes.GCMBlockCipher` @kind class @AccessFlag PUBLIC extends `org.bouncycastle.crypto.modes.AEADBlockCipher` @kind interface {
  `org.bouncycastle.crypto.BlockCipher` `org.bouncycastle.crypto.modes.GCMBlockCipher.a` @AccessFlag PRIVATE;
  `org.bouncycastle.crypto.modes.gcm.GCMMultiplier` `org.bouncycastle.crypto.modes.GCMBlockCipher.b` @AccessFlag PRIVATE;
  `org.bouncycastle.crypto.modes.gcm.GCMExponentiator` `org.bouncycastle.crypto.modes.GCMBlockCipher.c` @AccessFlag PRIVATE;
  `boolean` `org.bouncycastle.crypto.modes.GCMBlockCipher.d` @AccessFlag PRIVATE;
  `int` `org.bouncycastle.crypto.modes.GCMBlockCipher.e` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.modes.GCMBlockCipher.f` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.modes.GCMBlockCipher.g` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.modes.GCMBlockCipher.h` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.modes.GCMBlockCipher.i` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.modes.GCMBlockCipher.j` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.modes.GCMBlockCipher.k` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.modes.GCMBlockCipher.l` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.modes.GCMBlockCipher.m` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.modes.GCMBlockCipher.n` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.modes.GCMBlockCipher.o` @AccessFlag PRIVATE;
  `int` `org.bouncycastle.crypto.modes.GCMBlockCipher.p` @AccessFlag PRIVATE;
  `long` `org.bouncycastle.crypto.modes.GCMBlockCipher.q` @AccessFlag PRIVATE;
  `byte`[] `org.bouncycastle.crypto.modes.GCMBlockCipher.r` @AccessFlag PRIVATE;
  `int` `org.bouncycastle.crypto.modes.GCMBlockCipher.s` @AccessFlag PRIVATE;
  `long` `org.bouncycastle.crypto.modes.GCMBlockCipher.t` @AccessFlag PRIVATE;
  `long` `org.bouncycastle.crypto.modes.GCMBlockCipher.u` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v1 @kind this, `org.bouncycastle.crypto.BlockCipher` v2 @kind object) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.<init>:(Lorg/bouncycastle/crypto/BlockCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v2 @kind this, `org.bouncycastle.crypto.BlockCipher` v3 @kind object, `org.bouncycastle.crypto.modes.gcm.GCMMultiplier` v4 @kind object) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.<init>:(Lorg/bouncycastle/crypto/BlockCipher;Lorg/bouncycastle/crypto/modes/gcm/GCMMultiplier;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `a`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.a:([B[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `b`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 , `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.b:([BII[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `c`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.c:([B[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `d`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v0 @kind this, `byte`[] v1 @kind object, `byte`[] v2 @kind object) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.d:([B[B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `e`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v0 @kind this, `byte`[] v1 @kind object, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.e:([B[BII)V` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `f`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v4 @kind this) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.f:()[B` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `g`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v8 @kind this) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.g:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `h`(`byte`[] v9 @kind object, `byte`[] v10 @kind object) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.h:([B[B)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `i`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v5 @kind this, `byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.i:([BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `j`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v4 @kind this, `boolean` v5 ) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.j:(Z)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `k`(`byte`[] v4 @kind object) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.k:([B)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `l`(`byte`[] v3 @kind object, `byte`[] v4 @kind object) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.l:([B[B)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `m`(`byte`[] v2 @kind object, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.m:([B[BII)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `doFinal`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v13 @kind this, `byte`[] v14 @kind object, `int` v15 ) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.doFinal:([BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v2 @kind this) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getMac`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v1 @kind this) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.getMac:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getOutputSize`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v1 @kind this, `int` v2 ) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.getOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.bouncycastle.crypto.BlockCipher` `getUnderlyingCipher`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v1 @kind this) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.getUnderlyingCipher:()Lorg/bouncycastle/crypto/BlockCipher;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getUpdateOutputSize`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v1 @kind this, `int` v2 ) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.getUpdateOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v6 @kind this, `boolean` v7 , `org.bouncycastle.crypto.CipherParameters` v8 @kind object) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.init:(ZLorg/bouncycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processAADByte`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v4 @kind this, `byte` v5 ) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.processAADByte:(B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processAADBytes`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.processAADBytes:([BII)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processByte`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v2 @kind this, `byte` v3 , `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.processByte:(B[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBytes`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `int` v8 , `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.processBytes:([BII[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.bouncycastle.crypto.modes.GCMBlockCipher` v1 @kind this) @signature `Lorg/bouncycastle/crypto/modes/GCMBlockCipher;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
