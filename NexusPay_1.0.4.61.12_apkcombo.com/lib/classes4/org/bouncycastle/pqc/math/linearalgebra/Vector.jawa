record `org.bouncycastle.pqc.math.linearalgebra.Vector` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `int` `org.bouncycastle.pqc.math.linearalgebra.Vector.length` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`org.bouncycastle.pqc.math.linearalgebra.Vector` v0 @kind this) @signature `Lorg/bouncycastle/pqc/math/linearalgebra/Vector;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.bouncycastle.pqc.math.linearalgebra.Vector` `add`(`org.bouncycastle.pqc.math.linearalgebra.Vector` v0 @kind object) @signature `Lorg/bouncycastle/pqc/math/linearalgebra/Vector;.add:(Lorg/bouncycastle/pqc/math/linearalgebra/Vector;)Lorg/bouncycastle/pqc/math/linearalgebra/Vector;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `equals`(`java.lang.Object` v0 @kind object) @signature `Lorg/bouncycastle/pqc/math/linearalgebra/Vector;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `byte`[] `getEncoded`() @signature `Lorg/bouncycastle/pqc/math/linearalgebra/Vector;.getEncoded:()[B` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getLength`(`org.bouncycastle.pqc.math.linearalgebra.Vector` v1 @kind this) @signature `Lorg/bouncycastle/pqc/math/linearalgebra/Vector;.getLength:()I` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `int` `hashCode`() @signature `Lorg/bouncycastle/pqc/math/linearalgebra/Vector;.hashCode:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isZero`() @signature `Lorg/bouncycastle/pqc/math/linearalgebra/Vector;.isZero:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.bouncycastle.pqc.math.linearalgebra.Vector` `multiply`(`org.bouncycastle.pqc.math.linearalgebra.Permutation` v0 @kind object) @signature `Lorg/bouncycastle/pqc/math/linearalgebra/Vector;.multiply:(Lorg/bouncycastle/pqc/math/linearalgebra/Permutation;)Lorg/bouncycastle/pqc/math/linearalgebra/Vector;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `toString`() @signature `Lorg/bouncycastle/pqc/math/linearalgebra/Vector;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
