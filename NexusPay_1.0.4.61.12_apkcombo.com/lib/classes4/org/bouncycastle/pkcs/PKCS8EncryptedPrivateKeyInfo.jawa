record `org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo` @kind class @AccessFlag PUBLIC {
  `org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo` `org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo` v0 @kind this, `org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo` v1 @kind object) @signature `Lorg/bouncycastle/pkcs/PKCS8EncryptedPrivateKeyInfo;.<init>:(Lorg/bouncycastle/asn1/pkcs/EncryptedPrivateKeyInfo;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo` v0 @kind this, `byte`[] v1 @kind object) @signature `Lorg/bouncycastle/pkcs/PKCS8EncryptedPrivateKeyInfo;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo` `a`(`byte`[] v3 @kind object) @signature `Lorg/bouncycastle/pkcs/PKCS8EncryptedPrivateKeyInfo;.a:([B)Lorg/bouncycastle/asn1/pkcs/EncryptedPrivateKeyInfo;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `org.bouncycastle.asn1.pkcs.PrivateKeyInfo` `decryptPrivateKeyInfo`(`org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo` v3 @kind this, `org.bouncycastle.operator.InputDecryptorProvider` v4 @kind object) @signature `Lorg/bouncycastle/pkcs/PKCS8EncryptedPrivateKeyInfo;.decryptPrivateKeyInfo:(Lorg/bouncycastle/operator/InputDecryptorProvider;)Lorg/bouncycastle/asn1/pkcs/PrivateKeyInfo;` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getEncoded`(`org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo` v1 @kind this) @signature `Lorg/bouncycastle/pkcs/PKCS8EncryptedPrivateKeyInfo;.getEncoded:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo` `toASN1Structure`(`org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo` v1 @kind this) @signature `Lorg/bouncycastle/pkcs/PKCS8EncryptedPrivateKeyInfo;.toASN1Structure:()Lorg/bouncycastle/asn1/pkcs/EncryptedPrivateKeyInfo;` @AccessFlag PUBLIC {

  # return;
}
