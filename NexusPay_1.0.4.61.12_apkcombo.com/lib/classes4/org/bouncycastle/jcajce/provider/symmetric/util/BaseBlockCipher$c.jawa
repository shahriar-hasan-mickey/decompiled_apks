record `org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$c` @kind interface @AccessFlag ABSTRACT_INTERFACE {
}
procedure `boolean` `a`() @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$c;.a:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `b`(`byte`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$c;.b:([BII)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `doFinal`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$c;.doFinal:([BI)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getOutputSize`(`int` v0 ) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$c;.getOutputSize:(I)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.bouncycastle.crypto.BlockCipher` `getUnderlyingCipher`() @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$c;.getUnderlyingCipher:()Lorg/bouncycastle/crypto/BlockCipher;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getUpdateOutputSize`(`int` v0 ) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$c;.getUpdateOutputSize:(I)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `init`(`boolean` v0 , `org.bouncycastle.crypto.CipherParameters` v1 @kind object) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$c;.init:(ZLorg/bouncycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `processBytes`(`byte`[] v0 @kind object, `int` v1 , `int` v2 , `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$c;.processBytes:([BII[BI)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
