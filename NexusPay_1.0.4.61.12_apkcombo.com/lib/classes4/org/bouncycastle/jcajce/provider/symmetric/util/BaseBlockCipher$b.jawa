record `org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$b` @kind class @AccessFlag  extends `org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$c` @kind interface {
  `org.bouncycastle.crypto.BufferedBlockCipher` `org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$b.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$b` v1 @kind this, `org.bouncycastle.crypto.BlockCipher` v2 @kind object) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$b;.<init>:(Lorg/bouncycastle/crypto/BlockCipher;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$b` v1 @kind this, `org.bouncycastle.crypto.BlockCipher` v2 @kind object, `org.bouncycastle.crypto.paddings.BlockCipherPadding` v3 @kind object) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$b;.<init>:(Lorg/bouncycastle/crypto/BlockCipher;Lorg/bouncycastle/crypto/paddings/BlockCipherPadding;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$b` v0 @kind this, `org.bouncycastle.crypto.BufferedBlockCipher` v1 @kind object) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$b;.<init>:(Lorg/bouncycastle/crypto/BufferedBlockCipher;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `boolean` `a`(`org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$b` v1 @kind this) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$b;.a:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `b`(`org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$b` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$b;.b:([BII)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `doFinal`(`org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$b` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$b;.doFinal:([BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getOutputSize`(`org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$b` v1 @kind this, `int` v2 ) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$b;.getOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.bouncycastle.crypto.BlockCipher` `getUnderlyingCipher`(`org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$b` v1 @kind this) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$b;.getUnderlyingCipher:()Lorg/bouncycastle/crypto/BlockCipher;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getUpdateOutputSize`(`org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$b` v1 @kind this, `int` v2 ) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$b;.getUpdateOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$b` v1 @kind this, `boolean` v2 , `org.bouncycastle.crypto.CipherParameters` v3 @kind object) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$b;.init:(ZLorg/bouncycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBytes`(`org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher$b` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 , `byte`[] v10 @kind object, `int` v11 ) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseBlockCipher$b;.processBytes:([BII[BI)I` @AccessFlag PUBLIC {

  # return;
}
