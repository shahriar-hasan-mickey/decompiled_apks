record `org.bouncycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory` @kind class @AccessFlag PUBLIC extends `javax.crypto.SecretKeyFactorySpi` @kind class, `org.bouncycastle.jcajce.provider.symmetric.util.PBE` @kind interface {
  `java.lang.String` `org.bouncycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory.algName` @AccessFlag PROTECTED;
  `org.bouncycastle.asn1.ASN1ObjectIdentifier` `org.bouncycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory.algOid` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`org.bouncycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory` v0 @kind this, `java.lang.String` v1 @kind object, `org.bouncycastle.asn1.ASN1ObjectIdentifier` v2 @kind object) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseSecretKeyFactory;.<init>:(Ljava/lang/String;Lorg/bouncycastle/asn1/ASN1ObjectIdentifier;)V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `javax.crypto.SecretKey` `engineGenerateSecret`(`org.bouncycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory` v1 @kind this, `java.security.spec.KeySpec` v2 @kind object) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseSecretKeyFactory;.engineGenerateSecret:(Ljava/security/spec/KeySpec;)Ljavax/crypto/SecretKey;` @AccessFlag PROTECTED {

  # return;
}
procedure `java.security.spec.KeySpec` `engineGetKeySpec`(`org.bouncycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory` v4 @kind this, `javax.crypto.SecretKey` v5 @kind object, `java.lang.Class` v6 @kind object) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseSecretKeyFactory;.engineGetKeySpec:(Ljavax/crypto/SecretKey;Ljava/lang/Class;)Ljava/security/spec/KeySpec;` @AccessFlag PROTECTED {

  # return;
}
procedure `javax.crypto.SecretKey` `engineTranslateKey`(`org.bouncycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory` v2 @kind this, `javax.crypto.SecretKey` v3 @kind object) @signature `Lorg/bouncycastle/jcajce/provider/symmetric/util/BaseSecretKeyFactory;.engineTranslateKey:(Ljavax/crypto/SecretKey;)Ljavax/crypto/SecretKey;` @AccessFlag PROTECTED {

  # return;
}
