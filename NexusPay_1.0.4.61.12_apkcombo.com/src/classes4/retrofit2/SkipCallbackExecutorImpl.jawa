record `retrofit2.SkipCallbackExecutorImpl` @kind class @AccessFlag FINAL extends `retrofit2.SkipCallbackExecutor` @kind interface {
}
global `retrofit2.SkipCallbackExecutor` `@@retrofit2.SkipCallbackExecutorImpl.INSTANCE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/SkipCallbackExecutorImpl;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4986d4.  v0:= new `retrofit2.SkipCallbackExecutorImpl`;
  #L4986d8.  call `<init>`(v0) @signature `Lretrofit2/SkipCallbackExecutorImpl;.<init>:()V` @kind direct;
  #L4986de.  `@@retrofit2.SkipCallbackExecutorImpl.INSTANCE` @type ^`retrofit2.SkipCallbackExecutor` := v0 @kind object;
  #L4986e2.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.SkipCallbackExecutorImpl` v0 @kind this) @signature `Lretrofit2/SkipCallbackExecutorImpl;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4986f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4986fa.  return @kind void;
}
procedure `java.lang.annotation.Annotation`[] `ensurePresent`(`java.lang.annotation.Annotation`[] v4 @kind object) @signature `Lretrofit2/SkipCallbackExecutorImpl;.ensurePresent:([Ljava/lang/annotation/Annotation;)[Ljava/lang/annotation/Annotation;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L498694.  v0:= constclass @type ^`retrofit2.SkipCallbackExecutor` @kind object;
  #L498698.  call temp:= `isAnnotationPresent`(v4, v0) @signature `Lretrofit2/Utils;.isAnnotationPresent:([Ljava/lang/annotation/Annotation;Ljava/lang/Class;)Z` @kind static;
  #L49869e.  v0:= temp;
  #L4986a0.  if v0 == 0 then goto L4986a6;
  #L4986a4.  return v4 @kind object;
  #L4986a6.  v0:= length @variable v4;
  #L4986a8.  v1:= 1I;
  #L4986aa.  v0:= v0 + v1 @kind int;
  #L4986ac.  v0:= new `java.lang.annotation.Annotation`[v0];
  #L4986b0.  v2:= `@@retrofit2.SkipCallbackExecutorImpl.INSTANCE` @type ^`retrofit2.SkipCallbackExecutor` @kind object;
  #L4986b4.  v3:= 0I;
  #L4986b6.  v0[v3]:= v2 @kind object;
  #L4986ba.  v2:= length @variable v4;
  #L4986bc.  call `arraycopy`(v4, v3, v0, v1, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4986c2.  return v0 @kind object;
}
procedure `java.lang.Class` `annotationType`(`retrofit2.SkipCallbackExecutorImpl` v1 @kind this) @signature `Lretrofit2/SkipCallbackExecutorImpl;.annotationType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L498630.  v0:= constclass @type ^`retrofit2.SkipCallbackExecutor` @kind object;
  #L498634.  return v0 @kind object;
}
procedure `boolean` `equals`(`retrofit2.SkipCallbackExecutorImpl` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lretrofit2/SkipCallbackExecutorImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L498604.  v1:= instanceof @variable v1 @type ^`retrofit2.SkipCallbackExecutor` @kind boolean;
  #L498608.  return v1;
}
procedure `int` `hashCode`(`retrofit2.SkipCallbackExecutorImpl` v1 @kind this) @signature `Lretrofit2/SkipCallbackExecutorImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49861c.  v0:= 0I;
  #L49861e.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit2.SkipCallbackExecutorImpl` v2 @kind this) @signature `Lretrofit2/SkipCallbackExecutorImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L498648.  v0:= new `java.lang.StringBuilder`;
  #L49864c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L498652.  v1:= "@" @kind object;
  #L498656.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49865c.  v1:= constclass @type ^`retrofit2.SkipCallbackExecutor` @kind object;
  #L498660.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L498666.  v1:= temp @kind object;
  #L498668.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49866e.  v1:= "()" @kind object;
  #L498672.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L498678.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49867e.  v0:= temp @kind object;
  #L498680.  return v0 @kind object;
}
