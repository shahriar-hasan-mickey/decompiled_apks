record `retrofit2.Utils$WildcardTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.WildcardType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.Utils$WildcardTypeImpl.lowerBound` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.Utils$WildcardTypeImpl.upperBound` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Utils$WildcardTypeImpl` v5 @kind this, `java.lang.reflect.Type`[] v6 @kind object, `java.lang.reflect.Type`[] v7 @kind object) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L498b24.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L498b28.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L498b2e.  v1:= length @variable v7;
  #L498b30.  v2:= 1I;
  #L498b32.  if v1 > v2 then goto L498baa;
  #L498b36.  v1:= length @variable v6;
  #L498b38.  if v1 != v2 then goto L498b9e;
  #L498b3c.  v1:= length @variable v7;
  #L498b3e.  v3:= 0I;
  #L498b40.  v4:= 0I;
  #L498b42.  if v1 != v2 then goto L498b7c;
  #L498b46.  v1:= v7[v4] @kind object;
  #L498b4a.  if v1 == 0 then goto L498b7a;
  #L498b4e.  v1:= v7[v4] @kind object;
  #L498b52.  call `checkNotPrimitive`(v1) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L498b58.  v6:= v6[v4] @kind object;
  #L498b5c.  if v6 != v0 then goto L498b6e;
  #L498b60.  v6:= v7[v4] @kind object;
  #L498b64.  v5.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L498b68.  v5.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L498b6c.  goto L498b9a;
  #L498b6e.  v6:= new `java.lang.IllegalArgumentException`;
  #L498b72.  call `<init>`(v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L498b78.  throw v6;
  #L498b7a.  throw v3;
  #L498b7c.  v7:= v6[v4] @kind object;
  #L498b80.  if v7 == 0 then goto L498b9c;
  #L498b84.  v7:= v6[v4] @kind object;
  #L498b88.  call `checkNotPrimitive`(v7) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L498b8e.  v5.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v3 @kind object;
  #L498b92.  v6:= v6[v4] @kind object;
  #L498b96.  v5.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L498b9a.  return @kind void;
  #L498b9c.  throw v3;
  #L498b9e.  v6:= new `java.lang.IllegalArgumentException`;
  #L498ba2.  call `<init>`(v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L498ba8.  throw v6;
  #L498baa.  v6:= new `java.lang.IllegalArgumentException`;
  #L498bae.  call `<init>`(v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L498bb4.  throw v6;
}
procedure `boolean` `equals`(`retrofit2.Utils$WildcardTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lretrofit2/Utils$WildcardTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4989dc.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L4989e0.  if v0 == 0 then goto L4989f8;
  #L4989e4.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L4989e8.  call temp:= `equals`(v1, v2) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L4989ee.  v2:= temp;
  #L4989f0.  if v2 == 0 then goto L4989f8;
  #L4989f4.  v2:= 1I;
  #L4989f6.  goto L4989fa;
  #L4989f8.  v2:= 0I;
  #L4989fa.  return v2;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L498ad4.  v0:= v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L498ad8.  if v0 == 0 then goto L498aea;
  #L498adc.  v1:= 1I;
  #L498ade.  v1:= new `java.lang.reflect.Type`[v1];
  #L498ae2.  v2:= 0I;
  #L498ae4.  v1[v2]:= v0 @kind object;
  #L498ae8.  goto L498aee;
  #L498aea.  v1:= `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L498aee.  return v1 @kind object;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L498b00.  v0:= 1I;
  #L498b02.  v0:= new `java.lang.reflect.Type`[v0];
  #L498b06.  v1:= v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L498b0a.  v2:= 0I;
  #L498b0c.  v0[v2]:= v1 @kind object;
  #L498b10.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.Utils$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L498a0c.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L498a10.  if v0 == 0 then goto L498a22;
  #L498a14.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L498a1a.  v0:= temp;
  #L498a1c.  v0:= v0 + 31;
  #L498a20.  goto L498a24;
  #L498a22.  v0:= 1I;
  #L498a24.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L498a28.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L498a2e.  v1:= temp;
  #L498a30.  v1:= v1 + 31;
  #L498a34.  v0:= v0 ^~ v1 @kind int;
  #L498a36.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit2.Utils$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L498a48.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L498a4c.  if v0 == 0 then goto L498a80;
  #L498a50.  v0:= new `java.lang.StringBuilder`;
  #L498a54.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L498a5a.  v1:= "? super " @kind object;
  #L498a5e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L498a64.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L498a68.  call temp:= `typeToString`(v1) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L498a6e.  v1:= temp @kind object;
  #L498a70.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L498a76.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L498a7c.  v0:= temp @kind object;
  #L498a7e.  return v0 @kind object;
  #L498a80.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L498a84.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L498a88.  if v0 != v1 then goto L498a92;
  #L498a8c.  v0:= "?" @kind object;
  #L498a90.  return v0 @kind object;
  #L498a92.  v0:= new `java.lang.StringBuilder`;
  #L498a96.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L498a9c.  v1:= "? extends " @kind object;
  #L498aa0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L498aa6.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L498aaa.  call temp:= `typeToString`(v1) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L498ab0.  v1:= temp @kind object;
  #L498ab2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L498ab8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L498abe.  v0:= temp @kind object;
  #L498ac0.  return v0 @kind object;
}
