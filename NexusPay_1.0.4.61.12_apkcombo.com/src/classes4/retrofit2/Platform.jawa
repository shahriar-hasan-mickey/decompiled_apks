record `retrofit2.Platform` @kind class @AccessFlag  {
  `boolean` `retrofit2.Platform.hasJava8Types` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Constructor` `retrofit2.Platform.lookupConstructor` @AccessFlag PRIVATE_FINAL;
}
global `retrofit2.Platform` `@@retrofit2.Platform.PLATFORM` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/Platform;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L49566c.  call temp:= `findPlatform`() @signature `Lretrofit2/Platform;.findPlatform:()Lretrofit2/Platform;` @kind static;
  #L495672.  v0:= temp @kind object;
  #L495674.  `@@retrofit2.Platform.PLATFORM` @type ^`retrofit2.Platform` := v0 @kind object;
  #L495678.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Platform` v4 @kind this, `boolean` v5 ) @signature `Lretrofit2/Platform;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49568c.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L495692.  v4.`retrofit2.Platform.hasJava8Types` @type ^`boolean` := v5 @kind boolean;
  #L495696.  v0:= 0I;
  #L495698.  if v5 == 0 then goto L4956c8;
  #L49569c.  v5:= constclass @type ^`java.lang.invoke.MethodHandles$Lookup` @kind object;
  #L4956a0.  v1:= 2I;
  #L4956a2.  v1:= new `java.lang.Class`[v1];
  #L4956a6.  v2:= 0I;
  #L4956a8.  v3:= constclass @type ^`java.lang.Class` @kind object;
  #L4956ac.  v1[v2]:= v3 @kind object;
  #L4956b0.  v2:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L4956b4.  v3:= 1I;
  #L4956b6.  v1[v3]:= v2 @kind object;
  #L4956ba.  call temp:= `getDeclaredConstructor`(v5, v1) @signature `Ljava/lang/Class;.getDeclaredConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L4956c0.  v0:= temp @kind object;
  #L4956c2.  call `setAccessible`(v0, v3) @signature `Ljava/lang/reflect/Constructor;.setAccessible:(Z)V` @kind virtual;
  #L4956c8.  v4.`retrofit2.Platform.lookupConstructor` @type ^`java.lang.reflect.Constructor` := v0 @kind object;
  #L4956cc.  return @kind void;
  catch `java.lang.NoClassDefFoundError` @[L49569c..L4956c8] goto L4956c8;
  catch `java.lang.NoSuchMethodException` @[L49569c..L4956c8] goto L4956c8;
}
procedure `retrofit2.Platform` `findPlatform`() @signature `Lretrofit2/Platform;.findPlatform:()Lretrofit2/Platform;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L49560c.  v0:= "java.vm.name" @kind object;
  #L495610.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L495616.  v0:= temp @kind object;
  #L495618.  v1:= "Dalvik" @kind object;
  #L49561c.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L495622.  v0:= temp;
  #L495624.  if v0 == 0 then goto L495634;
  #L495628.  v0:= new `retrofit2.Platform$Android`;
  #L49562c.  call `<init>`(v0) @signature `Lretrofit2/Platform$Android;.<init>:()V` @kind direct;
  #L495632.  goto L495640;
  #L495634.  v0:= new `retrofit2.Platform`;
  #L495638.  v1:= 1I;
  #L49563a.  call `<init>`(v0, v1) @signature `Lretrofit2/Platform;.<init>:(Z)V` @kind direct;
  #L495640.  return v0 @kind object;
}
procedure `retrofit2.Platform` `get`() @signature `Lretrofit2/Platform;.get:()Lretrofit2/Platform;` @AccessFlag STATIC {
    temp;
    v0;

  #L495654.  v0:= `@@retrofit2.Platform.PLATFORM` @type ^`retrofit2.Platform` @kind object;
  #L495658.  return v0 @kind object;
}
procedure `java.util.List` `defaultCallAdapterFactories`(`retrofit2.Platform` v3 @kind this, `java.util.concurrent.Executor` v4 @kind object) @signature `Lretrofit2/Platform;.defaultCallAdapterFactories:(Ljava/util/concurrent/Executor;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L49557c.  v0:= new `retrofit2.DefaultCallAdapterFactory`;
  #L495580.  call `<init>`(v0, v4) @signature `Lretrofit2/DefaultCallAdapterFactory;.<init>:(Ljava/util/concurrent/Executor;)V` @kind direct;
  #L495586.  v4:= v3.`retrofit2.Platform.hasJava8Types` @type ^`boolean` @kind boolean;
  #L49558a.  if v4 == 0 then goto L4955ae;
  #L49558e.  v4:= 2I;
  #L495590.  v4:= new `retrofit2.CallAdapter$Factory`[v4];
  #L495594.  v1:= 0I;
  #L495596.  v2:= `@@retrofit2.CompletableFutureCallAdapterFactory.INSTANCE` @type ^`retrofit2.CallAdapter$Factory` @kind object;
  #L49559a.  v4[v1]:= v2 @kind object;
  #L49559e.  v1:= 1I;
  #L4955a0.  v4[v1]:= v0 @kind object;
  #L4955a4.  call temp:= `asList`(v4) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4955aa.  v4:= temp @kind object;
  #L4955ac.  goto L4955b6;
  #L4955ae.  call temp:= `singletonList`(v0) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4955b4.  v4:= temp @kind object;
  #L4955b6.  return v4 @kind object;
}
procedure `int` `defaultCallAdapterFactoriesSize`(`retrofit2.Platform` v1 @kind this) @signature `Lretrofit2/Platform;.defaultCallAdapterFactoriesSize:()I` @AccessFlag  {
    temp;
    v0;

  #L4954e0.  v0:= v1.`retrofit2.Platform.hasJava8Types` @type ^`boolean` @kind boolean;
  #L4954e4.  if v0 == 0 then goto L4954ec;
  #L4954e8.  v0:= 2I;
  #L4954ea.  goto L4954ee;
  #L4954ec.  v0:= 1I;
  #L4954ee.  return v0;
}
procedure `java.util.concurrent.Executor` `defaultCallbackExecutor`(`retrofit2.Platform` v1 @kind this) @signature `Lretrofit2/Platform;.defaultCallbackExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag  {
    temp;
    v0;

  #L4955f8.  v0:= 0I;
  #L4955fa.  return v0 @kind object;
}
procedure `java.util.List` `defaultConverterFactories`(`retrofit2.Platform` v1 @kind this) @signature `Lretrofit2/Platform;.defaultConverterFactories:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;

  #L4955c8.  v0:= v1.`retrofit2.Platform.hasJava8Types` @type ^`boolean` @kind boolean;
  #L4955cc.  if v0 == 0 then goto L4955de;
  #L4955d0.  v0:= `@@retrofit2.OptionalConverterFactory.INSTANCE` @type ^`retrofit2.Converter$Factory` @kind object;
  #L4955d4.  call temp:= `singletonList`(v0) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4955da.  v0:= temp @kind object;
  #L4955dc.  goto L4955e6;
  #L4955de.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L4955e4.  v0:= temp @kind object;
  #L4955e6.  return v0 @kind object;
}
procedure `int` `defaultConverterFactoriesSize`(`retrofit2.Platform` v1 @kind this) @signature `Lretrofit2/Platform;.defaultConverterFactoriesSize:()I` @AccessFlag  {
    temp;
    v0;

  #L495500.  v0:= v1.`retrofit2.Platform.hasJava8Types` @type ^`boolean` @kind boolean;
  #L495504.  return v0;
}
procedure `java.lang.Object` `invokeDefaultMethod`(`retrofit2.Platform` v4 @kind this, `java.lang.reflect.Method` v5 @kind object, `java.lang.Class` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object`[] v8 @kind object) @signature `Lretrofit2/Platform;.invokeDefaultMethod:(Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L495518.  v0:= v4.`retrofit2.Platform.lookupConstructor` @type ^`java.lang.reflect.Constructor` @kind object;
  #L49551c.  if v0 == 0 then goto L49554a;
  #L495520.  v1:= 2I;
  #L495522.  v1:= new `java.lang.Object`[v1];
  #L495526.  v2:= 0I;
  #L495528.  v1[v2]:= v6 @kind object;
  #L49552c.  v2:= 1I;
  #L49552e.  v3:= -1I;
  #L495530.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L495536.  v3:= temp @kind object;
  #L495538.  v1[v2]:= v3 @kind object;
  #L49553c.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L495542.  v0:= temp @kind object;
  #L495544.  v0:= (`java.lang.invoke.MethodHandles$Lookup`) v0 @kind object;
  #L495548.  goto L495552;
  #L49554a.  call temp:= `lookup`() @signature `Ljava/lang/invoke/MethodHandles;.lookup:()Ljava/lang/invoke/MethodHandles$Lookup;` @kind static;
  #L495550.  v0:= temp @kind object;
  #L495552.  call temp:= `unreflectSpecial`(v0, v5, v6) @signature `Ljava/lang/invoke/MethodHandles$Lookup;.unreflectSpecial:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/invoke/MethodHandle;` @kind virtual;
  #L495558.  v5:= temp @kind object;
  #L49555a.  call temp:= `bindTo`(v5, v7) @signature `Ljava/lang/invoke/MethodHandle;.bindTo:(Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;` @kind virtual;
  #L495560.  v5:= temp @kind object;
  #L495562.  call temp:= `invokeWithArguments`(v5, v8) @signature `Ljava/lang/invoke/MethodHandle;.invokeWithArguments:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L495568.  v5:= temp @kind object;
  #L49556a.  return v5 @kind object;
}
procedure `boolean` `isDefaultMethod`(`retrofit2.Platform` v1 @kind this, `java.lang.reflect.Method` v2 @kind object) @signature `Lretrofit2/Platform;.isDefaultMethod:(Ljava/lang/reflect/Method;)Z` @AccessFlag  {
    temp;
    v0;

  #L4954b4.  v0:= v1.`retrofit2.Platform.hasJava8Types` @type ^`boolean` @kind boolean;
  #L4954b8.  if v0 == 0 then goto L4954cc;
  #L4954bc.  call temp:= `isDefault`(v2) @signature `Ljava/lang/reflect/Method;.isDefault:()Z` @kind virtual;
  #L4954c2.  v2:= temp;
  #L4954c4.  if v2 == 0 then goto L4954cc;
  #L4954c8.  v2:= 1I;
  #L4954ca.  goto L4954ce;
  #L4954cc.  v2:= 0I;
  #L4954ce.  return v2;
}
