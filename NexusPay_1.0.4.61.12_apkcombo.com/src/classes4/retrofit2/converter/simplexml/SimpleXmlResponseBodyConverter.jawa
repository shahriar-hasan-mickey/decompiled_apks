record `retrofit2.converter.simplexml.SimpleXmlResponseBodyConverter` @kind class @AccessFlag FINAL extends `retrofit2.Converter` @kind interface {
  `java.lang.Class` `retrofit2.converter.simplexml.SimpleXmlResponseBodyConverter.cls` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.Serializer` `retrofit2.converter.simplexml.SimpleXmlResponseBodyConverter.serializer` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.converter.simplexml.SimpleXmlResponseBodyConverter.strict` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.converter.simplexml.SimpleXmlResponseBodyConverter` v0 @kind this, `java.lang.Class` v1 @kind object, `org.simpleframework.xml.Serializer` v2 @kind object, `boolean` v3 ) @signature `Lretrofit2/converter/simplexml/SimpleXmlResponseBodyConverter;.<init>:(Ljava/lang/Class;Lorg/simpleframework/xml/Serializer;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49ac78.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49ac7e.  v0.`retrofit2.converter.simplexml.SimpleXmlResponseBodyConverter.cls` @type ^`java.lang.Class` := v1 @kind object;
  #L49ac82.  v0.`retrofit2.converter.simplexml.SimpleXmlResponseBodyConverter.serializer` @type ^`org.simpleframework.xml.Serializer` := v2 @kind object;
  #L49ac86.  v0.`retrofit2.converter.simplexml.SimpleXmlResponseBodyConverter.strict` @type ^`boolean` := v3 @kind boolean;
  #L49ac8a.  return @kind void;
}
procedure `java.lang.Object` `convert`(`retrofit2.converter.simplexml.SimpleXmlResponseBodyConverter` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lretrofit2/converter/simplexml/SimpleXmlResponseBodyConverter;.convert:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49aba4.  v1:= (`okhttp3.ResponseBody`) v1 @kind object;
  #L49aba8.  call temp:= `convert`(v0, v1) @signature `Lretrofit2/converter/simplexml/SimpleXmlResponseBodyConverter;.convert:(Lokhttp3/ResponseBody;)Ljava/lang/Object;` @kind virtual;
  #L49abae.  v1:= temp @kind object;
  #L49abb0.  return v1 @kind object;
}
procedure `java.lang.Object` `convert`(`retrofit2.converter.simplexml.SimpleXmlResponseBodyConverter` v4 @kind this, `okhttp3.ResponseBody` v5 @kind object) @signature `Lretrofit2/converter/simplexml/SimpleXmlResponseBodyConverter;.convert:(Lokhttp3/ResponseBody;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49abc4.  v0:= v4.`retrofit2.converter.simplexml.SimpleXmlResponseBodyConverter.serializer` @type ^`org.simpleframework.xml.Serializer` @kind object;
  #L49abc8.  v1:= v4.`retrofit2.converter.simplexml.SimpleXmlResponseBodyConverter.cls` @type ^`java.lang.Class` @kind object;
  #L49abcc.  call temp:= `charStream`(v5) @signature `Lokhttp3/ResponseBody;.charStream:()Ljava/io/Reader;` @kind virtual;
  #L49abd2.  v2:= temp @kind object;
  #L49abd4.  v3:= v4.`retrofit2.converter.simplexml.SimpleXmlResponseBodyConverter.strict` @type ^`boolean` @kind boolean;
  #L49abd8.  call temp:= `read`(v0, v1, v2, v3) @signature `Lorg/simpleframework/xml/Serializer;.read:(Ljava/lang/Class;Ljava/io/Reader;Z)Ljava/lang/Object;` @kind interface;
  #L49abde.  v0:= temp @kind object;
  #L49abe0.  if v0 == 0 then goto L49abec;
  #L49abe4.  call `close`(v5) @signature `Lokhttp3/ResponseBody;.close:()V` @kind virtual;
  #L49abea.  return v0 @kind object;
  #L49abec.  v0:= new `java.lang.IllegalStateException`;
  #L49abf0.  v1:= new `java.lang.StringBuilder`;
  #L49abf4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49abfa.  v2:= "Could not deserialize body as " @kind object;
  #L49abfe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49ac04.  v2:= v4.`retrofit2.converter.simplexml.SimpleXmlResponseBodyConverter.cls` @type ^`java.lang.Class` @kind object;
  #L49ac08.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49ac0e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49ac14.  v1:= temp @kind object;
  #L49ac16.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49ac1c.  throw v0;
  #L49ac1e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ac20.  goto L49ac38;
  #L49ac22.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L49ac24.  v1:= new `java.lang.RuntimeException`;
  #L49ac28.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L49ac2e.  throw v1;
  #L49ac30.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L49ac32.  goto L49ac36;
  #L49ac34.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L49ac36.  throw v0;
  #L49ac38.  call `close`(v5) @signature `Lokhttp3/ResponseBody;.close:()V` @kind virtual;
  #L49ac3e.  throw v0;
  catch `java.lang.RuntimeException` @[L49abc4..L49abe0] goto L49ac34;
  catch `java.io.IOException` @[L49abc4..L49abe0] goto L49ac30;
  catch `java.lang.Exception` @[L49abc4..L49abe0] goto L49ac22;
  catch `java.lang.Throwable` @[L49abc4..L49abe0] goto L49ac1e;
  catch `java.lang.RuntimeException` @[L49abec..L49ac1e] goto L49ac34;
  catch `java.io.IOException` @[L49abec..L49ac1e] goto L49ac30;
  catch `java.lang.Exception` @[L49abec..L49ac1e] goto L49ac22;
  catch `java.lang.Throwable` @[L49abec..L49ac1e] goto L49ac1e;
  catch `java.lang.Throwable` @[L49ac24..L49ac38] goto L49ac1e;
}
