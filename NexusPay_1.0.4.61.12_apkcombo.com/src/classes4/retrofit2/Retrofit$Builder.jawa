record `retrofit2.Retrofit$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.HttpUrl` `retrofit2.Retrofit$Builder.baseUrl` @AccessFlag PRIVATE;
  `java.util.List` `retrofit2.Retrofit$Builder.callAdapterFactories` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Call$Factory` `retrofit2.Retrofit$Builder.callFactory` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `retrofit2.Retrofit$Builder.callbackExecutor` @AccessFlag PRIVATE;
  `java.util.List` `retrofit2.Retrofit$Builder.converterFactories` @AccessFlag PRIVATE_FINAL;
  `retrofit2.Platform` `retrofit2.Retrofit$Builder.platform` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.Retrofit$Builder.validateEagerly` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L497d44.  call temp:= `get`() @signature `Lretrofit2/Platform;.get:()Lretrofit2/Platform;` @kind static;
  #L497d4a.  v0:= temp @kind object;
  #L497d4c.  call `<init>`(v1, v0) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Platform;)V` @kind direct;
  #L497d52.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v1 @kind this, `retrofit2.Platform` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Platform;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L497d64.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L497d6a.  v0:= new `java.util.ArrayList`;
  #L497d6e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L497d74.  v1.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` := v0 @kind object;
  #L497d78.  v0:= new `java.util.ArrayList`;
  #L497d7c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L497d82.  v1.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` := v0 @kind object;
  #L497d86.  v1.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` := v2 @kind object;
  #L497d8a.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v4 @kind this, `retrofit2.Retrofit` v5 @kind object) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Retrofit;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L497d9c.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L497da2.  v0:= new `java.util.ArrayList`;
  #L497da6.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L497dac.  v4.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` := v0 @kind object;
  #L497db0.  v0:= new `java.util.ArrayList`;
  #L497db4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L497dba.  v4.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` := v0 @kind object;
  #L497dbe.  call temp:= `get`() @signature `Lretrofit2/Platform;.get:()Lretrofit2/Platform;` @kind static;
  #L497dc4.  v0:= temp @kind object;
  #L497dc6.  v4.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` := v0 @kind object;
  #L497dca.  v0:= v5.`retrofit2.Retrofit.callFactory` @type ^`okhttp3.Call$Factory` @kind object;
  #L497dce.  v4.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` := v0 @kind object;
  #L497dd2.  v0:= v5.`retrofit2.Retrofit.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L497dd6.  v4.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` := v0 @kind object;
  #L497dda.  v0:= v5.`retrofit2.Retrofit.converterFactories` @type ^`java.util.List` @kind object;
  #L497dde.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L497de4.  v0:= temp;
  #L497de6.  v1:= v4.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L497dea.  call temp:= `defaultConverterFactoriesSize`(v1) @signature `Lretrofit2/Platform;.defaultConverterFactoriesSize:()I` @kind virtual;
  #L497df0.  v1:= temp;
  #L497df2.  v0:= v0 - v1 @kind int;
  #L497df4.  v1:= 1I;
  #L497df6.  if v1 >= v0 then goto L497e1a;
  #L497dfa.  v2:= v4.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L497dfe.  v3:= v5.`retrofit2.Retrofit.converterFactories` @type ^`java.util.List` @kind object;
  #L497e02.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L497e08.  v3:= temp @kind object;
  #L497e0a.  v3:= (`retrofit2.Converter$Factory`) v3 @kind object;
  #L497e0e.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L497e14.  v1:= v1 + 1;
  #L497e18.  goto L497df6;
  #L497e1a.  v0:= 0I;
  #L497e1c.  v1:= v5.`retrofit2.Retrofit.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L497e20.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L497e26.  v1:= temp;
  #L497e28.  v2:= v4.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L497e2c.  call temp:= `defaultCallAdapterFactoriesSize`(v2) @signature `Lretrofit2/Platform;.defaultCallAdapterFactoriesSize:()I` @kind virtual;
  #L497e32.  v2:= temp;
  #L497e34.  v1:= v1 - v2 @kind int;
  #L497e36.  if v0 >= v1 then goto L497e5a;
  #L497e3a.  v2:= v4.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L497e3e.  v3:= v5.`retrofit2.Retrofit.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L497e42.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L497e48.  v3:= temp @kind object;
  #L497e4a.  v3:= (`retrofit2.CallAdapter$Factory`) v3 @kind object;
  #L497e4e.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L497e54.  v0:= v0 + 1;
  #L497e58.  goto L497e36;
  #L497e5a.  v0:= v5.`retrofit2.Retrofit.callbackExecutor` @type ^`java.util.concurrent.Executor` @kind object;
  #L497e5e.  v4.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L497e62.  v5:= v5.`retrofit2.Retrofit.validateEagerly` @type ^`boolean` @kind boolean;
  #L497e66.  v4.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` := v5 @kind boolean;
  #L497e6a.  return @kind void;
}
procedure `retrofit2.Retrofit$Builder` `addCallAdapterFactory`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.CallAdapter$Factory` v3 @kind object) @signature `Lretrofit2/Retrofit$Builder;.addCallAdapterFactory:(Lretrofit2/CallAdapter$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L497b7c.  v0:= v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L497b80.  v1:= "factory == null" @kind object;
  #L497b84.  call temp:= `requireNonNull`(v3, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L497b8a.  v3:= temp @kind object;
  #L497b8c.  v3:= (`retrofit2.CallAdapter$Factory`) v3 @kind object;
  #L497b90.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L497b96.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `addConverterFactory`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.Converter$Factory` v3 @kind object) @signature `Lretrofit2/Retrofit$Builder;.addConverterFactory:(Lretrofit2/Converter$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L497ba8.  v0:= v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L497bac.  v1:= "factory == null" @kind object;
  #L497bb0.  call temp:= `requireNonNull`(v3, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L497bb6.  v3:= temp @kind object;
  #L497bb8.  v3:= (`retrofit2.Converter$Factory`) v3 @kind object;
  #L497bbc.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L497bc2.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Ljava/lang/String;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497bd4.  v0:= "baseUrl == null" @kind object;
  #L497bd8.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L497bde.  call temp:= `get`(v2) @signature `Lokhttp3/HttpUrl;.get:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L497be4.  v2:= temp @kind object;
  #L497be6.  call temp:= `baseUrl`(v1, v2) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L497bec.  v2:= temp @kind object;
  #L497bee.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v1 @kind this, `java.net.URL` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Ljava/net/URL;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497c00.  v0:= "baseUrl == null" @kind object;
  #L497c04.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L497c0a.  call temp:= `toString`(v2) @signature `Ljava/net/URL;.toString:()Ljava/lang/String;` @kind virtual;
  #L497c10.  v2:= temp @kind object;
  #L497c12.  call temp:= `get`(v2) @signature `Lokhttp3/HttpUrl;.get:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L497c18.  v2:= temp @kind object;
  #L497c1a.  call temp:= `baseUrl`(v1, v2) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L497c20.  v2:= temp @kind object;
  #L497c22.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v3 @kind this, `okhttp3.HttpUrl` v4 @kind object) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L497c34.  v0:= "baseUrl == null" @kind object;
  #L497c38.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L497c3e.  call temp:= `pathSegments`(v4) @signature `Lokhttp3/HttpUrl;.pathSegments:()Ljava/util/List;` @kind virtual;
  #L497c44.  v0:= temp @kind object;
  #L497c46.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L497c4c.  v1:= temp;
  #L497c4e.  v1:= v1 + -1;
  #L497c52.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L497c58.  v0:= temp @kind object;
  #L497c5a.  v1:= "" @kind object;
  #L497c5e.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L497c64.  v0:= temp;
  #L497c66.  if v0 == 0 then goto L497c70;
  #L497c6a.  v3.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` := v4 @kind object;
  #L497c6e.  return v3 @kind object;
  #L497c70.  v0:= new `java.lang.IllegalArgumentException`;
  #L497c74.  v1:= new `java.lang.StringBuilder`;
  #L497c78.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L497c7e.  v2:= "baseUrl must end in /: " @kind object;
  #L497c82.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L497c88.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L497c8e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L497c94.  v4:= temp @kind object;
  #L497c96.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L497c9c.  throw v0;
}
procedure `retrofit2.Retrofit` `build`(`retrofit2.Retrofit$Builder` v9 @kind this) @signature `Lretrofit2/Retrofit$Builder;.build:()Lretrofit2/Retrofit;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L497a90.  v0:= v9.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L497a94.  if v0 == 0 then goto L497b5c;
  #L497a98.  v0:= v9.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` @kind object;
  #L497a9c.  if v0 != 0 then goto L497aaa;
  #L497aa0.  v0:= new `okhttp3.OkHttpClient`;
  #L497aa4.  call `<init>`(v0) @signature `Lokhttp3/OkHttpClient;.<init>:()V` @kind direct;
  #L497aaa.  v2:= v0 @kind object;
  #L497aac.  v0:= v9.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` @kind object;
  #L497ab0.  if v0 != 0 then goto L497ac0;
  #L497ab4.  v0:= v9.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L497ab8.  call temp:= `defaultCallbackExecutor`(v0) @signature `Lretrofit2/Platform;.defaultCallbackExecutor:()Ljava/util/concurrent/Executor;` @kind virtual;
  #L497abe.  v0:= temp @kind object;
  #L497ac0.  v6:= v0 @kind object;
  #L497ac2.  v0:= new `java.util.ArrayList`;
  #L497ac6.  v1:= v9.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L497aca.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L497ad0.  v1:= v9.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L497ad4.  call temp:= `defaultCallAdapterFactories`(v1, v6) @signature `Lretrofit2/Platform;.defaultCallAdapterFactories:(Ljava/util/concurrent/Executor;)Ljava/util/List;` @kind virtual;
  #L497ada.  v1:= temp @kind object;
  #L497adc.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L497ae2.  v1:= new `java.util.ArrayList`;
  #L497ae6.  v3:= v9.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L497aea.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L497af0.  v3:= temp;
  #L497af2.  v3:= v3 + 1;
  #L497af6.  v4:= v9.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L497afa.  call temp:= `defaultConverterFactoriesSize`(v4) @signature `Lretrofit2/Platform;.defaultConverterFactoriesSize:()I` @kind virtual;
  #L497b00.  v4:= temp;
  #L497b02.  v3:= v3 + v4 @kind int;
  #L497b04.  call `<init>`(v1, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L497b0a.  v3:= new `retrofit2.BuiltInConverters`;
  #L497b0e.  call `<init>`(v3) @signature `Lretrofit2/BuiltInConverters;.<init>:()V` @kind direct;
  #L497b14.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L497b1a.  v3:= v9.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L497b1e.  call temp:= `addAll`(v1, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L497b24.  v3:= v9.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L497b28.  call temp:= `defaultConverterFactories`(v3) @signature `Lretrofit2/Platform;.defaultConverterFactories:()Ljava/util/List;` @kind virtual;
  #L497b2e.  v3:= temp @kind object;
  #L497b30.  call temp:= `addAll`(v1, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L497b36.  v8:= new `retrofit2.Retrofit`;
  #L497b3a.  v3:= v9.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L497b3e.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L497b44.  v4:= temp @kind object;
  #L497b46.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L497b4c.  v5:= temp @kind object;
  #L497b4e.  v7:= v9.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` @kind boolean;
  #L497b52.  v1:= v8 @kind object;
  #L497b54.  call `<init>`(v1, v2, v3, v4, v5, v6, v7) @signature `Lretrofit2/Retrofit;.<init>:(Lokhttp3/Call$Factory;Lokhttp3/HttpUrl;Ljava/util/List;Ljava/util/List;Ljava/util/concurrent/Executor;Z)V` @kind direct;
  #L497b5a.  return v8 @kind object;
  #L497b5c.  v0:= new `java.lang.IllegalStateException`;
  #L497b60.  v1:= "Base URL required." @kind object;
  #L497b64.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L497b6a.  throw v0;
}
procedure `java.util.List` `callAdapterFactories`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.callAdapterFactories:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497a60.  v0:= v1.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L497a64.  return v0 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `callFactory`(`retrofit2.Retrofit$Builder` v1 @kind this, `okhttp3.Call$Factory` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.callFactory:(Lokhttp3/Call$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497cb0.  v0:= "factory == null" @kind object;
  #L497cb4.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L497cba.  v2:= temp @kind object;
  #L497cbc.  v2:= (`okhttp3.Call$Factory`) v2 @kind object;
  #L497cc0.  v1.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` := v2 @kind object;
  #L497cc4.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `callbackExecutor`(`retrofit2.Retrofit$Builder` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.callbackExecutor:(Ljava/util/concurrent/Executor;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497cd8.  v0:= "executor == null" @kind object;
  #L497cdc.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L497ce2.  v2:= temp @kind object;
  #L497ce4.  v2:= (`java.util.concurrent.Executor`) v2 @kind object;
  #L497ce8.  v1.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` := v2 @kind object;
  #L497cec.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `client`(`retrofit2.Retrofit$Builder` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object) @signature `Lretrofit2/Retrofit$Builder;.client:(Lokhttp3/OkHttpClient;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497d00.  v0:= "client == null" @kind object;
  #L497d04.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L497d0a.  v2:= temp @kind object;
  #L497d0c.  v2:= (`okhttp3.Call$Factory`) v2 @kind object;
  #L497d10.  call temp:= `callFactory`(v1, v2) @signature `Lretrofit2/Retrofit$Builder;.callFactory:(Lokhttp3/Call$Factory;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L497d16.  v2:= temp @kind object;
  #L497d18.  return v2 @kind object;
}
procedure `java.util.List` `converterFactories`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.converterFactories:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497a78.  v0:= v1.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L497a7c.  return v0 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `validateEagerly`(`retrofit2.Retrofit$Builder` v0 @kind this, `boolean` v1 ) @signature `Lretrofit2/Retrofit$Builder;.validateEagerly:(Z)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;

  #L497d2c.  v0.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` := v1 @kind boolean;
  #L497d30.  return v0 @kind object;
}
