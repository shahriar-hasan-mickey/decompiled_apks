record `retrofit2.Utils$ParameterizedTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.ParameterizedType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.Utils$ParameterizedTypeImpl.ownerType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.Utils$ParameterizedTypeImpl.rawType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Utils$ParameterizedTypeImpl` v4 @kind this, `java.lang.reflect.Type` v5 @kind object, `java.lang.reflect.Type` v6 @kind object, `java.lang.reflect.Type`[] v7 @kind object) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49894c.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L498952.  v0:= instanceof @variable v6 @type ^`java.lang.Class` @kind boolean;
  #L498956.  v1:= 0I;
  #L498958.  if v0 == 0 then goto L498990;
  #L49895c.  v0:= 1I;
  #L49895e.  if v5 != 0 then goto L498966;
  #L498962.  v2:= 1I;
  #L498964.  goto L498968;
  #L498966.  v2:= 0I;
  #L498968.  v3:= v6 @kind object;
  #L49896a.  v3:= (`java.lang.Class`) v3 @kind object;
  #L49896e.  call temp:= `getEnclosingClass`(v3) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L498974.  v3:= temp @kind object;
  #L498976.  if v3 != 0 then goto L49897c;
  #L49897a.  goto L49897e;
  #L49897c.  v0:= 0I;
  #L49897e.  if v2 != v0 then goto L498984;
  #L498982.  goto L498990;
  #L498984.  v5:= new `java.lang.IllegalArgumentException`;
  #L498988.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L49898e.  throw v5;
  #L498990.  v0:= length @variable v7;
  #L498992.  if v1 >= v0 then goto L4989b0;
  #L498996.  v2:= v7[v1] @kind object;
  #L49899a.  v3:= "typeArgument == null" @kind object;
  #L49899e.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4989a4.  call `checkNotPrimitive`(v2) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L4989aa.  v1:= v1 + 1;
  #L4989ae.  goto L498992;
  #L4989b0.  v4.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` := v5 @kind object;
  #L4989b4.  v4.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L4989b8.  call temp:= `clone`(v7) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4989be.  v5:= temp @kind object;
  #L4989c0.  v5:= (`java.lang.reflect.Type`[]) v5 @kind object;
  #L4989c4.  v4.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] := v5 @kind object;
  #L4989c8.  return @kind void;
}
procedure `boolean` `equals`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4987d0.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L4987d4.  if v0 == 0 then goto L4987ec;
  #L4987d8.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L4987dc.  call temp:= `equals`(v1, v2) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L4987e2.  v2:= temp;
  #L4987e4.  if v2 == 0 then goto L4987ec;
  #L4987e8.  v2:= 1I;
  #L4987ea.  goto L4987ee;
  #L4987ec.  v2:= 0I;
  #L4987ee.  return v2;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L498928.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L49892c.  call temp:= `clone`(v0) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L498932.  v0:= temp @kind object;
  #L498934.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L498938.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4988f8.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L4988fc.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L498910.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L498914.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.Utils$ParameterizedTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L498800.  v0:= v2.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L498804.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L49880a.  v0:= temp;
  #L49880c.  v1:= v2.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L498810.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L498816.  v1:= temp;
  #L498818.  v0:= v0 ^~ v1 @kind int;
  #L49881a.  v1:= v2.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L49881e.  if v1 == 0 then goto L49882c;
  #L498822.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L498828.  v1:= temp;
  #L49882a.  goto L49882e;
  #L49882c.  v1:= 0I;
  #L49882e.  v0:= v0 ^~ v1 @kind int;
  #L498830.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit2.Utils$ParameterizedTypeImpl` v4 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L498844.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L498848.  v1:= length @variable v0;
  #L49884a.  if v1 != 0 then goto L49885c;
  #L49884e.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L498852.  call temp:= `typeToString`(v0) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L498858.  v0:= temp @kind object;
  #L49885a.  return v0 @kind object;
  #L49885c.  v1:= new `java.lang.StringBuilder`;
  #L498860.  v0:= length @variable v0;
  #L498862.  v2:= 1I;
  #L498864.  v0:= v0 + v2 @kind int;
  #L498866.  v0:= v0 * 30;
  #L49886a.  call `<init>`(v1, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L498870.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L498874.  call temp:= `typeToString`(v0) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L49887a.  v0:= temp @kind object;
  #L49887c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L498882.  v0:= "<" @kind object;
  #L498886.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49888c.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L498890.  v3:= 0I;
  #L498892.  v0:= v0[v3] @kind object;
  #L498896.  call temp:= `typeToString`(v0) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L49889c.  v0:= temp @kind object;
  #L49889e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4988a4.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L4988a8.  v0:= length @variable v0;
  #L4988aa.  if v2 >= v0 then goto L4988d4;
  #L4988ae.  v0:= ", " @kind object;
  #L4988b2.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4988b8.  v0:= v4.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L4988bc.  v0:= v0[v2] @kind object;
  #L4988c0.  call temp:= `typeToString`(v0) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L4988c6.  v0:= temp @kind object;
  #L4988c8.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4988ce.  v2:= v2 + 1;
  #L4988d2.  goto L4988a4;
  #L4988d4.  v0:= ">" @kind object;
  #L4988d8.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4988de.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4988e4.  v0:= temp @kind object;
  #L4988e6.  return v0 @kind object;
}
