record `retrofit2.CompletableFutureCallAdapterFactory$CallCancelCompletableFuture` @kind class @AccessFlag FINAL extends `java.util.concurrent.CompletableFuture` @kind class {
  `retrofit2.Call` `retrofit2.CompletableFutureCallAdapterFactory$CallCancelCompletableFuture.call` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.CompletableFutureCallAdapterFactory$CallCancelCompletableFuture` v0 @kind this, `retrofit2.Call` v1 @kind object) @signature `Lretrofit2/CompletableFutureCallAdapterFactory$CallCancelCompletableFuture;.<init>:(Lretrofit2/Call;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L492d48.  call `<init>`(v0) @signature `Ljava/util/concurrent/CompletableFuture;.<init>:()V` @kind direct;
  #L492d4e.  v0.`retrofit2.CompletableFutureCallAdapterFactory$CallCancelCompletableFuture.call` @type ^`retrofit2.Call` := v1 @kind object;
  #L492d52.  return @kind void;
}
procedure `boolean` `cancel`(`retrofit2.CompletableFutureCallAdapterFactory$CallCancelCompletableFuture` v1 @kind this, `boolean` v2 ) @signature `Lretrofit2/CompletableFutureCallAdapterFactory$CallCancelCompletableFuture;.cancel:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492d20.  if v2 == 0 then goto L492d2e;
  #L492d24.  v0:= v1.`retrofit2.CompletableFutureCallAdapterFactory$CallCancelCompletableFuture.call` @type ^`retrofit2.Call` @kind object;
  #L492d28.  call `cancel`(v0) @signature `Lretrofit2/Call;.cancel:()V` @kind interface;
  #L492d2e.  call temp:= `cancel`(v1, v2) @signature `Ljava/util/concurrent/CompletableFuture;.cancel:(Z)Z` @kind super;
  #L492d34.  v2:= temp;
  #L492d36.  return v2;
}
