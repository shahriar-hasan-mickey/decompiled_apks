record `retrofit2.Utils` @kind class @AccessFlag FINAL {
}
global `java.lang.reflect.Type`[] `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/Utils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L499554.  v0:= 0I;
  #L499556.  v0:= new `java.lang.reflect.Type`[v0];
  #L49955a.  `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L49955e.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Utils` v0 @kind this) @signature `Lretrofit2/Utils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L499570.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L499576.  return @kind void;
}
procedure `okhttp3.ResponseBody` `buffer`(`okhttp3.ResponseBody` v4 @kind object) @signature `Lretrofit2/Utils;.buffer:(Lokhttp3/ResponseBody;)Lokhttp3/ResponseBody;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L499510.  v0:= new `okio.Buffer`;
  #L499514.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L49951a.  call temp:= `source`(v4) @signature `Lokhttp3/ResponseBody;.source:()Lokio/BufferedSource;` @kind virtual;
  #L499520.  v1:= temp @kind object;
  #L499522.  call temp:= `readAll`(v1, v0) @signature `Lokio/BufferedSource;.readAll:(Lokio/Sink;)J` @kind interface;
  #L499528.  call temp:= `contentType`(v4) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L49952e.  v1:= temp @kind object;
  #L499530.  call temp:= `contentLength`(v4) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L499536.  v2:= temp @kind wide;
  #L499538.  call temp:= `create`(v1, v2, v0) @signature `Lokhttp3/ResponseBody;.create:(Lokhttp3/MediaType;JLokio/BufferedSource;)Lokhttp3/ResponseBody;` @kind static;
  #L49953e.  v4:= temp @kind object;
  #L499540.  return v4 @kind object;
}
procedure `void` `checkNotPrimitive`(`java.lang.reflect.Type` v1 @kind object) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L499588.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L49958c.  if v0 == 0 then goto L4995ae;
  #L499590.  v1:= (`java.lang.Class`) v1 @kind object;
  #L499594.  call temp:= `isPrimitive`(v1) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L49959a.  v1:= temp;
  #L49959c.  if v1 != 0 then goto L4995a2;
  #L4995a0.  goto L4995ae;
  #L4995a2.  v1:= new `java.lang.IllegalArgumentException`;
  #L4995a6.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L4995ac.  throw v1;
  #L4995ae.  return @kind void;
}
procedure `java.lang.Class` `declaringClassOf`(`java.lang.reflect.TypeVariable` v1 @kind object) @signature `Lretrofit2/Utils;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L498ea4.  call temp:= `getGenericDeclaration`(v1) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L498eaa.  v1:= temp @kind object;
  #L498eac.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L498eb0.  if v0 == 0 then goto L498eba;
  #L498eb4.  v1:= (`java.lang.Class`) v1 @kind object;
  #L498eb8.  goto L498ebc;
  #L498eba.  v1:= 0I;
  #L498ebc.  return v1 @kind object;
}
procedure `boolean` `equals`(`java.lang.reflect.Type` v4 @kind object, `java.lang.reflect.Type` v5 @kind object) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L498bc8.  v0:= 1I;
  #L498bca.  if v4 != v5 then goto L498bd0;
  #L498bce.  return v0;
  #L498bd0.  v1:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L498bd4.  if v1 == 0 then goto L498be2;
  #L498bd8.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L498bde.  v4:= temp;
  #L498be0.  return v4;
  #L498be2.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L498be6.  v2:= 0I;
  #L498be8.  if v1 == 0 then goto L498c60;
  #L498bec.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L498bf0.  if v1 != 0 then goto L498bf6;
  #L498bf4.  return v2;
  #L498bf6.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L498bfa.  v5:= (`java.lang.reflect.ParameterizedType`) v5 @kind object;
  #L498bfe.  call temp:= `getOwnerType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L498c04.  v1:= temp @kind object;
  #L498c06.  call temp:= `getOwnerType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L498c0c.  v3:= temp @kind object;
  #L498c0e.  if v1 == v3 then goto L498c22;
  #L498c12.  if v1 == 0 then goto L498c5c;
  #L498c16.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L498c1c.  v1:= temp;
  #L498c1e.  if v1 == 0 then goto L498c5c;
  #L498c22.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L498c28.  v1:= temp @kind object;
  #L498c2a.  call temp:= `getRawType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L498c30.  v3:= temp @kind object;
  #L498c32.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L498c38.  v1:= temp;
  #L498c3a.  if v1 == 0 then goto L498c5c;
  #L498c3e.  call temp:= `getActualTypeArguments`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L498c44.  v4:= temp @kind object;
  #L498c46.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L498c4c.  v5:= temp @kind object;
  #L498c4e.  call temp:= `equals`(v4, v5) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L498c54.  v4:= temp;
  #L498c56.  if v4 == 0 then goto L498c5c;
  #L498c5a.  goto L498c5e;
  #L498c5c.  v0:= 0I;
  #L498c5e.  return v0;
  #L498c60.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L498c64.  if v1 == 0 then goto L498c94;
  #L498c68.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L498c6c.  if v0 != 0 then goto L498c72;
  #L498c70.  return v2;
  #L498c72.  v4:= (`java.lang.reflect.GenericArrayType`) v4 @kind object;
  #L498c76.  v5:= (`java.lang.reflect.GenericArrayType`) v5 @kind object;
  #L498c7a.  call temp:= `getGenericComponentType`(v4) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L498c80.  v4:= temp @kind object;
  #L498c82.  call temp:= `getGenericComponentType`(v5) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L498c88.  v5:= temp @kind object;
  #L498c8a.  call temp:= `equals`(v4, v5) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L498c90.  v4:= temp;
  #L498c92.  return v4;
  #L498c94.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L498c98.  if v1 == 0 then goto L498cec;
  #L498c9c.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L498ca0.  if v1 != 0 then goto L498ca6;
  #L498ca4.  return v2;
  #L498ca6.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L498caa.  v5:= (`java.lang.reflect.WildcardType`) v5 @kind object;
  #L498cae.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L498cb4.  v1:= temp @kind object;
  #L498cb6.  call temp:= `getUpperBounds`(v5) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L498cbc.  v3:= temp @kind object;
  #L498cbe.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L498cc4.  v1:= temp;
  #L498cc6.  if v1 == 0 then goto L498ce8;
  #L498cca.  call temp:= `getLowerBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L498cd0.  v4:= temp @kind object;
  #L498cd2.  call temp:= `getLowerBounds`(v5) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L498cd8.  v5:= temp @kind object;
  #L498cda.  call temp:= `equals`(v4, v5) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L498ce0.  v4:= temp;
  #L498ce2.  if v4 == 0 then goto L498ce8;
  #L498ce6.  goto L498cea;
  #L498ce8.  v0:= 0I;
  #L498cea.  return v0;
  #L498cec.  v1:= instanceof @variable v4 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L498cf0.  if v1 == 0 then goto L498d3c;
  #L498cf4.  v1:= instanceof @variable v5 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L498cf8.  if v1 != 0 then goto L498cfe;
  #L498cfc.  return v2;
  #L498cfe.  v4:= (`java.lang.reflect.TypeVariable`) v4 @kind object;
  #L498d02.  v5:= (`java.lang.reflect.TypeVariable`) v5 @kind object;
  #L498d06.  call temp:= `getGenericDeclaration`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L498d0c.  v1:= temp @kind object;
  #L498d0e.  call temp:= `getGenericDeclaration`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L498d14.  v3:= temp @kind object;
  #L498d16.  if v1 != v3 then goto L498d38;
  #L498d1a.  call temp:= `getName`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L498d20.  v4:= temp @kind object;
  #L498d22.  call temp:= `getName`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L498d28.  v5:= temp @kind object;
  #L498d2a.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L498d30.  v4:= temp;
  #L498d32.  if v4 == 0 then goto L498d38;
  #L498d36.  goto L498d3a;
  #L498d38.  v0:= 0I;
  #L498d3a.  return v0;
  #L498d3c.  return v2;
}
procedure `java.lang.reflect.Type` `getGenericSupertype`(`java.lang.reflect.Type` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L499134.  if v5 != v4 then goto L49913a;
  #L499138.  return v3 @kind object;
  #L49913a.  call temp:= `isInterface`(v5) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L499140.  v3:= temp;
  #L499142.  if v3 == 0 then goto L49919c;
  #L499146.  call temp:= `getInterfaces`(v4) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L49914c.  v3:= temp @kind object;
  #L49914e.  v0:= 0I;
  #L499150.  v1:= length @variable v3;
  #L499152.  if v0 >= v1 then goto L49919c;
  #L499156.  v2:= v3[v0] @kind object;
  #L49915a.  if v2 != v5 then goto L49916c;
  #L49915e.  call temp:= `getGenericInterfaces`(v4) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L499164.  v3:= temp @kind object;
  #L499166.  v3:= v3[v0] @kind object;
  #L49916a.  return v3 @kind object;
  #L49916c.  v2:= v3[v0] @kind object;
  #L499170.  call temp:= `isAssignableFrom`(v5, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L499176.  v2:= temp;
  #L499178.  if v2 == 0 then goto L499196;
  #L49917c.  call temp:= `getGenericInterfaces`(v4) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L499182.  v4:= temp @kind object;
  #L499184.  v4:= v4[v0] @kind object;
  #L499188.  v3:= v3[v0] @kind object;
  #L49918c.  call temp:= `getGenericSupertype`(v4, v3, v5) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L499192.  v3:= temp @kind object;
  #L499194.  return v3 @kind object;
  #L499196.  v0:= v0 + 1;
  #L49919a.  goto L499152;
  #L49919c.  call temp:= `isInterface`(v4) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L4991a2.  v3:= temp;
  #L4991a4.  if v3 != 0 then goto L4991e8;
  #L4991a8.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L4991ac.  if v4 == v3 then goto L4991e8;
  #L4991b0.  call temp:= `getSuperclass`(v4) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L4991b6.  v3:= temp @kind object;
  #L4991b8.  if v3 != v5 then goto L4991c6;
  #L4991bc.  call temp:= `getGenericSuperclass`(v4) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L4991c2.  v3:= temp @kind object;
  #L4991c4.  return v3 @kind object;
  #L4991c6.  call temp:= `isAssignableFrom`(v5, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L4991cc.  v0:= temp;
  #L4991ce.  if v0 == 0 then goto L4991e4;
  #L4991d2.  call temp:= `getGenericSuperclass`(v4) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L4991d8.  v4:= temp @kind object;
  #L4991da.  call temp:= `getGenericSupertype`(v4, v3, v5) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L4991e0.  v3:= temp @kind object;
  #L4991e2.  return v3 @kind object;
  #L4991e4.  v4:= v3 @kind object;
  #L4991e6.  goto L4991a8;
  #L4991e8.  return v5 @kind object;
}
procedure `java.lang.reflect.Type` `getParameterLowerBound`(`int` v0 , `java.lang.reflect.ParameterizedType` v1 @kind object) @signature `Lretrofit2/Utils;.getParameterLowerBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;

  #L4991fc.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L499202.  v1:= temp @kind object;
  #L499204.  v0:= v1[v0] @kind object;
  #L499208.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L49920c.  if v1 == 0 then goto L499222;
  #L499210.  v0:= (`java.lang.reflect.WildcardType`) v0 @kind object;
  #L499214.  call temp:= `getLowerBounds`(v0) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L49921a.  v0:= temp @kind object;
  #L49921c.  v1:= 0I;
  #L49921e.  v0:= v0[v1] @kind object;
  #L499222.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getParameterUpperBound`(`int` v4 , `java.lang.reflect.ParameterizedType` v5 @kind object) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L499234.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L49923a.  v0:= temp @kind object;
  #L49923c.  if v4 < 0 then goto L499266;
  #L499240.  v1:= length @variable v0;
  #L499242.  if v4 >= v1 then goto L499266;
  #L499246.  v4:= v0[v4] @kind object;
  #L49924a.  v5:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L49924e.  if v5 == 0 then goto L499264;
  #L499252.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L499256.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L49925c.  v4:= temp @kind object;
  #L49925e.  v5:= 0I;
  #L499260.  v4:= v4[v5] @kind object;
  #L499264.  return v4 @kind object;
  #L499266.  v1:= new `java.lang.IllegalArgumentException`;
  #L49926a.  v2:= new `java.lang.StringBuilder`;
  #L49926e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L499274.  v3:= "Index " @kind object;
  #L499278.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49927e.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L499284.  v4:= " not in range [0," @kind object;
  #L499288.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49928e.  v4:= length @variable v0;
  #L499290.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L499296.  v4:= ") for " @kind object;
  #L49929a.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4992a0.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4992a6.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4992ac.  v4:= temp @kind object;
  #L4992ae.  call `<init>`(v1, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4992b4.  throw v1;
}
procedure `java.lang.Class` `getRawType`(`java.lang.reflect.Type` v3 @kind object) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L498ed0.  v0:= "type == null" @kind object;
  #L498ed4.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L498eda.  v0:= instanceof @variable v3 @type ^`java.lang.Class` @kind boolean;
  #L498ede.  if v0 == 0 then goto L498ee8;
  #L498ee2.  v3:= (`java.lang.Class`) v3 @kind object;
  #L498ee6.  return v3 @kind object;
  #L498ee8.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L498eec.  if v0 == 0 then goto L498f16;
  #L498ef0.  v3:= (`java.lang.reflect.ParameterizedType`) v3 @kind object;
  #L498ef4.  call temp:= `getRawType`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L498efa.  v3:= temp @kind object;
  #L498efc.  v0:= instanceof @variable v3 @type ^`java.lang.Class` @kind boolean;
  #L498f00.  if v0 == 0 then goto L498f0a;
  #L498f04.  v3:= (`java.lang.Class`) v3 @kind object;
  #L498f08.  return v3 @kind object;
  #L498f0a.  v3:= new `java.lang.IllegalArgumentException`;
  #L498f0e.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L498f14.  throw v3;
  #L498f16.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L498f1a.  v1:= 0I;
  #L498f1c.  if v0 == 0 then goto L498f46;
  #L498f20.  v3:= (`java.lang.reflect.GenericArrayType`) v3 @kind object;
  #L498f24.  call temp:= `getGenericComponentType`(v3) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L498f2a.  v3:= temp @kind object;
  #L498f2c.  call temp:= `getRawType`(v3) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L498f32.  v3:= temp @kind object;
  #L498f34.  call temp:= `newInstance`(v3, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L498f3a.  v3:= temp @kind object;
  #L498f3c.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L498f42.  v3:= temp @kind object;
  #L498f44.  return v3 @kind object;
  #L498f46.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L498f4a.  if v0 == 0 then goto L498f54;
  #L498f4e.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L498f52.  return v3 @kind object;
  #L498f54.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L498f58.  if v0 == 0 then goto L498f76;
  #L498f5c.  v3:= (`java.lang.reflect.WildcardType`) v3 @kind object;
  #L498f60.  call temp:= `getUpperBounds`(v3) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L498f66.  v3:= temp @kind object;
  #L498f68.  v3:= v3[v1] @kind object;
  #L498f6c.  call temp:= `getRawType`(v3) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L498f72.  v3:= temp @kind object;
  #L498f74.  return v3 @kind object;
  #L498f76.  v0:= new `java.lang.IllegalArgumentException`;
  #L498f7a.  v1:= new `java.lang.StringBuilder`;
  #L498f7e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L498f84.  v2:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L498f88.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L498f8e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L498f94.  v2:= "> is of type " @kind object;
  #L498f98.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L498f9e.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L498fa4.  v3:= temp @kind object;
  #L498fa6.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L498fac.  v3:= temp @kind object;
  #L498fae.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L498fb4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L498fba.  v3:= temp @kind object;
  #L498fbc.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L498fc2.  throw v0;
}
procedure `java.lang.reflect.Type` `getSupertype`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lretrofit2/Utils;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;

  #L4992c8.  call temp:= `isAssignableFrom`(v3, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L4992ce.  v0:= temp;
  #L4992d0.  if v0 == 0 then goto L4992e6;
  #L4992d4.  call temp:= `getGenericSupertype`(v1, v2, v3) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L4992da.  v3:= temp @kind object;
  #L4992dc.  call temp:= `resolve`(v1, v2, v3) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L4992e2.  v1:= temp @kind object;
  #L4992e4.  return v1 @kind object;
  #L4992e6.  v1:= new `java.lang.IllegalArgumentException`;
  #L4992ea.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L4992f0.  throw v1;
}
procedure `boolean` `hasUnresolvableType`(`java.lang.reflect.Type` v5 @kind object) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L498d50.  v0:= instanceof @variable v5 @type ^`java.lang.Class` @kind boolean;
  #L498d54.  v1:= 0I;
  #L498d56.  if v0 == 0 then goto L498d5c;
  #L498d5a.  return v1;
  #L498d5c.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L498d60.  v2:= 1I;
  #L498d62.  if v0 == 0 then goto L498d94;
  #L498d66.  v5:= (`java.lang.reflect.ParameterizedType`) v5 @kind object;
  #L498d6a.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L498d70.  v5:= temp @kind object;
  #L498d72.  v0:= length @variable v5;
  #L498d74.  v3:= 0I;
  #L498d76.  if v3 >= v0 then goto L498d92;
  #L498d7a.  v4:= v5[v3] @kind object;
  #L498d7e.  call temp:= `hasUnresolvableType`(v4) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L498d84.  v4:= temp;
  #L498d86.  if v4 == 0 then goto L498d8c;
  #L498d8a.  return v2;
  #L498d8c.  v3:= v3 + 1;
  #L498d90.  goto L498d76;
  #L498d92.  return v1;
  #L498d94.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L498d98.  if v0 == 0 then goto L498db2;
  #L498d9c.  v5:= (`java.lang.reflect.GenericArrayType`) v5 @kind object;
  #L498da0.  call temp:= `getGenericComponentType`(v5) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L498da6.  v5:= temp @kind object;
  #L498da8.  call temp:= `hasUnresolvableType`(v5) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L498dae.  v5:= temp;
  #L498db0.  return v5;
  #L498db2.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L498db6.  if v0 == 0 then goto L498dbc;
  #L498dba.  return v2;
  #L498dbc.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L498dc0.  if v0 == 0 then goto L498dc6;
  #L498dc4.  return v2;
  #L498dc6.  if v5 != 0 then goto L498dd0;
  #L498dca.  v0:= "null" @kind object;
  #L498dce.  goto L498de0;
  #L498dd0.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L498dd6.  v0:= temp @kind object;
  #L498dd8.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L498dde.  v0:= temp @kind object;
  #L498de0.  v1:= new `java.lang.IllegalArgumentException`;
  #L498de4.  v2:= new `java.lang.StringBuilder`;
  #L498de8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L498dee.  v3:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L498df2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L498df8.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L498dfe.  v5:= "> is of type " @kind object;
  #L498e02.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L498e08.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L498e0e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L498e14.  v5:= temp @kind object;
  #L498e16.  call `<init>`(v1, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L498e1c.  throw v1;
}
procedure `int` `indexOf`(`java.lang.Object`[] v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lretrofit2/Utils;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L498e68.  v0:= 0I;
  #L498e6a.  v1:= length @variable v2;
  #L498e6c.  if v0 >= v1 then goto L498e88;
  #L498e70.  v1:= v2[v0] @kind object;
  #L498e74.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L498e7a.  v1:= temp;
  #L498e7c.  if v1 == 0 then goto L498e82;
  #L498e80.  return v0;
  #L498e82.  v0:= v0 + 1;
  #L498e86.  goto L498e6a;
  #L498e88.  v2:= new `java.util.NoSuchElementException`;
  #L498e8c.  call `<init>`(v2) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L498e92.  throw v2;
}
procedure `boolean` `isAnnotationPresent`(`java.lang.annotation.Annotation`[] v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lretrofit2/Utils;.isAnnotationPresent:([Ljava/lang/annotation/Annotation;Ljava/lang/Class;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L498e30.  v0:= length @variable v4;
  #L498e32.  v1:= 0I;
  #L498e34.  v2:= 0I;
  #L498e36.  if v2 >= v0 then goto L498e54;
  #L498e3a.  v3:= v4[v2] @kind object;
  #L498e3e.  call temp:= `isInstance`(v5, v3) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L498e44.  v3:= temp;
  #L498e46.  if v3 == 0 then goto L498e4e;
  #L498e4a.  v4:= 1I;
  #L498e4c.  return v4;
  #L498e4e.  v2:= v2 + 1;
  #L498e52.  goto L498e36;
  #L498e54.  return v1;
}
procedure `java.lang.RuntimeException` `methodError`(`java.lang.reflect.Method` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag STATIC {
    temp;
    v0;

  #L498fd4.  v0:= 0I;
  #L498fd6.  call temp:= `methodError`(v1, v0, v2, v3) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L498fdc.  v1:= temp @kind object;
  #L498fde.  return v1 @kind object;
}
procedure `java.lang.RuntimeException` `methodError`(`java.lang.reflect.Method` v1 @kind object, `java.lang.Throwable` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag STATIC {
    temp;
    v0;

  #L498ff0.  call temp:= `format`(v3, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L498ff6.  v3:= temp @kind object;
  #L498ff8.  v4:= new `java.lang.IllegalArgumentException`;
  #L498ffc.  v0:= new `java.lang.StringBuilder`;
  #L499000.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L499006.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49900c.  v3:= "\n    for method " @kind object;
  #L499010.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L499016.  call temp:= `getDeclaringClass`(v1) @signature `Ljava/lang/reflect/Method;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L49901c.  v3:= temp @kind object;
  #L49901e.  call temp:= `getSimpleName`(v3) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L499024.  v3:= temp @kind object;
  #L499026.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49902c.  v3:= "." @kind object;
  #L499030.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L499036.  call temp:= `getName`(v1) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L49903c.  v1:= temp @kind object;
  #L49903e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L499044.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49904a.  v1:= temp @kind object;
  #L49904c.  call `<init>`(v4, v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L499052.  return v4 @kind object;
}
procedure `java.lang.RuntimeException` `parameterError`(`java.lang.reflect.Method` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag STATIC {
    temp;
    v0;

  #L499064.  v0:= new `java.lang.StringBuilder`;
  #L499068.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L49906e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L499074.  v3:= " (parameter #" @kind object;
  #L499078.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49907e.  v2:= v2 + 1;
  #L499082.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L499088.  v2:= ")" @kind object;
  #L49908c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L499092.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L499098.  v2:= temp @kind object;
  #L49909a.  call temp:= `methodError`(v1, v2, v4) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L4990a0.  v1:= temp @kind object;
  #L4990a2.  return v1 @kind object;
}
procedure `java.lang.RuntimeException` `parameterError`(`java.lang.reflect.Method` v1 @kind object, `java.lang.Throwable` v2 @kind object, `int` v3 , `java.lang.String` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lretrofit2/Utils;.parameterError:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;ILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @AccessFlag STATIC {
    temp;
    v0;

  #L4990b4.  v0:= new `java.lang.StringBuilder`;
  #L4990b8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4990be.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4990c4.  v4:= " (parameter #" @kind object;
  #L4990c8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4990ce.  v3:= v3 + 1;
  #L4990d2.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4990d8.  v3:= ")" @kind object;
  #L4990dc.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4990e2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4990e8.  v3:= temp @kind object;
  #L4990ea.  call temp:= `methodError`(v1, v2, v3, v5) @signature `Lretrofit2/Utils;.methodError:(Ljava/lang/reflect/Method;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/RuntimeException;` @kind static;
  #L4990f0.  v1:= temp @kind object;
  #L4990f2.  return v1 @kind object;
}
procedure `java.lang.reflect.Type` `resolve`(`java.lang.reflect.Type` v8 @kind object, `java.lang.Class` v9 @kind object, `java.lang.reflect.Type` v10 @kind object) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L499304.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L499308.  if v0 == 0 then goto L499322;
  #L49930c.  v10:= (`java.lang.reflect.TypeVariable`) v10 @kind object;
  #L499310.  call temp:= `resolveTypeVariable`(v8, v9, v10) @signature `Lretrofit2/Utils;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @kind static;
  #L499316.  v0:= temp @kind object;
  #L499318.  if v0 != v10 then goto L49931e;
  #L49931c.  return v0 @kind object;
  #L49931e.  v10:= v0 @kind object;
  #L499320.  goto L499304;
  #L499322.  v0:= instanceof @variable v10 @type ^`java.lang.Class` @kind boolean;
  #L499326.  if v0 == 0 then goto L49935e;
  #L49932a.  v0:= v10 @kind object;
  #L49932c.  v0:= (`java.lang.Class`) v0 @kind object;
  #L499330.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L499336.  v1:= temp;
  #L499338.  if v1 == 0 then goto L49935e;
  #L49933c.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L499342.  v10:= temp @kind object;
  #L499344.  call temp:= `resolve`(v8, v9, v10) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L49934a.  v8:= temp @kind object;
  #L49934c.  if v10 != v8 then goto L499352;
  #L499350.  goto L49935c;
  #L499352.  v0:= new `retrofit2.Utils$GenericArrayTypeImpl`;
  #L499356.  call `<init>`(v0, v8) @signature `Lretrofit2/Utils$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L49935c.  return v0 @kind object;
  #L49935e.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L499362.  if v0 == 0 then goto L49938c;
  #L499366.  v10:= (`java.lang.reflect.GenericArrayType`) v10 @kind object;
  #L49936a.  call temp:= `getGenericComponentType`(v10) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L499370.  v0:= temp @kind object;
  #L499372.  call temp:= `resolve`(v8, v9, v0) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L499378.  v8:= temp @kind object;
  #L49937a.  if v0 != v8 then goto L499380;
  #L49937e.  goto L49938a;
  #L499380.  v10:= new `retrofit2.Utils$GenericArrayTypeImpl`;
  #L499384.  call `<init>`(v10, v8) @signature `Lretrofit2/Utils$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L49938a.  return v10 @kind object;
  #L49938c.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L499390.  v1:= 1I;
  #L499392.  v2:= 0I;
  #L499394.  if v0 == 0 then goto L499410;
  #L499398.  v10:= (`java.lang.reflect.ParameterizedType`) v10 @kind object;
  #L49939c.  call temp:= `getOwnerType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L4993a2.  v0:= temp @kind object;
  #L4993a4.  call temp:= `resolve`(v8, v9, v0) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L4993aa.  v3:= temp @kind object;
  #L4993ac.  if v3 == v0 then goto L4993b4;
  #L4993b0.  v0:= 1I;
  #L4993b2.  goto L4993b6;
  #L4993b4.  v0:= 0I;
  #L4993b6.  call temp:= `getActualTypeArguments`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L4993bc.  v4:= temp @kind object;
  #L4993be.  v5:= length @variable v4;
  #L4993c0.  if v2 >= v5 then goto L4993f6;
  #L4993c4.  v6:= v4[v2] @kind object;
  #L4993c8.  call temp:= `resolve`(v8, v9, v6) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L4993ce.  v6:= temp @kind object;
  #L4993d0.  v7:= v4[v2] @kind object;
  #L4993d4.  if v6 == v7 then goto L4993f0;
  #L4993d8.  if v0 != 0 then goto L4993ec;
  #L4993dc.  call temp:= `clone`(v4) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4993e2.  v0:= temp @kind object;
  #L4993e4.  v4:= v0 @kind object;
  #L4993e6.  v4:= (`java.lang.reflect.Type`[]) v4 @kind object;
  #L4993ea.  v0:= 1I;
  #L4993ec.  v4[v2]:= v6 @kind object;
  #L4993f0.  v2:= v2 + 1;
  #L4993f4.  goto L4993c0;
  #L4993f6.  if v0 == 0 then goto L49940e;
  #L4993fa.  v8:= new `retrofit2.Utils$ParameterizedTypeImpl`;
  #L4993fe.  call temp:= `getRawType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L499404.  v9:= temp @kind object;
  #L499406.  call `<init>`(v8, v3, v9, v4) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L49940c.  v10:= v8 @kind object;
  #L49940e.  return v10 @kind object;
  #L499410.  v0:= instanceof @variable v10 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L499414.  if v0 == 0 then goto L499498;
  #L499418.  v10:= (`java.lang.reflect.WildcardType`) v10 @kind object;
  #L49941c.  call temp:= `getLowerBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L499422.  v0:= temp @kind object;
  #L499424.  call temp:= `getUpperBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L49942a.  v3:= temp @kind object;
  #L49942c.  v4:= length @variable v0;
  #L49942e.  if v4 != v1 then goto L499466;
  #L499432.  v3:= v0[v2] @kind object;
  #L499436.  call temp:= `resolve`(v8, v9, v3) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L49943c.  v8:= temp @kind object;
  #L49943e.  v9:= v0[v2] @kind object;
  #L499442.  if v8 == v9 then goto L499498;
  #L499446.  v9:= new `retrofit2.Utils$WildcardTypeImpl`;
  #L49944a.  v10:= new `java.lang.reflect.Type`[v1];
  #L49944e.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L499452.  v10[v2]:= v0 @kind object;
  #L499456.  v0:= new `java.lang.reflect.Type`[v1];
  #L49945a.  v0[v2]:= v8 @kind object;
  #L49945e.  call `<init>`(v9, v10, v0) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L499464.  return v9 @kind object;
  #L499466.  v0:= length @variable v3;
  #L499468.  if v0 != v1 then goto L499498;
  #L49946c.  v0:= v3[v2] @kind object;
  #L499470.  call temp:= `resolve`(v8, v9, v0) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L499476.  v8:= temp @kind object;
  #L499478.  v9:= v3[v2] @kind object;
  #L49947c.  if v8 == v9 then goto L499498;
  #L499480.  v9:= new `retrofit2.Utils$WildcardTypeImpl`;
  #L499484.  v10:= new `java.lang.reflect.Type`[v1];
  #L499488.  v10[v2]:= v8 @kind object;
  #L49948c.  v8:= `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L499490.  call `<init>`(v9, v10, v8) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L499496.  return v9 @kind object;
  #L499498.  return v10 @kind object;
  #L49949a.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49949c.  throw v8;
  catch `java.lang.Throwable` @[L499470..L499478] goto L49949a;
}
procedure `java.lang.reflect.Type` `resolveTypeVariable`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.reflect.TypeVariable` v3 @kind object) @signature `Lretrofit2/Utils;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4994bc.  call temp:= `declaringClassOf`(v3) @signature `Lretrofit2/Utils;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @kind static;
  #L4994c2.  v0:= temp @kind object;
  #L4994c4.  if v0 != 0 then goto L4994ca;
  #L4994c8.  return v3 @kind object;
  #L4994ca.  call temp:= `getGenericSupertype`(v1, v2, v0) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L4994d0.  v1:= temp @kind object;
  #L4994d2.  v2:= instanceof @variable v1 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L4994d6.  if v2 == 0 then goto L4994fc;
  #L4994da.  call temp:= `getTypeParameters`(v0) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L4994e0.  v2:= temp @kind object;
  #L4994e2.  call temp:= `indexOf`(v2, v3) @signature `Lretrofit2/Utils;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L4994e8.  v2:= temp;
  #L4994ea.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L4994ee.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L4994f4.  v1:= temp @kind object;
  #L4994f6.  v1:= v1[v2] @kind object;
  #L4994fa.  return v1 @kind object;
  #L4994fc.  return v3 @kind object;
}
procedure `void` `throwIfFatal`(`java.lang.Throwable` v1 @kind object) @signature `Lretrofit2/Utils;.throwIfFatal:(Ljava/lang/Throwable;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L4995c0.  v0:= instanceof @variable v1 @type ^`java.lang.VirtualMachineError` @kind boolean;
  #L4995c4.  if v0 != 0 then goto L4995e6;
  #L4995c8.  v0:= instanceof @variable v1 @type ^`java.lang.ThreadDeath` @kind boolean;
  #L4995cc.  if v0 != 0 then goto L4995e0;
  #L4995d0.  v0:= instanceof @variable v1 @type ^`java.lang.LinkageError` @kind boolean;
  #L4995d4.  if v0 != 0 then goto L4995da;
  #L4995d8.  return @kind void;
  #L4995da.  v1:= (`java.lang.LinkageError`) v1 @kind object;
  #L4995de.  throw v1;
  #L4995e0.  v1:= (`java.lang.ThreadDeath`) v1 @kind object;
  #L4995e4.  throw v1;
  #L4995e6.  v1:= (`java.lang.VirtualMachineError`) v1 @kind object;
  #L4995ea.  throw v1;
}
procedure `java.lang.String` `typeToString`(`java.lang.reflect.Type` v1 @kind object) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;

  #L499104.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L499108.  if v0 == 0 then goto L49911a;
  #L49910c.  v1:= (`java.lang.Class`) v1 @kind object;
  #L499110.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L499116.  v1:= temp @kind object;
  #L499118.  goto L499122;
  #L49911a.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L499120.  v1:= temp @kind object;
  #L499122.  return v1 @kind object;
}
