record `retrofit2.Response` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Object` `retrofit2.Response.body` @AccessFlag PRIVATE_FINAL;
  `okhttp3.ResponseBody` `retrofit2.Response.errorBody` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Response` `retrofit2.Response.rawResponse` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Response` v0 @kind this, `okhttp3.Response` v1 @kind object, `java.lang.Object` v2 @kind object, `okhttp3.ResponseBody` v3 @kind object) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L497998.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49799e.  v0.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` := v1 @kind object;
  #L4979a2.  v0.`retrofit2.Response.body` @type ^`java.lang.Object` := v2 @kind object;
  #L4979a6.  v0.`retrofit2.Response.errorBody` @type ^`okhttp3.ResponseBody` := v3 @kind object;
  #L4979aa.  return @kind void;
}
procedure `retrofit2.Response` `error`(`int` v5 , `okhttp3.ResponseBody` v6 @kind object) @signature `Lretrofit2/Response;.error:(ILokhttp3/ResponseBody;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L497680.  v0:= "body == null" @kind object;
  #L497684.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49768a.  v0:= 400I;
  #L49768e.  if v5 < v0 then goto L497716;
  #L497692.  v0:= new `okhttp3.Response$Builder`;
  #L497696.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L49769c.  v1:= new `retrofit2.OkHttpCall$NoContentResponseBody`;
  #L4976a0.  call temp:= `contentType`(v6) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L4976a6.  v2:= temp @kind object;
  #L4976a8.  call temp:= `contentLength`(v6) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L4976ae.  v3:= temp @kind wide;
  #L4976b0.  call `<init>`(v1, v2, v3) @signature `Lretrofit2/OkHttpCall$NoContentResponseBody;.<init>:(Lokhttp3/MediaType;J)V` @kind direct;
  #L4976b6.  call temp:= `body`(v0, v1) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L4976bc.  v0:= temp @kind object;
  #L4976be.  call temp:= `code`(v0, v5) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L4976c4.  v5:= temp @kind object;
  #L4976c6.  v0:= "Response.error()" @kind object;
  #L4976ca.  call temp:= `message`(v5, v0) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L4976d0.  v5:= temp @kind object;
  #L4976d2.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L4976d6.  call temp:= `protocol`(v5, v0) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L4976dc.  v5:= temp @kind object;
  #L4976de.  v0:= new `okhttp3.Request$Builder`;
  #L4976e2.  call `<init>`(v0) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L4976e8.  v1:= "http://localhost/" @kind object;
  #L4976ec.  call temp:= `url`(v0, v1) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L4976f2.  v0:= temp @kind object;
  #L4976f4.  call temp:= `build`(v0) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L4976fa.  v0:= temp @kind object;
  #L4976fc.  call temp:= `request`(v5, v0) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L497702.  v5:= temp @kind object;
  #L497704.  call temp:= `build`(v5) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L49770a.  v5:= temp @kind object;
  #L49770c.  call temp:= `error`(v6, v5) @signature `Lretrofit2/Response;.error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L497712.  v5:= temp @kind object;
  #L497714.  return v5 @kind object;
  #L497716.  v6:= new `java.lang.IllegalArgumentException`;
  #L49771a.  v0:= new `java.lang.StringBuilder`;
  #L49771e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L497724.  v1:= "code < 400: " @kind object;
  #L497728.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49772e.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L497734.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49773a.  v5:= temp @kind object;
  #L49773c.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L497742.  throw v6;
}
procedure `retrofit2.Response` `error`(`okhttp3.ResponseBody` v2 @kind object, `okhttp3.Response` v3 @kind object) @signature `Lretrofit2/Response;.error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L497754.  v0:= "body == null" @kind object;
  #L497758.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49775e.  v0:= "rawResponse == null" @kind object;
  #L497762.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L497768.  call temp:= `isSuccessful`(v3) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L49776e.  v0:= temp;
  #L497770.  if v0 != 0 then goto L497782;
  #L497774.  v0:= new `retrofit2.Response`;
  #L497778.  v1:= 0I;
  #L49777a.  call `<init>`(v0, v3, v1, v2) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @kind direct;
  #L497780.  return v0 @kind object;
  #L497782.  v2:= new `java.lang.IllegalArgumentException`;
  #L497786.  v3:= "rawResponse should not be successful response" @kind object;
  #L49778a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L497790.  throw v2;
}
procedure `retrofit2.Response` `success`(`int` v2 , `java.lang.Object` v3 @kind object) @signature `Lretrofit2/Response;.success:(ILjava/lang/Object;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4977a4.  v0:= 200I;
  #L4977a8.  if v2 < v0 then goto L497816;
  #L4977ac.  v0:= 300I;
  #L4977b0.  if v2 >= v0 then goto L497816;
  #L4977b4.  v0:= new `okhttp3.Response$Builder`;
  #L4977b8.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L4977be.  call temp:= `code`(v0, v2) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L4977c4.  v2:= temp @kind object;
  #L4977c6.  v0:= "Response.success()" @kind object;
  #L4977ca.  call temp:= `message`(v2, v0) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L4977d0.  v2:= temp @kind object;
  #L4977d2.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L4977d6.  call temp:= `protocol`(v2, v0) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L4977dc.  v2:= temp @kind object;
  #L4977de.  v0:= new `okhttp3.Request$Builder`;
  #L4977e2.  call `<init>`(v0) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L4977e8.  v1:= "http://localhost/" @kind object;
  #L4977ec.  call temp:= `url`(v0, v1) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L4977f2.  v0:= temp @kind object;
  #L4977f4.  call temp:= `build`(v0) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L4977fa.  v0:= temp @kind object;
  #L4977fc.  call temp:= `request`(v2, v0) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L497802.  v2:= temp @kind object;
  #L497804.  call temp:= `build`(v2) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L49780a.  v2:= temp @kind object;
  #L49780c.  call temp:= `success`(v3, v2) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L497812.  v2:= temp @kind object;
  #L497814.  return v2 @kind object;
  #L497816.  v3:= new `java.lang.IllegalArgumentException`;
  #L49781a.  v0:= new `java.lang.StringBuilder`;
  #L49781e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L497824.  v1:= "code < 200 or >= 300: " @kind object;
  #L497828.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L49782e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L497834.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L49783a.  v2:= temp @kind object;
  #L49783c.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L497842.  throw v3;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v3 @kind object) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L497854.  v0:= new `okhttp3.Response$Builder`;
  #L497858.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L49785e.  v1:= 200I;
  #L497862.  call temp:= `code`(v0, v1) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L497868.  v0:= temp @kind object;
  #L49786a.  v1:= "OK" @kind object;
  #L49786e.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L497874.  v0:= temp @kind object;
  #L497876.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L49787a.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L497880.  v0:= temp @kind object;
  #L497882.  v1:= new `okhttp3.Request$Builder`;
  #L497886.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L49788c.  v2:= "http://localhost/" @kind object;
  #L497890.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L497896.  v1:= temp @kind object;
  #L497898.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L49789e.  v1:= temp @kind object;
  #L4978a0.  call temp:= `request`(v0, v1) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L4978a6.  v0:= temp @kind object;
  #L4978a8.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L4978ae.  v0:= temp @kind object;
  #L4978b0.  call temp:= `success`(v3, v0) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L4978b6.  v3:= temp @kind object;
  #L4978b8.  return v3 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v2 @kind object, `okhttp3.Headers` v3 @kind object) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Headers;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4978cc.  v0:= "headers == null" @kind object;
  #L4978d0.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4978d6.  v0:= new `okhttp3.Response$Builder`;
  #L4978da.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L4978e0.  v1:= 200I;
  #L4978e4.  call temp:= `code`(v0, v1) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L4978ea.  v0:= temp @kind object;
  #L4978ec.  v1:= "OK" @kind object;
  #L4978f0.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L4978f6.  v0:= temp @kind object;
  #L4978f8.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L4978fc.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L497902.  v0:= temp @kind object;
  #L497904.  call temp:= `headers`(v0, v3) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L49790a.  v3:= temp @kind object;
  #L49790c.  v0:= new `okhttp3.Request$Builder`;
  #L497910.  call `<init>`(v0) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L497916.  v1:= "http://localhost/" @kind object;
  #L49791a.  call temp:= `url`(v0, v1) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L497920.  v0:= temp @kind object;
  #L497922.  call temp:= `build`(v0) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L497928.  v0:= temp @kind object;
  #L49792a.  call temp:= `request`(v3, v0) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L497930.  v3:= temp @kind object;
  #L497932.  call temp:= `build`(v3) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L497938.  v3:= temp @kind object;
  #L49793a.  call temp:= `success`(v2, v3) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L497940.  v2:= temp @kind object;
  #L497942.  return v2 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v2 @kind object, `okhttp3.Response` v3 @kind object) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L497954.  v0:= "rawResponse == null" @kind object;
  #L497958.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49795e.  call temp:= `isSuccessful`(v3) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L497964.  v0:= temp;
  #L497966.  if v0 == 0 then goto L497978;
  #L49796a.  v0:= new `retrofit2.Response`;
  #L49796e.  v1:= 0I;
  #L497970.  call `<init>`(v0, v3, v2, v1) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @kind direct;
  #L497976.  return v0 @kind object;
  #L497978.  v2:= new `java.lang.IllegalArgumentException`;
  #L49797c.  v3:= "rawResponse must be successful response" @kind object;
  #L497980.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L497986.  throw v2;
}
procedure `java.lang.Object` `body`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.body:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4975d8.  v0:= v1.`retrofit2.Response.body` @type ^`java.lang.Object` @kind object;
  #L4975dc.  return v0 @kind object;
}
procedure `int` `code`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.code:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4975b8.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L4975bc.  call temp:= `code`(v0) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L4975c2.  v0:= temp;
  #L4975c4.  return v0;
}
procedure `okhttp3.ResponseBody` `errorBody`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.errorBody:()Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497668.  v0:= v1.`retrofit2.Response.errorBody` @type ^`okhttp3.ResponseBody` @kind object;
  #L49766c.  return v0 @kind object;
}
procedure `okhttp3.Headers` `headers`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.headers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497630.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L497634.  call temp:= `headers`(v0) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L49763a.  v0:= temp @kind object;
  #L49763c.  return v0 @kind object;
}
procedure `boolean` `isSuccessful`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.isSuccessful:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497598.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L49759c.  call temp:= `isSuccessful`(v0) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L4975a2.  v0:= temp;
  #L4975a4.  return v0;
}
procedure `java.lang.String` `message`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.message:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4975f0.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L4975f4.  call temp:= `message`(v0) @signature `Lokhttp3/Response;.message:()Ljava/lang/String;` @kind virtual;
  #L4975fa.  v0:= temp @kind object;
  #L4975fc.  return v0 @kind object;
}
procedure `okhttp3.Response` `raw`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.raw:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497650.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L497654.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L497610.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L497614.  call temp:= `toString`(v0) @signature `Lokhttp3/Response;.toString:()Ljava/lang/String;` @kind virtual;
  #L49761a.  v0:= temp @kind object;
  #L49761c.  return v0 @kind object;
}
