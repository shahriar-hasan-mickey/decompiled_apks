record `retrofit2.CompletableFutureCallAdapterFactory` @kind class @AccessFlag FINAL extends `retrofit2.CallAdapter$Factory` @kind class {
}
global `retrofit2.CallAdapter$Factory` `@@retrofit2.CompletableFutureCallAdapterFactory.INSTANCE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/CompletableFutureCallAdapterFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L492ed0.  v0:= new `retrofit2.CompletableFutureCallAdapterFactory`;
  #L492ed4.  call `<init>`(v0) @signature `Lretrofit2/CompletableFutureCallAdapterFactory;.<init>:()V` @kind direct;
  #L492eda.  `@@retrofit2.CompletableFutureCallAdapterFactory.INSTANCE` @type ^`retrofit2.CallAdapter$Factory` := v0 @kind object;
  #L492ede.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.CompletableFutureCallAdapterFactory` v0 @kind this) @signature `Lretrofit2/CompletableFutureCallAdapterFactory;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L492ef0.  call `<init>`(v0) @signature `Lretrofit2/CallAdapter$Factory;.<init>:()V` @kind direct;
  #L492ef6.  return @kind void;
}
procedure `retrofit2.CallAdapter` `get`(`retrofit2.CompletableFutureCallAdapterFactory` v1 @kind this, `java.lang.reflect.Type` v2 @kind object, `java.lang.annotation.Annotation`[] v3 @kind object, `retrofit2.Retrofit` v4 @kind object) @signature `Lretrofit2/CompletableFutureCallAdapterFactory;.get:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/CallAdapter;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492e38.  call temp:= `getRawType`(v2) @signature `Lretrofit2/CallAdapter$Factory;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L492e3e.  v3:= temp @kind object;
  #L492e40.  v4:= constclass @type ^`java.util.concurrent.CompletableFuture` @kind object;
  #L492e44.  if v3 == v4 then goto L492e4c;
  #L492e48.  v2:= 0I;
  #L492e4a.  return v2 @kind object;
  #L492e4c.  v3:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L492e50.  if v3 == 0 then goto L492eae;
  #L492e54.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L492e58.  v3:= 0I;
  #L492e5a.  call temp:= `getParameterUpperBound`(v3, v2) @signature `Lretrofit2/CallAdapter$Factory;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L492e60.  v2:= temp @kind object;
  #L492e62.  call temp:= `getRawType`(v2) @signature `Lretrofit2/CallAdapter$Factory;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L492e68.  v4:= temp @kind object;
  #L492e6a.  v0:= constclass @type ^`retrofit2.Response` @kind object;
  #L492e6e.  if v4 == v0 then goto L492e7e;
  #L492e72.  v3:= new `retrofit2.CompletableFutureCallAdapterFactory$BodyCallAdapter`;
  #L492e76.  call `<init>`(v3, v2) @signature `Lretrofit2/CompletableFutureCallAdapterFactory$BodyCallAdapter;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L492e7c.  return v3 @kind object;
  #L492e7e.  v4:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L492e82.  if v4 == 0 then goto L492e9e;
  #L492e86.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L492e8a.  call temp:= `getParameterUpperBound`(v3, v2) @signature `Lretrofit2/CallAdapter$Factory;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L492e90.  v2:= temp @kind object;
  #L492e92.  v3:= new `retrofit2.CompletableFutureCallAdapterFactory$ResponseCallAdapter`;
  #L492e96.  call `<init>`(v3, v2) @signature `Lretrofit2/CompletableFutureCallAdapterFactory$ResponseCallAdapter;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L492e9c.  return v3 @kind object;
  #L492e9e.  v2:= new `java.lang.IllegalStateException`;
  #L492ea2.  v3:= "Response must be parameterized as Response<Foo> or Response<? extends Foo>" @kind object;
  #L492ea6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L492eac.  throw v2;
  #L492eae.  v2:= new `java.lang.IllegalStateException`;
  #L492eb2.  v3:= "CompletableFuture return type must be parameterized as CompletableFuture<Foo> or CompletableFuture<? extends Foo>" @kind object;
  #L492eb6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L492ebc.  throw v2;
}
