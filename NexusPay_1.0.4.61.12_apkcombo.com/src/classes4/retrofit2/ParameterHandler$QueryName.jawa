record `retrofit2.ParameterHandler$QueryName` @kind class @AccessFlag FINAL extends `retrofit2.ParameterHandler` @kind class {
  `boolean` `retrofit2.ParameterHandler$QueryName.encoded` @AccessFlag PRIVATE_FINAL;
  `retrofit2.Converter` `retrofit2.ParameterHandler$QueryName.nameConverter` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.ParameterHandler$QueryName` v0 @kind this, `retrofit2.Converter` v1 @kind object, `boolean` v2 ) @signature `Lretrofit2/ParameterHandler$QueryName;.<init>:(Lretrofit2/Converter;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4951d4.  call `<init>`(v0) @signature `Lretrofit2/ParameterHandler;.<init>:()V` @kind direct;
  #L4951da.  v0.`retrofit2.ParameterHandler$QueryName.nameConverter` @type ^`retrofit2.Converter` := v1 @kind object;
  #L4951de.  v0.`retrofit2.ParameterHandler$QueryName.encoded` @type ^`boolean` := v2 @kind boolean;
  #L4951e2.  return @kind void;
}
procedure `void` `apply`(`retrofit2.ParameterHandler$QueryName` v2 @kind this, `retrofit2.RequestBuilder` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lretrofit2/ParameterHandler$QueryName;.apply:(Lretrofit2/RequestBuilder;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4951f4.  if v4 != 0 then goto L4951fa;
  #L4951f8.  return @kind void;
  #L4951fa.  v0:= v2.`retrofit2.ParameterHandler$QueryName.nameConverter` @type ^`retrofit2.Converter` @kind object;
  #L4951fe.  call temp:= `convert`(v0, v4) @signature `Lretrofit2/Converter;.convert:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L495204.  v4:= temp @kind object;
  #L495206.  v4:= (`java.lang.String`) v4 @kind object;
  #L49520a.  v0:= 0I;
  #L49520c.  v1:= v2.`retrofit2.ParameterHandler$QueryName.encoded` @type ^`boolean` @kind boolean;
  #L495210.  call `addQueryParam`(v3, v4, v0, v1) @signature `Lretrofit2/RequestBuilder;.addQueryParam:(Ljava/lang/String;Ljava/lang/String;Z)V` @kind virtual;
  #L495216.  return @kind void;
}
