record `org.eclipse.paho.client.mqttv3.internal.MessageCatalog` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `org.eclipse.paho.client.mqttv3.internal.MessageCatalog` `@@org.eclipse.paho.client.mqttv3.internal.MessageCatalog.INSTANCE` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lorg/eclipse/paho/client/mqttv3/internal/MessageCatalog;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L383c6c.  return @kind void;
}
procedure `void` `<init>`(`org.eclipse.paho.client.mqttv3.internal.MessageCatalog` v0 @kind this) @signature `Lorg/eclipse/paho/client/mqttv3/internal/MessageCatalog;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L383c80.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L383c86.  return @kind void;
}
procedure `java.lang.String` `getMessage`(`int` v2 ) @signature `Lorg/eclipse/paho/client/mqttv3/internal/MessageCatalog;.getMessage:(I)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L383bc4.  v0:= `@@org.eclipse.paho.client.mqttv3.internal.MessageCatalog.INSTANCE` @type ^`org.eclipse.paho.client.mqttv3.internal.MessageCatalog` @kind object;
  #L383bc8.  if v0 != 0 then goto L383c30;
  #L383bcc.  v0:= "java.util.ResourceBundle" @kind object;
  #L383bd0.  call temp:= `isClassAvailable`(v0) @signature `Lorg/eclipse/paho/client/mqttv3/internal/ExceptionHelper;.isClassAvailable:(Ljava/lang/String;)Z` @kind static;
  #L383bd6.  v0:= temp;
  #L383bd8.  v1:= "" @kind object;
  #L383bdc.  if v0 == 0 then goto L383c00;
  #L383be0.  v0:= "org.eclipse.paho.client.mqttv3.internal.ResourceBundleCatalog" @kind object;
  #L383be4.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L383bea.  v0:= temp @kind object;
  #L383bec.  call temp:= `newInstance`(v0) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L383bf2.  v0:= temp @kind object;
  #L383bf4.  v0:= (`org.eclipse.paho.client.mqttv3.internal.MessageCatalog`) v0 @kind object;
  #L383bf8.  `@@org.eclipse.paho.client.mqttv3.internal.MessageCatalog.INSTANCE` @type ^`org.eclipse.paho.client.mqttv3.internal.MessageCatalog` := v0 @kind object;
  #L383bfc.  goto L383c30;
  #L383bfe.  return v1 @kind object;
  #L383c00.  v0:= "org.eclipse.paho.client.mqttv3.internal.MIDPCatalog" @kind object;
  #L383c04.  call temp:= `isClassAvailable`(v0) @signature `Lorg/eclipse/paho/client/mqttv3/internal/ExceptionHelper;.isClassAvailable:(Ljava/lang/String;)Z` @kind static;
  #L383c0a.  v0:= temp;
  #L383c0c.  if v0 == 0 then goto L383c30;
  #L383c10.  v0:= "org.eclipse.paho.client.mqttv3.internal.MIDPCatalog" @kind object;
  #L383c14.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L383c1a.  v0:= temp @kind object;
  #L383c1c.  call temp:= `newInstance`(v0) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L383c22.  v0:= temp @kind object;
  #L383c24.  v0:= (`org.eclipse.paho.client.mqttv3.internal.MessageCatalog`) v0 @kind object;
  #L383c28.  `@@org.eclipse.paho.client.mqttv3.internal.MessageCatalog.INSTANCE` @type ^`org.eclipse.paho.client.mqttv3.internal.MessageCatalog` := v0 @kind object;
  #L383c2c.  goto L383c30;
  #L383c2e.  return v1 @kind object;
  #L383c30.  v0:= `@@org.eclipse.paho.client.mqttv3.internal.MessageCatalog.INSTANCE` @type ^`org.eclipse.paho.client.mqttv3.internal.MessageCatalog` @kind object;
  #L383c34.  call temp:= `getLocalizedMessage`(v0, v2) @signature `Lorg/eclipse/paho/client/mqttv3/internal/MessageCatalog;.getLocalizedMessage:(I)Ljava/lang/String;` @kind virtual;
  #L383c3a.  v2:= temp @kind object;
  #L383c3c.  return v2 @kind object;
  catch `java.lang.Exception` @[L383be0..L383bfc] goto L383bfe;
  catch `java.lang.Exception` @[L383c10..L383c2c] goto L383c2e;
}
procedure `java.lang.String` `getLocalizedMessage`(`int` v0 ) @signature `Lorg/eclipse/paho/client/mqttv3/internal/MessageCatalog;.getLocalizedMessage:(I)Ljava/lang/String;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
