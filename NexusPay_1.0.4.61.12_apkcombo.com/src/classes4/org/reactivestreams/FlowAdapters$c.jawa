record `org.reactivestreams.FlowAdapters$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.Flow$Subscriber` @kind interface {
  `org.reactivestreams.Subscriber` `org.reactivestreams.FlowAdapters$c.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`org.reactivestreams.FlowAdapters$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$c;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43a4a8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43a4ae.  v0.`org.reactivestreams.FlowAdapters$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L43a4b2.  return @kind void;
}
procedure `void` `onComplete`(`org.reactivestreams.FlowAdapters$c` v1 @kind this) @signature `Lorg/reactivestreams/FlowAdapters$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a4c4.  v0:= v1.`org.reactivestreams.FlowAdapters$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43a4c8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43a4ce.  return @kind void;
}
procedure `void` `onError`(`org.reactivestreams.FlowAdapters$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a4e0.  v0:= v1.`org.reactivestreams.FlowAdapters$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43a4e4.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a4ea.  return @kind void;
}
procedure `void` `onNext`(`org.reactivestreams.FlowAdapters$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a4fc.  v0:= v1.`org.reactivestreams.FlowAdapters$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43a500.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43a506.  return @kind void;
}
procedure `void` `onSubscribe`(`org.reactivestreams.FlowAdapters$c` v2 @kind this, `java.util.concurrent.Flow$Subscription` v3 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$c;.onSubscribe:(Ljava/util/concurrent/Flow$Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a518.  v0:= v2.`org.reactivestreams.FlowAdapters$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43a51c.  if v3 != 0 then goto L43a524;
  #L43a520.  v3:= 0I;
  #L43a522.  goto L43a530;
  #L43a524.  v1:= new `org.reactivestreams.FlowAdapters$h`;
  #L43a528.  call `<init>`(v1, v3) @signature `Lorg/reactivestreams/FlowAdapters$h;.<init>:(Ljava/util/concurrent/Flow$Subscription;)V` @kind direct;
  #L43a52e.  v3:= v1 @kind object;
  #L43a530.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43a536.  return @kind void;
}
