record `org.reactivestreams.FlowAdapters$g` @kind class @AccessFlag FINAL extends `org.reactivestreams.Subscriber` @kind interface {
  `java.util.concurrent.Flow$Subscriber` `org.reactivestreams.FlowAdapters$g.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`org.reactivestreams.FlowAdapters$g` v0 @kind this, `java.util.concurrent.Flow$Subscriber` v1 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$g;.<init>:(Ljava/util/concurrent/Flow$Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43a6b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43a6be.  v0.`org.reactivestreams.FlowAdapters$g.a` @type ^`java.util.concurrent.Flow$Subscriber` := v1 @kind object;
  #L43a6c2.  return @kind void;
}
procedure `void` `onComplete`(`org.reactivestreams.FlowAdapters$g` v1 @kind this) @signature `Lorg/reactivestreams/FlowAdapters$g;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a6d4.  v0:= v1.`org.reactivestreams.FlowAdapters$g.a` @type ^`java.util.concurrent.Flow$Subscriber` @kind object;
  #L43a6d8.  call `onComplete`(v0) @signature `Ljava/util/concurrent/Flow$Subscriber;.onComplete:()V` @kind interface;
  #L43a6de.  return @kind void;
}
procedure `void` `onError`(`org.reactivestreams.FlowAdapters$g` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$g;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a6f0.  v0:= v1.`org.reactivestreams.FlowAdapters$g.a` @type ^`java.util.concurrent.Flow$Subscriber` @kind object;
  #L43a6f4.  call `onError`(v0, v2) @signature `Ljava/util/concurrent/Flow$Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a6fa.  return @kind void;
}
procedure `void` `onNext`(`org.reactivestreams.FlowAdapters$g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$g;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a70c.  v0:= v1.`org.reactivestreams.FlowAdapters$g.a` @type ^`java.util.concurrent.Flow$Subscriber` @kind object;
  #L43a710.  call `onNext`(v0, v2) @signature `Ljava/util/concurrent/Flow$Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43a716.  return @kind void;
}
procedure `void` `onSubscribe`(`org.reactivestreams.FlowAdapters$g` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$g;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a728.  v0:= v2.`org.reactivestreams.FlowAdapters$g.a` @type ^`java.util.concurrent.Flow$Subscriber` @kind object;
  #L43a72c.  if v3 != 0 then goto L43a734;
  #L43a730.  v3:= 0I;
  #L43a732.  goto L43a740;
  #L43a734.  v1:= new `org.reactivestreams.FlowAdapters$d`;
  #L43a738.  call `<init>`(v1, v3) @signature `Lorg/reactivestreams/FlowAdapters$d;.<init>:(Lorg/reactivestreams/Subscription;)V` @kind direct;
  #L43a73e.  v3:= v1 @kind object;
  #L43a740.  call `onSubscribe`(v0, v3) @signature `Ljava/util/concurrent/Flow$Subscriber;.onSubscribe:(Ljava/util/concurrent/Flow$Subscription;)V` @kind interface;
  #L43a746.  return @kind void;
}
