record `org.reactivestreams.FlowAdapters$f` @kind class @AccessFlag FINAL extends `org.reactivestreams.Processor` @kind interface {
  `java.util.concurrent.Flow$Processor` `org.reactivestreams.FlowAdapters$f.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`org.reactivestreams.FlowAdapters$f` v0 @kind this, `java.util.concurrent.Flow$Processor` v1 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$f;.<init>:(Ljava/util/concurrent/Flow$Processor;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43a5e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43a5ee.  v0.`org.reactivestreams.FlowAdapters$f.a` @type ^`java.util.concurrent.Flow$Processor` := v1 @kind object;
  #L43a5f2.  return @kind void;
}
procedure `void` `onComplete`(`org.reactivestreams.FlowAdapters$f` v1 @kind this) @signature `Lorg/reactivestreams/FlowAdapters$f;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a604.  v0:= v1.`org.reactivestreams.FlowAdapters$f.a` @type ^`java.util.concurrent.Flow$Processor` @kind object;
  #L43a608.  call `onComplete`(v0) @signature `Ljava/util/concurrent/Flow$Processor;.onComplete:()V` @kind interface;
  #L43a60e.  return @kind void;
}
procedure `void` `onError`(`org.reactivestreams.FlowAdapters$f` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$f;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a620.  v0:= v1.`org.reactivestreams.FlowAdapters$f.a` @type ^`java.util.concurrent.Flow$Processor` @kind object;
  #L43a624.  call `onError`(v0, v2) @signature `Ljava/util/concurrent/Flow$Processor;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43a62a.  return @kind void;
}
procedure `void` `onNext`(`org.reactivestreams.FlowAdapters$f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$f;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a63c.  v0:= v1.`org.reactivestreams.FlowAdapters$f.a` @type ^`java.util.concurrent.Flow$Processor` @kind object;
  #L43a640.  call `onNext`(v0, v2) @signature `Ljava/util/concurrent/Flow$Processor;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43a646.  return @kind void;
}
procedure `void` `onSubscribe`(`org.reactivestreams.FlowAdapters$f` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$f;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a658.  v0:= v2.`org.reactivestreams.FlowAdapters$f.a` @type ^`java.util.concurrent.Flow$Processor` @kind object;
  #L43a65c.  if v3 != 0 then goto L43a664;
  #L43a660.  v3:= 0I;
  #L43a662.  goto L43a670;
  #L43a664.  v1:= new `org.reactivestreams.FlowAdapters$d`;
  #L43a668.  call `<init>`(v1, v3) @signature `Lorg/reactivestreams/FlowAdapters$d;.<init>:(Lorg/reactivestreams/Subscription;)V` @kind direct;
  #L43a66e.  v3:= v1 @kind object;
  #L43a670.  call `onSubscribe`(v0, v3) @signature `Ljava/util/concurrent/Flow$Processor;.onSubscribe:(Ljava/util/concurrent/Flow$Subscription;)V` @kind interface;
  #L43a676.  return @kind void;
}
procedure `void` `subscribe`(`org.reactivestreams.FlowAdapters$f` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$f;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a688.  v0:= v2.`org.reactivestreams.FlowAdapters$f.a` @type ^`java.util.concurrent.Flow$Processor` @kind object;
  #L43a68c.  if v3 != 0 then goto L43a694;
  #L43a690.  v3:= 0I;
  #L43a692.  goto L43a6a0;
  #L43a694.  v1:= new `org.reactivestreams.FlowAdapters$c`;
  #L43a698.  call `<init>`(v1, v3) @signature `Lorg/reactivestreams/FlowAdapters$c;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L43a69e.  v3:= v1 @kind object;
  #L43a6a0.  call `subscribe`(v0, v3) @signature `Ljava/util/concurrent/Flow$Processor;.subscribe:(Ljava/util/concurrent/Flow$Subscriber;)V` @kind interface;
  #L43a6a6.  return @kind void;
}
