record `org.reactivestreams.FlowAdapters$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.Flow$Publisher` @kind interface {
  `org.reactivestreams.Publisher` `org.reactivestreams.FlowAdapters$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`org.reactivestreams.FlowAdapters$a` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$a;.<init>:(Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43a38c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43a392.  v0.`org.reactivestreams.FlowAdapters$a.a` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L43a396.  return @kind void;
}
procedure `void` `subscribe`(`org.reactivestreams.FlowAdapters$a` v2 @kind this, `java.util.concurrent.Flow$Subscriber` v3 @kind object) @signature `Lorg/reactivestreams/FlowAdapters$a;.subscribe:(Ljava/util/concurrent/Flow$Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a3a8.  v0:= v2.`org.reactivestreams.FlowAdapters$a.a` @type ^`org.reactivestreams.Publisher` @kind object;
  #L43a3ac.  if v3 != 0 then goto L43a3b4;
  #L43a3b0.  v3:= 0I;
  #L43a3b2.  goto L43a3c0;
  #L43a3b4.  v1:= new `org.reactivestreams.FlowAdapters$g`;
  #L43a3b8.  call `<init>`(v1, v3) @signature `Lorg/reactivestreams/FlowAdapters$g;.<init>:(Ljava/util/concurrent/Flow$Subscriber;)V` @kind direct;
  #L43a3be.  v3:= v1 @kind object;
  #L43a3c0.  call `subscribe`(v0, v3) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L43a3c6.  return @kind void;
}
