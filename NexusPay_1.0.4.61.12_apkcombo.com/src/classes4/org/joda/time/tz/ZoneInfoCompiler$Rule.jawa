record `org.joda.time.tz.ZoneInfoCompiler$Rule` @kind class @AccessFlag  {
  `org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear` `org.joda.time.tz.ZoneInfoCompiler$Rule.iDateTimeOfYear` @AccessFlag PUBLIC_FINAL;
  `int` `org.joda.time.tz.ZoneInfoCompiler$Rule.iFromYear` @AccessFlag PUBLIC_FINAL;
  `java.lang.String` `org.joda.time.tz.ZoneInfoCompiler$Rule.iLetterS` @AccessFlag PUBLIC_FINAL;
  `java.lang.String` `org.joda.time.tz.ZoneInfoCompiler$Rule.iName` @AccessFlag PUBLIC_FINAL;
  `int` `org.joda.time.tz.ZoneInfoCompiler$Rule.iSaveMillis` @AccessFlag PUBLIC_FINAL;
  `int` `org.joda.time.tz.ZoneInfoCompiler$Rule.iToYear` @AccessFlag PUBLIC_FINAL;
  `java.lang.String` `org.joda.time.tz.ZoneInfoCompiler$Rule.iType` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`org.joda.time.tz.ZoneInfoCompiler$Rule` v2 @kind this, `java.util.StringTokenizer` v3 @kind object) @signature `Lorg/joda/time/tz/ZoneInfoCompiler$Rule;.<init>:(Ljava/util/StringTokenizer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3cf66c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cf672.  call temp:= `countTokens`(v3) @signature `Ljava/util/StringTokenizer;.countTokens:()I` @kind virtual;
  #L3cf678.  v0:= temp;
  #L3cf67a.  v1:= 6I;
  #L3cf67c.  if v0 < v1 then goto L3cf722;
  #L3cf680.  call temp:= `nextToken`(v3) @signature `Ljava/util/StringTokenizer;.nextToken:()Ljava/lang/String;` @kind virtual;
  #L3cf686.  v0:= temp @kind object;
  #L3cf688.  call temp:= `intern`(v0) @signature `Ljava/lang/String;.intern:()Ljava/lang/String;` @kind virtual;
  #L3cf68e.  v0:= temp @kind object;
  #L3cf690.  v2.`org.joda.time.tz.ZoneInfoCompiler$Rule.iName` @type ^`java.lang.String` := v0 @kind object;
  #L3cf694.  call temp:= `nextToken`(v3) @signature `Ljava/util/StringTokenizer;.nextToken:()Ljava/lang/String;` @kind virtual;
  #L3cf69a.  v0:= temp @kind object;
  #L3cf69c.  v1:= 0I;
  #L3cf69e.  call temp:= `parseYear`(v0, v1) @signature `Lorg/joda/time/tz/ZoneInfoCompiler;.parseYear:(Ljava/lang/String;I)I` @kind static;
  #L3cf6a4.  v0:= temp;
  #L3cf6a6.  v2.`org.joda.time.tz.ZoneInfoCompiler$Rule.iFromYear` @type ^`int` := v0;
  #L3cf6aa.  call temp:= `nextToken`(v3) @signature `Ljava/util/StringTokenizer;.nextToken:()Ljava/lang/String;` @kind virtual;
  #L3cf6b0.  v0:= temp @kind object;
  #L3cf6b2.  v1:= v2.`org.joda.time.tz.ZoneInfoCompiler$Rule.iFromYear` @type ^`int`;
  #L3cf6b6.  call temp:= `parseYear`(v0, v1) @signature `Lorg/joda/time/tz/ZoneInfoCompiler;.parseYear:(Ljava/lang/String;I)I` @kind static;
  #L3cf6bc.  v0:= temp;
  #L3cf6be.  v2.`org.joda.time.tz.ZoneInfoCompiler$Rule.iToYear` @type ^`int` := v0;
  #L3cf6c2.  v1:= v2.`org.joda.time.tz.ZoneInfoCompiler$Rule.iFromYear` @type ^`int`;
  #L3cf6c6.  if v0 < v1 then goto L3cf716;
  #L3cf6ca.  call temp:= `nextToken`(v3) @signature `Ljava/util/StringTokenizer;.nextToken:()Ljava/lang/String;` @kind virtual;
  #L3cf6d0.  v0:= temp @kind object;
  #L3cf6d2.  call temp:= `parseOptional`(v0) @signature `Lorg/joda/time/tz/ZoneInfoCompiler;.parseOptional:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3cf6d8.  v0:= temp @kind object;
  #L3cf6da.  v2.`org.joda.time.tz.ZoneInfoCompiler$Rule.iType` @type ^`java.lang.String` := v0 @kind object;
  #L3cf6de.  v0:= new `org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear`;
  #L3cf6e2.  call `<init>`(v0, v3) @signature `Lorg/joda/time/tz/ZoneInfoCompiler$DateTimeOfYear;.<init>:(Ljava/util/StringTokenizer;)V` @kind direct;
  #L3cf6e8.  v2.`org.joda.time.tz.ZoneInfoCompiler$Rule.iDateTimeOfYear` @type ^`org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear` := v0 @kind object;
  #L3cf6ec.  call temp:= `nextToken`(v3) @signature `Ljava/util/StringTokenizer;.nextToken:()Ljava/lang/String;` @kind virtual;
  #L3cf6f2.  v0:= temp @kind object;
  #L3cf6f4.  call temp:= `parseTime`(v0) @signature `Lorg/joda/time/tz/ZoneInfoCompiler;.parseTime:(Ljava/lang/String;)I` @kind static;
  #L3cf6fa.  v0:= temp;
  #L3cf6fc.  v2.`org.joda.time.tz.ZoneInfoCompiler$Rule.iSaveMillis` @type ^`int` := v0;
  #L3cf700.  call temp:= `nextToken`(v3) @signature `Ljava/util/StringTokenizer;.nextToken:()Ljava/lang/String;` @kind virtual;
  #L3cf706.  v3:= temp @kind object;
  #L3cf708.  call temp:= `parseOptional`(v3) @signature `Lorg/joda/time/tz/ZoneInfoCompiler;.parseOptional:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3cf70e.  v3:= temp @kind object;
  #L3cf710.  v2.`org.joda.time.tz.ZoneInfoCompiler$Rule.iLetterS` @type ^`java.lang.String` := v3 @kind object;
  #L3cf714.  return @kind void;
  #L3cf716.  v3:= new `java.lang.IllegalArgumentException`;
  #L3cf71a.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3cf720.  throw v3;
  #L3cf722.  v3:= new `java.lang.IllegalArgumentException`;
  #L3cf726.  v0:= "Attempting to create a Rule from an incomplete tokenizer" @kind object;
  #L3cf72a.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cf730.  throw v3;
}
procedure `java.lang.String` `formatName`(`org.joda.time.tz.ZoneInfoCompiler$Rule` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/joda/time/tz/ZoneInfoCompiler$Rule;.formatName:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3cf4e0.  v0:= 47I;
  #L3cf4e4.  call temp:= `indexOf`(v4, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L3cf4ea.  v0:= temp;
  #L3cf4ec.  v1:= 0I;
  #L3cf4ee.  if v0 <= 0 then goto L3cf522;
  #L3cf4f2.  v2:= v3.`org.joda.time.tz.ZoneInfoCompiler$Rule.iSaveMillis` @type ^`int`;
  #L3cf4f6.  if v2 != 0 then goto L3cf50c;
  #L3cf4fa.  call temp:= `substring`(v4, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3cf500.  v4:= temp @kind object;
  #L3cf502.  call temp:= `intern`(v4) @signature `Ljava/lang/String;.intern:()Ljava/lang/String;` @kind virtual;
  #L3cf508.  v4:= temp @kind object;
  #L3cf50a.  return v4 @kind object;
  #L3cf50c.  v0:= v0 + 1;
  #L3cf510.  call temp:= `substring`(v4, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3cf516.  v4:= temp @kind object;
  #L3cf518.  call temp:= `intern`(v4) @signature `Ljava/lang/String;.intern:()Ljava/lang/String;` @kind virtual;
  #L3cf51e.  v4:= temp @kind object;
  #L3cf520.  return v4 @kind object;
  #L3cf522.  v0:= "%s" @kind object;
  #L3cf526.  call temp:= `indexOf`(v4, v0) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L3cf52c.  v0:= temp;
  #L3cf52e.  if v0 >= 0 then goto L3cf534;
  #L3cf532.  return v4 @kind object;
  #L3cf534.  call temp:= `substring`(v4, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3cf53a.  v1:= temp @kind object;
  #L3cf53c.  v0:= v0 + 2;
  #L3cf540.  call temp:= `substring`(v4, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3cf546.  v4:= temp @kind object;
  #L3cf548.  v0:= v3.`org.joda.time.tz.ZoneInfoCompiler$Rule.iLetterS` @type ^`java.lang.String` @kind object;
  #L3cf54c.  if v0 != 0 then goto L3cf55a;
  #L3cf550.  call temp:= `concat`(v1, v4) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L3cf556.  v4:= temp @kind object;
  #L3cf558.  goto L3cf582;
  #L3cf55a.  v0:= new `java.lang.StringBuilder`;
  #L3cf55e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cf564.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf56a.  v1:= v3.`org.joda.time.tz.ZoneInfoCompiler$Rule.iLetterS` @type ^`java.lang.String` @kind object;
  #L3cf56e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf574.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf57a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cf580.  v4:= temp @kind object;
  #L3cf582.  call temp:= `intern`(v4) @signature `Ljava/lang/String;.intern:()Ljava/lang/String;` @kind virtual;
  #L3cf588.  v4:= temp @kind object;
  #L3cf58a.  return v4 @kind object;
}
procedure `void` `addRecurring`(`org.joda.time.tz.ZoneInfoCompiler$Rule` v6 @kind this, `org.joda.time.tz.DateTimeZoneBuilder` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lorg/joda/time/tz/ZoneInfoCompiler$Rule;.addRecurring:(Lorg/joda/time/tz/DateTimeZoneBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3cf744.  call temp:= `formatName`(v6, v8) @signature `Lorg/joda/time/tz/ZoneInfoCompiler$Rule;.formatName:(Ljava/lang/String;)Ljava/lang/String;` @kind direct;
  #L3cf74a.  v2:= temp @kind object;
  #L3cf74c.  v0:= v6.`org.joda.time.tz.ZoneInfoCompiler$Rule.iDateTimeOfYear` @type ^`org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear` @kind object;
  #L3cf750.  v3:= v6.`org.joda.time.tz.ZoneInfoCompiler$Rule.iSaveMillis` @type ^`int`;
  #L3cf754.  v4:= v6.`org.joda.time.tz.ZoneInfoCompiler$Rule.iFromYear` @type ^`int`;
  #L3cf758.  v5:= v6.`org.joda.time.tz.ZoneInfoCompiler$Rule.iToYear` @type ^`int`;
  #L3cf75c.  v1:= v7 @kind object;
  #L3cf75e.  call `addRecurring`(v0, v1, v2, v3, v4, v5) @signature `Lorg/joda/time/tz/ZoneInfoCompiler$DateTimeOfYear;.addRecurring:(Lorg/joda/time/tz/DateTimeZoneBuilder;Ljava/lang/String;III)V` @kind virtual;
  #L3cf764.  return @kind void;
}
procedure `java.lang.String` `toString`(`org.joda.time.tz.ZoneInfoCompiler$Rule` v3 @kind this) @signature `Lorg/joda/time/tz/ZoneInfoCompiler$Rule;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cf59c.  v0:= new `java.lang.StringBuilder`;
  #L3cf5a0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cf5a6.  v1:= "[Rule]\nName: " @kind object;
  #L3cf5aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf5b0.  v1:= v3.`org.joda.time.tz.ZoneInfoCompiler$Rule.iName` @type ^`java.lang.String` @kind object;
  #L3cf5b4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf5ba.  v1:= "\n" @kind object;
  #L3cf5be.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf5c4.  v2:= "FromYear: " @kind object;
  #L3cf5c8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf5ce.  v2:= v3.`org.joda.time.tz.ZoneInfoCompiler$Rule.iFromYear` @type ^`int`;
  #L3cf5d2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf5d8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf5de.  v2:= "ToYear: " @kind object;
  #L3cf5e2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf5e8.  v2:= v3.`org.joda.time.tz.ZoneInfoCompiler$Rule.iToYear` @type ^`int`;
  #L3cf5ec.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf5f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf5f8.  v2:= "Type: " @kind object;
  #L3cf5fc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf602.  v2:= v3.`org.joda.time.tz.ZoneInfoCompiler$Rule.iType` @type ^`java.lang.String` @kind object;
  #L3cf606.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf60c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf612.  v2:= v3.`org.joda.time.tz.ZoneInfoCompiler$Rule.iDateTimeOfYear` @type ^`org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear` @kind object;
  #L3cf616.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf61c.  v2:= "SaveMillis: " @kind object;
  #L3cf620.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf626.  v2:= v3.`org.joda.time.tz.ZoneInfoCompiler$Rule.iSaveMillis` @type ^`int`;
  #L3cf62a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf630.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf636.  v2:= "LetterS: " @kind object;
  #L3cf63a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf640.  v2:= v3.`org.joda.time.tz.ZoneInfoCompiler$Rule.iLetterS` @type ^`java.lang.String` @kind object;
  #L3cf644.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf64a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cf650.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cf656.  v0:= temp @kind object;
  #L3cf658.  return v0 @kind object;
}
