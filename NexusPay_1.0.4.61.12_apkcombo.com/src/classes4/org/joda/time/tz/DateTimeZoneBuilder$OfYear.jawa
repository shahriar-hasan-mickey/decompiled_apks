record `org.joda.time.tz.DateTimeZoneBuilder$OfYear` @kind class @AccessFlag FINAL {
  `boolean` `org.joda.time.tz.DateTimeZoneBuilder$OfYear.iAdvance` @AccessFlag FINAL;
  `int` `org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfMonth` @AccessFlag FINAL;
  `int` `org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfWeek` @AccessFlag FINAL;
  `int` `org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMillisOfDay` @AccessFlag FINAL;
  `char` `org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMode` @AccessFlag FINAL;
  `int` `org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMonthOfYear` @AccessFlag FINAL;
}
procedure `void` `<init>`(`org.joda.time.tz.DateTimeZoneBuilder$OfYear` v1 @kind this, `char` v2 , `int` v3 , `int` v4 , `int` v5 , `boolean` v6 , `int` v7 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.<init>:(CIIIZI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3ccf8c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ccf92.  v0:= 117I;
  #L3ccf96.  if v2 == v0 then goto L3ccfda;
  #L3ccf9a.  v0:= 119I;
  #L3ccf9e.  if v2 == v0 then goto L3ccfda;
  #L3ccfa2.  v0:= 115I;
  #L3ccfa6.  if v2 != v0 then goto L3ccfac;
  #L3ccfaa.  goto L3ccfda;
  #L3ccfac.  v3:= new `java.lang.IllegalArgumentException`;
  #L3ccfb0.  v4:= new `java.lang.StringBuilder`;
  #L3ccfb4.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ccfba.  v5:= "Unknown mode: " @kind object;
  #L3ccfbe.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ccfc4.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ccfca.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ccfd0.  v2:= temp @kind object;
  #L3ccfd2.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ccfd8.  throw v3;
  #L3ccfda.  v1.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMode` @type ^`char` := v2 @kind char;
  #L3ccfde.  v1.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMonthOfYear` @type ^`int` := v3;
  #L3ccfe2.  v1.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfMonth` @type ^`int` := v4;
  #L3ccfe6.  v1.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfWeek` @type ^`int` := v5;
  #L3ccfea.  v1.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iAdvance` @type ^`boolean` := v6 @kind boolean;
  #L3ccfee.  v1.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMillisOfDay` @type ^`int` := v7;
  #L3ccff2.  return @kind void;
}
procedure `org.joda.time.tz.DateTimeZoneBuilder$OfYear` `readFrom`(`java.io.DataInput` v10 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.readFrom:(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3ccf38.  v7:= new `org.joda.time.tz.DateTimeZoneBuilder$OfYear`;
  #L3ccf3c.  call temp:= `readUnsignedByte`(v10) @signature `Ljava/io/DataInput;.readUnsignedByte:()I` @kind interface;
  #L3ccf42.  v0:= temp;
  #L3ccf44.  v1:= (`char`) v0 @kind i2c;
  #L3ccf46.  call temp:= `readUnsignedByte`(v10) @signature `Ljava/io/DataInput;.readUnsignedByte:()I` @kind interface;
  #L3ccf4c.  v2:= temp;
  #L3ccf4e.  call temp:= `readByte`(v10) @signature `Ljava/io/DataInput;.readByte:()B` @kind interface;
  #L3ccf54.  v3:= temp;
  #L3ccf56.  call temp:= `readUnsignedByte`(v10) @signature `Ljava/io/DataInput;.readUnsignedByte:()I` @kind interface;
  #L3ccf5c.  v4:= temp;
  #L3ccf5e.  call temp:= `readBoolean`(v10) @signature `Ljava/io/DataInput;.readBoolean:()Z` @kind interface;
  #L3ccf64.  v5:= temp;
  #L3ccf66.  call temp:= `readMillis`(v10) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.readMillis:(Ljava/io/DataInput;)J` @kind static;
  #L3ccf6c.  v8:= temp @kind wide;
  #L3ccf6e.  v6:= (`int`) v8 @kind l2i;
  #L3ccf70.  v0:= v7 @kind object;
  #L3ccf72.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.<init>:(CIIIZI)V` @kind direct;
  #L3ccf78.  return v7 @kind object;
}
procedure `long` `setDayOfMonth`(`org.joda.time.tz.DateTimeZoneBuilder$OfYear` v2 @kind this, `org.joda.time.Chronology` v3 @kind object, `long` v4 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfMonth:(Lorg/joda/time/Chronology;J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3cccf8.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfMonth` @type ^`int`;
  #L3cccfc.  if v0 < 0 then goto L3ccd16;
  #L3ccd00.  call temp:= `dayOfMonth`(v3) @signature `Lorg/joda/time/Chronology;.dayOfMonth:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccd06.  v3:= temp @kind object;
  #L3ccd08.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfMonth` @type ^`int`;
  #L3ccd0c.  call temp:= `set`(v3, v4, v0) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3ccd12.  v3:= temp @kind wide;
  #L3ccd14.  goto L3ccd4c;
  #L3ccd16.  call temp:= `dayOfMonth`(v3) @signature `Lorg/joda/time/Chronology;.dayOfMonth:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccd1c.  v0:= temp @kind object;
  #L3ccd1e.  v1:= 1I;
  #L3ccd20.  call temp:= `set`(v0, v4, v1) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3ccd26.  v4:= temp @kind wide;
  #L3ccd28.  call temp:= `monthOfYear`(v3) @signature `Lorg/joda/time/Chronology;.monthOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccd2e.  v0:= temp @kind object;
  #L3ccd30.  call temp:= `add`(v0, v4, v1) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3ccd36.  v4:= temp @kind wide;
  #L3ccd38.  call temp:= `dayOfMonth`(v3) @signature `Lorg/joda/time/Chronology;.dayOfMonth:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccd3e.  v3:= temp @kind object;
  #L3ccd40.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfMonth` @type ^`int`;
  #L3ccd44.  call temp:= `add`(v3, v4, v0) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3ccd4a.  v3:= temp @kind wide;
  #L3ccd4c.  return v3 @kind wide;
}
procedure `long` `setDayOfMonthNext`(`org.joda.time.tz.DateTimeZoneBuilder$OfYear` v3 @kind this, `org.joda.time.Chronology` v4 @kind object, `long` v5 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfMonthNext:(Lorg/joda/time/Chronology;J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3ccd60.  call temp:= `setDayOfMonth`(v3, v4, v5) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfMonth:(Lorg/joda/time/Chronology;J)J` @kind direct;
  #L3ccd66.  v4:= temp @kind wide;
  #L3ccd68.  goto L3ccdb2;
  #L3ccd6a.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L3ccd6c.  v1:= v3.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMonthOfYear` @type ^`int`;
  #L3ccd70.  v2:= 2I;
  #L3ccd72.  if v1 != v2 then goto L3ccdb4;
  #L3ccd76.  v1:= v3.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfMonth` @type ^`int`;
  #L3ccd7a.  v2:= 29I;
  #L3ccd7e.  if v1 != v2 then goto L3ccdb4;
  #L3ccd82.  call temp:= `year`(v4) @signature `Lorg/joda/time/Chronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccd88.  v0:= temp @kind object;
  #L3ccd8a.  call temp:= `isLeap`(v0, v5) @signature `Lorg/joda/time/DateTimeField;.isLeap:(J)Z` @kind virtual;
  #L3ccd90.  v0:= temp;
  #L3ccd92.  if v0 != 0 then goto L3ccdaa;
  #L3ccd96.  call temp:= `year`(v4) @signature `Lorg/joda/time/Chronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccd9c.  v0:= temp @kind object;
  #L3ccd9e.  v1:= 1I;
  #L3ccda0.  call temp:= `add`(v0, v5, v1) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3ccda6.  v5:= temp @kind wide;
  #L3ccda8.  goto L3ccd82;
  #L3ccdaa.  call temp:= `setDayOfMonth`(v3, v4, v5) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfMonth:(Lorg/joda/time/Chronology;J)J` @kind direct;
  #L3ccdb0.  v4:= temp @kind wide;
  #L3ccdb2.  return v4 @kind wide;
  #L3ccdb4.  throw v0;
  catch `java.lang.IllegalArgumentException` @[L3ccd60..L3ccd68] goto L3ccd6a;
}
procedure `long` `setDayOfMonthPrevious`(`org.joda.time.tz.DateTimeZoneBuilder$OfYear` v3 @kind this, `org.joda.time.Chronology` v4 @kind object, `long` v5 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfMonthPrevious:(Lorg/joda/time/Chronology;J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3ccdd8.  call temp:= `setDayOfMonth`(v3, v4, v5) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfMonth:(Lorg/joda/time/Chronology;J)J` @kind direct;
  #L3ccdde.  v4:= temp @kind wide;
  #L3ccde0.  goto L3cce2a;
  #L3ccde2.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L3ccde4.  v1:= v3.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMonthOfYear` @type ^`int`;
  #L3ccde8.  v2:= 2I;
  #L3ccdea.  if v1 != v2 then goto L3cce2c;
  #L3ccdee.  v1:= v3.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfMonth` @type ^`int`;
  #L3ccdf2.  v2:= 29I;
  #L3ccdf6.  if v1 != v2 then goto L3cce2c;
  #L3ccdfa.  call temp:= `year`(v4) @signature `Lorg/joda/time/Chronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3cce00.  v0:= temp @kind object;
  #L3cce02.  call temp:= `isLeap`(v0, v5) @signature `Lorg/joda/time/DateTimeField;.isLeap:(J)Z` @kind virtual;
  #L3cce08.  v0:= temp;
  #L3cce0a.  if v0 != 0 then goto L3cce22;
  #L3cce0e.  call temp:= `year`(v4) @signature `Lorg/joda/time/Chronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3cce14.  v0:= temp @kind object;
  #L3cce16.  v1:= -1I;
  #L3cce18.  call temp:= `add`(v0, v5, v1) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3cce1e.  v5:= temp @kind wide;
  #L3cce20.  goto L3ccdfa;
  #L3cce22.  call temp:= `setDayOfMonth`(v3, v4, v5) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfMonth:(Lorg/joda/time/Chronology;J)J` @kind direct;
  #L3cce28.  v4:= temp @kind wide;
  #L3cce2a.  return v4 @kind wide;
  #L3cce2c.  throw v0;
  catch `java.lang.IllegalArgumentException` @[L3ccdd8..L3ccde0] goto L3ccde2;
}
procedure `long` `setDayOfWeek`(`org.joda.time.tz.DateTimeZoneBuilder$OfYear` v2 @kind this, `org.joda.time.Chronology` v3 @kind object, `long` v4 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfWeek:(Lorg/joda/time/Chronology;J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3cce50.  call temp:= `dayOfWeek`(v3) @signature `Lorg/joda/time/Chronology;.dayOfWeek:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3cce56.  v0:= temp @kind object;
  #L3cce58.  call temp:= `get`(v0, v4) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3cce5e.  v0:= temp;
  #L3cce60.  v1:= v2.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfWeek` @type ^`int`;
  #L3cce64.  v1:= v1 - v0 @kind int;
  #L3cce66.  if v1 == 0 then goto L3cce94;
  #L3cce6a.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iAdvance` @type ^`boolean` @kind boolean;
  #L3cce6e.  if v0 == 0 then goto L3cce7c;
  #L3cce72.  if v1 >= 0 then goto L3cce84;
  #L3cce76.  v1:= v1 + 7;
  #L3cce7a.  goto L3cce84;
  #L3cce7c.  if v1 <= 0 then goto L3cce84;
  #L3cce80.  v1:= v1 + -7;
  #L3cce84.  call temp:= `dayOfWeek`(v3) @signature `Lorg/joda/time/Chronology;.dayOfWeek:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3cce8a.  v3:= temp @kind object;
  #L3cce8c.  call temp:= `add`(v3, v4, v1) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3cce92.  v4:= temp @kind wide;
  #L3cce94.  return v4 @kind wide;
}
procedure `boolean` `equals`(`org.joda.time.tz.DateTimeZoneBuilder$OfYear` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ccaa0.  v0:= 1I;
  #L3ccaa2.  if v4 != v5 then goto L3ccaa8;
  #L3ccaa6.  return v0;
  #L3ccaa8.  v1:= instanceof @variable v5 @type ^`org.joda.time.tz.DateTimeZoneBuilder$OfYear` @kind boolean;
  #L3ccaac.  v2:= 0I;
  #L3ccaae.  if v1 == 0 then goto L3ccb04;
  #L3ccab2.  v5:= (`org.joda.time.tz.DateTimeZoneBuilder$OfYear`) v5 @kind object;
  #L3ccab6.  v1:= v4.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMode` @type ^`char` @kind char;
  #L3ccaba.  v3:= v5.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMode` @type ^`char` @kind char;
  #L3ccabe.  if v1 != v3 then goto L3ccb00;
  #L3ccac2.  v1:= v4.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMonthOfYear` @type ^`int`;
  #L3ccac6.  v3:= v5.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMonthOfYear` @type ^`int`;
  #L3ccaca.  if v1 != v3 then goto L3ccb00;
  #L3ccace.  v1:= v4.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfMonth` @type ^`int`;
  #L3ccad2.  v3:= v5.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfMonth` @type ^`int`;
  #L3ccad6.  if v1 != v3 then goto L3ccb00;
  #L3ccada.  v1:= v4.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfWeek` @type ^`int`;
  #L3ccade.  v3:= v5.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfWeek` @type ^`int`;
  #L3ccae2.  if v1 != v3 then goto L3ccb00;
  #L3ccae6.  v1:= v4.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iAdvance` @type ^`boolean` @kind boolean;
  #L3ccaea.  v3:= v5.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iAdvance` @type ^`boolean` @kind boolean;
  #L3ccaee.  if v1 != v3 then goto L3ccb00;
  #L3ccaf2.  v1:= v4.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMillisOfDay` @type ^`int`;
  #L3ccaf6.  v5:= v5.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMillisOfDay` @type ^`int`;
  #L3ccafa.  if v1 != v5 then goto L3ccb00;
  #L3ccafe.  goto L3ccb02;
  #L3ccb00.  v0:= 0I;
  #L3ccb02.  return v0;
  #L3ccb04.  return v2;
}
procedure `long` `next`(`org.joda.time.tz.DateTimeZoneBuilder$OfYear` v5 @kind this, `long` v6 , `int` v8 , `int` v9 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.next:(JII)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ccb18.  v0:= v5.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMode` @type ^`char` @kind char;
  #L3ccb1c.  v1:= 0I;
  #L3ccb1e.  v2:= 119I;
  #L3ccb22.  if v0 != v2 then goto L3ccb2a;
  #L3ccb26.  v8:= v8 + v9 @kind int;
  #L3ccb28.  goto L3ccb36;
  #L3ccb2a.  v9:= 115I;
  #L3ccb2e.  if v0 != v9 then goto L3ccb34;
  #L3ccb32.  goto L3ccb36;
  #L3ccb34.  v8:= 0I;
  #L3ccb36.  v8:= (`long`) v8 @kind i2l;
  #L3ccb38.  v6:= v6 + v8 @kind long;
  #L3ccb3a.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/ISOChronology;.getInstanceUTC:()Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3ccb40.  v0:= temp @kind object;
  #L3ccb42.  call temp:= `monthOfYear`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.monthOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccb48.  v2:= temp @kind object;
  #L3ccb4a.  v3:= v5.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMonthOfYear` @type ^`int`;
  #L3ccb4e.  call temp:= `set`(v2, v6, v3) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3ccb54.  v2:= temp @kind wide;
  #L3ccb56.  call temp:= `millisOfDay`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.millisOfDay:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccb5c.  v4:= temp @kind object;
  #L3ccb5e.  call temp:= `set`(v4, v2, v1) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3ccb64.  v1:= temp @kind wide;
  #L3ccb66.  call temp:= `millisOfDay`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.millisOfDay:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccb6c.  v3:= temp @kind object;
  #L3ccb6e.  v4:= v5.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMillisOfDay` @type ^`int`;
  #L3ccb72.  call temp:= `add`(v3, v1, v4) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3ccb78.  v1:= temp @kind wide;
  #L3ccb7a.  call temp:= `setDayOfMonthNext`(v5, v0, v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfMonthNext:(Lorg/joda/time/Chronology;J)J` @kind direct;
  #L3ccb80.  v1:= temp @kind wide;
  #L3ccb82.  v3:= v5.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfWeek` @type ^`int`;
  #L3ccb86.  v4:= 1I;
  #L3ccb88.  if v3 != 0 then goto L3ccbae;
  #L3ccb8c.  v3:= lcmp(v1, v6);
  #L3ccb90.  if v3 > 0 then goto L3ccbf2;
  #L3ccb94.  call temp:= `year`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccb9a.  v6:= temp @kind object;
  #L3ccb9c.  call temp:= `add`(v6, v1, v4) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3ccba2.  v6:= temp @kind wide;
  #L3ccba4.  call temp:= `setDayOfMonthNext`(v5, v0, v6) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfMonthNext:(Lorg/joda/time/Chronology;J)J` @kind direct;
  #L3ccbaa.  v1:= temp @kind wide;
  #L3ccbac.  goto L3ccbf2;
  #L3ccbae.  call temp:= `setDayOfWeek`(v5, v0, v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfWeek:(Lorg/joda/time/Chronology;J)J` @kind direct;
  #L3ccbb4.  v1:= temp @kind wide;
  #L3ccbb6.  v3:= lcmp(v1, v6);
  #L3ccbba.  if v3 > 0 then goto L3ccbf2;
  #L3ccbbe.  call temp:= `year`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccbc4.  v6:= temp @kind object;
  #L3ccbc6.  call temp:= `add`(v6, v1, v4) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3ccbcc.  v6:= temp @kind wide;
  #L3ccbce.  call temp:= `monthOfYear`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.monthOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccbd4.  v1:= temp @kind object;
  #L3ccbd6.  v2:= v5.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMonthOfYear` @type ^`int`;
  #L3ccbda.  call temp:= `set`(v1, v6, v2) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3ccbe0.  v6:= temp @kind wide;
  #L3ccbe2.  call temp:= `setDayOfMonthNext`(v5, v0, v6) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfMonthNext:(Lorg/joda/time/Chronology;J)J` @kind direct;
  #L3ccbe8.  v6:= temp @kind wide;
  #L3ccbea.  call temp:= `setDayOfWeek`(v5, v0, v6) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfWeek:(Lorg/joda/time/Chronology;J)J` @kind direct;
  #L3ccbf0.  v1:= temp @kind wide;
  #L3ccbf2.  v1:= v1 - v8 @kind long;
  #L3ccbf4.  return v1 @kind wide;
}
procedure `long` `previous`(`org.joda.time.tz.DateTimeZoneBuilder$OfYear` v5 @kind this, `long` v6 , `int` v8 , `int` v9 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.previous:(JII)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ccc08.  v0:= v5.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMode` @type ^`char` @kind char;
  #L3ccc0c.  v1:= 0I;
  #L3ccc0e.  v2:= 119I;
  #L3ccc12.  if v0 != v2 then goto L3ccc1a;
  #L3ccc16.  v8:= v8 + v9 @kind int;
  #L3ccc18.  goto L3ccc26;
  #L3ccc1a.  v9:= 115I;
  #L3ccc1e.  if v0 != v9 then goto L3ccc24;
  #L3ccc22.  goto L3ccc26;
  #L3ccc24.  v8:= 0I;
  #L3ccc26.  v8:= (`long`) v8 @kind i2l;
  #L3ccc28.  v6:= v6 + v8 @kind long;
  #L3ccc2a.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/ISOChronology;.getInstanceUTC:()Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3ccc30.  v0:= temp @kind object;
  #L3ccc32.  call temp:= `monthOfYear`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.monthOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccc38.  v2:= temp @kind object;
  #L3ccc3a.  v3:= v5.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMonthOfYear` @type ^`int`;
  #L3ccc3e.  call temp:= `set`(v2, v6, v3) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3ccc44.  v2:= temp @kind wide;
  #L3ccc46.  call temp:= `millisOfDay`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.millisOfDay:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccc4c.  v4:= temp @kind object;
  #L3ccc4e.  call temp:= `set`(v4, v2, v1) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3ccc54.  v1:= temp @kind wide;
  #L3ccc56.  call temp:= `millisOfDay`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.millisOfDay:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccc5c.  v3:= temp @kind object;
  #L3ccc5e.  v4:= v5.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMillisOfDay` @type ^`int`;
  #L3ccc62.  call temp:= `add`(v3, v1, v4) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3ccc68.  v1:= temp @kind wide;
  #L3ccc6a.  call temp:= `setDayOfMonthPrevious`(v5, v0, v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfMonthPrevious:(Lorg/joda/time/Chronology;J)J` @kind direct;
  #L3ccc70.  v1:= temp @kind wide;
  #L3ccc72.  v3:= v5.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfWeek` @type ^`int`;
  #L3ccc76.  v4:= -1I;
  #L3ccc78.  if v3 != 0 then goto L3ccc9e;
  #L3ccc7c.  v3:= lcmp(v1, v6);
  #L3ccc80.  if v3 < 0 then goto L3ccce2;
  #L3ccc84.  call temp:= `year`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccc8a.  v6:= temp @kind object;
  #L3ccc8c.  call temp:= `add`(v6, v1, v4) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3ccc92.  v6:= temp @kind wide;
  #L3ccc94.  call temp:= `setDayOfMonthPrevious`(v5, v0, v6) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfMonthPrevious:(Lorg/joda/time/Chronology;J)J` @kind direct;
  #L3ccc9a.  v1:= temp @kind wide;
  #L3ccc9c.  goto L3ccce2;
  #L3ccc9e.  call temp:= `setDayOfWeek`(v5, v0, v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfWeek:(Lorg/joda/time/Chronology;J)J` @kind direct;
  #L3ccca4.  v1:= temp @kind wide;
  #L3ccca6.  v3:= lcmp(v1, v6);
  #L3cccaa.  if v3 < 0 then goto L3ccce2;
  #L3cccae.  call temp:= `year`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3cccb4.  v6:= temp @kind object;
  #L3cccb6.  call temp:= `add`(v6, v1, v4) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3cccbc.  v6:= temp @kind wide;
  #L3cccbe.  call temp:= `monthOfYear`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.monthOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3cccc4.  v1:= temp @kind object;
  #L3cccc6.  v2:= v5.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMonthOfYear` @type ^`int`;
  #L3cccca.  call temp:= `set`(v1, v6, v2) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3cccd0.  v6:= temp @kind wide;
  #L3cccd2.  call temp:= `setDayOfMonthPrevious`(v5, v0, v6) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfMonthPrevious:(Lorg/joda/time/Chronology;J)J` @kind direct;
  #L3cccd8.  v6:= temp @kind wide;
  #L3cccda.  call temp:= `setDayOfWeek`(v5, v0, v6) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfWeek:(Lorg/joda/time/Chronology;J)J` @kind direct;
  #L3ccce0.  v1:= temp @kind wide;
  #L3ccce2.  v1:= v1 - v8 @kind long;
  #L3ccce4.  return v1 @kind wide;
}
procedure `long` `setInstant`(`org.joda.time.tz.DateTimeZoneBuilder$OfYear` v3 @kind this, `int` v4 , `int` v5 , `int` v6 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setInstant:(III)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ccea8.  v0:= v3.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMode` @type ^`char` @kind char;
  #L3cceac.  v1:= 119I;
  #L3cceb0.  if v0 != v1 then goto L3cceb8;
  #L3cceb4.  v5:= v5 + v6 @kind int;
  #L3cceb6.  goto L3ccec4;
  #L3cceb8.  v6:= 115I;
  #L3ccebc.  if v0 != v6 then goto L3ccec2;
  #L3ccec0.  goto L3ccec4;
  #L3ccec2.  v5:= 0I;
  #L3ccec4.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/ISOChronology;.getInstanceUTC:()Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3cceca.  v6:= temp @kind object;
  #L3ccecc.  call temp:= `year`(v6) @signature `Lorg/joda/time/chrono/AssembledChronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3cced2.  v0:= temp @kind object;
  #L3cced4.  v1:= 0L;
  #L3cced8.  call temp:= `set`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3ccede.  v0:= temp @kind wide;
  #L3ccee0.  call temp:= `monthOfYear`(v6) @signature `Lorg/joda/time/chrono/AssembledChronology;.monthOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccee6.  v4:= temp @kind object;
  #L3ccee8.  v2:= v3.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMonthOfYear` @type ^`int`;
  #L3cceec.  call temp:= `set`(v4, v0, v2) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3ccef2.  v0:= temp @kind wide;
  #L3ccef4.  call temp:= `millisOfDay`(v6) @signature `Lorg/joda/time/chrono/AssembledChronology;.millisOfDay:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ccefa.  v4:= temp @kind object;
  #L3ccefc.  v2:= v3.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMillisOfDay` @type ^`int`;
  #L3ccf00.  call temp:= `set`(v4, v0, v2) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3ccf06.  v0:= temp @kind wide;
  #L3ccf08.  call temp:= `setDayOfMonth`(v3, v6, v0) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfMonth:(Lorg/joda/time/Chronology;J)J` @kind direct;
  #L3ccf0e.  v0:= temp @kind wide;
  #L3ccf10.  v4:= v3.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfWeek` @type ^`int`;
  #L3ccf14.  if v4 == 0 then goto L3ccf20;
  #L3ccf18.  call temp:= `setDayOfWeek`(v3, v6, v0) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setDayOfWeek:(Lorg/joda/time/Chronology;J)J` @kind direct;
  #L3ccf1e.  v0:= temp @kind wide;
  #L3ccf20.  v4:= (`long`) v5 @kind i2l;
  #L3ccf22.  v0:= v0 - v4 @kind long;
  #L3ccf24.  return v0 @kind wide;
}
procedure `void` `writeTo`(`org.joda.time.tz.DateTimeZoneBuilder$OfYear` v2 @kind this, `java.io.DataOutput` v3 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.writeTo:(Ljava/io/DataOutput;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cd004.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMode` @type ^`char` @kind char;
  #L3cd008.  call `writeByte`(v3, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L3cd00e.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMonthOfYear` @type ^`int`;
  #L3cd012.  call `writeByte`(v3, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L3cd018.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfMonth` @type ^`int`;
  #L3cd01c.  call `writeByte`(v3, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L3cd022.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfWeek` @type ^`int`;
  #L3cd026.  call `writeByte`(v3, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L3cd02c.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iAdvance` @type ^`boolean` @kind boolean;
  #L3cd030.  call `writeBoolean`(v3, v0) @signature `Ljava/io/DataOutput;.writeBoolean:(Z)V` @kind interface;
  #L3cd036.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMillisOfDay` @type ^`int`;
  #L3cd03a.  v0:= (`long`) v0 @kind i2l;
  #L3cd03c.  call `writeMillis`(v3, v0) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.writeMillis:(Ljava/io/DataOutput;J)V` @kind static;
  #L3cd042.  return @kind void;
}
