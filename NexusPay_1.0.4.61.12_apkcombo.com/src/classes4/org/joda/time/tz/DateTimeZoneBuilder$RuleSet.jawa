record `org.joda.time.tz.DateTimeZoneBuilder$RuleSet` @kind class @AccessFlag FINAL {
  `java.lang.String` `org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iInitialNameKey` @AccessFlag PRIVATE;
  `int` `org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iInitialSaveMillis` @AccessFlag PRIVATE;
  `java.util.ArrayList` `org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iRules` @AccessFlag PRIVATE;
  `int` `org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iStandardOffset` @AccessFlag PRIVATE;
  `org.joda.time.tz.DateTimeZoneBuilder$OfYear` `org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iUpperOfYear` @AccessFlag PRIVATE;
  `int` `org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iUpperYear` @AccessFlag PRIVATE;
}
global `int` `@@org.joda.time.tz.DateTimeZoneBuilder$RuleSet.YEAR_LIMIT` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3cdeac.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3cdeb2.  v0:= temp @kind wide;
  #L3cdeb4.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/ISOChronology;.getInstanceUTC:()Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3cdeba.  v2:= temp @kind object;
  #L3cdebc.  call temp:= `year`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3cdec2.  v2:= temp @kind object;
  #L3cdec4.  call temp:= `get`(v2, v0) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3cdeca.  v0:= temp;
  #L3cdecc.  v0:= v0 + 100;
  #L3cded0.  `@@org.joda.time.tz.DateTimeZoneBuilder$RuleSet.YEAR_LIMIT` @type ^`int` := v0;
  #L3cded4.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.tz.DateTimeZoneBuilder$RuleSet` v2 @kind this) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3cdee8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cdeee.  v0:= new `java.util.ArrayList`;
  #L3cdef2.  v1:= 10I;
  #L3cdef6.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3cdefc.  v2.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iRules` @type ^`java.util.ArrayList` := v0 @kind object;
  #L3cdf00.  v0:= 2147483647I;
  #L3cdf06.  v2.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iUpperYear` @type ^`int` := v0;
  #L3cdf0a.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.tz.DateTimeZoneBuilder$RuleSet` v2 @kind this, `org.joda.time.tz.DateTimeZoneBuilder$RuleSet` v3 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.<init>:(Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3cdf1c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cdf22.  v0:= v3.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iStandardOffset` @type ^`int`;
  #L3cdf26.  v2.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iStandardOffset` @type ^`int` := v0;
  #L3cdf2a.  v0:= new `java.util.ArrayList`;
  #L3cdf2e.  v1:= v3.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iRules` @type ^`java.util.ArrayList` @kind object;
  #L3cdf32.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3cdf38.  v2.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iRules` @type ^`java.util.ArrayList` := v0 @kind object;
  #L3cdf3c.  v0:= v3.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iInitialNameKey` @type ^`java.lang.String` @kind object;
  #L3cdf40.  v2.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iInitialNameKey` @type ^`java.lang.String` := v0 @kind object;
  #L3cdf44.  v0:= v3.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iInitialSaveMillis` @type ^`int`;
  #L3cdf48.  v2.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iInitialSaveMillis` @type ^`int` := v0;
  #L3cdf4c.  v0:= v3.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iUpperYear` @type ^`int`;
  #L3cdf50.  v2.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iUpperYear` @type ^`int` := v0;
  #L3cdf54.  v3:= v3.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iUpperOfYear` @type ^`org.joda.time.tz.DateTimeZoneBuilder$OfYear` @kind object;
  #L3cdf58.  v2.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iUpperOfYear` @type ^`org.joda.time.tz.DateTimeZoneBuilder$OfYear` := v3 @kind object;
  #L3cdf5c.  return @kind void;
}
procedure `void` `addRule`(`org.joda.time.tz.DateTimeZoneBuilder$RuleSet` v1 @kind this, `org.joda.time.tz.DateTimeZoneBuilder$Rule` v2 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.addRule:(Lorg/joda/time/tz/DateTimeZoneBuilder$Rule;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cdf70.  v0:= v1.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iRules` @type ^`java.util.ArrayList` @kind object;
  #L3cdf74.  call temp:= `contains`(v0, v2) @signature `Ljava/util/ArrayList;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cdf7a.  v0:= temp;
  #L3cdf7c.  if v0 != 0 then goto L3cdf8a;
  #L3cdf80.  v0:= v1.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iRules` @type ^`java.util.ArrayList` @kind object;
  #L3cdf84.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cdf8a.  return @kind void;
}
procedure `org.joda.time.tz.DateTimeZoneBuilder$DSTZone` `buildTailZone`(`org.joda.time.tz.DateTimeZoneBuilder$RuleSet` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.buildTailZone:(Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3cdc68.  v0:= v4.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iRules` @type ^`java.util.ArrayList` @kind object;
  #L3cdc6c.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3cdc72.  v0:= temp;
  #L3cdc74.  v1:= 2I;
  #L3cdc76.  if v0 != v1 then goto L3cdcd4;
  #L3cdc7a.  v0:= v4.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iRules` @type ^`java.util.ArrayList` @kind object;
  #L3cdc7e.  v1:= 0I;
  #L3cdc80.  call temp:= `get`(v0, v1) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3cdc86.  v0:= temp @kind object;
  #L3cdc88.  v0:= (`org.joda.time.tz.DateTimeZoneBuilder$Rule`) v0 @kind object;
  #L3cdc8c.  v1:= v4.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iRules` @type ^`java.util.ArrayList` @kind object;
  #L3cdc90.  v2:= 1I;
  #L3cdc92.  call temp:= `get`(v1, v2) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3cdc98.  v1:= temp @kind object;
  #L3cdc9a.  v1:= (`org.joda.time.tz.DateTimeZoneBuilder$Rule`) v1 @kind object;
  #L3cdc9e.  call temp:= `getToYear`(v0) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Rule;.getToYear:()I` @kind virtual;
  #L3cdca4.  v2:= temp;
  #L3cdca6.  v3:= 2147483647I;
  #L3cdcac.  if v2 != v3 then goto L3cdcd4;
  #L3cdcb0.  call temp:= `getToYear`(v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Rule;.getToYear:()I` @kind virtual;
  #L3cdcb6.  v2:= temp;
  #L3cdcb8.  if v2 != v3 then goto L3cdcd4;
  #L3cdcbc.  v2:= new `org.joda.time.tz.DateTimeZoneBuilder$DSTZone`;
  #L3cdcc0.  v3:= v4.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iStandardOffset` @type ^`int`;
  #L3cdcc4.  v0:= v0.`org.joda.time.tz.DateTimeZoneBuilder$Rule.iRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cdcc8.  v1:= v1.`org.joda.time.tz.DateTimeZoneBuilder$Rule.iRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cdccc.  call `<init>`(v2, v5, v3, v0, v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.<init>:(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V` @kind direct;
  #L3cdcd2.  return v2 @kind object;
  #L3cdcd4.  v5:= 0I;
  #L3cdcd6.  return v5 @kind object;
}
procedure `org.joda.time.tz.DateTimeZoneBuilder$Transition` `firstTransition`(`org.joda.time.tz.DateTimeZoneBuilder$RuleSet` v13 @kind this, `long` v14 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.firstTransition:(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3cdce8.  v3:= v13.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iInitialNameKey` @type ^`java.lang.String` @kind object;
  #L3cdcec.  if v3 == 0 then goto L3cdd0c;
  #L3cdcf0.  v6:= new `org.joda.time.tz.DateTimeZoneBuilder$Transition`;
  #L3cdcf4.  v5:= v13.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iStandardOffset` @type ^`int`;
  #L3cdcf8.  v0:= v13.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iInitialSaveMillis` @type ^`int`;
  #L3cdcfc.  v4:= v5 + v0 @kind int;
  #L3cdd00.  v0:= v6 @kind object;
  #L3cdd02.  v1:= v14 @kind wide;
  #L3cdd04.  call `<init>`(v0, v1, v3, v4, v5) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.<init>:(JLjava/lang/String;II)V` @kind direct;
  #L3cdd0a.  return v6 @kind object;
  #L3cdd0c.  v0:= new `java.util.ArrayList`;
  #L3cdd10.  v1:= v13.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iRules` @type ^`java.util.ArrayList` @kind object;
  #L3cdd14.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3cdd1a.  v1:= -9223372036854775808L;
  #L3cdd1e.  v3:= 0I;
  #L3cdd20.  v4:= 0I;
  #L3cdd22.  call temp:= `nextTransition`(v13, v1, v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.nextTransition:(JI)Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;` @kind virtual;
  #L3cdd28.  v1:= temp @kind object;
  #L3cdd2a.  if v1 == 0 then goto L3cddca;
  #L3cdd2e.  call temp:= `getMillis`(v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getMillis:()J` @kind virtual;
  #L3cdd34.  v2:= temp @kind wide;
  #L3cdd36.  v5:= lcmp(v2, v14);
  #L3cdd3a.  if v5 != 0 then goto L3cdd4a;
  #L3cdd3e.  v4:= new `org.joda.time.tz.DateTimeZoneBuilder$Transition`;
  #L3cdd42.  call `<init>`(v4, v14, v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.<init>:(JLorg/joda/time/tz/DateTimeZoneBuilder$Transition;)V` @kind direct;
  #L3cdd48.  goto L3cddca;
  #L3cdd4a.  if v5 <= 0 then goto L3cddb0;
  #L3cdd4e.  if v4 != 0 then goto L3cdd8e;
  #L3cdd52.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3cdd58.  v2:= temp @kind object;
  #L3cdd5a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3cdd60.  v3:= temp;
  #L3cdd62.  if v3 == 0 then goto L3cdd8e;
  #L3cdd66.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3cdd6c.  v3:= temp @kind object;
  #L3cdd6e.  v3:= (`org.joda.time.tz.DateTimeZoneBuilder$Rule`) v3 @kind object;
  #L3cdd72.  call temp:= `getSaveMillis`(v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Rule;.getSaveMillis:()I` @kind virtual;
  #L3cdd78.  v5:= temp;
  #L3cdd7a.  if v5 != 0 then goto L3cdd5a;
  #L3cdd7e.  v2:= new `org.joda.time.tz.DateTimeZoneBuilder$Transition`;
  #L3cdd82.  v4:= v13.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iStandardOffset` @type ^`int`;
  #L3cdd86.  call `<init>`(v2, v14, v3, v4) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.<init>:(JLorg/joda/time/tz/DateTimeZoneBuilder$Rule;I)V` @kind direct;
  #L3cdd8c.  v4:= v2 @kind object;
  #L3cdd8e.  if v4 != 0 then goto L3cddca;
  #L3cdd92.  v4:= new `org.joda.time.tz.DateTimeZoneBuilder$Transition`;
  #L3cdd96.  call temp:= `getNameKey`(v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getNameKey:()Ljava/lang/String;` @kind virtual;
  #L3cdd9c.  v8:= temp @kind object;
  #L3cdd9e.  v10:= v13.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iStandardOffset` @type ^`int`;
  #L3cdda2.  v5:= v4 @kind object;
  #L3cdda4.  v6:= v14 @kind wide;
  #L3cdda6.  v9:= v10;
  #L3cdda8.  call `<init>`(v5, v6, v8, v9, v10) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.<init>:(JLjava/lang/String;II)V` @kind direct;
  #L3cddae.  goto L3cddca;
  #L3cddb0.  v4:= new `org.joda.time.tz.DateTimeZoneBuilder$Transition`;
  #L3cddb4.  call `<init>`(v4, v14, v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.<init>:(JLorg/joda/time/tz/DateTimeZoneBuilder$Transition;)V` @kind direct;
  #L3cddba.  call temp:= `getSaveMillis`(v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getSaveMillis:()I` @kind virtual;
  #L3cddc0.  v1:= temp;
  #L3cddc2.  v11:= v2 @kind wide;
  #L3cddc4.  v3:= v1;
  #L3cddc6.  v1:= v11 @kind wide;
  #L3cddc8.  goto L3cdd22;
  #L3cddca.  v13.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iRules` @type ^`java.util.ArrayList` := v0 @kind object;
  #L3cddce.  return v4 @kind object;
}
procedure `int` `getStandardOffset`(`org.joda.time.tz.DateTimeZoneBuilder$RuleSet` v1 @kind this) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.getStandardOffset:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cdc14.  v0:= v1.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iStandardOffset` @type ^`int`;
  #L3cdc18.  return v0;
}
procedure `long` `getUpperLimit`(`org.joda.time.tz.DateTimeZoneBuilder$RuleSet` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.getUpperLimit:(I)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cdc2c.  v0:= v3.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iUpperYear` @type ^`int`;
  #L3cdc30.  v1:= 2147483647I;
  #L3cdc36.  if v0 != v1 then goto L3cdc46;
  #L3cdc3a.  v0:= 9223372036854775807L;
  #L3cdc44.  return v0 @kind wide;
  #L3cdc46.  v1:= v3.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iUpperOfYear` @type ^`org.joda.time.tz.DateTimeZoneBuilder$OfYear` @kind object;
  #L3cdc4a.  v2:= v3.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iStandardOffset` @type ^`int`;
  #L3cdc4e.  call temp:= `setInstant`(v1, v0, v2, v4) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setInstant:(III)J` @kind virtual;
  #L3cdc54.  v0:= temp @kind wide;
  #L3cdc56.  return v0 @kind wide;
}
procedure `org.joda.time.tz.DateTimeZoneBuilder$Transition` `nextTransition`(`org.joda.time.tz.DateTimeZoneBuilder$RuleSet` v10 @kind this, `long` v11 , `int` v13 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.nextTransition:(JI)Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3cdde0.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/ISOChronology;.getInstanceUTC:()Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3cdde6.  v0:= temp @kind object;
  #L3cdde8.  v1:= v10.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iRules` @type ^`java.util.ArrayList` @kind object;
  #L3cddec.  call temp:= `iterator`(v1) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L3cddf2.  v1:= temp @kind object;
  #L3cddf4.  v2:= 0I;
  #L3cddf6.  v3:= 9223372036854775807L;
  #L3cde00.  v5:= v2 @kind object;
  #L3cde02.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3cde08.  v6:= temp;
  #L3cde0a.  if v6 == 0 then goto L3cde44;
  #L3cde0e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3cde14.  v6:= temp @kind object;
  #L3cde16.  v6:= (`org.joda.time.tz.DateTimeZoneBuilder$Rule`) v6 @kind object;
  #L3cde1a.  v7:= v10.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iStandardOffset` @type ^`int`;
  #L3cde1e.  call temp:= `next`(v6, v11, v7, v13) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Rule;.next:(JII)J` @kind virtual;
  #L3cde24.  v7:= temp @kind wide;
  #L3cde26.  v9:= lcmp(v7, v11);
  #L3cde2a.  if v9 > 0 then goto L3cde36;
  #L3cde2e.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L3cde34.  goto L3cde02;
  #L3cde36.  v9:= lcmp(v7, v3);
  #L3cde3a.  if v9 > 0 then goto L3cde02;
  #L3cde3e.  v5:= v6 @kind object;
  #L3cde40.  v3:= v7 @kind wide;
  #L3cde42.  goto L3cde02;
  #L3cde44.  if v5 != 0 then goto L3cde4a;
  #L3cde48.  return v2 @kind object;
  #L3cde4a.  call temp:= `year`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3cde50.  v11:= temp @kind object;
  #L3cde52.  call temp:= `get`(v11, v3) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3cde58.  v11:= temp;
  #L3cde5a.  v12:= `@@org.joda.time.tz.DateTimeZoneBuilder$RuleSet.YEAR_LIMIT` @type ^`int`;
  #L3cde5e.  if v11 < v12 then goto L3cde64;
  #L3cde62.  return v2 @kind object;
  #L3cde64.  v11:= v10.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iUpperYear` @type ^`int`;
  #L3cde68.  v12:= 2147483647I;
  #L3cde6e.  if v11 >= v12 then goto L3cde8c;
  #L3cde72.  v12:= v10.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iUpperOfYear` @type ^`org.joda.time.tz.DateTimeZoneBuilder$OfYear` @kind object;
  #L3cde76.  v0:= v10.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iStandardOffset` @type ^`int`;
  #L3cde7a.  call temp:= `setInstant`(v12, v11, v0, v13) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.setInstant:(III)J` @kind virtual;
  #L3cde80.  v11:= temp @kind wide;
  #L3cde82.  v13:= lcmp(v3, v11);
  #L3cde86.  if v13 < 0 then goto L3cde8c;
  #L3cde8a.  return v2 @kind object;
  #L3cde8c.  v11:= new `org.joda.time.tz.DateTimeZoneBuilder$Transition`;
  #L3cde90.  v12:= v10.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iStandardOffset` @type ^`int`;
  #L3cde94.  call `<init>`(v11, v3, v5, v12) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.<init>:(JLorg/joda/time/tz/DateTimeZoneBuilder$Rule;I)V` @kind direct;
  #L3cde9a.  return v11 @kind object;
}
procedure `void` `setFixedSavings`(`org.joda.time.tz.DateTimeZoneBuilder$RuleSet` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.setFixedSavings:(Ljava/lang/String;I)V` @AccessFlag PUBLIC {
    temp;

  #L3cdf9c.  v0.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iInitialNameKey` @type ^`java.lang.String` := v1 @kind object;
  #L3cdfa0.  v0.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iInitialSaveMillis` @type ^`int` := v2;
  #L3cdfa4.  return @kind void;
}
procedure `void` `setStandardOffset`(`org.joda.time.tz.DateTimeZoneBuilder$RuleSet` v0 @kind this, `int` v1 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.setStandardOffset:(I)V` @AccessFlag PUBLIC {
    temp;

  #L3cdfb8.  v0.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iStandardOffset` @type ^`int` := v1;
  #L3cdfbc.  return @kind void;
}
procedure `void` `setUpperLimit`(`org.joda.time.tz.DateTimeZoneBuilder$RuleSet` v0 @kind this, `int` v1 , `org.joda.time.tz.DateTimeZoneBuilder$OfYear` v2 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.setUpperLimit:(ILorg/joda/time/tz/DateTimeZoneBuilder$OfYear;)V` @AccessFlag PUBLIC {
    temp;

  #L3cdfd0.  v0.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iUpperYear` @type ^`int` := v1;
  #L3cdfd4.  v0.`org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iUpperOfYear` @type ^`org.joda.time.tz.DateTimeZoneBuilder$OfYear` := v2 @kind object;
  #L3cdfd8.  return @kind void;
}
