record `org.joda.time.tz.DateTimeZoneBuilder$Rule` @kind class @AccessFlag FINAL {
  `int` `org.joda.time.tz.DateTimeZoneBuilder$Rule.iFromYear` @AccessFlag FINAL;
  `org.joda.time.tz.DateTimeZoneBuilder$Recurrence` `org.joda.time.tz.DateTimeZoneBuilder$Rule.iRecurrence` @AccessFlag FINAL;
  `int` `org.joda.time.tz.DateTimeZoneBuilder$Rule.iToYear` @AccessFlag FINAL;
}
procedure `void` `<init>`(`org.joda.time.tz.DateTimeZoneBuilder$Rule` v0 @kind this, `org.joda.time.tz.DateTimeZoneBuilder$Recurrence` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Rule;.<init>:(Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ce124.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ce12a.  v0.`org.joda.time.tz.DateTimeZoneBuilder$Rule.iRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` := v1 @kind object;
  #L3ce12e.  v0.`org.joda.time.tz.DateTimeZoneBuilder$Rule.iFromYear` @type ^`int` := v2;
  #L3ce132.  v0.`org.joda.time.tz.DateTimeZoneBuilder$Rule.iToYear` @type ^`int` := v3;
  #L3ce136.  return @kind void;
}
procedure `int` `getFromYear`(`org.joda.time.tz.DateTimeZoneBuilder$Rule` v1 @kind this) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Rule;.getFromYear:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cdfec.  v0:= v1.`org.joda.time.tz.DateTimeZoneBuilder$Rule.iFromYear` @type ^`int`;
  #L3cdff0.  return v0;
}
procedure `java.lang.String` `getNameKey`(`org.joda.time.tz.DateTimeZoneBuilder$Rule` v1 @kind this) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Rule;.getNameKey:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ce03c.  v0:= v1.`org.joda.time.tz.DateTimeZoneBuilder$Rule.iRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3ce040.  call temp:= `getNameKey`(v0) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.getNameKey:()Ljava/lang/String;` @kind virtual;
  #L3ce046.  v0:= temp @kind object;
  #L3ce048.  return v0 @kind object;
}
procedure `org.joda.time.tz.DateTimeZoneBuilder$OfYear` `getOfYear`(`org.joda.time.tz.DateTimeZoneBuilder$Rule` v1 @kind this) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Rule;.getOfYear:()Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ce104.  v0:= v1.`org.joda.time.tz.DateTimeZoneBuilder$Rule.iRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3ce108.  call temp:= `getOfYear`(v0) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.getOfYear:()Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;` @kind virtual;
  #L3ce10e.  v0:= temp @kind object;
  #L3ce110.  return v0 @kind object;
}
procedure `int` `getSaveMillis`(`org.joda.time.tz.DateTimeZoneBuilder$Rule` v1 @kind this) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Rule;.getSaveMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ce004.  v0:= v1.`org.joda.time.tz.DateTimeZoneBuilder$Rule.iRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3ce008.  call temp:= `getSaveMillis`(v0) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.getSaveMillis:()I` @kind virtual;
  #L3ce00e.  v0:= temp;
  #L3ce010.  return v0;
}
procedure `int` `getToYear`(`org.joda.time.tz.DateTimeZoneBuilder$Rule` v1 @kind this) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Rule;.getToYear:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ce024.  v0:= v1.`org.joda.time.tz.DateTimeZoneBuilder$Rule.iToYear` @type ^`int`;
  #L3ce028.  return v0;
}
procedure `long` `next`(`org.joda.time.tz.DateTimeZoneBuilder$Rule` v6 @kind this, `long` v7 , `int` v9 , `int` v10 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Rule;.next:(JII)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ce05c.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/ISOChronology;.getInstanceUTC:()Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3ce062.  v0:= temp @kind object;
  #L3ce064.  v1:= v9 + v10 @kind int;
  #L3ce068.  v2:= -9223372036854775808L;
  #L3ce06c.  v4:= lcmp(v7, v2);
  #L3ce070.  if v4 != 0 then goto L3ce07a;
  #L3ce074.  v2:= -2147483648I;
  #L3ce078.  goto L3ce08e;
  #L3ce07a.  call temp:= `year`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ce080.  v2:= temp @kind object;
  #L3ce082.  v3:= (`long`) v1 @kind i2l;
  #L3ce084.  v3:= v3 + v7 @kind long;
  #L3ce086.  call temp:= `get`(v2, v3) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3ce08c.  v2:= temp;
  #L3ce08e.  v3:= v6.`org.joda.time.tz.DateTimeZoneBuilder$Rule.iFromYear` @type ^`int`;
  #L3ce092.  if v2 >= v3 then goto L3ce0ba;
  #L3ce096.  call temp:= `year`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ce09c.  v2:= temp @kind object;
  #L3ce09e.  v3:= 0L;
  #L3ce0a2.  v5:= v6.`org.joda.time.tz.DateTimeZoneBuilder$Rule.iFromYear` @type ^`int`;
  #L3ce0a6.  call temp:= `set`(v2, v3, v5) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3ce0ac.  v2:= temp @kind wide;
  #L3ce0ae.  v4:= (`long`) v1 @kind i2l;
  #L3ce0b0.  v2:= v2 - v4 @kind long;
  #L3ce0b2.  v4:= 1L;
  #L3ce0b6.  v2:= v2 - v4 @kind long;
  #L3ce0b8.  goto L3ce0bc;
  #L3ce0ba.  v2:= v7 @kind wide;
  #L3ce0bc.  v4:= v6.`org.joda.time.tz.DateTimeZoneBuilder$Rule.iRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3ce0c0.  call temp:= `next`(v4, v2, v9, v10) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.next:(JII)J` @kind virtual;
  #L3ce0c6.  v9:= temp @kind wide;
  #L3ce0c8.  v2:= lcmp(v9, v7);
  #L3ce0cc.  if v2 <= 0 then goto L3ce0ee;
  #L3ce0d0.  call temp:= `year`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ce0d6.  v0:= temp @kind object;
  #L3ce0d8.  v1:= (`long`) v1 @kind i2l;
  #L3ce0da.  v1:= v1 + v9 @kind long;
  #L3ce0dc.  call temp:= `get`(v0, v1) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3ce0e2.  v0:= temp;
  #L3ce0e4.  v1:= v6.`org.joda.time.tz.DateTimeZoneBuilder$Rule.iToYear` @type ^`int`;
  #L3ce0e8.  if v0 <= v1 then goto L3ce0ee;
  #L3ce0ec.  goto L3ce0f0;
  #L3ce0ee.  v7:= v9 @kind wide;
  #L3ce0f0.  return v7 @kind wide;
}
