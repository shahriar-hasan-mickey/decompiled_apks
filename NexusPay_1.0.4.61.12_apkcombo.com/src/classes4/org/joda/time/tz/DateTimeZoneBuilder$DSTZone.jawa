record `org.joda.time.tz.DateTimeZoneBuilder$DSTZone` @kind class @AccessFlag FINAL extends `org.joda.time.DateTimeZone` @kind class {
  `org.joda.time.tz.DateTimeZoneBuilder$Recurrence` `org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iEndRecurrence` @AccessFlag FINAL;
  `int` `org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStandardOffset` @AccessFlag FINAL;
  `org.joda.time.tz.DateTimeZoneBuilder$Recurrence` `org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStartRecurrence` @AccessFlag FINAL;
}
global `long` `@@org.joda.time.tz.DateTimeZoneBuilder$DSTZone.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `org.joda.time.tz.DateTimeZoneBuilder$Recurrence` v3 @kind object, `org.joda.time.tz.DateTimeZoneBuilder$Recurrence` v4 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.<init>:(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3cca48.  call `<init>`(v0, v1) @signature `Lorg/joda/time/DateTimeZone;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cca4e.  v0.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStandardOffset` @type ^`int` := v2;
  #L3cca52.  v0.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStartRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` := v3 @kind object;
  #L3cca56.  v0.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iEndRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` := v4 @kind object;
  #L3cca5a.  return @kind void;
}
procedure `org.joda.time.tz.DateTimeZoneBuilder$Recurrence` `findMatchingRecurrence`(`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` v6 @kind this, `long` v7 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.findMatchingRecurrence:(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3cc9d4.  v0:= v6.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStandardOffset` @type ^`int`;
  #L3cc9d8.  v1:= v6.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStartRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cc9dc.  v2:= v6.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iEndRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cc9e0.  call temp:= `getSaveMillis`(v2) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.getSaveMillis:()I` @kind virtual;
  #L3cc9e6.  v3:= temp;
  #L3cc9e8.  call temp:= `next`(v1, v7, v0, v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.next:(JII)J` @kind virtual;
  #L3cc9ee.  v3:= temp @kind wide;
  #L3cc9f0.  goto L3cc9f4;
  #L3cc9f2.  v3:= v7 @kind wide;
  #L3cc9f4.  call temp:= `getSaveMillis`(v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.getSaveMillis:()I` @kind virtual;
  #L3cc9fa.  v5:= temp;
  #L3cc9fc.  call temp:= `next`(v2, v7, v0, v5) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.next:(JII)J` @kind virtual;
  #L3cca02.  v7:= temp @kind wide;
  #L3cca04.  goto L3cca08;
  #L3cca06.  
  #L3cca08.  v0:= lcmp(v3, v7);
  #L3cca0c.  if v0 <= 0 then goto L3cca12;
  #L3cca10.  goto L3cca14;
  #L3cca12.  v1:= v2 @kind object;
  #L3cca14.  return v1 @kind object;
  catch `java.lang.IllegalArgumentException` @[L3cc9e0..L3cc9f0] goto L3cc9f2;
  catch `java.lang.ArithmeticException` @[L3cc9e0..L3cc9f0] goto L3cc9f2;
  catch `java.lang.IllegalArgumentException` @[L3cc9f4..L3cca04] goto L3cca06;
  catch `java.lang.ArithmeticException` @[L3cc9f4..L3cca04] goto L3cca06;
}
procedure `org.joda.time.tz.DateTimeZoneBuilder$DSTZone` `readFrom`(`java.io.DataInput` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.readFrom:(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3cc99c.  v0:= new `org.joda.time.tz.DateTimeZoneBuilder$DSTZone`;
  #L3cc9a0.  call temp:= `readMillis`(v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.readMillis:(Ljava/io/DataInput;)J` @kind static;
  #L3cc9a6.  v1:= temp @kind wide;
  #L3cc9a8.  v2:= (`int`) v1 @kind l2i;
  #L3cc9aa.  call temp:= `readFrom`(v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.readFrom:(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;` @kind static;
  #L3cc9b0.  v1:= temp @kind object;
  #L3cc9b2.  call temp:= `readFrom`(v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.readFrom:(Ljava/io/DataInput;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;` @kind static;
  #L3cc9b8.  v3:= temp @kind object;
  #L3cc9ba.  call `<init>`(v0, v4, v2, v1, v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.<init>:(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V` @kind direct;
  #L3cc9c0.  return v0 @kind object;
}
procedure `boolean` `equals`(`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3cc76c.  v0:= 1I;
  #L3cc76e.  if v4 != v5 then goto L3cc774;
  #L3cc772.  return v0;
  #L3cc774.  v1:= instanceof @variable v5 @type ^`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` @kind boolean;
  #L3cc778.  v2:= 0I;
  #L3cc77a.  if v1 == 0 then goto L3cc7d8;
  #L3cc77e.  v5:= (`org.joda.time.tz.DateTimeZoneBuilder$DSTZone`) v5 @kind object;
  #L3cc782.  call temp:= `getID`(v4) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3cc788.  v1:= temp @kind object;
  #L3cc78a.  call temp:= `getID`(v5) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3cc790.  v3:= temp @kind object;
  #L3cc792.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cc798.  v1:= temp;
  #L3cc79a.  if v1 == 0 then goto L3cc7d4;
  #L3cc79e.  v1:= v4.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStandardOffset` @type ^`int`;
  #L3cc7a2.  v3:= v5.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStandardOffset` @type ^`int`;
  #L3cc7a6.  if v1 != v3 then goto L3cc7d4;
  #L3cc7aa.  v1:= v4.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStartRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cc7ae.  v3:= v5.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStartRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cc7b2.  call temp:= `equals`(v1, v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cc7b8.  v1:= temp;
  #L3cc7ba.  if v1 == 0 then goto L3cc7d4;
  #L3cc7be.  v1:= v4.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iEndRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cc7c2.  v5:= v5.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iEndRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cc7c6.  call temp:= `equals`(v1, v5) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cc7cc.  v5:= temp;
  #L3cc7ce.  if v5 == 0 then goto L3cc7d4;
  #L3cc7d2.  goto L3cc7d6;
  #L3cc7d4.  v0:= 0I;
  #L3cc7d6.  return v0;
  #L3cc7d8.  return v2;
}
procedure `java.lang.String` `getNameKey`(`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.getNameKey:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3cc840.  call temp:= `findMatchingRecurrence`(v0, v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.findMatchingRecurrence:(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;` @kind direct;
  #L3cc846.  v1:= temp @kind object;
  #L3cc848.  call temp:= `getNameKey`(v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.getNameKey:()Ljava/lang/String;` @kind virtual;
  #L3cc84e.  v1:= temp @kind object;
  #L3cc850.  return v1 @kind object;
}
procedure `int` `getOffset`(`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.getOffset:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cc800.  v0:= v1.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStandardOffset` @type ^`int`;
  #L3cc804.  call temp:= `findMatchingRecurrence`(v1, v2) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.findMatchingRecurrence:(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;` @kind direct;
  #L3cc80a.  v2:= temp @kind object;
  #L3cc80c.  call temp:= `getSaveMillis`(v2) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.getSaveMillis:()I` @kind virtual;
  #L3cc812.  v2:= temp;
  #L3cc814.  v0:= v0 + v2 @kind int;
  #L3cc816.  return v0;
}
procedure `int` `getStandardOffset`(`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.getStandardOffset:(J)I` @AccessFlag PUBLIC {
    temp;

  #L3cc828.  v1:= v0.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStandardOffset` @type ^`int`;
  #L3cc82c.  return v1;
}
procedure `boolean` `isFixed`(`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` v1 @kind this) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.isFixed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cc7ec.  v0:= 0I;
  #L3cc7ee.  return v0;
}
procedure `long` `nextTransition`(`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` v8 @kind this, `long` v9 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.nextTransition:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3cc864.  v0:= v8.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStandardOffset` @type ^`int`;
  #L3cc868.  v1:= v8.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStartRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cc86c.  v2:= v8.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iEndRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cc870.  v3:= 0L;
  #L3cc874.  call temp:= `getSaveMillis`(v2) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.getSaveMillis:()I` @kind virtual;
  #L3cc87a.  v5:= temp;
  #L3cc87c.  call temp:= `next`(v1, v9, v0, v5) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.next:(JII)J` @kind virtual;
  #L3cc882.  v5:= temp @kind wide;
  #L3cc884.  v7:= lcmp(v9, v3);
  #L3cc888.  if v7 <= 0 then goto L3cc896;
  #L3cc88c.  v7:= lcmp(v5, v3);
  #L3cc890.  if v7 >= 0 then goto L3cc896;
  #L3cc894.  v5:= v9 @kind wide;
  #L3cc896.  call temp:= `getSaveMillis`(v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.getSaveMillis:()I` @kind virtual;
  #L3cc89c.  v1:= temp;
  #L3cc89e.  call temp:= `next`(v2, v9, v0, v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.next:(JII)J` @kind virtual;
  #L3cc8a4.  v0:= temp @kind wide;
  #L3cc8a6.  v2:= lcmp(v9, v3);
  #L3cc8aa.  if v2 <= 0 then goto L3cc8b8;
  #L3cc8ae.  v2:= lcmp(v0, v3);
  #L3cc8b2.  if v2 >= 0 then goto L3cc8b8;
  #L3cc8b6.  goto L3cc8be;
  #L3cc8b8.  v9:= v0 @kind wide;
  #L3cc8ba.  goto L3cc8be;
  #L3cc8bc.  
  #L3cc8be.  v0:= lcmp(v5, v9);
  #L3cc8c2.  if v0 <= 0 then goto L3cc8c8;
  #L3cc8c6.  v5:= v9 @kind wide;
  #L3cc8c8.  return v5 @kind wide;
  catch `java.lang.IllegalArgumentException` @[L3cc874..L3cc884] goto L3cc894;
  catch `java.lang.ArithmeticException` @[L3cc874..L3cc884] goto L3cc894;
  catch `java.lang.IllegalArgumentException` @[L3cc896..L3cc8a6] goto L3cc8bc;
  catch `java.lang.ArithmeticException` @[L3cc896..L3cc8a6] goto L3cc8bc;
}
procedure `long` `previousTransition`(`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` v10 @kind this, `long` v11 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.previousTransition:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3cc8fc.  v0:= 1L;
  #L3cc900.  v11:= v11 + v0 @kind long;
  #L3cc902.  v2:= v10.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStandardOffset` @type ^`int`;
  #L3cc906.  v3:= v10.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStartRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cc90a.  v4:= v10.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iEndRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cc90e.  v5:= 0L;
  #L3cc912.  call temp:= `getSaveMillis`(v4) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.getSaveMillis:()I` @kind virtual;
  #L3cc918.  v7:= temp;
  #L3cc91a.  call temp:= `previous`(v3, v11, v2, v7) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.previous:(JII)J` @kind virtual;
  #L3cc920.  v7:= temp @kind wide;
  #L3cc922.  v9:= lcmp(v11, v5);
  #L3cc926.  if v9 >= 0 then goto L3cc934;
  #L3cc92a.  v9:= lcmp(v7, v5);
  #L3cc92e.  if v9 <= 0 then goto L3cc934;
  #L3cc932.  v7:= v11 @kind wide;
  #L3cc934.  call temp:= `getSaveMillis`(v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.getSaveMillis:()I` @kind virtual;
  #L3cc93a.  v3:= temp;
  #L3cc93c.  call temp:= `previous`(v4, v11, v2, v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.previous:(JII)J` @kind virtual;
  #L3cc942.  v2:= temp @kind wide;
  #L3cc944.  v4:= lcmp(v11, v5);
  #L3cc948.  if v4 >= 0 then goto L3cc956;
  #L3cc94c.  v4:= lcmp(v2, v5);
  #L3cc950.  if v4 <= 0 then goto L3cc956;
  #L3cc954.  goto L3cc95c;
  #L3cc956.  v11:= v2 @kind wide;
  #L3cc958.  goto L3cc95c;
  #L3cc95a.  
  #L3cc95c.  v2:= lcmp(v7, v11);
  #L3cc960.  if v2 <= 0 then goto L3cc966;
  #L3cc964.  goto L3cc968;
  #L3cc966.  v7:= v11 @kind wide;
  #L3cc968.  v7:= v7 - v0 @kind long;
  #L3cc96a.  return v7 @kind wide;
  catch `java.lang.IllegalArgumentException` @[L3cc912..L3cc922] goto L3cc932;
  catch `java.lang.ArithmeticException` @[L3cc912..L3cc922] goto L3cc932;
  catch `java.lang.IllegalArgumentException` @[L3cc934..L3cc944] goto L3cc95a;
  catch `java.lang.ArithmeticException` @[L3cc934..L3cc944] goto L3cc95a;
}
procedure `void` `writeTo`(`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` v2 @kind this, `java.io.DataOutput` v3 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.writeTo:(Ljava/io/DataOutput;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cca6c.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStandardOffset` @type ^`int`;
  #L3cca70.  v0:= (`long`) v0 @kind i2l;
  #L3cca72.  call `writeMillis`(v3, v0) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.writeMillis:(Ljava/io/DataOutput;J)V` @kind static;
  #L3cca78.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStartRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cca7c.  call `writeTo`(v0, v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.writeTo:(Ljava/io/DataOutput;)V` @kind virtual;
  #L3cca82.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iEndRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cca86.  call `writeTo`(v0, v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.writeTo:(Ljava/io/DataOutput;)V` @kind virtual;
  #L3cca8c.  return @kind void;
}
