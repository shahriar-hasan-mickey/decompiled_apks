record `org.joda.time.tz.DateTimeZoneBuilder` @kind class @AccessFlag PUBLIC {
  `java.util.ArrayList` `org.joda.time.tz.DateTimeZoneBuilder.iRuleSets` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.joda.time.tz.DateTimeZoneBuilder` v2 @kind this) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ce800.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ce806.  v0:= new `java.util.ArrayList`;
  #L3ce80a.  v1:= 10I;
  #L3ce80e.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3ce814.  v2.`org.joda.time.tz.DateTimeZoneBuilder.iRuleSets` @type ^`java.util.ArrayList` := v0 @kind object;
  #L3ce818.  return @kind void;
}
procedure `boolean` `addTransition`(`org.joda.time.tz.DateTimeZoneBuilder` v9 @kind this, `java.util.ArrayList` v10 @kind object, `org.joda.time.tz.DateTimeZoneBuilder$Transition` v11 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.addTransition:(Ljava/util/ArrayList;Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3ce2ac.  call temp:= `size`(v10) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3ce2b2.  v0:= temp;
  #L3ce2b4.  v1:= 1I;
  #L3ce2b6.  if v0 != 0 then goto L3ce2c2;
  #L3ce2ba.  call temp:= `add`(v10, v11) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ce2c0.  return v1;
  #L3ce2c2.  v2:= v0 + -1;
  #L3ce2c6.  call temp:= `get`(v10, v2) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3ce2cc.  v3:= temp @kind object;
  #L3ce2ce.  v3:= (`org.joda.time.tz.DateTimeZoneBuilder$Transition`) v3 @kind object;
  #L3ce2d2.  call temp:= `isTransitionFrom`(v11, v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.isTransitionFrom:(Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;)Z` @kind virtual;
  #L3ce2d8.  v4:= temp;
  #L3ce2da.  v5:= 0I;
  #L3ce2dc.  if v4 != 0 then goto L3ce2e2;
  #L3ce2e0.  return v5;
  #L3ce2e2.  v4:= 2I;
  #L3ce2e4.  if v0 < v4 then goto L3ce2fe;
  #L3ce2e8.  v0:= v0 - v4 @kind int;
  #L3ce2ea.  call temp:= `get`(v10, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3ce2f0.  v0:= temp @kind object;
  #L3ce2f2.  v0:= (`org.joda.time.tz.DateTimeZoneBuilder$Transition`) v0 @kind object;
  #L3ce2f6.  call temp:= `getWallOffset`(v0) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getWallOffset:()I` @kind virtual;
  #L3ce2fc.  v5:= temp;
  #L3ce2fe.  call temp:= `getWallOffset`(v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getWallOffset:()I` @kind virtual;
  #L3ce304.  v0:= temp;
  #L3ce306.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getMillis:()J` @kind virtual;
  #L3ce30c.  v3:= temp @kind wide;
  #L3ce30e.  v5:= (`long`) v5 @kind i2l;
  #L3ce310.  v3:= v3 + v5 @kind long;
  #L3ce312.  call temp:= `getMillis`(v11) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getMillis:()J` @kind virtual;
  #L3ce318.  v5:= temp @kind wide;
  #L3ce31a.  v7:= (`long`) v0 @kind i2l;
  #L3ce31c.  v5:= v5 + v7 @kind long;
  #L3ce31e.  v0:= lcmp(v5, v3);
  #L3ce322.  if v0 == 0 then goto L3ce32e;
  #L3ce326.  call temp:= `add`(v10, v11) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ce32c.  return v1;
  #L3ce32e.  call temp:= `remove`(v10, v2) @signature `Ljava/util/ArrayList;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L3ce334.  call temp:= `addTransition`(v9, v10, v11) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.addTransition:(Ljava/util/ArrayList;Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;)Z` @kind direct;
  #L3ce33a.  v10:= temp;
  #L3ce33c.  return v10;
}
procedure `org.joda.time.DateTimeZone` `buildFixedZone`(`java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.buildFixedZone:(Ljava/lang/String;Ljava/lang/String;II)Lorg/joda/time/DateTimeZone;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3ce420.  v0:= "UTC" @kind object;
  #L3ce424.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ce42a.  v0:= temp;
  #L3ce42c.  if v0 == 0 then goto L3ce44a;
  #L3ce430.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ce436.  v0:= temp;
  #L3ce438.  if v0 == 0 then goto L3ce44a;
  #L3ce43c.  if v3 != 0 then goto L3ce44a;
  #L3ce440.  if v4 != 0 then goto L3ce44a;
  #L3ce444.  v1:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3ce448.  return v1 @kind object;
  #L3ce44a.  v0:= new `org.joda.time.tz.FixedDateTimeZone`;
  #L3ce44e.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lorg/joda/time/tz/FixedDateTimeZone;.<init>:(Ljava/lang/String;Ljava/lang/String;II)V` @kind direct;
  #L3ce454.  return v0 @kind object;
}
procedure `org.joda.time.tz.DateTimeZoneBuilder$RuleSet` `getLastRuleSet`(`org.joda.time.tz.DateTimeZoneBuilder` v9 @kind this) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.getLastRuleSet:()Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3ce7a8.  v0:= v9.`org.joda.time.tz.DateTimeZoneBuilder.iRuleSets` @type ^`java.util.ArrayList` @kind object;
  #L3ce7ac.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3ce7b2.  v0:= temp;
  #L3ce7b4.  if v0 != 0 then goto L3ce7d2;
  #L3ce7b8.  v2:= -2147483648I;
  #L3ce7bc.  v3:= 119I;
  #L3ce7c0.  v4:= 1I;
  #L3ce7c2.  v5:= 1I;
  #L3ce7c4.  v6:= 0I;
  #L3ce7c6.  v7:= 0I;
  #L3ce7c8.  v8:= 0I;
  #L3ce7ca.  v1:= v9 @kind object;
  #L3ce7cc.  call temp:= `addCutover`(v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.addCutover:(ICIIIZI)Lorg/joda/time/tz/DateTimeZoneBuilder;` @kind virtual;
  #L3ce7d2.  v0:= v9.`org.joda.time.tz.DateTimeZoneBuilder.iRuleSets` @type ^`java.util.ArrayList` @kind object;
  #L3ce7d6.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3ce7dc.  v1:= temp;
  #L3ce7de.  v1:= v1 + -1;
  #L3ce7e2.  call temp:= `get`(v0, v1) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3ce7e8.  v0:= temp @kind object;
  #L3ce7ea.  v0:= (`org.joda.time.tz.DateTimeZoneBuilder$RuleSet`) v0 @kind object;
  #L3ce7ee.  return v0 @kind object;
}
procedure `org.joda.time.DateTimeZone` `readFrom`(`java.io.DataInput` v6 @kind object, `java.lang.String` v7 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.readFrom:(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ce468.  call temp:= `readUnsignedByte`(v6) @signature `Ljava/io/DataInput;.readUnsignedByte:()I` @kind interface;
  #L3ce46e.  v0:= temp;
  #L3ce470.  v1:= 67I;
  #L3ce474.  if v0 == v1 then goto L3ce4de;
  #L3ce478.  v1:= 70I;
  #L3ce47c.  if v0 == v1 then goto L3ce4a2;
  #L3ce480.  v1:= 80I;
  #L3ce484.  if v0 != v1 then goto L3ce492;
  #L3ce488.  call temp:= `readFrom`(v6, v7) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.readFrom:(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;` @kind static;
  #L3ce48e.  v6:= temp @kind object;
  #L3ce490.  return v6 @kind object;
  #L3ce492.  v6:= new `java.io.IOException`;
  #L3ce496.  v7:= "Invalid encoding" @kind object;
  #L3ce49a.  call `<init>`(v6, v7) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ce4a0.  throw v6;
  #L3ce4a2.  v0:= new `org.joda.time.tz.FixedDateTimeZone`;
  #L3ce4a6.  call temp:= `readUTF`(v6) @signature `Ljava/io/DataInput;.readUTF:()Ljava/lang/String;` @kind interface;
  #L3ce4ac.  v1:= temp @kind object;
  #L3ce4ae.  call temp:= `readMillis`(v6) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.readMillis:(Ljava/io/DataInput;)J` @kind static;
  #L3ce4b4.  v2:= temp @kind wide;
  #L3ce4b6.  v3:= (`int`) v2 @kind l2i;
  #L3ce4b8.  call temp:= `readMillis`(v6) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.readMillis:(Ljava/io/DataInput;)J` @kind static;
  #L3ce4be.  v4:= temp @kind wide;
  #L3ce4c0.  v6:= (`int`) v4 @kind l2i;
  #L3ce4c2.  call `<init>`(v0, v7, v1, v3, v6) @signature `Lorg/joda/time/tz/FixedDateTimeZone;.<init>:(Ljava/lang/String;Ljava/lang/String;II)V` @kind direct;
  #L3ce4c8.  v6:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3ce4cc.  call temp:= `equals`(v0, v6) @signature `Lorg/joda/time/tz/FixedDateTimeZone;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ce4d2.  v6:= temp;
  #L3ce4d4.  if v6 == 0 then goto L3ce4dc;
  #L3ce4d8.  v0:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3ce4dc.  return v0 @kind object;
  #L3ce4de.  call temp:= `readFrom`(v6, v7) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.readFrom:(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;` @kind static;
  #L3ce4e4.  v6:= temp @kind object;
  #L3ce4e6.  call temp:= `forZone`(v6) @signature `Lorg/joda/time/tz/CachedDateTimeZone;.forZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/tz/CachedDateTimeZone;` @kind static;
  #L3ce4ec.  v6:= temp @kind object;
  #L3ce4ee.  return v6 @kind object;
}
procedure `org.joda.time.DateTimeZone` `readFrom`(`java.io.InputStream` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.readFrom:(Ljava/io/InputStream;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ce500.  v0:= instanceof @variable v1 @type ^`java.io.DataInput` @kind boolean;
  #L3ce504.  if v0 == 0 then goto L3ce516;
  #L3ce508.  v1:= (`java.io.DataInput`) v1 @kind object;
  #L3ce50c.  call temp:= `readFrom`(v1, v2) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.readFrom:(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;` @kind static;
  #L3ce512.  v1:= temp @kind object;
  #L3ce514.  return v1 @kind object;
  #L3ce516.  v0:= new `java.io.DataInputStream`;
  #L3ce51a.  call `<init>`(v0, v1) @signature `Ljava/io/DataInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L3ce520.  call temp:= `readFrom`(v0, v2) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.readFrom:(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/DateTimeZone;` @kind static;
  #L3ce526.  v1:= temp @kind object;
  #L3ce528.  return v1 @kind object;
}
procedure `long` `readMillis`(`java.io.DataInput` v5 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.readMillis:(Ljava/io/DataInput;)J` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ce350.  call temp:= `readUnsignedByte`(v5) @signature `Ljava/io/DataInput;.readUnsignedByte:()I` @kind interface;
  #L3ce356.  v0:= temp;
  #L3ce358.  v1:= v0 ^> 6;
  #L3ce35c.  v2:= 1I;
  #L3ce35e.  v3:= 2I;
  #L3ce360.  v4:= 26I;
  #L3ce364.  if v1 == v2 then goto L3ce3dc;
  #L3ce368.  if v1 == v3 then goto L3ce390;
  #L3ce36c.  v2:= 3I;
  #L3ce36e.  if v1 == v2 then goto L3ce386;
  #L3ce372.  v5:= v0 ^< 26;
  #L3ce376.  v5:= v5 ^> v4 @kind int;
  #L3ce378.  v0:= (`long`) v5 @kind i2l;
  #L3ce37a.  v2:= 1800000L;
  #L3ce380.  v0:= v0 * v2 @kind long;
  #L3ce384.  return v0 @kind wide;
  #L3ce386.  call temp:= `readLong`(v5) @signature `Ljava/io/DataInput;.readLong:()J` @kind interface;
  #L3ce38c.  v0:= temp @kind wide;
  #L3ce38e.  return v0 @kind wide;
  #L3ce390.  v0:= (`long`) v0 @kind i2l;
  #L3ce392.  v2:= 58I;
  #L3ce396.  v0:= v0 ^< v2 @kind long;
  #L3ce398.  v0:= v0 ^> v4 @kind long;
  #L3ce39a.  call temp:= `readUnsignedByte`(v5) @signature `Ljava/io/DataInput;.readUnsignedByte:()I` @kind interface;
  #L3ce3a0.  v2:= temp;
  #L3ce3a2.  v2:= v2 ^< 24;
  #L3ce3a6.  v2:= (`long`) v2 @kind i2l;
  #L3ce3a8.  v0:= v0 ^| v2 @kind long;
  #L3ce3aa.  call temp:= `readUnsignedByte`(v5) @signature `Ljava/io/DataInput;.readUnsignedByte:()I` @kind interface;
  #L3ce3b0.  v2:= temp;
  #L3ce3b2.  v2:= v2 ^< 16;
  #L3ce3b6.  v2:= (`long`) v2 @kind i2l;
  #L3ce3b8.  v0:= v0 ^| v2 @kind long;
  #L3ce3ba.  call temp:= `readUnsignedByte`(v5) @signature `Ljava/io/DataInput;.readUnsignedByte:()I` @kind interface;
  #L3ce3c0.  v2:= temp;
  #L3ce3c2.  v2:= v2 ^< 8;
  #L3ce3c6.  v2:= (`long`) v2 @kind i2l;
  #L3ce3c8.  v0:= v0 ^| v2 @kind long;
  #L3ce3ca.  call temp:= `readUnsignedByte`(v5) @signature `Ljava/io/DataInput;.readUnsignedByte:()I` @kind interface;
  #L3ce3d0.  v5:= temp;
  #L3ce3d2.  v2:= (`long`) v5 @kind i2l;
  #L3ce3d4.  v0:= v0 ^| v2 @kind long;
  #L3ce3d6.  v2:= 1000L;
  #L3ce3da.  goto L3ce380;
  #L3ce3dc.  v0:= v0 ^< v4 @kind int;
  #L3ce3de.  v0:= v0 ^> v3 @kind int;
  #L3ce3e0.  call temp:= `readUnsignedByte`(v5) @signature `Ljava/io/DataInput;.readUnsignedByte:()I` @kind interface;
  #L3ce3e6.  v1:= temp;
  #L3ce3e8.  v1:= v1 ^< 16;
  #L3ce3ec.  v0:= v0 ^| v1 @kind int;
  #L3ce3ee.  call temp:= `readUnsignedByte`(v5) @signature `Ljava/io/DataInput;.readUnsignedByte:()I` @kind interface;
  #L3ce3f4.  v1:= temp;
  #L3ce3f6.  v1:= v1 ^< 8;
  #L3ce3fa.  v0:= v0 ^| v1 @kind int;
  #L3ce3fc.  call temp:= `readUnsignedByte`(v5) @signature `Ljava/io/DataInput;.readUnsignedByte:()I` @kind interface;
  #L3ce402.  v5:= temp;
  #L3ce404.  v5:= v5 ^| v0 @kind int;
  #L3ce406.  v0:= (`long`) v5 @kind i2l;
  #L3ce408.  v2:= 60000L;
  #L3ce40e.  goto L3ce380;
}
procedure `void` `writeMillis`(`java.io.DataOutput` v10 @kind object, `long` v11 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.writeMillis:(Ljava/io/DataOutput;J)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3ce82c.  v0:= 1800000L;
  #L3ce832.  v2:= v11 %% v0 @kind long;
  #L3ce836.  v4:= 63L;
  #L3ce83a.  v6:= 0L;
  #L3ce83e.  v8:= lcmp(v2, v6);
  #L3ce842.  if v8 != 0 then goto L3ce86c;
  #L3ce846.  v0:= v11 / v0 @kind long;
  #L3ce84a.  v2:= 58I;
  #L3ce84e.  v8:= v0 ^< v2 @kind long;
  #L3ce852.  v2:= v8 ^> v2 @kind long;
  #L3ce856.  v8:= lcmp(v2, v0);
  #L3ce85a.  if v8 != 0 then goto L3ce86c;
  #L3ce85e.  v11:= v0 ^& v4 @kind long;
  #L3ce862.  v12:= (`int`) v11 @kind l2i;
  #L3ce864.  call `writeByte`(v10, v12) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L3ce86a.  return @kind void;
  #L3ce86c.  v0:= 60000L;
  #L3ce872.  v2:= v11 %% v0 @kind long;
  #L3ce876.  v8:= lcmp(v2, v6);
  #L3ce87a.  if v8 != 0 then goto L3ce8ae;
  #L3ce87e.  v0:= v11 / v0 @kind long;
  #L3ce882.  v2:= 34I;
  #L3ce886.  v8:= v0 ^< v2 @kind long;
  #L3ce88a.  v2:= v8 ^> v2 @kind long;
  #L3ce88e.  v8:= lcmp(v2, v0);
  #L3ce892.  if v8 != 0 then goto L3ce8ae;
  #L3ce896.  v11:= 2.0F;
  #L3ce89a.  v2:= 1073741823L;
  #L3ce8a0.  v0:= v0 ^& v2 @kind long;
  #L3ce8a2.  v12:= (`int`) v0 @kind l2i;
  #L3ce8a4.  v11:= v11 ^| v12 @kind int;
  #L3ce8a6.  call `writeInt`(v10, v11) @signature `Ljava/io/DataOutput;.writeInt:(I)V` @kind interface;
  #L3ce8ac.  return @kind void;
  #L3ce8ae.  v0:= 1000L;
  #L3ce8b2.  v2:= v11 %% v0 @kind long;
  #L3ce8b6.  v8:= lcmp(v2, v6);
  #L3ce8ba.  if v8 != 0 then goto L3ce8fc;
  #L3ce8be.  v0:= v11 / v0 @kind long;
  #L3ce8c2.  v2:= 26I;
  #L3ce8c6.  v8:= v0 ^< v2 @kind long;
  #L3ce8ca.  v2:= v8 ^> v2 @kind long;
  #L3ce8ce.  v8:= lcmp(v2, v0);
  #L3ce8d2.  if v8 != 0 then goto L3ce8fc;
  #L3ce8d6.  v11:= 32I;
  #L3ce8da.  v11:= v0 ^> v11 @kind long;
  #L3ce8de.  v11:= v11 ^& v4 @kind long;
  #L3ce8e0.  v12:= (`int`) v11 @kind l2i;
  #L3ce8e2.  v11:= v12 ^| 128;
  #L3ce8e6.  call `writeByte`(v10, v11) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L3ce8ec.  v11:= -1L;
  #L3ce8f0.  v11:= v11 ^& v0 @kind long;
  #L3ce8f2.  v12:= (`int`) v11 @kind l2i;
  #L3ce8f4.  call `writeInt`(v10, v12) @signature `Ljava/io/DataOutput;.writeInt:(I)V` @kind interface;
  #L3ce8fa.  return @kind void;
  #L3ce8fc.  v0:= lcmp(v11, v6);
  #L3ce900.  if v0 >= 0 then goto L3ce90a;
  #L3ce904.  v0:= 255I;
  #L3ce908.  goto L3ce90e;
  #L3ce90a.  v0:= 192I;
  #L3ce90e.  call `writeByte`(v10, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L3ce914.  call `writeLong`(v10, v11) @signature `Ljava/io/DataOutput;.writeLong:(J)V` @kind interface;
  #L3ce91a.  return @kind void;
}
procedure `org.joda.time.tz.DateTimeZoneBuilder` `addCutover`(`org.joda.time.tz.DateTimeZoneBuilder` v8 @kind this, `int` v9 , `char` v10 , `int` v11 , `int` v12 , `int` v13 , `boolean` v14 , `int` v15 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.addCutover:(ICIIIZI)Lorg/joda/time/tz/DateTimeZoneBuilder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3ce694.  v0:= v8.`org.joda.time.tz.DateTimeZoneBuilder.iRuleSets` @type ^`java.util.ArrayList` @kind object;
  #L3ce698.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3ce69e.  v0:= temp;
  #L3ce6a0.  if v0 <= 0 then goto L3ce6de;
  #L3ce6a4.  v0:= new `org.joda.time.tz.DateTimeZoneBuilder$OfYear`;
  #L3ce6a8.  v1:= v0 @kind object;
  #L3ce6aa.  v2:= v10;
  #L3ce6ac.  v3:= v11;
  #L3ce6ae.  v4:= v12;
  #L3ce6b0.  v5:= v13;
  #L3ce6b2.  v6:= v14;
  #L3ce6b4.  v7:= v15;
  #L3ce6b6.  call `<init>`(v1, v2, v3, v4, v5, v6, v7) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.<init>:(CIIIZI)V` @kind direct;
  #L3ce6bc.  v10:= v8.`org.joda.time.tz.DateTimeZoneBuilder.iRuleSets` @type ^`java.util.ArrayList` @kind object;
  #L3ce6c0.  call temp:= `size`(v10) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3ce6c6.  v11:= temp;
  #L3ce6c8.  v11:= v11 + -1;
  #L3ce6cc.  call temp:= `get`(v10, v11) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3ce6d2.  v10:= temp @kind object;
  #L3ce6d4.  v10:= (`org.joda.time.tz.DateTimeZoneBuilder$RuleSet`) v10 @kind object;
  #L3ce6d8.  call `setUpperLimit`(v10, v9, v0) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.setUpperLimit:(ILorg/joda/time/tz/DateTimeZoneBuilder$OfYear;)V` @kind virtual;
  #L3ce6de.  v9:= v8.`org.joda.time.tz.DateTimeZoneBuilder.iRuleSets` @type ^`java.util.ArrayList` @kind object;
  #L3ce6e2.  v10:= new `org.joda.time.tz.DateTimeZoneBuilder$RuleSet`;
  #L3ce6e6.  call `<init>`(v10) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.<init>:()V` @kind direct;
  #L3ce6ec.  call temp:= `add`(v9, v10) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ce6f2.  return v8 @kind object;
}
procedure `org.joda.time.tz.DateTimeZoneBuilder` `addRecurringSavings`(`org.joda.time.tz.DateTimeZoneBuilder` v10 @kind this, `java.lang.String` v11 @kind object, `int` v12 , `int` v13 , `int` v14 , `char` v15 , `int` v16 , `int` v17 , `int` v18 , `boolean` v19 , `int` v20 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.addRecurringSavings:(Ljava/lang/String;IIICIIIZI)Lorg/joda/time/tz/DateTimeZoneBuilder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3ce704.  v0:= v13;
  #L3ce706.  v1:= v14;
  #L3ce708.  if v0 > v1 then goto L3ce754;
  #L3ce70c.  v9:= new `org.joda.time.tz.DateTimeZoneBuilder$OfYear`;
  #L3ce710.  v2:= v9 @kind object;
  #L3ce712.  v3:= v15;
  #L3ce714.  v4:= v16;
  #L3ce718.  v5:= v17;
  #L3ce71c.  v6:= v18;
  #L3ce720.  v7:= v19;
  #L3ce724.  v8:= v20;
  #L3ce728.  call `<init>`(v2, v3, v4, v5, v6, v7, v8) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;.<init>:(CIIIZI)V` @kind direct;
  #L3ce72e.  v2:= new `org.joda.time.tz.DateTimeZoneBuilder$Recurrence`;
  #L3ce732.  v3:= v11 @kind object;
  #L3ce734.  v4:= v12;
  #L3ce736.  call `<init>`(v2, v9, v11, v12) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.<init>:(Lorg/joda/time/tz/DateTimeZoneBuilder$OfYear;Ljava/lang/String;I)V` @kind direct;
  #L3ce73c.  v3:= new `org.joda.time.tz.DateTimeZoneBuilder$Rule`;
  #L3ce740.  call `<init>`(v3, v2, v13, v14) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Rule;.<init>:(Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;II)V` @kind direct;
  #L3ce746.  call temp:= `getLastRuleSet`(v10) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.getLastRuleSet:()Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;` @kind direct;
  #L3ce74c.  v0:= temp @kind object;
  #L3ce74e.  call `addRule`(v0, v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.addRule:(Lorg/joda/time/tz/DateTimeZoneBuilder$Rule;)V` @kind virtual;
  #L3ce754.  return v10 @kind object;
}
procedure `org.joda.time.tz.DateTimeZoneBuilder` `setFixedSavings`(`org.joda.time.tz.DateTimeZoneBuilder` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.setFixedSavings:(Ljava/lang/String;I)Lorg/joda/time/tz/DateTimeZoneBuilder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ce768.  call temp:= `getLastRuleSet`(v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.getLastRuleSet:()Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;` @kind direct;
  #L3ce76e.  v0:= temp @kind object;
  #L3ce770.  call `setFixedSavings`(v0, v2, v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.setFixedSavings:(Ljava/lang/String;I)V` @kind virtual;
  #L3ce776.  return v1 @kind object;
}
procedure `org.joda.time.tz.DateTimeZoneBuilder` `setStandardOffset`(`org.joda.time.tz.DateTimeZoneBuilder` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.setStandardOffset:(I)Lorg/joda/time/tz/DateTimeZoneBuilder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ce788.  call temp:= `getLastRuleSet`(v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.getLastRuleSet:()Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;` @kind direct;
  #L3ce78e.  v0:= temp @kind object;
  #L3ce790.  call `setStandardOffset`(v0, v2) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.setStandardOffset:(I)V` @kind virtual;
  #L3ce796.  return v1 @kind object;
}
procedure `org.joda.time.DateTimeZone` `toDateTimeZone`(`org.joda.time.tz.DateTimeZoneBuilder` v12 @kind this, `java.lang.String` v13 @kind object, `boolean` v14 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.toDateTimeZone:(Ljava/lang/String;Z)Lorg/joda/time/DateTimeZone;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3ce53c.  if v13 == 0 then goto L3ce678;
  #L3ce540.  v0:= new `java.util.ArrayList`;
  #L3ce544.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3ce54a.  v1:= 0I;
  #L3ce54c.  v2:= -9223372036854775808L;
  #L3ce550.  v4:= v12.`org.joda.time.tz.DateTimeZoneBuilder.iRuleSets` @type ^`java.util.ArrayList` @kind object;
  #L3ce554.  call temp:= `size`(v4) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3ce55a.  v4:= temp;
  #L3ce55c.  v5:= 0I;
  #L3ce55e.  v6:= 0I;
  #L3ce560.  if v6 >= v4 then goto L3ce5fa;
  #L3ce564.  v7:= v12.`org.joda.time.tz.DateTimeZoneBuilder.iRuleSets` @type ^`java.util.ArrayList` @kind object;
  #L3ce568.  call temp:= `get`(v7, v6) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3ce56e.  v7:= temp @kind object;
  #L3ce570.  v7:= (`org.joda.time.tz.DateTimeZoneBuilder$RuleSet`) v7 @kind object;
  #L3ce574.  call temp:= `firstTransition`(v7, v2) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.firstTransition:(J)Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;` @kind virtual;
  #L3ce57a.  v8:= temp @kind object;
  #L3ce57c.  if v8 != 0 then goto L3ce582;
  #L3ce580.  goto L3ce5f4;
  #L3ce582.  call temp:= `addTransition`(v12, v0, v8) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.addTransition:(Ljava/util/ArrayList;Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;)Z` @kind direct;
  #L3ce588.  call temp:= `getMillis`(v8) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getMillis:()J` @kind virtual;
  #L3ce58e.  v2:= temp @kind wide;
  #L3ce590.  call temp:= `getSaveMillis`(v8) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getSaveMillis:()I` @kind virtual;
  #L3ce596.  v8:= temp;
  #L3ce598.  v9:= new `org.joda.time.tz.DateTimeZoneBuilder$RuleSet`;
  #L3ce59c.  call `<init>`(v9, v7) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.<init>:(Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;)V` @kind direct;
  #L3ce5a2.  call temp:= `nextTransition`(v9, v2, v8) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.nextTransition:(JI)Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;` @kind virtual;
  #L3ce5a8.  v2:= temp @kind object;
  #L3ce5aa.  if v2 == 0 then goto L3ce5ec;
  #L3ce5ae.  call temp:= `addTransition`(v12, v0, v2) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.addTransition:(Ljava/util/ArrayList;Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;)Z` @kind direct;
  #L3ce5b4.  v3:= temp;
  #L3ce5b6.  if v3 == 0 then goto L3ce5c0;
  #L3ce5ba.  if v1 == 0 then goto L3ce5c0;
  #L3ce5be.  goto L3ce5ec;
  #L3ce5c0.  call temp:= `getMillis`(v2) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getMillis:()J` @kind virtual;
  #L3ce5c6.  v7:= temp @kind wide;
  #L3ce5c8.  call temp:= `getSaveMillis`(v2) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getSaveMillis:()I` @kind virtual;
  #L3ce5ce.  v2:= temp;
  #L3ce5d0.  if v1 != 0 then goto L3ce5e4;
  #L3ce5d4.  v3:= v4 + -1;
  #L3ce5d8.  if v6 != v3 then goto L3ce5e4;
  #L3ce5dc.  call temp:= `buildTailZone`(v9, v13) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.buildTailZone:(Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;` @kind virtual;
  #L3ce5e2.  v1:= temp @kind object;
  #L3ce5e4.  v10:= v7 @kind wide;
  #L3ce5e6.  v8:= v2;
  #L3ce5e8.  v2:= v10 @kind wide;
  #L3ce5ea.  goto L3ce5a2;
  #L3ce5ec.  call temp:= `getUpperLimit`(v9, v8) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$RuleSet;.getUpperLimit:(I)J` @kind virtual;
  #L3ce5f2.  v2:= temp @kind wide;
  #L3ce5f4.  v6:= v6 + 1;
  #L3ce5f8.  goto L3ce560;
  #L3ce5fa.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3ce600.  v2:= temp;
  #L3ce602.  if v2 != 0 then goto L3ce61a;
  #L3ce606.  if v1 == 0 then goto L3ce60c;
  #L3ce60a.  return v1 @kind object;
  #L3ce60c.  v14:= "UTC" @kind object;
  #L3ce610.  call temp:= `buildFixedZone`(v13, v14, v5, v5) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.buildFixedZone:(Ljava/lang/String;Ljava/lang/String;II)Lorg/joda/time/DateTimeZone;` @kind static;
  #L3ce616.  v13:= temp @kind object;
  #L3ce618.  return v13 @kind object;
  #L3ce61a.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3ce620.  v2:= temp;
  #L3ce622.  v3:= 1I;
  #L3ce624.  if v2 != v3 then goto L3ce65a;
  #L3ce628.  if v1 != 0 then goto L3ce65a;
  #L3ce62c.  call temp:= `get`(v0, v5) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3ce632.  v14:= temp @kind object;
  #L3ce634.  v14:= (`org.joda.time.tz.DateTimeZoneBuilder$Transition`) v14 @kind object;
  #L3ce638.  call temp:= `getNameKey`(v14) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getNameKey:()Ljava/lang/String;` @kind virtual;
  #L3ce63e.  v0:= temp @kind object;
  #L3ce640.  call temp:= `getWallOffset`(v14) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getWallOffset:()I` @kind virtual;
  #L3ce646.  v1:= temp;
  #L3ce648.  call temp:= `getStandardOffset`(v14) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getStandardOffset:()I` @kind virtual;
  #L3ce64e.  v14:= temp;
  #L3ce650.  call temp:= `buildFixedZone`(v13, v0, v1, v14) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.buildFixedZone:(Ljava/lang/String;Ljava/lang/String;II)Lorg/joda/time/DateTimeZone;` @kind static;
  #L3ce656.  v13:= temp @kind object;
  #L3ce658.  return v13 @kind object;
  #L3ce65a.  call temp:= `create`(v13, v14, v0, v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.create:(Ljava/lang/String;ZLjava/util/ArrayList;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;` @kind static;
  #L3ce660.  v13:= temp @kind object;
  #L3ce662.  call temp:= `isCachable`(v13) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.isCachable:()Z` @kind virtual;
  #L3ce668.  v14:= temp;
  #L3ce66a.  if v14 == 0 then goto L3ce676;
  #L3ce66e.  call temp:= `forZone`(v13) @signature `Lorg/joda/time/tz/CachedDateTimeZone;.forZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/tz/CachedDateTimeZone;` @kind static;
  #L3ce674.  v13:= temp @kind object;
  #L3ce676.  return v13 @kind object;
  #L3ce678.  v13:= new `java.lang.IllegalArgumentException`;
  #L3ce67c.  call `<init>`(v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3ce682.  throw v13;
}
procedure `void` `writeTo`(`org.joda.time.tz.DateTimeZoneBuilder` v4 @kind this, `java.lang.String` v5 @kind object, `java.io.DataOutput` v6 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.writeTo:(Ljava/lang/String;Ljava/io/DataOutput;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ce92c.  v0:= 0I;
  #L3ce92e.  call temp:= `toDateTimeZone`(v4, v5, v0) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.toDateTimeZone:(Ljava/lang/String;Z)Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3ce934.  v5:= temp @kind object;
  #L3ce936.  v0:= instanceof @variable v5 @type ^`org.joda.time.tz.FixedDateTimeZone` @kind boolean;
  #L3ce93a.  if v0 == 0 then goto L3ce97c;
  #L3ce93e.  v0:= 70I;
  #L3ce942.  call `writeByte`(v6, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L3ce948.  v0:= 0L;
  #L3ce94c.  call temp:= `getNameKey`(v5, v0) @signature `Lorg/joda/time/DateTimeZone;.getNameKey:(J)Ljava/lang/String;` @kind virtual;
  #L3ce952.  v2:= temp @kind object;
  #L3ce954.  call `writeUTF`(v6, v2) @signature `Ljava/io/DataOutput;.writeUTF:(Ljava/lang/String;)V` @kind interface;
  #L3ce95a.  call temp:= `getOffset`(v5, v0) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L3ce960.  v2:= temp;
  #L3ce962.  v2:= (`long`) v2 @kind i2l;
  #L3ce964.  call `writeMillis`(v6, v2) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.writeMillis:(Ljava/io/DataOutput;J)V` @kind static;
  #L3ce96a.  call temp:= `getStandardOffset`(v5, v0) @signature `Lorg/joda/time/DateTimeZone;.getStandardOffset:(J)I` @kind virtual;
  #L3ce970.  v5:= temp;
  #L3ce972.  v0:= (`long`) v5 @kind i2l;
  #L3ce974.  call `writeMillis`(v6, v0) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.writeMillis:(Ljava/io/DataOutput;J)V` @kind static;
  #L3ce97a.  goto L3ce9b0;
  #L3ce97c.  v0:= instanceof @variable v5 @type ^`org.joda.time.tz.CachedDateTimeZone` @kind boolean;
  #L3ce980.  if v0 == 0 then goto L3ce99c;
  #L3ce984.  v0:= 67I;
  #L3ce988.  call `writeByte`(v6, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L3ce98e.  v5:= (`org.joda.time.tz.CachedDateTimeZone`) v5 @kind object;
  #L3ce992.  call temp:= `getUncachedZone`(v5) @signature `Lorg/joda/time/tz/CachedDateTimeZone;.getUncachedZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3ce998.  v5:= temp @kind object;
  #L3ce99a.  goto L3ce9a6;
  #L3ce99c.  v0:= 80I;
  #L3ce9a0.  call `writeByte`(v6, v0) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L3ce9a6.  v5:= (`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone`) v5 @kind object;
  #L3ce9aa.  call `writeTo`(v5, v6) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.writeTo:(Ljava/io/DataOutput;)V` @kind virtual;
  #L3ce9b0.  return @kind void;
}
procedure `void` `writeTo`(`org.joda.time.tz.DateTimeZoneBuilder` v1 @kind this, `java.lang.String` v2 @kind object, `java.io.OutputStream` v3 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.writeTo:(Ljava/lang/String;Ljava/io/OutputStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ce9c4.  v0:= instanceof @variable v3 @type ^`java.io.DataOutput` @kind boolean;
  #L3ce9c8.  if v0 == 0 then goto L3ce9d8;
  #L3ce9cc.  v3:= (`java.io.DataOutput`) v3 @kind object;
  #L3ce9d0.  call `writeTo`(v1, v2, v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.writeTo:(Ljava/lang/String;Ljava/io/DataOutput;)V` @kind virtual;
  #L3ce9d6.  goto L3ce9ee;
  #L3ce9d8.  v0:= new `java.io.DataOutputStream`;
  #L3ce9dc.  call `<init>`(v0, v3) @signature `Ljava/io/DataOutputStream;.<init>:(Ljava/io/OutputStream;)V` @kind direct;
  #L3ce9e2.  call `writeTo`(v1, v2, v0) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.writeTo:(Ljava/lang/String;Ljava/io/DataOutput;)V` @kind virtual;
  #L3ce9e8.  call `flush`(v0) @signature `Ljava/io/DataOutputStream;.flush:()V` @kind virtual;
  #L3ce9ee.  return @kind void;
}
