record `org.joda.time.tz.ZoneInfoCompiler$RuleSet` @kind class @AccessFlag  {
  `java.util.List` `org.joda.time.tz.ZoneInfoCompiler$RuleSet.iRules` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.joda.time.tz.ZoneInfoCompiler$RuleSet` v1 @kind this, `org.joda.time.tz.ZoneInfoCompiler$Rule` v2 @kind object) @signature `Lorg/joda/time/tz/ZoneInfoCompiler$RuleSet;.<init>:(Lorg/joda/time/tz/ZoneInfoCompiler$Rule;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3cf420.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3cf426.  v0:= new `java.util.ArrayList`;
  #L3cf42a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3cf430.  v1.`org.joda.time.tz.ZoneInfoCompiler$RuleSet.iRules` @type ^`java.util.List` := v0 @kind object;
  #L3cf434.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3cf43a.  return @kind void;
}
procedure `void` `addRecurring`(`org.joda.time.tz.ZoneInfoCompiler$RuleSet` v2 @kind this, `org.joda.time.tz.DateTimeZoneBuilder` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/joda/time/tz/ZoneInfoCompiler$RuleSet;.addRecurring:(Lorg/joda/time/tz/DateTimeZoneBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cf44c.  v0:= 0I;
  #L3cf44e.  v1:= v2.`org.joda.time.tz.ZoneInfoCompiler$RuleSet.iRules` @type ^`java.util.List` @kind object;
  #L3cf452.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3cf458.  v1:= temp;
  #L3cf45a.  if v0 >= v1 then goto L3cf47a;
  #L3cf45e.  v1:= v2.`org.joda.time.tz.ZoneInfoCompiler$RuleSet.iRules` @type ^`java.util.List` @kind object;
  #L3cf462.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3cf468.  v1:= temp @kind object;
  #L3cf46a.  v1:= (`org.joda.time.tz.ZoneInfoCompiler$Rule`) v1 @kind object;
  #L3cf46e.  call `addRecurring`(v1, v3, v4) @signature `Lorg/joda/time/tz/ZoneInfoCompiler$Rule;.addRecurring:(Lorg/joda/time/tz/DateTimeZoneBuilder;Ljava/lang/String;)V` @kind virtual;
  #L3cf474.  v0:= v0 + 1;
  #L3cf478.  goto L3cf44e;
  #L3cf47a.  return @kind void;
}
procedure `void` `addRule`(`org.joda.time.tz.ZoneInfoCompiler$RuleSet` v3 @kind this, `org.joda.time.tz.ZoneInfoCompiler$Rule` v4 @kind object) @signature `Lorg/joda/time/tz/ZoneInfoCompiler$RuleSet;.addRule:(Lorg/joda/time/tz/ZoneInfoCompiler$Rule;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3cf48c.  v0:= v4.`org.joda.time.tz.ZoneInfoCompiler$Rule.iName` @type ^`java.lang.String` @kind object;
  #L3cf490.  v1:= v3.`org.joda.time.tz.ZoneInfoCompiler$RuleSet.iRules` @type ^`java.util.List` @kind object;
  #L3cf494.  v2:= 0I;
  #L3cf496.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3cf49c.  v1:= temp @kind object;
  #L3cf49e.  v1:= (`org.joda.time.tz.ZoneInfoCompiler$Rule`) v1 @kind object;
  #L3cf4a2.  v1:= v1.`org.joda.time.tz.ZoneInfoCompiler$Rule.iName` @type ^`java.lang.String` @kind object;
  #L3cf4a6.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cf4ac.  v0:= temp;
  #L3cf4ae.  if v0 == 0 then goto L3cf4be;
  #L3cf4b2.  v0:= v3.`org.joda.time.tz.ZoneInfoCompiler$RuleSet.iRules` @type ^`java.util.List` @kind object;
  #L3cf4b6.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3cf4bc.  return @kind void;
  #L3cf4be.  v4:= new `java.lang.IllegalArgumentException`;
  #L3cf4c2.  v0:= "Rule name mismatch" @kind object;
  #L3cf4c6.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cf4cc.  throw v4;
}
