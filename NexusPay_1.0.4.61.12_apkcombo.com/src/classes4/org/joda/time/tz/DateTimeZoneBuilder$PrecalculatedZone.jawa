record `org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone` @kind class @AccessFlag FINAL extends `org.joda.time.DateTimeZone` @kind class {
  `java.lang.String`[] `org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iNameKeys` @AccessFlag PRIVATE_FINAL;
  `int`[] `org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iStandardOffsets` @AccessFlag PRIVATE_FINAL;
  `org.joda.time.tz.DateTimeZoneBuilder$DSTZone` `org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTailZone` @AccessFlag PRIVATE_FINAL;
  `long`[] `org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTransitions` @AccessFlag PRIVATE_FINAL;
  `int`[] `org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iWallOffsets` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone` v0 @kind this, `java.lang.String` v1 @kind object, `long`[] v2 @kind object, `int`[] v3 @kind object, `int`[] v4 @kind object, `java.lang.String`[] v5 @kind object, `org.joda.time.tz.DateTimeZoneBuilder$DSTZone` v6 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.<init>:(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3cd8bc.  call `<init>`(v0, v1) @signature `Lorg/joda/time/DateTimeZone;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cd8c2.  v0.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTransitions` @type ^`long`[] := v2 @kind object;
  #L3cd8c6.  v0.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iWallOffsets` @type ^`int`[] := v3 @kind object;
  #L3cd8ca.  v0.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iStandardOffsets` @type ^`int`[] := v4 @kind object;
  #L3cd8ce.  v0.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iNameKeys` @type ^`java.lang.String`[] := v5 @kind object;
  #L3cd8d2.  v0.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTailZone` @type ^`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` := v6 @kind object;
  #L3cd8d6.  return @kind void;
}
procedure `org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone` `create`(`java.lang.String` v29 @kind object, `boolean` v30 , `java.util.ArrayList` v31 @kind object, `org.joda.time.tz.DateTimeZoneBuilder$DSTZone` v32 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.create:(Ljava/lang/String;ZLjava/util/ArrayList;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;
    v24;
    v25;
    v26;
    v27;
    v28;

  #L3cd3d0.  v0:= v29 @kind object;
  #L3cd3d4.  v1:= v32 @kind object;
  #L3cd3d8.  call temp:= `size`(v31) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3cd3de.  v2:= temp;
  #L3cd3e0.  if v2 == 0 then goto L3cd7ae;
  #L3cd3e4.  v5:= new `long`[v2];
  #L3cd3e8.  v6:= new `int`[v2];
  #L3cd3ec.  v7:= new `int`[v2];
  #L3cd3f0.  v8:= new `java.lang.String`[v2];
  #L3cd3f4.  v3:= 0I;
  #L3cd3f6.  v4:= 0I;
  #L3cd3f8.  v9:= 0I;
  #L3cd3fa.  if v9 >= v2 then goto L3cd45e;
  #L3cd3fe.  v10:= v31 @kind object;
  #L3cd402.  call temp:= `get`(v10, v9) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3cd408.  v11:= temp @kind object;
  #L3cd40a.  v11:= (`org.joda.time.tz.DateTimeZoneBuilder$Transition`) v11 @kind object;
  #L3cd40e.  call temp:= `isTransitionFrom`(v11, v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.isTransitionFrom:(Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;)Z` @kind virtual;
  #L3cd414.  v3:= temp;
  #L3cd416.  if v3 == 0 then goto L3cd452;
  #L3cd41a.  call temp:= `getMillis`(v11) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getMillis:()J` @kind virtual;
  #L3cd420.  v12:= temp @kind wide;
  #L3cd422.  v5[v9]:= v12 @kind wide;
  #L3cd426.  call temp:= `getWallOffset`(v11) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getWallOffset:()I` @kind virtual;
  #L3cd42c.  v3:= temp;
  #L3cd42e.  v6[v9]:= v3;
  #L3cd432.  call temp:= `getStandardOffset`(v11) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getStandardOffset:()I` @kind virtual;
  #L3cd438.  v3:= temp;
  #L3cd43a.  v7[v9]:= v3;
  #L3cd43e.  call temp:= `getNameKey`(v11) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Transition;.getNameKey:()Ljava/lang/String;` @kind virtual;
  #L3cd444.  v3:= temp @kind object;
  #L3cd446.  v8[v9]:= v3 @kind object;
  #L3cd44a.  v9:= v9 + 1;
  #L3cd44e.  v3:= v11 @kind object;
  #L3cd450.  goto L3cd3fa;
  #L3cd452.  v1:= new `java.lang.IllegalArgumentException`;
  #L3cd456.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cd45c.  throw v1;
  #L3cd45e.  v3:= 5I;
  #L3cd460.  v9:= new `java.lang.String`[v3];
  #L3cd464.  v10:= new `java.text.DateFormatSymbols`;
  #L3cd468.  v11:= `@@java.util.Locale.ENGLISH` @type ^`java.util.Locale` @kind object;
  #L3cd46c.  call `<init>`(v10, v11) @signature `Ljava/text/DateFormatSymbols;.<init>:(Ljava/util/Locale;)V` @kind direct;
  #L3cd472.  call temp:= `getZoneStrings`(v10) @signature `Ljava/text/DateFormatSymbols;.getZoneStrings:()[[Ljava/lang/String;` @kind virtual;
  #L3cd478.  v10:= temp @kind object;
  #L3cd47a.  v11:= 0I;
  #L3cd47c.  v12:= length @variable v10;
  #L3cd47e.  if v11 >= v12 then goto L3cd4a8;
  #L3cd482.  v12:= v10[v11] @kind object;
  #L3cd486.  if v12 == 0 then goto L3cd4a2;
  #L3cd48a.  v13:= length @variable v12;
  #L3cd48c.  if v13 != v3 then goto L3cd4a2;
  #L3cd490.  v13:= v12[v4] @kind object;
  #L3cd494.  call temp:= `equals`(v0, v13) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cd49a.  v13:= temp;
  #L3cd49c.  if v13 == 0 then goto L3cd4a2;
  #L3cd4a0.  v9:= v12 @kind object;
  #L3cd4a2.  v11:= v11 + 1;
  #L3cd4a6.  goto L3cd47c;
  #L3cd4a8.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/ISOChronology;.getInstanceUTC:()Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3cd4ae.  v3:= temp @kind object;
  #L3cd4b0.  v10:= v2 + -1;
  #L3cd4b4.  v11:= "-Summer" @kind object;
  #L3cd4b8.  if v4 >= v10 then goto L3cd6a6;
  #L3cd4bc.  v10:= v8[v4] @kind object;
  #L3cd4c0.  v19:= v4 + 1;
  #L3cd4c4.  v15:= v8[v19] @kind object;
  #L3cd4c8.  v12:= v6[v4];
  #L3cd4cc.  v13:= (`long`) v12 @kind i2l;
  #L3cd4ce.  v12:= v6[v19];
  #L3cd4d2.  v0:= (`long`) v12 @kind i2l;
  #L3cd4d4.  v12:= v7[v4];
  #L3cd4d8.  v20:= v8 @kind object;
  #L3cd4dc.  v31:= v9 @kind object;
  #L3cd4e0.  v8:= (`long`) v12 @kind i2l;
  #L3cd4e2.  v12:= v7[v19];
  #L3cd4e6.  v21:= v6 @kind object;
  #L3cd4ea.  v22:= v7 @kind object;
  #L3cd4ee.  v6:= (`long`) v12 @kind i2l;
  #L3cd4f0.  v23:= new `org.joda.time.Period`;
  #L3cd4f4.  v16:= v5[v4] @kind wide;
  #L3cd4f8.  v24:= v5[v19] @kind wide;
  #L3cd4fc.  call temp:= `yearMonthDay`() @signature `Lorg/joda/time/PeriodType;.yearMonthDay:()Lorg/joda/time/PeriodType;` @kind static;
  #L3cd502.  v18:= temp @kind object;
  #L3cd504.  v12:= v23 @kind object;
  #L3cd508.  v26:= v13 @kind wide;
  #L3cd50c.  v13:= v16 @kind wide;
  #L3cd510.  v28:= v2;
  #L3cd514.  v2:= v15 @kind object;
  #L3cd516.  v15:= v24 @kind wide;
  #L3cd51a.  v17:= v18 @kind object;
  #L3cd51e.  v18:= v3 @kind object;
  #L3cd522.  call `<init>`(v12, v13, v15, v17, v18) @signature `Lorg/joda/time/Period;.<init>:(JJLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V` @kind direct;
  #L3cd528.  v12:= lcmp(v26, v0);
  #L3cd52c.  if v12 == 0 then goto L3cd682;
  #L3cd530.  v0:= lcmp(v8, v6);
  #L3cd534.  if v0 != 0 then goto L3cd682;
  #L3cd538.  call temp:= `equals`(v10, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cd53e.  v0:= temp;
  #L3cd540.  if v0 == 0 then goto L3cd682;
  #L3cd544.  call temp:= `getYears`(v23) @signature `Lorg/joda/time/Period;.getYears:()I` @kind virtual;
  #L3cd54a.  v0:= temp;
  #L3cd54c.  if v0 != 0 then goto L3cd682;
  #L3cd550.  call temp:= `getMonths`(v23) @signature `Lorg/joda/time/Period;.getMonths:()I` @kind virtual;
  #L3cd556.  v0:= temp;
  #L3cd558.  v1:= 4I;
  #L3cd55a.  if v0 <= v1 then goto L3cd682;
  #L3cd55e.  call temp:= `getMonths`(v23) @signature `Lorg/joda/time/Period;.getMonths:()I` @kind virtual;
  #L3cd564.  v0:= temp;
  #L3cd566.  v6:= 8I;
  #L3cd56a.  if v0 >= v6 then goto L3cd682;
  #L3cd56e.  v0:= 2I;
  #L3cd570.  v0:= v31[v0] @kind object;
  #L3cd574.  call temp:= `equals`(v10, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cd57a.  v0:= temp;
  #L3cd57c.  if v0 == 0 then goto L3cd682;
  #L3cd580.  v0:= v31[v1] @kind object;
  #L3cd584.  call temp:= `equals`(v10, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cd58a.  v0:= temp;
  #L3cd58c.  if v0 == 0 then goto L3cd682;
  #L3cd590.  call temp:= `verbose`() @signature `Lorg/joda/time/tz/ZoneInfoLogger;.verbose:()Z` @kind static;
  #L3cd596.  v0:= temp;
  #L3cd598.  if v0 == 0 then goto L3cd620;
  #L3cd59c.  v0:= `@@java.lang.System.out` @type ^`java.io.PrintStream` @kind object;
  #L3cd5a0.  v1:= new `java.lang.StringBuilder`;
  #L3cd5a4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cd5aa.  v6:= "Fixing duplicate name key - " @kind object;
  #L3cd5ae.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd5b4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd5ba.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cd5c0.  v1:= temp @kind object;
  #L3cd5c2.  call `println`(v0, v1) @signature `Ljava/io/PrintStream;.println:(Ljava/lang/String;)V` @kind virtual;
  #L3cd5c8.  v0:= `@@java.lang.System.out` @type ^`java.io.PrintStream` @kind object;
  #L3cd5cc.  v1:= new `java.lang.StringBuilder`;
  #L3cd5d0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cd5d6.  v6:= "     - " @kind object;
  #L3cd5da.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd5e0.  v6:= new `org.joda.time.DateTime`;
  #L3cd5e4.  v7:= v5[v4] @kind wide;
  #L3cd5e8.  call `<init>`(v6, v7, v3) @signature `Lorg/joda/time/DateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3cd5ee.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd5f4.  v6:= " - " @kind object;
  #L3cd5f8.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd5fe.  v6:= new `org.joda.time.DateTime`;
  #L3cd602.  v7:= v5[v19] @kind wide;
  #L3cd606.  call `<init>`(v6, v7, v3) @signature `Lorg/joda/time/DateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3cd60c.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd612.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cd618.  v1:= temp @kind object;
  #L3cd61a.  call `println`(v0, v1) @signature `Ljava/io/PrintStream;.println:(Ljava/lang/String;)V` @kind virtual;
  #L3cd620.  if v12 <= 0 then goto L3cd650;
  #L3cd624.  v0:= new `java.lang.StringBuilder`;
  #L3cd628.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cd62e.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd634.  call temp:= `append`(v0, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd63a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cd640.  v0:= temp @kind object;
  #L3cd642.  call temp:= `intern`(v0) @signature `Ljava/lang/String;.intern:()Ljava/lang/String;` @kind virtual;
  #L3cd648.  v0:= temp @kind object;
  #L3cd64a.  v20[v4]:= v0 @kind object;
  #L3cd64e.  goto L3cd682;
  #L3cd650.  if v12 >= 0 then goto L3cd682;
  #L3cd654.  v0:= new `java.lang.StringBuilder`;
  #L3cd658.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cd65e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd664.  call temp:= `append`(v0, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd66a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cd670.  v0:= temp @kind object;
  #L3cd672.  call temp:= `intern`(v0) @signature `Ljava/lang/String;.intern:()Ljava/lang/String;` @kind virtual;
  #L3cd678.  v0:= temp @kind object;
  #L3cd67a.  v20[v19]:= v0 @kind object;
  #L3cd67e.  v4:= v19;
  #L3cd682.  v4:= v4 + 1;
  #L3cd686.  v0:= v29 @kind object;
  #L3cd68a.  v9:= v31 @kind object;
  #L3cd68e.  v1:= v32 @kind object;
  #L3cd692.  v8:= v20 @kind object;
  #L3cd696.  v6:= v21 @kind object;
  #L3cd69a.  v7:= v22 @kind object;
  #L3cd69e.  v2:= v28;
  #L3cd6a2.  goto L3cd4b0;
  #L3cd6a6.  v0:= v1 @kind object;
  #L3cd6a8.  v21:= v6 @kind object;
  #L3cd6ac.  v22:= v7 @kind object;
  #L3cd6b0.  v20:= v8 @kind object;
  #L3cd6b4.  if v0 == 0 then goto L3cd782;
  #L3cd6b8.  v1:= v0.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStartRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cd6bc.  call temp:= `getNameKey`(v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.getNameKey:()Ljava/lang/String;` @kind virtual;
  #L3cd6c2.  v1:= temp @kind object;
  #L3cd6c4.  v2:= v0.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iEndRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cd6c8.  call temp:= `getNameKey`(v2) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.getNameKey:()Ljava/lang/String;` @kind virtual;
  #L3cd6ce.  v2:= temp @kind object;
  #L3cd6d0.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cd6d6.  v1:= temp;
  #L3cd6d8.  if v1 == 0 then goto L3cd782;
  #L3cd6dc.  call temp:= `verbose`() @signature `Lorg/joda/time/tz/ZoneInfoLogger;.verbose:()Z` @kind static;
  #L3cd6e2.  v1:= temp;
  #L3cd6e4.  if v1 == 0 then goto L3cd720;
  #L3cd6e8.  v1:= `@@java.lang.System.out` @type ^`java.io.PrintStream` @kind object;
  #L3cd6ec.  v2:= new `java.lang.StringBuilder`;
  #L3cd6f0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cd6f6.  v3:= "Fixing duplicate recurrent name key - " @kind object;
  #L3cd6fa.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd700.  v3:= v0.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStartRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cd704.  call temp:= `getNameKey`(v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.getNameKey:()Ljava/lang/String;` @kind virtual;
  #L3cd70a.  v3:= temp @kind object;
  #L3cd70c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cd712.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cd718.  v2:= temp @kind object;
  #L3cd71a.  call `println`(v1, v2) @signature `Ljava/io/PrintStream;.println:(Ljava/lang/String;)V` @kind virtual;
  #L3cd720.  v1:= v0.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStartRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cd724.  call temp:= `getSaveMillis`(v1) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.getSaveMillis:()I` @kind virtual;
  #L3cd72a.  v1:= temp;
  #L3cd72c.  if v1 <= 0 then goto L3cd758;
  #L3cd730.  v1:= new `org.joda.time.tz.DateTimeZoneBuilder$DSTZone`;
  #L3cd734.  call temp:= `getID`(v32) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3cd73a.  v2:= temp @kind object;
  #L3cd73c.  v3:= v0.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStandardOffset` @type ^`int`;
  #L3cd740.  v4:= v0.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStartRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cd744.  call temp:= `renameAppend`(v4, v11) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.renameAppend:(Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;` @kind virtual;
  #L3cd74a.  v4:= temp @kind object;
  #L3cd74c.  v0:= v0.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iEndRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cd750.  call `<init>`(v1, v2, v3, v4, v0) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.<init>:(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V` @kind direct;
  #L3cd756.  goto L3cd77e;
  #L3cd758.  v1:= new `org.joda.time.tz.DateTimeZoneBuilder$DSTZone`;
  #L3cd75c.  call temp:= `getID`(v32) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3cd762.  v2:= temp @kind object;
  #L3cd764.  v3:= v0.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStandardOffset` @type ^`int`;
  #L3cd768.  v4:= v0.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStartRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cd76c.  v0:= v0.`org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iEndRecurrence` @type ^`org.joda.time.tz.DateTimeZoneBuilder$Recurrence` @kind object;
  #L3cd770.  call temp:= `renameAppend`(v0, v11) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;.renameAppend:(Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;` @kind virtual;
  #L3cd776.  v0:= temp @kind object;
  #L3cd778.  call `<init>`(v1, v2, v3, v4, v0) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.<init>:(Ljava/lang/String;ILorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;Lorg/joda/time/tz/DateTimeZoneBuilder$Recurrence;)V` @kind direct;
  #L3cd77e.  v9:= v1 @kind object;
  #L3cd780.  goto L3cd784;
  #L3cd782.  v9:= v0 @kind object;
  #L3cd784.  v0:= new `org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone`;
  #L3cd788.  if v30 == 0 then goto L3cd792;
  #L3cd78c.  v4:= v29 @kind object;
  #L3cd790.  goto L3cd798;
  #L3cd792.  v1:= "" @kind object;
  #L3cd796.  v4:= v1 @kind object;
  #L3cd798.  v3:= v0 @kind object;
  #L3cd79a.  v6:= v21 @kind object;
  #L3cd79e.  v7:= v22 @kind object;
  #L3cd7a2.  v8:= v20 @kind object;
  #L3cd7a6.  call `<init>`(v3, v4, v5, v6, v7, v8, v9) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.<init>:(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V` @kind direct;
  #L3cd7ac.  return v0 @kind object;
  #L3cd7ae.  v0:= new `java.lang.IllegalArgumentException`;
  #L3cd7b2.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3cd7b8.  throw v0;
}
procedure `org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone` `readFrom`(`java.io.DataInput` v11 @kind object, `java.lang.String` v12 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.readFrom:(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3cd7cc.  call temp:= `readUnsignedShort`(v11) @signature `Ljava/io/DataInput;.readUnsignedShort:()I` @kind interface;
  #L3cd7d2.  v0:= temp;
  #L3cd7d4.  v1:= new `java.lang.String`[v0];
  #L3cd7d8.  v2:= 0I;
  #L3cd7da.  v3:= 0I;
  #L3cd7dc.  if v3 >= v0 then goto L3cd7f2;
  #L3cd7e0.  call temp:= `readUTF`(v11) @signature `Ljava/io/DataInput;.readUTF:()Ljava/lang/String;` @kind interface;
  #L3cd7e6.  v4:= temp @kind object;
  #L3cd7e8.  v1[v3]:= v4 @kind object;
  #L3cd7ec.  v3:= v3 + 1;
  #L3cd7f0.  goto L3cd7dc;
  #L3cd7f2.  call temp:= `readInt`(v11) @signature `Ljava/io/DataInput;.readInt:()I` @kind interface;
  #L3cd7f8.  v3:= temp;
  #L3cd7fa.  v6:= new `long`[v3];
  #L3cd7fe.  v7:= new `int`[v3];
  #L3cd802.  v8:= new `int`[v3];
  #L3cd806.  v9:= new `java.lang.String`[v3];
  #L3cd80a.  if v2 >= v3 then goto L3cd86e;
  #L3cd80e.  call temp:= `readMillis`(v11) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.readMillis:(Ljava/io/DataInput;)J` @kind static;
  #L3cd814.  v4:= temp @kind wide;
  #L3cd816.  v6[v2]:= v4 @kind wide;
  #L3cd81a.  call temp:= `readMillis`(v11) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.readMillis:(Ljava/io/DataInput;)J` @kind static;
  #L3cd820.  v4:= temp @kind wide;
  #L3cd822.  v5:= (`int`) v4 @kind l2i;
  #L3cd824.  v7[v2]:= v5;
  #L3cd828.  call temp:= `readMillis`(v11) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.readMillis:(Ljava/io/DataInput;)J` @kind static;
  #L3cd82e.  v4:= temp @kind wide;
  #L3cd830.  v5:= (`int`) v4 @kind l2i;
  #L3cd832.  v8[v2]:= v5;
  #L3cd836.  v4:= 256I;
  #L3cd83a.  if v0 >= v4 then goto L3cd848;
  #L3cd83e.  call temp:= `readUnsignedByte`(v11) @signature `Ljava/io/DataInput;.readUnsignedByte:()I` @kind interface;
  #L3cd844.  v4:= temp;
  #L3cd846.  goto L3cd850;
  #L3cd848.  call temp:= `readUnsignedShort`(v11) @signature `Ljava/io/DataInput;.readUnsignedShort:()I` @kind interface;
  #L3cd84e.  v4:= temp;
  #L3cd850.  v4:= v1[v4] @kind object;
  #L3cd854.  v9[v2]:= v4 @kind object;
  #L3cd858.  v2:= v2 + 1;
  #L3cd85c.  goto L3cd80a;
  #L3cd85e.  v11:= new `java.io.IOException`;
  #L3cd862.  v12:= "Invalid encoding" @kind object;
  #L3cd866.  call `<init>`(v11, v12) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cd86c.  throw v11;
  #L3cd86e.  v0:= 0I;
  #L3cd870.  call temp:= `readBoolean`(v11) @signature `Ljava/io/DataInput;.readBoolean:()Z` @kind interface;
  #L3cd876.  v1:= temp;
  #L3cd878.  if v1 == 0 then goto L3cd888;
  #L3cd87c.  call temp:= `readFrom`(v11, v12) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.readFrom:(Ljava/io/DataInput;Ljava/lang/String;)Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;` @kind static;
  #L3cd882.  v11:= temp @kind object;
  #L3cd884.  v10:= v11 @kind object;
  #L3cd886.  goto L3cd88a;
  #L3cd888.  v10:= v0 @kind object;
  #L3cd88a.  v11:= new `org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone`;
  #L3cd88e.  v4:= v11 @kind object;
  #L3cd890.  v5:= v12 @kind object;
  #L3cd892.  call `<init>`(v4, v5, v6, v7, v8, v9, v10) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.<init>:(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;)V` @kind direct;
  #L3cd898.  return v11 @kind object;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L3cd83e..L3cd858] goto L3cd85e;
}
procedure `boolean` `equals`(`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3cd054.  v0:= 1I;
  #L3cd056.  if v4 != v5 then goto L3cd05c;
  #L3cd05a.  return v0;
  #L3cd05c.  v1:= instanceof @variable v5 @type ^`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone` @kind boolean;
  #L3cd060.  v2:= 0I;
  #L3cd062.  if v1 == 0 then goto L3cd0fa;
  #L3cd066.  v5:= (`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone`) v5 @kind object;
  #L3cd06a.  call temp:= `getID`(v4) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3cd070.  v1:= temp @kind object;
  #L3cd072.  call temp:= `getID`(v5) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3cd078.  v3:= temp @kind object;
  #L3cd07a.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cd080.  v1:= temp;
  #L3cd082.  if v1 == 0 then goto L3cd0f6;
  #L3cd086.  v1:= v4.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTransitions` @type ^`long`[] @kind object;
  #L3cd08a.  v3:= v5.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTransitions` @type ^`long`[] @kind object;
  #L3cd08e.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([J[J)Z` @kind static;
  #L3cd094.  v1:= temp;
  #L3cd096.  if v1 == 0 then goto L3cd0f6;
  #L3cd09a.  v1:= v4.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iNameKeys` @type ^`java.lang.String`[] @kind object;
  #L3cd09e.  v3:= v5.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iNameKeys` @type ^`java.lang.String`[] @kind object;
  #L3cd0a2.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L3cd0a8.  v1:= temp;
  #L3cd0aa.  if v1 == 0 then goto L3cd0f6;
  #L3cd0ae.  v1:= v4.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iWallOffsets` @type ^`int`[] @kind object;
  #L3cd0b2.  v3:= v5.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iWallOffsets` @type ^`int`[] @kind object;
  #L3cd0b6.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([I[I)Z` @kind static;
  #L3cd0bc.  v1:= temp;
  #L3cd0be.  if v1 == 0 then goto L3cd0f6;
  #L3cd0c2.  v1:= v4.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iStandardOffsets` @type ^`int`[] @kind object;
  #L3cd0c6.  v3:= v5.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iStandardOffsets` @type ^`int`[] @kind object;
  #L3cd0ca.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([I[I)Z` @kind static;
  #L3cd0d0.  v1:= temp;
  #L3cd0d2.  if v1 == 0 then goto L3cd0f6;
  #L3cd0d6.  v1:= v4.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTailZone` @type ^`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` @kind object;
  #L3cd0da.  v5:= v5.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTailZone` @type ^`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` @kind object;
  #L3cd0de.  if v1 != 0 then goto L3cd0e8;
  #L3cd0e2.  if v5 != 0 then goto L3cd0f6;
  #L3cd0e6.  goto L3cd0f8;
  #L3cd0e8.  call temp:= `equals`(v1, v5) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cd0ee.  v5:= temp;
  #L3cd0f0.  if v5 == 0 then goto L3cd0f6;
  #L3cd0f4.  goto L3cd0f8;
  #L3cd0f6.  v0:= 0I;
  #L3cd0f8.  return v0;
  #L3cd0fa.  return v2;
}
procedure `java.lang.String` `getNameKey`(`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.getNameKey:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cd27c.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTransitions` @type ^`long`[] @kind object;
  #L3cd280.  call temp:= `binarySearch`(v0, v3) @signature `Ljava/util/Arrays;.binarySearch:([JJ)I` @kind static;
  #L3cd286.  v1:= temp;
  #L3cd288.  if v1 < 0 then goto L3cd296;
  #L3cd28c.  v3:= v2.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iNameKeys` @type ^`java.lang.String`[] @kind object;
  #L3cd290.  v3:= v3[v1] @kind object;
  #L3cd294.  return v3 @kind object;
  #L3cd296.  v1:= ~v1 @kind int;
  #L3cd298.  v0:= length @variable v0;
  #L3cd29a.  if v1 >= v0 then goto L3cd2b6;
  #L3cd29e.  if v1 <= 0 then goto L3cd2b0;
  #L3cd2a2.  v3:= v2.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iNameKeys` @type ^`java.lang.String`[] @kind object;
  #L3cd2a6.  v1:= v1 + -1;
  #L3cd2aa.  v3:= v3[v1] @kind object;
  #L3cd2ae.  return v3 @kind object;
  #L3cd2b0.  v3:= "UTC" @kind object;
  #L3cd2b4.  return v3 @kind object;
  #L3cd2b6.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTailZone` @type ^`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` @kind object;
  #L3cd2ba.  if v0 != 0 then goto L3cd2cc;
  #L3cd2be.  v3:= v2.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iNameKeys` @type ^`java.lang.String`[] @kind object;
  #L3cd2c2.  v1:= v1 + -1;
  #L3cd2c6.  v3:= v3[v1] @kind object;
  #L3cd2ca.  return v3 @kind object;
  #L3cd2cc.  call temp:= `getNameKey`(v0, v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.getNameKey:(J)Ljava/lang/String;` @kind virtual;
  #L3cd2d2.  v3:= temp @kind object;
  #L3cd2d4.  return v3 @kind object;
}
procedure `int` `getOffset`(`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.getOffset:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cd1ac.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTransitions` @type ^`long`[] @kind object;
  #L3cd1b0.  call temp:= `binarySearch`(v0, v3) @signature `Ljava/util/Arrays;.binarySearch:([JJ)I` @kind static;
  #L3cd1b6.  v1:= temp;
  #L3cd1b8.  if v1 < 0 then goto L3cd1c6;
  #L3cd1bc.  v3:= v2.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iWallOffsets` @type ^`int`[] @kind object;
  #L3cd1c0.  v3:= v3[v1];
  #L3cd1c4.  return v3;
  #L3cd1c6.  v1:= ~v1 @kind int;
  #L3cd1c8.  v0:= length @variable v0;
  #L3cd1ca.  if v1 >= v0 then goto L3cd1e4;
  #L3cd1ce.  if v1 <= 0 then goto L3cd1e0;
  #L3cd1d2.  v3:= v2.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iWallOffsets` @type ^`int`[] @kind object;
  #L3cd1d6.  v1:= v1 + -1;
  #L3cd1da.  v3:= v3[v1];
  #L3cd1de.  return v3;
  #L3cd1e0.  v3:= 0I;
  #L3cd1e2.  return v3;
  #L3cd1e4.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTailZone` @type ^`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` @kind object;
  #L3cd1e8.  if v0 != 0 then goto L3cd1fa;
  #L3cd1ec.  v3:= v2.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iWallOffsets` @type ^`int`[] @kind object;
  #L3cd1f0.  v1:= v1 + -1;
  #L3cd1f4.  v3:= v3[v1];
  #L3cd1f8.  return v3;
  #L3cd1fa.  call temp:= `getOffset`(v0, v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.getOffset:(J)I` @kind virtual;
  #L3cd200.  v3:= temp;
  #L3cd202.  return v3;
}
procedure `int` `getStandardOffset`(`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.getStandardOffset:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3cd214.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTransitions` @type ^`long`[] @kind object;
  #L3cd218.  call temp:= `binarySearch`(v0, v3) @signature `Ljava/util/Arrays;.binarySearch:([JJ)I` @kind static;
  #L3cd21e.  v1:= temp;
  #L3cd220.  if v1 < 0 then goto L3cd22e;
  #L3cd224.  v3:= v2.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iStandardOffsets` @type ^`int`[] @kind object;
  #L3cd228.  v3:= v3[v1];
  #L3cd22c.  return v3;
  #L3cd22e.  v1:= ~v1 @kind int;
  #L3cd230.  v0:= length @variable v0;
  #L3cd232.  if v1 >= v0 then goto L3cd24c;
  #L3cd236.  if v1 <= 0 then goto L3cd248;
  #L3cd23a.  v3:= v2.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iStandardOffsets` @type ^`int`[] @kind object;
  #L3cd23e.  v1:= v1 + -1;
  #L3cd242.  v3:= v3[v1];
  #L3cd246.  return v3;
  #L3cd248.  v3:= 0I;
  #L3cd24a.  return v3;
  #L3cd24c.  v0:= v2.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTailZone` @type ^`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` @kind object;
  #L3cd250.  if v0 != 0 then goto L3cd262;
  #L3cd254.  v3:= v2.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iStandardOffsets` @type ^`int`[] @kind object;
  #L3cd258.  v1:= v1 + -1;
  #L3cd25c.  v3:= v3[v1];
  #L3cd260.  return v3;
  #L3cd262.  call temp:= `getStandardOffset`(v0, v3) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.getStandardOffset:(J)I` @kind virtual;
  #L3cd268.  v3:= temp;
  #L3cd26a.  return v3;
}
procedure `boolean` `isCachable`(`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone` v12 @kind this) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.isCachable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3cd10c.  v0:= v12.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTailZone` @type ^`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` @kind object;
  #L3cd110.  v1:= 1I;
  #L3cd112.  if v0 == 0 then goto L3cd118;
  #L3cd116.  return v1;
  #L3cd118.  v0:= v12.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTransitions` @type ^`long`[] @kind object;
  #L3cd11c.  v2:= length @variable v0;
  #L3cd11e.  v3:= 0I;
  #L3cd120.  if v2 > v1 then goto L3cd126;
  #L3cd124.  return v3;
  #L3cd126.  v4:= 0L;
  #L3cd12a.  v2:= 1I;
  #L3cd12c.  v6:= 0I;
  #L3cd12e.  v7:= length @variable v0;
  #L3cd130.  if v2 >= v7 then goto L3cd162;
  #L3cd134.  v7:= v0[v2] @kind wide;
  #L3cd138.  v9:= v2 + -1;
  #L3cd13c.  v9:= v0[v9] @kind wide;
  #L3cd140.  v7:= v7 - v9 @kind long;
  #L3cd142.  v9:= 63158400000L;
  #L3cd14c.  v11:= lcmp(v7, v9);
  #L3cd150.  if v11 >= 0 then goto L3cd15c;
  #L3cd154.  v7:= (`double`) v7 @kind l2d;
  #L3cd156.  v4:= v4 + v7 @kind double;
  #L3cd158.  v6:= v6 + 1;
  #L3cd15c.  v2:= v2 + 1;
  #L3cd160.  goto L3cd12e;
  #L3cd162.  if v6 <= 0 then goto L3cd184;
  #L3cd166.  v6:= (`double`) v6 @kind i2d;
  #L3cd168.  v4:= v4 / v6 @kind double;
  #L3cd16a.  v6:= 8.64E7D;
  #L3cd174.  v4:= v4 / v6 @kind double;
  #L3cd176.  v6:= 25.0D;
  #L3cd17a.  v0:= dcmpl(v4, v6);
  #L3cd17e.  if v0 < 0 then goto L3cd184;
  #L3cd182.  return v1;
  #L3cd184.  return v3;
}
procedure `boolean` `isFixed`(`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone` v1 @kind this) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.isFixed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cd198.  v0:= 0I;
  #L3cd19a.  return v0;
}
procedure `long` `nextTransition`(`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone` v3 @kind this, `long` v4 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.nextTransition:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cd2e8.  v0:= v3.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTransitions` @type ^`long`[] @kind object;
  #L3cd2ec.  call temp:= `binarySearch`(v0, v4) @signature `Ljava/util/Arrays;.binarySearch:([JJ)I` @kind static;
  #L3cd2f2.  v1:= temp;
  #L3cd2f4.  if v1 < 0 then goto L3cd2fe;
  #L3cd2f8.  v1:= v1 + 1;
  #L3cd2fc.  goto L3cd300;
  #L3cd2fe.  v1:= ~v1 @kind int;
  #L3cd300.  v2:= length @variable v0;
  #L3cd302.  if v1 >= v2 then goto L3cd30c;
  #L3cd306.  v4:= v0[v1] @kind wide;
  #L3cd30a.  return v4 @kind wide;
  #L3cd30c.  v1:= v3.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTailZone` @type ^`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` @kind object;
  #L3cd310.  if v1 != 0 then goto L3cd316;
  #L3cd314.  return v4 @kind wide;
  #L3cd316.  v1:= length @variable v0;
  #L3cd318.  v1:= v1 + -1;
  #L3cd31c.  v1:= v0[v1] @kind wide;
  #L3cd320.  v0:= lcmp(v4, v1);
  #L3cd324.  if v0 >= 0 then goto L3cd32a;
  #L3cd328.  v4:= v1 @kind wide;
  #L3cd32a.  v0:= v3.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTailZone` @type ^`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` @kind object;
  #L3cd32e.  call temp:= `nextTransition`(v0, v4) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.nextTransition:(J)J` @kind virtual;
  #L3cd334.  v4:= temp @kind wide;
  #L3cd336.  return v4 @kind wide;
}
procedure `long` `previousTransition`(`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone` v9 @kind this, `long` v10 ) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.previousTransition:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3cd348.  v0:= v9.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTransitions` @type ^`long`[] @kind object;
  #L3cd34c.  call temp:= `binarySearch`(v0, v10) @signature `Ljava/util/Arrays;.binarySearch:([JJ)I` @kind static;
  #L3cd352.  v1:= temp;
  #L3cd354.  v2:= 1L;
  #L3cd358.  v4:= -9223372036854775808L;
  #L3cd35c.  if v1 < 0 then goto L3cd36c;
  #L3cd360.  v0:= lcmp(v10, v4);
  #L3cd364.  if v0 <= 0 then goto L3cd36a;
  #L3cd368.  v10:= v10 - v2 @kind long;
  #L3cd36a.  return v10 @kind wide;
  #L3cd36c.  v1:= ~v1 @kind int;
  #L3cd36e.  v6:= length @variable v0;
  #L3cd370.  if v1 >= v6 then goto L3cd38e;
  #L3cd374.  if v1 <= 0 then goto L3cd38c;
  #L3cd378.  v1:= v1 + -1;
  #L3cd37c.  v6:= v0[v1] @kind wide;
  #L3cd380.  v0:= lcmp(v6, v4);
  #L3cd384.  if v0 <= 0 then goto L3cd38c;
  #L3cd388.  v6:= v6 - v2 @kind long;
  #L3cd38a.  return v6 @kind wide;
  #L3cd38c.  return v10 @kind wide;
  #L3cd38e.  v6:= v9.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTailZone` @type ^`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` @kind object;
  #L3cd392.  if v6 == 0 then goto L3cd3a8;
  #L3cd396.  call temp:= `previousTransition`(v6, v10) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.previousTransition:(J)J` @kind virtual;
  #L3cd39c.  v6:= temp @kind wide;
  #L3cd39e.  v8:= lcmp(v6, v10);
  #L3cd3a2.  if v8 >= 0 then goto L3cd3a8;
  #L3cd3a6.  return v6 @kind wide;
  #L3cd3a8.  v1:= v1 + -1;
  #L3cd3ac.  v6:= v0[v1] @kind wide;
  #L3cd3b0.  v0:= lcmp(v6, v4);
  #L3cd3b4.  if v0 <= 0 then goto L3cd3bc;
  #L3cd3b8.  v6:= v6 - v2 @kind long;
  #L3cd3ba.  return v6 @kind wide;
  #L3cd3bc.  return v10 @kind wide;
}
procedure `void` `writeTo`(`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone` v10 @kind this, `java.io.DataOutput` v11 @kind object) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$PrecalculatedZone;.writeTo:(Ljava/io/DataOutput;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3cd8e8.  v0:= v10.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTransitions` @type ^`long`[] @kind object;
  #L3cd8ec.  v0:= length @variable v0;
  #L3cd8ee.  v1:= new `java.util.HashSet`;
  #L3cd8f2.  call `<init>`(v1) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L3cd8f8.  v2:= 0I;
  #L3cd8fa.  v3:= 0I;
  #L3cd8fc.  if v3 >= v0 then goto L3cd914;
  #L3cd900.  v4:= v10.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iNameKeys` @type ^`java.lang.String`[] @kind object;
  #L3cd904.  v4:= v4[v3] @kind object;
  #L3cd908.  call temp:= `add`(v1, v4) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3cd90e.  v3:= v3 + 1;
  #L3cd912.  goto L3cd8fc;
  #L3cd914.  call temp:= `size`(v1) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L3cd91a.  v3:= temp;
  #L3cd91c.  v4:= 65535I;
  #L3cd922.  if v3 > v4 then goto L3cda0e;
  #L3cd926.  v4:= new `java.lang.String`[v3];
  #L3cd92a.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3cd930.  v1:= temp @kind object;
  #L3cd932.  v5:= 0I;
  #L3cd934.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3cd93a.  v6:= temp;
  #L3cd93c.  v7:= 1I;
  #L3cd93e.  if v6 == 0 then goto L3cd956;
  #L3cd942.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3cd948.  v6:= temp @kind object;
  #L3cd94a.  v6:= (`java.lang.String`) v6 @kind object;
  #L3cd94e.  v4[v5]:= v6 @kind object;
  #L3cd952.  v5:= v5 + v7 @kind int;
  #L3cd954.  goto L3cd934;
  #L3cd956.  call `writeShort`(v11, v3) @signature `Ljava/io/DataOutput;.writeShort:(I)V` @kind interface;
  #L3cd95c.  v1:= 0I;
  #L3cd95e.  if v1 >= v3 then goto L3cd972;
  #L3cd962.  v5:= v4[v1] @kind object;
  #L3cd966.  call `writeUTF`(v11, v5) @signature `Ljava/io/DataOutput;.writeUTF:(Ljava/lang/String;)V` @kind interface;
  #L3cd96c.  v1:= v1 + 1;
  #L3cd970.  goto L3cd95e;
  #L3cd972.  call `writeInt`(v11, v0) @signature `Ljava/io/DataOutput;.writeInt:(I)V` @kind interface;
  #L3cd978.  v1:= 0I;
  #L3cd97a.  if v1 >= v0 then goto L3cd9ee;
  #L3cd97e.  v5:= v10.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTransitions` @type ^`long`[] @kind object;
  #L3cd982.  v8:= v5[v1] @kind wide;
  #L3cd986.  call `writeMillis`(v11, v8) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.writeMillis:(Ljava/io/DataOutput;J)V` @kind static;
  #L3cd98c.  v5:= v10.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iWallOffsets` @type ^`int`[] @kind object;
  #L3cd990.  v5:= v5[v1];
  #L3cd994.  v5:= (`long`) v5 @kind i2l;
  #L3cd996.  call `writeMillis`(v11, v5) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.writeMillis:(Ljava/io/DataOutput;J)V` @kind static;
  #L3cd99c.  v5:= v10.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iStandardOffsets` @type ^`int`[] @kind object;
  #L3cd9a0.  v5:= v5[v1];
  #L3cd9a4.  v5:= (`long`) v5 @kind i2l;
  #L3cd9a6.  call `writeMillis`(v11, v5) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder;.writeMillis:(Ljava/io/DataOutput;J)V` @kind static;
  #L3cd9ac.  v5:= v10.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iNameKeys` @type ^`java.lang.String`[] @kind object;
  #L3cd9b0.  v5:= v5[v1] @kind object;
  #L3cd9b4.  v6:= 0I;
  #L3cd9b6.  if v6 >= v3 then goto L3cd9e8;
  #L3cd9ba.  v8:= v4[v6] @kind object;
  #L3cd9be.  call temp:= `equals`(v8, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cd9c4.  v8:= temp;
  #L3cd9c6.  if v8 == 0 then goto L3cd9e2;
  #L3cd9ca.  v5:= 256I;
  #L3cd9ce.  if v3 >= v5 then goto L3cd9da;
  #L3cd9d2.  call `writeByte`(v11, v6) @signature `Ljava/io/DataOutput;.writeByte:(I)V` @kind interface;
  #L3cd9d8.  goto L3cd9e8;
  #L3cd9da.  call `writeShort`(v11, v6) @signature `Ljava/io/DataOutput;.writeShort:(I)V` @kind interface;
  #L3cd9e0.  goto L3cd9e8;
  #L3cd9e2.  v6:= v6 + 1;
  #L3cd9e6.  goto L3cd9b6;
  #L3cd9e8.  v1:= v1 + 1;
  #L3cd9ec.  goto L3cd97a;
  #L3cd9ee.  v0:= v10.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTailZone` @type ^`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` @kind object;
  #L3cd9f2.  if v0 == 0 then goto L3cd9f8;
  #L3cd9f6.  v2:= 1I;
  #L3cd9f8.  call `writeBoolean`(v11, v2) @signature `Ljava/io/DataOutput;.writeBoolean:(Z)V` @kind interface;
  #L3cd9fe.  v0:= v10.`org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTailZone` @type ^`org.joda.time.tz.DateTimeZoneBuilder$DSTZone` @kind object;
  #L3cda02.  if v0 == 0 then goto L3cda0c;
  #L3cda06.  call `writeTo`(v0, v11) @signature `Lorg/joda/time/tz/DateTimeZoneBuilder$DSTZone;.writeTo:(Ljava/io/DataOutput;)V` @kind virtual;
  #L3cda0c.  return @kind void;
  #L3cda0e.  v11:= new `java.lang.UnsupportedOperationException`;
  #L3cda12.  v0:= "String pool is too large" @kind object;
  #L3cda16.  call `<init>`(v11, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cda1c.  throw v11;
}
