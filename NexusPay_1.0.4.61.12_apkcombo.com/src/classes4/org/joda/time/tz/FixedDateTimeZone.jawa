record `org.joda.time.tz.FixedDateTimeZone` @kind class @AccessFlag PUBLIC_FINAL extends `org.joda.time.DateTimeZone` @kind class {
  `java.lang.String` `org.joda.time.tz.FixedDateTimeZone.iNameKey` @AccessFlag PRIVATE_FINAL;
  `int` `org.joda.time.tz.FixedDateTimeZone.iStandardOffset` @AccessFlag PRIVATE_FINAL;
  `int` `org.joda.time.tz.FixedDateTimeZone.iWallOffset` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@org.joda.time.tz.FixedDateTimeZone.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.tz.FixedDateTimeZone` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/joda/time/tz/FixedDateTimeZone;.<init>:(Ljava/lang/String;Ljava/lang/String;II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ceffc.  call `<init>`(v0, v1) @signature `Lorg/joda/time/DateTimeZone;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3cf002.  v0.`org.joda.time.tz.FixedDateTimeZone.iNameKey` @type ^`java.lang.String` := v2 @kind object;
  #L3cf006.  v0.`org.joda.time.tz.FixedDateTimeZone.iWallOffset` @type ^`int` := v3;
  #L3cf00a.  v0.`org.joda.time.tz.FixedDateTimeZone.iStandardOffset` @type ^`int` := v4;
  #L3cf00e.  return @kind void;
}
procedure `boolean` `equals`(`org.joda.time.tz.FixedDateTimeZone` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/joda/time/tz/FixedDateTimeZone;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3cee30.  v0:= 1I;
  #L3cee32.  if v4 != v5 then goto L3cee38;
  #L3cee36.  return v0;
  #L3cee38.  v1:= instanceof @variable v5 @type ^`org.joda.time.tz.FixedDateTimeZone` @kind boolean;
  #L3cee3c.  v2:= 0I;
  #L3cee3e.  if v1 == 0 then goto L3cee80;
  #L3cee42.  v5:= (`org.joda.time.tz.FixedDateTimeZone`) v5 @kind object;
  #L3cee46.  call temp:= `getID`(v4) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3cee4c.  v1:= temp @kind object;
  #L3cee4e.  call temp:= `getID`(v5) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3cee54.  v3:= temp @kind object;
  #L3cee56.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3cee5c.  v1:= temp;
  #L3cee5e.  if v1 == 0 then goto L3cee7c;
  #L3cee62.  v1:= v4.`org.joda.time.tz.FixedDateTimeZone.iStandardOffset` @type ^`int`;
  #L3cee66.  v3:= v5.`org.joda.time.tz.FixedDateTimeZone.iStandardOffset` @type ^`int`;
  #L3cee6a.  if v1 != v3 then goto L3cee7c;
  #L3cee6e.  v1:= v4.`org.joda.time.tz.FixedDateTimeZone.iWallOffset` @type ^`int`;
  #L3cee72.  v5:= v5.`org.joda.time.tz.FixedDateTimeZone.iWallOffset` @type ^`int`;
  #L3cee76.  if v1 != v5 then goto L3cee7c;
  #L3cee7a.  goto L3cee7e;
  #L3cee7c.  v0:= 0I;
  #L3cee7e.  return v0;
  #L3cee80.  return v2;
}
procedure `java.lang.String` `getNameKey`(`org.joda.time.tz.FixedDateTimeZone` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/tz/FixedDateTimeZone;.getNameKey:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3cef28.  v1:= v0.`org.joda.time.tz.FixedDateTimeZone.iNameKey` @type ^`java.lang.String` @kind object;
  #L3cef2c.  return v1 @kind object;
}
procedure `int` `getOffset`(`org.joda.time.tz.FixedDateTimeZone` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/tz/FixedDateTimeZone;.getOffset:(J)I` @AccessFlag PUBLIC {
    temp;

  #L3ceea8.  v1:= v0.`org.joda.time.tz.FixedDateTimeZone.iWallOffset` @type ^`int`;
  #L3ceeac.  return v1;
}
procedure `int` `getOffsetFromLocal`(`org.joda.time.tz.FixedDateTimeZone` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/tz/FixedDateTimeZone;.getOffsetFromLocal:(J)I` @AccessFlag PUBLIC {
    temp;

  #L3ceec0.  v1:= v0.`org.joda.time.tz.FixedDateTimeZone.iWallOffset` @type ^`int`;
  #L3ceec4.  return v1;
}
procedure `int` `getStandardOffset`(`org.joda.time.tz.FixedDateTimeZone` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/tz/FixedDateTimeZone;.getStandardOffset:(J)I` @AccessFlag PUBLIC {
    temp;

  #L3ceed8.  v1:= v0.`org.joda.time.tz.FixedDateTimeZone.iStandardOffset` @type ^`int`;
  #L3ceedc.  return v1;
}
procedure `int` `hashCode`(`org.joda.time.tz.FixedDateTimeZone` v2 @kind this) @signature `Lorg/joda/time/tz/FixedDateTimeZone;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ceef0.  call temp:= `getID`(v2) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3ceef6.  v0:= temp @kind object;
  #L3ceef8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L3ceefe.  v0:= temp;
  #L3cef00.  v1:= v2.`org.joda.time.tz.FixedDateTimeZone.iStandardOffset` @type ^`int`;
  #L3cef04.  v1:= v1 * 37;
  #L3cef08.  v0:= v0 + v1 @kind int;
  #L3cef0a.  v1:= v2.`org.joda.time.tz.FixedDateTimeZone.iWallOffset` @type ^`int`;
  #L3cef0e.  v1:= v1 * 31;
  #L3cef12.  v0:= v0 + v1 @kind int;
  #L3cef14.  return v0;
}
procedure `boolean` `isFixed`(`org.joda.time.tz.FixedDateTimeZone` v1 @kind this) @signature `Lorg/joda/time/tz/FixedDateTimeZone;.isFixed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3cee94.  v0:= 1I;
  #L3cee96.  return v0;
}
procedure `long` `nextTransition`(`org.joda.time.tz.FixedDateTimeZone` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/tz/FixedDateTimeZone;.nextTransition:(J)J` @AccessFlag PUBLIC {
    temp;

  #L3cefd4.  return v1 @kind wide;
}
procedure `long` `previousTransition`(`org.joda.time.tz.FixedDateTimeZone` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/tz/FixedDateTimeZone;.previousTransition:(J)J` @AccessFlag PUBLIC {
    temp;

  #L3cefe8.  return v1 @kind wide;
}
procedure `java.util.TimeZone` `toTimeZone`(`org.joda.time.tz.FixedDateTimeZone` v3 @kind this) @signature `Lorg/joda/time/tz/FixedDateTimeZone;.toTimeZone:()Ljava/util/TimeZone;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3cef40.  call temp:= `getID`(v3) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3cef46.  v0:= temp @kind object;
  #L3cef48.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3cef4e.  v1:= temp;
  #L3cef50.  v2:= 6I;
  #L3cef52.  if v1 != v2 then goto L3cefaa;
  #L3cef56.  v1:= "+" @kind object;
  #L3cef5a.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3cef60.  v1:= temp;
  #L3cef62.  if v1 != 0 then goto L3cef76;
  #L3cef66.  v1:= "-" @kind object;
  #L3cef6a.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3cef70.  v0:= temp;
  #L3cef72.  if v0 == 0 then goto L3cefaa;
  #L3cef76.  v0:= new `java.lang.StringBuilder`;
  #L3cef7a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3cef80.  v1:= "GMT" @kind object;
  #L3cef84.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cef8a.  call temp:= `getID`(v3) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3cef90.  v1:= temp @kind object;
  #L3cef92.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3cef98.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3cef9e.  v0:= temp @kind object;
  #L3cefa0.  call temp:= `getTimeZone`(v0) @signature `Ljava/util/TimeZone;.getTimeZone:(Ljava/lang/String;)Ljava/util/TimeZone;` @kind static;
  #L3cefa6.  v0:= temp @kind object;
  #L3cefa8.  return v0 @kind object;
  #L3cefaa.  v0:= new `java.util.SimpleTimeZone`;
  #L3cefae.  v1:= v3.`org.joda.time.tz.FixedDateTimeZone.iWallOffset` @type ^`int`;
  #L3cefb2.  call temp:= `getID`(v3) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3cefb8.  v2:= temp @kind object;
  #L3cefba.  call `<init>`(v0, v1, v2) @signature `Ljava/util/SimpleTimeZone;.<init>:(ILjava/lang/String;)V` @kind direct;
  #L3cefc0.  return v0 @kind object;
}
