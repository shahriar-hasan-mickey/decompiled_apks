record `org.joda.time.MutableDateTime` @kind class @AccessFlag PUBLIC extends `org.joda.time.base.BaseDateTime` @kind class, `org.joda.time.ReadWritableDateTime` @kind interface, `java.lang.Cloneable` @kind interface, `java.io.Serializable` @kind interface {
  `org.joda.time.DateTimeField` `org.joda.time.MutableDateTime.iRoundingField` @AccessFlag PRIVATE;
  `int` `org.joda.time.MutableDateTime.iRoundingMode` @AccessFlag PRIVATE;
}
global `int` `@@org.joda.time.MutableDateTime.ROUND_CEILING` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@org.joda.time.MutableDateTime.ROUND_FLOOR` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@org.joda.time.MutableDateTime.ROUND_HALF_CEILING` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@org.joda.time.MutableDateTime.ROUND_HALF_EVEN` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@org.joda.time.MutableDateTime.ROUND_HALF_FLOOR` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@org.joda.time.MutableDateTime.ROUND_NONE` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@org.joda.time.MutableDateTime.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.MutableDateTime` v0 @kind this) @signature `Lorg/joda/time/MutableDateTime;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a3068.  call `<init>`(v0) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:()V` @kind direct;
  #L3a306e.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableDateTime` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 , `int` v5 , `int` v6 , `int` v7 ) @signature `Lorg/joda/time/MutableDateTime;.<init>:(IIIIIII)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a3080.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(IIIIIII)V` @kind direct;
  #L3a3086.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableDateTime` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 , `int` v5 , `int` v6 , `int` v7 , `org.joda.time.Chronology` v8 @kind object) @signature `Lorg/joda/time/MutableDateTime;.<init>:(IIIIIIILorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a3098.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(IIIIIIILorg/joda/time/Chronology;)V` @kind direct;
  #L3a309e.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableDateTime` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 , `int` v5 , `int` v6 , `int` v7 , `org.joda.time.DateTimeZone` v8 @kind object) @signature `Lorg/joda/time/MutableDateTime;.<init>:(IIIIIIILorg/joda/time/DateTimeZone;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a30b0.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(IIIIIIILorg/joda/time/DateTimeZone;)V` @kind direct;
  #L3a30b6.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableDateTime` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/MutableDateTime;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a311c.  call `<init>`(v0, v1) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(J)V` @kind direct;
  #L3a3122.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableDateTime` v0 @kind this, `long` v1 , `org.joda.time.Chronology` v3 @kind object) @signature `Lorg/joda/time/MutableDateTime;.<init>:(JLorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a3134.  call `<init>`(v0, v1, v3) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3a313a.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableDateTime` v0 @kind this, `long` v1 , `org.joda.time.DateTimeZone` v3 @kind object) @signature `Lorg/joda/time/MutableDateTime;.<init>:(JLorg/joda/time/DateTimeZone;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a314c.  call `<init>`(v0, v1, v3) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(JLorg/joda/time/DateTimeZone;)V` @kind direct;
  #L3a3152.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableDateTime` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/joda/time/MutableDateTime;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a30c8.  v0:= 0I;
  #L3a30ca.  call `<init>`(v1, v2, v0) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @kind direct;
  #L3a30d0.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableDateTime` v0 @kind this, `java.lang.Object` v1 @kind object, `org.joda.time.Chronology` v2 @kind object) @signature `Lorg/joda/time/MutableDateTime;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a30e4.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3a30ea.  v2:= temp @kind object;
  #L3a30ec.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @kind direct;
  #L3a30f2.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableDateTime` v0 @kind this, `java.lang.Object` v1 @kind object, `org.joda.time.DateTimeZone` v2 @kind object) @signature `Lorg/joda/time/MutableDateTime;.<init>:(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a3104.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V` @kind direct;
  #L3a310a.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableDateTime` v0 @kind this, `org.joda.time.Chronology` v1 @kind object) @signature `Lorg/joda/time/MutableDateTime;.<init>:(Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a3164.  call `<init>`(v0, v1) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(Lorg/joda/time/Chronology;)V` @kind direct;
  #L3a316a.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableDateTime` v0 @kind this, `org.joda.time.DateTimeZone` v1 @kind object) @signature `Lorg/joda/time/MutableDateTime;.<init>:(Lorg/joda/time/DateTimeZone;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a317c.  call `<init>`(v0, v1) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(Lorg/joda/time/DateTimeZone;)V` @kind direct;
  #L3a3182.  return @kind void;
}
procedure `org.joda.time.MutableDateTime` `now`() @signature `Lorg/joda/time/MutableDateTime;.now:()Lorg/joda/time/MutableDateTime;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a2c00.  v0:= new `org.joda.time.MutableDateTime`;
  #L3a2c04.  call `<init>`(v0) @signature `Lorg/joda/time/MutableDateTime;.<init>:()V` @kind direct;
  #L3a2c0a.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime` `now`(`org.joda.time.Chronology` v1 @kind object) @signature `Lorg/joda/time/MutableDateTime;.now:(Lorg/joda/time/Chronology;)Lorg/joda/time/MutableDateTime;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a2c1c.  if v1 == 0 then goto L3a2c2c;
  #L3a2c20.  v0:= new `org.joda.time.MutableDateTime`;
  #L3a2c24.  call `<init>`(v0, v1) @signature `Lorg/joda/time/MutableDateTime;.<init>:(Lorg/joda/time/Chronology;)V` @kind direct;
  #L3a2c2a.  return v0 @kind object;
  #L3a2c2c.  v1:= new `java.lang.NullPointerException`;
  #L3a2c30.  v0:= "Chronology must not be null" @kind object;
  #L3a2c34.  call `<init>`(v1, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a2c3a.  throw v1;
}
procedure `org.joda.time.MutableDateTime` `now`(`org.joda.time.DateTimeZone` v1 @kind object) @signature `Lorg/joda/time/MutableDateTime;.now:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/MutableDateTime;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a2c4c.  if v1 == 0 then goto L3a2c5c;
  #L3a2c50.  v0:= new `org.joda.time.MutableDateTime`;
  #L3a2c54.  call `<init>`(v0, v1) @signature `Lorg/joda/time/MutableDateTime;.<init>:(Lorg/joda/time/DateTimeZone;)V` @kind direct;
  #L3a2c5a.  return v0 @kind object;
  #L3a2c5c.  v1:= new `java.lang.NullPointerException`;
  #L3a2c60.  v0:= "Zone must not be null" @kind object;
  #L3a2c64.  call `<init>`(v1, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a2c6a.  throw v1;
}
procedure `org.joda.time.MutableDateTime` `parse`(`java.lang.String` v1 @kind object) @signature `Lorg/joda/time/MutableDateTime;.parse:(Ljava/lang/String;)Lorg/joda/time/MutableDateTime;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a2c7c.  call temp:= `dateTimeParser`() @signature `Lorg/joda/time/format/ISODateTimeFormat;.dateTimeParser:()Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3a2c82.  v0:= temp @kind object;
  #L3a2c84.  call temp:= `withOffsetParsed`(v0) @signature `Lorg/joda/time/format/DateTimeFormatter;.withOffsetParsed:()Lorg/joda/time/format/DateTimeFormatter;` @kind virtual;
  #L3a2c8a.  v0:= temp @kind object;
  #L3a2c8c.  call temp:= `parse`(v1, v0) @signature `Lorg/joda/time/MutableDateTime;.parse:(Ljava/lang/String;Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/MutableDateTime;` @kind static;
  #L3a2c92.  v1:= temp @kind object;
  #L3a2c94.  return v1 @kind object;
}
procedure `org.joda.time.MutableDateTime` `parse`(`java.lang.String` v0 @kind object, `org.joda.time.format.DateTimeFormatter` v1 @kind object) @signature `Lorg/joda/time/MutableDateTime;.parse:(Ljava/lang/String;Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/MutableDateTime;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3a2ca8.  call temp:= `parseDateTime`(v1, v0) @signature `Lorg/joda/time/format/DateTimeFormatter;.parseDateTime:(Ljava/lang/String;)Lorg/joda/time/DateTime;` @kind virtual;
  #L3a2cae.  v0:= temp @kind object;
  #L3a2cb0.  call temp:= `toMutableDateTime`(v0) @signature `Lorg/joda/time/base/AbstractInstant;.toMutableDateTime:()Lorg/joda/time/MutableDateTime;` @kind virtual;
  #L3a2cb6.  v0:= temp @kind object;
  #L3a2cb8.  return v0 @kind object;
}
procedure `void` `add`(`org.joda.time.MutableDateTime` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/MutableDateTime;.add:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a3194.  call temp:= `getMillis`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a319a.  v0:= temp @kind wide;
  #L3a319c.  call temp:= `safeAdd`(v0, v3) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(JJ)J` @kind static;
  #L3a31a2.  v3:= temp @kind wide;
  #L3a31a4.  call `setMillis`(v2, v3) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a31aa.  return @kind void;
}
procedure `void` `add`(`org.joda.time.MutableDateTime` v2 @kind this, `org.joda.time.DurationFieldType` v3 @kind object, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.add:(Lorg/joda/time/DurationFieldType;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a31bc.  if v3 == 0 then goto L3a31ec;
  #L3a31c0.  if v4 == 0 then goto L3a31ea;
  #L3a31c4.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a31ca.  v0:= temp @kind object;
  #L3a31cc.  call temp:= `getField`(v3, v0) @signature `Lorg/joda/time/DurationFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;` @kind virtual;
  #L3a31d2.  v3:= temp @kind object;
  #L3a31d4.  call temp:= `getMillis`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a31da.  v0:= temp @kind wide;
  #L3a31dc.  call temp:= `add`(v3, v0, v4) @signature `Lorg/joda/time/DurationField;.add:(JI)J` @kind virtual;
  #L3a31e2.  v3:= temp @kind wide;
  #L3a31e4.  call `setMillis`(v2, v3) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a31ea.  return @kind void;
  #L3a31ec.  v3:= new `java.lang.IllegalArgumentException`;
  #L3a31f0.  v4:= "Field must not be null" @kind object;
  #L3a31f4.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a31fa.  throw v3;
}
procedure `void` `add`(`org.joda.time.MutableDateTime` v1 @kind this, `org.joda.time.ReadableDuration` v2 @kind object) @signature `Lorg/joda/time/MutableDateTime;.add:(Lorg/joda/time/ReadableDuration;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a320c.  v0:= 1I;
  #L3a320e.  call `add`(v1, v2, v0) @signature `Lorg/joda/time/MutableDateTime;.add:(Lorg/joda/time/ReadableDuration;I)V` @kind virtual;
  #L3a3214.  return @kind void;
}
procedure `void` `add`(`org.joda.time.MutableDateTime` v2 @kind this, `org.joda.time.ReadableDuration` v3 @kind object, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.add:(Lorg/joda/time/ReadableDuration;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a3228.  if v3 == 0 then goto L3a3242;
  #L3a322c.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableDuration;.getMillis:()J` @kind interface;
  #L3a3232.  v0:= temp @kind wide;
  #L3a3234.  call temp:= `safeMultiply`(v0, v4) @signature `Lorg/joda/time/field/FieldUtils;.safeMultiply:(JI)J` @kind static;
  #L3a323a.  v3:= temp @kind wide;
  #L3a323c.  call `add`(v2, v3) @signature `Lorg/joda/time/MutableDateTime;.add:(J)V` @kind virtual;
  #L3a3242.  return @kind void;
}
procedure `void` `add`(`org.joda.time.MutableDateTime` v1 @kind this, `org.joda.time.ReadablePeriod` v2 @kind object) @signature `Lorg/joda/time/MutableDateTime;.add:(Lorg/joda/time/ReadablePeriod;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a3254.  v0:= 1I;
  #L3a3256.  call `add`(v1, v2, v0) @signature `Lorg/joda/time/MutableDateTime;.add:(Lorg/joda/time/ReadablePeriod;I)V` @kind virtual;
  #L3a325c.  return @kind void;
}
procedure `void` `add`(`org.joda.time.MutableDateTime` v3 @kind this, `org.joda.time.ReadablePeriod` v4 @kind object, `int` v5 ) @signature `Lorg/joda/time/MutableDateTime;.add:(Lorg/joda/time/ReadablePeriod;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3270.  if v4 == 0 then goto L3a3292;
  #L3a3274.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a327a.  v0:= temp @kind object;
  #L3a327c.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a3282.  v1:= temp @kind wide;
  #L3a3284.  call temp:= `add`(v0, v4, v1, v5) @signature `Lorg/joda/time/Chronology;.add:(Lorg/joda/time/ReadablePeriod;JI)J` @kind virtual;
  #L3a328a.  v4:= temp @kind wide;
  #L3a328c.  call `setMillis`(v3, v4) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a3292.  return @kind void;
}
procedure `void` `addDays`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.addDays:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a32a4.  if v4 == 0 then goto L3a32ce;
  #L3a32a8.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a32ae.  v0:= temp @kind object;
  #L3a32b0.  call temp:= `days`(v0) @signature `Lorg/joda/time/Chronology;.days:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3a32b6.  v0:= temp @kind object;
  #L3a32b8.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a32be.  v1:= temp @kind wide;
  #L3a32c0.  call temp:= `add`(v0, v1, v4) @signature `Lorg/joda/time/DurationField;.add:(JI)J` @kind virtual;
  #L3a32c6.  v0:= temp @kind wide;
  #L3a32c8.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a32ce.  return @kind void;
}
procedure `void` `addHours`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.addHours:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a32e0.  if v4 == 0 then goto L3a330a;
  #L3a32e4.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a32ea.  v0:= temp @kind object;
  #L3a32ec.  call temp:= `hours`(v0) @signature `Lorg/joda/time/Chronology;.hours:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3a32f2.  v0:= temp @kind object;
  #L3a32f4.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a32fa.  v1:= temp @kind wide;
  #L3a32fc.  call temp:= `add`(v0, v1, v4) @signature `Lorg/joda/time/DurationField;.add:(JI)J` @kind virtual;
  #L3a3302.  v0:= temp @kind wide;
  #L3a3304.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a330a.  return @kind void;
}
procedure `void` `addMillis`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.addMillis:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a331c.  if v4 == 0 then goto L3a3346;
  #L3a3320.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3326.  v0:= temp @kind object;
  #L3a3328.  call temp:= `millis`(v0) @signature `Lorg/joda/time/Chronology;.millis:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3a332e.  v0:= temp @kind object;
  #L3a3330.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a3336.  v1:= temp @kind wide;
  #L3a3338.  call temp:= `add`(v0, v1, v4) @signature `Lorg/joda/time/DurationField;.add:(JI)J` @kind virtual;
  #L3a333e.  v0:= temp @kind wide;
  #L3a3340.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a3346.  return @kind void;
}
procedure `void` `addMinutes`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.addMinutes:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3358.  if v4 == 0 then goto L3a3382;
  #L3a335c.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3362.  v0:= temp @kind object;
  #L3a3364.  call temp:= `minutes`(v0) @signature `Lorg/joda/time/Chronology;.minutes:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3a336a.  v0:= temp @kind object;
  #L3a336c.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a3372.  v1:= temp @kind wide;
  #L3a3374.  call temp:= `add`(v0, v1, v4) @signature `Lorg/joda/time/DurationField;.add:(JI)J` @kind virtual;
  #L3a337a.  v0:= temp @kind wide;
  #L3a337c.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a3382.  return @kind void;
}
procedure `void` `addMonths`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.addMonths:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3394.  if v4 == 0 then goto L3a33be;
  #L3a3398.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a339e.  v0:= temp @kind object;
  #L3a33a0.  call temp:= `months`(v0) @signature `Lorg/joda/time/Chronology;.months:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3a33a6.  v0:= temp @kind object;
  #L3a33a8.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a33ae.  v1:= temp @kind wide;
  #L3a33b0.  call temp:= `add`(v0, v1, v4) @signature `Lorg/joda/time/DurationField;.add:(JI)J` @kind virtual;
  #L3a33b6.  v0:= temp @kind wide;
  #L3a33b8.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a33be.  return @kind void;
}
procedure `void` `addSeconds`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.addSeconds:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a33d0.  if v4 == 0 then goto L3a33fa;
  #L3a33d4.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a33da.  v0:= temp @kind object;
  #L3a33dc.  call temp:= `seconds`(v0) @signature `Lorg/joda/time/Chronology;.seconds:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3a33e2.  v0:= temp @kind object;
  #L3a33e4.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a33ea.  v1:= temp @kind wide;
  #L3a33ec.  call temp:= `add`(v0, v1, v4) @signature `Lorg/joda/time/DurationField;.add:(JI)J` @kind virtual;
  #L3a33f2.  v0:= temp @kind wide;
  #L3a33f4.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a33fa.  return @kind void;
}
procedure `void` `addWeeks`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.addWeeks:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a340c.  if v4 == 0 then goto L3a3436;
  #L3a3410.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3416.  v0:= temp @kind object;
  #L3a3418.  call temp:= `weeks`(v0) @signature `Lorg/joda/time/Chronology;.weeks:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3a341e.  v0:= temp @kind object;
  #L3a3420.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a3426.  v1:= temp @kind wide;
  #L3a3428.  call temp:= `add`(v0, v1, v4) @signature `Lorg/joda/time/DurationField;.add:(JI)J` @kind virtual;
  #L3a342e.  v0:= temp @kind wide;
  #L3a3430.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a3436.  return @kind void;
}
procedure `void` `addWeekyears`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.addWeekyears:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3448.  if v4 == 0 then goto L3a3472;
  #L3a344c.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3452.  v0:= temp @kind object;
  #L3a3454.  call temp:= `weekyears`(v0) @signature `Lorg/joda/time/Chronology;.weekyears:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3a345a.  v0:= temp @kind object;
  #L3a345c.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a3462.  v1:= temp @kind wide;
  #L3a3464.  call temp:= `add`(v0, v1, v4) @signature `Lorg/joda/time/DurationField;.add:(JI)J` @kind virtual;
  #L3a346a.  v0:= temp @kind wide;
  #L3a346c.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a3472.  return @kind void;
}
procedure `void` `addYears`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.addYears:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3484.  if v4 == 0 then goto L3a34ae;
  #L3a3488.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a348e.  v0:= temp @kind object;
  #L3a3490.  call temp:= `years`(v0) @signature `Lorg/joda/time/Chronology;.years:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3a3496.  v0:= temp @kind object;
  #L3a3498.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a349e.  v1:= temp @kind wide;
  #L3a34a0.  call temp:= `add`(v0, v1, v4) @signature `Lorg/joda/time/DurationField;.add:(JI)J` @kind virtual;
  #L3a34a6.  v0:= temp @kind wide;
  #L3a34a8.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a34ae.  return @kind void;
}
procedure `org.joda.time.MutableDateTime$Property` `centuryOfEra`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.centuryOfEra:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2ccc.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2cd0.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2cd6.  v1:= temp @kind object;
  #L3a2cd8.  call temp:= `centuryOfEra`(v1) @signature `Lorg/joda/time/Chronology;.centuryOfEra:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2cde.  v1:= temp @kind object;
  #L3a2ce0.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2ce6.  return v0 @kind object;
}
procedure `java.lang.Object` `clone`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2b8c.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L3a2b92.  v0:= temp @kind object;
  #L3a2b94.  return v0 @kind object;
  #L3a2b96.  v0:= new `java.lang.InternalError`;
  #L3a2b9a.  v1:= "Clone error" @kind object;
  #L3a2b9e.  call `<init>`(v0, v1) @signature `Ljava/lang/InternalError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a2ba4.  throw v0;
  catch `java.lang.CloneNotSupportedException` @[L3a2b8c..L3a2b94] goto L3a2b96;
}
procedure `org.joda.time.MutableDateTime` `copy`(`org.joda.time.MutableDateTime` v1 @kind this) @signature `Lorg/joda/time/MutableDateTime;.copy:()Lorg/joda/time/MutableDateTime;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a2be0.  call temp:= `clone`(v1) @signature `Lorg/joda/time/MutableDateTime;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3a2be6.  v0:= temp @kind object;
  #L3a2be8.  v0:= (`org.joda.time.MutableDateTime`) v0 @kind object;
  #L3a2bec.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime$Property` `dayOfMonth`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.dayOfMonth:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2cf8.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2cfc.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2d02.  v1:= temp @kind object;
  #L3a2d04.  call temp:= `dayOfMonth`(v1) @signature `Lorg/joda/time/Chronology;.dayOfMonth:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2d0a.  v1:= temp @kind object;
  #L3a2d0c.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2d12.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime$Property` `dayOfWeek`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.dayOfWeek:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2d24.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2d28.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2d2e.  v1:= temp @kind object;
  #L3a2d30.  call temp:= `dayOfWeek`(v1) @signature `Lorg/joda/time/Chronology;.dayOfWeek:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2d36.  v1:= temp @kind object;
  #L3a2d38.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2d3e.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime$Property` `dayOfYear`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.dayOfYear:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2d50.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2d54.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2d5a.  v1:= temp @kind object;
  #L3a2d5c.  call temp:= `dayOfYear`(v1) @signature `Lorg/joda/time/Chronology;.dayOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2d62.  v1:= temp @kind object;
  #L3a2d64.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2d6a.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime$Property` `era`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.era:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2d7c.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2d80.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2d86.  v1:= temp @kind object;
  #L3a2d88.  call temp:= `era`(v1) @signature `Lorg/joda/time/Chronology;.era:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2d8e.  v1:= temp @kind object;
  #L3a2d90.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2d96.  return v0 @kind object;
}
procedure `org.joda.time.DateTimeField` `getRoundingField`(`org.joda.time.MutableDateTime` v1 @kind this) @signature `Lorg/joda/time/MutableDateTime;.getRoundingField:()Lorg/joda/time/DateTimeField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a2bc8.  v0:= v1.`org.joda.time.MutableDateTime.iRoundingField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3a2bcc.  return v0 @kind object;
}
procedure `int` `getRoundingMode`(`org.joda.time.MutableDateTime` v1 @kind this) @signature `Lorg/joda/time/MutableDateTime;.getRoundingMode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a2b74.  v0:= v1.`org.joda.time.MutableDateTime.iRoundingMode` @type ^`int`;
  #L3a2b78.  return v0;
}
procedure `org.joda.time.MutableDateTime$Property` `hourOfDay`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.hourOfDay:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2da8.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2dac.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2db2.  v1:= temp @kind object;
  #L3a2db4.  call temp:= `hourOfDay`(v1) @signature `Lorg/joda/time/Chronology;.hourOfDay:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2dba.  v1:= temp @kind object;
  #L3a2dbc.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2dc2.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime$Property` `millisOfDay`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.millisOfDay:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2dd4.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2dd8.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2dde.  v1:= temp @kind object;
  #L3a2de0.  call temp:= `millisOfDay`(v1) @signature `Lorg/joda/time/Chronology;.millisOfDay:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2de6.  v1:= temp @kind object;
  #L3a2de8.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2dee.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime$Property` `millisOfSecond`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.millisOfSecond:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2e00.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2e04.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2e0a.  v1:= temp @kind object;
  #L3a2e0c.  call temp:= `millisOfSecond`(v1) @signature `Lorg/joda/time/Chronology;.millisOfSecond:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2e12.  v1:= temp @kind object;
  #L3a2e14.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2e1a.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime$Property` `minuteOfDay`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.minuteOfDay:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2e2c.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2e30.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2e36.  v1:= temp @kind object;
  #L3a2e38.  call temp:= `minuteOfDay`(v1) @signature `Lorg/joda/time/Chronology;.minuteOfDay:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2e3e.  v1:= temp @kind object;
  #L3a2e40.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2e46.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime$Property` `minuteOfHour`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.minuteOfHour:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2e58.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2e5c.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2e62.  v1:= temp @kind object;
  #L3a2e64.  call temp:= `minuteOfHour`(v1) @signature `Lorg/joda/time/Chronology;.minuteOfHour:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2e6a.  v1:= temp @kind object;
  #L3a2e6c.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2e72.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime$Property` `monthOfYear`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.monthOfYear:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2e84.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2e88.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2e8e.  v1:= temp @kind object;
  #L3a2e90.  call temp:= `monthOfYear`(v1) @signature `Lorg/joda/time/Chronology;.monthOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2e96.  v1:= temp @kind object;
  #L3a2e98.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2e9e.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime$Property` `property`(`org.joda.time.MutableDateTime` v3 @kind this, `org.joda.time.DateTimeFieldType` v4 @kind object) @signature `Lorg/joda/time/MutableDateTime;.property:(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a2eb0.  if v4 == 0 then goto L3a2f14;
  #L3a2eb4.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2eba.  v0:= temp @kind object;
  #L3a2ebc.  call temp:= `getField`(v4, v0) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2ec2.  v0:= temp @kind object;
  #L3a2ec4.  call temp:= `isSupported`(v0) @signature `Lorg/joda/time/DateTimeField;.isSupported:()Z` @kind virtual;
  #L3a2eca.  v1:= temp;
  #L3a2ecc.  if v1 == 0 then goto L3a2edc;
  #L3a2ed0.  v4:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2ed4.  call `<init>`(v4, v3, v0) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2eda.  return v4 @kind object;
  #L3a2edc.  v0:= new `java.lang.IllegalArgumentException`;
  #L3a2ee0.  v1:= new `java.lang.StringBuilder`;
  #L3a2ee4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3a2eea.  v2:= "Field '" @kind object;
  #L3a2eee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a2ef4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a2efa.  v4:= "' is not supported" @kind object;
  #L3a2efe.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a2f04.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a2f0a.  v4:= temp @kind object;
  #L3a2f0c.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a2f12.  throw v0;
  #L3a2f14.  v4:= new `java.lang.IllegalArgumentException`;
  #L3a2f18.  v0:= "The DateTimeFieldType must not be null" @kind object;
  #L3a2f1c.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a2f22.  throw v4;
}
procedure `org.joda.time.MutableDateTime$Property` `secondOfDay`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.secondOfDay:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2f34.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2f38.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2f3e.  v1:= temp @kind object;
  #L3a2f40.  call temp:= `secondOfDay`(v1) @signature `Lorg/joda/time/Chronology;.secondOfDay:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2f46.  v1:= temp @kind object;
  #L3a2f48.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2f4e.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime$Property` `secondOfMinute`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.secondOfMinute:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2f60.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2f64.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2f6a.  v1:= temp @kind object;
  #L3a2f6c.  call temp:= `secondOfMinute`(v1) @signature `Lorg/joda/time/Chronology;.secondOfMinute:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2f72.  v1:= temp @kind object;
  #L3a2f74.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2f7a.  return v0 @kind object;
}
procedure `void` `set`(`org.joda.time.MutableDateTime` v2 @kind this, `org.joda.time.DateTimeFieldType` v3 @kind object, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.set:(Lorg/joda/time/DateTimeFieldType;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a34c0.  if v3 == 0 then goto L3a34ec;
  #L3a34c4.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a34ca.  v0:= temp @kind object;
  #L3a34cc.  call temp:= `getField`(v3, v0) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a34d2.  v3:= temp @kind object;
  #L3a34d4.  call temp:= `getMillis`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a34da.  v0:= temp @kind wide;
  #L3a34dc.  call temp:= `set`(v3, v0, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a34e2.  v3:= temp @kind wide;
  #L3a34e4.  call `setMillis`(v2, v3) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a34ea.  return @kind void;
  #L3a34ec.  v3:= new `java.lang.IllegalArgumentException`;
  #L3a34f0.  v4:= "Field must not be null" @kind object;
  #L3a34f4.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a34fa.  throw v3;
}
procedure `void` `setChronology`(`org.joda.time.MutableDateTime` v0 @kind this, `org.joda.time.Chronology` v1 @kind object) @signature `Lorg/joda/time/MutableDateTime;.setChronology:(Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC {
    temp;

  #L3a350c.  call `setChronology`(v0, v1) @signature `Lorg/joda/time/base/BaseDateTime;.setChronology:(Lorg/joda/time/Chronology;)V` @kind super;
  #L3a3512.  return @kind void;
}
procedure `void` `setDate`(`org.joda.time.MutableDateTime` v2 @kind this, `int` v3 , `int` v4 , `int` v5 ) @signature `Lorg/joda/time/MutableDateTime;.setDate:(III)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a3524.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a352a.  v0:= temp @kind object;
  #L3a352c.  v1:= 0I;
  #L3a352e.  call temp:= `getDateTimeMillis`(v0, v3, v4, v5, v1) @signature `Lorg/joda/time/Chronology;.getDateTimeMillis:(IIII)J` @kind virtual;
  #L3a3534.  v3:= temp @kind wide;
  #L3a3536.  call `setDate`(v2, v3) @signature `Lorg/joda/time/MutableDateTime;.setDate:(J)V` @kind virtual;
  #L3a353c.  return @kind void;
}
procedure `void` `setDate`(`org.joda.time.MutableDateTime` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/MutableDateTime;.setDate:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a3550.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3556.  v0:= temp @kind object;
  #L3a3558.  call temp:= `millisOfDay`(v0) @signature `Lorg/joda/time/Chronology;.millisOfDay:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a355e.  v0:= temp @kind object;
  #L3a3560.  call temp:= `getMillisOfDay`(v2) @signature `Lorg/joda/time/base/AbstractDateTime;.getMillisOfDay:()I` @kind virtual;
  #L3a3566.  v1:= temp;
  #L3a3568.  call temp:= `set`(v0, v3, v1) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a356e.  v3:= temp @kind wide;
  #L3a3570.  call `setMillis`(v2, v3) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a3576.  return @kind void;
}
procedure `void` `setDate`(`org.joda.time.MutableDateTime` v3 @kind this, `org.joda.time.ReadableInstant` v4 @kind object) @signature `Lorg/joda/time/MutableDateTime;.setDate:(Lorg/joda/time/ReadableInstant;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3588.  call temp:= `getInstantMillis`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3a358e.  v0:= temp @kind wide;
  #L3a3590.  v2:= instanceof @variable v4 @type ^`org.joda.time.ReadableDateTime` @kind boolean;
  #L3a3594.  if v2 == 0 then goto L3a35c8;
  #L3a3598.  v4:= (`org.joda.time.ReadableDateTime`) v4 @kind object;
  #L3a359c.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/ReadableInstant;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3a35a2.  v4:= temp @kind object;
  #L3a35a4.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3a35aa.  v4:= temp @kind object;
  #L3a35ac.  call temp:= `getZone`(v4) @signature `Lorg/joda/time/Chronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3a35b2.  v4:= temp @kind object;
  #L3a35b4.  if v4 == 0 then goto L3a35c8;
  #L3a35b8.  call temp:= `getZone`(v3) @signature `Lorg/joda/time/base/AbstractInstant;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3a35be.  v2:= temp @kind object;
  #L3a35c0.  call temp:= `getMillisKeepLocal`(v4, v2, v0) @signature `Lorg/joda/time/DateTimeZone;.getMillisKeepLocal:(Lorg/joda/time/DateTimeZone;J)J` @kind virtual;
  #L3a35c6.  v0:= temp @kind wide;
  #L3a35c8.  call `setDate`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setDate:(J)V` @kind virtual;
  #L3a35ce.  return @kind void;
}
procedure `void` `setDateTime`(`org.joda.time.MutableDateTime` v8 @kind this, `int` v9 , `int` v10 , `int` v11 , `int` v12 , `int` v13 , `int` v14 , `int` v15 ) @signature `Lorg/joda/time/MutableDateTime;.setDateTime:(IIIIIII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3a35e0.  call temp:= `getChronology`(v8) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a35e6.  v0:= temp @kind object;
  #L3a35e8.  v1:= v9;
  #L3a35ea.  v2:= v10;
  #L3a35ec.  v3:= v11;
  #L3a35ee.  v4:= v12;
  #L3a35f0.  v5:= v13;
  #L3a35f2.  v6:= v14;
  #L3a35f4.  v7:= v15;
  #L3a35f6.  call temp:= `getDateTimeMillis`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lorg/joda/time/Chronology;.getDateTimeMillis:(IIIIIII)J` @kind virtual;
  #L3a35fc.  v9:= temp @kind wide;
  #L3a35fe.  call `setMillis`(v8, v9) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a3604.  return @kind void;
}
procedure `void` `setDayOfMonth`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.setDayOfMonth:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3618.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a361e.  v0:= temp @kind object;
  #L3a3620.  call temp:= `dayOfMonth`(v0) @signature `Lorg/joda/time/Chronology;.dayOfMonth:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a3626.  v0:= temp @kind object;
  #L3a3628.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a362e.  v1:= temp @kind wide;
  #L3a3630.  call temp:= `set`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a3636.  v0:= temp @kind wide;
  #L3a3638.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a363e.  return @kind void;
}
procedure `void` `setDayOfWeek`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.setDayOfWeek:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3650.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3656.  v0:= temp @kind object;
  #L3a3658.  call temp:= `dayOfWeek`(v0) @signature `Lorg/joda/time/Chronology;.dayOfWeek:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a365e.  v0:= temp @kind object;
  #L3a3660.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a3666.  v1:= temp @kind wide;
  #L3a3668.  call temp:= `set`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a366e.  v0:= temp @kind wide;
  #L3a3670.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a3676.  return @kind void;
}
procedure `void` `setDayOfYear`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.setDayOfYear:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3688.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a368e.  v0:= temp @kind object;
  #L3a3690.  call temp:= `dayOfYear`(v0) @signature `Lorg/joda/time/Chronology;.dayOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a3696.  v0:= temp @kind object;
  #L3a3698.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a369e.  v1:= temp @kind wide;
  #L3a36a0.  call temp:= `set`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a36a6.  v0:= temp @kind wide;
  #L3a36a8.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a36ae.  return @kind void;
}
procedure `void` `setHourOfDay`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.setHourOfDay:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a36c0.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a36c6.  v0:= temp @kind object;
  #L3a36c8.  call temp:= `hourOfDay`(v0) @signature `Lorg/joda/time/Chronology;.hourOfDay:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a36ce.  v0:= temp @kind object;
  #L3a36d0.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a36d6.  v1:= temp @kind wide;
  #L3a36d8.  call temp:= `set`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a36de.  v0:= temp @kind wide;
  #L3a36e0.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a36e6.  return @kind void;
}
procedure `void` `setMillis`(`org.joda.time.MutableDateTime` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a36f8.  v0:= v2.`org.joda.time.MutableDateTime.iRoundingMode` @type ^`int`;
  #L3a36fc.  v1:= 1I;
  #L3a36fe.  if v0 == v1 then goto L3a3754;
  #L3a3702.  v1:= 2I;
  #L3a3704.  if v0 == v1 then goto L3a3746;
  #L3a3708.  v1:= 3I;
  #L3a370a.  if v0 == v1 then goto L3a3738;
  #L3a370e.  v1:= 4I;
  #L3a3710.  if v0 == v1 then goto L3a372a;
  #L3a3714.  v1:= 5I;
  #L3a3716.  if v0 == v1 then goto L3a371c;
  #L3a371a.  goto L3a3760;
  #L3a371c.  v0:= v2.`org.joda.time.MutableDateTime.iRoundingField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3a3720.  call temp:= `roundHalfEven`(v0, v3) @signature `Lorg/joda/time/DateTimeField;.roundHalfEven:(J)J` @kind virtual;
  #L3a3726.  v3:= temp @kind wide;
  #L3a3728.  goto L3a3760;
  #L3a372a.  v0:= v2.`org.joda.time.MutableDateTime.iRoundingField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3a372e.  call temp:= `roundHalfCeiling`(v0, v3) @signature `Lorg/joda/time/DateTimeField;.roundHalfCeiling:(J)J` @kind virtual;
  #L3a3734.  v3:= temp @kind wide;
  #L3a3736.  goto L3a3760;
  #L3a3738.  v0:= v2.`org.joda.time.MutableDateTime.iRoundingField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3a373c.  call temp:= `roundHalfFloor`(v0, v3) @signature `Lorg/joda/time/DateTimeField;.roundHalfFloor:(J)J` @kind virtual;
  #L3a3742.  v3:= temp @kind wide;
  #L3a3744.  goto L3a3760;
  #L3a3746.  v0:= v2.`org.joda.time.MutableDateTime.iRoundingField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3a374a.  call temp:= `roundCeiling`(v0, v3) @signature `Lorg/joda/time/DateTimeField;.roundCeiling:(J)J` @kind virtual;
  #L3a3750.  v3:= temp @kind wide;
  #L3a3752.  goto L3a3760;
  #L3a3754.  v0:= v2.`org.joda.time.MutableDateTime.iRoundingField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3a3758.  call temp:= `roundFloor`(v0, v3) @signature `Lorg/joda/time/DateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3a375e.  v3:= temp @kind wide;
  #L3a3760.  call `setMillis`(v2, v3) @signature `Lorg/joda/time/base/BaseDateTime;.setMillis:(J)V` @kind super;
  #L3a3766.  return @kind void;
}
procedure `void` `setMillis`(`org.joda.time.MutableDateTime` v2 @kind this, `org.joda.time.ReadableInstant` v3 @kind object) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(Lorg/joda/time/ReadableInstant;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a3778.  call temp:= `getInstantMillis`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3a377e.  v0:= temp @kind wide;
  #L3a3780.  call `setMillis`(v2, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a3786.  return @kind void;
}
procedure `void` `setMillisOfDay`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.setMillisOfDay:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3798.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a379e.  v0:= temp @kind object;
  #L3a37a0.  call temp:= `millisOfDay`(v0) @signature `Lorg/joda/time/Chronology;.millisOfDay:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a37a6.  v0:= temp @kind object;
  #L3a37a8.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a37ae.  v1:= temp @kind wide;
  #L3a37b0.  call temp:= `set`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a37b6.  v0:= temp @kind wide;
  #L3a37b8.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a37be.  return @kind void;
}
procedure `void` `setMillisOfSecond`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.setMillisOfSecond:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a37d0.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a37d6.  v0:= temp @kind object;
  #L3a37d8.  call temp:= `millisOfSecond`(v0) @signature `Lorg/joda/time/Chronology;.millisOfSecond:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a37de.  v0:= temp @kind object;
  #L3a37e0.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a37e6.  v1:= temp @kind wide;
  #L3a37e8.  call temp:= `set`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a37ee.  v0:= temp @kind wide;
  #L3a37f0.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a37f6.  return @kind void;
}
procedure `void` `setMinuteOfDay`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.setMinuteOfDay:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3808.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a380e.  v0:= temp @kind object;
  #L3a3810.  call temp:= `minuteOfDay`(v0) @signature `Lorg/joda/time/Chronology;.minuteOfDay:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a3816.  v0:= temp @kind object;
  #L3a3818.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a381e.  v1:= temp @kind wide;
  #L3a3820.  call temp:= `set`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a3826.  v0:= temp @kind wide;
  #L3a3828.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a382e.  return @kind void;
}
procedure `void` `setMinuteOfHour`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.setMinuteOfHour:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3840.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3846.  v0:= temp @kind object;
  #L3a3848.  call temp:= `minuteOfHour`(v0) @signature `Lorg/joda/time/Chronology;.minuteOfHour:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a384e.  v0:= temp @kind object;
  #L3a3850.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a3856.  v1:= temp @kind wide;
  #L3a3858.  call temp:= `set`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a385e.  v0:= temp @kind wide;
  #L3a3860.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a3866.  return @kind void;
}
procedure `void` `setMonthOfYear`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.setMonthOfYear:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3878.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a387e.  v0:= temp @kind object;
  #L3a3880.  call temp:= `monthOfYear`(v0) @signature `Lorg/joda/time/Chronology;.monthOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a3886.  v0:= temp @kind object;
  #L3a3888.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a388e.  v1:= temp @kind wide;
  #L3a3890.  call temp:= `set`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a3896.  v0:= temp @kind wide;
  #L3a3898.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a389e.  return @kind void;
}
procedure `void` `setRounding`(`org.joda.time.MutableDateTime` v1 @kind this, `org.joda.time.DateTimeField` v2 @kind object) @signature `Lorg/joda/time/MutableDateTime;.setRounding:(Lorg/joda/time/DateTimeField;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a38b0.  v0:= 1I;
  #L3a38b2.  call `setRounding`(v1, v2, v0) @signature `Lorg/joda/time/MutableDateTime;.setRounding:(Lorg/joda/time/DateTimeField;I)V` @kind virtual;
  #L3a38b8.  return @kind void;
}
procedure `void` `setRounding`(`org.joda.time.MutableDateTime` v2 @kind this, `org.joda.time.DateTimeField` v3 @kind object, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.setRounding:(Lorg/joda/time/DateTimeField;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a38cc.  if v3 == 0 then goto L3a390a;
  #L3a38d0.  if v4 < 0 then goto L3a38dc;
  #L3a38d4.  v0:= 5I;
  #L3a38d6.  if v4 > v0 then goto L3a38dc;
  #L3a38da.  goto L3a390a;
  #L3a38dc.  v3:= new `java.lang.IllegalArgumentException`;
  #L3a38e0.  v0:= new `java.lang.StringBuilder`;
  #L3a38e4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3a38ea.  v1:= "Illegal rounding mode: " @kind object;
  #L3a38ee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a38f4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a38fa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a3900.  v4:= temp @kind object;
  #L3a3902.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a3908.  throw v3;
  #L3a390a.  if v4 != 0 then goto L3a3912;
  #L3a390e.  v0:= 0I;
  #L3a3910.  goto L3a3914;
  #L3a3912.  v0:= v3 @kind object;
  #L3a3914.  v2.`org.joda.time.MutableDateTime.iRoundingField` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3a3918.  if v3 != 0 then goto L3a391e;
  #L3a391c.  v4:= 0I;
  #L3a391e.  v2.`org.joda.time.MutableDateTime.iRoundingMode` @type ^`int` := v4;
  #L3a3922.  call temp:= `getMillis`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a3928.  v3:= temp @kind wide;
  #L3a392a.  call `setMillis`(v2, v3) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a3930.  return @kind void;
}
procedure `void` `setSecondOfDay`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.setSecondOfDay:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3944.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a394a.  v0:= temp @kind object;
  #L3a394c.  call temp:= `secondOfDay`(v0) @signature `Lorg/joda/time/Chronology;.secondOfDay:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a3952.  v0:= temp @kind object;
  #L3a3954.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a395a.  v1:= temp @kind wide;
  #L3a395c.  call temp:= `set`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a3962.  v0:= temp @kind wide;
  #L3a3964.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a396a.  return @kind void;
}
procedure `void` `setSecondOfMinute`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.setSecondOfMinute:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a397c.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3982.  v0:= temp @kind object;
  #L3a3984.  call temp:= `secondOfMinute`(v0) @signature `Lorg/joda/time/Chronology;.secondOfMinute:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a398a.  v0:= temp @kind object;
  #L3a398c.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a3992.  v1:= temp @kind wide;
  #L3a3994.  call temp:= `set`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a399a.  v0:= temp @kind wide;
  #L3a399c.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a39a2.  return @kind void;
}
procedure `void` `setTime`(`org.joda.time.MutableDateTime` v7 @kind this, `int` v8 , `int` v9 , `int` v10 , `int` v11 ) @signature `Lorg/joda/time/MutableDateTime;.setTime:(IIII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3a39b4.  call temp:= `getChronology`(v7) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a39ba.  v0:= temp @kind object;
  #L3a39bc.  call temp:= `getMillis`(v7) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a39c2.  v1:= temp @kind wide;
  #L3a39c4.  v3:= v8;
  #L3a39c6.  v4:= v9;
  #L3a39c8.  v5:= v10;
  #L3a39ca.  v6:= v11;
  #L3a39cc.  call temp:= `getDateTimeMillis`(v0, v1, v3, v4, v5, v6) @signature `Lorg/joda/time/Chronology;.getDateTimeMillis:(JIIII)J` @kind virtual;
  #L3a39d2.  v8:= temp @kind wide;
  #L3a39d4.  call `setMillis`(v7, v8) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a39da.  return @kind void;
}
procedure `void` `setTime`(`org.joda.time.MutableDateTime` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/MutableDateTime;.setTime:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a39ec.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/ISOChronology;.getInstanceUTC:()Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3a39f2.  v0:= temp @kind object;
  #L3a39f4.  call temp:= `millisOfDay`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.millisOfDay:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a39fa.  v0:= temp @kind object;
  #L3a39fc.  call temp:= `get`(v0, v3) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3a3a02.  v3:= temp;
  #L3a3a04.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3a0a.  v4:= temp @kind object;
  #L3a3a0c.  call temp:= `millisOfDay`(v4) @signature `Lorg/joda/time/Chronology;.millisOfDay:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a3a12.  v4:= temp @kind object;
  #L3a3a14.  call temp:= `getMillis`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a3a1a.  v0:= temp @kind wide;
  #L3a3a1c.  call temp:= `set`(v4, v0, v3) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a3a22.  v3:= temp @kind wide;
  #L3a3a24.  call `setMillis`(v2, v3) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a3a2a.  return @kind void;
}
procedure `void` `setTime`(`org.joda.time.MutableDateTime` v3 @kind this, `org.joda.time.ReadableInstant` v4 @kind object) @signature `Lorg/joda/time/MutableDateTime;.setTime:(Lorg/joda/time/ReadableInstant;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3a3c.  call temp:= `getInstantMillis`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3a3a42.  v0:= temp @kind wide;
  #L3a3a44.  call temp:= `getInstantChronology`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getInstantChronology:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;` @kind static;
  #L3a3a4a.  v4:= temp @kind object;
  #L3a3a4c.  call temp:= `getZone`(v4) @signature `Lorg/joda/time/Chronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3a3a52.  v4:= temp @kind object;
  #L3a3a54.  if v4 == 0 then goto L3a3a64;
  #L3a3a58.  v2:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3a3a5c.  call temp:= `getMillisKeepLocal`(v4, v2, v0) @signature `Lorg/joda/time/DateTimeZone;.getMillisKeepLocal:(Lorg/joda/time/DateTimeZone;J)J` @kind virtual;
  #L3a3a62.  v0:= temp @kind wide;
  #L3a3a64.  call `setTime`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setTime:(J)V` @kind virtual;
  #L3a3a6a.  return @kind void;
}
procedure `void` `setWeekOfWeekyear`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.setWeekOfWeekyear:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3a7c.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3a82.  v0:= temp @kind object;
  #L3a3a84.  call temp:= `weekOfWeekyear`(v0) @signature `Lorg/joda/time/Chronology;.weekOfWeekyear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a3a8a.  v0:= temp @kind object;
  #L3a3a8c.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a3a92.  v1:= temp @kind wide;
  #L3a3a94.  call temp:= `set`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a3a9a.  v0:= temp @kind wide;
  #L3a3a9c.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a3aa2.  return @kind void;
}
procedure `void` `setWeekyear`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.setWeekyear:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3ab4.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3aba.  v0:= temp @kind object;
  #L3a3abc.  call temp:= `weekyear`(v0) @signature `Lorg/joda/time/Chronology;.weekyear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a3ac2.  v0:= temp @kind object;
  #L3a3ac4.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a3aca.  v1:= temp @kind wide;
  #L3a3acc.  call temp:= `set`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a3ad2.  v0:= temp @kind wide;
  #L3a3ad4.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a3ada.  return @kind void;
}
procedure `void` `setYear`(`org.joda.time.MutableDateTime` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MutableDateTime;.setYear:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3aec.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3af2.  v0:= temp @kind object;
  #L3a3af4.  call temp:= `year`(v0) @signature `Lorg/joda/time/Chronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a3afa.  v0:= temp @kind object;
  #L3a3afc.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a3b02.  v1:= temp @kind wide;
  #L3a3b04.  call temp:= `set`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3a3b0a.  v0:= temp @kind wide;
  #L3a3b0c.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a3b12.  return @kind void;
}
procedure `void` `setZone`(`org.joda.time.MutableDateTime` v2 @kind this, `org.joda.time.DateTimeZone` v3 @kind object) @signature `Lorg/joda/time/MutableDateTime;.setZone:(Lorg/joda/time/DateTimeZone;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a3b24.  call temp:= `getZone`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;` @kind static;
  #L3a3b2a.  v3:= temp @kind object;
  #L3a3b2c.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3b32.  v0:= temp @kind object;
  #L3a3b34.  call temp:= `getZone`(v0) @signature `Lorg/joda/time/Chronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3a3b3a.  v1:= temp @kind object;
  #L3a3b3c.  if v1 == v3 then goto L3a3b4e;
  #L3a3b40.  call temp:= `withZone`(v0, v3) @signature `Lorg/joda/time/Chronology;.withZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3b46.  v3:= temp @kind object;
  #L3a3b48.  call `setChronology`(v2, v3) @signature `Lorg/joda/time/MutableDateTime;.setChronology:(Lorg/joda/time/Chronology;)V` @kind virtual;
  #L3a3b4e.  return @kind void;
}
procedure `void` `setZoneRetainFields`(`org.joda.time.MutableDateTime` v3 @kind this, `org.joda.time.DateTimeZone` v4 @kind object) @signature `Lorg/joda/time/MutableDateTime;.setZoneRetainFields:(Lorg/joda/time/DateTimeZone;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a3b60.  call temp:= `getZone`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;` @kind static;
  #L3a3b66.  v4:= temp @kind object;
  #L3a3b68.  call temp:= `getZone`(v3) @signature `Lorg/joda/time/base/AbstractInstant;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3a3b6e.  v0:= temp @kind object;
  #L3a3b70.  call temp:= `getZone`(v0) @signature `Lorg/joda/time/DateTimeUtils;.getZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;` @kind static;
  #L3a3b76.  v0:= temp @kind object;
  #L3a3b78.  if v4 != v0 then goto L3a3b7e;
  #L3a3b7c.  return @kind void;
  #L3a3b7e.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3a3b84.  v1:= temp @kind wide;
  #L3a3b86.  call temp:= `getMillisKeepLocal`(v0, v4, v1) @signature `Lorg/joda/time/DateTimeZone;.getMillisKeepLocal:(Lorg/joda/time/DateTimeZone;J)J` @kind virtual;
  #L3a3b8c.  v0:= temp @kind wide;
  #L3a3b8e.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3b94.  v2:= temp @kind object;
  #L3a3b96.  call temp:= `withZone`(v2, v4) @signature `Lorg/joda/time/Chronology;.withZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3b9c.  v4:= temp @kind object;
  #L3a3b9e.  call `setChronology`(v3, v4) @signature `Lorg/joda/time/MutableDateTime;.setChronology:(Lorg/joda/time/Chronology;)V` @kind virtual;
  #L3a3ba4.  call `setMillis`(v3, v0) @signature `Lorg/joda/time/MutableDateTime;.setMillis:(J)V` @kind virtual;
  #L3a3baa.  return @kind void;
}
procedure `org.joda.time.MutableDateTime$Property` `weekOfWeekyear`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.weekOfWeekyear:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2f8c.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2f90.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2f96.  v1:= temp @kind object;
  #L3a2f98.  call temp:= `weekOfWeekyear`(v1) @signature `Lorg/joda/time/Chronology;.weekOfWeekyear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2f9e.  v1:= temp @kind object;
  #L3a2fa0.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2fa6.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime$Property` `weekyear`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.weekyear:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2fb8.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2fbc.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2fc2.  v1:= temp @kind object;
  #L3a2fc4.  call temp:= `weekyear`(v1) @signature `Lorg/joda/time/Chronology;.weekyear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2fca.  v1:= temp @kind object;
  #L3a2fcc.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2fd2.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime$Property` `year`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.year:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a2fe4.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a2fe8.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a2fee.  v1:= temp @kind object;
  #L3a2ff0.  call temp:= `year`(v1) @signature `Lorg/joda/time/Chronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a2ff6.  v1:= temp @kind object;
  #L3a2ff8.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a2ffe.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime$Property` `yearOfCentury`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.yearOfCentury:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a3010.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a3014.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a301a.  v1:= temp @kind object;
  #L3a301c.  call temp:= `yearOfCentury`(v1) @signature `Lorg/joda/time/Chronology;.yearOfCentury:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a3022.  v1:= temp @kind object;
  #L3a3024.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a302a.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime$Property` `yearOfEra`(`org.joda.time.MutableDateTime` v2 @kind this) @signature `Lorg/joda/time/MutableDateTime;.yearOfEra:()Lorg/joda/time/MutableDateTime$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a303c.  v0:= new `org.joda.time.MutableDateTime$Property`;
  #L3a3040.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3046.  v1:= temp @kind object;
  #L3a3048.  call temp:= `yearOfEra`(v1) @signature `Lorg/joda/time/Chronology;.yearOfEra:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a304e.  v1:= temp @kind object;
  #L3a3050.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MutableDateTime$Property;.<init>:(Lorg/joda/time/MutableDateTime;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3a3056.  return v0 @kind object;
}
