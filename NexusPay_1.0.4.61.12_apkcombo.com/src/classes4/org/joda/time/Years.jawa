record `org.joda.time.Years` @kind class @AccessFlag PUBLIC_FINAL extends `org.joda.time.base.BaseSingleFieldPeriod` @kind class {
}
global `org.joda.time.Years` `@@org.joda.time.Years.MAX_VALUE` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.joda.time.Years` `@@org.joda.time.Years.MIN_VALUE` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.joda.time.Years` `@@org.joda.time.Years.ONE` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.joda.time.format.PeriodFormatter` `@@org.joda.time.Years.PARSER` @AccessFlag PRIVATE_STATIC_FINAL;
global `org.joda.time.Years` `@@org.joda.time.Years.THREE` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.joda.time.Years` `@@org.joda.time.Years.TWO` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.joda.time.Years` `@@org.joda.time.Years.ZERO` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@org.joda.time.Years.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/Years;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ab58c.  v0:= new `org.joda.time.Years`;
  #L3ab590.  v1:= 0I;
  #L3ab592.  call `<init>`(v0, v1) @signature `Lorg/joda/time/Years;.<init>:(I)V` @kind direct;
  #L3ab598.  `@@org.joda.time.Years.ZERO` @type ^`org.joda.time.Years` := v0 @kind object;
  #L3ab59c.  v0:= new `org.joda.time.Years`;
  #L3ab5a0.  v1:= 1I;
  #L3ab5a2.  call `<init>`(v0, v1) @signature `Lorg/joda/time/Years;.<init>:(I)V` @kind direct;
  #L3ab5a8.  `@@org.joda.time.Years.ONE` @type ^`org.joda.time.Years` := v0 @kind object;
  #L3ab5ac.  v0:= new `org.joda.time.Years`;
  #L3ab5b0.  v1:= 2I;
  #L3ab5b2.  call `<init>`(v0, v1) @signature `Lorg/joda/time/Years;.<init>:(I)V` @kind direct;
  #L3ab5b8.  `@@org.joda.time.Years.TWO` @type ^`org.joda.time.Years` := v0 @kind object;
  #L3ab5bc.  v0:= new `org.joda.time.Years`;
  #L3ab5c0.  v1:= 3I;
  #L3ab5c2.  call `<init>`(v0, v1) @signature `Lorg/joda/time/Years;.<init>:(I)V` @kind direct;
  #L3ab5c8.  `@@org.joda.time.Years.THREE` @type ^`org.joda.time.Years` := v0 @kind object;
  #L3ab5cc.  v0:= new `org.joda.time.Years`;
  #L3ab5d0.  v1:= 2147483647I;
  #L3ab5d6.  call `<init>`(v0, v1) @signature `Lorg/joda/time/Years;.<init>:(I)V` @kind direct;
  #L3ab5dc.  `@@org.joda.time.Years.MAX_VALUE` @type ^`org.joda.time.Years` := v0 @kind object;
  #L3ab5e0.  v0:= new `org.joda.time.Years`;
  #L3ab5e4.  v1:= -2147483648I;
  #L3ab5e8.  call `<init>`(v0, v1) @signature `Lorg/joda/time/Years;.<init>:(I)V` @kind direct;
  #L3ab5ee.  `@@org.joda.time.Years.MIN_VALUE` @type ^`org.joda.time.Years` := v0 @kind object;
  #L3ab5f2.  call temp:= `standard`() @signature `Lorg/joda/time/format/ISOPeriodFormat;.standard:()Lorg/joda/time/format/PeriodFormatter;` @kind static;
  #L3ab5f8.  v0:= temp @kind object;
  #L3ab5fa.  call temp:= `years`() @signature `Lorg/joda/time/PeriodType;.years:()Lorg/joda/time/PeriodType;` @kind static;
  #L3ab600.  v1:= temp @kind object;
  #L3ab602.  call temp:= `withParseType`(v0, v1) @signature `Lorg/joda/time/format/PeriodFormatter;.withParseType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/format/PeriodFormatter;` @kind virtual;
  #L3ab608.  v0:= temp @kind object;
  #L3ab60a.  `@@org.joda.time.Years.PARSER` @type ^`org.joda.time.format.PeriodFormatter` := v0 @kind object;
  #L3ab60e.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.Years` v0 @kind this, `int` v1 ) @signature `Lorg/joda/time/Years;.<init>:(I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3ab620.  call `<init>`(v0, v1) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.<init>:(I)V` @kind direct;
  #L3ab626.  return @kind void;
}
procedure `org.joda.time.Years` `parseYears`(`java.lang.String` v1 @kind object) @signature `Lorg/joda/time/Years;.parseYears:(Ljava/lang/String;)Lorg/joda/time/Years;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ab3ac.  if v1 != 0 then goto L3ab3b6;
  #L3ab3b0.  v1:= `@@org.joda.time.Years.ZERO` @type ^`org.joda.time.Years` @kind object;
  #L3ab3b4.  return v1 @kind object;
  #L3ab3b6.  v0:= `@@org.joda.time.Years.PARSER` @type ^`org.joda.time.format.PeriodFormatter` @kind object;
  #L3ab3ba.  call temp:= `parsePeriod`(v0, v1) @signature `Lorg/joda/time/format/PeriodFormatter;.parsePeriod:(Ljava/lang/String;)Lorg/joda/time/Period;` @kind virtual;
  #L3ab3c0.  v1:= temp @kind object;
  #L3ab3c2.  call temp:= `getYears`(v1) @signature `Lorg/joda/time/Period;.getYears:()I` @kind virtual;
  #L3ab3c8.  v1:= temp;
  #L3ab3ca.  call temp:= `years`(v1) @signature `Lorg/joda/time/Years;.years:(I)Lorg/joda/time/Years;` @kind static;
  #L3ab3d0.  v1:= temp @kind object;
  #L3ab3d2.  return v1 @kind object;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.Years` v1 @kind this) @signature `Lorg/joda/time/Years;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3ab230.  call temp:= `getValue`(v1) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ab236.  v0:= temp;
  #L3ab238.  call temp:= `years`(v0) @signature `Lorg/joda/time/Years;.years:(I)Lorg/joda/time/Years;` @kind static;
  #L3ab23e.  v0:= temp @kind object;
  #L3ab240.  return v0 @kind object;
}
procedure `org.joda.time.Years` `years`(`int` v1 ) @signature `Lorg/joda/time/Years;.years:(I)Lorg/joda/time/Years;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ab43c.  v0:= -2147483648I;
  #L3ab440.  if v1 == v0 then goto L3ab48e;
  #L3ab444.  v0:= 2147483647I;
  #L3ab44a.  if v1 == v0 then goto L3ab488;
  #L3ab44e.  if v1 == 0 then goto L3ab482;
  #L3ab452.  v0:= 1I;
  #L3ab454.  if v1 == v0 then goto L3ab47c;
  #L3ab458.  v0:= 2I;
  #L3ab45a.  if v1 == v0 then goto L3ab476;
  #L3ab45e.  v0:= 3I;
  #L3ab460.  if v1 == v0 then goto L3ab470;
  #L3ab464.  v0:= new `org.joda.time.Years`;
  #L3ab468.  call `<init>`(v0, v1) @signature `Lorg/joda/time/Years;.<init>:(I)V` @kind direct;
  #L3ab46e.  return v0 @kind object;
  #L3ab470.  v1:= `@@org.joda.time.Years.THREE` @type ^`org.joda.time.Years` @kind object;
  #L3ab474.  return v1 @kind object;
  #L3ab476.  v1:= `@@org.joda.time.Years.TWO` @type ^`org.joda.time.Years` @kind object;
  #L3ab47a.  return v1 @kind object;
  #L3ab47c.  v1:= `@@org.joda.time.Years.ONE` @type ^`org.joda.time.Years` @kind object;
  #L3ab480.  return v1 @kind object;
  #L3ab482.  v1:= `@@org.joda.time.Years.ZERO` @type ^`org.joda.time.Years` @kind object;
  #L3ab486.  return v1 @kind object;
  #L3ab488.  v1:= `@@org.joda.time.Years.MAX_VALUE` @type ^`org.joda.time.Years` @kind object;
  #L3ab48c.  return v1 @kind object;
  #L3ab48e.  v1:= `@@org.joda.time.Years.MIN_VALUE` @type ^`org.joda.time.Years` @kind object;
  #L3ab492.  return v1 @kind object;
}
procedure `org.joda.time.Years` `yearsBetween`(`org.joda.time.ReadableInstant` v1 @kind object, `org.joda.time.ReadableInstant` v2 @kind object) @signature `Lorg/joda/time/Years;.yearsBetween:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Years;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3ab4a4.  call temp:= `years`() @signature `Lorg/joda/time/DurationFieldType;.years:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3ab4aa.  v0:= temp @kind object;
  #L3ab4ac.  call temp:= `between`(v1, v2, v0) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.between:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableInstant;Lorg/joda/time/DurationFieldType;)I` @kind static;
  #L3ab4b2.  v1:= temp;
  #L3ab4b4.  call temp:= `years`(v1) @signature `Lorg/joda/time/Years;.years:(I)Lorg/joda/time/Years;` @kind static;
  #L3ab4ba.  v1:= temp @kind object;
  #L3ab4bc.  return v1 @kind object;
}
procedure `org.joda.time.Years` `yearsBetween`(`org.joda.time.ReadablePartial` v3 @kind object, `org.joda.time.ReadablePartial` v4 @kind object) @signature `Lorg/joda/time/Years;.yearsBetween:(Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePartial;)Lorg/joda/time/Years;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3ab4d0.  v0:= instanceof @variable v3 @type ^`org.joda.time.LocalDate` @kind boolean;
  #L3ab4d4.  if v0 == 0 then goto L3ab522;
  #L3ab4d8.  v0:= instanceof @variable v4 @type ^`org.joda.time.LocalDate` @kind boolean;
  #L3ab4dc.  if v0 == 0 then goto L3ab522;
  #L3ab4e0.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/ReadablePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ab4e6.  v0:= temp @kind object;
  #L3ab4e8.  call temp:= `getChronology`(v0) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3ab4ee.  v0:= temp @kind object;
  #L3ab4f0.  call temp:= `years`(v0) @signature `Lorg/joda/time/Chronology;.years:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3ab4f6.  v0:= temp @kind object;
  #L3ab4f8.  v4:= (`org.joda.time.LocalDate`) v4 @kind object;
  #L3ab4fc.  call temp:= `getLocalMillis`(v4) @signature `Lorg/joda/time/LocalDate;.getLocalMillis:()J` @kind virtual;
  #L3ab502.  v1:= temp @kind wide;
  #L3ab504.  v3:= (`org.joda.time.LocalDate`) v3 @kind object;
  #L3ab508.  call temp:= `getLocalMillis`(v3) @signature `Lorg/joda/time/LocalDate;.getLocalMillis:()J` @kind virtual;
  #L3ab50e.  v3:= temp @kind wide;
  #L3ab510.  call temp:= `getDifference`(v0, v1, v3) @signature `Lorg/joda/time/DurationField;.getDifference:(JJ)I` @kind virtual;
  #L3ab516.  v3:= temp;
  #L3ab518.  call temp:= `years`(v3) @signature `Lorg/joda/time/Years;.years:(I)Lorg/joda/time/Years;` @kind static;
  #L3ab51e.  v3:= temp @kind object;
  #L3ab520.  return v3 @kind object;
  #L3ab522.  v0:= `@@org.joda.time.Years.ZERO` @type ^`org.joda.time.Years` @kind object;
  #L3ab526.  call temp:= `between`(v3, v4, v0) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.between:(Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePeriod;)I` @kind static;
  #L3ab52c.  v3:= temp;
  #L3ab52e.  call temp:= `years`(v3) @signature `Lorg/joda/time/Years;.years:(I)Lorg/joda/time/Years;` @kind static;
  #L3ab534.  v3:= temp @kind object;
  #L3ab536.  return v3 @kind object;
}
procedure `org.joda.time.Years` `yearsIn`(`org.joda.time.ReadableInterval` v2 @kind object) @signature `Lorg/joda/time/Years;.yearsIn:(Lorg/joda/time/ReadableInterval;)Lorg/joda/time/Years;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3ab548.  if v2 != 0 then goto L3ab552;
  #L3ab54c.  v2:= `@@org.joda.time.Years.ZERO` @type ^`org.joda.time.Years` @kind object;
  #L3ab550.  return v2 @kind object;
  #L3ab552.  call temp:= `getStart`(v2) @signature `Lorg/joda/time/ReadableInterval;.getStart:()Lorg/joda/time/DateTime;` @kind interface;
  #L3ab558.  v0:= temp @kind object;
  #L3ab55a.  call temp:= `getEnd`(v2) @signature `Lorg/joda/time/ReadableInterval;.getEnd:()Lorg/joda/time/DateTime;` @kind interface;
  #L3ab560.  v2:= temp @kind object;
  #L3ab562.  call temp:= `years`() @signature `Lorg/joda/time/DurationFieldType;.years:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3ab568.  v1:= temp @kind object;
  #L3ab56a.  call temp:= `between`(v0, v2, v1) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.between:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableInstant;Lorg/joda/time/DurationFieldType;)I` @kind static;
  #L3ab570.  v2:= temp;
  #L3ab572.  call temp:= `years`(v2) @signature `Lorg/joda/time/Years;.years:(I)Lorg/joda/time/Years;` @kind static;
  #L3ab578.  v2:= temp @kind object;
  #L3ab57a.  return v2 @kind object;
}
procedure `org.joda.time.Years` `dividedBy`(`org.joda.time.Years` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/Years;.dividedBy:(I)Lorg/joda/time/Years;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ab2dc.  v0:= 1I;
  #L3ab2de.  if v2 != v0 then goto L3ab2e4;
  #L3ab2e2.  return v1 @kind object;
  #L3ab2e4.  call temp:= `getValue`(v1) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ab2ea.  v0:= temp;
  #L3ab2ec.  v0:= v0 / v2 @kind int;
  #L3ab2ee.  call temp:= `years`(v0) @signature `Lorg/joda/time/Years;.years:(I)Lorg/joda/time/Years;` @kind static;
  #L3ab2f4.  v2:= temp @kind object;
  #L3ab2f6.  return v2 @kind object;
}
procedure `org.joda.time.DurationFieldType` `getFieldType`(`org.joda.time.Years` v1 @kind this) @signature `Lorg/joda/time/Years;.getFieldType:()Lorg/joda/time/DurationFieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ab2a4.  call temp:= `years`() @signature `Lorg/joda/time/DurationFieldType;.years:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3ab2aa.  v0:= temp @kind object;
  #L3ab2ac.  return v0 @kind object;
}
procedure `org.joda.time.PeriodType` `getPeriodType`(`org.joda.time.Years` v1 @kind this) @signature `Lorg/joda/time/Years;.getPeriodType:()Lorg/joda/time/PeriodType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ab2c0.  call temp:= `years`() @signature `Lorg/joda/time/PeriodType;.years:()Lorg/joda/time/PeriodType;` @kind static;
  #L3ab2c6.  v0:= temp @kind object;
  #L3ab2c8.  return v0 @kind object;
}
procedure `int` `getYears`(`org.joda.time.Years` v1 @kind this) @signature `Lorg/joda/time/Years;.getYears:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ab214.  call temp:= `getValue`(v1) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ab21a.  v0:= temp;
  #L3ab21c.  return v0;
}
procedure `boolean` `isGreaterThan`(`org.joda.time.Years` v3 @kind this, `org.joda.time.Years` v4 @kind object) @signature `Lorg/joda/time/Years;.isGreaterThan:(Lorg/joda/time/Years;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ab18c.  v0:= 1I;
  #L3ab18e.  v1:= 0I;
  #L3ab190.  if v4 != 0 then goto L3ab1a6;
  #L3ab194.  call temp:= `getValue`(v3) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ab19a.  v4:= temp;
  #L3ab19c.  if v4 <= 0 then goto L3ab1a2;
  #L3ab1a0.  goto L3ab1a4;
  #L3ab1a2.  v0:= 0I;
  #L3ab1a4.  return v0;
  #L3ab1a6.  call temp:= `getValue`(v3) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ab1ac.  v2:= temp;
  #L3ab1ae.  call temp:= `getValue`(v4) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ab1b4.  v4:= temp;
  #L3ab1b6.  if v2 <= v4 then goto L3ab1bc;
  #L3ab1ba.  goto L3ab1be;
  #L3ab1bc.  v0:= 0I;
  #L3ab1be.  return v0;
}
procedure `boolean` `isLessThan`(`org.joda.time.Years` v3 @kind this, `org.joda.time.Years` v4 @kind object) @signature `Lorg/joda/time/Years;.isLessThan:(Lorg/joda/time/Years;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ab1d0.  v0:= 1I;
  #L3ab1d2.  v1:= 0I;
  #L3ab1d4.  if v4 != 0 then goto L3ab1ea;
  #L3ab1d8.  call temp:= `getValue`(v3) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ab1de.  v4:= temp;
  #L3ab1e0.  if v4 >= 0 then goto L3ab1e6;
  #L3ab1e4.  goto L3ab1e8;
  #L3ab1e6.  v0:= 0I;
  #L3ab1e8.  return v0;
  #L3ab1ea.  call temp:= `getValue`(v3) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ab1f0.  v2:= temp;
  #L3ab1f2.  call temp:= `getValue`(v4) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ab1f8.  v4:= temp;
  #L3ab1fa.  if v2 >= v4 then goto L3ab200;
  #L3ab1fe.  goto L3ab202;
  #L3ab200.  v0:= 0I;
  #L3ab202.  return v0;
}
procedure `org.joda.time.Years` `minus`(`org.joda.time.Years` v0 @kind this, `int` v1 ) @signature `Lorg/joda/time/Years;.minus:(I)Lorg/joda/time/Years;` @AccessFlag PUBLIC {
    temp;

  #L3ab308.  call temp:= `safeNegate`(v1) @signature `Lorg/joda/time/field/FieldUtils;.safeNegate:(I)I` @kind static;
  #L3ab30e.  v1:= temp;
  #L3ab310.  call temp:= `plus`(v0, v1) @signature `Lorg/joda/time/Years;.plus:(I)Lorg/joda/time/Years;` @kind virtual;
  #L3ab316.  v1:= temp @kind object;
  #L3ab318.  return v1 @kind object;
}
procedure `org.joda.time.Years` `minus`(`org.joda.time.Years` v0 @kind this, `org.joda.time.Years` v1 @kind object) @signature `Lorg/joda/time/Years;.minus:(Lorg/joda/time/Years;)Lorg/joda/time/Years;` @AccessFlag PUBLIC {
    temp;

  #L3ab32c.  if v1 != 0 then goto L3ab332;
  #L3ab330.  return v0 @kind object;
  #L3ab332.  call temp:= `getValue`(v1) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ab338.  v1:= temp;
  #L3ab33a.  call temp:= `minus`(v0, v1) @signature `Lorg/joda/time/Years;.minus:(I)Lorg/joda/time/Years;` @kind virtual;
  #L3ab340.  v1:= temp @kind object;
  #L3ab342.  return v1 @kind object;
}
procedure `org.joda.time.Years` `multipliedBy`(`org.joda.time.Years` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/Years;.multipliedBy:(I)Lorg/joda/time/Years;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ab354.  call temp:= `getValue`(v1) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ab35a.  v0:= temp;
  #L3ab35c.  call temp:= `safeMultiply`(v0, v2) @signature `Lorg/joda/time/field/FieldUtils;.safeMultiply:(II)I` @kind static;
  #L3ab362.  v2:= temp;
  #L3ab364.  call temp:= `years`(v2) @signature `Lorg/joda/time/Years;.years:(I)Lorg/joda/time/Years;` @kind static;
  #L3ab36a.  v2:= temp @kind object;
  #L3ab36c.  return v2 @kind object;
}
procedure `org.joda.time.Years` `negated`(`org.joda.time.Years` v1 @kind this) @signature `Lorg/joda/time/Years;.negated:()Lorg/joda/time/Years;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ab380.  call temp:= `getValue`(v1) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ab386.  v0:= temp;
  #L3ab388.  call temp:= `safeNegate`(v0) @signature `Lorg/joda/time/field/FieldUtils;.safeNegate:(I)I` @kind static;
  #L3ab38e.  v0:= temp;
  #L3ab390.  call temp:= `years`(v0) @signature `Lorg/joda/time/Years;.years:(I)Lorg/joda/time/Years;` @kind static;
  #L3ab396.  v0:= temp @kind object;
  #L3ab398.  return v0 @kind object;
}
procedure `org.joda.time.Years` `plus`(`org.joda.time.Years` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/Years;.plus:(I)Lorg/joda/time/Years;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ab3e4.  if v2 != 0 then goto L3ab3ea;
  #L3ab3e8.  return v1 @kind object;
  #L3ab3ea.  call temp:= `getValue`(v1) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ab3f0.  v0:= temp;
  #L3ab3f2.  call temp:= `safeAdd`(v0, v2) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(II)I` @kind static;
  #L3ab3f8.  v2:= temp;
  #L3ab3fa.  call temp:= `years`(v2) @signature `Lorg/joda/time/Years;.years:(I)Lorg/joda/time/Years;` @kind static;
  #L3ab400.  v2:= temp @kind object;
  #L3ab402.  return v2 @kind object;
}
procedure `org.joda.time.Years` `plus`(`org.joda.time.Years` v0 @kind this, `org.joda.time.Years` v1 @kind object) @signature `Lorg/joda/time/Years;.plus:(Lorg/joda/time/Years;)Lorg/joda/time/Years;` @AccessFlag PUBLIC {
    temp;

  #L3ab414.  if v1 != 0 then goto L3ab41a;
  #L3ab418.  return v0 @kind object;
  #L3ab41a.  call temp:= `getValue`(v1) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ab420.  v1:= temp;
  #L3ab422.  call temp:= `plus`(v0, v1) @signature `Lorg/joda/time/Years;.plus:(I)Lorg/joda/time/Years;` @kind virtual;
  #L3ab428.  v1:= temp @kind object;
  #L3ab42a.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.Years` v2 @kind this) @signature `Lorg/joda/time/Years;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ab254.  v0:= new `java.lang.StringBuilder`;
  #L3ab258.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ab25e.  v1:= "P" @kind object;
  #L3ab262.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ab268.  call temp:= `getValue`(v2) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ab26e.  v1:= temp;
  #L3ab270.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L3ab276.  v1:= temp @kind object;
  #L3ab278.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ab27e.  v1:= "Y" @kind object;
  #L3ab282.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ab288.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ab28e.  v0:= temp @kind object;
  #L3ab290.  return v0 @kind object;
}
