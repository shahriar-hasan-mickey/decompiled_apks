record `org.joda.time.convert.ReadablePartialConverter` @kind class @AccessFlag  extends `org.joda.time.convert.AbstractConverter` @kind class, `org.joda.time.convert.PartialConverter` @kind interface {
}
global `org.joda.time.convert.ReadablePartialConverter` `@@org.joda.time.convert.ReadablePartialConverter.INSTANCE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/convert/ReadablePartialConverter;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3baf74.  v0:= new `org.joda.time.convert.ReadablePartialConverter`;
  #L3baf78.  call `<init>`(v0) @signature `Lorg/joda/time/convert/ReadablePartialConverter;.<init>:()V` @kind direct;
  #L3baf7e.  `@@org.joda.time.convert.ReadablePartialConverter.INSTANCE` @type ^`org.joda.time.convert.ReadablePartialConverter` := v0 @kind object;
  #L3baf82.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.convert.ReadablePartialConverter` v0 @kind this) @signature `Lorg/joda/time/convert/ReadablePartialConverter;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3baf94.  call `<init>`(v0) @signature `Lorg/joda/time/convert/AbstractConverter;.<init>:()V` @kind direct;
  #L3baf9a.  return @kind void;
}
procedure `org.joda.time.Chronology` `getChronology`(`org.joda.time.convert.ReadablePartialConverter` v0 @kind this, `java.lang.Object` v1 @kind object, `org.joda.time.Chronology` v2 @kind object) @signature `Lorg/joda/time/convert/ReadablePartialConverter;.getChronology:(Ljava/lang/Object;Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;

  #L3baf24.  if v2 != 0 then goto L3baf3c;
  #L3baf28.  v1:= (`org.joda.time.ReadablePartial`) v1 @kind object;
  #L3baf2c.  call temp:= `getChronology`(v1) @signature `Lorg/joda/time/ReadablePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3baf32.  v1:= temp @kind object;
  #L3baf34.  call temp:= `getChronology`(v1) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3baf3a.  v2:= temp @kind object;
  #L3baf3c.  return v2 @kind object;
}
procedure `org.joda.time.Chronology` `getChronology`(`org.joda.time.convert.ReadablePartialConverter` v1 @kind this, `java.lang.Object` v2 @kind object, `org.joda.time.DateTimeZone` v3 @kind object) @signature `Lorg/joda/time/convert/ReadablePartialConverter;.getChronology:(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3baf50.  v0:= 0I;
  #L3baf52.  call temp:= `getChronology`(v1, v2, v0) @signature `Lorg/joda/time/convert/ReadablePartialConverter;.getChronology:(Ljava/lang/Object;Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind virtual;
  #L3baf58.  v2:= temp @kind object;
  #L3baf5a.  call temp:= `withZone`(v2, v3) @signature `Lorg/joda/time/Chronology;.withZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @kind virtual;
  #L3baf60.  v2:= temp @kind object;
  #L3baf62.  return v2 @kind object;
}
procedure `int`[] `getPartialValues`(`org.joda.time.convert.ReadablePartialConverter` v4 @kind this, `org.joda.time.ReadablePartial` v5 @kind object, `java.lang.Object` v6 @kind object, `org.joda.time.Chronology` v7 @kind object) @signature `Lorg/joda/time/convert/ReadablePartialConverter;.getPartialValues:(Lorg/joda/time/ReadablePartial;Ljava/lang/Object;Lorg/joda/time/Chronology;)[I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3baec4.  v6:= (`org.joda.time.ReadablePartial`) v6 @kind object;
  #L3baec8.  call temp:= `size`(v5) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3baece.  v0:= temp;
  #L3baed0.  v1:= new `int`[v0];
  #L3baed4.  v2:= 0I;
  #L3baed6.  if v2 >= v0 then goto L3baef4;
  #L3baeda.  call temp:= `getFieldType`(v5, v2) @signature `Lorg/joda/time/ReadablePartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind interface;
  #L3baee0.  v3:= temp @kind object;
  #L3baee2.  call temp:= `get`(v6, v3) @signature `Lorg/joda/time/ReadablePartial;.get:(Lorg/joda/time/DateTimeFieldType;)I` @kind interface;
  #L3baee8.  v3:= temp;
  #L3baeea.  v1[v2]:= v3;
  #L3baeee.  v2:= v2 + 1;
  #L3baef2.  goto L3baed6;
  #L3baef4.  call `validate`(v7, v5, v1) @signature `Lorg/joda/time/Chronology;.validate:(Lorg/joda/time/ReadablePartial;[I)V` @kind virtual;
  #L3baefa.  return v1 @kind object;
}
procedure `java.lang.Class` `getSupportedType`(`org.joda.time.convert.ReadablePartialConverter` v1 @kind this) @signature `Lorg/joda/time/convert/ReadablePartialConverter;.getSupportedType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3baf0c.  v0:= constclass @type ^`org.joda.time.ReadablePartial` @kind object;
  #L3baf10.  return v0 @kind object;
}
