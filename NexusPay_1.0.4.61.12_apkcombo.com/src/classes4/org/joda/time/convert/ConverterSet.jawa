record `org.joda.time.convert.ConverterSet` @kind class @AccessFlag  {
  `org.joda.time.convert.Converter`[] `org.joda.time.convert.ConverterSet.iConverters` @AccessFlag PRIVATE_FINAL;
  `org.joda.time.convert.ConverterSet$Entry`[] `org.joda.time.convert.ConverterSet.iSelectEntries` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.joda.time.convert.ConverterSet` v0 @kind this, `org.joda.time.convert.Converter`[] v1 @kind object) @signature `Lorg/joda/time/convert/ConverterSet;.<init>:([Lorg/joda/time/convert/Converter;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3baa20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3baa26.  v0.`org.joda.time.convert.ConverterSet.iConverters` @type ^`org.joda.time.convert.Converter`[] := v1 @kind object;
  #L3baa2a.  v1:= 16I;
  #L3baa2e.  v1:= new `org.joda.time.convert.ConverterSet$Entry`[v1];
  #L3baa32.  v0.`org.joda.time.convert.ConverterSet.iSelectEntries` @type ^`org.joda.time.convert.ConverterSet$Entry`[] := v1 @kind object;
  #L3baa36.  return @kind void;
}
procedure `org.joda.time.convert.Converter` `selectSlow`(`org.joda.time.convert.ConverterSet` v9 @kind object, `java.lang.Class` v10 @kind object) @signature `Lorg/joda/time/convert/ConverterSet;.selectSlow:(Lorg/joda/time/convert/ConverterSet;Ljava/lang/Class;)Lorg/joda/time/convert/Converter;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3ba754.  v0:= v9.`org.joda.time.convert.ConverterSet.iConverters` @type ^`org.joda.time.convert.Converter`[] @kind object;
  #L3ba758.  v1:= length @variable v0;
  #L3ba75a.  v2:= v1;
  #L3ba75c.  v1:= v1 + -1;
  #L3ba760.  v3:= 0I;
  #L3ba762.  if v1 < 0 then goto L3ba79c;
  #L3ba766.  v4:= v0[v1] @kind object;
  #L3ba76a.  call temp:= `getSupportedType`(v4) @signature `Lorg/joda/time/convert/Converter;.getSupportedType:()Ljava/lang/Class;` @kind interface;
  #L3ba770.  v5:= temp @kind object;
  #L3ba772.  if v5 != v10 then goto L3ba778;
  #L3ba776.  return v4 @kind object;
  #L3ba778.  if v5 == 0 then goto L3ba78c;
  #L3ba77c.  if v10 == 0 then goto L3ba75c;
  #L3ba780.  call temp:= `isAssignableFrom`(v5, v10) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3ba786.  v4:= temp;
  #L3ba788.  if v4 != 0 then goto L3ba75c;
  #L3ba78c.  call temp:= `remove`(v9, v1, v3) @signature `Lorg/joda/time/convert/ConverterSet;.remove:(I[Lorg/joda/time/convert/Converter;)Lorg/joda/time/convert/ConverterSet;` @kind virtual;
  #L3ba792.  v9:= temp @kind object;
  #L3ba794.  v0:= v9.`org.joda.time.convert.ConverterSet.iConverters` @type ^`org.joda.time.convert.Converter`[] @kind object;
  #L3ba798.  v2:= length @variable v0;
  #L3ba79a.  goto L3ba75c;
  #L3ba79c.  if v10 == 0 then goto L3ba8aa;
  #L3ba7a0.  if v2 != 0 then goto L3ba7a8;
  #L3ba7a4.  goto L3ba8aa;
  #L3ba7a8.  v1:= 0I;
  #L3ba7aa.  v4:= 1I;
  #L3ba7ac.  if v2 != v4 then goto L3ba7b6;
  #L3ba7b0.  v9:= v0[v1] @kind object;
  #L3ba7b4.  return v9 @kind object;
  #L3ba7b6.  v5:= v2;
  #L3ba7b8.  v2:= v2 + -1;
  #L3ba7bc.  if v2 < 0 then goto L3ba80a;
  #L3ba7c0.  v6:= v0[v2] @kind object;
  #L3ba7c4.  call temp:= `getSupportedType`(v6) @signature `Lorg/joda/time/convert/Converter;.getSupportedType:()Ljava/lang/Class;` @kind interface;
  #L3ba7ca.  v6:= temp @kind object;
  #L3ba7cc.  v7:= v5;
  #L3ba7ce.  v5:= v5 + -1;
  #L3ba7d2.  if v5 < 0 then goto L3ba806;
  #L3ba7d6.  if v5 == v2 then goto L3ba7ce;
  #L3ba7da.  v8:= v0[v5] @kind object;
  #L3ba7de.  call temp:= `getSupportedType`(v8) @signature `Lorg/joda/time/convert/Converter;.getSupportedType:()Ljava/lang/Class;` @kind interface;
  #L3ba7e4.  v8:= temp @kind object;
  #L3ba7e6.  call temp:= `isAssignableFrom`(v8, v6) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3ba7ec.  v8:= temp;
  #L3ba7ee.  if v8 == 0 then goto L3ba7ce;
  #L3ba7f2.  call temp:= `remove`(v9, v5, v3) @signature `Lorg/joda/time/convert/ConverterSet;.remove:(I[Lorg/joda/time/convert/Converter;)Lorg/joda/time/convert/ConverterSet;` @kind virtual;
  #L3ba7f8.  v9:= temp @kind object;
  #L3ba7fa.  v0:= v9.`org.joda.time.convert.ConverterSet.iConverters` @type ^`org.joda.time.convert.Converter`[] @kind object;
  #L3ba7fe.  v7:= length @variable v0;
  #L3ba800.  v2:= v7 + -1;
  #L3ba804.  goto L3ba7ce;
  #L3ba806.  v5:= v7;
  #L3ba808.  goto L3ba7b8;
  #L3ba80a.  if v5 != v4 then goto L3ba814;
  #L3ba80e.  v9:= v0[v1] @kind object;
  #L3ba812.  return v9 @kind object;
  #L3ba814.  v9:= new `java.lang.StringBuilder`;
  #L3ba818.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ba81e.  v2:= "Unable to find best converter for type \"" @kind object;
  #L3ba822.  call temp:= `append`(v9, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ba828.  call temp:= `getName`(v10) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3ba82e.  v10:= temp @kind object;
  #L3ba830.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ba836.  v10:= "\" from remaining set: " @kind object;
  #L3ba83a.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ba840.  if v1 >= v5 then goto L3ba896;
  #L3ba844.  v10:= v0[v1] @kind object;
  #L3ba848.  call temp:= `getSupportedType`(v10) @signature `Lorg/joda/time/convert/Converter;.getSupportedType:()Ljava/lang/Class;` @kind interface;
  #L3ba84e.  v2:= temp @kind object;
  #L3ba850.  call temp:= `getClass`(v10) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ba856.  v10:= temp @kind object;
  #L3ba858.  call temp:= `getName`(v10) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3ba85e.  v10:= temp @kind object;
  #L3ba860.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ba866.  v10:= 91I;
  #L3ba86a.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ba870.  if v2 != 0 then goto L3ba878;
  #L3ba874.  v10:= v3 @kind object;
  #L3ba876.  goto L3ba880;
  #L3ba878.  call temp:= `getName`(v2) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3ba87e.  v10:= temp @kind object;
  #L3ba880.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ba886.  v10:= "], " @kind object;
  #L3ba88a.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ba890.  v1:= v1 + 1;
  #L3ba894.  goto L3ba840;
  #L3ba896.  v10:= new `java.lang.IllegalStateException`;
  #L3ba89a.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ba8a0.  v9:= temp @kind object;
  #L3ba8a2.  call `<init>`(v10, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ba8a8.  throw v10;
  #L3ba8aa.  return v3 @kind object;
}
procedure `org.joda.time.convert.ConverterSet` `add`(`org.joda.time.convert.ConverterSet` v8 @kind this, `org.joda.time.convert.Converter` v9 @kind object, `org.joda.time.convert.Converter`[] v10 @kind object) @signature `Lorg/joda/time/convert/ConverterSet;.add:(Lorg/joda/time/convert/Converter;[Lorg/joda/time/convert/Converter;)Lorg/joda/time/convert/ConverterSet;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3ba8bc.  v0:= v8.`org.joda.time.convert.ConverterSet.iConverters` @type ^`org.joda.time.convert.Converter`[] @kind object;
  #L3ba8c0.  v1:= length @variable v0;
  #L3ba8c2.  v2:= 0I;
  #L3ba8c4.  v3:= 0I;
  #L3ba8c6.  v4:= 0I;
  #L3ba8c8.  if v3 >= v1 then goto L3ba936;
  #L3ba8cc.  v5:= v0[v3] @kind object;
  #L3ba8d0.  call temp:= `equals`(v9, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ba8d6.  v6:= temp;
  #L3ba8d8.  if v6 == 0 then goto L3ba8e6;
  #L3ba8dc.  if v10 == 0 then goto L3ba8e4;
  #L3ba8e0.  v10[v2]:= v4 @kind object;
  #L3ba8e4.  return v8 @kind object;
  #L3ba8e6.  call temp:= `getSupportedType`(v9) @signature `Lorg/joda/time/convert/Converter;.getSupportedType:()Ljava/lang/Class;` @kind interface;
  #L3ba8ec.  v4:= temp @kind object;
  #L3ba8ee.  call temp:= `getSupportedType`(v5) @signature `Lorg/joda/time/convert/Converter;.getSupportedType:()Ljava/lang/Class;` @kind interface;
  #L3ba8f4.  v6:= temp @kind object;
  #L3ba8f6.  if v4 != v6 then goto L3ba930;
  #L3ba8fa.  v4:= new `org.joda.time.convert.Converter`[v1];
  #L3ba8fe.  v6:= 0I;
  #L3ba900.  if v6 >= v1 then goto L3ba91c;
  #L3ba904.  if v6 == v3 then goto L3ba912;
  #L3ba908.  v7:= v0[v6] @kind object;
  #L3ba90c.  v4[v6]:= v7 @kind object;
  #L3ba910.  goto L3ba916;
  #L3ba912.  v4[v6]:= v9 @kind object;
  #L3ba916.  v6:= v6 + 1;
  #L3ba91a.  goto L3ba900;
  #L3ba91c.  if v10 == 0 then goto L3ba924;
  #L3ba920.  v10[v2]:= v5 @kind object;
  #L3ba924.  v9:= new `org.joda.time.convert.ConverterSet`;
  #L3ba928.  call `<init>`(v9, v4) @signature `Lorg/joda/time/convert/ConverterSet;.<init>:([Lorg/joda/time/convert/Converter;)V` @kind direct;
  #L3ba92e.  return v9 @kind object;
  #L3ba930.  v3:= v3 + 1;
  #L3ba934.  goto L3ba8c6;
  #L3ba936.  v3:= v1 + 1;
  #L3ba93a.  v3:= new `org.joda.time.convert.Converter`[v3];
  #L3ba93e.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3ba944.  v3[v1]:= v9 @kind object;
  #L3ba948.  if v10 == 0 then goto L3ba950;
  #L3ba94c.  v10[v2]:= v4 @kind object;
  #L3ba950.  v9:= new `org.joda.time.convert.ConverterSet`;
  #L3ba954.  call `<init>`(v9, v3) @signature `Lorg/joda/time/convert/ConverterSet;.<init>:([Lorg/joda/time/convert/Converter;)V` @kind direct;
  #L3ba95a.  return v9 @kind object;
}
procedure `void` `copyInto`(`org.joda.time.convert.ConverterSet` v3 @kind this, `org.joda.time.convert.Converter`[] v4 @kind object) @signature `Lorg/joda/time/convert/ConverterSet;.copyInto:([Lorg/joda/time/convert/Converter;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3baa48.  v0:= v3.`org.joda.time.convert.ConverterSet.iConverters` @type ^`org.joda.time.convert.Converter`[] @kind object;
  #L3baa4c.  v1:= length @variable v0;
  #L3baa4e.  v2:= 0I;
  #L3baa50.  call `arraycopy`(v0, v2, v4, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3baa56.  return @kind void;
}
procedure `org.joda.time.convert.ConverterSet` `remove`(`org.joda.time.convert.ConverterSet` v6 @kind this, `int` v7 , `org.joda.time.convert.Converter`[] v8 @kind object) @signature `Lorg/joda/time/convert/ConverterSet;.remove:(I[Lorg/joda/time/convert/Converter;)Lorg/joda/time/convert/ConverterSet;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ba96c.  v0:= v6.`org.joda.time.convert.ConverterSet.iConverters` @type ^`org.joda.time.convert.Converter`[] @kind object;
  #L3ba970.  v1:= length @variable v0;
  #L3ba972.  if v7 >= v1 then goto L3ba9b6;
  #L3ba976.  v2:= 0I;
  #L3ba978.  if v8 == 0 then goto L3ba984;
  #L3ba97c.  v3:= v0[v7] @kind object;
  #L3ba980.  v8[v2]:= v3 @kind object;
  #L3ba984.  v8:= v1 + -1;
  #L3ba988.  v8:= new `org.joda.time.convert.Converter`[v8];
  #L3ba98c.  v3:= 0I;
  #L3ba98e.  if v2 >= v1 then goto L3ba9aa;
  #L3ba992.  if v2 == v7 then goto L3ba9a4;
  #L3ba996.  v4:= v3 + 1;
  #L3ba99a.  v5:= v0[v2] @kind object;
  #L3ba99e.  v8[v3]:= v5 @kind object;
  #L3ba9a2.  v3:= v4;
  #L3ba9a4.  v2:= v2 + 1;
  #L3ba9a8.  goto L3ba98e;
  #L3ba9aa.  v7:= new `org.joda.time.convert.ConverterSet`;
  #L3ba9ae.  call `<init>`(v7, v8) @signature `Lorg/joda/time/convert/ConverterSet;.<init>:([Lorg/joda/time/convert/Converter;)V` @kind direct;
  #L3ba9b4.  return v7 @kind object;
  #L3ba9b6.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L3ba9ba.  call `<init>`(v7) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L3ba9c0.  throw v7;
}
procedure `org.joda.time.convert.ConverterSet` `remove`(`org.joda.time.convert.ConverterSet` v5 @kind this, `org.joda.time.convert.Converter` v6 @kind object, `org.joda.time.convert.Converter`[] v7 @kind object) @signature `Lorg/joda/time/convert/ConverterSet;.remove:(Lorg/joda/time/convert/Converter;[Lorg/joda/time/convert/Converter;)Lorg/joda/time/convert/ConverterSet;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ba9d4.  v0:= v5.`org.joda.time.convert.ConverterSet.iConverters` @type ^`org.joda.time.convert.Converter`[] @kind object;
  #L3ba9d8.  v1:= length @variable v0;
  #L3ba9da.  v2:= 0I;
  #L3ba9dc.  v3:= 0I;
  #L3ba9de.  if v3 >= v1 then goto L3baa02;
  #L3ba9e2.  v4:= v0[v3] @kind object;
  #L3ba9e6.  call temp:= `equals`(v6, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3ba9ec.  v4:= temp;
  #L3ba9ee.  if v4 == 0 then goto L3ba9fc;
  #L3ba9f2.  call temp:= `remove`(v5, v3, v7) @signature `Lorg/joda/time/convert/ConverterSet;.remove:(I[Lorg/joda/time/convert/Converter;)Lorg/joda/time/convert/ConverterSet;` @kind virtual;
  #L3ba9f8.  v6:= temp @kind object;
  #L3ba9fa.  return v6 @kind object;
  #L3ba9fc.  v3:= v3 + 1;
  #L3baa00.  goto L3ba9de;
  #L3baa02.  if v7 == 0 then goto L3baa0c;
  #L3baa06.  v6:= 0I;
  #L3baa08.  v7[v2]:= v6 @kind object;
  #L3baa0c.  return v5 @kind object;
}
procedure `org.joda.time.convert.Converter` `select`(`org.joda.time.convert.ConverterSet` v9 @kind this, `java.lang.Class` v10 @kind object) @signature `Lorg/joda/time/convert/ConverterSet;.select:(Ljava/lang/Class;)Lorg/joda/time/convert/Converter;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3ba67c.  v0:= v9.`org.joda.time.convert.ConverterSet.iSelectEntries` @type ^`org.joda.time.convert.ConverterSet$Entry`[] @kind object;
  #L3ba680.  v1:= length @variable v0;
  #L3ba682.  v2:= 0I;
  #L3ba684.  if v10 != 0 then goto L3ba68a;
  #L3ba688.  goto L3ba6b6;
  #L3ba68a.  call temp:= `hashCode`(v10) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3ba690.  v3:= temp;
  #L3ba692.  v4:= v1 + -1;
  #L3ba696.  v3:= v3 ^& v4 @kind int;
  #L3ba698.  v4:= v0[v3] @kind object;
  #L3ba69c.  if v4 == 0 then goto L3ba6ba;
  #L3ba6a0.  v5:= v4.`org.joda.time.convert.ConverterSet$Entry.iType` @type ^`java.lang.Class` @kind object;
  #L3ba6a4.  if v5 != v10 then goto L3ba6ae;
  #L3ba6a8.  v10:= v4.`org.joda.time.convert.ConverterSet$Entry.iConverter` @type ^`org.joda.time.convert.Converter` @kind object;
  #L3ba6ac.  return v10 @kind object;
  #L3ba6ae.  v3:= v3 + 1;
  #L3ba6b2.  if v3 < v1 then goto L3ba698;
  #L3ba6b6.  v3:= 0I;
  #L3ba6b8.  goto L3ba698;
  #L3ba6ba.  call temp:= `selectSlow`(v9, v10) @signature `Lorg/joda/time/convert/ConverterSet;.selectSlow:(Lorg/joda/time/convert/ConverterSet;Ljava/lang/Class;)Lorg/joda/time/convert/Converter;` @kind static;
  #L3ba6c0.  v4:= temp @kind object;
  #L3ba6c2.  v5:= new `org.joda.time.convert.ConverterSet$Entry`;
  #L3ba6c6.  call `<init>`(v5, v10, v4) @signature `Lorg/joda/time/convert/ConverterSet$Entry;.<init>:(Ljava/lang/Class;Lorg/joda/time/convert/Converter;)V` @kind direct;
  #L3ba6cc.  call temp:= `clone`(v0) @signature `[Lorg/joda/time/convert/ConverterSet$Entry;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3ba6d2.  v10:= temp @kind object;
  #L3ba6d4.  v10:= (`org.joda.time.convert.ConverterSet$Entry`[]) v10 @kind object;
  #L3ba6d8.  v10[v3]:= v5 @kind object;
  #L3ba6dc.  v0:= 0I;
  #L3ba6de.  if v0 >= v1 then goto L3ba6f6;
  #L3ba6e2.  v3:= v10[v0] @kind object;
  #L3ba6e6.  if v3 != 0 then goto L3ba6f0;
  #L3ba6ea.  v9.`org.joda.time.convert.ConverterSet.iSelectEntries` @type ^`org.joda.time.convert.ConverterSet$Entry`[] := v10 @kind object;
  #L3ba6ee.  return v4 @kind object;
  #L3ba6f0.  v0:= v0 + 1;
  #L3ba6f4.  goto L3ba6de;
  #L3ba6f6.  v0:= v1 ^< 1;
  #L3ba6fa.  v3:= new `org.joda.time.convert.ConverterSet$Entry`[v0];
  #L3ba6fe.  v5:= 0I;
  #L3ba700.  if v5 >= v1 then goto L3ba73e;
  #L3ba704.  v6:= v10[v5] @kind object;
  #L3ba708.  v7:= v6.`org.joda.time.convert.ConverterSet$Entry.iType` @type ^`java.lang.Class` @kind object;
  #L3ba70c.  if v7 != 0 then goto L3ba712;
  #L3ba710.  goto L3ba730;
  #L3ba712.  call temp:= `hashCode`(v7) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3ba718.  v7:= temp;
  #L3ba71a.  v8:= v0 + -1;
  #L3ba71e.  v7:= v7 ^& v8 @kind int;
  #L3ba720.  v8:= v3[v7] @kind object;
  #L3ba724.  if v8 == 0 then goto L3ba734;
  #L3ba728.  v7:= v7 + 1;
  #L3ba72c.  if v7 < v0 then goto L3ba720;
  #L3ba730.  v7:= 0I;
  #L3ba732.  goto L3ba720;
  #L3ba734.  v3[v7]:= v6 @kind object;
  #L3ba738.  v5:= v5 + 1;
  #L3ba73c.  goto L3ba700;
  #L3ba73e.  v9.`org.joda.time.convert.ConverterSet.iSelectEntries` @type ^`org.joda.time.convert.ConverterSet$Entry`[] := v3 @kind object;
  #L3ba742.  return v4 @kind object;
}
procedure `int` `size`(`org.joda.time.convert.ConverterSet` v1 @kind this) @signature `Lorg/joda/time/convert/ConverterSet;.size:()I` @AccessFlag  {
    temp;
    v0;

  #L3ba664.  v0:= v1.`org.joda.time.convert.ConverterSet.iConverters` @type ^`org.joda.time.convert.Converter`[] @kind object;
  #L3ba668.  v0:= length @variable v0;
  #L3ba66a.  return v0;
}
