record `org.joda.time.convert.ReadableInstantConverter` @kind class @AccessFlag  extends `org.joda.time.convert.AbstractConverter` @kind class, `org.joda.time.convert.InstantConverter` @kind interface, `org.joda.time.convert.PartialConverter` @kind interface {
}
global `org.joda.time.convert.ReadableInstantConverter` `@@org.joda.time.convert.ReadableInstantConverter.INSTANCE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/convert/ReadableInstantConverter;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3bad78.  v0:= new `org.joda.time.convert.ReadableInstantConverter`;
  #L3bad7c.  call `<init>`(v0) @signature `Lorg/joda/time/convert/ReadableInstantConverter;.<init>:()V` @kind direct;
  #L3bad82.  `@@org.joda.time.convert.ReadableInstantConverter.INSTANCE` @type ^`org.joda.time.convert.ReadableInstantConverter` := v0 @kind object;
  #L3bad86.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.convert.ReadableInstantConverter` v0 @kind this) @signature `Lorg/joda/time/convert/ReadableInstantConverter;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3bad98.  call `<init>`(v0) @signature `Lorg/joda/time/convert/AbstractConverter;.<init>:()V` @kind direct;
  #L3bad9e.  return @kind void;
}
procedure `org.joda.time.Chronology` `getChronology`(`org.joda.time.convert.ReadableInstantConverter` v0 @kind this, `java.lang.Object` v1 @kind object, `org.joda.time.Chronology` v2 @kind object) @signature `Lorg/joda/time/convert/ReadableInstantConverter;.getChronology:(Ljava/lang/Object;Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;

  #L3bad00.  if v2 != 0 then goto L3bad18;
  #L3bad04.  v1:= (`org.joda.time.ReadableInstant`) v1 @kind object;
  #L3bad08.  call temp:= `getChronology`(v1) @signature `Lorg/joda/time/ReadableInstant;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3bad0e.  v1:= temp @kind object;
  #L3bad10.  call temp:= `getChronology`(v1) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3bad16.  v2:= temp @kind object;
  #L3bad18.  return v2 @kind object;
}
procedure `org.joda.time.Chronology` `getChronology`(`org.joda.time.convert.ReadableInstantConverter` v1 @kind this, `java.lang.Object` v2 @kind object, `org.joda.time.DateTimeZone` v3 @kind object) @signature `Lorg/joda/time/convert/ReadableInstantConverter;.getChronology:(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bad2c.  v2:= (`org.joda.time.ReadableInstant`) v2 @kind object;
  #L3bad30.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/ReadableInstant;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3bad36.  v2:= temp @kind object;
  #L3bad38.  if v2 != 0 then goto L3bad46;
  #L3bad3c.  call temp:= `getInstance`(v3) @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3bad42.  v2:= temp @kind object;
  #L3bad44.  return v2 @kind object;
  #L3bad46.  call temp:= `getZone`(v2) @signature `Lorg/joda/time/Chronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3bad4c.  v0:= temp @kind object;
  #L3bad4e.  if v0 == v3 then goto L3bad66;
  #L3bad52.  call temp:= `withZone`(v2, v3) @signature `Lorg/joda/time/Chronology;.withZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @kind virtual;
  #L3bad58.  v2:= temp @kind object;
  #L3bad5a.  if v2 != 0 then goto L3bad66;
  #L3bad5e.  call temp:= `getInstance`(v3) @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3bad64.  v2:= temp @kind object;
  #L3bad66.  return v2 @kind object;
}
procedure `long` `getInstantMillis`(`org.joda.time.convert.ReadableInstantConverter` v0 @kind this, `java.lang.Object` v1 @kind object, `org.joda.time.Chronology` v2 @kind object) @signature `Lorg/joda/time/convert/ReadableInstantConverter;.getInstantMillis:(Ljava/lang/Object;Lorg/joda/time/Chronology;)J` @AccessFlag PUBLIC {
    temp;

  #L3bace0.  v1:= (`org.joda.time.ReadableInstant`) v1 @kind object;
  #L3bace4.  call temp:= `getMillis`(v1) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3bacea.  v1:= temp @kind wide;
  #L3bacec.  return v1 @kind wide;
}
procedure `java.lang.Class` `getSupportedType`(`org.joda.time.convert.ReadableInstantConverter` v1 @kind this) @signature `Lorg/joda/time/convert/ReadableInstantConverter;.getSupportedType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bacc8.  v0:= constclass @type ^`org.joda.time.ReadableInstant` @kind object;
  #L3baccc.  return v0 @kind object;
}
