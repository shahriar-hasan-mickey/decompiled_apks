record `org.joda.time.convert.StringConverter` @kind class @AccessFlag  extends `org.joda.time.convert.AbstractConverter` @kind class, `org.joda.time.convert.InstantConverter` @kind interface, `org.joda.time.convert.PartialConverter` @kind interface, `org.joda.time.convert.DurationConverter` @kind interface, `org.joda.time.convert.PeriodConverter` @kind interface, `org.joda.time.convert.IntervalConverter` @kind interface {
}
global `org.joda.time.convert.StringConverter` `@@org.joda.time.convert.StringConverter.INSTANCE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/convert/StringConverter;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3bb2f8.  v0:= new `org.joda.time.convert.StringConverter`;
  #L3bb2fc.  call `<init>`(v0) @signature `Lorg/joda/time/convert/StringConverter;.<init>:()V` @kind direct;
  #L3bb302.  `@@org.joda.time.convert.StringConverter.INSTANCE` @type ^`org.joda.time.convert.StringConverter` := v0 @kind object;
  #L3bb306.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.convert.StringConverter` v0 @kind this) @signature `Lorg/joda/time/convert/StringConverter;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3bb318.  call `<init>`(v0) @signature `Lorg/joda/time/convert/AbstractConverter;.<init>:()V` @kind direct;
  #L3bb31e.  return @kind void;
}
procedure `long` `getDurationMillis`(`org.joda.time.convert.StringConverter` v13 @kind this, `java.lang.Object` v14 @kind object) @signature `Lorg/joda/time/convert/StringConverter;.getDurationMillis:(Ljava/lang/Object;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3bb09c.  v14:= (`java.lang.String`) v14 @kind object;
  #L3bb0a0.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3bb0a6.  v0:= temp;
  #L3bb0a8.  v1:= 34I;
  #L3bb0ac.  v2:= "Invalid format: \"" @kind object;
  #L3bb0b0.  v3:= 4I;
  #L3bb0b2.  if v0 < v3 then goto L3bb286;
  #L3bb0b6.  v3:= 0I;
  #L3bb0b8.  call temp:= `charAt`(v14, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3bb0be.  v4:= temp;
  #L3bb0c0.  v5:= 80I;
  #L3bb0c4.  if v4 == v5 then goto L3bb0d8;
  #L3bb0c8.  call temp:= `charAt`(v14, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3bb0ce.  v4:= temp;
  #L3bb0d0.  v5:= 112I;
  #L3bb0d4.  if v4 != v5 then goto L3bb286;
  #L3bb0d8.  v4:= 1I;
  #L3bb0da.  call temp:= `charAt`(v14, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3bb0e0.  v5:= temp;
  #L3bb0e2.  v6:= 84I;
  #L3bb0e6.  if v5 == v6 then goto L3bb0fa;
  #L3bb0ea.  call temp:= `charAt`(v14, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3bb0f0.  v5:= temp;
  #L3bb0f2.  v6:= 116I;
  #L3bb0f6.  if v5 != v6 then goto L3bb286;
  #L3bb0fa.  v0:= v0 - v4 @kind int;
  #L3bb0fc.  call temp:= `charAt`(v14, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3bb102.  v5:= temp;
  #L3bb104.  v6:= 83I;
  #L3bb108.  if v5 == v6 then goto L3bb11c;
  #L3bb10c.  call temp:= `charAt`(v14, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3bb112.  v5:= temp;
  #L3bb114.  v6:= 115I;
  #L3bb118.  if v5 != v6 then goto L3bb286;
  #L3bb11c.  v5:= 2I;
  #L3bb11e.  call temp:= `substring`(v14, v5, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3bb124.  v0:= temp @kind object;
  #L3bb126.  v5:= -1I;
  #L3bb128.  v6:= 0I;
  #L3bb12a.  v7:= 0I;
  #L3bb12c.  v8:= -1I;
  #L3bb12e.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3bb134.  v9:= temp;
  #L3bb136.  if v6 >= v9 then goto L3bb1c4;
  #L3bb13a.  call temp:= `charAt`(v0, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3bb140.  v9:= temp;
  #L3bb142.  v10:= 48I;
  #L3bb146.  if v9 < v10 then goto L3bb15c;
  #L3bb14a.  call temp:= `charAt`(v0, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3bb150.  v9:= temp;
  #L3bb152.  v10:= 57I;
  #L3bb156.  if v9 > v10 then goto L3bb15c;
  #L3bb15a.  goto L3bb18e;
  #L3bb15c.  if v6 != 0 then goto L3bb174;
  #L3bb160.  call temp:= `charAt`(v0, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3bb166.  v9:= temp;
  #L3bb168.  v10:= 45I;
  #L3bb16c.  if v9 != v10 then goto L3bb174;
  #L3bb170.  v7:= 1I;
  #L3bb172.  goto L3bb18e;
  #L3bb174.  if v6 <= v7 then goto L3bb194;
  #L3bb178.  call temp:= `charAt`(v0, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3bb17e.  v9:= temp;
  #L3bb180.  v10:= 46I;
  #L3bb184.  if v9 != v10 then goto L3bb194;
  #L3bb188.  if v8 != v5 then goto L3bb194;
  #L3bb18c.  v8:= v6;
  #L3bb18e.  v6:= v6 + 1;
  #L3bb192.  goto L3bb12e;
  #L3bb194.  v0:= new `java.lang.IllegalArgumentException`;
  #L3bb198.  v3:= new `java.lang.StringBuilder`;
  #L3bb19c.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bb1a2.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb1a8.  call temp:= `append`(v3, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb1ae.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb1b4.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bb1ba.  v14:= temp @kind object;
  #L3bb1bc.  call `<init>`(v0, v14) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bb1c2.  throw v0;
  #L3bb1c4.  v1:= 0L;
  #L3bb1c8.  if v8 <= 0 then goto L3bb22a;
  #L3bb1cc.  call temp:= `substring`(v0, v7, v8) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3bb1d2.  v14:= temp @kind object;
  #L3bb1d4.  call temp:= `parseLong`(v14) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L3bb1da.  v1:= temp @kind wide;
  #L3bb1dc.  v8:= v8 + v4 @kind int;
  #L3bb1de.  call temp:= `substring`(v0, v8) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3bb1e4.  v14:= temp @kind object;
  #L3bb1e6.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3bb1ec.  v0:= temp;
  #L3bb1ee.  v4:= 3I;
  #L3bb1f0.  if v0 == v4 then goto L3bb21e;
  #L3bb1f4.  v0:= new `java.lang.StringBuilder`;
  #L3bb1f8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bb1fe.  call temp:= `append`(v0, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb204.  v14:= "000" @kind object;
  #L3bb208.  call temp:= `append`(v0, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb20e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bb214.  v14:= temp @kind object;
  #L3bb216.  call temp:= `substring`(v14, v3, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3bb21c.  v14:= temp @kind object;
  #L3bb21e.  call temp:= `parseInt`(v14) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L3bb224.  v14:= temp;
  #L3bb226.  v3:= (`long`) v14 @kind i2l;
  #L3bb228.  goto L3bb256;
  #L3bb22a.  if v7 == 0 then goto L3bb248;
  #L3bb22e.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3bb234.  v14:= temp;
  #L3bb236.  call temp:= `substring`(v0, v7, v14) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3bb23c.  v14:= temp @kind object;
  #L3bb23e.  call temp:= `parseLong`(v14) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L3bb244.  v3:= temp @kind wide;
  #L3bb246.  goto L3bb250;
  #L3bb248.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L3bb24e.  v3:= temp @kind wide;
  #L3bb250.  v11:= v1 @kind wide;
  #L3bb252.  v1:= v3 @kind wide;
  #L3bb254.  v3:= v11 @kind wide;
  #L3bb256.  v14:= 1000I;
  #L3bb25a.  if v7 == 0 then goto L3bb274;
  #L3bb25e.  v0:= -v1 @kind long;
  #L3bb260.  call temp:= `safeMultiply`(v0, v14) @signature `Lorg/joda/time/field/FieldUtils;.safeMultiply:(JI)J` @kind static;
  #L3bb266.  v0:= temp @kind wide;
  #L3bb268.  v2:= -v3 @kind long;
  #L3bb26a.  call temp:= `safeAdd`(v0, v2) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(JJ)J` @kind static;
  #L3bb270.  v0:= temp @kind wide;
  #L3bb272.  return v0 @kind wide;
  #L3bb274.  call temp:= `safeMultiply`(v1, v14) @signature `Lorg/joda/time/field/FieldUtils;.safeMultiply:(JI)J` @kind static;
  #L3bb27a.  v0:= temp @kind wide;
  #L3bb27c.  call temp:= `safeAdd`(v0, v3) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(JJ)J` @kind static;
  #L3bb282.  v0:= temp @kind wide;
  #L3bb284.  return v0 @kind wide;
  #L3bb286.  v0:= new `java.lang.IllegalArgumentException`;
  #L3bb28a.  v3:= new `java.lang.StringBuilder`;
  #L3bb28e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bb294.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb29a.  call temp:= `append`(v3, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb2a0.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb2a6.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bb2ac.  v14:= temp @kind object;
  #L3bb2ae.  call `<init>`(v0, v14) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bb2b4.  throw v0;
}
procedure `long` `getInstantMillis`(`org.joda.time.convert.StringConverter` v1 @kind this, `java.lang.Object` v2 @kind object, `org.joda.time.Chronology` v3 @kind object) @signature `Lorg/joda/time/convert/StringConverter;.getInstantMillis:(Ljava/lang/Object;Lorg/joda/time/Chronology;)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bb2c8.  v2:= (`java.lang.String`) v2 @kind object;
  #L3bb2cc.  call temp:= `dateTimeParser`() @signature `Lorg/joda/time/format/ISODateTimeFormat;.dateTimeParser:()Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3bb2d2.  v0:= temp @kind object;
  #L3bb2d4.  call temp:= `withChronology`(v0, v3) @signature `Lorg/joda/time/format/DateTimeFormatter;.withChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;` @kind virtual;
  #L3bb2da.  v3:= temp @kind object;
  #L3bb2dc.  call temp:= `parseMillis`(v3, v2) @signature `Lorg/joda/time/format/DateTimeFormatter;.parseMillis:(Ljava/lang/String;)J` @kind virtual;
  #L3bb2e2.  v2:= temp @kind wide;
  #L3bb2e4.  return v2 @kind wide;
}
procedure `int`[] `getPartialValues`(`org.joda.time.convert.StringConverter` v2 @kind this, `org.joda.time.ReadablePartial` v3 @kind object, `java.lang.Object` v4 @kind object, `org.joda.time.Chronology` v5 @kind object, `org.joda.time.format.DateTimeFormatter` v6 @kind object) @signature `Lorg/joda/time/convert/StringConverter;.getPartialValues:(Lorg/joda/time/ReadablePartial;Ljava/lang/Object;Lorg/joda/time/Chronology;Lorg/joda/time/format/DateTimeFormatter;)[I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3bb038.  call temp:= `getZone`(v6) @signature `Lorg/joda/time/format/DateTimeFormatter;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3bb03e.  v0:= temp @kind object;
  #L3bb040.  if v0 == 0 then goto L3bb054;
  #L3bb044.  call temp:= `getZone`(v6) @signature `Lorg/joda/time/format/DateTimeFormatter;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3bb04a.  v0:= temp @kind object;
  #L3bb04c.  call temp:= `withZone`(v5, v0) @signature `Lorg/joda/time/Chronology;.withZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @kind virtual;
  #L3bb052.  v5:= temp @kind object;
  #L3bb054.  call temp:= `withChronology`(v6, v5) @signature `Lorg/joda/time/format/DateTimeFormatter;.withChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;` @kind virtual;
  #L3bb05a.  v6:= temp @kind object;
  #L3bb05c.  v4:= (`java.lang.String`) v4 @kind object;
  #L3bb060.  call temp:= `parseMillis`(v6, v4) @signature `Lorg/joda/time/format/DateTimeFormatter;.parseMillis:(Ljava/lang/String;)J` @kind virtual;
  #L3bb066.  v0:= temp @kind wide;
  #L3bb068.  call temp:= `get`(v5, v3, v0) @signature `Lorg/joda/time/Chronology;.get:(Lorg/joda/time/ReadablePartial;J)[I` @kind virtual;
  #L3bb06e.  v3:= temp @kind object;
  #L3bb070.  return v3 @kind object;
}
procedure `java.lang.Class` `getSupportedType`(`org.joda.time.convert.StringConverter` v1 @kind this) @signature `Lorg/joda/time/convert/StringConverter;.getSupportedType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bb084.  v0:= constclass @type ^`java.lang.String` @kind object;
  #L3bb088.  return v0 @kind object;
}
procedure `void` `setInto`(`org.joda.time.convert.StringConverter` v17 @kind this, `org.joda.time.ReadWritableInterval` v18 @kind object, `java.lang.Object` v19 @kind object, `org.joda.time.Chronology` v20 @kind object) @signature `Lorg/joda/time/convert/StringConverter;.setInto:(Lorg/joda/time/ReadWritableInterval;Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L3bb330.  v0:= v17 @kind object;
  #L3bb334.  v1:= v18 @kind object;
  #L3bb338.  v2:= v20 @kind object;
  #L3bb33c.  v3:= v19 @kind object;
  #L3bb340.  v3:= (`java.lang.String`) v3 @kind object;
  #L3bb344.  v4:= 47I;
  #L3bb348.  call temp:= `indexOf`(v3, v4) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L3bb34e.  v4:= temp;
  #L3bb350.  if v4 < 0 then goto L3bb4fa;
  #L3bb354.  v5:= 0I;
  #L3bb356.  call temp:= `substring`(v3, v5, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3bb35c.  v6:= temp @kind object;
  #L3bb35e.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3bb364.  v7:= temp;
  #L3bb366.  v8:= "Format invalid: " @kind object;
  #L3bb36a.  if v7 <= 0 then goto L3bb4d0;
  #L3bb36e.  v7:= 1I;
  #L3bb370.  v4:= v4 + v7 @kind int;
  #L3bb372.  call temp:= `substring`(v3, v4) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3bb378.  v4:= temp @kind object;
  #L3bb37a.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3bb380.  v9:= temp;
  #L3bb382.  if v9 <= 0 then goto L3bb4a6;
  #L3bb386.  call temp:= `dateTimeParser`() @signature `Lorg/joda/time/format/ISODateTimeFormat;.dateTimeParser:()Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3bb38c.  v8:= temp @kind object;
  #L3bb38e.  call temp:= `withChronology`(v8, v2) @signature `Lorg/joda/time/format/DateTimeFormatter;.withChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;` @kind virtual;
  #L3bb394.  v8:= temp @kind object;
  #L3bb396.  call temp:= `standard`() @signature `Lorg/joda/time/format/ISOPeriodFormat;.standard:()Lorg/joda/time/format/PeriodFormatter;` @kind static;
  #L3bb39c.  v9:= temp @kind object;
  #L3bb39e.  v10:= 0L;
  #L3bb3a2.  call temp:= `charAt`(v6, v5) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3bb3a8.  v12:= temp;
  #L3bb3aa.  v13:= 112I;
  #L3bb3ae.  v14:= 80I;
  #L3bb3b2.  v15:= 0I;
  #L3bb3b4.  if v12 == v14 then goto L3bb3e2;
  #L3bb3b8.  if v12 != v13 then goto L3bb3be;
  #L3bb3bc.  goto L3bb3e2;
  #L3bb3be.  call temp:= `parseDateTime`(v8, v6) @signature `Lorg/joda/time/format/DateTimeFormatter;.parseDateTime:(Ljava/lang/String;)Lorg/joda/time/DateTime;` @kind virtual;
  #L3bb3c4.  v6:= temp @kind object;
  #L3bb3c6.  call temp:= `getMillis`(v6) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3bb3cc.  v10:= temp @kind wide;
  #L3bb3ce.  call temp:= `getChronology`(v6) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3bb3d4.  v6:= temp @kind object;
  #L3bb3d6.  v16:= v15 @kind object;
  #L3bb3da.  v15:= v6 @kind object;
  #L3bb3dc.  v6:= v16 @kind object;
  #L3bb3e0.  goto L3bb3fa;
  #L3bb3e2.  call temp:= `getPeriodType`(v0, v6) @signature `Lorg/joda/time/convert/AbstractConverter;.getPeriodType:(Ljava/lang/Object;)Lorg/joda/time/PeriodType;` @kind virtual;
  #L3bb3e8.  v12:= temp @kind object;
  #L3bb3ea.  call temp:= `withParseType`(v9, v12) @signature `Lorg/joda/time/format/PeriodFormatter;.withParseType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/format/PeriodFormatter;` @kind virtual;
  #L3bb3f0.  v12:= temp @kind object;
  #L3bb3f2.  call temp:= `parsePeriod`(v12, v6) @signature `Lorg/joda/time/format/PeriodFormatter;.parsePeriod:(Ljava/lang/String;)Lorg/joda/time/Period;` @kind virtual;
  #L3bb3f8.  v6:= temp @kind object;
  #L3bb3fa.  call temp:= `charAt`(v4, v5) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3bb400.  v5:= temp;
  #L3bb402.  if v5 == v14 then goto L3bb440;
  #L3bb406.  if v5 != v13 then goto L3bb40c;
  #L3bb40a.  goto L3bb440;
  #L3bb40c.  call temp:= `parseDateTime`(v8, v4) @signature `Lorg/joda/time/format/DateTimeFormatter;.parseDateTime:(Ljava/lang/String;)Lorg/joda/time/DateTime;` @kind virtual;
  #L3bb412.  v3:= temp @kind object;
  #L3bb414.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3bb41a.  v4:= temp @kind wide;
  #L3bb41c.  if v15 == 0 then goto L3bb422;
  #L3bb420.  goto L3bb42a;
  #L3bb422.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3bb428.  v15:= temp @kind object;
  #L3bb42a.  if v2 == 0 then goto L3bb430;
  #L3bb42e.  v15:= v2 @kind object;
  #L3bb430.  if v6 == 0 then goto L3bb46a;
  #L3bb434.  v2:= -1I;
  #L3bb436.  call temp:= `add`(v15, v6, v4, v2) @signature `Lorg/joda/time/Chronology;.add:(Lorg/joda/time/ReadablePeriod;JI)J` @kind virtual;
  #L3bb43c.  v10:= temp @kind wide;
  #L3bb43e.  goto L3bb46a;
  #L3bb440.  if v6 != 0 then goto L3bb478;
  #L3bb444.  call temp:= `getPeriodType`(v0, v4) @signature `Lorg/joda/time/convert/AbstractConverter;.getPeriodType:(Ljava/lang/Object;)Lorg/joda/time/PeriodType;` @kind virtual;
  #L3bb44a.  v3:= temp @kind object;
  #L3bb44c.  call temp:= `withParseType`(v9, v3) @signature `Lorg/joda/time/format/PeriodFormatter;.withParseType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/format/PeriodFormatter;` @kind virtual;
  #L3bb452.  v3:= temp @kind object;
  #L3bb454.  call temp:= `parsePeriod`(v3, v4) @signature `Lorg/joda/time/format/PeriodFormatter;.parsePeriod:(Ljava/lang/String;)Lorg/joda/time/Period;` @kind virtual;
  #L3bb45a.  v3:= temp @kind object;
  #L3bb45c.  if v2 == 0 then goto L3bb462;
  #L3bb460.  v15:= v2 @kind object;
  #L3bb462.  call temp:= `add`(v15, v3, v10, v7) @signature `Lorg/joda/time/Chronology;.add:(Lorg/joda/time/ReadablePeriod;JI)J` @kind virtual;
  #L3bb468.  v4:= temp @kind wide;
  #L3bb46a.  call `setInterval`(v1, v10, v4) @signature `Lorg/joda/time/ReadWritableInterval;.setInterval:(JJ)V` @kind interface;
  #L3bb470.  call `setChronology`(v1, v15) @signature `Lorg/joda/time/ReadWritableInterval;.setChronology:(Lorg/joda/time/Chronology;)V` @kind interface;
  #L3bb476.  return @kind void;
  #L3bb478.  v1:= new `java.lang.IllegalArgumentException`;
  #L3bb47c.  v2:= new `java.lang.StringBuilder`;
  #L3bb480.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bb486.  v4:= "Interval composed of two durations: " @kind object;
  #L3bb48a.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb490.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb496.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bb49c.  v2:= temp @kind object;
  #L3bb49e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bb4a4.  throw v1;
  #L3bb4a6.  v1:= new `java.lang.IllegalArgumentException`;
  #L3bb4aa.  v2:= new `java.lang.StringBuilder`;
  #L3bb4ae.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bb4b4.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb4ba.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb4c0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bb4c6.  v2:= temp @kind object;
  #L3bb4c8.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bb4ce.  throw v1;
  #L3bb4d0.  v1:= new `java.lang.IllegalArgumentException`;
  #L3bb4d4.  v2:= new `java.lang.StringBuilder`;
  #L3bb4d8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bb4de.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb4e4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb4ea.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bb4f0.  v2:= temp @kind object;
  #L3bb4f2.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bb4f8.  throw v1;
  #L3bb4fa.  v1:= new `java.lang.IllegalArgumentException`;
  #L3bb4fe.  v2:= new `java.lang.StringBuilder`;
  #L3bb502.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bb508.  v4:= "Format requires a '/' separator: " @kind object;
  #L3bb50c.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb512.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb518.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bb51e.  v2:= temp @kind object;
  #L3bb520.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bb526.  throw v1;
}
procedure `void` `setInto`(`org.joda.time.convert.StringConverter` v2 @kind this, `org.joda.time.ReadWritablePeriod` v3 @kind object, `java.lang.Object` v4 @kind object, `org.joda.time.Chronology` v5 @kind object) @signature `Lorg/joda/time/convert/StringConverter;.setInto:(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3bb538.  v4:= (`java.lang.String`) v4 @kind object;
  #L3bb53c.  call temp:= `standard`() @signature `Lorg/joda/time/format/ISOPeriodFormat;.standard:()Lorg/joda/time/format/PeriodFormatter;` @kind static;
  #L3bb542.  v5:= temp @kind object;
  #L3bb544.  call `clear`(v3) @signature `Lorg/joda/time/ReadWritablePeriod;.clear:()V` @kind interface;
  #L3bb54a.  v0:= 0I;
  #L3bb54c.  call temp:= `parseInto`(v5, v3, v4, v0) @signature `Lorg/joda/time/format/PeriodFormatter;.parseInto:(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/String;I)I` @kind virtual;
  #L3bb552.  v0:= temp;
  #L3bb554.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3bb55a.  v1:= temp;
  #L3bb55c.  if v0 >= v1 then goto L3bb5b2;
  #L3bb560.  if v0 >= 0 then goto L3bb57a;
  #L3bb564.  call temp:= `getPeriodType`(v3) @signature `Lorg/joda/time/ReadablePeriod;.getPeriodType:()Lorg/joda/time/PeriodType;` @kind interface;
  #L3bb56a.  v3:= temp @kind object;
  #L3bb56c.  call temp:= `withParseType`(v5, v3) @signature `Lorg/joda/time/format/PeriodFormatter;.withParseType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/format/PeriodFormatter;` @kind virtual;
  #L3bb572.  v3:= temp @kind object;
  #L3bb574.  call temp:= `parseMutablePeriod`(v3, v4) @signature `Lorg/joda/time/format/PeriodFormatter;.parseMutablePeriod:(Ljava/lang/String;)Lorg/joda/time/MutablePeriod;` @kind virtual;
  #L3bb57a.  v3:= new `java.lang.IllegalArgumentException`;
  #L3bb57e.  v5:= new `java.lang.StringBuilder`;
  #L3bb582.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bb588.  v0:= "Invalid format: \"" @kind object;
  #L3bb58c.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb592.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb598.  v4:= 34I;
  #L3bb59c.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bb5a2.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bb5a8.  v4:= temp @kind object;
  #L3bb5aa.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bb5b0.  throw v3;
  #L3bb5b2.  return @kind void;
}
