record `org.joda.time.convert.CalendarConverter` @kind class @AccessFlag FINAL extends `org.joda.time.convert.AbstractConverter` @kind class, `org.joda.time.convert.InstantConverter` @kind interface, `org.joda.time.convert.PartialConverter` @kind interface {
}
global `org.joda.time.convert.CalendarConverter` `@@org.joda.time.convert.CalendarConverter.INSTANCE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/convert/CalendarConverter;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3b9d2c.  v0:= new `org.joda.time.convert.CalendarConverter`;
  #L3b9d30.  call `<init>`(v0) @signature `Lorg/joda/time/convert/CalendarConverter;.<init>:()V` @kind direct;
  #L3b9d36.  `@@org.joda.time.convert.CalendarConverter.INSTANCE` @type ^`org.joda.time.convert.CalendarConverter` := v0 @kind object;
  #L3b9d3a.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.convert.CalendarConverter` v0 @kind this) @signature `Lorg/joda/time/convert/CalendarConverter;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3b9d4c.  call `<init>`(v0) @signature `Lorg/joda/time/convert/AbstractConverter;.<init>:()V` @kind direct;
  #L3b9d52.  return @kind void;
}
procedure `org.joda.time.Chronology` `getChronology`(`org.joda.time.convert.CalendarConverter` v0 @kind this, `java.lang.Object` v1 @kind object, `org.joda.time.Chronology` v2 @kind object) @signature `Lorg/joda/time/convert/CalendarConverter;.getChronology:(Ljava/lang/Object;Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;

  #L3b9c3c.  if v2 == 0 then goto L3b9c42;
  #L3b9c40.  return v2 @kind object;
  #L3b9c42.  v1:= (`java.util.Calendar`) v1 @kind object;
  #L3b9c46.  call temp:= `getTimeZone`(v1) @signature `Ljava/util/Calendar;.getTimeZone:()Ljava/util/TimeZone;` @kind virtual;
  #L3b9c4c.  v2:= temp @kind object;
  #L3b9c4e.  call temp:= `forTimeZone`(v2) @signature `Lorg/joda/time/DateTimeZone;.forTimeZone:(Ljava/util/TimeZone;)Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b9c54.  v2:= temp @kind object;
  #L3b9c56.  goto L3b9c60;
  #L3b9c58.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b9c5e.  v2:= temp @kind object;
  #L3b9c60.  call temp:= `getChronology`(v0, v1, v2) @signature `Lorg/joda/time/convert/CalendarConverter;.getChronology:(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @kind virtual;
  #L3b9c66.  v1:= temp @kind object;
  #L3b9c68.  return v1 @kind object;
  catch `java.lang.IllegalArgumentException` @[L3b9c46..L3b9c56] goto L3b9c58;
}
procedure `org.joda.time.Chronology` `getChronology`(`org.joda.time.convert.CalendarConverter` v4 @kind this, `java.lang.Object` v5 @kind object, `org.joda.time.DateTimeZone` v6 @kind object) @signature `Lorg/joda/time/convert/CalendarConverter;.getChronology:(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b9c8c.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3b9c92.  v0:= temp @kind object;
  #L3b9c94.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3b9c9a.  v0:= temp @kind object;
  #L3b9c9c.  v1:= ".BuddhistCalendar" @kind object;
  #L3b9ca0.  call temp:= `endsWith`(v0, v1) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3b9ca6.  v0:= temp;
  #L3b9ca8.  if v0 == 0 then goto L3b9cb6;
  #L3b9cac.  call temp:= `getInstance`(v6) @signature `Lorg/joda/time/chrono/BuddhistChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/BuddhistChronology;` @kind static;
  #L3b9cb2.  v5:= temp @kind object;
  #L3b9cb4.  return v5 @kind object;
  #L3b9cb6.  v0:= instanceof @variable v5 @type ^`java.util.GregorianCalendar` @kind boolean;
  #L3b9cba.  if v0 == 0 then goto L3b9d10;
  #L3b9cbe.  v5:= (`java.util.GregorianCalendar`) v5 @kind object;
  #L3b9cc2.  call temp:= `getGregorianChange`(v5) @signature `Ljava/util/GregorianCalendar;.getGregorianChange:()Ljava/util/Date;` @kind virtual;
  #L3b9cc8.  v5:= temp @kind object;
  #L3b9cca.  call temp:= `getTime`(v5) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L3b9cd0.  v0:= temp @kind wide;
  #L3b9cd2.  v2:= -9223372036854775808L;
  #L3b9cd6.  v5:= lcmp(v0, v2);
  #L3b9cda.  if v5 != 0 then goto L3b9ce8;
  #L3b9cde.  call temp:= `getInstance`(v6) @signature `Lorg/joda/time/chrono/GregorianChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/GregorianChronology;` @kind static;
  #L3b9ce4.  v5:= temp @kind object;
  #L3b9ce6.  return v5 @kind object;
  #L3b9ce8.  v2:= 9223372036854775807L;
  #L3b9cf2.  v5:= lcmp(v0, v2);
  #L3b9cf6.  if v5 != 0 then goto L3b9d04;
  #L3b9cfa.  call temp:= `getInstance`(v6) @signature `Lorg/joda/time/chrono/JulianChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/JulianChronology;` @kind static;
  #L3b9d00.  v5:= temp @kind object;
  #L3b9d02.  return v5 @kind object;
  #L3b9d04.  v5:= 4I;
  #L3b9d06.  call temp:= `getInstance`(v6, v0, v5) @signature `Lorg/joda/time/chrono/GJChronology;.getInstance:(Lorg/joda/time/DateTimeZone;JI)Lorg/joda/time/chrono/GJChronology;` @kind static;
  #L3b9d0c.  v5:= temp @kind object;
  #L3b9d0e.  return v5 @kind object;
  #L3b9d10.  call temp:= `getInstance`(v6) @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3b9d16.  v5:= temp @kind object;
  #L3b9d18.  return v5 @kind object;
}
procedure `long` `getInstantMillis`(`org.joda.time.convert.CalendarConverter` v0 @kind this, `java.lang.Object` v1 @kind object, `org.joda.time.Chronology` v2 @kind object) @signature `Lorg/joda/time/convert/CalendarConverter;.getInstantMillis:(Ljava/lang/Object;Lorg/joda/time/Chronology;)J` @AccessFlag PUBLIC {
    temp;

  #L3b9c14.  v1:= (`java.util.Calendar`) v1 @kind object;
  #L3b9c18.  call temp:= `getTime`(v1) @signature `Ljava/util/Calendar;.getTime:()Ljava/util/Date;` @kind virtual;
  #L3b9c1e.  v1:= temp @kind object;
  #L3b9c20.  call temp:= `getTime`(v1) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L3b9c26.  v1:= temp @kind wide;
  #L3b9c28.  return v1 @kind wide;
}
procedure `java.lang.Class` `getSupportedType`(`org.joda.time.convert.CalendarConverter` v1 @kind this) @signature `Lorg/joda/time/convert/CalendarConverter;.getSupportedType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b9bfc.  v0:= constclass @type ^`java.util.Calendar` @kind object;
  #L3b9c00.  return v0 @kind object;
}
