record `org.joda.time.convert.ReadableIntervalConverter` @kind class @AccessFlag  extends `org.joda.time.convert.AbstractConverter` @kind class, `org.joda.time.convert.IntervalConverter` @kind interface, `org.joda.time.convert.DurationConverter` @kind interface, `org.joda.time.convert.PeriodConverter` @kind interface {
}
global `org.joda.time.convert.ReadableIntervalConverter` `@@org.joda.time.convert.ReadableIntervalConverter.INSTANCE` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/convert/ReadableIntervalConverter;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3badfc.  v0:= new `org.joda.time.convert.ReadableIntervalConverter`;
  #L3bae00.  call `<init>`(v0) @signature `Lorg/joda/time/convert/ReadableIntervalConverter;.<init>:()V` @kind direct;
  #L3bae06.  `@@org.joda.time.convert.ReadableIntervalConverter.INSTANCE` @type ^`org.joda.time.convert.ReadableIntervalConverter` := v0 @kind object;
  #L3bae0a.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.convert.ReadableIntervalConverter` v0 @kind this) @signature `Lorg/joda/time/convert/ReadableIntervalConverter;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3bae1c.  call `<init>`(v0) @signature `Lorg/joda/time/convert/AbstractConverter;.<init>:()V` @kind direct;
  #L3bae22.  return @kind void;
}
procedure `long` `getDurationMillis`(`org.joda.time.convert.ReadableIntervalConverter` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lorg/joda/time/convert/ReadableIntervalConverter;.getDurationMillis:(Ljava/lang/Object;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3baddc.  v3:= (`org.joda.time.ReadableInterval`) v3 @kind object;
  #L3bade0.  call temp:= `toDurationMillis`(v3) @signature `Lorg/joda/time/ReadableInterval;.toDurationMillis:()J` @kind interface;
  #L3bade6.  v0:= temp @kind wide;
  #L3bade8.  return v0 @kind wide;
}
procedure `java.lang.Class` `getSupportedType`(`org.joda.time.convert.ReadableIntervalConverter` v1 @kind this) @signature `Lorg/joda/time/convert/ReadableIntervalConverter;.getSupportedType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3badc4.  v0:= constclass @type ^`org.joda.time.ReadableInterval` @kind object;
  #L3badc8.  return v0 @kind object;
}
procedure `boolean` `isReadableInterval`(`org.joda.time.convert.ReadableIntervalConverter` v0 @kind this, `java.lang.Object` v1 @kind object, `org.joda.time.Chronology` v2 @kind object) @signature `Lorg/joda/time/convert/ReadableIntervalConverter;.isReadableInterval:(Ljava/lang/Object;Lorg/joda/time/Chronology;)Z` @AccessFlag PUBLIC {
    temp;

  #L3badb0.  v1:= 1I;
  #L3badb2.  return v1;
}
procedure `void` `setInto`(`org.joda.time.convert.ReadableIntervalConverter` v0 @kind this, `org.joda.time.ReadWritableInterval` v1 @kind object, `java.lang.Object` v2 @kind object, `org.joda.time.Chronology` v3 @kind object) @signature `Lorg/joda/time/convert/ReadableIntervalConverter;.setInto:(Lorg/joda/time/ReadWritableInterval;Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC {
    temp;

  #L3bae34.  v2:= (`org.joda.time.ReadableInterval`) v2 @kind object;
  #L3bae38.  call `setInterval`(v1, v2) @signature `Lorg/joda/time/ReadWritableInterval;.setInterval:(Lorg/joda/time/ReadableInterval;)V` @kind interface;
  #L3bae3e.  if v3 == 0 then goto L3bae4a;
  #L3bae42.  call `setChronology`(v1, v3) @signature `Lorg/joda/time/ReadWritableInterval;.setChronology:(Lorg/joda/time/Chronology;)V` @kind interface;
  #L3bae48.  goto L3bae58;
  #L3bae4a.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/ReadableInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3bae50.  v2:= temp @kind object;
  #L3bae52.  call `setChronology`(v1, v2) @signature `Lorg/joda/time/ReadWritableInterval;.setChronology:(Lorg/joda/time/Chronology;)V` @kind interface;
  #L3bae58.  return @kind void;
}
procedure `void` `setInto`(`org.joda.time.convert.ReadableIntervalConverter` v6 @kind this, `org.joda.time.ReadWritablePeriod` v7 @kind object, `java.lang.Object` v8 @kind object, `org.joda.time.Chronology` v9 @kind object) @signature `Lorg/joda/time/convert/ReadableIntervalConverter;.setInto:(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3bae6c.  v8:= (`org.joda.time.ReadableInterval`) v8 @kind object;
  #L3bae70.  if v9 == 0 then goto L3bae76;
  #L3bae74.  goto L3bae7e;
  #L3bae76.  call temp:= `getIntervalChronology`(v8) @signature `Lorg/joda/time/DateTimeUtils;.getIntervalChronology:(Lorg/joda/time/ReadableInterval;)Lorg/joda/time/Chronology;` @kind static;
  #L3bae7c.  v9:= temp @kind object;
  #L3bae7e.  v0:= v9 @kind object;
  #L3bae80.  call temp:= `getStartMillis`(v8) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3bae86.  v2:= temp @kind wide;
  #L3bae88.  call temp:= `getEndMillis`(v8) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3bae8e.  v4:= temp @kind wide;
  #L3bae90.  v1:= v7 @kind object;
  #L3bae92.  call temp:= `get`(v0, v1, v2, v4) @signature `Lorg/joda/time/Chronology;.get:(Lorg/joda/time/ReadablePeriod;JJ)[I` @kind virtual;
  #L3bae98.  v8:= temp @kind object;
  #L3bae9a.  v9:= 0I;
  #L3bae9c.  v0:= length @variable v8;
  #L3bae9e.  if v9 >= v0 then goto L3baeb2;
  #L3baea2.  v0:= v8[v9];
  #L3baea6.  call `setValue`(v7, v9, v0) @signature `Lorg/joda/time/ReadWritablePeriod;.setValue:(II)V` @kind interface;
  #L3baeac.  v9:= v9 + 1;
  #L3baeb0.  goto L3bae9c;
  #L3baeb2.  return @kind void;
}
