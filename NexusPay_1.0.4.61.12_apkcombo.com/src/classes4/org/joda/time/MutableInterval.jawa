record `org.joda.time.MutableInterval` @kind class @AccessFlag PUBLIC extends `org.joda.time.base.BaseInterval` @kind class, `org.joda.time.ReadWritableInterval` @kind interface, `java.lang.Cloneable` @kind interface, `java.io.Serializable` @kind interface {
}
global `long` `@@org.joda.time.MutableInterval.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.MutableInterval` v6 @kind this) @signature `Lorg/joda/time/MutableInterval;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a3c34.  v1:= 0L;
  #L3a3c38.  v3:= 0L;
  #L3a3c3c.  v5:= 0I;
  #L3a3c3e.  v0:= v6 @kind object;
  #L3a3c40.  call `<init>`(v0, v1, v3, v5) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L3a3c46.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableInterval` v6 @kind this, `long` v7 , `long` v9 ) @signature `Lorg/joda/time/MutableInterval;.<init>:(JJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a3c8c.  v5:= 0I;
  #L3a3c8e.  v0:= v6 @kind object;
  #L3a3c90.  v1:= v7 @kind wide;
  #L3a3c92.  v3:= v9 @kind wide;
  #L3a3c94.  call `<init>`(v0, v1, v3, v5) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L3a3c9a.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableInterval` v0 @kind this, `long` v1 , `long` v3 , `org.joda.time.Chronology` v5 @kind object) @signature `Lorg/joda/time/MutableInterval;.<init>:(JJLorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a3cac.  call `<init>`(v0, v1, v3, v5) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L3a3cb2.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableInterval` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/joda/time/MutableInterval;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a3c58.  v0:= 0I;
  #L3a3c5a.  call `<init>`(v1, v2, v0) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @kind direct;
  #L3a3c60.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableInterval` v0 @kind this, `java.lang.Object` v1 @kind object, `org.joda.time.Chronology` v2 @kind object) @signature `Lorg/joda/time/MutableInterval;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a3c74.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @kind direct;
  #L3a3c7a.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableInterval` v0 @kind this, `org.joda.time.ReadableDuration` v1 @kind object, `org.joda.time.ReadableInstant` v2 @kind object) @signature `Lorg/joda/time/MutableInterval;.<init>:(Lorg/joda/time/ReadableDuration;Lorg/joda/time/ReadableInstant;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a3cc4.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Lorg/joda/time/ReadableDuration;Lorg/joda/time/ReadableInstant;)V` @kind direct;
  #L3a3cca.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableInterval` v0 @kind this, `org.joda.time.ReadableInstant` v1 @kind object, `org.joda.time.ReadableDuration` v2 @kind object) @signature `Lorg/joda/time/MutableInterval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableDuration;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a3cdc.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableDuration;)V` @kind direct;
  #L3a3ce2.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableInterval` v0 @kind this, `org.joda.time.ReadableInstant` v1 @kind object, `org.joda.time.ReadableInstant` v2 @kind object) @signature `Lorg/joda/time/MutableInterval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableInstant;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a3cf4.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableInstant;)V` @kind direct;
  #L3a3cfa.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableInterval` v0 @kind this, `org.joda.time.ReadableInstant` v1 @kind object, `org.joda.time.ReadablePeriod` v2 @kind object) @signature `Lorg/joda/time/MutableInterval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadablePeriod;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a3d0c.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadablePeriod;)V` @kind direct;
  #L3a3d12.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MutableInterval` v0 @kind this, `org.joda.time.ReadablePeriod` v1 @kind object, `org.joda.time.ReadableInstant` v2 @kind object) @signature `Lorg/joda/time/MutableInterval;.<init>:(Lorg/joda/time/ReadablePeriod;Lorg/joda/time/ReadableInstant;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a3d24.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Lorg/joda/time/ReadablePeriod;Lorg/joda/time/ReadableInstant;)V` @kind direct;
  #L3a3d2a.  return @kind void;
}
procedure `org.joda.time.MutableInterval` `parse`(`java.lang.String` v1 @kind object) @signature `Lorg/joda/time/MutableInterval;.parse:(Ljava/lang/String;)Lorg/joda/time/MutableInterval;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a3c18.  v0:= new `org.joda.time.MutableInterval`;
  #L3a3c1c.  call `<init>`(v0, v1) @signature `Lorg/joda/time/MutableInterval;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3a3c22.  return v0 @kind object;
}
procedure `java.lang.Object` `clone`(`org.joda.time.MutableInterval` v2 @kind this) @signature `Lorg/joda/time/MutableInterval;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a3bbc.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L3a3bc2.  v0:= temp @kind object;
  #L3a3bc4.  return v0 @kind object;
  #L3a3bc6.  v0:= new `java.lang.InternalError`;
  #L3a3bca.  v1:= "Clone error" @kind object;
  #L3a3bce.  call `<init>`(v0, v1) @signature `Ljava/lang/InternalError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a3bd4.  throw v0;
  catch `java.lang.CloneNotSupportedException` @[L3a3bbc..L3a3bc4] goto L3a3bc6;
}
procedure `org.joda.time.MutableInterval` `copy`(`org.joda.time.MutableInterval` v1 @kind this) @signature `Lorg/joda/time/MutableInterval;.copy:()Lorg/joda/time/MutableInterval;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a3bf8.  call temp:= `clone`(v1) @signature `Lorg/joda/time/MutableInterval;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3a3bfe.  v0:= temp @kind object;
  #L3a3c00.  v0:= (`org.joda.time.MutableInterval`) v0 @kind object;
  #L3a3c04.  return v0 @kind object;
}
procedure `void` `setChronology`(`org.joda.time.MutableInterval` v6 @kind this, `org.joda.time.Chronology` v7 @kind object) @signature `Lorg/joda/time/MutableInterval;.setChronology:(Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a3d3c.  call temp:= `getStartMillis`(v6) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L3a3d42.  v1:= temp @kind wide;
  #L3a3d44.  call temp:= `getEndMillis`(v6) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L3a3d4a.  v3:= temp @kind wide;
  #L3a3d4c.  v0:= v6 @kind object;
  #L3a3d4e.  v5:= v7 @kind object;
  #L3a3d50.  call `setInterval`(v0, v1, v3, v5) @signature `Lorg/joda/time/base/BaseInterval;.setInterval:(JJLorg/joda/time/Chronology;)V` @kind super;
  #L3a3d56.  return @kind void;
}
procedure `void` `setDurationAfterStart`(`org.joda.time.MutableInterval` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/MutableInterval;.setDurationAfterStart:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a3d68.  call temp:= `getStartMillis`(v2) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L3a3d6e.  v0:= temp @kind wide;
  #L3a3d70.  call temp:= `safeAdd`(v0, v3) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(JJ)J` @kind static;
  #L3a3d76.  v3:= temp @kind wide;
  #L3a3d78.  call `setEndMillis`(v2, v3) @signature `Lorg/joda/time/MutableInterval;.setEndMillis:(J)V` @kind virtual;
  #L3a3d7e.  return @kind void;
}
procedure `void` `setDurationAfterStart`(`org.joda.time.MutableInterval` v4 @kind this, `org.joda.time.ReadableDuration` v5 @kind object) @signature `Lorg/joda/time/MutableInterval;.setDurationAfterStart:(Lorg/joda/time/ReadableDuration;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a3d90.  call temp:= `getDurationMillis`(v5) @signature `Lorg/joda/time/DateTimeUtils;.getDurationMillis:(Lorg/joda/time/ReadableDuration;)J` @kind static;
  #L3a3d96.  v0:= temp @kind wide;
  #L3a3d98.  call temp:= `getStartMillis`(v4) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L3a3d9e.  v2:= temp @kind wide;
  #L3a3da0.  call temp:= `safeAdd`(v2, v0) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(JJ)J` @kind static;
  #L3a3da6.  v0:= temp @kind wide;
  #L3a3da8.  call `setEndMillis`(v4, v0) @signature `Lorg/joda/time/MutableInterval;.setEndMillis:(J)V` @kind virtual;
  #L3a3dae.  return @kind void;
}
procedure `void` `setDurationBeforeEnd`(`org.joda.time.MutableInterval` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/MutableInterval;.setDurationBeforeEnd:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a3dc0.  call temp:= `getEndMillis`(v2) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L3a3dc6.  v0:= temp @kind wide;
  #L3a3dc8.  v3:= -v3 @kind long;
  #L3a3dca.  call temp:= `safeAdd`(v0, v3) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(JJ)J` @kind static;
  #L3a3dd0.  v3:= temp @kind wide;
  #L3a3dd2.  call `setStartMillis`(v2, v3) @signature `Lorg/joda/time/MutableInterval;.setStartMillis:(J)V` @kind virtual;
  #L3a3dd8.  return @kind void;
}
procedure `void` `setDurationBeforeEnd`(`org.joda.time.MutableInterval` v4 @kind this, `org.joda.time.ReadableDuration` v5 @kind object) @signature `Lorg/joda/time/MutableInterval;.setDurationBeforeEnd:(Lorg/joda/time/ReadableDuration;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a3dec.  call temp:= `getDurationMillis`(v5) @signature `Lorg/joda/time/DateTimeUtils;.getDurationMillis:(Lorg/joda/time/ReadableDuration;)J` @kind static;
  #L3a3df2.  v0:= temp @kind wide;
  #L3a3df4.  call temp:= `getEndMillis`(v4) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L3a3dfa.  v2:= temp @kind wide;
  #L3a3dfc.  v0:= -v0 @kind long;
  #L3a3dfe.  call temp:= `safeAdd`(v2, v0) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(JJ)J` @kind static;
  #L3a3e04.  v0:= temp @kind wide;
  #L3a3e06.  call `setStartMillis`(v4, v0) @signature `Lorg/joda/time/MutableInterval;.setStartMillis:(J)V` @kind virtual;
  #L3a3e0c.  return @kind void;
}
procedure `void` `setEnd`(`org.joda.time.MutableInterval` v6 @kind this, `org.joda.time.ReadableInstant` v7 @kind object) @signature `Lorg/joda/time/MutableInterval;.setEnd:(Lorg/joda/time/ReadableInstant;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a3e20.  call temp:= `getInstantMillis`(v7) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3a3e26.  v3:= temp @kind wide;
  #L3a3e28.  call temp:= `getStartMillis`(v6) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L3a3e2e.  v1:= temp @kind wide;
  #L3a3e30.  call temp:= `getChronology`(v6) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3e36.  v5:= temp @kind object;
  #L3a3e38.  v0:= v6 @kind object;
  #L3a3e3a.  call `setInterval`(v0, v1, v3, v5) @signature `Lorg/joda/time/base/BaseInterval;.setInterval:(JJLorg/joda/time/Chronology;)V` @kind super;
  #L3a3e40.  return @kind void;
}
procedure `void` `setEndMillis`(`org.joda.time.MutableInterval` v6 @kind this, `long` v7 ) @signature `Lorg/joda/time/MutableInterval;.setEndMillis:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a3e54.  call temp:= `getStartMillis`(v6) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L3a3e5a.  v1:= temp @kind wide;
  #L3a3e5c.  call temp:= `getChronology`(v6) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3e62.  v5:= temp @kind object;
  #L3a3e64.  v0:= v6 @kind object;
  #L3a3e66.  v3:= v7 @kind wide;
  #L3a3e68.  call `setInterval`(v0, v1, v3, v5) @signature `Lorg/joda/time/base/BaseInterval;.setInterval:(JJLorg/joda/time/Chronology;)V` @kind super;
  #L3a3e6e.  return @kind void;
}
procedure `void` `setInterval`(`org.joda.time.MutableInterval` v6 @kind this, `long` v7 , `long` v9 ) @signature `Lorg/joda/time/MutableInterval;.setInterval:(JJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a3e80.  call temp:= `getChronology`(v6) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3e86.  v5:= temp @kind object;
  #L3a3e88.  v0:= v6 @kind object;
  #L3a3e8a.  v1:= v7 @kind wide;
  #L3a3e8c.  v3:= v9 @kind wide;
  #L3a3e8e.  call `setInterval`(v0, v1, v3, v5) @signature `Lorg/joda/time/base/BaseInterval;.setInterval:(JJLorg/joda/time/Chronology;)V` @kind super;
  #L3a3e94.  return @kind void;
}
procedure `void` `setInterval`(`org.joda.time.MutableInterval` v6 @kind this, `org.joda.time.ReadableInstant` v7 @kind object, `org.joda.time.ReadableInstant` v8 @kind object) @signature `Lorg/joda/time/MutableInterval;.setInterval:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableInstant;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a3ea8.  if v7 != 0 then goto L3a3ec0;
  #L3a3eac.  if v8 != 0 then goto L3a3ec0;
  #L3a3eb0.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3a3eb6.  v7:= temp @kind wide;
  #L3a3eb8.  call `setInterval`(v6, v7, v7) @signature `Lorg/joda/time/MutableInterval;.setInterval:(JJ)V` @kind virtual;
  #L3a3ebe.  goto L3a3ee0;
  #L3a3ec0.  call temp:= `getInstantMillis`(v7) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3a3ec6.  v1:= temp @kind wide;
  #L3a3ec8.  call temp:= `getInstantMillis`(v8) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3a3ece.  v3:= temp @kind wide;
  #L3a3ed0.  call temp:= `getInstantChronology`(v7) @signature `Lorg/joda/time/DateTimeUtils;.getInstantChronology:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;` @kind static;
  #L3a3ed6.  v5:= temp @kind object;
  #L3a3ed8.  v0:= v6 @kind object;
  #L3a3eda.  call `setInterval`(v0, v1, v3, v5) @signature `Lorg/joda/time/base/BaseInterval;.setInterval:(JJLorg/joda/time/Chronology;)V` @kind super;
  #L3a3ee0.  return @kind void;
}
procedure `void` `setInterval`(`org.joda.time.MutableInterval` v6 @kind this, `org.joda.time.ReadableInterval` v7 @kind object) @signature `Lorg/joda/time/MutableInterval;.setInterval:(Lorg/joda/time/ReadableInterval;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a3ef4.  if v7 == 0 then goto L3a3f1a;
  #L3a3ef8.  call temp:= `getStartMillis`(v7) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3a3efe.  v1:= temp @kind wide;
  #L3a3f00.  call temp:= `getEndMillis`(v7) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3a3f06.  v3:= temp @kind wide;
  #L3a3f08.  call temp:= `getChronology`(v7) @signature `Lorg/joda/time/ReadableInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3a3f0e.  v5:= temp @kind object;
  #L3a3f10.  v0:= v6 @kind object;
  #L3a3f12.  call `setInterval`(v0, v1, v3, v5) @signature `Lorg/joda/time/base/BaseInterval;.setInterval:(JJLorg/joda/time/Chronology;)V` @kind super;
  #L3a3f18.  return @kind void;
  #L3a3f1a.  v7:= new `java.lang.IllegalArgumentException`;
  #L3a3f1e.  v0:= "Interval must not be null" @kind object;
  #L3a3f22.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a3f28.  throw v7;
}
procedure `void` `setPeriodAfterStart`(`org.joda.time.MutableInterval` v4 @kind this, `org.joda.time.ReadablePeriod` v5 @kind object) @signature `Lorg/joda/time/MutableInterval;.setPeriodAfterStart:(Lorg/joda/time/ReadablePeriod;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a3f3c.  if v5 != 0 then goto L3a3f50;
  #L3a3f40.  call temp:= `getStartMillis`(v4) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L3a3f46.  v0:= temp @kind wide;
  #L3a3f48.  call `setEndMillis`(v4, v0) @signature `Lorg/joda/time/MutableInterval;.setEndMillis:(J)V` @kind virtual;
  #L3a3f4e.  goto L3a3f70;
  #L3a3f50.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3f56.  v0:= temp @kind object;
  #L3a3f58.  call temp:= `getStartMillis`(v4) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L3a3f5e.  v1:= temp @kind wide;
  #L3a3f60.  v3:= 1I;
  #L3a3f62.  call temp:= `add`(v0, v5, v1, v3) @signature `Lorg/joda/time/Chronology;.add:(Lorg/joda/time/ReadablePeriod;JI)J` @kind virtual;
  #L3a3f68.  v0:= temp @kind wide;
  #L3a3f6a.  call `setEndMillis`(v4, v0) @signature `Lorg/joda/time/MutableInterval;.setEndMillis:(J)V` @kind virtual;
  #L3a3f70.  return @kind void;
}
procedure `void` `setPeriodBeforeEnd`(`org.joda.time.MutableInterval` v4 @kind this, `org.joda.time.ReadablePeriod` v5 @kind object) @signature `Lorg/joda/time/MutableInterval;.setPeriodBeforeEnd:(Lorg/joda/time/ReadablePeriod;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a3f84.  if v5 != 0 then goto L3a3f98;
  #L3a3f88.  call temp:= `getEndMillis`(v4) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L3a3f8e.  v0:= temp @kind wide;
  #L3a3f90.  call `setStartMillis`(v4, v0) @signature `Lorg/joda/time/MutableInterval;.setStartMillis:(J)V` @kind virtual;
  #L3a3f96.  goto L3a3fb8;
  #L3a3f98.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3f9e.  v0:= temp @kind object;
  #L3a3fa0.  call temp:= `getEndMillis`(v4) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L3a3fa6.  v1:= temp @kind wide;
  #L3a3fa8.  v3:= -1I;
  #L3a3faa.  call temp:= `add`(v0, v5, v1, v3) @signature `Lorg/joda/time/Chronology;.add:(Lorg/joda/time/ReadablePeriod;JI)J` @kind virtual;
  #L3a3fb0.  v0:= temp @kind wide;
  #L3a3fb2.  call `setStartMillis`(v4, v0) @signature `Lorg/joda/time/MutableInterval;.setStartMillis:(J)V` @kind virtual;
  #L3a3fb8.  return @kind void;
}
procedure `void` `setStart`(`org.joda.time.MutableInterval` v6 @kind this, `org.joda.time.ReadableInstant` v7 @kind object) @signature `Lorg/joda/time/MutableInterval;.setStart:(Lorg/joda/time/ReadableInstant;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a3fcc.  call temp:= `getInstantMillis`(v7) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3a3fd2.  v1:= temp @kind wide;
  #L3a3fd4.  call temp:= `getEndMillis`(v6) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L3a3fda.  v3:= temp @kind wide;
  #L3a3fdc.  call temp:= `getChronology`(v6) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a3fe2.  v5:= temp @kind object;
  #L3a3fe4.  v0:= v6 @kind object;
  #L3a3fe6.  call `setInterval`(v0, v1, v3, v5) @signature `Lorg/joda/time/base/BaseInterval;.setInterval:(JJLorg/joda/time/Chronology;)V` @kind super;
  #L3a3fec.  return @kind void;
}
procedure `void` `setStartMillis`(`org.joda.time.MutableInterval` v6 @kind this, `long` v7 ) @signature `Lorg/joda/time/MutableInterval;.setStartMillis:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a4000.  call temp:= `getEndMillis`(v6) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L3a4006.  v3:= temp @kind wide;
  #L3a4008.  call temp:= `getChronology`(v6) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a400e.  v5:= temp @kind object;
  #L3a4010.  v0:= v6 @kind object;
  #L3a4012.  v1:= v7 @kind wide;
  #L3a4014.  call `setInterval`(v0, v1, v3, v5) @signature `Lorg/joda/time/base/BaseInterval;.setInterval:(JJLorg/joda/time/Chronology;)V` @kind super;
  #L3a401a.  return @kind void;
}
