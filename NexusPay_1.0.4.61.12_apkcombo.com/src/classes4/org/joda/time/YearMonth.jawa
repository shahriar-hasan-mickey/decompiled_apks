record `org.joda.time.YearMonth` @kind class @AccessFlag PUBLIC_FINAL extends `org.joda.time.base.BasePartial` @kind class, `org.joda.time.ReadablePartial` @kind interface, `java.io.Serializable` @kind interface {
}
global `org.joda.time.DateTimeFieldType`[] `@@org.joda.time.YearMonth.FIELD_TYPES` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.joda.time.YearMonth.MONTH_OF_YEAR` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@org.joda.time.YearMonth.YEAR` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@org.joda.time.YearMonth.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/YearMonth;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3ab010.  v0:= 2I;
  #L3ab012.  v0:= new `org.joda.time.DateTimeFieldType`[v0];
  #L3ab016.  call temp:= `year`() @signature `Lorg/joda/time/DateTimeFieldType;.year:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3ab01c.  v1:= temp @kind object;
  #L3ab01e.  v2:= 0I;
  #L3ab020.  v0[v2]:= v1 @kind object;
  #L3ab024.  call temp:= `monthOfYear`() @signature `Lorg/joda/time/DateTimeFieldType;.monthOfYear:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3ab02a.  v1:= temp @kind object;
  #L3ab02c.  v2:= 1I;
  #L3ab02e.  v0[v2]:= v1 @kind object;
  #L3ab032.  `@@org.joda.time.YearMonth.FIELD_TYPES` @type ^`org.joda.time.DateTimeFieldType`[] := v0 @kind object;
  #L3ab036.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.YearMonth` v0 @kind this) @signature `Lorg/joda/time/YearMonth;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ab048.  call `<init>`(v0) @signature `Lorg/joda/time/base/BasePartial;.<init>:()V` @kind direct;
  #L3ab04e.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.YearMonth` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/joda/time/YearMonth;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ab060.  v0:= 0I;
  #L3ab062.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/joda/time/YearMonth;.<init>:(IILorg/joda/time/Chronology;)V` @kind direct;
  #L3ab068.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.YearMonth` v2 @kind this, `int` v3 , `int` v4 , `org.joda.time.Chronology` v5 @kind object) @signature `Lorg/joda/time/YearMonth;.<init>:(IILorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ab07c.  v0:= 2I;
  #L3ab07e.  v0:= new `int`[v0];
  #L3ab082.  v1:= 0I;
  #L3ab084.  v0[v1]:= v3;
  #L3ab088.  v3:= 1I;
  #L3ab08a.  v0[v3]:= v4;
  #L3ab08e.  call `<init>`(v2, v0, v5) @signature `Lorg/joda/time/base/BasePartial;.<init>:([ILorg/joda/time/Chronology;)V` @kind direct;
  #L3ab094.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.YearMonth` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/YearMonth;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ab0f4.  call `<init>`(v0, v1) @signature `Lorg/joda/time/base/BasePartial;.<init>:(J)V` @kind direct;
  #L3ab0fa.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.YearMonth` v0 @kind this, `long` v1 , `org.joda.time.Chronology` v3 @kind object) @signature `Lorg/joda/time/YearMonth;.<init>:(JLorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ab10c.  call `<init>`(v0, v1, v3) @signature `Lorg/joda/time/base/BasePartial;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3ab112.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.YearMonth` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lorg/joda/time/YearMonth;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ab0a8.  call temp:= `localDateParser`() @signature `Lorg/joda/time/format/ISODateTimeFormat;.localDateParser:()Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3ab0ae.  v0:= temp @kind object;
  #L3ab0b0.  v1:= 0I;
  #L3ab0b2.  call `<init>`(v2, v3, v1, v0) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;Lorg/joda/time/format/DateTimeFormatter;)V` @kind direct;
  #L3ab0b8.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.YearMonth` v1 @kind this, `java.lang.Object` v2 @kind object, `org.joda.time.Chronology` v3 @kind object) @signature `Lorg/joda/time/YearMonth;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ab0cc.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3ab0d2.  v3:= temp @kind object;
  #L3ab0d4.  call temp:= `localDateParser`() @signature `Lorg/joda/time/format/ISODateTimeFormat;.localDateParser:()Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3ab0da.  v0:= temp @kind object;
  #L3ab0dc.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;Lorg/joda/time/format/DateTimeFormatter;)V` @kind direct;
  #L3ab0e2.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.YearMonth` v0 @kind this, `org.joda.time.Chronology` v1 @kind object) @signature `Lorg/joda/time/YearMonth;.<init>:(Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ab124.  call `<init>`(v0, v1) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Lorg/joda/time/Chronology;)V` @kind direct;
  #L3ab12a.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.YearMonth` v0 @kind this, `org.joda.time.DateTimeZone` v1 @kind object) @signature `Lorg/joda/time/YearMonth;.<init>:(Lorg/joda/time/DateTimeZone;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ab13c.  call temp:= `getInstance`(v1) @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3ab142.  v1:= temp @kind object;
  #L3ab144.  call `<init>`(v0, v1) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Lorg/joda/time/Chronology;)V` @kind direct;
  #L3ab14a.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.YearMonth` v0 @kind this, `org.joda.time.YearMonth` v1 @kind object, `org.joda.time.Chronology` v2 @kind object) @signature `Lorg/joda/time/YearMonth;.<init>:(Lorg/joda/time/YearMonth;Lorg/joda/time/Chronology;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ab174.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Lorg/joda/time/base/BasePartial;Lorg/joda/time/Chronology;)V` @kind direct;
  #L3ab17a.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.YearMonth` v0 @kind this, `org.joda.time.YearMonth` v1 @kind object, `int`[] v2 @kind object) @signature `Lorg/joda/time/YearMonth;.<init>:(Lorg/joda/time/YearMonth;[I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ab15c.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Lorg/joda/time/base/BasePartial;[I)V` @kind direct;
  #L3ab162.  return @kind void;
}
procedure `org.joda.time.YearMonth` `fromCalendarFields`(`java.util.Calendar` v4 @kind object) @signature `Lorg/joda/time/YearMonth;.fromCalendarFields:(Ljava/util/Calendar;)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3aaba0.  if v4 == 0 then goto L3aabc6;
  #L3aaba4.  v0:= new `org.joda.time.YearMonth`;
  #L3aaba8.  v1:= 1I;
  #L3aabaa.  call temp:= `get`(v4, v1) @signature `Ljava/util/Calendar;.get:(I)I` @kind virtual;
  #L3aabb0.  v2:= temp;
  #L3aabb2.  v3:= 2I;
  #L3aabb4.  call temp:= `get`(v4, v3) @signature `Ljava/util/Calendar;.get:(I)I` @kind virtual;
  #L3aabba.  v4:= temp;
  #L3aabbc.  v4:= v4 + v1 @kind int;
  #L3aabbe.  call `<init>`(v0, v2, v4) @signature `Lorg/joda/time/YearMonth;.<init>:(II)V` @kind direct;
  #L3aabc4.  return v0 @kind object;
  #L3aabc6.  v4:= new `java.lang.IllegalArgumentException`;
  #L3aabca.  v0:= "The calendar must not be null" @kind object;
  #L3aabce.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3aabd4.  throw v4;
}
procedure `org.joda.time.YearMonth` `fromDateFields`(`java.util.Date` v2 @kind object) @signature `Lorg/joda/time/YearMonth;.fromDateFields:(Ljava/util/Date;)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3aabe8.  if v2 == 0 then goto L3aac10;
  #L3aabec.  v0:= new `org.joda.time.YearMonth`;
  #L3aabf0.  call temp:= `getYear`(v2) @signature `Ljava/util/Date;.getYear:()I` @kind virtual;
  #L3aabf6.  v1:= temp;
  #L3aabf8.  v1:= v1 + 1900;
  #L3aabfc.  call temp:= `getMonth`(v2) @signature `Ljava/util/Date;.getMonth:()I` @kind virtual;
  #L3aac02.  v2:= temp;
  #L3aac04.  v2:= v2 + 1;
  #L3aac08.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/YearMonth;.<init>:(II)V` @kind direct;
  #L3aac0e.  return v0 @kind object;
  #L3aac10.  v2:= new `java.lang.IllegalArgumentException`;
  #L3aac14.  v0:= "The date must not be null" @kind object;
  #L3aac18.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3aac1e.  throw v2;
}
procedure `org.joda.time.YearMonth` `now`() @signature `Lorg/joda/time/YearMonth;.now:()Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3aaca4.  v0:= new `org.joda.time.YearMonth`;
  #L3aaca8.  call `<init>`(v0) @signature `Lorg/joda/time/YearMonth;.<init>:()V` @kind direct;
  #L3aacae.  return v0 @kind object;
}
procedure `org.joda.time.YearMonth` `now`(`org.joda.time.Chronology` v1 @kind object) @signature `Lorg/joda/time/YearMonth;.now:(Lorg/joda/time/Chronology;)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3aacc0.  if v1 == 0 then goto L3aacd0;
  #L3aacc4.  v0:= new `org.joda.time.YearMonth`;
  #L3aacc8.  call `<init>`(v0, v1) @signature `Lorg/joda/time/YearMonth;.<init>:(Lorg/joda/time/Chronology;)V` @kind direct;
  #L3aacce.  return v0 @kind object;
  #L3aacd0.  v1:= new `java.lang.NullPointerException`;
  #L3aacd4.  v0:= "Chronology must not be null" @kind object;
  #L3aacd8.  call `<init>`(v1, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3aacde.  throw v1;
}
procedure `org.joda.time.YearMonth` `now`(`org.joda.time.DateTimeZone` v1 @kind object) @signature `Lorg/joda/time/YearMonth;.now:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3aacf0.  if v1 == 0 then goto L3aad00;
  #L3aacf4.  v0:= new `org.joda.time.YearMonth`;
  #L3aacf8.  call `<init>`(v0, v1) @signature `Lorg/joda/time/YearMonth;.<init>:(Lorg/joda/time/DateTimeZone;)V` @kind direct;
  #L3aacfe.  return v0 @kind object;
  #L3aad00.  v1:= new `java.lang.NullPointerException`;
  #L3aad04.  v0:= "Zone must not be null" @kind object;
  #L3aad08.  call `<init>`(v1, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3aad0e.  throw v1;
}
procedure `org.joda.time.YearMonth` `parse`(`java.lang.String` v1 @kind object) @signature `Lorg/joda/time/YearMonth;.parse:(Ljava/lang/String;)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3aad20.  call temp:= `localDateParser`() @signature `Lorg/joda/time/format/ISODateTimeFormat;.localDateParser:()Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3aad26.  v0:= temp @kind object;
  #L3aad28.  call temp:= `parse`(v1, v0) @signature `Lorg/joda/time/YearMonth;.parse:(Ljava/lang/String;Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/YearMonth;` @kind static;
  #L3aad2e.  v1:= temp @kind object;
  #L3aad30.  return v1 @kind object;
}
procedure `org.joda.time.YearMonth` `parse`(`java.lang.String` v1 @kind object, `org.joda.time.format.DateTimeFormatter` v2 @kind object) @signature `Lorg/joda/time/YearMonth;.parse:(Ljava/lang/String;Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3aad44.  call temp:= `parseLocalDate`(v2, v1) @signature `Lorg/joda/time/format/DateTimeFormatter;.parseLocalDate:(Ljava/lang/String;)Lorg/joda/time/LocalDate;` @kind virtual;
  #L3aad4a.  v1:= temp @kind object;
  #L3aad4c.  v2:= new `org.joda.time.YearMonth`;
  #L3aad50.  call temp:= `getYear`(v1) @signature `Lorg/joda/time/LocalDate;.getYear:()I` @kind virtual;
  #L3aad56.  v0:= temp;
  #L3aad58.  call temp:= `getMonthOfYear`(v1) @signature `Lorg/joda/time/LocalDate;.getMonthOfYear:()I` @kind virtual;
  #L3aad5e.  v1:= temp;
  #L3aad60.  call `<init>`(v2, v0, v1) @signature `Lorg/joda/time/YearMonth;.<init>:(II)V` @kind direct;
  #L3aad66.  return v2 @kind object;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.YearMonth` v2 @kind this) @signature `Lorg/joda/time/YearMonth;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3aa988.  v0:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3aa98c.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BasePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3aa992.  v1:= temp @kind object;
  #L3aa994.  call temp:= `getZone`(v1) @signature `Lorg/joda/time/Chronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3aa99a.  v1:= temp @kind object;
  #L3aa99c.  call temp:= `equals`(v0, v1) @signature `Lorg/joda/time/DateTimeZone;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3aa9a2.  v0:= temp;
  #L3aa9a4.  if v0 != 0 then goto L3aa9c4;
  #L3aa9a8.  v0:= new `org.joda.time.YearMonth`;
  #L3aa9ac.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BasePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3aa9b2.  v1:= temp @kind object;
  #L3aa9b4.  call temp:= `withUTC`(v1) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3aa9ba.  v1:= temp @kind object;
  #L3aa9bc.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/YearMonth;.<init>:(Lorg/joda/time/YearMonth;Lorg/joda/time/Chronology;)V` @kind direct;
  #L3aa9c2.  return v0 @kind object;
  #L3aa9c4.  return v2 @kind object;
}
procedure `org.joda.time.DateTimeField` `getField`(`org.joda.time.YearMonth` v2 @kind this, `int` v3 , `org.joda.time.Chronology` v4 @kind object) @signature `Lorg/joda/time/YearMonth;.getField:(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3aaa64.  if v3 == 0 then goto L3aaaa6;
  #L3aaa68.  v0:= 1I;
  #L3aaa6a.  if v3 != v0 then goto L3aaa78;
  #L3aaa6e.  call temp:= `monthOfYear`(v4) @signature `Lorg/joda/time/Chronology;.monthOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3aaa74.  v3:= temp @kind object;
  #L3aaa76.  return v3 @kind object;
  #L3aaa78.  v4:= new `java.lang.IndexOutOfBoundsException`;
  #L3aaa7c.  v0:= new `java.lang.StringBuilder`;
  #L3aaa80.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3aaa86.  v1:= "Invalid index: " @kind object;
  #L3aaa8a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3aaa90.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3aaa96.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3aaa9c.  v3:= temp @kind object;
  #L3aaa9e.  call `<init>`(v4, v3) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3aaaa4.  throw v4;
  #L3aaaa6.  call temp:= `year`(v4) @signature `Lorg/joda/time/Chronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3aaaac.  v3:= temp @kind object;
  #L3aaaae.  return v3 @kind object;
}
procedure `org.joda.time.DateTimeFieldType` `getFieldType`(`org.joda.time.YearMonth` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/YearMonth;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aaac0.  v0:= `@@org.joda.time.YearMonth.FIELD_TYPES` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3aaac4.  v2:= v0[v2] @kind object;
  #L3aaac8.  return v2 @kind object;
}
procedure `org.joda.time.DateTimeFieldType`[] `getFieldTypes`(`org.joda.time.YearMonth` v1 @kind this) @signature `Lorg/joda/time/YearMonth;.getFieldTypes:()[Lorg/joda/time/DateTimeFieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aaadc.  v0:= `@@org.joda.time.YearMonth.FIELD_TYPES` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3aaae0.  call temp:= `clone`(v0) @signature `[Lorg/joda/time/DateTimeFieldType;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3aaae6.  v0:= temp @kind object;
  #L3aaae8.  v0:= (`org.joda.time.DateTimeFieldType`[]) v0 @kind object;
  #L3aaaec.  return v0 @kind object;
}
procedure `int` `getMonthOfYear`(`org.joda.time.YearMonth` v1 @kind this) @signature `Lorg/joda/time/YearMonth;.getMonthOfYear:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aa93c.  v0:= 1I;
  #L3aa93e.  call temp:= `getValue`(v1, v0) @signature `Lorg/joda/time/base/BasePartial;.getValue:(I)I` @kind virtual;
  #L3aa944.  v0:= temp;
  #L3aa946.  return v0;
}
procedure `int` `getYear`(`org.joda.time.YearMonth` v1 @kind this) @signature `Lorg/joda/time/YearMonth;.getYear:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aa958.  v0:= 0I;
  #L3aa95a.  call temp:= `getValue`(v1, v0) @signature `Lorg/joda/time/base/BasePartial;.getValue:(I)I` @kind virtual;
  #L3aa960.  v0:= temp;
  #L3aa962.  return v0;
}
procedure `org.joda.time.YearMonth` `minus`(`org.joda.time.YearMonth` v1 @kind this, `org.joda.time.ReadablePeriod` v2 @kind object) @signature `Lorg/joda/time/YearMonth;.minus:(Lorg/joda/time/ReadablePeriod;)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aac30.  v0:= -1I;
  #L3aac32.  call temp:= `withPeriodAdded`(v1, v2, v0) @signature `Lorg/joda/time/YearMonth;.withPeriodAdded:(Lorg/joda/time/ReadablePeriod;I)Lorg/joda/time/YearMonth;` @kind virtual;
  #L3aac38.  v2:= temp @kind object;
  #L3aac3a.  return v2 @kind object;
}
procedure `org.joda.time.YearMonth` `minusMonths`(`org.joda.time.YearMonth` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/YearMonth;.minusMonths:(I)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aac4c.  call temp:= `months`() @signature `Lorg/joda/time/DurationFieldType;.months:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3aac52.  v0:= temp @kind object;
  #L3aac54.  call temp:= `safeNegate`(v2) @signature `Lorg/joda/time/field/FieldUtils;.safeNegate:(I)I` @kind static;
  #L3aac5a.  v2:= temp;
  #L3aac5c.  call temp:= `withFieldAdded`(v1, v0, v2) @signature `Lorg/joda/time/YearMonth;.withFieldAdded:(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/YearMonth;` @kind virtual;
  #L3aac62.  v2:= temp @kind object;
  #L3aac64.  return v2 @kind object;
}
procedure `org.joda.time.YearMonth` `minusYears`(`org.joda.time.YearMonth` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/YearMonth;.minusYears:(I)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aac78.  call temp:= `years`() @signature `Lorg/joda/time/DurationFieldType;.years:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3aac7e.  v0:= temp @kind object;
  #L3aac80.  call temp:= `safeNegate`(v2) @signature `Lorg/joda/time/field/FieldUtils;.safeNegate:(I)I` @kind static;
  #L3aac86.  v2:= temp;
  #L3aac88.  call temp:= `withFieldAdded`(v1, v0, v2) @signature `Lorg/joda/time/YearMonth;.withFieldAdded:(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/YearMonth;` @kind virtual;
  #L3aac8e.  v2:= temp @kind object;
  #L3aac90.  return v2 @kind object;
}
procedure `org.joda.time.YearMonth$Property` `monthOfYear`(`org.joda.time.YearMonth` v2 @kind this) @signature `Lorg/joda/time/YearMonth;.monthOfYear:()Lorg/joda/time/YearMonth$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3aafac.  v0:= new `org.joda.time.YearMonth$Property`;
  #L3aafb0.  v1:= 1I;
  #L3aafb2.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/YearMonth$Property;.<init>:(Lorg/joda/time/YearMonth;I)V` @kind direct;
  #L3aafb8.  return v0 @kind object;
}
procedure `org.joda.time.YearMonth` `plus`(`org.joda.time.YearMonth` v1 @kind this, `org.joda.time.ReadablePeriod` v2 @kind object) @signature `Lorg/joda/time/YearMonth;.plus:(Lorg/joda/time/ReadablePeriod;)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aad78.  v0:= 1I;
  #L3aad7a.  call temp:= `withPeriodAdded`(v1, v2, v0) @signature `Lorg/joda/time/YearMonth;.withPeriodAdded:(Lorg/joda/time/ReadablePeriod;I)Lorg/joda/time/YearMonth;` @kind virtual;
  #L3aad80.  v2:= temp @kind object;
  #L3aad82.  return v2 @kind object;
}
procedure `org.joda.time.YearMonth` `plusMonths`(`org.joda.time.YearMonth` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/YearMonth;.plusMonths:(I)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aad94.  call temp:= `months`() @signature `Lorg/joda/time/DurationFieldType;.months:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3aad9a.  v0:= temp @kind object;
  #L3aad9c.  call temp:= `withFieldAdded`(v1, v0, v2) @signature `Lorg/joda/time/YearMonth;.withFieldAdded:(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/YearMonth;` @kind virtual;
  #L3aada2.  v2:= temp @kind object;
  #L3aada4.  return v2 @kind object;
}
procedure `org.joda.time.YearMonth` `plusYears`(`org.joda.time.YearMonth` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/YearMonth;.plusYears:(I)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aadb8.  call temp:= `years`() @signature `Lorg/joda/time/DurationFieldType;.years:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3aadbe.  v0:= temp @kind object;
  #L3aadc0.  call temp:= `withFieldAdded`(v1, v0, v2) @signature `Lorg/joda/time/YearMonth;.withFieldAdded:(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/YearMonth;` @kind virtual;
  #L3aadc6.  v2:= temp @kind object;
  #L3aadc8.  return v2 @kind object;
}
procedure `org.joda.time.YearMonth$Property` `property`(`org.joda.time.YearMonth` v1 @kind this, `org.joda.time.DateTimeFieldType` v2 @kind object) @signature `Lorg/joda/time/YearMonth;.property:(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/YearMonth$Property;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aafcc.  v0:= new `org.joda.time.YearMonth$Property`;
  #L3aafd0.  call temp:= `indexOfSupported`(v1, v2) @signature `Lorg/joda/time/base/AbstractPartial;.indexOfSupported:(Lorg/joda/time/DateTimeFieldType;)I` @kind virtual;
  #L3aafd6.  v2:= temp;
  #L3aafd8.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/YearMonth$Property;.<init>:(Lorg/joda/time/YearMonth;I)V` @kind direct;
  #L3aafde.  return v0 @kind object;
}
procedure `int` `size`(`org.joda.time.YearMonth` v1 @kind this) @signature `Lorg/joda/time/YearMonth;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aa974.  v0:= 2I;
  #L3aa976.  return v0;
}
procedure `org.joda.time.Interval` `toInterval`(`org.joda.time.YearMonth` v1 @kind this) @signature `Lorg/joda/time/YearMonth;.toInterval:()Lorg/joda/time/Interval;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aab00.  v0:= 0I;
  #L3aab02.  call temp:= `toInterval`(v1, v0) @signature `Lorg/joda/time/YearMonth;.toInterval:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Interval;` @kind virtual;
  #L3aab08.  v0:= temp @kind object;
  #L3aab0a.  return v0 @kind object;
}
procedure `org.joda.time.Interval` `toInterval`(`org.joda.time.YearMonth` v3 @kind this, `org.joda.time.DateTimeZone` v4 @kind object) @signature `Lorg/joda/time/YearMonth;.toInterval:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Interval;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3aab1c.  call temp:= `getZone`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;` @kind static;
  #L3aab22.  v4:= temp @kind object;
  #L3aab24.  v0:= 1I;
  #L3aab26.  call temp:= `toLocalDate`(v3, v0) @signature `Lorg/joda/time/YearMonth;.toLocalDate:(I)Lorg/joda/time/LocalDate;` @kind virtual;
  #L3aab2c.  v1:= temp @kind object;
  #L3aab2e.  call temp:= `toDateTimeAtStartOfDay`(v1, v4) @signature `Lorg/joda/time/LocalDate;.toDateTimeAtStartOfDay:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTime;` @kind virtual;
  #L3aab34.  v1:= temp @kind object;
  #L3aab36.  call temp:= `plusMonths`(v3, v0) @signature `Lorg/joda/time/YearMonth;.plusMonths:(I)Lorg/joda/time/YearMonth;` @kind virtual;
  #L3aab3c.  v2:= temp @kind object;
  #L3aab3e.  call temp:= `toLocalDate`(v2, v0) @signature `Lorg/joda/time/YearMonth;.toLocalDate:(I)Lorg/joda/time/LocalDate;` @kind virtual;
  #L3aab44.  v0:= temp @kind object;
  #L3aab46.  call temp:= `toDateTimeAtStartOfDay`(v0, v4) @signature `Lorg/joda/time/LocalDate;.toDateTimeAtStartOfDay:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTime;` @kind virtual;
  #L3aab4c.  v4:= temp @kind object;
  #L3aab4e.  v0:= new `org.joda.time.Interval`;
  #L3aab52.  call `<init>`(v0, v1, v4) @signature `Lorg/joda/time/Interval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableInstant;)V` @kind direct;
  #L3aab58.  return v0 @kind object;
}
procedure `org.joda.time.LocalDate` `toLocalDate`(`org.joda.time.YearMonth` v4 @kind this, `int` v5 ) @signature `Lorg/joda/time/YearMonth;.toLocalDate:(I)Lorg/joda/time/LocalDate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3aab6c.  v0:= new `org.joda.time.LocalDate`;
  #L3aab70.  call temp:= `getYear`(v4) @signature `Lorg/joda/time/YearMonth;.getYear:()I` @kind virtual;
  #L3aab76.  v1:= temp;
  #L3aab78.  call temp:= `getMonthOfYear`(v4) @signature `Lorg/joda/time/YearMonth;.getMonthOfYear:()I` @kind virtual;
  #L3aab7e.  v2:= temp;
  #L3aab80.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/base/BasePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3aab86.  v3:= temp @kind object;
  #L3aab88.  call `<init>`(v0, v1, v2, v5, v3) @signature `Lorg/joda/time/LocalDate;.<init>:(IIILorg/joda/time/Chronology;)V` @kind direct;
  #L3aab8e.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.YearMonth` v1 @kind this) @signature `Lorg/joda/time/YearMonth;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aa9d8.  call temp:= `yearMonth`() @signature `Lorg/joda/time/format/ISODateTimeFormat;.yearMonth:()Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3aa9de.  v0:= temp @kind object;
  #L3aa9e0.  call temp:= `print`(v0, v1) @signature `Lorg/joda/time/format/DateTimeFormatter;.print:(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;` @kind virtual;
  #L3aa9e6.  v0:= temp @kind object;
  #L3aa9e8.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.YearMonth` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/joda/time/YearMonth;.toString:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3aa9fc.  if v1 != 0 then goto L3aaa0a;
  #L3aaa00.  call temp:= `toString`(v0) @signature `Lorg/joda/time/YearMonth;.toString:()Ljava/lang/String;` @kind virtual;
  #L3aaa06.  v1:= temp @kind object;
  #L3aaa08.  return v1 @kind object;
  #L3aaa0a.  call temp:= `forPattern`(v1) @signature `Lorg/joda/time/format/DateTimeFormat;.forPattern:(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3aaa10.  v1:= temp @kind object;
  #L3aaa12.  call temp:= `print`(v1, v0) @signature `Lorg/joda/time/format/DateTimeFormatter;.print:(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;` @kind virtual;
  #L3aaa18.  v1:= temp @kind object;
  #L3aaa1a.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.YearMonth` v0 @kind this, `java.lang.String` v1 @kind object, `java.util.Locale` v2 @kind object) @signature `Lorg/joda/time/YearMonth;.toString:(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3aaa2c.  if v1 != 0 then goto L3aaa3a;
  #L3aaa30.  call temp:= `toString`(v0) @signature `Lorg/joda/time/YearMonth;.toString:()Ljava/lang/String;` @kind virtual;
  #L3aaa36.  v1:= temp @kind object;
  #L3aaa38.  return v1 @kind object;
  #L3aaa3a.  call temp:= `forPattern`(v1) @signature `Lorg/joda/time/format/DateTimeFormat;.forPattern:(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3aaa40.  v1:= temp @kind object;
  #L3aaa42.  call temp:= `withLocale`(v1, v2) @signature `Lorg/joda/time/format/DateTimeFormatter;.withLocale:(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;` @kind virtual;
  #L3aaa48.  v1:= temp @kind object;
  #L3aaa4a.  call temp:= `print`(v1, v0) @signature `Lorg/joda/time/format/DateTimeFormatter;.print:(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;` @kind virtual;
  #L3aaa50.  v1:= temp @kind object;
  #L3aaa52.  return v1 @kind object;
}
procedure `org.joda.time.YearMonth` `withChronologyRetainFields`(`org.joda.time.YearMonth` v2 @kind this, `org.joda.time.Chronology` v3 @kind object) @signature `Lorg/joda/time/YearMonth;.withChronologyRetainFields:(Lorg/joda/time/Chronology;)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3aaddc.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3aade2.  v3:= temp @kind object;
  #L3aade4.  call temp:= `withUTC`(v3) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3aadea.  v3:= temp @kind object;
  #L3aadec.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BasePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3aadf2.  v0:= temp @kind object;
  #L3aadf4.  if v3 != v0 then goto L3aadfa;
  #L3aadf8.  return v2 @kind object;
  #L3aadfa.  v0:= new `org.joda.time.YearMonth`;
  #L3aadfe.  call `<init>`(v0, v2, v3) @signature `Lorg/joda/time/YearMonth;.<init>:(Lorg/joda/time/YearMonth;Lorg/joda/time/Chronology;)V` @kind direct;
  #L3aae04.  call temp:= `getValues`(v2) @signature `Lorg/joda/time/base/BasePartial;.getValues:()[I` @kind virtual;
  #L3aae0a.  v1:= temp @kind object;
  #L3aae0c.  call `validate`(v3, v0, v1) @signature `Lorg/joda/time/Chronology;.validate:(Lorg/joda/time/ReadablePartial;[I)V` @kind virtual;
  #L3aae12.  return v0 @kind object;
}
procedure `org.joda.time.YearMonth` `withField`(`org.joda.time.YearMonth` v2 @kind this, `org.joda.time.DateTimeFieldType` v3 @kind object, `int` v4 ) @signature `Lorg/joda/time/YearMonth;.withField:(Lorg/joda/time/DateTimeFieldType;I)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3aae24.  call temp:= `indexOfSupported`(v2, v3) @signature `Lorg/joda/time/base/AbstractPartial;.indexOfSupported:(Lorg/joda/time/DateTimeFieldType;)I` @kind virtual;
  #L3aae2a.  v3:= temp;
  #L3aae2c.  call temp:= `getValue`(v2, v3) @signature `Lorg/joda/time/base/BasePartial;.getValue:(I)I` @kind virtual;
  #L3aae32.  v0:= temp;
  #L3aae34.  if v4 != v0 then goto L3aae3a;
  #L3aae38.  return v2 @kind object;
  #L3aae3a.  call temp:= `getValues`(v2) @signature `Lorg/joda/time/base/BasePartial;.getValues:()[I` @kind virtual;
  #L3aae40.  v0:= temp @kind object;
  #L3aae42.  call temp:= `getField`(v2, v3) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3aae48.  v1:= temp @kind object;
  #L3aae4a.  call temp:= `set`(v1, v2, v3, v0, v4) @signature `Lorg/joda/time/DateTimeField;.set:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3aae50.  v3:= temp @kind object;
  #L3aae52.  v4:= new `org.joda.time.YearMonth`;
  #L3aae56.  call `<init>`(v4, v2, v3) @signature `Lorg/joda/time/YearMonth;.<init>:(Lorg/joda/time/YearMonth;[I)V` @kind direct;
  #L3aae5c.  return v4 @kind object;
}
procedure `org.joda.time.YearMonth` `withFieldAdded`(`org.joda.time.YearMonth` v2 @kind this, `org.joda.time.DurationFieldType` v3 @kind object, `int` v4 ) @signature `Lorg/joda/time/YearMonth;.withFieldAdded:(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3aae70.  call temp:= `indexOfSupported`(v2, v3) @signature `Lorg/joda/time/base/AbstractPartial;.indexOfSupported:(Lorg/joda/time/DurationFieldType;)I` @kind virtual;
  #L3aae76.  v3:= temp;
  #L3aae78.  if v4 != 0 then goto L3aae7e;
  #L3aae7c.  return v2 @kind object;
  #L3aae7e.  call temp:= `getValues`(v2) @signature `Lorg/joda/time/base/BasePartial;.getValues:()[I` @kind virtual;
  #L3aae84.  v0:= temp @kind object;
  #L3aae86.  call temp:= `getField`(v2, v3) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3aae8c.  v1:= temp @kind object;
  #L3aae8e.  call temp:= `add`(v1, v2, v3, v0, v4) @signature `Lorg/joda/time/DateTimeField;.add:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3aae94.  v3:= temp @kind object;
  #L3aae96.  v4:= new `org.joda.time.YearMonth`;
  #L3aae9a.  call `<init>`(v4, v2, v3) @signature `Lorg/joda/time/YearMonth;.<init>:(Lorg/joda/time/YearMonth;[I)V` @kind direct;
  #L3aaea0.  return v4 @kind object;
}
procedure `org.joda.time.YearMonth` `withMonthOfYear`(`org.joda.time.YearMonth` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/YearMonth;.withMonthOfYear:(I)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3aaeb4.  call temp:= `getValues`(v3) @signature `Lorg/joda/time/base/BasePartial;.getValues:()[I` @kind virtual;
  #L3aaeba.  v0:= temp @kind object;
  #L3aaebc.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BasePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3aaec2.  v1:= temp @kind object;
  #L3aaec4.  call temp:= `monthOfYear`(v1) @signature `Lorg/joda/time/Chronology;.monthOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3aaeca.  v1:= temp @kind object;
  #L3aaecc.  v2:= 1I;
  #L3aaece.  call temp:= `set`(v1, v3, v2, v0, v4) @signature `Lorg/joda/time/DateTimeField;.set:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3aaed4.  v4:= temp @kind object;
  #L3aaed6.  v0:= new `org.joda.time.YearMonth`;
  #L3aaeda.  call `<init>`(v0, v3, v4) @signature `Lorg/joda/time/YearMonth;.<init>:(Lorg/joda/time/YearMonth;[I)V` @kind direct;
  #L3aaee0.  return v0 @kind object;
}
procedure `org.joda.time.YearMonth` `withPeriodAdded`(`org.joda.time.YearMonth` v5 @kind this, `org.joda.time.ReadablePeriod` v6 @kind object, `int` v7 ) @signature `Lorg/joda/time/YearMonth;.withPeriodAdded:(Lorg/joda/time/ReadablePeriod;I)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3aaef4.  if v6 == 0 then goto L3aaf5a;
  #L3aaef8.  if v7 != 0 then goto L3aaefe;
  #L3aaefc.  goto L3aaf5a;
  #L3aaefe.  call temp:= `getValues`(v5) @signature `Lorg/joda/time/base/BasePartial;.getValues:()[I` @kind virtual;
  #L3aaf04.  v0:= temp @kind object;
  #L3aaf06.  v1:= 0I;
  #L3aaf08.  call temp:= `size`(v6) @signature `Lorg/joda/time/ReadablePeriod;.size:()I` @kind interface;
  #L3aaf0e.  v2:= temp;
  #L3aaf10.  if v1 >= v2 then goto L3aaf4e;
  #L3aaf14.  call temp:= `getFieldType`(v6, v1) @signature `Lorg/joda/time/ReadablePeriod;.getFieldType:(I)Lorg/joda/time/DurationFieldType;` @kind interface;
  #L3aaf1a.  v2:= temp @kind object;
  #L3aaf1c.  call temp:= `indexOf`(v5, v2) @signature `Lorg/joda/time/base/AbstractPartial;.indexOf:(Lorg/joda/time/DurationFieldType;)I` @kind virtual;
  #L3aaf22.  v2:= temp;
  #L3aaf24.  if v2 < 0 then goto L3aaf48;
  #L3aaf28.  call temp:= `getField`(v5, v2) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3aaf2e.  v3:= temp @kind object;
  #L3aaf30.  call temp:= `getValue`(v6, v1) @signature `Lorg/joda/time/ReadablePeriod;.getValue:(I)I` @kind interface;
  #L3aaf36.  v4:= temp;
  #L3aaf38.  call temp:= `safeMultiply`(v4, v7) @signature `Lorg/joda/time/field/FieldUtils;.safeMultiply:(II)I` @kind static;
  #L3aaf3e.  v4:= temp;
  #L3aaf40.  call temp:= `add`(v3, v5, v2, v0, v4) @signature `Lorg/joda/time/DateTimeField;.add:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3aaf46.  v0:= temp @kind object;
  #L3aaf48.  v1:= v1 + 1;
  #L3aaf4c.  goto L3aaf08;
  #L3aaf4e.  v6:= new `org.joda.time.YearMonth`;
  #L3aaf52.  call `<init>`(v6, v5, v0) @signature `Lorg/joda/time/YearMonth;.<init>:(Lorg/joda/time/YearMonth;[I)V` @kind direct;
  #L3aaf58.  return v6 @kind object;
  #L3aaf5a.  return v5 @kind object;
}
procedure `org.joda.time.YearMonth` `withYear`(`org.joda.time.YearMonth` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/YearMonth;.withYear:(I)Lorg/joda/time/YearMonth;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3aaf6c.  call temp:= `getValues`(v3) @signature `Lorg/joda/time/base/BasePartial;.getValues:()[I` @kind virtual;
  #L3aaf72.  v0:= temp @kind object;
  #L3aaf74.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BasePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3aaf7a.  v1:= temp @kind object;
  #L3aaf7c.  call temp:= `year`(v1) @signature `Lorg/joda/time/Chronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3aaf82.  v1:= temp @kind object;
  #L3aaf84.  v2:= 0I;
  #L3aaf86.  call temp:= `set`(v1, v3, v2, v0, v4) @signature `Lorg/joda/time/DateTimeField;.set:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3aaf8c.  v4:= temp @kind object;
  #L3aaf8e.  v0:= new `org.joda.time.YearMonth`;
  #L3aaf92.  call `<init>`(v0, v3, v4) @signature `Lorg/joda/time/YearMonth;.<init>:(Lorg/joda/time/YearMonth;[I)V` @kind direct;
  #L3aaf98.  return v0 @kind object;
}
procedure `org.joda.time.YearMonth$Property` `year`(`org.joda.time.YearMonth` v2 @kind this) @signature `Lorg/joda/time/YearMonth;.year:()Lorg/joda/time/YearMonth$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3aaff0.  v0:= new `org.joda.time.YearMonth$Property`;
  #L3aaff4.  v1:= 0I;
  #L3aaff6.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/YearMonth$Property;.<init>:(Lorg/joda/time/YearMonth;I)V` @kind direct;
  #L3aaffc.  return v0 @kind object;
}
