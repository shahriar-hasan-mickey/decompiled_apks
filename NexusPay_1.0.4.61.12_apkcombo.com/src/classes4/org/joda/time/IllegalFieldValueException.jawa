record `org.joda.time.IllegalFieldValueException` @kind class @AccessFlag PUBLIC extends `java.lang.IllegalArgumentException` @kind class {
  `org.joda.time.DateTimeFieldType` `org.joda.time.IllegalFieldValueException.iDateTimeFieldType` @AccessFlag PRIVATE_FINAL;
  `org.joda.time.DurationFieldType` `org.joda.time.IllegalFieldValueException.iDurationFieldType` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.joda.time.IllegalFieldValueException.iFieldName` @AccessFlag PRIVATE_FINAL;
  `java.lang.Number` `org.joda.time.IllegalFieldValueException.iLowerBound` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.joda.time.IllegalFieldValueException.iMessage` @AccessFlag PRIVATE;
  `java.lang.Number` `org.joda.time.IllegalFieldValueException.iNumberValue` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.joda.time.IllegalFieldValueException.iStringValue` @AccessFlag PRIVATE_FINAL;
  `java.lang.Number` `org.joda.time.IllegalFieldValueException.iUpperBound` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@org.joda.time.IllegalFieldValueException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.IllegalFieldValueException` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.Number` v4 @kind object, `java.lang.Number` v5 @kind object, `java.lang.Number` v6 @kind object) @signature `Lorg/joda/time/IllegalFieldValueException;.<init>:(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L39b254.  v0:= 0I;
  #L39b256.  call temp:= `createMessage`(v3, v4, v5, v6, v0) @signature `Lorg/joda/time/IllegalFieldValueException;.createMessage:(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L39b25c.  v1:= temp @kind object;
  #L39b25e.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39b264.  v2.`org.joda.time.IllegalFieldValueException.iDateTimeFieldType` @type ^`org.joda.time.DateTimeFieldType` := v0 @kind object;
  #L39b268.  v2.`org.joda.time.IllegalFieldValueException.iDurationFieldType` @type ^`org.joda.time.DurationFieldType` := v0 @kind object;
  #L39b26c.  v2.`org.joda.time.IllegalFieldValueException.iFieldName` @type ^`java.lang.String` := v3 @kind object;
  #L39b270.  v2.`org.joda.time.IllegalFieldValueException.iNumberValue` @type ^`java.lang.Number` := v4 @kind object;
  #L39b274.  v2.`org.joda.time.IllegalFieldValueException.iStringValue` @type ^`java.lang.String` := v0 @kind object;
  #L39b278.  v2.`org.joda.time.IllegalFieldValueException.iLowerBound` @type ^`java.lang.Number` := v5 @kind object;
  #L39b27c.  v2.`org.joda.time.IllegalFieldValueException.iUpperBound` @type ^`java.lang.Number` := v6 @kind object;
  #L39b280.  call temp:= `getMessage`(v2) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind super;
  #L39b286.  v3:= temp @kind object;
  #L39b288.  v2.`org.joda.time.IllegalFieldValueException.iMessage` @type ^`java.lang.String` := v3 @kind object;
  #L39b28c.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.IllegalFieldValueException` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/joda/time/IllegalFieldValueException;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39b2a0.  call temp:= `createMessage`(v2, v3) @signature `Lorg/joda/time/IllegalFieldValueException;.createMessage:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L39b2a6.  v0:= temp @kind object;
  #L39b2a8.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39b2ae.  v0:= 0I;
  #L39b2b0.  v1.`org.joda.time.IllegalFieldValueException.iDateTimeFieldType` @type ^`org.joda.time.DateTimeFieldType` := v0 @kind object;
  #L39b2b4.  v1.`org.joda.time.IllegalFieldValueException.iDurationFieldType` @type ^`org.joda.time.DurationFieldType` := v0 @kind object;
  #L39b2b8.  v1.`org.joda.time.IllegalFieldValueException.iFieldName` @type ^`java.lang.String` := v2 @kind object;
  #L39b2bc.  v1.`org.joda.time.IllegalFieldValueException.iStringValue` @type ^`java.lang.String` := v3 @kind object;
  #L39b2c0.  v1.`org.joda.time.IllegalFieldValueException.iNumberValue` @type ^`java.lang.Number` := v0 @kind object;
  #L39b2c4.  v1.`org.joda.time.IllegalFieldValueException.iLowerBound` @type ^`java.lang.Number` := v0 @kind object;
  #L39b2c8.  v1.`org.joda.time.IllegalFieldValueException.iUpperBound` @type ^`java.lang.Number` := v0 @kind object;
  #L39b2cc.  call temp:= `getMessage`(v1) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind super;
  #L39b2d2.  v2:= temp @kind object;
  #L39b2d4.  v1.`org.joda.time.IllegalFieldValueException.iMessage` @type ^`java.lang.String` := v2 @kind object;
  #L39b2d8.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.IllegalFieldValueException` v2 @kind this, `org.joda.time.DateTimeFieldType` v3 @kind object, `java.lang.Number` v4 @kind object, `java.lang.Number` v5 @kind object, `java.lang.Number` v6 @kind object) @signature `Lorg/joda/time/IllegalFieldValueException;.<init>:(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L39b2ec.  call temp:= `getName`(v3) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L39b2f2.  v0:= temp @kind object;
  #L39b2f4.  v1:= 0I;
  #L39b2f6.  call temp:= `createMessage`(v0, v4, v5, v6, v1) @signature `Lorg/joda/time/IllegalFieldValueException;.createMessage:(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L39b2fc.  v0:= temp @kind object;
  #L39b2fe.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39b304.  v2.`org.joda.time.IllegalFieldValueException.iDateTimeFieldType` @type ^`org.joda.time.DateTimeFieldType` := v3 @kind object;
  #L39b308.  v2.`org.joda.time.IllegalFieldValueException.iDurationFieldType` @type ^`org.joda.time.DurationFieldType` := v1 @kind object;
  #L39b30c.  call temp:= `getName`(v3) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L39b312.  v3:= temp @kind object;
  #L39b314.  v2.`org.joda.time.IllegalFieldValueException.iFieldName` @type ^`java.lang.String` := v3 @kind object;
  #L39b318.  v2.`org.joda.time.IllegalFieldValueException.iNumberValue` @type ^`java.lang.Number` := v4 @kind object;
  #L39b31c.  v2.`org.joda.time.IllegalFieldValueException.iStringValue` @type ^`java.lang.String` := v1 @kind object;
  #L39b320.  v2.`org.joda.time.IllegalFieldValueException.iLowerBound` @type ^`java.lang.Number` := v5 @kind object;
  #L39b324.  v2.`org.joda.time.IllegalFieldValueException.iUpperBound` @type ^`java.lang.Number` := v6 @kind object;
  #L39b328.  call temp:= `getMessage`(v2) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind super;
  #L39b32e.  v3:= temp @kind object;
  #L39b330.  v2.`org.joda.time.IllegalFieldValueException.iMessage` @type ^`java.lang.String` := v3 @kind object;
  #L39b334.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.IllegalFieldValueException` v2 @kind this, `org.joda.time.DateTimeFieldType` v3 @kind object, `java.lang.Number` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/joda/time/IllegalFieldValueException;.<init>:(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L39b348.  call temp:= `getName`(v3) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L39b34e.  v0:= temp @kind object;
  #L39b350.  v1:= 0I;
  #L39b352.  call temp:= `createMessage`(v0, v4, v1, v1, v5) @signature `Lorg/joda/time/IllegalFieldValueException;.createMessage:(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L39b358.  v5:= temp @kind object;
  #L39b35a.  call `<init>`(v2, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39b360.  v2.`org.joda.time.IllegalFieldValueException.iDateTimeFieldType` @type ^`org.joda.time.DateTimeFieldType` := v3 @kind object;
  #L39b364.  v2.`org.joda.time.IllegalFieldValueException.iDurationFieldType` @type ^`org.joda.time.DurationFieldType` := v1 @kind object;
  #L39b368.  call temp:= `getName`(v3) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L39b36e.  v3:= temp @kind object;
  #L39b370.  v2.`org.joda.time.IllegalFieldValueException.iFieldName` @type ^`java.lang.String` := v3 @kind object;
  #L39b374.  v2.`org.joda.time.IllegalFieldValueException.iNumberValue` @type ^`java.lang.Number` := v4 @kind object;
  #L39b378.  v2.`org.joda.time.IllegalFieldValueException.iStringValue` @type ^`java.lang.String` := v1 @kind object;
  #L39b37c.  v2.`org.joda.time.IllegalFieldValueException.iLowerBound` @type ^`java.lang.Number` := v1 @kind object;
  #L39b380.  v2.`org.joda.time.IllegalFieldValueException.iUpperBound` @type ^`java.lang.Number` := v1 @kind object;
  #L39b384.  call temp:= `getMessage`(v2) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind super;
  #L39b38a.  v3:= temp @kind object;
  #L39b38c.  v2.`org.joda.time.IllegalFieldValueException.iMessage` @type ^`java.lang.String` := v3 @kind object;
  #L39b390.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.IllegalFieldValueException` v1 @kind this, `org.joda.time.DateTimeFieldType` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/joda/time/IllegalFieldValueException;.<init>:(Lorg/joda/time/DateTimeFieldType;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39b3a4.  call temp:= `getName`(v2) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L39b3aa.  v0:= temp @kind object;
  #L39b3ac.  call temp:= `createMessage`(v0, v3) @signature `Lorg/joda/time/IllegalFieldValueException;.createMessage:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L39b3b2.  v0:= temp @kind object;
  #L39b3b4.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39b3ba.  v1.`org.joda.time.IllegalFieldValueException.iDateTimeFieldType` @type ^`org.joda.time.DateTimeFieldType` := v2 @kind object;
  #L39b3be.  v0:= 0I;
  #L39b3c0.  v1.`org.joda.time.IllegalFieldValueException.iDurationFieldType` @type ^`org.joda.time.DurationFieldType` := v0 @kind object;
  #L39b3c4.  call temp:= `getName`(v2) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L39b3ca.  v2:= temp @kind object;
  #L39b3cc.  v1.`org.joda.time.IllegalFieldValueException.iFieldName` @type ^`java.lang.String` := v2 @kind object;
  #L39b3d0.  v1.`org.joda.time.IllegalFieldValueException.iStringValue` @type ^`java.lang.String` := v3 @kind object;
  #L39b3d4.  v1.`org.joda.time.IllegalFieldValueException.iNumberValue` @type ^`java.lang.Number` := v0 @kind object;
  #L39b3d8.  v1.`org.joda.time.IllegalFieldValueException.iLowerBound` @type ^`java.lang.Number` := v0 @kind object;
  #L39b3dc.  v1.`org.joda.time.IllegalFieldValueException.iUpperBound` @type ^`java.lang.Number` := v0 @kind object;
  #L39b3e0.  call temp:= `getMessage`(v1) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind super;
  #L39b3e6.  v2:= temp @kind object;
  #L39b3e8.  v1.`org.joda.time.IllegalFieldValueException.iMessage` @type ^`java.lang.String` := v2 @kind object;
  #L39b3ec.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.IllegalFieldValueException` v2 @kind this, `org.joda.time.DurationFieldType` v3 @kind object, `java.lang.Number` v4 @kind object, `java.lang.Number` v5 @kind object, `java.lang.Number` v6 @kind object) @signature `Lorg/joda/time/IllegalFieldValueException;.<init>:(Lorg/joda/time/DurationFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L39b400.  call temp:= `getName`(v3) @signature `Lorg/joda/time/DurationFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L39b406.  v0:= temp @kind object;
  #L39b408.  v1:= 0I;
  #L39b40a.  call temp:= `createMessage`(v0, v4, v5, v6, v1) @signature `Lorg/joda/time/IllegalFieldValueException;.createMessage:(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L39b410.  v0:= temp @kind object;
  #L39b412.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39b418.  v2.`org.joda.time.IllegalFieldValueException.iDateTimeFieldType` @type ^`org.joda.time.DateTimeFieldType` := v1 @kind object;
  #L39b41c.  v2.`org.joda.time.IllegalFieldValueException.iDurationFieldType` @type ^`org.joda.time.DurationFieldType` := v3 @kind object;
  #L39b420.  call temp:= `getName`(v3) @signature `Lorg/joda/time/DurationFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L39b426.  v3:= temp @kind object;
  #L39b428.  v2.`org.joda.time.IllegalFieldValueException.iFieldName` @type ^`java.lang.String` := v3 @kind object;
  #L39b42c.  v2.`org.joda.time.IllegalFieldValueException.iNumberValue` @type ^`java.lang.Number` := v4 @kind object;
  #L39b430.  v2.`org.joda.time.IllegalFieldValueException.iStringValue` @type ^`java.lang.String` := v1 @kind object;
  #L39b434.  v2.`org.joda.time.IllegalFieldValueException.iLowerBound` @type ^`java.lang.Number` := v5 @kind object;
  #L39b438.  v2.`org.joda.time.IllegalFieldValueException.iUpperBound` @type ^`java.lang.Number` := v6 @kind object;
  #L39b43c.  call temp:= `getMessage`(v2) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind super;
  #L39b442.  v3:= temp @kind object;
  #L39b444.  v2.`org.joda.time.IllegalFieldValueException.iMessage` @type ^`java.lang.String` := v3 @kind object;
  #L39b448.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.IllegalFieldValueException` v1 @kind this, `org.joda.time.DurationFieldType` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/joda/time/IllegalFieldValueException;.<init>:(Lorg/joda/time/DurationFieldType;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39b45c.  call temp:= `getName`(v2) @signature `Lorg/joda/time/DurationFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L39b462.  v0:= temp @kind object;
  #L39b464.  call temp:= `createMessage`(v0, v3) @signature `Lorg/joda/time/IllegalFieldValueException;.createMessage:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L39b46a.  v0:= temp @kind object;
  #L39b46c.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39b472.  v0:= 0I;
  #L39b474.  v1.`org.joda.time.IllegalFieldValueException.iDateTimeFieldType` @type ^`org.joda.time.DateTimeFieldType` := v0 @kind object;
  #L39b478.  v1.`org.joda.time.IllegalFieldValueException.iDurationFieldType` @type ^`org.joda.time.DurationFieldType` := v2 @kind object;
  #L39b47c.  call temp:= `getName`(v2) @signature `Lorg/joda/time/DurationFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L39b482.  v2:= temp @kind object;
  #L39b484.  v1.`org.joda.time.IllegalFieldValueException.iFieldName` @type ^`java.lang.String` := v2 @kind object;
  #L39b488.  v1.`org.joda.time.IllegalFieldValueException.iStringValue` @type ^`java.lang.String` := v3 @kind object;
  #L39b48c.  v1.`org.joda.time.IllegalFieldValueException.iNumberValue` @type ^`java.lang.Number` := v0 @kind object;
  #L39b490.  v1.`org.joda.time.IllegalFieldValueException.iLowerBound` @type ^`java.lang.Number` := v0 @kind object;
  #L39b494.  v1.`org.joda.time.IllegalFieldValueException.iUpperBound` @type ^`java.lang.Number` := v0 @kind object;
  #L39b498.  call temp:= `getMessage`(v1) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind super;
  #L39b49e.  v2:= temp @kind object;
  #L39b4a0.  v1.`org.joda.time.IllegalFieldValueException.iMessage` @type ^`java.lang.String` := v2 @kind object;
  #L39b4a4.  return @kind void;
}
procedure `java.lang.String` `createMessage`(`java.lang.String` v2 @kind object, `java.lang.Number` v3 @kind object, `java.lang.Number` v4 @kind object, `java.lang.Number` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lorg/joda/time/IllegalFieldValueException;.createMessage:(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L39b074.  v0:= new `java.lang.StringBuilder`;
  #L39b078.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39b07e.  v1:= "Value " @kind object;
  #L39b082.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b088.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b08e.  v3:= " for " @kind object;
  #L39b092.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b098.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b09e.  v2:= 32I;
  #L39b0a2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b0a8.  if v4 != 0 then goto L39b0ce;
  #L39b0ac.  if v5 != 0 then goto L39b0bc;
  #L39b0b0.  v2:= "is not supported" @kind object;
  #L39b0b4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b0ba.  goto L39b10e;
  #L39b0bc.  v2:= "must not be larger than " @kind object;
  #L39b0c0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b0c6.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b0cc.  goto L39b10e;
  #L39b0ce.  if v5 != 0 then goto L39b0e4;
  #L39b0d2.  v2:= "must not be smaller than " @kind object;
  #L39b0d6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b0dc.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b0e2.  goto L39b10e;
  #L39b0e4.  v2:= "must be in the range [" @kind object;
  #L39b0e8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b0ee.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b0f4.  v2:= 44I;
  #L39b0f8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b0fe.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b104.  v2:= 93I;
  #L39b108.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b10e.  if v6 == 0 then goto L39b122;
  #L39b112.  v2:= ": " @kind object;
  #L39b116.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b11c.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b122.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39b128.  v2:= temp @kind object;
  #L39b12a.  return v2 @kind object;
}
procedure `java.lang.String` `createMessage`(`java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/joda/time/IllegalFieldValueException;.createMessage:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L39b13c.  v0:= new `java.lang.StringBuffer`;
  #L39b140.  call `<init>`(v0) @signature `Ljava/lang/StringBuffer;.<init>:()V` @kind direct;
  #L39b146.  v1:= "Value " @kind object;
  #L39b14a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L39b150.  if v3 != 0 then goto L39b160;
  #L39b154.  v3:= "null" @kind object;
  #L39b158.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L39b15e.  goto L39b176;
  #L39b160.  v1:= 34I;
  #L39b164.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L39b16a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L39b170.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L39b176.  v3:= " for " @kind object;
  #L39b17a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L39b180.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L39b186.  v2:= 32I;
  #L39b18a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L39b190.  v2:= "is not supported" @kind object;
  #L39b194.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L39b19a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L39b1a0.  v2:= temp @kind object;
  #L39b1a2.  return v2 @kind object;
}
procedure `org.joda.time.DateTimeFieldType` `getDateTimeFieldType`(`org.joda.time.IllegalFieldValueException` v1 @kind this) @signature `Lorg/joda/time/IllegalFieldValueException;.getDateTimeFieldType:()Lorg/joda/time/DateTimeFieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39b224.  v0:= v1.`org.joda.time.IllegalFieldValueException.iDateTimeFieldType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L39b228.  return v0 @kind object;
}
procedure `org.joda.time.DurationFieldType` `getDurationFieldType`(`org.joda.time.IllegalFieldValueException` v1 @kind this) @signature `Lorg/joda/time/IllegalFieldValueException;.getDurationFieldType:()Lorg/joda/time/DurationFieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39b23c.  v0:= v1.`org.joda.time.IllegalFieldValueException.iDurationFieldType` @type ^`org.joda.time.DurationFieldType` @kind object;
  #L39b240.  return v0 @kind object;
}
procedure `java.lang.String` `getFieldName`(`org.joda.time.IllegalFieldValueException` v1 @kind this) @signature `Lorg/joda/time/IllegalFieldValueException;.getFieldName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39b1b4.  v0:= v1.`org.joda.time.IllegalFieldValueException.iFieldName` @type ^`java.lang.String` @kind object;
  #L39b1b8.  return v0 @kind object;
}
procedure `java.lang.Number` `getIllegalNumberValue`(`org.joda.time.IllegalFieldValueException` v1 @kind this) @signature `Lorg/joda/time/IllegalFieldValueException;.getIllegalNumberValue:()Ljava/lang/Number;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39b02c.  v0:= v1.`org.joda.time.IllegalFieldValueException.iNumberValue` @type ^`java.lang.Number` @kind object;
  #L39b030.  return v0 @kind object;
}
procedure `java.lang.String` `getIllegalStringValue`(`org.joda.time.IllegalFieldValueException` v1 @kind this) @signature `Lorg/joda/time/IllegalFieldValueException;.getIllegalStringValue:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39b1cc.  v0:= v1.`org.joda.time.IllegalFieldValueException.iStringValue` @type ^`java.lang.String` @kind object;
  #L39b1d0.  return v0 @kind object;
}
procedure `java.lang.String` `getIllegalValueAsString`(`org.joda.time.IllegalFieldValueException` v1 @kind this) @signature `Lorg/joda/time/IllegalFieldValueException;.getIllegalValueAsString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39b1e4.  v0:= v1.`org.joda.time.IllegalFieldValueException.iStringValue` @type ^`java.lang.String` @kind object;
  #L39b1e8.  if v0 != 0 then goto L39b1f8;
  #L39b1ec.  v0:= v1.`org.joda.time.IllegalFieldValueException.iNumberValue` @type ^`java.lang.Number` @kind object;
  #L39b1f0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L39b1f6.  v0:= temp @kind object;
  #L39b1f8.  return v0 @kind object;
}
procedure `java.lang.Number` `getLowerBound`(`org.joda.time.IllegalFieldValueException` v1 @kind this) @signature `Lorg/joda/time/IllegalFieldValueException;.getLowerBound:()Ljava/lang/Number;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39b044.  v0:= v1.`org.joda.time.IllegalFieldValueException.iLowerBound` @type ^`java.lang.Number` @kind object;
  #L39b048.  return v0 @kind object;
}
procedure `java.lang.String` `getMessage`(`org.joda.time.IllegalFieldValueException` v1 @kind this) @signature `Lorg/joda/time/IllegalFieldValueException;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39b20c.  v0:= v1.`org.joda.time.IllegalFieldValueException.iMessage` @type ^`java.lang.String` @kind object;
  #L39b210.  return v0 @kind object;
}
procedure `java.lang.Number` `getUpperBound`(`org.joda.time.IllegalFieldValueException` v1 @kind this) @signature `Lorg/joda/time/IllegalFieldValueException;.getUpperBound:()Ljava/lang/Number;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39b05c.  v0:= v1.`org.joda.time.IllegalFieldValueException.iUpperBound` @type ^`java.lang.Number` @kind object;
  #L39b060.  return v0 @kind object;
}
procedure `void` `prependMessage`(`org.joda.time.IllegalFieldValueException` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/joda/time/IllegalFieldValueException;.prependMessage:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L39b4b8.  v0:= v1.`org.joda.time.IllegalFieldValueException.iMessage` @type ^`java.lang.String` @kind object;
  #L39b4bc.  if v0 != 0 then goto L39b4c6;
  #L39b4c0.  v1.`org.joda.time.IllegalFieldValueException.iMessage` @type ^`java.lang.String` := v2 @kind object;
  #L39b4c4.  goto L39b4fa;
  #L39b4c6.  if v2 == 0 then goto L39b4fa;
  #L39b4ca.  v0:= new `java.lang.StringBuilder`;
  #L39b4ce.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39b4d4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b4da.  v2:= ": " @kind object;
  #L39b4de.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b4e4.  v2:= v1.`org.joda.time.IllegalFieldValueException.iMessage` @type ^`java.lang.String` @kind object;
  #L39b4e8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39b4ee.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39b4f4.  v2:= temp @kind object;
  #L39b4f6.  v1.`org.joda.time.IllegalFieldValueException.iMessage` @type ^`java.lang.String` := v2 @kind object;
  #L39b4fa.  return @kind void;
}
