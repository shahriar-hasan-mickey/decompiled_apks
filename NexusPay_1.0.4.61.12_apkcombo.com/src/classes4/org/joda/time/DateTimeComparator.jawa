record `org.joda.time.DateTimeComparator` @kind class @AccessFlag PUBLIC extends `java.util.Comparator` @kind interface, `java.io.Serializable` @kind interface {
  `org.joda.time.DateTimeFieldType` `org.joda.time.DateTimeComparator.iLowerLimit` @AccessFlag PRIVATE_FINAL;
  `org.joda.time.DateTimeFieldType` `org.joda.time.DateTimeComparator.iUpperLimit` @AccessFlag PRIVATE_FINAL;
}
global `org.joda.time.DateTimeComparator` `@@org.joda.time.DateTimeComparator.ALL_INSTANCE` @AccessFlag PRIVATE_STATIC_FINAL;
global `org.joda.time.DateTimeComparator` `@@org.joda.time.DateTimeComparator.DATE_INSTANCE` @AccessFlag PRIVATE_STATIC_FINAL;
global `org.joda.time.DateTimeComparator` `@@org.joda.time.DateTimeComparator.TIME_INSTANCE` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.DateTimeComparator.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/DateTimeComparator;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L39602c.  v0:= new `org.joda.time.DateTimeComparator`;
  #L396030.  v1:= 0I;
  #L396032.  call `<init>`(v0, v1, v1) @signature `Lorg/joda/time/DateTimeComparator;.<init>:(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DateTimeFieldType;)V` @kind direct;
  #L396038.  `@@org.joda.time.DateTimeComparator.ALL_INSTANCE` @type ^`org.joda.time.DateTimeComparator` := v0 @kind object;
  #L39603c.  v0:= new `org.joda.time.DateTimeComparator`;
  #L396040.  call temp:= `dayOfYear`() @signature `Lorg/joda/time/DateTimeFieldType;.dayOfYear:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L396046.  v2:= temp @kind object;
  #L396048.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/DateTimeComparator;.<init>:(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DateTimeFieldType;)V` @kind direct;
  #L39604e.  `@@org.joda.time.DateTimeComparator.DATE_INSTANCE` @type ^`org.joda.time.DateTimeComparator` := v0 @kind object;
  #L396052.  v0:= new `org.joda.time.DateTimeComparator`;
  #L396056.  call temp:= `dayOfYear`() @signature `Lorg/joda/time/DateTimeFieldType;.dayOfYear:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L39605c.  v2:= temp @kind object;
  #L39605e.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/DateTimeComparator;.<init>:(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DateTimeFieldType;)V` @kind direct;
  #L396064.  `@@org.joda.time.DateTimeComparator.TIME_INSTANCE` @type ^`org.joda.time.DateTimeComparator` := v0 @kind object;
  #L396068.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.DateTimeComparator` v0 @kind this, `org.joda.time.DateTimeFieldType` v1 @kind object, `org.joda.time.DateTimeFieldType` v2 @kind object) @signature `Lorg/joda/time/DateTimeComparator;.<init>:(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DateTimeFieldType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L39607c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L396082.  v0.`org.joda.time.DateTimeComparator.iLowerLimit` @type ^`org.joda.time.DateTimeFieldType` := v1 @kind object;
  #L396086.  v0.`org.joda.time.DateTimeComparator.iUpperLimit` @type ^`org.joda.time.DateTimeFieldType` := v2 @kind object;
  #L39608a.  return @kind void;
}
procedure `org.joda.time.DateTimeComparator` `getDateOnlyInstance`() @signature `Lorg/joda/time/DateTimeComparator;.getDateOnlyInstance:()Lorg/joda/time/DateTimeComparator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L395f40.  v0:= `@@org.joda.time.DateTimeComparator.DATE_INSTANCE` @type ^`org.joda.time.DateTimeComparator` @kind object;
  #L395f44.  return v0 @kind object;
}
procedure `org.joda.time.DateTimeComparator` `getInstance`() @signature `Lorg/joda/time/DateTimeComparator;.getInstance:()Lorg/joda/time/DateTimeComparator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L395f58.  v0:= `@@org.joda.time.DateTimeComparator.ALL_INSTANCE` @type ^`org.joda.time.DateTimeComparator` @kind object;
  #L395f5c.  return v0 @kind object;
}
procedure `org.joda.time.DateTimeComparator` `getInstance`(`org.joda.time.DateTimeFieldType` v1 @kind object) @signature `Lorg/joda/time/DateTimeComparator;.getInstance:(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/DateTimeComparator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L395f70.  v0:= 0I;
  #L395f72.  call temp:= `getInstance`(v1, v0) @signature `Lorg/joda/time/DateTimeComparator;.getInstance:(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/DateTimeComparator;` @kind static;
  #L395f78.  v1:= temp @kind object;
  #L395f7a.  return v1 @kind object;
}
procedure `org.joda.time.DateTimeComparator` `getInstance`(`org.joda.time.DateTimeFieldType` v1 @kind object, `org.joda.time.DateTimeFieldType` v2 @kind object) @signature `Lorg/joda/time/DateTimeComparator;.getInstance:(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/DateTimeComparator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L395f8c.  if v1 != 0 then goto L395f9a;
  #L395f90.  if v2 != 0 then goto L395f9a;
  #L395f94.  v1:= `@@org.joda.time.DateTimeComparator.ALL_INSTANCE` @type ^`org.joda.time.DateTimeComparator` @kind object;
  #L395f98.  return v1 @kind object;
  #L395f9a.  call temp:= `dayOfYear`() @signature `Lorg/joda/time/DateTimeFieldType;.dayOfYear:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L395fa0.  v0:= temp @kind object;
  #L395fa2.  if v1 != v0 then goto L395fb0;
  #L395fa6.  if v2 != 0 then goto L395fb0;
  #L395faa.  v1:= `@@org.joda.time.DateTimeComparator.DATE_INSTANCE` @type ^`org.joda.time.DateTimeComparator` @kind object;
  #L395fae.  return v1 @kind object;
  #L395fb0.  if v1 != 0 then goto L395fc6;
  #L395fb4.  call temp:= `dayOfYear`() @signature `Lorg/joda/time/DateTimeFieldType;.dayOfYear:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L395fba.  v0:= temp @kind object;
  #L395fbc.  if v2 != v0 then goto L395fc6;
  #L395fc0.  v1:= `@@org.joda.time.DateTimeComparator.TIME_INSTANCE` @type ^`org.joda.time.DateTimeComparator` @kind object;
  #L395fc4.  return v1 @kind object;
  #L395fc6.  v0:= new `org.joda.time.DateTimeComparator`;
  #L395fca.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/DateTimeComparator;.<init>:(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DateTimeFieldType;)V` @kind direct;
  #L395fd0.  return v0 @kind object;
}
procedure `org.joda.time.DateTimeComparator` `getTimeOnlyInstance`() @signature `Lorg/joda/time/DateTimeComparator;.getTimeOnlyInstance:()Lorg/joda/time/DateTimeComparator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L395fe4.  v0:= `@@org.joda.time.DateTimeComparator.TIME_INSTANCE` @type ^`org.joda.time.DateTimeComparator` @kind object;
  #L395fe8.  return v0 @kind object;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.DateTimeComparator` v2 @kind this) @signature `Lorg/joda/time/DateTimeComparator;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L395e60.  v0:= v2.`org.joda.time.DateTimeComparator.iLowerLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395e64.  v1:= v2.`org.joda.time.DateTimeComparator.iUpperLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395e68.  call temp:= `getInstance`(v0, v1) @signature `Lorg/joda/time/DateTimeComparator;.getInstance:(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/DateTimeComparator;` @kind static;
  #L395e6e.  v0:= temp @kind object;
  #L395e70.  return v0 @kind object;
}
procedure `int` `compare`(`org.joda.time.DateTimeComparator` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lorg/joda/time/DateTimeComparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L395d5c.  call temp:= `getInstance`() @signature `Lorg/joda/time/convert/ConverterManager;.getInstance:()Lorg/joda/time/convert/ConverterManager;` @kind static;
  #L395d62.  v0:= temp @kind object;
  #L395d64.  call temp:= `getInstantConverter`(v0, v6) @signature `Lorg/joda/time/convert/ConverterManager;.getInstantConverter:(Ljava/lang/Object;)Lorg/joda/time/convert/InstantConverter;` @kind virtual;
  #L395d6a.  v0:= temp @kind object;
  #L395d6c.  v1:= 0I;
  #L395d6e.  call temp:= `getChronology`(v0, v6, v1) @signature `Lorg/joda/time/convert/InstantConverter;.getChronology:(Ljava/lang/Object;Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind interface;
  #L395d74.  v2:= temp @kind object;
  #L395d76.  call temp:= `getInstantMillis`(v0, v6, v2) @signature `Lorg/joda/time/convert/InstantConverter;.getInstantMillis:(Ljava/lang/Object;Lorg/joda/time/Chronology;)J` @kind interface;
  #L395d7c.  v3:= temp @kind wide;
  #L395d7e.  call temp:= `getInstance`() @signature `Lorg/joda/time/convert/ConverterManager;.getInstance:()Lorg/joda/time/convert/ConverterManager;` @kind static;
  #L395d84.  v6:= temp @kind object;
  #L395d86.  call temp:= `getInstantConverter`(v6, v7) @signature `Lorg/joda/time/convert/ConverterManager;.getInstantConverter:(Ljava/lang/Object;)Lorg/joda/time/convert/InstantConverter;` @kind virtual;
  #L395d8c.  v6:= temp @kind object;
  #L395d8e.  call temp:= `getChronology`(v6, v7, v1) @signature `Lorg/joda/time/convert/InstantConverter;.getChronology:(Ljava/lang/Object;Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind interface;
  #L395d94.  v0:= temp @kind object;
  #L395d96.  call temp:= `getInstantMillis`(v6, v7, v0) @signature `Lorg/joda/time/convert/InstantConverter;.getInstantMillis:(Ljava/lang/Object;Lorg/joda/time/Chronology;)J` @kind interface;
  #L395d9c.  v6:= temp @kind wide;
  #L395d9e.  v1:= v5.`org.joda.time.DateTimeComparator.iLowerLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395da2.  if v1 == 0 then goto L395dca;
  #L395da6.  call temp:= `getField`(v1, v2) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L395dac.  v1:= temp @kind object;
  #L395dae.  call temp:= `roundFloor`(v1, v3) @signature `Lorg/joda/time/DateTimeField;.roundFloor:(J)J` @kind virtual;
  #L395db4.  v3:= temp @kind wide;
  #L395db6.  v1:= v5.`org.joda.time.DateTimeComparator.iLowerLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395dba.  call temp:= `getField`(v1, v0) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L395dc0.  v1:= temp @kind object;
  #L395dc2.  call temp:= `roundFloor`(v1, v6) @signature `Lorg/joda/time/DateTimeField;.roundFloor:(J)J` @kind virtual;
  #L395dc8.  v6:= temp @kind wide;
  #L395dca.  v1:= v5.`org.joda.time.DateTimeComparator.iUpperLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395dce.  if v1 == 0 then goto L395df6;
  #L395dd2.  call temp:= `getField`(v1, v2) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L395dd8.  v1:= temp @kind object;
  #L395dda.  call temp:= `remainder`(v1, v3) @signature `Lorg/joda/time/DateTimeField;.remainder:(J)J` @kind virtual;
  #L395de0.  v3:= temp @kind wide;
  #L395de2.  v1:= v5.`org.joda.time.DateTimeComparator.iUpperLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395de6.  call temp:= `getField`(v1, v0) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L395dec.  v0:= temp @kind object;
  #L395dee.  call temp:= `remainder`(v0, v6) @signature `Lorg/joda/time/DateTimeField;.remainder:(J)J` @kind virtual;
  #L395df4.  v6:= temp @kind wide;
  #L395df6.  v0:= lcmp(v3, v6);
  #L395dfa.  if v0 >= 0 then goto L395e02;
  #L395dfe.  v6:= -1I;
  #L395e00.  return v6;
  #L395e02.  if v0 <= 0 then goto L395e0a;
  #L395e06.  v6:= 1I;
  #L395e08.  return v6;
  #L395e0a.  v6:= 0I;
  #L395e0c.  return v6;
}
procedure `boolean` `equals`(`org.joda.time.DateTimeComparator` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lorg/joda/time/DateTimeComparator;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L395ce0.  v0:= instanceof @variable v4 @type ^`org.joda.time.DateTimeComparator` @kind boolean;
  #L395ce4.  v1:= 0I;
  #L395ce6.  if v0 == 0 then goto L395d48;
  #L395cea.  v4:= (`org.joda.time.DateTimeComparator`) v4 @kind object;
  #L395cee.  v0:= v3.`org.joda.time.DateTimeComparator.iLowerLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395cf2.  call temp:= `getLowerLimit`(v4) @signature `Lorg/joda/time/DateTimeComparator;.getLowerLimit:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L395cf8.  v2:= temp @kind object;
  #L395cfa.  if v0 == v2 then goto L395d1a;
  #L395cfe.  v0:= v3.`org.joda.time.DateTimeComparator.iLowerLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395d02.  if v0 == 0 then goto L395d48;
  #L395d06.  call temp:= `getLowerLimit`(v4) @signature `Lorg/joda/time/DateTimeComparator;.getLowerLimit:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L395d0c.  v2:= temp @kind object;
  #L395d0e.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L395d14.  v0:= temp;
  #L395d16.  if v0 == 0 then goto L395d48;
  #L395d1a.  v0:= v3.`org.joda.time.DateTimeComparator.iUpperLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395d1e.  call temp:= `getUpperLimit`(v4) @signature `Lorg/joda/time/DateTimeComparator;.getUpperLimit:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L395d24.  v2:= temp @kind object;
  #L395d26.  if v0 == v2 then goto L395d46;
  #L395d2a.  v0:= v3.`org.joda.time.DateTimeComparator.iUpperLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395d2e.  if v0 == 0 then goto L395d48;
  #L395d32.  call temp:= `getUpperLimit`(v4) @signature `Lorg/joda/time/DateTimeComparator;.getUpperLimit:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L395d38.  v4:= temp @kind object;
  #L395d3a.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L395d40.  v4:= temp;
  #L395d42.  if v4 == 0 then goto L395d48;
  #L395d46.  v1:= 1I;
  #L395d48.  return v1;
}
procedure `org.joda.time.DateTimeFieldType` `getLowerLimit`(`org.joda.time.DateTimeComparator` v1 @kind this) @signature `Lorg/joda/time/DateTimeComparator;.getLowerLimit:()Lorg/joda/time/DateTimeFieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L395ffc.  v0:= v1.`org.joda.time.DateTimeComparator.iLowerLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L396000.  return v0 @kind object;
}
procedure `org.joda.time.DateTimeFieldType` `getUpperLimit`(`org.joda.time.DateTimeComparator` v1 @kind this) @signature `Lorg/joda/time/DateTimeComparator;.getUpperLimit:()Lorg/joda/time/DateTimeFieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L396014.  v0:= v1.`org.joda.time.DateTimeComparator.iUpperLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L396018.  return v0 @kind object;
}
procedure `int` `hashCode`(`org.joda.time.DateTimeComparator` v3 @kind this) @signature `Lorg/joda/time/DateTimeComparator;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L395e20.  v0:= v3.`org.joda.time.DateTimeComparator.iLowerLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395e24.  v1:= 0I;
  #L395e26.  if v0 != 0 then goto L395e2e;
  #L395e2a.  v0:= 0I;
  #L395e2c.  goto L395e36;
  #L395e2e.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L395e34.  v0:= temp;
  #L395e36.  v2:= v3.`org.joda.time.DateTimeComparator.iUpperLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395e3a.  if v2 != 0 then goto L395e40;
  #L395e3e.  goto L395e48;
  #L395e40.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L395e46.  v1:= temp;
  #L395e48.  v1:= v1 * 123;
  #L395e4c.  v0:= v0 + v1 @kind int;
  #L395e4e.  return v0;
}
procedure `java.lang.String` `toString`(`org.joda.time.DateTimeComparator` v5 @kind this) @signature `Lorg/joda/time/DateTimeComparator;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L395e84.  v0:= v5.`org.joda.time.DateTimeComparator.iLowerLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395e88.  v1:= v5.`org.joda.time.DateTimeComparator.iUpperLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395e8c.  v2:= "]" @kind object;
  #L395e90.  v3:= "DateTimeComparator[" @kind object;
  #L395e94.  v4:= "" @kind object;
  #L395e98.  if v0 != v1 then goto L395ed4;
  #L395e9c.  v0:= new `java.lang.StringBuilder`;
  #L395ea0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L395ea6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L395eac.  v1:= v5.`org.joda.time.DateTimeComparator.iLowerLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395eb0.  if v1 != 0 then goto L395eb6;
  #L395eb4.  goto L395ebe;
  #L395eb6.  call temp:= `getName`(v1) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L395ebc.  v4:= temp @kind object;
  #L395ebe.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L395ec4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L395eca.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L395ed0.  v0:= temp @kind object;
  #L395ed2.  return v0 @kind object;
  #L395ed4.  v0:= new `java.lang.StringBuilder`;
  #L395ed8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L395ede.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L395ee4.  v1:= v5.`org.joda.time.DateTimeComparator.iLowerLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395ee8.  if v1 != 0 then goto L395ef0;
  #L395eec.  v1:= v4 @kind object;
  #L395eee.  goto L395ef8;
  #L395ef0.  call temp:= `getName`(v1) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L395ef6.  v1:= temp @kind object;
  #L395ef8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L395efe.  v1:= "-" @kind object;
  #L395f02.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L395f08.  v1:= v5.`org.joda.time.DateTimeComparator.iUpperLimit` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L395f0c.  if v1 != 0 then goto L395f12;
  #L395f10.  goto L395f1a;
  #L395f12.  call temp:= `getName`(v1) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L395f18.  v4:= temp @kind object;
  #L395f1a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L395f20.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L395f26.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L395f2c.  v0:= temp @kind object;
  #L395f2e.  return v0 @kind object;
}
