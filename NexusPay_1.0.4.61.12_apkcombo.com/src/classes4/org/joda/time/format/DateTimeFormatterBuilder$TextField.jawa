record `org.joda.time.format.DateTimeFormatterBuilder$TextField` @kind class @AccessFlag  extends `org.joda.time.format.InternalPrinter` @kind interface, `org.joda.time.format.InternalParser` @kind interface {
  `org.joda.time.DateTimeFieldType` `org.joda.time.format.DateTimeFormatterBuilder$TextField.iFieldType` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.joda.time.format.DateTimeFormatterBuilder$TextField.iShort` @AccessFlag PRIVATE_FINAL;
}
global `java.util.Map` `@@org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TextField;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3c2068.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L3c206c.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L3c2072.  `@@org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache` @type ^`java.util.Map` := v0 @kind object;
  #L3c2076.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.format.DateTimeFormatterBuilder$TextField` v0 @kind this, `org.joda.time.DateTimeFieldType` v1 @kind object, `boolean` v2 ) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TextField;.<init>:(Lorg/joda/time/DateTimeFieldType;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3c2088.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c208e.  v0.`org.joda.time.format.DateTimeFormatterBuilder$TextField.iFieldType` @type ^`org.joda.time.DateTimeFieldType` := v1 @kind object;
  #L3c2092.  v0.`org.joda.time.format.DateTimeFormatterBuilder$TextField.iShort` @type ^`boolean` := v2 @kind boolean;
  #L3c2096.  return @kind void;
}
procedure `java.lang.String` `print`(`org.joda.time.format.DateTimeFormatterBuilder$TextField` v1 @kind this, `long` v2 , `org.joda.time.Chronology` v4 @kind object, `java.util.Locale` v5 @kind object) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TextField;.print:(JLorg/joda/time/Chronology;Ljava/util/Locale;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3c1fd8.  v0:= v1.`org.joda.time.format.DateTimeFormatterBuilder$TextField.iFieldType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L3c1fdc.  call temp:= `getField`(v0, v4) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3c1fe2.  v4:= temp @kind object;
  #L3c1fe4.  v0:= v1.`org.joda.time.format.DateTimeFormatterBuilder$TextField.iShort` @type ^`boolean` @kind boolean;
  #L3c1fe8.  if v0 == 0 then goto L3c1ff6;
  #L3c1fec.  call temp:= `getAsShortText`(v4, v2, v5) @signature `Lorg/joda/time/DateTimeField;.getAsShortText:(JLjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3c1ff2.  v2:= temp @kind object;
  #L3c1ff4.  return v2 @kind object;
  #L3c1ff6.  call temp:= `getAsText`(v4, v2, v5) @signature `Lorg/joda/time/DateTimeField;.getAsText:(JLjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3c1ffc.  v2:= temp @kind object;
  #L3c1ffe.  return v2 @kind object;
}
procedure `java.lang.String` `print`(`org.joda.time.format.DateTimeFormatterBuilder$TextField` v2 @kind this, `org.joda.time.ReadablePartial` v3 @kind object, `java.util.Locale` v4 @kind object) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TextField;.print:(Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3c2010.  v0:= v2.`org.joda.time.format.DateTimeFormatterBuilder$TextField.iFieldType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L3c2014.  call temp:= `isSupported`(v3, v0) @signature `Lorg/joda/time/ReadablePartial;.isSupported:(Lorg/joda/time/DateTimeFieldType;)Z` @kind interface;
  #L3c201a.  v0:= temp;
  #L3c201c.  if v0 == 0 then goto L3c2050;
  #L3c2020.  v0:= v2.`org.joda.time.format.DateTimeFormatterBuilder$TextField.iFieldType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L3c2024.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/ReadablePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3c202a.  v1:= temp @kind object;
  #L3c202c.  call temp:= `getField`(v0, v1) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3c2032.  v0:= temp @kind object;
  #L3c2034.  v1:= v2.`org.joda.time.format.DateTimeFormatterBuilder$TextField.iShort` @type ^`boolean` @kind boolean;
  #L3c2038.  if v1 == 0 then goto L3c2046;
  #L3c203c.  call temp:= `getAsShortText`(v0, v3, v4) @signature `Lorg/joda/time/DateTimeField;.getAsShortText:(Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3c2042.  v3:= temp @kind object;
  #L3c2044.  return v3 @kind object;
  #L3c2046.  call temp:= `getAsText`(v0, v3, v4) @signature `Lorg/joda/time/DateTimeField;.getAsText:(Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3c204c.  v3:= temp @kind object;
  #L3c204e.  return v3 @kind object;
  #L3c2050.  v3:= "ï¿½" @kind object;
  #L3c2054.  return v3 @kind object;
}
procedure `int` `estimateParsedLength`(`org.joda.time.format.DateTimeFormatterBuilder$TextField` v1 @kind this) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TextField;.estimateParsedLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c1d6c.  call temp:= `estimatePrintedLength`(v1) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TextField;.estimatePrintedLength:()I` @kind virtual;
  #L3c1d72.  v0:= temp;
  #L3c1d74.  return v0;
}
procedure `int` `estimatePrintedLength`(`org.joda.time.format.DateTimeFormatterBuilder$TextField` v1 @kind this) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TextField;.estimatePrintedLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c1d88.  v0:= v1.`org.joda.time.format.DateTimeFormatterBuilder$TextField.iShort` @type ^`boolean` @kind boolean;
  #L3c1d8c.  if v0 == 0 then goto L3c1d94;
  #L3c1d90.  v0:= 6I;
  #L3c1d92.  goto L3c1d98;
  #L3c1d94.  v0:= 20I;
  #L3c1d98.  return v0;
}
procedure `int` `parseInto`(`org.joda.time.format.DateTimeFormatterBuilder$TextField` v11 @kind this, `org.joda.time.format.DateTimeParserBucket` v12 @kind object, `java.lang.CharSequence` v13 @kind object, `int` v14 ) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TextField;.parseInto:(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3c1dac.  call temp:= `getLocale`(v12) @signature `Lorg/joda/time/format/DateTimeParserBucket;.getLocale:()Ljava/util/Locale;` @kind virtual;
  #L3c1db2.  v0:= temp @kind object;
  #L3c1db4.  v1:= `@@org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache` @type ^`java.util.Map` @kind object;
  #L3c1db8.  call temp:= `get`(v1, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3c1dbe.  v1:= temp @kind object;
  #L3c1dc0.  v1:= (`java.util.Map`) v1 @kind object;
  #L3c1dc4.  if v1 != 0 then goto L3c1ddc;
  #L3c1dc8.  v1:= new `java.util.concurrent.ConcurrentHashMap`;
  #L3c1dcc.  call `<init>`(v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L3c1dd2.  v2:= `@@org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache` @type ^`java.util.Map` @kind object;
  #L3c1dd6.  call temp:= `put`(v2, v0, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3c1ddc.  v2:= v11.`org.joda.time.format.DateTimeFormatterBuilder$TextField.iFieldType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L3c1de0.  call temp:= `get`(v1, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3c1de6.  v2:= temp @kind object;
  #L3c1de8.  v2:= (`java.lang.Object`[]) v2 @kind object;
  #L3c1dec.  v3:= 0I;
  #L3c1dee.  v4:= 1I;
  #L3c1df0.  if v2 != 0 then goto L3c1f64;
  #L3c1df4.  v2:= new `java.util.concurrent.ConcurrentHashMap`;
  #L3c1df8.  v5:= 32I;
  #L3c1dfc.  call `<init>`(v2, v5) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:(I)V` @kind direct;
  #L3c1e02.  v6:= new `org.joda.time.MutableDateTime`;
  #L3c1e06.  v7:= 0L;
  #L3c1e0a.  v9:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3c1e0e.  call `<init>`(v6, v7, v9) @signature `Lorg/joda/time/MutableDateTime;.<init>:(JLorg/joda/time/DateTimeZone;)V` @kind direct;
  #L3c1e14.  v7:= v11.`org.joda.time.format.DateTimeFormatterBuilder$TextField.iFieldType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L3c1e18.  call temp:= `property`(v6, v7) @signature `Lorg/joda/time/MutableDateTime;.property:(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/MutableDateTime$Property;` @kind virtual;
  #L3c1e1e.  v6:= temp @kind object;
  #L3c1e20.  call temp:= `getMinimumValueOverall`(v6) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMinimumValueOverall:()I` @kind virtual;
  #L3c1e26.  v7:= temp;
  #L3c1e28.  call temp:= `getMaximumValueOverall`(v6) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMaximumValueOverall:()I` @kind virtual;
  #L3c1e2e.  v8:= temp;
  #L3c1e30.  v9:= v8 - v7 @kind int;
  #L3c1e34.  if v9 <= v5 then goto L3c1e3c;
  #L3c1e38.  v12:= ~v14 @kind int;
  #L3c1e3a.  return v12;
  #L3c1e3c.  call temp:= `getMaximumTextLength`(v6, v0) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMaximumTextLength:(Ljava/util/Locale;)I` @kind virtual;
  #L3c1e42.  v5:= temp;
  #L3c1e44.  if v7 > v8 then goto L3c1ee0;
  #L3c1e48.  call temp:= `set`(v6, v7) @signature `Lorg/joda/time/MutableDateTime$Property;.set:(I)Lorg/joda/time/MutableDateTime;` @kind virtual;
  #L3c1e4e.  call temp:= `getAsShortText`(v6, v0) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getAsShortText:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3c1e54.  v9:= temp @kind object;
  #L3c1e56.  v10:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L3c1e5a.  call temp:= `put`(v2, v9, v10) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3c1e60.  call temp:= `getAsShortText`(v6, v0) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getAsShortText:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3c1e66.  v9:= temp @kind object;
  #L3c1e68.  call temp:= `toLowerCase`(v9, v0) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3c1e6e.  v9:= temp @kind object;
  #L3c1e70.  v10:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L3c1e74.  call temp:= `put`(v2, v9, v10) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3c1e7a.  call temp:= `getAsShortText`(v6, v0) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getAsShortText:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3c1e80.  v9:= temp @kind object;
  #L3c1e82.  call temp:= `toUpperCase`(v9, v0) @signature `Ljava/lang/String;.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3c1e88.  v9:= temp @kind object;
  #L3c1e8a.  v10:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L3c1e8e.  call temp:= `put`(v2, v9, v10) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3c1e94.  call temp:= `getAsText`(v6, v0) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getAsText:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3c1e9a.  v9:= temp @kind object;
  #L3c1e9c.  v10:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L3c1ea0.  call temp:= `put`(v2, v9, v10) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3c1ea6.  call temp:= `getAsText`(v6, v0) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getAsText:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3c1eac.  v9:= temp @kind object;
  #L3c1eae.  call temp:= `toLowerCase`(v9, v0) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3c1eb4.  v9:= temp @kind object;
  #L3c1eb6.  v10:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L3c1eba.  call temp:= `put`(v2, v9, v10) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3c1ec0.  call temp:= `getAsText`(v6, v0) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getAsText:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3c1ec6.  v9:= temp @kind object;
  #L3c1ec8.  call temp:= `toUpperCase`(v9, v0) @signature `Ljava/lang/String;.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3c1ece.  v9:= temp @kind object;
  #L3c1ed0.  v10:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L3c1ed4.  call temp:= `put`(v2, v9, v10) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3c1eda.  v7:= v7 + 1;
  #L3c1ede.  goto L3c1e44;
  #L3c1ee0.  call temp:= `getLanguage`(v0) @signature `Ljava/util/Locale;.getLanguage:()Ljava/lang/String;` @kind virtual;
  #L3c1ee6.  v6:= temp @kind object;
  #L3c1ee8.  v7:= "en" @kind object;
  #L3c1eec.  call temp:= `equals`(v7, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3c1ef2.  v6:= temp;
  #L3c1ef4.  if v6 == 0 then goto L3c1f42;
  #L3c1ef8.  v6:= v11.`org.joda.time.format.DateTimeFormatterBuilder$TextField.iFieldType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L3c1efc.  call temp:= `era`() @signature `Lorg/joda/time/DateTimeFieldType;.era:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3c1f02.  v7:= temp @kind object;
  #L3c1f04.  if v6 != v7 then goto L3c1f42;
  #L3c1f08.  v5:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L3c1f0c.  v6:= "BCE" @kind object;
  #L3c1f10.  call temp:= `put`(v2, v6, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3c1f16.  v5:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L3c1f1a.  v6:= "bce" @kind object;
  #L3c1f1e.  call temp:= `put`(v2, v6, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3c1f24.  v5:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L3c1f28.  v6:= "CE" @kind object;
  #L3c1f2c.  call temp:= `put`(v2, v6, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3c1f32.  v5:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L3c1f36.  v6:= "ce" @kind object;
  #L3c1f3a.  call temp:= `put`(v2, v6, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3c1f40.  v5:= 3I;
  #L3c1f42.  v6:= 2I;
  #L3c1f44.  v6:= new `java.lang.Object`[v6];
  #L3c1f48.  v6[v3]:= v2 @kind object;
  #L3c1f4c.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3c1f52.  v3:= temp @kind object;
  #L3c1f54.  v6[v4]:= v3 @kind object;
  #L3c1f58.  v3:= v11.`org.joda.time.format.DateTimeFormatterBuilder$TextField.iFieldType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L3c1f5c.  call temp:= `put`(v1, v3, v6) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3c1f62.  goto L3c1f7e;
  #L3c1f64.  v1:= v2[v3] @kind object;
  #L3c1f68.  v1:= (`java.util.Map`) v1 @kind object;
  #L3c1f6c.  v2:= v2[v4] @kind object;
  #L3c1f70.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L3c1f74.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3c1f7a.  v5:= temp;
  #L3c1f7c.  v2:= v1 @kind object;
  #L3c1f7e.  call temp:= `length`(v13) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3c1f84.  v1:= temp;
  #L3c1f86.  v5:= v5 + v14 @kind int;
  #L3c1f88.  call temp:= `min`(v1, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3c1f8e.  v1:= temp;
  #L3c1f90.  if v1 <= v14 then goto L3c1fc2;
  #L3c1f94.  call temp:= `subSequence`(v13, v14, v1) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L3c1f9a.  v3:= temp @kind object;
  #L3c1f9c.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c1fa2.  v3:= temp @kind object;
  #L3c1fa4.  call temp:= `containsKey`(v2, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L3c1faa.  v4:= temp;
  #L3c1fac.  if v4 == 0 then goto L3c1fbc;
  #L3c1fb0.  v13:= v11.`org.joda.time.format.DateTimeFormatterBuilder$TextField.iFieldType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L3c1fb4.  call `saveField`(v12, v13, v3, v0) @signature `Lorg/joda/time/format/DateTimeParserBucket;.saveField:(Lorg/joda/time/DateTimeFieldType;Ljava/lang/String;Ljava/util/Locale;)V` @kind virtual;
  #L3c1fba.  return v1;
  #L3c1fbc.  v1:= v1 + -1;
  #L3c1fc0.  goto L3c1f90;
  #L3c1fc2.  v12:= ~v14 @kind int;
  #L3c1fc4.  return v12;
}
procedure `void` `printTo`(`org.joda.time.format.DateTimeFormatterBuilder$TextField` v0 @kind this, `java.lang.Appendable` v1 @kind object, `long` v2 , `org.joda.time.Chronology` v4 @kind object, `int` v5 , `org.joda.time.DateTimeZone` v6 @kind object, `java.util.Locale` v7 @kind object) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TextField;.printTo:(Ljava/lang/Appendable;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V` @AccessFlag PUBLIC {
    temp;

  #L3c20a8.  call temp:= `print`(v0, v2, v4, v7) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TextField;.print:(JLorg/joda/time/Chronology;Ljava/util/Locale;)Ljava/lang/String;` @kind direct;
  #L3c20ae.  v2:= temp @kind object;
  #L3c20b0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3c20b6.  goto L3c20c4;
  #L3c20b8.  v2:= 65533I;
  #L3c20be.  call temp:= `append`(v1, v2) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c20c4.  return @kind void;
  catch `java.lang.RuntimeException` @[L3c20a8..L3c20b6] goto L3c20b8;
}
procedure `void` `printTo`(`org.joda.time.format.DateTimeFormatterBuilder$TextField` v0 @kind this, `java.lang.Appendable` v1 @kind object, `org.joda.time.ReadablePartial` v2 @kind object, `java.util.Locale` v3 @kind object) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TextField;.printTo:(Ljava/lang/Appendable;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V` @AccessFlag PUBLIC {
    temp;

  #L3c20e8.  call temp:= `print`(v0, v2, v3) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TextField;.print:(Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)Ljava/lang/String;` @kind direct;
  #L3c20ee.  v2:= temp @kind object;
  #L3c20f0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3c20f6.  goto L3c2104;
  #L3c20f8.  v2:= 65533I;
  #L3c20fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c2104.  return @kind void;
  catch `java.lang.RuntimeException` @[L3c20e8..L3c20f6] goto L3c20f8;
}
