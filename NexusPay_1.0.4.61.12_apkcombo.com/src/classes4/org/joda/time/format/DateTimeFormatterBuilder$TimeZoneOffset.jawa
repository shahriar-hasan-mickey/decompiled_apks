record `org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset` @kind class @AccessFlag  extends `org.joda.time.format.InternalPrinter` @kind interface, `org.joda.time.format.InternalParser` @kind interface {
  `int` `org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iMaxFields` @AccessFlag PRIVATE_FINAL;
  `int` `org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iMinFields` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iShowSeparators` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iZeroOffsetParseText` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iZeroOffsetPrintText` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object, `boolean` v3 , `int` v4 , `int` v5 ) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneOffset;.<init>:(Ljava/lang/String;Ljava/lang/String;ZII)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3c2808.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c280e.  v0.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iZeroOffsetPrintText` @type ^`java.lang.String` := v1 @kind object;
  #L3c2812.  v0.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iZeroOffsetParseText` @type ^`java.lang.String` := v2 @kind object;
  #L3c2816.  v0.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iShowSeparators` @type ^`boolean` := v3 @kind boolean;
  #L3c281a.  if v4 <= 0 then goto L3c2836;
  #L3c281e.  if v5 < v4 then goto L3c2836;
  #L3c2822.  v1:= 4I;
  #L3c2824.  if v4 <= v1 then goto L3c282c;
  #L3c2828.  v4:= 4I;
  #L3c282a.  v5:= 4I;
  #L3c282c.  v0.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iMinFields` @type ^`int` := v4;
  #L3c2830.  v0.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iMaxFields` @type ^`int` := v5;
  #L3c2834.  return @kind void;
  #L3c2836.  v1:= new `java.lang.IllegalArgumentException`;
  #L3c283a.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3c2840.  throw v1;
}
procedure `int` `digitCount`(`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset` v3 @kind this, `java.lang.CharSequence` v4 @kind object, `int` v5 , `int` v6 ) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneOffset;.digitCount:(Ljava/lang/CharSequence;II)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3c24ec.  call temp:= `length`(v4) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3c24f2.  v0:= temp;
  #L3c24f4.  v0:= v0 - v5 @kind int;
  #L3c24f6.  call temp:= `min`(v0, v6) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3c24fc.  v6:= temp;
  #L3c24fe.  v0:= 0I;
  #L3c2500.  if v6 <= 0 then goto L3c252c;
  #L3c2504.  v1:= v5 + v0 @kind int;
  #L3c2508.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c250e.  v1:= temp;
  #L3c2510.  v2:= 48I;
  #L3c2514.  if v1 < v2 then goto L3c252c;
  #L3c2518.  v2:= 57I;
  #L3c251c.  if v1 <= v2 then goto L3c2522;
  #L3c2520.  goto L3c252c;
  #L3c2522.  v0:= v0 + 1;
  #L3c2526.  v6:= v6 + -1;
  #L3c252a.  goto L3c2500;
  #L3c252c.  return v0;
}
procedure `int` `estimateParsedLength`(`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset` v1 @kind this) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneOffset;.estimateParsedLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c2540.  call temp:= `estimatePrintedLength`(v1) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneOffset;.estimatePrintedLength:()I` @kind virtual;
  #L3c2546.  v0:= temp;
  #L3c2548.  return v0;
}
procedure `int` `estimatePrintedLength`(`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset` v3 @kind this) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneOffset;.estimatePrintedLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3c255c.  v0:= v3.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iMinFields` @type ^`int`;
  #L3c2560.  v1:= v0 + 1;
  #L3c2564.  v1:= v1 ^< 1;
  #L3c2568.  v2:= v3.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iShowSeparators` @type ^`boolean` @kind boolean;
  #L3c256c.  if v2 == 0 then goto L3c2576;
  #L3c2570.  v0:= v0 + -1;
  #L3c2574.  v1:= v1 + v0 @kind int;
  #L3c2576.  v0:= v3.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iZeroOffsetPrintText` @type ^`java.lang.String` @kind object;
  #L3c257a.  if v0 == 0 then goto L3c2596;
  #L3c257e.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3c2584.  v0:= temp;
  #L3c2586.  if v0 <= v1 then goto L3c2596;
  #L3c258a.  v0:= v3.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iZeroOffsetPrintText` @type ^`java.lang.String` @kind object;
  #L3c258e.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3c2594.  v1:= temp;
  #L3c2596.  return v1;
}
procedure `int` `parseInto`(`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset` v11 @kind this, `org.joda.time.format.DateTimeParserBucket` v12 @kind object, `java.lang.CharSequence` v13 @kind object, `int` v14 ) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneOffset;.parseInto:(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3c25a8.  call temp:= `length`(v13) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3c25ae.  v0:= temp;
  #L3c25b0.  v0:= v0 - v14 @kind int;
  #L3c25b2.  v1:= v11.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iZeroOffsetParseText` @type ^`java.lang.String` @kind object;
  #L3c25b6.  v2:= 43I;
  #L3c25ba.  v3:= 45I;
  #L3c25be.  v4:= 0I;
  #L3c25c0.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3c25c6.  v5:= temp @kind object;
  #L3c25c8.  if v1 == 0 then goto L3c261c;
  #L3c25cc.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3c25d2.  v1:= temp;
  #L3c25d4.  if v1 != 0 then goto L3c25f6;
  #L3c25d8.  if v0 <= 0 then goto L3c25ee;
  #L3c25dc.  call temp:= `charAt`(v13, v14) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c25e2.  v1:= temp;
  #L3c25e4.  if v1 == v3 then goto L3c261c;
  #L3c25e8.  if v1 != v2 then goto L3c25ee;
  #L3c25ec.  goto L3c261c;
  #L3c25ee.  call `setOffset`(v12, v5) @signature `Lorg/joda/time/format/DateTimeParserBucket;.setOffset:(Ljava/lang/Integer;)V` @kind virtual;
  #L3c25f4.  return v14;
  #L3c25f6.  v1:= v11.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iZeroOffsetParseText` @type ^`java.lang.String` @kind object;
  #L3c25fa.  call temp:= `csStartsWithIgnoreCase`(v13, v14, v1) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder;.csStartsWithIgnoreCase:(Ljava/lang/CharSequence;ILjava/lang/String;)Z` @kind static;
  #L3c2600.  v1:= temp;
  #L3c2602.  if v1 == 0 then goto L3c261c;
  #L3c2606.  call `setOffset`(v12, v5) @signature `Lorg/joda/time/format/DateTimeParserBucket;.setOffset:(Ljava/lang/Integer;)V` @kind virtual;
  #L3c260c.  v12:= v11.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iZeroOffsetParseText` @type ^`java.lang.String` @kind object;
  #L3c2610.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3c2616.  v12:= temp;
  #L3c2618.  v14:= v14 + v12 @kind int;
  #L3c261a.  return v14;
  #L3c261c.  v1:= 1I;
  #L3c261e.  if v0 > v1 then goto L3c2626;
  #L3c2622.  v12:= ~v14 @kind int;
  #L3c2624.  return v12;
  #L3c2626.  call temp:= `charAt`(v13, v14) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c262c.  v5:= temp;
  #L3c262e.  if v5 != v3 then goto L3c2636;
  #L3c2632.  v2:= 1I;
  #L3c2634.  goto L3c263c;
  #L3c2636.  if v5 != v2 then goto L3c27f4;
  #L3c263a.  v2:= 0I;
  #L3c263c.  v0:= v0 + -1;
  #L3c2640.  v14:= v14 + v1 @kind int;
  #L3c2642.  v3:= 2I;
  #L3c2644.  call temp:= `digitCount`(v11, v13, v14, v3) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneOffset;.digitCount:(Ljava/lang/CharSequence;II)I` @kind direct;
  #L3c264a.  v5:= temp;
  #L3c264c.  if v5 >= v3 then goto L3c2654;
  #L3c2650.  v12:= ~v14 @kind int;
  #L3c2652.  return v12;
  #L3c2654.  call temp:= `parseTwoDigits`(v13, v14) @signature `Lorg/joda/time/format/FormatUtils;.parseTwoDigits:(Ljava/lang/CharSequence;I)I` @kind static;
  #L3c265a.  v5:= temp;
  #L3c265c.  v6:= 23I;
  #L3c2660.  if v5 <= v6 then goto L3c2668;
  #L3c2664.  v12:= ~v14 @kind int;
  #L3c2666.  return v12;
  #L3c2668.  v6:= 3600000I;
  #L3c266e.  v5:= v5 * v6 @kind int;
  #L3c2672.  v0:= v0 + -2;
  #L3c2676.  v14:= v14 + v3 @kind int;
  #L3c2678.  if v0 > 0 then goto L3c2680;
  #L3c267c.  goto L3c27de;
  #L3c2680.  call temp:= `charAt`(v13, v14) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c2686.  v6:= temp;
  #L3c2688.  v7:= 58I;
  #L3c268c.  v8:= 48I;
  #L3c2690.  if v6 != v7 then goto L3c26a0;
  #L3c2694.  v0:= v0 + -1;
  #L3c2698.  v14:= v14 + 1;
  #L3c269c.  v4:= 1I;
  #L3c269e.  goto L3c26ac;
  #L3c26a0.  if v6 < v8 then goto L3c27de;
  #L3c26a4.  v9:= 57I;
  #L3c26a8.  if v6 > v9 then goto L3c27de;
  #L3c26ac.  call temp:= `digitCount`(v11, v13, v14, v3) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneOffset;.digitCount:(Ljava/lang/CharSequence;II)I` @kind direct;
  #L3c26b2.  v6:= temp;
  #L3c26b4.  if v6 != 0 then goto L3c26c0;
  #L3c26b8.  if v4 != 0 then goto L3c26c0;
  #L3c26bc.  goto L3c27de;
  #L3c26c0.  if v6 >= v3 then goto L3c26c8;
  #L3c26c4.  v12:= ~v14 @kind int;
  #L3c26c6.  return v12;
  #L3c26c8.  call temp:= `parseTwoDigits`(v13, v14) @signature `Lorg/joda/time/format/FormatUtils;.parseTwoDigits:(Ljava/lang/CharSequence;I)I` @kind static;
  #L3c26ce.  v6:= temp;
  #L3c26d0.  v9:= 59I;
  #L3c26d4.  if v6 <= v9 then goto L3c26dc;
  #L3c26d8.  v12:= ~v14 @kind int;
  #L3c26da.  return v12;
  #L3c26dc.  v10:= 60000I;
  #L3c26e2.  v6:= v6 * v10 @kind int;
  #L3c26e6.  v5:= v5 + v6 @kind int;
  #L3c26e8.  v0:= v0 + -2;
  #L3c26ec.  v14:= v14 + 2;
  #L3c26f0.  if v0 > 0 then goto L3c26f8;
  #L3c26f4.  goto L3c27de;
  #L3c26f8.  if v4 == 0 then goto L3c2714;
  #L3c26fc.  call temp:= `charAt`(v13, v14) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c2702.  v6:= temp;
  #L3c2704.  if v6 == v7 then goto L3c270c;
  #L3c2708.  goto L3c27de;
  #L3c270c.  v0:= v0 + -1;
  #L3c2710.  v14:= v14 + 1;
  #L3c2714.  call temp:= `digitCount`(v11, v13, v14, v3) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneOffset;.digitCount:(Ljava/lang/CharSequence;II)I` @kind direct;
  #L3c271a.  v6:= temp;
  #L3c271c.  if v6 != 0 then goto L3c2726;
  #L3c2720.  if v4 != 0 then goto L3c2726;
  #L3c2724.  goto L3c27de;
  #L3c2726.  if v6 >= v3 then goto L3c272e;
  #L3c272a.  v12:= ~v14 @kind int;
  #L3c272c.  return v12;
  #L3c272e.  call temp:= `parseTwoDigits`(v13, v14) @signature `Lorg/joda/time/format/FormatUtils;.parseTwoDigits:(Ljava/lang/CharSequence;I)I` @kind static;
  #L3c2734.  v6:= temp;
  #L3c2736.  if v6 <= v9 then goto L3c273e;
  #L3c273a.  v12:= ~v14 @kind int;
  #L3c273c.  return v12;
  #L3c273e.  v6:= v6 * 1000;
  #L3c2742.  v5:= v5 + v6 @kind int;
  #L3c2744.  v0:= v0 + -2;
  #L3c2748.  v14:= v14 + 2;
  #L3c274c.  if v0 > 0 then goto L3c2752;
  #L3c2750.  goto L3c27de;
  #L3c2752.  if v4 == 0 then goto L3c277c;
  #L3c2756.  call temp:= `charAt`(v13, v14) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c275c.  v0:= temp;
  #L3c275e.  v6:= 46I;
  #L3c2762.  if v0 == v6 then goto L3c2778;
  #L3c2766.  call temp:= `charAt`(v13, v14) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c276c.  v0:= temp;
  #L3c276e.  v6:= 44I;
  #L3c2772.  if v0 == v6 then goto L3c2778;
  #L3c2776.  goto L3c27de;
  #L3c2778.  v14:= v14 + 1;
  #L3c277c.  v0:= 3I;
  #L3c277e.  call temp:= `digitCount`(v11, v13, v14, v0) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneOffset;.digitCount:(Ljava/lang/CharSequence;II)I` @kind direct;
  #L3c2784.  v0:= temp;
  #L3c2786.  if v0 != 0 then goto L3c2790;
  #L3c278a.  if v4 != 0 then goto L3c2790;
  #L3c278e.  goto L3c27de;
  #L3c2790.  if v0 >= v1 then goto L3c2798;
  #L3c2794.  v12:= ~v14 @kind int;
  #L3c2796.  return v12;
  #L3c2798.  v4:= v14 + 1;
  #L3c279c.  call temp:= `charAt`(v13, v14) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c27a2.  v14:= temp;
  #L3c27a4.  v14:= v14 - v8 @kind int;
  #L3c27a6.  v14:= v14 * 100;
  #L3c27aa.  v5:= v5 + v14 @kind int;
  #L3c27ac.  if v0 <= v1 then goto L3c27dc;
  #L3c27b0.  v14:= v4 + 1;
  #L3c27b4.  call temp:= `charAt`(v13, v4) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c27ba.  v1:= temp;
  #L3c27bc.  v1:= v1 - v8 @kind int;
  #L3c27be.  v1:= v1 * 10;
  #L3c27c2.  v5:= v5 + v1 @kind int;
  #L3c27c4.  if v0 <= v3 then goto L3c27de;
  #L3c27c8.  v0:= v14 + 1;
  #L3c27cc.  call temp:= `charAt`(v13, v14) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c27d2.  v13:= temp;
  #L3c27d4.  v13:= v13 - v8 @kind int;
  #L3c27d6.  v5:= v5 + v13 @kind int;
  #L3c27d8.  v14:= v0;
  #L3c27da.  goto L3c27de;
  #L3c27dc.  v14:= v4;
  #L3c27de.  if v2 == 0 then goto L3c27e4;
  #L3c27e2.  v5:= -v5 @kind int;
  #L3c27e4.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3c27ea.  v13:= temp @kind object;
  #L3c27ec.  call `setOffset`(v12, v13) @signature `Lorg/joda/time/format/DateTimeParserBucket;.setOffset:(Ljava/lang/Integer;)V` @kind virtual;
  #L3c27f2.  return v14;
  #L3c27f4.  v12:= ~v14 @kind int;
  #L3c27f6.  return v12;
}
procedure `void` `printTo`(`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset` v0 @kind this, `java.lang.Appendable` v1 @kind object, `long` v2 , `org.joda.time.Chronology` v4 @kind object, `int` v5 , `org.joda.time.DateTimeZone` v6 @kind object, `java.util.Locale` v7 @kind object) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneOffset;.printTo:(Ljava/lang/Appendable;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V` @AccessFlag PUBLIC {
    temp;

  #L3c2854.  if v6 != 0 then goto L3c285a;
  #L3c2858.  return @kind void;
  #L3c285a.  if v5 != 0 then goto L3c286e;
  #L3c285e.  v2:= v0.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iZeroOffsetPrintText` @type ^`java.lang.String` @kind object;
  #L3c2862.  if v2 == 0 then goto L3c286e;
  #L3c2866.  call temp:= `append`(v1, v2) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3c286c.  return @kind void;
  #L3c286e.  if v5 < 0 then goto L3c287e;
  #L3c2872.  v2:= 43I;
  #L3c2876.  call temp:= `append`(v1, v2) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c287c.  goto L3c288a;
  #L3c287e.  v2:= 45I;
  #L3c2882.  call temp:= `append`(v1, v2) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c2888.  v5:= -v5 @kind int;
  #L3c288a.  v2:= 3600000I;
  #L3c2890.  v3:= v5 / v2 @kind int;
  #L3c2894.  v4:= 2I;
  #L3c2896.  call `appendPaddedInteger`(v1, v3, v4) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/Appendable;II)V` @kind static;
  #L3c289c.  v6:= v0.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iMaxFields` @type ^`int`;
  #L3c28a0.  v7:= 1I;
  #L3c28a2.  if v6 != v7 then goto L3c28a8;
  #L3c28a6.  return @kind void;
  #L3c28a8.  v3:= v3 * v2 @kind int;
  #L3c28ac.  v5:= v5 - v3 @kind int;
  #L3c28ae.  if v5 != 0 then goto L3c28bc;
  #L3c28b2.  v2:= v0.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iMinFields` @type ^`int`;
  #L3c28b6.  if v2 > v7 then goto L3c28bc;
  #L3c28ba.  return @kind void;
  #L3c28bc.  v2:= 60000I;
  #L3c28c2.  v3:= v5 / v2 @kind int;
  #L3c28c6.  v6:= v0.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iShowSeparators` @type ^`boolean` @kind boolean;
  #L3c28ca.  v7:= 58I;
  #L3c28ce.  if v6 == 0 then goto L3c28d8;
  #L3c28d2.  call temp:= `append`(v1, v7) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c28d8.  call `appendPaddedInteger`(v1, v3, v4) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/Appendable;II)V` @kind static;
  #L3c28de.  v6:= v0.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iMaxFields` @type ^`int`;
  #L3c28e2.  if v6 != v4 then goto L3c28e8;
  #L3c28e6.  return @kind void;
  #L3c28e8.  v3:= v3 * v2 @kind int;
  #L3c28ec.  v5:= v5 - v3 @kind int;
  #L3c28ee.  if v5 != 0 then goto L3c28fc;
  #L3c28f2.  v2:= v0.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iMinFields` @type ^`int`;
  #L3c28f6.  if v2 > v4 then goto L3c28fc;
  #L3c28fa.  return @kind void;
  #L3c28fc.  v2:= v5 / 1000;
  #L3c2900.  v3:= v0.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iShowSeparators` @type ^`boolean` @kind boolean;
  #L3c2904.  if v3 == 0 then goto L3c290e;
  #L3c2908.  call temp:= `append`(v1, v7) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c290e.  call `appendPaddedInteger`(v1, v2, v4) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/Appendable;II)V` @kind static;
  #L3c2914.  v3:= v0.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iMaxFields` @type ^`int`;
  #L3c2918.  v4:= 3I;
  #L3c291a.  if v3 != v4 then goto L3c2920;
  #L3c291e.  return @kind void;
  #L3c2920.  v2:= v2 * 1000;
  #L3c2924.  v5:= v5 - v2 @kind int;
  #L3c2926.  if v5 != 0 then goto L3c2934;
  #L3c292a.  v2:= v0.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iMinFields` @type ^`int`;
  #L3c292e.  if v2 > v4 then goto L3c2934;
  #L3c2932.  return @kind void;
  #L3c2934.  v2:= v0.`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iShowSeparators` @type ^`boolean` @kind boolean;
  #L3c2938.  if v2 == 0 then goto L3c2946;
  #L3c293c.  v2:= 46I;
  #L3c2940.  call temp:= `append`(v1, v2) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c2946.  call `appendPaddedInteger`(v1, v5, v4) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/Appendable;II)V` @kind static;
  #L3c294c.  return @kind void;
}
procedure `void` `printTo`(`org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset` v0 @kind this, `java.lang.Appendable` v1 @kind object, `org.joda.time.ReadablePartial` v2 @kind object, `java.util.Locale` v3 @kind object) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneOffset;.printTo:(Ljava/lang/Appendable;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V` @AccessFlag PUBLIC {
    temp;

  #L3c2960.  return @kind void;
}
