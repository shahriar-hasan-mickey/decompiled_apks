record `org.joda.time.format.DateTimeParserBucket` @kind class @AccessFlag PUBLIC {
  `org.joda.time.Chronology` `org.joda.time.format.DateTimeParserBucket.iChrono` @AccessFlag PRIVATE_FINAL;
  `java.lang.Integer` `org.joda.time.format.DateTimeParserBucket.iDefaultPivotYear` @AccessFlag PRIVATE_FINAL;
  `int` `org.joda.time.format.DateTimeParserBucket.iDefaultYear` @AccessFlag PRIVATE_FINAL;
  `org.joda.time.DateTimeZone` `org.joda.time.format.DateTimeParserBucket.iDefaultZone` @AccessFlag PRIVATE_FINAL;
  `java.util.Locale` `org.joda.time.format.DateTimeParserBucket.iLocale` @AccessFlag PRIVATE_FINAL;
  `long` `org.joda.time.format.DateTimeParserBucket.iMillis` @AccessFlag PRIVATE_FINAL;
  `java.lang.Integer` `org.joda.time.format.DateTimeParserBucket.iOffset` @AccessFlag PRIVATE;
  `java.lang.Integer` `org.joda.time.format.DateTimeParserBucket.iPivotYear` @AccessFlag PRIVATE;
  `org.joda.time.format.DateTimeParserBucket$SavedField`[] `org.joda.time.format.DateTimeParserBucket.iSavedFields` @AccessFlag PRIVATE;
  `int` `org.joda.time.format.DateTimeParserBucket.iSavedFieldsCount` @AccessFlag PRIVATE;
  `boolean` `org.joda.time.format.DateTimeParserBucket.iSavedFieldsShared` @AccessFlag PRIVATE;
  `java.lang.Object` `org.joda.time.format.DateTimeParserBucket.iSavedState` @AccessFlag PRIVATE;
  `org.joda.time.DateTimeZone` `org.joda.time.format.DateTimeParserBucket.iZone` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.joda.time.format.DateTimeParserBucket` v7 @kind this, `long` v8 , `org.joda.time.Chronology` v10 @kind object, `java.util.Locale` v11 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.<init>:(JLorg/joda/time/Chronology;Ljava/util/Locale;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3c5418.  v5:= 0I;
  #L3c541a.  v6:= 2000I;
  #L3c541e.  v0:= v7 @kind object;
  #L3c5420.  v1:= v8 @kind wide;
  #L3c5422.  v3:= v10 @kind object;
  #L3c5424.  v4:= v11 @kind object;
  #L3c5426.  call `<init>`(v0, v1, v3, v4, v5, v6) @signature `Lorg/joda/time/format/DateTimeParserBucket;.<init>:(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V` @kind direct;
  #L3c542c.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.format.DateTimeParserBucket` v7 @kind this, `long` v8 , `org.joda.time.Chronology` v10 @kind object, `java.util.Locale` v11 @kind object, `java.lang.Integer` v12 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.<init>:(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3c5440.  v6:= 2000I;
  #L3c5444.  v0:= v7 @kind object;
  #L3c5446.  v1:= v8 @kind wide;
  #L3c5448.  v3:= v10 @kind object;
  #L3c544a.  v4:= v11 @kind object;
  #L3c544c.  v5:= v12 @kind object;
  #L3c544e.  call `<init>`(v0, v1, v3, v4, v5, v6) @signature `Lorg/joda/time/format/DateTimeParserBucket;.<init>:(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V` @kind direct;
  #L3c5454.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.format.DateTimeParserBucket` v0 @kind this, `long` v1 , `org.joda.time.Chronology` v3 @kind object, `java.util.Locale` v4 @kind object, `java.lang.Integer` v5 @kind object, `int` v6 ) @signature `Lorg/joda/time/format/DateTimeParserBucket;.<init>:(JLorg/joda/time/Chronology;Ljava/util/Locale;Ljava/lang/Integer;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3c5468.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c546e.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3c5474.  v3:= temp @kind object;
  #L3c5476.  v0.`org.joda.time.format.DateTimeParserBucket.iMillis` @type ^`long` := v1 @kind wide;
  #L3c547a.  call temp:= `getZone`(v3) @signature `Lorg/joda/time/Chronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3c5480.  v1:= temp @kind object;
  #L3c5482.  v0.`org.joda.time.format.DateTimeParserBucket.iDefaultZone` @type ^`org.joda.time.DateTimeZone` := v1 @kind object;
  #L3c5486.  call temp:= `withUTC`(v3) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3c548c.  v1:= temp @kind object;
  #L3c548e.  v0.`org.joda.time.format.DateTimeParserBucket.iChrono` @type ^`org.joda.time.Chronology` := v1 @kind object;
  #L3c5492.  if v4 != 0 then goto L3c549e;
  #L3c5496.  call temp:= `getDefault`() @signature `Ljava/util/Locale;.getDefault:()Ljava/util/Locale;` @kind static;
  #L3c549c.  v4:= temp @kind object;
  #L3c549e.  v0.`org.joda.time.format.DateTimeParserBucket.iLocale` @type ^`java.util.Locale` := v4 @kind object;
  #L3c54a2.  v0.`org.joda.time.format.DateTimeParserBucket.iDefaultYear` @type ^`int` := v6;
  #L3c54a6.  v0.`org.joda.time.format.DateTimeParserBucket.iDefaultPivotYear` @type ^`java.lang.Integer` := v5 @kind object;
  #L3c54aa.  v1:= v0.`org.joda.time.format.DateTimeParserBucket.iDefaultZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3c54ae.  v0.`org.joda.time.format.DateTimeParserBucket.iZone` @type ^`org.joda.time.DateTimeZone` := v1 @kind object;
  #L3c54b2.  v0.`org.joda.time.format.DateTimeParserBucket.iPivotYear` @type ^`java.lang.Integer` := v5 @kind object;
  #L3c54b6.  v1:= 8I;
  #L3c54ba.  v1:= new `org.joda.time.format.DateTimeParserBucket$SavedField`[v1];
  #L3c54be.  v0.`org.joda.time.format.DateTimeParserBucket.iSavedFields` @type ^`org.joda.time.format.DateTimeParserBucket$SavedField`[] := v1 @kind object;
  #L3c54c2.  return @kind void;
}
procedure `org.joda.time.DateTimeZone` `access$000`(`org.joda.time.format.DateTimeParserBucket` v0 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.access$000:(Lorg/joda/time/format/DateTimeParserBucket;)Lorg/joda/time/DateTimeZone;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3c5330.  v0:= v0.`org.joda.time.format.DateTimeParserBucket.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3c5334.  return v0 @kind object;
}
procedure `org.joda.time.DateTimeZone` `access$002`(`org.joda.time.format.DateTimeParserBucket` v0 @kind object, `org.joda.time.DateTimeZone` v1 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.access$002:(Lorg/joda/time/format/DateTimeParserBucket;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTimeZone;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3c5348.  v0.`org.joda.time.format.DateTimeParserBucket.iZone` @type ^`org.joda.time.DateTimeZone` := v1 @kind object;
  #L3c534c.  return v1 @kind object;
}
procedure `java.lang.Integer` `access$100`(`org.joda.time.format.DateTimeParserBucket` v0 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.access$100:(Lorg/joda/time/format/DateTimeParserBucket;)Ljava/lang/Integer;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3c4fb8.  v0:= v0.`org.joda.time.format.DateTimeParserBucket.iOffset` @type ^`java.lang.Integer` @kind object;
  #L3c4fbc.  return v0 @kind object;
}
procedure `java.lang.Integer` `access$102`(`org.joda.time.format.DateTimeParserBucket` v0 @kind object, `java.lang.Integer` v1 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.access$102:(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/Integer;)Ljava/lang/Integer;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3c4fd0.  v0.`org.joda.time.format.DateTimeParserBucket.iOffset` @type ^`java.lang.Integer` := v1 @kind object;
  #L3c4fd4.  return v1 @kind object;
}
procedure `org.joda.time.format.DateTimeParserBucket$SavedField`[] `access$200`(`org.joda.time.format.DateTimeParserBucket` v0 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.access$200:(Lorg/joda/time/format/DateTimeParserBucket;)[Lorg/joda/time/format/DateTimeParserBucket$SavedField;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3c53e8.  v0:= v0.`org.joda.time.format.DateTimeParserBucket.iSavedFields` @type ^`org.joda.time.format.DateTimeParserBucket$SavedField`[] @kind object;
  #L3c53ec.  return v0 @kind object;
}
procedure `org.joda.time.format.DateTimeParserBucket$SavedField`[] `access$202`(`org.joda.time.format.DateTimeParserBucket` v0 @kind object, `org.joda.time.format.DateTimeParserBucket$SavedField`[] v1 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.access$202:(Lorg/joda/time/format/DateTimeParserBucket;[Lorg/joda/time/format/DateTimeParserBucket$SavedField;)[Lorg/joda/time/format/DateTimeParserBucket$SavedField;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3c5400.  v0.`org.joda.time.format.DateTimeParserBucket.iSavedFields` @type ^`org.joda.time.format.DateTimeParserBucket$SavedField`[] := v1 @kind object;
  #L3c5404.  return v1 @kind object;
}
procedure `int` `access$300`(`org.joda.time.format.DateTimeParserBucket` v0 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.access$300:(Lorg/joda/time/format/DateTimeParserBucket;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3c4f00.  v0:= v0.`org.joda.time.format.DateTimeParserBucket.iSavedFieldsCount` @type ^`int`;
  #L3c4f04.  return v0;
}
procedure `int` `access$302`(`org.joda.time.format.DateTimeParserBucket` v0 @kind object, `int` v1 ) @signature `Lorg/joda/time/format/DateTimeParserBucket;.access$302:(Lorg/joda/time/format/DateTimeParserBucket;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3c4f18.  v0.`org.joda.time.format.DateTimeParserBucket.iSavedFieldsCount` @type ^`int` := v1;
  #L3c4f1c.  return v1;
}
procedure `boolean` `access$402`(`org.joda.time.format.DateTimeParserBucket` v0 @kind object, `boolean` v1 ) @signature `Lorg/joda/time/format/DateTimeParserBucket;.access$402:(Lorg/joda/time/format/DateTimeParserBucket;Z)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L3c4eb0.  v0.`org.joda.time.format.DateTimeParserBucket.iSavedFieldsShared` @type ^`boolean` := v1 @kind boolean;
  #L3c4eb4.  return v1;
}
procedure `int` `compareReverse`(`org.joda.time.DurationField` v1 @kind object, `org.joda.time.DurationField` v2 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.compareReverse:(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I` @AccessFlag STATIC {
    temp;
    v0;

  #L3c4f30.  if v1 == 0 then goto L3c4f64;
  #L3c4f34.  call temp:= `isSupported`(v1) @signature `Lorg/joda/time/DurationField;.isSupported:()Z` @kind virtual;
  #L3c4f3a.  v0:= temp;
  #L3c4f3c.  if v0 != 0 then goto L3c4f42;
  #L3c4f40.  goto L3c4f64;
  #L3c4f42.  if v2 == 0 then goto L3c4f60;
  #L3c4f46.  call temp:= `isSupported`(v2) @signature `Lorg/joda/time/DurationField;.isSupported:()Z` @kind virtual;
  #L3c4f4c.  v0:= temp;
  #L3c4f4e.  if v0 != 0 then goto L3c4f54;
  #L3c4f52.  goto L3c4f60;
  #L3c4f54.  call temp:= `compareTo`(v1, v2) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L3c4f5a.  v1:= temp;
  #L3c4f5c.  v1:= -v1 @kind int;
  #L3c4f5e.  return v1;
  #L3c4f60.  v1:= 1I;
  #L3c4f62.  return v1;
  #L3c4f64.  if v2 == 0 then goto L3c4f7a;
  #L3c4f68.  call temp:= `isSupported`(v2) @signature `Lorg/joda/time/DurationField;.isSupported:()Z` @kind virtual;
  #L3c4f6e.  v1:= temp;
  #L3c4f70.  if v1 != 0 then goto L3c4f76;
  #L3c4f74.  goto L3c4f7a;
  #L3c4f76.  v1:= -1I;
  #L3c4f78.  return v1;
  #L3c4f7a.  v1:= 0I;
  #L3c4f7c.  return v1;
}
procedure `org.joda.time.format.DateTimeParserBucket$SavedField` `obtainSaveField`(`org.joda.time.format.DateTimeParserBucket` v4 @kind this) @signature `Lorg/joda/time/format/DateTimeParserBucket;.obtainSaveField:()Lorg/joda/time/format/DateTimeParserBucket$SavedField;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3c5378.  v0:= v4.`org.joda.time.format.DateTimeParserBucket.iSavedFields` @type ^`org.joda.time.format.DateTimeParserBucket$SavedField`[] @kind object;
  #L3c537c.  v1:= v4.`org.joda.time.format.DateTimeParserBucket.iSavedFieldsCount` @type ^`int`;
  #L3c5380.  v2:= length @variable v0;
  #L3c5382.  if v1 == v2 then goto L3c538e;
  #L3c5386.  v2:= v4.`org.joda.time.format.DateTimeParserBucket.iSavedFieldsShared` @type ^`boolean` @kind boolean;
  #L3c538a.  if v2 == 0 then goto L3c53b2;
  #L3c538e.  v2:= length @variable v0;
  #L3c5390.  if v1 != v2 then goto L3c539a;
  #L3c5394.  v2:= v1 * 2;
  #L3c5398.  goto L3c539c;
  #L3c539a.  v2:= length @variable v0;
  #L3c539c.  v2:= new `org.joda.time.format.DateTimeParserBucket$SavedField`[v2];
  #L3c53a0.  v3:= 0I;
  #L3c53a2.  call `arraycopy`(v0, v3, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3c53a8.  v4.`org.joda.time.format.DateTimeParserBucket.iSavedFields` @type ^`org.joda.time.format.DateTimeParserBucket$SavedField`[] := v2 @kind object;
  #L3c53ac.  v4.`org.joda.time.format.DateTimeParserBucket.iSavedFieldsShared` @type ^`boolean` := v3 @kind boolean;
  #L3c53b0.  v0:= v2 @kind object;
  #L3c53b2.  v2:= 0I;
  #L3c53b4.  v4.`org.joda.time.format.DateTimeParserBucket.iSavedState` @type ^`java.lang.Object` := v2 @kind object;
  #L3c53b8.  v2:= v0[v1] @kind object;
  #L3c53bc.  if v2 != 0 then goto L3c53ce;
  #L3c53c0.  v2:= new `org.joda.time.format.DateTimeParserBucket$SavedField`;
  #L3c53c4.  call `<init>`(v2) @signature `Lorg/joda/time/format/DateTimeParserBucket$SavedField;.<init>:()V` @kind direct;
  #L3c53ca.  v0[v1]:= v2 @kind object;
  #L3c53ce.  v1:= v1 + 1;
  #L3c53d2.  v4.`org.joda.time.format.DateTimeParserBucket.iSavedFieldsCount` @type ^`int` := v1;
  #L3c53d6.  return v2 @kind object;
}
procedure `void` `sort`(`org.joda.time.format.DateTimeParserBucket$SavedField`[] v5 @kind object, `int` v6 ) @signature `Lorg/joda/time/format/DateTimeParserBucket;.sort:([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3c55f8.  v0:= 0I;
  #L3c55fa.  v1:= 10I;
  #L3c55fe.  if v6 <= v1 then goto L3c560a;
  #L3c5602.  call `sort`(v5, v0, v6) @signature `Ljava/util/Arrays;.sort:([Ljava/lang/Object;II)V` @kind static;
  #L3c5608.  goto L3c5648;
  #L3c560a.  if v0 >= v6 then goto L3c5648;
  #L3c560e.  v1:= v0;
  #L3c5610.  if v1 <= 0 then goto L3c5642;
  #L3c5614.  v2:= v1 + -1;
  #L3c5618.  v3:= v5[v2] @kind object;
  #L3c561c.  v4:= v5[v1] @kind object;
  #L3c5620.  call temp:= `compareTo`(v3, v4) @signature `Lorg/joda/time/format/DateTimeParserBucket$SavedField;.compareTo:(Lorg/joda/time/format/DateTimeParserBucket$SavedField;)I` @kind virtual;
  #L3c5626.  v3:= temp;
  #L3c5628.  if v3 <= 0 then goto L3c5642;
  #L3c562c.  v3:= v5[v1] @kind object;
  #L3c5630.  v4:= v5[v2] @kind object;
  #L3c5634.  v5[v1]:= v4 @kind object;
  #L3c5638.  v5[v2]:= v3 @kind object;
  #L3c563c.  v1:= v1 + -1;
  #L3c5640.  goto L3c5610;
  #L3c5642.  v0:= v0 + 1;
  #L3c5646.  goto L3c560a;
  #L3c5648.  return @kind void;
}
procedure `long` `computeMillis`(`org.joda.time.format.DateTimeParserBucket` v2 @kind this) @signature `Lorg/joda/time/format/DateTimeParserBucket;.computeMillis:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3c505c.  v0:= 0I;
  #L3c505e.  v1:= 0I;
  #L3c5060.  call temp:= `computeMillis`(v2, v0, v1) @signature `Lorg/joda/time/format/DateTimeParserBucket;.computeMillis:(ZLjava/lang/CharSequence;)J` @kind virtual;
  #L3c5066.  v0:= temp @kind wide;
  #L3c5068.  return v0 @kind wide;
}
procedure `long` `computeMillis`(`org.joda.time.format.DateTimeParserBucket` v2 @kind this, `boolean` v3 ) @signature `Lorg/joda/time/format/DateTimeParserBucket;.computeMillis:(Z)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3c507c.  v0:= 0I;
  #L3c507e.  call temp:= `computeMillis`(v2, v3, v0) @signature `Lorg/joda/time/format/DateTimeParserBucket;.computeMillis:(ZLjava/lang/CharSequence;)J` @kind virtual;
  #L3c5084.  v0:= temp @kind wide;
  #L3c5086.  return v0 @kind wide;
}
procedure `long` `computeMillis`(`org.joda.time.format.DateTimeParserBucket` v8 @kind this, `boolean` v9 , `java.lang.CharSequence` v10 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.computeMillis:(ZLjava/lang/CharSequence;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3c5098.  v0:= v8.`org.joda.time.format.DateTimeParserBucket.iSavedFields` @type ^`org.joda.time.format.DateTimeParserBucket$SavedField`[] @kind object;
  #L3c509c.  v1:= v8.`org.joda.time.format.DateTimeParserBucket.iSavedFieldsCount` @type ^`int`;
  #L3c50a0.  v2:= v8.`org.joda.time.format.DateTimeParserBucket.iSavedFieldsShared` @type ^`boolean` @kind boolean;
  #L3c50a4.  v3:= 0I;
  #L3c50a6.  if v2 == 0 then goto L3c50be;
  #L3c50aa.  call temp:= `clone`(v0) @signature `[Lorg/joda/time/format/DateTimeParserBucket$SavedField;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3c50b0.  v0:= temp @kind object;
  #L3c50b2.  v0:= (`org.joda.time.format.DateTimeParserBucket$SavedField`[]) v0 @kind object;
  #L3c50b6.  v8.`org.joda.time.format.DateTimeParserBucket.iSavedFields` @type ^`org.joda.time.format.DateTimeParserBucket$SavedField`[] := v0 @kind object;
  #L3c50ba.  v8.`org.joda.time.format.DateTimeParserBucket.iSavedFieldsShared` @type ^`boolean` := v3 @kind boolean;
  #L3c50be.  call `sort`(v0, v1) @signature `Lorg/joda/time/format/DateTimeParserBucket;.sort:([Lorg/joda/time/format/DateTimeParserBucket$SavedField;I)V` @kind static;
  #L3c50c4.  if v1 <= 0 then goto L3c5134;
  #L3c50c8.  call temp:= `months`() @signature `Lorg/joda/time/DurationFieldType;.months:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3c50ce.  v2:= temp @kind object;
  #L3c50d0.  v4:= v8.`org.joda.time.format.DateTimeParserBucket.iChrono` @type ^`org.joda.time.Chronology` @kind object;
  #L3c50d4.  call temp:= `getField`(v2, v4) @signature `Lorg/joda/time/DurationFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;` @kind virtual;
  #L3c50da.  v2:= temp @kind object;
  #L3c50dc.  call temp:= `days`() @signature `Lorg/joda/time/DurationFieldType;.days:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3c50e2.  v4:= temp @kind object;
  #L3c50e4.  v5:= v8.`org.joda.time.format.DateTimeParserBucket.iChrono` @type ^`org.joda.time.Chronology` @kind object;
  #L3c50e8.  call temp:= `getField`(v4, v5) @signature `Lorg/joda/time/DurationFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;` @kind virtual;
  #L3c50ee.  v4:= temp @kind object;
  #L3c50f0.  v5:= v0[v3] @kind object;
  #L3c50f4.  v5:= v5.`org.joda.time.format.DateTimeParserBucket$SavedField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3c50f8.  call temp:= `getDurationField`(v5) @signature `Lorg/joda/time/DateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3c50fe.  v5:= temp @kind object;
  #L3c5100.  call temp:= `compareReverse`(v5, v2) @signature `Lorg/joda/time/format/DateTimeParserBucket;.compareReverse:(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I` @kind static;
  #L3c5106.  v2:= temp;
  #L3c5108.  if v2 < 0 then goto L3c5134;
  #L3c510c.  call temp:= `compareReverse`(v5, v4) @signature `Lorg/joda/time/format/DateTimeParserBucket;.compareReverse:(Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)I` @kind static;
  #L3c5112.  v2:= temp;
  #L3c5114.  if v2 > 0 then goto L3c5134;
  #L3c5118.  call temp:= `year`() @signature `Lorg/joda/time/DateTimeFieldType;.year:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3c511e.  v0:= temp @kind object;
  #L3c5120.  v1:= v8.`org.joda.time.format.DateTimeParserBucket.iDefaultYear` @type ^`int`;
  #L3c5124.  call `saveField`(v8, v0, v1) @signature `Lorg/joda/time/format/DateTimeParserBucket;.saveField:(Lorg/joda/time/DateTimeFieldType;I)V` @kind virtual;
  #L3c512a.  call temp:= `computeMillis`(v8, v9, v10) @signature `Lorg/joda/time/format/DateTimeParserBucket;.computeMillis:(ZLjava/lang/CharSequence;)J` @kind virtual;
  #L3c5130.  v9:= temp @kind wide;
  #L3c5132.  return v9 @kind wide;
  #L3c5134.  v4:= v8.`org.joda.time.format.DateTimeParserBucket.iMillis` @type ^`long` @kind wide;
  #L3c5138.  v2:= 0I;
  #L3c513a.  v6:= "Cannot parse \"" @kind object;
  #L3c513e.  if v2 >= v1 then goto L3c5158;
  #L3c5142.  v7:= v0[v2] @kind object;
  #L3c5146.  call temp:= `set`(v7, v4, v9) @signature `Lorg/joda/time/format/DateTimeParserBucket$SavedField;.set:(JZ)J` @kind virtual;
  #L3c514c.  v4:= temp @kind wide;
  #L3c514e.  v2:= v2 + 1;
  #L3c5152.  goto L3c513a;
  #L3c5154.  v9:= Exception @type ^`org.joda.time.IllegalFieldValueException` @kind object;
  #L3c5156.  goto L3c5182;
  #L3c5158.  if v9 == 0 then goto L3c51b6;
  #L3c515c.  v9:= 0I;
  #L3c515e.  if v9 >= v1 then goto L3c51b6;
  #L3c5162.  v2:= v0[v9] @kind object;
  #L3c5166.  v7:= v1 + -1;
  #L3c516a.  if v9 != v7 then goto L3c5172;
  #L3c516e.  v7:= 1I;
  #L3c5170.  goto L3c5174;
  #L3c5172.  v7:= 0I;
  #L3c5174.  call temp:= `set`(v2, v4, v7) @signature `Lorg/joda/time/format/DateTimeParserBucket$SavedField;.set:(JZ)J` @kind virtual;
  #L3c517a.  v4:= temp @kind wide;
  #L3c517c.  v9:= v9 + 1;
  #L3c5180.  goto L3c515e;
  #L3c5182.  if v10 == 0 then goto L3c51b4;
  #L3c5186.  v0:= new `java.lang.StringBuilder`;
  #L3c518a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3c5190.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c5196.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c519c.  v10:= 34I;
  #L3c51a0.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c51a6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c51ac.  v10:= temp @kind object;
  #L3c51ae.  call `prependMessage`(v9, v10) @signature `Lorg/joda/time/IllegalFieldValueException;.prependMessage:(Ljava/lang/String;)V` @kind virtual;
  #L3c51b4.  throw v9;
  #L3c51b6.  v9:= v8.`org.joda.time.format.DateTimeParserBucket.iOffset` @type ^`java.lang.Integer` @kind object;
  #L3c51ba.  if v9 == 0 then goto L3c51cc;
  #L3c51be.  call temp:= `intValue`(v9) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3c51c4.  v9:= temp;
  #L3c51c6.  v9:= (`long`) v9 @kind i2l;
  #L3c51c8.  v4:= v4 - v9 @kind long;
  #L3c51ca.  goto L3c525e;
  #L3c51cc.  v9:= v8.`org.joda.time.format.DateTimeParserBucket.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3c51d0.  if v9 == 0 then goto L3c525e;
  #L3c51d4.  call temp:= `getOffsetFromLocal`(v9, v4) @signature `Lorg/joda/time/DateTimeZone;.getOffsetFromLocal:(J)I` @kind virtual;
  #L3c51da.  v9:= temp;
  #L3c51dc.  v0:= (`long`) v9 @kind i2l;
  #L3c51de.  v4:= v4 - v0 @kind long;
  #L3c51e0.  v0:= v8.`org.joda.time.format.DateTimeParserBucket.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3c51e4.  call temp:= `getOffset`(v0, v4) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L3c51ea.  v0:= temp;
  #L3c51ec.  if v9 == v0 then goto L3c525e;
  #L3c51f0.  v9:= new `java.lang.StringBuilder`;
  #L3c51f4.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3c51fa.  v0:= "Illegal instant due to time zone offset transition (" @kind object;
  #L3c51fe.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c5204.  v0:= v8.`org.joda.time.format.DateTimeParserBucket.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3c5208.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c520e.  v0:= 41I;
  #L3c5212.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c5218.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c521e.  v9:= temp @kind object;
  #L3c5220.  if v10 == 0 then goto L3c5252;
  #L3c5224.  v0:= new `java.lang.StringBuilder`;
  #L3c5228.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3c522e.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c5234.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c523a.  v10:= "\": " @kind object;
  #L3c523e.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c5244.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c524a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c5250.  v9:= temp @kind object;
  #L3c5252.  v10:= new `org.joda.time.IllegalInstantException`;
  #L3c5256.  call `<init>`(v10, v9) @signature `Lorg/joda/time/IllegalInstantException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3c525c.  throw v10;
  #L3c525e.  return v4 @kind wide;
  catch `org.joda.time.IllegalFieldValueException` @[L3c5142..L3c517c] goto L3c5154;
}
procedure `long` `computeMillis`(`org.joda.time.format.DateTimeParserBucket` v0 @kind this, `boolean` v1 , `java.lang.String` v2 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.computeMillis:(ZLjava/lang/String;)J` @AccessFlag PUBLIC {
    temp;

  #L3c5280.  call temp:= `computeMillis`(v0, v1, v2) @signature `Lorg/joda/time/format/DateTimeParserBucket;.computeMillis:(ZLjava/lang/CharSequence;)J` @kind virtual;
  #L3c5286.  v1:= temp @kind wide;
  #L3c5288.  return v1 @kind wide;
}
procedure `long` `doParseMillis`(`org.joda.time.format.DateTimeParserBucket` v1 @kind this, `org.joda.time.format.InternalParser` v2 @kind object, `java.lang.CharSequence` v3 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.doParseMillis:(Lorg/joda/time/format/InternalParser;Ljava/lang/CharSequence;)J` @AccessFlag  {
    temp;
    v0;

  #L3c529c.  v0:= 0I;
  #L3c529e.  call temp:= `parseInto`(v2, v1, v3, v0) @signature `Lorg/joda/time/format/InternalParser;.parseInto:(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/CharSequence;I)I` @kind interface;
  #L3c52a4.  v2:= temp;
  #L3c52a6.  if v2 < 0 then goto L3c52c2;
  #L3c52aa.  call temp:= `length`(v3) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3c52b0.  v0:= temp;
  #L3c52b2.  if v2 < v0 then goto L3c52c4;
  #L3c52b6.  v2:= 1I;
  #L3c52b8.  call temp:= `computeMillis`(v1, v2, v3) @signature `Lorg/joda/time/format/DateTimeParserBucket;.computeMillis:(ZLjava/lang/CharSequence;)J` @kind virtual;
  #L3c52be.  v2:= temp @kind wide;
  #L3c52c0.  return v2 @kind wide;
  #L3c52c2.  v2:= ~v2 @kind int;
  #L3c52c4.  v0:= new `java.lang.IllegalArgumentException`;
  #L3c52c8.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c52ce.  v3:= temp @kind object;
  #L3c52d0.  call temp:= `createErrorMessage`(v3, v2) @signature `Lorg/joda/time/format/FormatUtils;.createErrorMessage:(Ljava/lang/String;I)Ljava/lang/String;` @kind static;
  #L3c52d6.  v2:= temp @kind object;
  #L3c52d8.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3c52de.  throw v0;
}
procedure `org.joda.time.Chronology` `getChronology`(`org.joda.time.format.DateTimeParserBucket` v1 @kind this) @signature `Lorg/joda/time/format/DateTimeParserBucket;.getChronology:()Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c5318.  v0:= v1.`org.joda.time.format.DateTimeParserBucket.iChrono` @type ^`org.joda.time.Chronology` @kind object;
  #L3c531c.  return v0 @kind object;
}
procedure `java.util.Locale` `getLocale`(`org.joda.time.format.DateTimeParserBucket` v1 @kind this) @signature `Lorg/joda/time/format/DateTimeParserBucket;.getLocale:()Ljava/util/Locale;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c5044.  v0:= v1.`org.joda.time.format.DateTimeParserBucket.iLocale` @type ^`java.util.Locale` @kind object;
  #L3c5048.  return v0 @kind object;
}
procedure `int` `getOffset`(`org.joda.time.format.DateTimeParserBucket` v1 @kind this) @signature `Lorg/joda/time/format/DateTimeParserBucket;.getOffset:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c4f90.  v0:= v1.`org.joda.time.format.DateTimeParserBucket.iOffset` @type ^`java.lang.Integer` @kind object;
  #L3c4f94.  if v0 == 0 then goto L3c4fa2;
  #L3c4f98.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3c4f9e.  v0:= temp;
  #L3c4fa0.  goto L3c4fa4;
  #L3c4fa2.  v0:= 0I;
  #L3c4fa4.  return v0;
}
procedure `java.lang.Integer` `getOffsetInteger`(`org.joda.time.format.DateTimeParserBucket` v1 @kind this) @signature `Lorg/joda/time/format/DateTimeParserBucket;.getOffsetInteger:()Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c4fe8.  v0:= v1.`org.joda.time.format.DateTimeParserBucket.iOffset` @type ^`java.lang.Integer` @kind object;
  #L3c4fec.  return v0 @kind object;
}
procedure `java.lang.Integer` `getPivotYear`(`org.joda.time.format.DateTimeParserBucket` v1 @kind this) @signature `Lorg/joda/time/format/DateTimeParserBucket;.getPivotYear:()Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c5000.  v0:= v1.`org.joda.time.format.DateTimeParserBucket.iPivotYear` @type ^`java.lang.Integer` @kind object;
  #L3c5004.  return v0 @kind object;
}
procedure `org.joda.time.DateTimeZone` `getZone`(`org.joda.time.format.DateTimeParserBucket` v1 @kind this) @signature `Lorg/joda/time/format/DateTimeParserBucket;.getZone:()Lorg/joda/time/DateTimeZone;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c5360.  v0:= v1.`org.joda.time.format.DateTimeParserBucket.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3c5364.  return v0 @kind object;
}
procedure `long` `parseMillis`(`org.joda.time.format.DateTimeParserBucket` v0 @kind this, `org.joda.time.format.DateTimeParser` v1 @kind object, `java.lang.CharSequence` v2 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.parseMillis:(Lorg/joda/time/format/DateTimeParser;Ljava/lang/CharSequence;)J` @AccessFlag PUBLIC {
    temp;

  #L3c52f0.  call `reset`(v0) @signature `Lorg/joda/time/format/DateTimeParserBucket;.reset:()V` @kind virtual;
  #L3c52f6.  call temp:= `of`(v1) @signature `Lorg/joda/time/format/DateTimeParserInternalParser;.of:(Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/InternalParser;` @kind static;
  #L3c52fc.  v1:= temp @kind object;
  #L3c52fe.  call temp:= `doParseMillis`(v0, v1, v2) @signature `Lorg/joda/time/format/DateTimeParserBucket;.doParseMillis:(Lorg/joda/time/format/InternalParser;Ljava/lang/CharSequence;)J` @kind virtual;
  #L3c5304.  v1:= temp @kind wide;
  #L3c5306.  return v1 @kind wide;
}
procedure `void` `reset`(`org.joda.time.format.DateTimeParserBucket` v2 @kind this) @signature `Lorg/joda/time/format/DateTimeParserBucket;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3c54d4.  v0:= v2.`org.joda.time.format.DateTimeParserBucket.iDefaultZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3c54d8.  v2.`org.joda.time.format.DateTimeParserBucket.iZone` @type ^`org.joda.time.DateTimeZone` := v0 @kind object;
  #L3c54dc.  v0:= 0I;
  #L3c54de.  v2.`org.joda.time.format.DateTimeParserBucket.iOffset` @type ^`java.lang.Integer` := v0 @kind object;
  #L3c54e2.  v1:= v2.`org.joda.time.format.DateTimeParserBucket.iDefaultPivotYear` @type ^`java.lang.Integer` @kind object;
  #L3c54e6.  v2.`org.joda.time.format.DateTimeParserBucket.iPivotYear` @type ^`java.lang.Integer` := v1 @kind object;
  #L3c54ea.  v1:= 0I;
  #L3c54ec.  v2.`org.joda.time.format.DateTimeParserBucket.iSavedFieldsCount` @type ^`int` := v1;
  #L3c54f0.  v2.`org.joda.time.format.DateTimeParserBucket.iSavedFieldsShared` @type ^`boolean` := v1 @kind boolean;
  #L3c54f4.  v2.`org.joda.time.format.DateTimeParserBucket.iSavedState` @type ^`java.lang.Object` := v0 @kind object;
  #L3c54f8.  return @kind void;
}
procedure `boolean` `restoreState`(`org.joda.time.format.DateTimeParserBucket` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.restoreState:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c4ec8.  v0:= instanceof @variable v2 @type ^`org.joda.time.format.DateTimeParserBucket$SavedState` @kind boolean;
  #L3c4ecc.  if v0 == 0 then goto L3c4eea;
  #L3c4ed0.  v0:= v2 @kind object;
  #L3c4ed2.  v0:= (`org.joda.time.format.DateTimeParserBucket$SavedState`) v0 @kind object;
  #L3c4ed6.  call temp:= `restoreState`(v0, v1) @signature `Lorg/joda/time/format/DateTimeParserBucket$SavedState;.restoreState:(Lorg/joda/time/format/DateTimeParserBucket;)Z` @kind virtual;
  #L3c4edc.  v0:= temp;
  #L3c4ede.  if v0 == 0 then goto L3c4eea;
  #L3c4ee2.  v1.`org.joda.time.format.DateTimeParserBucket.iSavedState` @type ^`java.lang.Object` := v2 @kind object;
  #L3c4ee6.  v2:= 1I;
  #L3c4ee8.  return v2;
  #L3c4eea.  v2:= 0I;
  #L3c4eec.  return v2;
}
procedure `void` `saveField`(`org.joda.time.format.DateTimeParserBucket` v1 @kind this, `org.joda.time.DateTimeField` v2 @kind object, `int` v3 ) @signature `Lorg/joda/time/format/DateTimeParserBucket;.saveField:(Lorg/joda/time/DateTimeField;I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c550c.  call temp:= `obtainSaveField`(v1) @signature `Lorg/joda/time/format/DateTimeParserBucket;.obtainSaveField:()Lorg/joda/time/format/DateTimeParserBucket$SavedField;` @kind direct;
  #L3c5512.  v0:= temp @kind object;
  #L3c5514.  call `init`(v0, v2, v3) @signature `Lorg/joda/time/format/DateTimeParserBucket$SavedField;.init:(Lorg/joda/time/DateTimeField;I)V` @kind virtual;
  #L3c551a.  return @kind void;
}
procedure `void` `saveField`(`org.joda.time.format.DateTimeParserBucket` v2 @kind this, `org.joda.time.DateTimeFieldType` v3 @kind object, `int` v4 ) @signature `Lorg/joda/time/format/DateTimeParserBucket;.saveField:(Lorg/joda/time/DateTimeFieldType;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3c552c.  call temp:= `obtainSaveField`(v2) @signature `Lorg/joda/time/format/DateTimeParserBucket;.obtainSaveField:()Lorg/joda/time/format/DateTimeParserBucket$SavedField;` @kind direct;
  #L3c5532.  v0:= temp @kind object;
  #L3c5534.  v1:= v2.`org.joda.time.format.DateTimeParserBucket.iChrono` @type ^`org.joda.time.Chronology` @kind object;
  #L3c5538.  call temp:= `getField`(v3, v1) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3c553e.  v3:= temp @kind object;
  #L3c5540.  call `init`(v0, v3, v4) @signature `Lorg/joda/time/format/DateTimeParserBucket$SavedField;.init:(Lorg/joda/time/DateTimeField;I)V` @kind virtual;
  #L3c5546.  return @kind void;
}
procedure `void` `saveField`(`org.joda.time.format.DateTimeParserBucket` v2 @kind this, `org.joda.time.DateTimeFieldType` v3 @kind object, `java.lang.String` v4 @kind object, `java.util.Locale` v5 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.saveField:(Lorg/joda/time/DateTimeFieldType;Ljava/lang/String;Ljava/util/Locale;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3c5558.  call temp:= `obtainSaveField`(v2) @signature `Lorg/joda/time/format/DateTimeParserBucket;.obtainSaveField:()Lorg/joda/time/format/DateTimeParserBucket$SavedField;` @kind direct;
  #L3c555e.  v0:= temp @kind object;
  #L3c5560.  v1:= v2.`org.joda.time.format.DateTimeParserBucket.iChrono` @type ^`org.joda.time.Chronology` @kind object;
  #L3c5564.  call temp:= `getField`(v3, v1) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3c556a.  v3:= temp @kind object;
  #L3c556c.  call `init`(v0, v3, v4, v5) @signature `Lorg/joda/time/format/DateTimeParserBucket$SavedField;.init:(Lorg/joda/time/DateTimeField;Ljava/lang/String;Ljava/util/Locale;)V` @kind virtual;
  #L3c5572.  return @kind void;
}
procedure `java.lang.Object` `saveState`(`org.joda.time.format.DateTimeParserBucket` v1 @kind this) @signature `Lorg/joda/time/format/DateTimeParserBucket;.saveState:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c5018.  v0:= v1.`org.joda.time.format.DateTimeParserBucket.iSavedState` @type ^`java.lang.Object` @kind object;
  #L3c501c.  if v0 != 0 then goto L3c502e;
  #L3c5020.  v0:= new `org.joda.time.format.DateTimeParserBucket$SavedState`;
  #L3c5024.  call `<init>`(v0, v1) @signature `Lorg/joda/time/format/DateTimeParserBucket$SavedState;.<init>:(Lorg/joda/time/format/DateTimeParserBucket;)V` @kind direct;
  #L3c502a.  v1.`org.joda.time.format.DateTimeParserBucket.iSavedState` @type ^`java.lang.Object` := v0 @kind object;
  #L3c502e.  v0:= v1.`org.joda.time.format.DateTimeParserBucket.iSavedState` @type ^`java.lang.Object` @kind object;
  #L3c5032.  return v0 @kind object;
}
procedure `void` `setOffset`(`org.joda.time.format.DateTimeParserBucket` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/format/DateTimeParserBucket;.setOffset:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c5584.  v0:= 0I;
  #L3c5586.  v1.`org.joda.time.format.DateTimeParserBucket.iSavedState` @type ^`java.lang.Object` := v0 @kind object;
  #L3c558a.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3c5590.  v2:= temp @kind object;
  #L3c5592.  v1.`org.joda.time.format.DateTimeParserBucket.iOffset` @type ^`java.lang.Integer` := v2 @kind object;
  #L3c5596.  return @kind void;
}
procedure `void` `setOffset`(`org.joda.time.format.DateTimeParserBucket` v1 @kind this, `java.lang.Integer` v2 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.setOffset:(Ljava/lang/Integer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c55a8.  v0:= 0I;
  #L3c55aa.  v1.`org.joda.time.format.DateTimeParserBucket.iSavedState` @type ^`java.lang.Object` := v0 @kind object;
  #L3c55ae.  v1.`org.joda.time.format.DateTimeParserBucket.iOffset` @type ^`java.lang.Integer` := v2 @kind object;
  #L3c55b2.  return @kind void;
}
procedure `void` `setPivotYear`(`org.joda.time.format.DateTimeParserBucket` v0 @kind this, `java.lang.Integer` v1 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.setPivotYear:(Ljava/lang/Integer;)V` @AccessFlag PUBLIC {
    temp;

  #L3c55c4.  v0.`org.joda.time.format.DateTimeParserBucket.iPivotYear` @type ^`java.lang.Integer` := v1 @kind object;
  #L3c55c8.  return @kind void;
}
procedure `void` `setZone`(`org.joda.time.format.DateTimeParserBucket` v1 @kind this, `org.joda.time.DateTimeZone` v2 @kind object) @signature `Lorg/joda/time/format/DateTimeParserBucket;.setZone:(Lorg/joda/time/DateTimeZone;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c55dc.  v0:= 0I;
  #L3c55de.  v1.`org.joda.time.format.DateTimeParserBucket.iSavedState` @type ^`java.lang.Object` := v0 @kind object;
  #L3c55e2.  v1.`org.joda.time.format.DateTimeParserBucket.iZone` @type ^`org.joda.time.DateTimeZone` := v2 @kind object;
  #L3c55e6.  return @kind void;
}
