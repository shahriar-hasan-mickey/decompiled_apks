record `org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter` @kind class @AccessFlag ABSTRACT extends `org.joda.time.format.InternalPrinter` @kind interface, `org.joda.time.format.InternalParser` @kind interface {
  `org.joda.time.DateTimeFieldType` `org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.iFieldType` @AccessFlag PROTECTED_FINAL;
  `int` `org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.iMaxParsedDigits` @AccessFlag PROTECTED_FINAL;
  `boolean` `org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.iSigned` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter` v0 @kind this, `org.joda.time.DateTimeFieldType` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$NumberFormatter;.<init>:(Lorg/joda/time/DateTimeFieldType;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3c1ba0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c1ba6.  v0.`org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.iFieldType` @type ^`org.joda.time.DateTimeFieldType` := v1 @kind object;
  #L3c1baa.  v0.`org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.iMaxParsedDigits` @type ^`int` := v2;
  #L3c1bae.  v0.`org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.iSigned` @type ^`boolean` := v3 @kind boolean;
  #L3c1bb2.  return @kind void;
}
procedure `int` `estimateParsedLength`(`org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter` v1 @kind this) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$NumberFormatter;.estimateParsedLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c19e4.  v0:= v1.`org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.iMaxParsedDigits` @type ^`int`;
  #L3c19e8.  return v0;
}
procedure `int` `parseInto`(`org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter` v16 @kind this, `org.joda.time.format.DateTimeParserBucket` v17 @kind object, `java.lang.CharSequence` v18 @kind object, `int` v19 ) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$NumberFormatter;.parseInto:(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L3c19fc.  v0:= v16 @kind object;
  #L3c1a00.  v1:= v18 @kind object;
  #L3c1a04.  v2:= v19;
  #L3c1a08.  v3:= v0.`org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.iMaxParsedDigits` @type ^`int`;
  #L3c1a0c.  call temp:= `length`(v18) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3c1a12.  v4:= temp;
  #L3c1a14.  v4:= v4 - v2 @kind int;
  #L3c1a16.  call temp:= `min`(v3, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3c1a1c.  v3:= temp;
  #L3c1a1e.  v4:= 0I;
  #L3c1a20.  v5:= 0I;
  #L3c1a22.  v6:= 0I;
  #L3c1a24.  v7:= 0I;
  #L3c1a26.  v8:= 48I;
  #L3c1a2a.  if v5 >= v3 then goto L3c1ac4;
  #L3c1a2e.  v9:= v2 + v5 @kind int;
  #L3c1a32.  call temp:= `charAt`(v1, v9) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c1a38.  v10:= temp;
  #L3c1a3a.  v11:= 57I;
  #L3c1a3e.  if v5 != 0 then goto L3c1ab4;
  #L3c1a42.  v12:= 43I;
  #L3c1a46.  v13:= 45I;
  #L3c1a4a.  if v10 == v13 then goto L3c1a52;
  #L3c1a4e.  if v10 != v12 then goto L3c1ab4;
  #L3c1a52.  v14:= v0.`org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.iSigned` @type ^`boolean` @kind boolean;
  #L3c1a56.  if v14 == 0 then goto L3c1ab4;
  #L3c1a5a.  v6:= 1I;
  #L3c1a5c.  if v10 != v13 then goto L3c1a64;
  #L3c1a60.  v7:= 1I;
  #L3c1a62.  goto L3c1a66;
  #L3c1a64.  v7:= 0I;
  #L3c1a66.  if v10 != v12 then goto L3c1a6c;
  #L3c1a6a.  goto L3c1a6e;
  #L3c1a6c.  v6:= 0I;
  #L3c1a6e.  v10:= v5 + 1;
  #L3c1a72.  if v10 >= v3 then goto L3c1aac;
  #L3c1a76.  v9:= v9 + 1;
  #L3c1a7a.  call temp:= `charAt`(v1, v9) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c1a80.  v9:= temp;
  #L3c1a82.  if v9 < v8 then goto L3c1aac;
  #L3c1a86.  if v9 <= v11 then goto L3c1a8c;
  #L3c1a8a.  goto L3c1aac;
  #L3c1a8c.  v3:= v3 + 1;
  #L3c1a90.  call temp:= `length`(v18) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3c1a96.  v5:= temp;
  #L3c1a98.  v5:= v5 - v2 @kind int;
  #L3c1a9a.  call temp:= `min`(v3, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3c1aa0.  v3:= temp;
  #L3c1aa2.  v5:= v10;
  #L3c1aa4.  v15:= v7;
  #L3c1aa6.  v7:= v6;
  #L3c1aa8.  v6:= v15;
  #L3c1aaa.  goto L3c1a26;
  #L3c1aac.  v15:= v7;
  #L3c1aae.  v7:= v6;
  #L3c1ab0.  v6:= v15;
  #L3c1ab2.  goto L3c1ac4;
  #L3c1ab4.  if v10 < v8 then goto L3c1ac4;
  #L3c1ab8.  if v10 <= v11 then goto L3c1abe;
  #L3c1abc.  goto L3c1ac4;
  #L3c1abe.  v5:= v5 + 1;
  #L3c1ac2.  goto L3c1a26;
  #L3c1ac4.  if v5 != 0 then goto L3c1acc;
  #L3c1ac8.  v1:= ~v2 @kind int;
  #L3c1aca.  return v1;
  #L3c1acc.  v3:= 9I;
  #L3c1ad0.  if v5 < v3 then goto L3c1b18;
  #L3c1ad4.  if v7 == 0 then goto L3c1af8;
  #L3c1ad8.  v3:= v2 + 1;
  #L3c1adc.  v2:= v2 + v5 @kind int;
  #L3c1ade.  call temp:= `subSequence`(v1, v3, v2) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L3c1ae4.  v1:= temp @kind object;
  #L3c1ae6.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c1aec.  v1:= temp @kind object;
  #L3c1aee.  call temp:= `parseInt`(v1) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L3c1af4.  v1:= temp;
  #L3c1af6.  goto L3c1b6c;
  #L3c1af8.  v3:= v2 + v5 @kind int;
  #L3c1afc.  call temp:= `subSequence`(v1, v2, v3) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L3c1b02.  v1:= temp @kind object;
  #L3c1b04.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c1b0a.  v1:= temp @kind object;
  #L3c1b0c.  call temp:= `parseInt`(v1) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L3c1b12.  v1:= temp;
  #L3c1b14.  v2:= v3;
  #L3c1b16.  goto L3c1b6c;
  #L3c1b18.  if v6 != 0 then goto L3c1b26;
  #L3c1b1c.  if v7 == 0 then goto L3c1b22;
  #L3c1b20.  goto L3c1b26;
  #L3c1b22.  v3:= v2;
  #L3c1b24.  goto L3c1b2a;
  #L3c1b26.  v3:= v2 + 1;
  #L3c1b2a.  v4:= v3 + 1;
  #L3c1b2e.  call temp:= `charAt`(v1, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c1b34.  v3:= temp;
  #L3c1b36.  v3:= v3 - v8 @kind int;
  #L3c1b38.  v2:= v2 + v5 @kind int;
  #L3c1b3a.  if v4 >= v2 then goto L3c1b62;
  #L3c1b3e.  v5:= v3 ^< 3;
  #L3c1b42.  v3:= v3 ^< 1;
  #L3c1b46.  v5:= v5 + v3 @kind int;
  #L3c1b48.  v3:= v4 + 1;
  #L3c1b4c.  call temp:= `charAt`(v1, v4) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c1b52.  v4:= temp;
  #L3c1b54.  v5:= v5 + v4 @kind int;
  #L3c1b56.  v4:= v5 + -48;
  #L3c1b5a.  v15:= v4;
  #L3c1b5c.  v4:= v3;
  #L3c1b5e.  v3:= v15;
  #L3c1b60.  goto L3c1b3a;
  #L3c1b62.  if v6 == 0 then goto L3c1b6a;
  #L3c1b66.  v1:= -v3 @kind int;
  #L3c1b68.  goto L3c1b6c;
  #L3c1b6a.  v1:= v3;
  #L3c1b6c.  v3:= v0.`org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.iFieldType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L3c1b70.  v4:= v17 @kind object;
  #L3c1b74.  call `saveField`(v4, v3, v1) @signature `Lorg/joda/time/format/DateTimeParserBucket;.saveField:(Lorg/joda/time/DateTimeFieldType;I)V` @kind virtual;
  #L3c1b7a.  return v2;
  #L3c1b7c.  v1:= ~v2 @kind int;
  #L3c1b7e.  return v1;
  catch `java.lang.StringIndexOutOfBoundsException` @[L3c1b2e..L3c1b36] goto L3c1b7c;
}
