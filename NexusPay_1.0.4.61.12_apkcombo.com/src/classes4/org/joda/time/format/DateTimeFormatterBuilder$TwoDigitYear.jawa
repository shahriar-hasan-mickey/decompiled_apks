record `org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear` @kind class @AccessFlag  extends `org.joda.time.format.InternalPrinter` @kind interface, `org.joda.time.format.InternalParser` @kind interface {
  `boolean` `org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iLenientParse` @AccessFlag PRIVATE_FINAL;
  `int` `org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iPivot` @AccessFlag PRIVATE_FINAL;
  `org.joda.time.DateTimeFieldType` `org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iType` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear` v0 @kind this, `org.joda.time.DateTimeFieldType` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TwoDigitYear;.<init>:(Lorg/joda/time/DateTimeFieldType;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3c2c08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c2c0e.  v0.`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iType` @type ^`org.joda.time.DateTimeFieldType` := v1 @kind object;
  #L3c2c12.  v0.`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iPivot` @type ^`int` := v2;
  #L3c2c16.  v0.`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iLenientParse` @type ^`boolean` := v3 @kind boolean;
  #L3c2c1a.  return @kind void;
}
procedure `int` `getTwoDigitYear`(`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear` v1 @kind this, `long` v2 , `org.joda.time.Chronology` v4 @kind object) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TwoDigitYear;.getTwoDigitYear:(JLorg/joda/time/Chronology;)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3c29a8.  v0:= v1.`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L3c29ac.  call temp:= `getField`(v0, v4) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3c29b2.  v4:= temp @kind object;
  #L3c29b4.  call temp:= `get`(v4, v2) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3c29ba.  v2:= temp;
  #L3c29bc.  if v2 >= 0 then goto L3c29c2;
  #L3c29c0.  v2:= -v2 @kind int;
  #L3c29c2.  v2:= v2 %% 100;
  #L3c29c6.  return v2;
  #L3c29c8.  v2:= -1I;
  #L3c29ca.  return v2;
  catch `java.lang.RuntimeException` @[L3c29a8..L3c29c6] goto L3c29c8;
}
procedure `int` `getTwoDigitYear`(`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear` v1 @kind this, `org.joda.time.ReadablePartial` v2 @kind object) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TwoDigitYear;.getTwoDigitYear:(Lorg/joda/time/ReadablePartial;)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3c29ec.  v0:= v1.`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L3c29f0.  call temp:= `isSupported`(v2, v0) @signature `Lorg/joda/time/ReadablePartial;.isSupported:(Lorg/joda/time/DateTimeFieldType;)Z` @kind interface;
  #L3c29f6.  v0:= temp;
  #L3c29f8.  if v0 == 0 then goto L3c2a14;
  #L3c29fc.  v0:= v1.`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L3c2a00.  call temp:= `get`(v2, v0) @signature `Lorg/joda/time/ReadablePartial;.get:(Lorg/joda/time/DateTimeFieldType;)I` @kind interface;
  #L3c2a06.  v2:= temp;
  #L3c2a08.  if v2 >= 0 then goto L3c2a0e;
  #L3c2a0c.  v2:= -v2 @kind int;
  #L3c2a0e.  v2:= v2 %% 100;
  #L3c2a12.  return v2;
  #L3c2a14.  v2:= -1I;
  #L3c2a16.  return v2;
  catch `java.lang.RuntimeException` @[L3c29fc..L3c2a12] goto L3c2a14;
}
procedure `int` `estimateParsedLength`(`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear` v1 @kind this) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TwoDigitYear;.estimateParsedLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c2974.  v0:= v1.`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iLenientParse` @type ^`boolean` @kind boolean;
  #L3c2978.  if v0 == 0 then goto L3c2980;
  #L3c297c.  v0:= 4I;
  #L3c297e.  goto L3c2982;
  #L3c2980.  v0:= 2I;
  #L3c2982.  return v0;
}
procedure `int` `estimatePrintedLength`(`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear` v1 @kind this) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TwoDigitYear;.estimatePrintedLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3c2994.  v0:= 2I;
  #L3c2996.  return v0;
}
procedure `int` `parseInto`(`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear` v12 @kind this, `org.joda.time.format.DateTimeParserBucket` v13 @kind object, `java.lang.CharSequence` v14 @kind object, `int` v15 ) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TwoDigitYear;.parseInto:(Lorg/joda/time/format/DateTimeParserBucket;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3c2a38.  call temp:= `length`(v14) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3c2a3e.  v0:= temp;
  #L3c2a40.  v0:= v0 - v15 @kind int;
  #L3c2a42.  v1:= v12.`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iLenientParse` @type ^`boolean` @kind boolean;
  #L3c2a46.  v2:= 57I;
  #L3c2a4a.  v3:= 2I;
  #L3c2a4c.  v4:= 0I;
  #L3c2a4e.  v5:= 48I;
  #L3c2a52.  v6:= 1I;
  #L3c2a54.  if v1 != 0 then goto L3c2a68;
  #L3c2a58.  call temp:= `min`(v3, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3c2a5e.  v0:= temp;
  #L3c2a60.  if v0 >= v3 then goto L3c2ad4;
  #L3c2a64.  v13:= ~v15 @kind int;
  #L3c2a66.  return v13;
  #L3c2a68.  v1:= 0I;
  #L3c2a6a.  v7:= 0I;
  #L3c2a6c.  v8:= 0I;
  #L3c2a6e.  if v1 >= v0 then goto L3c2ac2;
  #L3c2a72.  v9:= v15 + v1 @kind int;
  #L3c2a76.  call temp:= `charAt`(v14, v9) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c2a7c.  v9:= temp;
  #L3c2a7e.  if v1 != 0 then goto L3c2ab2;
  #L3c2a82.  v10:= 45I;
  #L3c2a86.  if v9 == v10 then goto L3c2a92;
  #L3c2a8a.  v11:= 43I;
  #L3c2a8e.  if v9 != v11 then goto L3c2ab2;
  #L3c2a92.  if v9 != v10 then goto L3c2a9a;
  #L3c2a96.  v8:= 1I;
  #L3c2a98.  goto L3c2a9c;
  #L3c2a9a.  v8:= 0I;
  #L3c2a9c.  if v8 == 0 then goto L3c2aa6;
  #L3c2aa0.  v1:= v1 + 1;
  #L3c2aa4.  goto L3c2aae;
  #L3c2aa6.  v15:= v15 + 1;
  #L3c2aaa.  v0:= v0 + -1;
  #L3c2aae.  v7:= 1I;
  #L3c2ab0.  goto L3c2a6e;
  #L3c2ab2.  if v9 < v5 then goto L3c2ac2;
  #L3c2ab6.  if v9 <= v2 then goto L3c2abc;
  #L3c2aba.  goto L3c2ac2;
  #L3c2abc.  v1:= v1 + 1;
  #L3c2ac0.  goto L3c2a6e;
  #L3c2ac2.  if v1 != 0 then goto L3c2aca;
  #L3c2ac6.  v13:= ~v15 @kind int;
  #L3c2ac8.  return v13;
  #L3c2aca.  if v7 != 0 then goto L3c2b6a;
  #L3c2ace.  if v1 == v3 then goto L3c2ad4;
  #L3c2ad2.  goto L3c2b6a;
  #L3c2ad4.  call temp:= `charAt`(v14, v15) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c2ada.  v0:= temp;
  #L3c2adc.  if v0 < v5 then goto L3c2b66;
  #L3c2ae0.  if v0 <= v2 then goto L3c2ae6;
  #L3c2ae4.  goto L3c2b66;
  #L3c2ae6.  v0:= v0 - v5 @kind int;
  #L3c2ae8.  v1:= v15 + 1;
  #L3c2aec.  call temp:= `charAt`(v14, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c2af2.  v14:= temp;
  #L3c2af4.  if v14 < v5 then goto L3c2b62;
  #L3c2af8.  if v14 <= v2 then goto L3c2afe;
  #L3c2afc.  goto L3c2b62;
  #L3c2afe.  v1:= v0 ^< 3;
  #L3c2b02.  v0:= v0 ^< v6 @kind int;
  #L3c2b04.  v1:= v1 + v0 @kind int;
  #L3c2b06.  v1:= v1 + v14 @kind int;
  #L3c2b08.  v1:= v1 - v5 @kind int;
  #L3c2b0a.  v14:= v12.`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iPivot` @type ^`int`;
  #L3c2b0e.  call temp:= `getPivotYear`(v13) @signature `Lorg/joda/time/format/DateTimeParserBucket;.getPivotYear:()Ljava/lang/Integer;` @kind virtual;
  #L3c2b14.  v0:= temp @kind object;
  #L3c2b16.  if v0 == 0 then goto L3c2b2a;
  #L3c2b1a.  call temp:= `getPivotYear`(v13) @signature `Lorg/joda/time/format/DateTimeParserBucket;.getPivotYear:()Ljava/lang/Integer;` @kind virtual;
  #L3c2b20.  v14:= temp @kind object;
  #L3c2b22.  call temp:= `intValue`(v14) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3c2b28.  v14:= temp;
  #L3c2b2a.  v14:= v14 + -50;
  #L3c2b2e.  v0:= 100I;
  #L3c2b32.  if v14 < 0 then goto L3c2b3c;
  #L3c2b36.  v2:= v14 %% 100;
  #L3c2b3a.  goto L3c2b46;
  #L3c2b3c.  v2:= v14 + 1;
  #L3c2b40.  v2:= v2 %% v0 @kind int;
  #L3c2b42.  v2:= v2 + 99;
  #L3c2b46.  if v1 >= v2 then goto L3c2b4e;
  #L3c2b4a.  v4:= 100I;
  #L3c2b4e.  v14:= v14 + v4 @kind int;
  #L3c2b50.  v14:= v14 - v2 @kind int;
  #L3c2b52.  v1:= v1 + v14 @kind int;
  #L3c2b54.  v14:= v12.`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L3c2b58.  call `saveField`(v13, v14, v1) @signature `Lorg/joda/time/format/DateTimeParserBucket;.saveField:(Lorg/joda/time/DateTimeFieldType;I)V` @kind virtual;
  #L3c2b5e.  v15:= v15 + v3 @kind int;
  #L3c2b60.  return v15;
  #L3c2b62.  v13:= ~v15 @kind int;
  #L3c2b64.  return v13;
  #L3c2b66.  v13:= ~v15 @kind int;
  #L3c2b68.  return v13;
  #L3c2b6a.  v0:= 9I;
  #L3c2b6e.  if v1 < v0 then goto L3c2b8e;
  #L3c2b72.  v1:= v1 + v15 @kind int;
  #L3c2b74.  call temp:= `subSequence`(v14, v15, v1) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L3c2b7a.  v14:= temp @kind object;
  #L3c2b7c.  call temp:= `toString`(v14) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c2b82.  v14:= temp @kind object;
  #L3c2b84.  call temp:= `parseInt`(v14) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L3c2b8a.  v14:= temp;
  #L3c2b8c.  goto L3c2bd8;
  #L3c2b8e.  if v8 == 0 then goto L3c2b98;
  #L3c2b92.  v0:= v15 + 1;
  #L3c2b96.  goto L3c2b9a;
  #L3c2b98.  v0:= v15;
  #L3c2b9a.  v2:= v0 + 1;
  #L3c2b9e.  call temp:= `charAt`(v14, v0) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c2ba4.  v0:= temp;
  #L3c2ba6.  v0:= v0 - v5 @kind int;
  #L3c2ba8.  v1:= v1 + v15 @kind int;
  #L3c2baa.  if v2 >= v1 then goto L3c2bce;
  #L3c2bae.  v15:= v0 ^< 3;
  #L3c2bb2.  v0:= v0 ^< 1;
  #L3c2bb6.  v15:= v15 + v0 @kind int;
  #L3c2bb8.  v0:= v2 + 1;
  #L3c2bbc.  call temp:= `charAt`(v14, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c2bc2.  v2:= temp;
  #L3c2bc4.  v15:= v15 + v2 @kind int;
  #L3c2bc6.  v15:= v15 - v5 @kind int;
  #L3c2bc8.  v2:= v0;
  #L3c2bca.  v0:= v15;
  #L3c2bcc.  goto L3c2baa;
  #L3c2bce.  if v8 == 0 then goto L3c2bd6;
  #L3c2bd2.  v14:= -v0 @kind int;
  #L3c2bd4.  goto L3c2bd8;
  #L3c2bd6.  v14:= v0;
  #L3c2bd8.  v15:= v12.`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L3c2bdc.  call `saveField`(v13, v15, v14) @signature `Lorg/joda/time/format/DateTimeParserBucket;.saveField:(Lorg/joda/time/DateTimeFieldType;I)V` @kind virtual;
  #L3c2be2.  return v1;
  #L3c2be4.  v13:= ~v15 @kind int;
  #L3c2be6.  return v13;
  catch `java.lang.StringIndexOutOfBoundsException` @[L3c2b9e..L3c2ba6] goto L3c2be4;
}
procedure `void` `printTo`(`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear` v0 @kind this, `java.lang.Appendable` v1 @kind object, `long` v2 , `org.joda.time.Chronology` v4 @kind object, `int` v5 , `org.joda.time.DateTimeZone` v6 @kind object, `java.util.Locale` v7 @kind object) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TwoDigitYear;.printTo:(Ljava/lang/Appendable;JLorg/joda/time/Chronology;ILorg/joda/time/DateTimeZone;Ljava/util/Locale;)V` @AccessFlag PUBLIC {
    temp;

  #L3c2c2c.  call temp:= `getTwoDigitYear`(v0, v2, v4) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TwoDigitYear;.getTwoDigitYear:(JLorg/joda/time/Chronology;)I` @kind direct;
  #L3c2c32.  v2:= temp;
  #L3c2c34.  if v2 >= 0 then goto L3c2c4c;
  #L3c2c38.  v2:= 65533I;
  #L3c2c3e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c2c44.  call temp:= `append`(v1, v2) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c2c4a.  goto L3c2c54;
  #L3c2c4c.  v3:= 2I;
  #L3c2c4e.  call `appendPaddedInteger`(v1, v2, v3) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/Appendable;II)V` @kind static;
  #L3c2c54.  return @kind void;
}
procedure `void` `printTo`(`org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear` v0 @kind this, `java.lang.Appendable` v1 @kind object, `org.joda.time.ReadablePartial` v2 @kind object, `java.util.Locale` v3 @kind object) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TwoDigitYear;.printTo:(Ljava/lang/Appendable;Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)V` @AccessFlag PUBLIC {
    temp;

  #L3c2c68.  call temp:= `getTwoDigitYear`(v0, v2) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder$TwoDigitYear;.getTwoDigitYear:(Lorg/joda/time/ReadablePartial;)I` @kind direct;
  #L3c2c6e.  v2:= temp;
  #L3c2c70.  if v2 >= 0 then goto L3c2c88;
  #L3c2c74.  v2:= 65533I;
  #L3c2c7a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c2c80.  call temp:= `append`(v1, v2) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c2c86.  goto L3c2c90;
  #L3c2c88.  v3:= 2I;
  #L3c2c8a.  call `appendPaddedInteger`(v1, v2, v3) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/Appendable;II)V` @kind static;
  #L3c2c90.  return @kind void;
}
