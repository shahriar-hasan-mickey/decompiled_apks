record `org.joda.time.format.FormatUtils` @kind class @AccessFlag PUBLIC {
}
global `double` `@@org.joda.time.format.FormatUtils.LOG_10` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/format/FormatUtils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3c5a4c.  v0:= 10.0D;
  #L3c5a50.  call temp:= `log`(v0) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L3c5a56.  v0:= temp @kind wide;
  #L3c5a58.  `@@org.joda.time.format.FormatUtils.LOG_10` @type ^`double` := v0 @kind wide;
  #L3c5a5c.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.format.FormatUtils` v0 @kind this) @signature `Lorg/joda/time/format/FormatUtils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3c5a70.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3c5a76.  return @kind void;
}
procedure `void` `appendPaddedInteger`(`java.lang.Appendable` v7 @kind object, `int` v8 , `int` v9 ) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/Appendable;II)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3c5a88.  v0:= 10I;
  #L3c5a8c.  v1:= 48I;
  #L3c5a90.  if v8 >= 0 then goto L3c5ac6;
  #L3c5a94.  v2:= 45I;
  #L3c5a98.  call temp:= `append`(v7, v2) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c5a9e.  v2:= -2147483648I;
  #L3c5aa2.  if v8 == v2 then goto L3c5aaa;
  #L3c5aa6.  v8:= -v8 @kind int;
  #L3c5aa8.  goto L3c5ac6;
  #L3c5aaa.  if v9 <= v0 then goto L3c5aba;
  #L3c5aae.  call temp:= `append`(v7, v1) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c5ab4.  v9:= v9 + -1;
  #L3c5ab8.  goto L3c5aaa;
  #L3c5aba.  v8:= "2147483648" @kind object;
  #L3c5abe.  call temp:= `append`(v7, v8) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3c5ac4.  return @kind void;
  #L3c5ac6.  v2:= 1I;
  #L3c5ac8.  if v8 >= v0 then goto L3c5ae8;
  #L3c5acc.  if v9 <= v2 then goto L3c5adc;
  #L3c5ad0.  call temp:= `append`(v7, v1) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c5ad6.  v9:= v9 + -1;
  #L3c5ada.  goto L3c5acc;
  #L3c5adc.  v8:= v8 + v1 @kind int;
  #L3c5ade.  v8:= (`char`) v8 @kind i2c;
  #L3c5ae0.  call temp:= `append`(v7, v8) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c5ae6.  goto L3c5b80;
  #L3c5ae8.  v0:= 100I;
  #L3c5aec.  if v8 >= v0 then goto L3c5b36;
  #L3c5af0.  v0:= 2I;
  #L3c5af2.  if v9 <= v0 then goto L3c5b02;
  #L3c5af6.  call temp:= `append`(v7, v1) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c5afc.  v9:= v9 + -1;
  #L3c5b00.  goto L3c5af0;
  #L3c5b02.  v9:= v8 + 1;
  #L3c5b06.  v0:= 13421772I;
  #L3c5b0c.  v9:= v9 * v0 @kind int;
  #L3c5b10.  v9:= v9 ^> 27;
  #L3c5b14.  v0:= v9 + 48;
  #L3c5b18.  v0:= (`char`) v0 @kind i2c;
  #L3c5b1a.  call temp:= `append`(v7, v0) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c5b20.  v0:= v9 ^< 3;
  #L3c5b24.  v8:= v8 - v0 @kind int;
  #L3c5b26.  v9:= v9 ^< v2 @kind int;
  #L3c5b28.  v8:= v8 - v9 @kind int;
  #L3c5b2a.  v8:= v8 + v1 @kind int;
  #L3c5b2c.  v8:= (`char`) v8 @kind i2c;
  #L3c5b2e.  call temp:= `append`(v7, v8) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c5b34.  goto L3c5b80;
  #L3c5b36.  v0:= 1000I;
  #L3c5b3a.  if v8 >= v0 then goto L3c5b42;
  #L3c5b3e.  v0:= 3I;
  #L3c5b40.  goto L3c5b62;
  #L3c5b42.  v0:= 10000I;
  #L3c5b46.  if v8 >= v0 then goto L3c5b4e;
  #L3c5b4a.  v0:= 4I;
  #L3c5b4c.  goto L3c5b62;
  #L3c5b4e.  v3:= (`double`) v8 @kind i2d;
  #L3c5b50.  call temp:= `log`(v3) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L3c5b56.  v3:= temp @kind wide;
  #L3c5b58.  v5:= `@@org.joda.time.format.FormatUtils.LOG_10` @type ^`double` @kind wide;
  #L3c5b5c.  v3:= v3 / v5 @kind double;
  #L3c5b5e.  v0:= (`int`) v3 @kind d2i;
  #L3c5b60.  v0:= v0 + v2 @kind int;
  #L3c5b62.  if v9 <= v0 then goto L3c5b72;
  #L3c5b66.  call temp:= `append`(v7, v1) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c5b6c.  v9:= v9 + -1;
  #L3c5b70.  goto L3c5b62;
  #L3c5b72.  call temp:= `toString`(v8) @signature `Ljava/lang/Integer;.toString:(I)Ljava/lang/String;` @kind static;
  #L3c5b78.  v8:= temp @kind object;
  #L3c5b7a.  call temp:= `append`(v7, v8) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3c5b80.  return @kind void;
}
procedure `void` `appendPaddedInteger`(`java.lang.Appendable` v6 @kind object, `long` v7 , `int` v9 ) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/Appendable;JI)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3c5b94.  v0:= (`int`) v7 @kind l2i;
  #L3c5b96.  v1:= (`long`) v0 @kind i2l;
  #L3c5b98.  v3:= lcmp(v1, v7);
  #L3c5b9c.  if v3 != 0 then goto L3c5ba8;
  #L3c5ba0.  call `appendPaddedInteger`(v6, v0, v9) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/Appendable;II)V` @kind static;
  #L3c5ba6.  goto L3c5c3a;
  #L3c5ba8.  v0:= 19I;
  #L3c5bac.  if v9 > v0 then goto L3c5bc0;
  #L3c5bb0.  call temp:= `toString`(v7) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L3c5bb6.  v7:= temp @kind object;
  #L3c5bb8.  call temp:= `append`(v6, v7) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3c5bbe.  goto L3c5c3a;
  #L3c5bc0.  v1:= 0L;
  #L3c5bc4.  v3:= 48I;
  #L3c5bc8.  v4:= lcmp(v7, v1);
  #L3c5bcc.  if v4 >= 0 then goto L3c5c06;
  #L3c5bd0.  v1:= 45I;
  #L3c5bd4.  call temp:= `append`(v6, v1) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c5bda.  v1:= -9223372036854775808L;
  #L3c5bde.  v4:= lcmp(v7, v1);
  #L3c5be2.  if v4 == 0 then goto L3c5bea;
  #L3c5be6.  v7:= -v7 @kind long;
  #L3c5be8.  goto L3c5c06;
  #L3c5bea.  if v9 <= v0 then goto L3c5bfa;
  #L3c5bee.  call temp:= `append`(v6, v3) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c5bf4.  v9:= v9 + -1;
  #L3c5bf8.  goto L3c5bea;
  #L3c5bfa.  v7:= "9223372036854775808" @kind object;
  #L3c5bfe.  call temp:= `append`(v6, v7) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3c5c04.  return @kind void;
  #L3c5c06.  v0:= (`double`) v7 @kind l2d;
  #L3c5c08.  call temp:= `log`(v0) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L3c5c0e.  v0:= temp @kind wide;
  #L3c5c10.  v4:= `@@org.joda.time.format.FormatUtils.LOG_10` @type ^`double` @kind wide;
  #L3c5c14.  v0:= v0 / v4 @kind double;
  #L3c5c16.  v0:= (`int`) v0 @kind d2i;
  #L3c5c18.  v0:= v0 + 1;
  #L3c5c1c.  if v9 <= v0 then goto L3c5c2c;
  #L3c5c20.  call temp:= `append`(v6, v3) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c5c26.  v9:= v9 + -1;
  #L3c5c2a.  goto L3c5c1c;
  #L3c5c2c.  call temp:= `toString`(v7) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L3c5c32.  v7:= temp @kind object;
  #L3c5c34.  call temp:= `append`(v6, v7) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3c5c3a.  return @kind void;
}
procedure `void` `appendPaddedInteger`(`java.lang.StringBuffer` v0 @kind object, `int` v1 , `int` v2 ) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/StringBuffer;II)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3c5c4c.  call `appendPaddedInteger`(v0, v1, v2) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/Appendable;II)V` @kind static;
  #L3c5c52.  return @kind void;
  catch `java.io.IOException` @[L3c5c4c..L3c5c52] goto L3c5c52;
}
procedure `void` `appendPaddedInteger`(`java.lang.StringBuffer` v0 @kind object, `long` v1 , `int` v3 ) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/StringBuffer;JI)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3c5c74.  call `appendPaddedInteger`(v0, v1, v3) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/Appendable;JI)V` @kind static;
  #L3c5c7a.  return @kind void;
  catch `java.io.IOException` @[L3c5c74..L3c5c7a] goto L3c5c7a;
}
procedure `void` `appendUnpaddedInteger`(`java.lang.Appendable` v2 @kind object, `int` v3 ) @signature `Lorg/joda/time/format/FormatUtils;.appendUnpaddedInteger:(Ljava/lang/Appendable;I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3c5c9c.  if v3 >= 0 then goto L3c5cc2;
  #L3c5ca0.  v0:= 45I;
  #L3c5ca4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c5caa.  v0:= -2147483648I;
  #L3c5cae.  if v3 == v0 then goto L3c5cb6;
  #L3c5cb2.  v3:= -v3 @kind int;
  #L3c5cb4.  goto L3c5cc2;
  #L3c5cb6.  v3:= "2147483648" @kind object;
  #L3c5cba.  call temp:= `append`(v2, v3) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3c5cc0.  return @kind void;
  #L3c5cc2.  v0:= 10I;
  #L3c5cc6.  if v3 >= v0 then goto L3c5cd8;
  #L3c5cca.  v3:= v3 + 48;
  #L3c5cce.  v3:= (`char`) v3 @kind i2c;
  #L3c5cd0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c5cd6.  goto L3c5d26;
  #L3c5cd8.  v0:= 100I;
  #L3c5cdc.  if v3 >= v0 then goto L3c5d18;
  #L3c5ce0.  v0:= v3 + 1;
  #L3c5ce4.  v1:= 13421772I;
  #L3c5cea.  v0:= v0 * v1 @kind int;
  #L3c5cee.  v0:= v0 ^> 27;
  #L3c5cf2.  v1:= v0 + 48;
  #L3c5cf6.  v1:= (`char`) v1 @kind i2c;
  #L3c5cf8.  call temp:= `append`(v2, v1) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c5cfe.  v1:= v0 ^< 3;
  #L3c5d02.  v3:= v3 - v1 @kind int;
  #L3c5d04.  v0:= v0 ^< 1;
  #L3c5d08.  v3:= v3 - v0 @kind int;
  #L3c5d0a.  v3:= v3 + 48;
  #L3c5d0e.  v3:= (`char`) v3 @kind i2c;
  #L3c5d10.  call temp:= `append`(v2, v3) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3c5d16.  goto L3c5d26;
  #L3c5d18.  call temp:= `toString`(v3) @signature `Ljava/lang/Integer;.toString:(I)Ljava/lang/String;` @kind static;
  #L3c5d1e.  v3:= temp @kind object;
  #L3c5d20.  call temp:= `append`(v2, v3) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3c5d26.  return @kind void;
}
procedure `void` `appendUnpaddedInteger`(`java.lang.Appendable` v4 @kind object, `long` v5 ) @signature `Lorg/joda/time/format/FormatUtils;.appendUnpaddedInteger:(Ljava/lang/Appendable;J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3c5d38.  v0:= (`int`) v5 @kind l2i;
  #L3c5d3a.  v1:= (`long`) v0 @kind i2l;
  #L3c5d3c.  v3:= lcmp(v1, v5);
  #L3c5d40.  if v3 != 0 then goto L3c5d4c;
  #L3c5d44.  call `appendUnpaddedInteger`(v4, v0) @signature `Lorg/joda/time/format/FormatUtils;.appendUnpaddedInteger:(Ljava/lang/Appendable;I)V` @kind static;
  #L3c5d4a.  goto L3c5d5a;
  #L3c5d4c.  call temp:= `toString`(v5) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L3c5d52.  v5:= temp @kind object;
  #L3c5d54.  call temp:= `append`(v4, v5) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3c5d5a.  return @kind void;
}
procedure `void` `appendUnpaddedInteger`(`java.lang.StringBuffer` v0 @kind object, `int` v1 ) @signature `Lorg/joda/time/format/FormatUtils;.appendUnpaddedInteger:(Ljava/lang/StringBuffer;I)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3c5d6c.  call `appendUnpaddedInteger`(v0, v1) @signature `Lorg/joda/time/format/FormatUtils;.appendUnpaddedInteger:(Ljava/lang/Appendable;I)V` @kind static;
  #L3c5d72.  return @kind void;
  catch `java.io.IOException` @[L3c5d6c..L3c5d72] goto L3c5d72;
}
procedure `void` `appendUnpaddedInteger`(`java.lang.StringBuffer` v0 @kind object, `long` v1 ) @signature `Lorg/joda/time/format/FormatUtils;.appendUnpaddedInteger:(Ljava/lang/StringBuffer;J)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3c5d94.  call `appendUnpaddedInteger`(v0, v1) @signature `Lorg/joda/time/format/FormatUtils;.appendUnpaddedInteger:(Ljava/lang/Appendable;J)V` @kind static;
  #L3c5d9a.  return @kind void;
  catch `java.io.IOException` @[L3c5d94..L3c5d9a] goto L3c5d9a;
}
procedure `int` `calculateDigitCount`(`long` v4 ) @signature `Lorg/joda/time/format/FormatUtils;.calculateDigitCount:(J)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3c5898.  v0:= 1I;
  #L3c589a.  v1:= 0L;
  #L3c589e.  v3:= lcmp(v4, v1);
  #L3c58a2.  if v3 >= 0 then goto L3c58c6;
  #L3c58a6.  v1:= -9223372036854775808L;
  #L3c58aa.  v3:= lcmp(v4, v1);
  #L3c58ae.  if v3 == 0 then goto L3c58c0;
  #L3c58b2.  v4:= -v4 @kind long;
  #L3c58b4.  call temp:= `calculateDigitCount`(v4) @signature `Lorg/joda/time/format/FormatUtils;.calculateDigitCount:(J)I` @kind static;
  #L3c58ba.  v4:= temp;
  #L3c58bc.  v4:= v4 + v0 @kind int;
  #L3c58be.  return v4;
  #L3c58c0.  v4:= 20I;
  #L3c58c4.  return v4;
  #L3c58c6.  v1:= 10L;
  #L3c58ca.  v3:= lcmp(v4, v1);
  #L3c58ce.  if v3 >= 0 then goto L3c58d4;
  #L3c58d2.  goto L3c5918;
  #L3c58d4.  v1:= 100L;
  #L3c58d8.  v3:= lcmp(v4, v1);
  #L3c58dc.  if v3 >= 0 then goto L3c58e4;
  #L3c58e0.  v0:= 2I;
  #L3c58e2.  goto L3c5918;
  #L3c58e4.  v1:= 1000L;
  #L3c58e8.  v3:= lcmp(v4, v1);
  #L3c58ec.  if v3 >= 0 then goto L3c58f4;
  #L3c58f0.  v0:= 3I;
  #L3c58f2.  goto L3c5918;
  #L3c58f4.  v1:= 10000L;
  #L3c58f8.  v3:= lcmp(v4, v1);
  #L3c58fc.  if v3 >= 0 then goto L3c5904;
  #L3c5900.  v0:= 4I;
  #L3c5902.  goto L3c5918;
  #L3c5904.  v4:= (`double`) v4 @kind l2d;
  #L3c5906.  call temp:= `log`(v4) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L3c590c.  v4:= temp @kind wide;
  #L3c590e.  v1:= `@@org.joda.time.format.FormatUtils.LOG_10` @type ^`double` @kind wide;
  #L3c5912.  v4:= v4 / v1 @kind double;
  #L3c5914.  v4:= (`int`) v4 @kind d2i;
  #L3c5916.  v0:= v0 + v4 @kind int;
  #L3c5918.  return v0;
}
procedure `java.lang.String` `createErrorMessage`(`java.lang.String` v3 @kind object, `int` v4 ) @signature `Lorg/joda/time/format/FormatUtils;.createErrorMessage:(Ljava/lang/String;I)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3c5968.  v0:= v4 + 32;
  #L3c596c.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3c5972.  v1:= temp;
  #L3c5974.  v2:= v0 + 3;
  #L3c5978.  if v1 > v2 then goto L3c5980;
  #L3c597c.  v0:= v3 @kind object;
  #L3c597e.  goto L3c5996;
  #L3c5980.  v1:= 0I;
  #L3c5982.  call temp:= `substring`(v3, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3c5988.  v0:= temp @kind object;
  #L3c598a.  v1:= "..." @kind object;
  #L3c598e.  call temp:= `concat`(v0, v1) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L3c5994.  v0:= temp @kind object;
  #L3c5996.  v1:= 34I;
  #L3c599a.  v2:= "Invalid format: \"" @kind object;
  #L3c599e.  if v4 > 0 then goto L3c59c8;
  #L3c59a2.  v3:= new `java.lang.StringBuilder`;
  #L3c59a6.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3c59ac.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c59b2.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c59b8.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c59be.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c59c4.  v3:= temp @kind object;
  #L3c59c6.  return v3 @kind object;
  #L3c59c8.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3c59ce.  v3:= temp;
  #L3c59d0.  if v4 < v3 then goto L3c59fe;
  #L3c59d4.  v3:= new `java.lang.StringBuilder`;
  #L3c59d8.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3c59de.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c59e4.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c59ea.  v4:= "\" is too short" @kind object;
  #L3c59ee.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c59f4.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c59fa.  v3:= temp @kind object;
  #L3c59fc.  return v3 @kind object;
  #L3c59fe.  v3:= new `java.lang.StringBuilder`;
  #L3c5a02.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3c5a08.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c5a0e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c5a14.  v2:= "\" is malformed at \"" @kind object;
  #L3c5a18.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c5a1e.  call temp:= `substring`(v0, v4) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3c5a24.  v4:= temp @kind object;
  #L3c5a26.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c5a2c.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3c5a32.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c5a38.  v3:= temp @kind object;
  #L3c5a3a.  return v3 @kind object;
}
procedure `int` `parseTwoDigits`(`java.lang.CharSequence` v2 @kind object, `int` v3 ) @signature `Lorg/joda/time/format/FormatUtils;.parseTwoDigits:(Ljava/lang/CharSequence;I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L3c592c.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c5932.  v0:= temp;
  #L3c5934.  v0:= v0 + -48;
  #L3c5938.  v1:= v0 ^< 3;
  #L3c593c.  v0:= v0 ^< 1;
  #L3c5940.  v1:= v1 + v0 @kind int;
  #L3c5942.  v3:= v3 + 1;
  #L3c5946.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c594c.  v2:= temp;
  #L3c594e.  v1:= v1 + v2 @kind int;
  #L3c5950.  v1:= v1 + -48;
  #L3c5954.  return v1;
}
procedure `void` `writePaddedInteger`(`java.io.Writer` v7 @kind object, `int` v8 , `int` v9 ) @signature `Lorg/joda/time/format/FormatUtils;.writePaddedInteger:(Ljava/io/Writer;II)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3c5dbc.  v0:= 10I;
  #L3c5dc0.  v1:= 48I;
  #L3c5dc4.  if v8 >= 0 then goto L3c5dfa;
  #L3c5dc8.  v2:= 45I;
  #L3c5dcc.  call `write`(v7, v2) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3c5dd2.  v2:= -2147483648I;
  #L3c5dd6.  if v8 == v2 then goto L3c5dde;
  #L3c5dda.  v8:= -v8 @kind int;
  #L3c5ddc.  goto L3c5dfa;
  #L3c5dde.  if v9 <= v0 then goto L3c5dee;
  #L3c5de2.  call `write`(v7, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3c5de8.  v9:= v9 + -1;
  #L3c5dec.  goto L3c5dde;
  #L3c5dee.  v8:= "2147483648" @kind object;
  #L3c5df2.  call `write`(v7, v8) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3c5df8.  return @kind void;
  #L3c5dfa.  v2:= 1I;
  #L3c5dfc.  if v8 >= v0 then goto L3c5e1a;
  #L3c5e00.  if v9 <= v2 then goto L3c5e10;
  #L3c5e04.  call `write`(v7, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3c5e0a.  v9:= v9 + -1;
  #L3c5e0e.  goto L3c5e00;
  #L3c5e10.  v8:= v8 + v1 @kind int;
  #L3c5e12.  call `write`(v7, v8) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3c5e18.  goto L3c5eae;
  #L3c5e1a.  v0:= 100I;
  #L3c5e1e.  if v8 >= v0 then goto L3c5e64;
  #L3c5e22.  v0:= 2I;
  #L3c5e24.  if v9 <= v0 then goto L3c5e34;
  #L3c5e28.  call `write`(v7, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3c5e2e.  v9:= v9 + -1;
  #L3c5e32.  goto L3c5e22;
  #L3c5e34.  v9:= v8 + 1;
  #L3c5e38.  v0:= 13421772I;
  #L3c5e3e.  v9:= v9 * v0 @kind int;
  #L3c5e42.  v9:= v9 ^> 27;
  #L3c5e46.  v0:= v9 + 48;
  #L3c5e4a.  call `write`(v7, v0) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3c5e50.  v0:= v9 ^< 3;
  #L3c5e54.  v8:= v8 - v0 @kind int;
  #L3c5e56.  v9:= v9 ^< v2 @kind int;
  #L3c5e58.  v8:= v8 - v9 @kind int;
  #L3c5e5a.  v8:= v8 + v1 @kind int;
  #L3c5e5c.  call `write`(v7, v8) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3c5e62.  goto L3c5eae;
  #L3c5e64.  v0:= 1000I;
  #L3c5e68.  if v8 >= v0 then goto L3c5e70;
  #L3c5e6c.  v0:= 3I;
  #L3c5e6e.  goto L3c5e90;
  #L3c5e70.  v0:= 10000I;
  #L3c5e74.  if v8 >= v0 then goto L3c5e7c;
  #L3c5e78.  v0:= 4I;
  #L3c5e7a.  goto L3c5e90;
  #L3c5e7c.  v3:= (`double`) v8 @kind i2d;
  #L3c5e7e.  call temp:= `log`(v3) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L3c5e84.  v3:= temp @kind wide;
  #L3c5e86.  v5:= `@@org.joda.time.format.FormatUtils.LOG_10` @type ^`double` @kind wide;
  #L3c5e8a.  v3:= v3 / v5 @kind double;
  #L3c5e8c.  v0:= (`int`) v3 @kind d2i;
  #L3c5e8e.  v0:= v0 + v2 @kind int;
  #L3c5e90.  if v9 <= v0 then goto L3c5ea0;
  #L3c5e94.  call `write`(v7, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3c5e9a.  v9:= v9 + -1;
  #L3c5e9e.  goto L3c5e90;
  #L3c5ea0.  call temp:= `toString`(v8) @signature `Ljava/lang/Integer;.toString:(I)Ljava/lang/String;` @kind static;
  #L3c5ea6.  v8:= temp @kind object;
  #L3c5ea8.  call `write`(v7, v8) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3c5eae.  return @kind void;
}
procedure `void` `writePaddedInteger`(`java.io.Writer` v6 @kind object, `long` v7 , `int` v9 ) @signature `Lorg/joda/time/format/FormatUtils;.writePaddedInteger:(Ljava/io/Writer;JI)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3c5ec0.  v0:= (`int`) v7 @kind l2i;
  #L3c5ec2.  v1:= (`long`) v0 @kind i2l;
  #L3c5ec4.  v3:= lcmp(v1, v7);
  #L3c5ec8.  if v3 != 0 then goto L3c5ed4;
  #L3c5ecc.  call `writePaddedInteger`(v6, v0, v9) @signature `Lorg/joda/time/format/FormatUtils;.writePaddedInteger:(Ljava/io/Writer;II)V` @kind static;
  #L3c5ed2.  goto L3c5f66;
  #L3c5ed4.  v0:= 19I;
  #L3c5ed8.  if v9 > v0 then goto L3c5eec;
  #L3c5edc.  call temp:= `toString`(v7) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L3c5ee2.  v7:= temp @kind object;
  #L3c5ee4.  call `write`(v6, v7) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3c5eea.  goto L3c5f66;
  #L3c5eec.  v1:= 0L;
  #L3c5ef0.  v3:= 48I;
  #L3c5ef4.  v4:= lcmp(v7, v1);
  #L3c5ef8.  if v4 >= 0 then goto L3c5f32;
  #L3c5efc.  v1:= 45I;
  #L3c5f00.  call `write`(v6, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3c5f06.  v1:= -9223372036854775808L;
  #L3c5f0a.  v4:= lcmp(v7, v1);
  #L3c5f0e.  if v4 == 0 then goto L3c5f16;
  #L3c5f12.  v7:= -v7 @kind long;
  #L3c5f14.  goto L3c5f32;
  #L3c5f16.  if v9 <= v0 then goto L3c5f26;
  #L3c5f1a.  call `write`(v6, v3) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3c5f20.  v9:= v9 + -1;
  #L3c5f24.  goto L3c5f16;
  #L3c5f26.  v7:= "9223372036854775808" @kind object;
  #L3c5f2a.  call `write`(v6, v7) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3c5f30.  return @kind void;
  #L3c5f32.  v0:= (`double`) v7 @kind l2d;
  #L3c5f34.  call temp:= `log`(v0) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L3c5f3a.  v0:= temp @kind wide;
  #L3c5f3c.  v4:= `@@org.joda.time.format.FormatUtils.LOG_10` @type ^`double` @kind wide;
  #L3c5f40.  v0:= v0 / v4 @kind double;
  #L3c5f42.  v0:= (`int`) v0 @kind d2i;
  #L3c5f44.  v0:= v0 + 1;
  #L3c5f48.  if v9 <= v0 then goto L3c5f58;
  #L3c5f4c.  call `write`(v6, v3) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3c5f52.  v9:= v9 + -1;
  #L3c5f56.  goto L3c5f48;
  #L3c5f58.  call temp:= `toString`(v7) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L3c5f5e.  v7:= temp @kind object;
  #L3c5f60.  call `write`(v6, v7) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3c5f66.  return @kind void;
}
procedure `void` `writeUnpaddedInteger`(`java.io.Writer` v2 @kind object, `int` v3 ) @signature `Lorg/joda/time/format/FormatUtils;.writeUnpaddedInteger:(Ljava/io/Writer;I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3c5f78.  if v3 >= 0 then goto L3c5f9e;
  #L3c5f7c.  v0:= 45I;
  #L3c5f80.  call `write`(v2, v0) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3c5f86.  v0:= -2147483648I;
  #L3c5f8a.  if v3 == v0 then goto L3c5f92;
  #L3c5f8e.  v3:= -v3 @kind int;
  #L3c5f90.  goto L3c5f9e;
  #L3c5f92.  v3:= "2147483648" @kind object;
  #L3c5f96.  call `write`(v2, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3c5f9c.  return @kind void;
  #L3c5f9e.  v0:= 10I;
  #L3c5fa2.  if v3 >= v0 then goto L3c5fb2;
  #L3c5fa6.  v3:= v3 + 48;
  #L3c5faa.  call `write`(v2, v3) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3c5fb0.  goto L3c5ffc;
  #L3c5fb2.  v0:= 100I;
  #L3c5fb6.  if v3 >= v0 then goto L3c5fee;
  #L3c5fba.  v0:= v3 + 1;
  #L3c5fbe.  v1:= 13421772I;
  #L3c5fc4.  v0:= v0 * v1 @kind int;
  #L3c5fc8.  v0:= v0 ^> 27;
  #L3c5fcc.  v1:= v0 + 48;
  #L3c5fd0.  call `write`(v2, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3c5fd6.  v1:= v0 ^< 3;
  #L3c5fda.  v3:= v3 - v1 @kind int;
  #L3c5fdc.  v0:= v0 ^< 1;
  #L3c5fe0.  v3:= v3 - v0 @kind int;
  #L3c5fe2.  v3:= v3 + 48;
  #L3c5fe6.  call `write`(v2, v3) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L3c5fec.  goto L3c5ffc;
  #L3c5fee.  call temp:= `toString`(v3) @signature `Ljava/lang/Integer;.toString:(I)Ljava/lang/String;` @kind static;
  #L3c5ff4.  v3:= temp @kind object;
  #L3c5ff6.  call `write`(v2, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3c5ffc.  return @kind void;
}
procedure `void` `writeUnpaddedInteger`(`java.io.Writer` v4 @kind object, `long` v5 ) @signature `Lorg/joda/time/format/FormatUtils;.writeUnpaddedInteger:(Ljava/io/Writer;J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3c6010.  v0:= (`int`) v5 @kind l2i;
  #L3c6012.  v1:= (`long`) v0 @kind i2l;
  #L3c6014.  v3:= lcmp(v1, v5);
  #L3c6018.  if v3 != 0 then goto L3c6024;
  #L3c601c.  call `writeUnpaddedInteger`(v4, v0) @signature `Lorg/joda/time/format/FormatUtils;.writeUnpaddedInteger:(Ljava/io/Writer;I)V` @kind static;
  #L3c6022.  goto L3c6032;
  #L3c6024.  call temp:= `toString`(v5) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L3c602a.  v5:= temp @kind object;
  #L3c602c.  call `write`(v4, v5) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L3c6032.  return @kind void;
}
