record `org.joda.time.DateTimeZone` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.io.Serializable` @kind interface {
  `java.lang.String` `org.joda.time.DateTimeZone.iID` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@org.joda.time.DateTimeZone.MAX_MILLIS` @AccessFlag PRIVATE_STATIC_FINAL;
global `org.joda.time.DateTimeZone` `@@org.joda.time.DateTimeZone.UTC` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@org.joda.time.DateTimeZone.cDefault` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@org.joda.time.DateTimeZone.cNameProvider` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@org.joda.time.DateTimeZone.cProvider` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.DateTimeZone.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/DateTimeZone;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L39834c.  v0:= `@@org.joda.time.UTCDateTimeZone.INSTANCE` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L398350.  `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` := v0 @kind object;
  #L398354.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L398358.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L39835e.  `@@org.joda.time.DateTimeZone.cProvider` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L398362.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L398366.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L39836c.  `@@org.joda.time.DateTimeZone.cNameProvider` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L398370.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L398374.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L39837a.  `@@org.joda.time.DateTimeZone.cDefault` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L39837e.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.DateTimeZone` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/joda/time/DateTimeZone;.<init>:(Ljava/lang/String;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L398390.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L398396.  if v2 == 0 then goto L3983a0;
  #L39839a.  v1.`org.joda.time.DateTimeZone.iID` @type ^`java.lang.String` := v2 @kind object;
  #L39839e.  return @kind void;
  #L3983a0.  v2:= new `java.lang.IllegalArgumentException`;
  #L3983a4.  v0:= "Id must not be null" @kind object;
  #L3983a8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3983ae.  throw v2;
}
procedure `org.joda.time.DateTimeZone` `fixedOffsetZone`(`java.lang.String` v2 @kind object, `int` v3 ) @signature `Lorg/joda/time/DateTimeZone;.fixedOffsetZone:(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L397c54.  if v3 != 0 then goto L397c5e;
  #L397c58.  v2:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L397c5c.  return v2 @kind object;
  #L397c5e.  v0:= new `org.joda.time.tz.FixedDateTimeZone`;
  #L397c62.  v1:= 0I;
  #L397c64.  call `<init>`(v0, v2, v1, v3, v3) @signature `Lorg/joda/time/tz/FixedDateTimeZone;.<init>:(Ljava/lang/String;Ljava/lang/String;II)V` @kind direct;
  #L397c6a.  return v0 @kind object;
}
procedure `org.joda.time.DateTimeZone` `forID`(`java.lang.String` v5 @kind object) @signature `Lorg/joda/time/DateTimeZone;.forID:(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L397c7c.  if v5 != 0 then goto L397c8a;
  #L397c80.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L397c86.  v5:= temp @kind object;
  #L397c88.  return v5 @kind object;
  #L397c8a.  v0:= "UTC" @kind object;
  #L397c8e.  call temp:= `equals`(v5, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L397c94.  v0:= temp;
  #L397c96.  if v0 == 0 then goto L397ca0;
  #L397c9a.  v5:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L397c9e.  return v5 @kind object;
  #L397ca0.  call temp:= `getProvider`() @signature `Lorg/joda/time/DateTimeZone;.getProvider:()Lorg/joda/time/tz/Provider;` @kind static;
  #L397ca6.  v0:= temp @kind object;
  #L397ca8.  call temp:= `getZone`(v0, v5) @signature `Lorg/joda/time/tz/Provider;.getZone:(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;` @kind interface;
  #L397cae.  v0:= temp @kind object;
  #L397cb0.  if v0 == 0 then goto L397cb6;
  #L397cb4.  return v0 @kind object;
  #L397cb6.  v0:= "+" @kind object;
  #L397cba.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L397cc0.  v0:= temp;
  #L397cc2.  if v0 != 0 then goto L397d10;
  #L397cc6.  v0:= "-" @kind object;
  #L397cca.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L397cd0.  v0:= temp;
  #L397cd2.  if v0 == 0 then goto L397cd8;
  #L397cd6.  goto L397d10;
  #L397cd8.  v0:= new `java.lang.IllegalArgumentException`;
  #L397cdc.  v1:= new `java.lang.StringBuilder`;
  #L397ce0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L397ce6.  v2:= "The datetime zone id '" @kind object;
  #L397cea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L397cf0.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L397cf6.  v5:= "' is not recognised" @kind object;
  #L397cfa.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L397d00.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L397d06.  v5:= temp @kind object;
  #L397d08.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L397d0e.  throw v0;
  #L397d10.  call temp:= `parseOffset`(v5) @signature `Lorg/joda/time/DateTimeZone;.parseOffset:(Ljava/lang/String;)I` @kind static;
  #L397d16.  v5:= temp;
  #L397d18.  v0:= (`long`) v5 @kind i2l;
  #L397d1a.  v2:= 0L;
  #L397d1e.  v4:= lcmp(v0, v2);
  #L397d22.  if v4 != 0 then goto L397d2c;
  #L397d26.  v5:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L397d2a.  return v5 @kind object;
  #L397d2c.  call temp:= `printOffset`(v5) @signature `Lorg/joda/time/DateTimeZone;.printOffset:(I)Ljava/lang/String;` @kind static;
  #L397d32.  v0:= temp @kind object;
  #L397d34.  call temp:= `fixedOffsetZone`(v0, v5) @signature `Lorg/joda/time/DateTimeZone;.fixedOffsetZone:(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;` @kind static;
  #L397d3a.  v5:= temp @kind object;
  #L397d3c.  return v5 @kind object;
}
procedure `org.joda.time.DateTimeZone` `forOffsetHours`(`int` v1 ) @signature `Lorg/joda/time/DateTimeZone;.forOffsetHours:(I)Lorg/joda/time/DateTimeZone;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L397d50.  v0:= 0I;
  #L397d52.  call temp:= `forOffsetHoursMinutes`(v1, v0) @signature `Lorg/joda/time/DateTimeZone;.forOffsetHoursMinutes:(II)Lorg/joda/time/DateTimeZone;` @kind static;
  #L397d58.  v1:= temp @kind object;
  #L397d5a.  return v1 @kind object;
}
procedure `org.joda.time.DateTimeZone` `forOffsetHoursMinutes`(`int` v2 , `int` v3 ) @signature `Lorg/joda/time/DateTimeZone;.forOffsetHoursMinutes:(II)Lorg/joda/time/DateTimeZone;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L397d6c.  if v2 != 0 then goto L397d7a;
  #L397d70.  if v3 != 0 then goto L397d7a;
  #L397d74.  v2:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L397d78.  return v2 @kind object;
  #L397d7a.  v0:= -23I;
  #L397d7e.  if v2 < v0 then goto L397e3e;
  #L397d82.  v0:= 23I;
  #L397d86.  if v2 > v0 then goto L397e3e;
  #L397d8a.  v0:= -59I;
  #L397d8e.  if v3 < v0 then goto L397e10;
  #L397d92.  v0:= 59I;
  #L397d96.  if v3 > v0 then goto L397e10;
  #L397d9a.  if v2 <= 0 then goto L397dd2;
  #L397d9e.  if v3 < 0 then goto L397da4;
  #L397da2.  goto L397dd2;
  #L397da4.  v2:= new `java.lang.IllegalArgumentException`;
  #L397da8.  v0:= new `java.lang.StringBuilder`;
  #L397dac.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L397db2.  v1:= "Positive hours must not have negative minutes: " @kind object;
  #L397db6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L397dbc.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L397dc2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L397dc8.  v3:= temp @kind object;
  #L397dca.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L397dd0.  throw v2;
  #L397dd2.  v2:= v2 * 60;
  #L397dd6.  if v2 >= 0 then goto L397de6;
  #L397dda.  call temp:= `abs`(v3) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L397de0.  v3:= temp;
  #L397de2.  v2:= v2 - v3 @kind int;
  #L397de4.  goto L397de8;
  #L397de6.  v2:= v2 + v3 @kind int;
  #L397de8.  v3:= 60000I;
  #L397dee.  call temp:= `safeMultiply`(v2, v3) @signature `Lorg/joda/time/field/FieldUtils;.safeMultiply:(II)I` @kind static;
  #L397df4.  v2:= temp;
  #L397df6.  call temp:= `forOffsetMillis`(v2) @signature `Lorg/joda/time/DateTimeZone;.forOffsetMillis:(I)Lorg/joda/time/DateTimeZone;` @kind static;
  #L397dfc.  v2:= temp @kind object;
  #L397dfe.  return v2 @kind object;
  #L397e00.  v2:= new `java.lang.IllegalArgumentException`;
  #L397e04.  v3:= "Offset is too large" @kind object;
  #L397e08.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L397e0e.  throw v2;
  #L397e10.  v2:= new `java.lang.IllegalArgumentException`;
  #L397e14.  v0:= new `java.lang.StringBuilder`;
  #L397e18.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L397e1e.  v1:= "Minutes out of range: " @kind object;
  #L397e22.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L397e28.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L397e2e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L397e34.  v3:= temp @kind object;
  #L397e36.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L397e3c.  throw v2;
  #L397e3e.  v3:= new `java.lang.IllegalArgumentException`;
  #L397e42.  v0:= new `java.lang.StringBuilder`;
  #L397e46.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L397e4c.  v1:= "Hours out of range: " @kind object;
  #L397e50.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L397e56.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L397e5c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L397e62.  v2:= temp @kind object;
  #L397e64.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L397e6a.  throw v3;
  catch `java.lang.ArithmeticException` @[L397dda..L397df6] goto L397e00;
}
procedure `org.joda.time.DateTimeZone` `forOffsetMillis`(`int` v3 ) @signature `Lorg/joda/time/DateTimeZone;.forOffsetMillis:(I)Lorg/joda/time/DateTimeZone;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L397e8c.  v0:= -86399999I;
  #L397e92.  if v3 < v0 then goto L397eb2;
  #L397e96.  v0:= 86399999I;
  #L397e9c.  if v3 > v0 then goto L397eb2;
  #L397ea0.  call temp:= `printOffset`(v3) @signature `Lorg/joda/time/DateTimeZone;.printOffset:(I)Ljava/lang/String;` @kind static;
  #L397ea6.  v0:= temp @kind object;
  #L397ea8.  call temp:= `fixedOffsetZone`(v0, v3) @signature `Lorg/joda/time/DateTimeZone;.fixedOffsetZone:(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;` @kind static;
  #L397eae.  v3:= temp @kind object;
  #L397eb0.  return v3 @kind object;
  #L397eb2.  v0:= new `java.lang.IllegalArgumentException`;
  #L397eb6.  v1:= new `java.lang.StringBuilder`;
  #L397eba.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L397ec0.  v2:= "Millis out of range: " @kind object;
  #L397ec4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L397eca.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L397ed0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L397ed6.  v3:= temp @kind object;
  #L397ed8.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L397ede.  throw v0;
}
procedure `org.joda.time.DateTimeZone` `forTimeZone`(`java.util.TimeZone` v5 @kind object) @signature `Lorg/joda/time/DateTimeZone;.forTimeZone:(Ljava/util/TimeZone;)Lorg/joda/time/DateTimeZone;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L397ef0.  if v5 != 0 then goto L397efe;
  #L397ef4.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L397efa.  v5:= temp @kind object;
  #L397efc.  return v5 @kind object;
  #L397efe.  call temp:= `getID`(v5) @signature `Ljava/util/TimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L397f04.  v5:= temp @kind object;
  #L397f06.  if v5 == 0 then goto L397fe4;
  #L397f0a.  v0:= "UTC" @kind object;
  #L397f0e.  call temp:= `equals`(v5, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L397f14.  v0:= temp;
  #L397f16.  if v0 == 0 then goto L397f20;
  #L397f1a.  v5:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L397f1e.  return v5 @kind object;
  #L397f20.  v0:= 0I;
  #L397f22.  call temp:= `getConvertedId`(v5) @signature `Lorg/joda/time/DateTimeZone;.getConvertedId:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L397f28.  v1:= temp @kind object;
  #L397f2a.  call temp:= `getProvider`() @signature `Lorg/joda/time/DateTimeZone;.getProvider:()Lorg/joda/time/tz/Provider;` @kind static;
  #L397f30.  v2:= temp @kind object;
  #L397f32.  if v1 == 0 then goto L397f3e;
  #L397f36.  call temp:= `getZone`(v2, v1) @signature `Lorg/joda/time/tz/Provider;.getZone:(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;` @kind interface;
  #L397f3c.  v0:= temp @kind object;
  #L397f3e.  if v0 != 0 then goto L397f4a;
  #L397f42.  call temp:= `getZone`(v2, v5) @signature `Lorg/joda/time/tz/Provider;.getZone:(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;` @kind interface;
  #L397f48.  v0:= temp @kind object;
  #L397f4a.  if v0 == 0 then goto L397f50;
  #L397f4e.  return v0 @kind object;
  #L397f50.  if v1 != 0 then goto L397fac;
  #L397f54.  v0:= "GMT+" @kind object;
  #L397f58.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L397f5e.  v0:= temp;
  #L397f60.  if v0 != 0 then goto L397f74;
  #L397f64.  v0:= "GMT-" @kind object;
  #L397f68.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L397f6e.  v0:= temp;
  #L397f70.  if v0 == 0 then goto L397fac;
  #L397f74.  v0:= 3I;
  #L397f76.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L397f7c.  v5:= temp @kind object;
  #L397f7e.  call temp:= `parseOffset`(v5) @signature `Lorg/joda/time/DateTimeZone;.parseOffset:(Ljava/lang/String;)I` @kind static;
  #L397f84.  v5:= temp;
  #L397f86.  v0:= (`long`) v5 @kind i2l;
  #L397f88.  v2:= 0L;
  #L397f8c.  v4:= lcmp(v0, v2);
  #L397f90.  if v4 != 0 then goto L397f9a;
  #L397f94.  v5:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L397f98.  return v5 @kind object;
  #L397f9a.  call temp:= `printOffset`(v5) @signature `Lorg/joda/time/DateTimeZone;.printOffset:(I)Ljava/lang/String;` @kind static;
  #L397fa0.  v0:= temp @kind object;
  #L397fa2.  call temp:= `fixedOffsetZone`(v0, v5) @signature `Lorg/joda/time/DateTimeZone;.fixedOffsetZone:(Ljava/lang/String;I)Lorg/joda/time/DateTimeZone;` @kind static;
  #L397fa8.  v5:= temp @kind object;
  #L397faa.  return v5 @kind object;
  #L397fac.  v0:= new `java.lang.IllegalArgumentException`;
  #L397fb0.  v1:= new `java.lang.StringBuilder`;
  #L397fb4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L397fba.  v2:= "The datetime zone id '" @kind object;
  #L397fbe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L397fc4.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L397fca.  v5:= "' is not recognised" @kind object;
  #L397fce.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L397fd4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L397fda.  v5:= temp @kind object;
  #L397fdc.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L397fe2.  throw v0;
  #L397fe4.  v5:= new `java.lang.IllegalArgumentException`;
  #L397fe8.  v0:= "The TimeZone id must not be null" @kind object;
  #L397fec.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L397ff2.  throw v5;
}
procedure `java.util.Set` `getAvailableIDs`() @signature `Lorg/joda/time/DateTimeZone;.getAvailableIDs:()Ljava/util/Set;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L397a14.  call temp:= `getProvider`() @signature `Lorg/joda/time/DateTimeZone;.getProvider:()Lorg/joda/time/tz/Provider;` @kind static;
  #L397a1a.  v0:= temp @kind object;
  #L397a1c.  call temp:= `getAvailableIDs`(v0) @signature `Lorg/joda/time/tz/Provider;.getAvailableIDs:()Ljava/util/Set;` @kind interface;
  #L397a22.  v0:= temp @kind object;
  #L397a24.  return v0 @kind object;
}
procedure `java.lang.String` `getConvertedId`(`java.lang.String` v1 @kind object) @signature `Lorg/joda/time/DateTimeZone;.getConvertedId:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3977d0.  v0:= `@@org.joda.time.DateTimeZone$LazyInit.CONVERSION_MAP` @type ^`java.util.Map` @kind object;
  #L3977d4.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3977da.  v1:= temp @kind object;
  #L3977dc.  v1:= (`java.lang.String`) v1 @kind object;
  #L3977e0.  return v1 @kind object;
}
procedure `org.joda.time.DateTimeZone` `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L398004.  v0:= `@@org.joda.time.DateTimeZone.cDefault` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L398008.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39800e.  v0:= temp @kind object;
  #L398010.  v0:= (`org.joda.time.DateTimeZone`) v0 @kind object;
  #L398014.  if v0 != 0 then goto L398076;
  #L398018.  v1:= "user.timezone" @kind object;
  #L39801c.  call temp:= `getProperty`(v1) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L398022.  v1:= temp @kind object;
  #L398024.  if v1 == 0 then goto L398034;
  #L398028.  call temp:= `forID`(v1) @signature `Lorg/joda/time/DateTimeZone;.forID:(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;` @kind static;
  #L39802e.  v0:= temp @kind object;
  #L398030.  goto L398034;
  #L398032.  
  #L398034.  if v0 != 0 then goto L39804c;
  #L398038.  call temp:= `getDefault`() @signature `Ljava/util/TimeZone;.getDefault:()Ljava/util/TimeZone;` @kind static;
  #L39803e.  v1:= temp @kind object;
  #L398040.  call temp:= `forTimeZone`(v1) @signature `Lorg/joda/time/DateTimeZone;.forTimeZone:(Ljava/util/TimeZone;)Lorg/joda/time/DateTimeZone;` @kind static;
  #L398046.  v0:= temp @kind object;
  #L398048.  goto L39804c;
  #L39804a.  
  #L39804c.  if v0 != 0 then goto L398054;
  #L398050.  v0:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L398054.  v1:= `@@org.joda.time.DateTimeZone.cDefault` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L398058.  v2:= 0I;
  #L39805a.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L398060.  v1:= temp;
  #L398062.  if v1 != 0 then goto L398076;
  #L398066.  v0:= `@@org.joda.time.DateTimeZone.cDefault` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39806a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L398070.  v0:= temp @kind object;
  #L398072.  v0:= (`org.joda.time.DateTimeZone`) v0 @kind object;
  #L398076.  return v0 @kind object;
  catch `java.lang.RuntimeException` @[L398018..L398030] goto L398032;
  catch `java.lang.IllegalArgumentException` @[L398038..L398048] goto L39804a;
}
procedure `org.joda.time.tz.NameProvider` `getDefaultNameProvider`() @signature `Lorg/joda/time/DateTimeZone;.getDefaultNameProvider:()Lorg/joda/time/tz/NameProvider;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3980a4.  v0:= 0I;
  #L3980a6.  v1:= "org.joda.time.DateTimeZone.NameProvider" @kind object;
  #L3980aa.  call temp:= `getProperty`(v1) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3980b0.  v1:= temp @kind object;
  #L3980b2.  if v1 == 0 then goto L3980de;
  #L3980b6.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L3980bc.  v1:= temp @kind object;
  #L3980be.  call temp:= `newInstance`(v1) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L3980c4.  v1:= temp @kind object;
  #L3980c6.  v1:= (`org.joda.time.tz.NameProvider`) v1 @kind object;
  #L3980ca.  v0:= v1 @kind object;
  #L3980cc.  goto L3980de;
  #L3980ce.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L3980d0.  v2:= new `java.lang.RuntimeException`;
  #L3980d4.  call `<init>`(v2, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3980da.  throw v2;
  #L3980dc.  
  #L3980de.  if v0 != 0 then goto L3980ec;
  #L3980e2.  v0:= new `org.joda.time.tz.DefaultNameProvider`;
  #L3980e6.  call `<init>`(v0) @signature `Lorg/joda/time/tz/DefaultNameProvider;.<init>:()V` @kind direct;
  #L3980ec.  return v0 @kind object;
  catch `java.lang.SecurityException` @[L3980a6..L3980b2] goto L3980dc;
  catch `java.lang.Exception` @[L3980b6..L3980ca] goto L3980ce;
  catch `java.lang.SecurityException` @[L3980d0..L3980dc] goto L3980dc;
}
procedure `org.joda.time.tz.Provider` `getDefaultProvider`() @signature `Lorg/joda/time/DateTimeZone;.getDefaultProvider:()Lorg/joda/time/tz/Provider;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L398174.  v0:= "org.joda.time.DateTimeZone.Provider" @kind object;
  #L398178.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L39817e.  v0:= temp @kind object;
  #L398180.  if v0 == 0 then goto L3981b0;
  #L398184.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L39818a.  v0:= temp @kind object;
  #L39818c.  call temp:= `newInstance`(v0) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L398192.  v0:= temp @kind object;
  #L398194.  v0:= (`org.joda.time.tz.Provider`) v0 @kind object;
  #L398198.  call temp:= `validateProvider`(v0) @signature `Lorg/joda/time/DateTimeZone;.validateProvider:(Lorg/joda/time/tz/Provider;)Lorg/joda/time/tz/Provider;` @kind static;
  #L39819e.  v0:= temp @kind object;
  #L3981a0.  return v0 @kind object;
  #L3981a2.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L3981a4.  v1:= new `java.lang.RuntimeException`;
  #L3981a8.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3981ae.  throw v1;
  #L3981b0.  v0:= "org.joda.time.DateTimeZone.Folder" @kind object;
  #L3981b4.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L3981ba.  v0:= temp @kind object;
  #L3981bc.  if v0 == 0 then goto L3981ec;
  #L3981c0.  v1:= new `org.joda.time.tz.ZoneInfoProvider`;
  #L3981c4.  v2:= new `java.io.File`;
  #L3981c8.  call `<init>`(v2, v0) @signature `Ljava/io/File;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3981ce.  call `<init>`(v1, v2) @signature `Lorg/joda/time/tz/ZoneInfoProvider;.<init>:(Ljava/io/File;)V` @kind direct;
  #L3981d4.  call temp:= `validateProvider`(v1) @signature `Lorg/joda/time/DateTimeZone;.validateProvider:(Lorg/joda/time/tz/Provider;)Lorg/joda/time/tz/Provider;` @kind static;
  #L3981da.  v0:= temp @kind object;
  #L3981dc.  return v0 @kind object;
  #L3981de.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L3981e0.  v1:= new `java.lang.RuntimeException`;
  #L3981e4.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3981ea.  throw v1;
  #L3981ec.  v0:= new `org.joda.time.tz.ZoneInfoProvider`;
  #L3981f0.  v1:= "org/joda/time/tz/data" @kind object;
  #L3981f4.  call `<init>`(v0, v1) @signature `Lorg/joda/time/tz/ZoneInfoProvider;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3981fa.  call temp:= `validateProvider`(v0) @signature `Lorg/joda/time/DateTimeZone;.validateProvider:(Lorg/joda/time/tz/Provider;)Lorg/joda/time/tz/Provider;` @kind static;
  #L398200.  v0:= temp @kind object;
  #L398202.  return v0 @kind object;
  #L398204.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L398206.  call `printStackTrace`(v0) @signature `Ljava/lang/Exception;.printStackTrace:()V` @kind virtual;
  #L39820c.  v0:= new `org.joda.time.tz.UTCProvider`;
  #L398210.  call `<init>`(v0) @signature `Lorg/joda/time/tz/UTCProvider;.<init>:()V` @kind direct;
  #L398216.  return v0 @kind object;
  catch `java.lang.SecurityException` @[L398174..L398180] goto L3981b0;
  catch `java.lang.Exception` @[L398184..L3981a0] goto L3981a2;
  catch `java.lang.SecurityException` @[L3981a4..L3981b0] goto L3981b0;
  catch `java.lang.SecurityException` @[L3981b0..L3981bc] goto L3981ec;
  catch `java.lang.Exception` @[L3981c0..L3981dc] goto L3981de;
  catch `java.lang.SecurityException` @[L3981e0..L3981ec] goto L3981ec;
  catch `java.lang.Exception` @[L3981ec..L398202] goto L398204;
}
procedure `org.joda.time.tz.NameProvider` `getNameProvider`() @signature `Lorg/joda/time/DateTimeZone;.getNameProvider:()Lorg/joda/time/tz/NameProvider;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L398124.  v0:= `@@org.joda.time.DateTimeZone.cNameProvider` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L398128.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39812e.  v0:= temp @kind object;
  #L398130.  v0:= (`org.joda.time.tz.NameProvider`) v0 @kind object;
  #L398134.  if v0 != 0 then goto L398162;
  #L398138.  call temp:= `getDefaultNameProvider`() @signature `Lorg/joda/time/DateTimeZone;.getDefaultNameProvider:()Lorg/joda/time/tz/NameProvider;` @kind static;
  #L39813e.  v0:= temp @kind object;
  #L398140.  v1:= `@@org.joda.time.DateTimeZone.cNameProvider` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L398144.  v2:= 0I;
  #L398146.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L39814c.  v1:= temp;
  #L39814e.  if v1 != 0 then goto L398162;
  #L398152.  v0:= `@@org.joda.time.DateTimeZone.cNameProvider` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L398156.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L39815c.  v0:= temp @kind object;
  #L39815e.  v0:= (`org.joda.time.tz.NameProvider`) v0 @kind object;
  #L398162.  return v0 @kind object;
}
procedure `org.joda.time.tz.Provider` `getProvider`() @signature `Lorg/joda/time/DateTimeZone;.getProvider:()Lorg/joda/time/tz/Provider;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L398278.  v0:= `@@org.joda.time.DateTimeZone.cProvider` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L39827c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L398282.  v0:= temp @kind object;
  #L398284.  v0:= (`org.joda.time.tz.Provider`) v0 @kind object;
  #L398288.  if v0 != 0 then goto L3982b6;
  #L39828c.  call temp:= `getDefaultProvider`() @signature `Lorg/joda/time/DateTimeZone;.getDefaultProvider:()Lorg/joda/time/tz/Provider;` @kind static;
  #L398292.  v0:= temp @kind object;
  #L398294.  v1:= `@@org.joda.time.DateTimeZone.cProvider` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L398298.  v2:= 0I;
  #L39829a.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3982a0.  v1:= temp;
  #L3982a2.  if v1 != 0 then goto L3982b6;
  #L3982a6.  v0:= `@@org.joda.time.DateTimeZone.cProvider` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3982aa.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3982b0.  v0:= temp @kind object;
  #L3982b2.  v0:= (`org.joda.time.tz.Provider`) v0 @kind object;
  #L3982b6.  return v0 @kind object;
}
procedure `int` `parseOffset`(`java.lang.String` v2 @kind object) @signature `Lorg/joda/time/DateTimeZone;.parseOffset:(Ljava/lang/String;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L39778c.  v0:= `@@org.joda.time.DateTimeZone$LazyInit.OFFSET_FORMATTER` @type ^`org.joda.time.format.DateTimeFormatter` @kind object;
  #L397790.  call temp:= `parseMillis`(v0, v2) @signature `Lorg/joda/time/format/DateTimeFormatter;.parseMillis:(Ljava/lang/String;)J` @kind virtual;
  #L397796.  v0:= temp @kind wide;
  #L397798.  v2:= (`int`) v0 @kind l2i;
  #L39779a.  v2:= -v2 @kind int;
  #L39779c.  return v2;
}
procedure `java.lang.String` `printOffset`(`int` v5 ) @signature `Lorg/joda/time/DateTimeZone;.printOffset:(I)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L39793c.  v0:= new `java.lang.StringBuffer`;
  #L397940.  call `<init>`(v0) @signature `Ljava/lang/StringBuffer;.<init>:()V` @kind direct;
  #L397946.  if v5 < 0 then goto L397956;
  #L39794a.  v1:= 43I;
  #L39794e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L397954.  goto L397962;
  #L397956.  v1:= 45I;
  #L39795a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L397960.  v5:= -v5 @kind int;
  #L397962.  v1:= 3600000I;
  #L397968.  v2:= v5 / v1 @kind int;
  #L39796c.  v3:= 2I;
  #L39796e.  call `appendPaddedInteger`(v0, v2, v3) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/StringBuffer;II)V` @kind static;
  #L397974.  v2:= v2 * v1 @kind int;
  #L397978.  v5:= v5 - v2 @kind int;
  #L39797a.  v1:= 60000I;
  #L397980.  v2:= v5 / v1 @kind int;
  #L397984.  v4:= 58I;
  #L397988.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L39798e.  call `appendPaddedInteger`(v0, v2, v3) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/StringBuffer;II)V` @kind static;
  #L397994.  v2:= v2 * v1 @kind int;
  #L397998.  v5:= v5 - v2 @kind int;
  #L39799a.  if v5 != 0 then goto L3979a8;
  #L39799e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3979a4.  v5:= temp @kind object;
  #L3979a6.  return v5 @kind object;
  #L3979a8.  v1:= v5 / 1000;
  #L3979ac.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3979b2.  call `appendPaddedInteger`(v0, v1, v3) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/StringBuffer;II)V` @kind static;
  #L3979b8.  v1:= v1 * 1000;
  #L3979bc.  v5:= v5 - v1 @kind int;
  #L3979be.  if v5 != 0 then goto L3979cc;
  #L3979c2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3979c8.  v5:= temp @kind object;
  #L3979ca.  return v5 @kind object;
  #L3979cc.  v1:= 46I;
  #L3979d0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3979d6.  v1:= 3I;
  #L3979d8.  call `appendPaddedInteger`(v0, v5, v1) @signature `Lorg/joda/time/format/FormatUtils;.appendPaddedInteger:(Ljava/lang/StringBuffer;II)V` @kind static;
  #L3979de.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3979e4.  v5:= temp @kind object;
  #L3979e6.  return v5 @kind object;
}
procedure `void` `setDefault`(`org.joda.time.DateTimeZone` v3 @kind object) @signature `Lorg/joda/time/DateTimeZone;.setDefault:(Lorg/joda/time/DateTimeZone;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3983c0.  call temp:= `getSecurityManager`() @signature `Ljava/lang/System;.getSecurityManager:()Ljava/lang/SecurityManager;` @kind static;
  #L3983c6.  v0:= temp @kind object;
  #L3983c8.  if v0 == 0 then goto L3983e0;
  #L3983cc.  v1:= new `org.joda.time.JodaTimePermission`;
  #L3983d0.  v2:= "DateTimeZone.setDefault" @kind object;
  #L3983d4.  call `<init>`(v1, v2) @signature `Lorg/joda/time/JodaTimePermission;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3983da.  call `checkPermission`(v0, v1) @signature `Ljava/lang/SecurityManager;.checkPermission:(Ljava/security/Permission;)V` @kind virtual;
  #L3983e0.  if v3 == 0 then goto L3983f0;
  #L3983e4.  v0:= `@@org.joda.time.DateTimeZone.cDefault` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3983e8.  call `set`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L3983ee.  return @kind void;
  #L3983f0.  v3:= new `java.lang.IllegalArgumentException`;
  #L3983f4.  v0:= "The datetime zone must not be null" @kind object;
  #L3983f8.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3983fe.  throw v3;
}
procedure `void` `setNameProvider`(`org.joda.time.tz.NameProvider` v3 @kind object) @signature `Lorg/joda/time/DateTimeZone;.setNameProvider:(Lorg/joda/time/tz/NameProvider;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L398410.  call temp:= `getSecurityManager`() @signature `Ljava/lang/System;.getSecurityManager:()Ljava/lang/SecurityManager;` @kind static;
  #L398416.  v0:= temp @kind object;
  #L398418.  if v0 == 0 then goto L398430;
  #L39841c.  v1:= new `org.joda.time.JodaTimePermission`;
  #L398420.  v2:= "DateTimeZone.setNameProvider" @kind object;
  #L398424.  call `<init>`(v1, v2) @signature `Lorg/joda/time/JodaTimePermission;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39842a.  call `checkPermission`(v0, v1) @signature `Ljava/lang/SecurityManager;.checkPermission:(Ljava/security/Permission;)V` @kind virtual;
  #L398430.  if v3 != 0 then goto L39843c;
  #L398434.  call temp:= `getDefaultNameProvider`() @signature `Lorg/joda/time/DateTimeZone;.getDefaultNameProvider:()Lorg/joda/time/tz/NameProvider;` @kind static;
  #L39843a.  v3:= temp @kind object;
  #L39843c.  v0:= `@@org.joda.time.DateTimeZone.cNameProvider` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L398440.  call `set`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L398446.  return @kind void;
}
procedure `void` `setProvider`(`org.joda.time.tz.Provider` v3 @kind object) @signature `Lorg/joda/time/DateTimeZone;.setProvider:(Lorg/joda/time/tz/Provider;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L398458.  call temp:= `getSecurityManager`() @signature `Ljava/lang/System;.getSecurityManager:()Ljava/lang/SecurityManager;` @kind static;
  #L39845e.  v0:= temp @kind object;
  #L398460.  if v0 == 0 then goto L398478;
  #L398464.  v1:= new `org.joda.time.JodaTimePermission`;
  #L398468.  v2:= "DateTimeZone.setProvider" @kind object;
  #L39846c.  call `<init>`(v1, v2) @signature `Lorg/joda/time/JodaTimePermission;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L398472.  call `checkPermission`(v0, v1) @signature `Ljava/lang/SecurityManager;.checkPermission:(Ljava/security/Permission;)V` @kind virtual;
  #L398478.  if v3 != 0 then goto L398486;
  #L39847c.  call temp:= `getDefaultProvider`() @signature `Lorg/joda/time/DateTimeZone;.getDefaultProvider:()Lorg/joda/time/tz/Provider;` @kind static;
  #L398482.  v3:= temp @kind object;
  #L398484.  goto L39848c;
  #L398486.  call temp:= `validateProvider`(v3) @signature `Lorg/joda/time/DateTimeZone;.validateProvider:(Lorg/joda/time/tz/Provider;)Lorg/joda/time/tz/Provider;` @kind static;
  #L39848c.  v0:= `@@org.joda.time.DateTimeZone.cProvider` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L398490.  call `set`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L398496.  return @kind void;
}
procedure `org.joda.time.tz.Provider` `validateProvider`(`org.joda.time.tz.Provider` v2 @kind object) @signature `Lorg/joda/time/DateTimeZone;.validateProvider:(Lorg/joda/time/tz/Provider;)Lorg/joda/time/tz/Provider;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L3982c8.  call temp:= `getAvailableIDs`(v2) @signature `Lorg/joda/time/tz/Provider;.getAvailableIDs:()Ljava/util/Set;` @kind interface;
  #L3982ce.  v0:= temp @kind object;
  #L3982d0.  if v0 == 0 then goto L39832a;
  #L3982d4.  call temp:= `size`(v0) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L3982da.  v1:= temp;
  #L3982dc.  if v1 == 0 then goto L39832a;
  #L3982e0.  v1:= "UTC" @kind object;
  #L3982e4.  call temp:= `contains`(v0, v1) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3982ea.  v0:= temp;
  #L3982ec.  if v0 == 0 then goto L39831a;
  #L3982f0.  v0:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3982f4.  call temp:= `getZone`(v2, v1) @signature `Lorg/joda/time/tz/Provider;.getZone:(Ljava/lang/String;)Lorg/joda/time/DateTimeZone;` @kind interface;
  #L3982fa.  v1:= temp @kind object;
  #L3982fc.  call temp:= `equals`(v0, v1) @signature `Lorg/joda/time/DateTimeZone;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L398302.  v0:= temp;
  #L398304.  if v0 == 0 then goto L39830a;
  #L398308.  return v2 @kind object;
  #L39830a.  v2:= new `java.lang.IllegalArgumentException`;
  #L39830e.  v0:= "Invalid UTC zone provided" @kind object;
  #L398312.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L398318.  throw v2;
  #L39831a.  v2:= new `java.lang.IllegalArgumentException`;
  #L39831e.  v0:= "The provider doesn't support UTC" @kind object;
  #L398322.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L398328.  throw v2;
  #L39832a.  v2:= new `java.lang.IllegalArgumentException`;
  #L39832e.  v0:= "The provider doesn't have any available ids" @kind object;
  #L398332.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L398338.  throw v2;
}
procedure `long` `adjustOffset`(`org.joda.time.DateTimeZone` v7 @kind this, `long` v8 , `boolean` v10 ) @signature `Lorg/joda/time/DateTimeZone;.adjustOffset:(JZ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L397a58.  v0:= 10800000L;
  #L397a5e.  v2:= v8 - v0 @kind long;
  #L397a62.  v0:= v0 + v8 @kind long;
  #L397a64.  call temp:= `getOffset`(v7, v2) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L397a6a.  v4:= temp;
  #L397a6c.  v4:= (`long`) v4 @kind i2l;
  #L397a6e.  call temp:= `getOffset`(v7, v0) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L397a74.  v0:= temp;
  #L397a76.  v0:= (`long`) v0 @kind i2l;
  #L397a78.  v6:= lcmp(v4, v0);
  #L397a7c.  if v6 > 0 then goto L397a82;
  #L397a80.  return v8 @kind wide;
  #L397a82.  v4:= v4 - v0 @kind long;
  #L397a84.  call temp:= `nextTransition`(v7, v2) @signature `Lorg/joda/time/DateTimeZone;.nextTransition:(J)J` @kind virtual;
  #L397a8a.  v0:= temp @kind wide;
  #L397a8c.  v2:= v0 - v4 @kind long;
  #L397a90.  v0:= v0 + v4 @kind long;
  #L397a92.  v6:= lcmp(v8, v2);
  #L397a96.  if v6 < 0 then goto L397ac0;
  #L397a9a.  v6:= lcmp(v8, v0);
  #L397a9e.  if v6 < 0 then goto L397aa4;
  #L397aa2.  goto L397ac0;
  #L397aa4.  v0:= v8 - v2 @kind long;
  #L397aa8.  v2:= lcmp(v0, v4);
  #L397aac.  if v2 < 0 then goto L397aba;
  #L397ab0.  if v10 == 0 then goto L397ab6;
  #L397ab4.  goto L397ab8;
  #L397ab6.  v8:= v8 - v4 @kind long;
  #L397ab8.  return v8 @kind wide;
  #L397aba.  if v10 == 0 then goto L397ac0;
  #L397abe.  v8:= v8 + v4 @kind long;
  #L397ac0.  return v8 @kind wide;
}
procedure `long` `convertLocalToUTC`(`org.joda.time.DateTimeZone` v11 @kind this, `long` v12 , `boolean` v14 ) @signature `Lorg/joda/time/DateTimeZone;.convertLocalToUTC:(JZ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L397ad4.  call temp:= `getOffset`(v11, v12) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L397ada.  v0:= temp;
  #L397adc.  v1:= (`long`) v0 @kind i2l;
  #L397ade.  v1:= v12 - v1 @kind long;
  #L397ae2.  call temp:= `getOffset`(v11, v1) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L397ae8.  v3:= temp;
  #L397aea.  if v0 == v3 then goto L397b4e;
  #L397aee.  if v14 != 0 then goto L397af6;
  #L397af2.  if v0 >= 0 then goto L397b4e;
  #L397af6.  call temp:= `nextTransition`(v11, v1) @signature `Lorg/joda/time/DateTimeZone;.nextTransition:(J)J` @kind virtual;
  #L397afc.  v4:= temp @kind wide;
  #L397afe.  v6:= 9223372036854775807L;
  #L397b08.  v8:= lcmp(v4, v1);
  #L397b0c.  if v8 != 0 then goto L397b12;
  #L397b10.  v4:= v6 @kind wide;
  #L397b12.  v1:= (`long`) v3 @kind i2l;
  #L397b14.  v1:= v12 - v1 @kind long;
  #L397b18.  call temp:= `nextTransition`(v11, v1) @signature `Lorg/joda/time/DateTimeZone;.nextTransition:(J)J` @kind virtual;
  #L397b1e.  v8:= temp @kind wide;
  #L397b20.  v10:= lcmp(v8, v1);
  #L397b24.  if v10 != 0 then goto L397b2a;
  #L397b28.  goto L397b2c;
  #L397b2a.  v6:= v8 @kind wide;
  #L397b2c.  v1:= lcmp(v4, v6);
  #L397b30.  if v1 == 0 then goto L397b4e;
  #L397b34.  if v14 != 0 then goto L397b3a;
  #L397b38.  goto L397b50;
  #L397b3a.  v14:= new `org.joda.time.IllegalInstantException`;
  #L397b3e.  call temp:= `getID`(v11) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L397b44.  v0:= temp @kind object;
  #L397b46.  call `<init>`(v14, v12, v0) @signature `Lorg/joda/time/IllegalInstantException;.<init>:(JLjava/lang/String;)V` @kind direct;
  #L397b4c.  throw v14;
  #L397b4e.  v0:= v3;
  #L397b50.  v0:= (`long`) v0 @kind i2l;
  #L397b52.  v2:= v12 - v0 @kind long;
  #L397b56.  v4:= v12 ^~ v2 @kind long;
  #L397b5a.  v6:= 0L;
  #L397b5e.  v14:= lcmp(v4, v6);
  #L397b62.  if v14 >= 0 then goto L397b82;
  #L397b66.  v12:= v12 ^~ v0 @kind long;
  #L397b68.  v14:= lcmp(v12, v6);
  #L397b6c.  if v14 < 0 then goto L397b72;
  #L397b70.  goto L397b82;
  #L397b72.  v12:= new `java.lang.ArithmeticException`;
  #L397b76.  v13:= "Subtracting time zone offset caused overflow" @kind object;
  #L397b7a.  call `<init>`(v12, v13) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L397b80.  throw v12;
  #L397b82.  return v2 @kind wide;
}
procedure `long` `convertLocalToUTC`(`org.joda.time.DateTimeZone` v2 @kind this, `long` v3 , `boolean` v5 , `long` v6 ) @signature `Lorg/joda/time/DateTimeZone;.convertLocalToUTC:(JZJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L397b94.  call temp:= `getOffset`(v2, v6) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L397b9a.  v6:= temp;
  #L397b9c.  v0:= (`long`) v6 @kind i2l;
  #L397b9e.  v0:= v3 - v0 @kind long;
  #L397ba2.  call temp:= `getOffset`(v2, v0) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L397ba8.  v7:= temp;
  #L397baa.  if v7 != v6 then goto L397bb0;
  #L397bae.  return v0 @kind wide;
  #L397bb0.  call temp:= `convertLocalToUTC`(v2, v3, v5) @signature `Lorg/joda/time/DateTimeZone;.convertLocalToUTC:(JZ)J` @kind virtual;
  #L397bb6.  v3:= temp @kind wide;
  #L397bb8.  return v3 @kind wide;
}
procedure `long` `convertUTCToLocal`(`org.joda.time.DateTimeZone` v9 @kind this, `long` v10 ) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L397bcc.  call temp:= `getOffset`(v9, v10) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L397bd2.  v0:= temp;
  #L397bd4.  v0:= (`long`) v0 @kind i2l;
  #L397bd6.  v2:= v10 + v0 @kind long;
  #L397bda.  v4:= v10 ^~ v2 @kind long;
  #L397bde.  v6:= 0L;
  #L397be2.  v8:= lcmp(v4, v6);
  #L397be6.  if v8 >= 0 then goto L397c06;
  #L397bea.  v10:= v10 ^~ v0 @kind long;
  #L397bec.  v0:= lcmp(v10, v6);
  #L397bf0.  if v0 >= 0 then goto L397bf6;
  #L397bf4.  goto L397c06;
  #L397bf6.  v10:= new `java.lang.ArithmeticException`;
  #L397bfa.  v11:= "Adding time zone offset caused overflow" @kind object;
  #L397bfe.  call `<init>`(v10, v11) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L397c04.  throw v10;
  #L397c06.  return v2 @kind wide;
}
procedure `boolean` `equals`(`java.lang.Object` v0 @kind object) @signature `Lorg/joda/time/DateTimeZone;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `getID`(`org.joda.time.DateTimeZone` v1 @kind this) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3977f4.  v0:= v1.`org.joda.time.DateTimeZone.iID` @type ^`java.lang.String` @kind object;
  #L3977f8.  return v0 @kind object;
}
procedure `long` `getMillisKeepLocal`(`org.joda.time.DateTimeZone` v6 @kind this, `org.joda.time.DateTimeZone` v7 @kind object, `long` v8 ) @signature `Lorg/joda/time/DateTimeZone;.getMillisKeepLocal:(Lorg/joda/time/DateTimeZone;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L397c18.  if v7 != 0 then goto L397c24;
  #L397c1c.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L397c22.  v7:= temp @kind object;
  #L397c24.  v0:= v7 @kind object;
  #L397c26.  if v0 != v6 then goto L397c2c;
  #L397c2a.  return v8 @kind wide;
  #L397c2c.  call temp:= `convertUTCToLocal`(v6, v8) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @kind virtual;
  #L397c32.  v1:= temp @kind wide;
  #L397c34.  v3:= 0I;
  #L397c36.  v4:= v8 @kind wide;
  #L397c38.  call temp:= `convertLocalToUTC`(v0, v1, v3, v4) @signature `Lorg/joda/time/DateTimeZone;.convertLocalToUTC:(JZJ)J` @kind virtual;
  #L397c3e.  v7:= temp @kind wide;
  #L397c40.  return v7 @kind wide;
}
procedure `java.lang.String` `getName`(`org.joda.time.DateTimeZone` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/DateTimeZone;.getName:(J)Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L39780c.  v0:= 0I;
  #L39780e.  call temp:= `getName`(v1, v2, v0) @signature `Lorg/joda/time/DateTimeZone;.getName:(JLjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L397814.  v2:= temp @kind object;
  #L397816.  return v2 @kind object;
}
procedure `java.lang.String` `getName`(`org.joda.time.DateTimeZone` v4 @kind this, `long` v5 , `java.util.Locale` v7 @kind object) @signature `Lorg/joda/time/DateTimeZone;.getName:(JLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L397828.  if v7 != 0 then goto L397834;
  #L39782c.  call temp:= `getDefault`() @signature `Ljava/util/Locale;.getDefault:()Ljava/util/Locale;` @kind static;
  #L397832.  v7:= temp @kind object;
  #L397834.  call temp:= `getNameKey`(v4, v5) @signature `Lorg/joda/time/DateTimeZone;.getNameKey:(J)Ljava/lang/String;` @kind virtual;
  #L39783a.  v0:= temp @kind object;
  #L39783c.  if v0 != 0 then goto L397846;
  #L397840.  v5:= v4.`org.joda.time.DateTimeZone.iID` @type ^`java.lang.String` @kind object;
  #L397844.  return v5 @kind object;
  #L397846.  call temp:= `getNameProvider`() @signature `Lorg/joda/time/DateTimeZone;.getNameProvider:()Lorg/joda/time/tz/NameProvider;` @kind static;
  #L39784c.  v1:= temp @kind object;
  #L39784e.  v2:= instanceof @variable v1 @type ^`org.joda.time.tz.DefaultNameProvider` @kind boolean;
  #L397852.  if v2 == 0 then goto L397870;
  #L397856.  v1:= (`org.joda.time.tz.DefaultNameProvider`) v1 @kind object;
  #L39785a.  v2:= v4.`org.joda.time.DateTimeZone.iID` @type ^`java.lang.String` @kind object;
  #L39785e.  call temp:= `isStandardOffset`(v4, v5) @signature `Lorg/joda/time/DateTimeZone;.isStandardOffset:(J)Z` @kind virtual;
  #L397864.  v3:= temp;
  #L397866.  call temp:= `getName`(v1, v7, v2, v0, v3) @signature `Lorg/joda/time/tz/DefaultNameProvider;.getName:(Ljava/util/Locale;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;` @kind virtual;
  #L39786c.  v7:= temp @kind object;
  #L39786e.  goto L39787c;
  #L397870.  v2:= v4.`org.joda.time.DateTimeZone.iID` @type ^`java.lang.String` @kind object;
  #L397874.  call temp:= `getName`(v1, v7, v2, v0) @signature `Lorg/joda/time/tz/NameProvider;.getName:(Ljava/util/Locale;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L39787a.  v7:= temp @kind object;
  #L39787c.  if v7 == 0 then goto L397882;
  #L397880.  return v7 @kind object;
  #L397882.  call temp:= `getOffset`(v4, v5) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L397888.  v5:= temp;
  #L39788a.  call temp:= `printOffset`(v5) @signature `Lorg/joda/time/DateTimeZone;.printOffset:(I)Ljava/lang/String;` @kind static;
  #L397890.  v5:= temp @kind object;
  #L397892.  return v5 @kind object;
}
procedure `java.lang.String` `getNameKey`(`long` v0 ) @signature `Lorg/joda/time/DateTimeZone;.getNameKey:(J)Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getOffset`(`long` v0 ) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getOffset`(`org.joda.time.DateTimeZone` v2 @kind this, `org.joda.time.ReadableInstant` v3 @kind object) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(Lorg/joda/time/ReadableInstant;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L39768c.  if v3 != 0 then goto L3976a2;
  #L397690.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L397696.  v0:= temp @kind wide;
  #L397698.  call temp:= `getOffset`(v2, v0) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L39769e.  v3:= temp;
  #L3976a0.  return v3;
  #L3976a2.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3976a8.  v0:= temp @kind wide;
  #L3976aa.  call temp:= `getOffset`(v2, v0) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L3976b0.  v3:= temp;
  #L3976b2.  return v3;
}
procedure `int` `getOffsetFromLocal`(`org.joda.time.DateTimeZone` v9 @kind this, `long` v10 ) @signature `Lorg/joda/time/DateTimeZone;.getOffsetFromLocal:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3976c4.  call temp:= `getOffset`(v9, v10) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L3976ca.  v0:= temp;
  #L3976cc.  v1:= (`long`) v0 @kind i2l;
  #L3976ce.  v1:= v10 - v1 @kind long;
  #L3976d2.  call temp:= `getOffset`(v9, v1) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L3976d8.  v3:= temp;
  #L3976da.  if v0 == v3 then goto L397724;
  #L3976de.  v4:= v0 - v3 @kind int;
  #L3976e2.  if v4 >= 0 then goto L397752;
  #L3976e6.  call temp:= `nextTransition`(v9, v1) @signature `Lorg/joda/time/DateTimeZone;.nextTransition:(J)J` @kind virtual;
  #L3976ec.  v4:= temp @kind wide;
  #L3976ee.  v6:= 9223372036854775807L;
  #L3976f8.  v8:= lcmp(v4, v1);
  #L3976fc.  if v8 != 0 then goto L397702;
  #L397700.  v4:= v6 @kind wide;
  #L397702.  v1:= (`long`) v3 @kind i2l;
  #L397704.  v10:= v10 - v1 @kind long;
  #L397706.  call temp:= `nextTransition`(v9, v10) @signature `Lorg/joda/time/DateTimeZone;.nextTransition:(J)J` @kind virtual;
  #L39770c.  v1:= temp @kind wide;
  #L39770e.  v8:= lcmp(v1, v10);
  #L397712.  if v8 != 0 then goto L397718;
  #L397716.  goto L39771a;
  #L397718.  v6:= v1 @kind wide;
  #L39771a.  v10:= lcmp(v4, v6);
  #L39771e.  if v10 == 0 then goto L397752;
  #L397722.  return v0;
  #L397724.  if v0 < 0 then goto L397752;
  #L397728.  call temp:= `previousTransition`(v9, v1) @signature `Lorg/joda/time/DateTimeZone;.previousTransition:(J)J` @kind virtual;
  #L39772e.  v10:= temp @kind wide;
  #L397730.  v4:= lcmp(v10, v1);
  #L397734.  if v4 >= 0 then goto L397752;
  #L397738.  call temp:= `getOffset`(v9, v10) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L39773e.  v4:= temp;
  #L397740.  v0:= v4 - v0 @kind int;
  #L397744.  v1:= v1 - v10 @kind long;
  #L397746.  v10:= (`long`) v0 @kind i2l;
  #L397748.  v0:= lcmp(v1, v10);
  #L39774c.  if v0 > 0 then goto L397752;
  #L397750.  return v4;
  #L397752.  return v3;
}
procedure `java.lang.String` `getShortName`(`org.joda.time.DateTimeZone` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/DateTimeZone;.getShortName:(J)Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3978a4.  v0:= 0I;
  #L3978a6.  call temp:= `getShortName`(v1, v2, v0) @signature `Lorg/joda/time/DateTimeZone;.getShortName:(JLjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3978ac.  v2:= temp @kind object;
  #L3978ae.  return v2 @kind object;
}
procedure `java.lang.String` `getShortName`(`org.joda.time.DateTimeZone` v4 @kind this, `long` v5 , `java.util.Locale` v7 @kind object) @signature `Lorg/joda/time/DateTimeZone;.getShortName:(JLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3978c0.  if v7 != 0 then goto L3978cc;
  #L3978c4.  call temp:= `getDefault`() @signature `Ljava/util/Locale;.getDefault:()Ljava/util/Locale;` @kind static;
  #L3978ca.  v7:= temp @kind object;
  #L3978cc.  call temp:= `getNameKey`(v4, v5) @signature `Lorg/joda/time/DateTimeZone;.getNameKey:(J)Ljava/lang/String;` @kind virtual;
  #L3978d2.  v0:= temp @kind object;
  #L3978d4.  if v0 != 0 then goto L3978de;
  #L3978d8.  v5:= v4.`org.joda.time.DateTimeZone.iID` @type ^`java.lang.String` @kind object;
  #L3978dc.  return v5 @kind object;
  #L3978de.  call temp:= `getNameProvider`() @signature `Lorg/joda/time/DateTimeZone;.getNameProvider:()Lorg/joda/time/tz/NameProvider;` @kind static;
  #L3978e4.  v1:= temp @kind object;
  #L3978e6.  v2:= instanceof @variable v1 @type ^`org.joda.time.tz.DefaultNameProvider` @kind boolean;
  #L3978ea.  if v2 == 0 then goto L397908;
  #L3978ee.  v1:= (`org.joda.time.tz.DefaultNameProvider`) v1 @kind object;
  #L3978f2.  v2:= v4.`org.joda.time.DateTimeZone.iID` @type ^`java.lang.String` @kind object;
  #L3978f6.  call temp:= `isStandardOffset`(v4, v5) @signature `Lorg/joda/time/DateTimeZone;.isStandardOffset:(J)Z` @kind virtual;
  #L3978fc.  v3:= temp;
  #L3978fe.  call temp:= `getShortName`(v1, v7, v2, v0, v3) @signature `Lorg/joda/time/tz/DefaultNameProvider;.getShortName:(Ljava/util/Locale;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;` @kind virtual;
  #L397904.  v7:= temp @kind object;
  #L397906.  goto L397914;
  #L397908.  v2:= v4.`org.joda.time.DateTimeZone.iID` @type ^`java.lang.String` @kind object;
  #L39790c.  call temp:= `getShortName`(v1, v7, v2, v0) @signature `Lorg/joda/time/tz/NameProvider;.getShortName:(Ljava/util/Locale;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L397912.  v7:= temp @kind object;
  #L397914.  if v7 == 0 then goto L39791a;
  #L397918.  return v7 @kind object;
  #L39791a.  call temp:= `getOffset`(v4, v5) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L397920.  v5:= temp;
  #L397922.  call temp:= `printOffset`(v5) @signature `Lorg/joda/time/DateTimeZone;.printOffset:(I)Ljava/lang/String;` @kind static;
  #L397928.  v5:= temp @kind object;
  #L39792a.  return v5 @kind object;
}
procedure `int` `getStandardOffset`(`long` v0 ) @signature `Lorg/joda/time/DateTimeZone;.getStandardOffset:(J)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `hashCode`(`org.joda.time.DateTimeZone` v1 @kind this) @signature `Lorg/joda/time/DateTimeZone;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L397764.  call temp:= `getID`(v1) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L39776a.  v0:= temp @kind object;
  #L39776c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L397772.  v0:= temp;
  #L397774.  v0:= v0 + 57;
  #L397778.  return v0;
}
procedure `boolean` `isFixed`() @signature `Lorg/joda/time/DateTimeZone;.isFixed:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isLocalDateTimeGap`(`org.joda.time.DateTimeZone` v2 @kind this, `org.joda.time.LocalDateTime` v3 @kind object) @signature `Lorg/joda/time/DateTimeZone;.isLocalDateTimeGap:(Lorg/joda/time/LocalDateTime;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L397624.  call temp:= `isFixed`(v2) @signature `Lorg/joda/time/DateTimeZone;.isFixed:()Z` @kind virtual;
  #L39762a.  v0:= temp;
  #L39762c.  v1:= 0I;
  #L39762e.  if v0 == 0 then goto L397634;
  #L397632.  return v1;
  #L397634.  call temp:= `toDateTime`(v3, v2) @signature `Lorg/joda/time/LocalDateTime;.toDateTime:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTime;` @kind virtual;
  #L39763a.  return v1;
  #L39763c.  v3:= 1I;
  #L39763e.  return v3;
  catch `org.joda.time.IllegalInstantException` @[L397634..L39763a] goto L39763c;
}
procedure `boolean` `isStandardOffset`(`org.joda.time.DateTimeZone` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/DateTimeZone;.isStandardOffset:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L397660.  call temp:= `getOffset`(v1, v2) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L397666.  v0:= temp;
  #L397668.  call temp:= `getStandardOffset`(v1, v2) @signature `Lorg/joda/time/DateTimeZone;.getStandardOffset:(J)I` @kind virtual;
  #L39766e.  v2:= temp;
  #L397670.  if v0 != v2 then goto L397678;
  #L397674.  v2:= 1I;
  #L397676.  goto L39767a;
  #L397678.  v2:= 0I;
  #L39767a.  return v2;
}
procedure `long` `nextTransition`(`long` v0 ) @signature `Lorg/joda/time/DateTimeZone;.nextTransition:(J)J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `previousTransition`(`long` v0 ) @signature `Lorg/joda/time/DateTimeZone;.previousTransition:(J)J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `toString`(`org.joda.time.DateTimeZone` v1 @kind this) @signature `Lorg/joda/time/DateTimeZone;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3979f8.  call temp:= `getID`(v1) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3979fe.  v0:= temp @kind object;
  #L397a00.  return v0 @kind object;
}
procedure `java.util.TimeZone` `toTimeZone`(`org.joda.time.DateTimeZone` v1 @kind this) @signature `Lorg/joda/time/DateTimeZone;.toTimeZone:()Ljava/util/TimeZone;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L397a38.  v0:= v1.`org.joda.time.DateTimeZone.iID` @type ^`java.lang.String` @kind object;
  #L397a3c.  call temp:= `getTimeZone`(v0) @signature `Ljava/util/TimeZone;.getTimeZone:(Ljava/lang/String;)Ljava/util/TimeZone;` @kind static;
  #L397a42.  v0:= temp @kind object;
  #L397a44.  return v0 @kind object;
}
procedure `java.lang.Object` `writeReplace`(`org.joda.time.DateTimeZone` v2 @kind this) @signature `Lorg/joda/time/DateTimeZone;.writeReplace:()Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3977b0.  v0:= new `org.joda.time.DateTimeZone$Stub`;
  #L3977b4.  v1:= v2.`org.joda.time.DateTimeZone.iID` @type ^`java.lang.String` @kind object;
  #L3977b8.  call `<init>`(v0, v1) @signature `Lorg/joda/time/DateTimeZone$Stub;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3977be.  return v0 @kind object;
}
