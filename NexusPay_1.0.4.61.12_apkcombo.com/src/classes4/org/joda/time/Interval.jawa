record `org.joda.time.Interval` @kind class @AccessFlag PUBLIC_FINAL extends `org.joda.time.base.BaseInterval` @kind class, `org.joda.time.ReadableInterval` @kind interface, `java.io.Serializable` @kind interface {
}
global `long` `@@org.joda.time.Interval.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.Interval` v6 @kind this, `long` v7 , `long` v9 ) @signature `Lorg/joda/time/Interval;.<init>:(JJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L39bec0.  v5:= 0I;
  #L39bec2.  v0:= v6 @kind object;
  #L39bec4.  v1:= v7 @kind wide;
  #L39bec6.  v3:= v9 @kind wide;
  #L39bec8.  call `<init>`(v0, v1, v3, v5) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L39bece.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.Interval` v0 @kind this, `long` v1 , `long` v3 , `org.joda.time.Chronology` v5 @kind object) @signature `Lorg/joda/time/Interval;.<init>:(JJLorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39bee0.  call `<init>`(v0, v1, v3, v5) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L39bee6.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.Interval` v6 @kind this, `long` v7 , `long` v9 , `org.joda.time.DateTimeZone` v11 @kind object) @signature `Lorg/joda/time/Interval;.<init>:(JJLorg/joda/time/DateTimeZone;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L39bef8.  call temp:= `getInstance`(v11) @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L39befe.  v5:= temp @kind object;
  #L39bf00.  v0:= v6 @kind object;
  #L39bf02.  v1:= v7 @kind wide;
  #L39bf04.  v3:= v9 @kind wide;
  #L39bf06.  call `<init>`(v0, v1, v3, v5) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L39bf0c.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.Interval` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/joda/time/Interval;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L39be8c.  v0:= 0I;
  #L39be8e.  call `<init>`(v1, v2, v0) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @kind direct;
  #L39be94.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.Interval` v0 @kind this, `java.lang.Object` v1 @kind object, `org.joda.time.Chronology` v2 @kind object) @signature `Lorg/joda/time/Interval;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39bea8.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @kind direct;
  #L39beae.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.Interval` v0 @kind this, `org.joda.time.ReadableDuration` v1 @kind object, `org.joda.time.ReadableInstant` v2 @kind object) @signature `Lorg/joda/time/Interval;.<init>:(Lorg/joda/time/ReadableDuration;Lorg/joda/time/ReadableInstant;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39bf20.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Lorg/joda/time/ReadableDuration;Lorg/joda/time/ReadableInstant;)V` @kind direct;
  #L39bf26.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.Interval` v0 @kind this, `org.joda.time.ReadableInstant` v1 @kind object, `org.joda.time.ReadableDuration` v2 @kind object) @signature `Lorg/joda/time/Interval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableDuration;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39bf38.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableDuration;)V` @kind direct;
  #L39bf3e.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.Interval` v0 @kind this, `org.joda.time.ReadableInstant` v1 @kind object, `org.joda.time.ReadableInstant` v2 @kind object) @signature `Lorg/joda/time/Interval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableInstant;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39bf50.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableInstant;)V` @kind direct;
  #L39bf56.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.Interval` v0 @kind this, `org.joda.time.ReadableInstant` v1 @kind object, `org.joda.time.ReadablePeriod` v2 @kind object) @signature `Lorg/joda/time/Interval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadablePeriod;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39bf68.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadablePeriod;)V` @kind direct;
  #L39bf6e.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.Interval` v0 @kind this, `org.joda.time.ReadablePeriod` v1 @kind object, `org.joda.time.ReadableInstant` v2 @kind object) @signature `Lorg/joda/time/Interval;.<init>:(Lorg/joda/time/ReadablePeriod;Lorg/joda/time/ReadableInstant;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L39bf80.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Lorg/joda/time/ReadablePeriod;Lorg/joda/time/ReadableInstant;)V` @kind direct;
  #L39bf86.  return @kind void;
}
procedure `org.joda.time.Interval` `parse`(`java.lang.String` v1 @kind object) @signature `Lorg/joda/time/Interval;.parse:(Ljava/lang/String;)Lorg/joda/time/Interval;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L39ba50.  v0:= new `org.joda.time.Interval`;
  #L39ba54.  call `<init>`(v0, v1) @signature `Lorg/joda/time/Interval;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L39ba5a.  return v0 @kind object;
}
procedure `org.joda.time.Interval` `parseWithOffset`(`java.lang.String` v10 @kind object) @signature `Lorg/joda/time/Interval;.parseWithOffset:(Ljava/lang/String;)Lorg/joda/time/Interval;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L39ba6c.  v0:= 47I;
  #L39ba70.  call temp:= `indexOf`(v10, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L39ba76.  v0:= temp;
  #L39ba78.  if v0 < 0 then goto L39bbea;
  #L39ba7c.  v1:= 0I;
  #L39ba7e.  call temp:= `substring`(v10, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L39ba84.  v2:= temp @kind object;
  #L39ba86.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L39ba8c.  v3:= temp;
  #L39ba8e.  v4:= "Format invalid: " @kind object;
  #L39ba92.  if v3 <= 0 then goto L39bbc0;
  #L39ba96.  v0:= v0 + 1;
  #L39ba9a.  call temp:= `substring`(v10, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L39baa0.  v0:= temp @kind object;
  #L39baa2.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L39baa8.  v3:= temp;
  #L39baaa.  if v3 <= 0 then goto L39bb96;
  #L39baae.  call temp:= `dateTimeParser`() @signature `Lorg/joda/time/format/ISODateTimeFormat;.dateTimeParser:()Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L39bab4.  v3:= temp @kind object;
  #L39bab6.  call temp:= `withOffsetParsed`(v3) @signature `Lorg/joda/time/format/DateTimeFormatter;.withOffsetParsed:()Lorg/joda/time/format/DateTimeFormatter;` @kind virtual;
  #L39babc.  v3:= temp @kind object;
  #L39babe.  call temp:= `standard`() @signature `Lorg/joda/time/format/ISOPeriodFormat;.standard:()Lorg/joda/time/format/PeriodFormatter;` @kind static;
  #L39bac4.  v4:= temp @kind object;
  #L39bac6.  call temp:= `charAt`(v2, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L39bacc.  v5:= temp;
  #L39bace.  v6:= 112I;
  #L39bad2.  v7:= 80I;
  #L39bad6.  v8:= 0I;
  #L39bad8.  if v5 == v7 then goto L39baec;
  #L39badc.  if v5 != v6 then goto L39bae2;
  #L39bae0.  goto L39baec;
  #L39bae2.  call temp:= `parseDateTime`(v3, v2) @signature `Lorg/joda/time/format/DateTimeFormatter;.parseDateTime:(Ljava/lang/String;)Lorg/joda/time/DateTime;` @kind virtual;
  #L39bae8.  v2:= temp @kind object;
  #L39baea.  goto L39bb0a;
  #L39baec.  call temp:= `standard`() @signature `Lorg/joda/time/PeriodType;.standard:()Lorg/joda/time/PeriodType;` @kind static;
  #L39baf2.  v5:= temp @kind object;
  #L39baf4.  call temp:= `withParseType`(v4, v5) @signature `Lorg/joda/time/format/PeriodFormatter;.withParseType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/format/PeriodFormatter;` @kind virtual;
  #L39bafa.  v5:= temp @kind object;
  #L39bafc.  call temp:= `parsePeriod`(v5, v2) @signature `Lorg/joda/time/format/PeriodFormatter;.parsePeriod:(Ljava/lang/String;)Lorg/joda/time/Period;` @kind virtual;
  #L39bb02.  v2:= temp @kind object;
  #L39bb04.  v9:= v8 @kind object;
  #L39bb06.  v8:= v2 @kind object;
  #L39bb08.  v2:= v9 @kind object;
  #L39bb0a.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L39bb10.  v1:= temp;
  #L39bb12.  if v1 == v7 then goto L39bb40;
  #L39bb16.  if v1 != v6 then goto L39bb1c;
  #L39bb1a.  goto L39bb40;
  #L39bb1c.  call temp:= `parseDateTime`(v3, v0) @signature `Lorg/joda/time/format/DateTimeFormatter;.parseDateTime:(Ljava/lang/String;)Lorg/joda/time/DateTime;` @kind virtual;
  #L39bb22.  v10:= temp @kind object;
  #L39bb24.  if v8 == 0 then goto L39bb34;
  #L39bb28.  v0:= new `org.joda.time.Interval`;
  #L39bb2c.  call `<init>`(v0, v8, v10) @signature `Lorg/joda/time/Interval;.<init>:(Lorg/joda/time/ReadablePeriod;Lorg/joda/time/ReadableInstant;)V` @kind direct;
  #L39bb32.  return v0 @kind object;
  #L39bb34.  v0:= new `org.joda.time.Interval`;
  #L39bb38.  call `<init>`(v0, v2, v10) @signature `Lorg/joda/time/Interval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableInstant;)V` @kind direct;
  #L39bb3e.  return v0 @kind object;
  #L39bb40.  if v8 != 0 then goto L39bb68;
  #L39bb44.  call temp:= `standard`() @signature `Lorg/joda/time/PeriodType;.standard:()Lorg/joda/time/PeriodType;` @kind static;
  #L39bb4a.  v10:= temp @kind object;
  #L39bb4c.  call temp:= `withParseType`(v4, v10) @signature `Lorg/joda/time/format/PeriodFormatter;.withParseType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/format/PeriodFormatter;` @kind virtual;
  #L39bb52.  v10:= temp @kind object;
  #L39bb54.  call temp:= `parsePeriod`(v10, v0) @signature `Lorg/joda/time/format/PeriodFormatter;.parsePeriod:(Ljava/lang/String;)Lorg/joda/time/Period;` @kind virtual;
  #L39bb5a.  v10:= temp @kind object;
  #L39bb5c.  v0:= new `org.joda.time.Interval`;
  #L39bb60.  call `<init>`(v0, v2, v10) @signature `Lorg/joda/time/Interval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadablePeriod;)V` @kind direct;
  #L39bb66.  return v0 @kind object;
  #L39bb68.  v0:= new `java.lang.IllegalArgumentException`;
  #L39bb6c.  v1:= new `java.lang.StringBuilder`;
  #L39bb70.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39bb76.  v2:= "Interval composed of two durations: " @kind object;
  #L39bb7a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39bb80.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39bb86.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39bb8c.  v10:= temp @kind object;
  #L39bb8e.  call `<init>`(v0, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39bb94.  throw v0;
  #L39bb96.  v0:= new `java.lang.IllegalArgumentException`;
  #L39bb9a.  v1:= new `java.lang.StringBuilder`;
  #L39bb9e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39bba4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39bbaa.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39bbb0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39bbb6.  v10:= temp @kind object;
  #L39bbb8.  call `<init>`(v0, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39bbbe.  throw v0;
  #L39bbc0.  v0:= new `java.lang.IllegalArgumentException`;
  #L39bbc4.  v1:= new `java.lang.StringBuilder`;
  #L39bbc8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39bbce.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39bbd4.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39bbda.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39bbe0.  v10:= temp @kind object;
  #L39bbe2.  call `<init>`(v0, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39bbe8.  throw v0;
  #L39bbea.  v0:= new `java.lang.IllegalArgumentException`;
  #L39bbee.  v1:= new `java.lang.StringBuilder`;
  #L39bbf2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L39bbf8.  v2:= "Format requires a '/' separator: " @kind object;
  #L39bbfc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39bc02.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L39bc08.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L39bc0e.  v10:= temp @kind object;
  #L39bc10.  call `<init>`(v0, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L39bc16.  throw v0;
}
procedure `boolean` `abuts`(`org.joda.time.Interval` v7 @kind this, `org.joda.time.ReadableInterval` v8 @kind object) @signature `Lorg/joda/time/Interval;.abuts:(Lorg/joda/time/ReadableInterval;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L39b8f0.  v0:= 0I;
  #L39b8f2.  v1:= 1I;
  #L39b8f4.  if v8 != 0 then goto L39b924;
  #L39b8f8.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L39b8fe.  v2:= temp @kind wide;
  #L39b900.  call temp:= `getStartMillis`(v7) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L39b906.  v4:= temp @kind wide;
  #L39b908.  v8:= lcmp(v4, v2);
  #L39b90c.  if v8 == 0 then goto L39b920;
  #L39b910.  call temp:= `getEndMillis`(v7) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L39b916.  v4:= temp @kind wide;
  #L39b918.  v8:= lcmp(v4, v2);
  #L39b91c.  if v8 != 0 then goto L39b922;
  #L39b920.  v0:= 1I;
  #L39b922.  return v0;
  #L39b924.  call temp:= `getEndMillis`(v8) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L39b92a.  v2:= temp @kind wide;
  #L39b92c.  call temp:= `getStartMillis`(v7) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L39b932.  v4:= temp @kind wide;
  #L39b934.  v6:= lcmp(v2, v4);
  #L39b938.  if v6 == 0 then goto L39b954;
  #L39b93c.  call temp:= `getEndMillis`(v7) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L39b942.  v2:= temp @kind wide;
  #L39b944.  call temp:= `getStartMillis`(v8) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L39b94a.  v4:= temp @kind wide;
  #L39b94c.  v8:= lcmp(v2, v4);
  #L39b950.  if v8 != 0 then goto L39b956;
  #L39b954.  v0:= 1I;
  #L39b956.  return v0;
}
procedure `org.joda.time.Interval` `gap`(`org.joda.time.Interval` v11 @kind this, `org.joda.time.ReadableInterval` v12 @kind object) @signature `Lorg/joda/time/Interval;.gap:(Lorg/joda/time/ReadableInterval;)Lorg/joda/time/Interval;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L39b968.  call temp:= `getReadableInterval`(v12) @signature `Lorg/joda/time/DateTimeUtils;.getReadableInterval:(Lorg/joda/time/ReadableInterval;)Lorg/joda/time/ReadableInterval;` @kind static;
  #L39b96e.  v12:= temp @kind object;
  #L39b970.  call temp:= `getStartMillis`(v12) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L39b976.  v3:= temp @kind wide;
  #L39b978.  call temp:= `getEndMillis`(v12) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L39b97e.  v6:= temp @kind wide;
  #L39b980.  call temp:= `getStartMillis`(v11) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L39b986.  v8:= temp @kind wide;
  #L39b988.  call temp:= `getEndMillis`(v11) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L39b98e.  v1:= temp @kind wide;
  #L39b990.  v12:= lcmp(v8, v6);
  #L39b994.  if v12 <= 0 then goto L39b9ae;
  #L39b998.  v12:= new `org.joda.time.Interval`;
  #L39b99c.  call temp:= `getChronology`(v11) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L39b9a2.  v10:= temp @kind object;
  #L39b9a4.  v5:= v12 @kind object;
  #L39b9a6.  call `<init>`(v5, v6, v8, v10) @signature `Lorg/joda/time/Interval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L39b9ac.  return v12 @kind object;
  #L39b9ae.  v12:= lcmp(v3, v1);
  #L39b9b2.  if v12 <= 0 then goto L39b9cc;
  #L39b9b6.  v12:= new `org.joda.time.Interval`;
  #L39b9ba.  call temp:= `getChronology`(v11) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L39b9c0.  v5:= temp @kind object;
  #L39b9c2.  v0:= v12 @kind object;
  #L39b9c4.  call `<init>`(v0, v1, v3, v5) @signature `Lorg/joda/time/Interval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L39b9ca.  return v12 @kind object;
  #L39b9cc.  v12:= 0I;
  #L39b9ce.  return v12 @kind object;
}
procedure `org.joda.time.Interval` `overlap`(`org.joda.time.Interval` v10 @kind this, `org.joda.time.ReadableInterval` v11 @kind object) @signature `Lorg/joda/time/Interval;.overlap:(Lorg/joda/time/ReadableInterval;)Lorg/joda/time/Interval;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L39b9e0.  call temp:= `getReadableInterval`(v11) @signature `Lorg/joda/time/DateTimeUtils;.getReadableInterval:(Lorg/joda/time/ReadableInterval;)Lorg/joda/time/ReadableInterval;` @kind static;
  #L39b9e6.  v11:= temp @kind object;
  #L39b9e8.  call temp:= `overlaps`(v10, v11) @signature `Lorg/joda/time/base/AbstractInterval;.overlaps:(Lorg/joda/time/ReadableInterval;)Z` @kind virtual;
  #L39b9ee.  v0:= temp;
  #L39b9f0.  if v0 != 0 then goto L39b9f8;
  #L39b9f4.  v11:= 0I;
  #L39b9f6.  return v11 @kind object;
  #L39b9f8.  call temp:= `getStartMillis`(v10) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L39b9fe.  v0:= temp @kind wide;
  #L39ba00.  call temp:= `getStartMillis`(v11) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L39ba06.  v2:= temp @kind wide;
  #L39ba08.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L39ba0e.  v5:= temp @kind wide;
  #L39ba10.  call temp:= `getEndMillis`(v10) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L39ba16.  v0:= temp @kind wide;
  #L39ba18.  call temp:= `getEndMillis`(v11) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L39ba1e.  v2:= temp @kind wide;
  #L39ba20.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L39ba26.  v7:= temp @kind wide;
  #L39ba28.  v11:= new `org.joda.time.Interval`;
  #L39ba2c.  call temp:= `getChronology`(v10) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L39ba32.  v9:= temp @kind object;
  #L39ba34.  v4:= v11 @kind object;
  #L39ba36.  call `<init>`(v4, v5, v7, v9) @signature `Lorg/joda/time/Interval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L39ba3c.  return v11 @kind object;
}
procedure `org.joda.time.Interval` `toInterval`(`org.joda.time.Interval` v0 @kind this) @signature `Lorg/joda/time/Interval;.toInterval:()Lorg/joda/time/Interval;` @AccessFlag PUBLIC {
    temp;

  #L39bc28.  return v0 @kind object;
}
procedure `org.joda.time.Interval` `withChronology`(`org.joda.time.Interval` v7 @kind this, `org.joda.time.Chronology` v8 @kind object) @signature `Lorg/joda/time/Interval;.withChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Interval;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L39bc3c.  call temp:= `getChronology`(v7) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L39bc42.  v0:= temp @kind object;
  #L39bc44.  if v0 != v8 then goto L39bc4a;
  #L39bc48.  return v7 @kind object;
  #L39bc4a.  v0:= new `org.joda.time.Interval`;
  #L39bc4e.  call temp:= `getStartMillis`(v7) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L39bc54.  v2:= temp @kind wide;
  #L39bc56.  call temp:= `getEndMillis`(v7) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L39bc5c.  v4:= temp @kind wide;
  #L39bc5e.  v1:= v0 @kind object;
  #L39bc60.  v6:= v8 @kind object;
  #L39bc62.  call `<init>`(v1, v2, v4, v6) @signature `Lorg/joda/time/Interval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L39bc68.  return v0 @kind object;
}
procedure `org.joda.time.Interval` `withDurationAfterStart`(`org.joda.time.Interval` v11 @kind this, `org.joda.time.ReadableDuration` v12 @kind object) @signature `Lorg/joda/time/Interval;.withDurationAfterStart:(Lorg/joda/time/ReadableDuration;)Lorg/joda/time/Interval;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L39bc7c.  call temp:= `getDurationMillis`(v12) @signature `Lorg/joda/time/DateTimeUtils;.getDurationMillis:(Lorg/joda/time/ReadableDuration;)J` @kind static;
  #L39bc82.  v3:= temp @kind wide;
  #L39bc84.  call temp:= `toDurationMillis`(v11) @signature `Lorg/joda/time/base/AbstractInterval;.toDurationMillis:()J` @kind virtual;
  #L39bc8a.  v0:= temp @kind wide;
  #L39bc8c.  v12:= lcmp(v3, v0);
  #L39bc90.  if v12 != 0 then goto L39bc96;
  #L39bc94.  return v11 @kind object;
  #L39bc96.  call temp:= `getChronology`(v11) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L39bc9c.  v10:= temp @kind object;
  #L39bc9e.  call temp:= `getStartMillis`(v11) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L39bca4.  v6:= temp @kind wide;
  #L39bca6.  v5:= 1I;
  #L39bca8.  v0:= v10 @kind object;
  #L39bcaa.  v1:= v6 @kind wide;
  #L39bcac.  call temp:= `add`(v0, v1, v3, v5) @signature `Lorg/joda/time/Chronology;.add:(JJI)J` @kind virtual;
  #L39bcb2.  v8:= temp @kind wide;
  #L39bcb4.  v12:= new `org.joda.time.Interval`;
  #L39bcb8.  v5:= v12 @kind object;
  #L39bcba.  call `<init>`(v5, v6, v8, v10) @signature `Lorg/joda/time/Interval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L39bcc0.  return v12 @kind object;
}
procedure `org.joda.time.Interval` `withDurationBeforeEnd`(`org.joda.time.Interval` v11 @kind this, `org.joda.time.ReadableDuration` v12 @kind object) @signature `Lorg/joda/time/Interval;.withDurationBeforeEnd:(Lorg/joda/time/ReadableDuration;)Lorg/joda/time/Interval;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L39bcd4.  call temp:= `getDurationMillis`(v12) @signature `Lorg/joda/time/DateTimeUtils;.getDurationMillis:(Lorg/joda/time/ReadableDuration;)J` @kind static;
  #L39bcda.  v3:= temp @kind wide;
  #L39bcdc.  call temp:= `toDurationMillis`(v11) @signature `Lorg/joda/time/base/AbstractInterval;.toDurationMillis:()J` @kind virtual;
  #L39bce2.  v0:= temp @kind wide;
  #L39bce4.  v12:= lcmp(v3, v0);
  #L39bce8.  if v12 != 0 then goto L39bcee;
  #L39bcec.  return v11 @kind object;
  #L39bcee.  call temp:= `getChronology`(v11) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L39bcf4.  v10:= temp @kind object;
  #L39bcf6.  call temp:= `getEndMillis`(v11) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L39bcfc.  v8:= temp @kind wide;
  #L39bcfe.  v5:= -1I;
  #L39bd00.  v0:= v10 @kind object;
  #L39bd02.  v1:= v8 @kind wide;
  #L39bd04.  call temp:= `add`(v0, v1, v3, v5) @signature `Lorg/joda/time/Chronology;.add:(JJI)J` @kind virtual;
  #L39bd0a.  v6:= temp @kind wide;
  #L39bd0c.  v12:= new `org.joda.time.Interval`;
  #L39bd10.  v5:= v12 @kind object;
  #L39bd12.  call `<init>`(v5, v6, v8, v10) @signature `Lorg/joda/time/Interval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L39bd18.  return v12 @kind object;
}
procedure `org.joda.time.Interval` `withEnd`(`org.joda.time.Interval` v2 @kind this, `org.joda.time.ReadableInstant` v3 @kind object) @signature `Lorg/joda/time/Interval;.withEnd:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Interval;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39bd2c.  call temp:= `getInstantMillis`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L39bd32.  v0:= temp @kind wide;
  #L39bd34.  call temp:= `withEndMillis`(v2, v0) @signature `Lorg/joda/time/Interval;.withEndMillis:(J)Lorg/joda/time/Interval;` @kind virtual;
  #L39bd3a.  v3:= temp @kind object;
  #L39bd3c.  return v3 @kind object;
}
procedure `org.joda.time.Interval` `withEndMillis`(`org.joda.time.Interval` v9 @kind this, `long` v10 ) @signature `Lorg/joda/time/Interval;.withEndMillis:(J)Lorg/joda/time/Interval;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L39bd50.  call temp:= `getEndMillis`(v9) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L39bd56.  v0:= temp @kind wide;
  #L39bd58.  v2:= lcmp(v10, v0);
  #L39bd5c.  if v2 != 0 then goto L39bd62;
  #L39bd60.  return v9 @kind object;
  #L39bd62.  v0:= new `org.joda.time.Interval`;
  #L39bd66.  call temp:= `getStartMillis`(v9) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L39bd6c.  v4:= temp @kind wide;
  #L39bd6e.  call temp:= `getChronology`(v9) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L39bd74.  v8:= temp @kind object;
  #L39bd76.  v3:= v0 @kind object;
  #L39bd78.  v6:= v10 @kind wide;
  #L39bd7a.  call `<init>`(v3, v4, v6, v8) @signature `Lorg/joda/time/Interval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L39bd80.  return v0 @kind object;
}
procedure `org.joda.time.Interval` `withPeriodAfterStart`(`org.joda.time.Interval` v6 @kind this, `org.joda.time.ReadablePeriod` v7 @kind object) @signature `Lorg/joda/time/Interval;.withPeriodAfterStart:(Lorg/joda/time/ReadablePeriod;)Lorg/joda/time/Interval;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L39bd94.  if v7 != 0 then goto L39bda4;
  #L39bd98.  v7:= 0I;
  #L39bd9a.  call temp:= `withDurationAfterStart`(v6, v7) @signature `Lorg/joda/time/Interval;.withDurationAfterStart:(Lorg/joda/time/ReadableDuration;)Lorg/joda/time/Interval;` @kind virtual;
  #L39bda0.  v7:= temp @kind object;
  #L39bda2.  return v7 @kind object;
  #L39bda4.  call temp:= `getChronology`(v6) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L39bdaa.  v5:= temp @kind object;
  #L39bdac.  call temp:= `getStartMillis`(v6) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L39bdb2.  v1:= temp @kind wide;
  #L39bdb4.  v0:= 1I;
  #L39bdb6.  call temp:= `add`(v5, v7, v1, v0) @signature `Lorg/joda/time/Chronology;.add:(Lorg/joda/time/ReadablePeriod;JI)J` @kind virtual;
  #L39bdbc.  v3:= temp @kind wide;
  #L39bdbe.  v7:= new `org.joda.time.Interval`;
  #L39bdc2.  v0:= v7 @kind object;
  #L39bdc4.  call `<init>`(v0, v1, v3, v5) @signature `Lorg/joda/time/Interval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L39bdca.  return v7 @kind object;
}
procedure `org.joda.time.Interval` `withPeriodBeforeEnd`(`org.joda.time.Interval` v6 @kind this, `org.joda.time.ReadablePeriod` v7 @kind object) @signature `Lorg/joda/time/Interval;.withPeriodBeforeEnd:(Lorg/joda/time/ReadablePeriod;)Lorg/joda/time/Interval;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L39bddc.  if v7 != 0 then goto L39bdec;
  #L39bde0.  v7:= 0I;
  #L39bde2.  call temp:= `withDurationBeforeEnd`(v6, v7) @signature `Lorg/joda/time/Interval;.withDurationBeforeEnd:(Lorg/joda/time/ReadableDuration;)Lorg/joda/time/Interval;` @kind virtual;
  #L39bde8.  v7:= temp @kind object;
  #L39bdea.  return v7 @kind object;
  #L39bdec.  call temp:= `getChronology`(v6) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L39bdf2.  v5:= temp @kind object;
  #L39bdf4.  call temp:= `getEndMillis`(v6) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L39bdfa.  v3:= temp @kind wide;
  #L39bdfc.  v0:= -1I;
  #L39bdfe.  call temp:= `add`(v5, v7, v3, v0) @signature `Lorg/joda/time/Chronology;.add:(Lorg/joda/time/ReadablePeriod;JI)J` @kind virtual;
  #L39be04.  v1:= temp @kind wide;
  #L39be06.  v7:= new `org.joda.time.Interval`;
  #L39be0a.  v0:= v7 @kind object;
  #L39be0c.  call `<init>`(v0, v1, v3, v5) @signature `Lorg/joda/time/Interval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L39be12.  return v7 @kind object;
}
procedure `org.joda.time.Interval` `withStart`(`org.joda.time.Interval` v2 @kind this, `org.joda.time.ReadableInstant` v3 @kind object) @signature `Lorg/joda/time/Interval;.withStart:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Interval;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L39be24.  call temp:= `getInstantMillis`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L39be2a.  v0:= temp @kind wide;
  #L39be2c.  call temp:= `withStartMillis`(v2, v0) @signature `Lorg/joda/time/Interval;.withStartMillis:(J)Lorg/joda/time/Interval;` @kind virtual;
  #L39be32.  v3:= temp @kind object;
  #L39be34.  return v3 @kind object;
}
procedure `org.joda.time.Interval` `withStartMillis`(`org.joda.time.Interval` v9 @kind this, `long` v10 ) @signature `Lorg/joda/time/Interval;.withStartMillis:(J)Lorg/joda/time/Interval;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L39be48.  call temp:= `getStartMillis`(v9) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L39be4e.  v0:= temp @kind wide;
  #L39be50.  v2:= lcmp(v10, v0);
  #L39be54.  if v2 != 0 then goto L39be5a;
  #L39be58.  return v9 @kind object;
  #L39be5a.  v0:= new `org.joda.time.Interval`;
  #L39be5e.  call temp:= `getEndMillis`(v9) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L39be64.  v6:= temp @kind wide;
  #L39be66.  call temp:= `getChronology`(v9) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L39be6c.  v8:= temp @kind object;
  #L39be6e.  v3:= v0 @kind object;
  #L39be70.  v4:= v10 @kind wide;
  #L39be72.  call `<init>`(v3, v4, v6, v8) @signature `Lorg/joda/time/Interval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L39be78.  return v0 @kind object;
}
