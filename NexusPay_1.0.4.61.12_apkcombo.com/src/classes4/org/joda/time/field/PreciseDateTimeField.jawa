record `org.joda.time.field.PreciseDateTimeField` @kind class @AccessFlag PUBLIC extends `org.joda.time.field.PreciseDurationDateTimeField` @kind class {
  `int` `org.joda.time.field.PreciseDateTimeField.iRange` @AccessFlag PRIVATE_FINAL;
  `org.joda.time.DurationField` `org.joda.time.field.PreciseDateTimeField.iRangeField` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@org.joda.time.field.PreciseDateTimeField.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.field.PreciseDateTimeField` v2 @kind this, `org.joda.time.DateTimeFieldType` v3 @kind object, `org.joda.time.DurationField` v4 @kind object, `org.joda.time.DurationField` v5 @kind object) @signature `Lorg/joda/time/field/PreciseDateTimeField;.<init>:(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3bec88.  call `<init>`(v2, v3, v4) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.<init>:(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;)V` @kind direct;
  #L3bec8e.  call temp:= `isPrecise`(v5) @signature `Lorg/joda/time/DurationField;.isPrecise:()Z` @kind virtual;
  #L3bec94.  v3:= temp;
  #L3bec96.  if v3 == 0 then goto L3becce;
  #L3bec9a.  call temp:= `getUnitMillis`(v5) @signature `Lorg/joda/time/DurationField;.getUnitMillis:()J` @kind virtual;
  #L3beca0.  v3:= temp @kind wide;
  #L3beca2.  call temp:= `getUnitMillis`(v2) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.getUnitMillis:()J` @kind virtual;
  #L3beca8.  v0:= temp @kind wide;
  #L3becaa.  v3:= v3 / v0 @kind long;
  #L3becac.  v4:= (`int`) v3 @kind l2i;
  #L3becae.  v2.`org.joda.time.field.PreciseDateTimeField.iRange` @type ^`int` := v4;
  #L3becb2.  v3:= 2I;
  #L3becb4.  if v4 < v3 then goto L3becbe;
  #L3becb8.  v2.`org.joda.time.field.PreciseDateTimeField.iRangeField` @type ^`org.joda.time.DurationField` := v5 @kind object;
  #L3becbc.  return @kind void;
  #L3becbe.  v3:= new `java.lang.IllegalArgumentException`;
  #L3becc2.  v4:= "The effective range must be at least 2" @kind object;
  #L3becc6.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3beccc.  throw v3;
  #L3becce.  v3:= new `java.lang.IllegalArgumentException`;
  #L3becd2.  v4:= "Range duration field must be precise" @kind object;
  #L3becd6.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3becdc.  throw v3;
}
procedure `long` `addWrapField`(`org.joda.time.field.PreciseDateTimeField` v4 @kind this, `long` v5 , `int` v7 ) @signature `Lorg/joda/time/field/PreciseDateTimeField;.addWrapField:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3bebec.  call temp:= `get`(v4, v5) @signature `Lorg/joda/time/field/PreciseDateTimeField;.get:(J)I` @kind virtual;
  #L3bebf2.  v0:= temp;
  #L3bebf4.  call temp:= `getMinimumValue`(v4) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.getMinimumValue:()I` @kind virtual;
  #L3bebfa.  v1:= temp;
  #L3bebfc.  call temp:= `getMaximumValue`(v4) @signature `Lorg/joda/time/field/PreciseDateTimeField;.getMaximumValue:()I` @kind virtual;
  #L3bec02.  v2:= temp;
  #L3bec04.  call temp:= `getWrappedValue`(v0, v7, v1, v2) @signature `Lorg/joda/time/field/FieldUtils;.getWrappedValue:(IIII)I` @kind static;
  #L3bec0a.  v7:= temp;
  #L3bec0c.  v7:= v7 - v0 @kind int;
  #L3bec0e.  v0:= (`long`) v7 @kind i2l;
  #L3bec10.  call temp:= `getUnitMillis`(v4) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.getUnitMillis:()J` @kind virtual;
  #L3bec16.  v2:= temp @kind wide;
  #L3bec18.  v0:= v0 * v2 @kind long;
  #L3bec1c.  v5:= v5 + v0 @kind long;
  #L3bec1e.  return v5 @kind wide;
}
procedure `int` `get`(`org.joda.time.field.PreciseDateTimeField` v3 @kind this, `long` v4 ) @signature `Lorg/joda/time/field/PreciseDateTimeField;.get:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3beb60.  v0:= 0L;
  #L3beb64.  v2:= lcmp(v4, v0);
  #L3beb68.  if v2 < 0 then goto L3beb82;
  #L3beb6c.  call temp:= `getUnitMillis`(v3) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.getUnitMillis:()J` @kind virtual;
  #L3beb72.  v0:= temp @kind wide;
  #L3beb74.  v4:= v4 / v0 @kind long;
  #L3beb76.  v0:= v3.`org.joda.time.field.PreciseDateTimeField.iRange` @type ^`int`;
  #L3beb7a.  v0:= (`long`) v0 @kind i2l;
  #L3beb7c.  v4:= v4 %% v0 @kind long;
  #L3beb7e.  v5:= (`int`) v4 @kind l2i;
  #L3beb80.  return v5;
  #L3beb82.  v0:= v3.`org.joda.time.field.PreciseDateTimeField.iRange` @type ^`int`;
  #L3beb86.  v0:= v0 + -1;
  #L3beb8a.  v1:= 1L;
  #L3beb8e.  v4:= v4 + v1 @kind long;
  #L3beb90.  call temp:= `getUnitMillis`(v3) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.getUnitMillis:()J` @kind virtual;
  #L3beb96.  v1:= temp @kind wide;
  #L3beb98.  v4:= v4 / v1 @kind long;
  #L3beb9a.  v1:= v3.`org.joda.time.field.PreciseDateTimeField.iRange` @type ^`int`;
  #L3beb9e.  v1:= (`long`) v1 @kind i2l;
  #L3beba0.  v4:= v4 %% v1 @kind long;
  #L3beba2.  v5:= (`int`) v4 @kind l2i;
  #L3beba4.  v0:= v0 + v5 @kind int;
  #L3beba6.  return v0;
}
procedure `int` `getMaximumValue`(`org.joda.time.field.PreciseDateTimeField` v1 @kind this) @signature `Lorg/joda/time/field/PreciseDateTimeField;.getMaximumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bebb8.  v0:= v1.`org.joda.time.field.PreciseDateTimeField.iRange` @type ^`int`;
  #L3bebbc.  v0:= v0 + -1;
  #L3bebc0.  return v0;
}
procedure `int` `getRange`(`org.joda.time.field.PreciseDateTimeField` v1 @kind this) @signature `Lorg/joda/time/field/PreciseDateTimeField;.getRange:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bebd4.  v0:= v1.`org.joda.time.field.PreciseDateTimeField.iRange` @type ^`int`;
  #L3bebd8.  return v0;
}
procedure `org.joda.time.DurationField` `getRangeDurationField`(`org.joda.time.field.PreciseDateTimeField` v1 @kind this) @signature `Lorg/joda/time/field/PreciseDateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bec70.  v0:= v1.`org.joda.time.field.PreciseDateTimeField.iRangeField` @type ^`org.joda.time.DurationField` @kind object;
  #L3bec74.  return v0 @kind object;
}
procedure `long` `set`(`org.joda.time.field.PreciseDateTimeField` v4 @kind this, `long` v5 , `int` v7 ) @signature `Lorg/joda/time/field/PreciseDateTimeField;.set:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3bec30.  call temp:= `getMinimumValue`(v4) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.getMinimumValue:()I` @kind virtual;
  #L3bec36.  v0:= temp;
  #L3bec38.  call temp:= `getMaximumValue`(v4) @signature `Lorg/joda/time/field/PreciseDateTimeField;.getMaximumValue:()I` @kind virtual;
  #L3bec3e.  v1:= temp;
  #L3bec40.  call `verifyValueBounds`(v4, v7, v0, v1) @signature `Lorg/joda/time/field/FieldUtils;.verifyValueBounds:(Lorg/joda/time/DateTimeField;III)V` @kind static;
  #L3bec46.  call temp:= `get`(v4, v5) @signature `Lorg/joda/time/field/PreciseDateTimeField;.get:(J)I` @kind virtual;
  #L3bec4c.  v0:= temp;
  #L3bec4e.  v7:= v7 - v0 @kind int;
  #L3bec50.  v0:= (`long`) v7 @kind i2l;
  #L3bec52.  v2:= v4.`org.joda.time.field.PreciseDurationDateTimeField.iUnitMillis` @type ^`long` @kind wide;
  #L3bec56.  v0:= v0 * v2 @kind long;
  #L3bec5a.  v5:= v5 + v0 @kind long;
  #L3bec5c.  return v5 @kind wide;
}
