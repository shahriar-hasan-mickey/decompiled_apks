record `org.joda.time.field.FieldUtils` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`org.joda.time.field.FieldUtils` v0 @kind this) @signature `Lorg/joda/time/field/FieldUtils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3be140.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3be146.  return @kind void;
}
procedure `boolean` `equals`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lorg/joda/time/field/FieldUtils;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3bdc4c.  if v0 != v1 then goto L3bdc54;
  #L3bdc50.  v0:= 1I;
  #L3bdc52.  return v0;
  #L3bdc54.  if v0 == 0 then goto L3bdc68;
  #L3bdc58.  if v1 != 0 then goto L3bdc5e;
  #L3bdc5c.  goto L3bdc68;
  #L3bdc5e.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3bdc64.  v0:= temp;
  #L3bdc66.  return v0;
  #L3bdc68.  v0:= 0I;
  #L3bdc6a.  return v0;
}
procedure `int` `getWrappedValue`(`int` v0 , `int` v1 , `int` v2 ) @signature `Lorg/joda/time/field/FieldUtils;.getWrappedValue:(III)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3bdc7c.  if v1 >= v2 then goto L3bdca6;
  #L3bdc80.  v2:= v2 - v1 @kind int;
  #L3bdc82.  v2:= v2 + 1;
  #L3bdc86.  v0:= v0 - v1 @kind int;
  #L3bdc88.  if v0 < 0 then goto L3bdc92;
  #L3bdc8c.  v0:= v0 %% v2 @kind int;
  #L3bdc8e.  v0:= v0 + v1 @kind int;
  #L3bdc90.  return v0;
  #L3bdc92.  v0:= -v0 @kind int;
  #L3bdc94.  v0:= v0 %% v2 @kind int;
  #L3bdc96.  if v0 != 0 then goto L3bdca0;
  #L3bdc9a.  v1:= v1 + 0;
  #L3bdc9e.  return v1;
  #L3bdca0.  v2:= v2 - v0 @kind int;
  #L3bdca2.  v2:= v2 + v1 @kind int;
  #L3bdca4.  return v2;
  #L3bdca6.  v0:= new `java.lang.IllegalArgumentException`;
  #L3bdcaa.  v1:= "MIN > MAX" @kind object;
  #L3bdcae.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bdcb4.  throw v0;
}
procedure `int` `getWrappedValue`(`int` v0 , `int` v1 , `int` v2 , `int` v3 ) @signature `Lorg/joda/time/field/FieldUtils;.getWrappedValue:(IIII)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3bdcc8.  v0:= v0 + v1 @kind int;
  #L3bdcca.  call temp:= `getWrappedValue`(v0, v2, v3) @signature `Lorg/joda/time/field/FieldUtils;.getWrappedValue:(III)I` @kind static;
  #L3bdcd0.  v0:= temp;
  #L3bdcd2.  return v0;
}
procedure `int` `safeAdd`(`int` v3 , `int` v4 ) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3bdce4.  v0:= v3 + v4 @kind int;
  #L3bdce8.  v1:= v3 ^~ v0 @kind int;
  #L3bdcec.  if v1 >= 0 then goto L3bdd38;
  #L3bdcf0.  v1:= v3 ^~ v4 @kind int;
  #L3bdcf4.  if v1 >= 0 then goto L3bdcfa;
  #L3bdcf8.  goto L3bdd38;
  #L3bdcfa.  v0:= new `java.lang.ArithmeticException`;
  #L3bdcfe.  v1:= new `java.lang.StringBuilder`;
  #L3bdd02.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bdd08.  v2:= "The calculation caused an overflow: " @kind object;
  #L3bdd0c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdd12.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdd18.  v3:= " + " @kind object;
  #L3bdd1c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdd22.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdd28.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bdd2e.  v3:= temp @kind object;
  #L3bdd30.  call `<init>`(v0, v3) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bdd36.  throw v0;
  #L3bdd38.  return v0;
}
procedure `long` `safeAdd`(`long` v7 , `long` v9 ) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3bde74.  v0:= v7 + v9 @kind long;
  #L3bde78.  v2:= v7 ^~ v0 @kind long;
  #L3bde7c.  v4:= 0L;
  #L3bde80.  v6:= lcmp(v2, v4);
  #L3bde84.  if v6 >= 0 then goto L3bded4;
  #L3bde88.  v2:= v7 ^~ v9 @kind long;
  #L3bde8c.  v6:= lcmp(v2, v4);
  #L3bde90.  if v6 >= 0 then goto L3bde96;
  #L3bde94.  goto L3bded4;
  #L3bde96.  v0:= new `java.lang.ArithmeticException`;
  #L3bde9a.  v1:= new `java.lang.StringBuilder`;
  #L3bde9e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bdea4.  v2:= "The calculation caused an overflow: " @kind object;
  #L3bdea8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdeae.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdeb4.  v7:= " + " @kind object;
  #L3bdeb8.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdebe.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdec4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bdeca.  v7:= temp @kind object;
  #L3bdecc.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bded2.  throw v0;
  #L3bded4.  return v0 @kind wide;
}
procedure `long` `safeDivide`(`long` v3 , `long` v5 ) @signature `Lorg/joda/time/field/FieldUtils;.safeDivide:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3bdee8.  v0:= -9223372036854775808L;
  #L3bdeec.  v2:= lcmp(v3, v0);
  #L3bdef0.  if v2 != 0 then goto L3bdf40;
  #L3bdef4.  v0:= -1L;
  #L3bdef8.  v2:= lcmp(v5, v0);
  #L3bdefc.  if v2 == 0 then goto L3bdf02;
  #L3bdf00.  goto L3bdf40;
  #L3bdf02.  v0:= new `java.lang.ArithmeticException`;
  #L3bdf06.  v1:= new `java.lang.StringBuilder`;
  #L3bdf0a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bdf10.  v2:= "Multiplication overflows a long: " @kind object;
  #L3bdf14.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdf1a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdf20.  v3:= " / " @kind object;
  #L3bdf24.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdf2a.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdf30.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bdf36.  v3:= temp @kind object;
  #L3bdf38.  call `<init>`(v0, v3) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bdf3e.  throw v0;
  #L3bdf40.  v3:= v3 / v5 @kind long;
  #L3bdf42.  return v3 @kind wide;
}
procedure `int` `safeMultiply`(`int` v5 , `int` v6 ) @signature `Lorg/joda/time/field/FieldUtils;.safeMultiply:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3bdd4c.  v0:= (`long`) v5 @kind i2l;
  #L3bdd4e.  v2:= (`long`) v6 @kind i2l;
  #L3bdd50.  v0:= v0 * v2 @kind long;
  #L3bdd54.  v2:= -2147483648L;
  #L3bdd5a.  v4:= lcmp(v0, v2);
  #L3bdd5e.  if v4 < 0 then goto L3bdd74;
  #L3bdd62.  v2:= 2147483647L;
  #L3bdd68.  v4:= lcmp(v0, v2);
  #L3bdd6c.  if v4 > 0 then goto L3bdd74;
  #L3bdd70.  v5:= (`int`) v0 @kind l2i;
  #L3bdd72.  return v5;
  #L3bdd74.  v0:= new `java.lang.ArithmeticException`;
  #L3bdd78.  v1:= new `java.lang.StringBuilder`;
  #L3bdd7c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bdd82.  v2:= "Multiplication overflows an int: " @kind object;
  #L3bdd86.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdd8c.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdd92.  v5:= " * " @kind object;
  #L3bdd96.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdd9c.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdda2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bdda8.  v5:= temp @kind object;
  #L3bddaa.  call `<init>`(v0, v5) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bddb0.  throw v0;
}
procedure `long` `safeMultiply`(`long` v7 , `int` v9 ) @signature `Lorg/joda/time/field/FieldUtils;.safeMultiply:(JI)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3bdf54.  v0:= -1I;
  #L3bdf56.  v1:= " * " @kind object;
  #L3bdf5a.  v2:= "Multiplication overflows a long: " @kind object;
  #L3bdf5e.  if v9 == v0 then goto L3bdfbe;
  #L3bdf62.  if v9 == 0 then goto L3bdfb8;
  #L3bdf66.  v0:= 1I;
  #L3bdf68.  if v9 == v0 then goto L3bdfb6;
  #L3bdf6c.  v3:= (`long`) v9 @kind i2l;
  #L3bdf6e.  v5:= v7 * v3 @kind long;
  #L3bdf72.  v3:= v5 / v3 @kind long;
  #L3bdf76.  v0:= lcmp(v3, v7);
  #L3bdf7a.  if v0 != 0 then goto L3bdf80;
  #L3bdf7e.  return v5 @kind wide;
  #L3bdf80.  v0:= new `java.lang.ArithmeticException`;
  #L3bdf84.  v3:= new `java.lang.StringBuilder`;
  #L3bdf88.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bdf8e.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdf94.  call temp:= `append`(v3, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdf9a.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdfa0.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdfa6.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bdfac.  v7:= temp @kind object;
  #L3bdfae.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bdfb4.  throw v0;
  #L3bdfb6.  return v7 @kind wide;
  #L3bdfb8.  v7:= 0L;
  #L3bdfbc.  return v7 @kind wide;
  #L3bdfbe.  v3:= -9223372036854775808L;
  #L3bdfc2.  v0:= lcmp(v7, v3);
  #L3bdfc6.  if v0 == 0 then goto L3bdfce;
  #L3bdfca.  v7:= -v7 @kind long;
  #L3bdfcc.  return v7 @kind wide;
  #L3bdfce.  v0:= new `java.lang.ArithmeticException`;
  #L3bdfd2.  v3:= new `java.lang.StringBuilder`;
  #L3bdfd6.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bdfdc.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdfe2.  call temp:= `append`(v3, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdfe8.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdfee.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bdff4.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bdffa.  v7:= temp @kind object;
  #L3bdffc.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3be002.  throw v0;
}
procedure `long` `safeMultiply`(`long` v7 , `long` v9 ) @signature `Lorg/joda/time/field/FieldUtils;.safeMultiply:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3be014.  v0:= 1L;
  #L3be018.  v2:= lcmp(v9, v0);
  #L3be01c.  if v2 != 0 then goto L3be022;
  #L3be020.  return v7 @kind wide;
  #L3be022.  v2:= lcmp(v7, v0);
  #L3be026.  if v2 != 0 then goto L3be02c;
  #L3be02a.  return v9 @kind wide;
  #L3be02c.  v0:= 0L;
  #L3be030.  v2:= lcmp(v7, v0);
  #L3be034.  if v2 == 0 then goto L3be0ba;
  #L3be038.  v2:= lcmp(v9, v0);
  #L3be03c.  if v2 != 0 then goto L3be042;
  #L3be040.  goto L3be0ba;
  #L3be042.  v0:= v7 * v9 @kind long;
  #L3be046.  v2:= v0 / v9 @kind long;
  #L3be04a.  v4:= lcmp(v2, v7);
  #L3be04e.  if v4 != 0 then goto L3be07c;
  #L3be052.  v2:= -1L;
  #L3be056.  v4:= -9223372036854775808L;
  #L3be05a.  v6:= lcmp(v7, v4);
  #L3be05e.  if v6 != 0 then goto L3be06a;
  #L3be062.  v6:= lcmp(v9, v2);
  #L3be066.  if v6 == 0 then goto L3be07c;
  #L3be06a.  v6:= lcmp(v9, v4);
  #L3be06e.  if v6 != 0 then goto L3be07a;
  #L3be072.  v4:= lcmp(v7, v2);
  #L3be076.  if v4 == 0 then goto L3be07c;
  #L3be07a.  return v0 @kind wide;
  #L3be07c.  v0:= new `java.lang.ArithmeticException`;
  #L3be080.  v1:= new `java.lang.StringBuilder`;
  #L3be084.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3be08a.  v2:= "Multiplication overflows a long: " @kind object;
  #L3be08e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3be094.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3be09a.  v7:= " * " @kind object;
  #L3be09e.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3be0a4.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3be0aa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3be0b0.  v7:= temp @kind object;
  #L3be0b2.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3be0b8.  throw v0;
  #L3be0ba.  return v0 @kind wide;
}
procedure `int` `safeMultiplyToInt`(`long` v0 , `long` v2 ) @signature `Lorg/joda/time/field/FieldUtils;.safeMultiplyToInt:(JJ)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3bddc4.  call temp:= `safeMultiply`(v0, v2) @signature `Lorg/joda/time/field/FieldUtils;.safeMultiply:(JJ)J` @kind static;
  #L3bddca.  v0:= temp @kind wide;
  #L3bddcc.  call temp:= `safeToInt`(v0) @signature `Lorg/joda/time/field/FieldUtils;.safeToInt:(J)I` @kind static;
  #L3bddd2.  v0:= temp;
  #L3bddd4.  return v0;
}
procedure `int` `safeNegate`(`int` v1 ) @signature `Lorg/joda/time/field/FieldUtils;.safeNegate:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3bdde8.  v0:= -2147483648I;
  #L3bddec.  if v1 == v0 then goto L3bddf4;
  #L3bddf0.  v1:= -v1 @kind int;
  #L3bddf2.  return v1;
  #L3bddf4.  v1:= new `java.lang.ArithmeticException`;
  #L3bddf8.  v0:= "Integer.MIN_VALUE cannot be negated" @kind object;
  #L3bddfc.  call `<init>`(v1, v0) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bde02.  throw v1;
}
procedure `long` `safeSubtract`(`long` v7 , `long` v9 ) @signature `Lorg/joda/time/field/FieldUtils;.safeSubtract:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3be0cc.  v0:= v7 - v9 @kind long;
  #L3be0d0.  v2:= v7 ^~ v0 @kind long;
  #L3be0d4.  v4:= 0L;
  #L3be0d8.  v6:= lcmp(v2, v4);
  #L3be0dc.  if v6 >= 0 then goto L3be12c;
  #L3be0e0.  v2:= v7 ^~ v9 @kind long;
  #L3be0e4.  v6:= lcmp(v2, v4);
  #L3be0e8.  if v6 < 0 then goto L3be0ee;
  #L3be0ec.  goto L3be12c;
  #L3be0ee.  v0:= new `java.lang.ArithmeticException`;
  #L3be0f2.  v1:= new `java.lang.StringBuilder`;
  #L3be0f6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3be0fc.  v2:= "The calculation caused an overflow: " @kind object;
  #L3be100.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3be106.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3be10c.  v7:= " - " @kind object;
  #L3be110.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3be116.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3be11c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3be122.  v7:= temp @kind object;
  #L3be124.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3be12a.  throw v0;
  #L3be12c.  return v0 @kind wide;
}
procedure `int` `safeToInt`(`long` v3 ) @signature `Lorg/joda/time/field/FieldUtils;.safeToInt:(J)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3bde14.  v0:= -2147483648L;
  #L3bde1a.  v2:= lcmp(v0, v3);
  #L3bde1e.  if v2 > 0 then goto L3bde34;
  #L3bde22.  v0:= 2147483647L;
  #L3bde28.  v2:= lcmp(v3, v0);
  #L3bde2c.  if v2 > 0 then goto L3bde34;
  #L3bde30.  v4:= (`int`) v3 @kind l2i;
  #L3bde32.  return v4;
  #L3bde34.  v0:= new `java.lang.ArithmeticException`;
  #L3bde38.  v1:= new `java.lang.StringBuilder`;
  #L3bde3c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bde42.  v2:= "Value cannot fit in an int: " @kind object;
  #L3bde46.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bde4c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bde52.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bde58.  v3:= temp @kind object;
  #L3bde5a.  call `<init>`(v0, v3) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bde60.  throw v0;
}
procedure `void` `verifyValueBounds`(`java.lang.String` v1 @kind object, `int` v2 , `int` v3 , `int` v4 ) @signature `Lorg/joda/time/field/FieldUtils;.verifyValueBounds:(Ljava/lang/String;III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3be158.  if v2 < v3 then goto L3be162;
  #L3be15c.  if v2 > v4 then goto L3be162;
  #L3be160.  return @kind void;
  #L3be162.  v0:= new `org.joda.time.IllegalFieldValueException`;
  #L3be166.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3be16c.  v2:= temp @kind object;
  #L3be16e.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3be174.  v3:= temp @kind object;
  #L3be176.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3be17c.  v4:= temp @kind object;
  #L3be17e.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lorg/joda/time/IllegalFieldValueException;.<init>:(Ljava/lang/String;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V` @kind direct;
  #L3be184.  throw v0;
}
procedure `void` `verifyValueBounds`(`org.joda.time.DateTimeField` v1 @kind object, `int` v2 , `int` v3 , `int` v4 ) @signature `Lorg/joda/time/field/FieldUtils;.verifyValueBounds:(Lorg/joda/time/DateTimeField;III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3be198.  if v2 < v3 then goto L3be1a2;
  #L3be19c.  if v2 > v4 then goto L3be1a2;
  #L3be1a0.  return @kind void;
  #L3be1a2.  v0:= new `org.joda.time.IllegalFieldValueException`;
  #L3be1a6.  call temp:= `getType`(v1) @signature `Lorg/joda/time/DateTimeField;.getType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3be1ac.  v1:= temp @kind object;
  #L3be1ae.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3be1b4.  v2:= temp @kind object;
  #L3be1b6.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3be1bc.  v3:= temp @kind object;
  #L3be1be.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3be1c4.  v4:= temp @kind object;
  #L3be1c6.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lorg/joda/time/IllegalFieldValueException;.<init>:(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V` @kind direct;
  #L3be1cc.  throw v0;
}
procedure `void` `verifyValueBounds`(`org.joda.time.DateTimeFieldType` v1 @kind object, `int` v2 , `int` v3 , `int` v4 ) @signature `Lorg/joda/time/field/FieldUtils;.verifyValueBounds:(Lorg/joda/time/DateTimeFieldType;III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3be1e0.  if v2 < v3 then goto L3be1ea;
  #L3be1e4.  if v2 > v4 then goto L3be1ea;
  #L3be1e8.  return @kind void;
  #L3be1ea.  v0:= new `org.joda.time.IllegalFieldValueException`;
  #L3be1ee.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3be1f4.  v2:= temp @kind object;
  #L3be1f6.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3be1fc.  v3:= temp @kind object;
  #L3be1fe.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3be204.  v4:= temp @kind object;
  #L3be206.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lorg/joda/time/IllegalFieldValueException;.<init>:(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V` @kind direct;
  #L3be20c.  throw v0;
}
