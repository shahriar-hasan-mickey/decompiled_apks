record `org.joda.time.field.BaseDateTimeField` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.joda.time.DateTimeField` @kind class {
  `org.joda.time.DateTimeFieldType` `org.joda.time.field.BaseDateTimeField.iType` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.joda.time.field.BaseDateTimeField` v1 @kind this, `org.joda.time.DateTimeFieldType` v2 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.<init>:(Lorg/joda/time/DateTimeFieldType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L3bc900.  call `<init>`(v1) @signature `Lorg/joda/time/DateTimeField;.<init>:()V` @kind direct;
  #L3bc906.  if v2 == 0 then goto L3bc910;
  #L3bc90a.  v1.`org.joda.time.field.BaseDateTimeField.iType` @type ^`org.joda.time.DateTimeFieldType` := v2 @kind object;
  #L3bc90e.  return @kind void;
  #L3bc910.  v2:= new `java.lang.IllegalArgumentException`;
  #L3bc914.  v0:= "The type must not be null" @kind object;
  #L3bc918.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bc91e.  throw v2;
}
procedure `long` `add`(`org.joda.time.field.BaseDateTimeField` v1 @kind this, `long` v2 , `int` v4 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.add:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bc6ec.  call temp:= `getDurationField`(v1) @signature `Lorg/joda/time/field/BaseDateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3bc6f2.  v0:= temp @kind object;
  #L3bc6f4.  call temp:= `add`(v0, v2, v4) @signature `Lorg/joda/time/DurationField;.add:(JI)J` @kind virtual;
  #L3bc6fa.  v2:= temp @kind wide;
  #L3bc6fc.  return v2 @kind wide;
}
procedure `long` `add`(`org.joda.time.field.BaseDateTimeField` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.add:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bc710.  call temp:= `getDurationField`(v1) @signature `Lorg/joda/time/field/BaseDateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3bc716.  v0:= temp @kind object;
  #L3bc718.  call temp:= `add`(v0, v2, v4) @signature `Lorg/joda/time/DurationField;.add:(JJ)J` @kind virtual;
  #L3bc71e.  v2:= temp @kind wide;
  #L3bc720.  return v2 @kind wide;
}
procedure `int`[] `add`(`org.joda.time.field.BaseDateTimeField` v9 @kind this, `org.joda.time.ReadablePartial` v10 @kind object, `int` v11 , `int`[] v12 @kind object, `int` v13 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.add:(Lorg/joda/time/ReadablePartial;I[II)[I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3bc168.  if v13 != 0 then goto L3bc16e;
  #L3bc16c.  return v12 @kind object;
  #L3bc16e.  v0:= 0I;
  #L3bc170.  v1:= "Fields invalid for add" @kind object;
  #L3bc174.  v2:= "Maximum value exceeded for add" @kind object;
  #L3bc178.  if v13 <= 0 then goto L3bc218;
  #L3bc17c.  call temp:= `getMaximumValue`(v9, v10, v12) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3bc182.  v3:= temp;
  #L3bc184.  v4:= v12[v11];
  #L3bc188.  v4:= v4 + v13 @kind int;
  #L3bc18a.  v4:= (`long`) v4 @kind i2l;
  #L3bc18c.  v6:= (`long`) v3 @kind i2l;
  #L3bc18e.  v8:= lcmp(v4, v6);
  #L3bc192.  if v8 > 0 then goto L3bc19e;
  #L3bc196.  v3:= (`int`) v4 @kind l2i;
  #L3bc198.  v12[v11]:= v3;
  #L3bc19c.  goto L3bc218;
  #L3bc19e.  if v0 != 0 then goto L3bc1f0;
  #L3bc1a2.  if v11 == 0 then goto L3bc1e4;
  #L3bc1a6.  v0:= v11 + -1;
  #L3bc1aa.  call temp:= `getField`(v10, v0) @signature `Lorg/joda/time/ReadablePartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind interface;
  #L3bc1b0.  v0:= temp @kind object;
  #L3bc1b2.  call temp:= `getRangeDurationField`(v9) @signature `Lorg/joda/time/field/BaseDateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3bc1b8.  v2:= temp @kind object;
  #L3bc1ba.  call temp:= `getType`(v2) @signature `Lorg/joda/time/DurationField;.getType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3bc1c0.  v2:= temp @kind object;
  #L3bc1c2.  call temp:= `getDurationField`(v0) @signature `Lorg/joda/time/DateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3bc1c8.  v4:= temp @kind object;
  #L3bc1ca.  call temp:= `getType`(v4) @signature `Lorg/joda/time/DurationField;.getType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3bc1d0.  v4:= temp @kind object;
  #L3bc1d2.  if v2 != v4 then goto L3bc1d8;
  #L3bc1d6.  goto L3bc1f0;
  #L3bc1d8.  v10:= new `java.lang.IllegalArgumentException`;
  #L3bc1dc.  call `<init>`(v10, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bc1e2.  throw v10;
  #L3bc1e4.  v10:= new `java.lang.IllegalArgumentException`;
  #L3bc1e8.  call `<init>`(v10, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bc1ee.  throw v10;
  #L3bc1f0.  v3:= v3 + 1;
  #L3bc1f4.  v1:= v12[v11];
  #L3bc1f8.  v3:= v3 - v1 @kind int;
  #L3bc1fa.  v13:= v13 - v3 @kind int;
  #L3bc1fc.  v1:= v11 + -1;
  #L3bc200.  v2:= 1I;
  #L3bc202.  call temp:= `add`(v0, v10, v1, v12, v2) @signature `Lorg/joda/time/DateTimeField;.add:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3bc208.  v12:= temp @kind object;
  #L3bc20a.  call temp:= `getMinimumValue`(v9, v10, v12) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3bc210.  v1:= temp;
  #L3bc212.  v12[v11]:= v1;
  #L3bc216.  goto L3bc170;
  #L3bc218.  if v13 >= 0 then goto L3bc2b8;
  #L3bc21c.  call temp:= `getMinimumValue`(v9, v10, v12) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3bc222.  v3:= temp;
  #L3bc224.  v4:= v12[v11];
  #L3bc228.  v4:= v4 + v13 @kind int;
  #L3bc22a.  v4:= (`long`) v4 @kind i2l;
  #L3bc22c.  v6:= (`long`) v3 @kind i2l;
  #L3bc22e.  v8:= lcmp(v4, v6);
  #L3bc232.  if v8 < 0 then goto L3bc23e;
  #L3bc236.  v13:= (`int`) v4 @kind l2i;
  #L3bc238.  v12[v11]:= v13;
  #L3bc23c.  goto L3bc2b8;
  #L3bc23e.  if v0 != 0 then goto L3bc290;
  #L3bc242.  if v11 == 0 then goto L3bc284;
  #L3bc246.  v0:= v11 + -1;
  #L3bc24a.  call temp:= `getField`(v10, v0) @signature `Lorg/joda/time/ReadablePartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind interface;
  #L3bc250.  v0:= temp @kind object;
  #L3bc252.  call temp:= `getRangeDurationField`(v9) @signature `Lorg/joda/time/field/BaseDateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3bc258.  v4:= temp @kind object;
  #L3bc25a.  call temp:= `getType`(v4) @signature `Lorg/joda/time/DurationField;.getType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3bc260.  v4:= temp @kind object;
  #L3bc262.  call temp:= `getDurationField`(v0) @signature `Lorg/joda/time/DateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3bc268.  v5:= temp @kind object;
  #L3bc26a.  call temp:= `getType`(v5) @signature `Lorg/joda/time/DurationField;.getType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3bc270.  v5:= temp @kind object;
  #L3bc272.  if v4 != v5 then goto L3bc278;
  #L3bc276.  goto L3bc290;
  #L3bc278.  v10:= new `java.lang.IllegalArgumentException`;
  #L3bc27c.  call `<init>`(v10, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bc282.  throw v10;
  #L3bc284.  v10:= new `java.lang.IllegalArgumentException`;
  #L3bc288.  call `<init>`(v10, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bc28e.  throw v10;
  #L3bc290.  v3:= v3 + -1;
  #L3bc294.  v4:= v12[v11];
  #L3bc298.  v3:= v3 - v4 @kind int;
  #L3bc29a.  v13:= v13 - v3 @kind int;
  #L3bc29c.  v3:= v11 + -1;
  #L3bc2a0.  v4:= -1I;
  #L3bc2a2.  call temp:= `add`(v0, v10, v3, v12, v4) @signature `Lorg/joda/time/DateTimeField;.add:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3bc2a8.  v12:= temp @kind object;
  #L3bc2aa.  call temp:= `getMaximumValue`(v9, v10, v12) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3bc2b0.  v3:= temp;
  #L3bc2b2.  v12[v11]:= v3;
  #L3bc2b6.  goto L3bc218;
  #L3bc2b8.  v13:= v12[v11];
  #L3bc2bc.  call temp:= `set`(v9, v10, v11, v12, v13) @signature `Lorg/joda/time/field/BaseDateTimeField;.set:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3bc2c2.  v10:= temp @kind object;
  #L3bc2c4.  return v10 @kind object;
}
procedure `long` `addWrapField`(`org.joda.time.field.BaseDateTimeField` v3 @kind this, `long` v4 , `int` v6 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.addWrapField:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3bc734.  call temp:= `get`(v3, v4) @signature `Lorg/joda/time/field/BaseDateTimeField;.get:(J)I` @kind virtual;
  #L3bc73a.  v0:= temp;
  #L3bc73c.  call temp:= `getMinimumValue`(v3, v4) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMinimumValue:(J)I` @kind virtual;
  #L3bc742.  v1:= temp;
  #L3bc744.  call temp:= `getMaximumValue`(v3, v4) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:(J)I` @kind virtual;
  #L3bc74a.  v2:= temp;
  #L3bc74c.  call temp:= `getWrappedValue`(v0, v6, v1, v2) @signature `Lorg/joda/time/field/FieldUtils;.getWrappedValue:(IIII)I` @kind static;
  #L3bc752.  v6:= temp;
  #L3bc754.  call temp:= `set`(v3, v4, v6) @signature `Lorg/joda/time/field/BaseDateTimeField;.set:(JI)J` @kind virtual;
  #L3bc75a.  v4:= temp @kind wide;
  #L3bc75c.  return v4 @kind wide;
}
procedure `int`[] `addWrapField`(`org.joda.time.field.BaseDateTimeField` v3 @kind this, `org.joda.time.ReadablePartial` v4 @kind object, `int` v5 , `int`[] v6 @kind object, `int` v7 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.addWrapField:(Lorg/joda/time/ReadablePartial;I[II)[I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3bc2d8.  v0:= v6[v5];
  #L3bc2dc.  call temp:= `getMinimumValue`(v3, v4) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;)I` @kind virtual;
  #L3bc2e2.  v1:= temp;
  #L3bc2e4.  call temp:= `getMaximumValue`(v3, v4) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;)I` @kind virtual;
  #L3bc2ea.  v2:= temp;
  #L3bc2ec.  call temp:= `getWrappedValue`(v0, v7, v1, v2) @signature `Lorg/joda/time/field/FieldUtils;.getWrappedValue:(IIII)I` @kind static;
  #L3bc2f2.  v7:= temp;
  #L3bc2f4.  call temp:= `set`(v3, v4, v5, v6, v7) @signature `Lorg/joda/time/field/BaseDateTimeField;.set:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3bc2fa.  v4:= temp @kind object;
  #L3bc2fc.  return v4 @kind object;
}
procedure `int`[] `addWrapPartial`(`org.joda.time.field.BaseDateTimeField` v8 @kind this, `org.joda.time.ReadablePartial` v9 @kind object, `int` v10 , `int`[] v11 @kind object, `int` v12 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.addWrapPartial:(Lorg/joda/time/ReadablePartial;I[II)[I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3bc310.  if v12 != 0 then goto L3bc316;
  #L3bc314.  return v11 @kind object;
  #L3bc316.  v0:= 0I;
  #L3bc318.  v1:= "Fields invalid for add" @kind object;
  #L3bc31c.  if v12 <= 0 then goto L3bc3ca;
  #L3bc320.  call temp:= `getMaximumValue`(v8, v9, v11) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3bc326.  v2:= temp;
  #L3bc328.  v3:= v11[v10];
  #L3bc32c.  v3:= v3 + v12 @kind int;
  #L3bc32e.  v3:= (`long`) v3 @kind i2l;
  #L3bc330.  v5:= (`long`) v2 @kind i2l;
  #L3bc332.  v7:= lcmp(v3, v5);
  #L3bc336.  if v7 > 0 then goto L3bc342;
  #L3bc33a.  v2:= (`int`) v3 @kind l2i;
  #L3bc33c.  v11[v10]:= v2;
  #L3bc340.  goto L3bc3ca;
  #L3bc342.  if v0 != 0 then goto L3bc3a2;
  #L3bc346.  if v10 != 0 then goto L3bc364;
  #L3bc34a.  v2:= v2 + 1;
  #L3bc34e.  v1:= v11[v10];
  #L3bc352.  v2:= v2 - v1 @kind int;
  #L3bc354.  v12:= v12 - v2 @kind int;
  #L3bc356.  call temp:= `getMinimumValue`(v8, v9, v11) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3bc35c.  v1:= temp;
  #L3bc35e.  v11[v10]:= v1;
  #L3bc362.  goto L3bc318;
  #L3bc364.  v0:= v10 + -1;
  #L3bc368.  call temp:= `getField`(v9, v0) @signature `Lorg/joda/time/ReadablePartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind interface;
  #L3bc36e.  v0:= temp @kind object;
  #L3bc370.  call temp:= `getRangeDurationField`(v8) @signature `Lorg/joda/time/field/BaseDateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3bc376.  v3:= temp @kind object;
  #L3bc378.  call temp:= `getType`(v3) @signature `Lorg/joda/time/DurationField;.getType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3bc37e.  v3:= temp @kind object;
  #L3bc380.  call temp:= `getDurationField`(v0) @signature `Lorg/joda/time/DateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3bc386.  v4:= temp @kind object;
  #L3bc388.  call temp:= `getType`(v4) @signature `Lorg/joda/time/DurationField;.getType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3bc38e.  v4:= temp @kind object;
  #L3bc390.  if v3 != v4 then goto L3bc396;
  #L3bc394.  goto L3bc3a2;
  #L3bc396.  v9:= new `java.lang.IllegalArgumentException`;
  #L3bc39a.  call `<init>`(v9, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bc3a0.  throw v9;
  #L3bc3a2.  v2:= v2 + 1;
  #L3bc3a6.  v1:= v11[v10];
  #L3bc3aa.  v2:= v2 - v1 @kind int;
  #L3bc3ac.  v12:= v12 - v2 @kind int;
  #L3bc3ae.  v1:= v10 + -1;
  #L3bc3b2.  v2:= 1I;
  #L3bc3b4.  call temp:= `addWrapPartial`(v0, v9, v1, v11, v2) @signature `Lorg/joda/time/DateTimeField;.addWrapPartial:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3bc3ba.  v11:= temp @kind object;
  #L3bc3bc.  call temp:= `getMinimumValue`(v8, v9, v11) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3bc3c2.  v1:= temp;
  #L3bc3c4.  v11[v10]:= v1;
  #L3bc3c8.  goto L3bc318;
  #L3bc3ca.  if v12 >= 0 then goto L3bc478;
  #L3bc3ce.  call temp:= `getMinimumValue`(v8, v9, v11) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3bc3d4.  v2:= temp;
  #L3bc3d6.  v3:= v11[v10];
  #L3bc3da.  v3:= v3 + v12 @kind int;
  #L3bc3dc.  v3:= (`long`) v3 @kind i2l;
  #L3bc3de.  v5:= (`long`) v2 @kind i2l;
  #L3bc3e0.  v7:= lcmp(v3, v5);
  #L3bc3e4.  if v7 < 0 then goto L3bc3f0;
  #L3bc3e8.  v12:= (`int`) v3 @kind l2i;
  #L3bc3ea.  v11[v10]:= v12;
  #L3bc3ee.  goto L3bc478;
  #L3bc3f0.  if v0 != 0 then goto L3bc450;
  #L3bc3f4.  if v10 != 0 then goto L3bc412;
  #L3bc3f8.  v2:= v2 + -1;
  #L3bc3fc.  v3:= v11[v10];
  #L3bc400.  v2:= v2 - v3 @kind int;
  #L3bc402.  v12:= v12 - v2 @kind int;
  #L3bc404.  call temp:= `getMaximumValue`(v8, v9, v11) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3bc40a.  v2:= temp;
  #L3bc40c.  v11[v10]:= v2;
  #L3bc410.  goto L3bc3ca;
  #L3bc412.  v0:= v10 + -1;
  #L3bc416.  call temp:= `getField`(v9, v0) @signature `Lorg/joda/time/ReadablePartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind interface;
  #L3bc41c.  v0:= temp @kind object;
  #L3bc41e.  call temp:= `getRangeDurationField`(v8) @signature `Lorg/joda/time/field/BaseDateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3bc424.  v3:= temp @kind object;
  #L3bc426.  call temp:= `getType`(v3) @signature `Lorg/joda/time/DurationField;.getType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3bc42c.  v3:= temp @kind object;
  #L3bc42e.  call temp:= `getDurationField`(v0) @signature `Lorg/joda/time/DateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3bc434.  v4:= temp @kind object;
  #L3bc436.  call temp:= `getType`(v4) @signature `Lorg/joda/time/DurationField;.getType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3bc43c.  v4:= temp @kind object;
  #L3bc43e.  if v3 != v4 then goto L3bc444;
  #L3bc442.  goto L3bc450;
  #L3bc444.  v9:= new `java.lang.IllegalArgumentException`;
  #L3bc448.  call `<init>`(v9, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bc44e.  throw v9;
  #L3bc450.  v2:= v2 + -1;
  #L3bc454.  v3:= v11[v10];
  #L3bc458.  v2:= v2 - v3 @kind int;
  #L3bc45a.  v12:= v12 - v2 @kind int;
  #L3bc45c.  v2:= v10 + -1;
  #L3bc460.  v3:= -1I;
  #L3bc462.  call temp:= `addWrapPartial`(v0, v9, v2, v11, v3) @signature `Lorg/joda/time/DateTimeField;.addWrapPartial:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3bc468.  v11:= temp @kind object;
  #L3bc46a.  call temp:= `getMaximumValue`(v8, v9, v11) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3bc470.  v2:= temp;
  #L3bc472.  v11[v10]:= v2;
  #L3bc476.  goto L3bc3ca;
  #L3bc478.  v12:= v11[v10];
  #L3bc47c.  call temp:= `set`(v8, v9, v10, v11, v12) @signature `Lorg/joda/time/field/BaseDateTimeField;.set:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3bc482.  v9:= temp @kind object;
  #L3bc484.  return v9 @kind object;
}
procedure `int` `convertText`(`org.joda.time.field.BaseDateTimeField` v1 @kind this, `java.lang.String` v2 @kind object, `java.util.Locale` v3 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.convertText:(Ljava/lang/String;Ljava/util/Locale;)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3bbfd8.  call temp:= `parseInt`(v2) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L3bbfde.  v2:= temp;
  #L3bbfe0.  return v2;
  #L3bbfe2.  v3:= new `org.joda.time.IllegalFieldValueException`;
  #L3bbfe6.  call temp:= `getType`(v1) @signature `Lorg/joda/time/field/BaseDateTimeField;.getType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3bbfec.  v0:= temp @kind object;
  #L3bbfee.  call `<init>`(v3, v0, v2) @signature `Lorg/joda/time/IllegalFieldValueException;.<init>:(Lorg/joda/time/DateTimeFieldType;Ljava/lang/String;)V` @kind direct;
  #L3bbff4.  throw v3;
  catch `java.lang.NumberFormatException` @[L3bbfd8..L3bbfe0] goto L3bbfe2;
}
procedure `int` `get`(`long` v0 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.get:(J)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `getAsShortText`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `int` v1 , `java.util.Locale` v2 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsShortText:(ILjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3bc53c.  call temp:= `getAsText`(v0, v1, v2) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsText:(ILjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3bc542.  v1:= temp @kind object;
  #L3bc544.  return v1 @kind object;
}
procedure `java.lang.String` `getAsShortText`(`org.joda.time.field.BaseDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsShortText:(J)Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3bc558.  v0:= 0I;
  #L3bc55a.  call temp:= `getAsShortText`(v1, v2, v0) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsShortText:(JLjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3bc560.  v2:= temp @kind object;
  #L3bc562.  return v2 @kind object;
}
procedure `java.lang.String` `getAsShortText`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `long` v1 , `java.util.Locale` v3 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsShortText:(JLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3bc574.  call temp:= `get`(v0, v1) @signature `Lorg/joda/time/field/BaseDateTimeField;.get:(J)I` @kind virtual;
  #L3bc57a.  v1:= temp;
  #L3bc57c.  call temp:= `getAsShortText`(v0, v1, v3) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsShortText:(ILjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3bc582.  v1:= temp @kind object;
  #L3bc584.  return v1 @kind object;
}
procedure `java.lang.String` `getAsShortText`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `org.joda.time.ReadablePartial` v1 @kind object, `int` v2 , `java.util.Locale` v3 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsShortText:(Lorg/joda/time/ReadablePartial;ILjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3bc598.  call temp:= `getAsShortText`(v0, v2, v3) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsShortText:(ILjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3bc59e.  v1:= temp @kind object;
  #L3bc5a0.  return v1 @kind object;
}
procedure `java.lang.String` `getAsShortText`(`org.joda.time.field.BaseDateTimeField` v1 @kind this, `org.joda.time.ReadablePartial` v2 @kind object, `java.util.Locale` v3 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsShortText:(Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3bc5b4.  call temp:= `getType`(v1) @signature `Lorg/joda/time/field/BaseDateTimeField;.getType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3bc5ba.  v0:= temp @kind object;
  #L3bc5bc.  call temp:= `get`(v2, v0) @signature `Lorg/joda/time/ReadablePartial;.get:(Lorg/joda/time/DateTimeFieldType;)I` @kind interface;
  #L3bc5c2.  v0:= temp;
  #L3bc5c4.  call temp:= `getAsShortText`(v1, v2, v0, v3) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsShortText:(Lorg/joda/time/ReadablePartial;ILjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3bc5ca.  v2:= temp @kind object;
  #L3bc5cc.  return v2 @kind object;
}
procedure `java.lang.String` `getAsText`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `int` v1 , `java.util.Locale` v2 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsText:(ILjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3bc5e0.  call temp:= `toString`(v1) @signature `Ljava/lang/Integer;.toString:(I)Ljava/lang/String;` @kind static;
  #L3bc5e6.  v1:= temp @kind object;
  #L3bc5e8.  return v1 @kind object;
}
procedure `java.lang.String` `getAsText`(`org.joda.time.field.BaseDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsText:(J)Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3bc5fc.  v0:= 0I;
  #L3bc5fe.  call temp:= `getAsText`(v1, v2, v0) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsText:(JLjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3bc604.  v2:= temp @kind object;
  #L3bc606.  return v2 @kind object;
}
procedure `java.lang.String` `getAsText`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `long` v1 , `java.util.Locale` v3 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsText:(JLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3bc618.  call temp:= `get`(v0, v1) @signature `Lorg/joda/time/field/BaseDateTimeField;.get:(J)I` @kind virtual;
  #L3bc61e.  v1:= temp;
  #L3bc620.  call temp:= `getAsText`(v0, v1, v3) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsText:(ILjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3bc626.  v1:= temp @kind object;
  #L3bc628.  return v1 @kind object;
}
procedure `java.lang.String` `getAsText`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `org.joda.time.ReadablePartial` v1 @kind object, `int` v2 , `java.util.Locale` v3 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsText:(Lorg/joda/time/ReadablePartial;ILjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3bc63c.  call temp:= `getAsText`(v0, v2, v3) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsText:(ILjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3bc642.  v1:= temp @kind object;
  #L3bc644.  return v1 @kind object;
}
procedure `java.lang.String` `getAsText`(`org.joda.time.field.BaseDateTimeField` v1 @kind this, `org.joda.time.ReadablePartial` v2 @kind object, `java.util.Locale` v3 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsText:(Lorg/joda/time/ReadablePartial;Ljava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3bc658.  call temp:= `getType`(v1) @signature `Lorg/joda/time/field/BaseDateTimeField;.getType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3bc65e.  v0:= temp @kind object;
  #L3bc660.  call temp:= `get`(v2, v0) @signature `Lorg/joda/time/ReadablePartial;.get:(Lorg/joda/time/DateTimeFieldType;)I` @kind interface;
  #L3bc666.  v0:= temp;
  #L3bc668.  call temp:= `getAsText`(v1, v2, v0, v3) @signature `Lorg/joda/time/field/BaseDateTimeField;.getAsText:(Lorg/joda/time/ReadablePartial;ILjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3bc66e.  v2:= temp @kind object;
  #L3bc670.  return v2 @kind object;
}
procedure `int` `getDifference`(`org.joda.time.field.BaseDateTimeField` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.getDifference:(JJ)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bc018.  call temp:= `getDurationField`(v1) @signature `Lorg/joda/time/field/BaseDateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3bc01e.  v0:= temp @kind object;
  #L3bc020.  call temp:= `getDifference`(v0, v2, v4) @signature `Lorg/joda/time/DurationField;.getDifference:(JJ)I` @kind virtual;
  #L3bc026.  v2:= temp;
  #L3bc028.  return v2;
}
procedure `long` `getDifferenceAsLong`(`org.joda.time.field.BaseDateTimeField` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.getDifferenceAsLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bc770.  call temp:= `getDurationField`(v1) @signature `Lorg/joda/time/field/BaseDateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3bc776.  v0:= temp @kind object;
  #L3bc778.  call temp:= `getDifferenceAsLong`(v0, v2, v4) @signature `Lorg/joda/time/DurationField;.getDifferenceAsLong:(JJ)J` @kind virtual;
  #L3bc77e.  v2:= temp @kind wide;
  #L3bc780.  return v2 @kind wide;
}
procedure `org.joda.time.DurationField` `getDurationField`() @signature `Lorg/joda/time/field/BaseDateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getLeapAmount`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.getLeapAmount:(J)I` @AccessFlag PUBLIC {
    temp;

  #L3bc03c.  v1:= 0I;
  #L3bc03e.  return v1;
}
procedure `org.joda.time.DurationField` `getLeapDurationField`(`org.joda.time.field.BaseDateTimeField` v1 @kind this) @signature `Lorg/joda/time/field/BaseDateTimeField;.getLeapDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bc8ec.  v0:= 0I;
  #L3bc8ee.  return v0 @kind object;
}
procedure `int` `getMaximumShortTextLength`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `java.util.Locale` v1 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumShortTextLength:(Ljava/util/Locale;)I` @AccessFlag PUBLIC {
    temp;

  #L3bc050.  call temp:= `getMaximumTextLength`(v0, v1) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumTextLength:(Ljava/util/Locale;)I` @kind virtual;
  #L3bc056.  v1:= temp;
  #L3bc058.  return v1;
}
procedure `int` `getMaximumTextLength`(`org.joda.time.field.BaseDateTimeField` v1 @kind this, `java.util.Locale` v2 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumTextLength:(Ljava/util/Locale;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bc06c.  call temp:= `getMaximumValue`(v1) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:()I` @kind virtual;
  #L3bc072.  v2:= temp;
  #L3bc074.  if v2 < 0 then goto L3bc09c;
  #L3bc078.  v0:= 10I;
  #L3bc07c.  if v2 >= v0 then goto L3bc084;
  #L3bc080.  v2:= 1I;
  #L3bc082.  return v2;
  #L3bc084.  v0:= 100I;
  #L3bc088.  if v2 >= v0 then goto L3bc090;
  #L3bc08c.  v2:= 2I;
  #L3bc08e.  return v2;
  #L3bc090.  v0:= 1000I;
  #L3bc094.  if v2 >= v0 then goto L3bc09c;
  #L3bc098.  v2:= 3I;
  #L3bc09a.  return v2;
  #L3bc09c.  call temp:= `toString`(v2) @signature `Ljava/lang/Integer;.toString:(I)Ljava/lang/String;` @kind static;
  #L3bc0a2.  v2:= temp @kind object;
  #L3bc0a4.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3bc0aa.  v2:= temp;
  #L3bc0ac.  return v2;
}
procedure `int` `getMaximumValue`() @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getMaximumValue`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:(J)I` @AccessFlag PUBLIC {
    temp;

  #L3bc0c0.  call temp:= `getMaximumValue`(v0) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:()I` @kind virtual;
  #L3bc0c6.  v1:= temp;
  #L3bc0c8.  return v1;
}
procedure `int` `getMaximumValue`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `org.joda.time.ReadablePartial` v1 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;)I` @AccessFlag PUBLIC {
    temp;

  #L3bc0dc.  call temp:= `getMaximumValue`(v0) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:()I` @kind virtual;
  #L3bc0e2.  v1:= temp;
  #L3bc0e4.  return v1;
}
procedure `int` `getMaximumValue`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `org.joda.time.ReadablePartial` v1 @kind object, `int`[] v2 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;[I)I` @AccessFlag PUBLIC {
    temp;

  #L3bc0f8.  call temp:= `getMaximumValue`(v0, v1) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;)I` @kind virtual;
  #L3bc0fe.  v1:= temp;
  #L3bc100.  return v1;
}
procedure `int` `getMinimumValue`() @signature `Lorg/joda/time/field/BaseDateTimeField;.getMinimumValue:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getMinimumValue`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMinimumValue:(J)I` @AccessFlag PUBLIC {
    temp;

  #L3bc114.  call temp:= `getMinimumValue`(v0) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMinimumValue:()I` @kind virtual;
  #L3bc11a.  v1:= temp;
  #L3bc11c.  return v1;
}
procedure `int` `getMinimumValue`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `org.joda.time.ReadablePartial` v1 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;)I` @AccessFlag PUBLIC {
    temp;

  #L3bc130.  call temp:= `getMinimumValue`(v0) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMinimumValue:()I` @kind virtual;
  #L3bc136.  v1:= temp;
  #L3bc138.  return v1;
}
procedure `int` `getMinimumValue`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `org.joda.time.ReadablePartial` v1 @kind object, `int`[] v2 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;[I)I` @AccessFlag PUBLIC {
    temp;

  #L3bc14c.  call temp:= `getMinimumValue`(v0, v1) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;)I` @kind virtual;
  #L3bc152.  v1:= temp;
  #L3bc154.  return v1;
}
procedure `java.lang.String` `getName`(`org.joda.time.field.BaseDateTimeField` v1 @kind this) @signature `Lorg/joda/time/field/BaseDateTimeField;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3bc684.  v0:= v1.`org.joda.time.field.BaseDateTimeField.iType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L3bc688.  call temp:= `getName`(v0) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3bc68e.  v0:= temp @kind object;
  #L3bc690.  return v0 @kind object;
}
procedure `org.joda.time.DurationField` `getRangeDurationField`() @signature `Lorg/joda/time/field/BaseDateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.joda.time.DateTimeFieldType` `getType`(`org.joda.time.field.BaseDateTimeField` v1 @kind this) @signature `Lorg/joda/time/field/BaseDateTimeField;.getType:()Lorg/joda/time/DateTimeFieldType;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3bc8d4.  v0:= v1.`org.joda.time.field.BaseDateTimeField.iType` @type ^`org.joda.time.DateTimeFieldType` @kind object;
  #L3bc8d8.  return v0 @kind object;
}
procedure `boolean` `isLeap`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.isLeap:(J)Z` @AccessFlag PUBLIC {
    temp;

  #L3bbfb0.  v1:= 0I;
  #L3bbfb2.  return v1;
}
procedure `boolean` `isSupported`(`org.joda.time.field.BaseDateTimeField` v1 @kind this) @signature `Lorg/joda/time/field/BaseDateTimeField;.isSupported:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3bbfc4.  v0:= 1I;
  #L3bbfc6.  return v0;
}
procedure `long` `remainder`(`org.joda.time.field.BaseDateTimeField` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.remainder:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3bc794.  call temp:= `roundFloor`(v2, v3) @signature `Lorg/joda/time/field/BaseDateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3bc79a.  v0:= temp @kind wide;
  #L3bc79c.  v3:= v3 - v0 @kind long;
  #L3bc79e.  return v3 @kind wide;
}
procedure `long` `roundCeiling`(`org.joda.time.field.BaseDateTimeField` v3 @kind this, `long` v4 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.roundCeiling:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3bc7b0.  call temp:= `roundFloor`(v3, v4) @signature `Lorg/joda/time/field/BaseDateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3bc7b6.  v0:= temp @kind wide;
  #L3bc7b8.  v2:= lcmp(v0, v4);
  #L3bc7bc.  if v2 == 0 then goto L3bc7ca;
  #L3bc7c0.  v4:= 1I;
  #L3bc7c2.  call temp:= `add`(v3, v0, v4) @signature `Lorg/joda/time/field/BaseDateTimeField;.add:(JI)J` @kind virtual;
  #L3bc7c8.  v4:= temp @kind wide;
  #L3bc7ca.  return v4 @kind wide;
}
procedure `long` `roundFloor`(`long` v0 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.roundFloor:(J)J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `roundHalfCeiling`(`org.joda.time.field.BaseDateTimeField` v7 @kind this, `long` v8 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.roundHalfCeiling:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3bc7dc.  call temp:= `roundFloor`(v7, v8) @signature `Lorg/joda/time/field/BaseDateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3bc7e2.  v0:= temp @kind wide;
  #L3bc7e4.  call temp:= `roundCeiling`(v7, v8) @signature `Lorg/joda/time/field/BaseDateTimeField;.roundCeiling:(J)J` @kind virtual;
  #L3bc7ea.  v2:= temp @kind wide;
  #L3bc7ec.  v4:= v8 - v0 @kind long;
  #L3bc7f0.  v8:= v2 - v8 @kind long;
  #L3bc7f4.  v6:= lcmp(v8, v4);
  #L3bc7f8.  if v6 > 0 then goto L3bc7fe;
  #L3bc7fc.  return v2 @kind wide;
  #L3bc7fe.  return v0 @kind wide;
}
procedure `long` `roundHalfEven`(`org.joda.time.field.BaseDateTimeField` v7 @kind this, `long` v8 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.roundHalfEven:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3bc810.  call temp:= `roundFloor`(v7, v8) @signature `Lorg/joda/time/field/BaseDateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3bc816.  v0:= temp @kind wide;
  #L3bc818.  call temp:= `roundCeiling`(v7, v8) @signature `Lorg/joda/time/field/BaseDateTimeField;.roundCeiling:(J)J` @kind virtual;
  #L3bc81e.  v2:= temp @kind wide;
  #L3bc820.  v4:= v8 - v0 @kind long;
  #L3bc824.  v8:= v2 - v8 @kind long;
  #L3bc828.  v6:= lcmp(v4, v8);
  #L3bc82c.  if v6 >= 0 then goto L3bc832;
  #L3bc830.  return v0 @kind wide;
  #L3bc832.  v6:= lcmp(v8, v4);
  #L3bc836.  if v6 >= 0 then goto L3bc83c;
  #L3bc83a.  return v2 @kind wide;
  #L3bc83c.  call temp:= `get`(v7, v2) @signature `Lorg/joda/time/field/BaseDateTimeField;.get:(J)I` @kind virtual;
  #L3bc842.  v8:= temp;
  #L3bc844.  v8:= v8 ^& 1;
  #L3bc848.  if v8 != 0 then goto L3bc84e;
  #L3bc84c.  return v2 @kind wide;
  #L3bc84e.  return v0 @kind wide;
}
procedure `long` `roundHalfFloor`(`org.joda.time.field.BaseDateTimeField` v7 @kind this, `long` v8 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.roundHalfFloor:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3bc860.  call temp:= `roundFloor`(v7, v8) @signature `Lorg/joda/time/field/BaseDateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3bc866.  v0:= temp @kind wide;
  #L3bc868.  call temp:= `roundCeiling`(v7, v8) @signature `Lorg/joda/time/field/BaseDateTimeField;.roundCeiling:(J)J` @kind virtual;
  #L3bc86e.  v2:= temp @kind wide;
  #L3bc870.  v4:= v8 - v0 @kind long;
  #L3bc874.  v8:= v2 - v8 @kind long;
  #L3bc878.  v6:= lcmp(v4, v8);
  #L3bc87c.  if v6 > 0 then goto L3bc882;
  #L3bc880.  return v0 @kind wide;
  #L3bc882.  return v2 @kind wide;
}
procedure `long` `set`(`long` v0 , `int` v2 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.set:(JI)J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `set`(`org.joda.time.field.BaseDateTimeField` v1 @kind this, `long` v2 , `java.lang.String` v4 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.set:(JLjava/lang/String;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3bc894.  v0:= 0I;
  #L3bc896.  call temp:= `set`(v1, v2, v4, v0) @signature `Lorg/joda/time/field/BaseDateTimeField;.set:(JLjava/lang/String;Ljava/util/Locale;)J` @kind virtual;
  #L3bc89c.  v2:= temp @kind wide;
  #L3bc89e.  return v2 @kind wide;
}
procedure `long` `set`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `long` v1 , `java.lang.String` v3 @kind object, `java.util.Locale` v4 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.set:(JLjava/lang/String;Ljava/util/Locale;)J` @AccessFlag PUBLIC {
    temp;

  #L3bc8b0.  call temp:= `convertText`(v0, v3, v4) @signature `Lorg/joda/time/field/BaseDateTimeField;.convertText:(Ljava/lang/String;Ljava/util/Locale;)I` @kind virtual;
  #L3bc8b6.  v3:= temp;
  #L3bc8b8.  call temp:= `set`(v0, v1, v3) @signature `Lorg/joda/time/field/BaseDateTimeField;.set:(JI)J` @kind virtual;
  #L3bc8be.  v1:= temp @kind wide;
  #L3bc8c0.  return v1 @kind wide;
}
procedure `int`[] `set`(`org.joda.time.field.BaseDateTimeField` v2 @kind this, `org.joda.time.ReadablePartial` v3 @kind object, `int` v4 , `int`[] v5 @kind object, `int` v6 ) @signature `Lorg/joda/time/field/BaseDateTimeField;.set:(Lorg/joda/time/ReadablePartial;I[II)[I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3bc498.  call temp:= `getMinimumValue`(v2, v3, v5) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3bc49e.  v0:= temp;
  #L3bc4a0.  call temp:= `getMaximumValue`(v2, v3, v5) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3bc4a6.  v1:= temp;
  #L3bc4a8.  call `verifyValueBounds`(v2, v6, v0, v1) @signature `Lorg/joda/time/field/FieldUtils;.verifyValueBounds:(Lorg/joda/time/DateTimeField;III)V` @kind static;
  #L3bc4ae.  v5[v4]:= v6;
  #L3bc4b2.  v4:= v4 + 1;
  #L3bc4b6.  call temp:= `size`(v3) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3bc4bc.  v6:= temp;
  #L3bc4be.  if v4 >= v6 then goto L3bc504;
  #L3bc4c2.  call temp:= `getField`(v3, v4) @signature `Lorg/joda/time/ReadablePartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind interface;
  #L3bc4c8.  v6:= temp @kind object;
  #L3bc4ca.  v0:= v5[v4];
  #L3bc4ce.  call temp:= `getMaximumValue`(v6, v3, v5) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3bc4d4.  v1:= temp;
  #L3bc4d6.  if v0 <= v1 then goto L3bc4e6;
  #L3bc4da.  call temp:= `getMaximumValue`(v6, v3, v5) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3bc4e0.  v0:= temp;
  #L3bc4e2.  v5[v4]:= v0;
  #L3bc4e6.  v0:= v5[v4];
  #L3bc4ea.  call temp:= `getMinimumValue`(v6, v3, v5) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3bc4f0.  v1:= temp;
  #L3bc4f2.  if v0 >= v1 then goto L3bc4b2;
  #L3bc4f6.  call temp:= `getMinimumValue`(v6, v3, v5) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3bc4fc.  v6:= temp;
  #L3bc4fe.  v5[v4]:= v6;
  #L3bc502.  goto L3bc4b2;
  #L3bc504.  return v5 @kind object;
}
procedure `int`[] `set`(`org.joda.time.field.BaseDateTimeField` v0 @kind this, `org.joda.time.ReadablePartial` v1 @kind object, `int` v2 , `int`[] v3 @kind object, `java.lang.String` v4 @kind object, `java.util.Locale` v5 @kind object) @signature `Lorg/joda/time/field/BaseDateTimeField;.set:(Lorg/joda/time/ReadablePartial;I[ILjava/lang/String;Ljava/util/Locale;)[I` @AccessFlag PUBLIC {
    temp;

  #L3bc518.  call temp:= `convertText`(v0, v4, v5) @signature `Lorg/joda/time/field/BaseDateTimeField;.convertText:(Ljava/lang/String;Ljava/util/Locale;)I` @kind virtual;
  #L3bc51e.  v4:= temp;
  #L3bc520.  call temp:= `set`(v0, v1, v2, v3, v4) @signature `Lorg/joda/time/field/BaseDateTimeField;.set:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3bc526.  v1:= temp @kind object;
  #L3bc528.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.field.BaseDateTimeField` v2 @kind this) @signature `Lorg/joda/time/field/BaseDateTimeField;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3bc6a4.  v0:= new `java.lang.StringBuilder`;
  #L3bc6a8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bc6ae.  v1:= "DateTimeField[" @kind object;
  #L3bc6b2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bc6b8.  call temp:= `getName`(v2) @signature `Lorg/joda/time/field/BaseDateTimeField;.getName:()Ljava/lang/String;` @kind virtual;
  #L3bc6be.  v1:= temp @kind object;
  #L3bc6c0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bc6c6.  v1:= 93I;
  #L3bc6ca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bc6d0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bc6d6.  v0:= temp @kind object;
  #L3bc6d8.  return v0 @kind object;
}
