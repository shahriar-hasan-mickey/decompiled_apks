record `org.joda.time.field.AbstractReadableInstantFieldProperty` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.io.Serializable` @kind interface {
}
global `long` `@@org.joda.time.field.AbstractReadableInstantFieldProperty.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v0 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3bbf98.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3bbf9e.  return @kind void;
}
procedure `int` `compareTo`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v2 @kind this, `org.joda.time.ReadableInstant` v3 @kind object) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.compareTo:(Lorg/joda/time/ReadableInstant;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3bba80.  if v3 == 0 then goto L3bbab0;
  #L3bba84.  call temp:= `get`(v2) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.get:()I` @kind virtual;
  #L3bba8a.  v0:= temp;
  #L3bba8c.  call temp:= `getFieldType`(v2) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getFieldType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3bba92.  v1:= temp @kind object;
  #L3bba94.  call temp:= `get`(v3, v1) @signature `Lorg/joda/time/ReadableInstant;.get:(Lorg/joda/time/DateTimeFieldType;)I` @kind interface;
  #L3bba9a.  v3:= temp;
  #L3bba9c.  if v0 >= v3 then goto L3bbaa4;
  #L3bbaa0.  v3:= -1I;
  #L3bbaa2.  return v3;
  #L3bbaa4.  if v0 <= v3 then goto L3bbaac;
  #L3bbaa8.  v3:= 1I;
  #L3bbaaa.  return v3;
  #L3bbaac.  v3:= 0I;
  #L3bbaae.  return v3;
  #L3bbab0.  v3:= new `java.lang.IllegalArgumentException`;
  #L3bbab4.  v0:= "The instant must not be null" @kind object;
  #L3bbab8.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bbabe.  throw v3;
}
procedure `int` `compareTo`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v2 @kind this, `org.joda.time.ReadablePartial` v3 @kind object) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.compareTo:(Lorg/joda/time/ReadablePartial;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3bbad0.  if v3 == 0 then goto L3bbb00;
  #L3bbad4.  call temp:= `get`(v2) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.get:()I` @kind virtual;
  #L3bbada.  v0:= temp;
  #L3bbadc.  call temp:= `getFieldType`(v2) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getFieldType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3bbae2.  v1:= temp @kind object;
  #L3bbae4.  call temp:= `get`(v3, v1) @signature `Lorg/joda/time/ReadablePartial;.get:(Lorg/joda/time/DateTimeFieldType;)I` @kind interface;
  #L3bbaea.  v3:= temp;
  #L3bbaec.  if v0 >= v3 then goto L3bbaf4;
  #L3bbaf0.  v3:= -1I;
  #L3bbaf2.  return v3;
  #L3bbaf4.  if v0 <= v3 then goto L3bbafc;
  #L3bbaf8.  v3:= 1I;
  #L3bbafa.  return v3;
  #L3bbafc.  v3:= 0I;
  #L3bbafe.  return v3;
  #L3bbb00.  v3:= new `java.lang.IllegalArgumentException`;
  #L3bbb04.  v0:= "The partial must not be null" @kind object;
  #L3bbb08.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bbb0e.  throw v3;
}
procedure `boolean` `equals`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3bb9d8.  v0:= 1I;
  #L3bb9da.  if v4 != v5 then goto L3bb9e0;
  #L3bb9de.  return v0;
  #L3bb9e0.  v1:= instanceof @variable v5 @type ^`org.joda.time.field.AbstractReadableInstantFieldProperty` @kind boolean;
  #L3bb9e4.  v2:= 0I;
  #L3bb9e6.  if v1 != 0 then goto L3bb9ec;
  #L3bb9ea.  return v2;
  #L3bb9ec.  v5:= (`org.joda.time.field.AbstractReadableInstantFieldProperty`) v5 @kind object;
  #L3bb9f0.  call temp:= `get`(v4) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.get:()I` @kind virtual;
  #L3bb9f6.  v1:= temp;
  #L3bb9f8.  call temp:= `get`(v5) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.get:()I` @kind virtual;
  #L3bb9fe.  v3:= temp;
  #L3bba00.  if v1 != v3 then goto L3bba3e;
  #L3bba04.  call temp:= `getFieldType`(v4) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getFieldType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3bba0a.  v1:= temp @kind object;
  #L3bba0c.  call temp:= `getFieldType`(v5) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getFieldType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3bba12.  v3:= temp @kind object;
  #L3bba14.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3bba1a.  v1:= temp;
  #L3bba1c.  if v1 == 0 then goto L3bba3e;
  #L3bba20.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3bba26.  v1:= temp @kind object;
  #L3bba28.  call temp:= `getChronology`(v5) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3bba2e.  v5:= temp @kind object;
  #L3bba30.  call temp:= `equals`(v1, v5) @signature `Lorg/joda/time/field/FieldUtils;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3bba36.  v5:= temp;
  #L3bba38.  if v5 == 0 then goto L3bba3e;
  #L3bba3c.  goto L3bba40;
  #L3bba3e.  v0:= 0I;
  #L3bba40.  return v0;
}
procedure `int` `get`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v3 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.get:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3bbb20.  call temp:= `getField`(v3) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbb26.  v0:= temp @kind object;
  #L3bbb28.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMillis:()J` @kind virtual;
  #L3bbb2e.  v1:= temp @kind wide;
  #L3bbb30.  call temp:= `get`(v0, v1) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3bbb36.  v0:= temp;
  #L3bbb38.  return v0;
}
procedure `java.lang.String` `getAsShortText`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v1 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getAsShortText:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bbcfc.  v0:= 0I;
  #L3bbcfe.  call temp:= `getAsShortText`(v1, v0) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getAsShortText:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3bbd04.  v0:= temp @kind object;
  #L3bbd06.  return v0 @kind object;
}
procedure `java.lang.String` `getAsShortText`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v3 @kind this, `java.util.Locale` v4 @kind object) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getAsShortText:(Ljava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3bbd18.  call temp:= `getField`(v3) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbd1e.  v0:= temp @kind object;
  #L3bbd20.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMillis:()J` @kind virtual;
  #L3bbd26.  v1:= temp @kind wide;
  #L3bbd28.  call temp:= `getAsShortText`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.getAsShortText:(JLjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3bbd2e.  v4:= temp @kind object;
  #L3bbd30.  return v4 @kind object;
}
procedure `java.lang.String` `getAsString`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v1 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getAsString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bbd44.  call temp:= `get`(v1) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.get:()I` @kind virtual;
  #L3bbd4a.  v0:= temp;
  #L3bbd4c.  call temp:= `toString`(v0) @signature `Ljava/lang/Integer;.toString:(I)Ljava/lang/String;` @kind static;
  #L3bbd52.  v0:= temp @kind object;
  #L3bbd54.  return v0 @kind object;
}
procedure `java.lang.String` `getAsText`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v1 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getAsText:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bbd68.  v0:= 0I;
  #L3bbd6a.  call temp:= `getAsText`(v1, v0) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getAsText:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3bbd70.  v0:= temp @kind object;
  #L3bbd72.  return v0 @kind object;
}
procedure `java.lang.String` `getAsText`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v3 @kind this, `java.util.Locale` v4 @kind object) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getAsText:(Ljava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3bbd84.  call temp:= `getField`(v3) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbd8a.  v0:= temp @kind object;
  #L3bbd8c.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMillis:()J` @kind virtual;
  #L3bbd92.  v1:= temp @kind wide;
  #L3bbd94.  call temp:= `getAsText`(v0, v1, v4) @signature `Lorg/joda/time/DateTimeField;.getAsText:(JLjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3bbd9a.  v4:= temp @kind object;
  #L3bbd9c.  return v4 @kind object;
}
procedure `org.joda.time.Chronology` `getChronology`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v2 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getChronology:()Lorg/joda/time/Chronology;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3bbea0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3bbea4.  v1:= "The method getChronology() was added in v1.4 and needs to be implemented by subclasses of AbstractReadableInstantFieldProperty" @kind object;
  #L3bbea8.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bbeae.  throw v0;
}
procedure `int` `getDifference`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v5 @kind this, `org.joda.time.ReadableInstant` v6 @kind object) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getDifference:(Lorg/joda/time/ReadableInstant;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3bbb4c.  if v6 != 0 then goto L3bbb72;
  #L3bbb50.  call temp:= `getField`(v5) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbb56.  v6:= temp @kind object;
  #L3bbb58.  call temp:= `getMillis`(v5) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMillis:()J` @kind virtual;
  #L3bbb5e.  v0:= temp @kind wide;
  #L3bbb60.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3bbb66.  v2:= temp @kind wide;
  #L3bbb68.  call temp:= `getDifference`(v6, v0, v2) @signature `Lorg/joda/time/DateTimeField;.getDifference:(JJ)I` @kind virtual;
  #L3bbb6e.  v6:= temp;
  #L3bbb70.  return v6;
  #L3bbb72.  call temp:= `getField`(v5) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbb78.  v0:= temp @kind object;
  #L3bbb7a.  call temp:= `getMillis`(v5) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMillis:()J` @kind virtual;
  #L3bbb80.  v1:= temp @kind wide;
  #L3bbb82.  call temp:= `getMillis`(v6) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3bbb88.  v3:= temp @kind wide;
  #L3bbb8a.  call temp:= `getDifference`(v0, v1, v3) @signature `Lorg/joda/time/DateTimeField;.getDifference:(JJ)I` @kind virtual;
  #L3bbb90.  v6:= temp;
  #L3bbb92.  return v6;
}
procedure `long` `getDifferenceAsLong`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v5 @kind this, `org.joda.time.ReadableInstant` v6 @kind object) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getDifferenceAsLong:(Lorg/joda/time/ReadableInstant;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3bbe1c.  if v6 != 0 then goto L3bbe42;
  #L3bbe20.  call temp:= `getField`(v5) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbe26.  v6:= temp @kind object;
  #L3bbe28.  call temp:= `getMillis`(v5) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMillis:()J` @kind virtual;
  #L3bbe2e.  v0:= temp @kind wide;
  #L3bbe30.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3bbe36.  v2:= temp @kind wide;
  #L3bbe38.  call temp:= `getDifferenceAsLong`(v6, v0, v2) @signature `Lorg/joda/time/DateTimeField;.getDifferenceAsLong:(JJ)J` @kind virtual;
  #L3bbe3e.  v0:= temp @kind wide;
  #L3bbe40.  return v0 @kind wide;
  #L3bbe42.  call temp:= `getField`(v5) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbe48.  v0:= temp @kind object;
  #L3bbe4a.  call temp:= `getMillis`(v5) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMillis:()J` @kind virtual;
  #L3bbe50.  v1:= temp @kind wide;
  #L3bbe52.  call temp:= `getMillis`(v6) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3bbe58.  v3:= temp @kind wide;
  #L3bbe5a.  call temp:= `getDifferenceAsLong`(v0, v1, v3) @signature `Lorg/joda/time/DateTimeField;.getDifferenceAsLong:(JJ)J` @kind virtual;
  #L3bbe60.  v0:= temp @kind wide;
  #L3bbe62.  return v0 @kind wide;
}
procedure `org.joda.time.DurationField` `getDurationField`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v1 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bbee4.  call temp:= `getField`(v1) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbeea.  v0:= temp @kind object;
  #L3bbeec.  call temp:= `getDurationField`(v0) @signature `Lorg/joda/time/DateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3bbef2.  v0:= temp @kind object;
  #L3bbef4.  return v0 @kind object;
}
procedure `org.joda.time.DateTimeField` `getField`() @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.joda.time.DateTimeFieldType` `getFieldType`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v1 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getFieldType:()Lorg/joda/time/DateTimeFieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bbec0.  call temp:= `getField`(v1) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbec6.  v0:= temp @kind object;
  #L3bbec8.  call temp:= `getType`(v0) @signature `Lorg/joda/time/DateTimeField;.getType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3bbece.  v0:= temp @kind object;
  #L3bbed0.  return v0 @kind object;
}
procedure `int` `getLeapAmount`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v3 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getLeapAmount:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3bbba4.  call temp:= `getField`(v3) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbbaa.  v0:= temp @kind object;
  #L3bbbac.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMillis:()J` @kind virtual;
  #L3bbbb2.  v1:= temp @kind wide;
  #L3bbbb4.  call temp:= `getLeapAmount`(v0, v1) @signature `Lorg/joda/time/DateTimeField;.getLeapAmount:(J)I` @kind virtual;
  #L3bbbba.  v0:= temp;
  #L3bbbbc.  return v0;
}
procedure `org.joda.time.DurationField` `getLeapDurationField`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v1 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getLeapDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bbf08.  call temp:= `getField`(v1) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbf0e.  v0:= temp @kind object;
  #L3bbf10.  call temp:= `getLeapDurationField`(v0) @signature `Lorg/joda/time/DateTimeField;.getLeapDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3bbf16.  v0:= temp @kind object;
  #L3bbf18.  return v0 @kind object;
}
procedure `int` `getMaximumShortTextLength`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v1 @kind this, `java.util.Locale` v2 @kind object) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMaximumShortTextLength:(Ljava/util/Locale;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bbbd0.  call temp:= `getField`(v1) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbbd6.  v0:= temp @kind object;
  #L3bbbd8.  call temp:= `getMaximumShortTextLength`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.getMaximumShortTextLength:(Ljava/util/Locale;)I` @kind virtual;
  #L3bbbde.  v2:= temp;
  #L3bbbe0.  return v2;
}
procedure `int` `getMaximumTextLength`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v1 @kind this, `java.util.Locale` v2 @kind object) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMaximumTextLength:(Ljava/util/Locale;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bbbf4.  call temp:= `getField`(v1) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbbfa.  v0:= temp @kind object;
  #L3bbbfc.  call temp:= `getMaximumTextLength`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.getMaximumTextLength:(Ljava/util/Locale;)I` @kind virtual;
  #L3bbc02.  v2:= temp;
  #L3bbc04.  return v2;
}
procedure `int` `getMaximumValue`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v3 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMaximumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3bbc18.  call temp:= `getField`(v3) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbc1e.  v0:= temp @kind object;
  #L3bbc20.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMillis:()J` @kind virtual;
  #L3bbc26.  v1:= temp @kind wide;
  #L3bbc28.  call temp:= `getMaximumValue`(v0, v1) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:(J)I` @kind virtual;
  #L3bbc2e.  v0:= temp;
  #L3bbc30.  return v0;
}
procedure `int` `getMaximumValueOverall`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v1 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMaximumValueOverall:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bbc44.  call temp:= `getField`(v1) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbc4a.  v0:= temp @kind object;
  #L3bbc4c.  call temp:= `getMaximumValue`(v0) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:()I` @kind virtual;
  #L3bbc52.  v0:= temp;
  #L3bbc54.  return v0;
}
procedure `long` `getMillis`() @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMillis:()J` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `getMinimumValue`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v3 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMinimumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3bbc68.  call temp:= `getField`(v3) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbc6e.  v0:= temp @kind object;
  #L3bbc70.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMillis:()J` @kind virtual;
  #L3bbc76.  v1:= temp @kind wide;
  #L3bbc78.  call temp:= `getMinimumValue`(v0, v1) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:(J)I` @kind virtual;
  #L3bbc7e.  v0:= temp;
  #L3bbc80.  return v0;
}
procedure `int` `getMinimumValueOverall`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v1 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMinimumValueOverall:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bbc94.  call temp:= `getField`(v1) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbc9a.  v0:= temp @kind object;
  #L3bbc9c.  call temp:= `getMinimumValue`(v0) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:()I` @kind virtual;
  #L3bbca2.  v0:= temp;
  #L3bbca4.  return v0;
}
procedure `java.lang.String` `getName`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v1 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bbdb0.  call temp:= `getField`(v1) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbdb6.  v0:= temp @kind object;
  #L3bbdb8.  call temp:= `getName`(v0) @signature `Lorg/joda/time/DateTimeField;.getName:()Ljava/lang/String;` @kind virtual;
  #L3bbdbe.  v0:= temp @kind object;
  #L3bbdc0.  return v0 @kind object;
}
procedure `org.joda.time.DurationField` `getRangeDurationField`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v1 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getRangeDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bbf2c.  call temp:= `getField`(v1) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbf32.  v0:= temp @kind object;
  #L3bbf34.  call temp:= `getRangeDurationField`(v0) @signature `Lorg/joda/time/DateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3bbf3a.  v0:= temp @kind object;
  #L3bbf3c.  return v0 @kind object;
}
procedure `int` `hashCode`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v2 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3bbcb8.  call temp:= `get`(v2) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.get:()I` @kind virtual;
  #L3bbcbe.  v0:= temp;
  #L3bbcc0.  v0:= v0 * 17;
  #L3bbcc4.  call temp:= `getFieldType`(v2) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getFieldType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3bbcca.  v1:= temp @kind object;
  #L3bbccc.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3bbcd2.  v1:= temp;
  #L3bbcd4.  v0:= v0 + v1 @kind int;
  #L3bbcd6.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3bbcdc.  v1:= temp @kind object;
  #L3bbcde.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3bbce4.  v1:= temp;
  #L3bbce6.  v0:= v0 + v1 @kind int;
  #L3bbce8.  return v0;
}
procedure `boolean` `isLeap`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v3 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.isLeap:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3bba54.  call temp:= `getField`(v3) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bba5a.  v0:= temp @kind object;
  #L3bba5c.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMillis:()J` @kind virtual;
  #L3bba62.  v1:= temp @kind wide;
  #L3bba64.  call temp:= `isLeap`(v0, v1) @signature `Lorg/joda/time/DateTimeField;.isLeap:(J)Z` @kind virtual;
  #L3bba6a.  v0:= temp;
  #L3bba6c.  return v0;
}
procedure `long` `remainder`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v3 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.remainder:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3bbe74.  call temp:= `getField`(v3) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbe7a.  v0:= temp @kind object;
  #L3bbe7c.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMillis:()J` @kind virtual;
  #L3bbe82.  v1:= temp @kind wide;
  #L3bbe84.  call temp:= `remainder`(v0, v1) @signature `Lorg/joda/time/DateTimeField;.remainder:(J)J` @kind virtual;
  #L3bbe8a.  v0:= temp @kind wide;
  #L3bbe8c.  return v0 @kind wide;
}
procedure `org.joda.time.Interval` `toInterval`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v9 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.toInterval:()Lorg/joda/time/Interval;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3bbf50.  call temp:= `getField`(v9) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bbf56.  v0:= temp @kind object;
  #L3bbf58.  call temp:= `getMillis`(v9) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getMillis:()J` @kind virtual;
  #L3bbf5e.  v1:= temp @kind wide;
  #L3bbf60.  call temp:= `roundFloor`(v0, v1) @signature `Lorg/joda/time/DateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3bbf66.  v4:= temp @kind wide;
  #L3bbf68.  v1:= 1I;
  #L3bbf6a.  call temp:= `add`(v0, v4, v1) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3bbf70.  v6:= temp @kind wide;
  #L3bbf72.  v0:= new `org.joda.time.Interval`;
  #L3bbf76.  call temp:= `getChronology`(v9) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3bbf7c.  v8:= temp @kind object;
  #L3bbf7e.  v3:= v0 @kind object;
  #L3bbf80.  call `<init>`(v3, v4, v6, v8) @signature `Lorg/joda/time/Interval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L3bbf86.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.field.AbstractReadableInstantFieldProperty` v2 @kind this) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3bbdd4.  v0:= new `java.lang.StringBuilder`;
  #L3bbdd8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3bbdde.  v1:= "Property[" @kind object;
  #L3bbde2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bbde8.  call temp:= `getName`(v2) @signature `Lorg/joda/time/field/AbstractReadableInstantFieldProperty;.getName:()Ljava/lang/String;` @kind virtual;
  #L3bbdee.  v1:= temp @kind object;
  #L3bbdf0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bbdf6.  v1:= "]" @kind object;
  #L3bbdfa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3bbe00.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3bbe06.  v0:= temp @kind object;
  #L3bbe08.  return v0 @kind object;
}
