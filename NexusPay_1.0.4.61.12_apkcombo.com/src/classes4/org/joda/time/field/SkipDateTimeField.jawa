record `org.joda.time.field.SkipDateTimeField` @kind class @AccessFlag PUBLIC_FINAL extends `org.joda.time.field.DelegatedDateTimeField` @kind class {
  `org.joda.time.Chronology` `org.joda.time.field.SkipDateTimeField.iChronology` @AccessFlag PRIVATE_FINAL;
  `int` `org.joda.time.field.SkipDateTimeField.iMinValue` @AccessFlag PRIVATE_TRANSIENT;
  `int` `org.joda.time.field.SkipDateTimeField.iSkip` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@org.joda.time.field.SkipDateTimeField.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.field.SkipDateTimeField` v1 @kind this, `org.joda.time.Chronology` v2 @kind object, `org.joda.time.DateTimeField` v3 @kind object) @signature `Lorg/joda/time/field/SkipDateTimeField;.<init>:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3bf7c0.  v0:= 0I;
  #L3bf7c2.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/joda/time/field/SkipDateTimeField;.<init>:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;I)V` @kind direct;
  #L3bf7c8.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.field.SkipDateTimeField` v0 @kind this, `org.joda.time.Chronology` v1 @kind object, `org.joda.time.DateTimeField` v2 @kind object, `int` v3 ) @signature `Lorg/joda/time/field/SkipDateTimeField;.<init>:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3bf7dc.  call `<init>`(v0, v2) @signature `Lorg/joda/time/field/DelegatedDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3bf7e2.  v0.`org.joda.time.field.SkipDateTimeField.iChronology` @type ^`org.joda.time.Chronology` := v1 @kind object;
  #L3bf7e6.  call temp:= `getMinimumValue`(v0) @signature `Lorg/joda/time/field/DelegatedDateTimeField;.getMinimumValue:()I` @kind super;
  #L3bf7ec.  v1:= temp;
  #L3bf7ee.  if v1 >= v3 then goto L3bf7fc;
  #L3bf7f2.  v1:= v1 + -1;
  #L3bf7f6.  v0.`org.joda.time.field.SkipDateTimeField.iMinValue` @type ^`int` := v1;
  #L3bf7fa.  goto L3bf80e;
  #L3bf7fc.  if v1 != v3 then goto L3bf80a;
  #L3bf800.  v1:= v3 + 1;
  #L3bf804.  v0.`org.joda.time.field.SkipDateTimeField.iMinValue` @type ^`int` := v1;
  #L3bf808.  goto L3bf80e;
  #L3bf80a.  v0.`org.joda.time.field.SkipDateTimeField.iMinValue` @type ^`int` := v1;
  #L3bf80e.  v0.`org.joda.time.field.SkipDateTimeField.iSkip` @type ^`int` := v3;
  #L3bf812.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.field.SkipDateTimeField` v2 @kind this) @signature `Lorg/joda/time/field/SkipDateTimeField;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3bf73c.  call temp:= `getType`(v2) @signature `Lorg/joda/time/field/DelegatedDateTimeField;.getType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3bf742.  v0:= temp @kind object;
  #L3bf744.  v1:= v2.`org.joda.time.field.SkipDateTimeField.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3bf748.  call temp:= `getField`(v0, v1) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bf74e.  v0:= temp @kind object;
  #L3bf750.  return v0 @kind object;
}
procedure `int` `get`(`org.joda.time.field.SkipDateTimeField` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/field/SkipDateTimeField;.get:(J)I` @AccessFlag PUBLIC {
    temp;

  #L3bf6fc.  call temp:= `get`(v0, v1) @signature `Lorg/joda/time/field/DelegatedDateTimeField;.get:(J)I` @kind super;
  #L3bf702.  v1:= temp;
  #L3bf704.  v2:= v0.`org.joda.time.field.SkipDateTimeField.iSkip` @type ^`int`;
  #L3bf708.  if v1 > v2 then goto L3bf710;
  #L3bf70c.  v1:= v1 + -1;
  #L3bf710.  return v1;
}
procedure `int` `getMinimumValue`(`org.joda.time.field.SkipDateTimeField` v1 @kind this) @signature `Lorg/joda/time/field/SkipDateTimeField;.getMinimumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bf724.  v0:= v1.`org.joda.time.field.SkipDateTimeField.iMinValue` @type ^`int`;
  #L3bf728.  return v0;
}
procedure `long` `set`(`org.joda.time.field.SkipDateTimeField` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lorg/joda/time/field/SkipDateTimeField;.set:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3bf764.  v0:= v2.`org.joda.time.field.SkipDateTimeField.iMinValue` @type ^`int`;
  #L3bf768.  call temp:= `getMaximumValue`(v2) @signature `Lorg/joda/time/field/DelegatedDateTimeField;.getMaximumValue:()I` @kind virtual;
  #L3bf76e.  v1:= temp;
  #L3bf770.  call `verifyValueBounds`(v2, v5, v0, v1) @signature `Lorg/joda/time/field/FieldUtils;.verifyValueBounds:(Lorg/joda/time/DateTimeField;III)V` @kind static;
  #L3bf776.  v0:= v2.`org.joda.time.field.SkipDateTimeField.iSkip` @type ^`int`;
  #L3bf77a.  if v5 > v0 then goto L3bf7a6;
  #L3bf77e.  if v5 == v0 then goto L3bf788;
  #L3bf782.  v5:= v5 + 1;
  #L3bf786.  goto L3bf7a6;
  #L3bf788.  v3:= new `org.joda.time.IllegalFieldValueException`;
  #L3bf78c.  call temp:= `year`() @signature `Lorg/joda/time/DateTimeFieldType;.year:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3bf792.  v4:= temp @kind object;
  #L3bf794.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3bf79a.  v5:= temp @kind object;
  #L3bf79c.  v0:= 0I;
  #L3bf79e.  call `<init>`(v3, v4, v5, v0, v0) @signature `Lorg/joda/time/IllegalFieldValueException;.<init>:(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V` @kind direct;
  #L3bf7a4.  throw v3;
  #L3bf7a6.  call temp:= `set`(v2, v3, v5) @signature `Lorg/joda/time/field/DelegatedDateTimeField;.set:(JI)J` @kind super;
  #L3bf7ac.  v3:= temp @kind wide;
  #L3bf7ae.  return v3 @kind wide;
}
