record `org.joda.time.field.OffsetDateTimeField` @kind class @AccessFlag PUBLIC extends `org.joda.time.field.DecoratedDateTimeField` @kind class {
  `int` `org.joda.time.field.OffsetDateTimeField.iMax` @AccessFlag PRIVATE_FINAL;
  `int` `org.joda.time.field.OffsetDateTimeField.iMin` @AccessFlag PRIVATE_FINAL;
  `int` `org.joda.time.field.OffsetDateTimeField.iOffset` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@org.joda.time.field.OffsetDateTimeField.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.field.OffsetDateTimeField` v7 @kind this, `org.joda.time.DateTimeField` v8 @kind object, `int` v9 ) @signature `Lorg/joda/time/field/OffsetDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3bea84.  if v8 != 0 then goto L3bea8c;
  #L3bea88.  v0:= 0I;
  #L3bea8a.  goto L3bea94;
  #L3bea8c.  call temp:= `getType`(v8) @signature `Lorg/joda/time/DateTimeField;.getType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3bea92.  v0:= temp @kind object;
  #L3bea94.  v3:= v0 @kind object;
  #L3bea96.  v5:= -2147483648I;
  #L3bea9a.  v6:= 2147483647I;
  #L3beaa0.  v1:= v7 @kind object;
  #L3beaa2.  v2:= v8 @kind object;
  #L3beaa4.  v4:= v9;
  #L3beaa6.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lorg/joda/time/field/OffsetDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;III)V` @kind direct;
  #L3beaac.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.field.OffsetDateTimeField` v6 @kind this, `org.joda.time.DateTimeField` v7 @kind object, `org.joda.time.DateTimeFieldType` v8 @kind object, `int` v9 ) @signature `Lorg/joda/time/field/OffsetDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3beac0.  v4:= -2147483648I;
  #L3beac4.  v5:= 2147483647I;
  #L3beaca.  v0:= v6 @kind object;
  #L3beacc.  v1:= v7 @kind object;
  #L3beace.  v2:= v8 @kind object;
  #L3bead0.  v3:= v9;
  #L3bead2.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lorg/joda/time/field/OffsetDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;III)V` @kind direct;
  #L3bead8.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.field.OffsetDateTimeField` v0 @kind this, `org.joda.time.DateTimeField` v1 @kind object, `org.joda.time.DateTimeFieldType` v2 @kind object, `int` v3 , `int` v4 , `int` v5 ) @signature `Lorg/joda/time/field/OffsetDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3beaec.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;)V` @kind direct;
  #L3beaf2.  if v3 == 0 then goto L3beb40;
  #L3beaf6.  v0.`org.joda.time.field.OffsetDateTimeField.iOffset` @type ^`int` := v3;
  #L3beafa.  call temp:= `getMinimumValue`(v1) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:()I` @kind virtual;
  #L3beb00.  v2:= temp;
  #L3beb02.  v2:= v2 + v3 @kind int;
  #L3beb04.  if v4 >= v2 then goto L3beb18;
  #L3beb08.  call temp:= `getMinimumValue`(v1) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:()I` @kind virtual;
  #L3beb0e.  v2:= temp;
  #L3beb10.  v2:= v2 + v3 @kind int;
  #L3beb12.  v0.`org.joda.time.field.OffsetDateTimeField.iMin` @type ^`int` := v2;
  #L3beb16.  goto L3beb1c;
  #L3beb18.  v0.`org.joda.time.field.OffsetDateTimeField.iMin` @type ^`int` := v4;
  #L3beb1c.  call temp:= `getMaximumValue`(v1) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:()I` @kind virtual;
  #L3beb22.  v2:= temp;
  #L3beb24.  v2:= v2 + v3 @kind int;
  #L3beb26.  if v5 <= v2 then goto L3beb3a;
  #L3beb2a.  call temp:= `getMaximumValue`(v1) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:()I` @kind virtual;
  #L3beb30.  v1:= temp;
  #L3beb32.  v1:= v1 + v3 @kind int;
  #L3beb34.  v0.`org.joda.time.field.OffsetDateTimeField.iMax` @type ^`int` := v1;
  #L3beb38.  goto L3beb3e;
  #L3beb3a.  v0.`org.joda.time.field.OffsetDateTimeField.iMax` @type ^`int` := v5;
  #L3beb3e.  return @kind void;
  #L3beb40.  v1:= new `java.lang.IllegalArgumentException`;
  #L3beb44.  v2:= "The offset cannot be zero" @kind object;
  #L3beb48.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3beb4e.  throw v1;
}
procedure `long` `add`(`org.joda.time.field.OffsetDateTimeField` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lorg/joda/time/field/OffsetDateTimeField;.add:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3be8c4.  call temp:= `add`(v2, v3, v5) @signature `Lorg/joda/time/field/BaseDateTimeField;.add:(JI)J` @kind super;
  #L3be8ca.  v3:= temp @kind wide;
  #L3be8cc.  call temp:= `get`(v2, v3) @signature `Lorg/joda/time/field/OffsetDateTimeField;.get:(J)I` @kind virtual;
  #L3be8d2.  v5:= temp;
  #L3be8d4.  v0:= v2.`org.joda.time.field.OffsetDateTimeField.iMin` @type ^`int`;
  #L3be8d8.  v1:= v2.`org.joda.time.field.OffsetDateTimeField.iMax` @type ^`int`;
  #L3be8dc.  call `verifyValueBounds`(v2, v5, v0, v1) @signature `Lorg/joda/time/field/FieldUtils;.verifyValueBounds:(Lorg/joda/time/DateTimeField;III)V` @kind static;
  #L3be8e2.  return v3 @kind wide;
}
procedure `long` `add`(`org.joda.time.field.OffsetDateTimeField` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/joda/time/field/OffsetDateTimeField;.add:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3be8f4.  call temp:= `add`(v1, v2, v4) @signature `Lorg/joda/time/field/BaseDateTimeField;.add:(JJ)J` @kind super;
  #L3be8fa.  v2:= temp @kind wide;
  #L3be8fc.  call temp:= `get`(v1, v2) @signature `Lorg/joda/time/field/OffsetDateTimeField;.get:(J)I` @kind virtual;
  #L3be902.  v4:= temp;
  #L3be904.  v5:= v1.`org.joda.time.field.OffsetDateTimeField.iMin` @type ^`int`;
  #L3be908.  v0:= v1.`org.joda.time.field.OffsetDateTimeField.iMax` @type ^`int`;
  #L3be90c.  call `verifyValueBounds`(v1, v4, v5, v0) @signature `Lorg/joda/time/field/FieldUtils;.verifyValueBounds:(Lorg/joda/time/DateTimeField;III)V` @kind static;
  #L3be912.  return v2 @kind wide;
}
procedure `long` `addWrapField`(`org.joda.time.field.OffsetDateTimeField` v3 @kind this, `long` v4 , `int` v6 ) @signature `Lorg/joda/time/field/OffsetDateTimeField;.addWrapField:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3be924.  call temp:= `get`(v3, v4) @signature `Lorg/joda/time/field/OffsetDateTimeField;.get:(J)I` @kind virtual;
  #L3be92a.  v0:= temp;
  #L3be92c.  v1:= v3.`org.joda.time.field.OffsetDateTimeField.iMin` @type ^`int`;
  #L3be930.  v2:= v3.`org.joda.time.field.OffsetDateTimeField.iMax` @type ^`int`;
  #L3be934.  call temp:= `getWrappedValue`(v0, v6, v1, v2) @signature `Lorg/joda/time/field/FieldUtils;.getWrappedValue:(IIII)I` @kind static;
  #L3be93a.  v6:= temp;
  #L3be93c.  call temp:= `set`(v3, v4, v6) @signature `Lorg/joda/time/field/OffsetDateTimeField;.set:(JI)J` @kind virtual;
  #L3be942.  v4:= temp @kind wide;
  #L3be944.  return v4 @kind wide;
}
procedure `int` `get`(`org.joda.time.field.OffsetDateTimeField` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/field/OffsetDateTimeField;.get:(J)I` @AccessFlag PUBLIC {
    temp;

  #L3be838.  call temp:= `get`(v0, v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.get:(J)I` @kind super;
  #L3be83e.  v1:= temp;
  #L3be840.  v2:= v0.`org.joda.time.field.OffsetDateTimeField.iOffset` @type ^`int`;
  #L3be844.  v1:= v1 + v2 @kind int;
  #L3be846.  return v1;
}
procedure `int` `getLeapAmount`(`org.joda.time.field.OffsetDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/field/OffsetDateTimeField;.getLeapAmount:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3be858.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3be85e.  v0:= temp @kind object;
  #L3be860.  call temp:= `getLeapAmount`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.getLeapAmount:(J)I` @kind virtual;
  #L3be866.  v2:= temp;
  #L3be868.  return v2;
}
procedure `org.joda.time.DurationField` `getLeapDurationField`(`org.joda.time.field.OffsetDateTimeField` v1 @kind this) @signature `Lorg/joda/time/field/OffsetDateTimeField;.getLeapDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bea60.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bea66.  v0:= temp @kind object;
  #L3bea68.  call temp:= `getLeapDurationField`(v0) @signature `Lorg/joda/time/DateTimeField;.getLeapDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3bea6e.  v0:= temp @kind object;
  #L3bea70.  return v0 @kind object;
}
procedure `int` `getMaximumValue`(`org.joda.time.field.OffsetDateTimeField` v1 @kind this) @signature `Lorg/joda/time/field/OffsetDateTimeField;.getMaximumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3be87c.  v0:= v1.`org.joda.time.field.OffsetDateTimeField.iMax` @type ^`int`;
  #L3be880.  return v0;
}
procedure `int` `getMinimumValue`(`org.joda.time.field.OffsetDateTimeField` v1 @kind this) @signature `Lorg/joda/time/field/OffsetDateTimeField;.getMinimumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3be894.  v0:= v1.`org.joda.time.field.OffsetDateTimeField.iMin` @type ^`int`;
  #L3be898.  return v0;
}
procedure `int` `getOffset`(`org.joda.time.field.OffsetDateTimeField` v1 @kind this) @signature `Lorg/joda/time/field/OffsetDateTimeField;.getOffset:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3be8ac.  v0:= v1.`org.joda.time.field.OffsetDateTimeField.iOffset` @type ^`int`;
  #L3be8b0.  return v0;
}
procedure `boolean` `isLeap`(`org.joda.time.field.OffsetDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/field/OffsetDateTimeField;.isLeap:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3be814.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3be81a.  v0:= temp @kind object;
  #L3be81c.  call temp:= `isLeap`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.isLeap:(J)Z` @kind virtual;
  #L3be822.  v2:= temp;
  #L3be824.  return v2;
}
procedure `long` `remainder`(`org.joda.time.field.OffsetDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/field/OffsetDateTimeField;.remainder:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3be958.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3be95e.  v0:= temp @kind object;
  #L3be960.  call temp:= `remainder`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.remainder:(J)J` @kind virtual;
  #L3be966.  v2:= temp @kind wide;
  #L3be968.  return v2 @kind wide;
}
procedure `long` `roundCeiling`(`org.joda.time.field.OffsetDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/field/OffsetDateTimeField;.roundCeiling:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3be97c.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3be982.  v0:= temp @kind object;
  #L3be984.  call temp:= `roundCeiling`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.roundCeiling:(J)J` @kind virtual;
  #L3be98a.  v2:= temp @kind wide;
  #L3be98c.  return v2 @kind wide;
}
procedure `long` `roundFloor`(`org.joda.time.field.OffsetDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/field/OffsetDateTimeField;.roundFloor:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3be9a0.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3be9a6.  v0:= temp @kind object;
  #L3be9a8.  call temp:= `roundFloor`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3be9ae.  v2:= temp @kind wide;
  #L3be9b0.  return v2 @kind wide;
}
procedure `long` `roundHalfCeiling`(`org.joda.time.field.OffsetDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/field/OffsetDateTimeField;.roundHalfCeiling:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3be9c4.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3be9ca.  v0:= temp @kind object;
  #L3be9cc.  call temp:= `roundHalfCeiling`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.roundHalfCeiling:(J)J` @kind virtual;
  #L3be9d2.  v2:= temp @kind wide;
  #L3be9d4.  return v2 @kind wide;
}
procedure `long` `roundHalfEven`(`org.joda.time.field.OffsetDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/field/OffsetDateTimeField;.roundHalfEven:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3be9e8.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3be9ee.  v0:= temp @kind object;
  #L3be9f0.  call temp:= `roundHalfEven`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.roundHalfEven:(J)J` @kind virtual;
  #L3be9f6.  v2:= temp @kind wide;
  #L3be9f8.  return v2 @kind wide;
}
procedure `long` `roundHalfFloor`(`org.joda.time.field.OffsetDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/field/OffsetDateTimeField;.roundHalfFloor:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bea0c.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bea12.  v0:= temp @kind object;
  #L3bea14.  call temp:= `roundHalfFloor`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.roundHalfFloor:(J)J` @kind virtual;
  #L3bea1a.  v2:= temp @kind wide;
  #L3bea1c.  return v2 @kind wide;
}
procedure `long` `set`(`org.joda.time.field.OffsetDateTimeField` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lorg/joda/time/field/OffsetDateTimeField;.set:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3bea30.  v0:= v2.`org.joda.time.field.OffsetDateTimeField.iMin` @type ^`int`;
  #L3bea34.  v1:= v2.`org.joda.time.field.OffsetDateTimeField.iMax` @type ^`int`;
  #L3bea38.  call `verifyValueBounds`(v2, v5, v0, v1) @signature `Lorg/joda/time/field/FieldUtils;.verifyValueBounds:(Lorg/joda/time/DateTimeField;III)V` @kind static;
  #L3bea3e.  v0:= v2.`org.joda.time.field.OffsetDateTimeField.iOffset` @type ^`int`;
  #L3bea42.  v5:= v5 - v0 @kind int;
  #L3bea44.  call temp:= `set`(v2, v3, v5) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.set:(JI)J` @kind super;
  #L3bea4a.  v3:= temp @kind wide;
  #L3bea4c.  return v3 @kind wide;
}
