record `org.joda.time.field.SkipUndoDateTimeField` @kind class @AccessFlag PUBLIC_FINAL extends `org.joda.time.field.DelegatedDateTimeField` @kind class {
  `org.joda.time.Chronology` `org.joda.time.field.SkipUndoDateTimeField.iChronology` @AccessFlag PRIVATE_FINAL;
  `int` `org.joda.time.field.SkipUndoDateTimeField.iMinValue` @AccessFlag PRIVATE_TRANSIENT;
  `int` `org.joda.time.field.SkipUndoDateTimeField.iSkip` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@org.joda.time.field.SkipUndoDateTimeField.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.field.SkipUndoDateTimeField` v1 @kind this, `org.joda.time.Chronology` v2 @kind object, `org.joda.time.DateTimeField` v3 @kind object) @signature `Lorg/joda/time/field/SkipUndoDateTimeField;.<init>:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3bf8c4.  v0:= 0I;
  #L3bf8c6.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/joda/time/field/SkipUndoDateTimeField;.<init>:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;I)V` @kind direct;
  #L3bf8cc.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.field.SkipUndoDateTimeField` v0 @kind this, `org.joda.time.Chronology` v1 @kind object, `org.joda.time.DateTimeField` v2 @kind object, `int` v3 ) @signature `Lorg/joda/time/field/SkipUndoDateTimeField;.<init>:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3bf8e0.  call `<init>`(v0, v2) @signature `Lorg/joda/time/field/DelegatedDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3bf8e6.  v0.`org.joda.time.field.SkipUndoDateTimeField.iChronology` @type ^`org.joda.time.Chronology` := v1 @kind object;
  #L3bf8ea.  call temp:= `getMinimumValue`(v0) @signature `Lorg/joda/time/field/DelegatedDateTimeField;.getMinimumValue:()I` @kind super;
  #L3bf8f0.  v1:= temp;
  #L3bf8f2.  if v1 >= v3 then goto L3bf900;
  #L3bf8f6.  v1:= v1 + 1;
  #L3bf8fa.  v0.`org.joda.time.field.SkipUndoDateTimeField.iMinValue` @type ^`int` := v1;
  #L3bf8fe.  goto L3bf912;
  #L3bf900.  v2:= v3 + 1;
  #L3bf904.  if v1 != v2 then goto L3bf90e;
  #L3bf908.  v0.`org.joda.time.field.SkipUndoDateTimeField.iMinValue` @type ^`int` := v3;
  #L3bf90c.  goto L3bf912;
  #L3bf90e.  v0.`org.joda.time.field.SkipUndoDateTimeField.iMinValue` @type ^`int` := v1;
  #L3bf912.  v0.`org.joda.time.field.SkipUndoDateTimeField.iSkip` @type ^`int` := v3;
  #L3bf916.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.field.SkipUndoDateTimeField` v2 @kind this) @signature `Lorg/joda/time/field/SkipUndoDateTimeField;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3bf864.  call temp:= `getType`(v2) @signature `Lorg/joda/time/field/DelegatedDateTimeField;.getType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3bf86a.  v0:= temp @kind object;
  #L3bf86c.  v1:= v2.`org.joda.time.field.SkipUndoDateTimeField.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3bf870.  call temp:= `getField`(v0, v1) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3bf876.  v0:= temp @kind object;
  #L3bf878.  return v0 @kind object;
}
procedure `int` `get`(`org.joda.time.field.SkipUndoDateTimeField` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/field/SkipUndoDateTimeField;.get:(J)I` @AccessFlag PUBLIC {
    temp;

  #L3bf824.  call temp:= `get`(v0, v1) @signature `Lorg/joda/time/field/DelegatedDateTimeField;.get:(J)I` @kind super;
  #L3bf82a.  v1:= temp;
  #L3bf82c.  v2:= v0.`org.joda.time.field.SkipUndoDateTimeField.iSkip` @type ^`int`;
  #L3bf830.  if v1 >= v2 then goto L3bf838;
  #L3bf834.  v1:= v1 + 1;
  #L3bf838.  return v1;
}
procedure `int` `getMinimumValue`(`org.joda.time.field.SkipUndoDateTimeField` v1 @kind this) @signature `Lorg/joda/time/field/SkipUndoDateTimeField;.getMinimumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bf84c.  v0:= v1.`org.joda.time.field.SkipUndoDateTimeField.iMinValue` @type ^`int`;
  #L3bf850.  return v0;
}
procedure `long` `set`(`org.joda.time.field.SkipUndoDateTimeField` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lorg/joda/time/field/SkipUndoDateTimeField;.set:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3bf88c.  v0:= v2.`org.joda.time.field.SkipUndoDateTimeField.iMinValue` @type ^`int`;
  #L3bf890.  call temp:= `getMaximumValue`(v2) @signature `Lorg/joda/time/field/DelegatedDateTimeField;.getMaximumValue:()I` @kind virtual;
  #L3bf896.  v1:= temp;
  #L3bf898.  call `verifyValueBounds`(v2, v5, v0, v1) @signature `Lorg/joda/time/field/FieldUtils;.verifyValueBounds:(Lorg/joda/time/DateTimeField;III)V` @kind static;
  #L3bf89e.  v0:= v2.`org.joda.time.field.SkipUndoDateTimeField.iSkip` @type ^`int`;
  #L3bf8a2.  if v5 > v0 then goto L3bf8aa;
  #L3bf8a6.  v5:= v5 + -1;
  #L3bf8aa.  call temp:= `set`(v2, v3, v5) @signature `Lorg/joda/time/field/DelegatedDateTimeField;.set:(JI)J` @kind super;
  #L3bf8b0.  v3:= temp @kind wide;
  #L3bf8b2.  return v3 @kind wide;
}
