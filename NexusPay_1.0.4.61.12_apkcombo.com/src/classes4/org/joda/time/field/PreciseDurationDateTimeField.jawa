record `org.joda.time.field.PreciseDurationDateTimeField` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.joda.time.field.BaseDateTimeField` @kind class {
  `org.joda.time.DurationField` `org.joda.time.field.PreciseDurationDateTimeField.iUnitField` @AccessFlag PRIVATE_FINAL;
  `long` `org.joda.time.field.PreciseDurationDateTimeField.iUnitMillis` @AccessFlag FINAL;
}
global `long` `@@org.joda.time.field.PreciseDurationDateTimeField.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.field.PreciseDurationDateTimeField` v4 @kind this, `org.joda.time.DateTimeFieldType` v5 @kind object, `org.joda.time.DurationField` v6 @kind object) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.<init>:(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3bee54.  call `<init>`(v4, v5) @signature `Lorg/joda/time/field/BaseDateTimeField;.<init>:(Lorg/joda/time/DateTimeFieldType;)V` @kind direct;
  #L3bee5a.  call temp:= `isPrecise`(v6) @signature `Lorg/joda/time/DurationField;.isPrecise:()Z` @kind virtual;
  #L3bee60.  v5:= temp;
  #L3bee62.  if v5 == 0 then goto L3bee94;
  #L3bee66.  call temp:= `getUnitMillis`(v6) @signature `Lorg/joda/time/DurationField;.getUnitMillis:()J` @kind virtual;
  #L3bee6c.  v0:= temp @kind wide;
  #L3bee6e.  v4.`org.joda.time.field.PreciseDurationDateTimeField.iUnitMillis` @type ^`long` := v0 @kind wide;
  #L3bee72.  v2:= 1L;
  #L3bee76.  v5:= lcmp(v0, v2);
  #L3bee7a.  if v5 < 0 then goto L3bee84;
  #L3bee7e.  v4.`org.joda.time.field.PreciseDurationDateTimeField.iUnitField` @type ^`org.joda.time.DurationField` := v6 @kind object;
  #L3bee82.  return @kind void;
  #L3bee84.  v5:= new `java.lang.IllegalArgumentException`;
  #L3bee88.  v6:= "The unit milliseconds must be at least 1" @kind object;
  #L3bee8c.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3bee92.  throw v5;
  #L3bee94.  v5:= new `java.lang.IllegalArgumentException`;
  #L3bee98.  v6:= "Unit duration field must be precise" @kind object;
  #L3bee9c.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3beea2.  throw v5;
}
procedure `org.joda.time.DurationField` `getDurationField`(`org.joda.time.field.PreciseDurationDateTimeField` v1 @kind this) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bee3c.  v0:= v1.`org.joda.time.field.PreciseDurationDateTimeField.iUnitField` @type ^`org.joda.time.DurationField` @kind object;
  #L3bee40.  return v0 @kind object;
}
procedure `int` `getMaximumValueForSet`(`org.joda.time.field.PreciseDurationDateTimeField` v0 @kind this, `long` v1 , `int` v3 ) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.getMaximumValueForSet:(JI)I` @AccessFlag PROTECTED {
    temp;

  #L3bed04.  call temp:= `getMaximumValue`(v0, v1) @signature `Lorg/joda/time/field/BaseDateTimeField;.getMaximumValue:(J)I` @kind virtual;
  #L3bed0a.  v1:= temp;
  #L3bed0c.  return v1;
}
procedure `int` `getMinimumValue`(`org.joda.time.field.PreciseDurationDateTimeField` v1 @kind this) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.getMinimumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3bed20.  v0:= 0I;
  #L3bed22.  return v0;
}
procedure `long` `getUnitMillis`(`org.joda.time.field.PreciseDurationDateTimeField` v2 @kind this) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.getUnitMillis:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3bed34.  v0:= v2.`org.joda.time.field.PreciseDurationDateTimeField.iUnitMillis` @type ^`long` @kind wide;
  #L3bed38.  return v0 @kind wide;
}
procedure `boolean` `isLenient`(`org.joda.time.field.PreciseDurationDateTimeField` v1 @kind this) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.isLenient:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3becf0.  v0:= 0I;
  #L3becf2.  return v0;
}
procedure `long` `remainder`(`org.joda.time.field.PreciseDurationDateTimeField` v4 @kind this, `long` v5 ) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.remainder:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3bed4c.  v0:= 0L;
  #L3bed50.  v2:= lcmp(v5, v0);
  #L3bed54.  if v2 < 0 then goto L3bed60;
  #L3bed58.  v0:= v4.`org.joda.time.field.PreciseDurationDateTimeField.iUnitMillis` @type ^`long` @kind wide;
  #L3bed5c.  v5:= v5 %% v0 @kind long;
  #L3bed5e.  return v5 @kind wide;
  #L3bed60.  v0:= 1L;
  #L3bed64.  v5:= v5 + v0 @kind long;
  #L3bed66.  v2:= v4.`org.joda.time.field.PreciseDurationDateTimeField.iUnitMillis` @type ^`long` @kind wide;
  #L3bed6a.  v5:= v5 %% v2 @kind long;
  #L3bed6c.  v5:= v5 + v2 @kind long;
  #L3bed6e.  v5:= v5 - v0 @kind long;
  #L3bed70.  return v5 @kind wide;
}
procedure `long` `roundCeiling`(`org.joda.time.field.PreciseDurationDateTimeField` v4 @kind this, `long` v5 ) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.roundCeiling:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3bed84.  v0:= 0L;
  #L3bed88.  v2:= lcmp(v5, v0);
  #L3bed8c.  if v2 <= 0 then goto L3beda4;
  #L3bed90.  v0:= 1L;
  #L3bed94.  v5:= v5 - v0 @kind long;
  #L3bed96.  v0:= v4.`org.joda.time.field.PreciseDurationDateTimeField.iUnitMillis` @type ^`long` @kind wide;
  #L3bed9a.  v2:= v5 %% v0 @kind long;
  #L3bed9e.  v5:= v5 - v2 @kind long;
  #L3beda0.  v5:= v5 + v0 @kind long;
  #L3beda2.  return v5 @kind wide;
  #L3beda4.  v0:= v4.`org.joda.time.field.PreciseDurationDateTimeField.iUnitMillis` @type ^`long` @kind wide;
  #L3beda8.  v0:= v5 %% v0 @kind long;
  #L3bedac.  v5:= v5 - v0 @kind long;
  #L3bedae.  return v5 @kind wide;
}
procedure `long` `roundFloor`(`org.joda.time.field.PreciseDurationDateTimeField` v4 @kind this, `long` v5 ) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.roundFloor:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3bedc0.  v0:= 0L;
  #L3bedc4.  v2:= lcmp(v5, v0);
  #L3bedc8.  if v2 < 0 then goto L3bedd8;
  #L3bedcc.  v0:= v4.`org.joda.time.field.PreciseDurationDateTimeField.iUnitMillis` @type ^`long` @kind wide;
  #L3bedd0.  v0:= v5 %% v0 @kind long;
  #L3bedd4.  v5:= v5 - v0 @kind long;
  #L3bedd6.  return v5 @kind wide;
  #L3bedd8.  v0:= 1L;
  #L3beddc.  v5:= v5 + v0 @kind long;
  #L3bedde.  v0:= v4.`org.joda.time.field.PreciseDurationDateTimeField.iUnitMillis` @type ^`long` @kind wide;
  #L3bede2.  v2:= v5 %% v0 @kind long;
  #L3bede6.  v5:= v5 - v2 @kind long;
  #L3bede8.  goto L3bedd4;
}
procedure `long` `set`(`org.joda.time.field.PreciseDurationDateTimeField` v4 @kind this, `long` v5 , `int` v7 ) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.set:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3bedfc.  call temp:= `getMinimumValue`(v4) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.getMinimumValue:()I` @kind virtual;
  #L3bee02.  v0:= temp;
  #L3bee04.  call temp:= `getMaximumValueForSet`(v4, v5, v7) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.getMaximumValueForSet:(JI)I` @kind virtual;
  #L3bee0a.  v1:= temp;
  #L3bee0c.  call `verifyValueBounds`(v4, v7, v0, v1) @signature `Lorg/joda/time/field/FieldUtils;.verifyValueBounds:(Lorg/joda/time/DateTimeField;III)V` @kind static;
  #L3bee12.  call temp:= `get`(v4, v5) @signature `Lorg/joda/time/field/BaseDateTimeField;.get:(J)I` @kind virtual;
  #L3bee18.  v0:= temp;
  #L3bee1a.  v7:= v7 - v0 @kind int;
  #L3bee1c.  v0:= (`long`) v7 @kind i2l;
  #L3bee1e.  v2:= v4.`org.joda.time.field.PreciseDurationDateTimeField.iUnitMillis` @type ^`long` @kind wide;
  #L3bee22.  v0:= v0 * v2 @kind long;
  #L3bee26.  v5:= v5 + v0 @kind long;
  #L3bee28.  return v5 @kind wide;
}
