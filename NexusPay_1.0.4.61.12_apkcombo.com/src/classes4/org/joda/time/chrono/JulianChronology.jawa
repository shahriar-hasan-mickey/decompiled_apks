record `org.joda.time.chrono.JulianChronology` @kind class @AccessFlag PUBLIC_FINAL extends `org.joda.time.chrono.BasicGJChronology` @kind class {
}
global `org.joda.time.chrono.JulianChronology` `@@org.joda.time.chrono.JulianChronology.INSTANCE_UTC` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.joda.time.chrono.JulianChronology.MAX_YEAR` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.JulianChronology.MILLIS_PER_MONTH` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.JulianChronology.MILLIS_PER_YEAR` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.joda.time.chrono.JulianChronology.MIN_YEAR` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentHashMap` `@@org.joda.time.chrono.JulianChronology.cCache` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.JulianChronology.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/chrono/JulianChronology;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3b71d8.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L3b71dc.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L3b71e2.  `@@org.joda.time.chrono.JulianChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L3b71e6.  v0:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b71ea.  call temp:= `getInstance`(v0) @signature `Lorg/joda/time/chrono/JulianChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/JulianChronology;` @kind static;
  #L3b71f0.  v0:= temp @kind object;
  #L3b71f2.  `@@org.joda.time.chrono.JulianChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.JulianChronology` := v0 @kind object;
  #L3b71f6.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.chrono.JulianChronology` v0 @kind this, `org.joda.time.Chronology` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lorg/joda/time/chrono/JulianChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3b7208.  call `<init>`(v0, v1, v2, v3) @signature `Lorg/joda/time/chrono/BasicGJChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @kind direct;
  #L3b720e.  return @kind void;
}
procedure `int` `adjustYearForSet`(`int` v3 ) @signature `Lorg/joda/time/chrono/JulianChronology;.adjustYearForSet:(I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3b6e9c.  if v3 > 0 then goto L3b6ec8;
  #L3b6ea0.  if v3 == 0 then goto L3b6eaa;
  #L3b6ea4.  v3:= v3 + 1;
  #L3b6ea8.  goto L3b6ec8;
  #L3b6eaa.  v0:= new `org.joda.time.IllegalFieldValueException`;
  #L3b6eae.  call temp:= `year`() @signature `Lorg/joda/time/DateTimeFieldType;.year:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b6eb4.  v1:= temp @kind object;
  #L3b6eb6.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3b6ebc.  v3:= temp @kind object;
  #L3b6ebe.  v2:= 0I;
  #L3b6ec0.  call `<init>`(v0, v1, v3, v2, v2) @signature `Lorg/joda/time/IllegalFieldValueException;.<init>:(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V` @kind direct;
  #L3b6ec6.  throw v0;
  #L3b6ec8.  return v3;
}
procedure `org.joda.time.chrono.JulianChronology` `getInstance`() @signature `Lorg/joda/time/chrono/JulianChronology;.getInstance:()Lorg/joda/time/chrono/JulianChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3b7090.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b7096.  v0:= temp @kind object;
  #L3b7098.  v1:= 4I;
  #L3b709a.  call temp:= `getInstance`(v0, v1) @signature `Lorg/joda/time/chrono/JulianChronology;.getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;` @kind static;
  #L3b70a0.  v0:= temp @kind object;
  #L3b70a2.  return v0 @kind object;
}
procedure `org.joda.time.chrono.JulianChronology` `getInstance`(`org.joda.time.DateTimeZone` v1 @kind object) @signature `Lorg/joda/time/chrono/JulianChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/JulianChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3b70b4.  v0:= 4I;
  #L3b70b6.  call temp:= `getInstance`(v1, v0) @signature `Lorg/joda/time/chrono/JulianChronology;.getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;` @kind static;
  #L3b70bc.  v1:= temp @kind object;
  #L3b70be.  return v1 @kind object;
}
procedure `org.joda.time.chrono.JulianChronology` `getInstance`(`org.joda.time.DateTimeZone` v5 @kind object, `int` v6 ) @signature `Lorg/joda/time/chrono/JulianChronology;.getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b70d0.  if v5 != 0 then goto L3b70dc;
  #L3b70d4.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b70da.  v5:= temp @kind object;
  #L3b70dc.  v0:= `@@org.joda.time.chrono.JulianChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3b70e0.  call temp:= `get`(v0, v5) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b70e6.  v0:= temp @kind object;
  #L3b70e8.  v0:= (`org.joda.time.chrono.JulianChronology`[]) v0 @kind object;
  #L3b70ec.  if v0 != 0 then goto L3b710c;
  #L3b70f0.  v0:= 7I;
  #L3b70f2.  v0:= new `org.joda.time.chrono.JulianChronology`[v0];
  #L3b70f6.  v1:= `@@org.joda.time.chrono.JulianChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3b70fa.  call temp:= `putIfAbsent`(v1, v5, v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b7100.  v1:= temp @kind object;
  #L3b7102.  v1:= (`org.joda.time.chrono.JulianChronology`[]) v1 @kind object;
  #L3b7106.  if v1 == 0 then goto L3b710c;
  #L3b710a.  v0:= v1 @kind object;
  #L3b710c.  v1:= v6 + -1;
  #L3b7110.  v2:= v0[v1] @kind object;
  #L3b7114.  if v2 != 0 then goto L3b7168;
  #L3b7118.  @monitorenter v0
  #L3b711a.  v2:= v0[v1] @kind object;
  #L3b711e.  if v2 != 0 then goto L3b715e;
  #L3b7122.  v2:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b7126.  v3:= 0I;
  #L3b7128.  if v5 != v2 then goto L3b7138;
  #L3b712c.  v5:= new `org.joda.time.chrono.JulianChronology`;
  #L3b7130.  call `<init>`(v5, v3, v3, v6) @signature `Lorg/joda/time/chrono/JulianChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @kind direct;
  #L3b7136.  goto L3b7158;
  #L3b7138.  v2:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b713c.  call temp:= `getInstance`(v2, v6) @signature `Lorg/joda/time/chrono/JulianChronology;.getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;` @kind static;
  #L3b7142.  v2:= temp @kind object;
  #L3b7144.  v4:= new `org.joda.time.chrono.JulianChronology`;
  #L3b7148.  call temp:= `getInstance`(v2, v5) @signature `Lorg/joda/time/chrono/ZonedChronology;.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;` @kind static;
  #L3b714e.  v5:= temp @kind object;
  #L3b7150.  call `<init>`(v4, v5, v3, v6) @signature `Lorg/joda/time/chrono/JulianChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @kind direct;
  #L3b7156.  v5:= v4 @kind object;
  #L3b7158.  v0[v1]:= v5 @kind object;
  #L3b715c.  v2:= v5 @kind object;
  #L3b715e.  @monitorexit v0
  #L3b7160.  goto L3b7168;
  #L3b7162.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3b7164.  @monitorexit v0
  #L3b7166.  throw v5;
  #L3b7168.  return v2 @kind object;
  #L3b716a.  v5:= new `java.lang.IllegalArgumentException`;
  #L3b716e.  v0:= new `java.lang.StringBuilder`;
  #L3b7172.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b7178.  v1:= "Invalid min days in first week: " @kind object;
  #L3b717c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b7182.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b7188.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b718e.  v6:= temp @kind object;
  #L3b7190.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b7196.  throw v5;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L3b7110..L3b7114] goto L3b716a;
  catch `java.lang.Throwable` @[L3b711a..L3b7166] goto L3b7162;
}
procedure `org.joda.time.chrono.JulianChronology` `getInstanceUTC`() @signature `Lorg/joda/time/chrono/JulianChronology;.getInstanceUTC:()Lorg/joda/time/chrono/JulianChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3b71c0.  v0:= `@@org.joda.time.chrono.JulianChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.JulianChronology` @kind object;
  #L3b71c4.  return v0 @kind object;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.chrono.JulianChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/JulianChronology;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3b6f0c.  call temp:= `getBase`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b6f12.  v0:= temp @kind object;
  #L3b6f14.  call temp:= `getMinimumDaysInFirstWeek`(v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getMinimumDaysInFirstWeek:()I` @kind virtual;
  #L3b6f1a.  v1:= temp;
  #L3b6f1c.  if v1 != 0 then goto L3b6f22;
  #L3b6f20.  v1:= 4I;
  #L3b6f22.  if v0 != 0 then goto L3b6f2c;
  #L3b6f26.  v0:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b6f2a.  goto L3b6f34;
  #L3b6f2c.  call temp:= `getZone`(v0) @signature `Lorg/joda/time/Chronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b6f32.  v0:= temp @kind object;
  #L3b6f34.  call temp:= `getInstance`(v0, v1) @signature `Lorg/joda/time/chrono/JulianChronology;.getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/JulianChronology;` @kind static;
  #L3b6f3a.  v0:= temp @kind object;
  #L3b6f3c.  return v0 @kind object;
}
procedure `void` `assemble`(`org.joda.time.chrono.JulianChronology` v2 @kind this, `org.joda.time.chrono.AssembledChronology$Fields` v3 @kind object) @signature `Lorg/joda/time/chrono/JulianChronology;.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3b7220.  call temp:= `getBase`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b7226.  v0:= temp @kind object;
  #L3b7228.  if v0 != 0 then goto L3b7256;
  #L3b722c.  call `assemble`(v2, v3) @signature `Lorg/joda/time/chrono/BasicChronology;.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V` @kind super;
  #L3b7232.  v0:= new `org.joda.time.field.SkipDateTimeField`;
  #L3b7236.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.year` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b723a.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/field/SkipDateTimeField;.<init>:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3b7240.  v3.`org.joda.time.chrono.AssembledChronology$Fields.year` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b7244.  v0:= new `org.joda.time.field.SkipDateTimeField`;
  #L3b7248.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.weekyear` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b724c.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/field/SkipDateTimeField;.<init>:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3b7252.  v3.`org.joda.time.chrono.AssembledChronology$Fields.weekyear` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b7256.  return @kind void;
}
procedure `long` `calculateFirstDayOfYearMillis`(`org.joda.time.chrono.JulianChronology` v4 @kind this, `int` v5 ) @signature `Lorg/joda/time/chrono/JulianChronology;.calculateFirstDayOfYearMillis:(I)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b6f50.  v0:= v5 + -1968;
  #L3b6f54.  if v0 > 0 then goto L3b6f62;
  #L3b6f58.  v5:= v0 + 3;
  #L3b6f5c.  v5:= v5 ^> 2;
  #L3b6f60.  goto L3b6f7a;
  #L3b6f62.  v1:= v0 ^> 2;
  #L3b6f66.  call temp:= `isLeapYear`(v4, v5) @signature `Lorg/joda/time/chrono/JulianChronology;.isLeapYear:(I)Z` @kind virtual;
  #L3b6f6c.  v5:= temp;
  #L3b6f6e.  if v5 != 0 then goto L3b6f78;
  #L3b6f72.  v5:= v1 + 1;
  #L3b6f76.  goto L3b6f7a;
  #L3b6f78.  v5:= v1;
  #L3b6f7a.  v0:= (`long`) v0 @kind i2l;
  #L3b6f7c.  v2:= 365L;
  #L3b6f80.  v0:= v0 * v2 @kind long;
  #L3b6f84.  v2:= (`long`) v5 @kind i2l;
  #L3b6f86.  v0:= v0 + v2 @kind long;
  #L3b6f88.  v2:= 86400000L;
  #L3b6f8e.  v0:= v0 * v2 @kind long;
  #L3b6f92.  v2:= 62035200000L;
  #L3b6f9c.  v0:= v0 - v2 @kind long;
  #L3b6f9e.  return v0 @kind wide;
}
procedure `long` `getApproxMillisAtEpochDividedByTwo`(`org.joda.time.chrono.JulianChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/JulianChronology;.getApproxMillisAtEpochDividedByTwo:()J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b6fb0.  v0:= 31083663600000L;
  #L3b6fba.  return v0 @kind wide;
}
procedure `long` `getAverageMillisPerMonth`(`org.joda.time.chrono.JulianChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/JulianChronology;.getAverageMillisPerMonth:()J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b6fcc.  v0:= 2629800000L;
  #L3b6fd6.  return v0 @kind wide;
}
procedure `long` `getAverageMillisPerYear`(`org.joda.time.chrono.JulianChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/JulianChronology;.getAverageMillisPerYear:()J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b6fe8.  v0:= 31557600000L;
  #L3b6ff2.  return v0 @kind wide;
}
procedure `long` `getAverageMillisPerYearDividedByTwo`(`org.joda.time.chrono.JulianChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/JulianChronology;.getAverageMillisPerYearDividedByTwo:()J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b7004.  v0:= 15778800000L;
  #L3b700e.  return v0 @kind wide;
}
procedure `long` `getDateMidnightMillis`(`org.joda.time.chrono.JulianChronology` v0 @kind this, `int` v1 , `int` v2 , `int` v3 ) @signature `Lorg/joda/time/chrono/JulianChronology;.getDateMidnightMillis:(III)J` @AccessFlag  {
    temp;

  #L3b7020.  call temp:= `adjustYearForSet`(v1) @signature `Lorg/joda/time/chrono/JulianChronology;.adjustYearForSet:(I)I` @kind static;
  #L3b7026.  v1:= temp;
  #L3b7028.  call temp:= `getDateMidnightMillis`(v0, v1, v2, v3) @signature `Lorg/joda/time/chrono/BasicChronology;.getDateMidnightMillis:(III)J` @kind super;
  #L3b702e.  v1:= temp @kind wide;
  #L3b7030.  return v1 @kind wide;
}
procedure `int` `getMaxYear`(`org.joda.time.chrono.JulianChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/JulianChronology;.getMaxYear:()I` @AccessFlag  {
    temp;
    v0;

  #L3b6edc.  v0:= 292272992I;
  #L3b6ee2.  return v0;
}
procedure `int` `getMinYear`(`org.joda.time.chrono.JulianChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/JulianChronology;.getMinYear:()I` @AccessFlag  {
    temp;
    v0;

  #L3b6ef4.  v0:= -292269054I;
  #L3b6efa.  return v0;
}
procedure `boolean` `isLeapYear`(`org.joda.time.chrono.JulianChronology` v0 @kind this, `int` v1 ) @signature `Lorg/joda/time/chrono/JulianChronology;.isLeapYear:(I)Z` @AccessFlag  {
    temp;

  #L3b6e7c.  v1:= v1 ^& 3;
  #L3b6e80.  if v1 != 0 then goto L3b6e88;
  #L3b6e84.  v1:= 1I;
  #L3b6e86.  goto L3b6e8a;
  #L3b6e88.  v1:= 0I;
  #L3b6e8a.  return v1;
}
procedure `org.joda.time.Chronology` `withUTC`(`org.joda.time.chrono.JulianChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/JulianChronology;.withUTC:()Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b7044.  v0:= `@@org.joda.time.chrono.JulianChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.JulianChronology` @kind object;
  #L3b7048.  return v0 @kind object;
}
procedure `org.joda.time.Chronology` `withZone`(`org.joda.time.chrono.JulianChronology` v1 @kind this, `org.joda.time.DateTimeZone` v2 @kind object) @signature `Lorg/joda/time/chrono/JulianChronology;.withZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b705c.  if v2 != 0 then goto L3b7068;
  #L3b7060.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b7066.  v2:= temp @kind object;
  #L3b7068.  call temp:= `getZone`(v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b706e.  v0:= temp @kind object;
  #L3b7070.  if v2 != v0 then goto L3b7076;
  #L3b7074.  return v1 @kind object;
  #L3b7076.  call temp:= `getInstance`(v2) @signature `Lorg/joda/time/chrono/JulianChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/JulianChronology;` @kind static;
  #L3b707c.  v2:= temp @kind object;
  #L3b707e.  return v2 @kind object;
}
