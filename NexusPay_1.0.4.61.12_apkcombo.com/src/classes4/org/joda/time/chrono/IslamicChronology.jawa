record `org.joda.time.chrono.IslamicChronology` @kind class @AccessFlag PUBLIC_FINAL extends `org.joda.time.chrono.BasicChronology` @kind class {
  `org.joda.time.chrono.IslamicChronology$LeapYearPatternType` `org.joda.time.chrono.IslamicChronology.iLeapYears` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@org.joda.time.chrono.IslamicChronology.AH` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@org.joda.time.chrono.IslamicChronology.CYCLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `org.joda.time.DateTimeField` `@@org.joda.time.chrono.IslamicChronology.ERA_FIELD` @AccessFlag PRIVATE_STATIC_FINAL;
global `org.joda.time.chrono.IslamicChronology` `@@org.joda.time.chrono.IslamicChronology.INSTANCE_UTC` @AccessFlag PRIVATE_STATIC_FINAL;
global `org.joda.time.chrono.IslamicChronology$LeapYearPatternType` `@@org.joda.time.chrono.IslamicChronology.LEAP_YEAR_15_BASED` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.joda.time.chrono.IslamicChronology$LeapYearPatternType` `@@org.joda.time.chrono.IslamicChronology.LEAP_YEAR_16_BASED` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.joda.time.chrono.IslamicChronology$LeapYearPatternType` `@@org.joda.time.chrono.IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.joda.time.chrono.IslamicChronology$LeapYearPatternType` `@@org.joda.time.chrono.IslamicChronology.LEAP_YEAR_INDIAN` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@org.joda.time.chrono.IslamicChronology.LONG_MONTH_LENGTH` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.joda.time.chrono.IslamicChronology.MAX_YEAR` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.IslamicChronology.MILLIS_PER_CYCLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.IslamicChronology.MILLIS_PER_LONG_MONTH` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.IslamicChronology.MILLIS_PER_LONG_YEAR` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.IslamicChronology.MILLIS_PER_MONTH` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.IslamicChronology.MILLIS_PER_MONTH_PAIR` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.IslamicChronology.MILLIS_PER_SHORT_YEAR` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.IslamicChronology.MILLIS_PER_YEAR` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.IslamicChronology.MILLIS_YEAR_1` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.joda.time.chrono.IslamicChronology.MIN_YEAR` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.joda.time.chrono.IslamicChronology.MONTH_PAIR_LENGTH` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.joda.time.chrono.IslamicChronology.SHORT_MONTH_LENGTH` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentHashMap` `@@org.joda.time.chrono.IslamicChronology.cCache` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.IslamicChronology.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/chrono/IslamicChronology;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3b6d74.  v0:= new `org.joda.time.chrono.BasicSingleEraDateTimeField`;
  #L3b6d78.  v1:= "AH" @kind object;
  #L3b6d7c.  call `<init>`(v0, v1) @signature `Lorg/joda/time/chrono/BasicSingleEraDateTimeField;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b6d82.  `@@org.joda.time.chrono.IslamicChronology.ERA_FIELD` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b6d86.  v0:= new `org.joda.time.chrono.IslamicChronology$LeapYearPatternType`;
  #L3b6d8a.  v1:= 0I;
  #L3b6d8c.  v2:= 623158436I;
  #L3b6d92.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;.<init>:(II)V` @kind direct;
  #L3b6d98.  `@@org.joda.time.chrono.IslamicChronology.LEAP_YEAR_15_BASED` @type ^`org.joda.time.chrono.IslamicChronology$LeapYearPatternType` := v0 @kind object;
  #L3b6d9c.  v0:= new `org.joda.time.chrono.IslamicChronology$LeapYearPatternType`;
  #L3b6da0.  v1:= 1I;
  #L3b6da2.  v2:= 623191204I;
  #L3b6da8.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;.<init>:(II)V` @kind direct;
  #L3b6dae.  `@@org.joda.time.chrono.IslamicChronology.LEAP_YEAR_16_BASED` @type ^`org.joda.time.chrono.IslamicChronology$LeapYearPatternType` := v0 @kind object;
  #L3b6db2.  v0:= new `org.joda.time.chrono.IslamicChronology$LeapYearPatternType`;
  #L3b6db6.  v1:= 2I;
  #L3b6db8.  v2:= 690562340I;
  #L3b6dbe.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;.<init>:(II)V` @kind direct;
  #L3b6dc4.  `@@org.joda.time.chrono.IslamicChronology.LEAP_YEAR_INDIAN` @type ^`org.joda.time.chrono.IslamicChronology$LeapYearPatternType` := v0 @kind object;
  #L3b6dc8.  v0:= new `org.joda.time.chrono.IslamicChronology$LeapYearPatternType`;
  #L3b6dcc.  v1:= 3I;
  #L3b6dce.  v2:= 153692453I;
  #L3b6dd4.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;.<init>:(II)V` @kind direct;
  #L3b6dda.  `@@org.joda.time.chrono.IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB` @type ^`org.joda.time.chrono.IslamicChronology$LeapYearPatternType` := v0 @kind object;
  #L3b6dde.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L3b6de2.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L3b6de8.  `@@org.joda.time.chrono.IslamicChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L3b6dec.  v0:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b6df0.  call temp:= `getInstance`(v0) @signature `Lorg/joda/time/chrono/IslamicChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/IslamicChronology;` @kind static;
  #L3b6df6.  v0:= temp @kind object;
  #L3b6df8.  `@@org.joda.time.chrono.IslamicChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.IslamicChronology` := v0 @kind object;
  #L3b6dfc.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.chrono.IslamicChronology` v1 @kind this, `org.joda.time.Chronology` v2 @kind object, `java.lang.Object` v3 @kind object, `org.joda.time.chrono.IslamicChronology$LeapYearPatternType` v4 @kind object) @signature `Lorg/joda/time/chrono/IslamicChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3b6e10.  v0:= 4I;
  #L3b6e12.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @kind direct;
  #L3b6e18.  v1.`org.joda.time.chrono.IslamicChronology.iLeapYears` @type ^`org.joda.time.chrono.IslamicChronology$LeapYearPatternType` := v4 @kind object;
  #L3b6e1c.  return @kind void;
}
procedure `org.joda.time.chrono.IslamicChronology` `getInstance`() @signature `Lorg/joda/time/chrono/IslamicChronology;.getInstance:()Lorg/joda/time/chrono/IslamicChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3b6c10.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b6c16.  v0:= temp @kind object;
  #L3b6c18.  v1:= `@@org.joda.time.chrono.IslamicChronology.LEAP_YEAR_16_BASED` @type ^`org.joda.time.chrono.IslamicChronology$LeapYearPatternType` @kind object;
  #L3b6c1c.  call temp:= `getInstance`(v0, v1) @signature `Lorg/joda/time/chrono/IslamicChronology;.getInstance:(Lorg/joda/time/DateTimeZone;Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;)Lorg/joda/time/chrono/IslamicChronology;` @kind static;
  #L3b6c22.  v0:= temp @kind object;
  #L3b6c24.  return v0 @kind object;
}
procedure `org.joda.time.chrono.IslamicChronology` `getInstance`(`org.joda.time.DateTimeZone` v1 @kind object) @signature `Lorg/joda/time/chrono/IslamicChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/IslamicChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3b6c38.  v0:= `@@org.joda.time.chrono.IslamicChronology.LEAP_YEAR_16_BASED` @type ^`org.joda.time.chrono.IslamicChronology$LeapYearPatternType` @kind object;
  #L3b6c3c.  call temp:= `getInstance`(v1, v0) @signature `Lorg/joda/time/chrono/IslamicChronology;.getInstance:(Lorg/joda/time/DateTimeZone;Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;)Lorg/joda/time/chrono/IslamicChronology;` @kind static;
  #L3b6c42.  v1:= temp @kind object;
  #L3b6c44.  return v1 @kind object;
}
procedure `org.joda.time.chrono.IslamicChronology` `getInstance`(`org.joda.time.DateTimeZone` v12 @kind object, `org.joda.time.chrono.IslamicChronology$LeapYearPatternType` v13 @kind object) @signature `Lorg/joda/time/chrono/IslamicChronology;.getInstance:(Lorg/joda/time/DateTimeZone;Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;)Lorg/joda/time/chrono/IslamicChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3b6c58.  if v12 != 0 then goto L3b6c64;
  #L3b6c5c.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b6c62.  v12:= temp @kind object;
  #L3b6c64.  v0:= `@@org.joda.time.chrono.IslamicChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3b6c68.  call temp:= `get`(v0, v12) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b6c6e.  v0:= temp @kind object;
  #L3b6c70.  v0:= (`org.joda.time.chrono.IslamicChronology`[]) v0 @kind object;
  #L3b6c74.  if v0 != 0 then goto L3b6c94;
  #L3b6c78.  v0:= 4I;
  #L3b6c7a.  v0:= new `org.joda.time.chrono.IslamicChronology`[v0];
  #L3b6c7e.  v1:= `@@org.joda.time.chrono.IslamicChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3b6c82.  call temp:= `putIfAbsent`(v1, v12, v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b6c88.  v1:= temp @kind object;
  #L3b6c8a.  v1:= (`org.joda.time.chrono.IslamicChronology`[]) v1 @kind object;
  #L3b6c8e.  if v1 == 0 then goto L3b6c94;
  #L3b6c92.  v0:= v1 @kind object;
  #L3b6c94.  v1:= v13.`org.joda.time.chrono.IslamicChronology$LeapYearPatternType.index` @type ^`byte` @kind byte;
  #L3b6c98.  v1:= v0[v1] @kind object;
  #L3b6c9c.  if v1 != 0 then goto L3b6d24;
  #L3b6ca0.  @monitorenter v0
  #L3b6ca2.  v1:= v13.`org.joda.time.chrono.IslamicChronology$LeapYearPatternType.index` @type ^`byte` @kind byte;
  #L3b6ca6.  v1:= v0[v1] @kind object;
  #L3b6caa.  if v1 != 0 then goto L3b6d1a;
  #L3b6cae.  v1:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b6cb2.  v2:= 0I;
  #L3b6cb4.  if v12 != v1 then goto L3b6cf2;
  #L3b6cb8.  v12:= new `org.joda.time.chrono.IslamicChronology`;
  #L3b6cbc.  call `<init>`(v12, v2, v2, v13) @signature `Lorg/joda/time/chrono/IslamicChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;)V` @kind direct;
  #L3b6cc2.  v1:= new `org.joda.time.DateTime`;
  #L3b6cc6.  v4:= 1I;
  #L3b6cc8.  v5:= 1I;
  #L3b6cca.  v6:= 1I;
  #L3b6ccc.  v7:= 0I;
  #L3b6cce.  v8:= 0I;
  #L3b6cd0.  v9:= 0I;
  #L3b6cd2.  v10:= 0I;
  #L3b6cd4.  v3:= v1 @kind object;
  #L3b6cd6.  v11:= v12 @kind object;
  #L3b6cd8.  call `<init>`(v3, v4, v5, v6, v7, v8, v9, v10, v11) @signature `Lorg/joda/time/DateTime;.<init>:(IIIIIIILorg/joda/time/Chronology;)V` @kind direct;
  #L3b6cde.  v3:= new `org.joda.time.chrono.IslamicChronology`;
  #L3b6ce2.  call temp:= `getInstance`(v12, v1, v2) @signature `Lorg/joda/time/chrono/LimitChronology;.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/ReadableDateTime;Lorg/joda/time/ReadableDateTime;)Lorg/joda/time/chrono/LimitChronology;` @kind static;
  #L3b6ce8.  v12:= temp @kind object;
  #L3b6cea.  call `<init>`(v3, v12, v2, v13) @signature `Lorg/joda/time/chrono/IslamicChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;)V` @kind direct;
  #L3b6cf0.  goto L3b6d10;
  #L3b6cf2.  v1:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b6cf6.  call temp:= `getInstance`(v1, v13) @signature `Lorg/joda/time/chrono/IslamicChronology;.getInstance:(Lorg/joda/time/DateTimeZone;Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;)Lorg/joda/time/chrono/IslamicChronology;` @kind static;
  #L3b6cfc.  v1:= temp @kind object;
  #L3b6cfe.  v3:= new `org.joda.time.chrono.IslamicChronology`;
  #L3b6d02.  call temp:= `getInstance`(v1, v12) @signature `Lorg/joda/time/chrono/ZonedChronology;.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;` @kind static;
  #L3b6d08.  v12:= temp @kind object;
  #L3b6d0a.  call `<init>`(v3, v12, v2, v13) @signature `Lorg/joda/time/chrono/IslamicChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;)V` @kind direct;
  #L3b6d10.  v12:= v13.`org.joda.time.chrono.IslamicChronology$LeapYearPatternType.index` @type ^`byte` @kind byte;
  #L3b6d14.  v0[v12]:= v3 @kind object;
  #L3b6d18.  v1:= v3 @kind object;
  #L3b6d1a.  @monitorexit v0
  #L3b6d1c.  goto L3b6d24;
  #L3b6d1e.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3b6d20.  @monitorexit v0
  #L3b6d22.  throw v12;
  #L3b6d24.  return v1 @kind object;
  catch `java.lang.Throwable` @[L3b6ca2..L3b6d22] goto L3b6d1e;
}
procedure `org.joda.time.chrono.IslamicChronology` `getInstanceUTC`() @signature `Lorg/joda/time/chrono/IslamicChronology;.getInstanceUTC:()Lorg/joda/time/chrono/IslamicChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3b6d44.  v0:= `@@org.joda.time.chrono.IslamicChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.IslamicChronology` @kind object;
  #L3b6d48.  return v0 @kind object;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.chrono.IslamicChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/IslamicChronology;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3b693c.  call temp:= `getBase`(v1) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b6942.  v0:= temp @kind object;
  #L3b6944.  if v0 != 0 then goto L3b6952;
  #L3b6948.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/IslamicChronology;.getInstanceUTC:()Lorg/joda/time/chrono/IslamicChronology;` @kind static;
  #L3b694e.  v0:= temp @kind object;
  #L3b6950.  goto L3b6962;
  #L3b6952.  call temp:= `getZone`(v0) @signature `Lorg/joda/time/Chronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b6958.  v0:= temp @kind object;
  #L3b695a.  call temp:= `getInstance`(v0) @signature `Lorg/joda/time/chrono/IslamicChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/IslamicChronology;` @kind static;
  #L3b6960.  v0:= temp @kind object;
  #L3b6962.  return v0 @kind object;
}
procedure `void` `assemble`(`org.joda.time.chrono.IslamicChronology` v2 @kind this, `org.joda.time.chrono.AssembledChronology$Fields` v3 @kind object) @signature `Lorg/joda/time/chrono/IslamicChronology;.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3b6e30.  call temp:= `getBase`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b6e36.  v0:= temp @kind object;
  #L3b6e38.  if v0 != 0 then goto L3b6e68;
  #L3b6e3c.  call `assemble`(v2, v3) @signature `Lorg/joda/time/chrono/BasicChronology;.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V` @kind super;
  #L3b6e42.  v0:= `@@org.joda.time.chrono.IslamicChronology.ERA_FIELD` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b6e46.  v3.`org.joda.time.chrono.AssembledChronology$Fields.era` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b6e4a.  v0:= new `org.joda.time.chrono.BasicMonthOfYearDateTimeField`;
  #L3b6e4e.  v1:= 12I;
  #L3b6e52.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.<init>:(Lorg/joda/time/chrono/BasicChronology;I)V` @kind direct;
  #L3b6e58.  v3.`org.joda.time.chrono.AssembledChronology$Fields.monthOfYear` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b6e5c.  call temp:= `getDurationField`(v0) @signature `Lorg/joda/time/DateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b6e62.  v0:= temp @kind object;
  #L3b6e64.  v3.`org.joda.time.chrono.AssembledChronology$Fields.months` @type ^`org.joda.time.DurationField` := v0 @kind object;
  #L3b6e68.  return @kind void;
}
procedure `long` `calculateFirstDayOfYearMillis`(`org.joda.time.chrono.IslamicChronology` v6 @kind this, `int` v7 ) @signature `Lorg/joda/time/chrono/IslamicChronology;.calculateFirstDayOfYearMillis:(I)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3b6974.  v0:= 292271022I;
  #L3b697a.  if v7 > v0 then goto L3b6a22;
  #L3b697e.  v0:= -292269337I;
  #L3b6984.  if v7 < v0 then goto L3b69e4;
  #L3b6988.  v7:= v7 + -1;
  #L3b698c.  v0:= v7 / 30;
  #L3b6990.  v0:= (`long`) v0 @kind i2l;
  #L3b6992.  v2:= -42521587200000L;
  #L3b699c.  v4:= 918518400000L;
  #L3b69a6.  v0:= v0 * v4 @kind long;
  #L3b69aa.  v0:= v0 + v2 @kind long;
  #L3b69ac.  v7:= v7 %% 30;
  #L3b69b0.  v2:= 1I;
  #L3b69b2.  v7:= v7 + v2 @kind int;
  #L3b69b4.  if v2 >= v7 then goto L3b69e2;
  #L3b69b8.  call temp:= `isLeapYear`(v6, v2) @signature `Lorg/joda/time/chrono/IslamicChronology;.isLeapYear:(I)Z` @kind virtual;
  #L3b69be.  v3:= temp;
  #L3b69c0.  if v3 == 0 then goto L3b69d0;
  #L3b69c4.  v3:= 30672000000L;
  #L3b69ce.  goto L3b69da;
  #L3b69d0.  v3:= 30585600000L;
  #L3b69da.  v0:= v0 + v3 @kind long;
  #L3b69dc.  v2:= v2 + 1;
  #L3b69e0.  goto L3b69b4;
  #L3b69e2.  return v0 @kind wide;
  #L3b69e4.  v1:= new `java.lang.ArithmeticException`;
  #L3b69e8.  v2:= new `java.lang.StringBuilder`;
  #L3b69ec.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b69f2.  v3:= "Year is too small: " @kind object;
  #L3b69f6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b69fc.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6a02.  v7:= " < " @kind object;
  #L3b6a06.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6a0c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6a12.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b6a18.  v7:= temp @kind object;
  #L3b6a1a.  call `<init>`(v1, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b6a20.  throw v1;
  #L3b6a22.  v1:= new `java.lang.ArithmeticException`;
  #L3b6a26.  v2:= new `java.lang.StringBuilder`;
  #L3b6a2a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b6a30.  v3:= "Year is too large: " @kind object;
  #L3b6a34.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6a3a.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6a40.  v7:= " > " @kind object;
  #L3b6a44.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6a4a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6a50.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b6a56.  v7:= temp @kind object;
  #L3b6a58.  call `<init>`(v1, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b6a5e.  throw v1;
}
procedure `boolean` `equals`(`org.joda.time.chrono.IslamicChronology` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/joda/time/chrono/IslamicChronology;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b66a4.  v0:= 1I;
  #L3b66a6.  if v4 != v5 then goto L3b66ac;
  #L3b66aa.  return v0;
  #L3b66ac.  v1:= instanceof @variable v5 @type ^`org.joda.time.chrono.IslamicChronology` @kind boolean;
  #L3b66b0.  v2:= 0I;
  #L3b66b2.  if v1 == 0 then goto L3b66ea;
  #L3b66b6.  v1:= v5 @kind object;
  #L3b66b8.  v1:= (`org.joda.time.chrono.IslamicChronology`) v1 @kind object;
  #L3b66bc.  call temp:= `getLeapYearPatternType`(v4) @signature `Lorg/joda/time/chrono/IslamicChronology;.getLeapYearPatternType:()Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;` @kind virtual;
  #L3b66c2.  v3:= temp @kind object;
  #L3b66c4.  v3:= v3.`org.joda.time.chrono.IslamicChronology$LeapYearPatternType.index` @type ^`byte` @kind byte;
  #L3b66c8.  call temp:= `getLeapYearPatternType`(v1) @signature `Lorg/joda/time/chrono/IslamicChronology;.getLeapYearPatternType:()Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;` @kind virtual;
  #L3b66ce.  v1:= temp @kind object;
  #L3b66d0.  v1:= v1.`org.joda.time.chrono.IslamicChronology$LeapYearPatternType.index` @type ^`byte` @kind byte;
  #L3b66d4.  if v3 != v1 then goto L3b66e6;
  #L3b66d8.  call temp:= `equals`(v4, v5) @signature `Lorg/joda/time/chrono/BasicChronology;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L3b66de.  v5:= temp;
  #L3b66e0.  if v5 == 0 then goto L3b66e6;
  #L3b66e4.  goto L3b66e8;
  #L3b66e6.  v0:= 0I;
  #L3b66e8.  return v0;
  #L3b66ea.  return v2;
}
procedure `long` `getApproxMillisAtEpochDividedByTwo`(`org.joda.time.chrono.IslamicChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/IslamicChronology;.getApproxMillisAtEpochDividedByTwo:()J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b6a70.  v0:= 21260793600000L;
  #L3b6a7a.  return v0 @kind wide;
}
procedure `long` `getAverageMillisPerMonth`(`org.joda.time.chrono.IslamicChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/IslamicChronology;.getAverageMillisPerMonth:()J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b6a8c.  v0:= 2551440384L;
  #L3b6a96.  return v0 @kind wide;
}
procedure `long` `getAverageMillisPerYear`(`org.joda.time.chrono.IslamicChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/IslamicChronology;.getAverageMillisPerYear:()J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b6aa8.  v0:= 30617280288L;
  #L3b6ab2.  return v0 @kind wide;
}
procedure `long` `getAverageMillisPerYearDividedByTwo`(`org.joda.time.chrono.IslamicChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/IslamicChronology;.getAverageMillisPerYearDividedByTwo:()J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b6ac4.  v0:= 15308640144L;
  #L3b6ace.  return v0 @kind wide;
}
procedure `int` `getDayOfMonth`(`org.joda.time.chrono.IslamicChronology` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/IslamicChronology;.getDayOfMonth:(J)I` @AccessFlag  {
    temp;
    v0;

  #L3b671c.  call temp:= `getDayOfYear`(v1, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getDayOfYear:(J)I` @kind virtual;
  #L3b6722.  v2:= temp;
  #L3b6724.  v2:= v2 + -1;
  #L3b6728.  v3:= 30I;
  #L3b672c.  v0:= 354I;
  #L3b6730.  if v2 != v0 then goto L3b6736;
  #L3b6734.  return v3;
  #L3b6736.  v2:= v2 %% 59;
  #L3b673a.  v2:= v2 %% v3 @kind int;
  #L3b673c.  v2:= v2 + 1;
  #L3b6740.  return v2;
}
procedure `int` `getDaysInMonthMax`(`org.joda.time.chrono.IslamicChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/IslamicChronology;.getDaysInMonthMax:()I` @AccessFlag  {
    temp;
    v0;

  #L3b6754.  v0:= 30I;
  #L3b6758.  return v0;
}
procedure `int` `getDaysInMonthMax`(`org.joda.time.chrono.IslamicChronology` v2 @kind this, `int` v3 ) @signature `Lorg/joda/time/chrono/IslamicChronology;.getDaysInMonthMax:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b676c.  v0:= 30I;
  #L3b6770.  v1:= 12I;
  #L3b6774.  if v3 != v1 then goto L3b677a;
  #L3b6778.  return v0;
  #L3b677a.  v3:= v3 + -1;
  #L3b677e.  v3:= v3 %% 2;
  #L3b6782.  if v3 != 0 then goto L3b6788;
  #L3b6786.  goto L3b678c;
  #L3b6788.  v0:= 29I;
  #L3b678c.  return v0;
}
procedure `int` `getDaysInYear`(`org.joda.time.chrono.IslamicChronology` v0 @kind this, `int` v1 ) @signature `Lorg/joda/time/chrono/IslamicChronology;.getDaysInYear:(I)I` @AccessFlag  {
    temp;

  #L3b67a0.  call temp:= `isLeapYear`(v0, v1) @signature `Lorg/joda/time/chrono/IslamicChronology;.isLeapYear:(I)Z` @kind virtual;
  #L3b67a6.  v1:= temp;
  #L3b67a8.  if v1 == 0 then goto L3b67b2;
  #L3b67ac.  v1:= 355I;
  #L3b67b0.  goto L3b67b6;
  #L3b67b2.  v1:= 354I;
  #L3b67b6.  return v1;
}
procedure `int` `getDaysInYearMax`(`org.joda.time.chrono.IslamicChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/IslamicChronology;.getDaysInYearMax:()I` @AccessFlag  {
    temp;
    v0;

  #L3b67c8.  v0:= 355I;
  #L3b67cc.  return v0;
}
procedure `int` `getDaysInYearMonth`(`org.joda.time.chrono.IslamicChronology` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lorg/joda/time/chrono/IslamicChronology;.getDaysInYearMonth:(II)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b67e0.  v0:= 30I;
  #L3b67e4.  v1:= 12I;
  #L3b67e8.  if v4 != v1 then goto L3b67fa;
  #L3b67ec.  call temp:= `isLeapYear`(v2, v3) @signature `Lorg/joda/time/chrono/IslamicChronology;.isLeapYear:(I)Z` @kind virtual;
  #L3b67f2.  v3:= temp;
  #L3b67f4.  if v3 == 0 then goto L3b67fa;
  #L3b67f8.  return v0;
  #L3b67fa.  v4:= v4 + -1;
  #L3b67fe.  v4:= v4 %% 2;
  #L3b6802.  if v4 != 0 then goto L3b6808;
  #L3b6806.  goto L3b680c;
  #L3b6808.  v0:= 29I;
  #L3b680c.  return v0;
}
procedure `org.joda.time.chrono.IslamicChronology$LeapYearPatternType` `getLeapYearPatternType`(`org.joda.time.chrono.IslamicChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/IslamicChronology;.getLeapYearPatternType:()Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b6d5c.  v0:= v1.`org.joda.time.chrono.IslamicChronology.iLeapYears` @type ^`org.joda.time.chrono.IslamicChronology$LeapYearPatternType` @kind object;
  #L3b6d60.  return v0 @kind object;
}
procedure `int` `getMaxYear`(`org.joda.time.chrono.IslamicChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/IslamicChronology;.getMaxYear:()I` @AccessFlag  {
    temp;
    v0;

  #L3b6820.  v0:= 292271022I;
  #L3b6826.  return v0;
}
procedure `int` `getMinYear`(`org.joda.time.chrono.IslamicChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/IslamicChronology;.getMinYear:()I` @AccessFlag  {
    temp;
    v0;

  #L3b6838.  v0:= 1I;
  #L3b683a.  return v0;
}
procedure `int` `getMonthOfYear`(`org.joda.time.chrono.IslamicChronology` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lorg/joda/time/chrono/IslamicChronology;.getMonthOfYear:(JI)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b684c.  call temp:= `getYearMillis`(v2, v5) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMillis:(I)J` @kind virtual;
  #L3b6852.  v0:= temp @kind wide;
  #L3b6854.  v3:= v3 - v0 @kind long;
  #L3b6856.  v0:= 86400000L;
  #L3b685c.  v3:= v3 / v0 @kind long;
  #L3b685e.  v4:= (`int`) v3 @kind l2i;
  #L3b6860.  v3:= 354I;
  #L3b6864.  if v4 != v3 then goto L3b686e;
  #L3b6868.  v3:= 12I;
  #L3b686c.  return v3;
  #L3b686e.  v4:= v4 * 2;
  #L3b6872.  v4:= v4 / 59;
  #L3b6876.  v4:= v4 + 1;
  #L3b687a.  return v4;
}
procedure `long` `getTotalMillisByYearMonth`(`org.joda.time.chrono.IslamicChronology` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lorg/joda/time/chrono/IslamicChronology;.getTotalMillisByYearMonth:(II)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3b6ae0.  v5:= v5 + -1;
  #L3b6ae4.  v4:= v5 %% 2;
  #L3b6ae8.  v0:= 5097600000L;
  #L3b6af2.  v2:= 1I;
  #L3b6af4.  if v4 != v2 then goto L3b6b10;
  #L3b6af8.  v5:= v5 / 2;
  #L3b6afc.  v4:= (`long`) v5 @kind i2l;
  #L3b6afe.  v4:= v4 * v0 @kind long;
  #L3b6b02.  v0:= 2592000000L;
  #L3b6b0c.  v4:= v4 + v0 @kind long;
  #L3b6b0e.  return v4 @kind wide;
  #L3b6b10.  v5:= v5 / 2;
  #L3b6b14.  v4:= (`long`) v5 @kind i2l;
  #L3b6b16.  v4:= v4 * v0 @kind long;
  #L3b6b1a.  return v4 @kind wide;
}
procedure `int` `getYear`(`org.joda.time.chrono.IslamicChronology` v8 @kind this, `long` v9 ) @signature `Lorg/joda/time/chrono/IslamicChronology;.getYear:(J)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3b688c.  v0:= -42521587200000L;
  #L3b6896.  v9:= v9 - v0 @kind long;
  #L3b6898.  v0:= 918518400000L;
  #L3b68a2.  v2:= v9 / v0 @kind long;
  #L3b68a6.  v9:= v9 %% v0 @kind long;
  #L3b68a8.  v0:= 30L;
  #L3b68ac.  v2:= v2 * v0 @kind long;
  #L3b68b0.  v0:= 1L;
  #L3b68b4.  v2:= v2 + v0 @kind long;
  #L3b68b6.  v0:= (`int`) v2 @kind l2i;
  #L3b68b8.  call temp:= `isLeapYear`(v8, v0) @signature `Lorg/joda/time/chrono/IslamicChronology;.isLeapYear:(I)Z` @kind virtual;
  #L3b68be.  v1:= temp;
  #L3b68c0.  v2:= 30672000000L;
  #L3b68ca.  v4:= 30585600000L;
  #L3b68d4.  if v1 == 0 then goto L3b68dc;
  #L3b68d8.  v6:= v2 @kind wide;
  #L3b68da.  goto L3b68de;
  #L3b68dc.  v6:= v4 @kind wide;
  #L3b68de.  v1:= lcmp(v9, v6);
  #L3b68e2.  if v1 < 0 then goto L3b68fa;
  #L3b68e6.  v9:= v9 - v6 @kind long;
  #L3b68e8.  v0:= v0 + 1;
  #L3b68ec.  call temp:= `isLeapYear`(v8, v0) @signature `Lorg/joda/time/chrono/IslamicChronology;.isLeapYear:(I)Z` @kind virtual;
  #L3b68f2.  v1:= temp;
  #L3b68f4.  if v1 == 0 then goto L3b68dc;
  #L3b68f8.  goto L3b68d8;
  #L3b68fa.  return v0;
}
procedure `long` `getYearDifference`(`org.joda.time.chrono.IslamicChronology` v4 @kind this, `long` v5 , `long` v7 ) @signature `Lorg/joda/time/chrono/IslamicChronology;.getYearDifference:(JJ)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b6b2c.  call temp:= `getYear`(v4, v5) @signature `Lorg/joda/time/chrono/IslamicChronology;.getYear:(J)I` @kind virtual;
  #L3b6b32.  v0:= temp;
  #L3b6b34.  call temp:= `getYear`(v4, v7) @signature `Lorg/joda/time/chrono/IslamicChronology;.getYear:(J)I` @kind virtual;
  #L3b6b3a.  v1:= temp;
  #L3b6b3c.  call temp:= `getYearMillis`(v4, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMillis:(I)J` @kind virtual;
  #L3b6b42.  v2:= temp @kind wide;
  #L3b6b44.  v5:= v5 - v2 @kind long;
  #L3b6b46.  call temp:= `getYearMillis`(v4, v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMillis:(I)J` @kind virtual;
  #L3b6b4c.  v2:= temp @kind wide;
  #L3b6b4e.  v7:= v7 - v2 @kind long;
  #L3b6b50.  v0:= v0 - v1 @kind int;
  #L3b6b52.  v1:= lcmp(v5, v7);
  #L3b6b56.  if v1 >= 0 then goto L3b6b5e;
  #L3b6b5a.  v0:= v0 + -1;
  #L3b6b5e.  v5:= (`long`) v0 @kind i2l;
  #L3b6b60.  return v5 @kind wide;
}
procedure `int` `hashCode`(`org.joda.time.chrono.IslamicChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/IslamicChronology;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b690c.  call temp:= `hashCode`(v2) @signature `Lorg/joda/time/chrono/BasicChronology;.hashCode:()I` @kind super;
  #L3b6912.  v0:= temp;
  #L3b6914.  v0:= v0 * 13;
  #L3b6918.  call temp:= `getLeapYearPatternType`(v2) @signature `Lorg/joda/time/chrono/IslamicChronology;.getLeapYearPatternType:()Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;` @kind virtual;
  #L3b691e.  v1:= temp @kind object;
  #L3b6920.  call temp:= `hashCode`(v1) @signature `Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;.hashCode:()I` @kind virtual;
  #L3b6926.  v1:= temp;
  #L3b6928.  v0:= v0 + v1 @kind int;
  #L3b692a.  return v0;
}
procedure `boolean` `isLeapYear`(`org.joda.time.chrono.IslamicChronology` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/chrono/IslamicChronology;.isLeapYear:(I)Z` @AccessFlag  {
    temp;
    v0;

  #L3b66fc.  v0:= v1.`org.joda.time.chrono.IslamicChronology.iLeapYears` @type ^`org.joda.time.chrono.IslamicChronology$LeapYearPatternType` @kind object;
  #L3b6700.  call temp:= `isLeapYear`(v0, v2) @signature `Lorg/joda/time/chrono/IslamicChronology$LeapYearPatternType;.isLeapYear:(I)Z` @kind virtual;
  #L3b6706.  v2:= temp;
  #L3b6708.  return v2;
}
procedure `long` `setYear`(`org.joda.time.chrono.IslamicChronology` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lorg/joda/time/chrono/IslamicChronology;.setYear:(JI)J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b6b74.  call temp:= `getYear`(v2, v3) @signature `Lorg/joda/time/chrono/IslamicChronology;.getYear:(J)I` @kind virtual;
  #L3b6b7a.  v0:= temp;
  #L3b6b7c.  call temp:= `getDayOfYear`(v2, v3, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getDayOfYear:(JI)I` @kind virtual;
  #L3b6b82.  v0:= temp;
  #L3b6b84.  call temp:= `getMillisOfDay`(v2, v3) @signature `Lorg/joda/time/chrono/BasicChronology;.getMillisOfDay:(J)I` @kind virtual;
  #L3b6b8a.  v3:= temp;
  #L3b6b8c.  v4:= 354I;
  #L3b6b90.  if v0 <= v4 then goto L3b6ba4;
  #L3b6b94.  call temp:= `isLeapYear`(v2, v5) @signature `Lorg/joda/time/chrono/IslamicChronology;.isLeapYear:(I)Z` @kind virtual;
  #L3b6b9a.  v4:= temp;
  #L3b6b9c.  if v4 != 0 then goto L3b6ba4;
  #L3b6ba0.  v0:= v0 + -1;
  #L3b6ba4.  v4:= 1I;
  #L3b6ba6.  call temp:= `getYearMonthDayMillis`(v2, v5, v4, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMonthDayMillis:(III)J` @kind virtual;
  #L3b6bac.  v4:= temp @kind wide;
  #L3b6bae.  v0:= (`long`) v3 @kind i2l;
  #L3b6bb0.  v4:= v4 + v0 @kind long;
  #L3b6bb2.  return v4 @kind wide;
}
procedure `org.joda.time.Chronology` `withUTC`(`org.joda.time.chrono.IslamicChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/IslamicChronology;.withUTC:()Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b6bc4.  v0:= `@@org.joda.time.chrono.IslamicChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.IslamicChronology` @kind object;
  #L3b6bc8.  return v0 @kind object;
}
procedure `org.joda.time.Chronology` `withZone`(`org.joda.time.chrono.IslamicChronology` v1 @kind this, `org.joda.time.DateTimeZone` v2 @kind object) @signature `Lorg/joda/time/chrono/IslamicChronology;.withZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b6bdc.  if v2 != 0 then goto L3b6be8;
  #L3b6be0.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b6be6.  v2:= temp @kind object;
  #L3b6be8.  call temp:= `getZone`(v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b6bee.  v0:= temp @kind object;
  #L3b6bf0.  if v2 != v0 then goto L3b6bf6;
  #L3b6bf4.  return v1 @kind object;
  #L3b6bf6.  call temp:= `getInstance`(v2) @signature `Lorg/joda/time/chrono/IslamicChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/IslamicChronology;` @kind static;
  #L3b6bfc.  v2:= temp @kind object;
  #L3b6bfe.  return v2 @kind object;
}
