record `org.joda.time.chrono.BasicMonthOfYearDateTimeField` @kind class @AccessFlag  extends `org.joda.time.field.ImpreciseDateTimeField` @kind class {
  `org.joda.time.chrono.BasicChronology` `org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @AccessFlag PRIVATE_FINAL;
  `int` `org.joda.time.chrono.BasicMonthOfYearDateTimeField.iLeapMonth` @AccessFlag PRIVATE_FINAL;
  `int` `org.joda.time.chrono.BasicMonthOfYearDateTimeField.iMax` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@org.joda.time.chrono.BasicMonthOfYearDateTimeField.MIN` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.BasicMonthOfYearDateTimeField.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v3 @kind this, `org.joda.time.chrono.BasicChronology` v4 @kind object, `int` v5 ) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.<init>:(Lorg/joda/time/chrono/BasicChronology;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3b1fc8.  call temp:= `monthOfYear`() @signature `Lorg/joda/time/DateTimeFieldType;.monthOfYear:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b1fce.  v0:= temp @kind object;
  #L3b1fd0.  call temp:= `getAverageMillisPerMonth`(v4) @signature `Lorg/joda/time/chrono/BasicChronology;.getAverageMillisPerMonth:()J` @kind virtual;
  #L3b1fd6.  v1:= temp @kind wide;
  #L3b1fd8.  call `<init>`(v3, v0, v1) @signature `Lorg/joda/time/field/ImpreciseDateTimeField;.<init>:(Lorg/joda/time/DateTimeFieldType;J)V` @kind direct;
  #L3b1fde.  v3.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` := v4 @kind object;
  #L3b1fe2.  call temp:= `getMaxMonth`(v4) @signature `Lorg/joda/time/chrono/BasicChronology;.getMaxMonth:()I` @kind virtual;
  #L3b1fe8.  v4:= temp;
  #L3b1fea.  v3.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iMax` @type ^`int` := v4;
  #L3b1fee.  v3.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iLeapMonth` @type ^`int` := v5;
  #L3b1ff2.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3b1b6c.  v0:= v1.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1b70.  call temp:= `monthOfYear`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.monthOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b1b76.  v0:= temp @kind object;
  #L3b1b78.  return v0 @kind object;
}
procedure `long` `add`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v9 @kind this, `long` v10 , `int` v12 ) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.add:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3b1b8c.  if v12 != 0 then goto L3b1b92;
  #L3b1b90.  return v10 @kind wide;
  #L3b1b92.  v0:= v9.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1b96.  call temp:= `getMillisOfDay`(v0, v10) @signature `Lorg/joda/time/chrono/BasicChronology;.getMillisOfDay:(J)I` @kind virtual;
  #L3b1b9c.  v0:= temp;
  #L3b1b9e.  v0:= (`long`) v0 @kind i2l;
  #L3b1ba0.  v2:= v9.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1ba4.  call temp:= `getYear`(v2, v10) @signature `Lorg/joda/time/chrono/BasicChronology;.getYear:(J)I` @kind virtual;
  #L3b1baa.  v2:= temp;
  #L3b1bac.  v3:= v9.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1bb0.  call temp:= `getMonthOfYear`(v3, v10, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getMonthOfYear:(JI)I` @kind virtual;
  #L3b1bb6.  v3:= temp;
  #L3b1bb8.  v4:= v3 + -1;
  #L3b1bbc.  v5:= v4 + v12 @kind int;
  #L3b1bc0.  if v3 <= 0 then goto L3b1bdc;
  #L3b1bc4.  if v5 >= 0 then goto L3b1bdc;
  #L3b1bc8.  v5:= v2 + 1;
  #L3b1bcc.  v6:= v9.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iMax` @type ^`int`;
  #L3b1bd0.  v12:= v12 - v6 @kind int;
  #L3b1bd2.  v12:= v12 + v4 @kind int;
  #L3b1bd4.  v8:= v5;
  #L3b1bd6.  v5:= v12;
  #L3b1bd8.  v12:= v8;
  #L3b1bda.  goto L3b1bde;
  #L3b1bdc.  v12:= v2;
  #L3b1bde.  v4:= 1I;
  #L3b1be0.  if v5 < 0 then goto L3b1bf4;
  #L3b1be4.  v6:= v9.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iMax` @type ^`int`;
  #L3b1be8.  v7:= v5 / v6 @kind int;
  #L3b1bec.  v12:= v12 + v7 @kind int;
  #L3b1bee.  v5:= v5 %% v6 @kind int;
  #L3b1bf0.  v5:= v5 + v4 @kind int;
  #L3b1bf2.  goto L3b1c26;
  #L3b1bf4.  v6:= v9.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iMax` @type ^`int`;
  #L3b1bf8.  v6:= v5 / v6 @kind int;
  #L3b1bfc.  v12:= v12 + v6 @kind int;
  #L3b1bfe.  v12:= v12 - v4 @kind int;
  #L3b1c00.  call temp:= `abs`(v5) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L3b1c06.  v5:= temp;
  #L3b1c08.  v6:= v9.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iMax` @type ^`int`;
  #L3b1c0c.  v5:= v5 %% v6 @kind int;
  #L3b1c0e.  if v5 != 0 then goto L3b1c14;
  #L3b1c12.  goto L3b1c16;
  #L3b1c14.  v6:= v5;
  #L3b1c16.  v5:= v9.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iMax` @type ^`int`;
  #L3b1c1a.  v5:= v5 - v6 @kind int;
  #L3b1c1c.  v5:= v5 + v4 @kind int;
  #L3b1c1e.  if v5 != v4 then goto L3b1c26;
  #L3b1c22.  v12:= v12 + 1;
  #L3b1c26.  v4:= v9.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1c2a.  call temp:= `getDayOfMonth`(v4, v10, v2, v3) @signature `Lorg/joda/time/chrono/BasicChronology;.getDayOfMonth:(JII)I` @kind virtual;
  #L3b1c30.  v10:= temp;
  #L3b1c32.  v11:= v9.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1c36.  call temp:= `getDaysInYearMonth`(v11, v12, v5) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInYearMonth:(II)I` @kind virtual;
  #L3b1c3c.  v11:= temp;
  #L3b1c3e.  if v10 <= v11 then goto L3b1c44;
  #L3b1c42.  v10:= v11;
  #L3b1c44.  v11:= v9.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1c48.  call temp:= `getYearMonthDayMillis`(v11, v12, v5, v10) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMonthDayMillis:(III)J` @kind virtual;
  #L3b1c4e.  v10:= temp @kind wide;
  #L3b1c50.  v10:= v10 + v0 @kind long;
  #L3b1c52.  return v10 @kind wide;
}
procedure `long` `add`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v16 @kind this, `long` v17 , `long` v19 ) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.add:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L3b1c64.  v0:= v16 @kind object;
  #L3b1c68.  v1:= v17 @kind wide;
  #L3b1c6c.  v3:= v19 @kind wide;
  #L3b1c70.  v5:= (`int`) v3 @kind l2i;
  #L3b1c72.  v6:= (`long`) v5 @kind i2l;
  #L3b1c74.  v8:= lcmp(v6, v3);
  #L3b1c78.  if v8 != 0 then goto L3b1c86;
  #L3b1c7c.  call temp:= `add`(v0, v1, v5) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.add:(JI)J` @kind virtual;
  #L3b1c82.  v1:= temp @kind wide;
  #L3b1c84.  return v1 @kind wide;
  #L3b1c86.  v5:= v0.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1c8a.  call temp:= `getMillisOfDay`(v5, v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getMillisOfDay:(J)I` @kind virtual;
  #L3b1c90.  v5:= temp;
  #L3b1c92.  v5:= (`long`) v5 @kind i2l;
  #L3b1c94.  v7:= v0.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1c98.  call temp:= `getYear`(v7, v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getYear:(J)I` @kind virtual;
  #L3b1c9e.  v7:= temp;
  #L3b1ca0.  v8:= v0.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1ca4.  call temp:= `getMonthOfYear`(v8, v1, v7) @signature `Lorg/joda/time/chrono/BasicChronology;.getMonthOfYear:(JI)I` @kind virtual;
  #L3b1caa.  v8:= temp;
  #L3b1cac.  v9:= v8 + -1;
  #L3b1cb0.  v9:= (`long`) v9 @kind i2l;
  #L3b1cb2.  v9:= v9 + v3 @kind long;
  #L3b1cb4.  v11:= 0L;
  #L3b1cb8.  v15:= lcmp(v9, v11);
  #L3b1cbc.  if v15 < 0 then goto L3b1cda;
  #L3b1cc0.  v11:= (`long`) v7 @kind i2l;
  #L3b1cc2.  v15:= v0.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iMax` @type ^`int`;
  #L3b1cc6.  v13:= (`long`) v15 @kind i2l;
  #L3b1cc8.  v13:= v9 / v13 @kind long;
  #L3b1ccc.  v11:= v11 + v13 @kind long;
  #L3b1cce.  v13:= (`long`) v15 @kind i2l;
  #L3b1cd0.  v9:= v9 %% v13 @kind long;
  #L3b1cd2.  v13:= 1L;
  #L3b1cd6.  v9:= v9 + v13 @kind long;
  #L3b1cd8.  goto L3b1d26;
  #L3b1cda.  v13:= 1L;
  #L3b1cde.  v11:= (`long`) v7 @kind i2l;
  #L3b1ce0.  v15:= v0.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iMax` @type ^`int`;
  #L3b1ce4.  v13:= (`long`) v15 @kind i2l;
  #L3b1ce6.  v13:= v9 / v13 @kind long;
  #L3b1cea.  v11:= v11 + v13 @kind long;
  #L3b1cec.  v13:= 1L;
  #L3b1cf0.  v11:= v11 - v13 @kind long;
  #L3b1cf2.  call temp:= `abs`(v9) @signature `Ljava/lang/Math;.abs:(J)J` @kind static;
  #L3b1cf8.  v9:= temp @kind wide;
  #L3b1cfa.  v13:= v0.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iMax` @type ^`int`;
  #L3b1cfe.  v14:= (`long`) v13 @kind i2l;
  #L3b1d00.  v9:= v9 %% v14 @kind long;
  #L3b1d02.  v10:= (`int`) v9 @kind l2i;
  #L3b1d04.  if v10 != 0 then goto L3b1d0a;
  #L3b1d08.  goto L3b1d0c;
  #L3b1d0a.  v13:= v10;
  #L3b1d0c.  v9:= v0.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iMax` @type ^`int`;
  #L3b1d10.  v9:= v9 - v13 @kind int;
  #L3b1d12.  v9:= v9 + 1;
  #L3b1d16.  v9:= (`long`) v9 @kind i2l;
  #L3b1d18.  v13:= 1L;
  #L3b1d1c.  v15:= lcmp(v9, v13);
  #L3b1d20.  if v15 != 0 then goto L3b1d26;
  #L3b1d24.  v11:= v11 + v13 @kind long;
  #L3b1d26.  v13:= v0.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1d2a.  call temp:= `getMinYear`(v13) @signature `Lorg/joda/time/chrono/BasicChronology;.getMinYear:()I` @kind virtual;
  #L3b1d30.  v13:= temp;
  #L3b1d32.  v13:= (`long`) v13 @kind i2l;
  #L3b1d34.  v15:= lcmp(v11, v13);
  #L3b1d38.  if v15 < 0 then goto L3b1d84;
  #L3b1d3c.  v13:= v0.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1d40.  call temp:= `getMaxYear`(v13) @signature `Lorg/joda/time/chrono/BasicChronology;.getMaxYear:()I` @kind virtual;
  #L3b1d46.  v13:= temp;
  #L3b1d48.  v13:= (`long`) v13 @kind i2l;
  #L3b1d4a.  v15:= lcmp(v11, v13);
  #L3b1d4e.  if v15 > 0 then goto L3b1d84;
  #L3b1d52.  v3:= (`int`) v11 @kind l2i;
  #L3b1d54.  v4:= (`int`) v9 @kind l2i;
  #L3b1d56.  v9:= v0.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1d5a.  call temp:= `getDayOfMonth`(v9, v1, v7, v8) @signature `Lorg/joda/time/chrono/BasicChronology;.getDayOfMonth:(JII)I` @kind virtual;
  #L3b1d60.  v1:= temp;
  #L3b1d62.  v2:= v0.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1d66.  call temp:= `getDaysInYearMonth`(v2, v3, v4) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInYearMonth:(II)I` @kind virtual;
  #L3b1d6c.  v2:= temp;
  #L3b1d6e.  if v1 <= v2 then goto L3b1d74;
  #L3b1d72.  v1:= v2;
  #L3b1d74.  v2:= v0.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1d78.  call temp:= `getYearMonthDayMillis`(v2, v3, v4, v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMonthDayMillis:(III)J` @kind virtual;
  #L3b1d7e.  v1:= temp @kind wide;
  #L3b1d80.  v1:= v1 + v5 @kind long;
  #L3b1d82.  return v1 @kind wide;
  #L3b1d84.  v1:= new `java.lang.IllegalArgumentException`;
  #L3b1d88.  v2:= new `java.lang.StringBuilder`;
  #L3b1d8c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b1d92.  v5:= "Magnitude of add amount is too large: " @kind object;
  #L3b1d96.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b1d9c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b1da2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b1da8.  v2:= temp @kind object;
  #L3b1daa.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b1db0.  throw v1;
}
procedure `int`[] `add`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v5 @kind this, `org.joda.time.ReadablePartial` v6 @kind object, `int` v7 , `int`[] v8 @kind object, `int` v9 ) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.add:(Lorg/joda/time/ReadablePartial;I[II)[I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b1aa0.  if v9 != 0 then goto L3b1aa6;
  #L3b1aa4.  return v8 @kind object;
  #L3b1aa6.  call temp:= `size`(v6) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3b1aac.  v0:= temp;
  #L3b1aae.  v1:= 0I;
  #L3b1ab0.  if v0 <= 0 then goto L3b1af8;
  #L3b1ab4.  call temp:= `getFieldType`(v6, v1) @signature `Lorg/joda/time/ReadablePartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind interface;
  #L3b1aba.  v0:= temp @kind object;
  #L3b1abc.  call temp:= `monthOfYear`() @signature `Lorg/joda/time/DateTimeFieldType;.monthOfYear:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b1ac2.  v2:= temp @kind object;
  #L3b1ac4.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3b1aca.  v0:= temp;
  #L3b1acc.  if v0 == 0 then goto L3b1af8;
  #L3b1ad0.  if v7 != 0 then goto L3b1af8;
  #L3b1ad4.  v7:= v8[v1];
  #L3b1ad8.  v7:= v7 + -1;
  #L3b1adc.  v9:= v9 %% 12;
  #L3b1ae0.  v7:= v7 + v9 @kind int;
  #L3b1ae2.  v7:= v7 + 12;
  #L3b1ae6.  v7:= v7 %% 12;
  #L3b1aea.  v7:= v7 + 1;
  #L3b1aee.  call temp:= `set`(v5, v6, v1, v8, v7) @signature `Lorg/joda/time/field/BaseDateTimeField;.set:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3b1af4.  v6:= temp @kind object;
  #L3b1af6.  return v6 @kind object;
  #L3b1af8.  call temp:= `isContiguous`(v6) @signature `Lorg/joda/time/DateTimeUtils;.isContiguous:(Lorg/joda/time/ReadablePartial;)Z` @kind static;
  #L3b1afe.  v0:= temp;
  #L3b1b00.  if v0 == 0 then goto L3b1b50;
  #L3b1b04.  v2:= 0L;
  #L3b1b08.  call temp:= `size`(v6) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3b1b0e.  v7:= temp;
  #L3b1b10.  if v1 >= v7 then goto L3b1b3a;
  #L3b1b14.  call temp:= `getFieldType`(v6, v1) @signature `Lorg/joda/time/ReadablePartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind interface;
  #L3b1b1a.  v0:= temp @kind object;
  #L3b1b1c.  v4:= v5.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1b20.  call temp:= `getField`(v0, v4) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b1b26.  v0:= temp @kind object;
  #L3b1b28.  v4:= v8[v1];
  #L3b1b2c.  call temp:= `set`(v0, v2, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3b1b32.  v2:= temp @kind wide;
  #L3b1b34.  v1:= v1 + 1;
  #L3b1b38.  goto L3b1b10;
  #L3b1b3a.  call temp:= `add`(v5, v2, v9) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.add:(JI)J` @kind virtual;
  #L3b1b40.  v7:= temp @kind wide;
  #L3b1b42.  v9:= v5.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1b46.  call temp:= `get`(v9, v6, v7) @signature `Lorg/joda/time/chrono/BaseChronology;.get:(Lorg/joda/time/ReadablePartial;J)[I` @kind virtual;
  #L3b1b4c.  v6:= temp @kind object;
  #L3b1b4e.  return v6 @kind object;
  #L3b1b50.  call temp:= `add`(v5, v6, v7, v8, v9) @signature `Lorg/joda/time/field/BaseDateTimeField;.add:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind super;
  #L3b1b56.  v6:= temp @kind object;
  #L3b1b58.  return v6 @kind object;
}
procedure `long` `addWrapField`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v3 @kind this, `long` v4 , `int` v6 ) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.addWrapField:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b1dc4.  call temp:= `get`(v3, v4) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.get:(J)I` @kind virtual;
  #L3b1dca.  v0:= temp;
  #L3b1dcc.  v1:= v3.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iMax` @type ^`int`;
  #L3b1dd0.  v2:= 1I;
  #L3b1dd2.  call temp:= `getWrappedValue`(v0, v6, v2, v1) @signature `Lorg/joda/time/field/FieldUtils;.getWrappedValue:(IIII)I` @kind static;
  #L3b1dd8.  v6:= temp;
  #L3b1dda.  call temp:= `set`(v3, v4, v6) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.set:(JI)J` @kind virtual;
  #L3b1de0.  v4:= temp @kind wide;
  #L3b1de2.  return v4 @kind wide;
}
procedure `int` `get`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.get:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1a38.  v0:= v1.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1a3c.  call temp:= `getMonthOfYear`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getMonthOfYear:(J)I` @kind virtual;
  #L3b1a42.  v2:= temp;
  #L3b1a44.  return v2;
}
procedure `long` `getDifferenceAsLong`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v8 @kind this, `long` v9 , `long` v11 ) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.getDifferenceAsLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3b1df4.  v0:= lcmp(v9, v11);
  #L3b1df8.  if v0 >= 0 then goto L3b1e0a;
  #L3b1dfc.  call temp:= `getDifference`(v8, v11, v9) @signature `Lorg/joda/time/field/ImpreciseDateTimeField;.getDifference:(JJ)I` @kind virtual;
  #L3b1e02.  v9:= temp;
  #L3b1e04.  v9:= -v9 @kind int;
  #L3b1e06.  v9:= (`long`) v9 @kind i2l;
  #L3b1e08.  return v9 @kind wide;
  #L3b1e0a.  v0:= v8.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1e0e.  call temp:= `getYear`(v0, v9) @signature `Lorg/joda/time/chrono/BasicChronology;.getYear:(J)I` @kind virtual;
  #L3b1e14.  v0:= temp;
  #L3b1e16.  v1:= v8.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1e1a.  call temp:= `getMonthOfYear`(v1, v9, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getMonthOfYear:(JI)I` @kind virtual;
  #L3b1e20.  v1:= temp;
  #L3b1e22.  v2:= v8.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1e26.  call temp:= `getYear`(v2, v11) @signature `Lorg/joda/time/chrono/BasicChronology;.getYear:(J)I` @kind virtual;
  #L3b1e2c.  v2:= temp;
  #L3b1e2e.  v3:= v8.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1e32.  call temp:= `getMonthOfYear`(v3, v11, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getMonthOfYear:(JI)I` @kind virtual;
  #L3b1e38.  v3:= temp;
  #L3b1e3a.  v4:= v0 - v2 @kind int;
  #L3b1e3e.  v4:= (`long`) v4 @kind i2l;
  #L3b1e40.  v6:= v8.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iMax` @type ^`int`;
  #L3b1e44.  v6:= (`long`) v6 @kind i2l;
  #L3b1e46.  v4:= v4 * v6 @kind long;
  #L3b1e4a.  v6:= (`long`) v1 @kind i2l;
  #L3b1e4c.  v4:= v4 + v6 @kind long;
  #L3b1e4e.  v6:= (`long`) v3 @kind i2l;
  #L3b1e50.  v4:= v4 - v6 @kind long;
  #L3b1e52.  v6:= v8.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1e56.  call temp:= `getDayOfMonth`(v6, v9, v0, v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getDayOfMonth:(JII)I` @kind virtual;
  #L3b1e5c.  v6:= temp;
  #L3b1e5e.  v7:= v8.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1e62.  call temp:= `getDaysInYearMonth`(v7, v0, v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInYearMonth:(II)I` @kind virtual;
  #L3b1e68.  v7:= temp;
  #L3b1e6a.  if v6 != v7 then goto L3b1e92;
  #L3b1e6e.  v7:= v8.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1e72.  call temp:= `getDayOfMonth`(v7, v11, v2, v3) @signature `Lorg/joda/time/chrono/BasicChronology;.getDayOfMonth:(JII)I` @kind virtual;
  #L3b1e78.  v7:= temp;
  #L3b1e7a.  if v7 <= v6 then goto L3b1e92;
  #L3b1e7e.  v7:= v8.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1e82.  call temp:= `dayOfMonth`(v7) @signature `Lorg/joda/time/chrono/AssembledChronology;.dayOfMonth:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b1e88.  v7:= temp @kind object;
  #L3b1e8a.  call temp:= `set`(v7, v11, v6) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3b1e90.  v11:= temp @kind wide;
  #L3b1e92.  v6:= v8.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1e96.  call temp:= `getYearMonthMillis`(v6, v0, v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMonthMillis:(II)J` @kind virtual;
  #L3b1e9c.  v0:= temp @kind wide;
  #L3b1e9e.  v9:= v9 - v0 @kind long;
  #L3b1ea0.  v0:= v8.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1ea4.  call temp:= `getYearMonthMillis`(v0, v2, v3) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMonthMillis:(II)J` @kind virtual;
  #L3b1eaa.  v0:= temp @kind wide;
  #L3b1eac.  v11:= v11 - v0 @kind long;
  #L3b1eae.  v0:= lcmp(v9, v11);
  #L3b1eb2.  if v0 >= 0 then goto L3b1ebc;
  #L3b1eb6.  v9:= 1L;
  #L3b1eba.  v4:= v4 - v9 @kind long;
  #L3b1ebc.  return v4 @kind wide;
}
procedure `int` `getLeapAmount`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.getLeapAmount:(J)I` @AccessFlag PUBLIC {
    temp;

  #L3b1a58.  call temp:= `isLeap`(v0, v1) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.isLeap:(J)Z` @kind virtual;
  #L3b1a5e.  v1:= temp;
  #L3b1a60.  return v1;
}
procedure `org.joda.time.DurationField` `getLeapDurationField`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.getLeapDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1f88.  v0:= v1.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1f8c.  call temp:= `days`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.days:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b1f92.  v0:= temp @kind object;
  #L3b1f94.  return v0 @kind object;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.getMaximumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1a74.  v0:= v1.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iMax` @type ^`int`;
  #L3b1a78.  return v0;
}
procedure `int` `getMinimumValue`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.getMinimumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1a8c.  v0:= 1I;
  #L3b1a8e.  return v0;
}
procedure `org.joda.time.DurationField` `getRangeDurationField`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1fa8.  v0:= v1.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1fac.  call temp:= `years`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.years:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b1fb2.  v0:= temp @kind object;
  #L3b1fb4.  return v0 @kind object;
}
procedure `boolean` `isLeap`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v3 @kind this, `long` v4 ) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.isLeap:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b19dc.  v0:= v3.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b19e0.  call temp:= `getYear`(v0, v4) @signature `Lorg/joda/time/chrono/BasicChronology;.getYear:(J)I` @kind virtual;
  #L3b19e6.  v0:= temp;
  #L3b19e8.  v1:= v3.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b19ec.  call temp:= `isLeapYear`(v1, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.isLeapYear:(I)Z` @kind virtual;
  #L3b19f2.  v1:= temp;
  #L3b19f4.  v2:= 0I;
  #L3b19f6.  if v1 == 0 then goto L3b1a10;
  #L3b19fa.  v1:= v3.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b19fe.  call temp:= `getMonthOfYear`(v1, v4, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getMonthOfYear:(JI)I` @kind virtual;
  #L3b1a04.  v4:= temp;
  #L3b1a06.  v5:= v3.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iLeapMonth` @type ^`int`;
  #L3b1a0a.  if v4 != v5 then goto L3b1a10;
  #L3b1a0e.  v2:= 1I;
  #L3b1a10.  return v2;
}
procedure `boolean` `isLenient`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.isLenient:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1a24.  v0:= 0I;
  #L3b1a26.  return v0;
}
procedure `long` `remainder`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.remainder:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b1ed0.  call temp:= `roundFloor`(v2, v3) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3b1ed6.  v0:= temp @kind wide;
  #L3b1ed8.  v3:= v3 - v0 @kind long;
  #L3b1eda.  return v3 @kind wide;
}
procedure `long` `roundFloor`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.roundFloor:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b1eec.  v0:= v2.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1ef0.  call temp:= `getYear`(v0, v3) @signature `Lorg/joda/time/chrono/BasicChronology;.getYear:(J)I` @kind virtual;
  #L3b1ef6.  v0:= temp;
  #L3b1ef8.  v1:= v2.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1efc.  call temp:= `getMonthOfYear`(v1, v3, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getMonthOfYear:(JI)I` @kind virtual;
  #L3b1f02.  v3:= temp;
  #L3b1f04.  v4:= v2.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1f08.  call temp:= `getYearMonthMillis`(v4, v0, v3) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMonthMillis:(II)J` @kind virtual;
  #L3b1f0e.  v3:= temp @kind wide;
  #L3b1f10.  return v3 @kind wide;
}
procedure `long` `set`(`org.joda.time.chrono.BasicMonthOfYearDateTimeField` v3 @kind this, `long` v4 , `int` v6 ) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.set:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b1f24.  v0:= v3.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iMax` @type ^`int`;
  #L3b1f28.  v1:= 1I;
  #L3b1f2a.  call `verifyValueBounds`(v3, v6, v1, v0) @signature `Lorg/joda/time/field/FieldUtils;.verifyValueBounds:(Lorg/joda/time/DateTimeField;III)V` @kind static;
  #L3b1f30.  v0:= v3.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1f34.  call temp:= `getYear`(v0, v4) @signature `Lorg/joda/time/chrono/BasicChronology;.getYear:(J)I` @kind virtual;
  #L3b1f3a.  v0:= temp;
  #L3b1f3c.  v1:= v3.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1f40.  call temp:= `getDayOfMonth`(v1, v4, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getDayOfMonth:(JI)I` @kind virtual;
  #L3b1f46.  v1:= temp;
  #L3b1f48.  v2:= v3.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1f4c.  call temp:= `getDaysInYearMonth`(v2, v0, v6) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInYearMonth:(II)I` @kind virtual;
  #L3b1f52.  v2:= temp;
  #L3b1f54.  if v1 <= v2 then goto L3b1f5a;
  #L3b1f58.  v1:= v2;
  #L3b1f5a.  v2:= v3.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1f5e.  call temp:= `getYearMonthDayMillis`(v2, v0, v6, v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMonthDayMillis:(III)J` @kind virtual;
  #L3b1f64.  v0:= temp @kind wide;
  #L3b1f66.  v6:= v3.`org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1f6a.  call temp:= `getMillisOfDay`(v6, v4) @signature `Lorg/joda/time/chrono/BasicChronology;.getMillisOfDay:(J)I` @kind virtual;
  #L3b1f70.  v4:= temp;
  #L3b1f72.  v4:= (`long`) v4 @kind i2l;
  #L3b1f74.  v0:= v0 + v4 @kind long;
  #L3b1f76.  return v0 @kind wide;
}
