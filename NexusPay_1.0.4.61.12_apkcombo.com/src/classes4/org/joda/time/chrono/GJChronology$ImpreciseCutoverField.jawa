record `org.joda.time.chrono.GJChronology$ImpreciseCutoverField` @kind class @AccessFlag FINAL extends `org.joda.time.chrono.GJChronology$CutoverField` @kind class {
  `org.joda.time.chrono.GJChronology` `org.joda.time.chrono.GJChronology$ImpreciseCutoverField.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@org.joda.time.chrono.GJChronology$ImpreciseCutoverField.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.chrono.GJChronology$ImpreciseCutoverField` v8 @kind this, `org.joda.time.chrono.GJChronology` v9 @kind object, `org.joda.time.DateTimeField` v10 @kind object, `org.joda.time.DateTimeField` v11 @kind object, `long` v12 ) @signature `Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;.<init>:(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3b428c.  v4:= 0I;
  #L3b428e.  v7:= 0I;
  #L3b4290.  v0:= v8 @kind object;
  #L3b4292.  v1:= v9 @kind object;
  #L3b4294.  v2:= v10 @kind object;
  #L3b4296.  v3:= v11 @kind object;
  #L3b4298.  v5:= v12 @kind wide;
  #L3b429a.  call `<init>`(v0, v1, v2, v3, v4, v5, v7) @signature `Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;.<init>:(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;JZ)V` @kind direct;
  #L3b42a0.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.chrono.GJChronology$ImpreciseCutoverField` v8 @kind this, `org.joda.time.chrono.GJChronology` v9 @kind object, `org.joda.time.DateTimeField` v10 @kind object, `org.joda.time.DateTimeField` v11 @kind object, `org.joda.time.DurationField` v12 @kind object, `long` v13 ) @signature `Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;.<init>:(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3b42b4.  v7:= 0I;
  #L3b42b6.  v0:= v8 @kind object;
  #L3b42b8.  v1:= v9 @kind object;
  #L3b42ba.  v2:= v10 @kind object;
  #L3b42bc.  v3:= v11 @kind object;
  #L3b42be.  v4:= v12 @kind object;
  #L3b42c0.  v5:= v13 @kind wide;
  #L3b42c2.  call `<init>`(v0, v1, v2, v3, v4, v5, v7) @signature `Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;.<init>:(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;JZ)V` @kind direct;
  #L3b42c8.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.chrono.GJChronology$ImpreciseCutoverField` v7 @kind this, `org.joda.time.chrono.GJChronology` v8 @kind object, `org.joda.time.DateTimeField` v9 @kind object, `org.joda.time.DateTimeField` v10 @kind object, `org.joda.time.DurationField` v11 @kind object, `long` v12 , `boolean` v14 ) @signature `Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;.<init>:(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;JZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3b42dc.  v7.`org.joda.time.chrono.GJChronology$ImpreciseCutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` := v8 @kind object;
  #L3b42e0.  v0:= v7 @kind object;
  #L3b42e2.  v1:= v8 @kind object;
  #L3b42e4.  v2:= v9 @kind object;
  #L3b42e6.  v3:= v10 @kind object;
  #L3b42e8.  v4:= v12 @kind wide;
  #L3b42ea.  v6:= v14;
  #L3b42ec.  call `<init>`(v0, v1, v2, v3, v4, v6) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.<init>:(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;JZ)V` @kind direct;
  #L3b42f2.  if v11 != 0 then goto L3b4304;
  #L3b42f6.  v11:= new `org.joda.time.chrono.GJChronology$LinkedDurationField`;
  #L3b42fa.  v8:= v7.`org.joda.time.chrono.GJChronology$CutoverField.iDurationField` @type ^`org.joda.time.DurationField` @kind object;
  #L3b42fe.  call `<init>`(v11, v8, v7) @signature `Lorg/joda/time/chrono/GJChronology$LinkedDurationField;.<init>:(Lorg/joda/time/DurationField;Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;)V` @kind direct;
  #L3b4304.  v7.`org.joda.time.chrono.GJChronology$CutoverField.iDurationField` @type ^`org.joda.time.DurationField` := v11 @kind object;
  #L3b4308.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.chrono.GJChronology$ImpreciseCutoverField` v8 @kind this, `org.joda.time.chrono.GJChronology` v9 @kind object, `org.joda.time.DateTimeField` v10 @kind object, `org.joda.time.DateTimeField` v11 @kind object, `org.joda.time.DurationField` v12 @kind object, `org.joda.time.DurationField` v13 @kind object, `long` v14 ) @signature `Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;.<init>:(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3b431c.  v7:= 0I;
  #L3b431e.  v0:= v8 @kind object;
  #L3b4320.  v1:= v9 @kind object;
  #L3b4322.  v2:= v10 @kind object;
  #L3b4324.  v3:= v11 @kind object;
  #L3b4326.  v4:= v12 @kind object;
  #L3b4328.  v5:= v14 @kind wide;
  #L3b432a.  call `<init>`(v0, v1, v2, v3, v4, v5, v7) @signature `Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;.<init>:(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;JZ)V` @kind direct;
  #L3b4330.  v8.`org.joda.time.chrono.GJChronology$CutoverField.iRangeDurationField` @type ^`org.joda.time.DurationField` := v13 @kind object;
  #L3b4334.  return @kind void;
}
procedure `long` `add`(`org.joda.time.chrono.GJChronology$ImpreciseCutoverField` v4 @kind this, `long` v5 , `int` v7 ) @signature `Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;.add:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b3fe0.  v0:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3fe4.  v2:= lcmp(v5, v0);
  #L3b3fe8.  if v2 < 0 then goto L3b40ac;
  #L3b3fec.  v0:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3ff0.  call temp:= `add`(v0, v5, v7) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3b3ff6.  v5:= temp @kind wide;
  #L3b3ff8.  v0:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3ffc.  v7:= lcmp(v5, v0);
  #L3b4000.  if v7 >= 0 then goto L3b40e8;
  #L3b4004.  v7:= v4.`org.joda.time.chrono.GJChronology$ImpreciseCutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b4008.  call temp:= `access$000`(v7) @signature `Lorg/joda/time/chrono/GJChronology;.access$000:(Lorg/joda/time/chrono/GJChronology;)J` @kind static;
  #L3b400e.  v0:= temp @kind wide;
  #L3b4010.  v0:= v0 + v5 @kind long;
  #L3b4012.  v2:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b4016.  v7:= lcmp(v0, v2);
  #L3b401a.  if v7 >= 0 then goto L3b40e8;
  #L3b401e.  v7:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iConvertByWeekyear` @type ^`boolean` @kind boolean;
  #L3b4022.  v0:= -1I;
  #L3b4024.  if v7 == 0 then goto L3b4066;
  #L3b4028.  v7:= v4.`org.joda.time.chrono.GJChronology$ImpreciseCutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b402c.  call temp:= `access$100`(v7) @signature `Lorg/joda/time/chrono/GJChronology;.access$100:(Lorg/joda/time/chrono/GJChronology;)Lorg/joda/time/chrono/GregorianChronology;` @kind static;
  #L3b4032.  v7:= temp @kind object;
  #L3b4034.  call temp:= `weekyear`(v7) @signature `Lorg/joda/time/chrono/AssembledChronology;.weekyear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b403a.  v7:= temp @kind object;
  #L3b403c.  call temp:= `get`(v7, v5) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3b4042.  v7:= temp;
  #L3b4044.  if v7 > 0 then goto L3b40a2;
  #L3b4048.  v7:= v4.`org.joda.time.chrono.GJChronology$ImpreciseCutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b404c.  call temp:= `access$100`(v7) @signature `Lorg/joda/time/chrono/GJChronology;.access$100:(Lorg/joda/time/chrono/GJChronology;)Lorg/joda/time/chrono/GregorianChronology;` @kind static;
  #L3b4052.  v7:= temp @kind object;
  #L3b4054.  call temp:= `weekyear`(v7) @signature `Lorg/joda/time/chrono/AssembledChronology;.weekyear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b405a.  v7:= temp @kind object;
  #L3b405c.  call temp:= `add`(v7, v5, v0) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3b4062.  v5:= temp @kind wide;
  #L3b4064.  goto L3b40a2;
  #L3b4066.  v7:= v4.`org.joda.time.chrono.GJChronology$ImpreciseCutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b406a.  call temp:= `access$100`(v7) @signature `Lorg/joda/time/chrono/GJChronology;.access$100:(Lorg/joda/time/chrono/GJChronology;)Lorg/joda/time/chrono/GregorianChronology;` @kind static;
  #L3b4070.  v7:= temp @kind object;
  #L3b4072.  call temp:= `year`(v7) @signature `Lorg/joda/time/chrono/AssembledChronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b4078.  v7:= temp @kind object;
  #L3b407a.  call temp:= `get`(v7, v5) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3b4080.  v7:= temp;
  #L3b4082.  if v7 > 0 then goto L3b40a2;
  #L3b4086.  v7:= v4.`org.joda.time.chrono.GJChronology$ImpreciseCutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b408a.  call temp:= `access$100`(v7) @signature `Lorg/joda/time/chrono/GJChronology;.access$100:(Lorg/joda/time/chrono/GJChronology;)Lorg/joda/time/chrono/GregorianChronology;` @kind static;
  #L3b4090.  v7:= temp @kind object;
  #L3b4092.  call temp:= `year`(v7) @signature `Lorg/joda/time/chrono/AssembledChronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b4098.  v7:= temp @kind object;
  #L3b409a.  call temp:= `add`(v7, v5, v0) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3b40a0.  v5:= temp @kind wide;
  #L3b40a2.  call temp:= `gregorianToJulian`(v4, v5) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.gregorianToJulian:(J)J` @kind virtual;
  #L3b40a8.  v5:= temp @kind wide;
  #L3b40aa.  goto L3b40e8;
  #L3b40ac.  v0:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b40b0.  call temp:= `add`(v0, v5, v7) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3b40b6.  v5:= temp @kind wide;
  #L3b40b8.  v0:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b40bc.  v7:= lcmp(v5, v0);
  #L3b40c0.  if v7 < 0 then goto L3b40e8;
  #L3b40c4.  v7:= v4.`org.joda.time.chrono.GJChronology$ImpreciseCutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b40c8.  call temp:= `access$000`(v7) @signature `Lorg/joda/time/chrono/GJChronology;.access$000:(Lorg/joda/time/chrono/GJChronology;)J` @kind static;
  #L3b40ce.  v0:= temp @kind wide;
  #L3b40d0.  v0:= v5 - v0 @kind long;
  #L3b40d4.  v2:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b40d8.  v7:= lcmp(v0, v2);
  #L3b40dc.  if v7 < 0 then goto L3b40e8;
  #L3b40e0.  call temp:= `julianToGregorian`(v4, v5) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.julianToGregorian:(J)J` @kind virtual;
  #L3b40e6.  v5:= temp @kind wide;
  #L3b40e8.  return v5 @kind wide;
}
procedure `long` `add`(`org.joda.time.chrono.GJChronology$ImpreciseCutoverField` v3 @kind this, `long` v4 , `long` v6 ) @signature `Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;.add:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b40fc.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b4100.  v2:= lcmp(v4, v0);
  #L3b4104.  if v2 < 0 then goto L3b41c8;
  #L3b4108.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b410c.  call temp:= `add`(v0, v4, v6) @signature `Lorg/joda/time/DateTimeField;.add:(JJ)J` @kind virtual;
  #L3b4112.  v4:= temp @kind wide;
  #L3b4114.  v6:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b4118.  v0:= lcmp(v4, v6);
  #L3b411c.  if v0 >= 0 then goto L3b4204;
  #L3b4120.  v6:= v3.`org.joda.time.chrono.GJChronology$ImpreciseCutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b4124.  call temp:= `access$000`(v6) @signature `Lorg/joda/time/chrono/GJChronology;.access$000:(Lorg/joda/time/chrono/GJChronology;)J` @kind static;
  #L3b412a.  v6:= temp @kind wide;
  #L3b412c.  v6:= v6 + v4 @kind long;
  #L3b412e.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b4132.  v2:= lcmp(v6, v0);
  #L3b4136.  if v2 >= 0 then goto L3b4204;
  #L3b413a.  v6:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iConvertByWeekyear` @type ^`boolean` @kind boolean;
  #L3b413e.  v7:= -1I;
  #L3b4140.  if v6 == 0 then goto L3b4182;
  #L3b4144.  v6:= v3.`org.joda.time.chrono.GJChronology$ImpreciseCutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b4148.  call temp:= `access$100`(v6) @signature `Lorg/joda/time/chrono/GJChronology;.access$100:(Lorg/joda/time/chrono/GJChronology;)Lorg/joda/time/chrono/GregorianChronology;` @kind static;
  #L3b414e.  v6:= temp @kind object;
  #L3b4150.  call temp:= `weekyear`(v6) @signature `Lorg/joda/time/chrono/AssembledChronology;.weekyear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b4156.  v6:= temp @kind object;
  #L3b4158.  call temp:= `get`(v6, v4) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3b415e.  v6:= temp;
  #L3b4160.  if v6 > 0 then goto L3b41be;
  #L3b4164.  v6:= v3.`org.joda.time.chrono.GJChronology$ImpreciseCutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b4168.  call temp:= `access$100`(v6) @signature `Lorg/joda/time/chrono/GJChronology;.access$100:(Lorg/joda/time/chrono/GJChronology;)Lorg/joda/time/chrono/GregorianChronology;` @kind static;
  #L3b416e.  v6:= temp @kind object;
  #L3b4170.  call temp:= `weekyear`(v6) @signature `Lorg/joda/time/chrono/AssembledChronology;.weekyear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b4176.  v6:= temp @kind object;
  #L3b4178.  call temp:= `add`(v6, v4, v7) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3b417e.  v4:= temp @kind wide;
  #L3b4180.  goto L3b41be;
  #L3b4182.  v6:= v3.`org.joda.time.chrono.GJChronology$ImpreciseCutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b4186.  call temp:= `access$100`(v6) @signature `Lorg/joda/time/chrono/GJChronology;.access$100:(Lorg/joda/time/chrono/GJChronology;)Lorg/joda/time/chrono/GregorianChronology;` @kind static;
  #L3b418c.  v6:= temp @kind object;
  #L3b418e.  call temp:= `year`(v6) @signature `Lorg/joda/time/chrono/AssembledChronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b4194.  v6:= temp @kind object;
  #L3b4196.  call temp:= `get`(v6, v4) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3b419c.  v6:= temp;
  #L3b419e.  if v6 > 0 then goto L3b41be;
  #L3b41a2.  v6:= v3.`org.joda.time.chrono.GJChronology$ImpreciseCutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b41a6.  call temp:= `access$100`(v6) @signature `Lorg/joda/time/chrono/GJChronology;.access$100:(Lorg/joda/time/chrono/GJChronology;)Lorg/joda/time/chrono/GregorianChronology;` @kind static;
  #L3b41ac.  v6:= temp @kind object;
  #L3b41ae.  call temp:= `year`(v6) @signature `Lorg/joda/time/chrono/AssembledChronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b41b4.  v6:= temp @kind object;
  #L3b41b6.  call temp:= `add`(v6, v4, v7) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3b41bc.  v4:= temp @kind wide;
  #L3b41be.  call temp:= `gregorianToJulian`(v3, v4) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.gregorianToJulian:(J)J` @kind virtual;
  #L3b41c4.  v4:= temp @kind wide;
  #L3b41c6.  goto L3b4204;
  #L3b41c8.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b41cc.  call temp:= `add`(v0, v4, v6) @signature `Lorg/joda/time/DateTimeField;.add:(JJ)J` @kind virtual;
  #L3b41d2.  v4:= temp @kind wide;
  #L3b41d4.  v6:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b41d8.  v0:= lcmp(v4, v6);
  #L3b41dc.  if v0 < 0 then goto L3b4204;
  #L3b41e0.  v6:= v3.`org.joda.time.chrono.GJChronology$ImpreciseCutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b41e4.  call temp:= `access$000`(v6) @signature `Lorg/joda/time/chrono/GJChronology;.access$000:(Lorg/joda/time/chrono/GJChronology;)J` @kind static;
  #L3b41ea.  v6:= temp @kind wide;
  #L3b41ec.  v6:= v4 - v6 @kind long;
  #L3b41f0.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b41f4.  v2:= lcmp(v6, v0);
  #L3b41f8.  if v2 < 0 then goto L3b4204;
  #L3b41fc.  call temp:= `julianToGregorian`(v3, v4) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.julianToGregorian:(J)J` @kind virtual;
  #L3b4202.  v4:= temp @kind wide;
  #L3b4204.  return v4 @kind wide;
}
procedure `int` `getDifference`(`org.joda.time.chrono.GJChronology$ImpreciseCutoverField` v3 @kind this, `long` v4 , `long` v6 ) @signature `Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;.getDifference:(JJ)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b3efc.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3f00.  v2:= lcmp(v4, v0);
  #L3b3f04.  if v2 < 0 then goto L3b3f34;
  #L3b3f08.  v2:= lcmp(v6, v0);
  #L3b3f0c.  if v2 < 0 then goto L3b3f1e;
  #L3b3f10.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3f14.  call temp:= `getDifference`(v0, v4, v6) @signature `Lorg/joda/time/DateTimeField;.getDifference:(JJ)I` @kind virtual;
  #L3b3f1a.  v4:= temp;
  #L3b3f1c.  return v4;
  #L3b3f1e.  call temp:= `gregorianToJulian`(v3, v4) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.gregorianToJulian:(J)J` @kind virtual;
  #L3b3f24.  v4:= temp @kind wide;
  #L3b3f26.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3f2a.  call temp:= `getDifference`(v0, v4, v6) @signature `Lorg/joda/time/DateTimeField;.getDifference:(JJ)I` @kind virtual;
  #L3b3f30.  v4:= temp;
  #L3b3f32.  return v4;
  #L3b3f34.  v2:= lcmp(v6, v0);
  #L3b3f38.  if v2 >= 0 then goto L3b3f4a;
  #L3b3f3c.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3f40.  call temp:= `getDifference`(v0, v4, v6) @signature `Lorg/joda/time/DateTimeField;.getDifference:(JJ)I` @kind virtual;
  #L3b3f46.  v4:= temp;
  #L3b3f48.  return v4;
  #L3b3f4a.  call temp:= `julianToGregorian`(v3, v4) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.julianToGregorian:(J)J` @kind virtual;
  #L3b3f50.  v4:= temp @kind wide;
  #L3b3f52.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3f56.  call temp:= `getDifference`(v0, v4, v6) @signature `Lorg/joda/time/DateTimeField;.getDifference:(JJ)I` @kind virtual;
  #L3b3f5c.  v4:= temp;
  #L3b3f5e.  return v4;
}
procedure `long` `getDifferenceAsLong`(`org.joda.time.chrono.GJChronology$ImpreciseCutoverField` v3 @kind this, `long` v4 , `long` v6 ) @signature `Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;.getDifferenceAsLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b4218.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b421c.  v2:= lcmp(v4, v0);
  #L3b4220.  if v2 < 0 then goto L3b4250;
  #L3b4224.  v2:= lcmp(v6, v0);
  #L3b4228.  if v2 < 0 then goto L3b423a;
  #L3b422c.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b4230.  call temp:= `getDifferenceAsLong`(v0, v4, v6) @signature `Lorg/joda/time/DateTimeField;.getDifferenceAsLong:(JJ)J` @kind virtual;
  #L3b4236.  v4:= temp @kind wide;
  #L3b4238.  return v4 @kind wide;
  #L3b423a.  call temp:= `gregorianToJulian`(v3, v4) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.gregorianToJulian:(J)J` @kind virtual;
  #L3b4240.  v4:= temp @kind wide;
  #L3b4242.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b4246.  call temp:= `getDifferenceAsLong`(v0, v4, v6) @signature `Lorg/joda/time/DateTimeField;.getDifferenceAsLong:(JJ)J` @kind virtual;
  #L3b424c.  v4:= temp @kind wide;
  #L3b424e.  return v4 @kind wide;
  #L3b4250.  v2:= lcmp(v6, v0);
  #L3b4254.  if v2 >= 0 then goto L3b4266;
  #L3b4258.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b425c.  call temp:= `getDifferenceAsLong`(v0, v4, v6) @signature `Lorg/joda/time/DateTimeField;.getDifferenceAsLong:(JJ)J` @kind virtual;
  #L3b4262.  v4:= temp @kind wide;
  #L3b4264.  return v4 @kind wide;
  #L3b4266.  call temp:= `julianToGregorian`(v3, v4) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.julianToGregorian:(J)J` @kind virtual;
  #L3b426c.  v4:= temp @kind wide;
  #L3b426e.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b4272.  call temp:= `getDifferenceAsLong`(v0, v4, v6) @signature `Lorg/joda/time/DateTimeField;.getDifferenceAsLong:(JJ)J` @kind virtual;
  #L3b4278.  v4:= temp @kind wide;
  #L3b427a.  return v4 @kind wide;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.GJChronology$ImpreciseCutoverField` v3 @kind this, `long` v4 ) @signature `Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;.getMaximumValue:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b3f70.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3f74.  v2:= lcmp(v4, v0);
  #L3b3f78.  if v2 < 0 then goto L3b3f8a;
  #L3b3f7c.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3f80.  call temp:= `getMaximumValue`(v0, v4) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:(J)I` @kind virtual;
  #L3b3f86.  v4:= temp;
  #L3b3f88.  return v4;
  #L3b3f8a.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3f8e.  call temp:= `getMaximumValue`(v0, v4) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:(J)I` @kind virtual;
  #L3b3f94.  v4:= temp;
  #L3b3f96.  return v4;
}
procedure `int` `getMinimumValue`(`org.joda.time.chrono.GJChronology$ImpreciseCutoverField` v3 @kind this, `long` v4 ) @signature `Lorg/joda/time/chrono/GJChronology$ImpreciseCutoverField;.getMinimumValue:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b3fa8.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3fac.  v2:= lcmp(v4, v0);
  #L3b3fb0.  if v2 < 0 then goto L3b3fc2;
  #L3b3fb4.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3fb8.  call temp:= `getMinimumValue`(v0, v4) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:(J)I` @kind virtual;
  #L3b3fbe.  v4:= temp;
  #L3b3fc0.  return v4;
  #L3b3fc2.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3fc6.  call temp:= `getMinimumValue`(v0, v4) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:(J)I` @kind virtual;
  #L3b3fcc.  v4:= temp;
  #L3b3fce.  return v4;
}
