record `org.joda.time.chrono.LimitChronology$LimitException` @kind class @AccessFlag  extends `java.lang.IllegalArgumentException` @kind class {
  `boolean` `org.joda.time.chrono.LimitChronology$LimitException.iIsLow` @AccessFlag PRIVATE_FINAL;
  `org.joda.time.chrono.LimitChronology` `org.joda.time.chrono.LimitChronology$LimitException.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@org.joda.time.chrono.LimitChronology$LimitException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.chrono.LimitChronology$LimitException` v0 @kind this, `org.joda.time.chrono.LimitChronology` v1 @kind object, `java.lang.String` v2 @kind object, `boolean` v3 ) @signature `Lorg/joda/time/chrono/LimitChronology$LimitException;.<init>:(Lorg/joda/time/chrono/LimitChronology;Ljava/lang/String;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3b7df0.  v0.`org.joda.time.chrono.LimitChronology$LimitException.this$0` @type ^`org.joda.time.chrono.LimitChronology` := v1 @kind object;
  #L3b7df4.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b7dfa.  v0.`org.joda.time.chrono.LimitChronology$LimitException.iIsLow` @type ^`boolean` := v3 @kind boolean;
  #L3b7dfe.  return @kind void;
}
procedure `java.lang.String` `getMessage`(`org.joda.time.chrono.LimitChronology$LimitException` v4 @kind this) @signature `Lorg/joda/time/chrono/LimitChronology$LimitException;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b7cc8.  v0:= new `java.lang.StringBuffer`;
  #L3b7ccc.  v1:= 85I;
  #L3b7cd0.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuffer;.<init>:(I)V` @kind direct;
  #L3b7cd6.  v1:= "The" @kind object;
  #L3b7cda.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3b7ce0.  call temp:= `getMessage`(v4) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind super;
  #L3b7ce6.  v1:= temp @kind object;
  #L3b7ce8.  if v1 == 0 then goto L3b7cfc;
  #L3b7cec.  v2:= 32I;
  #L3b7cf0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3b7cf6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3b7cfc.  v1:= " instant is " @kind object;
  #L3b7d00.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3b7d06.  call temp:= `dateTime`() @signature `Lorg/joda/time/format/ISODateTimeFormat;.dateTime:()Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3b7d0c.  v1:= temp @kind object;
  #L3b7d0e.  v2:= v4.`org.joda.time.chrono.LimitChronology$LimitException.this$0` @type ^`org.joda.time.chrono.LimitChronology` @kind object;
  #L3b7d12.  call temp:= `getBase`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b7d18.  v2:= temp @kind object;
  #L3b7d1a.  call temp:= `withChronology`(v1, v2) @signature `Lorg/joda/time/format/DateTimeFormatter;.withChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;` @kind virtual;
  #L3b7d20.  v1:= temp @kind object;
  #L3b7d22.  v2:= v4.`org.joda.time.chrono.LimitChronology$LimitException.iIsLow` @type ^`boolean` @kind boolean;
  #L3b7d26.  if v2 == 0 then goto L3b7d50;
  #L3b7d2a.  v2:= "below the supported minimum of " @kind object;
  #L3b7d2e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3b7d34.  v2:= v4.`org.joda.time.chrono.LimitChronology$LimitException.this$0` @type ^`org.joda.time.chrono.LimitChronology` @kind object;
  #L3b7d38.  call temp:= `getLowerLimit`(v2) @signature `Lorg/joda/time/chrono/LimitChronology;.getLowerLimit:()Lorg/joda/time/DateTime;` @kind virtual;
  #L3b7d3e.  v2:= temp @kind object;
  #L3b7d40.  call temp:= `getMillis`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3b7d46.  v2:= temp @kind wide;
  #L3b7d48.  call `printTo`(v1, v0, v2) @signature `Lorg/joda/time/format/DateTimeFormatter;.printTo:(Ljava/lang/StringBuffer;J)V` @kind virtual;
  #L3b7d4e.  goto L3b7d74;
  #L3b7d50.  v2:= "above the supported maximum of " @kind object;
  #L3b7d54.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3b7d5a.  v2:= v4.`org.joda.time.chrono.LimitChronology$LimitException.this$0` @type ^`org.joda.time.chrono.LimitChronology` @kind object;
  #L3b7d5e.  call temp:= `getUpperLimit`(v2) @signature `Lorg/joda/time/chrono/LimitChronology;.getUpperLimit:()Lorg/joda/time/DateTime;` @kind virtual;
  #L3b7d64.  v2:= temp @kind object;
  #L3b7d66.  call temp:= `getMillis`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3b7d6c.  v2:= temp @kind wide;
  #L3b7d6e.  call `printTo`(v1, v0, v2) @signature `Lorg/joda/time/format/DateTimeFormatter;.printTo:(Ljava/lang/StringBuffer;J)V` @kind virtual;
  #L3b7d74.  v1:= " (" @kind object;
  #L3b7d78.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3b7d7e.  v1:= v4.`org.joda.time.chrono.LimitChronology$LimitException.this$0` @type ^`org.joda.time.chrono.LimitChronology` @kind object;
  #L3b7d82.  call temp:= `getBase`(v1) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b7d88.  v1:= temp @kind object;
  #L3b7d8a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/Object;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3b7d90.  v1:= 41I;
  #L3b7d94.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3b7d9a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b7da0.  v0:= temp @kind object;
  #L3b7da2.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.chrono.LimitChronology$LimitException` v2 @kind this) @signature `Lorg/joda/time/chrono/LimitChronology$LimitException;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b7db4.  v0:= new `java.lang.StringBuilder`;
  #L3b7db8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b7dbe.  v1:= "IllegalArgumentException: " @kind object;
  #L3b7dc2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b7dc8.  call temp:= `getMessage`(v2) @signature `Lorg/joda/time/chrono/LimitChronology$LimitException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L3b7dce.  v1:= temp @kind object;
  #L3b7dd0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b7dd6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b7ddc.  v0:= temp @kind object;
  #L3b7dde.  return v0 @kind object;
}
