record `org.joda.time.chrono.BasicDayOfYearDateTimeField` @kind class @AccessFlag FINAL extends `org.joda.time.field.PreciseDurationDateTimeField` @kind class {
  `org.joda.time.chrono.BasicChronology` `org.joda.time.chrono.BasicDayOfYearDateTimeField.iChronology` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@org.joda.time.chrono.BasicDayOfYearDateTimeField.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.chrono.BasicDayOfYearDateTimeField` v1 @kind this, `org.joda.time.chrono.BasicChronology` v2 @kind object, `org.joda.time.DurationField` v3 @kind object) @signature `Lorg/joda/time/chrono/BasicDayOfYearDateTimeField;.<init>:(Lorg/joda/time/chrono/BasicChronology;Lorg/joda/time/DurationField;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3b12e4.  call temp:= `dayOfYear`() @signature `Lorg/joda/time/DateTimeFieldType;.dayOfYear:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b12ea.  v0:= temp @kind object;
  #L3b12ec.  call `<init>`(v1, v0, v3) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.<init>:(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;)V` @kind direct;
  #L3b12f2.  v1.`org.joda.time.chrono.BasicDayOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` := v2 @kind object;
  #L3b12f6.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.chrono.BasicDayOfYearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicDayOfYearDateTimeField;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3b12a4.  v0:= v1.`org.joda.time.chrono.BasicDayOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b12a8.  call temp:= `dayOfYear`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.dayOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b12ae.  v0:= temp @kind object;
  #L3b12b0.  return v0 @kind object;
}
procedure `int` `get`(`org.joda.time.chrono.BasicDayOfYearDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/BasicDayOfYearDateTimeField;.get:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1148.  v0:= v1.`org.joda.time.chrono.BasicDayOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b114c.  call temp:= `getDayOfYear`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getDayOfYear:(J)I` @kind virtual;
  #L3b1152.  v2:= temp;
  #L3b1154.  return v2;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.BasicDayOfYearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicDayOfYearDateTimeField;.getMaximumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1168.  v0:= v1.`org.joda.time.chrono.BasicDayOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b116c.  call temp:= `getDaysInYearMax`(v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInYearMax:()I` @kind virtual;
  #L3b1172.  v0:= temp;
  #L3b1174.  return v0;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.BasicDayOfYearDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/BasicDayOfYearDateTimeField;.getMaximumValue:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1188.  v0:= v1.`org.joda.time.chrono.BasicDayOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b118c.  call temp:= `getYear`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getYear:(J)I` @kind virtual;
  #L3b1192.  v2:= temp;
  #L3b1194.  v3:= v1.`org.joda.time.chrono.BasicDayOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1198.  call temp:= `getDaysInYear`(v3, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInYear:(I)I` @kind virtual;
  #L3b119e.  v2:= temp;
  #L3b11a0.  return v2;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.BasicDayOfYearDateTimeField` v1 @kind this, `org.joda.time.ReadablePartial` v2 @kind object) @signature `Lorg/joda/time/chrono/BasicDayOfYearDateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b11b4.  call temp:= `year`() @signature `Lorg/joda/time/DateTimeFieldType;.year:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b11ba.  v0:= temp @kind object;
  #L3b11bc.  call temp:= `isSupported`(v2, v0) @signature `Lorg/joda/time/ReadablePartial;.isSupported:(Lorg/joda/time/DateTimeFieldType;)Z` @kind interface;
  #L3b11c2.  v0:= temp;
  #L3b11c4.  if v0 == 0 then goto L3b11e6;
  #L3b11c8.  call temp:= `year`() @signature `Lorg/joda/time/DateTimeFieldType;.year:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b11ce.  v0:= temp @kind object;
  #L3b11d0.  call temp:= `get`(v2, v0) @signature `Lorg/joda/time/ReadablePartial;.get:(Lorg/joda/time/DateTimeFieldType;)I` @kind interface;
  #L3b11d6.  v2:= temp;
  #L3b11d8.  v0:= v1.`org.joda.time.chrono.BasicDayOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b11dc.  call temp:= `getDaysInYear`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInYear:(I)I` @kind virtual;
  #L3b11e2.  v2:= temp;
  #L3b11e4.  return v2;
  #L3b11e6.  v2:= v1.`org.joda.time.chrono.BasicDayOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b11ea.  call temp:= `getDaysInYearMax`(v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInYearMax:()I` @kind virtual;
  #L3b11f0.  v2:= temp;
  #L3b11f2.  return v2;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.BasicDayOfYearDateTimeField` v4 @kind this, `org.joda.time.ReadablePartial` v5 @kind object, `int`[] v6 @kind object) @signature `Lorg/joda/time/chrono/BasicDayOfYearDateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;[I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b1204.  call temp:= `size`(v5) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3b120a.  v0:= temp;
  #L3b120c.  v1:= 0I;
  #L3b120e.  if v1 >= v0 then goto L3b123e;
  #L3b1212.  call temp:= `getFieldType`(v5, v1) @signature `Lorg/joda/time/ReadablePartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind interface;
  #L3b1218.  v2:= temp @kind object;
  #L3b121a.  call temp:= `year`() @signature `Lorg/joda/time/DateTimeFieldType;.year:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b1220.  v3:= temp @kind object;
  #L3b1222.  if v2 != v3 then goto L3b1238;
  #L3b1226.  v5:= v6[v1];
  #L3b122a.  v6:= v4.`org.joda.time.chrono.BasicDayOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b122e.  call temp:= `getDaysInYear`(v6, v5) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInYear:(I)I` @kind virtual;
  #L3b1234.  v5:= temp;
  #L3b1236.  return v5;
  #L3b1238.  v1:= v1 + 1;
  #L3b123c.  goto L3b120e;
  #L3b123e.  v5:= v4.`org.joda.time.chrono.BasicDayOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1242.  call temp:= `getDaysInYearMax`(v5) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInYearMax:()I` @kind virtual;
  #L3b1248.  v5:= temp;
  #L3b124a.  return v5;
}
procedure `int` `getMaximumValueForSet`(`org.joda.time.chrono.BasicDayOfYearDateTimeField` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lorg/joda/time/chrono/BasicDayOfYearDateTimeField;.getMaximumValueForSet:(JI)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3b125c.  v0:= v2.`org.joda.time.chrono.BasicDayOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1260.  call temp:= `getDaysInYearMax`(v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInYearMax:()I` @kind virtual;
  #L3b1266.  v0:= temp;
  #L3b1268.  v1:= 1I;
  #L3b126a.  v0:= v0 - v1 @kind int;
  #L3b126c.  if v5 > v0 then goto L3b1274;
  #L3b1270.  if v5 >= v1 then goto L3b127c;
  #L3b1274.  call temp:= `getMaximumValue`(v2, v3) @signature `Lorg/joda/time/chrono/BasicDayOfYearDateTimeField;.getMaximumValue:(J)I` @kind virtual;
  #L3b127a.  v0:= temp;
  #L3b127c.  return v0;
}
procedure `int` `getMinimumValue`(`org.joda.time.chrono.BasicDayOfYearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicDayOfYearDateTimeField;.getMinimumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1290.  v0:= 1I;
  #L3b1292.  return v0;
}
procedure `org.joda.time.DurationField` `getRangeDurationField`(`org.joda.time.chrono.BasicDayOfYearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicDayOfYearDateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b12c4.  v0:= v1.`org.joda.time.chrono.BasicDayOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b12c8.  call temp:= `years`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.years:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b12ce.  v0:= temp @kind object;
  #L3b12d0.  return v0 @kind object;
}
procedure `boolean` `isLeap`(`org.joda.time.chrono.BasicDayOfYearDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/BasicDayOfYearDateTimeField;.isLeap:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1128.  v0:= v1.`org.joda.time.chrono.BasicDayOfYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b112c.  call temp:= `isLeapDay`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.isLeapDay:(J)Z` @kind virtual;
  #L3b1132.  v2:= temp;
  #L3b1134.  return v2;
}
