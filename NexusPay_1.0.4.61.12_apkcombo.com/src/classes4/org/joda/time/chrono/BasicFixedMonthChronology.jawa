record `org.joda.time.chrono.BasicFixedMonthChronology` @kind class @AccessFlag ABSTRACT extends `org.joda.time.chrono.BasicChronology` @kind class {
}
global `long` `@@org.joda.time.chrono.BasicFixedMonthChronology.MILLIS_PER_MONTH` @AccessFlag STATIC_FINAL;
global `long` `@@org.joda.time.chrono.BasicFixedMonthChronology.MILLIS_PER_YEAR` @AccessFlag STATIC_FINAL;
global `int` `@@org.joda.time.chrono.BasicFixedMonthChronology.MONTH_LENGTH` @AccessFlag STATIC_FINAL;
global `long` `@@org.joda.time.chrono.BasicFixedMonthChronology.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.chrono.BasicFixedMonthChronology` v0 @kind this, `org.joda.time.Chronology` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3b1544.  call `<init>`(v0, v1, v2, v3) @signature `Lorg/joda/time/chrono/BasicChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @kind direct;
  #L3b154a.  return @kind void;
}
procedure `long` `getAverageMillisPerMonth`(`org.joda.time.chrono.BasicFixedMonthChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.getAverageMillisPerMonth:()J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b1430.  v0:= 2592000000L;
  #L3b143a.  return v0 @kind wide;
}
procedure `long` `getAverageMillisPerYear`(`org.joda.time.chrono.BasicFixedMonthChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.getAverageMillisPerYear:()J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b144c.  v0:= 31557600000L;
  #L3b1456.  return v0 @kind wide;
}
procedure `long` `getAverageMillisPerYearDividedByTwo`(`org.joda.time.chrono.BasicFixedMonthChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.getAverageMillisPerYearDividedByTwo:()J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b1468.  v0:= 15778800000L;
  #L3b1472.  return v0 @kind wide;
}
procedure `int` `getDayOfMonth`(`org.joda.time.chrono.BasicFixedMonthChronology` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.getDayOfMonth:(J)I` @AccessFlag  {
    temp;

  #L3b1328.  call temp:= `getDayOfYear`(v0, v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getDayOfYear:(J)I` @kind virtual;
  #L3b132e.  v1:= temp;
  #L3b1330.  v1:= v1 + -1;
  #L3b1334.  v1:= v1 %% 30;
  #L3b1338.  v1:= v1 + 1;
  #L3b133c.  return v1;
}
procedure `int` `getDaysInMonthMax`(`org.joda.time.chrono.BasicFixedMonthChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.getDaysInMonthMax:()I` @AccessFlag  {
    temp;
    v0;

  #L3b1350.  v0:= 30I;
  #L3b1354.  return v0;
}
procedure `int` `getDaysInMonthMax`(`org.joda.time.chrono.BasicFixedMonthChronology` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.getDaysInMonthMax:(I)I` @AccessFlag  {
    temp;
    v0;

  #L3b1368.  v0:= 13I;
  #L3b136c.  if v2 == v0 then goto L3b1376;
  #L3b1370.  v2:= 30I;
  #L3b1374.  goto L3b1378;
  #L3b1376.  v2:= 6I;
  #L3b1378.  return v2;
}
procedure `int` `getDaysInYearMonth`(`org.joda.time.chrono.BasicFixedMonthChronology` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.getDaysInYearMonth:(II)I` @AccessFlag  {
    temp;
    v0;

  #L3b138c.  v0:= 13I;
  #L3b1390.  if v3 == v0 then goto L3b139a;
  #L3b1394.  v2:= 30I;
  #L3b1398.  goto L3b13ac;
  #L3b139a.  call temp:= `isLeapYear`(v1, v2) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.isLeapYear:(I)Z` @kind virtual;
  #L3b13a0.  v2:= temp;
  #L3b13a2.  if v2 == 0 then goto L3b13aa;
  #L3b13a6.  v2:= 6I;
  #L3b13a8.  goto L3b13ac;
  #L3b13aa.  v2:= 5I;
  #L3b13ac.  return v2;
}
procedure `int` `getMaxMonth`(`org.joda.time.chrono.BasicFixedMonthChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.getMaxMonth:()I` @AccessFlag  {
    temp;
    v0;

  #L3b13c0.  v0:= 13I;
  #L3b13c4.  return v0;
}
procedure `int` `getMonthOfYear`(`org.joda.time.chrono.BasicFixedMonthChronology` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.getMonthOfYear:(J)I` @AccessFlag  {
    temp;

  #L3b13d8.  call temp:= `getDayOfYear`(v0, v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getDayOfYear:(J)I` @kind virtual;
  #L3b13de.  v1:= temp;
  #L3b13e0.  v1:= v1 + -1;
  #L3b13e4.  v1:= v1 / 30;
  #L3b13e8.  v1:= v1 + 1;
  #L3b13ec.  return v1;
}
procedure `int` `getMonthOfYear`(`org.joda.time.chrono.BasicFixedMonthChronology` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.getMonthOfYear:(JI)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b1400.  call temp:= `getYearMillis`(v2, v5) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMillis:(I)J` @kind virtual;
  #L3b1406.  v0:= temp @kind wide;
  #L3b1408.  v3:= v3 - v0 @kind long;
  #L3b140a.  v0:= 2592000000L;
  #L3b1414.  v3:= v3 / v0 @kind long;
  #L3b1416.  v4:= (`int`) v3 @kind l2i;
  #L3b1418.  v4:= v4 + 1;
  #L3b141c.  return v4;
}
procedure `long` `getTotalMillisByYearMonth`(`org.joda.time.chrono.BasicFixedMonthChronology` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.getTotalMillisByYearMonth:(II)J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b1484.  v4:= v4 + -1;
  #L3b1488.  v3:= (`long`) v4 @kind i2l;
  #L3b148a.  v0:= 2592000000L;
  #L3b1494.  v3:= v3 * v0 @kind long;
  #L3b1498.  return v3 @kind wide;
}
procedure `long` `getYearDifference`(`org.joda.time.chrono.BasicFixedMonthChronology` v4 @kind this, `long` v5 , `long` v7 ) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.getYearDifference:(JJ)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b14ac.  call temp:= `getYear`(v4, v5) @signature `Lorg/joda/time/chrono/BasicChronology;.getYear:(J)I` @kind virtual;
  #L3b14b2.  v0:= temp;
  #L3b14b4.  call temp:= `getYear`(v4, v7) @signature `Lorg/joda/time/chrono/BasicChronology;.getYear:(J)I` @kind virtual;
  #L3b14ba.  v1:= temp;
  #L3b14bc.  call temp:= `getYearMillis`(v4, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMillis:(I)J` @kind virtual;
  #L3b14c2.  v2:= temp @kind wide;
  #L3b14c4.  v5:= v5 - v2 @kind long;
  #L3b14c6.  call temp:= `getYearMillis`(v4, v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMillis:(I)J` @kind virtual;
  #L3b14cc.  v2:= temp @kind wide;
  #L3b14ce.  v7:= v7 - v2 @kind long;
  #L3b14d0.  v0:= v0 - v1 @kind int;
  #L3b14d2.  v1:= lcmp(v5, v7);
  #L3b14d6.  if v1 >= 0 then goto L3b14de;
  #L3b14da.  v0:= v0 + -1;
  #L3b14de.  v5:= (`long`) v0 @kind i2l;
  #L3b14e0.  return v5 @kind wide;
}
procedure `boolean` `isLeapYear`(`org.joda.time.chrono.BasicFixedMonthChronology` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.isLeapYear:(I)Z` @AccessFlag  {
    temp;
    v0;

  #L3b1308.  v0:= 3I;
  #L3b130a.  v2:= v2 ^& v0 @kind int;
  #L3b130c.  if v2 != v0 then goto L3b1314;
  #L3b1310.  v2:= 1I;
  #L3b1312.  goto L3b1316;
  #L3b1314.  v2:= 0I;
  #L3b1316.  return v2;
}
procedure `long` `setYear`(`org.joda.time.chrono.BasicFixedMonthChronology` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.setYear:(JI)J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b14f4.  call temp:= `getYear`(v2, v3) @signature `Lorg/joda/time/chrono/BasicChronology;.getYear:(J)I` @kind virtual;
  #L3b14fa.  v0:= temp;
  #L3b14fc.  call temp:= `getDayOfYear`(v2, v3, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getDayOfYear:(JI)I` @kind virtual;
  #L3b1502.  v0:= temp;
  #L3b1504.  call temp:= `getMillisOfDay`(v2, v3) @signature `Lorg/joda/time/chrono/BasicChronology;.getMillisOfDay:(J)I` @kind virtual;
  #L3b150a.  v3:= temp;
  #L3b150c.  v4:= 365I;
  #L3b1510.  if v0 <= v4 then goto L3b1524;
  #L3b1514.  call temp:= `isLeapYear`(v2, v5) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.isLeapYear:(I)Z` @kind virtual;
  #L3b151a.  v4:= temp;
  #L3b151c.  if v4 != 0 then goto L3b1524;
  #L3b1520.  v0:= v0 + -1;
  #L3b1524.  v4:= 1I;
  #L3b1526.  call temp:= `getYearMonthDayMillis`(v2, v5, v4, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMonthDayMillis:(III)J` @kind virtual;
  #L3b152c.  v4:= temp @kind wide;
  #L3b152e.  v0:= (`long`) v3 @kind i2l;
  #L3b1530.  v4:= v4 + v0 @kind long;
  #L3b1532.  return v4 @kind wide;
}
