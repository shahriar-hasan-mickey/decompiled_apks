record `org.joda.time.chrono.LimitChronology` @kind class @AccessFlag PUBLIC_FINAL extends `org.joda.time.chrono.AssembledChronology` @kind class {
  `org.joda.time.DateTime` `org.joda.time.chrono.LimitChronology.iLowerLimit` @AccessFlag FINAL;
  `org.joda.time.DateTime` `org.joda.time.chrono.LimitChronology.iUpperLimit` @AccessFlag FINAL;
  `org.joda.time.chrono.LimitChronology` `org.joda.time.chrono.LimitChronology.iWithUTC` @AccessFlag PRIVATE_TRANSIENT;
}
global `long` `@@org.joda.time.chrono.LimitChronology.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.chrono.LimitChronology` v1 @kind this, `org.joda.time.Chronology` v2 @kind object, `org.joda.time.DateTime` v3 @kind object, `org.joda.time.DateTime` v4 @kind object) @signature `Lorg/joda/time/chrono/LimitChronology;.<init>:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTime;Lorg/joda/time/DateTime;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3b8298.  v0:= 0I;
  #L3b829a.  call `<init>`(v1, v2, v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;)V` @kind direct;
  #L3b82a0.  v1.`org.joda.time.chrono.LimitChronology.iLowerLimit` @type ^`org.joda.time.DateTime` := v3 @kind object;
  #L3b82a4.  v1.`org.joda.time.chrono.LimitChronology.iUpperLimit` @type ^`org.joda.time.DateTime` := v4 @kind object;
  #L3b82a8.  return @kind void;
}
procedure `org.joda.time.DateTimeField` `convertField`(`org.joda.time.chrono.LimitChronology` v7 @kind this, `org.joda.time.DateTimeField` v8 @kind object, `java.util.HashMap` v9 @kind object) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3b8148.  if v8 == 0 then goto L3b81bc;
  #L3b814c.  call temp:= `isSupported`(v8) @signature `Lorg/joda/time/DateTimeField;.isSupported:()Z` @kind virtual;
  #L3b8152.  v0:= temp;
  #L3b8154.  if v0 != 0 then goto L3b815a;
  #L3b8158.  goto L3b81bc;
  #L3b815a.  call temp:= `containsKey`(v9, v8) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L3b8160.  v0:= temp;
  #L3b8162.  if v0 == 0 then goto L3b8174;
  #L3b8166.  call temp:= `get`(v9, v8) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b816c.  v8:= temp @kind object;
  #L3b816e.  v8:= (`org.joda.time.DateTimeField`) v8 @kind object;
  #L3b8172.  return v8 @kind object;
  #L3b8174.  v6:= new `org.joda.time.chrono.LimitChronology$LimitDateTimeField`;
  #L3b8178.  call temp:= `getDurationField`(v8) @signature `Lorg/joda/time/DateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b817e.  v0:= temp @kind object;
  #L3b8180.  call temp:= `convertField`(v7, v0, v9) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;` @kind direct;
  #L3b8186.  v3:= temp @kind object;
  #L3b8188.  call temp:= `getRangeDurationField`(v8) @signature `Lorg/joda/time/DateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b818e.  v0:= temp @kind object;
  #L3b8190.  call temp:= `convertField`(v7, v0, v9) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;` @kind direct;
  #L3b8196.  v4:= temp @kind object;
  #L3b8198.  call temp:= `getLeapDurationField`(v8) @signature `Lorg/joda/time/DateTimeField;.getLeapDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b819e.  v0:= temp @kind object;
  #L3b81a0.  call temp:= `convertField`(v7, v0, v9) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;` @kind direct;
  #L3b81a6.  v5:= temp @kind object;
  #L3b81a8.  v0:= v6 @kind object;
  #L3b81aa.  v1:= v7 @kind object;
  #L3b81ac.  v2:= v8 @kind object;
  #L3b81ae.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lorg/joda/time/chrono/LimitChronology$LimitDateTimeField;.<init>:(Lorg/joda/time/chrono/LimitChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V` @kind direct;
  #L3b81b4.  call temp:= `put`(v9, v8, v6) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b81ba.  return v6 @kind object;
  #L3b81bc.  return v8 @kind object;
}
procedure `org.joda.time.DurationField` `convertField`(`org.joda.time.chrono.LimitChronology` v1 @kind this, `org.joda.time.DurationField` v2 @kind object, `java.util.HashMap` v3 @kind object) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3b81d0.  if v2 == 0 then goto L3b820e;
  #L3b81d4.  call temp:= `isSupported`(v2) @signature `Lorg/joda/time/DurationField;.isSupported:()Z` @kind virtual;
  #L3b81da.  v0:= temp;
  #L3b81dc.  if v0 != 0 then goto L3b81e2;
  #L3b81e0.  goto L3b820e;
  #L3b81e2.  call temp:= `containsKey`(v3, v2) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L3b81e8.  v0:= temp;
  #L3b81ea.  if v0 == 0 then goto L3b81fc;
  #L3b81ee.  call temp:= `get`(v3, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b81f4.  v2:= temp @kind object;
  #L3b81f6.  v2:= (`org.joda.time.DurationField`) v2 @kind object;
  #L3b81fa.  return v2 @kind object;
  #L3b81fc.  v0:= new `org.joda.time.chrono.LimitChronology$LimitDurationField`;
  #L3b8200.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/chrono/LimitChronology$LimitDurationField;.<init>:(Lorg/joda/time/chrono/LimitChronology;Lorg/joda/time/DurationField;)V` @kind direct;
  #L3b8206.  call temp:= `put`(v3, v2, v0) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b820c.  return v0 @kind object;
  #L3b820e.  return v2 @kind object;
}
procedure `org.joda.time.chrono.LimitChronology` `getInstance`(`org.joda.time.Chronology` v1 @kind object, `org.joda.time.ReadableDateTime` v2 @kind object, `org.joda.time.ReadableDateTime` v3 @kind object) @signature `Lorg/joda/time/chrono/LimitChronology;.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/ReadableDateTime;Lorg/joda/time/ReadableDateTime;)Lorg/joda/time/chrono/LimitChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3b8220.  if v1 == 0 then goto L3b8276;
  #L3b8224.  v0:= 0I;
  #L3b8226.  if v2 != 0 then goto L3b822e;
  #L3b822a.  v2:= v0 @kind object;
  #L3b822c.  goto L3b8236;
  #L3b822e.  call temp:= `toDateTime`(v2) @signature `Lorg/joda/time/ReadableDateTime;.toDateTime:()Lorg/joda/time/DateTime;` @kind interface;
  #L3b8234.  v2:= temp @kind object;
  #L3b8236.  if v3 != 0 then goto L3b823c;
  #L3b823a.  goto L3b8244;
  #L3b823c.  call temp:= `toDateTime`(v3) @signature `Lorg/joda/time/ReadableDateTime;.toDateTime:()Lorg/joda/time/DateTime;` @kind interface;
  #L3b8242.  v0:= temp @kind object;
  #L3b8244.  if v2 == 0 then goto L3b826a;
  #L3b8248.  if v0 == 0 then goto L3b826a;
  #L3b824c.  call temp:= `isBefore`(v2, v0) @signature `Lorg/joda/time/ReadableInstant;.isBefore:(Lorg/joda/time/ReadableInstant;)Z` @kind interface;
  #L3b8252.  v3:= temp;
  #L3b8254.  if v3 == 0 then goto L3b825a;
  #L3b8258.  goto L3b826a;
  #L3b825a.  v1:= new `java.lang.IllegalArgumentException`;
  #L3b825e.  v2:= "The lower limit must be come before than the upper limit" @kind object;
  #L3b8262.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b8268.  throw v1;
  #L3b826a.  v3:= new `org.joda.time.chrono.LimitChronology`;
  #L3b826e.  call `<init>`(v3, v1, v2, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.<init>:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTime;Lorg/joda/time/DateTime;)V` @kind direct;
  #L3b8274.  return v3 @kind object;
  #L3b8276.  v1:= new `java.lang.IllegalArgumentException`;
  #L3b827a.  v2:= "Must supply a chronology" @kind object;
  #L3b827e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b8284.  throw v1;
}
procedure `void` `assemble`(`org.joda.time.chrono.LimitChronology` v2 @kind this, `org.joda.time.chrono.AssembledChronology$Fields` v3 @kind object) @signature `Lorg/joda/time/chrono/LimitChronology;.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3b82bc.  v0:= new `java.util.HashMap`;
  #L3b82c0.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L3b82c6.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.eras` @type ^`org.joda.time.DurationField` @kind object;
  #L3b82ca.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;` @kind direct;
  #L3b82d0.  v1:= temp @kind object;
  #L3b82d2.  v3.`org.joda.time.chrono.AssembledChronology$Fields.eras` @type ^`org.joda.time.DurationField` := v1 @kind object;
  #L3b82d6.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.centuries` @type ^`org.joda.time.DurationField` @kind object;
  #L3b82da.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;` @kind direct;
  #L3b82e0.  v1:= temp @kind object;
  #L3b82e2.  v3.`org.joda.time.chrono.AssembledChronology$Fields.centuries` @type ^`org.joda.time.DurationField` := v1 @kind object;
  #L3b82e6.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.years` @type ^`org.joda.time.DurationField` @kind object;
  #L3b82ea.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;` @kind direct;
  #L3b82f0.  v1:= temp @kind object;
  #L3b82f2.  v3.`org.joda.time.chrono.AssembledChronology$Fields.years` @type ^`org.joda.time.DurationField` := v1 @kind object;
  #L3b82f6.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.months` @type ^`org.joda.time.DurationField` @kind object;
  #L3b82fa.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;` @kind direct;
  #L3b8300.  v1:= temp @kind object;
  #L3b8302.  v3.`org.joda.time.chrono.AssembledChronology$Fields.months` @type ^`org.joda.time.DurationField` := v1 @kind object;
  #L3b8306.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.weekyears` @type ^`org.joda.time.DurationField` @kind object;
  #L3b830a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;` @kind direct;
  #L3b8310.  v1:= temp @kind object;
  #L3b8312.  v3.`org.joda.time.chrono.AssembledChronology$Fields.weekyears` @type ^`org.joda.time.DurationField` := v1 @kind object;
  #L3b8316.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.weeks` @type ^`org.joda.time.DurationField` @kind object;
  #L3b831a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;` @kind direct;
  #L3b8320.  v1:= temp @kind object;
  #L3b8322.  v3.`org.joda.time.chrono.AssembledChronology$Fields.weeks` @type ^`org.joda.time.DurationField` := v1 @kind object;
  #L3b8326.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.days` @type ^`org.joda.time.DurationField` @kind object;
  #L3b832a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;` @kind direct;
  #L3b8330.  v1:= temp @kind object;
  #L3b8332.  v3.`org.joda.time.chrono.AssembledChronology$Fields.days` @type ^`org.joda.time.DurationField` := v1 @kind object;
  #L3b8336.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.halfdays` @type ^`org.joda.time.DurationField` @kind object;
  #L3b833a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;` @kind direct;
  #L3b8340.  v1:= temp @kind object;
  #L3b8342.  v3.`org.joda.time.chrono.AssembledChronology$Fields.halfdays` @type ^`org.joda.time.DurationField` := v1 @kind object;
  #L3b8346.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.hours` @type ^`org.joda.time.DurationField` @kind object;
  #L3b834a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;` @kind direct;
  #L3b8350.  v1:= temp @kind object;
  #L3b8352.  v3.`org.joda.time.chrono.AssembledChronology$Fields.hours` @type ^`org.joda.time.DurationField` := v1 @kind object;
  #L3b8356.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.minutes` @type ^`org.joda.time.DurationField` @kind object;
  #L3b835a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;` @kind direct;
  #L3b8360.  v1:= temp @kind object;
  #L3b8362.  v3.`org.joda.time.chrono.AssembledChronology$Fields.minutes` @type ^`org.joda.time.DurationField` := v1 @kind object;
  #L3b8366.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.seconds` @type ^`org.joda.time.DurationField` @kind object;
  #L3b836a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;` @kind direct;
  #L3b8370.  v1:= temp @kind object;
  #L3b8372.  v3.`org.joda.time.chrono.AssembledChronology$Fields.seconds` @type ^`org.joda.time.DurationField` := v1 @kind object;
  #L3b8376.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.millis` @type ^`org.joda.time.DurationField` @kind object;
  #L3b837a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DurationField;Ljava/util/HashMap;)Lorg/joda/time/DurationField;` @kind direct;
  #L3b8380.  v1:= temp @kind object;
  #L3b8382.  v3.`org.joda.time.chrono.AssembledChronology$Fields.millis` @type ^`org.joda.time.DurationField` := v1 @kind object;
  #L3b8386.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.year` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b838a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b8390.  v1:= temp @kind object;
  #L3b8392.  v3.`org.joda.time.chrono.AssembledChronology$Fields.year` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b8396.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.yearOfEra` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b839a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b83a0.  v1:= temp @kind object;
  #L3b83a2.  v3.`org.joda.time.chrono.AssembledChronology$Fields.yearOfEra` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b83a6.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.yearOfCentury` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b83aa.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b83b0.  v1:= temp @kind object;
  #L3b83b2.  v3.`org.joda.time.chrono.AssembledChronology$Fields.yearOfCentury` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b83b6.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.centuryOfEra` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b83ba.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b83c0.  v1:= temp @kind object;
  #L3b83c2.  v3.`org.joda.time.chrono.AssembledChronology$Fields.centuryOfEra` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b83c6.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.era` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b83ca.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b83d0.  v1:= temp @kind object;
  #L3b83d2.  v3.`org.joda.time.chrono.AssembledChronology$Fields.era` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b83d6.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.dayOfWeek` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b83da.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b83e0.  v1:= temp @kind object;
  #L3b83e2.  v3.`org.joda.time.chrono.AssembledChronology$Fields.dayOfWeek` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b83e6.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.dayOfMonth` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b83ea.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b83f0.  v1:= temp @kind object;
  #L3b83f2.  v3.`org.joda.time.chrono.AssembledChronology$Fields.dayOfMonth` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b83f6.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.dayOfYear` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b83fa.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b8400.  v1:= temp @kind object;
  #L3b8402.  v3.`org.joda.time.chrono.AssembledChronology$Fields.dayOfYear` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b8406.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.monthOfYear` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b840a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b8410.  v1:= temp @kind object;
  #L3b8412.  v3.`org.joda.time.chrono.AssembledChronology$Fields.monthOfYear` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b8416.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.weekOfWeekyear` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b841a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b8420.  v1:= temp @kind object;
  #L3b8422.  v3.`org.joda.time.chrono.AssembledChronology$Fields.weekOfWeekyear` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b8426.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.weekyear` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b842a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b8430.  v1:= temp @kind object;
  #L3b8432.  v3.`org.joda.time.chrono.AssembledChronology$Fields.weekyear` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b8436.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.weekyearOfCentury` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b843a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b8440.  v1:= temp @kind object;
  #L3b8442.  v3.`org.joda.time.chrono.AssembledChronology$Fields.weekyearOfCentury` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b8446.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.millisOfSecond` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b844a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b8450.  v1:= temp @kind object;
  #L3b8452.  v3.`org.joda.time.chrono.AssembledChronology$Fields.millisOfSecond` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b8456.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.millisOfDay` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b845a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b8460.  v1:= temp @kind object;
  #L3b8462.  v3.`org.joda.time.chrono.AssembledChronology$Fields.millisOfDay` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b8466.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.secondOfMinute` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b846a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b8470.  v1:= temp @kind object;
  #L3b8472.  v3.`org.joda.time.chrono.AssembledChronology$Fields.secondOfMinute` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b8476.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.secondOfDay` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b847a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b8480.  v1:= temp @kind object;
  #L3b8482.  v3.`org.joda.time.chrono.AssembledChronology$Fields.secondOfDay` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b8486.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.minuteOfHour` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b848a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b8490.  v1:= temp @kind object;
  #L3b8492.  v3.`org.joda.time.chrono.AssembledChronology$Fields.minuteOfHour` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b8496.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.minuteOfDay` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b849a.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b84a0.  v1:= temp @kind object;
  #L3b84a2.  v3.`org.joda.time.chrono.AssembledChronology$Fields.minuteOfDay` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b84a6.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.hourOfDay` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b84aa.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b84b0.  v1:= temp @kind object;
  #L3b84b2.  v3.`org.joda.time.chrono.AssembledChronology$Fields.hourOfDay` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b84b6.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.hourOfHalfday` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b84ba.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b84c0.  v1:= temp @kind object;
  #L3b84c2.  v3.`org.joda.time.chrono.AssembledChronology$Fields.hourOfHalfday` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b84c6.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.clockhourOfDay` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b84ca.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b84d0.  v1:= temp @kind object;
  #L3b84d2.  v3.`org.joda.time.chrono.AssembledChronology$Fields.clockhourOfDay` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b84d6.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.clockhourOfHalfday` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b84da.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b84e0.  v1:= temp @kind object;
  #L3b84e2.  v3.`org.joda.time.chrono.AssembledChronology$Fields.clockhourOfHalfday` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b84e6.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.halfdayOfDay` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b84ea.  call temp:= `convertField`(v2, v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.convertField:(Lorg/joda/time/DateTimeField;Ljava/util/HashMap;)Lorg/joda/time/DateTimeField;` @kind direct;
  #L3b84f0.  v0:= temp @kind object;
  #L3b84f2.  v3.`org.joda.time.chrono.AssembledChronology$Fields.halfdayOfDay` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b84f6.  return @kind void;
}
procedure `void` `checkLimits`(`org.joda.time.chrono.LimitChronology` v3 @kind this, `long` v4 , `java.lang.String` v6 @kind object) @signature `Lorg/joda/time/chrono/LimitChronology;.checkLimits:(JLjava/lang/String;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3b8508.  v0:= v3.`org.joda.time.chrono.LimitChronology.iLowerLimit` @type ^`org.joda.time.DateTime` @kind object;
  #L3b850c.  if v0 == 0 then goto L3b8530;
  #L3b8510.  call temp:= `getMillis`(v0) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3b8516.  v0:= temp @kind wide;
  #L3b8518.  v2:= lcmp(v4, v0);
  #L3b851c.  if v2 < 0 then goto L3b8522;
  #L3b8520.  goto L3b8530;
  #L3b8522.  v4:= new `org.joda.time.chrono.LimitChronology$LimitException`;
  #L3b8526.  v5:= 1I;
  #L3b8528.  call `<init>`(v4, v3, v6, v5) @signature `Lorg/joda/time/chrono/LimitChronology$LimitException;.<init>:(Lorg/joda/time/chrono/LimitChronology;Ljava/lang/String;Z)V` @kind direct;
  #L3b852e.  throw v4;
  #L3b8530.  v0:= v3.`org.joda.time.chrono.LimitChronology.iUpperLimit` @type ^`org.joda.time.DateTime` @kind object;
  #L3b8534.  if v0 == 0 then goto L3b8558;
  #L3b8538.  call temp:= `getMillis`(v0) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @kind virtual;
  #L3b853e.  v0:= temp @kind wide;
  #L3b8540.  v2:= lcmp(v4, v0);
  #L3b8544.  if v2 >= 0 then goto L3b854a;
  #L3b8548.  goto L3b8558;
  #L3b854a.  v4:= new `org.joda.time.chrono.LimitChronology$LimitException`;
  #L3b854e.  v5:= 0I;
  #L3b8550.  call `<init>`(v4, v3, v6, v5) @signature `Lorg/joda/time/chrono/LimitChronology$LimitException;.<init>:(Lorg/joda/time/chrono/LimitChronology;Ljava/lang/String;Z)V` @kind direct;
  #L3b8556.  throw v4;
  #L3b8558.  return @kind void;
}
procedure `boolean` `equals`(`org.joda.time.chrono.LimitChronology` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/joda/time/chrono/LimitChronology;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b7e10.  v0:= 1I;
  #L3b7e12.  if v4 != v5 then goto L3b7e18;
  #L3b7e16.  return v0;
  #L3b7e18.  v1:= instanceof @variable v5 @type ^`org.joda.time.chrono.LimitChronology` @kind boolean;
  #L3b7e1c.  v2:= 0I;
  #L3b7e1e.  if v1 != 0 then goto L3b7e24;
  #L3b7e22.  return v2;
  #L3b7e24.  v5:= (`org.joda.time.chrono.LimitChronology`) v5 @kind object;
  #L3b7e28.  call temp:= `getBase`(v4) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b7e2e.  v1:= temp @kind object;
  #L3b7e30.  call temp:= `getBase`(v5) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b7e36.  v3:= temp @kind object;
  #L3b7e38.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3b7e3e.  v1:= temp;
  #L3b7e40.  if v1 == 0 then goto L3b7e7e;
  #L3b7e44.  call temp:= `getLowerLimit`(v4) @signature `Lorg/joda/time/chrono/LimitChronology;.getLowerLimit:()Lorg/joda/time/DateTime;` @kind virtual;
  #L3b7e4a.  v1:= temp @kind object;
  #L3b7e4c.  call temp:= `getLowerLimit`(v5) @signature `Lorg/joda/time/chrono/LimitChronology;.getLowerLimit:()Lorg/joda/time/DateTime;` @kind virtual;
  #L3b7e52.  v3:= temp @kind object;
  #L3b7e54.  call temp:= `equals`(v1, v3) @signature `Lorg/joda/time/field/FieldUtils;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3b7e5a.  v1:= temp;
  #L3b7e5c.  if v1 == 0 then goto L3b7e7e;
  #L3b7e60.  call temp:= `getUpperLimit`(v4) @signature `Lorg/joda/time/chrono/LimitChronology;.getUpperLimit:()Lorg/joda/time/DateTime;` @kind virtual;
  #L3b7e66.  v1:= temp @kind object;
  #L3b7e68.  call temp:= `getUpperLimit`(v5) @signature `Lorg/joda/time/chrono/LimitChronology;.getUpperLimit:()Lorg/joda/time/DateTime;` @kind virtual;
  #L3b7e6e.  v5:= temp @kind object;
  #L3b7e70.  call temp:= `equals`(v1, v5) @signature `Lorg/joda/time/field/FieldUtils;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3b7e76.  v5:= temp;
  #L3b7e78.  if v5 == 0 then goto L3b7e7e;
  #L3b7e7c.  goto L3b7e80;
  #L3b7e7e.  v0:= 0I;
  #L3b7e80.  return v0;
}
procedure `long` `getDateTimeMillis`(`org.joda.time.chrono.LimitChronology` v1 @kind this, `int` v2 , `int` v3 , `int` v4 , `int` v5 ) @signature `Lorg/joda/time/chrono/LimitChronology;.getDateTimeMillis:(IIII)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b7fb0.  call temp:= `getBase`(v1) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b7fb6.  v0:= temp @kind object;
  #L3b7fb8.  call temp:= `getDateTimeMillis`(v0, v2, v3, v4, v5) @signature `Lorg/joda/time/Chronology;.getDateTimeMillis:(IIII)J` @kind virtual;
  #L3b7fbe.  v2:= temp @kind wide;
  #L3b7fc0.  v4:= "resulting" @kind object;
  #L3b7fc4.  call `checkLimits`(v1, v2, v4) @signature `Lorg/joda/time/chrono/LimitChronology;.checkLimits:(JLjava/lang/String;)V` @kind virtual;
  #L3b7fca.  return v2 @kind wide;
}
procedure `long` `getDateTimeMillis`(`org.joda.time.chrono.LimitChronology` v8 @kind this, `int` v9 , `int` v10 , `int` v11 , `int` v12 , `int` v13 , `int` v14 , `int` v15 ) @signature `Lorg/joda/time/chrono/LimitChronology;.getDateTimeMillis:(IIIIIII)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3b7fdc.  call temp:= `getBase`(v8) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b7fe2.  v0:= temp @kind object;
  #L3b7fe4.  v1:= v9;
  #L3b7fe6.  v2:= v10;
  #L3b7fe8.  v3:= v11;
  #L3b7fea.  v4:= v12;
  #L3b7fec.  v5:= v13;
  #L3b7fee.  v6:= v14;
  #L3b7ff0.  v7:= v15;
  #L3b7ff2.  call temp:= `getDateTimeMillis`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lorg/joda/time/Chronology;.getDateTimeMillis:(IIIIIII)J` @kind virtual;
  #L3b7ff8.  v9:= temp @kind wide;
  #L3b7ffa.  v11:= "resulting" @kind object;
  #L3b7ffe.  call `checkLimits`(v8, v9, v11) @signature `Lorg/joda/time/chrono/LimitChronology;.checkLimits:(JLjava/lang/String;)V` @kind virtual;
  #L3b8004.  return v9 @kind wide;
}
procedure `long` `getDateTimeMillis`(`org.joda.time.chrono.LimitChronology` v8 @kind this, `long` v9 , `int` v11 , `int` v12 , `int` v13 , `int` v14 ) @signature `Lorg/joda/time/chrono/LimitChronology;.getDateTimeMillis:(JIIII)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3b8018.  v0:= 0I;
  #L3b801a.  call `checkLimits`(v8, v9, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.checkLimits:(JLjava/lang/String;)V` @kind virtual;
  #L3b8020.  call temp:= `getBase`(v8) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b8026.  v1:= temp @kind object;
  #L3b8028.  v2:= v9 @kind wide;
  #L3b802a.  v4:= v11;
  #L3b802c.  v5:= v12;
  #L3b802e.  v6:= v13;
  #L3b8030.  v7:= v14;
  #L3b8032.  call temp:= `getDateTimeMillis`(v1, v2, v4, v5, v6, v7) @signature `Lorg/joda/time/Chronology;.getDateTimeMillis:(JIIII)J` @kind virtual;
  #L3b8038.  v9:= temp @kind wide;
  #L3b803a.  v11:= "resulting" @kind object;
  #L3b803e.  call `checkLimits`(v8, v9, v11) @signature `Lorg/joda/time/chrono/LimitChronology;.checkLimits:(JLjava/lang/String;)V` @kind virtual;
  #L3b8044.  return v9 @kind wide;
}
procedure `org.joda.time.DateTime` `getLowerLimit`(`org.joda.time.chrono.LimitChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/LimitChronology;.getLowerLimit:()Lorg/joda/time/DateTime;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8118.  v0:= v1.`org.joda.time.chrono.LimitChronology.iLowerLimit` @type ^`org.joda.time.DateTime` @kind object;
  #L3b811c.  return v0 @kind object;
}
procedure `org.joda.time.DateTime` `getUpperLimit`(`org.joda.time.chrono.LimitChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/LimitChronology;.getUpperLimit:()Lorg/joda/time/DateTime;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8130.  v0:= v1.`org.joda.time.chrono.LimitChronology.iUpperLimit` @type ^`org.joda.time.DateTime` @kind object;
  #L3b8134.  return v0 @kind object;
}
procedure `int` `hashCode`(`org.joda.time.chrono.LimitChronology` v3 @kind this) @signature `Lorg/joda/time/chrono/LimitChronology;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b7e94.  call temp:= `getLowerLimit`(v3) @signature `Lorg/joda/time/chrono/LimitChronology;.getLowerLimit:()Lorg/joda/time/DateTime;` @kind virtual;
  #L3b7e9a.  v0:= temp @kind object;
  #L3b7e9c.  v1:= 0I;
  #L3b7e9e.  if v0 == 0 then goto L3b7eb4;
  #L3b7ea2.  call temp:= `getLowerLimit`(v3) @signature `Lorg/joda/time/chrono/LimitChronology;.getLowerLimit:()Lorg/joda/time/DateTime;` @kind virtual;
  #L3b7ea8.  v0:= temp @kind object;
  #L3b7eaa.  call temp:= `hashCode`(v0) @signature `Lorg/joda/time/base/AbstractInstant;.hashCode:()I` @kind virtual;
  #L3b7eb0.  v0:= temp;
  #L3b7eb2.  goto L3b7eb6;
  #L3b7eb4.  v0:= 0I;
  #L3b7eb6.  v2:= 317351877I;
  #L3b7ebc.  v0:= v0 + v2 @kind int;
  #L3b7ebe.  call temp:= `getUpperLimit`(v3) @signature `Lorg/joda/time/chrono/LimitChronology;.getUpperLimit:()Lorg/joda/time/DateTime;` @kind virtual;
  #L3b7ec4.  v2:= temp @kind object;
  #L3b7ec6.  if v2 == 0 then goto L3b7eda;
  #L3b7eca.  call temp:= `getUpperLimit`(v3) @signature `Lorg/joda/time/chrono/LimitChronology;.getUpperLimit:()Lorg/joda/time/DateTime;` @kind virtual;
  #L3b7ed0.  v1:= temp @kind object;
  #L3b7ed2.  call temp:= `hashCode`(v1) @signature `Lorg/joda/time/base/AbstractInstant;.hashCode:()I` @kind virtual;
  #L3b7ed8.  v1:= temp;
  #L3b7eda.  v0:= v0 + v1 @kind int;
  #L3b7edc.  call temp:= `getBase`(v3) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b7ee2.  v1:= temp @kind object;
  #L3b7ee4.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3b7eea.  v1:= temp;
  #L3b7eec.  v1:= v1 * 7;
  #L3b7ef0.  v0:= v0 + v1 @kind int;
  #L3b7ef2.  return v0;
}
procedure `java.lang.String` `toString`(`org.joda.time.chrono.LimitChronology` v4 @kind this) @signature `Lorg/joda/time/chrono/LimitChronology;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b7f04.  v0:= new `java.lang.StringBuilder`;
  #L3b7f08.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b7f0e.  v1:= "LimitChronology[" @kind object;
  #L3b7f12.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b7f18.  call temp:= `getBase`(v4) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b7f1e.  v1:= temp @kind object;
  #L3b7f20.  call temp:= `toString`(v1) @signature `Lorg/joda/time/Chronology;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b7f26.  v1:= temp @kind object;
  #L3b7f28.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b7f2e.  v1:= ", " @kind object;
  #L3b7f32.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b7f38.  call temp:= `getLowerLimit`(v4) @signature `Lorg/joda/time/chrono/LimitChronology;.getLowerLimit:()Lorg/joda/time/DateTime;` @kind virtual;
  #L3b7f3e.  v2:= temp @kind object;
  #L3b7f40.  v3:= "NoLimit" @kind object;
  #L3b7f44.  if v2 != 0 then goto L3b7f4c;
  #L3b7f48.  v2:= v3 @kind object;
  #L3b7f4a.  goto L3b7f5c;
  #L3b7f4c.  call temp:= `getLowerLimit`(v4) @signature `Lorg/joda/time/chrono/LimitChronology;.getLowerLimit:()Lorg/joda/time/DateTime;` @kind virtual;
  #L3b7f52.  v2:= temp @kind object;
  #L3b7f54.  call temp:= `toString`(v2) @signature `Lorg/joda/time/base/AbstractDateTime;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b7f5a.  v2:= temp @kind object;
  #L3b7f5c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b7f62.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b7f68.  call temp:= `getUpperLimit`(v4) @signature `Lorg/joda/time/chrono/LimitChronology;.getUpperLimit:()Lorg/joda/time/DateTime;` @kind virtual;
  #L3b7f6e.  v1:= temp @kind object;
  #L3b7f70.  if v1 != 0 then goto L3b7f76;
  #L3b7f74.  goto L3b7f86;
  #L3b7f76.  call temp:= `getUpperLimit`(v4) @signature `Lorg/joda/time/chrono/LimitChronology;.getUpperLimit:()Lorg/joda/time/DateTime;` @kind virtual;
  #L3b7f7c.  v1:= temp @kind object;
  #L3b7f7e.  call temp:= `toString`(v1) @signature `Lorg/joda/time/base/AbstractDateTime;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b7f84.  v3:= temp @kind object;
  #L3b7f86.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b7f8c.  v1:= 93I;
  #L3b7f90.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b7f96.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b7f9c.  v0:= temp @kind object;
  #L3b7f9e.  return v0 @kind object;
}
procedure `org.joda.time.Chronology` `withUTC`(`org.joda.time.chrono.LimitChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/LimitChronology;.withUTC:()Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8058.  v0:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b805c.  call temp:= `withZone`(v1, v0) @signature `Lorg/joda/time/chrono/LimitChronology;.withZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @kind virtual;
  #L3b8062.  v0:= temp @kind object;
  #L3b8064.  return v0 @kind object;
}
procedure `org.joda.time.Chronology` `withZone`(`org.joda.time.chrono.LimitChronology` v3 @kind this, `org.joda.time.DateTimeZone` v4 @kind object) @signature `Lorg/joda/time/chrono/LimitChronology;.withZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b8078.  if v4 != 0 then goto L3b8084;
  #L3b807c.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b8082.  v4:= temp @kind object;
  #L3b8084.  call temp:= `getZone`(v3) @signature `Lorg/joda/time/chrono/AssembledChronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b808a.  v0:= temp @kind object;
  #L3b808c.  if v4 != v0 then goto L3b8092;
  #L3b8090.  return v3 @kind object;
  #L3b8092.  v0:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8096.  if v4 != v0 then goto L3b80a4;
  #L3b809a.  v0:= v3.`org.joda.time.chrono.LimitChronology.iWithUTC` @type ^`org.joda.time.chrono.LimitChronology` @kind object;
  #L3b809e.  if v0 == 0 then goto L3b80a4;
  #L3b80a2.  return v0 @kind object;
  #L3b80a4.  v0:= v3.`org.joda.time.chrono.LimitChronology.iLowerLimit` @type ^`org.joda.time.DateTime` @kind object;
  #L3b80a8.  if v0 == 0 then goto L3b80c2;
  #L3b80ac.  call temp:= `toMutableDateTime`(v0) @signature `Lorg/joda/time/base/AbstractInstant;.toMutableDateTime:()Lorg/joda/time/MutableDateTime;` @kind virtual;
  #L3b80b2.  v0:= temp @kind object;
  #L3b80b4.  call `setZoneRetainFields`(v0, v4) @signature `Lorg/joda/time/MutableDateTime;.setZoneRetainFields:(Lorg/joda/time/DateTimeZone;)V` @kind virtual;
  #L3b80ba.  call temp:= `toDateTime`(v0) @signature `Lorg/joda/time/base/AbstractInstant;.toDateTime:()Lorg/joda/time/DateTime;` @kind virtual;
  #L3b80c0.  v0:= temp @kind object;
  #L3b80c2.  v1:= v3.`org.joda.time.chrono.LimitChronology.iUpperLimit` @type ^`org.joda.time.DateTime` @kind object;
  #L3b80c6.  if v1 == 0 then goto L3b80e0;
  #L3b80ca.  call temp:= `toMutableDateTime`(v1) @signature `Lorg/joda/time/base/AbstractInstant;.toMutableDateTime:()Lorg/joda/time/MutableDateTime;` @kind virtual;
  #L3b80d0.  v1:= temp @kind object;
  #L3b80d2.  call `setZoneRetainFields`(v1, v4) @signature `Lorg/joda/time/MutableDateTime;.setZoneRetainFields:(Lorg/joda/time/DateTimeZone;)V` @kind virtual;
  #L3b80d8.  call temp:= `toDateTime`(v1) @signature `Lorg/joda/time/base/AbstractInstant;.toDateTime:()Lorg/joda/time/DateTime;` @kind virtual;
  #L3b80de.  v1:= temp @kind object;
  #L3b80e0.  call temp:= `getBase`(v3) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b80e6.  v2:= temp @kind object;
  #L3b80e8.  call temp:= `withZone`(v2, v4) @signature `Lorg/joda/time/Chronology;.withZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @kind virtual;
  #L3b80ee.  v2:= temp @kind object;
  #L3b80f0.  call temp:= `getInstance`(v2, v0, v1) @signature `Lorg/joda/time/chrono/LimitChronology;.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/ReadableDateTime;Lorg/joda/time/ReadableDateTime;)Lorg/joda/time/chrono/LimitChronology;` @kind static;
  #L3b80f6.  v0:= temp @kind object;
  #L3b80f8.  v1:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b80fc.  if v4 != v1 then goto L3b8104;
  #L3b8100.  v3.`org.joda.time.chrono.LimitChronology.iWithUTC` @type ^`org.joda.time.chrono.LimitChronology` := v0 @kind object;
  #L3b8104.  return v0 @kind object;
}
