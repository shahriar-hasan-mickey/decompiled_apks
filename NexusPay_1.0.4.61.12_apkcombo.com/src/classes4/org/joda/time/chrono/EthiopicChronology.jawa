record `org.joda.time.chrono.EthiopicChronology` @kind class @AccessFlag PUBLIC_FINAL extends `org.joda.time.chrono.BasicFixedMonthChronology` @kind class {
}
global `int` `@@org.joda.time.chrono.EthiopicChronology.EE` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.joda.time.DateTimeField` `@@org.joda.time.chrono.EthiopicChronology.ERA_FIELD` @AccessFlag PRIVATE_STATIC_FINAL;
global `org.joda.time.chrono.EthiopicChronology` `@@org.joda.time.chrono.EthiopicChronology.INSTANCE_UTC` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.joda.time.chrono.EthiopicChronology.MAX_YEAR` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.joda.time.chrono.EthiopicChronology.MIN_YEAR` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentHashMap` `@@org.joda.time.chrono.EthiopicChronology.cCache` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.EthiopicChronology.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/chrono/EthiopicChronology;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3b34cc.  v0:= new `org.joda.time.chrono.BasicSingleEraDateTimeField`;
  #L3b34d0.  v1:= "EE" @kind object;
  #L3b34d4.  call `<init>`(v0, v1) @signature `Lorg/joda/time/chrono/BasicSingleEraDateTimeField;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b34da.  `@@org.joda.time.chrono.EthiopicChronology.ERA_FIELD` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b34de.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L3b34e2.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L3b34e8.  `@@org.joda.time.chrono.EthiopicChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L3b34ec.  v0:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b34f0.  call temp:= `getInstance`(v0) @signature `Lorg/joda/time/chrono/EthiopicChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/EthiopicChronology;` @kind static;
  #L3b34f6.  v0:= temp @kind object;
  #L3b34f8.  `@@org.joda.time.chrono.EthiopicChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.EthiopicChronology` := v0 @kind object;
  #L3b34fc.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.chrono.EthiopicChronology` v0 @kind this, `org.joda.time.Chronology` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lorg/joda/time/chrono/EthiopicChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3b3510.  call `<init>`(v0, v1, v2, v3) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @kind direct;
  #L3b3516.  return @kind void;
}
procedure `org.joda.time.chrono.EthiopicChronology` `getInstance`() @signature `Lorg/joda/time/chrono/EthiopicChronology;.getInstance:()Lorg/joda/time/chrono/EthiopicChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3b3358.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b335e.  v0:= temp @kind object;
  #L3b3360.  v1:= 4I;
  #L3b3362.  call temp:= `getInstance`(v0, v1) @signature `Lorg/joda/time/chrono/EthiopicChronology;.getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/EthiopicChronology;` @kind static;
  #L3b3368.  v0:= temp @kind object;
  #L3b336a.  return v0 @kind object;
}
procedure `org.joda.time.chrono.EthiopicChronology` `getInstance`(`org.joda.time.DateTimeZone` v1 @kind object) @signature `Lorg/joda/time/chrono/EthiopicChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/EthiopicChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3b337c.  v0:= 4I;
  #L3b337e.  call temp:= `getInstance`(v1, v0) @signature `Lorg/joda/time/chrono/EthiopicChronology;.getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/EthiopicChronology;` @kind static;
  #L3b3384.  v1:= temp @kind object;
  #L3b3386.  return v1 @kind object;
}
procedure `org.joda.time.chrono.EthiopicChronology` `getInstance`(`org.joda.time.DateTimeZone` v13 @kind object, `int` v14 ) @signature `Lorg/joda/time/chrono/EthiopicChronology;.getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/EthiopicChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3b3398.  if v13 != 0 then goto L3b33a4;
  #L3b339c.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b33a2.  v13:= temp @kind object;
  #L3b33a4.  v0:= `@@org.joda.time.chrono.EthiopicChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3b33a8.  call temp:= `get`(v0, v13) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b33ae.  v0:= temp @kind object;
  #L3b33b0.  v0:= (`org.joda.time.chrono.EthiopicChronology`[]) v0 @kind object;
  #L3b33b4.  if v0 != 0 then goto L3b33d4;
  #L3b33b8.  v0:= 7I;
  #L3b33ba.  v0:= new `org.joda.time.chrono.EthiopicChronology`[v0];
  #L3b33be.  v1:= `@@org.joda.time.chrono.EthiopicChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3b33c2.  call temp:= `putIfAbsent`(v1, v13, v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b33c8.  v1:= temp @kind object;
  #L3b33ca.  v1:= (`org.joda.time.chrono.EthiopicChronology`[]) v1 @kind object;
  #L3b33ce.  if v1 == 0 then goto L3b33d4;
  #L3b33d2.  v0:= v1 @kind object;
  #L3b33d4.  v1:= v14 + -1;
  #L3b33d8.  v2:= v0[v1] @kind object;
  #L3b33dc.  if v2 != 0 then goto L3b345c;
  #L3b33e0.  @monitorenter v0
  #L3b33e2.  v2:= v0[v1] @kind object;
  #L3b33e6.  if v2 != 0 then goto L3b3452;
  #L3b33ea.  v2:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b33ee.  v3:= 0I;
  #L3b33f0.  if v13 != v2 then goto L3b342e;
  #L3b33f4.  v13:= new `org.joda.time.chrono.EthiopicChronology`;
  #L3b33f8.  call `<init>`(v13, v3, v3, v14) @signature `Lorg/joda/time/chrono/EthiopicChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @kind direct;
  #L3b33fe.  v2:= new `org.joda.time.DateTime`;
  #L3b3402.  v5:= 1I;
  #L3b3404.  v6:= 1I;
  #L3b3406.  v7:= 1I;
  #L3b3408.  v8:= 0I;
  #L3b340a.  v9:= 0I;
  #L3b340c.  v10:= 0I;
  #L3b340e.  v11:= 0I;
  #L3b3410.  v4:= v2 @kind object;
  #L3b3412.  v12:= v13 @kind object;
  #L3b3414.  call `<init>`(v4, v5, v6, v7, v8, v9, v10, v11, v12) @signature `Lorg/joda/time/DateTime;.<init>:(IIIIIIILorg/joda/time/Chronology;)V` @kind direct;
  #L3b341a.  v4:= new `org.joda.time.chrono.EthiopicChronology`;
  #L3b341e.  call temp:= `getInstance`(v13, v2, v3) @signature `Lorg/joda/time/chrono/LimitChronology;.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/ReadableDateTime;Lorg/joda/time/ReadableDateTime;)Lorg/joda/time/chrono/LimitChronology;` @kind static;
  #L3b3424.  v13:= temp @kind object;
  #L3b3426.  call `<init>`(v4, v13, v3, v14) @signature `Lorg/joda/time/chrono/EthiopicChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @kind direct;
  #L3b342c.  goto L3b344c;
  #L3b342e.  v2:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b3432.  call temp:= `getInstance`(v2, v14) @signature `Lorg/joda/time/chrono/EthiopicChronology;.getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/EthiopicChronology;` @kind static;
  #L3b3438.  v2:= temp @kind object;
  #L3b343a.  v4:= new `org.joda.time.chrono.EthiopicChronology`;
  #L3b343e.  call temp:= `getInstance`(v2, v13) @signature `Lorg/joda/time/chrono/ZonedChronology;.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;` @kind static;
  #L3b3444.  v13:= temp @kind object;
  #L3b3446.  call `<init>`(v4, v13, v3, v14) @signature `Lorg/joda/time/chrono/EthiopicChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @kind direct;
  #L3b344c.  v0[v1]:= v4 @kind object;
  #L3b3450.  v2:= v4 @kind object;
  #L3b3452.  @monitorexit v0
  #L3b3454.  goto L3b345c;
  #L3b3456.  v13:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3b3458.  @monitorexit v0
  #L3b345a.  throw v13;
  #L3b345c.  return v2 @kind object;
  #L3b345e.  v13:= new `java.lang.IllegalArgumentException`;
  #L3b3462.  v0:= new `java.lang.StringBuilder`;
  #L3b3466.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b346c.  v1:= "Invalid min days in first week: " @kind object;
  #L3b3470.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b3476.  call temp:= `append`(v0, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b347c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b3482.  v14:= temp @kind object;
  #L3b3484.  call `<init>`(v13, v14) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b348a.  throw v13;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L3b33d8..L3b33dc] goto L3b345e;
  catch `java.lang.Throwable` @[L3b33e2..L3b345a] goto L3b3456;
}
procedure `org.joda.time.chrono.EthiopicChronology` `getInstanceUTC`() @signature `Lorg/joda/time/chrono/EthiopicChronology;.getInstanceUTC:()Lorg/joda/time/chrono/EthiopicChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3b34b4.  v0:= `@@org.joda.time.chrono.EthiopicChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.EthiopicChronology` @kind object;
  #L3b34b8.  return v0 @kind object;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.chrono.EthiopicChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/EthiopicChronology;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3b3254.  call temp:= `getBase`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b325a.  v0:= temp @kind object;
  #L3b325c.  if v0 != 0 then goto L3b3266;
  #L3b3260.  v0:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b3264.  goto L3b326e;
  #L3b3266.  call temp:= `getZone`(v0) @signature `Lorg/joda/time/Chronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b326c.  v0:= temp @kind object;
  #L3b326e.  call temp:= `getMinimumDaysInFirstWeek`(v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getMinimumDaysInFirstWeek:()I` @kind virtual;
  #L3b3274.  v1:= temp;
  #L3b3276.  call temp:= `getInstance`(v0, v1) @signature `Lorg/joda/time/chrono/EthiopicChronology;.getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/EthiopicChronology;` @kind static;
  #L3b327c.  v0:= temp @kind object;
  #L3b327e.  return v0 @kind object;
}
procedure `void` `assemble`(`org.joda.time.chrono.EthiopicChronology` v2 @kind this, `org.joda.time.chrono.AssembledChronology$Fields` v3 @kind object) @signature `Lorg/joda/time/chrono/EthiopicChronology;.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3b3528.  call temp:= `getBase`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b352e.  v0:= temp @kind object;
  #L3b3530.  if v0 != 0 then goto L3b3584;
  #L3b3534.  call `assemble`(v2, v3) @signature `Lorg/joda/time/chrono/BasicChronology;.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V` @kind super;
  #L3b353a.  v0:= new `org.joda.time.field.SkipDateTimeField`;
  #L3b353e.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.year` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3542.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/field/SkipDateTimeField;.<init>:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3b3548.  v3.`org.joda.time.chrono.AssembledChronology$Fields.year` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b354c.  v0:= new `org.joda.time.field.SkipDateTimeField`;
  #L3b3550.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.weekyear` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3554.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/field/SkipDateTimeField;.<init>:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3b355a.  v3.`org.joda.time.chrono.AssembledChronology$Fields.weekyear` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b355e.  v0:= `@@org.joda.time.chrono.EthiopicChronology.ERA_FIELD` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3562.  v3.`org.joda.time.chrono.AssembledChronology$Fields.era` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b3566.  v0:= new `org.joda.time.chrono.BasicMonthOfYearDateTimeField`;
  #L3b356a.  v1:= 13I;
  #L3b356e.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.<init>:(Lorg/joda/time/chrono/BasicChronology;I)V` @kind direct;
  #L3b3574.  v3.`org.joda.time.chrono.AssembledChronology$Fields.monthOfYear` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b3578.  call temp:= `getDurationField`(v0) @signature `Lorg/joda/time/DateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b357e.  v0:= temp @kind object;
  #L3b3580.  v3.`org.joda.time.chrono.AssembledChronology$Fields.months` @type ^`org.joda.time.DurationField` := v0 @kind object;
  #L3b3584.  return @kind void;
}
procedure `long` `calculateFirstDayOfYearMillis`(`org.joda.time.chrono.EthiopicChronology` v4 @kind this, `int` v5 ) @signature `Lorg/joda/time/chrono/EthiopicChronology;.calculateFirstDayOfYearMillis:(I)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b3290.  v0:= v5 + -1963;
  #L3b3294.  if v0 > 0 then goto L3b32a2;
  #L3b3298.  v5:= v0 + 3;
  #L3b329c.  v5:= v5 ^> 2;
  #L3b32a0.  goto L3b32ba;
  #L3b32a2.  v1:= v0 ^> 2;
  #L3b32a6.  call temp:= `isLeapYear`(v4, v5) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.isLeapYear:(I)Z` @kind virtual;
  #L3b32ac.  v5:= temp;
  #L3b32ae.  if v5 != 0 then goto L3b32b8;
  #L3b32b2.  v5:= v1 + 1;
  #L3b32b6.  goto L3b32ba;
  #L3b32b8.  v5:= v1;
  #L3b32ba.  v0:= (`long`) v0 @kind i2l;
  #L3b32bc.  v2:= 365L;
  #L3b32c0.  v0:= v0 * v2 @kind long;
  #L3b32c4.  v2:= (`long`) v5 @kind i2l;
  #L3b32c6.  v0:= v0 + v2 @kind long;
  #L3b32c8.  v2:= 86400000L;
  #L3b32ce.  v0:= v0 * v2 @kind long;
  #L3b32d2.  v2:= 21859200000L;
  #L3b32dc.  v0:= v0 + v2 @kind long;
  #L3b32de.  return v0 @kind wide;
}
procedure `long` `getApproxMillisAtEpochDividedByTwo`(`org.joda.time.chrono.EthiopicChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/EthiopicChronology;.getApproxMillisAtEpochDividedByTwo:()J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b32f0.  v0:= 30962844000000L;
  #L3b32fa.  return v0 @kind wide;
}
procedure `int` `getMaxYear`(`org.joda.time.chrono.EthiopicChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/EthiopicChronology;.getMaxYear:()I` @AccessFlag  {
    temp;
    v0;

  #L3b3224.  v0:= 292272984I;
  #L3b322a.  return v0;
}
procedure `int` `getMinYear`(`org.joda.time.chrono.EthiopicChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/EthiopicChronology;.getMinYear:()I` @AccessFlag  {
    temp;
    v0;

  #L3b323c.  v0:= -292269337I;
  #L3b3242.  return v0;
}
procedure `boolean` `isLeapDay`(`org.joda.time.chrono.EthiopicChronology` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/chrono/EthiopicChronology;.isLeapDay:(J)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b31e0.  call temp:= `dayOfMonth`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.dayOfMonth:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b31e6.  v0:= temp @kind object;
  #L3b31e8.  call temp:= `get`(v0, v3) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3b31ee.  v0:= temp;
  #L3b31f0.  v1:= 6I;
  #L3b31f2.  if v0 != v1 then goto L3b320e;
  #L3b31f6.  call temp:= `monthOfYear`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.monthOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b31fc.  v0:= temp @kind object;
  #L3b31fe.  call temp:= `isLeap`(v0, v3) @signature `Lorg/joda/time/DateTimeField;.isLeap:(J)Z` @kind virtual;
  #L3b3204.  v3:= temp;
  #L3b3206.  if v3 == 0 then goto L3b320e;
  #L3b320a.  v3:= 1I;
  #L3b320c.  goto L3b3210;
  #L3b320e.  v3:= 0I;
  #L3b3210.  return v3;
}
procedure `org.joda.time.Chronology` `withUTC`(`org.joda.time.chrono.EthiopicChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/EthiopicChronology;.withUTC:()Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b330c.  v0:= `@@org.joda.time.chrono.EthiopicChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.EthiopicChronology` @kind object;
  #L3b3310.  return v0 @kind object;
}
procedure `org.joda.time.Chronology` `withZone`(`org.joda.time.chrono.EthiopicChronology` v1 @kind this, `org.joda.time.DateTimeZone` v2 @kind object) @signature `Lorg/joda/time/chrono/EthiopicChronology;.withZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3324.  if v2 != 0 then goto L3b3330;
  #L3b3328.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b332e.  v2:= temp @kind object;
  #L3b3330.  call temp:= `getZone`(v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b3336.  v0:= temp @kind object;
  #L3b3338.  if v2 != v0 then goto L3b333e;
  #L3b333c.  return v1 @kind object;
  #L3b333e.  call temp:= `getInstance`(v2) @signature `Lorg/joda/time/chrono/EthiopicChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/EthiopicChronology;` @kind static;
  #L3b3344.  v2:= temp @kind object;
  #L3b3346.  return v2 @kind object;
}
