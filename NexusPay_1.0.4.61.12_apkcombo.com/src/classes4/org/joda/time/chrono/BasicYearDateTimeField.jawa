record `org.joda.time.chrono.BasicYearDateTimeField` @kind class @AccessFlag  extends `org.joda.time.field.ImpreciseDateTimeField` @kind class {
  `org.joda.time.chrono.BasicChronology` `org.joda.time.chrono.BasicYearDateTimeField.iChronology` @AccessFlag PROTECTED_FINAL;
}
global `long` `@@org.joda.time.chrono.BasicYearDateTimeField.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.chrono.BasicYearDateTimeField` v3 @kind this, `org.joda.time.chrono.BasicChronology` v4 @kind object) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.<init>:(Lorg/joda/time/chrono/BasicChronology;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3b2a4c.  call temp:= `year`() @signature `Lorg/joda/time/DateTimeFieldType;.year:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b2a52.  v0:= temp @kind object;
  #L3b2a54.  call temp:= `getAverageMillisPerYear`(v4) @signature `Lorg/joda/time/chrono/BasicChronology;.getAverageMillisPerYear:()J` @kind virtual;
  #L3b2a5a.  v1:= temp @kind wide;
  #L3b2a5c.  call `<init>`(v3, v0, v1) @signature `Lorg/joda/time/field/ImpreciseDateTimeField;.<init>:(Lorg/joda/time/DateTimeFieldType;J)V` @kind direct;
  #L3b2a62.  v3.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` := v4 @kind object;
  #L3b2a66.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.chrono.BasicYearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3b281c.  v0:= v1.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b2820.  call temp:= `year`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b2826.  v0:= temp @kind object;
  #L3b2828.  return v0 @kind object;
}
procedure `long` `add`(`org.joda.time.chrono.BasicYearDateTimeField` v1 @kind this, `long` v2 , `int` v4 ) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.add:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b283c.  if v4 != 0 then goto L3b2842;
  #L3b2840.  return v2 @kind wide;
  #L3b2842.  call temp:= `get`(v1, v2) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.get:(J)I` @kind virtual;
  #L3b2848.  v0:= temp;
  #L3b284a.  call temp:= `safeAdd`(v0, v4) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(II)I` @kind static;
  #L3b2850.  v4:= temp;
  #L3b2852.  call temp:= `set`(v1, v2, v4) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.set:(JI)J` @kind virtual;
  #L3b2858.  v2:= temp @kind wide;
  #L3b285a.  return v2 @kind wide;
}
procedure `long` `add`(`org.joda.time.chrono.BasicYearDateTimeField` v0 @kind this, `long` v1 , `long` v3 ) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.add:(JJ)J` @AccessFlag PUBLIC {
    temp;

  #L3b286c.  call temp:= `safeToInt`(v3) @signature `Lorg/joda/time/field/FieldUtils;.safeToInt:(J)I` @kind static;
  #L3b2872.  v3:= temp;
  #L3b2874.  call temp:= `add`(v0, v1, v3) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.add:(JI)J` @kind virtual;
  #L3b287a.  v1:= temp @kind wide;
  #L3b287c.  return v1 @kind wide;
}
procedure `long` `addWrapField`(`org.joda.time.chrono.BasicYearDateTimeField` v3 @kind this, `long` v4 , `int` v6 ) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.addWrapField:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b2890.  if v6 != 0 then goto L3b2896;
  #L3b2894.  return v4 @kind wide;
  #L3b2896.  v0:= v3.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b289a.  call temp:= `getYear`(v0, v4) @signature `Lorg/joda/time/chrono/BasicChronology;.getYear:(J)I` @kind virtual;
  #L3b28a0.  v0:= temp;
  #L3b28a2.  v1:= v3.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b28a6.  call temp:= `getMinYear`(v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getMinYear:()I` @kind virtual;
  #L3b28ac.  v1:= temp;
  #L3b28ae.  v2:= v3.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b28b2.  call temp:= `getMaxYear`(v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getMaxYear:()I` @kind virtual;
  #L3b28b8.  v2:= temp;
  #L3b28ba.  call temp:= `getWrappedValue`(v0, v6, v1, v2) @signature `Lorg/joda/time/field/FieldUtils;.getWrappedValue:(IIII)I` @kind static;
  #L3b28c0.  v6:= temp;
  #L3b28c2.  call temp:= `set`(v3, v4, v6) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.set:(JI)J` @kind virtual;
  #L3b28c8.  v4:= temp @kind wide;
  #L3b28ca.  return v4 @kind wide;
}
procedure `int` `get`(`org.joda.time.chrono.BasicYearDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.get:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b278c.  v0:= v1.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b2790.  call temp:= `getYear`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getYear:(J)I` @kind virtual;
  #L3b2796.  v2:= temp;
  #L3b2798.  return v2;
}
procedure `long` `getDifferenceAsLong`(`org.joda.time.chrono.BasicYearDateTimeField` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.getDifferenceAsLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b28dc.  v0:= lcmp(v2, v4);
  #L3b28e0.  if v0 >= 0 then goto L3b28f4;
  #L3b28e4.  v0:= v1.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b28e8.  call temp:= `getYearDifference`(v0, v4, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearDifference:(JJ)J` @kind virtual;
  #L3b28ee.  v2:= temp @kind wide;
  #L3b28f0.  v2:= -v2 @kind long;
  #L3b28f2.  return v2 @kind wide;
  #L3b28f4.  v0:= v1.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b28f8.  call temp:= `getYearDifference`(v0, v2, v4) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearDifference:(JJ)J` @kind virtual;
  #L3b28fe.  v2:= temp @kind wide;
  #L3b2900.  return v2 @kind wide;
}
procedure `int` `getLeapAmount`(`org.joda.time.chrono.BasicYearDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.getLeapAmount:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b27ac.  v0:= v1.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b27b0.  call temp:= `get`(v1, v2) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.get:(J)I` @kind virtual;
  #L3b27b6.  v2:= temp;
  #L3b27b8.  call temp:= `isLeapYear`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.isLeapYear:(I)Z` @kind virtual;
  #L3b27be.  v2:= temp;
  #L3b27c0.  if v2 == 0 then goto L3b27c8;
  #L3b27c4.  v2:= 1I;
  #L3b27c6.  return v2;
  #L3b27c8.  v2:= 0I;
  #L3b27ca.  return v2;
}
procedure `org.joda.time.DurationField` `getLeapDurationField`(`org.joda.time.chrono.BasicYearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.getLeapDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2a18.  v0:= v1.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b2a1c.  call temp:= `days`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.days:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b2a22.  v0:= temp @kind object;
  #L3b2a24.  return v0 @kind object;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.BasicYearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.getMaximumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b27dc.  v0:= v1.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b27e0.  call temp:= `getMaxYear`(v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getMaxYear:()I` @kind virtual;
  #L3b27e6.  v0:= temp;
  #L3b27e8.  return v0;
}
procedure `int` `getMinimumValue`(`org.joda.time.chrono.BasicYearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.getMinimumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b27fc.  v0:= v1.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b2800.  call temp:= `getMinYear`(v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getMinYear:()I` @kind virtual;
  #L3b2806.  v0:= temp;
  #L3b2808.  return v0;
}
procedure `org.joda.time.DurationField` `getRangeDurationField`(`org.joda.time.chrono.BasicYearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2a38.  v0:= 0I;
  #L3b2a3a.  return v0 @kind object;
}
procedure `boolean` `isLeap`(`org.joda.time.chrono.BasicYearDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.isLeap:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2750.  v0:= v1.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b2754.  call temp:= `get`(v1, v2) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.get:(J)I` @kind virtual;
  #L3b275a.  v2:= temp;
  #L3b275c.  call temp:= `isLeapYear`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.isLeapYear:(I)Z` @kind virtual;
  #L3b2762.  v2:= temp;
  #L3b2764.  return v2;
}
procedure `boolean` `isLenient`(`org.joda.time.chrono.BasicYearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.isLenient:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2778.  v0:= 0I;
  #L3b277a.  return v0;
}
procedure `long` `remainder`(`org.joda.time.chrono.BasicYearDateTimeField` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.remainder:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b2914.  call temp:= `roundFloor`(v2, v3) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3b291a.  v0:= temp @kind wide;
  #L3b291c.  v3:= v3 - v0 @kind long;
  #L3b291e.  return v3 @kind wide;
}
procedure `long` `roundCeiling`(`org.joda.time.chrono.BasicYearDateTimeField` v4 @kind this, `long` v5 ) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.roundCeiling:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b2930.  call temp:= `get`(v4, v5) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.get:(J)I` @kind virtual;
  #L3b2936.  v0:= temp;
  #L3b2938.  v1:= v4.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b293c.  call temp:= `getYearMillis`(v1, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMillis:(I)J` @kind virtual;
  #L3b2942.  v1:= temp @kind wide;
  #L3b2944.  v3:= lcmp(v5, v1);
  #L3b2948.  if v3 == 0 then goto L3b295c;
  #L3b294c.  v5:= v4.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b2950.  v0:= v0 + 1;
  #L3b2954.  call temp:= `getYearMillis`(v5, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMillis:(I)J` @kind virtual;
  #L3b295a.  v5:= temp @kind wide;
  #L3b295c.  return v5 @kind wide;
}
procedure `long` `roundFloor`(`org.joda.time.chrono.BasicYearDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.roundFloor:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2970.  v0:= v1.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b2974.  call temp:= `get`(v1, v2) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.get:(J)I` @kind virtual;
  #L3b297a.  v2:= temp;
  #L3b297c.  call temp:= `getYearMillis`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getYearMillis:(I)J` @kind virtual;
  #L3b2982.  v2:= temp @kind wide;
  #L3b2984.  return v2 @kind wide;
}
procedure `long` `set`(`org.joda.time.chrono.BasicYearDateTimeField` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.set:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b2998.  v0:= v2.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b299c.  call temp:= `getMinYear`(v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getMinYear:()I` @kind virtual;
  #L3b29a2.  v0:= temp;
  #L3b29a4.  v1:= v2.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b29a8.  call temp:= `getMaxYear`(v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getMaxYear:()I` @kind virtual;
  #L3b29ae.  v1:= temp;
  #L3b29b0.  call `verifyValueBounds`(v2, v5, v0, v1) @signature `Lorg/joda/time/field/FieldUtils;.verifyValueBounds:(Lorg/joda/time/DateTimeField;III)V` @kind static;
  #L3b29b6.  v0:= v2.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b29ba.  call temp:= `setYear`(v0, v3, v5) @signature `Lorg/joda/time/chrono/BasicChronology;.setYear:(JI)J` @kind virtual;
  #L3b29c0.  v3:= temp @kind wide;
  #L3b29c2.  return v3 @kind wide;
}
procedure `long` `setExtended`(`org.joda.time.chrono.BasicYearDateTimeField` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lorg/joda/time/chrono/BasicYearDateTimeField;.setExtended:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b29d4.  v0:= v2.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b29d8.  call temp:= `getMinYear`(v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getMinYear:()I` @kind virtual;
  #L3b29de.  v0:= temp;
  #L3b29e0.  v0:= v0 + -1;
  #L3b29e4.  v1:= v2.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b29e8.  call temp:= `getMaxYear`(v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getMaxYear:()I` @kind virtual;
  #L3b29ee.  v1:= temp;
  #L3b29f0.  v1:= v1 + 1;
  #L3b29f4.  call `verifyValueBounds`(v2, v5, v0, v1) @signature `Lorg/joda/time/field/FieldUtils;.verifyValueBounds:(Lorg/joda/time/DateTimeField;III)V` @kind static;
  #L3b29fa.  v0:= v2.`org.joda.time.chrono.BasicYearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b29fe.  call temp:= `setYear`(v0, v3, v5) @signature `Lorg/joda/time/chrono/BasicChronology;.setYear:(JI)J` @kind virtual;
  #L3b2a04.  v3:= temp @kind wide;
  #L3b2a06.  return v3 @kind wide;
}
