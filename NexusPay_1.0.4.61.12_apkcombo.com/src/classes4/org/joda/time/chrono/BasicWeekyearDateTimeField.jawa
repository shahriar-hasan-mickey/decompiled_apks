record `org.joda.time.chrono.BasicWeekyearDateTimeField` @kind class @AccessFlag FINAL extends `org.joda.time.field.ImpreciseDateTimeField` @kind class {
  `org.joda.time.chrono.BasicChronology` `org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@org.joda.time.chrono.BasicWeekyearDateTimeField.WEEK_53` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.BasicWeekyearDateTimeField.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v3 @kind this, `org.joda.time.chrono.BasicChronology` v4 @kind object) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.<init>:(Lorg/joda/time/chrono/BasicChronology;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3b2724.  call temp:= `weekyear`() @signature `Lorg/joda/time/DateTimeFieldType;.weekyear:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b272a.  v0:= temp @kind object;
  #L3b272c.  call temp:= `getAverageMillisPerYear`(v4) @signature `Lorg/joda/time/chrono/BasicChronology;.getAverageMillisPerYear:()J` @kind virtual;
  #L3b2732.  v1:= temp @kind wide;
  #L3b2734.  call `<init>`(v3, v0, v1) @signature `Lorg/joda/time/field/ImpreciseDateTimeField;.<init>:(Lorg/joda/time/DateTimeFieldType;J)V` @kind direct;
  #L3b273a.  v3.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` := v4 @kind object;
  #L3b273e.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3b24a0.  v0:= v1.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b24a4.  call temp:= `weekyear`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.weekyear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b24aa.  v0:= temp @kind object;
  #L3b24ac.  return v0 @kind object;
}
procedure `long` `add`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v1 @kind this, `long` v2 , `int` v4 ) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.add:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b24c0.  if v4 != 0 then goto L3b24c6;
  #L3b24c4.  return v2 @kind wide;
  #L3b24c6.  call temp:= `get`(v1, v2) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.get:(J)I` @kind virtual;
  #L3b24cc.  v0:= temp;
  #L3b24ce.  v0:= v0 + v4 @kind int;
  #L3b24d0.  call temp:= `set`(v1, v2, v0) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.set:(JI)J` @kind virtual;
  #L3b24d6.  v2:= temp @kind wide;
  #L3b24d8.  return v2 @kind wide;
}
procedure `long` `add`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v0 @kind this, `long` v1 , `long` v3 ) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.add:(JJ)J` @AccessFlag PUBLIC {
    temp;

  #L3b24ec.  call temp:= `safeToInt`(v3) @signature `Lorg/joda/time/field/FieldUtils;.safeToInt:(J)I` @kind static;
  #L3b24f2.  v3:= temp;
  #L3b24f4.  call temp:= `add`(v0, v1, v3) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.add:(JI)J` @kind virtual;
  #L3b24fa.  v1:= temp @kind wide;
  #L3b24fc.  return v1 @kind wide;
}
procedure `long` `addWrapField`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v0 @kind this, `long` v1 , `int` v3 ) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.addWrapField:(JI)J` @AccessFlag PUBLIC {
    temp;

  #L3b2510.  call temp:= `add`(v0, v1, v3) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.add:(JI)J` @kind virtual;
  #L3b2516.  v1:= temp @kind wide;
  #L3b2518.  return v1 @kind wide;
}
procedure `int` `get`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.get:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2414.  v0:= v1.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b2418.  call temp:= `getWeekyear`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getWeekyear:(J)I` @kind virtual;
  #L3b241e.  v2:= temp;
  #L3b2420.  return v2;
}
procedure `long` `getDifferenceAsLong`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v5 @kind this, `long` v6 , `long` v8 ) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.getDifferenceAsLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b252c.  v0:= lcmp(v6, v8);
  #L3b2530.  if v0 >= 0 then goto L3b2542;
  #L3b2534.  call temp:= `getDifference`(v5, v8, v6) @signature `Lorg/joda/time/field/ImpreciseDateTimeField;.getDifference:(JJ)I` @kind virtual;
  #L3b253a.  v6:= temp;
  #L3b253c.  v6:= -v6 @kind int;
  #L3b253e.  v6:= (`long`) v6 @kind i2l;
  #L3b2540.  return v6 @kind wide;
  #L3b2542.  call temp:= `get`(v5, v6) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.get:(J)I` @kind virtual;
  #L3b2548.  v0:= temp;
  #L3b254a.  call temp:= `get`(v5, v8) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.get:(J)I` @kind virtual;
  #L3b2550.  v1:= temp;
  #L3b2552.  call temp:= `remainder`(v5, v6) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.remainder:(J)J` @kind virtual;
  #L3b2558.  v6:= temp @kind wide;
  #L3b255a.  call temp:= `remainder`(v5, v8) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.remainder:(J)J` @kind virtual;
  #L3b2560.  v8:= temp @kind wide;
  #L3b2562.  v2:= 31449600000L;
  #L3b256c.  v4:= lcmp(v8, v2);
  #L3b2570.  if v4 < 0 then goto L3b2590;
  #L3b2574.  v2:= v5.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b2578.  call temp:= `getWeeksInYear`(v2, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getWeeksInYear:(I)I` @kind virtual;
  #L3b257e.  v2:= temp;
  #L3b2580.  v3:= 52I;
  #L3b2584.  if v2 > v3 then goto L3b2590;
  #L3b2588.  v2:= 604800000L;
  #L3b258e.  v8:= v8 - v2 @kind long;
  #L3b2590.  v0:= v0 - v1 @kind int;
  #L3b2592.  v1:= lcmp(v6, v8);
  #L3b2596.  if v1 >= 0 then goto L3b259e;
  #L3b259a.  v0:= v0 + -1;
  #L3b259e.  v6:= (`long`) v0 @kind i2l;
  #L3b25a0.  return v6 @kind wide;
}
procedure `int` `getLeapAmount`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.getLeapAmount:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2434.  v0:= v1.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b2438.  call temp:= `getWeekyear`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getWeekyear:(J)I` @kind virtual;
  #L3b243e.  v2:= temp;
  #L3b2440.  call temp:= `getWeeksInYear`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getWeeksInYear:(I)I` @kind virtual;
  #L3b2446.  v2:= temp;
  #L3b2448.  v2:= v2 + -52;
  #L3b244c.  return v2;
}
procedure `org.joda.time.DurationField` `getLeapDurationField`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.getLeapDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b26f0.  v0:= v1.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b26f4.  call temp:= `weeks`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.weeks:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b26fa.  v0:= temp @kind object;
  #L3b26fc.  return v0 @kind object;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.getMaximumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2460.  v0:= v1.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b2464.  call temp:= `getMaxYear`(v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getMaxYear:()I` @kind virtual;
  #L3b246a.  v0:= temp;
  #L3b246c.  return v0;
}
procedure `int` `getMinimumValue`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.getMinimumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2480.  v0:= v1.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b2484.  call temp:= `getMinYear`(v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getMinYear:()I` @kind virtual;
  #L3b248a.  v0:= temp;
  #L3b248c.  return v0;
}
procedure `org.joda.time.DurationField` `getRangeDurationField`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2710.  v0:= 0I;
  #L3b2712.  return v0 @kind object;
}
procedure `boolean` `isLeap`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.isLeap:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b23cc.  v0:= v1.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b23d0.  call temp:= `getWeekyear`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getWeekyear:(J)I` @kind virtual;
  #L3b23d6.  v2:= temp;
  #L3b23d8.  call temp:= `getWeeksInYear`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getWeeksInYear:(I)I` @kind virtual;
  #L3b23de.  v2:= temp;
  #L3b23e0.  v3:= 52I;
  #L3b23e4.  if v2 <= v3 then goto L3b23ec;
  #L3b23e8.  v2:= 1I;
  #L3b23ea.  goto L3b23ee;
  #L3b23ec.  v2:= 0I;
  #L3b23ee.  return v2;
}
procedure `boolean` `isLenient`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.isLenient:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2400.  v0:= 0I;
  #L3b2402.  return v0;
}
procedure `long` `remainder`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.remainder:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b25b4.  call temp:= `roundFloor`(v2, v3) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3b25ba.  v0:= temp @kind wide;
  #L3b25bc.  v3:= v3 - v0 @kind long;
  #L3b25be.  return v3 @kind wide;
}
procedure `long` `roundFloor`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v4 @kind this, `long` v5 ) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.roundFloor:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b25d0.  v0:= v4.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b25d4.  call temp:= `weekOfWeekyear`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.weekOfWeekyear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b25da.  v0:= temp @kind object;
  #L3b25dc.  call temp:= `roundFloor`(v0, v5) @signature `Lorg/joda/time/DateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3b25e2.  v5:= temp @kind wide;
  #L3b25e4.  v0:= v4.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b25e8.  call temp:= `getWeekOfWeekyear`(v0, v5) @signature `Lorg/joda/time/chrono/BasicChronology;.getWeekOfWeekyear:(J)I` @kind virtual;
  #L3b25ee.  v0:= temp;
  #L3b25f0.  v1:= 1I;
  #L3b25f2.  if v0 <= v1 then goto L3b2606;
  #L3b25f6.  v2:= 604800000L;
  #L3b25fc.  v0:= v0 - v1 @kind int;
  #L3b25fe.  v0:= (`long`) v0 @kind i2l;
  #L3b2600.  v0:= v0 * v2 @kind long;
  #L3b2604.  v5:= v5 - v0 @kind long;
  #L3b2606.  return v5 @kind wide;
}
procedure `long` `set`(`org.joda.time.chrono.BasicWeekyearDateTimeField` v7 @kind this, `long` v8 , `int` v10 ) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.set:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3b2618.  call temp:= `abs`(v10) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L3b261e.  v0:= temp;
  #L3b2620.  v1:= v7.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b2624.  call temp:= `getMinYear`(v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getMinYear:()I` @kind virtual;
  #L3b262a.  v1:= temp;
  #L3b262c.  v2:= v7.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b2630.  call temp:= `getMaxYear`(v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getMaxYear:()I` @kind virtual;
  #L3b2636.  v2:= temp;
  #L3b2638.  call `verifyValueBounds`(v7, v0, v1, v2) @signature `Lorg/joda/time/field/FieldUtils;.verifyValueBounds:(Lorg/joda/time/DateTimeField;III)V` @kind static;
  #L3b263e.  call temp:= `get`(v7, v8) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.get:(J)I` @kind virtual;
  #L3b2644.  v0:= temp;
  #L3b2646.  if v0 != v10 then goto L3b264c;
  #L3b264a.  return v8 @kind wide;
  #L3b264c.  v1:= v7.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b2650.  call temp:= `getDayOfWeek`(v1, v8) @signature `Lorg/joda/time/chrono/BasicChronology;.getDayOfWeek:(J)I` @kind virtual;
  #L3b2656.  v1:= temp;
  #L3b2658.  v2:= v7.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b265c.  call temp:= `getWeeksInYear`(v2, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getWeeksInYear:(I)I` @kind virtual;
  #L3b2662.  v0:= temp;
  #L3b2664.  v2:= v7.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b2668.  call temp:= `getWeeksInYear`(v2, v10) @signature `Lorg/joda/time/chrono/BasicChronology;.getWeeksInYear:(I)I` @kind virtual;
  #L3b266e.  v2:= temp;
  #L3b2670.  if v2 >= v0 then goto L3b2676;
  #L3b2674.  v0:= v2;
  #L3b2676.  v2:= v7.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b267a.  call temp:= `getWeekOfWeekyear`(v2, v8) @signature `Lorg/joda/time/chrono/BasicChronology;.getWeekOfWeekyear:(J)I` @kind virtual;
  #L3b2680.  v2:= temp;
  #L3b2682.  if v2 <= v0 then goto L3b2688;
  #L3b2686.  goto L3b268a;
  #L3b2688.  v0:= v2;
  #L3b268a.  v2:= v7.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b268e.  call temp:= `setYear`(v2, v8, v10) @signature `Lorg/joda/time/chrono/BasicChronology;.setYear:(JI)J` @kind virtual;
  #L3b2694.  v8:= temp @kind wide;
  #L3b2696.  call temp:= `get`(v7, v8) @signature `Lorg/joda/time/chrono/BasicWeekyearDateTimeField;.get:(J)I` @kind virtual;
  #L3b269c.  v2:= temp;
  #L3b269e.  v3:= 604800000L;
  #L3b26a4.  if v2 >= v10 then goto L3b26ac;
  #L3b26a8.  v8:= v8 + v3 @kind long;
  #L3b26aa.  goto L3b26b2;
  #L3b26ac.  if v2 <= v10 then goto L3b26b2;
  #L3b26b0.  v8:= v8 - v3 @kind long;
  #L3b26b2.  v10:= v7.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b26b6.  call temp:= `getWeekOfWeekyear`(v10, v8) @signature `Lorg/joda/time/chrono/BasicChronology;.getWeekOfWeekyear:(J)I` @kind virtual;
  #L3b26bc.  v10:= temp;
  #L3b26be.  v0:= v0 - v10 @kind int;
  #L3b26c0.  v5:= (`long`) v0 @kind i2l;
  #L3b26c2.  v5:= v5 * v3 @kind long;
  #L3b26c6.  v8:= v8 + v5 @kind long;
  #L3b26c8.  v10:= v7.`org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b26cc.  call temp:= `dayOfWeek`(v10) @signature `Lorg/joda/time/chrono/AssembledChronology;.dayOfWeek:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b26d2.  v10:= temp @kind object;
  #L3b26d4.  call temp:= `set`(v10, v8, v1) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3b26da.  v8:= temp @kind wide;
  #L3b26dc.  return v8 @kind wide;
}
