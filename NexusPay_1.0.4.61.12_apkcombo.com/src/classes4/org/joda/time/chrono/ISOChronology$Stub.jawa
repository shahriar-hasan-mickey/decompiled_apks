record `org.joda.time.chrono.ISOChronology$Stub` @kind class @AccessFlag FINAL extends `java.io.Serializable` @kind interface {
  `org.joda.time.DateTimeZone` `org.joda.time.chrono.ISOChronology$Stub.iZone` @AccessFlag PRIVATE_TRANSIENT;
}
global `long` `@@org.joda.time.chrono.ISOChronology$Stub.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.chrono.ISOChronology$Stub` v0 @kind this, `org.joda.time.DateTimeZone` v1 @kind object) @signature `Lorg/joda/time/chrono/ISOChronology$Stub;.<init>:(Lorg/joda/time/DateTimeZone;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3b602c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b6032.  v0.`org.joda.time.chrono.ISOChronology$Stub.iZone` @type ^`org.joda.time.DateTimeZone` := v1 @kind object;
  #L3b6036.  return @kind void;
}
procedure `void` `readObject`(`org.joda.time.chrono.ISOChronology$Stub` v0 @kind this, `java.io.ObjectInputStream` v1 @kind object) @signature `Lorg/joda/time/chrono/ISOChronology$Stub;.readObject:(Ljava/io/ObjectInputStream;)V` @AccessFlag PRIVATE {
    temp;

  #L3b6048.  call temp:= `readObject`(v1) @signature `Ljava/io/ObjectInputStream;.readObject:()Ljava/lang/Object;` @kind virtual;
  #L3b604e.  v1:= temp @kind object;
  #L3b6050.  v1:= (`org.joda.time.DateTimeZone`) v1 @kind object;
  #L3b6054.  v0.`org.joda.time.chrono.ISOChronology$Stub.iZone` @type ^`org.joda.time.DateTimeZone` := v1 @kind object;
  #L3b6058.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.chrono.ISOChronology$Stub` v1 @kind this) @signature `Lorg/joda/time/chrono/ISOChronology$Stub;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3b600c.  v0:= v1.`org.joda.time.chrono.ISOChronology$Stub.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b6010.  call temp:= `getInstance`(v0) @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3b6016.  v0:= temp @kind object;
  #L3b6018.  return v0 @kind object;
}
procedure `void` `writeObject`(`org.joda.time.chrono.ISOChronology$Stub` v1 @kind this, `java.io.ObjectOutputStream` v2 @kind object) @signature `Lorg/joda/time/chrono/ISOChronology$Stub;.writeObject:(Ljava/io/ObjectOutputStream;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3b606c.  v0:= v1.`org.joda.time.chrono.ISOChronology$Stub.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b6070.  call `writeObject`(v2, v0) @signature `Ljava/io/ObjectOutputStream;.writeObject:(Ljava/lang/Object;)V` @kind virtual;
  #L3b6076.  return @kind void;
}
