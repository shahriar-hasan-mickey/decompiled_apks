record `org.joda.time.chrono.ISOChronology` @kind class @AccessFlag PUBLIC_FINAL extends `org.joda.time.chrono.AssembledChronology` @kind class {
}
global `org.joda.time.chrono.ISOChronology` `@@org.joda.time.chrono.ISOChronology.INSTANCE_UTC` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentHashMap` `@@org.joda.time.chrono.ISOChronology.cCache` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.ISOChronology.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/chrono/ISOChronology;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3b6260.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L3b6264.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L3b626a.  `@@org.joda.time.chrono.ISOChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L3b626e.  v0:= new `org.joda.time.chrono.ISOChronology`;
  #L3b6272.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/GregorianChronology;.getInstanceUTC:()Lorg/joda/time/chrono/GregorianChronology;` @kind static;
  #L3b6278.  v1:= temp @kind object;
  #L3b627a.  call `<init>`(v0, v1) @signature `Lorg/joda/time/chrono/ISOChronology;.<init>:(Lorg/joda/time/Chronology;)V` @kind direct;
  #L3b6280.  `@@org.joda.time.chrono.ISOChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.ISOChronology` := v0 @kind object;
  #L3b6284.  v0:= `@@org.joda.time.chrono.ISOChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3b6288.  v1:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b628c.  v2:= `@@org.joda.time.chrono.ISOChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.ISOChronology` @kind object;
  #L3b6290.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b6296.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.chrono.ISOChronology` v1 @kind this, `org.joda.time.Chronology` v2 @kind object) @signature `Lorg/joda/time/chrono/ISOChronology;.<init>:(Lorg/joda/time/Chronology;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3b62a8.  v0:= 0I;
  #L3b62aa.  call `<init>`(v1, v2, v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;)V` @kind direct;
  #L3b62b0.  return @kind void;
}
procedure `org.joda.time.chrono.ISOChronology` `getInstance`() @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:()Lorg/joda/time/chrono/ISOChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3b61c4.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b61ca.  v0:= temp @kind object;
  #L3b61cc.  call temp:= `getInstance`(v0) @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3b61d2.  v0:= temp @kind object;
  #L3b61d4.  return v0 @kind object;
}
procedure `org.joda.time.chrono.ISOChronology` `getInstance`(`org.joda.time.DateTimeZone` v2 @kind object) @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3b61e8.  if v2 != 0 then goto L3b61f4;
  #L3b61ec.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b61f2.  v2:= temp @kind object;
  #L3b61f4.  v0:= `@@org.joda.time.chrono.ISOChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3b61f8.  call temp:= `get`(v0, v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b61fe.  v0:= temp @kind object;
  #L3b6200.  v0:= (`org.joda.time.chrono.ISOChronology`) v0 @kind object;
  #L3b6204.  if v0 != 0 then goto L3b6234;
  #L3b6208.  v0:= new `org.joda.time.chrono.ISOChronology`;
  #L3b620c.  v1:= `@@org.joda.time.chrono.ISOChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.ISOChronology` @kind object;
  #L3b6210.  call temp:= `getInstance`(v1, v2) @signature `Lorg/joda/time/chrono/ZonedChronology;.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;` @kind static;
  #L3b6216.  v1:= temp @kind object;
  #L3b6218.  call `<init>`(v0, v1) @signature `Lorg/joda/time/chrono/ISOChronology;.<init>:(Lorg/joda/time/Chronology;)V` @kind direct;
  #L3b621e.  v1:= `@@org.joda.time.chrono.ISOChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3b6222.  call temp:= `putIfAbsent`(v1, v2, v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b6228.  v2:= temp @kind object;
  #L3b622a.  v2:= (`org.joda.time.chrono.ISOChronology`) v2 @kind object;
  #L3b622e.  if v2 == 0 then goto L3b6234;
  #L3b6232.  v0:= v2 @kind object;
  #L3b6234.  return v0 @kind object;
}
procedure `org.joda.time.chrono.ISOChronology` `getInstanceUTC`() @signature `Lorg/joda/time/chrono/ISOChronology;.getInstanceUTC:()Lorg/joda/time/chrono/ISOChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3b6248.  v0:= `@@org.joda.time.chrono.ISOChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.ISOChronology` @kind object;
  #L3b624c.  return v0 @kind object;
}
procedure `java.lang.Object` `writeReplace`(`org.joda.time.chrono.ISOChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/ISOChronology;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3b60f8.  v0:= new `org.joda.time.chrono.ISOChronology$Stub`;
  #L3b60fc.  call temp:= `getZone`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b6102.  v1:= temp @kind object;
  #L3b6104.  call `<init>`(v0, v1) @signature `Lorg/joda/time/chrono/ISOChronology$Stub;.<init>:(Lorg/joda/time/DateTimeZone;)V` @kind direct;
  #L3b610a.  return v0 @kind object;
}
procedure `void` `assemble`(`org.joda.time.chrono.ISOChronology` v4 @kind this, `org.joda.time.chrono.AssembledChronology$Fields` v5 @kind object) @signature `Lorg/joda/time/chrono/ISOChronology;.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b62c4.  call temp:= `getBase`(v4) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b62ca.  v0:= temp @kind object;
  #L3b62cc.  call temp:= `getZone`(v0) @signature `Lorg/joda/time/Chronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b62d2.  v0:= temp @kind object;
  #L3b62d4.  v1:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b62d8.  if v0 != v1 then goto L3b6346;
  #L3b62dc.  v0:= new `org.joda.time.field.DividedDateTimeField`;
  #L3b62e0.  v1:= `@@org.joda.time.chrono.ISOYearOfEraDateTimeField.INSTANCE` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b62e4.  call temp:= `centuryOfEra`() @signature `Lorg/joda/time/DateTimeFieldType;.centuryOfEra:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b62ea.  v2:= temp @kind object;
  #L3b62ec.  v3:= 100I;
  #L3b62f0.  call `<init>`(v0, v1, v2, v3) @signature `Lorg/joda/time/field/DividedDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;I)V` @kind direct;
  #L3b62f6.  v5.`org.joda.time.chrono.AssembledChronology$Fields.centuryOfEra` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b62fa.  call temp:= `getDurationField`(v0) @signature `Lorg/joda/time/DateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b6300.  v0:= temp @kind object;
  #L3b6302.  v5.`org.joda.time.chrono.AssembledChronology$Fields.centuries` @type ^`org.joda.time.DurationField` := v0 @kind object;
  #L3b6306.  v0:= new `org.joda.time.field.RemainderDateTimeField`;
  #L3b630a.  v1:= v5.`org.joda.time.chrono.AssembledChronology$Fields.centuryOfEra` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b630e.  v1:= (`org.joda.time.field.DividedDateTimeField`) v1 @kind object;
  #L3b6312.  call temp:= `yearOfCentury`() @signature `Lorg/joda/time/DateTimeFieldType;.yearOfCentury:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b6318.  v2:= temp @kind object;
  #L3b631a.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/field/RemainderDateTimeField;.<init>:(Lorg/joda/time/field/DividedDateTimeField;Lorg/joda/time/DateTimeFieldType;)V` @kind direct;
  #L3b6320.  v5.`org.joda.time.chrono.AssembledChronology$Fields.yearOfCentury` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b6324.  v0:= new `org.joda.time.field.RemainderDateTimeField`;
  #L3b6328.  v1:= v5.`org.joda.time.chrono.AssembledChronology$Fields.centuryOfEra` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b632c.  v1:= (`org.joda.time.field.DividedDateTimeField`) v1 @kind object;
  #L3b6330.  v2:= v5.`org.joda.time.chrono.AssembledChronology$Fields.weekyears` @type ^`org.joda.time.DurationField` @kind object;
  #L3b6334.  call temp:= `weekyearOfCentury`() @signature `Lorg/joda/time/DateTimeFieldType;.weekyearOfCentury:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b633a.  v3:= temp @kind object;
  #L3b633c.  call `<init>`(v0, v1, v2, v3) @signature `Lorg/joda/time/field/RemainderDateTimeField;.<init>:(Lorg/joda/time/field/DividedDateTimeField;Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeFieldType;)V` @kind direct;
  #L3b6342.  v5.`org.joda.time.chrono.AssembledChronology$Fields.weekyearOfCentury` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b6346.  return @kind void;
}
procedure `boolean` `equals`(`org.joda.time.chrono.ISOChronology` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/joda/time/chrono/ISOChronology;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b6088.  if v1 != v2 then goto L3b6090;
  #L3b608c.  v2:= 1I;
  #L3b608e.  return v2;
  #L3b6090.  v0:= instanceof @variable v2 @type ^`org.joda.time.chrono.ISOChronology` @kind boolean;
  #L3b6094.  if v0 == 0 then goto L3b60b6;
  #L3b6098.  v2:= (`org.joda.time.chrono.ISOChronology`) v2 @kind object;
  #L3b609c.  call temp:= `getZone`(v1) @signature `Lorg/joda/time/chrono/AssembledChronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b60a2.  v0:= temp @kind object;
  #L3b60a4.  call temp:= `getZone`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b60aa.  v2:= temp @kind object;
  #L3b60ac.  call temp:= `equals`(v0, v2) @signature `Lorg/joda/time/DateTimeZone;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3b60b2.  v2:= temp;
  #L3b60b4.  return v2;
  #L3b60b6.  v2:= 0I;
  #L3b60b8.  return v2;
}
procedure `int` `hashCode`(`org.joda.time.chrono.ISOChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/ISOChronology;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b60cc.  call temp:= `getZone`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b60d2.  v0:= temp @kind object;
  #L3b60d4.  call temp:= `hashCode`(v0) @signature `Lorg/joda/time/DateTimeZone;.hashCode:()I` @kind virtual;
  #L3b60da.  v0:= temp;
  #L3b60dc.  v1:= 800855I;
  #L3b60e2.  v1:= v1 + v0 @kind int;
  #L3b60e4.  return v1;
}
procedure `java.lang.String` `toString`(`org.joda.time.chrono.ISOChronology` v3 @kind this) @signature `Lorg/joda/time/chrono/ISOChronology;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b611c.  call temp:= `getZone`(v3) @signature `Lorg/joda/time/chrono/AssembledChronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b6122.  v0:= temp @kind object;
  #L3b6124.  v1:= "ISOChronology" @kind object;
  #L3b6128.  if v0 == 0 then goto L3b6166;
  #L3b612c.  v2:= new `java.lang.StringBuilder`;
  #L3b6130.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b6136.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b613c.  v1:= 91I;
  #L3b6140.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6146.  call temp:= `getID`(v0) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3b614c.  v0:= temp @kind object;
  #L3b614e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6154.  v0:= 93I;
  #L3b6158.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b615e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b6164.  v1:= temp @kind object;
  #L3b6166.  return v1 @kind object;
}
procedure `org.joda.time.Chronology` `withUTC`(`org.joda.time.chrono.ISOChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/ISOChronology;.withUTC:()Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b6178.  v0:= `@@org.joda.time.chrono.ISOChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.ISOChronology` @kind object;
  #L3b617c.  return v0 @kind object;
}
procedure `org.joda.time.Chronology` `withZone`(`org.joda.time.chrono.ISOChronology` v1 @kind this, `org.joda.time.DateTimeZone` v2 @kind object) @signature `Lorg/joda/time/chrono/ISOChronology;.withZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b6190.  if v2 != 0 then goto L3b619c;
  #L3b6194.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b619a.  v2:= temp @kind object;
  #L3b619c.  call temp:= `getZone`(v1) @signature `Lorg/joda/time/chrono/AssembledChronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b61a2.  v0:= temp @kind object;
  #L3b61a4.  if v2 != v0 then goto L3b61aa;
  #L3b61a8.  return v1 @kind object;
  #L3b61aa.  call temp:= `getInstance`(v2) @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3b61b0.  v2:= temp @kind object;
  #L3b61b2.  return v2 @kind object;
}
