record `org.joda.time.chrono.BasicDayOfMonthDateTimeField` @kind class @AccessFlag FINAL extends `org.joda.time.field.PreciseDurationDateTimeField` @kind class {
  `org.joda.time.chrono.BasicChronology` `org.joda.time.chrono.BasicDayOfMonthDateTimeField.iChronology` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@org.joda.time.chrono.BasicDayOfMonthDateTimeField.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.chrono.BasicDayOfMonthDateTimeField` v1 @kind this, `org.joda.time.chrono.BasicChronology` v2 @kind object, `org.joda.time.DurationField` v3 @kind object) @signature `Lorg/joda/time/chrono/BasicDayOfMonthDateTimeField;.<init>:(Lorg/joda/time/chrono/BasicChronology;Lorg/joda/time/DurationField;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3b1104.  call temp:= `dayOfMonth`() @signature `Lorg/joda/time/DateTimeFieldType;.dayOfMonth:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b110a.  v0:= temp @kind object;
  #L3b110c.  call `<init>`(v1, v0, v3) @signature `Lorg/joda/time/field/PreciseDurationDateTimeField;.<init>:(Lorg/joda/time/DateTimeFieldType;Lorg/joda/time/DurationField;)V` @kind direct;
  #L3b1112.  v1.`org.joda.time.chrono.BasicDayOfMonthDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` := v2 @kind object;
  #L3b1116.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.chrono.BasicDayOfMonthDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicDayOfMonthDateTimeField;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3b10c4.  v0:= v1.`org.joda.time.chrono.BasicDayOfMonthDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b10c8.  call temp:= `dayOfMonth`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.dayOfMonth:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b10ce.  v0:= temp @kind object;
  #L3b10d0.  return v0 @kind object;
}
procedure `int` `get`(`org.joda.time.chrono.BasicDayOfMonthDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/BasicDayOfMonthDateTimeField;.get:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b0f28.  v0:= v1.`org.joda.time.chrono.BasicDayOfMonthDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b0f2c.  call temp:= `getDayOfMonth`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getDayOfMonth:(J)I` @kind virtual;
  #L3b0f32.  v2:= temp;
  #L3b0f34.  return v2;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.BasicDayOfMonthDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicDayOfMonthDateTimeField;.getMaximumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b0f48.  v0:= v1.`org.joda.time.chrono.BasicDayOfMonthDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b0f4c.  call temp:= `getDaysInMonthMax`(v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInMonthMax:()I` @kind virtual;
  #L3b0f52.  v0:= temp;
  #L3b0f54.  return v0;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.BasicDayOfMonthDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/BasicDayOfMonthDateTimeField;.getMaximumValue:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b0f68.  v0:= v1.`org.joda.time.chrono.BasicDayOfMonthDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b0f6c.  call temp:= `getDaysInMonthMax`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInMonthMax:(J)I` @kind virtual;
  #L3b0f72.  v2:= temp;
  #L3b0f74.  return v2;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.BasicDayOfMonthDateTimeField` v2 @kind this, `org.joda.time.ReadablePartial` v3 @kind object) @signature `Lorg/joda/time/chrono/BasicDayOfMonthDateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b0f88.  call temp:= `monthOfYear`() @signature `Lorg/joda/time/DateTimeFieldType;.monthOfYear:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b0f8e.  v0:= temp @kind object;
  #L3b0f90.  call temp:= `isSupported`(v3, v0) @signature `Lorg/joda/time/ReadablePartial;.isSupported:(Lorg/joda/time/DateTimeFieldType;)Z` @kind interface;
  #L3b0f96.  v0:= temp;
  #L3b0f98.  if v0 == 0 then goto L3b0fec;
  #L3b0f9c.  call temp:= `monthOfYear`() @signature `Lorg/joda/time/DateTimeFieldType;.monthOfYear:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b0fa2.  v0:= temp @kind object;
  #L3b0fa4.  call temp:= `get`(v3, v0) @signature `Lorg/joda/time/ReadablePartial;.get:(Lorg/joda/time/DateTimeFieldType;)I` @kind interface;
  #L3b0faa.  v0:= temp;
  #L3b0fac.  call temp:= `year`() @signature `Lorg/joda/time/DateTimeFieldType;.year:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b0fb2.  v1:= temp @kind object;
  #L3b0fb4.  call temp:= `isSupported`(v3, v1) @signature `Lorg/joda/time/ReadablePartial;.isSupported:(Lorg/joda/time/DateTimeFieldType;)Z` @kind interface;
  #L3b0fba.  v1:= temp;
  #L3b0fbc.  if v1 == 0 then goto L3b0fde;
  #L3b0fc0.  call temp:= `year`() @signature `Lorg/joda/time/DateTimeFieldType;.year:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b0fc6.  v1:= temp @kind object;
  #L3b0fc8.  call temp:= `get`(v3, v1) @signature `Lorg/joda/time/ReadablePartial;.get:(Lorg/joda/time/DateTimeFieldType;)I` @kind interface;
  #L3b0fce.  v3:= temp;
  #L3b0fd0.  v1:= v2.`org.joda.time.chrono.BasicDayOfMonthDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b0fd4.  call temp:= `getDaysInYearMonth`(v1, v3, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInYearMonth:(II)I` @kind virtual;
  #L3b0fda.  v3:= temp;
  #L3b0fdc.  return v3;
  #L3b0fde.  v3:= v2.`org.joda.time.chrono.BasicDayOfMonthDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b0fe2.  call temp:= `getDaysInMonthMax`(v3, v0) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInMonthMax:(I)I` @kind virtual;
  #L3b0fe8.  v3:= temp;
  #L3b0fea.  return v3;
  #L3b0fec.  call temp:= `getMaximumValue`(v2) @signature `Lorg/joda/time/chrono/BasicDayOfMonthDateTimeField;.getMaximumValue:()I` @kind virtual;
  #L3b0ff2.  v3:= temp;
  #L3b0ff4.  return v3;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.BasicDayOfMonthDateTimeField` v5 @kind this, `org.joda.time.ReadablePartial` v6 @kind object, `int`[] v7 @kind object) @signature `Lorg/joda/time/chrono/BasicDayOfMonthDateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;[I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b1008.  call temp:= `size`(v6) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3b100e.  v0:= temp;
  #L3b1010.  v1:= 0I;
  #L3b1012.  v2:= 0I;
  #L3b1014.  if v2 >= v0 then goto L3b1074;
  #L3b1018.  call temp:= `getFieldType`(v6, v2) @signature `Lorg/joda/time/ReadablePartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind interface;
  #L3b101e.  v3:= temp @kind object;
  #L3b1020.  call temp:= `monthOfYear`() @signature `Lorg/joda/time/DateTimeFieldType;.monthOfYear:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b1026.  v4:= temp @kind object;
  #L3b1028.  if v3 != v4 then goto L3b106e;
  #L3b102c.  v2:= v7[v2];
  #L3b1030.  if v1 >= v0 then goto L3b1060;
  #L3b1034.  call temp:= `getFieldType`(v6, v1) @signature `Lorg/joda/time/ReadablePartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind interface;
  #L3b103a.  v3:= temp @kind object;
  #L3b103c.  call temp:= `year`() @signature `Lorg/joda/time/DateTimeFieldType;.year:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b1042.  v4:= temp @kind object;
  #L3b1044.  if v3 != v4 then goto L3b105a;
  #L3b1048.  v6:= v7[v1];
  #L3b104c.  v7:= v5.`org.joda.time.chrono.BasicDayOfMonthDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1050.  call temp:= `getDaysInYearMonth`(v7, v6, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInYearMonth:(II)I` @kind virtual;
  #L3b1056.  v6:= temp;
  #L3b1058.  return v6;
  #L3b105a.  v1:= v1 + 1;
  #L3b105e.  goto L3b1030;
  #L3b1060.  v6:= v5.`org.joda.time.chrono.BasicDayOfMonthDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1064.  call temp:= `getDaysInMonthMax`(v6, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInMonthMax:(I)I` @kind virtual;
  #L3b106a.  v6:= temp;
  #L3b106c.  return v6;
  #L3b106e.  v2:= v2 + 1;
  #L3b1072.  goto L3b1014;
  #L3b1074.  call temp:= `getMaximumValue`(v5) @signature `Lorg/joda/time/chrono/BasicDayOfMonthDateTimeField;.getMaximumValue:()I` @kind virtual;
  #L3b107a.  v6:= temp;
  #L3b107c.  return v6;
}
procedure `int` `getMaximumValueForSet`(`org.joda.time.chrono.BasicDayOfMonthDateTimeField` v1 @kind this, `long` v2 , `int` v4 ) @signature `Lorg/joda/time/chrono/BasicDayOfMonthDateTimeField;.getMaximumValueForSet:(JI)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3b1090.  v0:= v1.`org.joda.time.chrono.BasicDayOfMonthDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b1094.  call temp:= `getDaysInMonthMaxForSet`(v0, v2, v4) @signature `Lorg/joda/time/chrono/BasicChronology;.getDaysInMonthMaxForSet:(JI)I` @kind virtual;
  #L3b109a.  v2:= temp;
  #L3b109c.  return v2;
}
procedure `int` `getMinimumValue`(`org.joda.time.chrono.BasicDayOfMonthDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicDayOfMonthDateTimeField;.getMinimumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b10b0.  v0:= 1I;
  #L3b10b2.  return v0;
}
procedure `org.joda.time.DurationField` `getRangeDurationField`(`org.joda.time.chrono.BasicDayOfMonthDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/BasicDayOfMonthDateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b10e4.  v0:= v1.`org.joda.time.chrono.BasicDayOfMonthDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b10e8.  call temp:= `months`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.months:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b10ee.  v0:= temp @kind object;
  #L3b10f0.  return v0 @kind object;
}
procedure `boolean` `isLeap`(`org.joda.time.chrono.BasicDayOfMonthDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/BasicDayOfMonthDateTimeField;.isLeap:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b0f08.  v0:= v1.`org.joda.time.chrono.BasicDayOfMonthDateTimeField.iChronology` @type ^`org.joda.time.chrono.BasicChronology` @kind object;
  #L3b0f0c.  call temp:= `isLeapDay`(v0, v2) @signature `Lorg/joda/time/chrono/BasicChronology;.isLeapDay:(J)Z` @kind virtual;
  #L3b0f12.  v2:= temp;
  #L3b0f14.  return v2;
}
