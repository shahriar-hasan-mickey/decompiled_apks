record `org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` @kind class @AccessFlag FINAL extends `org.joda.time.field.BaseDateTimeField` @kind class {
  `org.joda.time.DurationField` `org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iDurationField` @AccessFlag FINAL;
  `org.joda.time.DateTimeField` `org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @AccessFlag FINAL;
  `org.joda.time.DurationField` `org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iLeapDurationField` @AccessFlag FINAL;
  `org.joda.time.DurationField` `org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iRangeDurationField` @AccessFlag FINAL;
  `boolean` `org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iTimeField` @AccessFlag FINAL;
  `org.joda.time.DateTimeZone` `org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @AccessFlag FINAL;
}
global `long` `@@org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `org.joda.time.DateTimeField` v2 @kind object, `org.joda.time.DateTimeZone` v3 @kind object, `org.joda.time.DurationField` v4 @kind object, `org.joda.time.DurationField` v5 @kind object, `org.joda.time.DurationField` v6 @kind object) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeZone;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;Lorg/joda/time/DurationField;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3b8ff8.  call temp:= `getType`(v2) @signature `Lorg/joda/time/DateTimeField;.getType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3b8ffe.  v0:= temp @kind object;
  #L3b9000.  call `<init>`(v1, v0) @signature `Lorg/joda/time/field/BaseDateTimeField;.<init>:(Lorg/joda/time/DateTimeFieldType;)V` @kind direct;
  #L3b9006.  call temp:= `isSupported`(v2) @signature `Lorg/joda/time/DateTimeField;.isSupported:()Z` @kind virtual;
  #L3b900c.  v0:= temp;
  #L3b900e.  if v0 == 0 then goto L3b9034;
  #L3b9012.  v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` := v2 @kind object;
  #L3b9016.  v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` := v3 @kind object;
  #L3b901a.  v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iDurationField` @type ^`org.joda.time.DurationField` := v4 @kind object;
  #L3b901e.  call temp:= `useTimeArithmetic`(v4) @signature `Lorg/joda/time/chrono/ZonedChronology;.useTimeArithmetic:(Lorg/joda/time/DurationField;)Z` @kind static;
  #L3b9024.  v2:= temp;
  #L3b9026.  v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iTimeField` @type ^`boolean` := v2 @kind boolean;
  #L3b902a.  v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iRangeDurationField` @type ^`org.joda.time.DurationField` := v5 @kind object;
  #L3b902e.  v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iLeapDurationField` @type ^`org.joda.time.DurationField` := v6 @kind object;
  #L3b9032.  return @kind void;
  #L3b9034.  v2:= new `java.lang.IllegalArgumentException`;
  #L3b9038.  call `<init>`(v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3b903e.  throw v2;
}
procedure `int` `getOffsetToAdd`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v8 @kind this, `long` v9 ) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getOffsetToAdd:(J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3b8b84.  v0:= v8.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8b88.  call temp:= `getOffset`(v0, v9) @signature `Lorg/joda/time/DateTimeZone;.getOffset:(J)I` @kind virtual;
  #L3b8b8e.  v0:= temp;
  #L3b8b90.  v1:= (`long`) v0 @kind i2l;
  #L3b8b92.  v3:= v9 + v1 @kind long;
  #L3b8b96.  v3:= v3 ^~ v9 @kind long;
  #L3b8b98.  v5:= 0L;
  #L3b8b9c.  v7:= lcmp(v3, v5);
  #L3b8ba0.  if v7 >= 0 then goto L3b8bc0;
  #L3b8ba4.  v9:= v9 ^~ v1 @kind long;
  #L3b8ba6.  v1:= lcmp(v9, v5);
  #L3b8baa.  if v1 >= 0 then goto L3b8bb0;
  #L3b8bae.  goto L3b8bc0;
  #L3b8bb0.  v9:= new `java.lang.ArithmeticException`;
  #L3b8bb4.  v10:= "Adding time zone offset caused overflow" @kind object;
  #L3b8bb8.  call `<init>`(v9, v10) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b8bbe.  throw v9;
  #L3b8bc0.  return v0;
}
procedure `long` `add`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v9 @kind this, `long` v10 , `int` v12 ) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.add:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3b8c98.  v0:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iTimeField` @type ^`boolean` @kind boolean;
  #L3b8c9c.  if v0 == 0 then goto L3b8cbc;
  #L3b8ca0.  call temp:= `getOffsetToAdd`(v9, v10) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getOffsetToAdd:(J)I` @kind direct;
  #L3b8ca6.  v0:= temp;
  #L3b8ca8.  v1:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8cac.  v2:= (`long`) v0 @kind i2l;
  #L3b8cae.  v10:= v10 + v2 @kind long;
  #L3b8cb0.  call temp:= `add`(v1, v10, v12) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3b8cb6.  v10:= temp @kind wide;
  #L3b8cb8.  v10:= v10 - v2 @kind long;
  #L3b8cba.  return v10 @kind wide;
  #L3b8cbc.  v0:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8cc0.  call temp:= `convertUTCToLocal`(v0, v10) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @kind virtual;
  #L3b8cc6.  v0:= temp @kind wide;
  #L3b8cc8.  v2:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8ccc.  call temp:= `add`(v2, v0, v12) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3b8cd2.  v4:= temp @kind wide;
  #L3b8cd4.  v3:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8cd8.  v6:= 0I;
  #L3b8cda.  v7:= v10 @kind wide;
  #L3b8cdc.  call temp:= `convertLocalToUTC`(v3, v4, v6, v7) @signature `Lorg/joda/time/DateTimeZone;.convertLocalToUTC:(JZJ)J` @kind virtual;
  #L3b8ce2.  v10:= temp @kind wide;
  #L3b8ce4.  return v10 @kind wide;
}
procedure `long` `add`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v9 @kind this, `long` v10 , `long` v12 ) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.add:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3b8cf8.  v0:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iTimeField` @type ^`boolean` @kind boolean;
  #L3b8cfc.  if v0 == 0 then goto L3b8d1c;
  #L3b8d00.  call temp:= `getOffsetToAdd`(v9, v10) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getOffsetToAdd:(J)I` @kind direct;
  #L3b8d06.  v0:= temp;
  #L3b8d08.  v1:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8d0c.  v2:= (`long`) v0 @kind i2l;
  #L3b8d0e.  v10:= v10 + v2 @kind long;
  #L3b8d10.  call temp:= `add`(v1, v10, v12) @signature `Lorg/joda/time/DateTimeField;.add:(JJ)J` @kind virtual;
  #L3b8d16.  v10:= temp @kind wide;
  #L3b8d18.  v10:= v10 - v2 @kind long;
  #L3b8d1a.  return v10 @kind wide;
  #L3b8d1c.  v0:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8d20.  call temp:= `convertUTCToLocal`(v0, v10) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @kind virtual;
  #L3b8d26.  v0:= temp @kind wide;
  #L3b8d28.  v2:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8d2c.  call temp:= `add`(v2, v0, v12) @signature `Lorg/joda/time/DateTimeField;.add:(JJ)J` @kind virtual;
  #L3b8d32.  v4:= temp @kind wide;
  #L3b8d34.  v3:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8d38.  v6:= 0I;
  #L3b8d3a.  v7:= v10 @kind wide;
  #L3b8d3c.  call temp:= `convertLocalToUTC`(v3, v4, v6, v7) @signature `Lorg/joda/time/DateTimeZone;.convertLocalToUTC:(JZJ)J` @kind virtual;
  #L3b8d42.  v10:= temp @kind wide;
  #L3b8d44.  return v10 @kind wide;
}
procedure `long` `addWrapField`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v9 @kind this, `long` v10 , `int` v12 ) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.addWrapField:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3b8d58.  v0:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iTimeField` @type ^`boolean` @kind boolean;
  #L3b8d5c.  if v0 == 0 then goto L3b8d7c;
  #L3b8d60.  call temp:= `getOffsetToAdd`(v9, v10) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getOffsetToAdd:(J)I` @kind direct;
  #L3b8d66.  v0:= temp;
  #L3b8d68.  v1:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8d6c.  v2:= (`long`) v0 @kind i2l;
  #L3b8d6e.  v10:= v10 + v2 @kind long;
  #L3b8d70.  call temp:= `addWrapField`(v1, v10, v12) @signature `Lorg/joda/time/DateTimeField;.addWrapField:(JI)J` @kind virtual;
  #L3b8d76.  v10:= temp @kind wide;
  #L3b8d78.  v10:= v10 - v2 @kind long;
  #L3b8d7a.  return v10 @kind wide;
  #L3b8d7c.  v0:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8d80.  call temp:= `convertUTCToLocal`(v0, v10) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @kind virtual;
  #L3b8d86.  v0:= temp @kind wide;
  #L3b8d88.  v2:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8d8c.  call temp:= `addWrapField`(v2, v0, v12) @signature `Lorg/joda/time/DateTimeField;.addWrapField:(JI)J` @kind virtual;
  #L3b8d92.  v4:= temp @kind wide;
  #L3b8d94.  v3:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8d98.  v6:= 0I;
  #L3b8d9a.  v7:= v10 @kind wide;
  #L3b8d9c.  call temp:= `convertLocalToUTC`(v3, v4, v6, v7) @signature `Lorg/joda/time/DateTimeZone;.convertLocalToUTC:(JZJ)J` @kind virtual;
  #L3b8da2.  v10:= temp @kind wide;
  #L3b8da4.  return v10 @kind wide;
}
procedure `boolean` `equals`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b88c4.  v0:= 1I;
  #L3b88c6.  if v4 != v5 then goto L3b88cc;
  #L3b88ca.  return v0;
  #L3b88cc.  v1:= instanceof @variable v5 @type ^`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` @kind boolean;
  #L3b88d0.  v2:= 0I;
  #L3b88d2.  if v1 == 0 then goto L3b8930;
  #L3b88d6.  v5:= (`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField`) v5 @kind object;
  #L3b88da.  v1:= v4.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b88de.  v3:= v5.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b88e2.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3b88e8.  v1:= temp;
  #L3b88ea.  if v1 == 0 then goto L3b892c;
  #L3b88ee.  v1:= v4.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b88f2.  v3:= v5.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b88f6.  call temp:= `equals`(v1, v3) @signature `Lorg/joda/time/DateTimeZone;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3b88fc.  v1:= temp;
  #L3b88fe.  if v1 == 0 then goto L3b892c;
  #L3b8902.  v1:= v4.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iDurationField` @type ^`org.joda.time.DurationField` @kind object;
  #L3b8906.  v3:= v5.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iDurationField` @type ^`org.joda.time.DurationField` @kind object;
  #L3b890a.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3b8910.  v1:= temp;
  #L3b8912.  if v1 == 0 then goto L3b892c;
  #L3b8916.  v1:= v4.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iRangeDurationField` @type ^`org.joda.time.DurationField` @kind object;
  #L3b891a.  v5:= v5.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iRangeDurationField` @type ^`org.joda.time.DurationField` @kind object;
  #L3b891e.  call temp:= `equals`(v1, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3b8924.  v5:= temp;
  #L3b8926.  if v5 == 0 then goto L3b892c;
  #L3b892a.  goto L3b892e;
  #L3b892c.  v0:= 0I;
  #L3b892e.  return v0;
  #L3b8930.  return v2;
}
procedure `int` `get`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.get:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8990.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8994.  call temp:= `convertUTCToLocal`(v0, v2) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @kind virtual;
  #L3b899a.  v2:= temp @kind wide;
  #L3b899c.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b89a0.  call temp:= `get`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3b89a6.  v2:= temp;
  #L3b89a8.  return v2;
}
procedure `java.lang.String` `getAsShortText`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `int` v2 , `java.util.Locale` v3 @kind object) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getAsShortText:(ILjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8c00.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8c04.  call temp:= `getAsShortText`(v0, v2, v3) @signature `Lorg/joda/time/DateTimeField;.getAsShortText:(ILjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3b8c0a.  v2:= temp @kind object;
  #L3b8c0c.  return v2 @kind object;
}
procedure `java.lang.String` `getAsShortText`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `long` v2 , `java.util.Locale` v4 @kind object) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getAsShortText:(JLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8c20.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8c24.  call temp:= `convertUTCToLocal`(v0, v2) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @kind virtual;
  #L3b8c2a.  v2:= temp @kind wide;
  #L3b8c2c.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8c30.  call temp:= `getAsShortText`(v0, v2, v4) @signature `Lorg/joda/time/DateTimeField;.getAsShortText:(JLjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3b8c36.  v2:= temp @kind object;
  #L3b8c38.  return v2 @kind object;
}
procedure `java.lang.String` `getAsText`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `int` v2 , `java.util.Locale` v3 @kind object) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getAsText:(ILjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8c4c.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8c50.  call temp:= `getAsText`(v0, v2, v3) @signature `Lorg/joda/time/DateTimeField;.getAsText:(ILjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3b8c56.  v2:= temp @kind object;
  #L3b8c58.  return v2 @kind object;
}
procedure `java.lang.String` `getAsText`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `long` v2 , `java.util.Locale` v4 @kind object) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getAsText:(JLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8c6c.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8c70.  call temp:= `convertUTCToLocal`(v0, v2) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @kind virtual;
  #L3b8c76.  v2:= temp @kind wide;
  #L3b8c78.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8c7c.  call temp:= `getAsText`(v0, v2, v4) @signature `Lorg/joda/time/DateTimeField;.getAsText:(JLjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3b8c82.  v2:= temp @kind object;
  #L3b8c84.  return v2 @kind object;
}
procedure `int` `getDifference`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v4 @kind this, `long` v5 , `long` v7 ) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getDifference:(JJ)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b89bc.  call temp:= `getOffsetToAdd`(v4, v7) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getOffsetToAdd:(J)I` @kind direct;
  #L3b89c2.  v0:= temp;
  #L3b89c4.  v1:= v4.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b89c8.  v2:= v4.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iTimeField` @type ^`boolean` @kind boolean;
  #L3b89cc.  if v2 == 0 then goto L3b89d4;
  #L3b89d0.  v2:= v0;
  #L3b89d2.  goto L3b89dc;
  #L3b89d4.  call temp:= `getOffsetToAdd`(v4, v5) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getOffsetToAdd:(J)I` @kind direct;
  #L3b89da.  v2:= temp;
  #L3b89dc.  v2:= (`long`) v2 @kind i2l;
  #L3b89de.  v5:= v5 + v2 @kind long;
  #L3b89e0.  v2:= (`long`) v0 @kind i2l;
  #L3b89e2.  v7:= v7 + v2 @kind long;
  #L3b89e4.  call temp:= `getDifference`(v1, v5, v7) @signature `Lorg/joda/time/DateTimeField;.getDifference:(JJ)I` @kind virtual;
  #L3b89ea.  v5:= temp;
  #L3b89ec.  return v5;
}
procedure `long` `getDifferenceAsLong`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v4 @kind this, `long` v5 , `long` v7 ) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getDifferenceAsLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b8db8.  call temp:= `getOffsetToAdd`(v4, v7) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getOffsetToAdd:(J)I` @kind direct;
  #L3b8dbe.  v0:= temp;
  #L3b8dc0.  v1:= v4.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8dc4.  v2:= v4.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iTimeField` @type ^`boolean` @kind boolean;
  #L3b8dc8.  if v2 == 0 then goto L3b8dd0;
  #L3b8dcc.  v2:= v0;
  #L3b8dce.  goto L3b8dd8;
  #L3b8dd0.  call temp:= `getOffsetToAdd`(v4, v5) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getOffsetToAdd:(J)I` @kind direct;
  #L3b8dd6.  v2:= temp;
  #L3b8dd8.  v2:= (`long`) v2 @kind i2l;
  #L3b8dda.  v5:= v5 + v2 @kind long;
  #L3b8ddc.  v2:= (`long`) v0 @kind i2l;
  #L3b8dde.  v7:= v7 + v2 @kind long;
  #L3b8de0.  call temp:= `getDifferenceAsLong`(v1, v5, v7) @signature `Lorg/joda/time/DateTimeField;.getDifferenceAsLong:(JJ)J` @kind virtual;
  #L3b8de6.  v5:= temp @kind wide;
  #L3b8de8.  return v5 @kind wide;
}
procedure `org.joda.time.DurationField` `getDurationField`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b8fb0.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iDurationField` @type ^`org.joda.time.DurationField` @kind object;
  #L3b8fb4.  return v0 @kind object;
}
procedure `int` `getLeapAmount`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getLeapAmount:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8a00.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8a04.  call temp:= `convertUTCToLocal`(v0, v2) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @kind virtual;
  #L3b8a0a.  v2:= temp @kind wide;
  #L3b8a0c.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8a10.  call temp:= `getLeapAmount`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.getLeapAmount:(J)I` @kind virtual;
  #L3b8a16.  v2:= temp;
  #L3b8a18.  return v2;
}
procedure `org.joda.time.DurationField` `getLeapDurationField`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getLeapDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b8fc8.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iLeapDurationField` @type ^`org.joda.time.DurationField` @kind object;
  #L3b8fcc.  return v0 @kind object;
}
procedure `int` `getMaximumShortTextLength`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `java.util.Locale` v2 @kind object) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getMaximumShortTextLength:(Ljava/util/Locale;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8a2c.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8a30.  call temp:= `getMaximumShortTextLength`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.getMaximumShortTextLength:(Ljava/util/Locale;)I` @kind virtual;
  #L3b8a36.  v2:= temp;
  #L3b8a38.  return v2;
}
procedure `int` `getMaximumTextLength`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `java.util.Locale` v2 @kind object) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getMaximumTextLength:(Ljava/util/Locale;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8a4c.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8a50.  call temp:= `getMaximumTextLength`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.getMaximumTextLength:(Ljava/util/Locale;)I` @kind virtual;
  #L3b8a56.  v2:= temp;
  #L3b8a58.  return v2;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getMaximumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8a6c.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8a70.  call temp:= `getMaximumValue`(v0) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:()I` @kind virtual;
  #L3b8a76.  v0:= temp;
  #L3b8a78.  return v0;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getMaximumValue:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8a8c.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8a90.  call temp:= `convertUTCToLocal`(v0, v2) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @kind virtual;
  #L3b8a96.  v2:= temp @kind wide;
  #L3b8a98.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8a9c.  call temp:= `getMaximumValue`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:(J)I` @kind virtual;
  #L3b8aa2.  v2:= temp;
  #L3b8aa4.  return v2;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `org.joda.time.ReadablePartial` v2 @kind object) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8ab8.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8abc.  call temp:= `getMaximumValue`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;)I` @kind virtual;
  #L3b8ac2.  v2:= temp;
  #L3b8ac4.  return v2;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `org.joda.time.ReadablePartial` v2 @kind object, `int`[] v3 @kind object) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;[I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8ad8.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8adc.  call temp:= `getMaximumValue`(v0, v2, v3) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3b8ae2.  v2:= temp;
  #L3b8ae4.  return v2;
}
procedure `int` `getMinimumValue`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getMinimumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8af8.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8afc.  call temp:= `getMinimumValue`(v0) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:()I` @kind virtual;
  #L3b8b02.  v0:= temp;
  #L3b8b04.  return v0;
}
procedure `int` `getMinimumValue`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getMinimumValue:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8b18.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8b1c.  call temp:= `convertUTCToLocal`(v0, v2) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @kind virtual;
  #L3b8b22.  v2:= temp @kind wide;
  #L3b8b24.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8b28.  call temp:= `getMinimumValue`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:(J)I` @kind virtual;
  #L3b8b2e.  v2:= temp;
  #L3b8b30.  return v2;
}
procedure `int` `getMinimumValue`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `org.joda.time.ReadablePartial` v2 @kind object) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8b44.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8b48.  call temp:= `getMinimumValue`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;)I` @kind virtual;
  #L3b8b4e.  v2:= temp;
  #L3b8b50.  return v2;
}
procedure `int` `getMinimumValue`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `org.joda.time.ReadablePartial` v2 @kind object, `int`[] v3 @kind object) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;[I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8b64.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8b68.  call temp:= `getMinimumValue`(v0, v2, v3) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3b8b6e.  v2:= temp;
  #L3b8b70.  return v2;
}
procedure `org.joda.time.DurationField` `getRangeDurationField`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3b8fe0.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iRangeDurationField` @type ^`org.joda.time.DurationField` @kind object;
  #L3b8fe4.  return v0 @kind object;
}
procedure `int` `hashCode`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v2 @kind this) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b8bd4.  v0:= v2.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8bd8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3b8bde.  v0:= temp;
  #L3b8be0.  v1:= v2.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8be4.  call temp:= `hashCode`(v1) @signature `Lorg/joda/time/DateTimeZone;.hashCode:()I` @kind virtual;
  #L3b8bea.  v1:= temp;
  #L3b8bec.  v0:= v0 ^~ v1 @kind int;
  #L3b8bee.  return v0;
}
procedure `boolean` `isLeap`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.isLeap:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8944.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8948.  call temp:= `convertUTCToLocal`(v0, v2) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @kind virtual;
  #L3b894e.  v2:= temp @kind wide;
  #L3b8950.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8954.  call temp:= `isLeap`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.isLeap:(J)Z` @kind virtual;
  #L3b895a.  v2:= temp;
  #L3b895c.  return v2;
}
procedure `boolean` `isLenient`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.isLenient:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8970.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8974.  call temp:= `isLenient`(v0) @signature `Lorg/joda/time/DateTimeField;.isLenient:()Z` @kind virtual;
  #L3b897a.  v0:= temp;
  #L3b897c.  return v0;
}
procedure `long` `remainder`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.remainder:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b8dfc.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8e00.  call temp:= `convertUTCToLocal`(v0, v2) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @kind virtual;
  #L3b8e06.  v2:= temp @kind wide;
  #L3b8e08.  v0:= v1.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8e0c.  call temp:= `remainder`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.remainder:(J)J` @kind virtual;
  #L3b8e12.  v2:= temp @kind wide;
  #L3b8e14.  return v2 @kind wide;
}
procedure `long` `roundCeiling`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v9 @kind this, `long` v10 ) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.roundCeiling:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3b8e28.  v0:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iTimeField` @type ^`boolean` @kind boolean;
  #L3b8e2c.  if v0 == 0 then goto L3b8e4c;
  #L3b8e30.  call temp:= `getOffsetToAdd`(v9, v10) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getOffsetToAdd:(J)I` @kind direct;
  #L3b8e36.  v0:= temp;
  #L3b8e38.  v1:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8e3c.  v2:= (`long`) v0 @kind i2l;
  #L3b8e3e.  v10:= v10 + v2 @kind long;
  #L3b8e40.  call temp:= `roundCeiling`(v1, v10) @signature `Lorg/joda/time/DateTimeField;.roundCeiling:(J)J` @kind virtual;
  #L3b8e46.  v10:= temp @kind wide;
  #L3b8e48.  v10:= v10 - v2 @kind long;
  #L3b8e4a.  return v10 @kind wide;
  #L3b8e4c.  v0:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8e50.  call temp:= `convertUTCToLocal`(v0, v10) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @kind virtual;
  #L3b8e56.  v0:= temp @kind wide;
  #L3b8e58.  v2:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8e5c.  call temp:= `roundCeiling`(v2, v0) @signature `Lorg/joda/time/DateTimeField;.roundCeiling:(J)J` @kind virtual;
  #L3b8e62.  v4:= temp @kind wide;
  #L3b8e64.  v3:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8e68.  v6:= 0I;
  #L3b8e6a.  v7:= v10 @kind wide;
  #L3b8e6c.  call temp:= `convertLocalToUTC`(v3, v4, v6, v7) @signature `Lorg/joda/time/DateTimeZone;.convertLocalToUTC:(JZJ)J` @kind virtual;
  #L3b8e72.  v10:= temp @kind wide;
  #L3b8e74.  return v10 @kind wide;
}
procedure `long` `roundFloor`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v9 @kind this, `long` v10 ) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.roundFloor:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3b8e88.  v0:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iTimeField` @type ^`boolean` @kind boolean;
  #L3b8e8c.  if v0 == 0 then goto L3b8eac;
  #L3b8e90.  call temp:= `getOffsetToAdd`(v9, v10) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.getOffsetToAdd:(J)I` @kind direct;
  #L3b8e96.  v0:= temp;
  #L3b8e98.  v1:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8e9c.  v2:= (`long`) v0 @kind i2l;
  #L3b8e9e.  v10:= v10 + v2 @kind long;
  #L3b8ea0.  call temp:= `roundFloor`(v1, v10) @signature `Lorg/joda/time/DateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3b8ea6.  v10:= temp @kind wide;
  #L3b8ea8.  v10:= v10 - v2 @kind long;
  #L3b8eaa.  return v10 @kind wide;
  #L3b8eac.  v0:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8eb0.  call temp:= `convertUTCToLocal`(v0, v10) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @kind virtual;
  #L3b8eb6.  v0:= temp @kind wide;
  #L3b8eb8.  v2:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8ebc.  call temp:= `roundFloor`(v2, v0) @signature `Lorg/joda/time/DateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3b8ec2.  v4:= temp @kind wide;
  #L3b8ec4.  v3:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8ec8.  v6:= 0I;
  #L3b8eca.  v7:= v10 @kind wide;
  #L3b8ecc.  call temp:= `convertLocalToUTC`(v3, v4, v6, v7) @signature `Lorg/joda/time/DateTimeZone;.convertLocalToUTC:(JZJ)J` @kind virtual;
  #L3b8ed2.  v10:= temp @kind wide;
  #L3b8ed4.  return v10 @kind wide;
}
procedure `long` `set`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v9 @kind this, `long` v10 , `int` v12 ) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.set:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3b8ee8.  v0:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8eec.  call temp:= `convertUTCToLocal`(v0, v10) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @kind virtual;
  #L3b8ef2.  v0:= temp @kind wide;
  #L3b8ef4.  v2:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8ef8.  call temp:= `set`(v2, v0, v12) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3b8efe.  v0:= temp @kind wide;
  #L3b8f00.  v3:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8f04.  v6:= 0I;
  #L3b8f06.  v4:= v0 @kind wide;
  #L3b8f08.  v7:= v10 @kind wide;
  #L3b8f0a.  call temp:= `convertLocalToUTC`(v3, v4, v6, v7) @signature `Lorg/joda/time/DateTimeZone;.convertLocalToUTC:(JZJ)J` @kind virtual;
  #L3b8f10.  v10:= temp @kind wide;
  #L3b8f12.  call temp:= `get`(v9, v10) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.get:(J)I` @kind virtual;
  #L3b8f18.  v2:= temp;
  #L3b8f1a.  if v2 != v12 then goto L3b8f20;
  #L3b8f1e.  return v10 @kind wide;
  #L3b8f20.  v10:= new `org.joda.time.IllegalInstantException`;
  #L3b8f24.  v11:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8f28.  call temp:= `getID`(v11) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3b8f2e.  v11:= temp @kind object;
  #L3b8f30.  call `<init>`(v10, v0, v11) @signature `Lorg/joda/time/IllegalInstantException;.<init>:(JLjava/lang/String;)V` @kind direct;
  #L3b8f36.  v11:= new `org.joda.time.IllegalFieldValueException`;
  #L3b8f3a.  v0:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8f3e.  call temp:= `getType`(v0) @signature `Lorg/joda/time/DateTimeField;.getType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3b8f44.  v0:= temp @kind object;
  #L3b8f46.  call temp:= `valueOf`(v12) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3b8f4c.  v12:= temp @kind object;
  #L3b8f4e.  call temp:= `getMessage`(v10) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L3b8f54.  v1:= temp @kind object;
  #L3b8f56.  call `<init>`(v11, v0, v12, v1) @signature `Lorg/joda/time/IllegalFieldValueException;.<init>:(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/String;)V` @kind direct;
  #L3b8f5c.  call temp:= `initCause`(v11, v10) @signature `Ljava/lang/IllegalArgumentException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3b8f62.  throw v11;
}
procedure `long` `set`(`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField` v9 @kind this, `long` v10 , `java.lang.String` v12 @kind object, `java.util.Locale` v13 @kind object) @signature `Lorg/joda/time/chrono/ZonedChronology$ZonedDateTimeField;.set:(JLjava/lang/String;Ljava/util/Locale;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3b8f74.  v0:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8f78.  call temp:= `convertUTCToLocal`(v0, v10) @signature `Lorg/joda/time/DateTimeZone;.convertUTCToLocal:(J)J` @kind virtual;
  #L3b8f7e.  v0:= temp @kind wide;
  #L3b8f80.  v2:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b8f84.  call temp:= `set`(v2, v0, v12, v13) @signature `Lorg/joda/time/DateTimeField;.set:(JLjava/lang/String;Ljava/util/Locale;)J` @kind virtual;
  #L3b8f8a.  v4:= temp @kind wide;
  #L3b8f8c.  v3:= v9.`org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b8f90.  v6:= 0I;
  #L3b8f92.  v7:= v10 @kind wide;
  #L3b8f94.  call temp:= `convertLocalToUTC`(v3, v4, v6, v7) @signature `Lorg/joda/time/DateTimeZone;.convertLocalToUTC:(JZJ)J` @kind virtual;
  #L3b8f9a.  v10:= temp @kind wide;
  #L3b8f9c.  return v10 @kind wide;
}
