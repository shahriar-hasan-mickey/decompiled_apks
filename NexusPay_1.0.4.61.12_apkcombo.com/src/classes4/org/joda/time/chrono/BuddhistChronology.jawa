record `org.joda.time.chrono.BuddhistChronology` @kind class @AccessFlag PUBLIC_FINAL extends `org.joda.time.chrono.AssembledChronology` @kind class {
}
global `int` `@@org.joda.time.chrono.BuddhistChronology.BE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@org.joda.time.chrono.BuddhistChronology.BUDDHIST_OFFSET` @AccessFlag PRIVATE_STATIC_FINAL;
global `org.joda.time.DateTimeField` `@@org.joda.time.chrono.BuddhistChronology.ERA_FIELD` @AccessFlag PRIVATE_STATIC_FINAL;
global `org.joda.time.chrono.BuddhistChronology` `@@org.joda.time.chrono.BuddhistChronology.INSTANCE_UTC` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentHashMap` `@@org.joda.time.chrono.BuddhistChronology.cCache` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.BuddhistChronology.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/chrono/BuddhistChronology;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3b2c98.  v0:= new `org.joda.time.chrono.BasicSingleEraDateTimeField`;
  #L3b2c9c.  v1:= "BE" @kind object;
  #L3b2ca0.  call `<init>`(v0, v1) @signature `Lorg/joda/time/chrono/BasicSingleEraDateTimeField;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b2ca6.  `@@org.joda.time.chrono.BuddhistChronology.ERA_FIELD` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b2caa.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L3b2cae.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L3b2cb4.  `@@org.joda.time.chrono.BuddhistChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L3b2cb8.  v0:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b2cbc.  call temp:= `getInstance`(v0) @signature `Lorg/joda/time/chrono/BuddhistChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/BuddhistChronology;` @kind static;
  #L3b2cc2.  v0:= temp @kind object;
  #L3b2cc4.  `@@org.joda.time.chrono.BuddhistChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.BuddhistChronology` := v0 @kind object;
  #L3b2cc8.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.chrono.BuddhistChronology` v0 @kind this, `org.joda.time.Chronology` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/joda/time/chrono/BuddhistChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3b2cdc.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;)V` @kind direct;
  #L3b2ce2.  return @kind void;
}
procedure `org.joda.time.chrono.BuddhistChronology` `getInstance`() @signature `Lorg/joda/time/chrono/BuddhistChronology;.getInstance:()Lorg/joda/time/chrono/BuddhistChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3b2bc8.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b2bce.  v0:= temp @kind object;
  #L3b2bd0.  call temp:= `getInstance`(v0) @signature `Lorg/joda/time/chrono/BuddhistChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/BuddhistChronology;` @kind static;
  #L3b2bd6.  v0:= temp @kind object;
  #L3b2bd8.  return v0 @kind object;
}
procedure `org.joda.time.chrono.BuddhistChronology` `getInstance`(`org.joda.time.DateTimeZone` v12 @kind object) @signature `Lorg/joda/time/chrono/BuddhistChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/BuddhistChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3b2bec.  if v12 != 0 then goto L3b2bf8;
  #L3b2bf0.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b2bf6.  v12:= temp @kind object;
  #L3b2bf8.  v0:= `@@org.joda.time.chrono.BuddhistChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3b2bfc.  call temp:= `get`(v0, v12) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b2c02.  v0:= temp @kind object;
  #L3b2c04.  v0:= (`org.joda.time.chrono.BuddhistChronology`) v0 @kind object;
  #L3b2c08.  if v0 != 0 then goto L3b2c6c;
  #L3b2c0c.  v0:= new `org.joda.time.chrono.BuddhistChronology`;
  #L3b2c10.  v10:= 0I;
  #L3b2c12.  call temp:= `getInstance`(v12, v10) @signature `Lorg/joda/time/chrono/GJChronology;.getInstance:(Lorg/joda/time/DateTimeZone;Lorg/joda/time/ReadableInstant;)Lorg/joda/time/chrono/GJChronology;` @kind static;
  #L3b2c18.  v1:= temp @kind object;
  #L3b2c1a.  call `<init>`(v0, v1, v10) @signature `Lorg/joda/time/chrono/BuddhistChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;)V` @kind direct;
  #L3b2c20.  v11:= new `org.joda.time.DateTime`;
  #L3b2c24.  v2:= 1I;
  #L3b2c26.  v3:= 1I;
  #L3b2c28.  v4:= 1I;
  #L3b2c2a.  v5:= 0I;
  #L3b2c2c.  v6:= 0I;
  #L3b2c2e.  v7:= 0I;
  #L3b2c30.  v8:= 0I;
  #L3b2c32.  v1:= v11 @kind object;
  #L3b2c34.  v9:= v0 @kind object;
  #L3b2c36.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lorg/joda/time/DateTime;.<init>:(IIIIIIILorg/joda/time/Chronology;)V` @kind direct;
  #L3b2c3c.  v1:= new `org.joda.time.chrono.BuddhistChronology`;
  #L3b2c40.  call temp:= `getInstance`(v0, v11, v10) @signature `Lorg/joda/time/chrono/LimitChronology;.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/ReadableDateTime;Lorg/joda/time/ReadableDateTime;)Lorg/joda/time/chrono/LimitChronology;` @kind static;
  #L3b2c46.  v0:= temp @kind object;
  #L3b2c48.  v2:= "" @kind object;
  #L3b2c4c.  call `<init>`(v1, v0, v2) @signature `Lorg/joda/time/chrono/BuddhistChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;)V` @kind direct;
  #L3b2c52.  v0:= `@@org.joda.time.chrono.BuddhistChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3b2c56.  call temp:= `putIfAbsent`(v0, v12, v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b2c5c.  v12:= temp @kind object;
  #L3b2c5e.  v0:= v12 @kind object;
  #L3b2c60.  v0:= (`org.joda.time.chrono.BuddhistChronology`) v0 @kind object;
  #L3b2c64.  if v0 == 0 then goto L3b2c6a;
  #L3b2c68.  goto L3b2c6c;
  #L3b2c6a.  v0:= v1 @kind object;
  #L3b2c6c.  return v0 @kind object;
}
procedure `org.joda.time.chrono.BuddhistChronology` `getInstanceUTC`() @signature `Lorg/joda/time/chrono/BuddhistChronology;.getInstanceUTC:()Lorg/joda/time/chrono/BuddhistChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3b2c80.  v0:= `@@org.joda.time.chrono.BuddhistChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.BuddhistChronology` @kind object;
  #L3b2c84.  return v0 @kind object;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.chrono.BuddhistChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/BuddhistChronology;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3b2ae8.  call temp:= `getBase`(v1) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b2aee.  v0:= temp @kind object;
  #L3b2af0.  if v0 != 0 then goto L3b2afe;
  #L3b2af4.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/BuddhistChronology;.getInstanceUTC:()Lorg/joda/time/chrono/BuddhistChronology;` @kind static;
  #L3b2afa.  v0:= temp @kind object;
  #L3b2afc.  goto L3b2b0e;
  #L3b2afe.  call temp:= `getZone`(v0) @signature `Lorg/joda/time/Chronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b2b04.  v0:= temp @kind object;
  #L3b2b06.  call temp:= `getInstance`(v0) @signature `Lorg/joda/time/chrono/BuddhistChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/BuddhistChronology;` @kind static;
  #L3b2b0c.  v0:= temp @kind object;
  #L3b2b0e.  return v0 @kind object;
}
procedure `void` `assemble`(`org.joda.time.chrono.BuddhistChronology` v6 @kind this, `org.joda.time.chrono.AssembledChronology$Fields` v7 @kind object) @signature `Lorg/joda/time/chrono/BuddhistChronology;.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3b2cf4.  call temp:= `getParam`(v6) @signature `Lorg/joda/time/chrono/AssembledChronology;.getParam:()Ljava/lang/Object;` @kind virtual;
  #L3b2cfa.  v0:= temp @kind object;
  #L3b2cfc.  if v0 != 0 then goto L3b2e0c;
  #L3b2d00.  call temp:= `eras`() @signature `Lorg/joda/time/DurationFieldType;.eras:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3b2d06.  v0:= temp @kind object;
  #L3b2d08.  call temp:= `getInstance`(v0) @signature `Lorg/joda/time/field/UnsupportedDurationField;.getInstance:(Lorg/joda/time/DurationFieldType;)Lorg/joda/time/field/UnsupportedDurationField;` @kind static;
  #L3b2d0e.  v0:= temp @kind object;
  #L3b2d10.  v7.`org.joda.time.chrono.AssembledChronology$Fields.eras` @type ^`org.joda.time.DurationField` := v0 @kind object;
  #L3b2d14.  v0:= v7.`org.joda.time.chrono.AssembledChronology$Fields.year` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b2d18.  v1:= new `org.joda.time.field.OffsetDateTimeField`;
  #L3b2d1c.  v2:= new `org.joda.time.field.SkipUndoDateTimeField`;
  #L3b2d20.  call `<init>`(v2, v6, v0) @signature `Lorg/joda/time/field/SkipUndoDateTimeField;.<init>:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3b2d26.  v0:= 543I;
  #L3b2d2a.  call `<init>`(v1, v2, v0) @signature `Lorg/joda/time/field/OffsetDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;I)V` @kind direct;
  #L3b2d30.  v7.`org.joda.time.chrono.AssembledChronology$Fields.year` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b2d34.  v2:= v7.`org.joda.time.chrono.AssembledChronology$Fields.yearOfEra` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b2d38.  v2:= new `org.joda.time.field.DelegatedDateTimeField`;
  #L3b2d3c.  v3:= v7.`org.joda.time.chrono.AssembledChronology$Fields.eras` @type ^`org.joda.time.DurationField` @kind object;
  #L3b2d40.  call temp:= `yearOfEra`() @signature `Lorg/joda/time/DateTimeFieldType;.yearOfEra:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b2d46.  v4:= temp @kind object;
  #L3b2d48.  call `<init>`(v2, v1, v3, v4) @signature `Lorg/joda/time/field/DelegatedDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeFieldType;)V` @kind direct;
  #L3b2d4e.  v7.`org.joda.time.chrono.AssembledChronology$Fields.yearOfEra` @type ^`org.joda.time.DateTimeField` := v2 @kind object;
  #L3b2d52.  v1:= v7.`org.joda.time.chrono.AssembledChronology$Fields.weekyear` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b2d56.  v2:= new `org.joda.time.field.OffsetDateTimeField`;
  #L3b2d5a.  v3:= new `org.joda.time.field.SkipUndoDateTimeField`;
  #L3b2d5e.  call `<init>`(v3, v6, v1) @signature `Lorg/joda/time/field/SkipUndoDateTimeField;.<init>:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3b2d64.  call `<init>`(v2, v3, v0) @signature `Lorg/joda/time/field/OffsetDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;I)V` @kind direct;
  #L3b2d6a.  v7.`org.joda.time.chrono.AssembledChronology$Fields.weekyear` @type ^`org.joda.time.DateTimeField` := v2 @kind object;
  #L3b2d6e.  v0:= new `org.joda.time.field.OffsetDateTimeField`;
  #L3b2d72.  v1:= v7.`org.joda.time.chrono.AssembledChronology$Fields.yearOfEra` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b2d76.  v2:= 99I;
  #L3b2d7a.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/field/OffsetDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;I)V` @kind direct;
  #L3b2d80.  v1:= new `org.joda.time.field.DividedDateTimeField`;
  #L3b2d84.  v2:= v7.`org.joda.time.chrono.AssembledChronology$Fields.eras` @type ^`org.joda.time.DurationField` @kind object;
  #L3b2d88.  call temp:= `centuryOfEra`() @signature `Lorg/joda/time/DateTimeFieldType;.centuryOfEra:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b2d8e.  v3:= temp @kind object;
  #L3b2d90.  v4:= 100I;
  #L3b2d94.  call `<init>`(v1, v0, v2, v3, v4) @signature `Lorg/joda/time/field/DividedDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeFieldType;I)V` @kind direct;
  #L3b2d9a.  v7.`org.joda.time.chrono.AssembledChronology$Fields.centuryOfEra` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b2d9e.  call temp:= `getDurationField`(v1) @signature `Lorg/joda/time/DateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b2da4.  v0:= temp @kind object;
  #L3b2da6.  v7.`org.joda.time.chrono.AssembledChronology$Fields.centuries` @type ^`org.joda.time.DurationField` := v0 @kind object;
  #L3b2daa.  v0:= new `org.joda.time.field.RemainderDateTimeField`;
  #L3b2dae.  v1:= v7.`org.joda.time.chrono.AssembledChronology$Fields.centuryOfEra` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b2db2.  v1:= (`org.joda.time.field.DividedDateTimeField`) v1 @kind object;
  #L3b2db6.  call `<init>`(v0, v1) @signature `Lorg/joda/time/field/RemainderDateTimeField;.<init>:(Lorg/joda/time/field/DividedDateTimeField;)V` @kind direct;
  #L3b2dbc.  v1:= new `org.joda.time.field.OffsetDateTimeField`;
  #L3b2dc0.  call temp:= `yearOfCentury`() @signature `Lorg/joda/time/DateTimeFieldType;.yearOfCentury:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b2dc6.  v2:= temp @kind object;
  #L3b2dc8.  v3:= 1I;
  #L3b2dca.  call `<init>`(v1, v0, v2, v3) @signature `Lorg/joda/time/field/OffsetDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;I)V` @kind direct;
  #L3b2dd0.  v7.`org.joda.time.chrono.AssembledChronology$Fields.yearOfCentury` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b2dd4.  v0:= new `org.joda.time.field.RemainderDateTimeField`;
  #L3b2dd8.  v1:= v7.`org.joda.time.chrono.AssembledChronology$Fields.weekyear` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b2ddc.  v2:= v7.`org.joda.time.chrono.AssembledChronology$Fields.centuries` @type ^`org.joda.time.DurationField` @kind object;
  #L3b2de0.  call temp:= `weekyearOfCentury`() @signature `Lorg/joda/time/DateTimeFieldType;.weekyearOfCentury:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b2de6.  v5:= temp @kind object;
  #L3b2de8.  call `<init>`(v0, v1, v2, v5, v4) @signature `Lorg/joda/time/field/RemainderDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;Lorg/joda/time/DateTimeFieldType;I)V` @kind direct;
  #L3b2dee.  v1:= new `org.joda.time.field.OffsetDateTimeField`;
  #L3b2df2.  call temp:= `weekyearOfCentury`() @signature `Lorg/joda/time/DateTimeFieldType;.weekyearOfCentury:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b2df8.  v2:= temp @kind object;
  #L3b2dfa.  call `<init>`(v1, v0, v2, v3) @signature `Lorg/joda/time/field/OffsetDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;I)V` @kind direct;
  #L3b2e00.  v7.`org.joda.time.chrono.AssembledChronology$Fields.weekyearOfCentury` @type ^`org.joda.time.DateTimeField` := v1 @kind object;
  #L3b2e04.  v0:= `@@org.joda.time.chrono.BuddhistChronology.ERA_FIELD` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b2e08.  v7.`org.joda.time.chrono.AssembledChronology$Fields.era` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b2e0c.  return @kind void;
}
procedure `boolean` `equals`(`org.joda.time.chrono.BuddhistChronology` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/joda/time/chrono/BuddhistChronology;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2a78.  if v1 != v2 then goto L3b2a80;
  #L3b2a7c.  v2:= 1I;
  #L3b2a7e.  return v2;
  #L3b2a80.  v0:= instanceof @variable v2 @type ^`org.joda.time.chrono.BuddhistChronology` @kind boolean;
  #L3b2a84.  if v0 == 0 then goto L3b2aa6;
  #L3b2a88.  v2:= (`org.joda.time.chrono.BuddhistChronology`) v2 @kind object;
  #L3b2a8c.  call temp:= `getZone`(v1) @signature `Lorg/joda/time/chrono/AssembledChronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b2a92.  v0:= temp @kind object;
  #L3b2a94.  call temp:= `getZone`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b2a9a.  v2:= temp @kind object;
  #L3b2a9c.  call temp:= `equals`(v0, v2) @signature `Lorg/joda/time/DateTimeZone;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3b2aa2.  v2:= temp;
  #L3b2aa4.  return v2;
  #L3b2aa6.  v2:= 0I;
  #L3b2aa8.  return v2;
}
procedure `int` `hashCode`(`org.joda.time.chrono.BuddhistChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/BuddhistChronology;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b2abc.  call temp:= `getZone`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b2ac2.  v0:= temp @kind object;
  #L3b2ac4.  call temp:= `hashCode`(v0) @signature `Lorg/joda/time/DateTimeZone;.hashCode:()I` @kind virtual;
  #L3b2aca.  v0:= temp;
  #L3b2acc.  v1:= 499287079I;
  #L3b2ad2.  v1:= v1 + v0 @kind int;
  #L3b2ad4.  return v1;
}
procedure `java.lang.String` `toString`(`org.joda.time.chrono.BuddhistChronology` v3 @kind this) @signature `Lorg/joda/time/chrono/BuddhistChronology;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b2b20.  call temp:= `getZone`(v3) @signature `Lorg/joda/time/chrono/AssembledChronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b2b26.  v0:= temp @kind object;
  #L3b2b28.  v1:= "BuddhistChronology" @kind object;
  #L3b2b2c.  if v0 == 0 then goto L3b2b6a;
  #L3b2b30.  v2:= new `java.lang.StringBuilder`;
  #L3b2b34.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b2b3a.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b2b40.  v1:= 91I;
  #L3b2b44.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b2b4a.  call temp:= `getID`(v0) @signature `Lorg/joda/time/DateTimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L3b2b50.  v0:= temp @kind object;
  #L3b2b52.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b2b58.  v0:= 93I;
  #L3b2b5c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b2b62.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b2b68.  v1:= temp @kind object;
  #L3b2b6a.  return v1 @kind object;
}
procedure `org.joda.time.Chronology` `withUTC`(`org.joda.time.chrono.BuddhistChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/BuddhistChronology;.withUTC:()Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2b7c.  v0:= `@@org.joda.time.chrono.BuddhistChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.BuddhistChronology` @kind object;
  #L3b2b80.  return v0 @kind object;
}
procedure `org.joda.time.Chronology` `withZone`(`org.joda.time.chrono.BuddhistChronology` v1 @kind this, `org.joda.time.DateTimeZone` v2 @kind object) @signature `Lorg/joda/time/chrono/BuddhistChronology;.withZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2b94.  if v2 != 0 then goto L3b2ba0;
  #L3b2b98.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b2b9e.  v2:= temp @kind object;
  #L3b2ba0.  call temp:= `getZone`(v1) @signature `Lorg/joda/time/chrono/AssembledChronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b2ba6.  v0:= temp @kind object;
  #L3b2ba8.  if v2 != v0 then goto L3b2bae;
  #L3b2bac.  return v1 @kind object;
  #L3b2bae.  call temp:= `getInstance`(v2) @signature `Lorg/joda/time/chrono/BuddhistChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/BuddhistChronology;` @kind static;
  #L3b2bb4.  v2:= temp @kind object;
  #L3b2bb6.  return v2 @kind object;
}
