record `org.joda.time.chrono.ISOYearOfEraDateTimeField` @kind class @AccessFlag  extends `org.joda.time.field.DecoratedDateTimeField` @kind class {
}
global `org.joda.time.DateTimeField` `@@org.joda.time.chrono.ISOYearOfEraDateTimeField.INSTANCE` @AccessFlag STATIC_FINAL;
global `long` `@@org.joda.time.chrono.ISOYearOfEraDateTimeField.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3b6578.  v0:= new `org.joda.time.chrono.ISOYearOfEraDateTimeField`;
  #L3b657c.  call `<init>`(v0) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.<init>:()V` @kind direct;
  #L3b6582.  `@@org.joda.time.chrono.ISOYearOfEraDateTimeField.INSTANCE` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b6586.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.chrono.ISOYearOfEraDateTimeField` v2 @kind this) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3b6598.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/GregorianChronology;.getInstanceUTC:()Lorg/joda/time/chrono/GregorianChronology;` @kind static;
  #L3b659e.  v0:= temp @kind object;
  #L3b65a0.  call temp:= `year`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.year:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b65a6.  v0:= temp @kind object;
  #L3b65a8.  call temp:= `yearOfEra`() @signature `Lorg/joda/time/DateTimeFieldType;.yearOfEra:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3b65ae.  v1:= temp @kind object;
  #L3b65b0.  call `<init>`(v2, v0, v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.<init>:(Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeFieldType;)V` @kind direct;
  #L3b65b6.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.chrono.ISOYearOfEraDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3b6400.  v0:= `@@org.joda.time.chrono.ISOYearOfEraDateTimeField.INSTANCE` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b6404.  return v0 @kind object;
}
procedure `long` `add`(`org.joda.time.chrono.ISOYearOfEraDateTimeField` v1 @kind this, `long` v2 , `int` v4 ) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.add:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b6418.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b641e.  v0:= temp @kind object;
  #L3b6420.  call temp:= `add`(v0, v2, v4) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3b6426.  v2:= temp @kind wide;
  #L3b6428.  return v2 @kind wide;
}
procedure `long` `add`(`org.joda.time.chrono.ISOYearOfEraDateTimeField` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.add:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b643c.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b6442.  v0:= temp @kind object;
  #L3b6444.  call temp:= `add`(v0, v2, v4) @signature `Lorg/joda/time/DateTimeField;.add:(JJ)J` @kind virtual;
  #L3b644a.  v2:= temp @kind wide;
  #L3b644c.  return v2 @kind wide;
}
procedure `long` `addWrapField`(`org.joda.time.chrono.ISOYearOfEraDateTimeField` v1 @kind this, `long` v2 , `int` v4 ) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.addWrapField:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b6460.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b6466.  v0:= temp @kind object;
  #L3b6468.  call temp:= `addWrapField`(v0, v2, v4) @signature `Lorg/joda/time/DateTimeField;.addWrapField:(JI)J` @kind virtual;
  #L3b646e.  v2:= temp @kind wide;
  #L3b6470.  return v2 @kind wide;
}
procedure `int`[] `addWrapField`(`org.joda.time.chrono.ISOYearOfEraDateTimeField` v1 @kind this, `org.joda.time.ReadablePartial` v2 @kind object, `int` v3 , `int`[] v4 @kind object, `int` v5 ) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.addWrapField:(Lorg/joda/time/ReadablePartial;I[II)[I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b63dc.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b63e2.  v0:= temp @kind object;
  #L3b63e4.  call temp:= `addWrapField`(v0, v2, v3, v4, v5) @signature `Lorg/joda/time/DateTimeField;.addWrapField:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3b63ea.  v2:= temp @kind object;
  #L3b63ec.  return v2 @kind object;
}
procedure `int` `get`(`org.joda.time.chrono.ISOYearOfEraDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.get:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b6358.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b635e.  v0:= temp @kind object;
  #L3b6360.  call temp:= `get`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3b6366.  v2:= temp;
  #L3b6368.  if v2 >= 0 then goto L3b636e;
  #L3b636c.  v2:= -v2 @kind int;
  #L3b636e.  return v2;
}
procedure `int` `getDifference`(`org.joda.time.chrono.ISOYearOfEraDateTimeField` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.getDifference:(JJ)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b6380.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b6386.  v0:= temp @kind object;
  #L3b6388.  call temp:= `getDifference`(v0, v2, v4) @signature `Lorg/joda/time/DateTimeField;.getDifference:(JJ)I` @kind virtual;
  #L3b638e.  v2:= temp;
  #L3b6390.  return v2;
}
procedure `long` `getDifferenceAsLong`(`org.joda.time.chrono.ISOYearOfEraDateTimeField` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.getDifferenceAsLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b6484.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b648a.  v0:= temp @kind object;
  #L3b648c.  call temp:= `getDifferenceAsLong`(v0, v2, v4) @signature `Lorg/joda/time/DateTimeField;.getDifferenceAsLong:(JJ)J` @kind virtual;
  #L3b6492.  v2:= temp @kind wide;
  #L3b6494.  return v2 @kind wide;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.ISOYearOfEraDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.getMaximumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b63a4.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b63aa.  v0:= temp @kind object;
  #L3b63ac.  call temp:= `getMaximumValue`(v0) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:()I` @kind virtual;
  #L3b63b2.  v0:= temp;
  #L3b63b4.  return v0;
}
procedure `int` `getMinimumValue`(`org.joda.time.chrono.ISOYearOfEraDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.getMinimumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b63c8.  v0:= 0I;
  #L3b63ca.  return v0;
}
procedure `org.joda.time.DurationField` `getRangeDurationField`(`org.joda.time.chrono.ISOYearOfEraDateTimeField` v1 @kind this) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b6554.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/GregorianChronology;.getInstanceUTC:()Lorg/joda/time/chrono/GregorianChronology;` @kind static;
  #L3b655a.  v0:= temp @kind object;
  #L3b655c.  call temp:= `eras`(v0) @signature `Lorg/joda/time/chrono/AssembledChronology;.eras:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b6562.  v0:= temp @kind object;
  #L3b6564.  return v0 @kind object;
}
procedure `long` `remainder`(`org.joda.time.chrono.ISOYearOfEraDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.remainder:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b64a8.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b64ae.  v0:= temp @kind object;
  #L3b64b0.  call temp:= `remainder`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.remainder:(J)J` @kind virtual;
  #L3b64b6.  v2:= temp @kind wide;
  #L3b64b8.  return v2 @kind wide;
}
procedure `long` `roundCeiling`(`org.joda.time.chrono.ISOYearOfEraDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.roundCeiling:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b64cc.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b64d2.  v0:= temp @kind object;
  #L3b64d4.  call temp:= `roundCeiling`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.roundCeiling:(J)J` @kind virtual;
  #L3b64da.  v2:= temp @kind wide;
  #L3b64dc.  return v2 @kind wide;
}
procedure `long` `roundFloor`(`org.joda.time.chrono.ISOYearOfEraDateTimeField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.roundFloor:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b64f0.  call temp:= `getWrappedField`(v1) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b64f6.  v0:= temp @kind object;
  #L3b64f8.  call temp:= `roundFloor`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3b64fe.  v2:= temp @kind wide;
  #L3b6500.  return v2 @kind wide;
}
procedure `long` `set`(`org.joda.time.chrono.ISOYearOfEraDateTimeField` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.set:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b6514.  call temp:= `getMaximumValue`(v2) @signature `Lorg/joda/time/chrono/ISOYearOfEraDateTimeField;.getMaximumValue:()I` @kind virtual;
  #L3b651a.  v0:= temp;
  #L3b651c.  v1:= 0I;
  #L3b651e.  call `verifyValueBounds`(v2, v5, v1, v0) @signature `Lorg/joda/time/field/FieldUtils;.verifyValueBounds:(Lorg/joda/time/DateTimeField;III)V` @kind static;
  #L3b6524.  call temp:= `getWrappedField`(v2) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.getWrappedField:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b652a.  v0:= temp @kind object;
  #L3b652c.  call temp:= `get`(v0, v3) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3b6532.  v0:= temp;
  #L3b6534.  if v0 >= 0 then goto L3b653a;
  #L3b6538.  v5:= -v5 @kind int;
  #L3b653a.  call temp:= `set`(v2, v3, v5) @signature `Lorg/joda/time/field/DecoratedDateTimeField;.set:(JI)J` @kind super;
  #L3b6540.  v3:= temp @kind wide;
  #L3b6542.  return v3 @kind wide;
}
