record `org.joda.time.chrono.CopticChronology` @kind class @AccessFlag PUBLIC_FINAL extends `org.joda.time.chrono.BasicFixedMonthChronology` @kind class {
}
global `int` `@@org.joda.time.chrono.CopticChronology.AM` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.joda.time.DateTimeField` `@@org.joda.time.chrono.CopticChronology.ERA_FIELD` @AccessFlag PRIVATE_STATIC_FINAL;
global `org.joda.time.chrono.CopticChronology` `@@org.joda.time.chrono.CopticChronology.INSTANCE_UTC` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.joda.time.chrono.CopticChronology.MAX_YEAR` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.joda.time.chrono.CopticChronology.MIN_YEAR` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentHashMap` `@@org.joda.time.chrono.CopticChronology.cCache` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.chrono.CopticChronology.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/chrono/CopticChronology;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3b3114.  v0:= new `org.joda.time.chrono.BasicSingleEraDateTimeField`;
  #L3b3118.  v1:= "AM" @kind object;
  #L3b311c.  call `<init>`(v0, v1) @signature `Lorg/joda/time/chrono/BasicSingleEraDateTimeField;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b3122.  `@@org.joda.time.chrono.CopticChronology.ERA_FIELD` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b3126.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L3b312a.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L3b3130.  `@@org.joda.time.chrono.CopticChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L3b3134.  v0:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b3138.  call temp:= `getInstance`(v0) @signature `Lorg/joda/time/chrono/CopticChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/CopticChronology;` @kind static;
  #L3b313e.  v0:= temp @kind object;
  #L3b3140.  `@@org.joda.time.chrono.CopticChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.CopticChronology` := v0 @kind object;
  #L3b3144.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.chrono.CopticChronology` v0 @kind this, `org.joda.time.Chronology` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lorg/joda/time/chrono/CopticChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3b3158.  call `<init>`(v0, v1, v2, v3) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @kind direct;
  #L3b315e.  return @kind void;
}
procedure `org.joda.time.chrono.CopticChronology` `getInstance`() @signature `Lorg/joda/time/chrono/CopticChronology;.getInstance:()Lorg/joda/time/chrono/CopticChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3b2fa0.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b2fa6.  v0:= temp @kind object;
  #L3b2fa8.  v1:= 4I;
  #L3b2faa.  call temp:= `getInstance`(v0, v1) @signature `Lorg/joda/time/chrono/CopticChronology;.getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/CopticChronology;` @kind static;
  #L3b2fb0.  v0:= temp @kind object;
  #L3b2fb2.  return v0 @kind object;
}
procedure `org.joda.time.chrono.CopticChronology` `getInstance`(`org.joda.time.DateTimeZone` v1 @kind object) @signature `Lorg/joda/time/chrono/CopticChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/CopticChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3b2fc4.  v0:= 4I;
  #L3b2fc6.  call temp:= `getInstance`(v1, v0) @signature `Lorg/joda/time/chrono/CopticChronology;.getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/CopticChronology;` @kind static;
  #L3b2fcc.  v1:= temp @kind object;
  #L3b2fce.  return v1 @kind object;
}
procedure `org.joda.time.chrono.CopticChronology` `getInstance`(`org.joda.time.DateTimeZone` v13 @kind object, `int` v14 ) @signature `Lorg/joda/time/chrono/CopticChronology;.getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/CopticChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3b2fe0.  if v13 != 0 then goto L3b2fec;
  #L3b2fe4.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b2fea.  v13:= temp @kind object;
  #L3b2fec.  v0:= `@@org.joda.time.chrono.CopticChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3b2ff0.  call temp:= `get`(v0, v13) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b2ff6.  v0:= temp @kind object;
  #L3b2ff8.  v0:= (`org.joda.time.chrono.CopticChronology`[]) v0 @kind object;
  #L3b2ffc.  if v0 != 0 then goto L3b301c;
  #L3b3000.  v0:= 7I;
  #L3b3002.  v0:= new `org.joda.time.chrono.CopticChronology`[v0];
  #L3b3006.  v1:= `@@org.joda.time.chrono.CopticChronology.cCache` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3b300a.  call temp:= `putIfAbsent`(v1, v13, v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3b3010.  v1:= temp @kind object;
  #L3b3012.  v1:= (`org.joda.time.chrono.CopticChronology`[]) v1 @kind object;
  #L3b3016.  if v1 == 0 then goto L3b301c;
  #L3b301a.  v0:= v1 @kind object;
  #L3b301c.  v1:= v14 + -1;
  #L3b3020.  v2:= v0[v1] @kind object;
  #L3b3024.  if v2 != 0 then goto L3b30a4;
  #L3b3028.  @monitorenter v0
  #L3b302a.  v2:= v0[v1] @kind object;
  #L3b302e.  if v2 != 0 then goto L3b309a;
  #L3b3032.  v2:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b3036.  v3:= 0I;
  #L3b3038.  if v13 != v2 then goto L3b3076;
  #L3b303c.  v13:= new `org.joda.time.chrono.CopticChronology`;
  #L3b3040.  call `<init>`(v13, v3, v3, v14) @signature `Lorg/joda/time/chrono/CopticChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @kind direct;
  #L3b3046.  v2:= new `org.joda.time.DateTime`;
  #L3b304a.  v5:= 1I;
  #L3b304c.  v6:= 1I;
  #L3b304e.  v7:= 1I;
  #L3b3050.  v8:= 0I;
  #L3b3052.  v9:= 0I;
  #L3b3054.  v10:= 0I;
  #L3b3056.  v11:= 0I;
  #L3b3058.  v4:= v2 @kind object;
  #L3b305a.  v12:= v13 @kind object;
  #L3b305c.  call `<init>`(v4, v5, v6, v7, v8, v9, v10, v11, v12) @signature `Lorg/joda/time/DateTime;.<init>:(IIIIIIILorg/joda/time/Chronology;)V` @kind direct;
  #L3b3062.  v4:= new `org.joda.time.chrono.CopticChronology`;
  #L3b3066.  call temp:= `getInstance`(v13, v2, v3) @signature `Lorg/joda/time/chrono/LimitChronology;.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/ReadableDateTime;Lorg/joda/time/ReadableDateTime;)Lorg/joda/time/chrono/LimitChronology;` @kind static;
  #L3b306c.  v13:= temp @kind object;
  #L3b306e.  call `<init>`(v4, v13, v3, v14) @signature `Lorg/joda/time/chrono/CopticChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @kind direct;
  #L3b3074.  goto L3b3094;
  #L3b3076.  v2:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b307a.  call temp:= `getInstance`(v2, v14) @signature `Lorg/joda/time/chrono/CopticChronology;.getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/CopticChronology;` @kind static;
  #L3b3080.  v2:= temp @kind object;
  #L3b3082.  v4:= new `org.joda.time.chrono.CopticChronology`;
  #L3b3086.  call temp:= `getInstance`(v2, v13) @signature `Lorg/joda/time/chrono/ZonedChronology;.getInstance:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ZonedChronology;` @kind static;
  #L3b308c.  v13:= temp @kind object;
  #L3b308e.  call `<init>`(v4, v13, v3, v14) @signature `Lorg/joda/time/chrono/CopticChronology;.<init>:(Lorg/joda/time/Chronology;Ljava/lang/Object;I)V` @kind direct;
  #L3b3094.  v0[v1]:= v4 @kind object;
  #L3b3098.  v2:= v4 @kind object;
  #L3b309a.  @monitorexit v0
  #L3b309c.  goto L3b30a4;
  #L3b309e.  v13:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3b30a0.  @monitorexit v0
  #L3b30a2.  throw v13;
  #L3b30a4.  return v2 @kind object;
  #L3b30a6.  v13:= new `java.lang.IllegalArgumentException`;
  #L3b30aa.  v0:= new `java.lang.StringBuilder`;
  #L3b30ae.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b30b4.  v1:= "Invalid min days in first week: " @kind object;
  #L3b30b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b30be.  call temp:= `append`(v0, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b30c4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b30ca.  v14:= temp @kind object;
  #L3b30cc.  call `<init>`(v13, v14) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b30d2.  throw v13;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L3b3020..L3b3024] goto L3b30a6;
  catch `java.lang.Throwable` @[L3b302a..L3b30a2] goto L3b309e;
}
procedure `org.joda.time.chrono.CopticChronology` `getInstanceUTC`() @signature `Lorg/joda/time/chrono/CopticChronology;.getInstanceUTC:()Lorg/joda/time/chrono/CopticChronology;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3b30fc.  v0:= `@@org.joda.time.chrono.CopticChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.CopticChronology` @kind object;
  #L3b3100.  return v0 @kind object;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.chrono.CopticChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/CopticChronology;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3b2e94.  call temp:= `getBase`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b2e9a.  v0:= temp @kind object;
  #L3b2e9c.  call temp:= `getMinimumDaysInFirstWeek`(v2) @signature `Lorg/joda/time/chrono/BasicChronology;.getMinimumDaysInFirstWeek:()I` @kind virtual;
  #L3b2ea2.  v1:= temp;
  #L3b2ea4.  if v1 != 0 then goto L3b2eaa;
  #L3b2ea8.  v1:= 4I;
  #L3b2eaa.  if v0 != 0 then goto L3b2eb4;
  #L3b2eae.  v0:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3b2eb2.  goto L3b2ebc;
  #L3b2eb4.  call temp:= `getZone`(v0) @signature `Lorg/joda/time/Chronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b2eba.  v0:= temp @kind object;
  #L3b2ebc.  call temp:= `getInstance`(v0, v1) @signature `Lorg/joda/time/chrono/CopticChronology;.getInstance:(Lorg/joda/time/DateTimeZone;I)Lorg/joda/time/chrono/CopticChronology;` @kind static;
  #L3b2ec2.  v0:= temp @kind object;
  #L3b2ec4.  return v0 @kind object;
}
procedure `void` `assemble`(`org.joda.time.chrono.CopticChronology` v2 @kind this, `org.joda.time.chrono.AssembledChronology$Fields` v3 @kind object) @signature `Lorg/joda/time/chrono/CopticChronology;.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3b3170.  call temp:= `getBase`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.getBase:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3b3176.  v0:= temp @kind object;
  #L3b3178.  if v0 != 0 then goto L3b31cc;
  #L3b317c.  call `assemble`(v2, v3) @signature `Lorg/joda/time/chrono/BasicChronology;.assemble:(Lorg/joda/time/chrono/AssembledChronology$Fields;)V` @kind super;
  #L3b3182.  v0:= new `org.joda.time.field.SkipDateTimeField`;
  #L3b3186.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.year` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b318a.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/field/SkipDateTimeField;.<init>:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3b3190.  v3.`org.joda.time.chrono.AssembledChronology$Fields.year` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b3194.  v0:= new `org.joda.time.field.SkipDateTimeField`;
  #L3b3198.  v1:= v3.`org.joda.time.chrono.AssembledChronology$Fields.weekyear` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b319c.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/field/SkipDateTimeField;.<init>:(Lorg/joda/time/Chronology;Lorg/joda/time/DateTimeField;)V` @kind direct;
  #L3b31a2.  v3.`org.joda.time.chrono.AssembledChronology$Fields.weekyear` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b31a6.  v0:= `@@org.joda.time.chrono.CopticChronology.ERA_FIELD` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b31aa.  v3.`org.joda.time.chrono.AssembledChronology$Fields.era` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b31ae.  v0:= new `org.joda.time.chrono.BasicMonthOfYearDateTimeField`;
  #L3b31b2.  v1:= 13I;
  #L3b31b6.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/chrono/BasicMonthOfYearDateTimeField;.<init>:(Lorg/joda/time/chrono/BasicChronology;I)V` @kind direct;
  #L3b31bc.  v3.`org.joda.time.chrono.AssembledChronology$Fields.monthOfYear` @type ^`org.joda.time.DateTimeField` := v0 @kind object;
  #L3b31c0.  call temp:= `getDurationField`(v0) @signature `Lorg/joda/time/DateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b31c6.  v0:= temp @kind object;
  #L3b31c8.  v3.`org.joda.time.chrono.AssembledChronology$Fields.months` @type ^`org.joda.time.DurationField` := v0 @kind object;
  #L3b31cc.  return @kind void;
}
procedure `long` `calculateFirstDayOfYearMillis`(`org.joda.time.chrono.CopticChronology` v4 @kind this, `int` v5 ) @signature `Lorg/joda/time/chrono/CopticChronology;.calculateFirstDayOfYearMillis:(I)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b2ed8.  v0:= v5 + -1687;
  #L3b2edc.  if v0 > 0 then goto L3b2eea;
  #L3b2ee0.  v5:= v0 + 3;
  #L3b2ee4.  v5:= v5 ^> 2;
  #L3b2ee8.  goto L3b2f02;
  #L3b2eea.  v1:= v0 ^> 2;
  #L3b2eee.  call temp:= `isLeapYear`(v4, v5) @signature `Lorg/joda/time/chrono/BasicFixedMonthChronology;.isLeapYear:(I)Z` @kind virtual;
  #L3b2ef4.  v5:= temp;
  #L3b2ef6.  if v5 != 0 then goto L3b2f00;
  #L3b2efa.  v5:= v1 + 1;
  #L3b2efe.  goto L3b2f02;
  #L3b2f00.  v5:= v1;
  #L3b2f02.  v0:= (`long`) v0 @kind i2l;
  #L3b2f04.  v2:= 365L;
  #L3b2f08.  v0:= v0 * v2 @kind long;
  #L3b2f0c.  v2:= (`long`) v5 @kind i2l;
  #L3b2f0e.  v0:= v0 + v2 @kind long;
  #L3b2f10.  v2:= 86400000L;
  #L3b2f16.  v0:= v0 * v2 @kind long;
  #L3b2f1a.  v2:= 21859200000L;
  #L3b2f24.  v0:= v0 + v2 @kind long;
  #L3b2f26.  return v0 @kind wide;
}
procedure `long` `getApproxMillisAtEpochDividedByTwo`(`org.joda.time.chrono.CopticChronology` v2 @kind this) @signature `Lorg/joda/time/chrono/CopticChronology;.getApproxMillisAtEpochDividedByTwo:()J` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b2f38.  v0:= 26607895200000L;
  #L3b2f42.  return v0 @kind wide;
}
procedure `int` `getMaxYear`(`org.joda.time.chrono.CopticChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/CopticChronology;.getMaxYear:()I` @AccessFlag  {
    temp;
    v0;

  #L3b2e64.  v0:= 292272708I;
  #L3b2e6a.  return v0;
}
procedure `int` `getMinYear`(`org.joda.time.chrono.CopticChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/CopticChronology;.getMinYear:()I` @AccessFlag  {
    temp;
    v0;

  #L3b2e7c.  v0:= -292269337I;
  #L3b2e82.  return v0;
}
procedure `boolean` `isLeapDay`(`org.joda.time.chrono.CopticChronology` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/chrono/CopticChronology;.isLeapDay:(J)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3b2e20.  call temp:= `dayOfMonth`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.dayOfMonth:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b2e26.  v0:= temp @kind object;
  #L3b2e28.  call temp:= `get`(v0, v3) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3b2e2e.  v0:= temp;
  #L3b2e30.  v1:= 6I;
  #L3b2e32.  if v0 != v1 then goto L3b2e4e;
  #L3b2e36.  call temp:= `monthOfYear`(v2) @signature `Lorg/joda/time/chrono/AssembledChronology;.monthOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b2e3c.  v0:= temp @kind object;
  #L3b2e3e.  call temp:= `isLeap`(v0, v3) @signature `Lorg/joda/time/DateTimeField;.isLeap:(J)Z` @kind virtual;
  #L3b2e44.  v3:= temp;
  #L3b2e46.  if v3 == 0 then goto L3b2e4e;
  #L3b2e4a.  v3:= 1I;
  #L3b2e4c.  goto L3b2e50;
  #L3b2e4e.  v3:= 0I;
  #L3b2e50.  return v3;
}
procedure `org.joda.time.Chronology` `withUTC`(`org.joda.time.chrono.CopticChronology` v1 @kind this) @signature `Lorg/joda/time/chrono/CopticChronology;.withUTC:()Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2f54.  v0:= `@@org.joda.time.chrono.CopticChronology.INSTANCE_UTC` @type ^`org.joda.time.chrono.CopticChronology` @kind object;
  #L3b2f58.  return v0 @kind object;
}
procedure `org.joda.time.Chronology` `withZone`(`org.joda.time.chrono.CopticChronology` v1 @kind this, `org.joda.time.DateTimeZone` v2 @kind object) @signature `Lorg/joda/time/chrono/CopticChronology;.withZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b2f6c.  if v2 != 0 then goto L3b2f78;
  #L3b2f70.  call temp:= `getDefault`() @signature `Lorg/joda/time/DateTimeZone;.getDefault:()Lorg/joda/time/DateTimeZone;` @kind static;
  #L3b2f76.  v2:= temp @kind object;
  #L3b2f78.  call temp:= `getZone`(v1) @signature `Lorg/joda/time/chrono/BasicChronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3b2f7e.  v0:= temp @kind object;
  #L3b2f80.  if v2 != v0 then goto L3b2f86;
  #L3b2f84.  return v1 @kind object;
  #L3b2f86.  call temp:= `getInstance`(v2) @signature `Lorg/joda/time/chrono/CopticChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/CopticChronology;` @kind static;
  #L3b2f8c.  v2:= temp @kind object;
  #L3b2f8e.  return v2 @kind object;
}
