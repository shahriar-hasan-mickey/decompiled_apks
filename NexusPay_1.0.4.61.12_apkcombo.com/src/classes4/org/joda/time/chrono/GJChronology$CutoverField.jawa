record `org.joda.time.chrono.GJChronology$CutoverField` @kind class @AccessFlag  extends `org.joda.time.field.BaseDateTimeField` @kind class {
  `boolean` `org.joda.time.chrono.GJChronology$CutoverField.iConvertByWeekyear` @AccessFlag FINAL;
  `long` `org.joda.time.chrono.GJChronology$CutoverField.iCutover` @AccessFlag FINAL;
  `org.joda.time.DurationField` `org.joda.time.chrono.GJChronology$CutoverField.iDurationField` @AccessFlag PROTECTED;
  `org.joda.time.DateTimeField` `org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @AccessFlag FINAL;
  `org.joda.time.DateTimeField` `org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @AccessFlag FINAL;
  `org.joda.time.DurationField` `org.joda.time.chrono.GJChronology$CutoverField.iRangeDurationField` @AccessFlag PROTECTED;
  `org.joda.time.chrono.GJChronology` `org.joda.time.chrono.GJChronology$CutoverField.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@org.joda.time.chrono.GJChronology$CutoverField.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.chrono.GJChronology$CutoverField` v7 @kind this, `org.joda.time.chrono.GJChronology` v8 @kind object, `org.joda.time.DateTimeField` v9 @kind object, `org.joda.time.DateTimeField` v10 @kind object, `long` v11 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.<init>:(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3b3e54.  v6:= 0I;
  #L3b3e56.  v0:= v7 @kind object;
  #L3b3e58.  v1:= v8 @kind object;
  #L3b3e5a.  v2:= v9 @kind object;
  #L3b3e5c.  v3:= v10 @kind object;
  #L3b3e5e.  v4:= v11 @kind wide;
  #L3b3e60.  call `<init>`(v0, v1, v2, v3, v4, v6) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.<init>:(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;JZ)V` @kind direct;
  #L3b3e66.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.chrono.GJChronology$CutoverField` v8 @kind this, `org.joda.time.chrono.GJChronology` v9 @kind object, `org.joda.time.DateTimeField` v10 @kind object, `org.joda.time.DateTimeField` v11 @kind object, `long` v12 , `boolean` v14 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.<init>:(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;JZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3b3e78.  v4:= 0I;
  #L3b3e7a.  v0:= v8 @kind object;
  #L3b3e7c.  v1:= v9 @kind object;
  #L3b3e7e.  v2:= v10 @kind object;
  #L3b3e80.  v3:= v11 @kind object;
  #L3b3e82.  v5:= v12 @kind wide;
  #L3b3e84.  v7:= v14;
  #L3b3e86.  call `<init>`(v0, v1, v2, v3, v4, v5, v7) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.<init>:(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;JZ)V` @kind direct;
  #L3b3e8c.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.chrono.GJChronology$CutoverField` v0 @kind this, `org.joda.time.chrono.GJChronology` v1 @kind object, `org.joda.time.DateTimeField` v2 @kind object, `org.joda.time.DateTimeField` v3 @kind object, `org.joda.time.DurationField` v4 @kind object, `long` v5 , `boolean` v7 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.<init>:(Lorg/joda/time/chrono/GJChronology;Lorg/joda/time/DateTimeField;Lorg/joda/time/DateTimeField;Lorg/joda/time/DurationField;JZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3b3ea0.  v0.`org.joda.time.chrono.GJChronology$CutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` := v1 @kind object;
  #L3b3ea4.  call temp:= `getType`(v3) @signature `Lorg/joda/time/DateTimeField;.getType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3b3eaa.  v1:= temp @kind object;
  #L3b3eac.  call `<init>`(v0, v1) @signature `Lorg/joda/time/field/BaseDateTimeField;.<init>:(Lorg/joda/time/DateTimeFieldType;)V` @kind direct;
  #L3b3eb2.  v0.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` := v2 @kind object;
  #L3b3eb6.  v0.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` := v3 @kind object;
  #L3b3eba.  v0.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` := v5 @kind wide;
  #L3b3ebe.  v0.`org.joda.time.chrono.GJChronology$CutoverField.iConvertByWeekyear` @type ^`boolean` := v7 @kind boolean;
  #L3b3ec2.  call temp:= `getDurationField`(v3) @signature `Lorg/joda/time/DateTimeField;.getDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b3ec8.  v1:= temp @kind object;
  #L3b3eca.  v0.`org.joda.time.chrono.GJChronology$CutoverField.iDurationField` @type ^`org.joda.time.DurationField` := v1 @kind object;
  #L3b3ece.  if v4 != 0 then goto L3b3ee6;
  #L3b3ed2.  call temp:= `getRangeDurationField`(v3) @signature `Lorg/joda/time/DateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b3ed8.  v4:= temp @kind object;
  #L3b3eda.  if v4 != 0 then goto L3b3ee6;
  #L3b3ede.  call temp:= `getRangeDurationField`(v2) @signature `Lorg/joda/time/DateTimeField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b3ee4.  v4:= temp @kind object;
  #L3b3ee6.  v0.`org.joda.time.chrono.GJChronology$CutoverField.iRangeDurationField` @type ^`org.joda.time.DurationField` := v4 @kind object;
  #L3b3eea.  return @kind void;
}
procedure `long` `add`(`org.joda.time.chrono.GJChronology$CutoverField` v1 @kind this, `long` v2 , `int` v4 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.add:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3ae0.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3ae4.  call temp:= `add`(v0, v2, v4) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3b3aea.  v2:= temp @kind wide;
  #L3b3aec.  return v2 @kind wide;
}
procedure `long` `add`(`org.joda.time.chrono.GJChronology$CutoverField` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.add:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3b00.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3b04.  call temp:= `add`(v0, v2, v4) @signature `Lorg/joda/time/DateTimeField;.add:(JJ)J` @kind virtual;
  #L3b3b0a.  v2:= temp @kind wide;
  #L3b3b0c.  return v2 @kind wide;
}
procedure `int`[] `add`(`org.joda.time.chrono.GJChronology$CutoverField` v5 @kind this, `org.joda.time.ReadablePartial` v6 @kind object, `int` v7 , `int`[] v8 @kind object, `int` v9 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.add:(Lorg/joda/time/ReadablePartial;I[II)[I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b39b4.  if v9 != 0 then goto L3b39ba;
  #L3b39b8.  return v8 @kind object;
  #L3b39ba.  call temp:= `isContiguous`(v6) @signature `Lorg/joda/time/DateTimeUtils;.isContiguous:(Lorg/joda/time/ReadablePartial;)Z` @kind static;
  #L3b39c0.  v0:= temp;
  #L3b39c2.  if v0 == 0 then goto L3b3a14;
  #L3b39c6.  v0:= 0L;
  #L3b39ca.  v7:= 0I;
  #L3b39cc.  call temp:= `size`(v6) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3b39d2.  v2:= temp;
  #L3b39d4.  if v7 >= v2 then goto L3b39fe;
  #L3b39d8.  call temp:= `getFieldType`(v6, v7) @signature `Lorg/joda/time/ReadablePartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind interface;
  #L3b39de.  v3:= temp @kind object;
  #L3b39e0.  v4:= v5.`org.joda.time.chrono.GJChronology$CutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b39e4.  call temp:= `getField`(v3, v4) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b39ea.  v3:= temp @kind object;
  #L3b39ec.  v4:= v8[v7];
  #L3b39f0.  call temp:= `set`(v3, v0, v4) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3b39f6.  v0:= temp @kind wide;
  #L3b39f8.  v7:= v7 + 1;
  #L3b39fc.  goto L3b39d4;
  #L3b39fe.  call temp:= `add`(v5, v0, v9) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.add:(JI)J` @kind virtual;
  #L3b3a04.  v7:= temp @kind wide;
  #L3b3a06.  v9:= v5.`org.joda.time.chrono.GJChronology$CutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b3a0a.  call temp:= `get`(v9, v6, v7) @signature `Lorg/joda/time/chrono/BaseChronology;.get:(Lorg/joda/time/ReadablePartial;J)[I` @kind virtual;
  #L3b3a10.  v6:= temp @kind object;
  #L3b3a12.  return v6 @kind object;
  #L3b3a14.  call temp:= `add`(v5, v6, v7, v8, v9) @signature `Lorg/joda/time/field/BaseDateTimeField;.add:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind super;
  #L3b3a1a.  v6:= temp @kind object;
  #L3b3a1c.  return v6 @kind object;
}
procedure `int` `get`(`org.joda.time.chrono.GJChronology$CutoverField` v3 @kind this, `long` v4 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.get:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b36e0.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b36e4.  v2:= lcmp(v4, v0);
  #L3b36e8.  if v2 < 0 then goto L3b36fa;
  #L3b36ec.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b36f0.  call temp:= `get`(v0, v4) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3b36f6.  v4:= temp;
  #L3b36f8.  return v4;
  #L3b36fa.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b36fe.  call temp:= `get`(v0, v4) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3b3704.  v4:= temp;
  #L3b3706.  return v4;
}
procedure `java.lang.String` `getAsShortText`(`org.joda.time.chrono.GJChronology$CutoverField` v1 @kind this, `int` v2 , `java.util.Locale` v3 @kind object) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getAsShortText:(ILjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3a30.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3a34.  call temp:= `getAsShortText`(v0, v2, v3) @signature `Lorg/joda/time/DateTimeField;.getAsShortText:(ILjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3b3a3a.  v2:= temp @kind object;
  #L3b3a3c.  return v2 @kind object;
}
procedure `java.lang.String` `getAsShortText`(`org.joda.time.chrono.GJChronology$CutoverField` v3 @kind this, `long` v4 , `java.util.Locale` v6 @kind object) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getAsShortText:(JLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b3a50.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3a54.  v2:= lcmp(v4, v0);
  #L3b3a58.  if v2 < 0 then goto L3b3a6a;
  #L3b3a5c.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3a60.  call temp:= `getAsShortText`(v0, v4, v6) @signature `Lorg/joda/time/DateTimeField;.getAsShortText:(JLjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3b3a66.  v4:= temp @kind object;
  #L3b3a68.  return v4 @kind object;
  #L3b3a6a.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3a6e.  call temp:= `getAsShortText`(v0, v4, v6) @signature `Lorg/joda/time/DateTimeField;.getAsShortText:(JLjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3b3a74.  v4:= temp @kind object;
  #L3b3a76.  return v4 @kind object;
}
procedure `java.lang.String` `getAsText`(`org.joda.time.chrono.GJChronology$CutoverField` v1 @kind this, `int` v2 , `java.util.Locale` v3 @kind object) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getAsText:(ILjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3a88.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3a8c.  call temp:= `getAsText`(v0, v2, v3) @signature `Lorg/joda/time/DateTimeField;.getAsText:(ILjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3b3a92.  v2:= temp @kind object;
  #L3b3a94.  return v2 @kind object;
}
procedure `java.lang.String` `getAsText`(`org.joda.time.chrono.GJChronology$CutoverField` v3 @kind this, `long` v4 , `java.util.Locale` v6 @kind object) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getAsText:(JLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b3aa8.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3aac.  v2:= lcmp(v4, v0);
  #L3b3ab0.  if v2 < 0 then goto L3b3ac2;
  #L3b3ab4.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3ab8.  call temp:= `getAsText`(v0, v4, v6) @signature `Lorg/joda/time/DateTimeField;.getAsText:(JLjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3b3abe.  v4:= temp @kind object;
  #L3b3ac0.  return v4 @kind object;
  #L3b3ac2.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3ac6.  call temp:= `getAsText`(v0, v4, v6) @signature `Lorg/joda/time/DateTimeField;.getAsText:(JLjava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L3b3acc.  v4:= temp @kind object;
  #L3b3ace.  return v4 @kind object;
}
procedure `int` `getDifference`(`org.joda.time.chrono.GJChronology$CutoverField` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getDifference:(JJ)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3718.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b371c.  call temp:= `getDifference`(v0, v2, v4) @signature `Lorg/joda/time/DateTimeField;.getDifference:(JJ)I` @kind virtual;
  #L3b3722.  v2:= temp;
  #L3b3724.  return v2;
}
procedure `long` `getDifferenceAsLong`(`org.joda.time.chrono.GJChronology$CutoverField` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getDifferenceAsLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3b20.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3b24.  call temp:= `getDifferenceAsLong`(v0, v2, v4) @signature `Lorg/joda/time/DateTimeField;.getDifferenceAsLong:(JJ)J` @kind virtual;
  #L3b3b2a.  v2:= temp @kind wide;
  #L3b3b2c.  return v2 @kind wide;
}
procedure `org.joda.time.DurationField` `getDurationField`(`org.joda.time.chrono.GJChronology$CutoverField` v1 @kind this) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3e04.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.iDurationField` @type ^`org.joda.time.DurationField` @kind object;
  #L3b3e08.  return v0 @kind object;
}
procedure `int` `getLeapAmount`(`org.joda.time.chrono.GJChronology$CutoverField` v3 @kind this, `long` v4 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getLeapAmount:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b3738.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b373c.  v2:= lcmp(v4, v0);
  #L3b3740.  if v2 < 0 then goto L3b3752;
  #L3b3744.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3748.  call temp:= `getLeapAmount`(v0, v4) @signature `Lorg/joda/time/DateTimeField;.getLeapAmount:(J)I` @kind virtual;
  #L3b374e.  v4:= temp;
  #L3b3750.  return v4;
  #L3b3752.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3756.  call temp:= `getLeapAmount`(v0, v4) @signature `Lorg/joda/time/DateTimeField;.getLeapAmount:(J)I` @kind virtual;
  #L3b375c.  v4:= temp;
  #L3b375e.  return v4;
}
procedure `org.joda.time.DurationField` `getLeapDurationField`(`org.joda.time.chrono.GJChronology$CutoverField` v1 @kind this) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getLeapDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3e1c.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3e20.  call temp:= `getLeapDurationField`(v0) @signature `Lorg/joda/time/DateTimeField;.getLeapDurationField:()Lorg/joda/time/DurationField;` @kind virtual;
  #L3b3e26.  v0:= temp @kind object;
  #L3b3e28.  return v0 @kind object;
}
procedure `int` `getMaximumShortTextLength`(`org.joda.time.chrono.GJChronology$CutoverField` v2 @kind this, `java.util.Locale` v3 @kind object) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getMaximumShortTextLength:(Ljava/util/Locale;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b3770.  v0:= v2.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3774.  call temp:= `getMaximumShortTextLength`(v0, v3) @signature `Lorg/joda/time/DateTimeField;.getMaximumShortTextLength:(Ljava/util/Locale;)I` @kind virtual;
  #L3b377a.  v0:= temp;
  #L3b377c.  v1:= v2.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3780.  call temp:= `getMaximumShortTextLength`(v1, v3) @signature `Lorg/joda/time/DateTimeField;.getMaximumShortTextLength:(Ljava/util/Locale;)I` @kind virtual;
  #L3b3786.  v3:= temp;
  #L3b3788.  call temp:= `max`(v0, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3b378e.  v3:= temp;
  #L3b3790.  return v3;
}
procedure `int` `getMaximumTextLength`(`org.joda.time.chrono.GJChronology$CutoverField` v2 @kind this, `java.util.Locale` v3 @kind object) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getMaximumTextLength:(Ljava/util/Locale;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b37a4.  v0:= v2.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b37a8.  call temp:= `getMaximumTextLength`(v0, v3) @signature `Lorg/joda/time/DateTimeField;.getMaximumTextLength:(Ljava/util/Locale;)I` @kind virtual;
  #L3b37ae.  v0:= temp;
  #L3b37b0.  v1:= v2.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b37b4.  call temp:= `getMaximumTextLength`(v1, v3) @signature `Lorg/joda/time/DateTimeField;.getMaximumTextLength:(Ljava/util/Locale;)I` @kind virtual;
  #L3b37ba.  v3:= temp;
  #L3b37bc.  call temp:= `max`(v0, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3b37c2.  v3:= temp;
  #L3b37c4.  return v3;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.GJChronology$CutoverField` v1 @kind this) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getMaximumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b37d8.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b37dc.  call temp:= `getMaximumValue`(v0) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:()I` @kind virtual;
  #L3b37e2.  v0:= temp;
  #L3b37e4.  return v0;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.GJChronology$CutoverField` v4 @kind this, `long` v5 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getMaximumValue:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b37f8.  v0:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b37fc.  v2:= lcmp(v5, v0);
  #L3b3800.  if v2 < 0 then goto L3b3812;
  #L3b3804.  v0:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3808.  call temp:= `getMaximumValue`(v0, v5) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:(J)I` @kind virtual;
  #L3b380e.  v5:= temp;
  #L3b3810.  return v5;
  #L3b3812.  v0:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3816.  call temp:= `getMaximumValue`(v0, v5) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:(J)I` @kind virtual;
  #L3b381c.  v0:= temp;
  #L3b381e.  v1:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3822.  call temp:= `set`(v1, v5, v0) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3b3828.  v5:= temp @kind wide;
  #L3b382a.  v1:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b382e.  v3:= lcmp(v5, v1);
  #L3b3832.  if v3 < 0 then goto L3b384c;
  #L3b3836.  v5:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b383a.  v6:= -1I;
  #L3b383c.  call temp:= `add`(v5, v1, v6) @signature `Lorg/joda/time/DateTimeField;.add:(JI)J` @kind virtual;
  #L3b3842.  v0:= temp @kind wide;
  #L3b3844.  call temp:= `get`(v5, v0) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3b384a.  v0:= temp;
  #L3b384c.  return v0;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.GJChronology$CutoverField` v3 @kind this, `org.joda.time.ReadablePartial` v4 @kind object) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b3860.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/GJChronology;.getInstanceUTC:()Lorg/joda/time/chrono/GJChronology;` @kind static;
  #L3b3866.  v0:= temp @kind object;
  #L3b3868.  v1:= 0L;
  #L3b386c.  call temp:= `set`(v0, v4, v1) @signature `Lorg/joda/time/chrono/BaseChronology;.set:(Lorg/joda/time/ReadablePartial;J)J` @kind virtual;
  #L3b3872.  v0:= temp @kind wide;
  #L3b3874.  call temp:= `getMaximumValue`(v3, v0) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getMaximumValue:(J)I` @kind virtual;
  #L3b387a.  v4:= temp;
  #L3b387c.  return v4;
}
procedure `int` `getMaximumValue`(`org.joda.time.chrono.GJChronology$CutoverField` v8 @kind this, `org.joda.time.ReadablePartial` v9 @kind object, `int`[] v10 @kind object) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getMaximumValue:(Lorg/joda/time/ReadablePartial;[I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3b3890.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/GJChronology;.getInstanceUTC:()Lorg/joda/time/chrono/GJChronology;` @kind static;
  #L3b3896.  v0:= temp @kind object;
  #L3b3898.  call temp:= `size`(v9) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3b389e.  v1:= temp;
  #L3b38a0.  v2:= 0L;
  #L3b38a4.  v4:= 0I;
  #L3b38a6.  if v4 >= v1 then goto L3b38dc;
  #L3b38aa.  call temp:= `getFieldType`(v9, v4) @signature `Lorg/joda/time/ReadablePartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind interface;
  #L3b38b0.  v5:= temp @kind object;
  #L3b38b2.  call temp:= `getField`(v5, v0) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3b38b8.  v5:= temp @kind object;
  #L3b38ba.  v6:= v10[v4];
  #L3b38be.  call temp:= `getMaximumValue`(v5, v2) @signature `Lorg/joda/time/DateTimeField;.getMaximumValue:(J)I` @kind virtual;
  #L3b38c4.  v7:= temp;
  #L3b38c6.  if v6 > v7 then goto L3b38d6;
  #L3b38ca.  v6:= v10[v4];
  #L3b38ce.  call temp:= `set`(v5, v2, v6) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3b38d4.  v2:= temp @kind wide;
  #L3b38d6.  v4:= v4 + 1;
  #L3b38da.  goto L3b38a6;
  #L3b38dc.  call temp:= `getMaximumValue`(v8, v2) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getMaximumValue:(J)I` @kind virtual;
  #L3b38e2.  v9:= temp;
  #L3b38e4.  return v9;
}
procedure `int` `getMinimumValue`(`org.joda.time.chrono.GJChronology$CutoverField` v1 @kind this) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getMinimumValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b38f8.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b38fc.  call temp:= `getMinimumValue`(v0) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:()I` @kind virtual;
  #L3b3902.  v0:= temp;
  #L3b3904.  return v0;
}
procedure `int` `getMinimumValue`(`org.joda.time.chrono.GJChronology$CutoverField` v4 @kind this, `long` v5 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getMinimumValue:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b3918.  v0:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b391c.  v2:= lcmp(v5, v0);
  #L3b3920.  if v2 >= 0 then goto L3b3932;
  #L3b3924.  v0:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3928.  call temp:= `getMinimumValue`(v0, v5) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:(J)I` @kind virtual;
  #L3b392e.  v5:= temp;
  #L3b3930.  return v5;
  #L3b3932.  v0:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3936.  call temp:= `getMinimumValue`(v0, v5) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:(J)I` @kind virtual;
  #L3b393c.  v0:= temp;
  #L3b393e.  v1:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3942.  call temp:= `set`(v1, v5, v0) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3b3948.  v5:= temp @kind wide;
  #L3b394a.  v1:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b394e.  v3:= lcmp(v5, v1);
  #L3b3952.  if v3 >= 0 then goto L3b3962;
  #L3b3956.  v5:= v4.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b395a.  call temp:= `get`(v5, v1) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3b3960.  v0:= temp;
  #L3b3962.  return v0;
}
procedure `int` `getMinimumValue`(`org.joda.time.chrono.GJChronology$CutoverField` v1 @kind this, `org.joda.time.ReadablePartial` v2 @kind object) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3974.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3978.  call temp:= `getMinimumValue`(v0, v2) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;)I` @kind virtual;
  #L3b397e.  v2:= temp;
  #L3b3980.  return v2;
}
procedure `int` `getMinimumValue`(`org.joda.time.chrono.GJChronology$CutoverField` v1 @kind this, `org.joda.time.ReadablePartial` v2 @kind object, `int`[] v3 @kind object) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;[I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3994.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3998.  call temp:= `getMinimumValue`(v0, v2, v3) @signature `Lorg/joda/time/DateTimeField;.getMinimumValue:(Lorg/joda/time/ReadablePartial;[I)I` @kind virtual;
  #L3b399e.  v2:= temp;
  #L3b39a0.  return v2;
}
procedure `org.joda.time.DurationField` `getRangeDurationField`(`org.joda.time.chrono.GJChronology$CutoverField` v1 @kind this) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.getRangeDurationField:()Lorg/joda/time/DurationField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b3e3c.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.iRangeDurationField` @type ^`org.joda.time.DurationField` @kind object;
  #L3b3e40.  return v0 @kind object;
}
procedure `long` `gregorianToJulian`(`org.joda.time.chrono.GJChronology$CutoverField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.gregorianToJulian:(J)J` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3b3b40.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.iConvertByWeekyear` @type ^`boolean` @kind boolean;
  #L3b3b44.  if v0 == 0 then goto L3b3b56;
  #L3b3b48.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b3b4c.  call temp:= `gregorianToJulianByWeekyear`(v0, v2) @signature `Lorg/joda/time/chrono/GJChronology;.gregorianToJulianByWeekyear:(J)J` @kind virtual;
  #L3b3b52.  v2:= temp @kind wide;
  #L3b3b54.  return v2 @kind wide;
  #L3b3b56.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b3b5a.  call temp:= `gregorianToJulianByYear`(v0, v2) @signature `Lorg/joda/time/chrono/GJChronology;.gregorianToJulianByYear:(J)J` @kind virtual;
  #L3b3b60.  v2:= temp @kind wide;
  #L3b3b62.  return v2 @kind wide;
}
procedure `boolean` `isLeap`(`org.joda.time.chrono.GJChronology$CutoverField` v3 @kind this, `long` v4 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.isLeap:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b3694.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3698.  v2:= lcmp(v4, v0);
  #L3b369c.  if v2 < 0 then goto L3b36ae;
  #L3b36a0.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b36a4.  call temp:= `isLeap`(v0, v4) @signature `Lorg/joda/time/DateTimeField;.isLeap:(J)Z` @kind virtual;
  #L3b36aa.  v4:= temp;
  #L3b36ac.  return v4;
  #L3b36ae.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b36b2.  call temp:= `isLeap`(v0, v4) @signature `Lorg/joda/time/DateTimeField;.isLeap:(J)Z` @kind virtual;
  #L3b36b8.  v4:= temp;
  #L3b36ba.  return v4;
}
procedure `boolean` `isLenient`(`org.joda.time.chrono.GJChronology$CutoverField` v1 @kind this) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.isLenient:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b36cc.  v0:= 0I;
  #L3b36ce.  return v0;
}
procedure `long` `julianToGregorian`(`org.joda.time.chrono.GJChronology$CutoverField` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.julianToGregorian:(J)J` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3b3b74.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.iConvertByWeekyear` @type ^`boolean` @kind boolean;
  #L3b3b78.  if v0 == 0 then goto L3b3b8a;
  #L3b3b7c.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b3b80.  call temp:= `julianToGregorianByWeekyear`(v0, v2) @signature `Lorg/joda/time/chrono/GJChronology;.julianToGregorianByWeekyear:(J)J` @kind virtual;
  #L3b3b86.  v2:= temp @kind wide;
  #L3b3b88.  return v2 @kind wide;
  #L3b3b8a.  v0:= v1.`org.joda.time.chrono.GJChronology$CutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b3b8e.  call temp:= `julianToGregorianByYear`(v0, v2) @signature `Lorg/joda/time/chrono/GJChronology;.julianToGregorianByYear:(J)J` @kind virtual;
  #L3b3b94.  v2:= temp @kind wide;
  #L3b3b96.  return v2 @kind wide;
}
procedure `long` `roundCeiling`(`org.joda.time.chrono.GJChronology$CutoverField` v5 @kind this, `long` v6 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.roundCeiling:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b3ba8.  v0:= v5.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3bac.  v2:= lcmp(v6, v0);
  #L3b3bb0.  if v2 < 0 then goto L3b3bc2;
  #L3b3bb4.  v0:= v5.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3bb8.  call temp:= `roundCeiling`(v0, v6) @signature `Lorg/joda/time/DateTimeField;.roundCeiling:(J)J` @kind virtual;
  #L3b3bbe.  v6:= temp @kind wide;
  #L3b3bc0.  goto L3b3bfe;
  #L3b3bc2.  v0:= v5.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3bc6.  call temp:= `roundCeiling`(v0, v6) @signature `Lorg/joda/time/DateTimeField;.roundCeiling:(J)J` @kind virtual;
  #L3b3bcc.  v6:= temp @kind wide;
  #L3b3bce.  v0:= v5.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3bd2.  v2:= lcmp(v6, v0);
  #L3b3bd6.  if v2 < 0 then goto L3b3bfe;
  #L3b3bda.  v0:= v5.`org.joda.time.chrono.GJChronology$CutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b3bde.  call temp:= `access$000`(v0) @signature `Lorg/joda/time/chrono/GJChronology;.access$000:(Lorg/joda/time/chrono/GJChronology;)J` @kind static;
  #L3b3be4.  v0:= temp @kind wide;
  #L3b3be6.  v0:= v6 - v0 @kind long;
  #L3b3bea.  v2:= v5.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3bee.  v4:= lcmp(v0, v2);
  #L3b3bf2.  if v4 < 0 then goto L3b3bfe;
  #L3b3bf6.  call temp:= `julianToGregorian`(v5, v6) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.julianToGregorian:(J)J` @kind virtual;
  #L3b3bfc.  v6:= temp @kind wide;
  #L3b3bfe.  return v6 @kind wide;
}
procedure `long` `roundFloor`(`org.joda.time.chrono.GJChronology$CutoverField` v5 @kind this, `long` v6 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.roundFloor:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b3c10.  v0:= v5.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3c14.  v2:= lcmp(v6, v0);
  #L3b3c18.  if v2 < 0 then goto L3b3c58;
  #L3b3c1c.  v0:= v5.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3c20.  call temp:= `roundFloor`(v0, v6) @signature `Lorg/joda/time/DateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3b3c26.  v6:= temp @kind wide;
  #L3b3c28.  v0:= v5.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3c2c.  v2:= lcmp(v6, v0);
  #L3b3c30.  if v2 >= 0 then goto L3b3c64;
  #L3b3c34.  v0:= v5.`org.joda.time.chrono.GJChronology$CutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b3c38.  call temp:= `access$000`(v0) @signature `Lorg/joda/time/chrono/GJChronology;.access$000:(Lorg/joda/time/chrono/GJChronology;)J` @kind static;
  #L3b3c3e.  v0:= temp @kind wide;
  #L3b3c40.  v0:= v0 + v6 @kind long;
  #L3b3c42.  v2:= v5.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3c46.  v4:= lcmp(v0, v2);
  #L3b3c4a.  if v4 >= 0 then goto L3b3c64;
  #L3b3c4e.  call temp:= `gregorianToJulian`(v5, v6) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.gregorianToJulian:(J)J` @kind virtual;
  #L3b3c54.  v6:= temp @kind wide;
  #L3b3c56.  goto L3b3c64;
  #L3b3c58.  v0:= v5.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3c5c.  call temp:= `roundFloor`(v0, v6) @signature `Lorg/joda/time/DateTimeField;.roundFloor:(J)J` @kind virtual;
  #L3b3c62.  v6:= temp @kind wide;
  #L3b3c64.  return v6 @kind wide;
}
procedure `long` `set`(`org.joda.time.chrono.GJChronology$CutoverField` v6 @kind this, `long` v7 , `int` v9 ) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.set:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3b3c78.  v0:= v6.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3c7c.  v2:= 0I;
  #L3b3c7e.  v3:= lcmp(v7, v0);
  #L3b3c82.  if v3 < 0 then goto L3b3cee;
  #L3b3c86.  v0:= v6.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3c8a.  call temp:= `set`(v0, v7, v9) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3b3c90.  v7:= temp @kind wide;
  #L3b3c92.  v0:= v6.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3c96.  v3:= lcmp(v7, v0);
  #L3b3c9a.  if v3 >= 0 then goto L3b3d58;
  #L3b3c9e.  v0:= v6.`org.joda.time.chrono.GJChronology$CutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b3ca2.  call temp:= `access$000`(v0) @signature `Lorg/joda/time/chrono/GJChronology;.access$000:(Lorg/joda/time/chrono/GJChronology;)J` @kind static;
  #L3b3ca8.  v0:= temp @kind wide;
  #L3b3caa.  v0:= v0 + v7 @kind long;
  #L3b3cac.  v3:= v6.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3cb0.  v5:= lcmp(v0, v3);
  #L3b3cb4.  if v5 >= 0 then goto L3b3cc0;
  #L3b3cb8.  call temp:= `gregorianToJulian`(v6, v7) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.gregorianToJulian:(J)J` @kind virtual;
  #L3b3cbe.  v7:= temp @kind wide;
  #L3b3cc0.  call temp:= `get`(v6, v7) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.get:(J)I` @kind virtual;
  #L3b3cc6.  v0:= temp;
  #L3b3cc8.  if v0 != v9 then goto L3b3cce;
  #L3b3ccc.  goto L3b3d58;
  #L3b3cce.  v7:= new `org.joda.time.IllegalFieldValueException`;
  #L3b3cd2.  v8:= v6.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3cd6.  call temp:= `getType`(v8) @signature `Lorg/joda/time/DateTimeField;.getType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3b3cdc.  v8:= temp @kind object;
  #L3b3cde.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3b3ce4.  v9:= temp @kind object;
  #L3b3ce6.  call `<init>`(v7, v8, v9, v2, v2) @signature `Lorg/joda/time/IllegalFieldValueException;.<init>:(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V` @kind direct;
  #L3b3cec.  throw v7;
  #L3b3cee.  v0:= v6.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3cf2.  call temp:= `set`(v0, v7, v9) @signature `Lorg/joda/time/DateTimeField;.set:(JI)J` @kind virtual;
  #L3b3cf8.  v7:= temp @kind wide;
  #L3b3cfa.  v0:= v6.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3cfe.  v3:= lcmp(v7, v0);
  #L3b3d02.  if v3 < 0 then goto L3b3d58;
  #L3b3d06.  v0:= v6.`org.joda.time.chrono.GJChronology$CutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b3d0a.  call temp:= `access$000`(v0) @signature `Lorg/joda/time/chrono/GJChronology;.access$000:(Lorg/joda/time/chrono/GJChronology;)J` @kind static;
  #L3b3d10.  v0:= temp @kind wide;
  #L3b3d12.  v0:= v7 - v0 @kind long;
  #L3b3d16.  v3:= v6.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3d1a.  v5:= lcmp(v0, v3);
  #L3b3d1e.  if v5 < 0 then goto L3b3d2a;
  #L3b3d22.  call temp:= `julianToGregorian`(v6, v7) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.julianToGregorian:(J)J` @kind virtual;
  #L3b3d28.  v7:= temp @kind wide;
  #L3b3d2a.  call temp:= `get`(v6, v7) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.get:(J)I` @kind virtual;
  #L3b3d30.  v0:= temp;
  #L3b3d32.  if v0 != v9 then goto L3b3d38;
  #L3b3d36.  goto L3b3d58;
  #L3b3d38.  v7:= new `org.joda.time.IllegalFieldValueException`;
  #L3b3d3c.  v8:= v6.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3d40.  call temp:= `getType`(v8) @signature `Lorg/joda/time/DateTimeField;.getType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3b3d46.  v8:= temp @kind object;
  #L3b3d48.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3b3d4e.  v9:= temp @kind object;
  #L3b3d50.  call `<init>`(v7, v8, v9, v2, v2) @signature `Lorg/joda/time/IllegalFieldValueException;.<init>:(Lorg/joda/time/DateTimeFieldType;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V` @kind direct;
  #L3b3d56.  throw v7;
  #L3b3d58.  return v7 @kind wide;
}
procedure `long` `set`(`org.joda.time.chrono.GJChronology$CutoverField` v3 @kind this, `long` v4 , `java.lang.String` v6 @kind object, `java.util.Locale` v7 @kind object) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.set:(JLjava/lang/String;Ljava/util/Locale;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b3d6c.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3d70.  v2:= lcmp(v4, v0);
  #L3b3d74.  if v2 < 0 then goto L3b3db4;
  #L3b3d78.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iGregorianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3d7c.  call temp:= `set`(v0, v4, v6, v7) @signature `Lorg/joda/time/DateTimeField;.set:(JLjava/lang/String;Ljava/util/Locale;)J` @kind virtual;
  #L3b3d82.  v4:= temp @kind wide;
  #L3b3d84.  v6:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3d88.  v0:= lcmp(v4, v6);
  #L3b3d8c.  if v0 >= 0 then goto L3b3df0;
  #L3b3d90.  v6:= v3.`org.joda.time.chrono.GJChronology$CutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b3d94.  call temp:= `access$000`(v6) @signature `Lorg/joda/time/chrono/GJChronology;.access$000:(Lorg/joda/time/chrono/GJChronology;)J` @kind static;
  #L3b3d9a.  v6:= temp @kind wide;
  #L3b3d9c.  v6:= v6 + v4 @kind long;
  #L3b3d9e.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3da2.  v2:= lcmp(v6, v0);
  #L3b3da6.  if v2 >= 0 then goto L3b3df0;
  #L3b3daa.  call temp:= `gregorianToJulian`(v3, v4) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.gregorianToJulian:(J)J` @kind virtual;
  #L3b3db0.  v4:= temp @kind wide;
  #L3b3db2.  goto L3b3df0;
  #L3b3db4.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iJulianField` @type ^`org.joda.time.DateTimeField` @kind object;
  #L3b3db8.  call temp:= `set`(v0, v4, v6, v7) @signature `Lorg/joda/time/DateTimeField;.set:(JLjava/lang/String;Ljava/util/Locale;)J` @kind virtual;
  #L3b3dbe.  v4:= temp @kind wide;
  #L3b3dc0.  v6:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3dc4.  v0:= lcmp(v4, v6);
  #L3b3dc8.  if v0 < 0 then goto L3b3df0;
  #L3b3dcc.  v6:= v3.`org.joda.time.chrono.GJChronology$CutoverField.this$0` @type ^`org.joda.time.chrono.GJChronology` @kind object;
  #L3b3dd0.  call temp:= `access$000`(v6) @signature `Lorg/joda/time/chrono/GJChronology;.access$000:(Lorg/joda/time/chrono/GJChronology;)J` @kind static;
  #L3b3dd6.  v6:= temp @kind wide;
  #L3b3dd8.  v6:= v4 - v6 @kind long;
  #L3b3ddc.  v0:= v3.`org.joda.time.chrono.GJChronology$CutoverField.iCutover` @type ^`long` @kind wide;
  #L3b3de0.  v2:= lcmp(v6, v0);
  #L3b3de4.  if v2 < 0 then goto L3b3df0;
  #L3b3de8.  call temp:= `julianToGregorian`(v3, v4) @signature `Lorg/joda/time/chrono/GJChronology$CutoverField;.julianToGregorian:(J)J` @kind virtual;
  #L3b3dee.  v4:= temp @kind wide;
  #L3b3df0.  return v4 @kind wide;
}
