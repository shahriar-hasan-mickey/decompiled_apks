record `org.joda.time.Partial` @kind class @AccessFlag PUBLIC_FINAL extends `org.joda.time.base.AbstractPartial` @kind class, `org.joda.time.ReadablePartial` @kind interface, `java.io.Serializable` @kind interface {
  `org.joda.time.Chronology` `org.joda.time.Partial.iChronology` @AccessFlag PRIVATE_FINAL;
  `org.joda.time.format.DateTimeFormatter`[] `org.joda.time.Partial.iFormatter` @AccessFlag PRIVATE_TRANSIENT;
  `org.joda.time.DateTimeFieldType`[] `org.joda.time.Partial.iTypes` @AccessFlag PRIVATE_FINAL;
  `int`[] `org.joda.time.Partial.iValues` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@org.joda.time.Partial.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.Partial` v1 @kind this) @signature `Lorg/joda/time/Partial;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a53d4.  v0:= 0I;
  #L3a53d6.  call `<init>`(v1, v0) @signature `Lorg/joda/time/Partial;.<init>:(Lorg/joda/time/Chronology;)V` @kind direct;
  #L3a53dc.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.Partial` v1 @kind this, `org.joda.time.Chronology` v2 @kind object) @signature `Lorg/joda/time/Partial;.<init>:(Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a53f0.  call `<init>`(v1) @signature `Lorg/joda/time/base/AbstractPartial;.<init>:()V` @kind direct;
  #L3a53f6.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3a53fc.  v2:= temp @kind object;
  #L3a53fe.  call temp:= `withUTC`(v2) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a5404.  v2:= temp @kind object;
  #L3a5406.  v1.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` := v2 @kind object;
  #L3a540a.  v2:= 0I;
  #L3a540c.  v0:= new `org.joda.time.DateTimeFieldType`[v2];
  #L3a5410.  v1.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] := v0 @kind object;
  #L3a5414.  v2:= new `int`[v2];
  #L3a5418.  v1.`org.joda.time.Partial.iValues` @type ^`int`[] := v2 @kind object;
  #L3a541c.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.Partial` v0 @kind this, `org.joda.time.Chronology` v1 @kind object, `org.joda.time.DateTimeFieldType`[] v2 @kind object, `int`[] v3 @kind object) @signature `Lorg/joda/time/Partial;.<init>:(Lorg/joda/time/Chronology;[Lorg/joda/time/DateTimeFieldType;[I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3a5430.  call `<init>`(v0) @signature `Lorg/joda/time/base/AbstractPartial;.<init>:()V` @kind direct;
  #L3a5436.  v0.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` := v1 @kind object;
  #L3a543a.  v0.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] := v2 @kind object;
  #L3a543e.  v0.`org.joda.time.Partial.iValues` @type ^`int`[] := v3 @kind object;
  #L3a5442.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.Partial` v1 @kind this, `org.joda.time.DateTimeFieldType` v2 @kind object, `int` v3 ) @signature `Lorg/joda/time/Partial;.<init>:(Lorg/joda/time/DateTimeFieldType;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a5454.  v0:= 0I;
  #L3a5456.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/joda/time/Partial;.<init>:(Lorg/joda/time/DateTimeFieldType;ILorg/joda/time/Chronology;)V` @kind direct;
  #L3a545c.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.Partial` v3 @kind this, `org.joda.time.DateTimeFieldType` v4 @kind object, `int` v5 , `org.joda.time.Chronology` v6 @kind object) @signature `Lorg/joda/time/Partial;.<init>:(Lorg/joda/time/DateTimeFieldType;ILorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3a5470.  call `<init>`(v3) @signature `Lorg/joda/time/base/AbstractPartial;.<init>:()V` @kind direct;
  #L3a5476.  call temp:= `getChronology`(v6) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3a547c.  v6:= temp @kind object;
  #L3a547e.  call temp:= `withUTC`(v6) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a5484.  v6:= temp @kind object;
  #L3a5486.  v3.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` := v6 @kind object;
  #L3a548a.  if v4 == 0 then goto L3a54b2;
  #L3a548e.  v0:= 1I;
  #L3a5490.  v1:= new `org.joda.time.DateTimeFieldType`[v0];
  #L3a5494.  v2:= 0I;
  #L3a5496.  v1[v2]:= v4 @kind object;
  #L3a549a.  v3.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] := v1 @kind object;
  #L3a549e.  v4:= new `int`[v0];
  #L3a54a2.  v4[v2]:= v5;
  #L3a54a6.  v3.`org.joda.time.Partial.iValues` @type ^`int`[] := v4 @kind object;
  #L3a54aa.  call `validate`(v6, v3, v4) @signature `Lorg/joda/time/Chronology;.validate:(Lorg/joda/time/ReadablePartial;[I)V` @kind virtual;
  #L3a54b0.  return @kind void;
  #L3a54b2.  v4:= new `java.lang.IllegalArgumentException`;
  #L3a54b6.  v5:= "The field type must not be null" @kind object;
  #L3a54ba.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a54c0.  throw v4;
}
procedure `void` `<init>`(`org.joda.time.Partial` v1 @kind this, `org.joda.time.Partial` v2 @kind object, `int`[] v3 @kind object) @signature `Lorg/joda/time/Partial;.<init>:(Lorg/joda/time/Partial;[I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3a592c.  call `<init>`(v1) @signature `Lorg/joda/time/base/AbstractPartial;.<init>:()V` @kind direct;
  #L3a5932.  v0:= v2.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3a5936.  v1.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` := v0 @kind object;
  #L3a593a.  v2:= v2.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a593e.  v1.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] := v2 @kind object;
  #L3a5942.  v1.`org.joda.time.Partial.iValues` @type ^`int`[] := v3 @kind object;
  #L3a5946.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.Partial` v3 @kind this, `org.joda.time.ReadablePartial` v4 @kind object) @signature `Lorg/joda/time/Partial;.<init>:(Lorg/joda/time/ReadablePartial;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3a5958.  call `<init>`(v3) @signature `Lorg/joda/time/base/AbstractPartial;.<init>:()V` @kind direct;
  #L3a595e.  if v4 == 0 then goto L3a59d4;
  #L3a5962.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/ReadablePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3a5968.  v0:= temp @kind object;
  #L3a596a.  call temp:= `getChronology`(v0) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3a5970.  v0:= temp @kind object;
  #L3a5972.  call temp:= `withUTC`(v0) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a5978.  v0:= temp @kind object;
  #L3a597a.  v3.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` := v0 @kind object;
  #L3a597e.  call temp:= `size`(v4) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3a5984.  v0:= temp;
  #L3a5986.  v0:= new `org.joda.time.DateTimeFieldType`[v0];
  #L3a598a.  v3.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] := v0 @kind object;
  #L3a598e.  call temp:= `size`(v4) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3a5994.  v0:= temp;
  #L3a5996.  v0:= new `int`[v0];
  #L3a599a.  v3.`org.joda.time.Partial.iValues` @type ^`int`[] := v0 @kind object;
  #L3a599e.  v0:= 0I;
  #L3a59a0.  call temp:= `size`(v4) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3a59a6.  v1:= temp;
  #L3a59a8.  if v0 >= v1 then goto L3a59d2;
  #L3a59ac.  v1:= v3.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a59b0.  call temp:= `getFieldType`(v4, v0) @signature `Lorg/joda/time/ReadablePartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind interface;
  #L3a59b6.  v2:= temp @kind object;
  #L3a59b8.  v1[v0]:= v2 @kind object;
  #L3a59bc.  v1:= v3.`org.joda.time.Partial.iValues` @type ^`int`[] @kind object;
  #L3a59c0.  call temp:= `getValue`(v4, v0) @signature `Lorg/joda/time/ReadablePartial;.getValue:(I)I` @kind interface;
  #L3a59c6.  v2:= temp;
  #L3a59c8.  v1[v0]:= v2;
  #L3a59cc.  v0:= v0 + 1;
  #L3a59d0.  goto L3a59a0;
  #L3a59d2.  return @kind void;
  #L3a59d4.  v4:= new `java.lang.IllegalArgumentException`;
  #L3a59d8.  v0:= "The partial must not be null" @kind object;
  #L3a59dc.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a59e2.  throw v4;
}
procedure `void` `<init>`(`org.joda.time.Partial` v1 @kind this, `org.joda.time.DateTimeFieldType`[] v2 @kind object, `int`[] v3 @kind object) @signature `Lorg/joda/time/Partial;.<init>:([Lorg/joda/time/DateTimeFieldType;[I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a54d4.  v0:= 0I;
  #L3a54d6.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/joda/time/Partial;.<init>:([Lorg/joda/time/DateTimeFieldType;[ILorg/joda/time/Chronology;)V` @kind direct;
  #L3a54dc.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.Partial` v11 @kind this, `org.joda.time.DateTimeFieldType`[] v12 @kind object, `int`[] v13 @kind object, `org.joda.time.Chronology` v14 @kind object) @signature `Lorg/joda/time/Partial;.<init>:([Lorg/joda/time/DateTimeFieldType;[ILorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3a54f0.  call `<init>`(v11) @signature `Lorg/joda/time/base/AbstractPartial;.<init>:()V` @kind direct;
  #L3a54f6.  call temp:= `getChronology`(v14) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3a54fc.  v14:= temp @kind object;
  #L3a54fe.  call temp:= `withUTC`(v14) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a5504.  v14:= temp @kind object;
  #L3a5506.  v11.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` := v14 @kind object;
  #L3a550a.  if v12 == 0 then goto L3a590c;
  #L3a550e.  if v13 == 0 then goto L3a58fc;
  #L3a5512.  v0:= length @variable v13;
  #L3a5514.  v1:= length @variable v12;
  #L3a5516.  if v0 != v1 then goto L3a58ec;
  #L3a551a.  v0:= length @variable v12;
  #L3a551c.  if v0 != 0 then goto L3a552a;
  #L3a5520.  v11.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] := v12 @kind object;
  #L3a5524.  v11.`org.joda.time.Partial.iValues` @type ^`int`[] := v13 @kind object;
  #L3a5528.  return @kind void;
  #L3a552a.  v0:= 0I;
  #L3a552c.  v1:= 0I;
  #L3a552e.  v2:= length @variable v12;
  #L3a5530.  if v1 >= v2 then goto L3a5570;
  #L3a5534.  v2:= v12[v1] @kind object;
  #L3a5538.  if v2 == 0 then goto L3a5542;
  #L3a553c.  v1:= v1 + 1;
  #L3a5540.  goto L3a552e;
  #L3a5542.  v12:= new `java.lang.IllegalArgumentException`;
  #L3a5546.  v13:= new `java.lang.StringBuilder`;
  #L3a554a.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3a5550.  v14:= "Types array must not contain null: index " @kind object;
  #L3a5554.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a555a.  call temp:= `append`(v13, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a5560.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a5566.  v13:= temp @kind object;
  #L3a5568.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a556e.  throw v12;
  #L3a5570.  v1:= 0I;
  #L3a5572.  v2:= length @variable v12;
  #L3a5574.  if v0 >= v2 then goto L3a58c4;
  #L3a5578.  v2:= v12[v0] @kind object;
  #L3a557c.  call temp:= `getDurationType`(v2) @signature `Lorg/joda/time/DateTimeFieldType;.getDurationType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3a5582.  v3:= temp @kind object;
  #L3a5584.  v4:= v11.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3a5588.  call temp:= `getField`(v3, v4) @signature `Lorg/joda/time/DurationFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;` @kind virtual;
  #L3a558e.  v3:= temp @kind object;
  #L3a5590.  if v0 <= 0 then goto L3a58ba;
  #L3a5594.  call temp:= `isSupported`(v3) @signature `Lorg/joda/time/DurationField;.isSupported:()Z` @kind virtual;
  #L3a559a.  v4:= temp;
  #L3a559c.  v5:= " and " @kind object;
  #L3a55a0.  v6:= "Types array must be in order largest-smallest: " @kind object;
  #L3a55a4.  v7:= " < " @kind object;
  #L3a55a8.  if v4 != 0 then goto L3a5658;
  #L3a55ac.  call temp:= `isSupported`(v1) @signature `Lorg/joda/time/DurationField;.isSupported:()Z` @kind virtual;
  #L3a55b2.  v13:= temp;
  #L3a55b4.  if v13 == 0 then goto L3a5606;
  #L3a55b8.  v13:= new `java.lang.IllegalArgumentException`;
  #L3a55bc.  v14:= new `java.lang.StringBuilder`;
  #L3a55c0.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3a55c6.  call temp:= `append`(v14, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a55cc.  v0:= v0 + -1;
  #L3a55d0.  v12:= v12[v0] @kind object;
  #L3a55d4.  call temp:= `getName`(v12) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a55da.  v12:= temp @kind object;
  #L3a55dc.  call temp:= `append`(v14, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a55e2.  call temp:= `append`(v14, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a55e8.  call temp:= `getName`(v2) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a55ee.  v12:= temp @kind object;
  #L3a55f0.  call temp:= `append`(v14, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a55f6.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a55fc.  v12:= temp @kind object;
  #L3a55fe.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a5604.  throw v13;
  #L3a5606.  v13:= new `java.lang.IllegalArgumentException`;
  #L3a560a.  v14:= new `java.lang.StringBuilder`;
  #L3a560e.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3a5614.  v1:= "Types array must not contain duplicate unsupported: " @kind object;
  #L3a5618.  call temp:= `append`(v14, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a561e.  v0:= v0 + -1;
  #L3a5622.  v12:= v12[v0] @kind object;
  #L3a5626.  call temp:= `getName`(v12) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a562c.  v12:= temp @kind object;
  #L3a562e.  call temp:= `append`(v14, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a5634.  call temp:= `append`(v14, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a563a.  call temp:= `getName`(v2) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a5640.  v12:= temp @kind object;
  #L3a5642.  call temp:= `append`(v14, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a5648.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a564e.  v12:= temp @kind object;
  #L3a5650.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a5656.  throw v13;
  #L3a5658.  call temp:= `compareTo`(v1, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L3a565e.  v4:= temp;
  #L3a5660.  if v4 < 0 then goto L3a586c;
  #L3a5664.  if v4 != 0 then goto L3a58ba;
  #L3a5668.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3a566e.  v4:= temp;
  #L3a5670.  if v4 == 0 then goto L3a57fc;
  #L3a5674.  v1:= v0 + -1;
  #L3a5678.  v4:= v12[v1] @kind object;
  #L3a567c.  call temp:= `getRangeDurationType`(v4) @signature `Lorg/joda/time/DateTimeFieldType;.getRangeDurationType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3a5682.  v4:= temp @kind object;
  #L3a5684.  call temp:= `getRangeDurationType`(v2) @signature `Lorg/joda/time/DateTimeFieldType;.getRangeDurationType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3a568a.  v8:= temp @kind object;
  #L3a568c.  v9:= "Types array must not contain duplicate: " @kind object;
  #L3a5690.  if v4 != 0 then goto L3a56e6;
  #L3a5694.  if v8 == 0 then goto L3a569c;
  #L3a5698.  goto L3a58ba;
  #L3a569c.  v13:= new `java.lang.IllegalArgumentException`;
  #L3a56a0.  v14:= new `java.lang.StringBuilder`;
  #L3a56a4.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3a56aa.  call temp:= `append`(v14, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a56b0.  v12:= v12[v1] @kind object;
  #L3a56b4.  call temp:= `getName`(v12) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a56ba.  v12:= temp @kind object;
  #L3a56bc.  call temp:= `append`(v14, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a56c2.  call temp:= `append`(v14, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a56c8.  call temp:= `getName`(v2) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a56ce.  v12:= temp @kind object;
  #L3a56d0.  call temp:= `append`(v14, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a56d6.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a56dc.  v12:= temp @kind object;
  #L3a56de.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a56e4.  throw v13;
  #L3a56e6.  if v8 == 0 then goto L3a57b2;
  #L3a56ea.  v10:= v11.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3a56ee.  call temp:= `getField`(v4, v10) @signature `Lorg/joda/time/DurationFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;` @kind virtual;
  #L3a56f4.  v4:= temp @kind object;
  #L3a56f6.  v10:= v11.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3a56fa.  call temp:= `getField`(v8, v10) @signature `Lorg/joda/time/DurationFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;` @kind virtual;
  #L3a5700.  v8:= temp @kind object;
  #L3a5702.  call temp:= `compareTo`(v4, v8) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L3a5708.  v10:= temp;
  #L3a570a.  if v10 < 0 then goto L3a5768;
  #L3a570e.  call temp:= `compareTo`(v4, v8) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L3a5714.  v4:= temp;
  #L3a5716.  if v4 == 0 then goto L3a571e;
  #L3a571a.  goto L3a58ba;
  #L3a571e.  v13:= new `java.lang.IllegalArgumentException`;
  #L3a5722.  v14:= new `java.lang.StringBuilder`;
  #L3a5726.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3a572c.  call temp:= `append`(v14, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a5732.  v12:= v12[v1] @kind object;
  #L3a5736.  call temp:= `getName`(v12) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a573c.  v12:= temp @kind object;
  #L3a573e.  call temp:= `append`(v14, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a5744.  call temp:= `append`(v14, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a574a.  call temp:= `getName`(v2) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a5750.  v12:= temp @kind object;
  #L3a5752.  call temp:= `append`(v14, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a5758.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a575e.  v12:= temp @kind object;
  #L3a5760.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a5766.  throw v13;
  #L3a5768.  v13:= new `java.lang.IllegalArgumentException`;
  #L3a576c.  v14:= new `java.lang.StringBuilder`;
  #L3a5770.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3a5776.  call temp:= `append`(v14, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a577c.  v12:= v12[v1] @kind object;
  #L3a5780.  call temp:= `getName`(v12) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a5786.  v12:= temp @kind object;
  #L3a5788.  call temp:= `append`(v14, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a578e.  call temp:= `append`(v14, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a5794.  call temp:= `getName`(v2) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a579a.  v12:= temp @kind object;
  #L3a579c.  call temp:= `append`(v14, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a57a2.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a57a8.  v12:= temp @kind object;
  #L3a57aa.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a57b0.  throw v13;
  #L3a57b2.  v13:= new `java.lang.IllegalArgumentException`;
  #L3a57b6.  v14:= new `java.lang.StringBuilder`;
  #L3a57ba.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3a57c0.  call temp:= `append`(v14, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a57c6.  v12:= v12[v1] @kind object;
  #L3a57ca.  call temp:= `getName`(v12) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a57d0.  v12:= temp @kind object;
  #L3a57d2.  call temp:= `append`(v14, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a57d8.  call temp:= `append`(v14, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a57de.  call temp:= `getName`(v2) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a57e4.  v12:= temp @kind object;
  #L3a57e6.  call temp:= `append`(v14, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a57ec.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a57f2.  v12:= temp @kind object;
  #L3a57f4.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a57fa.  throw v13;
  #L3a57fc.  call temp:= `isSupported`(v1) @signature `Lorg/joda/time/DurationField;.isSupported:()Z` @kind virtual;
  #L3a5802.  v4:= temp;
  #L3a5804.  if v4 == 0 then goto L3a58ba;
  #L3a5808.  call temp:= `getType`(v1) @signature `Lorg/joda/time/DurationField;.getType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3a580e.  v1:= temp @kind object;
  #L3a5810.  v4:= `@@org.joda.time.DurationFieldType.YEARS_TYPE` @type ^`org.joda.time.DurationFieldType` @kind object;
  #L3a5814.  if v1 != v4 then goto L3a581a;
  #L3a5818.  goto L3a58ba;
  #L3a581a.  v13:= new `java.lang.IllegalArgumentException`;
  #L3a581e.  v14:= new `java.lang.StringBuilder`;
  #L3a5822.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3a5828.  v1:= "Types array must be in order largest-smallest, for year-based fields, years is defined as being largest: " @kind object;
  #L3a582c.  call temp:= `append`(v14, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a5832.  v0:= v0 + -1;
  #L3a5836.  v12:= v12[v0] @kind object;
  #L3a583a.  call temp:= `getName`(v12) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a5840.  v12:= temp @kind object;
  #L3a5842.  call temp:= `append`(v14, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a5848.  call temp:= `append`(v14, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a584e.  call temp:= `getName`(v2) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a5854.  v12:= temp @kind object;
  #L3a5856.  call temp:= `append`(v14, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a585c.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a5862.  v12:= temp @kind object;
  #L3a5864.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a586a.  throw v13;
  #L3a586c.  v13:= new `java.lang.IllegalArgumentException`;
  #L3a5870.  v14:= new `java.lang.StringBuilder`;
  #L3a5874.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3a587a.  call temp:= `append`(v14, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a5880.  v0:= v0 + -1;
  #L3a5884.  v12:= v12[v0] @kind object;
  #L3a5888.  call temp:= `getName`(v12) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a588e.  v12:= temp @kind object;
  #L3a5890.  call temp:= `append`(v14, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a5896.  call temp:= `append`(v14, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a589c.  call temp:= `getName`(v2) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a58a2.  v12:= temp @kind object;
  #L3a58a4.  call temp:= `append`(v14, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a58aa.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a58b0.  v12:= temp @kind object;
  #L3a58b2.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a58b8.  throw v13;
  #L3a58ba.  v0:= v0 + 1;
  #L3a58be.  v1:= v3 @kind object;
  #L3a58c0.  goto L3a5572;
  #L3a58c4.  call temp:= `clone`(v12) @signature `[Lorg/joda/time/DateTimeFieldType;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3a58ca.  v12:= temp @kind object;
  #L3a58cc.  v12:= (`org.joda.time.DateTimeFieldType`[]) v12 @kind object;
  #L3a58d0.  v11.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] := v12 @kind object;
  #L3a58d4.  call `validate`(v14, v11, v13) @signature `Lorg/joda/time/Chronology;.validate:(Lorg/joda/time/ReadablePartial;[I)V` @kind virtual;
  #L3a58da.  call temp:= `clone`(v13) @signature `[I.clone:()Ljava/lang/Object;` @kind virtual;
  #L3a58e0.  v12:= temp @kind object;
  #L3a58e2.  v12:= (`int`[]) v12 @kind object;
  #L3a58e6.  v11.`org.joda.time.Partial.iValues` @type ^`int`[] := v12 @kind object;
  #L3a58ea.  return @kind void;
  #L3a58ec.  v12:= new `java.lang.IllegalArgumentException`;
  #L3a58f0.  v13:= "Values array must be the same length as the types array" @kind object;
  #L3a58f4.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a58fa.  throw v12;
  #L3a58fc.  v12:= new `java.lang.IllegalArgumentException`;
  #L3a5900.  v13:= "Values array must not be null" @kind object;
  #L3a5904.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a590a.  throw v12;
  #L3a590c.  v12:= new `java.lang.IllegalArgumentException`;
  #L3a5910.  v13:= "Types array must not be null" @kind object;
  #L3a5914.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a591a.  throw v12;
}
procedure `org.joda.time.Chronology` `getChronology`(`org.joda.time.Partial` v1 @kind this) @signature `Lorg/joda/time/Partial;.getChronology:()Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a4ecc.  v0:= v1.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3a4ed0.  return v0 @kind object;
}
procedure `org.joda.time.DateTimeField` `getField`(`org.joda.time.Partial` v1 @kind this, `int` v2 , `org.joda.time.Chronology` v3 @kind object) @signature `Lorg/joda/time/Partial;.getField:(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3a4ee4.  v0:= v1.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a4ee8.  v2:= v0[v2] @kind object;
  #L3a4eec.  call temp:= `getField`(v2, v3) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a4ef2.  v2:= temp @kind object;
  #L3a4ef4.  return v2 @kind object;
}
procedure `org.joda.time.DateTimeFieldType` `getFieldType`(`org.joda.time.Partial` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/Partial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a4f08.  v0:= v1.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a4f0c.  v2:= v0[v2] @kind object;
  #L3a4f10.  return v2 @kind object;
}
procedure `org.joda.time.DateTimeFieldType`[] `getFieldTypes`(`org.joda.time.Partial` v1 @kind this) @signature `Lorg/joda/time/Partial;.getFieldTypes:()[Lorg/joda/time/DateTimeFieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a4f24.  v0:= v1.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a4f28.  call temp:= `clone`(v0) @signature `[Lorg/joda/time/DateTimeFieldType;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3a4f2e.  v0:= temp @kind object;
  #L3a4f30.  v0:= (`org.joda.time.DateTimeFieldType`[]) v0 @kind object;
  #L3a4f34.  return v0 @kind object;
}
procedure `org.joda.time.format.DateTimeFormatter` `getFormatter`(`org.joda.time.Partial` v5 @kind this) @signature `Lorg/joda/time/Partial;.getFormatter:()Lorg/joda/time/format/DateTimeFormatter;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3a5350.  v0:= v5.`org.joda.time.Partial.iFormatter` @type ^`org.joda.time.format.DateTimeFormatter`[] @kind object;
  #L3a5354.  v1:= 0I;
  #L3a5356.  if v0 != 0 then goto L3a53ac;
  #L3a535a.  call temp:= `size`(v5) @signature `Lorg/joda/time/Partial;.size:()I` @kind virtual;
  #L3a5360.  v0:= temp;
  #L3a5362.  if v0 != 0 then goto L3a536a;
  #L3a5366.  v0:= 0I;
  #L3a5368.  return v0 @kind object;
  #L3a536a.  v0:= 2I;
  #L3a536c.  v0:= new `org.joda.time.format.DateTimeFormatter`[v0];
  #L3a5370.  v2:= new `java.util.ArrayList`;
  #L3a5374.  v3:= v5.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a5378.  call temp:= `asList`(v3) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L3a537e.  v3:= temp @kind object;
  #L3a5380.  call `<init>`(v2, v3) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3a5386.  v3:= 1I;
  #L3a5388.  call temp:= `forFields`(v2, v3, v1) @signature `Lorg/joda/time/format/ISODateTimeFormat;.forFields:(Ljava/util/Collection;ZZ)Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3a538e.  v4:= temp @kind object;
  #L3a5390.  v0[v1]:= v4 @kind object;
  #L3a5394.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3a539a.  v2:= temp;
  #L3a539c.  if v2 != 0 then goto L3a53a8;
  #L3a53a0.  v2:= v0[v1] @kind object;
  #L3a53a4.  v0[v3]:= v2 @kind object;
  #L3a53a8.  v5.`org.joda.time.Partial.iFormatter` @type ^`org.joda.time.format.DateTimeFormatter`[] := v0 @kind object;
  #L3a53ac.  v0:= v0[v1] @kind object;
  #L3a53b0.  return v0 @kind object;
  catch `java.lang.IllegalArgumentException` @[L3a5370..L3a53a8] goto L3a53a8;
}
procedure `int` `getValue`(`org.joda.time.Partial` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/Partial;.getValue:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a4d24.  v0:= v1.`org.joda.time.Partial.iValues` @type ^`int`[] @kind object;
  #L3a4d28.  v2:= v0[v2];
  #L3a4d2c.  return v2;
}
procedure `int`[] `getValues`(`org.joda.time.Partial` v1 @kind this) @signature `Lorg/joda/time/Partial;.getValues:()[I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a4d58.  v0:= v1.`org.joda.time.Partial.iValues` @type ^`int`[] @kind object;
  #L3a4d5c.  call temp:= `clone`(v0) @signature `[I.clone:()Ljava/lang/Object;` @kind virtual;
  #L3a4d62.  v0:= temp @kind object;
  #L3a4d64.  v0:= (`int`[]) v0 @kind object;
  #L3a4d68.  return v0 @kind object;
}
procedure `boolean` `isMatch`(`org.joda.time.Partial` v6 @kind this, `org.joda.time.ReadableInstant` v7 @kind object) @signature `Lorg/joda/time/Partial;.isMatch:(Lorg/joda/time/ReadableInstant;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3a4c70.  call temp:= `getInstantMillis`(v7) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3a4c76.  v0:= temp @kind wide;
  #L3a4c78.  call temp:= `getInstantChronology`(v7) @signature `Lorg/joda/time/DateTimeUtils;.getInstantChronology:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;` @kind static;
  #L3a4c7e.  v7:= temp @kind object;
  #L3a4c80.  v2:= 0I;
  #L3a4c82.  v3:= 0I;
  #L3a4c84.  v4:= v6.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a4c88.  v5:= length @variable v4;
  #L3a4c8a.  if v3 >= v5 then goto L3a4cb6;
  #L3a4c8e.  v4:= v4[v3] @kind object;
  #L3a4c92.  call temp:= `getField`(v4, v7) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a4c98.  v4:= temp @kind object;
  #L3a4c9a.  call temp:= `get`(v4, v0) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3a4ca0.  v4:= temp;
  #L3a4ca2.  v5:= v6.`org.joda.time.Partial.iValues` @type ^`int`[] @kind object;
  #L3a4ca6.  v5:= v5[v3];
  #L3a4caa.  if v4 == v5 then goto L3a4cb0;
  #L3a4cae.  return v2;
  #L3a4cb0.  v3:= v3 + 1;
  #L3a4cb4.  goto L3a4c84;
  #L3a4cb6.  v7:= 1I;
  #L3a4cb8.  return v7;
}
procedure `boolean` `isMatch`(`org.joda.time.Partial` v4 @kind this, `org.joda.time.ReadablePartial` v5 @kind object) @signature `Lorg/joda/time/Partial;.isMatch:(Lorg/joda/time/ReadablePartial;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a4ccc.  if v5 == 0 then goto L3a4d02;
  #L3a4cd0.  v0:= 0I;
  #L3a4cd2.  v1:= 0I;
  #L3a4cd4.  v2:= v4.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a4cd8.  v3:= length @variable v2;
  #L3a4cda.  if v1 >= v3 then goto L3a4cfe;
  #L3a4cde.  v2:= v2[v1] @kind object;
  #L3a4ce2.  call temp:= `get`(v5, v2) @signature `Lorg/joda/time/ReadablePartial;.get:(Lorg/joda/time/DateTimeFieldType;)I` @kind interface;
  #L3a4ce8.  v2:= temp;
  #L3a4cea.  v3:= v4.`org.joda.time.Partial.iValues` @type ^`int`[] @kind object;
  #L3a4cee.  v3:= v3[v1];
  #L3a4cf2.  if v2 == v3 then goto L3a4cf8;
  #L3a4cf6.  return v0;
  #L3a4cf8.  v1:= v1 + 1;
  #L3a4cfc.  goto L3a4cd4;
  #L3a4cfe.  v5:= 1I;
  #L3a4d00.  return v5;
  #L3a4d02.  v5:= new `java.lang.IllegalArgumentException`;
  #L3a4d06.  v0:= "The partial must not be null" @kind object;
  #L3a4d0a.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a4d10.  throw v5;
}
procedure `org.joda.time.Partial` `minus`(`org.joda.time.Partial` v1 @kind this, `org.joda.time.ReadablePeriod` v2 @kind object) @signature `Lorg/joda/time/Partial;.minus:(Lorg/joda/time/ReadablePeriod;)Lorg/joda/time/Partial;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a4f48.  v0:= -1I;
  #L3a4f4a.  call temp:= `withPeriodAdded`(v1, v2, v0) @signature `Lorg/joda/time/Partial;.withPeriodAdded:(Lorg/joda/time/ReadablePeriod;I)Lorg/joda/time/Partial;` @kind virtual;
  #L3a4f50.  v2:= temp @kind object;
  #L3a4f52.  return v2 @kind object;
}
procedure `org.joda.time.Partial` `plus`(`org.joda.time.Partial` v1 @kind this, `org.joda.time.ReadablePeriod` v2 @kind object) @signature `Lorg/joda/time/Partial;.plus:(Lorg/joda/time/ReadablePeriod;)Lorg/joda/time/Partial;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a4f64.  v0:= 1I;
  #L3a4f66.  call temp:= `withPeriodAdded`(v1, v2, v0) @signature `Lorg/joda/time/Partial;.withPeriodAdded:(Lorg/joda/time/ReadablePeriod;I)Lorg/joda/time/Partial;` @kind virtual;
  #L3a4f6c.  v2:= temp @kind object;
  #L3a4f6e.  return v2 @kind object;
}
procedure `org.joda.time.Partial$Property` `property`(`org.joda.time.Partial` v1 @kind this, `org.joda.time.DateTimeFieldType` v2 @kind object) @signature `Lorg/joda/time/Partial;.property:(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/Partial$Property;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a532c.  v0:= new `org.joda.time.Partial$Property`;
  #L3a5330.  call temp:= `indexOfSupported`(v1, v2) @signature `Lorg/joda/time/base/AbstractPartial;.indexOfSupported:(Lorg/joda/time/DateTimeFieldType;)I` @kind virtual;
  #L3a5336.  v2:= temp;
  #L3a5338.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/Partial$Property;.<init>:(Lorg/joda/time/Partial;I)V` @kind direct;
  #L3a533e.  return v0 @kind object;
}
procedure `int` `size`(`org.joda.time.Partial` v1 @kind this) @signature `Lorg/joda/time/Partial;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a4d40.  v0:= v1.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a4d44.  v0:= length @variable v0;
  #L3a4d46.  return v0;
}
procedure `java.lang.String` `toString`(`org.joda.time.Partial` v2 @kind this) @signature `Lorg/joda/time/Partial;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a4d7c.  v0:= v2.`org.joda.time.Partial.iFormatter` @type ^`org.joda.time.format.DateTimeFormatter`[] @kind object;
  #L3a4d80.  if v0 != 0 then goto L3a4d9c;
  #L3a4d84.  call temp:= `getFormatter`(v2) @signature `Lorg/joda/time/Partial;.getFormatter:()Lorg/joda/time/format/DateTimeFormatter;` @kind virtual;
  #L3a4d8a.  v0:= v2.`org.joda.time.Partial.iFormatter` @type ^`org.joda.time.format.DateTimeFormatter`[] @kind object;
  #L3a4d8e.  if v0 != 0 then goto L3a4d9c;
  #L3a4d92.  call temp:= `toStringList`(v2) @signature `Lorg/joda/time/Partial;.toStringList:()Ljava/lang/String;` @kind virtual;
  #L3a4d98.  v0:= temp @kind object;
  #L3a4d9a.  return v0 @kind object;
  #L3a4d9c.  v1:= 1I;
  #L3a4d9e.  v0:= v0[v1] @kind object;
  #L3a4da2.  if v0 != 0 then goto L3a4db0;
  #L3a4da6.  call temp:= `toStringList`(v2) @signature `Lorg/joda/time/Partial;.toStringList:()Ljava/lang/String;` @kind virtual;
  #L3a4dac.  v0:= temp @kind object;
  #L3a4dae.  return v0 @kind object;
  #L3a4db0.  call temp:= `print`(v0, v2) @signature `Lorg/joda/time/format/DateTimeFormatter;.print:(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;` @kind virtual;
  #L3a4db6.  v0:= temp @kind object;
  #L3a4db8.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.Partial` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/joda/time/Partial;.toString:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3a4dcc.  if v1 != 0 then goto L3a4dda;
  #L3a4dd0.  call temp:= `toString`(v0) @signature `Lorg/joda/time/Partial;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a4dd6.  v1:= temp @kind object;
  #L3a4dd8.  return v1 @kind object;
  #L3a4dda.  call temp:= `forPattern`(v1) @signature `Lorg/joda/time/format/DateTimeFormat;.forPattern:(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3a4de0.  v1:= temp @kind object;
  #L3a4de2.  call temp:= `print`(v1, v0) @signature `Lorg/joda/time/format/DateTimeFormatter;.print:(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;` @kind virtual;
  #L3a4de8.  v1:= temp @kind object;
  #L3a4dea.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.Partial` v0 @kind this, `java.lang.String` v1 @kind object, `java.util.Locale` v2 @kind object) @signature `Lorg/joda/time/Partial;.toString:(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3a4dfc.  if v1 != 0 then goto L3a4e0a;
  #L3a4e00.  call temp:= `toString`(v0) @signature `Lorg/joda/time/Partial;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a4e06.  v1:= temp @kind object;
  #L3a4e08.  return v1 @kind object;
  #L3a4e0a.  call temp:= `forPattern`(v1) @signature `Lorg/joda/time/format/DateTimeFormat;.forPattern:(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3a4e10.  v1:= temp @kind object;
  #L3a4e12.  call temp:= `withLocale`(v1, v2) @signature `Lorg/joda/time/format/DateTimeFormatter;.withLocale:(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;` @kind virtual;
  #L3a4e18.  v1:= temp @kind object;
  #L3a4e1a.  call temp:= `print`(v1, v0) @signature `Lorg/joda/time/format/DateTimeFormatter;.print:(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;` @kind virtual;
  #L3a4e20.  v1:= temp @kind object;
  #L3a4e22.  return v1 @kind object;
}
procedure `java.lang.String` `toStringList`(`org.joda.time.Partial` v4 @kind this) @signature `Lorg/joda/time/Partial;.toStringList:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a4e34.  call temp:= `size`(v4) @signature `Lorg/joda/time/Partial;.size:()I` @kind virtual;
  #L3a4e3a.  v0:= temp;
  #L3a4e3c.  v1:= new `java.lang.StringBuilder`;
  #L3a4e40.  v2:= v0 * 20;
  #L3a4e44.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3a4e4a.  v2:= 91I;
  #L3a4e4e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a4e54.  v2:= 0I;
  #L3a4e56.  if v2 >= v0 then goto L3a4ea6;
  #L3a4e5a.  if v2 <= 0 then goto L3a4e72;
  #L3a4e5e.  v3:= 44I;
  #L3a4e62.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a4e68.  v3:= 32I;
  #L3a4e6c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a4e72.  v3:= v4.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a4e76.  v3:= v3[v2] @kind object;
  #L3a4e7a.  call temp:= `getName`(v3) @signature `Lorg/joda/time/DateTimeFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3a4e80.  v3:= temp @kind object;
  #L3a4e82.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a4e88.  v3:= 61I;
  #L3a4e8c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a4e92.  v3:= v4.`org.joda.time.Partial.iValues` @type ^`int`[] @kind object;
  #L3a4e96.  v3:= v3[v2];
  #L3a4e9a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a4ea0.  v2:= v2 + 1;
  #L3a4ea4.  goto L3a4e56;
  #L3a4ea6.  v0:= 93I;
  #L3a4eaa.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a4eb0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a4eb6.  v0:= temp @kind object;
  #L3a4eb8.  return v0 @kind object;
}
procedure `org.joda.time.Partial` `with`(`org.joda.time.Partial` v9 @kind this, `org.joda.time.DateTimeFieldType` v10 @kind object, `int` v11 ) @signature `Lorg/joda/time/Partial;.with:(Lorg/joda/time/DateTimeFieldType;I)Lorg/joda/time/Partial;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3a4f80.  if v10 == 0 then goto L3a50e8;
  #L3a4f84.  call temp:= `indexOf`(v9, v10) @signature `Lorg/joda/time/base/AbstractPartial;.indexOf:(Lorg/joda/time/DateTimeFieldType;)I` @kind virtual;
  #L3a4f8a.  v0:= temp;
  #L3a4f8c.  v1:= -1I;
  #L3a4f8e.  if v0 != v1 then goto L3a50b6;
  #L3a4f92.  v0:= v9.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a4f96.  v0:= length @variable v0;
  #L3a4f98.  v0:= v0 + 1;
  #L3a4f9c.  v1:= new `org.joda.time.DateTimeFieldType`[v0];
  #L3a4fa0.  v2:= new `int`[v0];
  #L3a4fa4.  call temp:= `getDurationType`(v10) @signature `Lorg/joda/time/DateTimeFieldType;.getDurationType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3a4faa.  v3:= temp @kind object;
  #L3a4fac.  v4:= v9.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3a4fb0.  call temp:= `getField`(v3, v4) @signature `Lorg/joda/time/DurationFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;` @kind virtual;
  #L3a4fb6.  v3:= temp @kind object;
  #L3a4fb8.  call temp:= `isSupported`(v3) @signature `Lorg/joda/time/DurationField;.isSupported:()Z` @kind virtual;
  #L3a4fbe.  v4:= temp;
  #L3a4fc0.  v5:= 0I;
  #L3a4fc2.  if v4 == 0 then goto L3a5060;
  #L3a4fc6.  v4:= 0I;
  #L3a4fc8.  v6:= v9.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a4fcc.  v7:= length @variable v6;
  #L3a4fce.  if v4 >= v7 then goto L3a5062;
  #L3a4fd2.  v6:= v6[v4] @kind object;
  #L3a4fd6.  call temp:= `getDurationType`(v6) @signature `Lorg/joda/time/DateTimeFieldType;.getDurationType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3a4fdc.  v7:= temp @kind object;
  #L3a4fde.  v8:= v9.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3a4fe2.  call temp:= `getField`(v7, v8) @signature `Lorg/joda/time/DurationFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;` @kind virtual;
  #L3a4fe8.  v7:= temp @kind object;
  #L3a4fea.  call temp:= `isSupported`(v7) @signature `Lorg/joda/time/DurationField;.isSupported:()Z` @kind virtual;
  #L3a4ff0.  v8:= temp;
  #L3a4ff2.  if v8 == 0 then goto L3a505a;
  #L3a4ff6.  call temp:= `compareTo`(v3, v7) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L3a4ffc.  v7:= temp;
  #L3a4ffe.  if v7 <= 0 then goto L3a5004;
  #L3a5002.  goto L3a5062;
  #L3a5004.  if v7 != 0 then goto L3a505a;
  #L3a5008.  call temp:= `getRangeDurationType`(v10) @signature `Lorg/joda/time/DateTimeFieldType;.getRangeDurationType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3a500e.  v7:= temp @kind object;
  #L3a5010.  if v7 != 0 then goto L3a5016;
  #L3a5014.  goto L3a5062;
  #L3a5016.  call temp:= `getRangeDurationType`(v6) @signature `Lorg/joda/time/DateTimeFieldType;.getRangeDurationType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3a501c.  v7:= temp @kind object;
  #L3a501e.  if v7 != 0 then goto L3a5024;
  #L3a5022.  goto L3a505a;
  #L3a5024.  call temp:= `getRangeDurationType`(v10) @signature `Lorg/joda/time/DateTimeFieldType;.getRangeDurationType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3a502a.  v7:= temp @kind object;
  #L3a502c.  v8:= v9.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3a5030.  call temp:= `getField`(v7, v8) @signature `Lorg/joda/time/DurationFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;` @kind virtual;
  #L3a5036.  v7:= temp @kind object;
  #L3a5038.  call temp:= `getRangeDurationType`(v6) @signature `Lorg/joda/time/DateTimeFieldType;.getRangeDurationType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3a503e.  v6:= temp @kind object;
  #L3a5040.  v8:= v9.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3a5044.  call temp:= `getField`(v6, v8) @signature `Lorg/joda/time/DurationFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;` @kind virtual;
  #L3a504a.  v6:= temp @kind object;
  #L3a504c.  call temp:= `compareTo`(v7, v6) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L3a5052.  v6:= temp;
  #L3a5054.  if v6 <= 0 then goto L3a505a;
  #L3a5058.  goto L3a5062;
  #L3a505a.  v4:= v4 + 1;
  #L3a505e.  goto L3a4fc8;
  #L3a5060.  v4:= 0I;
  #L3a5062.  v3:= v9.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a5066.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3a506c.  v3:= v9.`org.joda.time.Partial.iValues` @type ^`int`[] @kind object;
  #L3a5070.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3a5076.  v1[v4]:= v10 @kind object;
  #L3a507a.  v2[v4]:= v11;
  #L3a507e.  v10:= v9.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a5082.  v11:= v4 + 1;
  #L3a5086.  v0:= v0 - v4 @kind int;
  #L3a5088.  v0:= v0 + -1;
  #L3a508c.  call `arraycopy`(v10, v4, v1, v11, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3a5092.  v10:= v9.`org.joda.time.Partial.iValues` @type ^`int`[] @kind object;
  #L3a5096.  call `arraycopy`(v10, v4, v2, v11, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3a509c.  v10:= new `org.joda.time.Partial`;
  #L3a50a0.  v11:= v9.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3a50a4.  call `<init>`(v10, v1, v2, v11) @signature `Lorg/joda/time/Partial;.<init>:([Lorg/joda/time/DateTimeFieldType;[ILorg/joda/time/Chronology;)V` @kind direct;
  #L3a50aa.  v11:= v9.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3a50ae.  call `validate`(v11, v10, v2) @signature `Lorg/joda/time/Chronology;.validate:(Lorg/joda/time/ReadablePartial;[I)V` @kind virtual;
  #L3a50b4.  return v10 @kind object;
  #L3a50b6.  call temp:= `getValue`(v9, v0) @signature `Lorg/joda/time/Partial;.getValue:(I)I` @kind virtual;
  #L3a50bc.  v10:= temp;
  #L3a50be.  if v11 != v10 then goto L3a50c4;
  #L3a50c2.  return v9 @kind object;
  #L3a50c4.  call temp:= `getValues`(v9) @signature `Lorg/joda/time/Partial;.getValues:()[I` @kind virtual;
  #L3a50ca.  v10:= temp @kind object;
  #L3a50cc.  call temp:= `getField`(v9, v0) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a50d2.  v1:= temp @kind object;
  #L3a50d4.  call temp:= `set`(v1, v9, v0, v10, v11) @signature `Lorg/joda/time/DateTimeField;.set:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3a50da.  v10:= temp @kind object;
  #L3a50dc.  v11:= new `org.joda.time.Partial`;
  #L3a50e0.  call `<init>`(v11, v9, v10) @signature `Lorg/joda/time/Partial;.<init>:(Lorg/joda/time/Partial;[I)V` @kind direct;
  #L3a50e6.  return v11 @kind object;
  #L3a50e8.  v10:= new `java.lang.IllegalArgumentException`;
  #L3a50ec.  v11:= "The field type must not be null" @kind object;
  #L3a50f0.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a50f6.  throw v10;
}
procedure `org.joda.time.Partial` `withChronologyRetainFields`(`org.joda.time.Partial` v3 @kind this, `org.joda.time.Chronology` v4 @kind object) @signature `Lorg/joda/time/Partial;.withChronologyRetainFields:(Lorg/joda/time/Chronology;)Lorg/joda/time/Partial;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a5108.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3a510e.  v4:= temp @kind object;
  #L3a5110.  call temp:= `withUTC`(v4) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a5116.  v4:= temp @kind object;
  #L3a5118.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/Partial;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a511e.  v0:= temp @kind object;
  #L3a5120.  if v4 != v0 then goto L3a5126;
  #L3a5124.  return v3 @kind object;
  #L3a5126.  v0:= new `org.joda.time.Partial`;
  #L3a512a.  v1:= v3.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a512e.  v2:= v3.`org.joda.time.Partial.iValues` @type ^`int`[] @kind object;
  #L3a5132.  call `<init>`(v0, v4, v1, v2) @signature `Lorg/joda/time/Partial;.<init>:(Lorg/joda/time/Chronology;[Lorg/joda/time/DateTimeFieldType;[I)V` @kind direct;
  #L3a5138.  v1:= v3.`org.joda.time.Partial.iValues` @type ^`int`[] @kind object;
  #L3a513c.  call `validate`(v4, v0, v1) @signature `Lorg/joda/time/Chronology;.validate:(Lorg/joda/time/ReadablePartial;[I)V` @kind virtual;
  #L3a5142.  return v0 @kind object;
}
procedure `org.joda.time.Partial` `withField`(`org.joda.time.Partial` v2 @kind this, `org.joda.time.DateTimeFieldType` v3 @kind object, `int` v4 ) @signature `Lorg/joda/time/Partial;.withField:(Lorg/joda/time/DateTimeFieldType;I)Lorg/joda/time/Partial;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a5154.  call temp:= `indexOfSupported`(v2, v3) @signature `Lorg/joda/time/base/AbstractPartial;.indexOfSupported:(Lorg/joda/time/DateTimeFieldType;)I` @kind virtual;
  #L3a515a.  v3:= temp;
  #L3a515c.  call temp:= `getValue`(v2, v3) @signature `Lorg/joda/time/Partial;.getValue:(I)I` @kind virtual;
  #L3a5162.  v0:= temp;
  #L3a5164.  if v4 != v0 then goto L3a516a;
  #L3a5168.  return v2 @kind object;
  #L3a516a.  call temp:= `getValues`(v2) @signature `Lorg/joda/time/Partial;.getValues:()[I` @kind virtual;
  #L3a5170.  v0:= temp @kind object;
  #L3a5172.  call temp:= `getField`(v2, v3) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a5178.  v1:= temp @kind object;
  #L3a517a.  call temp:= `set`(v1, v2, v3, v0, v4) @signature `Lorg/joda/time/DateTimeField;.set:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3a5180.  v3:= temp @kind object;
  #L3a5182.  v4:= new `org.joda.time.Partial`;
  #L3a5186.  call `<init>`(v4, v2, v3) @signature `Lorg/joda/time/Partial;.<init>:(Lorg/joda/time/Partial;[I)V` @kind direct;
  #L3a518c.  return v4 @kind object;
}
procedure `org.joda.time.Partial` `withFieldAddWrapped`(`org.joda.time.Partial` v2 @kind this, `org.joda.time.DurationFieldType` v3 @kind object, `int` v4 ) @signature `Lorg/joda/time/Partial;.withFieldAddWrapped:(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/Partial;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a51a0.  call temp:= `indexOfSupported`(v2, v3) @signature `Lorg/joda/time/base/AbstractPartial;.indexOfSupported:(Lorg/joda/time/DurationFieldType;)I` @kind virtual;
  #L3a51a6.  v3:= temp;
  #L3a51a8.  if v4 != 0 then goto L3a51ae;
  #L3a51ac.  return v2 @kind object;
  #L3a51ae.  call temp:= `getValues`(v2) @signature `Lorg/joda/time/Partial;.getValues:()[I` @kind virtual;
  #L3a51b4.  v0:= temp @kind object;
  #L3a51b6.  call temp:= `getField`(v2, v3) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a51bc.  v1:= temp @kind object;
  #L3a51be.  call temp:= `addWrapPartial`(v1, v2, v3, v0, v4) @signature `Lorg/joda/time/DateTimeField;.addWrapPartial:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3a51c4.  v3:= temp @kind object;
  #L3a51c6.  v4:= new `org.joda.time.Partial`;
  #L3a51ca.  call `<init>`(v4, v2, v3) @signature `Lorg/joda/time/Partial;.<init>:(Lorg/joda/time/Partial;[I)V` @kind direct;
  #L3a51d0.  return v4 @kind object;
}
procedure `org.joda.time.Partial` `withFieldAdded`(`org.joda.time.Partial` v2 @kind this, `org.joda.time.DurationFieldType` v3 @kind object, `int` v4 ) @signature `Lorg/joda/time/Partial;.withFieldAdded:(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/Partial;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a51e4.  call temp:= `indexOfSupported`(v2, v3) @signature `Lorg/joda/time/base/AbstractPartial;.indexOfSupported:(Lorg/joda/time/DurationFieldType;)I` @kind virtual;
  #L3a51ea.  v3:= temp;
  #L3a51ec.  if v4 != 0 then goto L3a51f2;
  #L3a51f0.  return v2 @kind object;
  #L3a51f2.  call temp:= `getValues`(v2) @signature `Lorg/joda/time/Partial;.getValues:()[I` @kind virtual;
  #L3a51f8.  v0:= temp @kind object;
  #L3a51fa.  call temp:= `getField`(v2, v3) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a5200.  v1:= temp @kind object;
  #L3a5202.  call temp:= `add`(v1, v2, v3, v0, v4) @signature `Lorg/joda/time/DateTimeField;.add:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3a5208.  v3:= temp @kind object;
  #L3a520a.  v4:= new `org.joda.time.Partial`;
  #L3a520e.  call `<init>`(v4, v2, v3) @signature `Lorg/joda/time/Partial;.<init>:(Lorg/joda/time/Partial;[I)V` @kind direct;
  #L3a5214.  return v4 @kind object;
}
procedure `org.joda.time.Partial` `withPeriodAdded`(`org.joda.time.Partial` v5 @kind this, `org.joda.time.ReadablePeriod` v6 @kind object, `int` v7 ) @signature `Lorg/joda/time/Partial;.withPeriodAdded:(Lorg/joda/time/ReadablePeriod;I)Lorg/joda/time/Partial;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3a5228.  if v6 == 0 then goto L3a528e;
  #L3a522c.  if v7 != 0 then goto L3a5232;
  #L3a5230.  goto L3a528e;
  #L3a5232.  call temp:= `getValues`(v5) @signature `Lorg/joda/time/Partial;.getValues:()[I` @kind virtual;
  #L3a5238.  v0:= temp @kind object;
  #L3a523a.  v1:= 0I;
  #L3a523c.  call temp:= `size`(v6) @signature `Lorg/joda/time/ReadablePeriod;.size:()I` @kind interface;
  #L3a5242.  v2:= temp;
  #L3a5244.  if v1 >= v2 then goto L3a5282;
  #L3a5248.  call temp:= `getFieldType`(v6, v1) @signature `Lorg/joda/time/ReadablePeriod;.getFieldType:(I)Lorg/joda/time/DurationFieldType;` @kind interface;
  #L3a524e.  v2:= temp @kind object;
  #L3a5250.  call temp:= `indexOf`(v5, v2) @signature `Lorg/joda/time/base/AbstractPartial;.indexOf:(Lorg/joda/time/DurationFieldType;)I` @kind virtual;
  #L3a5256.  v2:= temp;
  #L3a5258.  if v2 < 0 then goto L3a527c;
  #L3a525c.  call temp:= `getField`(v5, v2) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a5262.  v3:= temp @kind object;
  #L3a5264.  call temp:= `getValue`(v6, v1) @signature `Lorg/joda/time/ReadablePeriod;.getValue:(I)I` @kind interface;
  #L3a526a.  v4:= temp;
  #L3a526c.  call temp:= `safeMultiply`(v4, v7) @signature `Lorg/joda/time/field/FieldUtils;.safeMultiply:(II)I` @kind static;
  #L3a5272.  v4:= temp;
  #L3a5274.  call temp:= `add`(v3, v5, v2, v0, v4) @signature `Lorg/joda/time/DateTimeField;.add:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3a527a.  v0:= temp @kind object;
  #L3a527c.  v1:= v1 + 1;
  #L3a5280.  goto L3a523c;
  #L3a5282.  v6:= new `org.joda.time.Partial`;
  #L3a5286.  call `<init>`(v6, v5, v0) @signature `Lorg/joda/time/Partial;.<init>:(Lorg/joda/time/Partial;[I)V` @kind direct;
  #L3a528c.  return v6 @kind object;
  #L3a528e.  return v5 @kind object;
}
procedure `org.joda.time.Partial` `without`(`org.joda.time.Partial` v7 @kind this, `org.joda.time.DateTimeFieldType` v8 @kind object) @signature `Lorg/joda/time/Partial;.without:(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/Partial;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3a52a0.  call temp:= `indexOf`(v7, v8) @signature `Lorg/joda/time/base/AbstractPartial;.indexOf:(Lorg/joda/time/DateTimeFieldType;)I` @kind virtual;
  #L3a52a6.  v8:= temp;
  #L3a52a8.  v0:= -1I;
  #L3a52aa.  if v8 == v0 then goto L3a531a;
  #L3a52ae.  call temp:= `size`(v7) @signature `Lorg/joda/time/Partial;.size:()I` @kind virtual;
  #L3a52b4.  v0:= temp;
  #L3a52b6.  v0:= v0 + -1;
  #L3a52ba.  v1:= new `org.joda.time.DateTimeFieldType`[v0];
  #L3a52be.  call temp:= `size`(v7) @signature `Lorg/joda/time/Partial;.size:()I` @kind virtual;
  #L3a52c4.  v2:= temp;
  #L3a52c6.  v2:= v2 + -1;
  #L3a52ca.  v3:= new `int`[v2];
  #L3a52ce.  v4:= v7.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a52d2.  v5:= 0I;
  #L3a52d4.  call `arraycopy`(v4, v5, v1, v5, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3a52da.  v4:= v7.`org.joda.time.Partial.iTypes` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a52de.  v6:= v8 + 1;
  #L3a52e2.  v0:= v0 - v8 @kind int;
  #L3a52e4.  call `arraycopy`(v4, v6, v1, v8, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3a52ea.  v0:= v7.`org.joda.time.Partial.iValues` @type ^`int`[] @kind object;
  #L3a52ee.  call `arraycopy`(v0, v5, v3, v5, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3a52f4.  v0:= v7.`org.joda.time.Partial.iValues` @type ^`int`[] @kind object;
  #L3a52f8.  v2:= v2 - v8 @kind int;
  #L3a52fa.  call `arraycopy`(v0, v6, v3, v8, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3a5300.  v8:= new `org.joda.time.Partial`;
  #L3a5304.  v0:= v7.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3a5308.  call `<init>`(v8, v0, v1, v3) @signature `Lorg/joda/time/Partial;.<init>:(Lorg/joda/time/Chronology;[Lorg/joda/time/DateTimeFieldType;[I)V` @kind direct;
  #L3a530e.  v0:= v7.`org.joda.time.Partial.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3a5312.  call `validate`(v0, v8, v3) @signature `Lorg/joda/time/Chronology;.validate:(Lorg/joda/time/ReadablePartial;[I)V` @kind virtual;
  #L3a5318.  return v8 @kind object;
  #L3a531a.  return v7 @kind object;
}
