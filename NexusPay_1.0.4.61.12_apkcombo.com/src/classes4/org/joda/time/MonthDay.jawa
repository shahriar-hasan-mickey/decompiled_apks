record `org.joda.time.MonthDay` @kind class @AccessFlag PUBLIC_FINAL extends `org.joda.time.base.BasePartial` @kind class, `org.joda.time.ReadablePartial` @kind interface, `java.io.Serializable` @kind interface {
}
global `int` `@@org.joda.time.MonthDay.DAY_OF_MONTH` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.joda.time.DateTimeFieldType`[] `@@org.joda.time.MonthDay.FIELD_TYPES` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.joda.time.MonthDay.MONTH_OF_YEAR` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.joda.time.format.DateTimeFormatter` `@@org.joda.time.MonthDay.PARSER` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.MonthDay.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/MonthDay;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3a2080.  v0:= 2I;
  #L3a2082.  v0:= new `org.joda.time.DateTimeFieldType`[v0];
  #L3a2086.  call temp:= `monthOfYear`() @signature `Lorg/joda/time/DateTimeFieldType;.monthOfYear:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3a208c.  v1:= temp @kind object;
  #L3a208e.  v2:= 0I;
  #L3a2090.  v0[v2]:= v1 @kind object;
  #L3a2094.  call temp:= `dayOfMonth`() @signature `Lorg/joda/time/DateTimeFieldType;.dayOfMonth:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3a209a.  v1:= temp @kind object;
  #L3a209c.  v2:= 1I;
  #L3a209e.  v0[v2]:= v1 @kind object;
  #L3a20a2.  `@@org.joda.time.MonthDay.FIELD_TYPES` @type ^`org.joda.time.DateTimeFieldType`[] := v0 @kind object;
  #L3a20a6.  v0:= new `org.joda.time.format.DateTimeFormatterBuilder`;
  #L3a20aa.  call `<init>`(v0) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder;.<init>:()V` @kind direct;
  #L3a20b0.  call temp:= `localDateParser`() @signature `Lorg/joda/time/format/ISODateTimeFormat;.localDateParser:()Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3a20b6.  v1:= temp @kind object;
  #L3a20b8.  call temp:= `getParser`(v1) @signature `Lorg/joda/time/format/DateTimeFormatter;.getParser:()Lorg/joda/time/format/DateTimeParser;` @kind virtual;
  #L3a20be.  v1:= temp @kind object;
  #L3a20c0.  call temp:= `appendOptional`(v0, v1) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder;.appendOptional:(Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;` @kind virtual;
  #L3a20c6.  v0:= temp @kind object;
  #L3a20c8.  v1:= "--MM-dd" @kind object;
  #L3a20cc.  call temp:= `forPattern`(v1) @signature `Lorg/joda/time/format/DateTimeFormat;.forPattern:(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3a20d2.  v1:= temp @kind object;
  #L3a20d4.  call temp:= `getParser`(v1) @signature `Lorg/joda/time/format/DateTimeFormatter;.getParser:()Lorg/joda/time/format/DateTimeParser;` @kind virtual;
  #L3a20da.  v1:= temp @kind object;
  #L3a20dc.  call temp:= `appendOptional`(v0, v1) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder;.appendOptional:(Lorg/joda/time/format/DateTimeParser;)Lorg/joda/time/format/DateTimeFormatterBuilder;` @kind virtual;
  #L3a20e2.  v0:= temp @kind object;
  #L3a20e4.  call temp:= `toFormatter`(v0) @signature `Lorg/joda/time/format/DateTimeFormatterBuilder;.toFormatter:()Lorg/joda/time/format/DateTimeFormatter;` @kind virtual;
  #L3a20ea.  v0:= temp @kind object;
  #L3a20ec.  `@@org.joda.time.MonthDay.PARSER` @type ^`org.joda.time.format.DateTimeFormatter` := v0 @kind object;
  #L3a20f0.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MonthDay` v0 @kind this) @signature `Lorg/joda/time/MonthDay;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a2104.  call `<init>`(v0) @signature `Lorg/joda/time/base/BasePartial;.<init>:()V` @kind direct;
  #L3a210a.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MonthDay` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/joda/time/MonthDay;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a211c.  v0:= 0I;
  #L3a211e.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/joda/time/MonthDay;.<init>:(IILorg/joda/time/Chronology;)V` @kind direct;
  #L3a2124.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MonthDay` v2 @kind this, `int` v3 , `int` v4 , `org.joda.time.Chronology` v5 @kind object) @signature `Lorg/joda/time/MonthDay;.<init>:(IILorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3a2138.  v0:= 2I;
  #L3a213a.  v0:= new `int`[v0];
  #L3a213e.  v1:= 0I;
  #L3a2140.  v0[v1]:= v3;
  #L3a2144.  v3:= 1I;
  #L3a2146.  v0[v3]:= v4;
  #L3a214a.  call `<init>`(v2, v0, v5) @signature `Lorg/joda/time/base/BasePartial;.<init>:([ILorg/joda/time/Chronology;)V` @kind direct;
  #L3a2150.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MonthDay` v0 @kind this, `long` v1 ) @signature `Lorg/joda/time/MonthDay;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a21b0.  call `<init>`(v0, v1) @signature `Lorg/joda/time/base/BasePartial;.<init>:(J)V` @kind direct;
  #L3a21b6.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MonthDay` v0 @kind this, `long` v1 , `org.joda.time.Chronology` v3 @kind object) @signature `Lorg/joda/time/MonthDay;.<init>:(JLorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a21c8.  call `<init>`(v0, v1, v3) @signature `Lorg/joda/time/base/BasePartial;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3a21ce.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MonthDay` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lorg/joda/time/MonthDay;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3a2164.  call temp:= `localDateParser`() @signature `Lorg/joda/time/format/ISODateTimeFormat;.localDateParser:()Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3a216a.  v0:= temp @kind object;
  #L3a216c.  v1:= 0I;
  #L3a216e.  call `<init>`(v2, v3, v1, v0) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;Lorg/joda/time/format/DateTimeFormatter;)V` @kind direct;
  #L3a2174.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MonthDay` v1 @kind this, `java.lang.Object` v2 @kind object, `org.joda.time.Chronology` v3 @kind object) @signature `Lorg/joda/time/MonthDay;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3a2188.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3a218e.  v3:= temp @kind object;
  #L3a2190.  call temp:= `localDateParser`() @signature `Lorg/joda/time/format/ISODateTimeFormat;.localDateParser:()Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3a2196.  v0:= temp @kind object;
  #L3a2198.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;Lorg/joda/time/format/DateTimeFormatter;)V` @kind direct;
  #L3a219e.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MonthDay` v0 @kind this, `org.joda.time.Chronology` v1 @kind object) @signature `Lorg/joda/time/MonthDay;.<init>:(Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a21e0.  call `<init>`(v0, v1) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Lorg/joda/time/Chronology;)V` @kind direct;
  #L3a21e6.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MonthDay` v0 @kind this, `org.joda.time.DateTimeZone` v1 @kind object) @signature `Lorg/joda/time/MonthDay;.<init>:(Lorg/joda/time/DateTimeZone;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a21f8.  call temp:= `getInstance`(v1) @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3a21fe.  v1:= temp @kind object;
  #L3a2200.  call `<init>`(v0, v1) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Lorg/joda/time/Chronology;)V` @kind direct;
  #L3a2206.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MonthDay` v0 @kind this, `org.joda.time.MonthDay` v1 @kind object, `org.joda.time.Chronology` v2 @kind object) @signature `Lorg/joda/time/MonthDay;.<init>:(Lorg/joda/time/MonthDay;Lorg/joda/time/Chronology;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3a2230.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Lorg/joda/time/base/BasePartial;Lorg/joda/time/Chronology;)V` @kind direct;
  #L3a2236.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.MonthDay` v0 @kind this, `org.joda.time.MonthDay` v1 @kind object, `int`[] v2 @kind object) @signature `Lorg/joda/time/MonthDay;.<init>:(Lorg/joda/time/MonthDay;[I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3a2218.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Lorg/joda/time/base/BasePartial;[I)V` @kind direct;
  #L3a221e.  return @kind void;
}
procedure `org.joda.time.MonthDay` `fromCalendarFields`(`java.util.Calendar` v3 @kind object) @signature `Lorg/joda/time/MonthDay;.fromCalendarFields:(Ljava/util/Calendar;)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3a1c18.  if v3 == 0 then goto L3a1c40;
  #L3a1c1c.  v0:= new `org.joda.time.MonthDay`;
  #L3a1c20.  v1:= 2I;
  #L3a1c22.  call temp:= `get`(v3, v1) @signature `Ljava/util/Calendar;.get:(I)I` @kind virtual;
  #L3a1c28.  v1:= temp;
  #L3a1c2a.  v1:= v1 + 1;
  #L3a1c2e.  v2:= 5I;
  #L3a1c30.  call temp:= `get`(v3, v2) @signature `Ljava/util/Calendar;.get:(I)I` @kind virtual;
  #L3a1c36.  v3:= temp;
  #L3a1c38.  call `<init>`(v0, v1, v3) @signature `Lorg/joda/time/MonthDay;.<init>:(II)V` @kind direct;
  #L3a1c3e.  return v0 @kind object;
  #L3a1c40.  v3:= new `java.lang.IllegalArgumentException`;
  #L3a1c44.  v0:= "The calendar must not be null" @kind object;
  #L3a1c48.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a1c4e.  throw v3;
}
procedure `org.joda.time.MonthDay` `fromDateFields`(`java.util.Date` v2 @kind object) @signature `Lorg/joda/time/MonthDay;.fromDateFields:(Ljava/util/Date;)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3a1c60.  if v2 == 0 then goto L3a1c84;
  #L3a1c64.  v0:= new `org.joda.time.MonthDay`;
  #L3a1c68.  call temp:= `getMonth`(v2) @signature `Ljava/util/Date;.getMonth:()I` @kind virtual;
  #L3a1c6e.  v1:= temp;
  #L3a1c70.  v1:= v1 + 1;
  #L3a1c74.  call temp:= `getDate`(v2) @signature `Ljava/util/Date;.getDate:()I` @kind virtual;
  #L3a1c7a.  v2:= temp;
  #L3a1c7c.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/MonthDay;.<init>:(II)V` @kind direct;
  #L3a1c82.  return v0 @kind object;
  #L3a1c84.  v2:= new `java.lang.IllegalArgumentException`;
  #L3a1c88.  v0:= "The date must not be null" @kind object;
  #L3a1c8c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a1c92.  throw v2;
}
procedure `org.joda.time.MonthDay` `now`() @signature `Lorg/joda/time/MonthDay;.now:()Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a1d18.  v0:= new `org.joda.time.MonthDay`;
  #L3a1d1c.  call `<init>`(v0) @signature `Lorg/joda/time/MonthDay;.<init>:()V` @kind direct;
  #L3a1d22.  return v0 @kind object;
}
procedure `org.joda.time.MonthDay` `now`(`org.joda.time.Chronology` v1 @kind object) @signature `Lorg/joda/time/MonthDay;.now:(Lorg/joda/time/Chronology;)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a1d34.  if v1 == 0 then goto L3a1d44;
  #L3a1d38.  v0:= new `org.joda.time.MonthDay`;
  #L3a1d3c.  call `<init>`(v0, v1) @signature `Lorg/joda/time/MonthDay;.<init>:(Lorg/joda/time/Chronology;)V` @kind direct;
  #L3a1d42.  return v0 @kind object;
  #L3a1d44.  v1:= new `java.lang.NullPointerException`;
  #L3a1d48.  v0:= "Chronology must not be null" @kind object;
  #L3a1d4c.  call `<init>`(v1, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a1d52.  throw v1;
}
procedure `org.joda.time.MonthDay` `now`(`org.joda.time.DateTimeZone` v1 @kind object) @signature `Lorg/joda/time/MonthDay;.now:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a1d64.  if v1 == 0 then goto L3a1d74;
  #L3a1d68.  v0:= new `org.joda.time.MonthDay`;
  #L3a1d6c.  call `<init>`(v0, v1) @signature `Lorg/joda/time/MonthDay;.<init>:(Lorg/joda/time/DateTimeZone;)V` @kind direct;
  #L3a1d72.  return v0 @kind object;
  #L3a1d74.  v1:= new `java.lang.NullPointerException`;
  #L3a1d78.  v0:= "Zone must not be null" @kind object;
  #L3a1d7c.  call `<init>`(v1, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a1d82.  throw v1;
}
procedure `org.joda.time.MonthDay` `parse`(`java.lang.String` v1 @kind object) @signature `Lorg/joda/time/MonthDay;.parse:(Ljava/lang/String;)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a1d94.  v0:= `@@org.joda.time.MonthDay.PARSER` @type ^`org.joda.time.format.DateTimeFormatter` @kind object;
  #L3a1d98.  call temp:= `parse`(v1, v0) @signature `Lorg/joda/time/MonthDay;.parse:(Ljava/lang/String;Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/MonthDay;` @kind static;
  #L3a1d9e.  v1:= temp @kind object;
  #L3a1da0.  return v1 @kind object;
}
procedure `org.joda.time.MonthDay` `parse`(`java.lang.String` v1 @kind object, `org.joda.time.format.DateTimeFormatter` v2 @kind object) @signature `Lorg/joda/time/MonthDay;.parse:(Ljava/lang/String;Lorg/joda/time/format/DateTimeFormatter;)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a1db4.  call temp:= `parseLocalDate`(v2, v1) @signature `Lorg/joda/time/format/DateTimeFormatter;.parseLocalDate:(Ljava/lang/String;)Lorg/joda/time/LocalDate;` @kind virtual;
  #L3a1dba.  v1:= temp @kind object;
  #L3a1dbc.  v2:= new `org.joda.time.MonthDay`;
  #L3a1dc0.  call temp:= `getMonthOfYear`(v1) @signature `Lorg/joda/time/LocalDate;.getMonthOfYear:()I` @kind virtual;
  #L3a1dc6.  v0:= temp;
  #L3a1dc8.  call temp:= `getDayOfMonth`(v1) @signature `Lorg/joda/time/LocalDate;.getDayOfMonth:()I` @kind virtual;
  #L3a1dce.  v1:= temp;
  #L3a1dd0.  call `<init>`(v2, v0, v1) @signature `Lorg/joda/time/MonthDay;.<init>:(II)V` @kind direct;
  #L3a1dd6.  return v2 @kind object;
}
procedure `java.lang.Object` `readResolve`(`org.joda.time.MonthDay` v2 @kind this) @signature `Lorg/joda/time/MonthDay;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3a1a44.  v0:= `@@org.joda.time.DateTimeZone.UTC` @type ^`org.joda.time.DateTimeZone` @kind object;
  #L3a1a48.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BasePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a1a4e.  v1:= temp @kind object;
  #L3a1a50.  call temp:= `getZone`(v1) @signature `Lorg/joda/time/Chronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3a1a56.  v1:= temp @kind object;
  #L3a1a58.  call temp:= `equals`(v0, v1) @signature `Lorg/joda/time/DateTimeZone;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3a1a5e.  v0:= temp;
  #L3a1a60.  if v0 != 0 then goto L3a1a80;
  #L3a1a64.  v0:= new `org.joda.time.MonthDay`;
  #L3a1a68.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BasePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a1a6e.  v1:= temp @kind object;
  #L3a1a70.  call temp:= `withUTC`(v1) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a1a76.  v1:= temp @kind object;
  #L3a1a78.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MonthDay;.<init>:(Lorg/joda/time/MonthDay;Lorg/joda/time/Chronology;)V` @kind direct;
  #L3a1a7e.  return v0 @kind object;
  #L3a1a80.  return v2 @kind object;
}
procedure `org.joda.time.MonthDay$Property` `dayOfMonth`(`org.joda.time.MonthDay` v2 @kind this) @signature `Lorg/joda/time/MonthDay;.dayOfMonth:()Lorg/joda/time/MonthDay$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a201c.  v0:= new `org.joda.time.MonthDay$Property`;
  #L3a2020.  v1:= 1I;
  #L3a2022.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MonthDay$Property;.<init>:(Lorg/joda/time/MonthDay;I)V` @kind direct;
  #L3a2028.  return v0 @kind object;
}
procedure `int` `getDayOfMonth`(`org.joda.time.MonthDay` v1 @kind this) @signature `Lorg/joda/time/MonthDay;.getDayOfMonth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a19f8.  v0:= 1I;
  #L3a19fa.  call temp:= `getValue`(v1, v0) @signature `Lorg/joda/time/base/BasePartial;.getValue:(I)I` @kind virtual;
  #L3a1a00.  v0:= temp;
  #L3a1a02.  return v0;
}
procedure `org.joda.time.DateTimeField` `getField`(`org.joda.time.MonthDay` v2 @kind this, `int` v3 , `org.joda.time.Chronology` v4 @kind object) @signature `Lorg/joda/time/MonthDay;.getField:(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3a1b48.  if v3 == 0 then goto L3a1b8a;
  #L3a1b4c.  v0:= 1I;
  #L3a1b4e.  if v3 != v0 then goto L3a1b5c;
  #L3a1b52.  call temp:= `dayOfMonth`(v4) @signature `Lorg/joda/time/Chronology;.dayOfMonth:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a1b58.  v3:= temp @kind object;
  #L3a1b5a.  return v3 @kind object;
  #L3a1b5c.  v4:= new `java.lang.IndexOutOfBoundsException`;
  #L3a1b60.  v0:= new `java.lang.StringBuilder`;
  #L3a1b64.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3a1b6a.  v1:= "Invalid index: " @kind object;
  #L3a1b6e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a1b74.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a1b7a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a1b80.  v3:= temp @kind object;
  #L3a1b82.  call `<init>`(v4, v3) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3a1b88.  throw v4;
  #L3a1b8a.  call temp:= `monthOfYear`(v4) @signature `Lorg/joda/time/Chronology;.monthOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a1b90.  v3:= temp @kind object;
  #L3a1b92.  return v3 @kind object;
}
procedure `org.joda.time.DateTimeFieldType` `getFieldType`(`org.joda.time.MonthDay` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/MonthDay;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a1ba4.  v0:= `@@org.joda.time.MonthDay.FIELD_TYPES` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a1ba8.  v2:= v0[v2] @kind object;
  #L3a1bac.  return v2 @kind object;
}
procedure `org.joda.time.DateTimeFieldType`[] `getFieldTypes`(`org.joda.time.MonthDay` v1 @kind this) @signature `Lorg/joda/time/MonthDay;.getFieldTypes:()[Lorg/joda/time/DateTimeFieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a1bc0.  v0:= `@@org.joda.time.MonthDay.FIELD_TYPES` @type ^`org.joda.time.DateTimeFieldType`[] @kind object;
  #L3a1bc4.  call temp:= `clone`(v0) @signature `[Lorg/joda/time/DateTimeFieldType;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3a1bca.  v0:= temp @kind object;
  #L3a1bcc.  v0:= (`org.joda.time.DateTimeFieldType`[]) v0 @kind object;
  #L3a1bd0.  return v0 @kind object;
}
procedure `int` `getMonthOfYear`(`org.joda.time.MonthDay` v1 @kind this) @signature `Lorg/joda/time/MonthDay;.getMonthOfYear:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a1a14.  v0:= 0I;
  #L3a1a16.  call temp:= `getValue`(v1, v0) @signature `Lorg/joda/time/base/BasePartial;.getValue:(I)I` @kind virtual;
  #L3a1a1c.  v0:= temp;
  #L3a1a1e.  return v0;
}
procedure `org.joda.time.MonthDay` `minus`(`org.joda.time.MonthDay` v1 @kind this, `org.joda.time.ReadablePeriod` v2 @kind object) @signature `Lorg/joda/time/MonthDay;.minus:(Lorg/joda/time/ReadablePeriod;)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a1ca4.  v0:= -1I;
  #L3a1ca6.  call temp:= `withPeriodAdded`(v1, v2, v0) @signature `Lorg/joda/time/MonthDay;.withPeriodAdded:(Lorg/joda/time/ReadablePeriod;I)Lorg/joda/time/MonthDay;` @kind virtual;
  #L3a1cac.  v2:= temp @kind object;
  #L3a1cae.  return v2 @kind object;
}
procedure `org.joda.time.MonthDay` `minusDays`(`org.joda.time.MonthDay` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/MonthDay;.minusDays:(I)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a1cc0.  call temp:= `days`() @signature `Lorg/joda/time/DurationFieldType;.days:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3a1cc6.  v0:= temp @kind object;
  #L3a1cc8.  call temp:= `safeNegate`(v2) @signature `Lorg/joda/time/field/FieldUtils;.safeNegate:(I)I` @kind static;
  #L3a1cce.  v2:= temp;
  #L3a1cd0.  call temp:= `withFieldAdded`(v1, v0, v2) @signature `Lorg/joda/time/MonthDay;.withFieldAdded:(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;` @kind virtual;
  #L3a1cd6.  v2:= temp @kind object;
  #L3a1cd8.  return v2 @kind object;
}
procedure `org.joda.time.MonthDay` `minusMonths`(`org.joda.time.MonthDay` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/MonthDay;.minusMonths:(I)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a1cec.  call temp:= `months`() @signature `Lorg/joda/time/DurationFieldType;.months:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3a1cf2.  v0:= temp @kind object;
  #L3a1cf4.  call temp:= `safeNegate`(v2) @signature `Lorg/joda/time/field/FieldUtils;.safeNegate:(I)I` @kind static;
  #L3a1cfa.  v2:= temp;
  #L3a1cfc.  call temp:= `withFieldAdded`(v1, v0, v2) @signature `Lorg/joda/time/MonthDay;.withFieldAdded:(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;` @kind virtual;
  #L3a1d02.  v2:= temp @kind object;
  #L3a1d04.  return v2 @kind object;
}
procedure `org.joda.time.MonthDay$Property` `monthOfYear`(`org.joda.time.MonthDay` v2 @kind this) @signature `Lorg/joda/time/MonthDay;.monthOfYear:()Lorg/joda/time/MonthDay$Property;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a203c.  v0:= new `org.joda.time.MonthDay$Property`;
  #L3a2040.  v1:= 0I;
  #L3a2042.  call `<init>`(v0, v2, v1) @signature `Lorg/joda/time/MonthDay$Property;.<init>:(Lorg/joda/time/MonthDay;I)V` @kind direct;
  #L3a2048.  return v0 @kind object;
}
procedure `org.joda.time.MonthDay` `plus`(`org.joda.time.MonthDay` v1 @kind this, `org.joda.time.ReadablePeriod` v2 @kind object) @signature `Lorg/joda/time/MonthDay;.plus:(Lorg/joda/time/ReadablePeriod;)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a1de8.  v0:= 1I;
  #L3a1dea.  call temp:= `withPeriodAdded`(v1, v2, v0) @signature `Lorg/joda/time/MonthDay;.withPeriodAdded:(Lorg/joda/time/ReadablePeriod;I)Lorg/joda/time/MonthDay;` @kind virtual;
  #L3a1df0.  v2:= temp @kind object;
  #L3a1df2.  return v2 @kind object;
}
procedure `org.joda.time.MonthDay` `plusDays`(`org.joda.time.MonthDay` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/MonthDay;.plusDays:(I)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a1e04.  call temp:= `days`() @signature `Lorg/joda/time/DurationFieldType;.days:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3a1e0a.  v0:= temp @kind object;
  #L3a1e0c.  call temp:= `withFieldAdded`(v1, v0, v2) @signature `Lorg/joda/time/MonthDay;.withFieldAdded:(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;` @kind virtual;
  #L3a1e12.  v2:= temp @kind object;
  #L3a1e14.  return v2 @kind object;
}
procedure `org.joda.time.MonthDay` `plusMonths`(`org.joda.time.MonthDay` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/MonthDay;.plusMonths:(I)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a1e28.  call temp:= `months`() @signature `Lorg/joda/time/DurationFieldType;.months:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3a1e2e.  v0:= temp @kind object;
  #L3a1e30.  call temp:= `withFieldAdded`(v1, v0, v2) @signature `Lorg/joda/time/MonthDay;.withFieldAdded:(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;` @kind virtual;
  #L3a1e36.  v2:= temp @kind object;
  #L3a1e38.  return v2 @kind object;
}
procedure `org.joda.time.MonthDay$Property` `property`(`org.joda.time.MonthDay` v1 @kind this, `org.joda.time.DateTimeFieldType` v2 @kind object) @signature `Lorg/joda/time/MonthDay;.property:(Lorg/joda/time/DateTimeFieldType;)Lorg/joda/time/MonthDay$Property;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a205c.  v0:= new `org.joda.time.MonthDay$Property`;
  #L3a2060.  call temp:= `indexOfSupported`(v1, v2) @signature `Lorg/joda/time/base/AbstractPartial;.indexOfSupported:(Lorg/joda/time/DateTimeFieldType;)I` @kind virtual;
  #L3a2066.  v2:= temp;
  #L3a2068.  call `<init>`(v0, v1, v2) @signature `Lorg/joda/time/MonthDay$Property;.<init>:(Lorg/joda/time/MonthDay;I)V` @kind direct;
  #L3a206e.  return v0 @kind object;
}
procedure `int` `size`(`org.joda.time.MonthDay` v1 @kind this) @signature `Lorg/joda/time/MonthDay;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a1a30.  v0:= 2I;
  #L3a1a32.  return v0;
}
procedure `org.joda.time.LocalDate` `toLocalDate`(`org.joda.time.MonthDay` v4 @kind this, `int` v5 ) @signature `Lorg/joda/time/MonthDay;.toLocalDate:(I)Lorg/joda/time/LocalDate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a1be4.  v0:= new `org.joda.time.LocalDate`;
  #L3a1be8.  call temp:= `getMonthOfYear`(v4) @signature `Lorg/joda/time/MonthDay;.getMonthOfYear:()I` @kind virtual;
  #L3a1bee.  v1:= temp;
  #L3a1bf0.  call temp:= `getDayOfMonth`(v4) @signature `Lorg/joda/time/MonthDay;.getDayOfMonth:()I` @kind virtual;
  #L3a1bf6.  v2:= temp;
  #L3a1bf8.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/base/BasePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a1bfe.  v3:= temp @kind object;
  #L3a1c00.  call `<init>`(v0, v5, v1, v2, v3) @signature `Lorg/joda/time/LocalDate;.<init>:(IIILorg/joda/time/Chronology;)V` @kind direct;
  #L3a1c06.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.MonthDay` v2 @kind this) @signature `Lorg/joda/time/MonthDay;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a1a94.  v0:= new `java.util.ArrayList`;
  #L3a1a98.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3a1a9e.  call temp:= `monthOfYear`() @signature `Lorg/joda/time/DateTimeFieldType;.monthOfYear:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3a1aa4.  v1:= temp @kind object;
  #L3a1aa6.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3a1aac.  call temp:= `dayOfMonth`() @signature `Lorg/joda/time/DateTimeFieldType;.dayOfMonth:()Lorg/joda/time/DateTimeFieldType;` @kind static;
  #L3a1ab2.  v1:= temp @kind object;
  #L3a1ab4.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3a1aba.  v1:= 1I;
  #L3a1abc.  call temp:= `forFields`(v0, v1, v1) @signature `Lorg/joda/time/format/ISODateTimeFormat;.forFields:(Ljava/util/Collection;ZZ)Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3a1ac2.  v0:= temp @kind object;
  #L3a1ac4.  call temp:= `print`(v0, v2) @signature `Lorg/joda/time/format/DateTimeFormatter;.print:(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;` @kind virtual;
  #L3a1aca.  v0:= temp @kind object;
  #L3a1acc.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.MonthDay` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/joda/time/MonthDay;.toString:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3a1ae0.  if v1 != 0 then goto L3a1aee;
  #L3a1ae4.  call temp:= `toString`(v0) @signature `Lorg/joda/time/MonthDay;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a1aea.  v1:= temp @kind object;
  #L3a1aec.  return v1 @kind object;
  #L3a1aee.  call temp:= `forPattern`(v1) @signature `Lorg/joda/time/format/DateTimeFormat;.forPattern:(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3a1af4.  v1:= temp @kind object;
  #L3a1af6.  call temp:= `print`(v1, v0) @signature `Lorg/joda/time/format/DateTimeFormatter;.print:(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;` @kind virtual;
  #L3a1afc.  v1:= temp @kind object;
  #L3a1afe.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.MonthDay` v0 @kind this, `java.lang.String` v1 @kind object, `java.util.Locale` v2 @kind object) @signature `Lorg/joda/time/MonthDay;.toString:(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3a1b10.  if v1 != 0 then goto L3a1b1e;
  #L3a1b14.  call temp:= `toString`(v0) @signature `Lorg/joda/time/MonthDay;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a1b1a.  v1:= temp @kind object;
  #L3a1b1c.  return v1 @kind object;
  #L3a1b1e.  call temp:= `forPattern`(v1) @signature `Lorg/joda/time/format/DateTimeFormat;.forPattern:(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3a1b24.  v1:= temp @kind object;
  #L3a1b26.  call temp:= `withLocale`(v1, v2) @signature `Lorg/joda/time/format/DateTimeFormatter;.withLocale:(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;` @kind virtual;
  #L3a1b2c.  v1:= temp @kind object;
  #L3a1b2e.  call temp:= `print`(v1, v0) @signature `Lorg/joda/time/format/DateTimeFormatter;.print:(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;` @kind virtual;
  #L3a1b34.  v1:= temp @kind object;
  #L3a1b36.  return v1 @kind object;
}
procedure `org.joda.time.MonthDay` `withChronologyRetainFields`(`org.joda.time.MonthDay` v2 @kind this, `org.joda.time.Chronology` v3 @kind object) @signature `Lorg/joda/time/MonthDay;.withChronologyRetainFields:(Lorg/joda/time/Chronology;)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a1e4c.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3a1e52.  v3:= temp @kind object;
  #L3a1e54.  call temp:= `withUTC`(v3) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a1e5a.  v3:= temp @kind object;
  #L3a1e5c.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/base/BasePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a1e62.  v0:= temp @kind object;
  #L3a1e64.  if v3 != v0 then goto L3a1e6a;
  #L3a1e68.  return v2 @kind object;
  #L3a1e6a.  v0:= new `org.joda.time.MonthDay`;
  #L3a1e6e.  call `<init>`(v0, v2, v3) @signature `Lorg/joda/time/MonthDay;.<init>:(Lorg/joda/time/MonthDay;Lorg/joda/time/Chronology;)V` @kind direct;
  #L3a1e74.  call temp:= `getValues`(v2) @signature `Lorg/joda/time/base/BasePartial;.getValues:()[I` @kind virtual;
  #L3a1e7a.  v1:= temp @kind object;
  #L3a1e7c.  call `validate`(v3, v0, v1) @signature `Lorg/joda/time/Chronology;.validate:(Lorg/joda/time/ReadablePartial;[I)V` @kind virtual;
  #L3a1e82.  return v0 @kind object;
}
procedure `org.joda.time.MonthDay` `withDayOfMonth`(`org.joda.time.MonthDay` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MonthDay;.withDayOfMonth:(I)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a1e94.  call temp:= `getValues`(v3) @signature `Lorg/joda/time/base/BasePartial;.getValues:()[I` @kind virtual;
  #L3a1e9a.  v0:= temp @kind object;
  #L3a1e9c.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BasePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a1ea2.  v1:= temp @kind object;
  #L3a1ea4.  call temp:= `dayOfMonth`(v1) @signature `Lorg/joda/time/Chronology;.dayOfMonth:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a1eaa.  v1:= temp @kind object;
  #L3a1eac.  v2:= 1I;
  #L3a1eae.  call temp:= `set`(v1, v3, v2, v0, v4) @signature `Lorg/joda/time/DateTimeField;.set:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3a1eb4.  v4:= temp @kind object;
  #L3a1eb6.  v0:= new `org.joda.time.MonthDay`;
  #L3a1eba.  call `<init>`(v0, v3, v4) @signature `Lorg/joda/time/MonthDay;.<init>:(Lorg/joda/time/MonthDay;[I)V` @kind direct;
  #L3a1ec0.  return v0 @kind object;
}
procedure `org.joda.time.MonthDay` `withField`(`org.joda.time.MonthDay` v2 @kind this, `org.joda.time.DateTimeFieldType` v3 @kind object, `int` v4 ) @signature `Lorg/joda/time/MonthDay;.withField:(Lorg/joda/time/DateTimeFieldType;I)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a1ed4.  call temp:= `indexOfSupported`(v2, v3) @signature `Lorg/joda/time/base/AbstractPartial;.indexOfSupported:(Lorg/joda/time/DateTimeFieldType;)I` @kind virtual;
  #L3a1eda.  v3:= temp;
  #L3a1edc.  call temp:= `getValue`(v2, v3) @signature `Lorg/joda/time/base/BasePartial;.getValue:(I)I` @kind virtual;
  #L3a1ee2.  v0:= temp;
  #L3a1ee4.  if v4 != v0 then goto L3a1eea;
  #L3a1ee8.  return v2 @kind object;
  #L3a1eea.  call temp:= `getValues`(v2) @signature `Lorg/joda/time/base/BasePartial;.getValues:()[I` @kind virtual;
  #L3a1ef0.  v0:= temp @kind object;
  #L3a1ef2.  call temp:= `getField`(v2, v3) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a1ef8.  v1:= temp @kind object;
  #L3a1efa.  call temp:= `set`(v1, v2, v3, v0, v4) @signature `Lorg/joda/time/DateTimeField;.set:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3a1f00.  v3:= temp @kind object;
  #L3a1f02.  v4:= new `org.joda.time.MonthDay`;
  #L3a1f06.  call `<init>`(v4, v2, v3) @signature `Lorg/joda/time/MonthDay;.<init>:(Lorg/joda/time/MonthDay;[I)V` @kind direct;
  #L3a1f0c.  return v4 @kind object;
}
procedure `org.joda.time.MonthDay` `withFieldAdded`(`org.joda.time.MonthDay` v2 @kind this, `org.joda.time.DurationFieldType` v3 @kind object, `int` v4 ) @signature `Lorg/joda/time/MonthDay;.withFieldAdded:(Lorg/joda/time/DurationFieldType;I)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a1f20.  call temp:= `indexOfSupported`(v2, v3) @signature `Lorg/joda/time/base/AbstractPartial;.indexOfSupported:(Lorg/joda/time/DurationFieldType;)I` @kind virtual;
  #L3a1f26.  v3:= temp;
  #L3a1f28.  if v4 != 0 then goto L3a1f2e;
  #L3a1f2c.  return v2 @kind object;
  #L3a1f2e.  call temp:= `getValues`(v2) @signature `Lorg/joda/time/base/BasePartial;.getValues:()[I` @kind virtual;
  #L3a1f34.  v0:= temp @kind object;
  #L3a1f36.  call temp:= `getField`(v2, v3) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a1f3c.  v1:= temp @kind object;
  #L3a1f3e.  call temp:= `add`(v1, v2, v3, v0, v4) @signature `Lorg/joda/time/DateTimeField;.add:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3a1f44.  v3:= temp @kind object;
  #L3a1f46.  v4:= new `org.joda.time.MonthDay`;
  #L3a1f4a.  call `<init>`(v4, v2, v3) @signature `Lorg/joda/time/MonthDay;.<init>:(Lorg/joda/time/MonthDay;[I)V` @kind direct;
  #L3a1f50.  return v4 @kind object;
}
procedure `org.joda.time.MonthDay` `withMonthOfYear`(`org.joda.time.MonthDay` v3 @kind this, `int` v4 ) @signature `Lorg/joda/time/MonthDay;.withMonthOfYear:(I)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3a1f64.  call temp:= `getValues`(v3) @signature `Lorg/joda/time/base/BasePartial;.getValues:()[I` @kind virtual;
  #L3a1f6a.  v0:= temp @kind object;
  #L3a1f6c.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BasePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3a1f72.  v1:= temp @kind object;
  #L3a1f74.  call temp:= `monthOfYear`(v1) @signature `Lorg/joda/time/Chronology;.monthOfYear:()Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a1f7a.  v1:= temp @kind object;
  #L3a1f7c.  v2:= 0I;
  #L3a1f7e.  call temp:= `set`(v1, v3, v2, v0, v4) @signature `Lorg/joda/time/DateTimeField;.set:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3a1f84.  v4:= temp @kind object;
  #L3a1f86.  v0:= new `org.joda.time.MonthDay`;
  #L3a1f8a.  call `<init>`(v0, v3, v4) @signature `Lorg/joda/time/MonthDay;.<init>:(Lorg/joda/time/MonthDay;[I)V` @kind direct;
  #L3a1f90.  return v0 @kind object;
}
procedure `org.joda.time.MonthDay` `withPeriodAdded`(`org.joda.time.MonthDay` v5 @kind this, `org.joda.time.ReadablePeriod` v6 @kind object, `int` v7 ) @signature `Lorg/joda/time/MonthDay;.withPeriodAdded:(Lorg/joda/time/ReadablePeriod;I)Lorg/joda/time/MonthDay;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3a1fa4.  if v6 == 0 then goto L3a200a;
  #L3a1fa8.  if v7 != 0 then goto L3a1fae;
  #L3a1fac.  goto L3a200a;
  #L3a1fae.  call temp:= `getValues`(v5) @signature `Lorg/joda/time/base/BasePartial;.getValues:()[I` @kind virtual;
  #L3a1fb4.  v0:= temp @kind object;
  #L3a1fb6.  v1:= 0I;
  #L3a1fb8.  call temp:= `size`(v6) @signature `Lorg/joda/time/ReadablePeriod;.size:()I` @kind interface;
  #L3a1fbe.  v2:= temp;
  #L3a1fc0.  if v1 >= v2 then goto L3a1ffe;
  #L3a1fc4.  call temp:= `getFieldType`(v6, v1) @signature `Lorg/joda/time/ReadablePeriod;.getFieldType:(I)Lorg/joda/time/DurationFieldType;` @kind interface;
  #L3a1fca.  v2:= temp @kind object;
  #L3a1fcc.  call temp:= `indexOf`(v5, v2) @signature `Lorg/joda/time/base/AbstractPartial;.indexOf:(Lorg/joda/time/DurationFieldType;)I` @kind virtual;
  #L3a1fd2.  v2:= temp;
  #L3a1fd4.  if v2 < 0 then goto L3a1ff8;
  #L3a1fd8.  call temp:= `getField`(v5, v2) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3a1fde.  v3:= temp @kind object;
  #L3a1fe0.  call temp:= `getValue`(v6, v1) @signature `Lorg/joda/time/ReadablePeriod;.getValue:(I)I` @kind interface;
  #L3a1fe6.  v4:= temp;
  #L3a1fe8.  call temp:= `safeMultiply`(v4, v7) @signature `Lorg/joda/time/field/FieldUtils;.safeMultiply:(II)I` @kind static;
  #L3a1fee.  v4:= temp;
  #L3a1ff0.  call temp:= `add`(v3, v5, v2, v0, v4) @signature `Lorg/joda/time/DateTimeField;.add:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3a1ff6.  v0:= temp @kind object;
  #L3a1ff8.  v1:= v1 + 1;
  #L3a1ffc.  goto L3a1fb8;
  #L3a1ffe.  v6:= new `org.joda.time.MonthDay`;
  #L3a2002.  call `<init>`(v6, v5, v0) @signature `Lorg/joda/time/MonthDay;.<init>:(Lorg/joda/time/MonthDay;[I)V` @kind direct;
  #L3a2008.  return v6 @kind object;
  #L3a200a.  return v5 @kind object;
}
