record `org.joda.time.base.AbstractInstant` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.joda.time.ReadableInstant` @kind interface {
}
procedure `void` `<init>`(`org.joda.time.base.AbstractInstant` v0 @kind this) @signature `Lorg/joda/time/base/AbstractInstant;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3ac2f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ac2f6.  return @kind void;
}
procedure `int` `compareTo`(`org.joda.time.base.AbstractInstant` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/joda/time/base/AbstractInstant;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3abf98.  v1:= (`org.joda.time.ReadableInstant`) v1 @kind object;
  #L3abf9c.  call temp:= `compareTo`(v0, v1) @signature `Lorg/joda/time/base/AbstractInstant;.compareTo:(Lorg/joda/time/ReadableInstant;)I` @kind virtual;
  #L3abfa2.  v1:= temp;
  #L3abfa4.  return v1;
}
procedure `int` `compareTo`(`org.joda.time.base.AbstractInstant` v5 @kind this, `org.joda.time.ReadableInstant` v6 @kind object) @signature `Lorg/joda/time/base/AbstractInstant;.compareTo:(Lorg/joda/time/ReadableInstant;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3abfb8.  v0:= 0I;
  #L3abfba.  if v5 != v6 then goto L3abfc0;
  #L3abfbe.  return v0;
  #L3abfc0.  call temp:= `getMillis`(v6) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3abfc6.  v1:= temp @kind wide;
  #L3abfc8.  call temp:= `getMillis`(v5) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3abfce.  v3:= temp @kind wide;
  #L3abfd0.  v6:= lcmp(v3, v1);
  #L3abfd4.  if v6 != 0 then goto L3abfda;
  #L3abfd8.  return v0;
  #L3abfda.  if v6 >= 0 then goto L3abfe2;
  #L3abfde.  v6:= -1I;
  #L3abfe0.  return v6;
  #L3abfe2.  v6:= 1I;
  #L3abfe4.  return v6;
}
procedure `boolean` `equals`(`org.joda.time.base.AbstractInstant` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lorg/joda/time/base/AbstractInstant;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3abdb0.  v0:= 1I;
  #L3abdb2.  if v7 != v8 then goto L3abdb8;
  #L3abdb6.  return v0;
  #L3abdb8.  v1:= instanceof @variable v8 @type ^`org.joda.time.ReadableInstant` @kind boolean;
  #L3abdbc.  v2:= 0I;
  #L3abdbe.  if v1 != 0 then goto L3abdc4;
  #L3abdc2.  return v2;
  #L3abdc4.  v8:= (`org.joda.time.ReadableInstant`) v8 @kind object;
  #L3abdc8.  call temp:= `getMillis`(v7) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3abdce.  v3:= temp @kind wide;
  #L3abdd0.  call temp:= `getMillis`(v8) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3abdd6.  v5:= temp @kind wide;
  #L3abdd8.  v1:= lcmp(v3, v5);
  #L3abddc.  if v1 != 0 then goto L3abdfe;
  #L3abde0.  call temp:= `getChronology`(v7) @signature `Lorg/joda/time/ReadableInstant;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3abde6.  v1:= temp @kind object;
  #L3abde8.  call temp:= `getChronology`(v8) @signature `Lorg/joda/time/ReadableInstant;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3abdee.  v8:= temp @kind object;
  #L3abdf0.  call temp:= `equals`(v1, v8) @signature `Lorg/joda/time/field/FieldUtils;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3abdf6.  v8:= temp;
  #L3abdf8.  if v8 == 0 then goto L3abdfe;
  #L3abdfc.  goto L3abe00;
  #L3abdfe.  v0:= 0I;
  #L3abe00.  return v0;
}
procedure `int` `get`(`org.joda.time.base.AbstractInstant` v2 @kind this, `org.joda.time.DateTimeField` v3 @kind object) @signature `Lorg/joda/time/base/AbstractInstant;.get:(Lorg/joda/time/DateTimeField;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3abff8.  if v3 == 0 then goto L3ac00e;
  #L3abffc.  call temp:= `getMillis`(v2) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac002.  v0:= temp @kind wide;
  #L3ac004.  call temp:= `get`(v3, v0) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3ac00a.  v3:= temp;
  #L3ac00c.  return v3;
  #L3ac00e.  v3:= new `java.lang.IllegalArgumentException`;
  #L3ac012.  v0:= "The DateTimeField must not be null" @kind object;
  #L3ac016.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ac01c.  throw v3;
}
procedure `int` `get`(`org.joda.time.base.AbstractInstant` v2 @kind this, `org.joda.time.DateTimeFieldType` v3 @kind object) @signature `Lorg/joda/time/base/AbstractInstant;.get:(Lorg/joda/time/DateTimeFieldType;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ac030.  if v3 == 0 then goto L3ac056;
  #L3ac034.  call temp:= `getChronology`(v2) @signature `Lorg/joda/time/ReadableInstant;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac03a.  v0:= temp @kind object;
  #L3ac03c.  call temp:= `getField`(v3, v0) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ac042.  v3:= temp @kind object;
  #L3ac044.  call temp:= `getMillis`(v2) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac04a.  v0:= temp @kind wide;
  #L3ac04c.  call temp:= `get`(v3, v0) @signature `Lorg/joda/time/DateTimeField;.get:(J)I` @kind virtual;
  #L3ac052.  v3:= temp;
  #L3ac054.  return v3;
  #L3ac056.  v3:= new `java.lang.IllegalArgumentException`;
  #L3ac05a.  v0:= "The DateTimeFieldType must not be null" @kind object;
  #L3ac05e.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ac064.  throw v3;
}
procedure `org.joda.time.DateTimeZone` `getZone`(`org.joda.time.base.AbstractInstant` v1 @kind this) @signature `Lorg/joda/time/base/AbstractInstant;.getZone:()Lorg/joda/time/DateTimeZone;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ac1e8.  call temp:= `getChronology`(v1) @signature `Lorg/joda/time/ReadableInstant;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac1ee.  v0:= temp @kind object;
  #L3ac1f0.  call temp:= `getZone`(v0) @signature `Lorg/joda/time/Chronology;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3ac1f6.  v0:= temp @kind object;
  #L3ac1f8.  return v0 @kind object;
}
procedure `int` `hashCode`(`org.joda.time.base.AbstractInstant` v5 @kind this) @signature `Lorg/joda/time/base/AbstractInstant;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ac078.  call temp:= `getMillis`(v5) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac07e.  v0:= temp @kind wide;
  #L3ac080.  call temp:= `getMillis`(v5) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac086.  v2:= temp @kind wide;
  #L3ac088.  v4:= 32I;
  #L3ac08c.  v2:= v2 ^>> v4 @kind long;
  #L3ac08e.  v0:= v0 ^~ v2 @kind long;
  #L3ac090.  v1:= (`int`) v0 @kind l2i;
  #L3ac092.  call temp:= `getChronology`(v5) @signature `Lorg/joda/time/ReadableInstant;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac098.  v0:= temp @kind object;
  #L3ac09a.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3ac0a0.  v0:= temp;
  #L3ac0a2.  v1:= v1 + v0 @kind int;
  #L3ac0a4.  return v1;
}
procedure `boolean` `isAfter`(`org.joda.time.base.AbstractInstant` v3 @kind this, `long` v4 ) @signature `Lorg/joda/time/base/AbstractInstant;.isAfter:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3abe14.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3abe1a.  v0:= temp @kind wide;
  #L3abe1c.  v2:= lcmp(v0, v4);
  #L3abe20.  if v2 <= 0 then goto L3abe28;
  #L3abe24.  v4:= 1I;
  #L3abe26.  goto L3abe2a;
  #L3abe28.  v4:= 0I;
  #L3abe2a.  return v4;
}
procedure `boolean` `isAfter`(`org.joda.time.base.AbstractInstant` v2 @kind this, `org.joda.time.ReadableInstant` v3 @kind object) @signature `Lorg/joda/time/base/AbstractInstant;.isAfter:(Lorg/joda/time/ReadableInstant;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3abe3c.  call temp:= `getInstantMillis`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3abe42.  v0:= temp @kind wide;
  #L3abe44.  call temp:= `isAfter`(v2, v0) @signature `Lorg/joda/time/base/AbstractInstant;.isAfter:(J)Z` @kind virtual;
  #L3abe4a.  v3:= temp;
  #L3abe4c.  return v3;
}
procedure `boolean` `isAfterNow`(`org.joda.time.base.AbstractInstant` v2 @kind this) @signature `Lorg/joda/time/base/AbstractInstant;.isAfterNow:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3abe60.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3abe66.  v0:= temp @kind wide;
  #L3abe68.  call temp:= `isAfter`(v2, v0) @signature `Lorg/joda/time/base/AbstractInstant;.isAfter:(J)Z` @kind virtual;
  #L3abe6e.  v0:= temp;
  #L3abe70.  return v0;
}
procedure `boolean` `isBefore`(`org.joda.time.base.AbstractInstant` v3 @kind this, `long` v4 ) @signature `Lorg/joda/time/base/AbstractInstant;.isBefore:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3abe84.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3abe8a.  v0:= temp @kind wide;
  #L3abe8c.  v2:= lcmp(v0, v4);
  #L3abe90.  if v2 >= 0 then goto L3abe98;
  #L3abe94.  v4:= 1I;
  #L3abe96.  goto L3abe9a;
  #L3abe98.  v4:= 0I;
  #L3abe9a.  return v4;
}
procedure `boolean` `isBefore`(`org.joda.time.base.AbstractInstant` v2 @kind this, `org.joda.time.ReadableInstant` v3 @kind object) @signature `Lorg/joda/time/base/AbstractInstant;.isBefore:(Lorg/joda/time/ReadableInstant;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3abeac.  call temp:= `getInstantMillis`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3abeb2.  v0:= temp @kind wide;
  #L3abeb4.  call temp:= `isBefore`(v2, v0) @signature `Lorg/joda/time/base/AbstractInstant;.isBefore:(J)Z` @kind virtual;
  #L3abeba.  v3:= temp;
  #L3abebc.  return v3;
}
procedure `boolean` `isBeforeNow`(`org.joda.time.base.AbstractInstant` v2 @kind this) @signature `Lorg/joda/time/base/AbstractInstant;.isBeforeNow:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3abed0.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3abed6.  v0:= temp @kind wide;
  #L3abed8.  call temp:= `isBefore`(v2, v0) @signature `Lorg/joda/time/base/AbstractInstant;.isBefore:(J)Z` @kind virtual;
  #L3abede.  v0:= temp;
  #L3abee0.  return v0;
}
procedure `boolean` `isEqual`(`org.joda.time.base.AbstractInstant` v3 @kind this, `long` v4 ) @signature `Lorg/joda/time/base/AbstractInstant;.isEqual:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3abef4.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3abefa.  v0:= temp @kind wide;
  #L3abefc.  v2:= lcmp(v0, v4);
  #L3abf00.  if v2 != 0 then goto L3abf08;
  #L3abf04.  v4:= 1I;
  #L3abf06.  goto L3abf0a;
  #L3abf08.  v4:= 0I;
  #L3abf0a.  return v4;
}
procedure `boolean` `isEqual`(`org.joda.time.base.AbstractInstant` v2 @kind this, `org.joda.time.ReadableInstant` v3 @kind object) @signature `Lorg/joda/time/base/AbstractInstant;.isEqual:(Lorg/joda/time/ReadableInstant;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3abf1c.  call temp:= `getInstantMillis`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3abf22.  v0:= temp @kind wide;
  #L3abf24.  call temp:= `isEqual`(v2, v0) @signature `Lorg/joda/time/base/AbstractInstant;.isEqual:(J)Z` @kind virtual;
  #L3abf2a.  v3:= temp;
  #L3abf2c.  return v3;
}
procedure `boolean` `isEqualNow`(`org.joda.time.base.AbstractInstant` v2 @kind this) @signature `Lorg/joda/time/base/AbstractInstant;.isEqualNow:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3abf40.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3abf46.  v0:= temp @kind wide;
  #L3abf48.  call temp:= `isEqual`(v2, v0) @signature `Lorg/joda/time/base/AbstractInstant;.isEqual:(J)Z` @kind virtual;
  #L3abf4e.  v0:= temp;
  #L3abf50.  return v0;
}
procedure `boolean` `isSupported`(`org.joda.time.base.AbstractInstant` v1 @kind this, `org.joda.time.DateTimeFieldType` v2 @kind object) @signature `Lorg/joda/time/base/AbstractInstant;.isSupported:(Lorg/joda/time/DateTimeFieldType;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3abf64.  if v2 != 0 then goto L3abf6c;
  #L3abf68.  v2:= 0I;
  #L3abf6a.  return v2;
  #L3abf6c.  call temp:= `getChronology`(v1) @signature `Lorg/joda/time/ReadableInstant;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3abf72.  v0:= temp @kind object;
  #L3abf74.  call temp:= `getField`(v2, v0) @signature `Lorg/joda/time/DateTimeFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3abf7a.  v2:= temp @kind object;
  #L3abf7c.  call temp:= `isSupported`(v2) @signature `Lorg/joda/time/DateTimeField;.isSupported:()Z` @kind virtual;
  #L3abf82.  v2:= temp;
  #L3abf84.  return v2;
}
procedure `java.util.Date` `toDate`(`org.joda.time.base.AbstractInstant` v3 @kind this) @signature `Lorg/joda/time/base/AbstractInstant;.toDate:()Ljava/util/Date;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ac104.  v0:= new `java.util.Date`;
  #L3ac108.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac10e.  v1:= temp @kind wide;
  #L3ac110.  call `<init>`(v0, v1) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L3ac116.  return v0 @kind object;
}
procedure `org.joda.time.DateTime` `toDateTime`(`org.joda.time.base.AbstractInstant` v4 @kind this) @signature `Lorg/joda/time/base/AbstractInstant;.toDateTime:()Lorg/joda/time/DateTime;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ac128.  v0:= new `org.joda.time.DateTime`;
  #L3ac12c.  call temp:= `getMillis`(v4) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac132.  v1:= temp @kind wide;
  #L3ac134.  call temp:= `getZone`(v4) @signature `Lorg/joda/time/base/AbstractInstant;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3ac13a.  v3:= temp @kind object;
  #L3ac13c.  call `<init>`(v0, v1, v3) @signature `Lorg/joda/time/DateTime;.<init>:(JLorg/joda/time/DateTimeZone;)V` @kind direct;
  #L3ac142.  return v0 @kind object;
}
procedure `org.joda.time.DateTime` `toDateTime`(`org.joda.time.base.AbstractInstant` v3 @kind this, `org.joda.time.Chronology` v4 @kind object) @signature `Lorg/joda/time/base/AbstractInstant;.toDateTime:(Lorg/joda/time/Chronology;)Lorg/joda/time/DateTime;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ac154.  v0:= new `org.joda.time.DateTime`;
  #L3ac158.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac15e.  v1:= temp @kind wide;
  #L3ac160.  call `<init>`(v0, v1, v4) @signature `Lorg/joda/time/DateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3ac166.  return v0 @kind object;
}
procedure `org.joda.time.DateTime` `toDateTime`(`org.joda.time.base.AbstractInstant` v3 @kind this, `org.joda.time.DateTimeZone` v4 @kind object) @signature `Lorg/joda/time/base/AbstractInstant;.toDateTime:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/DateTime;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ac178.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/ReadableInstant;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac17e.  v0:= temp @kind object;
  #L3ac180.  call temp:= `getChronology`(v0) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3ac186.  v0:= temp @kind object;
  #L3ac188.  call temp:= `withZone`(v0, v4) @signature `Lorg/joda/time/Chronology;.withZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @kind virtual;
  #L3ac18e.  v4:= temp @kind object;
  #L3ac190.  v0:= new `org.joda.time.DateTime`;
  #L3ac194.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac19a.  v1:= temp @kind wide;
  #L3ac19c.  call `<init>`(v0, v1, v4) @signature `Lorg/joda/time/DateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3ac1a2.  return v0 @kind object;
}
procedure `org.joda.time.DateTime` `toDateTimeISO`(`org.joda.time.base.AbstractInstant` v4 @kind this) @signature `Lorg/joda/time/base/AbstractInstant;.toDateTimeISO:()Lorg/joda/time/DateTime;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ac1b4.  v0:= new `org.joda.time.DateTime`;
  #L3ac1b8.  call temp:= `getMillis`(v4) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac1be.  v1:= temp @kind wide;
  #L3ac1c0.  call temp:= `getZone`(v4) @signature `Lorg/joda/time/base/AbstractInstant;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3ac1c6.  v3:= temp @kind object;
  #L3ac1c8.  call temp:= `getInstance`(v3) @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3ac1ce.  v3:= temp @kind object;
  #L3ac1d0.  call `<init>`(v0, v1, v3) @signature `Lorg/joda/time/DateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3ac1d6.  return v0 @kind object;
}
procedure `org.joda.time.Instant` `toInstant`(`org.joda.time.base.AbstractInstant` v3 @kind this) @signature `Lorg/joda/time/base/AbstractInstant;.toInstant:()Lorg/joda/time/Instant;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ac20c.  v0:= new `org.joda.time.Instant`;
  #L3ac210.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac216.  v1:= temp @kind wide;
  #L3ac218.  call `<init>`(v0, v1) @signature `Lorg/joda/time/Instant;.<init>:(J)V` @kind direct;
  #L3ac21e.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime` `toMutableDateTime`(`org.joda.time.base.AbstractInstant` v4 @kind this) @signature `Lorg/joda/time/base/AbstractInstant;.toMutableDateTime:()Lorg/joda/time/MutableDateTime;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ac230.  v0:= new `org.joda.time.MutableDateTime`;
  #L3ac234.  call temp:= `getMillis`(v4) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac23a.  v1:= temp @kind wide;
  #L3ac23c.  call temp:= `getZone`(v4) @signature `Lorg/joda/time/base/AbstractInstant;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3ac242.  v3:= temp @kind object;
  #L3ac244.  call `<init>`(v0, v1, v3) @signature `Lorg/joda/time/MutableDateTime;.<init>:(JLorg/joda/time/DateTimeZone;)V` @kind direct;
  #L3ac24a.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime` `toMutableDateTime`(`org.joda.time.base.AbstractInstant` v3 @kind this, `org.joda.time.Chronology` v4 @kind object) @signature `Lorg/joda/time/base/AbstractInstant;.toMutableDateTime:(Lorg/joda/time/Chronology;)Lorg/joda/time/MutableDateTime;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ac25c.  v0:= new `org.joda.time.MutableDateTime`;
  #L3ac260.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac266.  v1:= temp @kind wide;
  #L3ac268.  call `<init>`(v0, v1, v4) @signature `Lorg/joda/time/MutableDateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3ac26e.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime` `toMutableDateTime`(`org.joda.time.base.AbstractInstant` v3 @kind this, `org.joda.time.DateTimeZone` v4 @kind object) @signature `Lorg/joda/time/base/AbstractInstant;.toMutableDateTime:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/MutableDateTime;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ac280.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/ReadableInstant;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac286.  v0:= temp @kind object;
  #L3ac288.  call temp:= `getChronology`(v0) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3ac28e.  v0:= temp @kind object;
  #L3ac290.  call temp:= `withZone`(v0, v4) @signature `Lorg/joda/time/Chronology;.withZone:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @kind virtual;
  #L3ac296.  v4:= temp @kind object;
  #L3ac298.  v0:= new `org.joda.time.MutableDateTime`;
  #L3ac29c.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac2a2.  v1:= temp @kind wide;
  #L3ac2a4.  call `<init>`(v0, v1, v4) @signature `Lorg/joda/time/MutableDateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3ac2aa.  return v0 @kind object;
}
procedure `org.joda.time.MutableDateTime` `toMutableDateTimeISO`(`org.joda.time.base.AbstractInstant` v4 @kind this) @signature `Lorg/joda/time/base/AbstractInstant;.toMutableDateTimeISO:()Lorg/joda/time/MutableDateTime;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ac2bc.  v0:= new `org.joda.time.MutableDateTime`;
  #L3ac2c0.  call temp:= `getMillis`(v4) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac2c6.  v1:= temp @kind wide;
  #L3ac2c8.  call temp:= `getZone`(v4) @signature `Lorg/joda/time/base/AbstractInstant;.getZone:()Lorg/joda/time/DateTimeZone;` @kind virtual;
  #L3ac2ce.  v3:= temp @kind object;
  #L3ac2d0.  call temp:= `getInstance`(v3) @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3ac2d6.  v3:= temp @kind object;
  #L3ac2d8.  call `<init>`(v0, v1, v3) @signature `Lorg/joda/time/MutableDateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3ac2de.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.base.AbstractInstant` v1 @kind this) @signature `Lorg/joda/time/base/AbstractInstant;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ac0b8.  call temp:= `dateTime`() @signature `Lorg/joda/time/format/ISODateTimeFormat;.dateTime:()Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3ac0be.  v0:= temp @kind object;
  #L3ac0c0.  call temp:= `print`(v0, v1) @signature `Lorg/joda/time/format/DateTimeFormatter;.print:(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;` @kind virtual;
  #L3ac0c6.  v0:= temp @kind object;
  #L3ac0c8.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.base.AbstractInstant` v0 @kind this, `org.joda.time.format.DateTimeFormatter` v1 @kind object) @signature `Lorg/joda/time/base/AbstractInstant;.toString:(Lorg/joda/time/format/DateTimeFormatter;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3ac0dc.  if v1 != 0 then goto L3ac0ea;
  #L3ac0e0.  call temp:= `toString`(v0) @signature `Lorg/joda/time/base/AbstractInstant;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ac0e6.  v1:= temp @kind object;
  #L3ac0e8.  return v1 @kind object;
  #L3ac0ea.  call temp:= `print`(v1, v0) @signature `Lorg/joda/time/format/DateTimeFormatter;.print:(Lorg/joda/time/ReadableInstant;)Ljava/lang/String;` @kind virtual;
  #L3ac0f0.  v1:= temp @kind object;
  #L3ac0f2.  return v1 @kind object;
}
