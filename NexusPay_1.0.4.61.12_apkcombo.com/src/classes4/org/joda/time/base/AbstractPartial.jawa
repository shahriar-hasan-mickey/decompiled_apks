record `org.joda.time.base.AbstractPartial` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.joda.time.ReadablePartial` @kind interface, `java.lang.Comparable` @kind interface {
}
procedure `void` `<init>`(`org.joda.time.base.AbstractPartial` v0 @kind this) @signature `Lorg/joda/time/base/AbstractPartial;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3ace70.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ace76.  return @kind void;
}
procedure `int` `compareTo`(`org.joda.time.base.AbstractPartial` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/joda/time/base/AbstractPartial;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3aca98.  v1:= (`org.joda.time.ReadablePartial`) v1 @kind object;
  #L3aca9c.  call temp:= `compareTo`(v0, v1) @signature `Lorg/joda/time/base/AbstractPartial;.compareTo:(Lorg/joda/time/ReadablePartial;)I` @kind virtual;
  #L3acaa2.  v1:= temp;
  #L3acaa4.  return v1;
}
procedure `int` `compareTo`(`org.joda.time.base.AbstractPartial` v6 @kind this, `org.joda.time.ReadablePartial` v7 @kind object) @signature `Lorg/joda/time/base/AbstractPartial;.compareTo:(Lorg/joda/time/ReadablePartial;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3acab8.  v0:= 0I;
  #L3acaba.  if v6 != v7 then goto L3acac0;
  #L3acabe.  return v0;
  #L3acac0.  call temp:= `size`(v6) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3acac6.  v1:= temp;
  #L3acac8.  call temp:= `size`(v7) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3acace.  v2:= temp;
  #L3acad0.  v3:= "ReadablePartial objects must have matching field types" @kind object;
  #L3acad4.  if v1 != v2 then goto L3acb52;
  #L3acad8.  call temp:= `size`(v6) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3acade.  v1:= temp;
  #L3acae0.  v2:= 0I;
  #L3acae2.  if v2 >= v1 then goto L3acb0c;
  #L3acae6.  call temp:= `getFieldType`(v6, v2) @signature `Lorg/joda/time/base/AbstractPartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3acaec.  v4:= temp @kind object;
  #L3acaee.  call temp:= `getFieldType`(v7, v2) @signature `Lorg/joda/time/ReadablePartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind interface;
  #L3acaf4.  v5:= temp @kind object;
  #L3acaf6.  if v4 != v5 then goto L3acb00;
  #L3acafa.  v2:= v2 + 1;
  #L3acafe.  goto L3acae2;
  #L3acb00.  v7:= new `java.lang.ClassCastException`;
  #L3acb04.  call `<init>`(v7, v3) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3acb0a.  throw v7;
  #L3acb0c.  call temp:= `size`(v6) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3acb12.  v1:= temp;
  #L3acb14.  v2:= 0I;
  #L3acb16.  if v2 >= v1 then goto L3acb50;
  #L3acb1a.  call temp:= `getValue`(v6, v2) @signature `Lorg/joda/time/ReadablePartial;.getValue:(I)I` @kind interface;
  #L3acb20.  v3:= temp;
  #L3acb22.  call temp:= `getValue`(v7, v2) @signature `Lorg/joda/time/ReadablePartial;.getValue:(I)I` @kind interface;
  #L3acb28.  v4:= temp;
  #L3acb2a.  if v3 <= v4 then goto L3acb32;
  #L3acb2e.  v7:= 1I;
  #L3acb30.  return v7;
  #L3acb32.  call temp:= `getValue`(v6, v2) @signature `Lorg/joda/time/ReadablePartial;.getValue:(I)I` @kind interface;
  #L3acb38.  v3:= temp;
  #L3acb3a.  call temp:= `getValue`(v7, v2) @signature `Lorg/joda/time/ReadablePartial;.getValue:(I)I` @kind interface;
  #L3acb40.  v4:= temp;
  #L3acb42.  if v3 >= v4 then goto L3acb4a;
  #L3acb46.  v7:= -1I;
  #L3acb48.  return v7;
  #L3acb4a.  v2:= v2 + 1;
  #L3acb4e.  goto L3acb16;
  #L3acb50.  return v0;
  #L3acb52.  v7:= new `java.lang.ClassCastException`;
  #L3acb56.  call `<init>`(v7, v3) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3acb5c.  throw v7;
}
procedure `boolean` `equals`(`org.joda.time.base.AbstractPartial` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lorg/joda/time/base/AbstractPartial;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ac930.  if v5 != v6 then goto L3ac938;
  #L3ac934.  v6:= 1I;
  #L3ac936.  return v6;
  #L3ac938.  v0:= instanceof @variable v6 @type ^`org.joda.time.ReadablePartial` @kind boolean;
  #L3ac93c.  v1:= 0I;
  #L3ac93e.  if v0 != 0 then goto L3ac944;
  #L3ac942.  return v1;
  #L3ac944.  v6:= (`org.joda.time.ReadablePartial`) v6 @kind object;
  #L3ac948.  call temp:= `size`(v5) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3ac94e.  v0:= temp;
  #L3ac950.  call temp:= `size`(v6) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3ac956.  v2:= temp;
  #L3ac958.  if v0 == v2 then goto L3ac95e;
  #L3ac95c.  return v1;
  #L3ac95e.  call temp:= `size`(v5) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3ac964.  v0:= temp;
  #L3ac966.  v2:= 0I;
  #L3ac968.  if v2 >= v0 then goto L3ac99e;
  #L3ac96c.  call temp:= `getValue`(v5, v2) @signature `Lorg/joda/time/ReadablePartial;.getValue:(I)I` @kind interface;
  #L3ac972.  v3:= temp;
  #L3ac974.  call temp:= `getValue`(v6, v2) @signature `Lorg/joda/time/ReadablePartial;.getValue:(I)I` @kind interface;
  #L3ac97a.  v4:= temp;
  #L3ac97c.  if v3 != v4 then goto L3ac99c;
  #L3ac980.  call temp:= `getFieldType`(v5, v2) @signature `Lorg/joda/time/base/AbstractPartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3ac986.  v3:= temp @kind object;
  #L3ac988.  call temp:= `getFieldType`(v6, v2) @signature `Lorg/joda/time/ReadablePartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind interface;
  #L3ac98e.  v4:= temp @kind object;
  #L3ac990.  if v3 == v4 then goto L3ac996;
  #L3ac994.  goto L3ac99c;
  #L3ac996.  v2:= v2 + 1;
  #L3ac99a.  goto L3ac968;
  #L3ac99c.  return v1;
  #L3ac99e.  call temp:= `getChronology`(v5) @signature `Lorg/joda/time/ReadablePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac9a4.  v0:= temp @kind object;
  #L3ac9a6.  call temp:= `getChronology`(v6) @signature `Lorg/joda/time/ReadablePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac9ac.  v6:= temp @kind object;
  #L3ac9ae.  call temp:= `equals`(v0, v6) @signature `Lorg/joda/time/field/FieldUtils;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3ac9b4.  v6:= temp;
  #L3ac9b6.  return v6;
}
procedure `int` `get`(`org.joda.time.base.AbstractPartial` v0 @kind this, `org.joda.time.DateTimeFieldType` v1 @kind object) @signature `Lorg/joda/time/base/AbstractPartial;.get:(Lorg/joda/time/DateTimeFieldType;)I` @AccessFlag PUBLIC {
    temp;

  #L3acb70.  call temp:= `indexOfSupported`(v0, v1) @signature `Lorg/joda/time/base/AbstractPartial;.indexOfSupported:(Lorg/joda/time/DateTimeFieldType;)I` @kind virtual;
  #L3acb76.  v1:= temp;
  #L3acb78.  call temp:= `getValue`(v0, v1) @signature `Lorg/joda/time/ReadablePartial;.getValue:(I)I` @kind interface;
  #L3acb7e.  v1:= temp;
  #L3acb80.  return v1;
}
procedure `org.joda.time.DateTimeField` `getField`(`org.joda.time.base.AbstractPartial` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(I)Lorg/joda/time/DateTimeField;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3acdb0.  call temp:= `getChronology`(v1) @signature `Lorg/joda/time/ReadablePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3acdb6.  v0:= temp @kind object;
  #L3acdb8.  call temp:= `getField`(v1, v2, v0) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3acdbe.  v2:= temp @kind object;
  #L3acdc0.  return v2 @kind object;
}
procedure `org.joda.time.DateTimeField` `getField`(`int` v0 , `org.joda.time.Chronology` v1 @kind object) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `org.joda.time.DateTimeFieldType` `getFieldType`(`org.joda.time.base.AbstractPartial` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/base/AbstractPartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3acdd4.  call temp:= `getChronology`(v1) @signature `Lorg/joda/time/ReadablePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3acdda.  v0:= temp @kind object;
  #L3acddc.  call temp:= `getField`(v1, v2, v0) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(ILorg/joda/time/Chronology;)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3acde2.  v2:= temp @kind object;
  #L3acde4.  call temp:= `getType`(v2) @signature `Lorg/joda/time/DateTimeField;.getType:()Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3acdea.  v2:= temp @kind object;
  #L3acdec.  return v2 @kind object;
}
procedure `org.joda.time.DateTimeFieldType`[] `getFieldTypes`(`org.joda.time.base.AbstractPartial` v4 @kind this) @signature `Lorg/joda/time/base/AbstractPartial;.getFieldTypes:()[Lorg/joda/time/DateTimeFieldType;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ace00.  call temp:= `size`(v4) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3ace06.  v0:= temp;
  #L3ace08.  v1:= new `org.joda.time.DateTimeFieldType`[v0];
  #L3ace0c.  v2:= 0I;
  #L3ace0e.  if v2 >= v0 then goto L3ace24;
  #L3ace12.  call temp:= `getFieldType`(v4, v2) @signature `Lorg/joda/time/base/AbstractPartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3ace18.  v3:= temp @kind object;
  #L3ace1a.  v1[v2]:= v3 @kind object;
  #L3ace1e.  v2:= v2 + 1;
  #L3ace22.  goto L3ace0e;
  #L3ace24.  return v1 @kind object;
}
procedure `org.joda.time.DateTimeField`[] `getFields`(`org.joda.time.base.AbstractPartial` v4 @kind this) @signature `Lorg/joda/time/base/AbstractPartial;.getFields:()[Lorg/joda/time/DateTimeField;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ace38.  call temp:= `size`(v4) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3ace3e.  v0:= temp;
  #L3ace40.  v1:= new `org.joda.time.DateTimeField`[v0];
  #L3ace44.  v2:= 0I;
  #L3ace46.  if v2 >= v0 then goto L3ace5c;
  #L3ace4a.  call temp:= `getField`(v4, v2) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3ace50.  v3:= temp @kind object;
  #L3ace52.  v1[v2]:= v3 @kind object;
  #L3ace56.  v2:= v2 + 1;
  #L3ace5a.  goto L3ace46;
  #L3ace5c.  return v1 @kind object;
}
procedure `int`[] `getValues`(`org.joda.time.base.AbstractPartial` v4 @kind this) @signature `Lorg/joda/time/base/AbstractPartial;.getValues:()[I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3acd1c.  call temp:= `size`(v4) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3acd22.  v0:= temp;
  #L3acd24.  v1:= new `int`[v0];
  #L3acd28.  v2:= 0I;
  #L3acd2a.  if v2 >= v0 then goto L3acd40;
  #L3acd2e.  call temp:= `getValue`(v4, v2) @signature `Lorg/joda/time/ReadablePartial;.getValue:(I)I` @kind interface;
  #L3acd34.  v3:= temp;
  #L3acd36.  v1[v2]:= v3;
  #L3acd3a.  v2:= v2 + 1;
  #L3acd3e.  goto L3acd2a;
  #L3acd40.  return v1 @kind object;
}
procedure `int` `hashCode`(`org.joda.time.base.AbstractPartial` v4 @kind this) @signature `Lorg/joda/time/base/AbstractPartial;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3acb94.  call temp:= `size`(v4) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3acb9a.  v0:= temp;
  #L3acb9c.  v1:= 157I;
  #L3acba0.  v2:= 0I;
  #L3acba2.  if v2 >= v0 then goto L3acbd0;
  #L3acba6.  v1:= v1 * 23;
  #L3acbaa.  call temp:= `getValue`(v4, v2) @signature `Lorg/joda/time/ReadablePartial;.getValue:(I)I` @kind interface;
  #L3acbb0.  v3:= temp;
  #L3acbb2.  v1:= v1 + v3 @kind int;
  #L3acbb4.  v1:= v1 * 23;
  #L3acbb8.  call temp:= `getFieldType`(v4, v2) @signature `Lorg/joda/time/base/AbstractPartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3acbbe.  v3:= temp @kind object;
  #L3acbc0.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3acbc6.  v3:= temp;
  #L3acbc8.  v1:= v1 + v3 @kind int;
  #L3acbca.  v2:= v2 + 1;
  #L3acbce.  goto L3acba2;
  #L3acbd0.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/ReadablePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3acbd6.  v0:= temp @kind object;
  #L3acbd8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3acbde.  v0:= temp;
  #L3acbe0.  v1:= v1 + v0 @kind int;
  #L3acbe2.  return v1;
}
procedure `int` `indexOf`(`org.joda.time.base.AbstractPartial` v3 @kind this, `org.joda.time.DateTimeFieldType` v4 @kind object) @signature `Lorg/joda/time/base/AbstractPartial;.indexOf:(Lorg/joda/time/DateTimeFieldType;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3acbf4.  call temp:= `size`(v3) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3acbfa.  v0:= temp;
  #L3acbfc.  v1:= 0I;
  #L3acbfe.  if v1 >= v0 then goto L3acc16;
  #L3acc02.  call temp:= `getFieldType`(v3, v1) @signature `Lorg/joda/time/base/AbstractPartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3acc08.  v2:= temp @kind object;
  #L3acc0a.  if v2 != v4 then goto L3acc10;
  #L3acc0e.  return v1;
  #L3acc10.  v1:= v1 + 1;
  #L3acc14.  goto L3acbfe;
  #L3acc16.  v4:= -1I;
  #L3acc18.  return v4;
}
procedure `int` `indexOf`(`org.joda.time.base.AbstractPartial` v3 @kind this, `org.joda.time.DurationFieldType` v4 @kind object) @signature `Lorg/joda/time/base/AbstractPartial;.indexOf:(Lorg/joda/time/DurationFieldType;)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L3acc2c.  call temp:= `size`(v3) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3acc32.  v0:= temp;
  #L3acc34.  v1:= 0I;
  #L3acc36.  if v1 >= v0 then goto L3acc56;
  #L3acc3a.  call temp:= `getFieldType`(v3, v1) @signature `Lorg/joda/time/base/AbstractPartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind virtual;
  #L3acc40.  v2:= temp @kind object;
  #L3acc42.  call temp:= `getDurationType`(v2) @signature `Lorg/joda/time/DateTimeFieldType;.getDurationType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3acc48.  v2:= temp @kind object;
  #L3acc4a.  if v2 != v4 then goto L3acc50;
  #L3acc4e.  return v1;
  #L3acc50.  v1:= v1 + 1;
  #L3acc54.  goto L3acc36;
  #L3acc56.  v4:= -1I;
  #L3acc58.  return v4;
}
procedure `int` `indexOfSupported`(`org.joda.time.base.AbstractPartial` v3 @kind this, `org.joda.time.DateTimeFieldType` v4 @kind object) @signature `Lorg/joda/time/base/AbstractPartial;.indexOfSupported:(Lorg/joda/time/DateTimeFieldType;)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L3acc6c.  call temp:= `indexOf`(v3, v4) @signature `Lorg/joda/time/base/AbstractPartial;.indexOf:(Lorg/joda/time/DateTimeFieldType;)I` @kind virtual;
  #L3acc72.  v0:= temp;
  #L3acc74.  v1:= -1I;
  #L3acc76.  if v0 == v1 then goto L3acc7c;
  #L3acc7a.  return v0;
  #L3acc7c.  v0:= new `java.lang.IllegalArgumentException`;
  #L3acc80.  v1:= new `java.lang.StringBuilder`;
  #L3acc84.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3acc8a.  v2:= "Field '" @kind object;
  #L3acc8e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3acc94.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3acc9a.  v4:= "' is not supported" @kind object;
  #L3acc9e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3acca4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3accaa.  v4:= temp @kind object;
  #L3accac.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3accb2.  throw v0;
}
procedure `int` `indexOfSupported`(`org.joda.time.base.AbstractPartial` v3 @kind this, `org.joda.time.DurationFieldType` v4 @kind object) @signature `Lorg/joda/time/base/AbstractPartial;.indexOfSupported:(Lorg/joda/time/DurationFieldType;)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L3accc4.  call temp:= `indexOf`(v3, v4) @signature `Lorg/joda/time/base/AbstractPartial;.indexOf:(Lorg/joda/time/DurationFieldType;)I` @kind virtual;
  #L3accca.  v0:= temp;
  #L3acccc.  v1:= -1I;
  #L3accce.  if v0 == v1 then goto L3accd4;
  #L3accd2.  return v0;
  #L3accd4.  v0:= new `java.lang.IllegalArgumentException`;
  #L3accd8.  v1:= new `java.lang.StringBuilder`;
  #L3accdc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3acce2.  v2:= "Field '" @kind object;
  #L3acce6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3accec.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3accf2.  v4:= "' is not supported" @kind object;
  #L3accf6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3accfc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3acd02.  v4:= temp @kind object;
  #L3acd04.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3acd0a.  throw v0;
}
procedure `boolean` `isAfter`(`org.joda.time.base.AbstractPartial` v1 @kind this, `org.joda.time.ReadablePartial` v2 @kind object) @signature `Lorg/joda/time/base/AbstractPartial;.isAfter:(Lorg/joda/time/ReadablePartial;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ac9c8.  if v2 == 0 then goto L3ac9e0;
  #L3ac9cc.  call temp:= `compareTo`(v1, v2) @signature `Lorg/joda/time/base/AbstractPartial;.compareTo:(Lorg/joda/time/ReadablePartial;)I` @kind virtual;
  #L3ac9d2.  v2:= temp;
  #L3ac9d4.  if v2 <= 0 then goto L3ac9dc;
  #L3ac9d8.  v2:= 1I;
  #L3ac9da.  goto L3ac9de;
  #L3ac9dc.  v2:= 0I;
  #L3ac9de.  return v2;
  #L3ac9e0.  v2:= new `java.lang.IllegalArgumentException`;
  #L3ac9e4.  v0:= "Partial cannot be null" @kind object;
  #L3ac9e8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ac9ee.  throw v2;
}
procedure `boolean` `isBefore`(`org.joda.time.base.AbstractPartial` v1 @kind this, `org.joda.time.ReadablePartial` v2 @kind object) @signature `Lorg/joda/time/base/AbstractPartial;.isBefore:(Lorg/joda/time/ReadablePartial;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aca00.  if v2 == 0 then goto L3aca18;
  #L3aca04.  call temp:= `compareTo`(v1, v2) @signature `Lorg/joda/time/base/AbstractPartial;.compareTo:(Lorg/joda/time/ReadablePartial;)I` @kind virtual;
  #L3aca0a.  v2:= temp;
  #L3aca0c.  if v2 >= 0 then goto L3aca14;
  #L3aca10.  v2:= 1I;
  #L3aca12.  goto L3aca16;
  #L3aca14.  v2:= 0I;
  #L3aca16.  return v2;
  #L3aca18.  v2:= new `java.lang.IllegalArgumentException`;
  #L3aca1c.  v0:= "Partial cannot be null" @kind object;
  #L3aca20.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3aca26.  throw v2;
}
procedure `boolean` `isEqual`(`org.joda.time.base.AbstractPartial` v1 @kind this, `org.joda.time.ReadablePartial` v2 @kind object) @signature `Lorg/joda/time/base/AbstractPartial;.isEqual:(Lorg/joda/time/ReadablePartial;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aca38.  if v2 == 0 then goto L3aca50;
  #L3aca3c.  call temp:= `compareTo`(v1, v2) @signature `Lorg/joda/time/base/AbstractPartial;.compareTo:(Lorg/joda/time/ReadablePartial;)I` @kind virtual;
  #L3aca42.  v2:= temp;
  #L3aca44.  if v2 != 0 then goto L3aca4c;
  #L3aca48.  v2:= 1I;
  #L3aca4a.  goto L3aca4e;
  #L3aca4c.  v2:= 0I;
  #L3aca4e.  return v2;
  #L3aca50.  v2:= new `java.lang.IllegalArgumentException`;
  #L3aca54.  v0:= "Partial cannot be null" @kind object;
  #L3aca58.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3aca5e.  throw v2;
}
procedure `boolean` `isSupported`(`org.joda.time.base.AbstractPartial` v1 @kind this, `org.joda.time.DateTimeFieldType` v2 @kind object) @signature `Lorg/joda/time/base/AbstractPartial;.isSupported:(Lorg/joda/time/DateTimeFieldType;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aca70.  call temp:= `indexOf`(v1, v2) @signature `Lorg/joda/time/base/AbstractPartial;.indexOf:(Lorg/joda/time/DateTimeFieldType;)I` @kind virtual;
  #L3aca76.  v2:= temp;
  #L3aca78.  v0:= -1I;
  #L3aca7a.  if v2 == v0 then goto L3aca82;
  #L3aca7e.  v2:= 1I;
  #L3aca80.  goto L3aca84;
  #L3aca82.  v2:= 0I;
  #L3aca84.  return v2;
}
procedure `org.joda.time.DateTime` `toDateTime`(`org.joda.time.base.AbstractPartial` v3 @kind this, `org.joda.time.ReadableInstant` v4 @kind object) @signature `Lorg/joda/time/base/AbstractPartial;.toDateTime:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/DateTime;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3acd7c.  call temp:= `getInstantChronology`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getInstantChronology:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;` @kind static;
  #L3acd82.  v0:= temp @kind object;
  #L3acd84.  call temp:= `getInstantMillis`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3acd8a.  v1:= temp @kind wide;
  #L3acd8c.  call temp:= `set`(v0, v3, v1) @signature `Lorg/joda/time/Chronology;.set:(Lorg/joda/time/ReadablePartial;J)J` @kind virtual;
  #L3acd92.  v1:= temp @kind wide;
  #L3acd94.  v4:= new `org.joda.time.DateTime`;
  #L3acd98.  call `<init>`(v4, v1, v0) @signature `Lorg/joda/time/DateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3acd9e.  return v4 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.base.AbstractPartial` v0 @kind this, `org.joda.time.format.DateTimeFormatter` v1 @kind object) @signature `Lorg/joda/time/base/AbstractPartial;.toString:(Lorg/joda/time/format/DateTimeFormatter;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3acd54.  if v1 != 0 then goto L3acd62;
  #L3acd58.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3acd5e.  v1:= temp @kind object;
  #L3acd60.  return v1 @kind object;
  #L3acd62.  call temp:= `print`(v1, v0) @signature `Lorg/joda/time/format/DateTimeFormatter;.print:(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;` @kind virtual;
  #L3acd68.  v1:= temp @kind object;
  #L3acd6a.  return v1 @kind object;
}
