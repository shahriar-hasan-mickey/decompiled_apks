record `org.joda.time.base.BasePartial` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.joda.time.base.AbstractPartial` @kind class, `org.joda.time.ReadablePartial` @kind interface, `java.io.Serializable` @kind interface {
  `org.joda.time.Chronology` `org.joda.time.base.BasePartial.iChronology` @AccessFlag PRIVATE_FINAL;
  `int`[] `org.joda.time.base.BasePartial.iValues` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@org.joda.time.base.BasePartial.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.base.BasePartial` v3 @kind this) @signature `Lorg/joda/time/base/BasePartial;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3ada8c.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3ada92.  v0:= temp @kind wide;
  #L3ada94.  v2:= 0I;
  #L3ada96.  call `<init>`(v3, v0, v2) @signature `Lorg/joda/time/base/BasePartial;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3ada9c.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePartial` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/base/BasePartial;.<init>:(J)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L3adb88.  v0:= 0I;
  #L3adb8a.  call `<init>`(v1, v2, v0) @signature `Lorg/joda/time/base/BasePartial;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3adb90.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePartial` v1 @kind this, `long` v2 , `org.joda.time.Chronology` v4 @kind object) @signature `Lorg/joda/time/base/BasePartial;.<init>:(JLorg/joda/time/Chronology;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L3adba4.  call `<init>`(v1) @signature `Lorg/joda/time/base/AbstractPartial;.<init>:()V` @kind direct;
  #L3adbaa.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3adbb0.  v4:= temp @kind object;
  #L3adbb2.  call temp:= `withUTC`(v4) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3adbb8.  v0:= temp @kind object;
  #L3adbba.  v1.`org.joda.time.base.BasePartial.iChronology` @type ^`org.joda.time.Chronology` := v0 @kind object;
  #L3adbbe.  call temp:= `get`(v4, v1, v2) @signature `Lorg/joda/time/Chronology;.get:(Lorg/joda/time/ReadablePartial;J)[I` @kind virtual;
  #L3adbc4.  v2:= temp @kind object;
  #L3adbc6.  v1.`org.joda.time.base.BasePartial.iValues` @type ^`int`[] := v2 @kind object;
  #L3adbca.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePartial` v2 @kind this, `java.lang.Object` v3 @kind object, `org.joda.time.Chronology` v4 @kind object) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3adae8.  call `<init>`(v2) @signature `Lorg/joda/time/base/AbstractPartial;.<init>:()V` @kind direct;
  #L3adaee.  call temp:= `getInstance`() @signature `Lorg/joda/time/convert/ConverterManager;.getInstance:()Lorg/joda/time/convert/ConverterManager;` @kind static;
  #L3adaf4.  v0:= temp @kind object;
  #L3adaf6.  call temp:= `getPartialConverter`(v0, v3) @signature `Lorg/joda/time/convert/ConverterManager;.getPartialConverter:(Ljava/lang/Object;)Lorg/joda/time/convert/PartialConverter;` @kind virtual;
  #L3adafc.  v0:= temp @kind object;
  #L3adafe.  call temp:= `getChronology`(v0, v3, v4) @signature `Lorg/joda/time/convert/PartialConverter;.getChronology:(Ljava/lang/Object;Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind interface;
  #L3adb04.  v4:= temp @kind object;
  #L3adb06.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3adb0c.  v4:= temp @kind object;
  #L3adb0e.  call temp:= `withUTC`(v4) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3adb14.  v1:= temp @kind object;
  #L3adb16.  v2.`org.joda.time.base.BasePartial.iChronology` @type ^`org.joda.time.Chronology` := v1 @kind object;
  #L3adb1a.  call temp:= `getPartialValues`(v0, v2, v3, v4) @signature `Lorg/joda/time/convert/PartialConverter;.getPartialValues:(Lorg/joda/time/ReadablePartial;Ljava/lang/Object;Lorg/joda/time/Chronology;)[I` @kind interface;
  #L3adb20.  v3:= temp @kind object;
  #L3adb22.  v2.`org.joda.time.base.BasePartial.iValues` @type ^`int`[] := v3 @kind object;
  #L3adb26.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePartial` v2 @kind this, `java.lang.Object` v3 @kind object, `org.joda.time.Chronology` v4 @kind object, `org.joda.time.format.DateTimeFormatter` v5 @kind object) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;Lorg/joda/time/format/DateTimeFormatter;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3adb38.  call `<init>`(v2) @signature `Lorg/joda/time/base/AbstractPartial;.<init>:()V` @kind direct;
  #L3adb3e.  call temp:= `getInstance`() @signature `Lorg/joda/time/convert/ConverterManager;.getInstance:()Lorg/joda/time/convert/ConverterManager;` @kind static;
  #L3adb44.  v0:= temp @kind object;
  #L3adb46.  call temp:= `getPartialConverter`(v0, v3) @signature `Lorg/joda/time/convert/ConverterManager;.getPartialConverter:(Ljava/lang/Object;)Lorg/joda/time/convert/PartialConverter;` @kind virtual;
  #L3adb4c.  v0:= temp @kind object;
  #L3adb4e.  call temp:= `getChronology`(v0, v3, v4) @signature `Lorg/joda/time/convert/PartialConverter;.getChronology:(Ljava/lang/Object;Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind interface;
  #L3adb54.  v4:= temp @kind object;
  #L3adb56.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3adb5c.  v4:= temp @kind object;
  #L3adb5e.  call temp:= `withUTC`(v4) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3adb64.  v1:= temp @kind object;
  #L3adb66.  v2.`org.joda.time.base.BasePartial.iChronology` @type ^`org.joda.time.Chronology` := v1 @kind object;
  #L3adb6a.  call temp:= `getPartialValues`(v0, v2, v3, v4, v5) @signature `Lorg/joda/time/convert/PartialConverter;.getPartialValues:(Lorg/joda/time/ReadablePartial;Ljava/lang/Object;Lorg/joda/time/Chronology;Lorg/joda/time/format/DateTimeFormatter;)[I` @kind interface;
  #L3adb70.  v3:= temp @kind object;
  #L3adb72.  v2.`org.joda.time.base.BasePartial.iValues` @type ^`int`[] := v3 @kind object;
  #L3adb76.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePartial` v2 @kind this, `org.joda.time.Chronology` v3 @kind object) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Lorg/joda/time/Chronology;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3adbdc.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3adbe2.  v0:= temp @kind wide;
  #L3adbe4.  call `<init>`(v2, v0, v3) @signature `Lorg/joda/time/base/BasePartial;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3adbea.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePartial` v0 @kind this, `org.joda.time.base.BasePartial` v1 @kind object, `org.joda.time.Chronology` v2 @kind object) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Lorg/joda/time/base/BasePartial;Lorg/joda/time/Chronology;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3adc20.  call `<init>`(v0) @signature `Lorg/joda/time/base/AbstractPartial;.<init>:()V` @kind direct;
  #L3adc26.  call temp:= `withUTC`(v2) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3adc2c.  v2:= temp @kind object;
  #L3adc2e.  v0.`org.joda.time.base.BasePartial.iChronology` @type ^`org.joda.time.Chronology` := v2 @kind object;
  #L3adc32.  v1:= v1.`org.joda.time.base.BasePartial.iValues` @type ^`int`[] @kind object;
  #L3adc36.  v0.`org.joda.time.base.BasePartial.iValues` @type ^`int`[] := v1 @kind object;
  #L3adc3a.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePartial` v0 @kind this, `org.joda.time.base.BasePartial` v1 @kind object, `int`[] v2 @kind object) @signature `Lorg/joda/time/base/BasePartial;.<init>:(Lorg/joda/time/base/BasePartial;[I)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3adbfc.  call `<init>`(v0) @signature `Lorg/joda/time/base/AbstractPartial;.<init>:()V` @kind direct;
  #L3adc02.  v1:= v1.`org.joda.time.base.BasePartial.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3adc06.  v0.`org.joda.time.base.BasePartial.iChronology` @type ^`org.joda.time.Chronology` := v1 @kind object;
  #L3adc0a.  v0.`org.joda.time.base.BasePartial.iValues` @type ^`int`[] := v2 @kind object;
  #L3adc0e.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePartial` v1 @kind this, `int`[] v2 @kind object, `org.joda.time.Chronology` v3 @kind object) @signature `Lorg/joda/time/base/BasePartial;.<init>:([ILorg/joda/time/Chronology;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L3adab0.  call `<init>`(v1) @signature `Lorg/joda/time/base/AbstractPartial;.<init>:()V` @kind direct;
  #L3adab6.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3adabc.  v3:= temp @kind object;
  #L3adabe.  call temp:= `withUTC`(v3) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3adac4.  v0:= temp @kind object;
  #L3adac6.  v1.`org.joda.time.base.BasePartial.iChronology` @type ^`org.joda.time.Chronology` := v0 @kind object;
  #L3adaca.  call `validate`(v3, v1, v2) @signature `Lorg/joda/time/Chronology;.validate:(Lorg/joda/time/ReadablePartial;[I)V` @kind virtual;
  #L3adad0.  v1.`org.joda.time.base.BasePartial.iValues` @type ^`int`[] := v2 @kind object;
  #L3adad4.  return @kind void;
}
procedure `org.joda.time.Chronology` `getChronology`(`org.joda.time.base.BasePartial` v1 @kind this) @signature `Lorg/joda/time/base/BasePartial;.getChronology:()Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ada74.  v0:= v1.`org.joda.time.base.BasePartial.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3ada78.  return v0 @kind object;
}
procedure `int` `getValue`(`org.joda.time.base.BasePartial` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/base/BasePartial;.getValue:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ad9cc.  v0:= v1.`org.joda.time.base.BasePartial.iValues` @type ^`int`[] @kind object;
  #L3ad9d0.  v2:= v0[v2];
  #L3ad9d4.  return v2;
}
procedure `int`[] `getValues`(`org.joda.time.base.BasePartial` v1 @kind this) @signature `Lorg/joda/time/base/BasePartial;.getValues:()[I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ad9e8.  v0:= v1.`org.joda.time.base.BasePartial.iValues` @type ^`int`[] @kind object;
  #L3ad9ec.  call temp:= `clone`(v0) @signature `[I.clone:()Ljava/lang/Object;` @kind virtual;
  #L3ad9f2.  v0:= temp @kind object;
  #L3ad9f4.  v0:= (`int`[]) v0 @kind object;
  #L3ad9f8.  return v0 @kind object;
}
procedure `void` `setValue`(`org.joda.time.base.BasePartial` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lorg/joda/time/base/BasePartial;.setValue:(II)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3adc4c.  call temp:= `getField`(v2, v3) @signature `Lorg/joda/time/base/AbstractPartial;.getField:(I)Lorg/joda/time/DateTimeField;` @kind virtual;
  #L3adc52.  v0:= temp @kind object;
  #L3adc54.  v1:= v2.`org.joda.time.base.BasePartial.iValues` @type ^`int`[] @kind object;
  #L3adc58.  call temp:= `set`(v0, v2, v3, v1, v4) @signature `Lorg/joda/time/DateTimeField;.set:(Lorg/joda/time/ReadablePartial;I[II)[I` @kind virtual;
  #L3adc5e.  v3:= temp @kind object;
  #L3adc60.  v4:= v2.`org.joda.time.base.BasePartial.iValues` @type ^`int`[] @kind object;
  #L3adc64.  v0:= length @variable v4;
  #L3adc66.  v1:= 0I;
  #L3adc68.  call `arraycopy`(v3, v1, v4, v1, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3adc6e.  return @kind void;
}
procedure `void` `setValues`(`org.joda.time.base.BasePartial` v3 @kind this, `int`[] v4 @kind object) @signature `Lorg/joda/time/base/BasePartial;.setValues:([I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L3adc80.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/base/BasePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3adc86.  v0:= temp @kind object;
  #L3adc88.  call `validate`(v0, v3, v4) @signature `Lorg/joda/time/Chronology;.validate:(Lorg/joda/time/ReadablePartial;[I)V` @kind virtual;
  #L3adc8e.  v0:= v3.`org.joda.time.base.BasePartial.iValues` @type ^`int`[] @kind object;
  #L3adc92.  v1:= length @variable v0;
  #L3adc94.  v2:= 0I;
  #L3adc96.  call `arraycopy`(v4, v2, v0, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3adc9c.  return @kind void;
}
procedure `java.lang.String` `toString`(`org.joda.time.base.BasePartial` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/joda/time/base/BasePartial;.toString:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3ada0c.  if v1 != 0 then goto L3ada1a;
  #L3ada10.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ada16.  v1:= temp @kind object;
  #L3ada18.  return v1 @kind object;
  #L3ada1a.  call temp:= `forPattern`(v1) @signature `Lorg/joda/time/format/DateTimeFormat;.forPattern:(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3ada20.  v1:= temp @kind object;
  #L3ada22.  call temp:= `print`(v1, v0) @signature `Lorg/joda/time/format/DateTimeFormatter;.print:(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;` @kind virtual;
  #L3ada28.  v1:= temp @kind object;
  #L3ada2a.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.base.BasePartial` v0 @kind this, `java.lang.String` v1 @kind object, `java.util.Locale` v2 @kind object) @signature `Lorg/joda/time/base/BasePartial;.toString:(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3ada3c.  if v1 != 0 then goto L3ada4a;
  #L3ada40.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ada46.  v1:= temp @kind object;
  #L3ada48.  return v1 @kind object;
  #L3ada4a.  call temp:= `forPattern`(v1) @signature `Lorg/joda/time/format/DateTimeFormat;.forPattern:(Ljava/lang/String;)Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3ada50.  v1:= temp @kind object;
  #L3ada52.  call temp:= `withLocale`(v1, v2) @signature `Lorg/joda/time/format/DateTimeFormatter;.withLocale:(Ljava/util/Locale;)Lorg/joda/time/format/DateTimeFormatter;` @kind virtual;
  #L3ada58.  v1:= temp @kind object;
  #L3ada5a.  call temp:= `print`(v1, v0) @signature `Lorg/joda/time/format/DateTimeFormatter;.print:(Lorg/joda/time/ReadablePartial;)Ljava/lang/String;` @kind virtual;
  #L3ada60.  v1:= temp @kind object;
  #L3ada62.  return v1 @kind object;
}
