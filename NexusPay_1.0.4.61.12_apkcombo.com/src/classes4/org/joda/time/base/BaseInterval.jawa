record `org.joda.time.base.BaseInterval` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.joda.time.base.AbstractInterval` @kind class, `org.joda.time.ReadableInterval` @kind interface, `java.io.Serializable` @kind interface {
  `org.joda.time.Chronology` `org.joda.time.base.BaseInterval.iChronology` @AccessFlag PRIVATE_VOLATILE;
  `long` `org.joda.time.base.BaseInterval.iEndMillis` @AccessFlag PRIVATE_VOLATILE;
  `long` `org.joda.time.base.BaseInterval.iStartMillis` @AccessFlag PRIVATE_VOLATILE;
}
global `long` `@@org.joda.time.base.BaseInterval.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.base.BaseInterval` v0 @kind this, `long` v1 , `long` v3 , `org.joda.time.Chronology` v5 @kind object) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(JJLorg/joda/time/Chronology;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3ad774.  call `<init>`(v0) @signature `Lorg/joda/time/base/AbstractInterval;.<init>:()V` @kind direct;
  #L3ad77a.  call temp:= `getChronology`(v5) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3ad780.  v5:= temp @kind object;
  #L3ad782.  v0.`org.joda.time.base.BaseInterval.iChronology` @type ^`org.joda.time.Chronology` := v5 @kind object;
  #L3ad786.  call `checkInterval`(v0, v1, v3) @signature `Lorg/joda/time/base/AbstractInterval;.checkInterval:(JJ)V` @kind virtual;
  #L3ad78c.  v0.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` := v1 @kind wide;
  #L3ad790.  v0.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` := v3 @kind wide;
  #L3ad794.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BaseInterval` v2 @kind this, `java.lang.Object` v3 @kind object, `org.joda.time.Chronology` v4 @kind object) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ad6b8.  call `<init>`(v2) @signature `Lorg/joda/time/base/AbstractInterval;.<init>:()V` @kind direct;
  #L3ad6be.  call temp:= `getInstance`() @signature `Lorg/joda/time/convert/ConverterManager;.getInstance:()Lorg/joda/time/convert/ConverterManager;` @kind static;
  #L3ad6c4.  v0:= temp @kind object;
  #L3ad6c6.  call temp:= `getIntervalConverter`(v0, v3) @signature `Lorg/joda/time/convert/ConverterManager;.getIntervalConverter:(Ljava/lang/Object;)Lorg/joda/time/convert/IntervalConverter;` @kind virtual;
  #L3ad6cc.  v0:= temp @kind object;
  #L3ad6ce.  call temp:= `isReadableInterval`(v0, v3, v4) @signature `Lorg/joda/time/convert/IntervalConverter;.isReadableInterval:(Ljava/lang/Object;Lorg/joda/time/Chronology;)Z` @kind interface;
  #L3ad6d4.  v1:= temp;
  #L3ad6d6.  if v1 == 0 then goto L3ad70a;
  #L3ad6da.  v3:= (`org.joda.time.ReadableInterval`) v3 @kind object;
  #L3ad6de.  if v4 == 0 then goto L3ad6e4;
  #L3ad6e2.  goto L3ad6ec;
  #L3ad6e4.  call temp:= `getChronology`(v3) @signature `Lorg/joda/time/ReadableInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ad6ea.  v4:= temp @kind object;
  #L3ad6ec.  v2.`org.joda.time.base.BaseInterval.iChronology` @type ^`org.joda.time.Chronology` := v4 @kind object;
  #L3ad6f0.  call temp:= `getStartMillis`(v3) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ad6f6.  v0:= temp @kind wide;
  #L3ad6f8.  v2.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` := v0 @kind wide;
  #L3ad6fc.  call temp:= `getEndMillis`(v3) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ad702.  v3:= temp @kind wide;
  #L3ad704.  v2.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` := v3 @kind wide;
  #L3ad708.  goto L3ad754;
  #L3ad70a.  v1:= instanceof @variable v2 @type ^`org.joda.time.ReadWritableInterval` @kind boolean;
  #L3ad70e.  if v1 == 0 then goto L3ad720;
  #L3ad712.  v1:= v2 @kind object;
  #L3ad714.  v1:= (`org.joda.time.ReadWritableInterval`) v1 @kind object;
  #L3ad718.  call `setInto`(v0, v1, v3, v4) @signature `Lorg/joda/time/convert/IntervalConverter;.setInto:(Lorg/joda/time/ReadWritableInterval;Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @kind interface;
  #L3ad71e.  goto L3ad754;
  #L3ad720.  v1:= new `org.joda.time.MutableInterval`;
  #L3ad724.  call `<init>`(v1) @signature `Lorg/joda/time/MutableInterval;.<init>:()V` @kind direct;
  #L3ad72a.  call `setInto`(v0, v1, v3, v4) @signature `Lorg/joda/time/convert/IntervalConverter;.setInto:(Lorg/joda/time/ReadWritableInterval;Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @kind interface;
  #L3ad730.  call temp:= `getChronology`(v1) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3ad736.  v3:= temp @kind object;
  #L3ad738.  v2.`org.joda.time.base.BaseInterval.iChronology` @type ^`org.joda.time.Chronology` := v3 @kind object;
  #L3ad73c.  call temp:= `getStartMillis`(v1) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @kind virtual;
  #L3ad742.  v3:= temp @kind wide;
  #L3ad744.  v2.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` := v3 @kind wide;
  #L3ad748.  call temp:= `getEndMillis`(v1) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @kind virtual;
  #L3ad74e.  v3:= temp @kind wide;
  #L3ad750.  v2.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` := v3 @kind wide;
  #L3ad754.  v3:= v2.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` @kind wide;
  #L3ad758.  v0:= v2.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` @kind wide;
  #L3ad75c.  call `checkInterval`(v2, v3, v0) @signature `Lorg/joda/time/base/AbstractInterval;.checkInterval:(JJ)V` @kind virtual;
  #L3ad762.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BaseInterval` v2 @kind this, `org.joda.time.ReadableDuration` v3 @kind object, `org.joda.time.ReadableInstant` v4 @kind object) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Lorg/joda/time/ReadableDuration;Lorg/joda/time/ReadableInstant;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ad7a8.  call `<init>`(v2) @signature `Lorg/joda/time/base/AbstractInterval;.<init>:()V` @kind direct;
  #L3ad7ae.  call temp:= `getInstantChronology`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getInstantChronology:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;` @kind static;
  #L3ad7b4.  v0:= temp @kind object;
  #L3ad7b6.  v2.`org.joda.time.base.BaseInterval.iChronology` @type ^`org.joda.time.Chronology` := v0 @kind object;
  #L3ad7ba.  call temp:= `getInstantMillis`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3ad7c0.  v0:= temp @kind wide;
  #L3ad7c2.  v2.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` := v0 @kind wide;
  #L3ad7c6.  call temp:= `getDurationMillis`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getDurationMillis:(Lorg/joda/time/ReadableDuration;)J` @kind static;
  #L3ad7cc.  v3:= temp @kind wide;
  #L3ad7ce.  v0:= v2.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` @kind wide;
  #L3ad7d2.  v3:= -v3 @kind long;
  #L3ad7d4.  call temp:= `safeAdd`(v0, v3) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(JJ)J` @kind static;
  #L3ad7da.  v3:= temp @kind wide;
  #L3ad7dc.  v2.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` := v3 @kind wide;
  #L3ad7e0.  v3:= v2.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` @kind wide;
  #L3ad7e4.  v0:= v2.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` @kind wide;
  #L3ad7e8.  call `checkInterval`(v2, v3, v0) @signature `Lorg/joda/time/base/AbstractInterval;.checkInterval:(JJ)V` @kind virtual;
  #L3ad7ee.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BaseInterval` v2 @kind this, `org.joda.time.ReadableInstant` v3 @kind object, `org.joda.time.ReadableDuration` v4 @kind object) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableDuration;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ad800.  call `<init>`(v2) @signature `Lorg/joda/time/base/AbstractInterval;.<init>:()V` @kind direct;
  #L3ad806.  call temp:= `getInstantChronology`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getInstantChronology:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;` @kind static;
  #L3ad80c.  v0:= temp @kind object;
  #L3ad80e.  v2.`org.joda.time.base.BaseInterval.iChronology` @type ^`org.joda.time.Chronology` := v0 @kind object;
  #L3ad812.  call temp:= `getInstantMillis`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3ad818.  v0:= temp @kind wide;
  #L3ad81a.  v2.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` := v0 @kind wide;
  #L3ad81e.  call temp:= `getDurationMillis`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getDurationMillis:(Lorg/joda/time/ReadableDuration;)J` @kind static;
  #L3ad824.  v3:= temp @kind wide;
  #L3ad826.  v0:= v2.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` @kind wide;
  #L3ad82a.  call temp:= `safeAdd`(v0, v3) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(JJ)J` @kind static;
  #L3ad830.  v3:= temp @kind wide;
  #L3ad832.  v2.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` := v3 @kind wide;
  #L3ad836.  v3:= v2.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` @kind wide;
  #L3ad83a.  v0:= v2.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` @kind wide;
  #L3ad83e.  call `checkInterval`(v2, v3, v0) @signature `Lorg/joda/time/base/AbstractInterval;.checkInterval:(JJ)V` @kind virtual;
  #L3ad844.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BaseInterval` v2 @kind this, `org.joda.time.ReadableInstant` v3 @kind object, `org.joda.time.ReadableInstant` v4 @kind object) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableInstant;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ad858.  call `<init>`(v2) @signature `Lorg/joda/time/base/AbstractInterval;.<init>:()V` @kind direct;
  #L3ad85e.  if v3 != 0 then goto L3ad884;
  #L3ad862.  if v4 != 0 then goto L3ad884;
  #L3ad866.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3ad86c.  v3:= temp @kind wide;
  #L3ad86e.  v2.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` := v3 @kind wide;
  #L3ad872.  v2.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` := v3 @kind wide;
  #L3ad876.  call temp:= `getInstance`() @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:()Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3ad87c.  v3:= temp @kind object;
  #L3ad87e.  v2.`org.joda.time.base.BaseInterval.iChronology` @type ^`org.joda.time.Chronology` := v3 @kind object;
  #L3ad882.  goto L3ad8b6;
  #L3ad884.  call temp:= `getInstantChronology`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getInstantChronology:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;` @kind static;
  #L3ad88a.  v0:= temp @kind object;
  #L3ad88c.  v2.`org.joda.time.base.BaseInterval.iChronology` @type ^`org.joda.time.Chronology` := v0 @kind object;
  #L3ad890.  call temp:= `getInstantMillis`(v3) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3ad896.  v0:= temp @kind wide;
  #L3ad898.  v2.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` := v0 @kind wide;
  #L3ad89c.  call temp:= `getInstantMillis`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3ad8a2.  v3:= temp @kind wide;
  #L3ad8a4.  v2.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` := v3 @kind wide;
  #L3ad8a8.  v3:= v2.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` @kind wide;
  #L3ad8ac.  v0:= v2.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` @kind wide;
  #L3ad8b0.  call `checkInterval`(v2, v3, v0) @signature `Lorg/joda/time/base/AbstractInterval;.checkInterval:(JJ)V` @kind virtual;
  #L3ad8b6.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BaseInterval` v3 @kind this, `org.joda.time.ReadableInstant` v4 @kind object, `org.joda.time.ReadablePeriod` v5 @kind object) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadablePeriod;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3ad8c8.  call `<init>`(v3) @signature `Lorg/joda/time/base/AbstractInterval;.<init>:()V` @kind direct;
  #L3ad8ce.  call temp:= `getInstantChronology`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getInstantChronology:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;` @kind static;
  #L3ad8d4.  v0:= temp @kind object;
  #L3ad8d6.  v3.`org.joda.time.base.BaseInterval.iChronology` @type ^`org.joda.time.Chronology` := v0 @kind object;
  #L3ad8da.  call temp:= `getInstantMillis`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3ad8e0.  v1:= temp @kind wide;
  #L3ad8e2.  v3.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` := v1 @kind wide;
  #L3ad8e6.  if v5 != 0 then goto L3ad8f4;
  #L3ad8ea.  v4:= v3.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` @kind wide;
  #L3ad8ee.  v3.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` := v4 @kind wide;
  #L3ad8f2.  goto L3ad906;
  #L3ad8f4.  v1:= v3.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` @kind wide;
  #L3ad8f8.  v4:= 1I;
  #L3ad8fa.  call temp:= `add`(v0, v5, v1, v4) @signature `Lorg/joda/time/Chronology;.add:(Lorg/joda/time/ReadablePeriod;JI)J` @kind virtual;
  #L3ad900.  v4:= temp @kind wide;
  #L3ad902.  v3.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` := v4 @kind wide;
  #L3ad906.  v4:= v3.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` @kind wide;
  #L3ad90a.  v0:= v3.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` @kind wide;
  #L3ad90e.  call `checkInterval`(v3, v4, v0) @signature `Lorg/joda/time/base/AbstractInterval;.checkInterval:(JJ)V` @kind virtual;
  #L3ad914.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BaseInterval` v3 @kind this, `org.joda.time.ReadablePeriod` v4 @kind object, `org.joda.time.ReadableInstant` v5 @kind object) @signature `Lorg/joda/time/base/BaseInterval;.<init>:(Lorg/joda/time/ReadablePeriod;Lorg/joda/time/ReadableInstant;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3ad928.  call `<init>`(v3) @signature `Lorg/joda/time/base/AbstractInterval;.<init>:()V` @kind direct;
  #L3ad92e.  call temp:= `getInstantChronology`(v5) @signature `Lorg/joda/time/DateTimeUtils;.getInstantChronology:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;` @kind static;
  #L3ad934.  v0:= temp @kind object;
  #L3ad936.  v3.`org.joda.time.base.BaseInterval.iChronology` @type ^`org.joda.time.Chronology` := v0 @kind object;
  #L3ad93a.  call temp:= `getInstantMillis`(v5) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3ad940.  v1:= temp @kind wide;
  #L3ad942.  v3.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` := v1 @kind wide;
  #L3ad946.  if v4 != 0 then goto L3ad954;
  #L3ad94a.  v4:= v3.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` @kind wide;
  #L3ad94e.  v3.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` := v4 @kind wide;
  #L3ad952.  goto L3ad966;
  #L3ad954.  v1:= v3.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` @kind wide;
  #L3ad958.  v5:= -1I;
  #L3ad95a.  call temp:= `add`(v0, v4, v1, v5) @signature `Lorg/joda/time/Chronology;.add:(Lorg/joda/time/ReadablePeriod;JI)J` @kind virtual;
  #L3ad960.  v4:= temp @kind wide;
  #L3ad962.  v3.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` := v4 @kind wide;
  #L3ad966.  v4:= v3.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` @kind wide;
  #L3ad96a.  v0:= v3.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` @kind wide;
  #L3ad96e.  call `checkInterval`(v3, v4, v0) @signature `Lorg/joda/time/base/AbstractInterval;.checkInterval:(JJ)V` @kind virtual;
  #L3ad974.  return @kind void;
}
procedure `org.joda.time.Chronology` `getChronology`(`org.joda.time.base.BaseInterval` v1 @kind this) @signature `Lorg/joda/time/base/BaseInterval;.getChronology:()Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ad6a0.  v0:= v1.`org.joda.time.base.BaseInterval.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3ad6a4.  return v0 @kind object;
}
procedure `long` `getEndMillis`(`org.joda.time.base.BaseInterval` v2 @kind this) @signature `Lorg/joda/time/base/BaseInterval;.getEndMillis:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ad670.  v0:= v2.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` @kind wide;
  #L3ad674.  return v0 @kind wide;
}
procedure `long` `getStartMillis`(`org.joda.time.base.BaseInterval` v2 @kind this) @signature `Lorg/joda/time/base/BaseInterval;.getStartMillis:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ad688.  v0:= v2.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` @kind wide;
  #L3ad68c.  return v0 @kind wide;
}
procedure `void` `setInterval`(`org.joda.time.base.BaseInterval` v0 @kind this, `long` v1 , `long` v3 , `org.joda.time.Chronology` v5 @kind object) @signature `Lorg/joda/time/base/BaseInterval;.setInterval:(JJLorg/joda/time/Chronology;)V` @AccessFlag PROTECTED {
    temp;

  #L3ad988.  call `checkInterval`(v0, v1, v3) @signature `Lorg/joda/time/base/AbstractInterval;.checkInterval:(JJ)V` @kind virtual;
  #L3ad98e.  v0.`org.joda.time.base.BaseInterval.iStartMillis` @type ^`long` := v1 @kind wide;
  #L3ad992.  v0.`org.joda.time.base.BaseInterval.iEndMillis` @type ^`long` := v3 @kind wide;
  #L3ad996.  call temp:= `getChronology`(v5) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3ad99c.  v1:= temp @kind object;
  #L3ad99e.  v0.`org.joda.time.base.BaseInterval.iChronology` @type ^`org.joda.time.Chronology` := v1 @kind object;
  #L3ad9a2.  return @kind void;
}
