record `org.joda.time.base.BaseSingleFieldPeriod` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.joda.time.ReadablePeriod` @kind interface, `java.lang.Comparable` @kind interface, `java.io.Serializable` @kind interface {
  `int` `org.joda.time.base.BaseSingleFieldPeriod.iPeriod` @AccessFlag PRIVATE_VOLATILE;
}
global `long` `@@org.joda.time.base.BaseSingleFieldPeriod.START_1972` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.base.BaseSingleFieldPeriod.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.base.BaseSingleFieldPeriod` v0 @kind this, `int` v1 ) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.<init>:(I)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3aea64.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3aea6a.  v0.`org.joda.time.base.BaseSingleFieldPeriod.iPeriod` @type ^`int` := v1;
  #L3aea6e.  return @kind void;
}
procedure `int` `between`(`org.joda.time.ReadableInstant` v2 @kind object, `org.joda.time.ReadableInstant` v3 @kind object, `org.joda.time.DurationFieldType` v4 @kind object) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.between:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableInstant;Lorg/joda/time/DurationFieldType;)I` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;

  #L3ae678.  if v2 == 0 then goto L3ae6aa;
  #L3ae67c.  if v3 == 0 then goto L3ae6aa;
  #L3ae680.  call temp:= `getInstantChronology`(v2) @signature `Lorg/joda/time/DateTimeUtils;.getInstantChronology:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;` @kind static;
  #L3ae686.  v0:= temp @kind object;
  #L3ae688.  call temp:= `getField`(v4, v0) @signature `Lorg/joda/time/DurationFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;` @kind virtual;
  #L3ae68e.  v4:= temp @kind object;
  #L3ae690.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ae696.  v0:= temp @kind wide;
  #L3ae698.  call temp:= `getMillis`(v2) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ae69e.  v2:= temp @kind wide;
  #L3ae6a0.  call temp:= `getDifference`(v4, v0, v2) @signature `Lorg/joda/time/DurationField;.getDifference:(JJ)I` @kind virtual;
  #L3ae6a6.  v2:= temp;
  #L3ae6a8.  return v2;
  #L3ae6aa.  v2:= new `java.lang.IllegalArgumentException`;
  #L3ae6ae.  v3:= "ReadableInstant objects must not be null" @kind object;
  #L3ae6b2.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ae6b8.  throw v2;
}
procedure `int` `between`(`org.joda.time.ReadablePartial` v8 @kind object, `org.joda.time.ReadablePartial` v9 @kind object, `org.joda.time.ReadablePeriod` v10 @kind object) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.between:(Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePeriod;)I` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3ae6cc.  if v8 == 0 then goto L3ae790;
  #L3ae6d0.  if v9 == 0 then goto L3ae790;
  #L3ae6d4.  call temp:= `size`(v8) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3ae6da.  v0:= temp;
  #L3ae6dc.  call temp:= `size`(v9) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3ae6e2.  v1:= temp;
  #L3ae6e4.  v2:= "ReadablePartial objects must have the same set of fields" @kind object;
  #L3ae6e8.  if v0 != v1 then goto L3ae784;
  #L3ae6ec.  call temp:= `size`(v8) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3ae6f2.  v0:= temp;
  #L3ae6f4.  v1:= 0I;
  #L3ae6f6.  v3:= 0I;
  #L3ae6f8.  if v3 >= v0 then goto L3ae722;
  #L3ae6fc.  call temp:= `getFieldType`(v8, v3) @signature `Lorg/joda/time/ReadablePartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind interface;
  #L3ae702.  v4:= temp @kind object;
  #L3ae704.  call temp:= `getFieldType`(v9, v3) @signature `Lorg/joda/time/ReadablePartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind interface;
  #L3ae70a.  v5:= temp @kind object;
  #L3ae70c.  if v4 != v5 then goto L3ae716;
  #L3ae710.  v3:= v3 + 1;
  #L3ae714.  goto L3ae6f8;
  #L3ae716.  v8:= new `java.lang.IllegalArgumentException`;
  #L3ae71a.  call `<init>`(v8, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ae720.  throw v8;
  #L3ae722.  call temp:= `isContiguous`(v8) @signature `Lorg/joda/time/DateTimeUtils;.isContiguous:(Lorg/joda/time/ReadablePartial;)Z` @kind static;
  #L3ae728.  v0:= temp;
  #L3ae72a.  if v0 == 0 then goto L3ae774;
  #L3ae72e.  call temp:= `getChronology`(v8) @signature `Lorg/joda/time/ReadablePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ae734.  v0:= temp @kind object;
  #L3ae736.  call temp:= `getChronology`(v0) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3ae73c.  v0:= temp @kind object;
  #L3ae73e.  call temp:= `withUTC`(v0) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3ae744.  v2:= temp @kind object;
  #L3ae746.  v3:= 63072000000L;
  #L3ae750.  call temp:= `set`(v2, v8, v3) @signature `Lorg/joda/time/Chronology;.set:(Lorg/joda/time/ReadablePartial;J)J` @kind virtual;
  #L3ae756.  v5:= temp @kind wide;
  #L3ae758.  call temp:= `set`(v2, v9, v3) @signature `Lorg/joda/time/Chronology;.set:(Lorg/joda/time/ReadablePartial;J)J` @kind virtual;
  #L3ae75e.  v8:= temp @kind wide;
  #L3ae760.  v3:= v10 @kind object;
  #L3ae762.  v4:= v5 @kind wide;
  #L3ae764.  v6:= v8 @kind wide;
  #L3ae766.  call temp:= `get`(v2, v3, v4, v6) @signature `Lorg/joda/time/Chronology;.get:(Lorg/joda/time/ReadablePeriod;JJ)[I` @kind virtual;
  #L3ae76c.  v8:= temp @kind object;
  #L3ae76e.  v8:= v8[v1];
  #L3ae772.  return v8;
  #L3ae774.  v8:= new `java.lang.IllegalArgumentException`;
  #L3ae778.  v9:= "ReadablePartial objects must be contiguous" @kind object;
  #L3ae77c.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ae782.  throw v8;
  #L3ae784.  v8:= new `java.lang.IllegalArgumentException`;
  #L3ae788.  call `<init>`(v8, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ae78e.  throw v8;
  #L3ae790.  v8:= new `java.lang.IllegalArgumentException`;
  #L3ae794.  v9:= "ReadablePartial objects must not be null" @kind object;
  #L3ae798.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ae79e.  throw v8;
}
procedure `int` `standardPeriodIn`(`org.joda.time.ReadablePeriod` v7 @kind object, `long` v8 ) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.standardPeriodIn:(Lorg/joda/time/ReadablePeriod;J)I` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ae920.  v0:= 0I;
  #L3ae922.  if v7 != 0 then goto L3ae928;
  #L3ae926.  return v0;
  #L3ae928.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/ISOChronology;.getInstanceUTC:()Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3ae92e.  v1:= temp @kind object;
  #L3ae930.  v2:= 0L;
  #L3ae934.  call temp:= `size`(v7) @signature `Lorg/joda/time/ReadablePeriod;.size:()I` @kind interface;
  #L3ae93a.  v4:= temp;
  #L3ae93c.  if v0 >= v4 then goto L3ae9ce;
  #L3ae940.  call temp:= `getValue`(v7, v0) @signature `Lorg/joda/time/ReadablePeriod;.getValue:(I)I` @kind interface;
  #L3ae946.  v4:= temp;
  #L3ae948.  if v4 == 0 then goto L3ae9c8;
  #L3ae94c.  call temp:= `getFieldType`(v7, v0) @signature `Lorg/joda/time/ReadablePeriod;.getFieldType:(I)Lorg/joda/time/DurationFieldType;` @kind interface;
  #L3ae952.  v5:= temp @kind object;
  #L3ae954.  call temp:= `getField`(v5, v1) @signature `Lorg/joda/time/DurationFieldType;.getField:(Lorg/joda/time/Chronology;)Lorg/joda/time/DurationField;` @kind virtual;
  #L3ae95a.  v5:= temp @kind object;
  #L3ae95c.  call temp:= `isPrecise`(v5) @signature `Lorg/joda/time/DurationField;.isPrecise:()Z` @kind virtual;
  #L3ae962.  v6:= temp;
  #L3ae964.  if v6 == 0 then goto L3ae982;
  #L3ae968.  call temp:= `getUnitMillis`(v5) @signature `Lorg/joda/time/DurationField;.getUnitMillis:()J` @kind virtual;
  #L3ae96e.  v5:= temp @kind wide;
  #L3ae970.  call temp:= `safeMultiply`(v5, v4) @signature `Lorg/joda/time/field/FieldUtils;.safeMultiply:(JI)J` @kind static;
  #L3ae976.  v4:= temp @kind wide;
  #L3ae978.  call temp:= `safeAdd`(v2, v4) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(JJ)J` @kind static;
  #L3ae97e.  v2:= temp @kind wide;
  #L3ae980.  goto L3ae9c8;
  #L3ae982.  v8:= new `java.lang.IllegalArgumentException`;
  #L3ae986.  v9:= new `java.lang.StringBuilder`;
  #L3ae98a.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ae990.  v0:= "Cannot convert period to duration as " @kind object;
  #L3ae994.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ae99a.  call temp:= `getName`(v5) @signature `Lorg/joda/time/DurationField;.getName:()Ljava/lang/String;` @kind virtual;
  #L3ae9a0.  v0:= temp @kind object;
  #L3ae9a2.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ae9a8.  v0:= " is not precise in the period " @kind object;
  #L3ae9ac.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ae9b2.  call temp:= `append`(v9, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ae9b8.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ae9be.  v7:= temp @kind object;
  #L3ae9c0.  call `<init>`(v8, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ae9c6.  throw v8;
  #L3ae9c8.  v0:= v0 + 1;
  #L3ae9cc.  goto L3ae934;
  #L3ae9ce.  v2:= v2 / v8 @kind long;
  #L3ae9d0.  call temp:= `safeToInt`(v2) @signature `Lorg/joda/time/field/FieldUtils;.safeToInt:(J)I` @kind static;
  #L3ae9d6.  v7:= temp;
  #L3ae9d8.  return v7;
}
procedure `int` `compareTo`(`org.joda.time.base.BaseSingleFieldPeriod` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3ae7b0.  v1:= (`org.joda.time.base.BaseSingleFieldPeriod`) v1 @kind object;
  #L3ae7b4.  call temp:= `compareTo`(v0, v1) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.compareTo:(Lorg/joda/time/base/BaseSingleFieldPeriod;)I` @kind virtual;
  #L3ae7ba.  v1:= temp;
  #L3ae7bc.  return v1;
}
procedure `int` `compareTo`(`org.joda.time.base.BaseSingleFieldPeriod` v3 @kind this, `org.joda.time.base.BaseSingleFieldPeriod` v4 @kind object) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.compareTo:(Lorg/joda/time/base/BaseSingleFieldPeriod;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ae7d0.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ae7d6.  v0:= temp @kind object;
  #L3ae7d8.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ae7de.  v1:= temp @kind object;
  #L3ae7e0.  if v0 != v1 then goto L3ae808;
  #L3ae7e4.  call temp:= `getValue`(v4) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ae7ea.  v4:= temp;
  #L3ae7ec.  call temp:= `getValue`(v3) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ae7f2.  v0:= temp;
  #L3ae7f4.  if v0 <= v4 then goto L3ae7fc;
  #L3ae7f8.  v4:= 1I;
  #L3ae7fa.  return v4;
  #L3ae7fc.  if v0 >= v4 then goto L3ae804;
  #L3ae800.  v4:= -1I;
  #L3ae802.  return v4;
  #L3ae804.  v4:= 0I;
  #L3ae806.  return v4;
  #L3ae808.  v0:= new `java.lang.ClassCastException`;
  #L3ae80c.  v1:= new `java.lang.StringBuilder`;
  #L3ae810.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ae816.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ae81c.  v2:= temp @kind object;
  #L3ae81e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ae824.  v2:= " cannot be compared to " @kind object;
  #L3ae828.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ae82e.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ae834.  v4:= temp @kind object;
  #L3ae836.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ae83c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ae842.  v4:= temp @kind object;
  #L3ae844.  call `<init>`(v0, v4) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ae84a.  throw v0;
}
procedure `boolean` `equals`(`org.joda.time.base.BaseSingleFieldPeriod` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ae5fc.  v0:= 1I;
  #L3ae5fe.  if v4 != v5 then goto L3ae604;
  #L3ae602.  return v0;
  #L3ae604.  v1:= instanceof @variable v5 @type ^`org.joda.time.ReadablePeriod` @kind boolean;
  #L3ae608.  v2:= 0I;
  #L3ae60a.  if v1 != 0 then goto L3ae610;
  #L3ae60e.  return v2;
  #L3ae610.  v5:= (`org.joda.time.ReadablePeriod`) v5 @kind object;
  #L3ae614.  call temp:= `getPeriodType`(v5) @signature `Lorg/joda/time/ReadablePeriod;.getPeriodType:()Lorg/joda/time/PeriodType;` @kind interface;
  #L3ae61a.  v1:= temp @kind object;
  #L3ae61c.  call temp:= `getPeriodType`(v4) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getPeriodType:()Lorg/joda/time/PeriodType;` @kind virtual;
  #L3ae622.  v3:= temp @kind object;
  #L3ae624.  if v1 != v3 then goto L3ae63e;
  #L3ae628.  call temp:= `getValue`(v5, v2) @signature `Lorg/joda/time/ReadablePeriod;.getValue:(I)I` @kind interface;
  #L3ae62e.  v5:= temp;
  #L3ae630.  call temp:= `getValue`(v4) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ae636.  v1:= temp;
  #L3ae638.  if v5 != v1 then goto L3ae63e;
  #L3ae63c.  goto L3ae640;
  #L3ae63e.  v0:= 0I;
  #L3ae640.  return v0;
}
procedure `int` `get`(`org.joda.time.base.BaseSingleFieldPeriod` v1 @kind this, `org.joda.time.DurationFieldType` v2 @kind object) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.get:(Lorg/joda/time/DurationFieldType;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ae85c.  call temp:= `getFieldType`(v1) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getFieldType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3ae862.  v0:= temp @kind object;
  #L3ae864.  if v2 != v0 then goto L3ae872;
  #L3ae868.  call temp:= `getValue`(v1) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ae86e.  v2:= temp;
  #L3ae870.  return v2;
  #L3ae872.  v2:= 0I;
  #L3ae874.  return v2;
}
procedure `org.joda.time.DurationFieldType` `getFieldType`() @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getFieldType:()Lorg/joda/time/DurationFieldType;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.joda.time.DurationFieldType` `getFieldType`(`org.joda.time.base.BaseSingleFieldPeriod` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getFieldType:(I)Lorg/joda/time/DurationFieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ae9ec.  if v2 != 0 then goto L3ae9fa;
  #L3ae9f0.  call temp:= `getFieldType`(v1) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getFieldType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3ae9f6.  v2:= temp @kind object;
  #L3ae9f8.  return v2 @kind object;
  #L3ae9fa.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3ae9fe.  call temp:= `valueOf`(v2) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L3aea04.  v2:= temp @kind object;
  #L3aea06.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3aea0c.  throw v0;
}
procedure `org.joda.time.PeriodType` `getPeriodType`() @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getPeriodType:()Lorg/joda/time/PeriodType;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getValue`(`org.joda.time.base.BaseSingleFieldPeriod` v1 @kind this) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3ae888.  v0:= v1.`org.joda.time.base.BaseSingleFieldPeriod.iPeriod` @type ^`int`;
  #L3ae88c.  return v0;
}
procedure `int` `getValue`(`org.joda.time.base.BaseSingleFieldPeriod` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ae8a0.  if v2 != 0 then goto L3ae8ae;
  #L3ae8a4.  call temp:= `getValue`(v1) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ae8aa.  v2:= temp;
  #L3ae8ac.  return v2;
  #L3ae8ae.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L3ae8b2.  call temp:= `valueOf`(v2) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L3ae8b8.  v2:= temp @kind object;
  #L3ae8ba.  call `<init>`(v0, v2) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ae8c0.  throw v0;
}
procedure `int` `hashCode`(`org.joda.time.base.BaseSingleFieldPeriod` v2 @kind this) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ae8d4.  call temp:= `getValue`(v2) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getValue:()I` @kind virtual;
  #L3ae8da.  v0:= temp;
  #L3ae8dc.  v1:= 459I;
  #L3ae8e0.  v1:= v1 + v0 @kind int;
  #L3ae8e2.  v1:= v1 * 27;
  #L3ae8e6.  call temp:= `getFieldType`(v2) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getFieldType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3ae8ec.  v0:= temp @kind object;
  #L3ae8ee.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3ae8f4.  v0:= temp;
  #L3ae8f6.  v1:= v1 + v0 @kind int;
  #L3ae8f8.  return v1;
}
procedure `boolean` `isSupported`(`org.joda.time.base.BaseSingleFieldPeriod` v1 @kind this, `org.joda.time.DurationFieldType` v2 @kind object) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.isSupported:(Lorg/joda/time/DurationFieldType;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ae654.  call temp:= `getFieldType`(v1) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.getFieldType:()Lorg/joda/time/DurationFieldType;` @kind virtual;
  #L3ae65a.  v0:= temp @kind object;
  #L3ae65c.  if v2 != v0 then goto L3ae664;
  #L3ae660.  v2:= 1I;
  #L3ae662.  goto L3ae666;
  #L3ae664.  v2:= 0I;
  #L3ae666.  return v2;
}
procedure `void` `setValue`(`org.joda.time.base.BaseSingleFieldPeriod` v0 @kind this, `int` v1 ) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.setValue:(I)V` @AccessFlag PROTECTED {
    temp;

  #L3aea80.  v0.`org.joda.time.base.BaseSingleFieldPeriod.iPeriod` @type ^`int` := v1;
  #L3aea84.  return @kind void;
}
procedure `int` `size`(`org.joda.time.base.BaseSingleFieldPeriod` v1 @kind this) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ae90c.  v0:= 1I;
  #L3ae90e.  return v0;
}
procedure `org.joda.time.MutablePeriod` `toMutablePeriod`(`org.joda.time.base.BaseSingleFieldPeriod` v1 @kind this) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.toMutablePeriod:()Lorg/joda/time/MutablePeriod;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aea20.  v0:= new `org.joda.time.MutablePeriod`;
  #L3aea24.  call `<init>`(v0) @signature `Lorg/joda/time/MutablePeriod;.<init>:()V` @kind direct;
  #L3aea2a.  call `add`(v0, v1) @signature `Lorg/joda/time/MutablePeriod;.add:(Lorg/joda/time/ReadablePeriod;)V` @kind virtual;
  #L3aea30.  return v0 @kind object;
}
procedure `org.joda.time.Period` `toPeriod`(`org.joda.time.base.BaseSingleFieldPeriod` v1 @kind this) @signature `Lorg/joda/time/base/BaseSingleFieldPeriod;.toPeriod:()Lorg/joda/time/Period;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3aea44.  v0:= `@@org.joda.time.Period.ZERO` @type ^`org.joda.time.Period` @kind object;
  #L3aea48.  call temp:= `withFields`(v0, v1) @signature `Lorg/joda/time/Period;.withFields:(Lorg/joda/time/ReadablePeriod;)Lorg/joda/time/Period;` @kind virtual;
  #L3aea4e.  v0:= temp @kind object;
  #L3aea50.  return v0 @kind object;
}
