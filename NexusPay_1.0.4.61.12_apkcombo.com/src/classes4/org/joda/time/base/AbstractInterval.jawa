record `org.joda.time.base.AbstractInterval` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.joda.time.ReadableInterval` @kind interface {
}
procedure `void` `<init>`(`org.joda.time.base.AbstractInterval` v0 @kind this) @signature `Lorg/joda/time/base/AbstractInterval;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3ac8ec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ac8f2.  return @kind void;
}
procedure `void` `checkInterval`(`org.joda.time.base.AbstractInterval` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/joda/time/base/AbstractInterval;.checkInterval:(JJ)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3ac904.  v0:= lcmp(v4, v2);
  #L3ac908.  if v0 < 0 then goto L3ac90e;
  #L3ac90c.  return @kind void;
  #L3ac90e.  v2:= new `java.lang.IllegalArgumentException`;
  #L3ac912.  v3:= "The end instant must be greater the start" @kind object;
  #L3ac916.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ac91c.  throw v2;
}
procedure `boolean` `contains`(`org.joda.time.base.AbstractInterval` v5 @kind this, `long` v6 ) @signature `Lorg/joda/time/base/AbstractInterval;.contains:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ac308.  call temp:= `getStartMillis`(v5) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac30e.  v0:= temp @kind wide;
  #L3ac310.  call temp:= `getEndMillis`(v5) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac316.  v2:= temp @kind wide;
  #L3ac318.  v4:= lcmp(v6, v0);
  #L3ac31c.  if v4 < 0 then goto L3ac32c;
  #L3ac320.  v0:= lcmp(v6, v2);
  #L3ac324.  if v0 >= 0 then goto L3ac32c;
  #L3ac328.  v6:= 1I;
  #L3ac32a.  goto L3ac32e;
  #L3ac32c.  v6:= 0I;
  #L3ac32e.  return v6;
}
procedure `boolean` `contains`(`org.joda.time.base.AbstractInterval` v2 @kind this, `org.joda.time.ReadableInstant` v3 @kind object) @signature `Lorg/joda/time/base/AbstractInterval;.contains:(Lorg/joda/time/ReadableInstant;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ac340.  if v3 != 0 then goto L3ac34e;
  #L3ac344.  call temp:= `containsNow`(v2) @signature `Lorg/joda/time/base/AbstractInterval;.containsNow:()Z` @kind virtual;
  #L3ac34a.  v3:= temp;
  #L3ac34c.  return v3;
  #L3ac34e.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac354.  v0:= temp @kind wide;
  #L3ac356.  call temp:= `contains`(v2, v0) @signature `Lorg/joda/time/base/AbstractInterval;.contains:(J)Z` @kind virtual;
  #L3ac35c.  v3:= temp;
  #L3ac35e.  return v3;
}
procedure `boolean` `contains`(`org.joda.time.base.AbstractInterval` v8 @kind this, `org.joda.time.ReadableInterval` v9 @kind object) @signature `Lorg/joda/time/base/AbstractInterval;.contains:(Lorg/joda/time/ReadableInterval;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3ac370.  if v9 != 0 then goto L3ac37e;
  #L3ac374.  call temp:= `containsNow`(v8) @signature `Lorg/joda/time/base/AbstractInterval;.containsNow:()Z` @kind virtual;
  #L3ac37a.  v9:= temp;
  #L3ac37c.  return v9;
  #L3ac37e.  call temp:= `getStartMillis`(v9) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac384.  v0:= temp @kind wide;
  #L3ac386.  call temp:= `getEndMillis`(v9) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac38c.  v2:= temp @kind wide;
  #L3ac38e.  call temp:= `getStartMillis`(v8) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac394.  v4:= temp @kind wide;
  #L3ac396.  call temp:= `getEndMillis`(v8) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac39c.  v6:= temp @kind wide;
  #L3ac39e.  v9:= lcmp(v4, v0);
  #L3ac3a2.  if v9 > 0 then goto L3ac3ba;
  #L3ac3a6.  v9:= lcmp(v0, v6);
  #L3ac3aa.  if v9 >= 0 then goto L3ac3ba;
  #L3ac3ae.  v9:= lcmp(v2, v6);
  #L3ac3b2.  if v9 > 0 then goto L3ac3ba;
  #L3ac3b6.  v9:= 1I;
  #L3ac3b8.  goto L3ac3bc;
  #L3ac3ba.  v9:= 0I;
  #L3ac3bc.  return v9;
}
procedure `boolean` `containsNow`(`org.joda.time.base.AbstractInterval` v2 @kind this) @signature `Lorg/joda/time/base/AbstractInterval;.containsNow:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ac3d0.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3ac3d6.  v0:= temp @kind wide;
  #L3ac3d8.  call temp:= `contains`(v2, v0) @signature `Lorg/joda/time/base/AbstractInterval;.contains:(J)Z` @kind virtual;
  #L3ac3de.  v0:= temp;
  #L3ac3e0.  return v0;
}
procedure `boolean` `equals`(`org.joda.time.base.AbstractInterval` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lorg/joda/time/base/AbstractInterval;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ac3f4.  v0:= 1I;
  #L3ac3f6.  if v7 != v8 then goto L3ac3fc;
  #L3ac3fa.  return v0;
  #L3ac3fc.  v1:= instanceof @variable v8 @type ^`org.joda.time.ReadableInterval` @kind boolean;
  #L3ac400.  v2:= 0I;
  #L3ac402.  if v1 != 0 then goto L3ac408;
  #L3ac406.  return v2;
  #L3ac408.  v8:= (`org.joda.time.ReadableInterval`) v8 @kind object;
  #L3ac40c.  call temp:= `getStartMillis`(v7) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac412.  v3:= temp @kind wide;
  #L3ac414.  call temp:= `getStartMillis`(v8) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac41a.  v5:= temp @kind wide;
  #L3ac41c.  v1:= lcmp(v3, v5);
  #L3ac420.  if v1 != 0 then goto L3ac45a;
  #L3ac424.  call temp:= `getEndMillis`(v7) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac42a.  v3:= temp @kind wide;
  #L3ac42c.  call temp:= `getEndMillis`(v8) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac432.  v5:= temp @kind wide;
  #L3ac434.  v1:= lcmp(v3, v5);
  #L3ac438.  if v1 != 0 then goto L3ac45a;
  #L3ac43c.  call temp:= `getChronology`(v7) @signature `Lorg/joda/time/ReadableInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac442.  v1:= temp @kind object;
  #L3ac444.  call temp:= `getChronology`(v8) @signature `Lorg/joda/time/ReadableInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac44a.  v8:= temp @kind object;
  #L3ac44c.  call temp:= `equals`(v1, v8) @signature `Lorg/joda/time/field/FieldUtils;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3ac452.  v8:= temp;
  #L3ac454.  if v8 == 0 then goto L3ac45a;
  #L3ac458.  goto L3ac45c;
  #L3ac45a.  v0:= 0I;
  #L3ac45c.  return v0;
}
procedure `org.joda.time.DateTime` `getEnd`(`org.joda.time.base.AbstractInterval` v4 @kind this) @signature `Lorg/joda/time/base/AbstractInterval;.getEnd:()Lorg/joda/time/DateTime;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ac77c.  v0:= new `org.joda.time.DateTime`;
  #L3ac780.  call temp:= `getEndMillis`(v4) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac786.  v1:= temp @kind wide;
  #L3ac788.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/ReadableInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac78e.  v3:= temp @kind object;
  #L3ac790.  call `<init>`(v0, v1, v3) @signature `Lorg/joda/time/DateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3ac796.  return v0 @kind object;
}
procedure `org.joda.time.DateTime` `getStart`(`org.joda.time.base.AbstractInterval` v4 @kind this) @signature `Lorg/joda/time/base/AbstractInterval;.getStart:()Lorg/joda/time/DateTime;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ac7a8.  v0:= new `org.joda.time.DateTime`;
  #L3ac7ac.  call temp:= `getStartMillis`(v4) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac7b2.  v1:= temp @kind wide;
  #L3ac7b4.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/ReadableInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac7ba.  v3:= temp @kind object;
  #L3ac7bc.  call `<init>`(v0, v1, v3) @signature `Lorg/joda/time/DateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3ac7c2.  return v0 @kind object;
}
procedure `int` `hashCode`(`org.joda.time.base.AbstractInterval` v7 @kind this) @signature `Lorg/joda/time/base/AbstractInterval;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ac68c.  call temp:= `getStartMillis`(v7) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac692.  v0:= temp @kind wide;
  #L3ac694.  call temp:= `getEndMillis`(v7) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac69a.  v2:= temp @kind wide;
  #L3ac69c.  v4:= 32I;
  #L3ac6a0.  v5:= v0 ^>> v4 @kind long;
  #L3ac6a4.  v0:= v0 ^~ v5 @kind long;
  #L3ac6a6.  v1:= (`int`) v0 @kind l2i;
  #L3ac6a8.  v0:= 3007I;
  #L3ac6ac.  v0:= v0 + v1 @kind int;
  #L3ac6ae.  v0:= v0 * 31;
  #L3ac6b2.  v4:= v2 ^>> v4 @kind long;
  #L3ac6b6.  v1:= v2 ^~ v4 @kind long;
  #L3ac6ba.  v2:= (`int`) v1 @kind l2i;
  #L3ac6bc.  v0:= v0 + v2 @kind int;
  #L3ac6be.  v0:= v0 * 31;
  #L3ac6c2.  call temp:= `getChronology`(v7) @signature `Lorg/joda/time/ReadableInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac6c8.  v1:= temp @kind object;
  #L3ac6ca.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3ac6d0.  v1:= temp;
  #L3ac6d2.  v0:= v0 + v1 @kind int;
  #L3ac6d4.  return v0;
}
procedure `boolean` `isAfter`(`org.joda.time.base.AbstractInterval` v3 @kind this, `long` v4 ) @signature `Lorg/joda/time/base/AbstractInterval;.isAfter:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ac470.  call temp:= `getStartMillis`(v3) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac476.  v0:= temp @kind wide;
  #L3ac478.  v2:= lcmp(v0, v4);
  #L3ac47c.  if v2 <= 0 then goto L3ac484;
  #L3ac480.  v4:= 1I;
  #L3ac482.  goto L3ac486;
  #L3ac484.  v4:= 0I;
  #L3ac486.  return v4;
}
procedure `boolean` `isAfter`(`org.joda.time.base.AbstractInterval` v2 @kind this, `org.joda.time.ReadableInstant` v3 @kind object) @signature `Lorg/joda/time/base/AbstractInterval;.isAfter:(Lorg/joda/time/ReadableInstant;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ac498.  if v3 != 0 then goto L3ac4a6;
  #L3ac49c.  call temp:= `isAfterNow`(v2) @signature `Lorg/joda/time/base/AbstractInterval;.isAfterNow:()Z` @kind virtual;
  #L3ac4a2.  v3:= temp;
  #L3ac4a4.  return v3;
  #L3ac4a6.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac4ac.  v0:= temp @kind wide;
  #L3ac4ae.  call temp:= `isAfter`(v2, v0) @signature `Lorg/joda/time/base/AbstractInterval;.isAfter:(J)Z` @kind virtual;
  #L3ac4b4.  v3:= temp;
  #L3ac4b6.  return v3;
}
procedure `boolean` `isAfter`(`org.joda.time.base.AbstractInterval` v4 @kind this, `org.joda.time.ReadableInterval` v5 @kind object) @signature `Lorg/joda/time/base/AbstractInterval;.isAfter:(Lorg/joda/time/ReadableInterval;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ac4c8.  if v5 != 0 then goto L3ac4d6;
  #L3ac4cc.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3ac4d2.  v0:= temp @kind wide;
  #L3ac4d4.  goto L3ac4de;
  #L3ac4d6.  call temp:= `getEndMillis`(v5) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac4dc.  v0:= temp @kind wide;
  #L3ac4de.  call temp:= `getStartMillis`(v4) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac4e4.  v2:= temp @kind wide;
  #L3ac4e6.  v5:= lcmp(v2, v0);
  #L3ac4ea.  if v5 < 0 then goto L3ac4f2;
  #L3ac4ee.  v5:= 1I;
  #L3ac4f0.  goto L3ac4f4;
  #L3ac4f2.  v5:= 0I;
  #L3ac4f4.  return v5;
}
procedure `boolean` `isAfterNow`(`org.joda.time.base.AbstractInterval` v2 @kind this) @signature `Lorg/joda/time/base/AbstractInterval;.isAfterNow:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ac508.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3ac50e.  v0:= temp @kind wide;
  #L3ac510.  call temp:= `isAfter`(v2, v0) @signature `Lorg/joda/time/base/AbstractInterval;.isAfter:(J)Z` @kind virtual;
  #L3ac516.  v0:= temp;
  #L3ac518.  return v0;
}
procedure `boolean` `isBefore`(`org.joda.time.base.AbstractInterval` v3 @kind this, `long` v4 ) @signature `Lorg/joda/time/base/AbstractInterval;.isBefore:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ac52c.  call temp:= `getEndMillis`(v3) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac532.  v0:= temp @kind wide;
  #L3ac534.  v2:= lcmp(v0, v4);
  #L3ac538.  if v2 > 0 then goto L3ac540;
  #L3ac53c.  v4:= 1I;
  #L3ac53e.  goto L3ac542;
  #L3ac540.  v4:= 0I;
  #L3ac542.  return v4;
}
procedure `boolean` `isBefore`(`org.joda.time.base.AbstractInterval` v2 @kind this, `org.joda.time.ReadableInstant` v3 @kind object) @signature `Lorg/joda/time/base/AbstractInterval;.isBefore:(Lorg/joda/time/ReadableInstant;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ac554.  if v3 != 0 then goto L3ac562;
  #L3ac558.  call temp:= `isBeforeNow`(v2) @signature `Lorg/joda/time/base/AbstractInterval;.isBeforeNow:()Z` @kind virtual;
  #L3ac55e.  v3:= temp;
  #L3ac560.  return v3;
  #L3ac562.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableInstant;.getMillis:()J` @kind interface;
  #L3ac568.  v0:= temp @kind wide;
  #L3ac56a.  call temp:= `isBefore`(v2, v0) @signature `Lorg/joda/time/base/AbstractInterval;.isBefore:(J)Z` @kind virtual;
  #L3ac570.  v3:= temp;
  #L3ac572.  return v3;
}
procedure `boolean` `isBefore`(`org.joda.time.base.AbstractInterval` v2 @kind this, `org.joda.time.ReadableInterval` v3 @kind object) @signature `Lorg/joda/time/base/AbstractInterval;.isBefore:(Lorg/joda/time/ReadableInterval;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ac584.  if v3 != 0 then goto L3ac592;
  #L3ac588.  call temp:= `isBeforeNow`(v2) @signature `Lorg/joda/time/base/AbstractInterval;.isBeforeNow:()Z` @kind virtual;
  #L3ac58e.  v3:= temp;
  #L3ac590.  return v3;
  #L3ac592.  call temp:= `getStartMillis`(v3) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac598.  v0:= temp @kind wide;
  #L3ac59a.  call temp:= `isBefore`(v2, v0) @signature `Lorg/joda/time/base/AbstractInterval;.isBefore:(J)Z` @kind virtual;
  #L3ac5a0.  v3:= temp;
  #L3ac5a2.  return v3;
}
procedure `boolean` `isBeforeNow`(`org.joda.time.base.AbstractInterval` v2 @kind this) @signature `Lorg/joda/time/base/AbstractInterval;.isBeforeNow:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ac5b4.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3ac5ba.  v0:= temp @kind wide;
  #L3ac5bc.  call temp:= `isBefore`(v2, v0) @signature `Lorg/joda/time/base/AbstractInterval;.isBefore:(J)Z` @kind virtual;
  #L3ac5c2.  v0:= temp;
  #L3ac5c4.  return v0;
}
procedure `boolean` `isEqual`(`org.joda.time.base.AbstractInterval` v5 @kind this, `org.joda.time.ReadableInterval` v6 @kind object) @signature `Lorg/joda/time/base/AbstractInterval;.isEqual:(Lorg/joda/time/ReadableInterval;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ac5d8.  call temp:= `getStartMillis`(v5) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac5de.  v0:= temp @kind wide;
  #L3ac5e0.  call temp:= `getStartMillis`(v6) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac5e6.  v2:= temp @kind wide;
  #L3ac5e8.  v4:= lcmp(v0, v2);
  #L3ac5ec.  if v4 != 0 then goto L3ac60c;
  #L3ac5f0.  call temp:= `getEndMillis`(v5) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac5f6.  v0:= temp @kind wide;
  #L3ac5f8.  call temp:= `getEndMillis`(v6) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac5fe.  v2:= temp @kind wide;
  #L3ac600.  v6:= lcmp(v0, v2);
  #L3ac604.  if v6 != 0 then goto L3ac60c;
  #L3ac608.  v6:= 1I;
  #L3ac60a.  goto L3ac60e;
  #L3ac60c.  v6:= 0I;
  #L3ac60e.  return v6;
}
procedure `boolean` `overlaps`(`org.joda.time.base.AbstractInterval` v10 @kind this, `org.joda.time.ReadableInterval` v11 @kind object) @signature `Lorg/joda/time/base/AbstractInterval;.overlaps:(Lorg/joda/time/ReadableInterval;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3ac620.  call temp:= `getStartMillis`(v10) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac626.  v0:= temp @kind wide;
  #L3ac628.  call temp:= `getEndMillis`(v10) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac62e.  v2:= temp @kind wide;
  #L3ac630.  v4:= 1I;
  #L3ac632.  v5:= 0I;
  #L3ac634.  if v11 != 0 then goto L3ac656;
  #L3ac638.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3ac63e.  v6:= temp @kind wide;
  #L3ac640.  v11:= lcmp(v0, v6);
  #L3ac644.  if v11 >= 0 then goto L3ac652;
  #L3ac648.  v11:= lcmp(v6, v2);
  #L3ac64c.  if v11 >= 0 then goto L3ac652;
  #L3ac650.  goto L3ac654;
  #L3ac652.  v4:= 0I;
  #L3ac654.  return v4;
  #L3ac656.  call temp:= `getStartMillis`(v11) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac65c.  v6:= temp @kind wide;
  #L3ac65e.  call temp:= `getEndMillis`(v11) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac664.  v8:= temp @kind wide;
  #L3ac666.  v11:= lcmp(v0, v8);
  #L3ac66a.  if v11 >= 0 then goto L3ac678;
  #L3ac66e.  v11:= lcmp(v6, v2);
  #L3ac672.  if v11 >= 0 then goto L3ac678;
  #L3ac676.  goto L3ac67a;
  #L3ac678.  v4:= 0I;
  #L3ac67a.  return v4;
}
procedure `org.joda.time.Duration` `toDuration`(`org.joda.time.base.AbstractInterval` v5 @kind this) @signature `Lorg/joda/time/base/AbstractInterval;.toDuration:()Lorg/joda/time/Duration;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ac7d4.  call temp:= `toDurationMillis`(v5) @signature `Lorg/joda/time/base/AbstractInterval;.toDurationMillis:()J` @kind virtual;
  #L3ac7da.  v0:= temp @kind wide;
  #L3ac7dc.  v2:= 0L;
  #L3ac7e0.  v4:= lcmp(v0, v2);
  #L3ac7e4.  if v4 != 0 then goto L3ac7ee;
  #L3ac7e8.  v0:= `@@org.joda.time.Duration.ZERO` @type ^`org.joda.time.Duration` @kind object;
  #L3ac7ec.  return v0 @kind object;
  #L3ac7ee.  v2:= new `org.joda.time.Duration`;
  #L3ac7f2.  call `<init>`(v2, v0) @signature `Lorg/joda/time/Duration;.<init>:(J)V` @kind direct;
  #L3ac7f8.  return v2 @kind object;
}
procedure `long` `toDurationMillis`(`org.joda.time.base.AbstractInterval` v4 @kind this) @signature `Lorg/joda/time/base/AbstractInterval;.toDurationMillis:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ac750.  call temp:= `getEndMillis`(v4) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac756.  v0:= temp @kind wide;
  #L3ac758.  call temp:= `getStartMillis`(v4) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac75e.  v2:= temp @kind wide;
  #L3ac760.  call temp:= `safeSubtract`(v0, v2) @signature `Lorg/joda/time/field/FieldUtils;.safeSubtract:(JJ)J` @kind static;
  #L3ac766.  v0:= temp @kind wide;
  #L3ac768.  return v0 @kind wide;
}
procedure `org.joda.time.Interval` `toInterval`(`org.joda.time.base.AbstractInterval` v7 @kind this) @signature `Lorg/joda/time/base/AbstractInterval;.toInterval:()Lorg/joda/time/Interval;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ac80c.  v6:= new `org.joda.time.Interval`;
  #L3ac810.  call temp:= `getStartMillis`(v7) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac816.  v1:= temp @kind wide;
  #L3ac818.  call temp:= `getEndMillis`(v7) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac81e.  v3:= temp @kind wide;
  #L3ac820.  call temp:= `getChronology`(v7) @signature `Lorg/joda/time/ReadableInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac826.  v5:= temp @kind object;
  #L3ac828.  v0:= v6 @kind object;
  #L3ac82a.  call `<init>`(v0, v1, v3, v5) @signature `Lorg/joda/time/Interval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L3ac830.  return v6 @kind object;
}
procedure `org.joda.time.MutableInterval` `toMutableInterval`(`org.joda.time.base.AbstractInterval` v7 @kind this) @signature `Lorg/joda/time/base/AbstractInterval;.toMutableInterval:()Lorg/joda/time/MutableInterval;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ac844.  v6:= new `org.joda.time.MutableInterval`;
  #L3ac848.  call temp:= `getStartMillis`(v7) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac84e.  v1:= temp @kind wide;
  #L3ac850.  call temp:= `getEndMillis`(v7) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac856.  v3:= temp @kind wide;
  #L3ac858.  call temp:= `getChronology`(v7) @signature `Lorg/joda/time/ReadableInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac85e.  v5:= temp @kind object;
  #L3ac860.  v0:= v6 @kind object;
  #L3ac862.  call `<init>`(v0, v1, v3, v5) @signature `Lorg/joda/time/MutableInterval;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L3ac868.  return v6 @kind object;
}
procedure `org.joda.time.Period` `toPeriod`(`org.joda.time.base.AbstractInterval` v7 @kind this) @signature `Lorg/joda/time/base/AbstractInterval;.toPeriod:()Lorg/joda/time/Period;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ac87c.  v6:= new `org.joda.time.Period`;
  #L3ac880.  call temp:= `getStartMillis`(v7) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac886.  v1:= temp @kind wide;
  #L3ac888.  call temp:= `getEndMillis`(v7) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac88e.  v3:= temp @kind wide;
  #L3ac890.  call temp:= `getChronology`(v7) @signature `Lorg/joda/time/ReadableInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac896.  v5:= temp @kind object;
  #L3ac898.  v0:= v6 @kind object;
  #L3ac89a.  call `<init>`(v0, v1, v3, v5) @signature `Lorg/joda/time/Period;.<init>:(JJLorg/joda/time/Chronology;)V` @kind direct;
  #L3ac8a0.  return v6 @kind object;
}
procedure `org.joda.time.Period` `toPeriod`(`org.joda.time.base.AbstractInterval` v8 @kind this, `org.joda.time.PeriodType` v9 @kind object) @signature `Lorg/joda/time/base/AbstractInterval;.toPeriod:(Lorg/joda/time/PeriodType;)Lorg/joda/time/Period;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3ac8b4.  v7:= new `org.joda.time.Period`;
  #L3ac8b8.  call temp:= `getStartMillis`(v8) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac8be.  v1:= temp @kind wide;
  #L3ac8c0.  call temp:= `getEndMillis`(v8) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac8c6.  v3:= temp @kind wide;
  #L3ac8c8.  call temp:= `getChronology`(v8) @signature `Lorg/joda/time/ReadableInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac8ce.  v6:= temp @kind object;
  #L3ac8d0.  v0:= v7 @kind object;
  #L3ac8d2.  v5:= v9 @kind object;
  #L3ac8d4.  call `<init>`(v0, v1, v3, v5, v6) @signature `Lorg/joda/time/Period;.<init>:(JJLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V` @kind direct;
  #L3ac8da.  return v7 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.base.AbstractInterval` v4 @kind this) @signature `Lorg/joda/time/base/AbstractInterval;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ac6e8.  call temp:= `dateTime`() @signature `Lorg/joda/time/format/ISODateTimeFormat;.dateTime:()Lorg/joda/time/format/DateTimeFormatter;` @kind static;
  #L3ac6ee.  v0:= temp @kind object;
  #L3ac6f0.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/ReadableInterval;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ac6f6.  v1:= temp @kind object;
  #L3ac6f8.  call temp:= `withChronology`(v0, v1) @signature `Lorg/joda/time/format/DateTimeFormatter;.withChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/format/DateTimeFormatter;` @kind virtual;
  #L3ac6fe.  v0:= temp @kind object;
  #L3ac700.  v1:= new `java.lang.StringBuffer`;
  #L3ac704.  v2:= 48I;
  #L3ac708.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuffer;.<init>:(I)V` @kind direct;
  #L3ac70e.  call temp:= `getStartMillis`(v4) @signature `Lorg/joda/time/ReadableInterval;.getStartMillis:()J` @kind interface;
  #L3ac714.  v2:= temp @kind wide;
  #L3ac716.  call `printTo`(v0, v1, v2) @signature `Lorg/joda/time/format/DateTimeFormatter;.printTo:(Ljava/lang/StringBuffer;J)V` @kind virtual;
  #L3ac71c.  v2:= 47I;
  #L3ac720.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3ac726.  call temp:= `getEndMillis`(v4) @signature `Lorg/joda/time/ReadableInterval;.getEndMillis:()J` @kind interface;
  #L3ac72c.  v2:= temp @kind wide;
  #L3ac72e.  call `printTo`(v0, v1, v2) @signature `Lorg/joda/time/format/DateTimeFormatter;.printTo:(Ljava/lang/StringBuffer;J)V` @kind virtual;
  #L3ac734.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ac73a.  v0:= temp @kind object;
  #L3ac73c.  return v0 @kind object;
}
