record `org.joda.time.base.AbstractDuration` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.joda.time.ReadableDuration` @kind interface {
}
procedure `void` `<init>`(`org.joda.time.base.AbstractDuration` v0 @kind this) @signature `Lorg/joda/time/base/AbstractDuration;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3abd98.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3abd9e.  return @kind void;
}
procedure `int` `compareTo`(`org.joda.time.base.AbstractDuration` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/joda/time/base/AbstractDuration;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3abc10.  v1:= (`org.joda.time.ReadableDuration`) v1 @kind object;
  #L3abc14.  call temp:= `compareTo`(v0, v1) @signature `Lorg/joda/time/base/AbstractDuration;.compareTo:(Lorg/joda/time/ReadableDuration;)I` @kind virtual;
  #L3abc1a.  v1:= temp;
  #L3abc1c.  return v1;
}
procedure `int` `compareTo`(`org.joda.time.base.AbstractDuration` v4 @kind this, `org.joda.time.ReadableDuration` v5 @kind object) @signature `Lorg/joda/time/base/AbstractDuration;.compareTo:(Lorg/joda/time/ReadableDuration;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3abc30.  call temp:= `getMillis`(v4) @signature `Lorg/joda/time/ReadableDuration;.getMillis:()J` @kind interface;
  #L3abc36.  v0:= temp @kind wide;
  #L3abc38.  call temp:= `getMillis`(v5) @signature `Lorg/joda/time/ReadableDuration;.getMillis:()J` @kind interface;
  #L3abc3e.  v2:= temp @kind wide;
  #L3abc40.  v5:= lcmp(v0, v2);
  #L3abc44.  if v5 >= 0 then goto L3abc4c;
  #L3abc48.  v5:= -1I;
  #L3abc4a.  return v5;
  #L3abc4c.  if v5 <= 0 then goto L3abc54;
  #L3abc50.  v5:= 1I;
  #L3abc52.  return v5;
  #L3abc54.  v5:= 0I;
  #L3abc56.  return v5;
}
procedure `boolean` `equals`(`org.joda.time.base.AbstractDuration` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lorg/joda/time/base/AbstractDuration;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3abb44.  v0:= 1I;
  #L3abb46.  if v7 != v8 then goto L3abb4c;
  #L3abb4a.  return v0;
  #L3abb4c.  v1:= instanceof @variable v8 @type ^`org.joda.time.ReadableDuration` @kind boolean;
  #L3abb50.  v2:= 0I;
  #L3abb52.  if v1 != 0 then goto L3abb58;
  #L3abb56.  return v2;
  #L3abb58.  v8:= (`org.joda.time.ReadableDuration`) v8 @kind object;
  #L3abb5c.  call temp:= `getMillis`(v7) @signature `Lorg/joda/time/ReadableDuration;.getMillis:()J` @kind interface;
  #L3abb62.  v3:= temp @kind wide;
  #L3abb64.  call temp:= `getMillis`(v8) @signature `Lorg/joda/time/ReadableDuration;.getMillis:()J` @kind interface;
  #L3abb6a.  v5:= temp @kind wide;
  #L3abb6c.  v8:= lcmp(v3, v5);
  #L3abb70.  if v8 != 0 then goto L3abb76;
  #L3abb74.  goto L3abb78;
  #L3abb76.  v0:= 0I;
  #L3abb78.  return v0;
}
procedure `int` `hashCode`(`org.joda.time.base.AbstractDuration` v4 @kind this) @signature `Lorg/joda/time/base/AbstractDuration;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3abc68.  call temp:= `getMillis`(v4) @signature `Lorg/joda/time/ReadableDuration;.getMillis:()J` @kind interface;
  #L3abc6e.  v0:= temp @kind wide;
  #L3abc70.  v2:= 32I;
  #L3abc74.  v2:= v0 ^>> v2 @kind long;
  #L3abc78.  v0:= v0 ^~ v2 @kind long;
  #L3abc7a.  v1:= (`int`) v0 @kind l2i;
  #L3abc7c.  return v1;
}
procedure `boolean` `isEqual`(`org.joda.time.base.AbstractDuration` v0 @kind this, `org.joda.time.ReadableDuration` v1 @kind object) @signature `Lorg/joda/time/base/AbstractDuration;.isEqual:(Lorg/joda/time/ReadableDuration;)Z` @AccessFlag PUBLIC {
    temp;

  #L3abb8c.  if v1 != 0 then goto L3abb94;
  #L3abb90.  v1:= `@@org.joda.time.Duration.ZERO` @type ^`org.joda.time.Duration` @kind object;
  #L3abb94.  call temp:= `compareTo`(v0, v1) @signature `Lorg/joda/time/base/AbstractDuration;.compareTo:(Lorg/joda/time/ReadableDuration;)I` @kind virtual;
  #L3abb9a.  v1:= temp;
  #L3abb9c.  if v1 != 0 then goto L3abba4;
  #L3abba0.  v1:= 1I;
  #L3abba2.  goto L3abba6;
  #L3abba4.  v1:= 0I;
  #L3abba6.  return v1;
}
procedure `boolean` `isLongerThan`(`org.joda.time.base.AbstractDuration` v0 @kind this, `org.joda.time.ReadableDuration` v1 @kind object) @signature `Lorg/joda/time/base/AbstractDuration;.isLongerThan:(Lorg/joda/time/ReadableDuration;)Z` @AccessFlag PUBLIC {
    temp;

  #L3abbb8.  if v1 != 0 then goto L3abbc0;
  #L3abbbc.  v1:= `@@org.joda.time.Duration.ZERO` @type ^`org.joda.time.Duration` @kind object;
  #L3abbc0.  call temp:= `compareTo`(v0, v1) @signature `Lorg/joda/time/base/AbstractDuration;.compareTo:(Lorg/joda/time/ReadableDuration;)I` @kind virtual;
  #L3abbc6.  v1:= temp;
  #L3abbc8.  if v1 <= 0 then goto L3abbd0;
  #L3abbcc.  v1:= 1I;
  #L3abbce.  goto L3abbd2;
  #L3abbd0.  v1:= 0I;
  #L3abbd2.  return v1;
}
procedure `boolean` `isShorterThan`(`org.joda.time.base.AbstractDuration` v0 @kind this, `org.joda.time.ReadableDuration` v1 @kind object) @signature `Lorg/joda/time/base/AbstractDuration;.isShorterThan:(Lorg/joda/time/ReadableDuration;)Z` @AccessFlag PUBLIC {
    temp;

  #L3abbe4.  if v1 != 0 then goto L3abbec;
  #L3abbe8.  v1:= `@@org.joda.time.Duration.ZERO` @type ^`org.joda.time.Duration` @kind object;
  #L3abbec.  call temp:= `compareTo`(v0, v1) @signature `Lorg/joda/time/base/AbstractDuration;.compareTo:(Lorg/joda/time/ReadableDuration;)I` @kind virtual;
  #L3abbf2.  v1:= temp;
  #L3abbf4.  if v1 >= 0 then goto L3abbfc;
  #L3abbf8.  v1:= 1I;
  #L3abbfa.  goto L3abbfe;
  #L3abbfc.  v1:= 0I;
  #L3abbfe.  return v1;
}
procedure `org.joda.time.Duration` `toDuration`(`org.joda.time.base.AbstractDuration` v3 @kind this) @signature `Lorg/joda/time/base/AbstractDuration;.toDuration:()Lorg/joda/time/Duration;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3abd50.  v0:= new `org.joda.time.Duration`;
  #L3abd54.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableDuration;.getMillis:()J` @kind interface;
  #L3abd5a.  v1:= temp @kind wide;
  #L3abd5c.  call `<init>`(v0, v1) @signature `Lorg/joda/time/Duration;.<init>:(J)V` @kind direct;
  #L3abd62.  return v0 @kind object;
}
procedure `org.joda.time.Period` `toPeriod`(`org.joda.time.base.AbstractDuration` v3 @kind this) @signature `Lorg/joda/time/base/AbstractDuration;.toPeriod:()Lorg/joda/time/Period;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3abd74.  v0:= new `org.joda.time.Period`;
  #L3abd78.  call temp:= `getMillis`(v3) @signature `Lorg/joda/time/ReadableDuration;.getMillis:()J` @kind interface;
  #L3abd7e.  v1:= temp @kind wide;
  #L3abd80.  call `<init>`(v0, v1) @signature `Lorg/joda/time/Period;.<init>:(J)V` @kind direct;
  #L3abd86.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`org.joda.time.base.AbstractDuration` v9 @kind this) @signature `Lorg/joda/time/base/AbstractDuration;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3abc90.  call temp:= `getMillis`(v9) @signature `Lorg/joda/time/ReadableDuration;.getMillis:()J` @kind interface;
  #L3abc96.  v0:= temp @kind wide;
  #L3abc98.  v2:= new `java.lang.StringBuffer`;
  #L3abc9c.  call `<init>`(v2) @signature `Ljava/lang/StringBuffer;.<init>:()V` @kind direct;
  #L3abca2.  v3:= "PT" @kind object;
  #L3abca6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3abcac.  v3:= 0L;
  #L3abcb0.  v5:= lcmp(v0, v3);
  #L3abcb4.  if v5 >= 0 then goto L3abcbc;
  #L3abcb8.  v3:= 1I;
  #L3abcba.  goto L3abcbe;
  #L3abcbc.  v3:= 0I;
  #L3abcbe.  call `appendUnpaddedInteger`(v2, v0) @signature `Lorg/joda/time/format/FormatUtils;.appendUnpaddedInteger:(Ljava/lang/StringBuffer;J)V` @kind static;
  #L3abcc4.  call temp:= `length`(v2) @signature `Ljava/lang/StringBuffer;.length:()I` @kind virtual;
  #L3abcca.  v4:= temp;
  #L3abccc.  if v3 == 0 then goto L3abcd4;
  #L3abcd0.  v5:= 7I;
  #L3abcd2.  goto L3abcd6;
  #L3abcd4.  v5:= 6I;
  #L3abcd6.  v6:= 3I;
  #L3abcd8.  if v4 >= v5 then goto L3abcf0;
  #L3abcdc.  if v3 == 0 then goto L3abce2;
  #L3abce0.  goto L3abce4;
  #L3abce2.  v6:= 2I;
  #L3abce4.  v4:= "0" @kind object;
  #L3abce8.  call temp:= `insert`(v2, v6, v4) @signature `Ljava/lang/StringBuffer;.insert:(ILjava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3abcee.  goto L3abcc4;
  #L3abcf0.  v3:= 1000L;
  #L3abcf4.  v7:= v0 / v3 @kind long;
  #L3abcf8.  v7:= v7 * v3 @kind long;
  #L3abcfc.  v3:= lcmp(v7, v0);
  #L3abd00.  if v3 != 0 then goto L3abd16;
  #L3abd04.  call temp:= `length`(v2) @signature `Ljava/lang/StringBuffer;.length:()I` @kind virtual;
  #L3abd0a.  v0:= temp;
  #L3abd0c.  v0:= v0 - v6 @kind int;
  #L3abd0e.  call `setLength`(v2, v0) @signature `Ljava/lang/StringBuffer;.setLength:(I)V` @kind virtual;
  #L3abd14.  goto L3abd2a;
  #L3abd16.  call temp:= `length`(v2) @signature `Ljava/lang/StringBuffer;.length:()I` @kind virtual;
  #L3abd1c.  v0:= temp;
  #L3abd1e.  v0:= v0 - v6 @kind int;
  #L3abd20.  v1:= "." @kind object;
  #L3abd24.  call temp:= `insert`(v2, v0, v1) @signature `Ljava/lang/StringBuffer;.insert:(ILjava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3abd2a.  v0:= 83I;
  #L3abd2e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3abd34.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3abd3a.  v0:= temp @kind object;
  #L3abd3c.  return v0 @kind object;
}
