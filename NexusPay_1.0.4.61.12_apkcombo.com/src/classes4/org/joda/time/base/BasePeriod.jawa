record `org.joda.time.base.BasePeriod` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.joda.time.base.AbstractPeriod` @kind class, `org.joda.time.ReadablePeriod` @kind interface, `java.io.Serializable` @kind interface {
  `org.joda.time.PeriodType` `org.joda.time.base.BasePeriod.iType` @AccessFlag PRIVATE_FINAL;
  `int`[] `org.joda.time.base.BasePeriod.iValues` @AccessFlag PRIVATE_FINAL;
}
global `org.joda.time.ReadablePeriod` `@@org.joda.time.base.BasePeriod.DUMMY_PERIOD` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.joda.time.base.BasePeriod.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/joda/time/base/BasePeriod;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3adf24.  v0:= new `org.joda.time.base.BasePeriod$1`;
  #L3adf28.  call `<init>`(v0) @signature `Lorg/joda/time/base/BasePeriod$1;.<init>:()V` @kind direct;
  #L3adf2e.  `@@org.joda.time.base.BasePeriod.DUMMY_PERIOD` @type ^`org.joda.time.ReadablePeriod` := v0 @kind object;
  #L3adf32.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePeriod` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 , `int` v5 , `int` v6 , `int` v7 , `int` v8 , `org.joda.time.PeriodType` v9 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.<init>:(IIIIIIIILorg/joda/time/PeriodType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3adf44.  call `<init>`(v0) @signature `Lorg/joda/time/base/AbstractPeriod;.<init>:()V` @kind direct;
  #L3adf4a.  call temp:= `checkPeriodType`(v0, v9) @signature `Lorg/joda/time/base/BasePeriod;.checkPeriodType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;` @kind virtual;
  #L3adf50.  v9:= temp @kind object;
  #L3adf52.  v0.`org.joda.time.base.BasePeriod.iType` @type ^`org.joda.time.PeriodType` := v9 @kind object;
  #L3adf56.  call temp:= `setPeriodInternal`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lorg/joda/time/base/BasePeriod;.setPeriodInternal:(IIIIIIII)[I` @kind direct;
  #L3adf5c.  v1:= temp @kind object;
  #L3adf5e.  v0.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] := v1 @kind object;
  #L3adf62.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePeriod` v2 @kind this, `long` v3 ) @signature `Lorg/joda/time/base/BasePeriod;.<init>:(J)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ae018.  call `<init>`(v2) @signature `Lorg/joda/time/base/AbstractPeriod;.<init>:()V` @kind direct;
  #L3ae01e.  call temp:= `standard`() @signature `Lorg/joda/time/PeriodType;.standard:()Lorg/joda/time/PeriodType;` @kind static;
  #L3ae024.  v0:= temp @kind object;
  #L3ae026.  v2.`org.joda.time.base.BasePeriod.iType` @type ^`org.joda.time.PeriodType` := v0 @kind object;
  #L3ae02a.  call temp:= `getInstanceUTC`() @signature `Lorg/joda/time/chrono/ISOChronology;.getInstanceUTC:()Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3ae030.  v0:= temp @kind object;
  #L3ae032.  v1:= `@@org.joda.time.base.BasePeriod.DUMMY_PERIOD` @type ^`org.joda.time.ReadablePeriod` @kind object;
  #L3ae036.  call temp:= `get`(v0, v1, v3) @signature `Lorg/joda/time/chrono/BaseChronology;.get:(Lorg/joda/time/ReadablePeriod;J)[I` @kind virtual;
  #L3ae03c.  v3:= temp @kind object;
  #L3ae03e.  v4:= 8I;
  #L3ae042.  v4:= new `int`[v4];
  #L3ae046.  v2.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] := v4 @kind object;
  #L3ae04a.  v0:= 0I;
  #L3ae04c.  v1:= 4I;
  #L3ae04e.  call `arraycopy`(v3, v0, v4, v1, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3ae054.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePeriod` v6 @kind this, `long` v7 , `long` v9 , `org.joda.time.PeriodType` v11 @kind object, `org.joda.time.Chronology` v12 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.<init>:(JJLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ae068.  call `<init>`(v6) @signature `Lorg/joda/time/base/AbstractPeriod;.<init>:()V` @kind direct;
  #L3ae06e.  call temp:= `checkPeriodType`(v6, v11) @signature `Lorg/joda/time/base/BasePeriod;.checkPeriodType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;` @kind virtual;
  #L3ae074.  v11:= temp @kind object;
  #L3ae076.  call temp:= `getChronology`(v12) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3ae07c.  v0:= temp @kind object;
  #L3ae07e.  v6.`org.joda.time.base.BasePeriod.iType` @type ^`org.joda.time.PeriodType` := v11 @kind object;
  #L3ae082.  v1:= v6 @kind object;
  #L3ae084.  v2:= v7 @kind wide;
  #L3ae086.  v4:= v9 @kind wide;
  #L3ae088.  call temp:= `get`(v0, v1, v2, v4) @signature `Lorg/joda/time/Chronology;.get:(Lorg/joda/time/ReadablePeriod;JJ)[I` @kind virtual;
  #L3ae08e.  v7:= temp @kind object;
  #L3ae090.  v6.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] := v7 @kind object;
  #L3ae094.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePeriod` v0 @kind this, `long` v1 , `org.joda.time.PeriodType` v3 @kind object, `org.joda.time.Chronology` v4 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.<init>:(JLorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3ae0a8.  call `<init>`(v0) @signature `Lorg/joda/time/base/AbstractPeriod;.<init>:()V` @kind direct;
  #L3ae0ae.  call temp:= `checkPeriodType`(v0, v3) @signature `Lorg/joda/time/base/BasePeriod;.checkPeriodType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;` @kind virtual;
  #L3ae0b4.  v3:= temp @kind object;
  #L3ae0b6.  call temp:= `getChronology`(v4) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3ae0bc.  v4:= temp @kind object;
  #L3ae0be.  v0.`org.joda.time.base.BasePeriod.iType` @type ^`org.joda.time.PeriodType` := v3 @kind object;
  #L3ae0c2.  call temp:= `get`(v4, v0, v1) @signature `Lorg/joda/time/Chronology;.get:(Lorg/joda/time/ReadablePeriod;J)[I` @kind virtual;
  #L3ae0c8.  v1:= temp @kind object;
  #L3ae0ca.  v0.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] := v1 @kind object;
  #L3ae0ce.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePeriod` v2 @kind this, `java.lang.Object` v3 @kind object, `org.joda.time.PeriodType` v4 @kind object, `org.joda.time.Chronology` v5 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.<init>:(Ljava/lang/Object;Lorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3adf94.  call `<init>`(v2) @signature `Lorg/joda/time/base/AbstractPeriod;.<init>:()V` @kind direct;
  #L3adf9a.  call temp:= `getInstance`() @signature `Lorg/joda/time/convert/ConverterManager;.getInstance:()Lorg/joda/time/convert/ConverterManager;` @kind static;
  #L3adfa0.  v0:= temp @kind object;
  #L3adfa2.  call temp:= `getPeriodConverter`(v0, v3) @signature `Lorg/joda/time/convert/ConverterManager;.getPeriodConverter:(Ljava/lang/Object;)Lorg/joda/time/convert/PeriodConverter;` @kind virtual;
  #L3adfa8.  v0:= temp @kind object;
  #L3adfaa.  if v4 != 0 then goto L3adfb6;
  #L3adfae.  call temp:= `getPeriodType`(v0, v3) @signature `Lorg/joda/time/convert/PeriodConverter;.getPeriodType:(Ljava/lang/Object;)Lorg/joda/time/PeriodType;` @kind interface;
  #L3adfb4.  v4:= temp @kind object;
  #L3adfb6.  call temp:= `checkPeriodType`(v2, v4) @signature `Lorg/joda/time/base/BasePeriod;.checkPeriodType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;` @kind virtual;
  #L3adfbc.  v4:= temp @kind object;
  #L3adfbe.  v2.`org.joda.time.base.BasePeriod.iType` @type ^`org.joda.time.PeriodType` := v4 @kind object;
  #L3adfc2.  v1:= instanceof @variable v2 @type ^`org.joda.time.ReadWritablePeriod` @kind boolean;
  #L3adfc6.  if v1 == 0 then goto L3adff0;
  #L3adfca.  call temp:= `size`(v2) @signature `Lorg/joda/time/base/AbstractPeriod;.size:()I` @kind virtual;
  #L3adfd0.  v4:= temp;
  #L3adfd2.  v4:= new `int`[v4];
  #L3adfd6.  v2.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] := v4 @kind object;
  #L3adfda.  call temp:= `getChronology`(v5) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3adfe0.  v4:= temp @kind object;
  #L3adfe2.  v5:= v2 @kind object;
  #L3adfe4.  v5:= (`org.joda.time.ReadWritablePeriod`) v5 @kind object;
  #L3adfe8.  call `setInto`(v0, v5, v3, v4) @signature `Lorg/joda/time/convert/PeriodConverter;.setInto:(Lorg/joda/time/ReadWritablePeriod;Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @kind interface;
  #L3adfee.  goto L3ae006;
  #L3adff0.  v0:= new `org.joda.time.MutablePeriod`;
  #L3adff4.  call `<init>`(v0, v3, v4, v5) @signature `Lorg/joda/time/MutablePeriod;.<init>:(Ljava/lang/Object;Lorg/joda/time/PeriodType;Lorg/joda/time/Chronology;)V` @kind direct;
  #L3adffa.  call temp:= `getValues`(v0) @signature `Lorg/joda/time/base/AbstractPeriod;.getValues:()[I` @kind virtual;
  #L3ae000.  v3:= temp @kind object;
  #L3ae002.  v2.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] := v3 @kind object;
  #L3ae006.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePeriod` v8 @kind this, `org.joda.time.ReadableDuration` v9 @kind object, `org.joda.time.ReadableInstant` v10 @kind object, `org.joda.time.PeriodType` v11 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.<init>:(Lorg/joda/time/ReadableDuration;Lorg/joda/time/ReadableInstant;Lorg/joda/time/PeriodType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3ae0e0.  call `<init>`(v8) @signature `Lorg/joda/time/base/AbstractPeriod;.<init>:()V` @kind direct;
  #L3ae0e6.  call temp:= `checkPeriodType`(v8, v11) @signature `Lorg/joda/time/base/BasePeriod;.checkPeriodType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;` @kind virtual;
  #L3ae0ec.  v11:= temp @kind object;
  #L3ae0ee.  call temp:= `getDurationMillis`(v9) @signature `Lorg/joda/time/DateTimeUtils;.getDurationMillis:(Lorg/joda/time/ReadableDuration;)J` @kind static;
  #L3ae0f4.  v0:= temp @kind wide;
  #L3ae0f6.  call temp:= `getInstantMillis`(v10) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3ae0fc.  v6:= temp @kind wide;
  #L3ae0fe.  call temp:= `safeSubtract`(v6, v0) @signature `Lorg/joda/time/field/FieldUtils;.safeSubtract:(JJ)J` @kind static;
  #L3ae104.  v4:= temp @kind wide;
  #L3ae106.  call temp:= `getInstantChronology`(v10) @signature `Lorg/joda/time/DateTimeUtils;.getInstantChronology:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;` @kind static;
  #L3ae10c.  v2:= temp @kind object;
  #L3ae10e.  v8.`org.joda.time.base.BasePeriod.iType` @type ^`org.joda.time.PeriodType` := v11 @kind object;
  #L3ae112.  v3:= v8 @kind object;
  #L3ae114.  call temp:= `get`(v2, v3, v4, v6) @signature `Lorg/joda/time/Chronology;.get:(Lorg/joda/time/ReadablePeriod;JJ)[I` @kind virtual;
  #L3ae11a.  v9:= temp @kind object;
  #L3ae11c.  v8.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] := v9 @kind object;
  #L3ae120.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePeriod` v6 @kind this, `org.joda.time.ReadableInstant` v7 @kind object, `org.joda.time.ReadableDuration` v8 @kind object, `org.joda.time.PeriodType` v9 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableDuration;Lorg/joda/time/PeriodType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ae134.  call `<init>`(v6) @signature `Lorg/joda/time/base/AbstractPeriod;.<init>:()V` @kind direct;
  #L3ae13a.  call temp:= `checkPeriodType`(v6, v9) @signature `Lorg/joda/time/base/BasePeriod;.checkPeriodType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;` @kind virtual;
  #L3ae140.  v9:= temp @kind object;
  #L3ae142.  call temp:= `getInstantMillis`(v7) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3ae148.  v2:= temp @kind wide;
  #L3ae14a.  call temp:= `getDurationMillis`(v8) @signature `Lorg/joda/time/DateTimeUtils;.getDurationMillis:(Lorg/joda/time/ReadableDuration;)J` @kind static;
  #L3ae150.  v0:= temp @kind wide;
  #L3ae152.  call temp:= `safeAdd`(v2, v0) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(JJ)J` @kind static;
  #L3ae158.  v4:= temp @kind wide;
  #L3ae15a.  call temp:= `getInstantChronology`(v7) @signature `Lorg/joda/time/DateTimeUtils;.getInstantChronology:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;` @kind static;
  #L3ae160.  v0:= temp @kind object;
  #L3ae162.  v6.`org.joda.time.base.BasePeriod.iType` @type ^`org.joda.time.PeriodType` := v9 @kind object;
  #L3ae166.  v1:= v6 @kind object;
  #L3ae168.  call temp:= `get`(v0, v1, v2, v4) @signature `Lorg/joda/time/Chronology;.get:(Lorg/joda/time/ReadablePeriod;JJ)[I` @kind virtual;
  #L3ae16e.  v7:= temp @kind object;
  #L3ae170.  v6.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] := v7 @kind object;
  #L3ae174.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePeriod` v6 @kind this, `org.joda.time.ReadableInstant` v7 @kind object, `org.joda.time.ReadableInstant` v8 @kind object, `org.joda.time.PeriodType` v9 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.<init>:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableInstant;Lorg/joda/time/PeriodType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3ae188.  call `<init>`(v6) @signature `Lorg/joda/time/base/AbstractPeriod;.<init>:()V` @kind direct;
  #L3ae18e.  call temp:= `checkPeriodType`(v6, v9) @signature `Lorg/joda/time/base/BasePeriod;.checkPeriodType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;` @kind virtual;
  #L3ae194.  v9:= temp @kind object;
  #L3ae196.  if v7 != 0 then goto L3ae1b4;
  #L3ae19a.  if v8 != 0 then goto L3ae1b4;
  #L3ae19e.  v6.`org.joda.time.base.BasePeriod.iType` @type ^`org.joda.time.PeriodType` := v9 @kind object;
  #L3ae1a2.  call temp:= `size`(v6) @signature `Lorg/joda/time/base/AbstractPeriod;.size:()I` @kind virtual;
  #L3ae1a8.  v7:= temp;
  #L3ae1aa.  v7:= new `int`[v7];
  #L3ae1ae.  v6.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] := v7 @kind object;
  #L3ae1b2.  goto L3ae1de;
  #L3ae1b4.  call temp:= `getInstantMillis`(v7) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3ae1ba.  v2:= temp @kind wide;
  #L3ae1bc.  call temp:= `getInstantMillis`(v8) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3ae1c2.  v4:= temp @kind wide;
  #L3ae1c4.  call temp:= `getIntervalChronology`(v7, v8) @signature `Lorg/joda/time/DateTimeUtils;.getIntervalChronology:(Lorg/joda/time/ReadableInstant;Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;` @kind static;
  #L3ae1ca.  v0:= temp @kind object;
  #L3ae1cc.  v6.`org.joda.time.base.BasePeriod.iType` @type ^`org.joda.time.PeriodType` := v9 @kind object;
  #L3ae1d0.  v1:= v6 @kind object;
  #L3ae1d2.  call temp:= `get`(v0, v1, v2, v4) @signature `Lorg/joda/time/Chronology;.get:(Lorg/joda/time/ReadablePeriod;JJ)[I` @kind virtual;
  #L3ae1d8.  v7:= temp @kind object;
  #L3ae1da.  v6.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] := v7 @kind object;
  #L3ae1de.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BasePeriod` v7 @kind this, `org.joda.time.ReadablePartial` v8 @kind object, `org.joda.time.ReadablePartial` v9 @kind object, `org.joda.time.PeriodType` v10 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.<init>:(Lorg/joda/time/ReadablePartial;Lorg/joda/time/ReadablePartial;Lorg/joda/time/PeriodType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ae1f0.  call `<init>`(v7) @signature `Lorg/joda/time/base/AbstractPeriod;.<init>:()V` @kind direct;
  #L3ae1f6.  if v8 == 0 then goto L3ae328;
  #L3ae1fa.  if v9 == 0 then goto L3ae328;
  #L3ae1fe.  v0:= instanceof @variable v8 @type ^`org.joda.time.base.BaseLocal` @kind boolean;
  #L3ae202.  if v0 == 0 then goto L3ae268;
  #L3ae206.  v0:= instanceof @variable v9 @type ^`org.joda.time.base.BaseLocal` @kind boolean;
  #L3ae20a.  if v0 == 0 then goto L3ae268;
  #L3ae20e.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ae214.  v0:= temp @kind object;
  #L3ae216.  call temp:= `getClass`(v9) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ae21c.  v1:= temp @kind object;
  #L3ae21e.  if v0 != v1 then goto L3ae268;
  #L3ae222.  call temp:= `checkPeriodType`(v7, v10) @signature `Lorg/joda/time/base/BasePeriod;.checkPeriodType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;` @kind virtual;
  #L3ae228.  v10:= temp @kind object;
  #L3ae22a.  v0:= v8 @kind object;
  #L3ae22c.  v0:= (`org.joda.time.base.BaseLocal`) v0 @kind object;
  #L3ae230.  call temp:= `getLocalMillis`(v0) @signature `Lorg/joda/time/base/BaseLocal;.getLocalMillis:()J` @kind virtual;
  #L3ae236.  v3:= temp @kind wide;
  #L3ae238.  v9:= (`org.joda.time.base.BaseLocal`) v9 @kind object;
  #L3ae23c.  call temp:= `getLocalMillis`(v9) @signature `Lorg/joda/time/base/BaseLocal;.getLocalMillis:()J` @kind virtual;
  #L3ae242.  v5:= temp @kind wide;
  #L3ae244.  call temp:= `getChronology`(v8) @signature `Lorg/joda/time/ReadablePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ae24a.  v8:= temp @kind object;
  #L3ae24c.  call temp:= `getChronology`(v8) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3ae252.  v1:= temp @kind object;
  #L3ae254.  v7.`org.joda.time.base.BasePeriod.iType` @type ^`org.joda.time.PeriodType` := v10 @kind object;
  #L3ae258.  v2:= v7 @kind object;
  #L3ae25a.  call temp:= `get`(v1, v2, v3, v5) @signature `Lorg/joda/time/Chronology;.get:(Lorg/joda/time/ReadablePeriod;JJ)[I` @kind virtual;
  #L3ae260.  v8:= temp @kind object;
  #L3ae262.  v7.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] := v8 @kind object;
  #L3ae266.  goto L3ae30a;
  #L3ae268.  call temp:= `size`(v8) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3ae26e.  v0:= temp;
  #L3ae270.  call temp:= `size`(v9) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3ae276.  v1:= temp;
  #L3ae278.  v2:= "ReadablePartial objects must have the same set of fields" @kind object;
  #L3ae27c.  if v0 != v1 then goto L3ae31c;
  #L3ae280.  v0:= 0I;
  #L3ae282.  call temp:= `size`(v8) @signature `Lorg/joda/time/ReadablePartial;.size:()I` @kind interface;
  #L3ae288.  v1:= temp;
  #L3ae28a.  if v0 >= v1 then goto L3ae2b4;
  #L3ae28e.  call temp:= `getFieldType`(v8, v0) @signature `Lorg/joda/time/ReadablePartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind interface;
  #L3ae294.  v3:= temp @kind object;
  #L3ae296.  call temp:= `getFieldType`(v9, v0) @signature `Lorg/joda/time/ReadablePartial;.getFieldType:(I)Lorg/joda/time/DateTimeFieldType;` @kind interface;
  #L3ae29c.  v4:= temp @kind object;
  #L3ae29e.  if v3 != v4 then goto L3ae2a8;
  #L3ae2a2.  v0:= v0 + 1;
  #L3ae2a6.  goto L3ae28a;
  #L3ae2a8.  v8:= new `java.lang.IllegalArgumentException`;
  #L3ae2ac.  call `<init>`(v8, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ae2b2.  throw v8;
  #L3ae2b4.  call temp:= `isContiguous`(v8) @signature `Lorg/joda/time/DateTimeUtils;.isContiguous:(Lorg/joda/time/ReadablePartial;)Z` @kind static;
  #L3ae2ba.  v0:= temp;
  #L3ae2bc.  if v0 == 0 then goto L3ae30c;
  #L3ae2c0.  call temp:= `checkPeriodType`(v7, v10) @signature `Lorg/joda/time/base/BasePeriod;.checkPeriodType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;` @kind virtual;
  #L3ae2c6.  v10:= temp @kind object;
  #L3ae2c8.  v7.`org.joda.time.base.BasePeriod.iType` @type ^`org.joda.time.PeriodType` := v10 @kind object;
  #L3ae2cc.  call temp:= `getChronology`(v8) @signature `Lorg/joda/time/ReadablePartial;.getChronology:()Lorg/joda/time/Chronology;` @kind interface;
  #L3ae2d2.  v10:= temp @kind object;
  #L3ae2d4.  call temp:= `getChronology`(v10) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3ae2da.  v10:= temp @kind object;
  #L3ae2dc.  call temp:= `withUTC`(v10) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3ae2e2.  v0:= temp @kind object;
  #L3ae2e4.  v1:= 0L;
  #L3ae2e8.  call temp:= `set`(v0, v8, v1) @signature `Lorg/joda/time/Chronology;.set:(Lorg/joda/time/ReadablePartial;J)J` @kind virtual;
  #L3ae2ee.  v3:= temp @kind wide;
  #L3ae2f0.  call temp:= `set`(v0, v9, v1) @signature `Lorg/joda/time/Chronology;.set:(Lorg/joda/time/ReadablePartial;J)J` @kind virtual;
  #L3ae2f6.  v8:= temp @kind wide;
  #L3ae2f8.  v1:= v7 @kind object;
  #L3ae2fa.  v2:= v3 @kind wide;
  #L3ae2fc.  v4:= v8 @kind wide;
  #L3ae2fe.  call temp:= `get`(v0, v1, v2, v4) @signature `Lorg/joda/time/Chronology;.get:(Lorg/joda/time/ReadablePeriod;JJ)[I` @kind virtual;
  #L3ae304.  v8:= temp @kind object;
  #L3ae306.  v7.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] := v8 @kind object;
  #L3ae30a.  return @kind void;
  #L3ae30c.  v8:= new `java.lang.IllegalArgumentException`;
  #L3ae310.  v9:= "ReadablePartial objects must be contiguous" @kind object;
  #L3ae314.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ae31a.  throw v8;
  #L3ae31c.  v8:= new `java.lang.IllegalArgumentException`;
  #L3ae320.  call `<init>`(v8, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ae326.  throw v8;
  #L3ae328.  v8:= new `java.lang.IllegalArgumentException`;
  #L3ae32c.  v9:= "ReadablePartial objects must not be null" @kind object;
  #L3ae330.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ae336.  throw v8;
}
procedure `void` `<init>`(`org.joda.time.base.BasePeriod` v0 @kind this, `int`[] v1 @kind object, `org.joda.time.PeriodType` v2 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.<init>:([ILorg/joda/time/PeriodType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3adf74.  call `<init>`(v0) @signature `Lorg/joda/time/base/AbstractPeriod;.<init>:()V` @kind direct;
  #L3adf7a.  v0.`org.joda.time.base.BasePeriod.iType` @type ^`org.joda.time.PeriodType` := v2 @kind object;
  #L3adf7e.  v0.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] := v1 @kind object;
  #L3adf82.  return @kind void;
}
procedure `void` `checkAndUpdate`(`org.joda.time.base.BasePeriod` v2 @kind this, `org.joda.time.DurationFieldType` v3 @kind object, `int`[] v4 @kind object, `int` v5 ) @signature `Lorg/joda/time/base/BasePeriod;.checkAndUpdate:(Lorg/joda/time/DurationFieldType;[II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3ae404.  call temp:= `indexOf`(v2, v3) @signature `Lorg/joda/time/base/AbstractPeriod;.indexOf:(Lorg/joda/time/DurationFieldType;)I` @kind virtual;
  #L3ae40a.  v0:= temp;
  #L3ae40c.  v1:= -1I;
  #L3ae40e.  if v0 != v1 then goto L3ae458;
  #L3ae412.  if v5 != 0 then goto L3ae418;
  #L3ae416.  goto L3ae45c;
  #L3ae418.  v4:= new `java.lang.IllegalArgumentException`;
  #L3ae41c.  v5:= new `java.lang.StringBuilder`;
  #L3ae420.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ae426.  v0:= "Period does not support field '" @kind object;
  #L3ae42a.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ae430.  call temp:= `getName`(v3) @signature `Lorg/joda/time/DurationFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3ae436.  v3:= temp @kind object;
  #L3ae438.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ae43e.  v3:= "'" @kind object;
  #L3ae442.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ae448.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ae44e.  v3:= temp @kind object;
  #L3ae450.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ae456.  throw v4;
  #L3ae458.  v4[v0]:= v5;
  #L3ae45c.  return @kind void;
}
procedure `void` `setPeriodInternal`(`org.joda.time.base.BasePeriod` v5 @kind this, `org.joda.time.ReadablePeriod` v6 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.setPeriodInternal:(Lorg/joda/time/ReadablePeriod;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ae570.  call temp:= `size`(v5) @signature `Lorg/joda/time/base/AbstractPeriod;.size:()I` @kind virtual;
  #L3ae576.  v0:= temp;
  #L3ae578.  v0:= new `int`[v0];
  #L3ae57c.  call temp:= `size`(v6) @signature `Lorg/joda/time/ReadablePeriod;.size:()I` @kind interface;
  #L3ae582.  v1:= temp;
  #L3ae584.  v2:= 0I;
  #L3ae586.  if v2 >= v1 then goto L3ae5a6;
  #L3ae58a.  call temp:= `getFieldType`(v6, v2) @signature `Lorg/joda/time/ReadablePeriod;.getFieldType:(I)Lorg/joda/time/DurationFieldType;` @kind interface;
  #L3ae590.  v3:= temp @kind object;
  #L3ae592.  call temp:= `getValue`(v6, v2) @signature `Lorg/joda/time/ReadablePeriod;.getValue:(I)I` @kind interface;
  #L3ae598.  v4:= temp;
  #L3ae59a.  call `checkAndUpdate`(v5, v3, v0, v4) @signature `Lorg/joda/time/base/BasePeriod;.checkAndUpdate:(Lorg/joda/time/DurationFieldType;[II)V` @kind direct;
  #L3ae5a0.  v2:= v2 + 1;
  #L3ae5a4.  goto L3ae586;
  #L3ae5a6.  call `setValues`(v5, v0) @signature `Lorg/joda/time/base/BasePeriod;.setValues:([I)V` @kind virtual;
  #L3ae5ac.  return @kind void;
}
procedure `int`[] `setPeriodInternal`(`org.joda.time.base.BasePeriod` v2 @kind this, `int` v3 , `int` v4 , `int` v5 , `int` v6 , `int` v7 , `int` v8 , `int` v9 , `int` v10 ) @signature `Lorg/joda/time/base/BasePeriod;.setPeriodInternal:(IIIIIIII)[I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3addf0.  call temp:= `size`(v2) @signature `Lorg/joda/time/base/AbstractPeriod;.size:()I` @kind virtual;
  #L3addf6.  v0:= temp;
  #L3addf8.  v0:= new `int`[v0];
  #L3addfc.  call temp:= `years`() @signature `Lorg/joda/time/DurationFieldType;.years:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3ade02.  v1:= temp @kind object;
  #L3ade04.  call `checkAndUpdate`(v2, v1, v0, v3) @signature `Lorg/joda/time/base/BasePeriod;.checkAndUpdate:(Lorg/joda/time/DurationFieldType;[II)V` @kind direct;
  #L3ade0a.  call temp:= `months`() @signature `Lorg/joda/time/DurationFieldType;.months:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3ade10.  v3:= temp @kind object;
  #L3ade12.  call `checkAndUpdate`(v2, v3, v0, v4) @signature `Lorg/joda/time/base/BasePeriod;.checkAndUpdate:(Lorg/joda/time/DurationFieldType;[II)V` @kind direct;
  #L3ade18.  call temp:= `weeks`() @signature `Lorg/joda/time/DurationFieldType;.weeks:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3ade1e.  v3:= temp @kind object;
  #L3ade20.  call `checkAndUpdate`(v2, v3, v0, v5) @signature `Lorg/joda/time/base/BasePeriod;.checkAndUpdate:(Lorg/joda/time/DurationFieldType;[II)V` @kind direct;
  #L3ade26.  call temp:= `days`() @signature `Lorg/joda/time/DurationFieldType;.days:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3ade2c.  v3:= temp @kind object;
  #L3ade2e.  call `checkAndUpdate`(v2, v3, v0, v6) @signature `Lorg/joda/time/base/BasePeriod;.checkAndUpdate:(Lorg/joda/time/DurationFieldType;[II)V` @kind direct;
  #L3ade34.  call temp:= `hours`() @signature `Lorg/joda/time/DurationFieldType;.hours:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3ade3a.  v3:= temp @kind object;
  #L3ade3c.  call `checkAndUpdate`(v2, v3, v0, v7) @signature `Lorg/joda/time/base/BasePeriod;.checkAndUpdate:(Lorg/joda/time/DurationFieldType;[II)V` @kind direct;
  #L3ade42.  call temp:= `minutes`() @signature `Lorg/joda/time/DurationFieldType;.minutes:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3ade48.  v3:= temp @kind object;
  #L3ade4a.  call `checkAndUpdate`(v2, v3, v0, v8) @signature `Lorg/joda/time/base/BasePeriod;.checkAndUpdate:(Lorg/joda/time/DurationFieldType;[II)V` @kind direct;
  #L3ade50.  call temp:= `seconds`() @signature `Lorg/joda/time/DurationFieldType;.seconds:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3ade56.  v3:= temp @kind object;
  #L3ade58.  call `checkAndUpdate`(v2, v3, v0, v9) @signature `Lorg/joda/time/base/BasePeriod;.checkAndUpdate:(Lorg/joda/time/DurationFieldType;[II)V` @kind direct;
  #L3ade5e.  call temp:= `millis`() @signature `Lorg/joda/time/DurationFieldType;.millis:()Lorg/joda/time/DurationFieldType;` @kind static;
  #L3ade64.  v3:= temp @kind object;
  #L3ade66.  call `checkAndUpdate`(v2, v3, v0, v10) @signature `Lorg/joda/time/base/BasePeriod;.checkAndUpdate:(Lorg/joda/time/DurationFieldType;[II)V` @kind direct;
  #L3ade6c.  return v0 @kind object;
}
procedure `void` `addField`(`org.joda.time.base.BasePeriod` v1 @kind this, `org.joda.time.DurationFieldType` v2 @kind object, `int` v3 ) @signature `Lorg/joda/time/base/BasePeriod;.addField:(Lorg/joda/time/DurationFieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3ae348.  v0:= v1.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] @kind object;
  #L3ae34c.  call `addFieldInto`(v1, v0, v2, v3) @signature `Lorg/joda/time/base/BasePeriod;.addFieldInto:([ILorg/joda/time/DurationFieldType;I)V` @kind virtual;
  #L3ae352.  return @kind void;
}
procedure `void` `addFieldInto`(`org.joda.time.base.BasePeriod` v2 @kind this, `int`[] v3 @kind object, `org.joda.time.DurationFieldType` v4 @kind object, `int` v5 ) @signature `Lorg/joda/time/base/BasePeriod;.addFieldInto:([ILorg/joda/time/DurationFieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3ae364.  call temp:= `indexOf`(v2, v4) @signature `Lorg/joda/time/base/AbstractPeriod;.indexOf:(Lorg/joda/time/DurationFieldType;)I` @kind virtual;
  #L3ae36a.  v0:= temp;
  #L3ae36c.  v1:= -1I;
  #L3ae36e.  if v0 != v1 then goto L3ae3b4;
  #L3ae372.  if v5 != 0 then goto L3ae37c;
  #L3ae376.  if v4 == 0 then goto L3ae37c;
  #L3ae37a.  goto L3ae3c4;
  #L3ae37c.  v3:= new `java.lang.IllegalArgumentException`;
  #L3ae380.  v5:= new `java.lang.StringBuilder`;
  #L3ae384.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ae38a.  v0:= "Period does not support field '" @kind object;
  #L3ae38e.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ae394.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ae39a.  v4:= "'" @kind object;
  #L3ae39e.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ae3a4.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ae3aa.  v4:= temp @kind object;
  #L3ae3ac.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ae3b2.  throw v3;
  #L3ae3b4.  v4:= v3[v0];
  #L3ae3b8.  call temp:= `safeAdd`(v4, v5) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(II)I` @kind static;
  #L3ae3be.  v4:= temp;
  #L3ae3c0.  v3[v0]:= v4;
  #L3ae3c4.  return @kind void;
}
procedure `void` `addPeriod`(`org.joda.time.base.BasePeriod` v1 @kind this, `org.joda.time.ReadablePeriod` v2 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.addPeriod:(Lorg/joda/time/ReadablePeriod;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3ae3d8.  if v2 == 0 then goto L3ae3f2;
  #L3ae3dc.  call temp:= `getValues`(v1) @signature `Lorg/joda/time/base/AbstractPeriod;.getValues:()[I` @kind virtual;
  #L3ae3e2.  v0:= temp @kind object;
  #L3ae3e4.  call temp:= `addPeriodInto`(v1, v0, v2) @signature `Lorg/joda/time/base/BasePeriod;.addPeriodInto:([ILorg/joda/time/ReadablePeriod;)[I` @kind virtual;
  #L3ae3ea.  v2:= temp @kind object;
  #L3ae3ec.  call `setValues`(v1, v2) @signature `Lorg/joda/time/base/BasePeriod;.setValues:([I)V` @kind virtual;
  #L3ae3f2.  return @kind void;
}
procedure `int`[] `addPeriodInto`(`org.joda.time.base.BasePeriod` v6 @kind this, `int`[] v7 @kind object, `org.joda.time.ReadablePeriod` v8 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.addPeriodInto:([ILorg/joda/time/ReadablePeriod;)[I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3add14.  call temp:= `size`(v8) @signature `Lorg/joda/time/ReadablePeriod;.size:()I` @kind interface;
  #L3add1a.  v0:= temp;
  #L3add1c.  v1:= 0I;
  #L3add1e.  if v1 >= v0 then goto L3adda0;
  #L3add22.  call temp:= `getFieldType`(v8, v1) @signature `Lorg/joda/time/ReadablePeriod;.getFieldType:(I)Lorg/joda/time/DurationFieldType;` @kind interface;
  #L3add28.  v2:= temp @kind object;
  #L3add2a.  call temp:= `getValue`(v8, v1) @signature `Lorg/joda/time/ReadablePeriod;.getValue:(I)I` @kind interface;
  #L3add30.  v3:= temp;
  #L3add32.  if v3 == 0 then goto L3add9a;
  #L3add36.  call temp:= `indexOf`(v6, v2) @signature `Lorg/joda/time/base/AbstractPeriod;.indexOf:(Lorg/joda/time/DurationFieldType;)I` @kind virtual;
  #L3add3c.  v4:= temp;
  #L3add3e.  v5:= -1I;
  #L3add40.  if v4 == v5 then goto L3add5a;
  #L3add44.  call temp:= `getValue`(v6, v4) @signature `Lorg/joda/time/base/BasePeriod;.getValue:(I)I` @kind virtual;
  #L3add4a.  v2:= temp;
  #L3add4c.  call temp:= `safeAdd`(v2, v3) @signature `Lorg/joda/time/field/FieldUtils;.safeAdd:(II)I` @kind static;
  #L3add52.  v2:= temp;
  #L3add54.  v7[v4]:= v2;
  #L3add58.  goto L3add9a;
  #L3add5a.  v7:= new `java.lang.IllegalArgumentException`;
  #L3add5e.  v8:= new `java.lang.StringBuilder`;
  #L3add62.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3add68.  v0:= "Period does not support field '" @kind object;
  #L3add6c.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3add72.  call temp:= `getName`(v2) @signature `Lorg/joda/time/DurationFieldType;.getName:()Ljava/lang/String;` @kind virtual;
  #L3add78.  v0:= temp @kind object;
  #L3add7a.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3add80.  v0:= "'" @kind object;
  #L3add84.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3add8a.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3add90.  v8:= temp @kind object;
  #L3add92.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3add98.  throw v7;
  #L3add9a.  v1:= v1 + 1;
  #L3add9e.  goto L3add1e;
  #L3adda0.  return v7 @kind object;
}
procedure `org.joda.time.PeriodType` `checkPeriodType`(`org.joda.time.base.BasePeriod` v0 @kind this, `org.joda.time.PeriodType` v1 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.checkPeriodType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;` @AccessFlag PROTECTED {
    temp;

  #L3adef0.  call temp:= `getPeriodType`(v1) @signature `Lorg/joda/time/DateTimeUtils;.getPeriodType:(Lorg/joda/time/PeriodType;)Lorg/joda/time/PeriodType;` @kind static;
  #L3adef6.  v1:= temp @kind object;
  #L3adef8.  return v1 @kind object;
}
procedure `org.joda.time.PeriodType` `getPeriodType`(`org.joda.time.base.BasePeriod` v1 @kind this) @signature `Lorg/joda/time/base/BasePeriod;.getPeriodType:()Lorg/joda/time/PeriodType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3adf0c.  v0:= v1.`org.joda.time.base.BasePeriod.iType` @type ^`org.joda.time.PeriodType` @kind object;
  #L3adf10.  return v0 @kind object;
}
procedure `int` `getValue`(`org.joda.time.base.BasePeriod` v1 @kind this, `int` v2 ) @signature `Lorg/joda/time/base/BasePeriod;.getValue:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3adcf8.  v0:= v1.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] @kind object;
  #L3adcfc.  v2:= v0[v2];
  #L3add00.  return v2;
}
procedure `void` `mergePeriod`(`org.joda.time.base.BasePeriod` v1 @kind this, `org.joda.time.ReadablePeriod` v2 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.mergePeriod:(Lorg/joda/time/ReadablePeriod;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3ae470.  if v2 == 0 then goto L3ae48a;
  #L3ae474.  call temp:= `getValues`(v1) @signature `Lorg/joda/time/base/AbstractPeriod;.getValues:()[I` @kind virtual;
  #L3ae47a.  v0:= temp @kind object;
  #L3ae47c.  call temp:= `mergePeriodInto`(v1, v0, v2) @signature `Lorg/joda/time/base/BasePeriod;.mergePeriodInto:([ILorg/joda/time/ReadablePeriod;)[I` @kind virtual;
  #L3ae482.  v2:= temp @kind object;
  #L3ae484.  call `setValues`(v1, v2) @signature `Lorg/joda/time/base/BasePeriod;.setValues:([I)V` @kind virtual;
  #L3ae48a.  return @kind void;
}
procedure `int`[] `mergePeriodInto`(`org.joda.time.base.BasePeriod` v4 @kind this, `int`[] v5 @kind object, `org.joda.time.ReadablePeriod` v6 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.mergePeriodInto:([ILorg/joda/time/ReadablePeriod;)[I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3addb4.  call temp:= `size`(v6) @signature `Lorg/joda/time/ReadablePeriod;.size:()I` @kind interface;
  #L3addba.  v0:= temp;
  #L3addbc.  v1:= 0I;
  #L3addbe.  if v1 >= v0 then goto L3addde;
  #L3addc2.  call temp:= `getFieldType`(v6, v1) @signature `Lorg/joda/time/ReadablePeriod;.getFieldType:(I)Lorg/joda/time/DurationFieldType;` @kind interface;
  #L3addc8.  v2:= temp @kind object;
  #L3addca.  call temp:= `getValue`(v6, v1) @signature `Lorg/joda/time/ReadablePeriod;.getValue:(I)I` @kind interface;
  #L3addd0.  v3:= temp;
  #L3addd2.  call `checkAndUpdate`(v4, v2, v5, v3) @signature `Lorg/joda/time/base/BasePeriod;.checkAndUpdate:(Lorg/joda/time/DurationFieldType;[II)V` @kind direct;
  #L3addd8.  v1:= v1 + 1;
  #L3adddc.  goto L3addbe;
  #L3addde.  return v5 @kind object;
}
procedure `void` `setField`(`org.joda.time.base.BasePeriod` v1 @kind this, `org.joda.time.DurationFieldType` v2 @kind object, `int` v3 ) @signature `Lorg/joda/time/base/BasePeriod;.setField:(Lorg/joda/time/DurationFieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3ae49c.  v0:= v1.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] @kind object;
  #L3ae4a0.  call `setFieldInto`(v1, v0, v2, v3) @signature `Lorg/joda/time/base/BasePeriod;.setFieldInto:([ILorg/joda/time/DurationFieldType;I)V` @kind virtual;
  #L3ae4a6.  return @kind void;
}
procedure `void` `setFieldInto`(`org.joda.time.base.BasePeriod` v2 @kind this, `int`[] v3 @kind object, `org.joda.time.DurationFieldType` v4 @kind object, `int` v5 ) @signature `Lorg/joda/time/base/BasePeriod;.setFieldInto:([ILorg/joda/time/DurationFieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3ae4b8.  call temp:= `indexOf`(v2, v4) @signature `Lorg/joda/time/base/AbstractPeriod;.indexOf:(Lorg/joda/time/DurationFieldType;)I` @kind virtual;
  #L3ae4be.  v0:= temp;
  #L3ae4c0.  v1:= -1I;
  #L3ae4c2.  if v0 != v1 then goto L3ae508;
  #L3ae4c6.  if v5 != 0 then goto L3ae4d0;
  #L3ae4ca.  if v4 == 0 then goto L3ae4d0;
  #L3ae4ce.  goto L3ae50c;
  #L3ae4d0.  v3:= new `java.lang.IllegalArgumentException`;
  #L3ae4d4.  v5:= new `java.lang.StringBuilder`;
  #L3ae4d8.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3ae4de.  v0:= "Period does not support field '" @kind object;
  #L3ae4e2.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ae4e8.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ae4ee.  v4:= "'" @kind object;
  #L3ae4f2.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ae4f8.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ae4fe.  v4:= temp @kind object;
  #L3ae500.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ae506.  throw v3;
  #L3ae508.  v3[v0]:= v5;
  #L3ae50c.  return @kind void;
}
procedure `void` `setPeriod`(`org.joda.time.base.BasePeriod` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `int` v4 , `int` v5 , `int` v6 , `int` v7 , `int` v8 ) @signature `Lorg/joda/time/base/BasePeriod;.setPeriod:(IIIIIIII)V` @AccessFlag PROTECTED {
    temp;

  #L3ae520.  call temp:= `setPeriodInternal`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lorg/joda/time/base/BasePeriod;.setPeriodInternal:(IIIIIIII)[I` @kind direct;
  #L3ae526.  v1:= temp @kind object;
  #L3ae528.  call `setValues`(v0, v1) @signature `Lorg/joda/time/base/BasePeriod;.setValues:([I)V` @kind virtual;
  #L3ae52e.  return @kind void;
}
procedure `void` `setPeriod`(`org.joda.time.base.BasePeriod` v0 @kind this, `org.joda.time.ReadablePeriod` v1 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.setPeriod:(Lorg/joda/time/ReadablePeriod;)V` @AccessFlag PROTECTED {
    temp;

  #L3ae540.  if v1 != 0 then goto L3ae558;
  #L3ae544.  call temp:= `size`(v0) @signature `Lorg/joda/time/base/AbstractPeriod;.size:()I` @kind virtual;
  #L3ae54a.  v1:= temp;
  #L3ae54c.  v1:= new `int`[v1];
  #L3ae550.  call `setValues`(v0, v1) @signature `Lorg/joda/time/base/BasePeriod;.setValues:([I)V` @kind virtual;
  #L3ae556.  goto L3ae55e;
  #L3ae558.  call `setPeriodInternal`(v0, v1) @signature `Lorg/joda/time/base/BasePeriod;.setPeriodInternal:(Lorg/joda/time/ReadablePeriod;)V` @kind direct;
  #L3ae55e.  return @kind void;
}
procedure `void` `setValue`(`org.joda.time.base.BasePeriod` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/joda/time/base/BasePeriod;.setValue:(II)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3ae5c0.  v0:= v1.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] @kind object;
  #L3ae5c4.  v0[v2]:= v3;
  #L3ae5c8.  return @kind void;
}
procedure `void` `setValues`(`org.joda.time.base.BasePeriod` v3 @kind this, `int`[] v4 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.setValues:([I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L3ae5dc.  v0:= v3.`org.joda.time.base.BasePeriod.iValues` @type ^`int`[] @kind object;
  #L3ae5e0.  v1:= length @variable v0;
  #L3ae5e2.  v2:= 0I;
  #L3ae5e4.  call `arraycopy`(v4, v2, v0, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3ae5ea.  return @kind void;
}
procedure `org.joda.time.Duration` `toDurationFrom`(`org.joda.time.base.BasePeriod` v4 @kind this, `org.joda.time.ReadableInstant` v5 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.toDurationFrom:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Duration;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ade80.  call temp:= `getInstantMillis`(v5) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3ade86.  v0:= temp @kind wide;
  #L3ade88.  call temp:= `getInstantChronology`(v5) @signature `Lorg/joda/time/DateTimeUtils;.getInstantChronology:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;` @kind static;
  #L3ade8e.  v5:= temp @kind object;
  #L3ade90.  v2:= 1I;
  #L3ade92.  call temp:= `add`(v5, v4, v0, v2) @signature `Lorg/joda/time/Chronology;.add:(Lorg/joda/time/ReadablePeriod;JI)J` @kind virtual;
  #L3ade98.  v2:= temp @kind wide;
  #L3ade9a.  v5:= new `org.joda.time.Duration`;
  #L3ade9e.  call `<init>`(v5, v0, v2) @signature `Lorg/joda/time/Duration;.<init>:(JJ)V` @kind direct;
  #L3adea4.  return v5 @kind object;
}
procedure `org.joda.time.Duration` `toDurationTo`(`org.joda.time.base.BasePeriod` v4 @kind this, `org.joda.time.ReadableInstant` v5 @kind object) @signature `Lorg/joda/time/base/BasePeriod;.toDurationTo:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Duration;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3adeb8.  call temp:= `getInstantMillis`(v5) @signature `Lorg/joda/time/DateTimeUtils;.getInstantMillis:(Lorg/joda/time/ReadableInstant;)J` @kind static;
  #L3adebe.  v0:= temp @kind wide;
  #L3adec0.  call temp:= `getInstantChronology`(v5) @signature `Lorg/joda/time/DateTimeUtils;.getInstantChronology:(Lorg/joda/time/ReadableInstant;)Lorg/joda/time/Chronology;` @kind static;
  #L3adec6.  v5:= temp @kind object;
  #L3adec8.  v2:= -1I;
  #L3adeca.  call temp:= `add`(v5, v4, v0, v2) @signature `Lorg/joda/time/Chronology;.add:(Lorg/joda/time/ReadablePeriod;JI)J` @kind virtual;
  #L3aded0.  v2:= temp @kind wide;
  #L3aded2.  v5:= new `org.joda.time.Duration`;
  #L3aded6.  call `<init>`(v5, v2, v0) @signature `Lorg/joda/time/Duration;.<init>:(JJ)V` @kind direct;
  #L3adedc.  return v5 @kind object;
}
