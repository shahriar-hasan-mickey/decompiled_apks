record `org.joda.time.base.BaseDateTime` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.joda.time.base.AbstractDateTime` @kind class, `org.joda.time.ReadableDateTime` @kind interface, `java.io.Serializable` @kind interface {
  `org.joda.time.Chronology` `org.joda.time.base.BaseDateTime.iChronology` @AccessFlag PRIVATE_VOLATILE;
  `long` `org.joda.time.base.BaseDateTime.iMillis` @AccessFlag PRIVATE_VOLATILE;
}
global `long` `@@org.joda.time.base.BaseDateTime.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.joda.time.base.BaseDateTime` v3 @kind this) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3ad180.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3ad186.  v0:= temp @kind wide;
  #L3ad188.  call temp:= `getInstance`() @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:()Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3ad18e.  v2:= temp @kind object;
  #L3ad190.  call `<init>`(v3, v0, v2) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3ad196.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BaseDateTime` v9 @kind this, `int` v10 , `int` v11 , `int` v12 , `int` v13 , `int` v14 , `int` v15 , `int` v16 ) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(IIIIIII)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3ad1a8.  call temp:= `getInstance`() @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:()Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3ad1ae.  v8:= temp @kind object;
  #L3ad1b0.  v0:= v9 @kind object;
  #L3ad1b2.  v1:= v10;
  #L3ad1b4.  v2:= v11;
  #L3ad1b6.  v3:= v12;
  #L3ad1b8.  v4:= v13;
  #L3ad1ba.  v5:= v14;
  #L3ad1bc.  v6:= v15;
  #L3ad1be.  v7:= v16;
  #L3ad1c2.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(IIIIIIILorg/joda/time/Chronology;)V` @kind direct;
  #L3ad1c8.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BaseDateTime` v10 @kind this, `int` v11 , `int` v12 , `int` v13 , `int` v14 , `int` v15 , `int` v16 , `int` v17 , `org.joda.time.Chronology` v18 @kind object) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(IIIIIIILorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3ad1dc.  v0:= v10 @kind object;
  #L3ad1de.  call `<init>`(v10) @signature `Lorg/joda/time/base/AbstractDateTime;.<init>:()V` @kind direct;
  #L3ad1e4.  v1:= v18 @kind object;
  #L3ad1e8.  call temp:= `checkChronology`(v10, v1) @signature `Lorg/joda/time/base/BaseDateTime;.checkChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind virtual;
  #L3ad1ee.  v1:= temp @kind object;
  #L3ad1f0.  v0.`org.joda.time.base.BaseDateTime.iChronology` @type ^`org.joda.time.Chronology` := v1 @kind object;
  #L3ad1f4.  v2:= v0.`org.joda.time.base.BaseDateTime.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3ad1f8.  v3:= v11;
  #L3ad1fa.  v4:= v12;
  #L3ad1fc.  v5:= v13;
  #L3ad1fe.  v6:= v14;
  #L3ad200.  v7:= v15;
  #L3ad202.  v8:= v16;
  #L3ad206.  v9:= v17;
  #L3ad20a.  call temp:= `getDateTimeMillis`(v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lorg/joda/time/Chronology;.getDateTimeMillis:(IIIIIII)J` @kind virtual;
  #L3ad210.  v1:= temp @kind wide;
  #L3ad212.  v3:= v0.`org.joda.time.base.BaseDateTime.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3ad216.  call temp:= `checkInstant`(v10, v1, v3) @signature `Lorg/joda/time/base/BaseDateTime;.checkInstant:(JLorg/joda/time/Chronology;)J` @kind virtual;
  #L3ad21c.  v1:= temp @kind wide;
  #L3ad21e.  v0.`org.joda.time.base.BaseDateTime.iMillis` @type ^`long` := v1 @kind wide;
  #L3ad222.  call `adjustForMinMax`(v10) @signature `Lorg/joda/time/base/BaseDateTime;.adjustForMinMax:()V` @kind direct;
  #L3ad228.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BaseDateTime` v9 @kind this, `int` v10 , `int` v11 , `int` v12 , `int` v13 , `int` v14 , `int` v15 , `int` v16 , `org.joda.time.DateTimeZone` v17 @kind object) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(IIIIIIILorg/joda/time/DateTimeZone;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3ad23c.  call temp:= `getInstance`(v17) @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3ad242.  v8:= temp @kind object;
  #L3ad244.  v0:= v9 @kind object;
  #L3ad246.  v1:= v10;
  #L3ad248.  v2:= v11;
  #L3ad24a.  v3:= v12;
  #L3ad24c.  v4:= v13;
  #L3ad24e.  v5:= v14;
  #L3ad250.  v6:= v15;
  #L3ad252.  v7:= v16;
  #L3ad256.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(IIIIIIILorg/joda/time/Chronology;)V` @kind direct;
  #L3ad25c.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BaseDateTime` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ad324.  call temp:= `getInstance`() @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:()Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3ad32a.  v0:= temp @kind object;
  #L3ad32c.  call `<init>`(v1, v2, v0) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3ad332.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BaseDateTime` v0 @kind this, `long` v1 , `org.joda.time.Chronology` v3 @kind object) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(JLorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ad344.  call `<init>`(v0) @signature `Lorg/joda/time/base/AbstractDateTime;.<init>:()V` @kind direct;
  #L3ad34a.  call temp:= `checkChronology`(v0, v3) @signature `Lorg/joda/time/base/BaseDateTime;.checkChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind virtual;
  #L3ad350.  v3:= temp @kind object;
  #L3ad352.  v0.`org.joda.time.base.BaseDateTime.iChronology` @type ^`org.joda.time.Chronology` := v3 @kind object;
  #L3ad356.  v3:= v0.`org.joda.time.base.BaseDateTime.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3ad35a.  call temp:= `checkInstant`(v0, v1, v3) @signature `Lorg/joda/time/base/BaseDateTime;.checkInstant:(JLorg/joda/time/Chronology;)J` @kind virtual;
  #L3ad360.  v1:= temp @kind wide;
  #L3ad362.  v0.`org.joda.time.base.BaseDateTime.iMillis` @type ^`long` := v1 @kind wide;
  #L3ad366.  call `adjustForMinMax`(v0) @signature `Lorg/joda/time/base/BaseDateTime;.adjustForMinMax:()V` @kind direct;
  #L3ad36c.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BaseDateTime` v0 @kind this, `long` v1 , `org.joda.time.DateTimeZone` v3 @kind object) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(JLorg/joda/time/DateTimeZone;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ad380.  call temp:= `getInstance`(v3) @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3ad386.  v3:= temp @kind object;
  #L3ad388.  call `<init>`(v0, v1, v3) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3ad38e.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BaseDateTime` v2 @kind this, `java.lang.Object` v3 @kind object, `org.joda.time.Chronology` v4 @kind object) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(Ljava/lang/Object;Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ad270.  call `<init>`(v2) @signature `Lorg/joda/time/base/AbstractDateTime;.<init>:()V` @kind direct;
  #L3ad276.  call temp:= `getInstance`() @signature `Lorg/joda/time/convert/ConverterManager;.getInstance:()Lorg/joda/time/convert/ConverterManager;` @kind static;
  #L3ad27c.  v0:= temp @kind object;
  #L3ad27e.  call temp:= `getInstantConverter`(v0, v3) @signature `Lorg/joda/time/convert/ConverterManager;.getInstantConverter:(Ljava/lang/Object;)Lorg/joda/time/convert/InstantConverter;` @kind virtual;
  #L3ad284.  v0:= temp @kind object;
  #L3ad286.  call temp:= `getChronology`(v0, v3, v4) @signature `Lorg/joda/time/convert/InstantConverter;.getChronology:(Ljava/lang/Object;Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind interface;
  #L3ad28c.  v1:= temp @kind object;
  #L3ad28e.  call temp:= `checkChronology`(v2, v1) @signature `Lorg/joda/time/base/BaseDateTime;.checkChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind virtual;
  #L3ad294.  v1:= temp @kind object;
  #L3ad296.  v2.`org.joda.time.base.BaseDateTime.iChronology` @type ^`org.joda.time.Chronology` := v1 @kind object;
  #L3ad29a.  call temp:= `getInstantMillis`(v0, v3, v4) @signature `Lorg/joda/time/convert/InstantConverter;.getInstantMillis:(Ljava/lang/Object;Lorg/joda/time/Chronology;)J` @kind interface;
  #L3ad2a0.  v3:= temp @kind wide;
  #L3ad2a2.  v0:= v2.`org.joda.time.base.BaseDateTime.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3ad2a6.  call temp:= `checkInstant`(v2, v3, v0) @signature `Lorg/joda/time/base/BaseDateTime;.checkInstant:(JLorg/joda/time/Chronology;)J` @kind virtual;
  #L3ad2ac.  v3:= temp @kind wide;
  #L3ad2ae.  v2.`org.joda.time.base.BaseDateTime.iMillis` @type ^`long` := v3 @kind wide;
  #L3ad2b2.  call `adjustForMinMax`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.adjustForMinMax:()V` @kind direct;
  #L3ad2b8.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BaseDateTime` v2 @kind this, `java.lang.Object` v3 @kind object, `org.joda.time.DateTimeZone` v4 @kind object) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ad2cc.  call `<init>`(v2) @signature `Lorg/joda/time/base/AbstractDateTime;.<init>:()V` @kind direct;
  #L3ad2d2.  call temp:= `getInstance`() @signature `Lorg/joda/time/convert/ConverterManager;.getInstance:()Lorg/joda/time/convert/ConverterManager;` @kind static;
  #L3ad2d8.  v0:= temp @kind object;
  #L3ad2da.  call temp:= `getInstantConverter`(v0, v3) @signature `Lorg/joda/time/convert/ConverterManager;.getInstantConverter:(Ljava/lang/Object;)Lorg/joda/time/convert/InstantConverter;` @kind virtual;
  #L3ad2e0.  v0:= temp @kind object;
  #L3ad2e2.  call temp:= `getChronology`(v0, v3, v4) @signature `Lorg/joda/time/convert/InstantConverter;.getChronology:(Ljava/lang/Object;Lorg/joda/time/DateTimeZone;)Lorg/joda/time/Chronology;` @kind interface;
  #L3ad2e8.  v4:= temp @kind object;
  #L3ad2ea.  call temp:= `checkChronology`(v2, v4) @signature `Lorg/joda/time/base/BaseDateTime;.checkChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind virtual;
  #L3ad2f0.  v4:= temp @kind object;
  #L3ad2f2.  v2.`org.joda.time.base.BaseDateTime.iChronology` @type ^`org.joda.time.Chronology` := v4 @kind object;
  #L3ad2f6.  call temp:= `getInstantMillis`(v0, v3, v4) @signature `Lorg/joda/time/convert/InstantConverter;.getInstantMillis:(Ljava/lang/Object;Lorg/joda/time/Chronology;)J` @kind interface;
  #L3ad2fc.  v0:= temp @kind wide;
  #L3ad2fe.  call temp:= `checkInstant`(v2, v0, v4) @signature `Lorg/joda/time/base/BaseDateTime;.checkInstant:(JLorg/joda/time/Chronology;)J` @kind virtual;
  #L3ad304.  v3:= temp @kind wide;
  #L3ad306.  v2.`org.joda.time.base.BaseDateTime.iMillis` @type ^`long` := v3 @kind wide;
  #L3ad30a.  call `adjustForMinMax`(v2) @signature `Lorg/joda/time/base/BaseDateTime;.adjustForMinMax:()V` @kind direct;
  #L3ad310.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BaseDateTime` v2 @kind this, `org.joda.time.Chronology` v3 @kind object) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(Lorg/joda/time/Chronology;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ad3a0.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3ad3a6.  v0:= temp @kind wide;
  #L3ad3a8.  call `<init>`(v2, v0, v3) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3ad3ae.  return @kind void;
}
procedure `void` `<init>`(`org.joda.time.base.BaseDateTime` v2 @kind this, `org.joda.time.DateTimeZone` v3 @kind object) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(Lorg/joda/time/DateTimeZone;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3ad3c0.  call temp:= `currentTimeMillis`() @signature `Lorg/joda/time/DateTimeUtils;.currentTimeMillis:()J` @kind static;
  #L3ad3c6.  v0:= temp @kind wide;
  #L3ad3c8.  call temp:= `getInstance`(v3) @signature `Lorg/joda/time/chrono/ISOChronology;.getInstance:(Lorg/joda/time/DateTimeZone;)Lorg/joda/time/chrono/ISOChronology;` @kind static;
  #L3ad3ce.  v3:= temp @kind object;
  #L3ad3d0.  call `<init>`(v2, v0, v3) @signature `Lorg/joda/time/base/BaseDateTime;.<init>:(JLorg/joda/time/Chronology;)V` @kind direct;
  #L3ad3d6.  return @kind void;
}
procedure `void` `adjustForMinMax`(`org.joda.time.base.BaseDateTime` v5 @kind this) @signature `Lorg/joda/time/base/BaseDateTime;.adjustForMinMax:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3ad3e8.  v0:= v5.`org.joda.time.base.BaseDateTime.iMillis` @type ^`long` @kind wide;
  #L3ad3ec.  v2:= -9223372036854775808L;
  #L3ad3f0.  v4:= lcmp(v0, v2);
  #L3ad3f4.  if v4 == 0 then goto L3ad40e;
  #L3ad3f8.  v0:= v5.`org.joda.time.base.BaseDateTime.iMillis` @type ^`long` @kind wide;
  #L3ad3fc.  v2:= 9223372036854775807L;
  #L3ad406.  v4:= lcmp(v0, v2);
  #L3ad40a.  if v4 != 0 then goto L3ad41e;
  #L3ad40e.  v0:= v5.`org.joda.time.base.BaseDateTime.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3ad412.  call temp:= `withUTC`(v0) @signature `Lorg/joda/time/Chronology;.withUTC:()Lorg/joda/time/Chronology;` @kind virtual;
  #L3ad418.  v0:= temp @kind object;
  #L3ad41a.  v5.`org.joda.time.base.BaseDateTime.iChronology` @type ^`org.joda.time.Chronology` := v0 @kind object;
  #L3ad41e.  return @kind void;
}
procedure `org.joda.time.Chronology` `checkChronology`(`org.joda.time.base.BaseDateTime` v0 @kind this, `org.joda.time.Chronology` v1 @kind object) @signature `Lorg/joda/time/base/BaseDateTime;.checkChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @AccessFlag PROTECTED {
    temp;

  #L3ad14c.  call temp:= `getChronology`(v1) @signature `Lorg/joda/time/DateTimeUtils;.getChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind static;
  #L3ad152.  v1:= temp @kind object;
  #L3ad154.  return v1 @kind object;
}
procedure `long` `checkInstant`(`org.joda.time.base.BaseDateTime` v0 @kind this, `long` v1 , `org.joda.time.Chronology` v3 @kind object) @signature `Lorg/joda/time/base/BaseDateTime;.checkInstant:(JLorg/joda/time/Chronology;)J` @AccessFlag PROTECTED {
    temp;

  #L3ad120.  return v1 @kind wide;
}
procedure `org.joda.time.Chronology` `getChronology`(`org.joda.time.base.BaseDateTime` v1 @kind this) @signature `Lorg/joda/time/base/BaseDateTime;.getChronology:()Lorg/joda/time/Chronology;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ad168.  v0:= v1.`org.joda.time.base.BaseDateTime.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3ad16c.  return v0 @kind object;
}
procedure `long` `getMillis`(`org.joda.time.base.BaseDateTime` v2 @kind this) @signature `Lorg/joda/time/base/BaseDateTime;.getMillis:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ad134.  v0:= v2.`org.joda.time.base.BaseDateTime.iMillis` @type ^`long` @kind wide;
  #L3ad138.  return v0 @kind wide;
}
procedure `void` `setChronology`(`org.joda.time.base.BaseDateTime` v0 @kind this, `org.joda.time.Chronology` v1 @kind object) @signature `Lorg/joda/time/base/BaseDateTime;.setChronology:(Lorg/joda/time/Chronology;)V` @AccessFlag PROTECTED {
    temp;

  #L3ad430.  call temp:= `checkChronology`(v0, v1) @signature `Lorg/joda/time/base/BaseDateTime;.checkChronology:(Lorg/joda/time/Chronology;)Lorg/joda/time/Chronology;` @kind virtual;
  #L3ad436.  v1:= temp @kind object;
  #L3ad438.  v0.`org.joda.time.base.BaseDateTime.iChronology` @type ^`org.joda.time.Chronology` := v1 @kind object;
  #L3ad43c.  return @kind void;
}
procedure `void` `setMillis`(`org.joda.time.base.BaseDateTime` v1 @kind this, `long` v2 ) @signature `Lorg/joda/time/base/BaseDateTime;.setMillis:(J)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3ad450.  v0:= v1.`org.joda.time.base.BaseDateTime.iChronology` @type ^`org.joda.time.Chronology` @kind object;
  #L3ad454.  call temp:= `checkInstant`(v1, v2, v0) @signature `Lorg/joda/time/base/BaseDateTime;.checkInstant:(JLorg/joda/time/Chronology;)J` @kind virtual;
  #L3ad45a.  v2:= temp @kind wide;
  #L3ad45c.  v1.`org.joda.time.base.BaseDateTime.iMillis` @type ^`long` := v2 @kind wide;
  #L3ad460.  return @kind void;
}
