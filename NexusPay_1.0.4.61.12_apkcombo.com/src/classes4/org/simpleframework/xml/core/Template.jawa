record `org.simpleframework.xml.core.Template` @kind class @AccessFlag PUBLIC {
  `char`[] `org.simpleframework.xml.core.Template.buf` @AccessFlag PUBLIC;
  `java.lang.String` `org.simpleframework.xml.core.Template.cache` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.core.Template.count` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Template` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Template;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L44f538.  v0:= 16I;
  #L44f53c.  call `<init>`(v1, v0) @signature `Lorg/simpleframework/xml/core/Template;.<init>:(I)V` @kind direct;
  #L44f542.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Template` v0 @kind this, `int` v1 ) @signature `Lorg/simpleframework/xml/core/Template;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44f554.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44f55a.  v1:= new `char`[v1];
  #L44f55e.  v0.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] := v1 @kind object;
  #L44f562.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v3 @kind this, `char` v4 ) @signature `Lorg/simpleframework/xml/core/Template;.append:(C)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44f574.  v0:= v3.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f578.  v0:= v0 + 1;
  #L44f57c.  call `ensureCapacity`(v3, v0) @signature `Lorg/simpleframework/xml/core/Template;.ensureCapacity:(I)V` @kind virtual;
  #L44f582.  v0:= v3.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L44f586.  v1:= v3.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f58a.  v2:= v1 + 1;
  #L44f58e.  v3.`org.simpleframework.xml.core.Template.count` @type ^`int` := v2;
  #L44f592.  v0[v1]:= v4 @kind char;
  #L44f596.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44f5e0.  v0:= v4.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f5e4.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L44f5ea.  v1:= temp;
  #L44f5ec.  v0:= v0 + v1 @kind int;
  #L44f5ee.  call `ensureCapacity`(v4, v0) @signature `Lorg/simpleframework/xml/core/Template;.ensureCapacity:(I)V` @kind virtual;
  #L44f5f4.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L44f5fa.  v0:= temp;
  #L44f5fc.  v1:= v4.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L44f600.  v2:= v4.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f604.  v3:= 0I;
  #L44f606.  call `getChars`(v5, v3, v0, v1, v2) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L44f60c.  v0:= v4.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f610.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L44f616.  v5:= temp;
  #L44f618.  v0:= v0 + v5 @kind int;
  #L44f61a.  v4.`org.simpleframework.xml.core.Template.count` @type ^`int` := v0;
  #L44f61e.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v2 @kind this, `java.lang.String` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;II)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44f630.  v0:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f634.  v0:= v0 + v5 @kind int;
  #L44f636.  call `ensureCapacity`(v2, v0) @signature `Lorg/simpleframework/xml/core/Template;.ensureCapacity:(I)V` @kind virtual;
  #L44f63c.  v0:= v2.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L44f640.  v1:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f644.  call `getChars`(v3, v4, v5, v0, v1) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L44f64a.  v3:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f64e.  v3:= v3 + v5 @kind int;
  #L44f650.  v2.`org.simpleframework.xml.core.Template.count` @type ^`int` := v3;
  #L44f654.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v2 @kind this, `org.simpleframework.xml.core.Template` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Template;.append:(Lorg/simpleframework/xml/core/Template;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44f668.  v0:= v3.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L44f66c.  v3:= v3.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f670.  v1:= 0I;
  #L44f672.  call `append`(v2, v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Template;.append:([CII)V` @kind virtual;
  #L44f678.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v0 @kind this, `org.simpleframework.xml.core.Template` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lorg/simpleframework/xml/core/Template;.append:(Lorg/simpleframework/xml/core/Template;II)V` @AccessFlag PUBLIC {
    temp;

  #L44f68c.  v1:= v1.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L44f690.  call `append`(v0, v1, v2, v3) @signature `Lorg/simpleframework/xml/core/Template;.append:([CII)V` @kind virtual;
  #L44f696.  return @kind void;
}
procedure `void` `append`(`org.simpleframework.xml.core.Template` v2 @kind this, `char`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/simpleframework/xml/core/Template;.append:([CII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44f5a8.  v0:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f5ac.  v0:= v0 + v5 @kind int;
  #L44f5ae.  call `ensureCapacity`(v2, v0) @signature `Lorg/simpleframework/xml/core/Template;.ensureCapacity:(I)V` @kind virtual;
  #L44f5b4.  v0:= v2.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L44f5b8.  v1:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f5bc.  call `arraycopy`(v3, v4, v0, v1, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44f5c2.  v3:= v2.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f5c6.  v3:= v3 + v5 @kind int;
  #L44f5c8.  v2.`org.simpleframework.xml.core.Template.count` @type ^`int` := v3;
  #L44f5cc.  return @kind void;
}
procedure `void` `clear`(`org.simpleframework.xml.core.Template` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Template;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f6a8.  v0:= 0I;
  #L44f6aa.  v1.`org.simpleframework.xml.core.Template.cache` @type ^`java.lang.String` := v0 @kind object;
  #L44f6ae.  v0:= 0I;
  #L44f6b0.  v1.`org.simpleframework.xml.core.Template.count` @type ^`int` := v0;
  #L44f6b4.  return @kind void;
}
procedure `void` `ensureCapacity`(`org.simpleframework.xml.core.Template` v3 @kind this, `int` v4 ) @signature `Lorg/simpleframework/xml/core/Template;.ensureCapacity:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44f6c8.  v0:= v3.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L44f6cc.  v1:= length @variable v0;
  #L44f6ce.  if v1 >= v4 then goto L44f6f8;
  #L44f6d2.  v0:= length @variable v0;
  #L44f6d4.  v0:= v0 * 2;
  #L44f6d8.  call temp:= `max`(v4, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L44f6de.  v4:= temp;
  #L44f6e0.  v4:= new `char`[v4];
  #L44f6e4.  v0:= v3.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L44f6e8.  v1:= v3.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f6ec.  v2:= 0I;
  #L44f6ee.  call `arraycopy`(v0, v2, v4, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44f6f4.  v3.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] := v4 @kind object;
  #L44f6f8.  return @kind void;
}
procedure `int` `length`(`org.simpleframework.xml.core.Template` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Template;.length:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f4f8.  v0:= v1.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f4fc.  return v0;
}
procedure `java.lang.String` `toString`(`org.simpleframework.xml.core.Template` v4 @kind this) @signature `Lorg/simpleframework/xml/core/Template;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44f510.  v0:= new `java.lang.String`;
  #L44f514.  v1:= v4.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L44f518.  v2:= v4.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f51c.  v3:= 0I;
  #L44f51e.  call `<init>`(v0, v1, v3, v2) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L44f524.  return v0 @kind object;
}
