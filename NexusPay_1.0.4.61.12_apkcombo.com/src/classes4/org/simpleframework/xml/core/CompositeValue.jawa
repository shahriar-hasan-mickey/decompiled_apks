record `org.simpleframework.xml.core.CompositeValue` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.CompositeValue.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Traverser` `org.simpleframework.xml.core.CompositeValue.b` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.Style` `org.simpleframework.xml.core.CompositeValue.c` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Entry` `org.simpleframework.xml.core.CompositeValue.d` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.CompositeValue.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.CompositeValue` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.core.Entry` v3 @kind object, `org.simpleframework.xml.strategy.Type` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeValue;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/core/Entry;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L43fb38.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43fb3e.  v0:= new `org.simpleframework.xml.core.Traverser`;
  #L43fb42.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/core/Traverser;.<init>:(Lorg/simpleframework/xml/core/Context;)V` @kind direct;
  #L43fb48.  v1.`org.simpleframework.xml.core.CompositeValue.b` @type ^`org.simpleframework.xml.core.Traverser` := v0 @kind object;
  #L43fb4c.  call temp:= `getStyle`(v2) @signature `Lorg/simpleframework/xml/core/Context;.getStyle:()Lorg/simpleframework/xml/stream/Style;` @kind interface;
  #L43fb52.  v0:= temp @kind object;
  #L43fb54.  v1.`org.simpleframework.xml.core.CompositeValue.c` @type ^`org.simpleframework.xml.stream.Style` := v0 @kind object;
  #L43fb58.  v1.`org.simpleframework.xml.core.CompositeValue.a` @type ^`org.simpleframework.xml.core.Context` := v2 @kind object;
  #L43fb5c.  v1.`org.simpleframework.xml.core.CompositeValue.d` @type ^`org.simpleframework.xml.core.Entry` := v3 @kind object;
  #L43fb60.  v1.`org.simpleframework.xml.core.CompositeValue.e` @type ^`org.simpleframework.xml.strategy.Type` := v4 @kind object;
  #L43fb64.  return @kind void;
}
procedure `boolean` `a`(`org.simpleframework.xml.core.CompositeValue` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeValue;.a:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L43fa4c.  v0:= v2.`org.simpleframework.xml.core.CompositeValue.c` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L43fa50.  call temp:= `getElement`(v0, v4) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L43fa56.  v4:= temp @kind object;
  #L43fa58.  call temp:= `getNext`(v3, v4) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L43fa5e.  v3:= temp @kind object;
  #L43fa60.  v4:= v2.`org.simpleframework.xml.core.CompositeValue.e` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43fa64.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L43fa6a.  v4:= temp @kind object;
  #L43fa6c.  v0:= 1I;
  #L43fa6e.  if v3 != 0 then goto L43fa74;
  #L43fa72.  return v0;
  #L43fa74.  call temp:= `isEmpty`(v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.isEmpty:()Z` @kind interface;
  #L43fa7a.  v1:= temp;
  #L43fa7c.  if v1 == 0 then goto L43fa82;
  #L43fa80.  return v0;
  #L43fa82.  v0:= v2.`org.simpleframework.xml.core.CompositeValue.b` @type ^`org.simpleframework.xml.core.Traverser` @kind object;
  #L43fa86.  call temp:= `validate`(v0, v3, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.validate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @kind virtual;
  #L43fa8c.  v3:= temp;
  #L43fa8e.  return v3;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.CompositeValue` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeValue;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43faa0.  call temp:= `getNext`(v4) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L43faa6.  v4:= temp @kind object;
  #L43faa8.  v0:= v3.`org.simpleframework.xml.core.CompositeValue.e` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43faac.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L43fab2.  v0:= temp @kind object;
  #L43fab4.  v1:= 0I;
  #L43fab6.  if v4 != 0 then goto L43fabc;
  #L43faba.  return v1 @kind object;
  #L43fabc.  call temp:= `isEmpty`(v4) @signature `Lorg/simpleframework/xml/stream/InputNode;.isEmpty:()Z` @kind interface;
  #L43fac2.  v2:= temp;
  #L43fac4.  if v2 == 0 then goto L43faca;
  #L43fac8.  return v1 @kind object;
  #L43faca.  v1:= v3.`org.simpleframework.xml.core.CompositeValue.b` @type ^`org.simpleframework.xml.core.Traverser` @kind object;
  #L43face.  call temp:= `read`(v1, v4, v0) @signature `Lorg/simpleframework/xml/core/Traverser;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @kind virtual;
  #L43fad4.  v4:= temp @kind object;
  #L43fad6.  return v4 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.CompositeValue` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeValue;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43fae8.  v0:= v2.`org.simpleframework.xml.core.CompositeValue.e` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43faec.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L43faf2.  v0:= temp @kind object;
  #L43faf4.  if v4 != 0 then goto L43fb02;
  #L43faf8.  call temp:= `read`(v2, v3) @signature `Lorg/simpleframework/xml/core/CompositeValue;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L43fafe.  v3:= temp @kind object;
  #L43fb00.  return v3 @kind object;
  #L43fb02.  v3:= new `org.simpleframework.xml.core.PersistenceException`;
  #L43fb06.  v4:= 2I;
  #L43fb08.  v4:= new `java.lang.Object`[v4];
  #L43fb0c.  v1:= 0I;
  #L43fb0e.  v4[v1]:= v0 @kind object;
  #L43fb12.  v0:= v2.`org.simpleframework.xml.core.CompositeValue.d` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L43fb16.  v1:= 1I;
  #L43fb18.  v4[v1]:= v0 @kind object;
  #L43fb1c.  v0:= "Can not read value of %s for %s" @kind object;
  #L43fb20.  call `<init>`(v3, v0, v4) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L43fb26.  throw v3;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.CompositeValue` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeValue;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43fa08.  v0:= v2.`org.simpleframework.xml.core.CompositeValue.e` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43fa0c.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L43fa12.  v0:= temp @kind object;
  #L43fa14.  v1:= v2.`org.simpleframework.xml.core.CompositeValue.d` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L43fa18.  call temp:= `getValue`(v1) @signature `Lorg/simpleframework/xml/core/Entry;.getValue:()Ljava/lang/String;` @kind virtual;
  #L43fa1e.  v1:= temp @kind object;
  #L43fa20.  if v1 != 0 then goto L43fa30;
  #L43fa24.  v1:= v2.`org.simpleframework.xml.core.CompositeValue.a` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L43fa28.  call temp:= `getName`(v1, v0) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L43fa2e.  v1:= temp @kind object;
  #L43fa30.  call temp:= `a`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/CompositeValue;.a:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @kind direct;
  #L43fa36.  v3:= temp;
  #L43fa38.  return v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.CompositeValue` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeValue;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43fb78.  v0:= v3.`org.simpleframework.xml.core.CompositeValue.e` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43fb7c.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L43fb82.  v0:= temp @kind object;
  #L43fb84.  v1:= v3.`org.simpleframework.xml.core.CompositeValue.d` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L43fb88.  call temp:= `getValue`(v1) @signature `Lorg/simpleframework/xml/core/Entry;.getValue:()Ljava/lang/String;` @kind virtual;
  #L43fb8e.  v1:= temp @kind object;
  #L43fb90.  if v1 != 0 then goto L43fba0;
  #L43fb94.  v1:= v3.`org.simpleframework.xml.core.CompositeValue.a` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L43fb98.  call temp:= `getName`(v1, v0) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L43fb9e.  v1:= temp @kind object;
  #L43fba0.  v2:= v3.`org.simpleframework.xml.core.CompositeValue.c` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L43fba4.  call temp:= `getElement`(v2, v1) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L43fbaa.  v1:= temp @kind object;
  #L43fbac.  v2:= v3.`org.simpleframework.xml.core.CompositeValue.b` @type ^`org.simpleframework.xml.core.Traverser` @kind object;
  #L43fbb0.  call `write`(v2, v4, v5, v0, v1) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)V` @kind virtual;
  #L43fbb6.  return @kind void;
}
