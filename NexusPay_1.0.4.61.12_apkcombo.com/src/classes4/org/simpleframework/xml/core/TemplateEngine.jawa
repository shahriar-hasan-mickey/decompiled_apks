record `org.simpleframework.xml.core.TemplateEngine` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.core.Template` `org.simpleframework.xml.core.TemplateEngine.a` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Template` `org.simpleframework.xml.core.TemplateEngine.b` @AccessFlag PRIVATE;
  `org.simpleframework.xml.core.Template` `org.simpleframework.xml.core.TemplateEngine.c` @AccessFlag PRIVATE;
  `org.simpleframework.xml.filter.Filter` `org.simpleframework.xml.core.TemplateEngine.d` @AccessFlag PRIVATE;
  `int` `org.simpleframework.xml.core.TemplateEngine.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.TemplateEngine` v1 @kind this, `org.simpleframework.xml.filter.Filter` v2 @kind object) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.<init>:(Lorg/simpleframework/xml/filter/Filter;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L44f0d4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44f0da.  v0:= new `org.simpleframework.xml.core.Template`;
  #L44f0de.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/Template;.<init>:()V` @kind direct;
  #L44f0e4.  v1.`org.simpleframework.xml.core.TemplateEngine.a` @type ^`org.simpleframework.xml.core.Template` := v0 @kind object;
  #L44f0e8.  v0:= new `org.simpleframework.xml.core.Template`;
  #L44f0ec.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/Template;.<init>:()V` @kind direct;
  #L44f0f2.  v1.`org.simpleframework.xml.core.TemplateEngine.b` @type ^`org.simpleframework.xml.core.Template` := v0 @kind object;
  #L44f0f6.  v0:= new `org.simpleframework.xml.core.Template`;
  #L44f0fa.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/Template;.<init>:()V` @kind direct;
  #L44f100.  v1.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` := v0 @kind object;
  #L44f104.  v1.`org.simpleframework.xml.core.TemplateEngine.d` @type ^`org.simpleframework.xml.filter.Filter` := v2 @kind object;
  #L44f108.  return @kind void;
}
procedure `void` `a`(`org.simpleframework.xml.core.TemplateEngine` v3 @kind this) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L44f154.  v0:= v3.`org.simpleframework.xml.core.TemplateEngine.e` @type ^`int`;
  #L44f158.  v1:= v3.`org.simpleframework.xml.core.TemplateEngine.a` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f15c.  v2:= v1.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f160.  if v0 >= v2 then goto L44f190;
  #L44f164.  v1:= v1.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L44f168.  v2:= v0 + 1;
  #L44f16c.  v3.`org.simpleframework.xml.core.TemplateEngine.e` @type ^`int` := v2;
  #L44f170.  v0:= v1[v0] @kind char;
  #L44f174.  v1:= 125I;
  #L44f178.  if v0 != v1 then goto L44f184;
  #L44f17c.  call `c`(v3) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.c:()V` @kind direct;
  #L44f182.  goto L44f190;
  #L44f184.  v1:= v3.`org.simpleframework.xml.core.TemplateEngine.b` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f188.  call `append`(v1, v0) @signature `Lorg/simpleframework/xml/core/Template;.append:(C)V` @kind virtual;
  #L44f18e.  goto L44f154;
  #L44f190.  v0:= v3.`org.simpleframework.xml.core.TemplateEngine.b` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f194.  call temp:= `length`(v0) @signature `Lorg/simpleframework/xml/core/Template;.length:()I` @kind virtual;
  #L44f19a.  v0:= temp;
  #L44f19c.  if v0 <= 0 then goto L44f1bc;
  #L44f1a0.  v0:= v3.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f1a4.  v1:= "${" @kind object;
  #L44f1a8.  call `append`(v0, v1) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L44f1ae.  v0:= v3.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f1b2.  v1:= v3.`org.simpleframework.xml.core.TemplateEngine.b` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f1b6.  call `append`(v0, v1) @signature `Lorg/simpleframework/xml/core/Template;.append:(Lorg/simpleframework/xml/core/Template;)V` @kind virtual;
  #L44f1bc.  return @kind void;
}
procedure `void` `b`(`org.simpleframework.xml.core.TemplateEngine` v5 @kind this) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44f1d0.  v0:= v5.`org.simpleframework.xml.core.TemplateEngine.e` @type ^`int`;
  #L44f1d4.  v1:= v5.`org.simpleframework.xml.core.TemplateEngine.a` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f1d8.  v2:= v1.`org.simpleframework.xml.core.Template.count` @type ^`int`;
  #L44f1dc.  if v0 >= v2 then goto L44f22c;
  #L44f1e0.  v1:= v1.`org.simpleframework.xml.core.Template.buf` @type ^`char`[] @kind object;
  #L44f1e4.  v3:= v0 + 1;
  #L44f1e8.  v5.`org.simpleframework.xml.core.TemplateEngine.e` @type ^`int` := v3;
  #L44f1ec.  v0:= v1[v0] @kind char;
  #L44f1f0.  v4:= 36I;
  #L44f1f4.  if v0 != v4 then goto L44f220;
  #L44f1f8.  if v3 >= v2 then goto L44f220;
  #L44f1fc.  v2:= v3 + 1;
  #L44f200.  v5.`org.simpleframework.xml.core.TemplateEngine.e` @type ^`int` := v2;
  #L44f204.  v1:= v1[v3] @kind char;
  #L44f208.  v3:= 123I;
  #L44f20c.  if v1 != v3 then goto L44f218;
  #L44f210.  call `a`(v5) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.a:()V` @kind direct;
  #L44f216.  goto L44f1d0;
  #L44f218.  v2:= v2 + -1;
  #L44f21c.  v5.`org.simpleframework.xml.core.TemplateEngine.e` @type ^`int` := v2;
  #L44f220.  v1:= v5.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f224.  call `append`(v1, v0) @signature `Lorg/simpleframework/xml/core/Template;.append:(C)V` @kind virtual;
  #L44f22a.  goto L44f1d0;
  #L44f22c.  return @kind void;
}
procedure `void` `c`(`org.simpleframework.xml.core.TemplateEngine` v1 @kind this) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L44f240.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.b` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f244.  call temp:= `length`(v0) @signature `Lorg/simpleframework/xml/core/Template;.length:()I` @kind virtual;
  #L44f24a.  v0:= temp;
  #L44f24c.  if v0 <= 0 then goto L44f25a;
  #L44f250.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.b` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f254.  call `e`(v1, v0) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.e:(Lorg/simpleframework/xml/core/Template;)V` @kind direct;
  #L44f25a.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.b` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f25e.  call `clear`(v0) @signature `Lorg/simpleframework/xml/core/Template;.clear:()V` @kind virtual;
  #L44f264.  return @kind void;
}
procedure `void` `d`(`org.simpleframework.xml.core.TemplateEngine` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.d:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L44f278.  v0:= v2.`org.simpleframework.xml.core.TemplateEngine.d` @type ^`org.simpleframework.xml.filter.Filter` @kind object;
  #L44f27c.  call temp:= `replace`(v0, v3) @signature `Lorg/simpleframework/xml/filter/Filter;.replace:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L44f282.  v0:= temp @kind object;
  #L44f284.  if v0 != 0 then goto L44f2b0;
  #L44f288.  v0:= v2.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f28c.  v1:= "${" @kind object;
  #L44f290.  call `append`(v0, v1) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L44f296.  v0:= v2.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f29a.  call `append`(v0, v3) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L44f2a0.  v3:= v2.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f2a4.  v0:= "}" @kind object;
  #L44f2a8.  call `append`(v3, v0) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L44f2ae.  goto L44f2ba;
  #L44f2b0.  v3:= v2.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f2b4.  call `append`(v3, v0) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L44f2ba.  return @kind void;
}
procedure `void` `e`(`org.simpleframework.xml.core.TemplateEngine` v0 @kind this, `org.simpleframework.xml.core.Template` v1 @kind object) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.e:(Lorg/simpleframework/xml/core/Template;)V` @AccessFlag PRIVATE {
    temp;

  #L44f2cc.  call temp:= `toString`(v1) @signature `Lorg/simpleframework/xml/core/Template;.toString:()Ljava/lang/String;` @kind virtual;
  #L44f2d2.  v1:= temp @kind object;
  #L44f2d4.  call `d`(v0, v1) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.d:(Ljava/lang/String;)V` @kind direct;
  #L44f2da.  return @kind void;
}
procedure `void` `clear`(`org.simpleframework.xml.core.TemplateEngine` v1 @kind this) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f11c.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.b` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f120.  call `clear`(v0) @signature `Lorg/simpleframework/xml/core/Template;.clear:()V` @kind virtual;
  #L44f126.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f12a.  call `clear`(v0) @signature `Lorg/simpleframework/xml/core/Template;.clear:()V` @kind virtual;
  #L44f130.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.a` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f134.  call `clear`(v0) @signature `Lorg/simpleframework/xml/core/Template;.clear:()V` @kind virtual;
  #L44f13a.  v0:= 0I;
  #L44f13c.  v1.`org.simpleframework.xml.core.TemplateEngine.e` @type ^`int` := v0;
  #L44f140.  return @kind void;
}
procedure `java.lang.String` `process`(`org.simpleframework.xml.core.TemplateEngine` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.process:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f078.  v0:= 36I;
  #L44f07c.  call temp:= `indexOf`(v2, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L44f082.  v0:= temp;
  #L44f084.  if v0 >= 0 then goto L44f08a;
  #L44f088.  return v2 @kind object;
  #L44f08a.  v0:= v1.`org.simpleframework.xml.core.TemplateEngine.a` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f08e.  call `append`(v0, v2) @signature `Lorg/simpleframework/xml/core/Template;.append:(Ljava/lang/String;)V` @kind virtual;
  #L44f094.  call `b`(v1) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.b:()V` @kind direct;
  #L44f09a.  v2:= v1.`org.simpleframework.xml.core.TemplateEngine.c` @type ^`org.simpleframework.xml.core.Template` @kind object;
  #L44f09e.  call temp:= `toString`(v2) @signature `Lorg/simpleframework/xml/core/Template;.toString:()Ljava/lang/String;` @kind virtual;
  #L44f0a4.  v2:= temp @kind object;
  #L44f0a6.  call `clear`(v1) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.clear:()V` @kind virtual;
  #L44f0ac.  return v2 @kind object;
  #L44f0ae.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44f0b0.  call `clear`(v1) @signature `Lorg/simpleframework/xml/core/TemplateEngine;.clear:()V` @kind virtual;
  #L44f0b6.  throw v2;
  catch `java.lang.Throwable` @[L44f08a..L44f0a6] goto L44f0ae;
}
