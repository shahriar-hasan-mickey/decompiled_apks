record `org.simpleframework.xml.core.CompositeKey` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.CompositeKey.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Traverser` `org.simpleframework.xml.core.CompositeKey.b` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.Style` `org.simpleframework.xml.core.CompositeKey.c` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Entry` `org.simpleframework.xml.core.CompositeKey.d` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.CompositeKey.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.CompositeKey` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.core.Entry` v3 @kind object, `org.simpleframework.xml.strategy.Type` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeKey;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/core/Entry;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L43edc4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43edca.  v0:= new `org.simpleframework.xml.core.Traverser`;
  #L43edce.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/core/Traverser;.<init>:(Lorg/simpleframework/xml/core/Context;)V` @kind direct;
  #L43edd4.  v1.`org.simpleframework.xml.core.CompositeKey.b` @type ^`org.simpleframework.xml.core.Traverser` := v0 @kind object;
  #L43edd8.  call temp:= `getStyle`(v2) @signature `Lorg/simpleframework/xml/core/Context;.getStyle:()Lorg/simpleframework/xml/stream/Style;` @kind interface;
  #L43edde.  v0:= temp @kind object;
  #L43ede0.  v1.`org.simpleframework.xml.core.CompositeKey.c` @type ^`org.simpleframework.xml.stream.Style` := v0 @kind object;
  #L43ede4.  v1.`org.simpleframework.xml.core.CompositeKey.a` @type ^`org.simpleframework.xml.core.Context` := v2 @kind object;
  #L43ede8.  v1.`org.simpleframework.xml.core.CompositeKey.d` @type ^`org.simpleframework.xml.core.Entry` := v3 @kind object;
  #L43edec.  v1.`org.simpleframework.xml.core.CompositeKey.e` @type ^`org.simpleframework.xml.strategy.Type` := v4 @kind object;
  #L43edf0.  return @kind void;
}
procedure `java.lang.Object` `a`(`org.simpleframework.xml.core.CompositeKey` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeKey;.a:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L43ed6c.  v0:= v2.`org.simpleframework.xml.core.CompositeKey.c` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L43ed70.  call temp:= `getElement`(v0, v4) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L43ed76.  v4:= temp @kind object;
  #L43ed78.  v0:= v2.`org.simpleframework.xml.core.CompositeKey.e` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43ed7c.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L43ed82.  v0:= temp @kind object;
  #L43ed84.  if v4 == 0 then goto L43ed90;
  #L43ed88.  call temp:= `getNext`(v3, v4) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L43ed8e.  v3:= temp @kind object;
  #L43ed90.  v4:= 0I;
  #L43ed92.  if v3 != 0 then goto L43ed98;
  #L43ed96.  return v4 @kind object;
  #L43ed98.  call temp:= `isEmpty`(v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.isEmpty:()Z` @kind interface;
  #L43ed9e.  v1:= temp;
  #L43eda0.  if v1 == 0 then goto L43eda6;
  #L43eda4.  return v4 @kind object;
  #L43eda6.  v4:= v2.`org.simpleframework.xml.core.CompositeKey.b` @type ^`org.simpleframework.xml.core.Traverser` @kind object;
  #L43edaa.  call temp:= `read`(v4, v3, v0) @signature `Lorg/simpleframework/xml/core/Traverser;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @kind virtual;
  #L43edb0.  v3:= temp @kind object;
  #L43edb2.  return v3 @kind object;
}
procedure `boolean` `b`(`org.simpleframework.xml.core.CompositeKey` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeKey;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L43ec30.  v0:= v2.`org.simpleframework.xml.core.CompositeKey.c` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L43ec34.  call temp:= `getElement`(v0, v4) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L43ec3a.  v4:= temp @kind object;
  #L43ec3c.  call temp:= `getNext`(v3, v4) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L43ec42.  v3:= temp @kind object;
  #L43ec44.  v4:= v2.`org.simpleframework.xml.core.CompositeKey.e` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43ec48.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L43ec4e.  v4:= temp @kind object;
  #L43ec50.  v0:= 1I;
  #L43ec52.  if v3 != 0 then goto L43ec58;
  #L43ec56.  return v0;
  #L43ec58.  call temp:= `isEmpty`(v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.isEmpty:()Z` @kind interface;
  #L43ec5e.  v1:= temp;
  #L43ec60.  if v1 == 0 then goto L43ec66;
  #L43ec64.  return v0;
  #L43ec66.  v0:= v2.`org.simpleframework.xml.core.CompositeKey.b` @type ^`org.simpleframework.xml.core.Traverser` @kind object;
  #L43ec6a.  call temp:= `validate`(v0, v3, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.validate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @kind virtual;
  #L43ec70.  v3:= temp;
  #L43ec72.  return v3;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.CompositeKey` v4 @kind this, `org.simpleframework.xml.stream.InputNode` v5 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeKey;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43ec84.  call temp:= `getPosition`(v5) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L43ec8a.  v0:= temp @kind object;
  #L43ec8c.  v1:= v4.`org.simpleframework.xml.core.CompositeKey.e` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43ec90.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L43ec96.  v1:= temp @kind object;
  #L43ec98.  v2:= v4.`org.simpleframework.xml.core.CompositeKey.d` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L43ec9c.  call temp:= `getKey`(v2) @signature `Lorg/simpleframework/xml/core/Entry;.getKey:()Ljava/lang/String;` @kind virtual;
  #L43eca2.  v2:= temp @kind object;
  #L43eca4.  if v2 != 0 then goto L43ecb4;
  #L43eca8.  v2:= v4.`org.simpleframework.xml.core.CompositeKey.a` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L43ecac.  call temp:= `getName`(v2, v1) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L43ecb2.  v2:= temp @kind object;
  #L43ecb4.  v3:= v4.`org.simpleframework.xml.core.CompositeKey.d` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L43ecb8.  call temp:= `isAttribute`(v3) @signature `Lorg/simpleframework/xml/core/Entry;.isAttribute:()Z` @kind virtual;
  #L43ecbe.  v3:= temp;
  #L43ecc0.  if v3 != 0 then goto L43ecce;
  #L43ecc4.  call temp:= `a`(v4, v5, v2) @signature `Lorg/simpleframework/xml/core/CompositeKey;.a:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Ljava/lang/Object;` @kind direct;
  #L43ecca.  v5:= temp @kind object;
  #L43eccc.  return v5 @kind object;
  #L43ecce.  v5:= new `org.simpleframework.xml.core.AttributeException`;
  #L43ecd2.  v2:= 3I;
  #L43ecd4.  v2:= new `java.lang.Object`[v2];
  #L43ecd8.  v3:= 0I;
  #L43ecda.  v2[v3]:= v1 @kind object;
  #L43ecde.  v1:= v4.`org.simpleframework.xml.core.CompositeKey.d` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L43ece2.  v3:= 1I;
  #L43ece4.  v2[v3]:= v1 @kind object;
  #L43ece8.  v1:= 2I;
  #L43ecea.  v2[v1]:= v0 @kind object;
  #L43ecee.  v0:= "Can not have %s as an attribute for %s at %s" @kind object;
  #L43ecf2.  call `<init>`(v5, v0, v2) @signature `Lorg/simpleframework/xml/core/AttributeException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L43ecf8.  throw v5;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.CompositeKey` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeKey;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43ed0c.  call temp:= `getPosition`(v4) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L43ed12.  v0:= temp @kind object;
  #L43ed14.  v1:= v3.`org.simpleframework.xml.core.CompositeKey.e` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43ed18.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L43ed1e.  v1:= temp @kind object;
  #L43ed20.  if v5 != 0 then goto L43ed2e;
  #L43ed24.  call temp:= `read`(v3, v4) @signature `Lorg/simpleframework/xml/core/CompositeKey;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L43ed2a.  v4:= temp @kind object;
  #L43ed2c.  return v4 @kind object;
  #L43ed2e.  v4:= new `org.simpleframework.xml.core.PersistenceException`;
  #L43ed32.  v5:= 3I;
  #L43ed34.  v5:= new `java.lang.Object`[v5];
  #L43ed38.  v2:= 0I;
  #L43ed3a.  v5[v2]:= v1 @kind object;
  #L43ed3e.  v1:= v3.`org.simpleframework.xml.core.CompositeKey.d` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L43ed42.  v2:= 1I;
  #L43ed44.  v5[v2]:= v1 @kind object;
  #L43ed48.  v1:= 2I;
  #L43ed4a.  v5[v1]:= v0 @kind object;
  #L43ed4e.  v0:= "Can not read key of %s for %s at %s" @kind object;
  #L43ed52.  call `<init>`(v4, v0, v5) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L43ed58.  throw v4;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.CompositeKey` v4 @kind this, `org.simpleframework.xml.stream.InputNode` v5 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeKey;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43eba8.  call temp:= `getPosition`(v5) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L43ebae.  v0:= temp @kind object;
  #L43ebb0.  v1:= v4.`org.simpleframework.xml.core.CompositeKey.e` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43ebb4.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L43ebba.  v1:= temp @kind object;
  #L43ebbc.  v2:= v4.`org.simpleframework.xml.core.CompositeKey.d` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L43ebc0.  call temp:= `getKey`(v2) @signature `Lorg/simpleframework/xml/core/Entry;.getKey:()Ljava/lang/String;` @kind virtual;
  #L43ebc6.  v2:= temp @kind object;
  #L43ebc8.  if v2 != 0 then goto L43ebd8;
  #L43ebcc.  v2:= v4.`org.simpleframework.xml.core.CompositeKey.a` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L43ebd0.  call temp:= `getName`(v2, v1) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L43ebd6.  v2:= temp @kind object;
  #L43ebd8.  v3:= v4.`org.simpleframework.xml.core.CompositeKey.d` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L43ebdc.  call temp:= `isAttribute`(v3) @signature `Lorg/simpleframework/xml/core/Entry;.isAttribute:()Z` @kind virtual;
  #L43ebe2.  v3:= temp;
  #L43ebe4.  if v3 != 0 then goto L43ebf2;
  #L43ebe8.  call temp:= `b`(v4, v5, v2) @signature `Lorg/simpleframework/xml/core/CompositeKey;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Z` @kind direct;
  #L43ebee.  v5:= temp;
  #L43ebf0.  return v5;
  #L43ebf2.  v5:= new `org.simpleframework.xml.core.ElementException`;
  #L43ebf6.  v2:= 3I;
  #L43ebf8.  v2:= new `java.lang.Object`[v2];
  #L43ebfc.  v3:= 0I;
  #L43ebfe.  v2[v3]:= v1 @kind object;
  #L43ec02.  v1:= v4.`org.simpleframework.xml.core.CompositeKey.d` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L43ec06.  v3:= 1I;
  #L43ec08.  v2[v3]:= v1 @kind object;
  #L43ec0c.  v1:= 2I;
  #L43ec0e.  v2[v1]:= v0 @kind object;
  #L43ec12.  v0:= "Can not have %s as an attribute for %s at %s" @kind object;
  #L43ec16.  call `<init>`(v5, v0, v2) @signature `Lorg/simpleframework/xml/core/ElementException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L43ec1c.  throw v5;
}
procedure `void` `write`(`org.simpleframework.xml.core.CompositeKey` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeKey;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43ee04.  v0:= v3.`org.simpleframework.xml.core.CompositeKey.e` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43ee08.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L43ee0e.  v0:= temp @kind object;
  #L43ee10.  v1:= v3.`org.simpleframework.xml.core.CompositeKey.d` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L43ee14.  call temp:= `getKey`(v1) @signature `Lorg/simpleframework/xml/core/Entry;.getKey:()Ljava/lang/String;` @kind virtual;
  #L43ee1a.  v1:= temp @kind object;
  #L43ee1c.  v2:= v3.`org.simpleframework.xml.core.CompositeKey.d` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L43ee20.  call temp:= `isAttribute`(v2) @signature `Lorg/simpleframework/xml/core/Entry;.isAttribute:()Z` @kind virtual;
  #L43ee26.  v2:= temp;
  #L43ee28.  if v2 != 0 then goto L43ee54;
  #L43ee2c.  if v1 != 0 then goto L43ee3c;
  #L43ee30.  v1:= v3.`org.simpleframework.xml.core.CompositeKey.a` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L43ee34.  call temp:= `getName`(v1, v0) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L43ee3a.  v1:= temp @kind object;
  #L43ee3c.  v2:= v3.`org.simpleframework.xml.core.CompositeKey.c` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L43ee40.  call temp:= `getElement`(v2, v1) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L43ee46.  v1:= temp @kind object;
  #L43ee48.  v2:= v3.`org.simpleframework.xml.core.CompositeKey.b` @type ^`org.simpleframework.xml.core.Traverser` @kind object;
  #L43ee4c.  call `write`(v2, v4, v5, v0, v1) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)V` @kind virtual;
  #L43ee52.  return @kind void;
  #L43ee54.  v4:= new `org.simpleframework.xml.core.ElementException`;
  #L43ee58.  v5:= 2I;
  #L43ee5a.  v5:= new `java.lang.Object`[v5];
  #L43ee5e.  v1:= 0I;
  #L43ee60.  v5[v1]:= v0 @kind object;
  #L43ee64.  v0:= v3.`org.simpleframework.xml.core.CompositeKey.d` @type ^`org.simpleframework.xml.core.Entry` @kind object;
  #L43ee68.  v1:= 1I;
  #L43ee6a.  v5[v1]:= v0 @kind object;
  #L43ee6e.  v0:= "Can not have %s as an attribute for %s" @kind object;
  #L43ee72.  call `<init>`(v4, v0, v5) @signature `Lorg/simpleframework/xml/core/ElementException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L43ee78.  throw v4;
}
