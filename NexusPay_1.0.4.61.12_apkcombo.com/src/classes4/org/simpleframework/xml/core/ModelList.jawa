record `org.simpleframework.xml.core.ModelList` @kind class @AccessFlag PUBLIC extends `java.util.ArrayList` @kind class {
}
procedure `void` `<init>`(`org.simpleframework.xml.core.ModelList` v0 @kind this) @signature `Lorg/simpleframework/xml/core/ModelList;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L448640.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L448646.  return @kind void;
}
procedure `org.simpleframework.xml.core.ModelList` `build`(`org.simpleframework.xml.core.ModelList` v3 @kind this) @signature `Lorg/simpleframework/xml/core/ModelList;.build:()Lorg/simpleframework/xml/core/ModelList;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4485fc.  v0:= new `org.simpleframework.xml.core.ModelList`;
  #L448600.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/ModelList;.<init>:()V` @kind direct;
  #L448606.  call temp:= `iterator`(v3) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L44860c.  v1:= temp @kind object;
  #L44860e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L448614.  v2:= temp;
  #L448616.  if v2 == 0 then goto L44862e;
  #L44861a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L448620.  v2:= temp @kind object;
  #L448622.  v2:= (`org.simpleframework.xml.core.Model`) v2 @kind object;
  #L448626.  call `register`(v0, v2) @signature `Lorg/simpleframework/xml/core/ModelList;.register:(Lorg/simpleframework/xml/core/Model;)V` @kind virtual;
  #L44862c.  goto L44860e;
  #L44862e.  return v0 @kind object;
}
procedure `boolean` `isEmpty`(`org.simpleframework.xml.core.ModelList` v2 @kind this) @signature `Lorg/simpleframework/xml/core/ModelList;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L448544.  call temp:= `iterator`(v2) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L44854a.  v0:= temp @kind object;
  #L44854c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L448552.  v1:= temp;
  #L448554.  if v1 == 0 then goto L448578;
  #L448558.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L44855e.  v1:= temp @kind object;
  #L448560.  v1:= (`org.simpleframework.xml.core.Model`) v1 @kind object;
  #L448564.  if v1 == 0 then goto L44854c;
  #L448568.  call temp:= `isEmpty`(v1) @signature `Lorg/simpleframework/xml/core/Model;.isEmpty:()Z` @kind interface;
  #L44856e.  v1:= temp;
  #L448570.  if v1 != 0 then goto L44854c;
  #L448574.  v0:= 0I;
  #L448576.  return v0;
  #L448578.  v0:= 1I;
  #L44857a.  return v0;
}
procedure `org.simpleframework.xml.core.Model` `lookup`(`org.simpleframework.xml.core.ModelList` v1 @kind this, `int` v2 ) @signature `Lorg/simpleframework/xml/core/ModelList;.lookup:(I)Lorg/simpleframework/xml/core/Model;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44858c.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L448592.  v0:= temp;
  #L448594.  if v2 > v0 then goto L4485aa;
  #L448598.  v2:= v2 + -1;
  #L44859c.  call temp:= `get`(v1, v2) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4485a2.  v2:= temp @kind object;
  #L4485a4.  v2:= (`org.simpleframework.xml.core.Model`) v2 @kind object;
  #L4485a8.  return v2 @kind object;
  #L4485aa.  v2:= 0I;
  #L4485ac.  return v2 @kind object;
}
procedure `void` `register`(`org.simpleframework.xml.core.ModelList` v4 @kind this, `org.simpleframework.xml.core.Model` v5 @kind object) @signature `Lorg/simpleframework/xml/core/ModelList;.register:(Lorg/simpleframework/xml/core/Model;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L448658.  call temp:= `getIndex`(v5) @signature `Lorg/simpleframework/xml/core/Model;.getIndex:()I` @kind interface;
  #L44865e.  v0:= temp;
  #L448660.  call temp:= `size`(v4) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L448666.  v1:= temp;
  #L448668.  v2:= 0I;
  #L44866a.  if v2 >= v0 then goto L44868e;
  #L44866e.  if v2 < v1 then goto L44867a;
  #L448672.  v3:= 0I;
  #L448674.  call temp:= `add`(v4, v3) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L44867a.  v3:= v0 + -1;
  #L44867e.  if v2 != v3 then goto L448688;
  #L448682.  call temp:= `set`(v4, v3, v5) @signature `Ljava/util/ArrayList;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L448688.  v2:= v2 + 1;
  #L44868c.  goto L44866a;
  #L44868e.  return @kind void;
}
procedure `org.simpleframework.xml.core.Model` `take`(`org.simpleframework.xml.core.ModelList` v2 @kind this) @signature `Lorg/simpleframework/xml/core/ModelList;.take:()Lorg/simpleframework/xml/core/Model;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4485c0.  call temp:= `isEmpty`(v2) @signature `Lorg/simpleframework/xml/core/ModelList;.isEmpty:()Z` @kind virtual;
  #L4485c6.  v0:= temp;
  #L4485c8.  if v0 != 0 then goto L4485e8;
  #L4485cc.  v0:= 0I;
  #L4485ce.  call temp:= `remove`(v2, v0) @signature `Ljava/util/ArrayList;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L4485d4.  v0:= temp @kind object;
  #L4485d6.  v0:= (`org.simpleframework.xml.core.Model`) v0 @kind object;
  #L4485da.  call temp:= `isEmpty`(v0) @signature `Lorg/simpleframework/xml/core/Model;.isEmpty:()Z` @kind interface;
  #L4485e0.  v1:= temp;
  #L4485e2.  if v1 != 0 then goto L4485c0;
  #L4485e6.  return v0 @kind object;
  #L4485e8.  v0:= 0I;
  #L4485ea.  return v0 @kind object;
}
