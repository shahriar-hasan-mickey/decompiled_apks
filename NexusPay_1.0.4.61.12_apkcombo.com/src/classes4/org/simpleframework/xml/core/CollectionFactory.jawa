record `org.simpleframework.xml.core.CollectionFactory` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Factory` @kind class {
}
procedure `void` `<init>`(`org.simpleframework.xml.core.CollectionFactory` v0 @kind this, `org.simpleframework.xml.core.Context` v1 @kind object, `org.simpleframework.xml.strategy.Type` v2 @kind object) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43e0b0.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L43e0b6.  return @kind void;
}
procedure `boolean` `b`(`org.simpleframework.xml.core.CollectionFactory` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.b:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L43deb8.  v0:= constclass @type ^`java.util.Collection` @kind object;
  #L43debc.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L43dec2.  v2:= temp;
  #L43dec4.  return v2;
}
procedure `java.lang.Class` `getConversion`(`org.simpleframework.xml.core.CollectionFactory` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43ded8.  v0:= constclass @type ^`java.util.ArrayList` @kind object;
  #L43dedc.  call temp:= `isAssignableFrom`(v4, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L43dee2.  v0:= temp;
  #L43dee4.  if v0 == 0 then goto L43deee;
  #L43dee8.  v4:= constclass @type ^`java.util.ArrayList` @kind object;
  #L43deec.  return v4 @kind object;
  #L43deee.  v0:= constclass @type ^`java.util.HashSet` @kind object;
  #L43def2.  call temp:= `isAssignableFrom`(v4, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L43def8.  v0:= temp;
  #L43defa.  if v0 == 0 then goto L43df04;
  #L43defe.  v4:= constclass @type ^`java.util.HashSet` @kind object;
  #L43df02.  return v4 @kind object;
  #L43df04.  v0:= constclass @type ^`java.util.TreeSet` @kind object;
  #L43df08.  call temp:= `isAssignableFrom`(v4, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L43df0e.  v0:= temp;
  #L43df10.  if v0 == 0 then goto L43df1a;
  #L43df14.  v4:= constclass @type ^`java.util.TreeSet` @kind object;
  #L43df18.  return v4 @kind object;
  #L43df1a.  v0:= new `org.simpleframework.xml.core.InstantiationException`;
  #L43df1e.  v1:= 2I;
  #L43df20.  v1:= new `java.lang.Object`[v1];
  #L43df24.  v2:= 0I;
  #L43df26.  v1[v2]:= v4 @kind object;
  #L43df2a.  v4:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43df2e.  v2:= 1I;
  #L43df30.  v1[v2]:= v4 @kind object;
  #L43df34.  v4:= "Cannot instantiate %s for %s" @kind object;
  #L43df38.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L43df3e.  throw v0;
}
procedure `java.lang.Object` `getInstance`(`org.simpleframework.xml.core.CollectionFactory` v4 @kind this) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43df50.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L43df56.  v0:= temp @kind object;
  #L43df58.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L43df5e.  v1:= temp;
  #L43df60.  if v1 != 0 then goto L43df6e;
  #L43df64.  call temp:= `getConversion`(v4, v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L43df6a.  v1:= temp @kind object;
  #L43df6c.  goto L43df70;
  #L43df6e.  v1:= v0 @kind object;
  #L43df70.  call temp:= `b`(v4, v1) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L43df76.  v2:= temp;
  #L43df78.  if v2 == 0 then goto L43df86;
  #L43df7c.  call temp:= `newInstance`(v1) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L43df82.  v0:= temp @kind object;
  #L43df84.  return v0 @kind object;
  #L43df86.  v1:= new `org.simpleframework.xml.core.InstantiationException`;
  #L43df8a.  v2:= 2I;
  #L43df8c.  v2:= new `java.lang.Object`[v2];
  #L43df90.  v3:= 0I;
  #L43df92.  v2[v3]:= v0 @kind object;
  #L43df96.  v0:= v4.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43df9a.  v3:= 1I;
  #L43df9c.  v2[v3]:= v0 @kind object;
  #L43dfa0.  v0:= "Invalid collection %s for %s" @kind object;
  #L43dfa4.  call `<init>`(v1, v0, v2) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L43dfaa.  throw v1;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.CollectionFactory` v3 @kind this, `org.simpleframework.xml.strategy.Value` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43dfbc.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L43dfc2.  v0:= temp @kind object;
  #L43dfc4.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L43dfca.  v1:= temp;
  #L43dfcc.  if v1 != 0 then goto L43dfd8;
  #L43dfd0.  call temp:= `getConversion`(v3, v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L43dfd6.  v0:= temp @kind object;
  #L43dfd8.  call temp:= `b`(v3, v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L43dfde.  v1:= temp;
  #L43dfe0.  if v1 == 0 then goto L43dff4;
  #L43dfe4.  v1:= new `org.simpleframework.xml.core.ConversionInstance`;
  #L43dfe8.  v2:= v3.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L43dfec.  call `<init>`(v1, v2, v4, v0) @signature `Lorg/simpleframework/xml/core/ConversionInstance;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Value;Ljava/lang/Class;)V` @kind direct;
  #L43dff2.  return v1 @kind object;
  #L43dff4.  v4:= new `org.simpleframework.xml.core.InstantiationException`;
  #L43dff8.  v1:= 2I;
  #L43dffa.  v1:= new `java.lang.Object`[v1];
  #L43dffe.  v2:= 0I;
  #L43e000.  v1[v2]:= v0 @kind object;
  #L43e004.  v0:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43e008.  v2:= 1I;
  #L43e00a.  v1[v2]:= v0 @kind object;
  #L43e00e.  v0:= "Invalid collection %s for %s" @kind object;
  #L43e012.  call `<init>`(v4, v0, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L43e018.  throw v4;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.CollectionFactory` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43e02c.  call temp:= `getOverride`(v3, v4) @signature `Lorg/simpleframework/xml/core/Factory;.getOverride:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @kind virtual;
  #L43e032.  v4:= temp @kind object;
  #L43e034.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L43e03a.  v0:= temp @kind object;
  #L43e03c.  if v4 == 0 then goto L43e04a;
  #L43e040.  call temp:= `getInstance`(v3, v4) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L43e046.  v4:= temp @kind object;
  #L43e048.  return v4 @kind object;
  #L43e04a.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L43e050.  v4:= temp;
  #L43e052.  if v4 != 0 then goto L43e05e;
  #L43e056.  call temp:= `getConversion`(v3, v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L43e05c.  v0:= temp @kind object;
  #L43e05e.  call temp:= `b`(v3, v0) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L43e064.  v4:= temp;
  #L43e066.  if v4 == 0 then goto L43e078;
  #L43e06a.  v4:= v3.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L43e06e.  call temp:= `getInstance`(v4, v0) @signature `Lorg/simpleframework/xml/core/Context;.getInstance:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Instance;` @kind interface;
  #L43e074.  v4:= temp @kind object;
  #L43e076.  return v4 @kind object;
  #L43e078.  v4:= new `org.simpleframework.xml.core.InstantiationException`;
  #L43e07c.  v1:= 2I;
  #L43e07e.  v1:= new `java.lang.Object`[v1];
  #L43e082.  v2:= 0I;
  #L43e084.  v1[v2]:= v0 @kind object;
  #L43e088.  v0:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43e08c.  v2:= 1I;
  #L43e08e.  v1[v2]:= v0 @kind object;
  #L43e092.  v0:= "Invalid collection %s for %s" @kind object;
  #L43e096.  call `<init>`(v4, v0, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L43e09c.  throw v4;
}
