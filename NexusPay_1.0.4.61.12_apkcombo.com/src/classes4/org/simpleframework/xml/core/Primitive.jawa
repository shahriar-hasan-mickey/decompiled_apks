record `org.simpleframework.xml.core.Primitive` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.core.PrimitiveFactory` `org.simpleframework.xml.core.Primitive.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.Primitive.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.core.Primitive.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `org.simpleframework.xml.core.Primitive.d` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.Primitive.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L44c32c.  v0:= 0I;
  #L44c32e.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @kind direct;
  #L44c334.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L44c348.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44c34e.  v0:= new `org.simpleframework.xml.core.PrimitiveFactory`;
  #L44c352.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L44c358.  v1.`org.simpleframework.xml.core.Primitive.a` @type ^`org.simpleframework.xml.core.PrimitiveFactory` := v0 @kind object;
  #L44c35c.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L44c362.  v0:= temp @kind object;
  #L44c364.  v1.`org.simpleframework.xml.core.Primitive.d` @type ^`java.lang.Class` := v0 @kind object;
  #L44c368.  v1.`org.simpleframework.xml.core.Primitive.b` @type ^`org.simpleframework.xml.core.Context` := v2 @kind object;
  #L44c36c.  v1.`org.simpleframework.xml.core.Primitive.c` @type ^`java.lang.String` := v4 @kind object;
  #L44c370.  v1.`org.simpleframework.xml.core.Primitive.e` @type ^`org.simpleframework.xml.strategy.Type` := v3 @kind object;
  #L44c374.  return @kind void;
}
procedure `java.lang.Object` `a`(`org.simpleframework.xml.core.Primitive` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.a:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L44c294.  v0:= v2.`org.simpleframework.xml.core.Primitive.a` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L44c298.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L44c29e.  v0:= temp @kind object;
  #L44c2a0.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L44c2a6.  v1:= temp;
  #L44c2a8.  if v1 != 0 then goto L44c2b6;
  #L44c2ac.  call temp:= `b`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.b:(Lorg/simpleframework/xml/stream/InputNode;Lorg/simpleframework/xml/core/Instance;)Ljava/lang/Object;` @kind direct;
  #L44c2b2.  v3:= temp @kind object;
  #L44c2b4.  return v3 @kind object;
  #L44c2b6.  call temp:= `getInstance`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getInstance:()Ljava/lang/Object;` @kind interface;
  #L44c2bc.  v3:= temp @kind object;
  #L44c2be.  return v3 @kind object;
}
procedure `java.lang.Object` `b`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `org.simpleframework.xml.core.Instance` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.b:(Lorg/simpleframework/xml/stream/InputNode;Lorg/simpleframework/xml/core/Instance;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L44c2d0.  v0:= v1.`org.simpleframework.xml.core.Primitive.d` @type ^`java.lang.Class` @kind object;
  #L44c2d4.  call temp:= `read`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @kind virtual;
  #L44c2da.  v2:= temp @kind object;
  #L44c2dc.  if v3 == 0 then goto L44c2e6;
  #L44c2e0.  call temp:= `setInstance`(v3, v2) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44c2e6.  return v2 @kind object;
}
procedure `java.lang.Object` `c`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.c:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L44c2f8.  v0:= v1.`org.simpleframework.xml.core.Primitive.b` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L44c2fc.  call temp:= `getProperty`(v0, v2) @signature `Lorg/simpleframework/xml/core/Context;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L44c302.  v2:= temp @kind object;
  #L44c304.  if v2 == 0 then goto L44c316;
  #L44c308.  v0:= v1.`org.simpleframework.xml.core.Primitive.a` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L44c30c.  call temp:= `getInstance`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.getInstance:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;` @kind virtual;
  #L44c312.  v2:= temp @kind object;
  #L44c314.  return v2 @kind object;
  #L44c316.  v2:= 0I;
  #L44c318.  return v2 @kind object;
}
procedure `boolean` `d`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.d:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L44c1a0.  v0:= v1.`org.simpleframework.xml.core.Primitive.a` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L44c1a4.  call temp:= `getInstance`(v0, v2) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L44c1aa.  v2:= temp @kind object;
  #L44c1ac.  call temp:= `isReference`(v2) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L44c1b2.  v0:= temp;
  #L44c1b4.  if v0 != 0 then goto L44c1c0;
  #L44c1b8.  v0:= 0I;
  #L44c1ba.  call temp:= `setInstance`(v2, v0) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44c1c0.  v2:= 1I;
  #L44c1c2.  return v2;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c1d4.  call temp:= `isElement`(v2) @signature `Lorg/simpleframework/xml/stream/InputNode;.isElement:()Z` @kind interface;
  #L44c1da.  v0:= temp;
  #L44c1dc.  if v0 == 0 then goto L44c1ea;
  #L44c1e0.  call temp:= `a`(v1, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.a:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind direct;
  #L44c1e6.  v2:= temp @kind object;
  #L44c1e8.  return v2 @kind object;
  #L44c1ea.  v0:= v1.`org.simpleframework.xml.core.Primitive.d` @type ^`java.lang.Class` @kind object;
  #L44c1ee.  call temp:= `read`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @kind virtual;
  #L44c1f4.  v2:= temp @kind object;
  #L44c1f6.  return v2 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c208.  call temp:= `getValue`(v2) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L44c20e.  v2:= temp @kind object;
  #L44c210.  if v2 != 0 then goto L44c218;
  #L44c214.  v2:= 0I;
  #L44c216.  return v2 @kind object;
  #L44c218.  v0:= v1.`org.simpleframework.xml.core.Primitive.c` @type ^`java.lang.String` @kind object;
  #L44c21c.  if v0 == 0 then goto L44c232;
  #L44c220.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L44c226.  v0:= temp;
  #L44c228.  if v0 == 0 then goto L44c232;
  #L44c22c.  v2:= v1.`org.simpleframework.xml.core.Primitive.c` @type ^`java.lang.String` @kind object;
  #L44c230.  return v2 @kind object;
  #L44c232.  call temp:= `c`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/Primitive;.c:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;` @kind direct;
  #L44c238.  v2:= temp @kind object;
  #L44c23a.  return v2 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Primitive` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44c24c.  if v4 != 0 then goto L44c25a;
  #L44c250.  call temp:= `read`(v2, v3) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L44c256.  v3:= temp @kind object;
  #L44c258.  return v3 @kind object;
  #L44c25a.  v3:= new `org.simpleframework.xml.core.PersistenceException`;
  #L44c25e.  v4:= 2I;
  #L44c260.  v4:= new `java.lang.Object`[v4];
  #L44c264.  v0:= v2.`org.simpleframework.xml.core.Primitive.d` @type ^`java.lang.Class` @kind object;
  #L44c268.  v1:= 0I;
  #L44c26a.  v4[v1]:= v0 @kind object;
  #L44c26e.  v0:= v2.`org.simpleframework.xml.core.Primitive.e` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L44c272.  v1:= 1I;
  #L44c274.  v4[v1]:= v0 @kind object;
  #L44c278.  v0:= "Can not read existing %s for %s" @kind object;
  #L44c27c.  call `<init>`(v3, v0, v4) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L44c282.  throw v3;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c170.  call temp:= `isElement`(v2) @signature `Lorg/simpleframework/xml/stream/InputNode;.isElement:()Z` @kind interface;
  #L44c176.  v0:= temp;
  #L44c178.  if v0 == 0 then goto L44c184;
  #L44c17c.  call temp:= `d`(v1, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.d:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind direct;
  #L44c182.  goto L44c18a;
  #L44c184.  call temp:= `getValue`(v2) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L44c18a.  v2:= 1I;
  #L44c18c.  return v2;
}
procedure `void` `write`(`org.simpleframework.xml.core.Primitive` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Primitive;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c388.  v0:= v1.`org.simpleframework.xml.core.Primitive.a` @type ^`org.simpleframework.xml.core.PrimitiveFactory` @kind object;
  #L44c38c.  call temp:= `getText`(v0, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.getText:(Ljava/lang/Object;)Ljava/lang/String;` @kind virtual;
  #L44c392.  v3:= temp @kind object;
  #L44c394.  if v3 == 0 then goto L44c39e;
  #L44c398.  call `setValue`(v2, v3) @signature `Lorg/simpleframework/xml/stream/OutputNode;.setValue:(Ljava/lang/String;)V` @kind interface;
  #L44c39e.  return @kind void;
}
