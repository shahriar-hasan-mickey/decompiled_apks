record `org.simpleframework.xml.core.Caller` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.core.Function` `org.simpleframework.xml.core.Caller.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Function` `org.simpleframework.xml.core.Caller.b` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Function` `org.simpleframework.xml.core.Caller.c` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Function` `org.simpleframework.xml.core.Caller.d` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Function` `org.simpleframework.xml.core.Caller.e` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Function` `org.simpleframework.xml.core.Caller.f` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.Caller.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Caller` v1 @kind this, `org.simpleframework.xml.core.Scanner` v2 @kind object, `org.simpleframework.xml.core.Context` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Caller;.<init>:(Lorg/simpleframework/xml/core/Scanner;Lorg/simpleframework/xml/core/Context;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L43d58c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43d592.  call temp:= `getValidate`(v2) @signature `Lorg/simpleframework/xml/core/Scanner;.getValidate:()Lorg/simpleframework/xml/core/Function;` @kind interface;
  #L43d598.  v0:= temp @kind object;
  #L43d59a.  v1.`org.simpleframework.xml.core.Caller.b` @type ^`org.simpleframework.xml.core.Function` := v0 @kind object;
  #L43d59e.  call temp:= `getComplete`(v2) @signature `Lorg/simpleframework/xml/core/Scanner;.getComplete:()Lorg/simpleframework/xml/core/Function;` @kind interface;
  #L43d5a4.  v0:= temp @kind object;
  #L43d5a6.  v1.`org.simpleframework.xml.core.Caller.d` @type ^`org.simpleframework.xml.core.Function` := v0 @kind object;
  #L43d5aa.  call temp:= `getReplace`(v2) @signature `Lorg/simpleframework/xml/core/Scanner;.getReplace:()Lorg/simpleframework/xml/core/Function;` @kind interface;
  #L43d5b0.  v0:= temp @kind object;
  #L43d5b2.  v1.`org.simpleframework.xml.core.Caller.e` @type ^`org.simpleframework.xml.core.Function` := v0 @kind object;
  #L43d5b6.  call temp:= `getResolve`(v2) @signature `Lorg/simpleframework/xml/core/Scanner;.getResolve:()Lorg/simpleframework/xml/core/Function;` @kind interface;
  #L43d5bc.  v0:= temp @kind object;
  #L43d5be.  v1.`org.simpleframework.xml.core.Caller.f` @type ^`org.simpleframework.xml.core.Function` := v0 @kind object;
  #L43d5c2.  call temp:= `getPersist`(v2) @signature `Lorg/simpleframework/xml/core/Scanner;.getPersist:()Lorg/simpleframework/xml/core/Function;` @kind interface;
  #L43d5c8.  v0:= temp @kind object;
  #L43d5ca.  v1.`org.simpleframework.xml.core.Caller.c` @type ^`org.simpleframework.xml.core.Function` := v0 @kind object;
  #L43d5ce.  call temp:= `getCommit`(v2) @signature `Lorg/simpleframework/xml/core/Scanner;.getCommit:()Lorg/simpleframework/xml/core/Function;` @kind interface;
  #L43d5d4.  v2:= temp @kind object;
  #L43d5d6.  v1.`org.simpleframework.xml.core.Caller.a` @type ^`org.simpleframework.xml.core.Function` := v2 @kind object;
  #L43d5da.  v1.`org.simpleframework.xml.core.Caller.g` @type ^`org.simpleframework.xml.core.Context` := v3 @kind object;
  #L43d5de.  return @kind void;
}
procedure `void` `commit`(`org.simpleframework.xml.core.Caller` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Caller;.commit:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d5f0.  v0:= v2.`org.simpleframework.xml.core.Caller.a` @type ^`org.simpleframework.xml.core.Function` @kind object;
  #L43d5f4.  if v0 == 0 then goto L43d602;
  #L43d5f8.  v1:= v2.`org.simpleframework.xml.core.Caller.g` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L43d5fc.  call temp:= `call`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Function;.call:(Lorg/simpleframework/xml/core/Context;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43d602.  return @kind void;
}
procedure `void` `complete`(`org.simpleframework.xml.core.Caller` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Caller;.complete:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d614.  v0:= v2.`org.simpleframework.xml.core.Caller.d` @type ^`org.simpleframework.xml.core.Function` @kind object;
  #L43d618.  if v0 == 0 then goto L43d626;
  #L43d61c.  v1:= v2.`org.simpleframework.xml.core.Caller.g` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L43d620.  call temp:= `call`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Function;.call:(Lorg/simpleframework/xml/core/Context;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43d626.  return @kind void;
}
procedure `void` `persist`(`org.simpleframework.xml.core.Caller` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Caller;.persist:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d638.  v0:= v2.`org.simpleframework.xml.core.Caller.c` @type ^`org.simpleframework.xml.core.Function` @kind object;
  #L43d63c.  if v0 == 0 then goto L43d64a;
  #L43d640.  v1:= v2.`org.simpleframework.xml.core.Caller.g` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L43d644.  call temp:= `call`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Function;.call:(Lorg/simpleframework/xml/core/Context;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43d64a.  return @kind void;
}
procedure `java.lang.Object` `replace`(`org.simpleframework.xml.core.Caller` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Caller;.replace:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d53c.  v0:= v2.`org.simpleframework.xml.core.Caller.e` @type ^`org.simpleframework.xml.core.Function` @kind object;
  #L43d540.  if v0 == 0 then goto L43d550;
  #L43d544.  v1:= v2.`org.simpleframework.xml.core.Caller.g` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L43d548.  call temp:= `call`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Function;.call:(Lorg/simpleframework/xml/core/Context;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43d54e.  v3:= temp @kind object;
  #L43d550.  return v3 @kind object;
}
procedure `java.lang.Object` `resolve`(`org.simpleframework.xml.core.Caller` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Caller;.resolve:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d564.  v0:= v2.`org.simpleframework.xml.core.Caller.f` @type ^`org.simpleframework.xml.core.Function` @kind object;
  #L43d568.  if v0 == 0 then goto L43d578;
  #L43d56c.  v1:= v2.`org.simpleframework.xml.core.Caller.g` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L43d570.  call temp:= `call`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Function;.call:(Lorg/simpleframework/xml/core/Context;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43d576.  v3:= temp @kind object;
  #L43d578.  return v3 @kind object;
}
procedure `void` `validate`(`org.simpleframework.xml.core.Caller` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Caller;.validate:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d65c.  v0:= v2.`org.simpleframework.xml.core.Caller.b` @type ^`org.simpleframework.xml.core.Function` @kind object;
  #L43d660.  if v0 == 0 then goto L43d66e;
  #L43d664.  v1:= v2.`org.simpleframework.xml.core.Caller.g` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L43d668.  call temp:= `call`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Function;.call:(Lorg/simpleframework/xml/core/Context;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43d66e.  return @kind void;
}
