record `org.simpleframework.xml.core.MapFactory` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Factory` @kind class {
}
procedure `void` `<init>`(`org.simpleframework.xml.core.MapFactory` v0 @kind this, `org.simpleframework.xml.core.Context` v1 @kind object, `org.simpleframework.xml.strategy.Type` v2 @kind object) @signature `Lorg/simpleframework/xml/core/MapFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44734c.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L447352.  return @kind void;
}
procedure `boolean` `b`(`org.simpleframework.xml.core.MapFactory` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/MapFactory;.b:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L447168.  v0:= constclass @type ^`java.util.Map` @kind object;
  #L44716c.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L447172.  v2:= temp;
  #L447174.  return v2;
}
procedure `java.lang.Class` `getConversion`(`org.simpleframework.xml.core.MapFactory` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MapFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L447188.  v0:= constclass @type ^`java.util.HashMap` @kind object;
  #L44718c.  call temp:= `isAssignableFrom`(v4, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L447192.  v0:= temp;
  #L447194.  if v0 == 0 then goto L44719e;
  #L447198.  v4:= constclass @type ^`java.util.HashMap` @kind object;
  #L44719c.  return v4 @kind object;
  #L44719e.  v0:= constclass @type ^`java.util.TreeMap` @kind object;
  #L4471a2.  call temp:= `isAssignableFrom`(v4, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L4471a8.  v0:= temp;
  #L4471aa.  if v0 == 0 then goto L4471b4;
  #L4471ae.  v4:= constclass @type ^`java.util.TreeMap` @kind object;
  #L4471b2.  return v4 @kind object;
  #L4471b4.  v0:= new `org.simpleframework.xml.core.InstantiationException`;
  #L4471b8.  v1:= 2I;
  #L4471ba.  v1:= new `java.lang.Object`[v1];
  #L4471be.  v2:= 0I;
  #L4471c0.  v1[v2]:= v4 @kind object;
  #L4471c4.  v4:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L4471c8.  v2:= 1I;
  #L4471ca.  v1[v2]:= v4 @kind object;
  #L4471ce.  v4:= "Cannot instantiate %s for %s" @kind object;
  #L4471d2.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4471d8.  throw v0;
}
procedure `java.lang.Object` `getInstance`(`org.simpleframework.xml.core.MapFactory` v4 @kind this) @signature `Lorg/simpleframework/xml/core/MapFactory;.getInstance:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4471ec.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L4471f2.  v0:= temp @kind object;
  #L4471f4.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L4471fa.  v1:= temp;
  #L4471fc.  if v1 != 0 then goto L44720a;
  #L447200.  call temp:= `getConversion`(v4, v0) @signature `Lorg/simpleframework/xml/core/MapFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L447206.  v1:= temp @kind object;
  #L447208.  goto L44720c;
  #L44720a.  v1:= v0 @kind object;
  #L44720c.  call temp:= `b`(v4, v1) @signature `Lorg/simpleframework/xml/core/MapFactory;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L447212.  v2:= temp;
  #L447214.  if v2 == 0 then goto L447222;
  #L447218.  call temp:= `newInstance`(v1) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L44721e.  v0:= temp @kind object;
  #L447220.  return v0 @kind object;
  #L447222.  v1:= new `org.simpleframework.xml.core.InstantiationException`;
  #L447226.  v2:= 2I;
  #L447228.  v2:= new `java.lang.Object`[v2];
  #L44722c.  v3:= 0I;
  #L44722e.  v2[v3]:= v0 @kind object;
  #L447232.  v0:= v4.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L447236.  v3:= 1I;
  #L447238.  v2[v3]:= v0 @kind object;
  #L44723c.  v0:= "Invalid map %s for %s" @kind object;
  #L447240.  call `<init>`(v1, v0, v2) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L447246.  throw v1;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.MapFactory` v3 @kind this, `org.simpleframework.xml.strategy.Value` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MapFactory;.getInstance:(Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L447258.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L44725e.  v0:= temp @kind object;
  #L447260.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L447266.  v1:= temp;
  #L447268.  if v1 != 0 then goto L447274;
  #L44726c.  call temp:= `getConversion`(v3, v0) @signature `Lorg/simpleframework/xml/core/MapFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L447272.  v0:= temp @kind object;
  #L447274.  call temp:= `b`(v3, v0) @signature `Lorg/simpleframework/xml/core/MapFactory;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L44727a.  v1:= temp;
  #L44727c.  if v1 == 0 then goto L447290;
  #L447280.  v1:= new `org.simpleframework.xml.core.ConversionInstance`;
  #L447284.  v2:= v3.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L447288.  call `<init>`(v1, v2, v4, v0) @signature `Lorg/simpleframework/xml/core/ConversionInstance;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Value;Ljava/lang/Class;)V` @kind direct;
  #L44728e.  return v1 @kind object;
  #L447290.  v4:= new `org.simpleframework.xml.core.InstantiationException`;
  #L447294.  v1:= 2I;
  #L447296.  v1:= new `java.lang.Object`[v1];
  #L44729a.  v2:= 0I;
  #L44729c.  v1[v2]:= v0 @kind object;
  #L4472a0.  v0:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L4472a4.  v2:= 1I;
  #L4472a6.  v1[v2]:= v0 @kind object;
  #L4472aa.  v0:= "Invalid map %s for %s" @kind object;
  #L4472ae.  call `<init>`(v4, v0, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4472b4.  throw v4;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.MapFactory` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MapFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4472c8.  call temp:= `getOverride`(v3, v4) @signature `Lorg/simpleframework/xml/core/Factory;.getOverride:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @kind virtual;
  #L4472ce.  v4:= temp @kind object;
  #L4472d0.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L4472d6.  v0:= temp @kind object;
  #L4472d8.  if v4 == 0 then goto L4472e6;
  #L4472dc.  call temp:= `getInstance`(v3, v4) @signature `Lorg/simpleframework/xml/core/MapFactory;.getInstance:(Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L4472e2.  v4:= temp @kind object;
  #L4472e4.  return v4 @kind object;
  #L4472e6.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L4472ec.  v4:= temp;
  #L4472ee.  if v4 != 0 then goto L4472fa;
  #L4472f2.  call temp:= `getConversion`(v3, v0) @signature `Lorg/simpleframework/xml/core/MapFactory;.getConversion:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L4472f8.  v0:= temp @kind object;
  #L4472fa.  call temp:= `b`(v3, v0) @signature `Lorg/simpleframework/xml/core/MapFactory;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L447300.  v4:= temp;
  #L447302.  if v4 == 0 then goto L447314;
  #L447306.  v4:= v3.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L44730a.  call temp:= `getInstance`(v4, v0) @signature `Lorg/simpleframework/xml/core/Context;.getInstance:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Instance;` @kind interface;
  #L447310.  v4:= temp @kind object;
  #L447312.  return v4 @kind object;
  #L447314.  v4:= new `org.simpleframework.xml.core.InstantiationException`;
  #L447318.  v1:= 2I;
  #L44731a.  v1:= new `java.lang.Object`[v1];
  #L44731e.  v2:= 0I;
  #L447320.  v1[v2]:= v0 @kind object;
  #L447324.  v0:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L447328.  v2:= 1I;
  #L44732a.  v1[v2]:= v0 @kind object;
  #L44732e.  v0:= "Invalid map %s for %s" @kind object;
  #L447332.  call `<init>`(v4, v0, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L447338.  throw v4;
}
