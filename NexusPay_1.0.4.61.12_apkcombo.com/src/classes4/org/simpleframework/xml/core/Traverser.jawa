record `org.simpleframework.xml.core.Traverser` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.Traverser.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.Style` `org.simpleframework.xml.core.Traverser.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.<init>:(Lorg/simpleframework/xml/core/Context;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L45016c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L450172.  call temp:= `getStyle`(v2) @signature `Lorg/simpleframework/xml/core/Context;.getStyle:()Lorg/simpleframework/xml/stream/Style;` @kind interface;
  #L450178.  v0:= temp @kind object;
  #L45017a.  v1.`org.simpleframework.xml.core.Traverser.b` @type ^`org.simpleframework.xml.stream.Style` := v0 @kind object;
  #L45017e.  v1.`org.simpleframework.xml.core.Traverser.a` @type ^`org.simpleframework.xml.core.Context` := v2 @kind object;
  #L450182.  return @kind void;
}
procedure `org.simpleframework.xml.core.Composite` `a`(`org.simpleframework.xml.core.Traverser` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Composite;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4500ec.  call temp:= `c`(v2, v3) @signature `Lorg/simpleframework/xml/core/Traverser;.c:(Ljava/lang/Class;)Lorg/simpleframework/xml/strategy/Type;` @kind direct;
  #L4500f2.  v0:= temp @kind object;
  #L4500f4.  if v3 == 0 then goto L450108;
  #L4500f8.  v3:= new `org.simpleframework.xml.core.Composite`;
  #L4500fc.  v1:= v2.`org.simpleframework.xml.core.Traverser.a` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L450100.  call `<init>`(v3, v1, v0) @signature `Lorg/simpleframework/xml/core/Composite;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L450106.  return v3 @kind object;
  #L450108.  v3:= new `org.simpleframework.xml.core.RootException`;
  #L45010c.  v0:= 0I;
  #L45010e.  v0:= new `java.lang.Object`[v0];
  #L450112.  v1:= "Can not instantiate null class" @kind object;
  #L450116.  call `<init>`(v3, v1, v0) @signature `Lorg/simpleframework/xml/core/RootException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L45011c.  throw v3;
}
procedure `org.simpleframework.xml.core.Decorator` `b`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Decorator;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L450130.  v0:= v1.`org.simpleframework.xml.core.Traverser.a` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L450134.  call temp:= `getDecorator`(v0, v2) @signature `Lorg/simpleframework/xml/core/Context;.getDecorator:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Decorator;` @kind interface;
  #L45013a.  v2:= temp @kind object;
  #L45013c.  return v2 @kind object;
}
procedure `org.simpleframework.xml.strategy.Type` `c`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.c:(Ljava/lang/Class;)Lorg/simpleframework/xml/strategy/Type;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L450150.  v0:= new `org.simpleframework.xml.core.ClassType`;
  #L450154.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/core/ClassType;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L45015a.  return v0 @kind object;
}
procedure `java.lang.Object` `d`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.Class` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.d:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L450054.  call temp:= `getName`(v1, v3) @signature `Lorg/simpleframework/xml/core/Traverser;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind virtual;
  #L45005a.  v2:= temp @kind object;
  #L45005c.  if v2 == 0 then goto L450062;
  #L450060.  return v4 @kind object;
  #L450062.  v2:= new `org.simpleframework.xml.core.RootException`;
  #L450066.  v4:= 1I;
  #L450068.  v4:= new `java.lang.Object`[v4];
  #L45006c.  v0:= 0I;
  #L45006e.  v4[v0]:= v3 @kind object;
  #L450072.  v3:= "Root annotation required for %s" @kind object;
  #L450076.  call `<init>`(v2, v3, v4) @signature `Lorg/simpleframework/xml/core/RootException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L45007c.  throw v2;
}
procedure `java.lang.String` `getName`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4500c0.  v0:= v1.`org.simpleframework.xml.core.Traverser.a` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L4500c4.  call temp:= `getName`(v0, v2) @signature `Lorg/simpleframework/xml/core/Context;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L4500ca.  v2:= temp @kind object;
  #L4500cc.  v0:= v1.`org.simpleframework.xml.core.Traverser.b` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L4500d0.  call temp:= `getElement`(v0, v2) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L4500d6.  v2:= temp @kind object;
  #L4500d8.  return v2 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45001c.  call temp:= `a`(v1, v3) @signature `Lorg/simpleframework/xml/core/Traverser;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Composite;` @kind direct;
  #L450022.  v3:= temp @kind object;
  #L450024.  call temp:= `read`(v3, v2) @signature `Lorg/simpleframework/xml/core/Composite;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L45002a.  v3:= temp @kind object;
  #L45002c.  if v3 == 0 then goto L450040;
  #L450030.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L450036.  v0:= temp @kind object;
  #L450038.  call temp:= `d`(v1, v2, v0, v3) @signature `Lorg/simpleframework/xml/core/Traverser;.d:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L45003e.  return v3 @kind object;
  #L450040.  v2:= 0I;
  #L450042.  return v2 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.Traverser` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L450090.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L450096.  v0:= temp @kind object;
  #L450098.  call temp:= `a`(v2, v0) @signature `Lorg/simpleframework/xml/core/Traverser;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Composite;` @kind direct;
  #L45009e.  v1:= temp @kind object;
  #L4500a0.  call temp:= `read`(v1, v3, v4) @signature `Lorg/simpleframework/xml/core/Composite;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4500a6.  v4:= temp @kind object;
  #L4500a8.  call temp:= `d`(v2, v3, v0, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.d:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L4500ae.  return v4 @kind object;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.Traverser` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.validate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44ffd0.  call temp:= `a`(v2, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Composite;` @kind direct;
  #L44ffd6.  v0:= temp @kind object;
  #L44ffd8.  call temp:= `getName`(v2, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind virtual;
  #L44ffde.  v1:= temp @kind object;
  #L44ffe0.  if v1 == 0 then goto L44ffee;
  #L44ffe4.  call temp:= `validate`(v0, v3) @signature `Lorg/simpleframework/xml/core/Composite;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L44ffea.  v3:= temp;
  #L44ffec.  return v3;
  #L44ffee.  v3:= new `org.simpleframework.xml.core.RootException`;
  #L44fff2.  v0:= 1I;
  #L44fff4.  v0:= new `java.lang.Object`[v0];
  #L44fff8.  v1:= 0I;
  #L44fffa.  v0[v1]:= v4 @kind object;
  #L44fffe.  v4:= "Root annotation required for %s" @kind object;
  #L450002.  call `<init>`(v3, v4, v0) @signature `Lorg/simpleframework/xml/core/RootException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L450008.  throw v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450194.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L45019a.  v0:= temp @kind object;
  #L45019c.  call `write`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;)V` @kind virtual;
  #L4501a2.  return @kind void;
}
procedure `void` `write`(`org.simpleframework.xml.core.Traverser` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4501b4.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4501ba.  v0:= temp @kind object;
  #L4501bc.  call temp:= `getName`(v2, v0) @signature `Lorg/simpleframework/xml/core/Traverser;.getName:(Ljava/lang/Class;)Ljava/lang/String;` @kind virtual;
  #L4501c2.  v1:= temp @kind object;
  #L4501c4.  if v1 == 0 then goto L4501d0;
  #L4501c8.  call `write`(v2, v3, v4, v5, v1) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)V` @kind virtual;
  #L4501ce.  return @kind void;
  #L4501d0.  v3:= new `org.simpleframework.xml.core.RootException`;
  #L4501d4.  v4:= 1I;
  #L4501d6.  v4:= new `java.lang.Object`[v4];
  #L4501da.  v5:= 0I;
  #L4501dc.  v4[v5]:= v0 @kind object;
  #L4501e0.  v5:= "Root annotation required for %s" @kind object;
  #L4501e4.  call `<init>`(v3, v5, v4) @signature `Lorg/simpleframework/xml/core/RootException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4501ea.  throw v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.Traverser` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4501fc.  call temp:= `getChild`(v2, v5) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getChild:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L450202.  v2:= temp @kind object;
  #L450204.  call temp:= `c`(v1, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.c:(Ljava/lang/Class;)Lorg/simpleframework/xml/strategy/Type;` @kind direct;
  #L45020a.  v4:= temp @kind object;
  #L45020c.  if v3 == 0 then goto L450248;
  #L450210.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L450216.  v5:= temp @kind object;
  #L450218.  call temp:= `b`(v1, v5) @signature `Lorg/simpleframework/xml/core/Traverser;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Decorator;` @kind direct;
  #L45021e.  v0:= temp @kind object;
  #L450220.  if v0 == 0 then goto L45022a;
  #L450224.  call `decorate`(v0, v2) @signature `Lorg/simpleframework/xml/core/Decorator;.decorate:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind interface;
  #L45022a.  v0:= v1.`org.simpleframework.xml.core.Traverser.a` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L45022e.  call temp:= `setOverride`(v0, v4, v3, v2) @signature `Lorg/simpleframework/xml/core/Context;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind interface;
  #L450234.  v4:= temp;
  #L450236.  if v4 != 0 then goto L450248;
  #L45023a.  call temp:= `a`(v1, v5) @signature `Lorg/simpleframework/xml/core/Traverser;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Composite;` @kind direct;
  #L450240.  v4:= temp @kind object;
  #L450242.  call `write`(v4, v2, v3) @signature `Lorg/simpleframework/xml/core/Composite;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L450248.  call `commit`(v2) @signature `Lorg/simpleframework/xml/stream/OutputNode;.commit:()V` @kind interface;
  #L45024e.  return @kind void;
}
