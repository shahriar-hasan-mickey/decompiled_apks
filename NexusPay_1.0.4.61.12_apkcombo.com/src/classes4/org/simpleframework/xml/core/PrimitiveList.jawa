record `org.simpleframework.xml.core.PrimitiveList` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.core.CollectionFactory` `org.simpleframework.xml.core.PrimitiveList.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Primitive` `org.simpleframework.xml.core.PrimitiveList.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.core.PrimitiveList.c` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PrimitiveList.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.PrimitiveList` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `org.simpleframework.xml.strategy.Type` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L44ba5c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44ba62.  v0:= new `org.simpleframework.xml.core.CollectionFactory`;
  #L44ba66.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L44ba6c.  v1.`org.simpleframework.xml.core.PrimitiveList.a` @type ^`org.simpleframework.xml.core.CollectionFactory` := v0 @kind object;
  #L44ba70.  v3:= new `org.simpleframework.xml.core.Primitive`;
  #L44ba74.  call `<init>`(v3, v2, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L44ba7a.  v1.`org.simpleframework.xml.core.PrimitiveList.b` @type ^`org.simpleframework.xml.core.Primitive` := v3 @kind object;
  #L44ba7e.  v1.`org.simpleframework.xml.core.PrimitiveList.c` @type ^`java.lang.String` := v5 @kind object;
  #L44ba82.  v1.`org.simpleframework.xml.core.PrimitiveList.d` @type ^`org.simpleframework.xml.strategy.Type` := v4 @kind object;
  #L44ba86.  return @kind void;
}
procedure `boolean` `a`(`org.simpleframework.xml.core.PrimitiveList` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.a:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L44b908.  v0:= v2.`org.simpleframework.xml.core.PrimitiveList.a` @type ^`org.simpleframework.xml.core.CollectionFactory` @kind object;
  #L44b90c.  v1:= v2.`org.simpleframework.xml.core.PrimitiveList.d` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L44b910.  call temp:= `setOverride`(v0, v1, v4, v3) @signature `Lorg/simpleframework/xml/core/Factory;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L44b916.  v3:= temp;
  #L44b918.  return v3;
}
procedure `java.lang.Object` `b`(`org.simpleframework.xml.core.PrimitiveList` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L44b9a0.  v4:= (`java.util.Collection`) v4 @kind object;
  #L44b9a4.  call temp:= `getNext`(v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L44b9aa.  v0:= temp @kind object;
  #L44b9ac.  if v0 != 0 then goto L44b9b2;
  #L44b9b0.  return v4 @kind object;
  #L44b9b2.  v1:= v2.`org.simpleframework.xml.core.PrimitiveList.b` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L44b9b6.  call temp:= `read`(v1, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L44b9bc.  v0:= temp @kind object;
  #L44b9be.  call temp:= `add`(v4, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44b9c4.  goto L44b9a4;
}
procedure `boolean` `c`(`org.simpleframework.xml.core.PrimitiveList` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.c:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L44b974.  call temp:= `getNext`(v2) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L44b97a.  v3:= temp @kind object;
  #L44b97c.  if v3 != 0 then goto L44b984;
  #L44b980.  v2:= 1I;
  #L44b982.  return v2;
  #L44b984.  v0:= v1.`org.simpleframework.xml.core.PrimitiveList.b` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L44b988.  call temp:= `validate`(v0, v3) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L44b98e.  goto L44b974;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveList` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44b9d8.  v0:= v2.`org.simpleframework.xml.core.PrimitiveList.a` @type ^`org.simpleframework.xml.core.CollectionFactory` @kind object;
  #L44b9dc.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L44b9e2.  v0:= temp @kind object;
  #L44b9e4.  call temp:= `getInstance`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getInstance:()Ljava/lang/Object;` @kind interface;
  #L44b9ea.  v1:= temp @kind object;
  #L44b9ec.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L44b9f2.  v0:= temp;
  #L44b9f4.  if v0 != 0 then goto L44ba02;
  #L44b9f8.  call temp:= `b`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L44b9fe.  v3:= temp @kind object;
  #L44ba00.  return v3 @kind object;
  #L44ba02.  return v1 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveList` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44ba14.  v0:= v2.`org.simpleframework.xml.core.PrimitiveList.a` @type ^`org.simpleframework.xml.core.CollectionFactory` @kind object;
  #L44ba18.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L44ba1e.  v0:= temp @kind object;
  #L44ba20.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L44ba26.  v1:= temp;
  #L44ba28.  if v1 == 0 then goto L44ba36;
  #L44ba2c.  call temp:= `getInstance`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getInstance:()Ljava/lang/Object;` @kind interface;
  #L44ba32.  v3:= temp @kind object;
  #L44ba34.  return v3 @kind object;
  #L44ba36.  call temp:= `setInstance`(v0, v4) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44ba3c.  if v4 == 0 then goto L44ba4a;
  #L44ba40.  call temp:= `b`(v2, v3, v4) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L44ba46.  v3:= temp @kind object;
  #L44ba48.  return v3 @kind object;
  #L44ba4a.  return v4 @kind object;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.PrimitiveList` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44b92c.  v0:= v2.`org.simpleframework.xml.core.PrimitiveList.a` @type ^`org.simpleframework.xml.core.CollectionFactory` @kind object;
  #L44b930.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/CollectionFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L44b936.  v0:= temp @kind object;
  #L44b938.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L44b93e.  v1:= temp;
  #L44b940.  if v1 != 0 then goto L44b95e;
  #L44b944.  v1:= 0I;
  #L44b946.  call temp:= `setInstance`(v0, v1) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44b94c.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getType:()Ljava/lang/Class;` @kind interface;
  #L44b952.  v0:= temp @kind object;
  #L44b954.  call temp:= `c`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.c:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @kind direct;
  #L44b95a.  v3:= temp;
  #L44b95c.  return v3;
  #L44b95e.  v3:= 1I;
  #L44b960.  return v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.PrimitiveList` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44ba98.  v5:= (`java.util.Collection`) v5 @kind object;
  #L44ba9c.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L44baa2.  v5:= temp @kind object;
  #L44baa4.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L44baaa.  v0:= temp;
  #L44baac.  if v0 == 0 then goto L44bae0;
  #L44bab0.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L44bab6.  v0:= temp @kind object;
  #L44bab8.  if v0 == 0 then goto L44baa4;
  #L44babc.  v1:= v3.`org.simpleframework.xml.core.PrimitiveList.c` @type ^`java.lang.String` @kind object;
  #L44bac0.  call temp:= `getChild`(v4, v1) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getChild:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L44bac6.  v1:= temp @kind object;
  #L44bac8.  call temp:= `a`(v3, v1, v0) @signature `Lorg/simpleframework/xml/core/PrimitiveList;.a:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @kind direct;
  #L44bace.  v2:= temp;
  #L44bad0.  if v2 != 0 then goto L44baa4;
  #L44bad4.  v2:= v3.`org.simpleframework.xml.core.PrimitiveList.b` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L44bad8.  call `write`(v2, v1, v0) @signature `Lorg/simpleframework/xml/core/Primitive;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L44bade.  goto L44baa4;
  #L44bae0.  return @kind void;
}
