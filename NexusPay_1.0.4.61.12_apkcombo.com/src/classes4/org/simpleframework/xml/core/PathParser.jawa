record `org.simpleframework.xml.core.PathParser` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Expression` @kind interface {
  `boolean` `org.simpleframework.xml.core.PathParser.attribute` @AccessFlag PUBLIC;
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.core.PathParser.attributes` @AccessFlag PUBLIC;
  `java.lang.StringBuilder` `org.simpleframework.xml.core.PathParser.builder` @AccessFlag PUBLIC;
  `java.lang.String` `org.simpleframework.xml.core.PathParser.cache` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.core.PathParser.count` @AccessFlag PUBLIC;
  `char`[] `org.simpleframework.xml.core.PathParser.data` @AccessFlag PUBLIC;
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.core.PathParser.elements` @AccessFlag PUBLIC;
  `java.util.List` `org.simpleframework.xml.core.PathParser.indexes` @AccessFlag PUBLIC;
  `java.lang.String` `org.simpleframework.xml.core.PathParser.location` @AccessFlag PUBLIC;
  `java.util.List` `org.simpleframework.xml.core.PathParser.names` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.core.PathParser.off` @AccessFlag PUBLIC;
  `java.lang.String` `org.simpleframework.xml.core.PathParser.path` @AccessFlag PUBLIC;
  `java.util.List` `org.simpleframework.xml.core.PathParser.prefixes` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.core.PathParser.start` @AccessFlag PUBLIC;
  `org.simpleframework.xml.stream.Style` `org.simpleframework.xml.core.PathParser.style` @AccessFlag PUBLIC;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PathParser.type` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `java.lang.String` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `org.simpleframework.xml.stream.Format` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.<init>:(Ljava/lang/String;Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/Format;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L44a040.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44a046.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L44a04a.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L44a050.  v1.`org.simpleframework.xml.core.PathParser.attributes` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L44a054.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L44a058.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L44a05e.  v1.`org.simpleframework.xml.core.PathParser.elements` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L44a062.  v0:= new `java.util.ArrayList`;
  #L44a066.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L44a06c.  v1.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` := v0 @kind object;
  #L44a070.  v0:= new `java.util.ArrayList`;
  #L44a074.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L44a07a.  v1.`org.simpleframework.xml.core.PathParser.prefixes` @type ^`java.util.List` := v0 @kind object;
  #L44a07e.  v0:= new `java.util.ArrayList`;
  #L44a082.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L44a088.  v1.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` := v0 @kind object;
  #L44a08c.  v0:= new `java.lang.StringBuilder`;
  #L44a090.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L44a096.  v1.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` := v0 @kind object;
  #L44a09a.  call temp:= `getStyle`(v4) @signature `Lorg/simpleframework/xml/stream/Format;.getStyle:()Lorg/simpleframework/xml/stream/Style;` @kind virtual;
  #L44a0a0.  v4:= temp @kind object;
  #L44a0a2.  v1.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` := v4 @kind object;
  #L44a0a6.  v1.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` := v3 @kind object;
  #L44a0aa.  v1.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` := v2 @kind object;
  #L44a0ae.  call `o`(v1, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.o:(Ljava/lang/String;)V` @kind direct;
  #L44a0b4.  return @kind void;
}
procedure `void` `a`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L44a0c8.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L44a0cc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L44a0d2.  v0:= temp;
  #L44a0d4.  v1:= v2.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` @kind object;
  #L44a0d8.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L44a0de.  v1:= temp;
  #L44a0e0.  if v0 <= v1 then goto L44a0f8;
  #L44a0e4.  v0:= v2.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` @kind object;
  #L44a0e8.  v1:= 1I;
  #L44a0ea.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L44a0f0.  v1:= temp @kind object;
  #L44a0f2.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a0f8.  return @kind void;
}
procedure `void` `b`(`org.simpleframework.xml.core.PathParser` v7 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L44a10c.  v0:= v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L44a110.  v1:= 1I;
  #L44a112.  v0:= v0 + v1 @kind int;
  #L44a114.  v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v0;
  #L44a118.  v2:= v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L44a11c.  v3:= v7.`org.simpleframework.xml.core.PathParser.count` @type ^`int`;
  #L44a120.  v4:= 0I;
  #L44a122.  v5:= 2I;
  #L44a124.  if v2 >= v3 then goto L44a178;
  #L44a128.  v3:= v7.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L44a12c.  v6:= v2 + 1;
  #L44a130.  v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v6;
  #L44a134.  v2:= v3[v2] @kind char;
  #L44a138.  call temp:= `n`(v7, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.n:(C)Z` @kind direct;
  #L44a13e.  v3:= temp;
  #L44a140.  if v3 == 0 then goto L44a146;
  #L44a144.  goto L44a118;
  #L44a146.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L44a14a.  v3:= 3I;
  #L44a14c.  v3:= new `java.lang.Object`[v3];
  #L44a150.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L44a156.  v2:= temp @kind object;
  #L44a158.  v3[v4]:= v2 @kind object;
  #L44a15c.  v2:= v7.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L44a160.  v3[v1]:= v2 @kind object;
  #L44a164.  v1:= v7.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L44a168.  v3[v5]:= v1 @kind object;
  #L44a16c.  v1:= "Illegal character '%s' in attribute for '%s' in %s" @kind object;
  #L44a170.  call `<init>`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L44a176.  throw v0;
  #L44a178.  if v2 <= v0 then goto L44a18a;
  #L44a17c.  v7.`org.simpleframework.xml.core.PathParser.attribute` @type ^`boolean` := v1 @kind boolean;
  #L44a180.  v2:= v2 - v0 @kind int;
  #L44a182.  call `c`(v7, v0, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.c:(II)V` @kind direct;
  #L44a188.  return @kind void;
  #L44a18a.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L44a18e.  v2:= new `java.lang.Object`[v5];
  #L44a192.  v3:= v7.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L44a196.  v2[v4]:= v3 @kind object;
  #L44a19a.  v3:= v7.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L44a19e.  v2[v1]:= v3 @kind object;
  #L44a1a2.  v1:= "Attribute reference in '%s' for %s is empty" @kind object;
  #L44a1a6.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L44a1ac.  throw v0;
}
procedure `void` `c`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lorg/simpleframework/xml/core/PathParser;.c:(II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L44a1c0.  v0:= new `java.lang.String`;
  #L44a1c4.  v1:= v2.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L44a1c8.  call `<init>`(v0, v1, v3, v4) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L44a1ce.  if v4 <= 0 then goto L44a1d8;
  #L44a1d2.  call `d`(v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.d:(Ljava/lang/String;)V` @kind direct;
  #L44a1d8.  return @kind void;
}
procedure `void` `d`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.d:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L44a1ec.  v0:= v2.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L44a1f0.  call temp:= `getAttribute`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L44a1f6.  v3:= temp @kind object;
  #L44a1f8.  v0:= v2.`org.simpleframework.xml.core.PathParser.prefixes` @type ^`java.util.List` @kind object;
  #L44a1fc.  v1:= 0I;
  #L44a1fe.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a204.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L44a208.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a20e.  return @kind void;
}
procedure `void` `e`(`org.simpleframework.xml.core.PathParser` v8 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L44a220.  v0:= v8.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L44a224.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L44a22a.  v0:= temp;
  #L44a22c.  v1:= v0 + -1;
  #L44a230.  v2:= 0I;
  #L44a232.  if v2 >= v0 then goto L44a2f8;
  #L44a236.  v3:= v8.`org.simpleframework.xml.core.PathParser.prefixes` @type ^`java.util.List` @kind object;
  #L44a23a.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L44a240.  v3:= temp @kind object;
  #L44a242.  v3:= (`java.lang.String`) v3 @kind object;
  #L44a246.  v4:= v8.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L44a24a.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L44a250.  v4:= temp @kind object;
  #L44a252.  v4:= (`java.lang.String`) v4 @kind object;
  #L44a256.  v5:= v8.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` @kind object;
  #L44a25a.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L44a260.  v5:= temp @kind object;
  #L44a262.  v5:= (`java.lang.Integer`) v5 @kind object;
  #L44a266.  call temp:= `intValue`(v5) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L44a26c.  v5:= temp;
  #L44a26e.  if v2 <= 0 then goto L44a280;
  #L44a272.  v6:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L44a276.  v7:= 47I;
  #L44a27a.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a280.  v6:= v8.`org.simpleframework.xml.core.PathParser.attribute` @type ^`boolean` @kind boolean;
  #L44a284.  if v6 == 0 then goto L44a2a6;
  #L44a288.  if v2 != v1 then goto L44a2a6;
  #L44a28c.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L44a290.  v5:= 64I;
  #L44a294.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a29a.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L44a29e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a2a4.  goto L44a2f2;
  #L44a2a6.  if v3 == 0 then goto L44a2c2;
  #L44a2aa.  v6:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L44a2ae.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a2b4.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L44a2b8.  v6:= 58I;
  #L44a2bc.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a2c2.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L44a2c6.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a2cc.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L44a2d0.  v4:= 91I;
  #L44a2d4.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a2da.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L44a2de.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a2e4.  v3:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L44a2e8.  v4:= 93I;
  #L44a2ec.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L44a2f2.  v2:= v2 + 1;
  #L44a2f6.  goto L44a232;
  #L44a2f8.  v0:= v8.`org.simpleframework.xml.core.PathParser.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L44a2fc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L44a302.  v0:= temp @kind object;
  #L44a304.  v8.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` := v0 @kind object;
  #L44a308.  return @kind void;
}
procedure `void` `f`(`org.simpleframework.xml.core.PathParser` v6 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44a31c.  v0:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L44a320.  v1:= 0I;
  #L44a322.  v2:= 0I;
  #L44a324.  v3:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L44a328.  v4:= v6.`org.simpleframework.xml.core.PathParser.count` @type ^`int`;
  #L44a32c.  if v3 >= v4 then goto L44a3b6;
  #L44a330.  v4:= v6.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L44a334.  v5:= v3 + 1;
  #L44a338.  v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v5;
  #L44a33c.  v3:= v4[v3] @kind char;
  #L44a340.  call temp:= `n`(v6, v3) @signature `Lorg/simpleframework/xml/core/PathParser;.n:(C)Z` @kind direct;
  #L44a346.  v4:= temp;
  #L44a348.  if v4 != 0 then goto L44a3b0;
  #L44a34c.  v4:= 64I;
  #L44a350.  v5:= 1I;
  #L44a352.  if v3 != v4 then goto L44a362;
  #L44a356.  v1:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L44a35a.  v1:= v1 - v5 @kind int;
  #L44a35c.  v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v1;
  #L44a360.  goto L44a3b6;
  #L44a362.  v4:= 91I;
  #L44a366.  if v3 != v4 then goto L44a372;
  #L44a36a.  call `i`(v6) @signature `Lorg/simpleframework/xml/core/PathParser;.i:()V` @kind direct;
  #L44a370.  goto L44a3b6;
  #L44a372.  v4:= 47I;
  #L44a376.  if v3 != v4 then goto L44a37c;
  #L44a37a.  goto L44a3b6;
  #L44a37c.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L44a380.  v2:= 3I;
  #L44a382.  v2:= new `java.lang.Object`[v2];
  #L44a386.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L44a38c.  v3:= temp @kind object;
  #L44a38e.  v2[v1]:= v3 @kind object;
  #L44a392.  v1:= v6.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L44a396.  v2[v5]:= v1 @kind object;
  #L44a39a.  v1:= v6.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L44a39e.  v3:= 2I;
  #L44a3a0.  v2[v3]:= v1 @kind object;
  #L44a3a4.  v1:= "Illegal character '%s' in element for '%s' in %s" @kind object;
  #L44a3a8.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L44a3ae.  throw v0;
  #L44a3b0.  v2:= v2 + 1;
  #L44a3b4.  goto L44a324;
  #L44a3b6.  call `g`(v6, v0, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.g:(II)V` @kind direct;
  #L44a3bc.  return @kind void;
}
procedure `void` `g`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lorg/simpleframework/xml/core/PathParser;.g:(II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L44a3d0.  v0:= new `java.lang.String`;
  #L44a3d4.  v1:= v2.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L44a3d8.  call `<init>`(v0, v1, v3, v4) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L44a3de.  if v4 <= 0 then goto L44a3e8;
  #L44a3e2.  call `h`(v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.h:(Ljava/lang/String;)V` @kind direct;
  #L44a3e8.  return @kind void;
}
procedure `void` `h`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.h:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L44a3fc.  v0:= 58I;
  #L44a400.  call temp:= `indexOf`(v3, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L44a406.  v0:= temp;
  #L44a408.  if v0 <= 0 then goto L44a424;
  #L44a40c.  v1:= 0I;
  #L44a40e.  call temp:= `substring`(v3, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L44a414.  v1:= temp @kind object;
  #L44a416.  v0:= v0 + 1;
  #L44a41a.  call temp:= `substring`(v3, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L44a420.  v3:= temp @kind object;
  #L44a422.  goto L44a426;
  #L44a424.  v1:= 0I;
  #L44a426.  v0:= v2.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L44a42a.  call temp:= `getElement`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L44a430.  v3:= temp @kind object;
  #L44a432.  v0:= v2.`org.simpleframework.xml.core.PathParser.prefixes` @type ^`java.util.List` @kind object;
  #L44a436.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a43c.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L44a440.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a446.  return @kind void;
}
procedure `void` `i`(`org.simpleframework.xml.core.PathParser` v6 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44a458.  v0:= v6.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L44a45c.  v1:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L44a460.  v2:= 1I;
  #L44a462.  v1:= v1 - v2 @kind int;
  #L44a464.  v0:= v0[v1] @kind char;
  #L44a468.  v1:= 0I;
  #L44a46a.  v3:= 91I;
  #L44a46e.  if v0 != v3 then goto L44a4aa;
  #L44a472.  v0:= 0I;
  #L44a474.  v3:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L44a478.  v4:= v6.`org.simpleframework.xml.core.PathParser.count` @type ^`int`;
  #L44a47c.  if v3 >= v4 then goto L44a4ac;
  #L44a480.  v4:= v6.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L44a484.  v5:= v3 + 1;
  #L44a488.  v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v5;
  #L44a48c.  v3:= v4[v3] @kind char;
  #L44a490.  call temp:= `j`(v6, v3) @signature `Lorg/simpleframework/xml/core/PathParser;.j:(C)Z` @kind direct;
  #L44a496.  v4:= temp;
  #L44a498.  if v4 != 0 then goto L44a49e;
  #L44a49c.  goto L44a4ac;
  #L44a49e.  v0:= v0 * 10;
  #L44a4a2.  v0:= v0 + v3 @kind int;
  #L44a4a4.  v0:= v0 + -48;
  #L44a4a8.  goto L44a474;
  #L44a4aa.  v0:= 0I;
  #L44a4ac.  v3:= v6.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L44a4b0.  v4:= v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L44a4b4.  v5:= v4 + 1;
  #L44a4b8.  v6.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v5;
  #L44a4bc.  v4:= v4 - v2 @kind int;
  #L44a4be.  v3:= v3[v4] @kind char;
  #L44a4c2.  v4:= 93I;
  #L44a4c6.  if v3 != v4 then goto L44a4de;
  #L44a4ca.  v1:= v6.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` @kind object;
  #L44a4ce.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L44a4d4.  v0:= temp @kind object;
  #L44a4d6.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L44a4dc.  return @kind void;
  #L44a4de.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L44a4e2.  v3:= 2I;
  #L44a4e4.  v3:= new `java.lang.Object`[v3];
  #L44a4e8.  v4:= v6.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L44a4ec.  v3[v1]:= v4 @kind object;
  #L44a4f0.  v1:= v6.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L44a4f4.  v3[v2]:= v1 @kind object;
  #L44a4f8.  v1:= "Invalid index for path '%s' in %s" @kind object;
  #L44a4fc.  call `<init>`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L44a502.  throw v0;
}
procedure `boolean` `j`(`org.simpleframework.xml.core.PathParser` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/core/PathParser;.j:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L449c34.  call temp:= `isDigit`(v1) @signature `Ljava/lang/Character;.isDigit:(C)Z` @kind static;
  #L449c3a.  v1:= temp;
  #L449c3c.  return v1;
}
procedure `boolean` `k`(`org.simpleframework.xml.core.PathParser` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.k:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;

  #L449c70.  if v1 == 0 then goto L449c86;
  #L449c74.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L449c7a.  v1:= temp;
  #L449c7c.  if v1 != 0 then goto L449c82;
  #L449c80.  goto L449c86;
  #L449c82.  v1:= 0I;
  #L449c84.  goto L449c88;
  #L449c86.  v1:= 1I;
  #L449c88.  return v1;
}
procedure `boolean` `l`(`org.simpleframework.xml.core.PathParser` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/core/PathParser;.l:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L449c9c.  call temp:= `isLetterOrDigit`(v1) @signature `Ljava/lang/Character;.isLetterOrDigit:(C)Z` @kind static;
  #L449ca2.  v1:= temp;
  #L449ca4.  return v1;
}
procedure `boolean` `m`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `char` v2 ) @signature `Lorg/simpleframework/xml/core/PathParser;.m:(C)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L449ce0.  v0:= 95I;
  #L449ce4.  if v2 == v0 then goto L449cfe;
  #L449ce8.  v0:= 45I;
  #L449cec.  if v2 == v0 then goto L449cfe;
  #L449cf0.  v0:= 58I;
  #L449cf4.  if v2 != v0 then goto L449cfa;
  #L449cf8.  goto L449cfe;
  #L449cfa.  v2:= 0I;
  #L449cfc.  goto L449d00;
  #L449cfe.  v2:= 1I;
  #L449d00.  return v2;
}
procedure `boolean` `n`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `char` v2 ) @signature `Lorg/simpleframework/xml/core/PathParser;.n:(C)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L449d14.  call temp:= `l`(v1, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.l:(C)Z` @kind direct;
  #L449d1a.  v0:= temp;
  #L449d1c.  if v0 != 0 then goto L449d32;
  #L449d20.  call temp:= `m`(v1, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.m:(C)Z` @kind direct;
  #L449d26.  v2:= temp;
  #L449d28.  if v2 == 0 then goto L449d2e;
  #L449d2c.  goto L449d32;
  #L449d2e.  v2:= 0I;
  #L449d30.  goto L449d34;
  #L449d32.  v2:= 1I;
  #L449d34.  return v2;
}
procedure `void` `o`(`org.simpleframework.xml.core.PathParser` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.o:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L44a514.  if v4 == 0 then goto L44a534;
  #L44a518.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L44a51e.  v0:= temp;
  #L44a520.  v3.`org.simpleframework.xml.core.PathParser.count` @type ^`int` := v0;
  #L44a524.  v1:= new `char`[v0];
  #L44a528.  v3.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] := v1 @kind object;
  #L44a52c.  v2:= 0I;
  #L44a52e.  call `getChars`(v4, v2, v0, v1, v2) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L44a534.  call `p`(v3) @signature `Lorg/simpleframework/xml/core/PathParser;.p:()V` @kind direct;
  #L44a53a.  return @kind void;
}
procedure `void` `p`(`org.simpleframework.xml.core.PathParser` v7 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.p:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L44a54c.  v0:= v7.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L44a550.  v1:= v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L44a554.  v2:= v0[v1] @kind char;
  #L44a558.  v3:= 1I;
  #L44a55a.  v4:= 0I;
  #L44a55c.  v5:= 2I;
  #L44a55e.  v6:= 47I;
  #L44a562.  if v2 == v6 then goto L44a5c6;
  #L44a566.  v0:= v0[v1] @kind char;
  #L44a56a.  v1:= 46I;
  #L44a56e.  if v0 != v1 then goto L44a578;
  #L44a572.  call `r`(v7) @signature `Lorg/simpleframework/xml/core/PathParser;.r:()V` @kind direct;
  #L44a578.  v0:= v7.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L44a57c.  v1:= v7.`org.simpleframework.xml.core.PathParser.count` @type ^`int`;
  #L44a580.  if v0 >= v1 then goto L44a5b8;
  #L44a584.  v0:= v7.`org.simpleframework.xml.core.PathParser.attribute` @type ^`boolean` @kind boolean;
  #L44a588.  if v0 != 0 then goto L44a594;
  #L44a58c.  call `q`(v7) @signature `Lorg/simpleframework/xml/core/PathParser;.q:()V` @kind direct;
  #L44a592.  goto L44a578;
  #L44a594.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L44a598.  v1:= new `java.lang.Object`[v5];
  #L44a59c.  v2:= v7.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L44a5a0.  v1[v4]:= v2 @kind object;
  #L44a5a4.  v2:= v7.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L44a5a8.  v1[v3]:= v2 @kind object;
  #L44a5ac.  v2:= "Path '%s' in %s references an invalid attribute" @kind object;
  #L44a5b0.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L44a5b6.  throw v0;
  #L44a5b8.  call `s`(v7) @signature `Lorg/simpleframework/xml/core/PathParser;.s:()V` @kind direct;
  #L44a5be.  call `e`(v7) @signature `Lorg/simpleframework/xml/core/PathParser;.e:()V` @kind direct;
  #L44a5c4.  return @kind void;
  #L44a5c6.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L44a5ca.  v1:= new `java.lang.Object`[v5];
  #L44a5ce.  v2:= v7.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L44a5d2.  v1[v4]:= v2 @kind object;
  #L44a5d6.  v2:= v7.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L44a5da.  v1[v3]:= v2 @kind object;
  #L44a5de.  v2:= "Path '%s' in %s references document root" @kind object;
  #L44a5e2.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L44a5e8.  throw v0;
}
procedure `void` `q`(`org.simpleframework.xml.core.PathParser` v4 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.q:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44a5fc.  v0:= v4.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L44a600.  v1:= v4.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L44a604.  v0:= v0[v1] @kind char;
  #L44a608.  v1:= 47I;
  #L44a60c.  if v0 == v1 then goto L44a62e;
  #L44a610.  v1:= 64I;
  #L44a614.  if v0 != v1 then goto L44a620;
  #L44a618.  call `b`(v4) @signature `Lorg/simpleframework/xml/core/PathParser;.b:()V` @kind direct;
  #L44a61e.  goto L44a626;
  #L44a620.  call `f`(v4) @signature `Lorg/simpleframework/xml/core/PathParser;.f:()V` @kind direct;
  #L44a626.  call `a`(v4) @signature `Lorg/simpleframework/xml/core/PathParser;.a:()V` @kind direct;
  #L44a62c.  return @kind void;
  #L44a62e.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L44a632.  v1:= 2I;
  #L44a634.  v1:= new `java.lang.Object`[v1];
  #L44a638.  v2:= v4.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L44a63c.  v3:= 0I;
  #L44a63e.  v1[v3]:= v2 @kind object;
  #L44a642.  v2:= v4.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L44a646.  v3:= 1I;
  #L44a648.  v1[v3]:= v2 @kind object;
  #L44a64c.  v2:= "Invalid path expression '%s' in %s" @kind object;
  #L44a650.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L44a656.  throw v0;
}
procedure `void` `r`(`org.simpleframework.xml.core.PathParser` v5 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.r:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44a668.  v0:= v5.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L44a66c.  v1:= length @variable v0;
  #L44a66e.  v2:= 1I;
  #L44a670.  if v1 <= v2 then goto L44a6b4;
  #L44a674.  v1:= v5.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L44a678.  v1:= v1 + v2 @kind int;
  #L44a67a.  v0:= v0[v1] @kind char;
  #L44a67e.  v3:= 47I;
  #L44a682.  if v0 != v3 then goto L44a68c;
  #L44a686.  v5.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v1;
  #L44a68a.  goto L44a6b4;
  #L44a68c.  v0:= new `org.simpleframework.xml.core.PathException`;
  #L44a690.  v1:= 2I;
  #L44a692.  v1:= new `java.lang.Object`[v1];
  #L44a696.  v3:= v5.`org.simpleframework.xml.core.PathParser.path` @type ^`java.lang.String` @kind object;
  #L44a69a.  v4:= 0I;
  #L44a69c.  v1[v4]:= v3 @kind object;
  #L44a6a0.  v3:= v5.`org.simpleframework.xml.core.PathParser.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L44a6a4.  v1[v2]:= v3 @kind object;
  #L44a6a8.  v2:= "Path '%s' in %s has an illegal syntax" @kind object;
  #L44a6ac.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/core/PathException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L44a6b2.  throw v0;
  #L44a6b4.  v0:= v5.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L44a6b8.  v0:= v0 + v2 @kind int;
  #L44a6ba.  v5.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v0;
  #L44a6be.  v5.`org.simpleframework.xml.core.PathParser.start` @type ^`int` := v0;
  #L44a6c2.  return @kind void;
}
procedure `void` `s`(`org.simpleframework.xml.core.PathParser` v3 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.s:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L44a6d4.  v0:= v3.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L44a6d8.  v0:= v0 + -1;
  #L44a6dc.  v1:= v3.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L44a6e0.  v2:= length @variable v1;
  #L44a6e2.  if v0 < v2 then goto L44a6ec;
  #L44a6e6.  v3.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v0;
  #L44a6ea.  goto L44a6fc;
  #L44a6ec.  v1:= v1[v0] @kind char;
  #L44a6f0.  v2:= 47I;
  #L44a6f4.  if v1 != v2 then goto L44a6fc;
  #L44a6f8.  v3.`org.simpleframework.xml.core.PathParser.off` @type ^`int` := v0;
  #L44a6fc.  return @kind void;
}
procedure `java.lang.String` `getAttribute`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L449d74.  v0:= v2.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L449d78.  call temp:= `k`(v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.k:(Ljava/lang/String;)Z` @kind direct;
  #L449d7e.  v0:= temp;
  #L449d80.  if v0 != 0 then goto L449db4;
  #L449d84.  v0:= v2.`org.simpleframework.xml.core.PathParser.attributes` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L449d88.  call temp:= `fetch`(v0, v3) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L449d8e.  v0:= temp @kind object;
  #L449d90.  v0:= (`java.lang.String`) v0 @kind object;
  #L449d94.  if v0 != 0 then goto L449db2;
  #L449d98.  v0:= v2.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L449d9c.  call temp:= `getAttributePath`(v2, v0, v3) @signature `Lorg/simpleframework/xml/core/PathParser;.getAttributePath:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L449da2.  v0:= temp @kind object;
  #L449da4.  if v0 == 0 then goto L449db2;
  #L449da8.  v1:= v2.`org.simpleframework.xml.core.PathParser.attributes` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L449dac.  call `cache`(v1, v3, v0) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L449db2.  return v0 @kind object;
  #L449db4.  v0:= v2.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L449db8.  call temp:= `getAttribute`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L449dbe.  v3:= temp @kind object;
  #L449dc0.  return v3 @kind object;
}
procedure `java.lang.String` `getAttributePath`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.getAttributePath:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449dd4.  v0:= v1.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L449dd8.  call temp:= `getAttribute`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getAttribute:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L449dde.  v3:= temp @kind object;
  #L449de0.  call temp:= `k`(v1, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.k:(Ljava/lang/String;)Z` @kind direct;
  #L449de6.  v0:= temp;
  #L449de8.  if v0 == 0 then goto L449dee;
  #L449dec.  return v3 @kind object;
  #L449dee.  v0:= new `java.lang.StringBuilder`;
  #L449df2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L449df8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L449dfe.  v2:= "/@" @kind object;
  #L449e02.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L449e08.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L449e0e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L449e14.  v2:= temp @kind object;
  #L449e16.  return v2 @kind object;
}
procedure `java.lang.String` `getElement`(`org.simpleframework.xml.core.PathParser` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L449e28.  v0:= v2.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L449e2c.  call temp:= `k`(v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.k:(Ljava/lang/String;)Z` @kind direct;
  #L449e32.  v0:= temp;
  #L449e34.  if v0 != 0 then goto L449e68;
  #L449e38.  v0:= v2.`org.simpleframework.xml.core.PathParser.elements` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L449e3c.  call temp:= `fetch`(v0, v3) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L449e42.  v0:= temp @kind object;
  #L449e44.  v0:= (`java.lang.String`) v0 @kind object;
  #L449e48.  if v0 != 0 then goto L449e66;
  #L449e4c.  v0:= v2.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L449e50.  call temp:= `getElementPath`(v2, v0, v3) @signature `Lorg/simpleframework/xml/core/PathParser;.getElementPath:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L449e56.  v0:= temp @kind object;
  #L449e58.  if v0 == 0 then goto L449e66;
  #L449e5c.  v1:= v2.`org.simpleframework.xml.core.PathParser.elements` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L449e60.  call `cache`(v1, v3, v0) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L449e66.  return v0 @kind object;
  #L449e68.  v0:= v2.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L449e6c.  call temp:= `getElement`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L449e72.  v3:= temp @kind object;
  #L449e74.  return v3 @kind object;
}
procedure `java.lang.String` `getElementPath`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PathParser;.getElementPath:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449e88.  v0:= v1.`org.simpleframework.xml.core.PathParser.style` @type ^`org.simpleframework.xml.stream.Style` @kind object;
  #L449e8c.  call temp:= `getElement`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Style;.getElement:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L449e92.  v3:= temp @kind object;
  #L449e94.  call temp:= `k`(v1, v3) @signature `Lorg/simpleframework/xml/core/PathParser;.k:(Ljava/lang/String;)Z` @kind direct;
  #L449e9a.  v0:= temp;
  #L449e9c.  if v0 == 0 then goto L449ea2;
  #L449ea0.  return v2 @kind object;
  #L449ea2.  call temp:= `k`(v1, v2) @signature `Lorg/simpleframework/xml/core/PathParser;.k:(Ljava/lang/String;)Z` @kind direct;
  #L449ea8.  v0:= temp;
  #L449eaa.  if v0 == 0 then goto L449eb0;
  #L449eae.  return v3 @kind object;
  #L449eb0.  v0:= new `java.lang.StringBuilder`;
  #L449eb4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L449eba.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L449ec0.  v2:= "/" @kind object;
  #L449ec4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L449eca.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L449ed0.  v2:= "[1]" @kind object;
  #L449ed4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L449eda.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L449ee0.  v2:= temp @kind object;
  #L449ee2.  return v2 @kind object;
}
procedure `java.lang.String` `getFirst`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.getFirst:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L449ef4.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L449ef8.  v1:= 0I;
  #L449efa.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L449f00.  v0:= temp @kind object;
  #L449f02.  v0:= (`java.lang.String`) v0 @kind object;
  #L449f06.  return v0 @kind object;
}
procedure `int` `getIndex`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.getIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L449d48.  v0:= v2.`org.simpleframework.xml.core.PathParser.indexes` @type ^`java.util.List` @kind object;
  #L449d4c.  v1:= 0I;
  #L449d4e.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L449d54.  v0:= temp @kind object;
  #L449d56.  v0:= (`java.lang.Integer`) v0 @kind object;
  #L449d5a.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L449d60.  v0:= temp;
  #L449d62.  return v0;
}
procedure `java.lang.String` `getLast`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.getLast:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L449f18.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L449f1c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L449f22.  v0:= temp;
  #L449f24.  v0:= v0 + -1;
  #L449f28.  v1:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L449f2c.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L449f32.  v0:= temp @kind object;
  #L449f34.  v0:= (`java.lang.String`) v0 @kind object;
  #L449f38.  return v0 @kind object;
}
procedure `java.lang.String` `getPath`(`org.simpleframework.xml.core.PathParser` v1 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.getPath:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449f4c.  v0:= v1.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L449f50.  return v0 @kind object;
}
procedure `org.simpleframework.xml.core.Expression` `getPath`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `int` v2 ) @signature `Lorg/simpleframework/xml/core/PathParser;.getPath:(I)Lorg/simpleframework/xml/core/Expression;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449fe4.  v0:= 0I;
  #L449fe6.  call temp:= `getPath`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.getPath:(II)Lorg/simpleframework/xml/core/Expression;` @kind virtual;
  #L449fec.  v2:= temp @kind object;
  #L449fee.  return v2 @kind object;
}
procedure `org.simpleframework.xml.core.Expression` `getPath`(`org.simpleframework.xml.core.PathParser` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/simpleframework/xml/core/PathParser;.getPath:(II)Lorg/simpleframework/xml/core/Expression;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44a000.  v0:= v1.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L44a004.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L44a00a.  v0:= temp;
  #L44a00c.  v0:= v0 + -1;
  #L44a010.  v0:= v0 - v3 @kind int;
  #L44a012.  if v0 < v2 then goto L44a022;
  #L44a016.  v3:= new `org.simpleframework.xml.core.PathParser$PathSection`;
  #L44a01a.  call `<init>`(v3, v1, v2, v0) @signature `Lorg/simpleframework/xml/core/PathParser$PathSection;.<init>:(Lorg/simpleframework/xml/core/PathParser;II)V` @kind direct;
  #L44a020.  return v3 @kind object;
  #L44a022.  v3:= new `org.simpleframework.xml.core.PathParser$PathSection`;
  #L44a026.  call `<init>`(v3, v1, v2, v2) @signature `Lorg/simpleframework/xml/core/PathParser$PathSection;.<init>:(Lorg/simpleframework/xml/core/PathParser;II)V` @kind direct;
  #L44a02c.  return v3 @kind object;
}
procedure `java.lang.String` `getPrefix`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.getPrefix:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L449f64.  v0:= v2.`org.simpleframework.xml.core.PathParser.prefixes` @type ^`java.util.List` @kind object;
  #L449f68.  v1:= 0I;
  #L449f6a.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L449f70.  v0:= temp @kind object;
  #L449f72.  v0:= (`java.lang.String`) v0 @kind object;
  #L449f76.  return v0 @kind object;
}
procedure `boolean` `isAttribute`(`org.simpleframework.xml.core.PathParser` v1 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.isAttribute:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449c1c.  v0:= v1.`org.simpleframework.xml.core.PathParser.attribute` @type ^`boolean` @kind boolean;
  #L449c20.  return v0;
}
procedure `boolean` `isEmpty`(`org.simpleframework.xml.core.PathParser` v1 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449c50.  v0:= v1.`org.simpleframework.xml.core.PathParser.location` @type ^`java.lang.String` @kind object;
  #L449c54.  call temp:= `k`(v1, v0) @signature `Lorg/simpleframework/xml/core/PathParser;.k:(Ljava/lang/String;)Z` @kind direct;
  #L449c5a.  v0:= temp;
  #L449c5c.  return v0;
}
procedure `boolean` `isPath`(`org.simpleframework.xml.core.PathParser` v2 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.isPath:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L449cb8.  v0:= v2.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L449cbc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L449cc2.  v0:= temp;
  #L449cc4.  v1:= 1I;
  #L449cc6.  if v0 <= v1 then goto L449ccc;
  #L449cca.  goto L449cce;
  #L449ccc.  v1:= 0I;
  #L449cce.  return v1;
}
procedure `java.util.Iterator` `iterator`(`org.simpleframework.xml.core.PathParser` v1 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449fc4.  v0:= v1.`org.simpleframework.xml.core.PathParser.names` @type ^`java.util.List` @kind object;
  #L449fc8.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L449fce.  v0:= temp @kind object;
  #L449fd0.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`org.simpleframework.xml.core.PathParser` v4 @kind this) @signature `Lorg/simpleframework/xml/core/PathParser;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L449f88.  v0:= v4.`org.simpleframework.xml.core.PathParser.off` @type ^`int`;
  #L449f8c.  v1:= v4.`org.simpleframework.xml.core.PathParser.start` @type ^`int`;
  #L449f90.  v0:= v0 - v1 @kind int;
  #L449f92.  v2:= v4.`org.simpleframework.xml.core.PathParser.cache` @type ^`java.lang.String` @kind object;
  #L449f96.  if v2 != 0 then goto L449fac;
  #L449f9a.  v2:= new `java.lang.String`;
  #L449f9e.  v3:= v4.`org.simpleframework.xml.core.PathParser.data` @type ^`char`[] @kind object;
  #L449fa2.  call `<init>`(v2, v3, v1, v0) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L449fa8.  v4.`org.simpleframework.xml.core.PathParser.cache` @type ^`java.lang.String` := v2 @kind object;
  #L449fac.  v0:= v4.`org.simpleframework.xml.core.PathParser.cache` @type ^`java.lang.String` @kind object;
  #L449fb0.  return v0 @kind object;
}
