record `org.simpleframework.xml.core.ObjectFactory` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.PrimitiveFactory` @kind class {
}
procedure `void` `<init>`(`org.simpleframework.xml.core.ObjectFactory` v0 @kind this, `org.simpleframework.xml.core.Context` v1 @kind object, `org.simpleframework.xml.strategy.Type` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/ObjectFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L448bc8.  call `<init>`(v0, v1, v2, v3) @signature `Lorg/simpleframework/xml/core/PrimitiveFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)V` @kind direct;
  #L448bce.  return @kind void;
}
procedure `org.simpleframework.xml.core.Instance` `getInstance`(`org.simpleframework.xml.core.ObjectFactory` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/core/ObjectFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L448b54.  call temp:= `getOverride`(v3, v4) @signature `Lorg/simpleframework/xml/core/Factory;.getOverride:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @kind virtual;
  #L448b5a.  v4:= temp @kind object;
  #L448b5c.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L448b62.  v0:= temp @kind object;
  #L448b64.  if v4 != 0 then goto L448ba8;
  #L448b68.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L448b6e.  v4:= temp;
  #L448b70.  if v4 == 0 then goto L448b82;
  #L448b74.  v4:= v3.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L448b78.  call temp:= `getInstance`(v4, v0) @signature `Lorg/simpleframework/xml/core/Context;.getInstance:(Ljava/lang/Class;)Lorg/simpleframework/xml/core/Instance;` @kind interface;
  #L448b7e.  v4:= temp @kind object;
  #L448b80.  return v4 @kind object;
  #L448b82.  v4:= new `org.simpleframework.xml.core.InstantiationException`;
  #L448b86.  v1:= 2I;
  #L448b88.  v1:= new `java.lang.Object`[v1];
  #L448b8c.  v2:= 0I;
  #L448b8e.  v1[v2]:= v0 @kind object;
  #L448b92.  v0:= v3.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L448b96.  v2:= 1I;
  #L448b98.  v1[v2]:= v0 @kind object;
  #L448b9c.  v0:= "Cannot instantiate %s for %s" @kind object;
  #L448ba0.  call `<init>`(v4, v0, v1) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L448ba6.  throw v4;
  #L448ba8.  v0:= new `org.simpleframework.xml.core.ObjectInstance`;
  #L448bac.  v1:= v3.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L448bb0.  call `<init>`(v0, v1, v4) @signature `Lorg/simpleframework/xml/core/ObjectInstance;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Value;)V` @kind direct;
  #L448bb6.  return v0 @kind object;
}
