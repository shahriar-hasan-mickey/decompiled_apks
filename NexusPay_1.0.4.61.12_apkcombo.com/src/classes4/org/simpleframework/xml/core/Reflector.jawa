record `org.simpleframework.xml.core.Reflector` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Reflector` v0 @kind this) @signature `Lorg/simpleframework/xml/core/Reflector;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44c8b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44c8be.  return @kind void;
}
procedure `java.lang.Class` `a`(`java.lang.reflect.Type` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.a:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L44c534.  v1:= (`java.lang.reflect.GenericArrayType`) v1 @kind object;
  #L44c538.  call temp:= `getGenericComponentType`(v1) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L44c53e.  v1:= temp @kind object;
  #L44c540.  call temp:= `c`(v1) @signature `Lorg/simpleframework/xml/core/Reflector;.c:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L44c546.  v1:= temp @kind object;
  #L44c548.  if v1 == 0 then goto L44c560;
  #L44c54c.  v0:= 0I;
  #L44c54e.  call temp:= `newInstance`(v1, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L44c554.  v1:= temp @kind object;
  #L44c556.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L44c55c.  v1:= temp @kind object;
  #L44c55e.  return v1 @kind object;
  #L44c560.  v1:= 0I;
  #L44c562.  return v1 @kind object;
}
procedure `java.lang.Class` `b`(`java.lang.reflect.ParameterizedType` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.b:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L44c574.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L44c57a.  v1:= temp @kind object;
  #L44c57c.  v0:= length @variable v1;
  #L44c57e.  if v0 <= 0 then goto L44c592;
  #L44c582.  v0:= 0I;
  #L44c584.  v1:= v1[v0] @kind object;
  #L44c588.  call temp:= `c`(v1) @signature `Lorg/simpleframework/xml/core/Reflector;.c:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L44c58e.  v1:= temp @kind object;
  #L44c590.  return v1 @kind object;
  #L44c592.  v1:= 0I;
  #L44c594.  return v1 @kind object;
}
procedure `java.lang.Class` `c`(`java.lang.reflect.Type` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.c:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L44c5a8.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L44c5ac.  if v0 == 0 then goto L44c5b6;
  #L44c5b0.  v1:= (`java.lang.Class`) v1 @kind object;
  #L44c5b4.  return v1 @kind object;
  #L44c5b6.  call temp:= `e`(v1) @signature `Lorg/simpleframework/xml/core/Reflector;.e:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L44c5bc.  v1:= temp @kind object;
  #L44c5be.  return v1 @kind object;
}
procedure `java.lang.Class`[] `d`(`java.lang.reflect.ParameterizedType` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.d:(Ljava/lang/reflect/ParameterizedType;)[Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L44c6a8.  call temp:= `getActualTypeArguments`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L44c6ae.  v3:= temp @kind object;
  #L44c6b0.  v0:= length @variable v3;
  #L44c6b2.  v0:= new `java.lang.Class`[v0];
  #L44c6b6.  v1:= 0I;
  #L44c6b8.  v2:= length @variable v3;
  #L44c6ba.  if v1 >= v2 then goto L44c6d4;
  #L44c6be.  v2:= v3[v1] @kind object;
  #L44c6c2.  call temp:= `c`(v2) @signature `Lorg/simpleframework/xml/core/Reflector;.c:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L44c6c8.  v2:= temp @kind object;
  #L44c6ca.  v0[v1]:= v2 @kind object;
  #L44c6ce.  v1:= v1 + 1;
  #L44c6d2.  goto L44c6b8;
  #L44c6d4.  return v0 @kind object;
}
procedure `java.lang.Class` `e`(`java.lang.reflect.Type` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.e:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L44c5fc.  v0:= instanceof @variable v1 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L44c600.  if v0 == 0 then goto L44c60e;
  #L44c604.  call temp:= `a`(v1) @signature `Lorg/simpleframework/xml/core/Reflector;.a:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L44c60a.  v1:= temp @kind object;
  #L44c60c.  return v1 @kind object;
  #L44c60e.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L44c612.  return v1 @kind object;
}
procedure `java.lang.reflect.ParameterizedType` `f`(`java.lang.reflect.Constructor` v1 @kind object, `int` v2 ) @signature `Lorg/simpleframework/xml/core/Reflector;.f:(Ljava/lang/reflect/Constructor;I)Ljava/lang/reflect/ParameterizedType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L44c7f8.  call temp:= `getGenericParameterTypes`(v1) @signature `Ljava/lang/reflect/Constructor;.getGenericParameterTypes:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L44c7fe.  v1:= temp @kind object;
  #L44c800.  v0:= length @variable v1;
  #L44c802.  if v0 <= v2 then goto L44c818;
  #L44c806.  v1:= v1[v2] @kind object;
  #L44c80a.  v2:= instanceof @variable v1 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L44c80e.  if v2 == 0 then goto L44c818;
  #L44c812.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L44c816.  return v1 @kind object;
  #L44c818.  v1:= 0I;
  #L44c81a.  return v1 @kind object;
}
procedure `java.lang.reflect.ParameterizedType` `g`(`java.lang.reflect.Method` v1 @kind object, `int` v2 ) @signature `Lorg/simpleframework/xml/core/Reflector;.g:(Ljava/lang/reflect/Method;I)Ljava/lang/reflect/ParameterizedType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L44c82c.  call temp:= `getGenericParameterTypes`(v1) @signature `Ljava/lang/reflect/Method;.getGenericParameterTypes:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L44c832.  v1:= temp @kind object;
  #L44c834.  v0:= length @variable v1;
  #L44c836.  if v0 <= v2 then goto L44c84c;
  #L44c83a.  v1:= v1[v2] @kind object;
  #L44c83e.  v2:= instanceof @variable v1 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L44c842.  if v2 == 0 then goto L44c84c;
  #L44c846.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L44c84a.  return v1 @kind object;
  #L44c84c.  v1:= 0I;
  #L44c84e.  return v1 @kind object;
}
procedure `java.lang.Class` `getDependent`(`java.lang.reflect.Field` v0 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getDependent:(Ljava/lang/reflect/Field;)Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L44c5d0.  call temp:= `i`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.i:(Ljava/lang/reflect/Field;)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L44c5d6.  v0:= temp @kind object;
  #L44c5d8.  if v0 == 0 then goto L44c5e6;
  #L44c5dc.  call temp:= `b`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.b:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/Class;` @kind static;
  #L44c5e2.  v0:= temp @kind object;
  #L44c5e4.  return v0 @kind object;
  #L44c5e6.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L44c5ea.  return v0 @kind object;
}
procedure `java.lang.Class`[] `getDependents`(`java.lang.reflect.Field` v0 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getDependents:(Ljava/lang/reflect/Field;)[Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L44c6e8.  call temp:= `i`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.i:(Ljava/lang/reflect/Field;)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L44c6ee.  v0:= temp @kind object;
  #L44c6f0.  if v0 == 0 then goto L44c6fe;
  #L44c6f4.  call temp:= `d`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.d:(Ljava/lang/reflect/ParameterizedType;)[Ljava/lang/Class;` @kind static;
  #L44c6fa.  v0:= temp @kind object;
  #L44c6fc.  return v0 @kind object;
  #L44c6fe.  v0:= 0I;
  #L44c700.  v0:= new `java.lang.Class`[v0];
  #L44c704.  return v0 @kind object;
}
procedure `java.lang.String` `getName`(`java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getName:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L44c7a8.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L44c7ae.  v0:= temp;
  #L44c7b0.  if v0 <= 0 then goto L44c7e6;
  #L44c7b4.  call temp:= `toCharArray`(v3) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L44c7ba.  v3:= temp @kind object;
  #L44c7bc.  v0:= 0I;
  #L44c7be.  v1:= v3[v0] @kind char;
  #L44c7c2.  call temp:= `j`(v3) @signature `Lorg/simpleframework/xml/core/Reflector;.j:([C)Z` @kind static;
  #L44c7c8.  v2:= temp;
  #L44c7ca.  if v2 != 0 then goto L44c7da;
  #L44c7ce.  call temp:= `l`(v1) @signature `Lorg/simpleframework/xml/core/Reflector;.l:(C)C` @kind static;
  #L44c7d4.  v1:= temp;
  #L44c7d6.  v3[v0]:= v1 @kind char;
  #L44c7da.  v0:= new `java.lang.String`;
  #L44c7de.  call `<init>`(v0, v3) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L44c7e4.  return v0 @kind object;
  #L44c7e6.  return v3 @kind object;
}
procedure `java.lang.Class` `getParameterDependent`(`java.lang.reflect.Constructor` v0 @kind object, `int` v1 ) @signature `Lorg/simpleframework/xml/core/Reflector;.getParameterDependent:(Ljava/lang/reflect/Constructor;I)Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L44c624.  call temp:= `f`(v0, v1) @signature `Lorg/simpleframework/xml/core/Reflector;.f:(Ljava/lang/reflect/Constructor;I)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L44c62a.  v0:= temp @kind object;
  #L44c62c.  if v0 == 0 then goto L44c63a;
  #L44c630.  call temp:= `b`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.b:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/Class;` @kind static;
  #L44c636.  v0:= temp @kind object;
  #L44c638.  return v0 @kind object;
  #L44c63a.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L44c63e.  return v0 @kind object;
}
procedure `java.lang.Class` `getParameterDependent`(`java.lang.reflect.Method` v0 @kind object, `int` v1 ) @signature `Lorg/simpleframework/xml/core/Reflector;.getParameterDependent:(Ljava/lang/reflect/Method;I)Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L44c650.  call temp:= `g`(v0, v1) @signature `Lorg/simpleframework/xml/core/Reflector;.g:(Ljava/lang/reflect/Method;I)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L44c656.  v0:= temp @kind object;
  #L44c658.  if v0 == 0 then goto L44c666;
  #L44c65c.  call temp:= `b`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.b:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/Class;` @kind static;
  #L44c662.  v0:= temp @kind object;
  #L44c664.  return v0 @kind object;
  #L44c666.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L44c66a.  return v0 @kind object;
}
procedure `java.lang.Class`[] `getParameterDependents`(`java.lang.reflect.Constructor` v0 @kind object, `int` v1 ) @signature `Lorg/simpleframework/xml/core/Reflector;.getParameterDependents:(Ljava/lang/reflect/Constructor;I)[Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L44c718.  call temp:= `f`(v0, v1) @signature `Lorg/simpleframework/xml/core/Reflector;.f:(Ljava/lang/reflect/Constructor;I)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L44c71e.  v0:= temp @kind object;
  #L44c720.  if v0 == 0 then goto L44c72e;
  #L44c724.  call temp:= `d`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.d:(Ljava/lang/reflect/ParameterizedType;)[Ljava/lang/Class;` @kind static;
  #L44c72a.  v0:= temp @kind object;
  #L44c72c.  return v0 @kind object;
  #L44c72e.  v0:= 0I;
  #L44c730.  v0:= new `java.lang.Class`[v0];
  #L44c734.  return v0 @kind object;
}
procedure `java.lang.Class`[] `getParameterDependents`(`java.lang.reflect.Method` v0 @kind object, `int` v1 ) @signature `Lorg/simpleframework/xml/core/Reflector;.getParameterDependents:(Ljava/lang/reflect/Method;I)[Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L44c748.  call temp:= `g`(v0, v1) @signature `Lorg/simpleframework/xml/core/Reflector;.g:(Ljava/lang/reflect/Method;I)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L44c74e.  v0:= temp @kind object;
  #L44c750.  if v0 == 0 then goto L44c75e;
  #L44c754.  call temp:= `d`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.d:(Ljava/lang/reflect/ParameterizedType;)[Ljava/lang/Class;` @kind static;
  #L44c75a.  v0:= temp @kind object;
  #L44c75c.  return v0 @kind object;
  #L44c75e.  v0:= 0I;
  #L44c760.  v0:= new `java.lang.Class`[v0];
  #L44c764.  return v0 @kind object;
}
procedure `java.lang.Class` `getReturnDependent`(`java.lang.reflect.Method` v0 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getReturnDependent:(Ljava/lang/reflect/Method;)Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L44c67c.  call temp:= `h`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.h:(Ljava/lang/reflect/Method;)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L44c682.  v0:= temp @kind object;
  #L44c684.  if v0 == 0 then goto L44c692;
  #L44c688.  call temp:= `b`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.b:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/Class;` @kind static;
  #L44c68e.  v0:= temp @kind object;
  #L44c690.  return v0 @kind object;
  #L44c692.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L44c696.  return v0 @kind object;
}
procedure `java.lang.Class`[] `getReturnDependents`(`java.lang.reflect.Method` v0 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.getReturnDependents:(Ljava/lang/reflect/Method;)[Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L44c778.  call temp:= `h`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.h:(Ljava/lang/reflect/Method;)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L44c77e.  v0:= temp @kind object;
  #L44c780.  if v0 == 0 then goto L44c78e;
  #L44c784.  call temp:= `d`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.d:(Ljava/lang/reflect/ParameterizedType;)[Ljava/lang/Class;` @kind static;
  #L44c78a.  v0:= temp @kind object;
  #L44c78c.  return v0 @kind object;
  #L44c78e.  v0:= 0I;
  #L44c790.  v0:= new `java.lang.Class`[v0];
  #L44c794.  return v0 @kind object;
}
procedure `java.lang.reflect.ParameterizedType` `h`(`java.lang.reflect.Method` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.h:(Ljava/lang/reflect/Method;)Ljava/lang/reflect/ParameterizedType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L44c860.  call temp:= `getGenericReturnType`(v1) @signature `Ljava/lang/reflect/Method;.getGenericReturnType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L44c866.  v1:= temp @kind object;
  #L44c868.  v0:= instanceof @variable v1 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L44c86c.  if v0 == 0 then goto L44c876;
  #L44c870.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L44c874.  return v1 @kind object;
  #L44c876.  v1:= 0I;
  #L44c878.  return v1 @kind object;
}
procedure `java.lang.reflect.ParameterizedType` `i`(`java.lang.reflect.Field` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.i:(Ljava/lang/reflect/Field;)Ljava/lang/reflect/ParameterizedType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L44c88c.  call temp:= `getGenericType`(v1) @signature `Ljava/lang/reflect/Field;.getGenericType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L44c892.  v1:= temp @kind object;
  #L44c894.  v0:= instanceof @variable v1 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L44c898.  if v0 == 0 then goto L44c8a2;
  #L44c89c.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L44c8a0.  return v1 @kind object;
  #L44c8a2.  v1:= 0I;
  #L44c8a4.  return v1 @kind object;
}
procedure `boolean` `j`(`char`[] v3 @kind object) @signature `Lorg/simpleframework/xml/core/Reflector;.j:([C)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L44c4bc.  v0:= length @variable v3;
  #L44c4be.  v1:= 0I;
  #L44c4c0.  v2:= 2I;
  #L44c4c2.  if v0 >= v2 then goto L44c4c8;
  #L44c4c6.  return v1;
  #L44c4c8.  v0:= v3[v1] @kind char;
  #L44c4cc.  call temp:= `k`(v0) @signature `Lorg/simpleframework/xml/core/Reflector;.k:(C)Z` @kind static;
  #L44c4d2.  v0:= temp;
  #L44c4d4.  if v0 != 0 then goto L44c4da;
  #L44c4d8.  return v1;
  #L44c4da.  v0:= 1I;
  #L44c4dc.  v3:= v3[v0] @kind char;
  #L44c4e0.  call temp:= `k`(v3) @signature `Lorg/simpleframework/xml/core/Reflector;.k:(C)Z` @kind static;
  #L44c4e6.  v3:= temp;
  #L44c4e8.  return v3;
}
procedure `boolean` `k`(`char` v0 ) @signature `Lorg/simpleframework/xml/core/Reflector;.k:(C)Z` @AccessFlag PRIVATE_STATIC {
    temp;

  #L44c4fc.  call temp:= `isUpperCase`(v0) @signature `Ljava/lang/Character;.isUpperCase:(C)Z` @kind static;
  #L44c502.  v0:= temp;
  #L44c504.  return v0;
}
procedure `char` `l`(`char` v0 ) @signature `Lorg/simpleframework/xml/core/Reflector;.l:(C)C` @AccessFlag PRIVATE_STATIC {
    temp;

  #L44c518.  call temp:= `toLowerCase`(v0) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L44c51e.  v0:= temp;
  #L44c520.  return v0;
}
