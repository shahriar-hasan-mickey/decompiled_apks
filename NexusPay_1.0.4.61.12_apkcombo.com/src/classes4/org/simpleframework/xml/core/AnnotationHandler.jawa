record `org.simpleframework.xml.core.AnnotationHandler` @kind class @AccessFlag PUBLIC extends `java.lang.reflect.InvocationHandler` @kind interface {
  `org.simpleframework.xml.core.Comparer` `org.simpleframework.xml.core.AnnotationHandler.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `org.simpleframework.xml.core.AnnotationHandler.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.simpleframework.xml.core.AnnotationHandler.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.simpleframework.xml.core.AnnotationHandler.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.AnnotationHandler` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.<init>:(Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L43c820.  v0:= 1I;
  #L43c822.  call `<init>`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.<init>:(Ljava/lang/Class;Z)V` @kind direct;
  #L43c828.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.AnnotationHandler` v1 @kind this, `java.lang.Class` v2 @kind object, `boolean` v3 ) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.<init>:(Ljava/lang/Class;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L43c83c.  v0:= 0I;
  #L43c83e.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.<init>:(Ljava/lang/Class;ZZ)V` @kind direct;
  #L43c844.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.AnnotationHandler` v1 @kind this, `java.lang.Class` v2 @kind object, `boolean` v3 , `boolean` v4 ) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.<init>:(Ljava/lang/Class;ZZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L43c858.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43c85e.  v0:= new `org.simpleframework.xml.core.Comparer`;
  #L43c862.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/core/Comparer;.<init>:()V` @kind direct;
  #L43c868.  v1.`org.simpleframework.xml.core.AnnotationHandler.a` @type ^`org.simpleframework.xml.core.Comparer` := v0 @kind object;
  #L43c86c.  v1.`org.simpleframework.xml.core.AnnotationHandler.c` @type ^`boolean` := v4 @kind boolean;
  #L43c870.  v1.`org.simpleframework.xml.core.AnnotationHandler.d` @type ^`boolean` := v3 @kind boolean;
  #L43c874.  v1.`org.simpleframework.xml.core.AnnotationHandler.b` @type ^`java.lang.Class` := v2 @kind object;
  #L43c878.  return @kind void;
}
procedure `void` `a`(`org.simpleframework.xml.core.AnnotationHandler` v5 @kind this, `java.lang.StringBuilder` v6 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.a:(Ljava/lang/StringBuilder;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43c88c.  v0:= v5.`org.simpleframework.xml.core.AnnotationHandler.b` @type ^`java.lang.Class` @kind object;
  #L43c890.  call temp:= `getDeclaredMethods`(v0) @signature `Ljava/lang/Class;.getDeclaredMethods:()[Ljava/lang/reflect/Method;` @kind virtual;
  #L43c896.  v0:= temp @kind object;
  #L43c898.  v1:= 0I;
  #L43c89a.  v2:= length @variable v0;
  #L43c89c.  if v1 >= v2 then goto L43c8ec;
  #L43c8a0.  v2:= v0[v1] @kind object;
  #L43c8a4.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L43c8aa.  v2:= temp @kind object;
  #L43c8ac.  v3:= v0[v1] @kind object;
  #L43c8b0.  call temp:= `d`(v5, v3) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.d:(Ljava/lang/reflect/Method;)Ljava/lang/Object;` @kind direct;
  #L43c8b6.  v3:= temp @kind object;
  #L43c8b8.  if v1 <= 0 then goto L43c8d0;
  #L43c8bc.  v4:= 44I;
  #L43c8c0.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L43c8c6.  v4:= 32I;
  #L43c8ca.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L43c8d0.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43c8d6.  v2:= 61I;
  #L43c8da.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L43c8e0.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43c8e6.  v1:= v1 + 1;
  #L43c8ea.  goto L43c89a;
  #L43c8ec.  v0:= 41I;
  #L43c8f0.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L43c8f6.  return @kind void;
}
procedure `boolean` `b`(`org.simpleframework.xml.core.AnnotationHandler` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.b:(Ljava/lang/Object;[Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L43c678.  v4:= (`java.lang.annotation.Annotation`) v4 @kind object;
  #L43c67c.  v0:= 0I;
  #L43c67e.  v5:= v5[v0] @kind object;
  #L43c682.  v5:= (`java.lang.annotation.Annotation`) v5 @kind object;
  #L43c686.  call temp:= `annotationType`(v4) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L43c68c.  v1:= temp @kind object;
  #L43c68e.  call temp:= `annotationType`(v5) @signature `Ljava/lang/annotation/Annotation;.annotationType:()Ljava/lang/Class;` @kind interface;
  #L43c694.  v2:= temp @kind object;
  #L43c696.  if v1 != v2 then goto L43c6a8;
  #L43c69a.  v0:= v3.`org.simpleframework.xml.core.AnnotationHandler.a` @type ^`org.simpleframework.xml.core.Comparer` @kind object;
  #L43c69e.  call temp:= `equals`(v0, v4, v5) @signature `Lorg/simpleframework/xml/core/Comparer;.equals:(Ljava/lang/annotation/Annotation;Ljava/lang/annotation/Annotation;)Z` @kind virtual;
  #L43c6a4.  v4:= temp;
  #L43c6a6.  return v4;
  #L43c6a8.  v1:= new `org.simpleframework.xml.core.PersistenceException`;
  #L43c6ac.  v2:= 2I;
  #L43c6ae.  v2:= new `java.lang.Object`[v2];
  #L43c6b2.  v2[v0]:= v4 @kind object;
  #L43c6b6.  v4:= 1I;
  #L43c6b8.  v2[v4]:= v5 @kind object;
  #L43c6bc.  v4:= "Annotation %s is not the same as %s" @kind object;
  #L43c6c0.  call `<init>`(v1, v4, v2) @signature `Lorg/simpleframework/xml/core/PersistenceException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L43c6c6.  throw v1;
}
procedure `void` `c`(`org.simpleframework.xml.core.AnnotationHandler` v2 @kind this, `java.lang.StringBuilder` v3 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.c:(Ljava/lang/StringBuilder;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L43c908.  v0:= v2.`org.simpleframework.xml.core.AnnotationHandler.b` @type ^`java.lang.Class` @kind object;
  #L43c90c.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L43c912.  v0:= temp @kind object;
  #L43c914.  v1:= 64I;
  #L43c918.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L43c91e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43c924.  v0:= 40I;
  #L43c928.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L43c92e.  return @kind void;
}
procedure `java.lang.Object` `d`(`org.simpleframework.xml.core.AnnotationHandler` v2 @kind this, `java.lang.reflect.Method` v3 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.d:(Ljava/lang/reflect/Method;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L43c788.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L43c78e.  v0:= temp @kind object;
  #L43c790.  v1:= "required" @kind object;
  #L43c794.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43c79a.  v1:= temp;
  #L43c79c.  if v1 == 0 then goto L43c7ae;
  #L43c7a0.  v3:= v2.`org.simpleframework.xml.core.AnnotationHandler.d` @type ^`boolean` @kind boolean;
  #L43c7a4.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L43c7aa.  v3:= temp @kind object;
  #L43c7ac.  return v3 @kind object;
  #L43c7ae.  v1:= "attribute" @kind object;
  #L43c7b2.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43c7b8.  v0:= temp;
  #L43c7ba.  if v0 == 0 then goto L43c7cc;
  #L43c7be.  v3:= v2.`org.simpleframework.xml.core.AnnotationHandler.c` @type ^`boolean` @kind boolean;
  #L43c7c2.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L43c7c8.  v3:= temp @kind object;
  #L43c7ca.  return v3 @kind object;
  #L43c7cc.  call temp:= `getDefaultValue`(v3) @signature `Ljava/lang/reflect/Method;.getDefaultValue:()Ljava/lang/Object;` @kind virtual;
  #L43c7d2.  v3:= temp @kind object;
  #L43c7d4.  return v3 @kind object;
}
procedure `java.lang.Object` `invoke`(`org.simpleframework.xml.core.AnnotationHandler` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.reflect.Method` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.invoke:(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43c6d8.  call temp:= `getName`(v4) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L43c6de.  v0:= temp @kind object;
  #L43c6e0.  v1:= "toString" @kind object;
  #L43c6e4.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43c6ea.  v1:= temp;
  #L43c6ec.  if v1 == 0 then goto L43c6fa;
  #L43c6f0.  call temp:= `toString`(v2) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.toString:()Ljava/lang/String;` @kind virtual;
  #L43c6f6.  v3:= temp @kind object;
  #L43c6f8.  return v3 @kind object;
  #L43c6fa.  v1:= "equals" @kind object;
  #L43c6fe.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43c704.  v1:= temp;
  #L43c706.  if v1 == 0 then goto L43c71c;
  #L43c70a.  call temp:= `b`(v2, v3, v5) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.b:(Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind direct;
  #L43c710.  v3:= temp;
  #L43c712.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L43c718.  v3:= temp @kind object;
  #L43c71a.  return v3 @kind object;
  #L43c71c.  v3:= "annotationType" @kind object;
  #L43c720.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43c726.  v3:= temp;
  #L43c728.  if v3 == 0 then goto L43c732;
  #L43c72c.  v3:= v2.`org.simpleframework.xml.core.AnnotationHandler.b` @type ^`java.lang.Class` @kind object;
  #L43c730.  return v3 @kind object;
  #L43c732.  v3:= "required" @kind object;
  #L43c736.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43c73c.  v3:= temp;
  #L43c73e.  if v3 == 0 then goto L43c750;
  #L43c742.  v3:= v2.`org.simpleframework.xml.core.AnnotationHandler.d` @type ^`boolean` @kind boolean;
  #L43c746.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L43c74c.  v3:= temp @kind object;
  #L43c74e.  return v3 @kind object;
  #L43c750.  v3:= "attribute" @kind object;
  #L43c754.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L43c75a.  v3:= temp;
  #L43c75c.  if v3 == 0 then goto L43c76e;
  #L43c760.  v3:= v2.`org.simpleframework.xml.core.AnnotationHandler.c` @type ^`boolean` @kind boolean;
  #L43c764.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L43c76a.  v3:= temp @kind object;
  #L43c76c.  return v3 @kind object;
  #L43c76e.  call temp:= `getDefaultValue`(v4) @signature `Ljava/lang/reflect/Method;.getDefaultValue:()Ljava/lang/Object;` @kind virtual;
  #L43c774.  v3:= temp @kind object;
  #L43c776.  return v3 @kind object;
}
procedure `java.lang.String` `toString`(`org.simpleframework.xml.core.AnnotationHandler` v2 @kind this) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43c7e8.  v0:= new `java.lang.StringBuilder`;
  #L43c7ec.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43c7f2.  v1:= v2.`org.simpleframework.xml.core.AnnotationHandler.b` @type ^`java.lang.Class` @kind object;
  #L43c7f6.  if v1 == 0 then goto L43c806;
  #L43c7fa.  call `c`(v2, v0) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.c:(Ljava/lang/StringBuilder;)V` @kind direct;
  #L43c800.  call `a`(v2, v0) @signature `Lorg/simpleframework/xml/core/AnnotationHandler;.a:(Ljava/lang/StringBuilder;)V` @kind direct;
  #L43c806.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43c80c.  v0:= temp @kind object;
  #L43c80e.  return v0 @kind object;
}
