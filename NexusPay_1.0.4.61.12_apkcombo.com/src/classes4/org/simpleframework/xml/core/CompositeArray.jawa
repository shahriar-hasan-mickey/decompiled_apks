record `org.simpleframework.xml.core.CompositeArray` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.core.ArrayFactory` `org.simpleframework.xml.core.CompositeArray.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Traverser` `org.simpleframework.xml.core.CompositeArray.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.core.CompositeArray.c` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.CompositeArray.d` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.CompositeArray.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.CompositeArray` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `org.simpleframework.xml.strategy.Type` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeArray;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L43e64c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43e652.  v0:= new `org.simpleframework.xml.core.ArrayFactory`;
  #L43e656.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L43e65c.  v1.`org.simpleframework.xml.core.CompositeArray.a` @type ^`org.simpleframework.xml.core.ArrayFactory` := v0 @kind object;
  #L43e660.  v0:= new `org.simpleframework.xml.core.Traverser`;
  #L43e664.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/core/Traverser;.<init>:(Lorg/simpleframework/xml/core/Context;)V` @kind direct;
  #L43e66a.  v1.`org.simpleframework.xml.core.CompositeArray.b` @type ^`org.simpleframework.xml.core.Traverser` := v0 @kind object;
  #L43e66e.  v1.`org.simpleframework.xml.core.CompositeArray.c` @type ^`java.lang.String` := v5 @kind object;
  #L43e672.  v1.`org.simpleframework.xml.core.CompositeArray.d` @type ^`org.simpleframework.xml.strategy.Type` := v4 @kind object;
  #L43e676.  v1.`org.simpleframework.xml.core.CompositeArray.e` @type ^`org.simpleframework.xml.strategy.Type` := v3 @kind object;
  #L43e67a.  return @kind void;
}
procedure `void` `a`(`org.simpleframework.xml.core.CompositeArray` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Object` v4 @kind object, `int` v5 ) @signature `Lorg/simpleframework/xml/core/CompositeArray;.a:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L43e68c.  v0:= v2.`org.simpleframework.xml.core.CompositeArray.d` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43e690.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L43e696.  v0:= temp @kind object;
  #L43e698.  call temp:= `isEmpty`(v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.isEmpty:()Z` @kind interface;
  #L43e69e.  v1:= temp;
  #L43e6a0.  if v1 != 0 then goto L43e6b2;
  #L43e6a4.  v1:= v2.`org.simpleframework.xml.core.CompositeArray.b` @type ^`org.simpleframework.xml.core.Traverser` @kind object;
  #L43e6a8.  call temp:= `read`(v1, v3, v0) @signature `Lorg/simpleframework/xml/core/Traverser;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Ljava/lang/Object;` @kind virtual;
  #L43e6ae.  v3:= temp @kind object;
  #L43e6b0.  goto L43e6b4;
  #L43e6b2.  v3:= 0I;
  #L43e6b4.  call `set`(v4, v5, v3) @signature `Ljava/lang/reflect/Array;.set:(Ljava/lang/Object;ILjava/lang/Object;)V` @kind static;
  #L43e6ba.  return @kind void;
}
procedure `boolean` `b`(`org.simpleframework.xml.core.CompositeArray` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeArray;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L43e570.  call temp:= `getNext`(v3) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L43e576.  v0:= temp @kind object;
  #L43e578.  if v0 != 0 then goto L43e580;
  #L43e57c.  v3:= 1I;
  #L43e57e.  return v3;
  #L43e580.  call temp:= `isEmpty`(v0) @signature `Lorg/simpleframework/xml/stream/InputNode;.isEmpty:()Z` @kind interface;
  #L43e586.  v1:= temp;
  #L43e588.  if v1 != 0 then goto L43e570;
  #L43e58c.  v1:= v2.`org.simpleframework.xml.core.CompositeArray.b` @type ^`org.simpleframework.xml.core.Traverser` @kind object;
  #L43e590.  call temp:= `validate`(v1, v0, v4) @signature `Lorg/simpleframework/xml/core/Traverser;.validate:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @kind virtual;
  #L43e596.  goto L43e570;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.CompositeArray` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeArray;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43e5a8.  v0:= v2.`org.simpleframework.xml.core.CompositeArray.a` @type ^`org.simpleframework.xml.core.ArrayFactory` @kind object;
  #L43e5ac.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L43e5b2.  v0:= temp @kind object;
  #L43e5b4.  call temp:= `getInstance`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getInstance:()Ljava/lang/Object;` @kind interface;
  #L43e5ba.  v1:= temp @kind object;
  #L43e5bc.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L43e5c2.  v0:= temp;
  #L43e5c4.  if v0 != 0 then goto L43e5d2;
  #L43e5c8.  call temp:= `read`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/CompositeArray;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43e5ce.  v3:= temp @kind object;
  #L43e5d0.  return v3 @kind object;
  #L43e5d2.  return v1 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.CompositeArray` v5 @kind this, `org.simpleframework.xml.stream.InputNode` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeArray;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43e5e4.  call temp:= `getLength`(v7) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L43e5ea.  v0:= temp;
  #L43e5ec.  v1:= 0I;
  #L43e5ee.  v2:= 0I;
  #L43e5f0.  call temp:= `getPosition`(v6) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L43e5f6.  v3:= temp @kind object;
  #L43e5f8.  call temp:= `getNext`(v6) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L43e5fe.  v4:= temp @kind object;
  #L43e600.  if v4 != 0 then goto L43e606;
  #L43e604.  return v7 @kind object;
  #L43e606.  if v2 >= v0 then goto L43e616;
  #L43e60a.  call `a`(v5, v4, v7, v2) @signature `Lorg/simpleframework/xml/core/CompositeArray;.a:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;I)V` @kind direct;
  #L43e610.  v2:= v2 + 1;
  #L43e614.  goto L43e5f0;
  #L43e616.  v6:= new `org.simpleframework.xml.core.ElementException`;
  #L43e61a.  v7:= 2I;
  #L43e61c.  v7:= new `java.lang.Object`[v7];
  #L43e620.  v0:= v5.`org.simpleframework.xml.core.CompositeArray.e` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43e624.  v7[v1]:= v0 @kind object;
  #L43e628.  v0:= 1I;
  #L43e62a.  v7[v0]:= v3 @kind object;
  #L43e62e.  v0:= "Array length missing or incorrect for %s at %s" @kind object;
  #L43e632.  call `<init>`(v6, v0, v7) @signature `Lorg/simpleframework/xml/core/ElementException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L43e638.  throw v6;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.CompositeArray` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeArray;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43e528.  v0:= v2.`org.simpleframework.xml.core.CompositeArray.a` @type ^`org.simpleframework.xml.core.ArrayFactory` @kind object;
  #L43e52c.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L43e532.  v0:= temp @kind object;
  #L43e534.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L43e53a.  v1:= temp;
  #L43e53c.  if v1 != 0 then goto L43e55a;
  #L43e540.  v1:= 0I;
  #L43e542.  call temp:= `setInstance`(v0, v1) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43e548.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getType:()Ljava/lang/Class;` @kind interface;
  #L43e54e.  v0:= temp @kind object;
  #L43e550.  call temp:= `b`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/CompositeArray;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @kind direct;
  #L43e556.  v3:= temp;
  #L43e558.  return v3;
  #L43e55a.  v3:= 1I;
  #L43e55c.  return v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.CompositeArray` v6 @kind this, `org.simpleframework.xml.stream.OutputNode` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lorg/simpleframework/xml/core/CompositeArray;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L43e6cc.  call temp:= `getLength`(v8) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L43e6d2.  v0:= temp;
  #L43e6d4.  v1:= 0I;
  #L43e6d6.  if v1 >= v0 then goto L43e702;
  #L43e6da.  call temp:= `get`(v8, v1) @signature `Ljava/lang/reflect/Array;.get:(Ljava/lang/Object;I)Ljava/lang/Object;` @kind static;
  #L43e6e0.  v2:= temp @kind object;
  #L43e6e2.  v3:= v6.`org.simpleframework.xml.core.CompositeArray.d` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L43e6e6.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L43e6ec.  v3:= temp @kind object;
  #L43e6ee.  v4:= v6.`org.simpleframework.xml.core.CompositeArray.b` @type ^`org.simpleframework.xml.core.Traverser` @kind object;
  #L43e6f2.  v5:= v6.`org.simpleframework.xml.core.CompositeArray.c` @type ^`java.lang.String` @kind object;
  #L43e6f6.  call `write`(v4, v7, v2, v3, v5) @signature `Lorg/simpleframework/xml/core/Traverser;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)V` @kind virtual;
  #L43e6fc.  v1:= v1 + 1;
  #L43e700.  goto L43e6d6;
  #L43e702.  call `commit`(v7) @signature `Lorg/simpleframework/xml/stream/OutputNode;.commit:()V` @kind interface;
  #L43e708.  return @kind void;
}
