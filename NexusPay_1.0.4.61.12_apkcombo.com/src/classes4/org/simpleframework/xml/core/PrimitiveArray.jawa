record `org.simpleframework.xml.core.PrimitiveArray` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.Converter` @kind interface {
  `org.simpleframework.xml.core.ArrayFactory` `org.simpleframework.xml.core.PrimitiveArray.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Primitive` `org.simpleframework.xml.core.PrimitiveArray.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.core.PrimitiveArray.c` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PrimitiveArray.d` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.PrimitiveArray.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.PrimitiveArray` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `org.simpleframework.xml.strategy.Type` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L44b238.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44b23e.  v0:= new `org.simpleframework.xml.core.ArrayFactory`;
  #L44b242.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L44b248.  v1.`org.simpleframework.xml.core.PrimitiveArray.a` @type ^`org.simpleframework.xml.core.ArrayFactory` := v0 @kind object;
  #L44b24c.  v0:= new `org.simpleframework.xml.core.Primitive`;
  #L44b250.  call `<init>`(v0, v2, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @kind direct;
  #L44b256.  v1.`org.simpleframework.xml.core.PrimitiveArray.b` @type ^`org.simpleframework.xml.core.Primitive` := v0 @kind object;
  #L44b25a.  v1.`org.simpleframework.xml.core.PrimitiveArray.c` @type ^`java.lang.String` := v5 @kind object;
  #L44b25e.  v1.`org.simpleframework.xml.core.PrimitiveArray.d` @type ^`org.simpleframework.xml.strategy.Type` := v4 @kind object;
  #L44b262.  v1.`org.simpleframework.xml.core.PrimitiveArray.e` @type ^`org.simpleframework.xml.strategy.Type` := v3 @kind object;
  #L44b266.  return @kind void;
}
procedure `boolean` `a`(`org.simpleframework.xml.core.PrimitiveArray` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.a:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L44b0f0.  v0:= v2.`org.simpleframework.xml.core.PrimitiveArray.a` @type ^`org.simpleframework.xml.core.ArrayFactory` @kind object;
  #L44b0f4.  v1:= v2.`org.simpleframework.xml.core.PrimitiveArray.d` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L44b0f8.  call temp:= `setOverride`(v0, v1, v4, v3) @signature `Lorg/simpleframework/xml/core/Factory;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L44b0fe.  v3:= temp;
  #L44b100.  return v3;
}
procedure `boolean` `b`(`org.simpleframework.xml.core.PrimitiveArray` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L44b15c.  call temp:= `getNext`(v2) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L44b162.  v3:= temp @kind object;
  #L44b164.  if v3 != 0 then goto L44b16c;
  #L44b168.  v2:= 1I;
  #L44b16a.  return v2;
  #L44b16c.  v0:= v1.`org.simpleframework.xml.core.PrimitiveArray.b` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L44b170.  call temp:= `validate`(v0, v3) @signature `Lorg/simpleframework/xml/core/Primitive;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L44b176.  goto L44b15c;
}
procedure `void` `c`(`org.simpleframework.xml.core.PrimitiveArray` v0 @kind this, `org.simpleframework.xml.stream.OutputNode` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.c:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;I)V` @AccessFlag PRIVATE {
    temp;

  #L44b2b8.  call temp:= `get`(v2, v3) @signature `Ljava/lang/reflect/Array;.get:(Ljava/lang/Object;I)Ljava/lang/Object;` @kind static;
  #L44b2be.  v2:= temp @kind object;
  #L44b2c0.  if v2 == 0 then goto L44b2da;
  #L44b2c4.  call temp:= `a`(v0, v1, v2) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.a:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)Z` @kind direct;
  #L44b2ca.  v3:= temp;
  #L44b2cc.  if v3 != 0 then goto L44b2da;
  #L44b2d0.  v3:= v0.`org.simpleframework.xml.core.PrimitiveArray.b` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L44b2d4.  call `write`(v3, v1, v2) @signature `Lorg/simpleframework/xml/core/Primitive;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @kind virtual;
  #L44b2da.  return @kind void;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveArray` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44b188.  v0:= v2.`org.simpleframework.xml.core.PrimitiveArray.a` @type ^`org.simpleframework.xml.core.ArrayFactory` @kind object;
  #L44b18c.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L44b192.  v0:= temp @kind object;
  #L44b194.  call temp:= `getInstance`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getInstance:()Ljava/lang/Object;` @kind interface;
  #L44b19a.  v1:= temp @kind object;
  #L44b19c.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L44b1a2.  v0:= temp;
  #L44b1a4.  if v0 != 0 then goto L44b1b2;
  #L44b1a8.  call temp:= `read`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44b1ae.  v3:= temp @kind object;
  #L44b1b0.  return v3 @kind object;
  #L44b1b2.  return v1 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.core.PrimitiveArray` v5 @kind this, `org.simpleframework.xml.stream.InputNode` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.read:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44b1c4.  call temp:= `getLength`(v7) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L44b1ca.  v0:= temp;
  #L44b1cc.  v1:= 0I;
  #L44b1ce.  v2:= 0I;
  #L44b1d0.  call temp:= `getPosition`(v6) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L44b1d6.  v3:= temp @kind object;
  #L44b1d8.  call temp:= `getNext`(v6) @signature `Lorg/simpleframework/xml/stream/InputNode;.getNext:()Lorg/simpleframework/xml/stream/InputNode;` @kind interface;
  #L44b1de.  v4:= temp @kind object;
  #L44b1e0.  if v4 != 0 then goto L44b1e6;
  #L44b1e4.  return v7 @kind object;
  #L44b1e6.  if v2 >= v0 then goto L44b202;
  #L44b1ea.  v3:= v5.`org.simpleframework.xml.core.PrimitiveArray.b` @type ^`org.simpleframework.xml.core.Primitive` @kind object;
  #L44b1ee.  call temp:= `read`(v3, v4) @signature `Lorg/simpleframework/xml/core/Primitive;.read:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/Object;` @kind virtual;
  #L44b1f4.  v3:= temp @kind object;
  #L44b1f6.  call `set`(v7, v2, v3) @signature `Ljava/lang/reflect/Array;.set:(Ljava/lang/Object;ILjava/lang/Object;)V` @kind static;
  #L44b1fc.  v2:= v2 + 1;
  #L44b200.  goto L44b1d0;
  #L44b202.  v6:= new `org.simpleframework.xml.core.ElementException`;
  #L44b206.  v7:= 2I;
  #L44b208.  v7:= new `java.lang.Object`[v7];
  #L44b20c.  v0:= v5.`org.simpleframework.xml.core.PrimitiveArray.e` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L44b210.  v7[v1]:= v0 @kind object;
  #L44b214.  v0:= 1I;
  #L44b216.  v7[v0]:= v3 @kind object;
  #L44b21a.  v0:= "Array length missing or incorrect for %s at %s" @kind object;
  #L44b21e.  call `<init>`(v6, v0, v7) @signature `Lorg/simpleframework/xml/core/ElementException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L44b224.  throw v6;
}
procedure `boolean` `validate`(`org.simpleframework.xml.core.PrimitiveArray` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.validate:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44b114.  v0:= v2.`org.simpleframework.xml.core.PrimitiveArray.a` @type ^`org.simpleframework.xml.core.ArrayFactory` @kind object;
  #L44b118.  call temp:= `getInstance`(v0, v3) @signature `Lorg/simpleframework/xml/core/ArrayFactory;.getInstance:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/core/Instance;` @kind virtual;
  #L44b11e.  v0:= temp @kind object;
  #L44b120.  call temp:= `isReference`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.isReference:()Z` @kind interface;
  #L44b126.  v1:= temp;
  #L44b128.  if v1 != 0 then goto L44b146;
  #L44b12c.  v1:= 0I;
  #L44b12e.  call temp:= `setInstance`(v0, v1) @signature `Lorg/simpleframework/xml/core/Instance;.setInstance:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44b134.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/core/Instance;.getType:()Ljava/lang/Class;` @kind interface;
  #L44b13a.  v0:= temp @kind object;
  #L44b13c.  call temp:= `b`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.b:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/Class;)Z` @kind direct;
  #L44b142.  v3:= temp;
  #L44b144.  return v3;
  #L44b146.  v3:= 1I;
  #L44b148.  return v3;
}
procedure `void` `write`(`org.simpleframework.xml.core.PrimitiveArray` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.write:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44b278.  call temp:= `getLength`(v5) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L44b27e.  v0:= temp;
  #L44b280.  v1:= 0I;
  #L44b282.  if v1 >= v0 then goto L44b2a4;
  #L44b286.  v2:= v3.`org.simpleframework.xml.core.PrimitiveArray.c` @type ^`java.lang.String` @kind object;
  #L44b28a.  call temp:= `getChild`(v4, v2) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getChild:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind interface;
  #L44b290.  v2:= temp @kind object;
  #L44b292.  if v2 != 0 then goto L44b298;
  #L44b296.  goto L44b2a4;
  #L44b298.  call `c`(v3, v2, v5, v1) @signature `Lorg/simpleframework/xml/core/PrimitiveArray;.c:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/Object;I)V` @kind direct;
  #L44b29e.  v1:= v1 + 1;
  #L44b2a2.  goto L44b282;
  #L44b2a4.  return @kind void;
}
