record `org.simpleframework.xml.core.MethodScanner` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.core.ContactList` @kind class {
  `org.simpleframework.xml.core.MethodPartFactory` `org.simpleframework.xml.core.MethodScanner.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Support` `org.simpleframework.xml.core.MethodScanner.b` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.MethodScanner$PartMap` `org.simpleframework.xml.core.MethodScanner.c` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.MethodScanner$PartMap` `org.simpleframework.xml.core.MethodScanner.d` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.core.Detail` `org.simpleframework.xml.core.MethodScanner.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.MethodScanner` v2 @kind this, `org.simpleframework.xml.core.Detail` v3 @kind object, `org.simpleframework.xml.core.Support` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.<init>:(Lorg/simpleframework/xml/core/Detail;Lorg/simpleframework/xml/core/Support;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L447b50.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/core/ContactList;.<init>:()V` @kind direct;
  #L447b56.  v0:= new `org.simpleframework.xml.core.MethodPartFactory`;
  #L447b5a.  call `<init>`(v0, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.<init>:(Lorg/simpleframework/xml/core/Detail;Lorg/simpleframework/xml/core/Support;)V` @kind direct;
  #L447b60.  v2.`org.simpleframework.xml.core.MethodScanner.a` @type ^`org.simpleframework.xml.core.MethodPartFactory` := v0 @kind object;
  #L447b64.  v0:= new `org.simpleframework.xml.core.MethodScanner$PartMap`;
  #L447b68.  v1:= 0I;
  #L447b6a.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.<init>:(Lorg/simpleframework/xml/core/MethodScanner$1;)V` @kind direct;
  #L447b70.  v2.`org.simpleframework.xml.core.MethodScanner.c` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` := v0 @kind object;
  #L447b74.  v0:= new `org.simpleframework.xml.core.MethodScanner$PartMap`;
  #L447b78.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.<init>:(Lorg/simpleframework/xml/core/MethodScanner$1;)V` @kind direct;
  #L447b7e.  v2.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` := v0 @kind object;
  #L447b82.  v2.`org.simpleframework.xml.core.MethodScanner.b` @type ^`org.simpleframework.xml.core.Support` := v4 @kind object;
  #L447b86.  v2.`org.simpleframework.xml.core.MethodScanner.e` @type ^`org.simpleframework.xml.core.Detail` := v3 @kind object;
  #L447b8a.  call `q`(v2, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.q:(Lorg/simpleframework/xml/core/Detail;)V` @kind direct;
  #L447b90.  return @kind void;
}
procedure `void` `a`(`org.simpleframework.xml.core.MethodScanner` v3 @kind this) @signature `Lorg/simpleframework/xml/core/MethodScanner;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L447ba4.  v0:= v3.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L447ba8.  call temp:= `iterator`(v0) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L447bae.  v0:= temp @kind object;
  #L447bb0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L447bb6.  v1:= temp;
  #L447bb8.  if v1 == 0 then goto L447be4;
  #L447bbc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L447bc2.  v1:= temp @kind object;
  #L447bc4.  v1:= (`java.lang.String`) v1 @kind object;
  #L447bc8.  v2:= v3.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L447bcc.  call temp:= `get`(v2, v1) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L447bd2.  v2:= temp @kind object;
  #L447bd4.  v2:= (`org.simpleframework.xml.core.MethodPart`) v2 @kind object;
  #L447bd8.  if v2 == 0 then goto L447bb0;
  #L447bdc.  call `c`(v3, v2, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner;.c:(Lorg/simpleframework/xml/core/MethodPart;Ljava/lang/String;)V` @kind direct;
  #L447be2.  goto L447bb0;
  #L447be4.  return @kind void;
}
procedure `void` `b`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `org.simpleframework.xml.core.MethodPart` v2 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.b:(Lorg/simpleframework/xml/core/MethodPart;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L447bf8.  v0:= new `org.simpleframework.xml.core.MethodContact`;
  #L447bfc.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/core/MethodContact;.<init>:(Lorg/simpleframework/xml/core/MethodPart;)V` @kind direct;
  #L447c02.  call temp:= `add`(v1, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L447c08.  return @kind void;
}
procedure `void` `c`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `org.simpleframework.xml.core.MethodPart` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.c:(Lorg/simpleframework/xml/core/MethodPart;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L447c1c.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.c` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L447c20.  call temp:= `take`(v0, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.take:(Ljava/lang/String;)Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L447c26.  v3:= temp @kind object;
  #L447c28.  if v3 == 0 then goto L447c34;
  #L447c2c.  call `d`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.d:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodPart;)V` @kind direct;
  #L447c32.  goto L447c3a;
  #L447c34.  call `b`(v1, v2) @signature `Lorg/simpleframework/xml/core/MethodScanner;.b:(Lorg/simpleframework/xml/core/MethodPart;)V` @kind direct;
  #L447c3a.  return @kind void;
}
procedure `void` `d`(`org.simpleframework.xml.core.MethodScanner` v6 @kind this, `org.simpleframework.xml.core.MethodPart` v7 @kind object, `org.simpleframework.xml.core.MethodPart` v8 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.d:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodPart;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L447c4c.  call temp:= `getAnnotation`(v7) @signature `Lorg/simpleframework/xml/core/MethodPart;.getAnnotation:()Ljava/lang/annotation/Annotation;` @kind interface;
  #L447c52.  v0:= temp @kind object;
  #L447c54.  call temp:= `getName`(v7) @signature `Lorg/simpleframework/xml/core/MethodPart;.getName:()Ljava/lang/String;` @kind interface;
  #L447c5a.  v1:= temp @kind object;
  #L447c5c.  call temp:= `getAnnotation`(v8) @signature `Lorg/simpleframework/xml/core/MethodPart;.getAnnotation:()Ljava/lang/annotation/Annotation;` @kind interface;
  #L447c62.  v2:= temp @kind object;
  #L447c64.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L447c6a.  v0:= temp;
  #L447c6c.  v2:= 1I;
  #L447c6e.  v3:= 0I;
  #L447c70.  v4:= 2I;
  #L447c72.  if v0 == 0 then goto L447cb8;
  #L447c76.  call temp:= `getType`(v7) @signature `Lorg/simpleframework/xml/core/MethodPart;.getType:()Ljava/lang/Class;` @kind interface;
  #L447c7c.  v0:= temp @kind object;
  #L447c7e.  call temp:= `getType`(v8) @signature `Lorg/simpleframework/xml/core/MethodPart;.getType:()Ljava/lang/Class;` @kind interface;
  #L447c84.  v5:= temp @kind object;
  #L447c86.  if v0 != v5 then goto L447c9c;
  #L447c8a.  v0:= new `org.simpleframework.xml.core.MethodContact`;
  #L447c8e.  call `<init>`(v0, v7, v8) @signature `Lorg/simpleframework/xml/core/MethodContact;.<init>:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodPart;)V` @kind direct;
  #L447c94.  call temp:= `add`(v6, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L447c9a.  return @kind void;
  #L447c9c.  v7:= new `org.simpleframework.xml.core.MethodException`;
  #L447ca0.  v8:= new `java.lang.Object`[v4];
  #L447ca4.  v8[v3]:= v1 @kind object;
  #L447ca8.  v8[v2]:= v0 @kind object;
  #L447cac.  v0:= "Method types do not match for %s in %s" @kind object;
  #L447cb0.  call `<init>`(v7, v0, v8) @signature `Lorg/simpleframework/xml/core/MethodException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L447cb6.  throw v7;
  #L447cb8.  v7:= new `org.simpleframework.xml.core.MethodException`;
  #L447cbc.  v8:= new `java.lang.Object`[v4];
  #L447cc0.  v8[v3]:= v1 @kind object;
  #L447cc4.  v0:= v6.`org.simpleframework.xml.core.MethodScanner.e` @type ^`org.simpleframework.xml.core.Detail` @kind object;
  #L447cc8.  v8[v2]:= v0 @kind object;
  #L447ccc.  v0:= "Annotations do not match for '%s' in %s" @kind object;
  #L447cd0.  call `<init>`(v7, v0, v8) @signature `Lorg/simpleframework/xml/core/MethodException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L447cd6.  throw v7;
}
procedure `void` `e`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `java.lang.Class` v2 @kind object, `org.simpleframework.xml.DefaultType` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.e:(Ljava/lang/Class;Lorg/simpleframework/xml/DefaultType;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L447ce8.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.b` @type ^`org.simpleframework.xml.core.Support` @kind object;
  #L447cec.  call temp:= `getMethods`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/Support;.getMethods:(Ljava/lang/Class;Lorg/simpleframework/xml/DefaultType;)Lorg/simpleframework/xml/core/ContactList;` @kind virtual;
  #L447cf2.  v2:= temp @kind object;
  #L447cf4.  call temp:= `iterator`(v2) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L447cfa.  v2:= temp @kind object;
  #L447cfc.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L447d02.  v3:= temp;
  #L447d04.  if v3 == 0 then goto L447d20;
  #L447d08.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L447d0e.  v3:= temp @kind object;
  #L447d10.  v3:= (`org.simpleframework.xml.core.Contact`) v3 @kind object;
  #L447d14.  v3:= (`org.simpleframework.xml.core.MethodContact`) v3 @kind object;
  #L447d18.  call `l`(v1, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.l:(Lorg/simpleframework/xml/core/MethodContact;)V` @kind direct;
  #L447d1e.  goto L447cfc;
  #L447d20.  return @kind void;
}
procedure `void` `f`(`org.simpleframework.xml.core.MethodScanner` v5 @kind this, `org.simpleframework.xml.core.Detail` v6 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.f:(Lorg/simpleframework/xml/core/Detail;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L447d34.  call temp:= `getMethods`(v6) @signature `Lorg/simpleframework/xml/core/Detail;.getMethods:()Ljava/util/List;` @kind interface;
  #L447d3a.  v6:= temp @kind object;
  #L447d3c.  call temp:= `iterator`(v6) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L447d42.  v6:= temp @kind object;
  #L447d44.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L447d4a.  v0:= temp;
  #L447d4c.  if v0 == 0 then goto L447d84;
  #L447d50.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L447d56.  v0:= temp @kind object;
  #L447d58.  v0:= (`org.simpleframework.xml.core.MethodDetail`) v0 @kind object;
  #L447d5c.  call temp:= `getAnnotations`(v0) @signature `Lorg/simpleframework/xml/core/MethodDetail;.getAnnotations:()[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L447d62.  v1:= temp @kind object;
  #L447d64.  call temp:= `getMethod`(v0) @signature `Lorg/simpleframework/xml/core/MethodDetail;.getMethod:()Ljava/lang/reflect/Method;` @kind virtual;
  #L447d6a.  v0:= temp @kind object;
  #L447d6c.  v2:= length @variable v1;
  #L447d6e.  v3:= 0I;
  #L447d70.  if v3 >= v2 then goto L447d44;
  #L447d74.  v4:= v1[v3] @kind object;
  #L447d78.  call `p`(v5, v0, v4, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner;.p:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L447d7e.  v3:= v3 + 1;
  #L447d82.  goto L447d70;
  #L447d84.  return @kind void;
}
procedure `void` `g`(`org.simpleframework.xml.core.MethodScanner` v2 @kind this, `org.simpleframework.xml.core.Detail` v3 @kind object, `org.simpleframework.xml.DefaultType` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.g:(Lorg/simpleframework/xml/core/Detail;Lorg/simpleframework/xml/DefaultType;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L447d98.  call temp:= `getMethods`(v3) @signature `Lorg/simpleframework/xml/core/Detail;.getMethods:()Ljava/util/List;` @kind interface;
  #L447d9e.  v3:= temp @kind object;
  #L447da0.  v0:= `@@org.simpleframework.xml.DefaultType.PROPERTY` @type ^`org.simpleframework.xml.DefaultType` @kind object;
  #L447da4.  if v4 != v0 then goto L447df0;
  #L447da8.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L447dae.  v3:= temp @kind object;
  #L447db0.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L447db6.  v4:= temp;
  #L447db8.  if v4 == 0 then goto L447df0;
  #L447dbc.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L447dc2.  v4:= temp @kind object;
  #L447dc4.  v4:= (`org.simpleframework.xml.core.MethodDetail`) v4 @kind object;
  #L447dc8.  call temp:= `getAnnotations`(v4) @signature `Lorg/simpleframework/xml/core/MethodDetail;.getAnnotations:()[Ljava/lang/annotation/Annotation;` @kind virtual;
  #L447dce.  v0:= temp @kind object;
  #L447dd0.  call temp:= `getMethod`(v4) @signature `Lorg/simpleframework/xml/core/MethodDetail;.getMethod:()Ljava/lang/reflect/Method;` @kind virtual;
  #L447dd6.  v4:= temp @kind object;
  #L447dd8.  v1:= v2.`org.simpleframework.xml.core.MethodScanner.a` @type ^`org.simpleframework.xml.core.MethodPartFactory` @kind object;
  #L447ddc.  call temp:= `getType`(v1, v4) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getType:(Ljava/lang/reflect/Method;)Ljava/lang/Class;` @kind virtual;
  #L447de2.  v1:= temp @kind object;
  #L447de4.  if v1 == 0 then goto L447db0;
  #L447de8.  call `k`(v2, v4, v0) @signature `Lorg/simpleframework/xml/core/MethodScanner;.k:(Ljava/lang/reflect/Method;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L447dee.  goto L447db0;
  #L447df0.  return @kind void;
}
procedure `void` `h`(`org.simpleframework.xml.core.MethodScanner` v3 @kind this, `org.simpleframework.xml.core.MethodPart` v4 @kind object, `org.simpleframework.xml.core.MethodScanner$PartMap` v5 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.h:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L447e04.  call temp:= `getName`(v4) @signature `Lorg/simpleframework/xml/core/MethodPart;.getName:()Ljava/lang/String;` @kind interface;
  #L447e0a.  v0:= temp @kind object;
  #L447e0c.  call temp:= `remove`(v5, v0) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L447e12.  v1:= temp @kind object;
  #L447e14.  v1:= (`org.simpleframework.xml.core.MethodPart`) v1 @kind object;
  #L447e18.  if v1 == 0 then goto L447e2a;
  #L447e1c.  call temp:= `i`(v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.i:(Lorg/simpleframework/xml/core/MethodPart;)Z` @kind direct;
  #L447e22.  v2:= temp;
  #L447e24.  if v2 == 0 then goto L447e2a;
  #L447e28.  v4:= v1 @kind object;
  #L447e2a.  call temp:= `put`(v5, v0, v4) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L447e30.  return @kind void;
}
procedure `boolean` `i`(`org.simpleframework.xml.core.MethodScanner` v0 @kind this, `org.simpleframework.xml.core.MethodPart` v1 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.i:(Lorg/simpleframework/xml/core/MethodPart;)Z` @AccessFlag PRIVATE {
    temp;

  #L447b28.  call temp:= `getAnnotation`(v1) @signature `Lorg/simpleframework/xml/core/MethodPart;.getAnnotation:()Ljava/lang/annotation/Annotation;` @kind interface;
  #L447b2e.  v1:= temp @kind object;
  #L447b30.  v1:= instanceof @variable v1 @type ^`org.simpleframework.xml.Text` @kind boolean;
  #L447b34.  if v1 == 0 then goto L447b3c;
  #L447b38.  v1:= 1I;
  #L447b3a.  return v1;
  #L447b3c.  v1:= 0I;
  #L447b3e.  return v1;
}
procedure `void` `j`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `java.lang.reflect.Method` v2 @kind object, `java.lang.annotation.Annotation` v3 @kind object, `java.lang.annotation.Annotation`[] v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L447e44.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.a` @type ^`org.simpleframework.xml.core.MethodPartFactory` @kind object;
  #L447e48.  call temp:= `getInstance`(v0, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getInstance:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L447e4e.  v2:= temp @kind object;
  #L447e50.  call temp:= `getMethodType`(v2) @signature `Lorg/simpleframework/xml/core/MethodPart;.getMethodType:()Lorg/simpleframework/xml/core/MethodType;` @kind interface;
  #L447e56.  v3:= temp @kind object;
  #L447e58.  v4:= `@@org.simpleframework.xml.core.MethodType.GET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L447e5c.  if v3 != v4 then goto L447e6a;
  #L447e60.  v4:= v1.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L447e64.  call `m`(v1, v2, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.m:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L447e6a.  v4:= `@@org.simpleframework.xml.core.MethodType.IS` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L447e6e.  if v3 != v4 then goto L447e7c;
  #L447e72.  v4:= v1.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L447e76.  call `m`(v1, v2, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.m:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L447e7c.  v4:= `@@org.simpleframework.xml.core.MethodType.SET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L447e80.  if v3 != v4 then goto L447e8e;
  #L447e84.  v3:= v1.`org.simpleframework.xml.core.MethodScanner.c` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L447e88.  call `m`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.m:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L447e8e.  return @kind void;
}
procedure `void` `k`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `java.lang.reflect.Method` v2 @kind object, `java.lang.annotation.Annotation`[] v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.k:(Ljava/lang/reflect/Method;[Ljava/lang/annotation/Annotation;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L447ea0.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.a` @type ^`org.simpleframework.xml.core.MethodPartFactory` @kind object;
  #L447ea4.  call temp:= `getInstance`(v0, v2, v3) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getInstance:(Ljava/lang/reflect/Method;[Ljava/lang/annotation/Annotation;)Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L447eaa.  v2:= temp @kind object;
  #L447eac.  call temp:= `getMethodType`(v2) @signature `Lorg/simpleframework/xml/core/MethodPart;.getMethodType:()Lorg/simpleframework/xml/core/MethodType;` @kind interface;
  #L447eb2.  v3:= temp @kind object;
  #L447eb4.  v0:= `@@org.simpleframework.xml.core.MethodType.GET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L447eb8.  if v3 != v0 then goto L447ec6;
  #L447ebc.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L447ec0.  call `m`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/MethodScanner;.m:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L447ec6.  v0:= `@@org.simpleframework.xml.core.MethodType.IS` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L447eca.  if v3 != v0 then goto L447ed8;
  #L447ece.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L447ed2.  call `m`(v1, v2, v0) @signature `Lorg/simpleframework/xml/core/MethodScanner;.m:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L447ed8.  v0:= `@@org.simpleframework.xml.core.MethodType.SET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L447edc.  if v3 != v0 then goto L447eea;
  #L447ee0.  v3:= v1.`org.simpleframework.xml.core.MethodScanner.c` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L447ee4.  call `m`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.m:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L447eea.  return @kind void;
}
procedure `void` `l`(`org.simpleframework.xml.core.MethodScanner` v2 @kind this, `org.simpleframework.xml.core.MethodContact` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.l:(Lorg/simpleframework/xml/core/MethodContact;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L447efc.  call temp:= `getRead`(v3) @signature `Lorg/simpleframework/xml/core/MethodContact;.getRead:()Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L447f02.  v0:= temp @kind object;
  #L447f04.  call temp:= `getWrite`(v3) @signature `Lorg/simpleframework/xml/core/MethodContact;.getWrite:()Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L447f0a.  v3:= temp @kind object;
  #L447f0c.  if v3 == 0 then goto L447f1a;
  #L447f10.  v1:= v2.`org.simpleframework.xml.core.MethodScanner.c` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L447f14.  call `h`(v2, v3, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner;.h:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L447f1a.  v3:= v2.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L447f1e.  call `h`(v2, v0, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.h:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L447f24.  return @kind void;
}
procedure `void` `m`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `org.simpleframework.xml.core.MethodPart` v2 @kind object, `org.simpleframework.xml.core.MethodScanner$PartMap` v3 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.m:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L447f38.  call temp:= `getName`(v2) @signature `Lorg/simpleframework/xml/core/MethodPart;.getName:()Ljava/lang/String;` @kind interface;
  #L447f3e.  v0:= temp @kind object;
  #L447f40.  if v0 == 0 then goto L447f4a;
  #L447f44.  call temp:= `put`(v3, v0, v2) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L447f4a.  return @kind void;
}
procedure `void` `n`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `java.lang.reflect.Method` v2 @kind object, `java.lang.annotation.Annotation` v3 @kind object, `java.lang.annotation.Annotation`[] v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.n:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L447f5c.  v0:= v1.`org.simpleframework.xml.core.MethodScanner.a` @type ^`org.simpleframework.xml.core.MethodPartFactory` @kind object;
  #L447f60.  call temp:= `getInstance`(v0, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodPartFactory;.getInstance:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L447f66.  v2:= temp @kind object;
  #L447f68.  call temp:= `getMethodType`(v2) @signature `Lorg/simpleframework/xml/core/MethodPart;.getMethodType:()Lorg/simpleframework/xml/core/MethodType;` @kind interface;
  #L447f6e.  v3:= temp @kind object;
  #L447f70.  v4:= `@@org.simpleframework.xml.core.MethodType.GET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L447f74.  if v3 != v4 then goto L447f82;
  #L447f78.  v4:= v1.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L447f7c.  call `o`(v1, v2, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.o:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L447f82.  v4:= `@@org.simpleframework.xml.core.MethodType.IS` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L447f86.  if v3 != v4 then goto L447f94;
  #L447f8a.  v4:= v1.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L447f8e.  call `o`(v1, v2, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.o:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L447f94.  v4:= `@@org.simpleframework.xml.core.MethodType.SET` @type ^`org.simpleframework.xml.core.MethodType` @kind object;
  #L447f98.  if v3 != v4 then goto L447fa6;
  #L447f9c.  v3:= v1.`org.simpleframework.xml.core.MethodScanner.c` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L447fa0.  call `o`(v1, v2, v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.o:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @kind direct;
  #L447fa6.  return @kind void;
}
procedure `void` `o`(`org.simpleframework.xml.core.MethodScanner` v0 @kind this, `org.simpleframework.xml.core.MethodPart` v1 @kind object, `org.simpleframework.xml.core.MethodScanner$PartMap` v2 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.o:(Lorg/simpleframework/xml/core/MethodPart;Lorg/simpleframework/xml/core/MethodScanner$PartMap;)V` @AccessFlag PRIVATE {
    temp;

  #L447fb8.  call temp:= `getName`(v1) @signature `Lorg/simpleframework/xml/core/MethodPart;.getName:()Ljava/lang/String;` @kind interface;
  #L447fbe.  v1:= temp @kind object;
  #L447fc0.  if v1 == 0 then goto L447fca;
  #L447fc4.  call temp:= `remove`(v2, v1) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L447fca.  return @kind void;
}
procedure `void` `p`(`org.simpleframework.xml.core.MethodScanner` v1 @kind this, `java.lang.reflect.Method` v2 @kind object, `java.lang.annotation.Annotation` v3 @kind object, `java.lang.annotation.Annotation`[] v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.p:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L447fdc.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.Attribute` @kind boolean;
  #L447fe0.  if v0 == 0 then goto L447fea;
  #L447fe4.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L447fea.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementUnion` @kind boolean;
  #L447fee.  if v0 == 0 then goto L447ff8;
  #L447ff2.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L447ff8.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementListUnion` @kind boolean;
  #L447ffc.  if v0 == 0 then goto L448006;
  #L448000.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L448006.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementMapUnion` @kind boolean;
  #L44800a.  if v0 == 0 then goto L448014;
  #L44800e.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L448014.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementList` @kind boolean;
  #L448018.  if v0 == 0 then goto L448022;
  #L44801c.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L448022.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementArray` @kind boolean;
  #L448026.  if v0 == 0 then goto L448030;
  #L44802a.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L448030.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.ElementMap` @kind boolean;
  #L448034.  if v0 == 0 then goto L44803e;
  #L448038.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L44803e.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.Element` @kind boolean;
  #L448042.  if v0 == 0 then goto L44804c;
  #L448046.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L44804c.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.Version` @kind boolean;
  #L448050.  if v0 == 0 then goto L44805a;
  #L448054.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L44805a.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.Text` @kind boolean;
  #L44805e.  if v0 == 0 then goto L448068;
  #L448062.  call `j`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.j:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L448068.  v0:= instanceof @variable v3 @type ^`org.simpleframework.xml.Transient` @kind boolean;
  #L44806c.  if v0 == 0 then goto L448076;
  #L448070.  call `n`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.n:(Ljava/lang/reflect/Method;Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)V` @kind direct;
  #L448076.  return @kind void;
}
procedure `void` `q`(`org.simpleframework.xml.core.MethodScanner` v3 @kind this, `org.simpleframework.xml.core.Detail` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.q:(Lorg/simpleframework/xml/core/Detail;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L448088.  call temp:= `getOverride`(v4) @signature `Lorg/simpleframework/xml/core/Detail;.getOverride:()Lorg/simpleframework/xml/DefaultType;` @kind interface;
  #L44808e.  v0:= temp @kind object;
  #L448090.  call temp:= `getAccess`(v4) @signature `Lorg/simpleframework/xml/core/Detail;.getAccess:()Lorg/simpleframework/xml/DefaultType;` @kind interface;
  #L448096.  v1:= temp @kind object;
  #L448098.  call temp:= `getSuper`(v4) @signature `Lorg/simpleframework/xml/core/Detail;.getSuper:()Ljava/lang/Class;` @kind interface;
  #L44809e.  v2:= temp @kind object;
  #L4480a0.  if v2 == 0 then goto L4480aa;
  #L4480a4.  call `e`(v3, v2, v0) @signature `Lorg/simpleframework/xml/core/MethodScanner;.e:(Ljava/lang/Class;Lorg/simpleframework/xml/DefaultType;)V` @kind direct;
  #L4480aa.  call `g`(v3, v4, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner;.g:(Lorg/simpleframework/xml/core/Detail;Lorg/simpleframework/xml/DefaultType;)V` @kind direct;
  #L4480b0.  call `f`(v3, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner;.f:(Lorg/simpleframework/xml/core/Detail;)V` @kind direct;
  #L4480b6.  call `a`(v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.a:()V` @kind direct;
  #L4480bc.  call `r`(v3) @signature `Lorg/simpleframework/xml/core/MethodScanner;.r:()V` @kind direct;
  #L4480c2.  return @kind void;
}
procedure `void` `r`(`org.simpleframework.xml.core.MethodScanner` v3 @kind this) @signature `Lorg/simpleframework/xml/core/MethodScanner;.r:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4480d4.  v0:= v3.`org.simpleframework.xml.core.MethodScanner.c` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L4480d8.  call temp:= `iterator`(v0) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4480de.  v0:= temp @kind object;
  #L4480e0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4480e6.  v1:= temp;
  #L4480e8.  if v1 == 0 then goto L448114;
  #L4480ec.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4480f2.  v1:= temp @kind object;
  #L4480f4.  v1:= (`java.lang.String`) v1 @kind object;
  #L4480f8.  v2:= v3.`org.simpleframework.xml.core.MethodScanner.c` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L4480fc.  call temp:= `get`(v2, v1) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L448102.  v2:= temp @kind object;
  #L448104.  v2:= (`org.simpleframework.xml.core.MethodPart`) v2 @kind object;
  #L448108.  if v2 == 0 then goto L4480e0;
  #L44810c.  call `s`(v3, v2, v1) @signature `Lorg/simpleframework/xml/core/MethodScanner;.s:(Lorg/simpleframework/xml/core/MethodPart;Ljava/lang/String;)V` @kind direct;
  #L448112.  goto L4480e0;
  #L448114.  return @kind void;
}
procedure `void` `s`(`org.simpleframework.xml.core.MethodScanner` v2 @kind this, `org.simpleframework.xml.core.MethodPart` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/core/MethodScanner;.s:(Lorg/simpleframework/xml/core/MethodPart;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L448128.  v0:= v2.`org.simpleframework.xml.core.MethodScanner.d` @type ^`org.simpleframework.xml.core.MethodScanner$PartMap` @kind object;
  #L44812c.  call temp:= `take`(v0, v4) @signature `Lorg/simpleframework/xml/core/MethodScanner$PartMap;.take:(Ljava/lang/String;)Lorg/simpleframework/xml/core/MethodPart;` @kind virtual;
  #L448132.  v4:= temp @kind object;
  #L448134.  call temp:= `getMethod`(v3) @signature `Lorg/simpleframework/xml/core/MethodPart;.getMethod:()Ljava/lang/reflect/Method;` @kind interface;
  #L44813a.  v3:= temp @kind object;
  #L44813c.  if v4 == 0 then goto L448142;
  #L448140.  return @kind void;
  #L448142.  v4:= new `org.simpleframework.xml.core.MethodException`;
  #L448146.  v0:= 2I;
  #L448148.  v0:= new `java.lang.Object`[v0];
  #L44814c.  v1:= 0I;
  #L44814e.  v0[v1]:= v3 @kind object;
  #L448152.  v3:= v2.`org.simpleframework.xml.core.MethodScanner.e` @type ^`org.simpleframework.xml.core.Detail` @kind object;
  #L448156.  v1:= 1I;
  #L448158.  v0[v1]:= v3 @kind object;
  #L44815c.  v3:= "No matching get method for %s in %s" @kind object;
  #L448160.  call `<init>`(v4, v3, v0) @signature `Lorg/simpleframework/xml/core/MethodException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L448166.  throw v4;
}
