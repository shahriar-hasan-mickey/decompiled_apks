record `org.simpleframework.xml.core.Factory` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `org.simpleframework.xml.core.Context` `org.simpleframework.xml.core.Factory.context` @AccessFlag PUBLIC;
  `java.lang.Class` `org.simpleframework.xml.core.Factory.override` @AccessFlag PUBLIC;
  `org.simpleframework.xml.core.Support` `org.simpleframework.xml.core.Factory.support` @AccessFlag PUBLIC;
  `org.simpleframework.xml.strategy.Type` `org.simpleframework.xml.core.Factory.type` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Factory` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L444b8c.  v0:= 0I;
  #L444b8e.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)V` @kind direct;
  #L444b94.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.core.Factory` v1 @kind this, `org.simpleframework.xml.core.Context` v2 @kind object, `org.simpleframework.xml.strategy.Type` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.<init>:(Lorg/simpleframework/xml/core/Context;Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L444ba8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L444bae.  call temp:= `getSupport`(v2) @signature `Lorg/simpleframework/xml/core/Context;.getSupport:()Lorg/simpleframework/xml/core/Support;` @kind interface;
  #L444bb4.  v0:= temp @kind object;
  #L444bb6.  v1.`org.simpleframework.xml.core.Factory.support` @type ^`org.simpleframework.xml.core.Support` := v0 @kind object;
  #L444bba.  v1.`org.simpleframework.xml.core.Factory.override` @type ^`java.lang.Class` := v4 @kind object;
  #L444bbe.  v1.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` := v2 @kind object;
  #L444bc2.  v1.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` := v3 @kind object;
  #L444bc6.  return @kind void;
}
procedure `org.simpleframework.xml.strategy.Type` `a`(`org.simpleframework.xml.core.Factory` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.a:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)Lorg/simpleframework/xml/strategy/Type;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L444a98.  call temp:= `getPrimitive`(v3) @signature `Lorg/simpleframework/xml/core/Support;.getPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @kind static;
  #L444a9e.  v0:= temp @kind object;
  #L444aa0.  if v0 == v3 then goto L444ab0;
  #L444aa4.  v3:= new `org.simpleframework.xml.core.OverrideType`;
  #L444aa8.  call `<init>`(v3, v2, v0) @signature `Lorg/simpleframework/xml/core/OverrideType;.<init>:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)V` @kind direct;
  #L444aae.  return v3 @kind object;
  #L444ab0.  return v2 @kind object;
}
procedure `boolean` `isCompatible`(`java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.isCompatible:(Ljava/lang/Class;Ljava/lang/Class;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L444980.  call temp:= `isArray`(v1) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L444986.  v0:= temp;
  #L444988.  if v0 == 0 then goto L444994;
  #L44498c.  call temp:= `getComponentType`(v1) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L444992.  v1:= temp @kind object;
  #L444994.  call temp:= `isAssignableFrom`(v1, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L44499a.  v1:= temp;
  #L44499c.  return v1;
}
procedure `boolean` `isInstantiable`(`java.lang.Class` v1 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4449b0.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L4449b6.  v1:= temp;
  #L4449b8.  call temp:= `isAbstract`(v1) @signature `Ljava/lang/reflect/Modifier;.isAbstract:(I)Z` @kind static;
  #L4449be.  v0:= temp;
  #L4449c0.  if v0 == 0 then goto L4449c8;
  #L4449c4.  v1:= 0I;
  #L4449c6.  return v1;
  #L4449c8.  call temp:= `isInterface`(v1) @signature `Ljava/lang/reflect/Modifier;.isInterface:(I)Z` @kind static;
  #L4449ce.  v1:= temp;
  #L4449d0.  v1:= v1 ^~ 1;
  #L4449d4.  return v1;
}
procedure `org.simpleframework.xml.strategy.Value` `getConversion`(`org.simpleframework.xml.core.Factory` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.getConversion:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L444ac4.  v0:= v2.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L444ac8.  v1:= v2.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L444acc.  call temp:= `getOverride`(v0, v1, v3) @signature `Lorg/simpleframework/xml/core/Context;.getOverride:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @kind interface;
  #L444ad2.  v3:= temp @kind object;
  #L444ad4.  if v3 == 0 then goto L444b08;
  #L444ad8.  v0:= v2.`org.simpleframework.xml.core.Factory.override` @type ^`java.lang.Class` @kind object;
  #L444adc.  if v0 == 0 then goto L444b08;
  #L444ae0.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L444ae6.  v0:= temp @kind object;
  #L444ae8.  v1:= v2.`org.simpleframework.xml.core.Factory.override` @type ^`java.lang.Class` @kind object;
  #L444aec.  call temp:= `isCompatible`(v1, v0) @signature `Lorg/simpleframework/xml/core/Factory;.isCompatible:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind static;
  #L444af2.  v0:= temp;
  #L444af4.  if v0 != 0 then goto L444b08;
  #L444af8.  v0:= new `org.simpleframework.xml.core.OverrideValue`;
  #L444afc.  v1:= v2.`org.simpleframework.xml.core.Factory.override` @type ^`java.lang.Class` @kind object;
  #L444b00.  call `<init>`(v0, v3, v1) @signature `Lorg/simpleframework/xml/core/OverrideValue;.<init>:(Lorg/simpleframework/xml/strategy/Value;Ljava/lang/Class;)V` @kind direct;
  #L444b06.  return v0 @kind object;
  #L444b08.  return v3 @kind object;
}
procedure `java.lang.Object` `getInstance`(`org.simpleframework.xml.core.Factory` v4 @kind this) @signature `Lorg/simpleframework/xml/core/Factory;.getInstance:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L444a4c.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L444a52.  v0:= temp @kind object;
  #L444a54.  call temp:= `isInstantiable`(v0) @signature `Lorg/simpleframework/xml/core/Factory;.isInstantiable:(Ljava/lang/Class;)Z` @kind static;
  #L444a5a.  v1:= temp;
  #L444a5c.  if v1 == 0 then goto L444a6a;
  #L444a60.  call temp:= `newInstance`(v0) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L444a66.  v0:= temp @kind object;
  #L444a68.  return v0 @kind object;
  #L444a6a.  v1:= new `org.simpleframework.xml.core.InstantiationException`;
  #L444a6e.  v2:= 1I;
  #L444a70.  v2:= new `java.lang.Object`[v2];
  #L444a74.  v3:= 0I;
  #L444a76.  v2[v3]:= v0 @kind object;
  #L444a7a.  v0:= "Type %s can not be instantiated" @kind object;
  #L444a7e.  call `<init>`(v1, v0, v2) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L444a84.  throw v1;
}
procedure `org.simpleframework.xml.strategy.Value` `getOverride`(`org.simpleframework.xml.core.Factory` v4 @kind this, `org.simpleframework.xml.stream.InputNode` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.getOverride:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L444b1c.  call temp:= `getConversion`(v4, v5) @signature `Lorg/simpleframework/xml/core/Factory;.getConversion:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/strategy/Value;` @kind virtual;
  #L444b22.  v0:= temp @kind object;
  #L444b24.  if v0 == 0 then goto L444b7a;
  #L444b28.  call temp:= `getPosition`(v5) @signature `Lorg/simpleframework/xml/stream/InputNode;.getPosition:()Lorg/simpleframework/xml/stream/Position;` @kind interface;
  #L444b2e.  v5:= temp @kind object;
  #L444b30.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L444b36.  v1:= temp @kind object;
  #L444b38.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @kind virtual;
  #L444b3e.  v2:= temp @kind object;
  #L444b40.  call temp:= `isCompatible`(v2, v1) @signature `Lorg/simpleframework/xml/core/Factory;.isCompatible:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind static;
  #L444b46.  v2:= temp;
  #L444b48.  if v2 == 0 then goto L444b4e;
  #L444b4c.  goto L444b7a;
  #L444b4e.  v0:= new `org.simpleframework.xml.core.InstantiationException`;
  #L444b52.  v2:= 3I;
  #L444b54.  v2:= new `java.lang.Object`[v2];
  #L444b58.  v3:= 0I;
  #L444b5a.  v2[v3]:= v1 @kind object;
  #L444b5e.  v1:= v4.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L444b62.  v3:= 1I;
  #L444b64.  v2[v3]:= v1 @kind object;
  #L444b68.  v1:= 2I;
  #L444b6a.  v2[v1]:= v5 @kind object;
  #L444b6e.  v5:= "Incompatible %s for %s at %s" @kind object;
  #L444b72.  call `<init>`(v0, v5, v2) @signature `Lorg/simpleframework/xml/core/InstantiationException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L444b78.  throw v0;
  #L444b7a.  return v0 @kind object;
}
procedure `java.lang.Class` `getType`(`org.simpleframework.xml.core.Factory` v1 @kind this) @signature `Lorg/simpleframework/xml/core/Factory;.getType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444a24.  v0:= v1.`org.simpleframework.xml.core.Factory.override` @type ^`java.lang.Class` @kind object;
  #L444a28.  if v0 == 0 then goto L444a2e;
  #L444a2c.  return v0 @kind object;
  #L444a2e.  v0:= v1.`org.simpleframework.xml.core.Factory.type` @type ^`org.simpleframework.xml.strategy.Type` @kind object;
  #L444a32.  call temp:= `getType`(v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L444a38.  v0:= temp @kind object;
  #L444a3a.  return v0 @kind object;
}
procedure `boolean` `setOverride`(`org.simpleframework.xml.core.Factory` v2 @kind this, `org.simpleframework.xml.strategy.Type` v3 @kind object, `java.lang.Object` v4 @kind object, `org.simpleframework.xml.stream.OutputNode` v5 @kind object) @signature `Lorg/simpleframework/xml/core/Factory;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4449e8.  call temp:= `getType`(v3) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L4449ee.  v0:= temp @kind object;
  #L4449f0.  call temp:= `isPrimitive`(v0) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L4449f6.  v1:= temp;
  #L4449f8.  if v1 == 0 then goto L444a04;
  #L4449fc.  call temp:= `a`(v2, v3, v0) @signature `Lorg/simpleframework/xml/core/Factory;.a:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)Lorg/simpleframework/xml/strategy/Type;` @kind direct;
  #L444a02.  v3:= temp @kind object;
  #L444a04.  v0:= v2.`org.simpleframework.xml.core.Factory.context` @type ^`org.simpleframework.xml.core.Context` @kind object;
  #L444a08.  call temp:= `setOverride`(v0, v3, v4, v5) @signature `Lorg/simpleframework/xml/core/Context;.setOverride:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind interface;
  #L444a0e.  v3:= temp;
  #L444a10.  return v3;
}
