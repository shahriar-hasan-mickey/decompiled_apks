record `org.simpleframework.xml.strategy.ReadState` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.util.WeakCache` @kind class {
  `org.simpleframework.xml.strategy.Contract` `org.simpleframework.xml.strategy.ReadState.b` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.strategy.Loader` `org.simpleframework.xml.strategy.ReadState.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.strategy.ReadState` v1 @kind this, `org.simpleframework.xml.strategy.Contract` v2 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadState;.<init>:(Lorg/simpleframework/xml/strategy/Contract;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L451c24.  call `<init>`(v1) @signature `Lorg/simpleframework/xml/util/WeakCache;.<init>:()V` @kind direct;
  #L451c2a.  v0:= new `org.simpleframework.xml.strategy.Loader`;
  #L451c2e.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/strategy/Loader;.<init>:()V` @kind direct;
  #L451c34.  v1.`org.simpleframework.xml.strategy.ReadState.c` @type ^`org.simpleframework.xml.strategy.Loader` := v0 @kind object;
  #L451c38.  v1.`org.simpleframework.xml.strategy.ReadState.b` @type ^`org.simpleframework.xml.strategy.Contract` := v2 @kind object;
  #L451c3c.  return @kind void;
}
procedure `org.simpleframework.xml.strategy.ReadGraph` `b`(`org.simpleframework.xml.strategy.ReadState` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadState;.b:(Ljava/lang/Object;)Lorg/simpleframework/xml/strategy/ReadGraph;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L451bbc.  call temp:= `fetch`(v3, v4) @signature `Lorg/simpleframework/xml/util/WeakCache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L451bc2.  v0:= temp @kind object;
  #L451bc4.  v0:= (`org.simpleframework.xml.strategy.ReadGraph`) v0 @kind object;
  #L451bc8.  if v0 != 0 then goto L451be4;
  #L451bcc.  v0:= new `org.simpleframework.xml.strategy.ReadGraph`;
  #L451bd0.  v1:= v3.`org.simpleframework.xml.strategy.ReadState.b` @type ^`org.simpleframework.xml.strategy.Contract` @kind object;
  #L451bd4.  v2:= v3.`org.simpleframework.xml.strategy.ReadState.c` @type ^`org.simpleframework.xml.strategy.Loader` @kind object;
  #L451bd8.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.<init>:(Lorg/simpleframework/xml/strategy/Contract;Lorg/simpleframework/xml/strategy/Loader;)V` @kind direct;
  #L451bde.  call `cache`(v3, v4, v0) @signature `Lorg/simpleframework/xml/util/WeakCache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L451be4.  return v0 @kind object;
}
procedure `org.simpleframework.xml.strategy.ReadGraph` `find`(`org.simpleframework.xml.strategy.ReadState` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadState;.find:(Ljava/lang/Object;)Lorg/simpleframework/xml/strategy/ReadGraph;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451bf8.  call temp:= `fetch`(v1, v2) @signature `Lorg/simpleframework/xml/util/WeakCache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L451bfe.  v0:= temp @kind object;
  #L451c00.  v0:= (`org.simpleframework.xml.strategy.ReadGraph`) v0 @kind object;
  #L451c04.  if v0 == 0 then goto L451c0a;
  #L451c08.  return v0 @kind object;
  #L451c0a.  call temp:= `b`(v1, v2) @signature `Lorg/simpleframework/xml/strategy/ReadState;.b:(Ljava/lang/Object;)Lorg/simpleframework/xml/strategy/ReadGraph;` @kind direct;
  #L451c10.  v2:= temp @kind object;
  #L451c12.  return v2 @kind object;
}
