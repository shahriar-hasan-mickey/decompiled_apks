record `org.simpleframework.xml.strategy.ReadGraph` @kind class @AccessFlag PUBLIC extends `java.util.HashMap` @kind class {
  `org.simpleframework.xml.strategy.Loader` `org.simpleframework.xml.strategy.ReadGraph.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.strategy.ReadGraph.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.strategy.ReadGraph.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.strategy.ReadGraph.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.simpleframework.xml.strategy.ReadGraph.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.strategy.ReadGraph` v1 @kind this, `org.simpleframework.xml.strategy.Contract` v2 @kind object, `org.simpleframework.xml.strategy.Loader` v3 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.<init>:(Lorg/simpleframework/xml/strategy/Contract;Lorg/simpleframework/xml/strategy/Loader;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L451b70.  call `<init>`(v1) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L451b76.  call temp:= `getReference`(v2) @signature `Lorg/simpleframework/xml/strategy/Contract;.getReference:()Ljava/lang/String;` @kind virtual;
  #L451b7c.  v0:= temp @kind object;
  #L451b7e.  v1.`org.simpleframework.xml.strategy.ReadGraph.e` @type ^`java.lang.String` := v0 @kind object;
  #L451b82.  call temp:= `getIdentity`(v2) @signature `Lorg/simpleframework/xml/strategy/Contract;.getIdentity:()Ljava/lang/String;` @kind virtual;
  #L451b88.  v0:= temp @kind object;
  #L451b8a.  v1.`org.simpleframework.xml.strategy.ReadGraph.d` @type ^`java.lang.String` := v0 @kind object;
  #L451b8e.  call temp:= `getLength`(v2) @signature `Lorg/simpleframework/xml/strategy/Contract;.getLength:()Ljava/lang/String;` @kind virtual;
  #L451b94.  v0:= temp @kind object;
  #L451b96.  v1.`org.simpleframework.xml.strategy.ReadGraph.b` @type ^`java.lang.String` := v0 @kind object;
  #L451b9a.  call temp:= `getLabel`(v2) @signature `Lorg/simpleframework/xml/strategy/Contract;.getLabel:()Ljava/lang/String;` @kind virtual;
  #L451ba0.  v2:= temp @kind object;
  #L451ba2.  v1.`org.simpleframework.xml.strategy.ReadGraph.c` @type ^`java.lang.String` := v2 @kind object;
  #L451ba6.  v1.`org.simpleframework.xml.strategy.ReadGraph.a` @type ^`org.simpleframework.xml.strategy.Loader` := v3 @kind object;
  #L451baa.  return @kind void;
}
procedure `org.simpleframework.xml.strategy.Value` `b`(`org.simpleframework.xml.strategy.ReadGraph` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.b:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;

  #L4519f4.  v1:= v0.`org.simpleframework.xml.strategy.ReadGraph.b` @type ^`java.lang.String` @kind object;
  #L4519f8.  call temp:= `remove`(v3, v1) @signature `Lorg/simpleframework/xml/stream/NodeMap;.remove:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L4519fe.  v1:= temp @kind object;
  #L451a00.  if v1 == 0 then goto L451a16;
  #L451a04.  call temp:= `getValue`(v1) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L451a0a.  v1:= temp @kind object;
  #L451a0c.  call temp:= `parseInt`(v1) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L451a12.  v1:= temp;
  #L451a14.  goto L451a18;
  #L451a16.  v1:= 0I;
  #L451a18.  v3:= new `org.simpleframework.xml.strategy.ArrayValue`;
  #L451a1c.  call `<init>`(v3, v2, v1) @signature `Lorg/simpleframework/xml/strategy/ArrayValue;.<init>:(Ljava/lang/Class;I)V` @kind direct;
  #L451a22.  return v3 @kind object;
}
procedure `org.simpleframework.xml.strategy.Value` `c`(`org.simpleframework.xml.strategy.ReadGraph` v2 @kind this, `org.simpleframework.xml.strategy.Type` v3 @kind object, `java.lang.Class` v4 @kind object, `org.simpleframework.xml.stream.NodeMap` v5 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.c:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L451a34.  v0:= v2.`org.simpleframework.xml.strategy.ReadGraph.d` @type ^`java.lang.String` @kind object;
  #L451a38.  call temp:= `remove`(v5, v0) @signature `Lorg/simpleframework/xml/stream/NodeMap;.remove:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L451a3e.  v0:= temp @kind object;
  #L451a40.  if v0 != 0 then goto L451a4e;
  #L451a44.  call temp:= `d`(v2, v3, v4, v5) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.d:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L451a4a.  v3:= temp @kind object;
  #L451a4c.  return v3 @kind object;
  #L451a4e.  call temp:= `getValue`(v0) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L451a54.  v0:= temp @kind object;
  #L451a56.  call temp:= `containsKey`(v2, v0) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L451a5c.  v1:= temp;
  #L451a5e.  if v1 != 0 then goto L451a6c;
  #L451a62.  call temp:= `f`(v2, v3, v4, v5, v0) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.f:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;Ljava/lang/String;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L451a68.  v3:= temp @kind object;
  #L451a6a.  return v3 @kind object;
  #L451a6c.  v3:= new `org.simpleframework.xml.strategy.CycleException`;
  #L451a70.  v4:= 1I;
  #L451a72.  v4:= new `java.lang.Object`[v4];
  #L451a76.  v5:= 0I;
  #L451a78.  v4[v5]:= v0 @kind object;
  #L451a7c.  v5:= "Element '%s' already exists" @kind object;
  #L451a80.  call `<init>`(v3, v5, v4) @signature `Lorg/simpleframework/xml/strategy/CycleException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L451a86.  throw v3;
}
procedure `org.simpleframework.xml.strategy.Value` `d`(`org.simpleframework.xml.strategy.ReadGraph` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `java.lang.Class` v3 @kind object, `org.simpleframework.xml.stream.NodeMap` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.d:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L451a98.  v0:= v1.`org.simpleframework.xml.strategy.ReadGraph.e` @type ^`java.lang.String` @kind object;
  #L451a9c.  call temp:= `remove`(v4, v0) @signature `Lorg/simpleframework/xml/stream/NodeMap;.remove:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L451aa2.  v0:= temp @kind object;
  #L451aa4.  if v0 != 0 then goto L451ab2;
  #L451aa8.  call temp:= `e`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.e:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L451aae.  v2:= temp @kind object;
  #L451ab0.  return v2 @kind object;
  #L451ab2.  call temp:= `getValue`(v0) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L451ab8.  v2:= temp @kind object;
  #L451aba.  call temp:= `get`(v1, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L451ac0.  v4:= temp @kind object;
  #L451ac2.  call temp:= `containsKey`(v1, v2) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L451ac8.  v0:= temp;
  #L451aca.  if v0 == 0 then goto L451ada;
  #L451ace.  v2:= new `org.simpleframework.xml.strategy.Reference`;
  #L451ad2.  call `<init>`(v2, v4, v3) @signature `Lorg/simpleframework/xml/strategy/Reference;.<init>:(Ljava/lang/Object;Ljava/lang/Class;)V` @kind direct;
  #L451ad8.  return v2 @kind object;
  #L451ada.  v3:= new `org.simpleframework.xml.strategy.CycleException`;
  #L451ade.  v4:= 1I;
  #L451ae0.  v4:= new `java.lang.Object`[v4];
  #L451ae4.  v0:= 0I;
  #L451ae6.  v4[v0]:= v2 @kind object;
  #L451aea.  v2:= "Invalid reference '%s' found" @kind object;
  #L451aee.  call `<init>`(v3, v2, v4) @signature `Lorg/simpleframework/xml/strategy/CycleException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L451af4.  throw v3;
}
procedure `org.simpleframework.xml.strategy.Value` `e`(`org.simpleframework.xml.strategy.ReadGraph` v1 @kind this, `org.simpleframework.xml.strategy.Type` v2 @kind object, `java.lang.Class` v3 @kind object, `org.simpleframework.xml.stream.NodeMap` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.e:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L451b08.  call temp:= `getType`(v2) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L451b0e.  v0:= temp @kind object;
  #L451b10.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L451b16.  v0:= temp;
  #L451b18.  if v0 == 0 then goto L451b26;
  #L451b1c.  call temp:= `b`(v1, v2, v3, v4) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.b:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L451b22.  v2:= temp @kind object;
  #L451b24.  return v2 @kind object;
  #L451b26.  v2:= new `org.simpleframework.xml.strategy.ObjectValue`;
  #L451b2a.  call `<init>`(v2, v3) @signature `Lorg/simpleframework/xml/strategy/ObjectValue;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L451b30.  return v2 @kind object;
}
procedure `org.simpleframework.xml.strategy.Value` `f`(`org.simpleframework.xml.strategy.ReadGraph` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `org.simpleframework.xml.stream.NodeMap` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.f:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;Ljava/lang/String;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PRIVATE {
    temp;

  #L451b44.  call temp:= `e`(v0, v1, v2, v3) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.e:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L451b4a.  v1:= temp @kind object;
  #L451b4c.  if v4 == 0 then goto L451b5c;
  #L451b50.  v2:= new `org.simpleframework.xml.strategy.Allocate`;
  #L451b54.  call `<init>`(v2, v1, v0, v4) @signature `Lorg/simpleframework/xml/strategy/Allocate;.<init>:(Lorg/simpleframework/xml/strategy/Value;Ljava/util/Map;Ljava/lang/String;)V` @kind direct;
  #L451b5a.  return v2 @kind object;
  #L451b5c.  return v1 @kind object;
}
procedure `org.simpleframework.xml.strategy.Value` `read`(`org.simpleframework.xml.strategy.ReadGraph` v3 @kind this, `org.simpleframework.xml.strategy.Type` v4 @kind object, `org.simpleframework.xml.stream.NodeMap` v5 @kind object) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.read:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L451998.  v0:= v3.`org.simpleframework.xml.strategy.ReadGraph.c` @type ^`java.lang.String` @kind object;
  #L45199c.  call temp:= `remove`(v5, v0) @signature `Lorg/simpleframework/xml/stream/NodeMap;.remove:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L4519a2.  v0:= temp @kind object;
  #L4519a4.  call temp:= `getType`(v4) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L4519aa.  v1:= temp @kind object;
  #L4519ac.  call temp:= `isArray`(v1) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L4519b2.  v2:= temp;
  #L4519b4.  if v2 == 0 then goto L4519c0;
  #L4519b8.  call temp:= `getComponentType`(v1) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4519be.  v1:= temp @kind object;
  #L4519c0.  if v0 == 0 then goto L4519d8;
  #L4519c4.  call temp:= `getValue`(v0) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L4519ca.  v0:= temp @kind object;
  #L4519cc.  v1:= v3.`org.simpleframework.xml.strategy.ReadGraph.a` @type ^`org.simpleframework.xml.strategy.Loader` @kind object;
  #L4519d0.  call temp:= `load`(v1, v0) @signature `Lorg/simpleframework/xml/strategy/Loader;.load:(Ljava/lang/String;)Ljava/lang/Class;` @kind virtual;
  #L4519d6.  v1:= temp @kind object;
  #L4519d8.  call temp:= `c`(v3, v4, v1, v5) @signature `Lorg/simpleframework/xml/strategy/ReadGraph;.c:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;Lorg/simpleframework/xml/stream/NodeMap;)Lorg/simpleframework/xml/strategy/Value;` @kind direct;
  #L4519de.  v4:= temp @kind object;
  #L4519e0.  return v4 @kind object;
}
