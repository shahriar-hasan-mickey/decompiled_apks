record `org.simpleframework.xml.filter.StackFilter` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.filter.Filter` @kind interface {
  `java.util.Stack` `org.simpleframework.xml.filter.StackFilter.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.filter.StackFilter` v1 @kind this) @signature `Lorg/simpleframework/xml/filter/StackFilter;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4514c0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4514c6.  v0:= new `java.util.Stack`;
  #L4514ca.  call `<init>`(v0) @signature `Ljava/util/Stack;.<init>:()V` @kind direct;
  #L4514d0.  v1.`org.simpleframework.xml.filter.StackFilter.a` @type ^`java.util.Stack` := v0 @kind object;
  #L4514d4.  return @kind void;
}
procedure `void` `push`(`org.simpleframework.xml.filter.StackFilter` v1 @kind this, `org.simpleframework.xml.filter.Filter` v2 @kind object) @signature `Lorg/simpleframework/xml/filter/StackFilter;.push:(Lorg/simpleframework/xml/filter/Filter;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4514e8.  v0:= v1.`org.simpleframework.xml.filter.StackFilter.a` @type ^`java.util.Stack` @kind object;
  #L4514ec.  call temp:= `push`(v0, v2) @signature `Ljava/util/Stack;.push:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4514f2.  return @kind void;
}
procedure `java.lang.String` `replace`(`org.simpleframework.xml.filter.StackFilter` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/filter/StackFilter;.replace:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L451478.  v0:= v2.`org.simpleframework.xml.filter.StackFilter.a` @type ^`java.util.Stack` @kind object;
  #L45147c.  call temp:= `size`(v0) @signature `Ljava/util/Stack;.size:()I` @kind virtual;
  #L451482.  v0:= temp;
  #L451484.  v0:= v0 + -1;
  #L451488.  if v0 < 0 then goto L4514aa;
  #L45148c.  v1:= v2.`org.simpleframework.xml.filter.StackFilter.a` @type ^`java.util.Stack` @kind object;
  #L451490.  call temp:= `get`(v1, v0) @signature `Ljava/util/Stack;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L451496.  v1:= temp @kind object;
  #L451498.  v1:= (`org.simpleframework.xml.filter.Filter`) v1 @kind object;
  #L45149c.  call temp:= `replace`(v1, v3) @signature `Lorg/simpleframework/xml/filter/Filter;.replace:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L4514a2.  v1:= temp @kind object;
  #L4514a4.  if v1 == 0 then goto L451484;
  #L4514a8.  return v1 @kind object;
  #L4514aa.  v3:= 0I;
  #L4514ac.  return v3 @kind object;
}
