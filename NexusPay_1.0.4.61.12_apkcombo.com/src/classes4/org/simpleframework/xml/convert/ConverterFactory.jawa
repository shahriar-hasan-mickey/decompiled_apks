record `org.simpleframework.xml.convert.ConverterFactory` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.convert.ConverterFactory.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.convert.ConverterFactory` v1 @kind this) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L43bd1c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43bd22.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L43bd26.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L43bd2c.  v1.`org.simpleframework.xml.convert.ConverterFactory.a` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L43bd30.  return @kind void;
}
procedure `java.lang.reflect.Constructor` `a`(`org.simpleframework.xml.convert.ConverterFactory` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L43bbf4.  v0:= 0I;
  #L43bbf6.  v0:= new `java.lang.Class`[v0];
  #L43bbfa.  call temp:= `getDeclaredConstructor`(v2, v0) @signature `Ljava/lang/Class;.getDeclaredConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L43bc00.  v2:= temp @kind object;
  #L43bc02.  call temp:= `isAccessible`(v2) @signature `Ljava/lang/reflect/Constructor;.isAccessible:()Z` @kind virtual;
  #L43bc08.  v0:= temp;
  #L43bc0a.  if v0 != 0 then goto L43bc16;
  #L43bc0e.  v0:= 1I;
  #L43bc10.  call `setAccessible`(v2, v0) @signature `Ljava/lang/reflect/Constructor;.setAccessible:(Z)V` @kind virtual;
  #L43bc16.  return v2 @kind object;
}
procedure `org.simpleframework.xml.convert.Converter` `b`(`org.simpleframework.xml.convert.ConverterFactory` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L43bc28.  call temp:= `a`(v3, v4) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind direct;
  #L43bc2e.  v0:= temp @kind object;
  #L43bc30.  if v0 == 0 then goto L43bc3e;
  #L43bc34.  call temp:= `c`(v3, v4, v0) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.c:(Ljava/lang/Class;Ljava/lang/reflect/Constructor;)Lorg/simpleframework/xml/convert/Converter;` @kind direct;
  #L43bc3a.  v4:= temp @kind object;
  #L43bc3c.  return v4 @kind object;
  #L43bc3e.  v0:= new `org.simpleframework.xml.convert.ConvertException`;
  #L43bc42.  v1:= 1I;
  #L43bc44.  v1:= new `java.lang.Object`[v1];
  #L43bc48.  v2:= 0I;
  #L43bc4a.  v1[v2]:= v4 @kind object;
  #L43bc4e.  v4:= "No default constructor for %s" @kind object;
  #L43bc52.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/convert/ConvertException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L43bc58.  throw v0;
}
procedure `org.simpleframework.xml.convert.Converter` `c`(`org.simpleframework.xml.convert.ConverterFactory` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.reflect.Constructor` v3 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.c:(Ljava/lang/Class;Ljava/lang/reflect/Constructor;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L43bc6c.  v0:= 0I;
  #L43bc6e.  v0:= new `java.lang.Object`[v0];
  #L43bc72.  call temp:= `newInstance`(v3, v0) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L43bc78.  v3:= temp @kind object;
  #L43bc7a.  v3:= (`org.simpleframework.xml.convert.Converter`) v3 @kind object;
  #L43bc7e.  if v3 == 0 then goto L43bc8c;
  #L43bc82.  v0:= v1.`org.simpleframework.xml.convert.ConverterFactory.a` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L43bc86.  call `cache`(v0, v2, v3) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L43bc8c.  return v3 @kind object;
}
procedure `org.simpleframework.xml.convert.Converter` `getInstance`(`org.simpleframework.xml.convert.ConverterFactory` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.getInstance:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43bca0.  v0:= v1.`org.simpleframework.xml.convert.ConverterFactory.a` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L43bca4.  call temp:= `fetch`(v0, v2) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43bcaa.  v0:= temp @kind object;
  #L43bcac.  v0:= (`org.simpleframework.xml.convert.Converter`) v0 @kind object;
  #L43bcb0.  if v0 != 0 then goto L43bcbe;
  #L43bcb4.  call temp:= `b`(v1, v2) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Converter;` @kind direct;
  #L43bcba.  v2:= temp @kind object;
  #L43bcbc.  return v2 @kind object;
  #L43bcbe.  return v0 @kind object;
}
procedure `org.simpleframework.xml.convert.Converter` `getInstance`(`org.simpleframework.xml.convert.ConverterFactory` v3 @kind this, `org.simpleframework.xml.convert.Convert` v4 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.getInstance:(Lorg/simpleframework/xml/convert/Convert;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43bcd0.  call temp:= `value`(v4) @signature `Lorg/simpleframework/xml/convert/Convert;.value:()Ljava/lang/Class;` @kind interface;
  #L43bcd6.  v4:= temp @kind object;
  #L43bcd8.  call temp:= `isInterface`(v4) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L43bcde.  v0:= temp;
  #L43bce0.  if v0 != 0 then goto L43bcee;
  #L43bce4.  call temp:= `getInstance`(v3, v4) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.getInstance:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Converter;` @kind virtual;
  #L43bcea.  v4:= temp @kind object;
  #L43bcec.  return v4 @kind object;
  #L43bcee.  v0:= new `org.simpleframework.xml.convert.ConvertException`;
  #L43bcf2.  v1:= 1I;
  #L43bcf4.  v1:= new `java.lang.Object`[v1];
  #L43bcf8.  v2:= 0I;
  #L43bcfa.  v1[v2]:= v4 @kind object;
  #L43bcfe.  v4:= "Can not instantiate %s" @kind object;
  #L43bd02.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/convert/ConvertException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L43bd08.  throw v0;
}
