record `org.simpleframework.xml.convert.ConverterScanner` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.convert.ConverterFactory` `org.simpleframework.xml.convert.ConverterScanner.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.convert.ScannerBuilder` `org.simpleframework.xml.convert.ConverterScanner.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.convert.ConverterScanner` v1 @kind this) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L43bf04.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43bf0a.  v0:= new `org.simpleframework.xml.convert.ConverterFactory`;
  #L43bf0e.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.<init>:()V` @kind direct;
  #L43bf14.  v1.`org.simpleframework.xml.convert.ConverterScanner.a` @type ^`org.simpleframework.xml.convert.ConverterFactory` := v0 @kind object;
  #L43bf18.  v0:= new `org.simpleframework.xml.convert.ScannerBuilder`;
  #L43bf1c.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/convert/ScannerBuilder;.<init>:()V` @kind direct;
  #L43bf22.  v1.`org.simpleframework.xml.convert.ConverterScanner.b` @type ^`org.simpleframework.xml.convert.ScannerBuilder` := v0 @kind object;
  #L43bf26.  return @kind void;
}
procedure `java.lang.annotation.Annotation` `a`(`org.simpleframework.xml.convert.ConverterScanner` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.a:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L43bd94.  v0:= v1.`org.simpleframework.xml.convert.ConverterScanner.b` @type ^`org.simpleframework.xml.convert.ScannerBuilder` @kind object;
  #L43bd98.  call temp:= `build`(v0, v2) @signature `Lorg/simpleframework/xml/convert/ScannerBuilder;.build:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Scanner;` @kind virtual;
  #L43bd9e.  v2:= temp @kind object;
  #L43bda0.  call temp:= `scan`(v2, v3) @signature `Lorg/simpleframework/xml/convert/Scanner;.scan:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind interface;
  #L43bda6.  v2:= temp @kind object;
  #L43bda8.  return v2 @kind object;
}
procedure `org.simpleframework.xml.convert.Convert` `b`(`org.simpleframework.xml.convert.ConverterScanner` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Convert;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L43bdbc.  v0:= constclass @type ^`org.simpleframework.xml.convert.Convert` @kind object;
  #L43bdc0.  call temp:= `a`(v3, v4, v0) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.a:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind direct;
  #L43bdc6.  v0:= temp @kind object;
  #L43bdc8.  v0:= (`org.simpleframework.xml.convert.Convert`) v0 @kind object;
  #L43bdcc.  if v0 == 0 then goto L43be02;
  #L43bdd0.  v1:= constclass @type ^`org.simpleframework.xml.Root` @kind object;
  #L43bdd4.  call temp:= `a`(v3, v4, v1) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.a:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind direct;
  #L43bdda.  v1:= temp @kind object;
  #L43bddc.  v1:= (`org.simpleframework.xml.Root`) v1 @kind object;
  #L43bde0.  if v1 == 0 then goto L43bde6;
  #L43bde4.  goto L43be02;
  #L43bde6.  v0:= new `org.simpleframework.xml.convert.ConvertException`;
  #L43bdea.  v1:= 1I;
  #L43bdec.  v1:= new `java.lang.Object`[v1];
  #L43bdf0.  v2:= 0I;
  #L43bdf2.  v1[v2]:= v4 @kind object;
  #L43bdf6.  v4:= "Root annotation required for %s" @kind object;
  #L43bdfa.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/convert/ConvertException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L43be00.  throw v0;
  #L43be02.  return v0 @kind object;
}
procedure `org.simpleframework.xml.convert.Convert` `c`(`org.simpleframework.xml.convert.ConverterScanner` v3 @kind this, `org.simpleframework.xml.strategy.Type` v4 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.c:(Lorg/simpleframework/xml/strategy/Type;)Lorg/simpleframework/xml/convert/Convert;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L43be14.  v0:= constclass @type ^`org.simpleframework.xml.convert.Convert` @kind object;
  #L43be18.  call temp:= `getAnnotation`(v4, v0) @signature `Lorg/simpleframework/xml/strategy/Type;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind interface;
  #L43be1e.  v0:= temp @kind object;
  #L43be20.  v0:= (`org.simpleframework.xml.convert.Convert`) v0 @kind object;
  #L43be24.  if v0 == 0 then goto L43be5a;
  #L43be28.  v1:= constclass @type ^`org.simpleframework.xml.Element` @kind object;
  #L43be2c.  call temp:= `getAnnotation`(v4, v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind interface;
  #L43be32.  v1:= temp @kind object;
  #L43be34.  v1:= (`org.simpleframework.xml.Element`) v1 @kind object;
  #L43be38.  if v1 == 0 then goto L43be3e;
  #L43be3c.  goto L43be5a;
  #L43be3e.  v0:= new `org.simpleframework.xml.convert.ConvertException`;
  #L43be42.  v1:= 1I;
  #L43be44.  v1:= new `java.lang.Object`[v1];
  #L43be48.  v2:= 0I;
  #L43be4a.  v1[v2]:= v4 @kind object;
  #L43be4e.  v4:= "Element annotation required for %s" @kind object;
  #L43be52.  call `<init>`(v0, v4, v1) @signature `Lorg/simpleframework/xml/convert/ConvertException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L43be58.  throw v0;
  #L43be5a.  return v0 @kind object;
}
procedure `org.simpleframework.xml.convert.Convert` `d`(`org.simpleframework.xml.convert.ConverterScanner` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.d:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Convert;` @AccessFlag PRIVATE {
    temp;

  #L43be6c.  call temp:= `c`(v0, v1) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.c:(Lorg/simpleframework/xml/strategy/Type;)Lorg/simpleframework/xml/convert/Convert;` @kind direct;
  #L43be72.  v1:= temp @kind object;
  #L43be74.  if v1 != 0 then goto L43be80;
  #L43be78.  call temp:= `b`(v0, v2) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Convert;` @kind direct;
  #L43be7e.  v1:= temp @kind object;
  #L43be80.  return v1 @kind object;
}
procedure `java.lang.Class` `e`(`org.simpleframework.xml.convert.ConverterScanner` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.e:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;)Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;

  #L43bd44.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L43bd4a.  v1:= temp @kind object;
  #L43bd4c.  if v2 == 0 then goto L43bd58;
  #L43bd50.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L43bd56.  v1:= temp @kind object;
  #L43bd58.  return v1 @kind object;
}
procedure `java.lang.Class` `f`(`org.simpleframework.xml.convert.ConverterScanner` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `org.simpleframework.xml.strategy.Value` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.f:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Value;)Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;

  #L43bd6c.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/strategy/Type;.getType:()Ljava/lang/Class;` @kind interface;
  #L43bd72.  v1:= temp @kind object;
  #L43bd74.  if v2 == 0 then goto L43bd80;
  #L43bd78.  call temp:= `getType`(v2) @signature `Lorg/simpleframework/xml/strategy/Value;.getType:()Ljava/lang/Class;` @kind interface;
  #L43bd7e.  v1:= temp @kind object;
  #L43bd80.  return v1 @kind object;
}
procedure `org.simpleframework.xml.convert.Converter` `getConverter`(`org.simpleframework.xml.convert.ConverterScanner` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getConverter:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PUBLIC {
    temp;

  #L43be94.  call temp:= `e`(v0, v1, v2) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.e:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Object;)Ljava/lang/Class;` @kind direct;
  #L43be9a.  v2:= temp @kind object;
  #L43be9c.  call temp:= `d`(v0, v1, v2) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.d:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Convert;` @kind direct;
  #L43bea2.  v1:= temp @kind object;
  #L43bea4.  if v1 == 0 then goto L43beb6;
  #L43bea8.  v2:= v0.`org.simpleframework.xml.convert.ConverterScanner.a` @type ^`org.simpleframework.xml.convert.ConverterFactory` @kind object;
  #L43beac.  call temp:= `getInstance`(v2, v1) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.getInstance:(Lorg/simpleframework/xml/convert/Convert;)Lorg/simpleframework/xml/convert/Converter;` @kind virtual;
  #L43beb2.  v1:= temp @kind object;
  #L43beb4.  return v1 @kind object;
  #L43beb6.  v1:= 0I;
  #L43beb8.  return v1 @kind object;
}
procedure `org.simpleframework.xml.convert.Converter` `getConverter`(`org.simpleframework.xml.convert.ConverterScanner` v0 @kind this, `org.simpleframework.xml.strategy.Type` v1 @kind object, `org.simpleframework.xml.strategy.Value` v2 @kind object) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.getConverter:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Value;)Lorg/simpleframework/xml/convert/Converter;` @AccessFlag PUBLIC {
    temp;

  #L43becc.  call temp:= `f`(v0, v1, v2) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.f:(Lorg/simpleframework/xml/strategy/Type;Lorg/simpleframework/xml/strategy/Value;)Ljava/lang/Class;` @kind direct;
  #L43bed2.  v2:= temp @kind object;
  #L43bed4.  call temp:= `d`(v0, v1, v2) @signature `Lorg/simpleframework/xml/convert/ConverterScanner;.d:(Lorg/simpleframework/xml/strategy/Type;Ljava/lang/Class;)Lorg/simpleframework/xml/convert/Convert;` @kind direct;
  #L43beda.  v1:= temp @kind object;
  #L43bedc.  if v1 == 0 then goto L43beee;
  #L43bee0.  v2:= v0.`org.simpleframework.xml.convert.ConverterScanner.a` @type ^`org.simpleframework.xml.convert.ConverterFactory` @kind object;
  #L43bee4.  call temp:= `getInstance`(v2, v1) @signature `Lorg/simpleframework/xml/convert/ConverterFactory;.getInstance:(Lorg/simpleframework/xml/convert/Convert;)Lorg/simpleframework/xml/convert/Converter;` @kind virtual;
  #L43beea.  v1:= temp @kind object;
  #L43beec.  return v1 @kind object;
  #L43beee.  v1:= 0I;
  #L43bef0.  return v1 @kind object;
}
