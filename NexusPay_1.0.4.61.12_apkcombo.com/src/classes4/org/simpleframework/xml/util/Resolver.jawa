record `org.simpleframework.xml.util.Resolver` @kind class @AccessFlag PUBLIC extends `java.util.AbstractSet` @kind class {
  `org.simpleframework.xml.util.Resolver$Cache` `org.simpleframework.xml.util.Resolver.cache` @AccessFlag PUBLIC_FINAL;
  `org.simpleframework.xml.util.Resolver$Stack` `org.simpleframework.xml.util.Resolver.stack` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.util.Resolver` v2 @kind this) @signature `Lorg/simpleframework/xml/util/Resolver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L458c38.  call `<init>`(v2) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L458c3e.  v0:= new `org.simpleframework.xml.util.Resolver$Stack`;
  #L458c42.  v1:= 0I;
  #L458c44.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/util/Resolver$Stack;.<init>:(Lorg/simpleframework/xml/util/Resolver;Lorg/simpleframework/xml/util/Resolver$1;)V` @kind direct;
  #L458c4a.  v2.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` := v0 @kind object;
  #L458c4e.  v0:= new `org.simpleframework.xml.util.Resolver$Cache`;
  #L458c52.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/util/Resolver$Cache;.<init>:(Lorg/simpleframework/xml/util/Resolver;)V` @kind direct;
  #L458c58.  v2.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` := v0 @kind object;
  #L458c5c.  return @kind void;
}
procedure `boolean` `a`(`org.simpleframework.xml.util.Resolver` v5 @kind this, `char`[] v6 @kind object, `int` v7 , `char`[] v8 @kind object, `int` v9 ) @signature `Lorg/simpleframework/xml/util/Resolver;.a:([CI[CI)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4589ec.  v0:= length @variable v8;
  #L4589ee.  v1:= 42I;
  #L4589f2.  v2:= 0I;
  #L4589f4.  v3:= 1I;
  #L4589f6.  if v9 >= v0 then goto L458a9e;
  #L4589fa.  v0:= length @variable v6;
  #L4589fc.  if v7 >= v0 then goto L458a9e;
  #L458a00.  v0:= v8[v9] @kind char;
  #L458a04.  v4:= 63I;
  #L458a08.  if v0 != v1 then goto L458a76;
  #L458a0c.  v0:= v8[v9] @kind char;
  #L458a10.  if v0 != v1 then goto L458a20;
  #L458a14.  v9:= v9 + 1;
  #L458a18.  v0:= length @variable v8;
  #L458a1a.  if v9 < v0 then goto L458a0c;
  #L458a1e.  return v3;
  #L458a20.  v0:= v8[v9] @kind char;
  #L458a24.  if v0 != v4 then goto L458a34;
  #L458a28.  v9:= v9 + 1;
  #L458a2c.  v0:= length @variable v8;
  #L458a2e.  if v9 < v0 then goto L458a34;
  #L458a32.  return v3;
  #L458a34.  v0:= length @variable v6;
  #L458a36.  if v7 >= v0 then goto L458a6e;
  #L458a3a.  v0:= v6[v7] @kind char;
  #L458a3e.  v1:= v8[v9] @kind char;
  #L458a42.  if v0 == v1 then goto L458a4e;
  #L458a46.  v0:= v8[v9] @kind char;
  #L458a4a.  if v0 != v4 then goto L458a68;
  #L458a4e.  v0:= v9 + -1;
  #L458a52.  v0:= v8[v0] @kind char;
  #L458a56.  if v0 == v4 then goto L458a6e;
  #L458a5a.  call temp:= `a`(v5, v6, v7, v8, v9) @signature `Lorg/simpleframework/xml/util/Resolver;.a:([CI[CI)Z` @kind direct;
  #L458a60.  v0:= temp;
  #L458a62.  if v0 == 0 then goto L458a68;
  #L458a66.  return v3;
  #L458a68.  v7:= v7 + 1;
  #L458a6c.  goto L458a34;
  #L458a6e.  v0:= length @variable v6;
  #L458a70.  if v0 != v7 then goto L458a76;
  #L458a74.  return v2;
  #L458a76.  v0:= v7 + 1;
  #L458a7a.  v7:= v6[v7] @kind char;
  #L458a7e.  v1:= v9 + 1;
  #L458a82.  v9:= v8[v9] @kind char;
  #L458a86.  if v7 == v9 then goto L458a98;
  #L458a8a.  v7:= v1 + -1;
  #L458a8e.  v7:= v8[v7] @kind char;
  #L458a92.  if v7 == v4 then goto L458a98;
  #L458a96.  return v2;
  #L458a98.  v7:= v0;
  #L458a9a.  v9:= v1;
  #L458a9c.  goto L4589ec;
  #L458a9e.  v0:= length @variable v8;
  #L458aa0.  if v0 != v9 then goto L458aae;
  #L458aa4.  v6:= length @variable v6;
  #L458aa6.  if v6 != v7 then goto L458aac;
  #L458aaa.  v2:= 1I;
  #L458aac.  return v2;
  #L458aae.  v6:= v8[v9] @kind char;
  #L458ab2.  if v6 != v1 then goto L458ac2;
  #L458ab6.  v9:= v9 + 1;
  #L458aba.  v6:= length @variable v8;
  #L458abc.  if v9 < v6 then goto L458aae;
  #L458ac0.  return v3;
  #L458ac2.  return v2;
}
procedure `boolean` `b`(`org.simpleframework.xml.util.Resolver` v1 @kind this, `char`[] v2 @kind object, `char`[] v3 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.b:([C[C)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4589d0.  v0:= 0I;
  #L4589d2.  call temp:= `a`(v1, v2, v0, v3, v0) @signature `Lorg/simpleframework/xml/util/Resolver;.a:([CI[CI)Z` @kind direct;
  #L4589d8.  v2:= temp;
  #L4589da.  return v2;
}
procedure `java.util.List` `c`(`org.simpleframework.xml.util.Resolver` v4 @kind this, `java.lang.String` v5 @kind object, `char`[] v6 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.c:(Ljava/lang/String;[C)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L458b7c.  v0:= new `java.util.ArrayList`;
  #L458b80.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L458b86.  v1:= v4.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L458b8a.  call temp:= `iterator`(v1) @signature `Ljava/util/LinkedList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L458b90.  v1:= temp @kind object;
  #L458b92.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L458b98.  v2:= temp;
  #L458b9a.  if v2 == 0 then goto L458bd8;
  #L458b9e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L458ba4.  v2:= temp @kind object;
  #L458ba6.  v2:= (`org.simpleframework.xml.util.Match`) v2 @kind object;
  #L458baa.  call temp:= `getPattern`(v2) @signature `Lorg/simpleframework/xml/util/Match;.getPattern:()Ljava/lang/String;` @kind interface;
  #L458bb0.  v3:= temp @kind object;
  #L458bb2.  call temp:= `toCharArray`(v3) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L458bb8.  v3:= temp @kind object;
  #L458bba.  call temp:= `b`(v4, v6, v3) @signature `Lorg/simpleframework/xml/util/Resolver;.b:([C[C)Z` @kind direct;
  #L458bc0.  v3:= temp;
  #L458bc2.  if v3 == 0 then goto L458b92;
  #L458bc6.  v3:= v4.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` @kind object;
  #L458bca.  call temp:= `put`(v3, v5, v0) @signature `Ljava/util/LinkedHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L458bd0.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L458bd6.  goto L458b92;
  #L458bd8.  return v0 @kind object;
}
procedure `boolean` `add`(`org.simpleframework.xml.util.Resolver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L458990.  v1:= (`org.simpleframework.xml.util.Match`) v1 @kind object;
  #L458994.  call temp:= `add`(v0, v1) @signature `Lorg/simpleframework/xml/util/Resolver;.add:(Lorg/simpleframework/xml/util/Match;)Z` @kind virtual;
  #L45899a.  v1:= temp;
  #L45899c.  return v1;
}
procedure `boolean` `add`(`org.simpleframework.xml.util.Resolver` v1 @kind this, `org.simpleframework.xml.util.Match` v2 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.add:(Lorg/simpleframework/xml/util/Match;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4589b0.  v0:= v1.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L4589b4.  call `push`(v0, v2) @signature `Lorg/simpleframework/xml/util/Resolver$Stack;.push:(Lorg/simpleframework/xml/util/Match;)V` @kind virtual;
  #L4589ba.  v2:= 1I;
  #L4589bc.  return v2;
}
procedure `void` `clear`(`org.simpleframework.xml.util.Resolver` v1 @kind this) @signature `Lorg/simpleframework/xml/util/Resolver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458c70.  v0:= v1.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` @kind object;
  #L458c74.  call `clear`(v0) @signature `Ljava/util/LinkedHashMap;.clear:()V` @kind virtual;
  #L458c7a.  v0:= v1.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L458c7e.  call `clear`(v0) @signature `Ljava/util/LinkedList;.clear:()V` @kind virtual;
  #L458c84.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`org.simpleframework.xml.util.Resolver` v1 @kind this) @signature `Lorg/simpleframework/xml/util/Resolver;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458b1c.  v0:= v1.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L458b20.  call temp:= `sequence`(v0) @signature `Lorg/simpleframework/xml/util/Resolver$Stack;.sequence:()Ljava/util/Iterator;` @kind virtual;
  #L458b26.  v0:= temp @kind object;
  #L458b28.  return v0 @kind object;
}
procedure `boolean` `remove`(`org.simpleframework.xml.util.Resolver` v1 @kind this, `org.simpleframework.xml.util.Match` v2 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.remove:(Lorg/simpleframework/xml/util/Match;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458ad4.  v0:= v1.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` @kind object;
  #L458ad8.  call `clear`(v0) @signature `Ljava/util/LinkedHashMap;.clear:()V` @kind virtual;
  #L458ade.  v0:= v1.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L458ae2.  call temp:= `remove`(v0, v2) @signature `Ljava/util/LinkedList;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L458ae8.  v2:= temp;
  #L458aea.  return v2;
}
procedure `org.simpleframework.xml.util.Match` `resolve`(`org.simpleframework.xml.util.Resolver` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.resolve:(Ljava/lang/String;)Lorg/simpleframework/xml/util/Match;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458bec.  v0:= v1.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` @kind object;
  #L458bf0.  call temp:= `get`(v0, v2) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L458bf6.  v0:= temp @kind object;
  #L458bf8.  v0:= (`java.util.List`) v0 @kind object;
  #L458bfc.  if v0 != 0 then goto L458c08;
  #L458c00.  call temp:= `resolveAll`(v1, v2) @signature `Lorg/simpleframework/xml/util/Resolver;.resolveAll:(Ljava/lang/String;)Ljava/util/List;` @kind virtual;
  #L458c06.  v0:= temp @kind object;
  #L458c08.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L458c0e.  v2:= temp;
  #L458c10.  if v2 == 0 then goto L458c18;
  #L458c14.  v2:= 0I;
  #L458c16.  return v2 @kind object;
  #L458c18.  v2:= 0I;
  #L458c1a.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L458c20.  v2:= temp @kind object;
  #L458c22.  v2:= (`org.simpleframework.xml.util.Match`) v2 @kind object;
  #L458c26.  return v2 @kind object;
}
procedure `java.util.List` `resolveAll`(`org.simpleframework.xml.util.Resolver` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/util/Resolver;.resolveAll:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458b3c.  v0:= v1.`org.simpleframework.xml.util.Resolver.cache` @type ^`org.simpleframework.xml.util.Resolver$Cache` @kind object;
  #L458b40.  call temp:= `get`(v0, v2) @signature `Ljava/util/LinkedHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L458b46.  v0:= temp @kind object;
  #L458b48.  v0:= (`java.util.List`) v0 @kind object;
  #L458b4c.  if v0 == 0 then goto L458b52;
  #L458b50.  return v0 @kind object;
  #L458b52.  call temp:= `toCharArray`(v2) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L458b58.  v0:= temp @kind object;
  #L458b5a.  if v0 != 0 then goto L458b62;
  #L458b5e.  v2:= 0I;
  #L458b60.  return v2 @kind object;
  #L458b62.  call temp:= `c`(v1, v2, v0) @signature `Lorg/simpleframework/xml/util/Resolver;.c:(Ljava/lang/String;[C)Ljava/util/List;` @kind direct;
  #L458b68.  v2:= temp @kind object;
  #L458b6a.  return v2 @kind object;
}
procedure `int` `size`(`org.simpleframework.xml.util.Resolver` v1 @kind this) @signature `Lorg/simpleframework/xml/util/Resolver;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458afc.  v0:= v1.`org.simpleframework.xml.util.Resolver.stack` @type ^`org.simpleframework.xml.util.Resolver$Stack` @kind object;
  #L458b00.  call temp:= `size`(v0) @signature `Ljava/util/LinkedList;.size:()I` @kind virtual;
  #L458b06.  v0:= temp;
  #L458b08.  return v0;
}
