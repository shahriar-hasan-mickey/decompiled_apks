record `org.simpleframework.xml.util.ConcurrentCache` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.ConcurrentHashMap` @kind class, `org.simpleframework.xml.util.Cache` @kind interface {
}
procedure `void` `<init>`(`org.simpleframework.xml.util.ConcurrentCache` v0 @kind this) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4585d0.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L4585d6.  return @kind void;
}
procedure `void` `cache`(`org.simpleframework.xml.util.ConcurrentCache` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4585e8.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4585ee.  return @kind void;
}
procedure `boolean` `contains`(`org.simpleframework.xml.util.ConcurrentCache` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L45857c.  call temp:= `containsKey`(v0, v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L458582.  v1:= temp;
  #L458584.  return v1;
}
procedure `java.lang.Object` `fetch`(`org.simpleframework.xml.util.ConcurrentCache` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L458598.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45859e.  v1:= temp @kind object;
  #L4585a0.  return v1 @kind object;
}
procedure `java.lang.Object` `take`(`org.simpleframework.xml.util.ConcurrentCache` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.take:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L4585b4.  call temp:= `remove`(v0, v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4585ba.  v1:= temp @kind object;
  #L4585bc.  return v1 @kind object;
}
