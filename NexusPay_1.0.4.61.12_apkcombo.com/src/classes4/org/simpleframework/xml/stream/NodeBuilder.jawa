record `org.simpleframework.xml.stream.NodeBuilder` @kind class @AccessFlag PUBLIC_FINAL {
}
global `org.simpleframework.xml.stream.Provider` `@@org.simpleframework.xml.stream.NodeBuilder.a` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.<clinit>:()V` @AccessFlag PUBLIC_STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L454164.  call temp:= `getInstance`() @signature `Lorg/simpleframework/xml/stream/ProviderFactory;.getInstance:()Lorg/simpleframework/xml/stream/Provider;` @kind static;
  #L45416a.  v0:= temp @kind object;
  #L45416c.  `@@org.simpleframework.xml.stream.NodeBuilder.a` @type ^`org.simpleframework.xml.stream.Provider` := v0 @kind object;
  #L454170.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.NodeBuilder` v0 @kind this) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L454184.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45418a.  return @kind void;
}
procedure `org.simpleframework.xml.stream.InputNode` `a`(`org.simpleframework.xml.stream.EventReader` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.a:(Lorg/simpleframework/xml/stream/EventReader;)Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L4540f8.  v0:= new `org.simpleframework.xml.stream.NodeReader`;
  #L4540fc.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeReader;.<init>:(Lorg/simpleframework/xml/stream/EventReader;)V` @kind direct;
  #L454102.  call temp:= `readRoot`(v0) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readRoot:()Lorg/simpleframework/xml/stream/InputNode;` @kind virtual;
  #L454108.  v1:= temp @kind object;
  #L45410a.  return v1 @kind object;
}
procedure `org.simpleframework.xml.stream.InputNode` `read`(`java.io.InputStream` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.read:(Ljava/io/InputStream;)Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4540a8.  v0:= `@@org.simpleframework.xml.stream.NodeBuilder.a` @type ^`org.simpleframework.xml.stream.Provider` @kind object;
  #L4540ac.  call temp:= `provide`(v0, v1) @signature `Lorg/simpleframework/xml/stream/Provider;.provide:(Ljava/io/InputStream;)Lorg/simpleframework/xml/stream/EventReader;` @kind interface;
  #L4540b2.  v1:= temp @kind object;
  #L4540b4.  call temp:= `a`(v1) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.a:(Lorg/simpleframework/xml/stream/EventReader;)Lorg/simpleframework/xml/stream/InputNode;` @kind static;
  #L4540ba.  v1:= temp @kind object;
  #L4540bc.  return v1 @kind object;
}
procedure `org.simpleframework.xml.stream.InputNode` `read`(`java.io.Reader` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.read:(Ljava/io/Reader;)Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4540d0.  v0:= `@@org.simpleframework.xml.stream.NodeBuilder.a` @type ^`org.simpleframework.xml.stream.Provider` @kind object;
  #L4540d4.  call temp:= `provide`(v0, v1) @signature `Lorg/simpleframework/xml/stream/Provider;.provide:(Ljava/io/Reader;)Lorg/simpleframework/xml/stream/EventReader;` @kind interface;
  #L4540da.  v1:= temp @kind object;
  #L4540dc.  call temp:= `a`(v1) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.a:(Lorg/simpleframework/xml/stream/EventReader;)Lorg/simpleframework/xml/stream/InputNode;` @kind static;
  #L4540e2.  v1:= temp @kind object;
  #L4540e4.  return v1 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `write`(`java.io.Writer` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.write:(Ljava/io/Writer;)Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45411c.  v0:= new `org.simpleframework.xml.stream.Format`;
  #L454120.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/stream/Format;.<init>:()V` @kind direct;
  #L454126.  call temp:= `write`(v1, v0) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.write:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)Lorg/simpleframework/xml/stream/OutputNode;` @kind static;
  #L45412c.  v1:= temp @kind object;
  #L45412e.  return v1 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `write`(`java.io.Writer` v1 @kind object, `org.simpleframework.xml.stream.Format` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeBuilder;.write:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L454140.  v0:= new `org.simpleframework.xml.stream.NodeWriter`;
  #L454144.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)V` @kind direct;
  #L45414a.  call temp:= `writeRoot`(v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeRoot:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L454150.  v1:= temp @kind object;
  #L454152.  return v1 @kind object;
}
