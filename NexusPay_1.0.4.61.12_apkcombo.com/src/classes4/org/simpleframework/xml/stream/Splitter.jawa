record `org.simpleframework.xml.stream.Splitter` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `java.lang.StringBuilder` `org.simpleframework.xml.stream.Splitter.builder` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.stream.Splitter.count` @AccessFlag PUBLIC;
  `int` `org.simpleframework.xml.stream.Splitter.off` @AccessFlag PUBLIC;
  `char`[] `org.simpleframework.xml.stream.Splitter.text` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.Splitter` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/Splitter;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L456064.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45606a.  v0:= new `java.lang.StringBuilder`;
  #L45606e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L456074.  v1.`org.simpleframework.xml.stream.Splitter.builder` @type ^`java.lang.StringBuilder` := v0 @kind object;
  #L456078.  call temp:= `toCharArray`(v2) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L45607e.  v2:= temp @kind object;
  #L456080.  v1.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] := v2 @kind object;
  #L456084.  v2:= length @variable v2;
  #L456086.  v1.`org.simpleframework.xml.stream.Splitter.count` @type ^`int` := v2;
  #L45608a.  return @kind void;
}
procedure `boolean` `a`(`org.simpleframework.xml.stream.Splitter` v7 @kind this) @signature `Lorg/simpleframework/xml/stream/Splitter;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L455e5c.  v0:= v7.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L455e60.  v1:= 0I;
  #L455e62.  v2:= 0I;
  #L455e64.  v3:= v7.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L455e68.  if v0 >= v3 then goto L455e8a;
  #L455e6c.  v3:= v7.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L455e70.  v3:= v3[v0] @kind char;
  #L455e74.  call temp:= `e`(v7, v3) @signature `Lorg/simpleframework/xml/stream/Splitter;.e:(C)Z` @kind direct;
  #L455e7a.  v3:= temp;
  #L455e7c.  if v3 == 0 then goto L455e8a;
  #L455e80.  v2:= v2 + 1;
  #L455e84.  v0:= v0 + 1;
  #L455e88.  goto L455e64;
  #L455e8a.  v3:= 1I;
  #L455e8c.  if v2 <= v3 then goto L455eca;
  #L455e90.  v4:= v7.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L455e94.  if v0 >= v4 then goto L455eb4;
  #L455e98.  v4:= v7.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L455e9c.  v5:= v0 + -1;
  #L455ea0.  v4:= v4[v5] @kind char;
  #L455ea4.  call temp:= `e`(v7, v4) @signature `Lorg/simpleframework/xml/stream/Splitter;.e:(C)Z` @kind direct;
  #L455eaa.  v4:= temp;
  #L455eac.  if v4 == 0 then goto L455eb4;
  #L455eb0.  v0:= v0 + -1;
  #L455eb4.  v4:= v7.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L455eb8.  v5:= v7.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L455ebc.  v6:= v0 - v5 @kind int;
  #L455ec0.  call `commit`(v7, v4, v5, v6) @signature `Lorg/simpleframework/xml/stream/Splitter;.commit:([CII)V` @kind virtual;
  #L455ec6.  v7.`org.simpleframework.xml.stream.Splitter.off` @type ^`int` := v0;
  #L455eca.  if v2 <= v3 then goto L455ed0;
  #L455ece.  v1:= 1I;
  #L455ed0.  return v1;
}
procedure `boolean` `b`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.b:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L455ee4.  call temp:= `isDigit`(v1) @signature `Ljava/lang/Character;.isDigit:(C)Z` @kind static;
  #L455eea.  v1:= temp;
  #L455eec.  return v1;
}
procedure `boolean` `c`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.c:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L455f00.  call temp:= `isLetter`(v1) @signature `Ljava/lang/Character;.isLetter:(C)Z` @kind static;
  #L455f06.  v1:= temp;
  #L455f08.  return v1;
}
procedure `boolean` `d`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.d:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L455f1c.  call temp:= `isLetterOrDigit`(v1) @signature `Ljava/lang/Character;.isLetterOrDigit:(C)Z` @kind static;
  #L455f22.  v1:= temp;
  #L455f24.  v1:= v1 ^~ 1;
  #L455f28.  return v1;
}
procedure `boolean` `e`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.e:(C)Z` @AccessFlag PRIVATE {
    temp;

  #L455f3c.  call temp:= `isUpperCase`(v1) @signature `Ljava/lang/Character;.isUpperCase:(C)Z` @kind static;
  #L455f42.  v1:= temp;
  #L455f44.  return v1;
}
procedure `boolean` `f`(`org.simpleframework.xml.stream.Splitter` v6 @kind this) @signature `Lorg/simpleframework/xml/stream/Splitter;.f:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L455f58.  v0:= v6.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L455f5c.  v1:= 0I;
  #L455f5e.  v2:= 0I;
  #L455f60.  v3:= v6.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L455f64.  if v0 >= v3 then goto L455f86;
  #L455f68.  v3:= v6.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L455f6c.  v3:= v3[v0] @kind char;
  #L455f70.  call temp:= `b`(v6, v3) @signature `Lorg/simpleframework/xml/stream/Splitter;.b:(C)Z` @kind direct;
  #L455f76.  v3:= temp;
  #L455f78.  if v3 == 0 then goto L455f86;
  #L455f7c.  v2:= v2 + 1;
  #L455f80.  v0:= v0 + 1;
  #L455f84.  goto L455f60;
  #L455f86.  if v2 <= 0 then goto L455f9c;
  #L455f8a.  v3:= v6.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L455f8e.  v4:= v6.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L455f92.  v5:= v0 - v4 @kind int;
  #L455f96.  call `commit`(v6, v3, v4, v5) @signature `Lorg/simpleframework/xml/stream/Splitter;.commit:([CII)V` @kind virtual;
  #L455f9c.  v6.`org.simpleframework.xml.stream.Splitter.off` @type ^`int` := v0;
  #L455fa0.  if v2 <= 0 then goto L455fa6;
  #L455fa4.  v1:= 1I;
  #L455fa6.  return v1;
}
procedure `void` `g`(`org.simpleframework.xml.stream.Splitter` v4 @kind this) @signature `Lorg/simpleframework/xml/stream/Splitter;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45609c.  v0:= v4.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L4560a0.  v1:= v4.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L4560a4.  if v0 >= v1 then goto L4560da;
  #L4560a8.  v1:= v4.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L4560ac.  v1:= v1[v0] @kind char;
  #L4560b0.  call temp:= `c`(v4, v1) @signature `Lorg/simpleframework/xml/stream/Splitter;.c:(C)Z` @kind direct;
  #L4560b6.  v2:= temp;
  #L4560b8.  if v2 != 0 then goto L4560be;
  #L4560bc.  goto L4560da;
  #L4560be.  v2:= v4.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L4560c2.  if v0 <= v2 then goto L4560d4;
  #L4560c6.  call temp:= `e`(v4, v1) @signature `Lorg/simpleframework/xml/stream/Splitter;.e:(C)Z` @kind direct;
  #L4560cc.  v1:= temp;
  #L4560ce.  if v1 == 0 then goto L4560d4;
  #L4560d2.  goto L4560da;
  #L4560d4.  v0:= v0 + 1;
  #L4560d8.  goto L4560a0;
  #L4560da.  v1:= v4.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L4560de.  if v0 <= v1 then goto L456102;
  #L4560e2.  v2:= v4.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L4560e6.  v3:= v0 - v1 @kind int;
  #L4560ea.  call `parse`(v4, v2, v1, v3) @signature `Lorg/simpleframework/xml/stream/Splitter;.parse:([CII)V` @kind virtual;
  #L4560f0.  v1:= v4.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L4560f4.  v2:= v4.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L4560f8.  v3:= v0 - v2 @kind int;
  #L4560fc.  call `commit`(v4, v1, v2, v3) @signature `Lorg/simpleframework/xml/stream/Splitter;.commit:([CII)V` @kind virtual;
  #L456102.  v4.`org.simpleframework.xml.stream.Splitter.off` @type ^`int` := v0;
  #L456106.  return @kind void;
}
procedure `void` `commit`(`char`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.commit:([CII)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `parse`(`char`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.parse:([CII)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `process`(`org.simpleframework.xml.stream.Splitter` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/Splitter;.process:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L455ff0.  v0:= v2.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L455ff4.  v1:= v2.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L455ff8.  if v0 >= v1 then goto L456046;
  #L455ffc.  v0:= v2.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L456000.  v1:= v2.`org.simpleframework.xml.stream.Splitter.count` @type ^`int`;
  #L456004.  if v0 >= v1 then goto L45602c;
  #L456008.  v1:= v2.`org.simpleframework.xml.stream.Splitter.text` @type ^`char`[] @kind object;
  #L45600c.  v0:= v1[v0] @kind char;
  #L456010.  call temp:= `d`(v2, v0) @signature `Lorg/simpleframework/xml/stream/Splitter;.d:(C)Z` @kind direct;
  #L456016.  v0:= temp;
  #L456018.  if v0 != 0 then goto L45601e;
  #L45601c.  goto L45602c;
  #L45601e.  v0:= v2.`org.simpleframework.xml.stream.Splitter.off` @type ^`int`;
  #L456022.  v0:= v0 + 1;
  #L456026.  v2.`org.simpleframework.xml.stream.Splitter.off` @type ^`int` := v0;
  #L45602a.  goto L455ffc;
  #L45602c.  call temp:= `a`(v2) @signature `Lorg/simpleframework/xml/stream/Splitter;.a:()Z` @kind direct;
  #L456032.  v0:= temp;
  #L456034.  if v0 != 0 then goto L455ff0;
  #L456038.  call `g`(v2) @signature `Lorg/simpleframework/xml/stream/Splitter;.g:()V` @kind direct;
  #L45603e.  call temp:= `f`(v2) @signature `Lorg/simpleframework/xml/stream/Splitter;.f:()Z` @kind direct;
  #L456044.  goto L455ff0;
  #L456046.  v0:= v2.`org.simpleframework.xml.stream.Splitter.builder` @type ^`java.lang.StringBuilder` @kind object;
  #L45604a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L456050.  v0:= temp @kind object;
  #L456052.  return v0 @kind object;
}
procedure `char` `toLower`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.toLower:(C)C` @AccessFlag PUBLIC {
    temp;

  #L455fb8.  call temp:= `toLowerCase`(v1) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L455fbe.  v1:= temp;
  #L455fc0.  return v1;
}
procedure `char` `toUpper`(`org.simpleframework.xml.stream.Splitter` v0 @kind this, `char` v1 ) @signature `Lorg/simpleframework/xml/stream/Splitter;.toUpper:(C)C` @AccessFlag PUBLIC {
    temp;

  #L455fd4.  call temp:= `toUpperCase`(v1) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L455fda.  v1:= temp;
  #L455fdc.  return v1;
}
