record `org.simpleframework.xml.stream.NodeReader` @kind class @AccessFlag PUBLIC {
  `java.lang.StringBuilder` `org.simpleframework.xml.stream.NodeReader.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.EventReader` `org.simpleframework.xml.stream.NodeReader.b` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.InputStack` `org.simpleframework.xml.stream.NodeReader.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.NodeReader` v1 @kind this, `org.simpleframework.xml.stream.EventReader` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.<init>:(Lorg/simpleframework/xml/stream/EventReader;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4545c8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4545ce.  v0:= new `java.lang.StringBuilder`;
  #L4545d2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4545d8.  v1.`org.simpleframework.xml.stream.NodeReader.a` @type ^`java.lang.StringBuilder` := v0 @kind object;
  #L4545dc.  v0:= new `org.simpleframework.xml.stream.InputStack`;
  #L4545e0.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/stream/InputStack;.<init>:()V` @kind direct;
  #L4545e6.  v1.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` := v0 @kind object;
  #L4545ea.  v1.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` := v2 @kind object;
  #L4545ee.  return @kind void;
}
procedure `void` `a`(`org.simpleframework.xml.stream.NodeReader` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.a:(Lorg/simpleframework/xml/stream/InputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L454600.  v2:= v1.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L454604.  call temp:= `peek`(v2) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L45460a.  v2:= temp @kind object;
  #L45460c.  call temp:= `isText`(v2) @signature `Lorg/simpleframework/xml/stream/EventNode;.isText:()Z` @kind interface;
  #L454612.  v0:= temp;
  #L454614.  if v0 == 0 then goto L45462a;
  #L454618.  call temp:= `getValue`(v2) @signature `Lorg/simpleframework/xml/stream/EventNode;.getValue:()Ljava/lang/String;` @kind interface;
  #L45461e.  v2:= temp @kind object;
  #L454620.  v0:= v1.`org.simpleframework.xml.stream.NodeReader.a` @type ^`java.lang.StringBuilder` @kind object;
  #L454624.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45462a.  return @kind void;
}
procedure `boolean` `b`(`org.simpleframework.xml.stream.NodeReader` v0 @kind this, `org.simpleframework.xml.stream.EventNode` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.b:(Lorg/simpleframework/xml/stream/EventNode;Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;

  #L454294.  call temp:= `getName`(v1) @signature `Lorg/simpleframework/xml/stream/EventNode;.getName:()Ljava/lang/String;` @kind interface;
  #L45429a.  v1:= temp @kind object;
  #L45429c.  if v1 != 0 then goto L4542a4;
  #L4542a0.  v1:= 0I;
  #L4542a2.  return v1;
  #L4542a4.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4542aa.  v1:= temp;
  #L4542ac.  return v1;
}
procedure `java.lang.String` `c`(`org.simpleframework.xml.stream.NodeReader` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.c:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4542e8.  v3:= v2.`org.simpleframework.xml.stream.NodeReader.a` @type ^`java.lang.StringBuilder` @kind object;
  #L4542ec.  call temp:= `length`(v3) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L4542f2.  v3:= temp;
  #L4542f4.  if v3 <= 0 then goto L454312;
  #L4542f8.  v3:= v2.`org.simpleframework.xml.stream.NodeReader.a` @type ^`java.lang.StringBuilder` @kind object;
  #L4542fc.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L454302.  v3:= temp @kind object;
  #L454304.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.a` @type ^`java.lang.StringBuilder` @kind object;
  #L454308.  v1:= 0I;
  #L45430a.  call `setLength`(v0, v1) @signature `Ljava/lang/StringBuilder;.setLength:(I)V` @kind virtual;
  #L454310.  return v3 @kind object;
  #L454312.  v3:= 0I;
  #L454314.  return v3 @kind object;
}
procedure `org.simpleframework.xml.stream.InputNode` `d`(`org.simpleframework.xml.stream.NodeReader` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object, `org.simpleframework.xml.stream.EventNode` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.d:(Lorg/simpleframework/xml/stream/InputNode;Lorg/simpleframework/xml/stream/EventNode;)Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L454570.  v0:= new `org.simpleframework.xml.stream.InputElement`;
  #L454574.  call `<init>`(v0, v3, v2, v4) @signature `Lorg/simpleframework/xml/stream/InputElement;.<init>:(Lorg/simpleframework/xml/stream/InputNode;Lorg/simpleframework/xml/stream/NodeReader;Lorg/simpleframework/xml/stream/EventNode;)V` @kind direct;
  #L45457a.  v3:= v2.`org.simpleframework.xml.stream.NodeReader.a` @type ^`java.lang.StringBuilder` @kind object;
  #L45457e.  call temp:= `length`(v3) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L454584.  v3:= temp;
  #L454586.  if v3 <= 0 then goto L454596;
  #L45458a.  v3:= v2.`org.simpleframework.xml.stream.NodeReader.a` @type ^`java.lang.StringBuilder` @kind object;
  #L45458e.  v1:= 0I;
  #L454590.  call `setLength`(v3, v1) @signature `Ljava/lang/StringBuilder;.setLength:(I)V` @kind virtual;
  #L454596.  call temp:= `isStart`(v4) @signature `Lorg/simpleframework/xml/stream/EventNode;.isStart:()Z` @kind interface;
  #L45459c.  v3:= temp;
  #L45459e.  if v3 == 0 then goto L4545b4;
  #L4545a2.  v3:= v2.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L4545a6.  call temp:= `push`(v3, v0) @signature `Lorg/simpleframework/xml/stream/Stack;.push:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4545ac.  v3:= temp @kind object;
  #L4545ae.  v3:= (`org.simpleframework.xml.stream.InputNode`) v3 @kind object;
  #L4545b2.  return v3 @kind object;
  #L4545b4.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`org.simpleframework.xml.stream.NodeReader` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.e:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L454328.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L45432c.  call temp:= `peek`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L454332.  v0:= temp @kind object;
  #L454334.  v1:= v2.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L454338.  call temp:= `top`(v1) @signature `Lorg/simpleframework/xml/stream/Stack;.top:()Ljava/lang/Object;` @kind virtual;
  #L45433e.  v1:= temp @kind object;
  #L454340.  if v1 != v3 then goto L45436e;
  #L454344.  call temp:= `isText`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isText:()Z` @kind interface;
  #L45434a.  v0:= temp;
  #L45434c.  if v0 == 0 then goto L45436e;
  #L454350.  call `a`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeReader;.a:(Lorg/simpleframework/xml/stream/InputNode;)V` @kind direct;
  #L454356.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L45435a.  call temp:= `next`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L454360.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L454364.  call temp:= `peek`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L45436a.  v0:= temp @kind object;
  #L45436c.  goto L454334;
  #L45436e.  call temp:= `c`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeReader;.c:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/String;` @kind direct;
  #L454374.  v3:= temp @kind object;
  #L454376.  return v3 @kind object;
}
procedure `boolean` `isEmpty`(`org.simpleframework.xml.stream.NodeReader` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.isEmpty:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L454254.  v0:= v1.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L454258.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.top:()Ljava/lang/Object;` @kind virtual;
  #L45425e.  v0:= temp @kind object;
  #L454260.  if v0 != v2 then goto L454280;
  #L454264.  v2:= v1.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L454268.  call temp:= `peek`(v2) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L45426e.  v2:= temp @kind object;
  #L454270.  call temp:= `isEnd`(v2) @signature `Lorg/simpleframework/xml/stream/EventNode;.isEnd:()Z` @kind interface;
  #L454276.  v2:= temp;
  #L454278.  if v2 == 0 then goto L454280;
  #L45427c.  v2:= 1I;
  #L45427e.  return v2;
  #L454280.  v2:= 0I;
  #L454282.  return v2;
}
procedure `boolean` `isRoot`(`org.simpleframework.xml.stream.NodeReader` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.isRoot:(Lorg/simpleframework/xml/stream/InputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4542c0.  v0:= v1.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L4542c4.  call temp:= `bottom`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.bottom:()Ljava/lang/Object;` @kind virtual;
  #L4542ca.  v0:= temp @kind object;
  #L4542cc.  if v0 != v2 then goto L4542d4;
  #L4542d0.  v2:= 1I;
  #L4542d2.  goto L4542d6;
  #L4542d4.  v2:= 0I;
  #L4542d6.  return v2;
}
procedure `org.simpleframework.xml.stream.InputNode` `readElement`(`org.simpleframework.xml.stream.NodeReader` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readElement:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L454404.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L454408.  call temp:= `isRelevant`(v0, v4) @signature `Lorg/simpleframework/xml/stream/InputStack;.isRelevant:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L45440e.  v0:= temp;
  #L454410.  v1:= 0I;
  #L454412.  if v0 != 0 then goto L454418;
  #L454416.  return v1 @kind object;
  #L454418.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L45441c.  call temp:= `next`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L454422.  v0:= temp @kind object;
  #L454424.  if v0 == 0 then goto L45446a;
  #L454428.  call temp:= `isEnd`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isEnd:()Z` @kind interface;
  #L45442e.  v2:= temp;
  #L454430.  if v2 == 0 then goto L454446;
  #L454434.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L454438.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.pop:()Ljava/lang/Object;` @kind virtual;
  #L45443e.  v0:= temp @kind object;
  #L454440.  if v0 != v4 then goto L45445c;
  #L454444.  return v1 @kind object;
  #L454446.  call temp:= `isStart`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isStart:()Z` @kind interface;
  #L45444c.  v2:= temp;
  #L45444e.  if v2 == 0 then goto L45445c;
  #L454452.  call temp:= `d`(v3, v4, v0) @signature `Lorg/simpleframework/xml/stream/NodeReader;.d:(Lorg/simpleframework/xml/stream/InputNode;Lorg/simpleframework/xml/stream/EventNode;)Lorg/simpleframework/xml/stream/InputNode;` @kind direct;
  #L454458.  v4:= temp @kind object;
  #L45445a.  return v4 @kind object;
  #L45445c.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L454460.  call temp:= `next`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L454466.  v0:= temp @kind object;
  #L454468.  goto L454424;
  #L45446a.  return v1 @kind object;
}
procedure `org.simpleframework.xml.stream.InputNode` `readElement`(`org.simpleframework.xml.stream.NodeReader` v3 @kind this, `org.simpleframework.xml.stream.InputNode` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readElement:(Lorg/simpleframework/xml/stream/InputNode;Ljava/lang/String;)Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45447c.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L454480.  call temp:= `isRelevant`(v0, v4) @signature `Lorg/simpleframework/xml/stream/InputStack;.isRelevant:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L454486.  v0:= temp;
  #L454488.  v1:= 0I;
  #L45448a.  if v0 != 0 then goto L454490;
  #L45448e.  return v1 @kind object;
  #L454490.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L454494.  call temp:= `peek`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L45449a.  v0:= temp @kind object;
  #L45449c.  if v0 == 0 then goto L454518;
  #L4544a0.  call temp:= `isText`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isText:()Z` @kind interface;
  #L4544a6.  v2:= temp;
  #L4544a8.  if v2 == 0 then goto L4544b4;
  #L4544ac.  call `a`(v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeReader;.a:(Lorg/simpleframework/xml/stream/InputNode;)V` @kind direct;
  #L4544b2.  goto L454500;
  #L4544b4.  call temp:= `isEnd`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isEnd:()Z` @kind interface;
  #L4544ba.  v2:= temp;
  #L4544bc.  if v2 == 0 then goto L4544de;
  #L4544c0.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L4544c4.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.top:()Ljava/lang/Object;` @kind virtual;
  #L4544ca.  v0:= temp @kind object;
  #L4544cc.  if v0 != v4 then goto L4544d2;
  #L4544d0.  return v1 @kind object;
  #L4544d2.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L4544d6.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.pop:()Ljava/lang/Object;` @kind virtual;
  #L4544dc.  goto L454500;
  #L4544de.  call temp:= `isStart`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isStart:()Z` @kind interface;
  #L4544e4.  v2:= temp;
  #L4544e6.  if v2 == 0 then goto L454500;
  #L4544ea.  call temp:= `b`(v3, v0, v5) @signature `Lorg/simpleframework/xml/stream/NodeReader;.b:(Lorg/simpleframework/xml/stream/EventNode;Ljava/lang/String;)Z` @kind direct;
  #L4544f0.  v5:= temp;
  #L4544f2.  if v5 == 0 then goto L454518;
  #L4544f6.  call temp:= `readElement`(v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readElement:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/stream/InputNode;` @kind virtual;
  #L4544fc.  v4:= temp @kind object;
  #L4544fe.  return v4 @kind object;
  #L454500.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L454504.  call temp:= `next`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L45450a.  v0:= v3.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L45450e.  call temp:= `peek`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L454514.  v0:= temp @kind object;
  #L454516.  goto L45449c;
  #L454518.  return v1 @kind object;
}
procedure `org.simpleframework.xml.stream.InputNode` `readRoot`(`org.simpleframework.xml.stream.NodeReader` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readRoot:()Lorg/simpleframework/xml/stream/InputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45452c.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L454530.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L454536.  v0:= temp;
  #L454538.  v1:= 0I;
  #L45453a.  if v0 == 0 then goto L45455c;
  #L45453e.  call temp:= `readElement`(v2, v1) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readElement:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/stream/InputNode;` @kind virtual;
  #L454544.  v0:= temp @kind object;
  #L454546.  if v0 == 0 then goto L45454c;
  #L45454a.  return v0 @kind object;
  #L45454c.  v0:= new `org.simpleframework.xml.stream.NodeException`;
  #L454550.  v1:= "Document has no root element" @kind object;
  #L454554.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45455a.  throw v0;
  #L45455c.  return v1 @kind object;
}
procedure `java.lang.String` `readValue`(`org.simpleframework.xml.stream.NodeReader` v2 @kind this, `org.simpleframework.xml.stream.InputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readValue:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L454388.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L45438c.  call temp:= `isRelevant`(v0, v3) @signature `Lorg/simpleframework/xml/stream/InputStack;.isRelevant:(Lorg/simpleframework/xml/stream/InputNode;)Z` @kind virtual;
  #L454392.  v0:= temp;
  #L454394.  v1:= 0I;
  #L454396.  if v0 != 0 then goto L45439c;
  #L45439a.  return v1 @kind object;
  #L45439c.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.a` @type ^`java.lang.StringBuilder` @kind object;
  #L4543a0.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L4543a6.  v0:= temp;
  #L4543a8.  if v0 > 0 then goto L4543ea;
  #L4543ac.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L4543b0.  call temp:= `peek`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.peek:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L4543b6.  v0:= temp @kind object;
  #L4543b8.  call temp:= `isEnd`(v0) @signature `Lorg/simpleframework/xml/stream/EventNode;.isEnd:()Z` @kind interface;
  #L4543be.  v0:= temp;
  #L4543c0.  if v0 == 0 then goto L4543ea;
  #L4543c4.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L4543c8.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.top:()Ljava/lang/Object;` @kind virtual;
  #L4543ce.  v0:= temp @kind object;
  #L4543d0.  if v0 != v3 then goto L4543d6;
  #L4543d4.  return v1 @kind object;
  #L4543d6.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.c` @type ^`org.simpleframework.xml.stream.InputStack` @kind object;
  #L4543da.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/Stack;.pop:()Ljava/lang/Object;` @kind virtual;
  #L4543e0.  v0:= v2.`org.simpleframework.xml.stream.NodeReader.b` @type ^`org.simpleframework.xml.stream.EventReader` @kind object;
  #L4543e4.  call temp:= `next`(v0) @signature `Lorg/simpleframework/xml/stream/EventReader;.next:()Lorg/simpleframework/xml/stream/EventNode;` @kind interface;
  #L4543ea.  call temp:= `e`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeReader;.e:(Lorg/simpleframework/xml/stream/InputNode;)Ljava/lang/String;` @kind direct;
  #L4543f0.  v3:= temp @kind object;
  #L4543f2.  return v3 @kind object;
}
procedure `void` `skipElement`(`org.simpleframework.xml.stream.NodeReader` v1 @kind this, `org.simpleframework.xml.stream.InputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeReader;.skipElement:(Lorg/simpleframework/xml/stream/InputNode;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45463c.  call temp:= `readElement`(v1, v2) @signature `Lorg/simpleframework/xml/stream/NodeReader;.readElement:(Lorg/simpleframework/xml/stream/InputNode;)Lorg/simpleframework/xml/stream/InputNode;` @kind virtual;
  #L454642.  v0:= temp @kind object;
  #L454644.  if v0 == 0 then goto L45464a;
  #L454648.  goto L45463c;
  #L45464a.  return @kind void;
}
