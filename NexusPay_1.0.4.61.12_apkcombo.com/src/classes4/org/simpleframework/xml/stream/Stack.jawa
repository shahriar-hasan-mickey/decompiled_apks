record `org.simpleframework.xml.stream.Stack` @kind class @AccessFlag PUBLIC extends `java.util.ArrayList` @kind class {
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.Stack` v0 @kind this, `int` v1 ) @signature `Lorg/simpleframework/xml/stream/Stack;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4561bc.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4561c2.  return @kind void;
}
procedure `java.lang.Object` `bottom`(`org.simpleframework.xml.stream.Stack` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/Stack;.bottom:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456118.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L45611e.  v0:= temp;
  #L456120.  if v0 > 0 then goto L456128;
  #L456124.  v0:= 0I;
  #L456126.  return v0 @kind object;
  #L456128.  v0:= 0I;
  #L45612a.  call temp:= `get`(v1, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L456130.  v0:= temp @kind object;
  #L456132.  return v0 @kind object;
}
procedure `java.lang.Object` `pop`(`org.simpleframework.xml.stream.Stack` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/Stack;.pop:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456144.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L45614a.  v0:= temp;
  #L45614c.  if v0 > 0 then goto L456154;
  #L456150.  v0:= 0I;
  #L456152.  return v0 @kind object;
  #L456154.  v0:= v0 + -1;
  #L456158.  call temp:= `remove`(v1, v0) @signature `Ljava/util/ArrayList;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L45615e.  v0:= temp @kind object;
  #L456160.  return v0 @kind object;
}
procedure `java.lang.Object` `push`(`org.simpleframework.xml.stream.Stack` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/Stack;.push:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L456174.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L45617a.  return v1 @kind object;
}
procedure `java.lang.Object` `top`(`org.simpleframework.xml.stream.Stack` v1 @kind this) @signature `Lorg/simpleframework/xml/stream/Stack;.top:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45618c.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L456192.  v0:= temp;
  #L456194.  if v0 > 0 then goto L45619c;
  #L456198.  v0:= 0I;
  #L45619a.  return v0 @kind object;
  #L45619c.  v0:= v0 + -1;
  #L4561a0.  call temp:= `get`(v1, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4561a6.  v0:= temp @kind object;
  #L4561a8.  return v0 @kind object;
}
