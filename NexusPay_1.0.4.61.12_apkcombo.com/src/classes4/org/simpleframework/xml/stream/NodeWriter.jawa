record `org.simpleframework.xml.stream.NodeWriter` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.stream.OutputStack` `org.simpleframework.xml.stream.NodeWriter.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.stream.Formatter` `org.simpleframework.xml.stream.NodeWriter.b` @AccessFlag PRIVATE_FINAL;
  `java.util.Set` `org.simpleframework.xml.stream.NodeWriter.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.simpleframework.xml.stream.NodeWriter.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `java.io.Writer` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4547dc.  v0:= new `org.simpleframework.xml.stream.Format`;
  #L4547e0.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/stream/Format;.<init>:()V` @kind direct;
  #L4547e6.  call `<init>`(v1, v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)V` @kind direct;
  #L4547ec.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `java.io.Writer` v2 @kind object, `org.simpleframework.xml.stream.Format` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L454800.  v0:= 0I;
  #L454802.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;Z)V` @kind direct;
  #L454808.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `java.io.Writer` v2 @kind object, `org.simpleframework.xml.stream.Format` v3 @kind object, `boolean` v4 ) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L45481c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L454822.  v0:= new `org.simpleframework.xml.stream.Formatter`;
  #L454826.  call `<init>`(v0, v2, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.<init>:(Ljava/io/Writer;Lorg/simpleframework/xml/stream/Format;)V` @kind direct;
  #L45482c.  v1.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` := v0 @kind object;
  #L454830.  v2:= new `java.util.HashSet`;
  #L454834.  call `<init>`(v2) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L45483a.  v1.`org.simpleframework.xml.stream.NodeWriter.c` @type ^`java.util.Set` := v2 @kind object;
  #L45483e.  v3:= new `org.simpleframework.xml.stream.OutputStack`;
  #L454842.  call `<init>`(v3, v2) @signature `Lorg/simpleframework/xml/stream/OutputStack;.<init>:(Ljava/util/Set;)V` @kind direct;
  #L454848.  v1.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` := v3 @kind object;
  #L45484c.  v1.`org.simpleframework.xml.stream.NodeWriter.d` @type ^`boolean` := v4 @kind boolean;
  #L454850.  return @kind void;
}
procedure `void` `a`(`org.simpleframework.xml.stream.NodeWriter` v6 @kind this, `org.simpleframework.xml.stream.OutputNode` v7 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.a:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L454914.  call temp:= `getAttributes`(v7) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getAttributes:()Lorg/simpleframework/xml/stream/NodeMap;` @kind interface;
  #L45491a.  v0:= temp @kind object;
  #L45491c.  call temp:= `iterator`(v0) @signature `Lorg/simpleframework/xml/stream/NodeMap;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L454922.  v1:= temp @kind object;
  #L454924.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45492a.  v2:= temp;
  #L45492c.  if v2 == 0 then goto L454968;
  #L454930.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L454936.  v2:= temp @kind object;
  #L454938.  v2:= (`java.lang.String`) v2 @kind object;
  #L45493c.  call temp:= `get`(v0, v2) @signature `Lorg/simpleframework/xml/stream/NodeMap;.get:(Ljava/lang/String;)Lorg/simpleframework/xml/stream/Node;` @kind interface;
  #L454942.  v3:= temp @kind object;
  #L454944.  v3:= (`org.simpleframework.xml.stream.OutputNode`) v3 @kind object;
  #L454948.  call temp:= `getValue`(v3) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L45494e.  v4:= temp @kind object;
  #L454950.  v5:= v6.`org.simpleframework.xml.stream.NodeWriter.d` @type ^`boolean` @kind boolean;
  #L454954.  call temp:= `getPrefix`(v3, v5) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getPrefix:(Z)Ljava/lang/String;` @kind interface;
  #L45495a.  v3:= temp @kind object;
  #L45495c.  v5:= v6.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L454960.  call `writeAttribute`(v5, v2, v4, v3) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeAttribute:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L454966.  goto L454924;
  #L454968.  v0:= v6.`org.simpleframework.xml.stream.NodeWriter.c` @type ^`java.util.Set` @kind object;
  #L45496c.  call temp:= `remove`(v0, v7) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L454972.  return @kind void;
}
procedure `void` `b`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.b:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L454984.  call temp:= `getComment`(v2) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getComment:()Ljava/lang/String;` @kind interface;
  #L45498a.  v2:= temp @kind object;
  #L45498c.  if v2 == 0 then goto L45499a;
  #L454990.  v0:= v1.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L454994.  call `writeComment`(v0, v2) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeComment:(Ljava/lang/String;)V` @kind virtual;
  #L45499a.  return @kind void;
}
procedure `void` `c`(`org.simpleframework.xml.stream.NodeWriter` v3 @kind this, `org.simpleframework.xml.stream.OutputNode` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.c:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4549ac.  call temp:= `getName`(v4) @signature `Lorg/simpleframework/xml/stream/Node;.getName:()Ljava/lang/String;` @kind interface;
  #L4549b2.  v0:= temp @kind object;
  #L4549b4.  v1:= v3.`org.simpleframework.xml.stream.NodeWriter.d` @type ^`boolean` @kind boolean;
  #L4549b8.  call temp:= `getPrefix`(v4, v1) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getPrefix:(Z)Ljava/lang/String;` @kind interface;
  #L4549be.  v1:= temp @kind object;
  #L4549c0.  call temp:= `getValue`(v4) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L4549c6.  v2:= temp @kind object;
  #L4549c8.  if v2 == 0 then goto L4549d2;
  #L4549cc.  call `h`(v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.h:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L4549d2.  if v0 == 0 then goto L4549ea;
  #L4549d6.  v4:= v3.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L4549da.  call `writeEnd`(v4, v0, v1) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeEnd:(Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L4549e0.  v4:= v3.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L4549e4.  call `flush`(v4) @signature `Lorg/simpleframework/xml/stream/Formatter;.flush:()V` @kind virtual;
  #L4549ea.  return @kind void;
}
procedure `void` `d`(`org.simpleframework.xml.stream.NodeWriter` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.d:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4549fc.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.d` @type ^`boolean` @kind boolean;
  #L454a00.  call temp:= `getPrefix`(v3, v0) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getPrefix:(Z)Ljava/lang/String;` @kind interface;
  #L454a06.  v0:= temp @kind object;
  #L454a08.  call temp:= `getName`(v3) @signature `Lorg/simpleframework/xml/stream/Node;.getName:()Ljava/lang/String;` @kind interface;
  #L454a0e.  v3:= temp @kind object;
  #L454a10.  if v3 == 0 then goto L454a1e;
  #L454a14.  v1:= v2.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L454a18.  call `writeStart`(v1, v3, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeStart:(Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L454a1e.  return @kind void;
}
procedure `void` `e`(`org.simpleframework.xml.stream.NodeWriter` v4 @kind this, `org.simpleframework.xml.stream.OutputNode` v5 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.e:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L454a30.  call temp:= `getNamespaces`(v5) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getNamespaces:()Lorg/simpleframework/xml/stream/NamespaceMap;` @kind interface;
  #L454a36.  v5:= temp @kind object;
  #L454a38.  call temp:= `iterator`(v5) @signature `Lorg/simpleframework/xml/stream/NamespaceMap;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L454a3e.  v0:= temp @kind object;
  #L454a40.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L454a46.  v1:= temp;
  #L454a48.  if v1 == 0 then goto L454a6c;
  #L454a4c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L454a52.  v1:= temp @kind object;
  #L454a54.  v1:= (`java.lang.String`) v1 @kind object;
  #L454a58.  call temp:= `getPrefix`(v5, v1) @signature `Lorg/simpleframework/xml/stream/NamespaceMap;.getPrefix:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L454a5e.  v2:= temp @kind object;
  #L454a60.  v3:= v4.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L454a64.  call `writeNamespace`(v3, v1, v2) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeNamespace:(Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L454a6a.  goto L454a40;
  #L454a6c.  return @kind void;
}
procedure `org.simpleframework.xml.stream.OutputNode` `f`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.f:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4547a0.  v0:= new `org.simpleframework.xml.stream.OutputElement`;
  #L4547a4.  call `<init>`(v0, v2, v1, v3) @signature `Lorg/simpleframework/xml/stream/OutputElement;.<init>:(Lorg/simpleframework/xml/stream/OutputNode;Lorg/simpleframework/xml/stream/NodeWriter;Ljava/lang/String;)V` @kind direct;
  #L4547aa.  if v3 == 0 then goto L4547bc;
  #L4547ae.  v2:= v1.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L4547b2.  call temp:= `push`(v2, v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.push:(Lorg/simpleframework/xml/stream/OutputNode;)Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L4547b8.  v2:= temp @kind object;
  #L4547ba.  return v2 @kind object;
  #L4547bc.  v2:= new `org.simpleframework.xml.stream.NodeException`;
  #L4547c0.  v3:= "Can not have a null name" @kind object;
  #L4547c4.  call `<init>`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4547ca.  throw v2;
}
procedure `void` `g`(`org.simpleframework.xml.stream.NodeWriter` v0 @kind this, `org.simpleframework.xml.stream.OutputNode` v1 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.g:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;

  #L454a80.  call `b`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.b:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L454a86.  call `d`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.d:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L454a8c.  call `a`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.a:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L454a92.  call `e`(v0, v1) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.e:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L454a98.  return @kind void;
}
procedure `void` `h`(`org.simpleframework.xml.stream.NodeWriter` v5 @kind this, `org.simpleframework.xml.stream.OutputNode` v6 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.h:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L454aac.  call temp:= `getMode`(v6) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getMode:()Lorg/simpleframework/xml/stream/Mode;` @kind interface;
  #L454ab2.  v0:= temp @kind object;
  #L454ab4.  call temp:= `getValue`(v6) @signature `Lorg/simpleframework/xml/stream/Node;.getValue:()Ljava/lang/String;` @kind interface;
  #L454aba.  v1:= temp @kind object;
  #L454abc.  if v1 == 0 then goto L454b02;
  #L454ac0.  v2:= v5.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L454ac4.  call temp:= `iterator`(v2) @signature `Lorg/simpleframework/xml/stream/OutputStack;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L454aca.  v2:= temp @kind object;
  #L454acc.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L454ad2.  v3:= temp;
  #L454ad4.  if v3 == 0 then goto L454af8;
  #L454ad8.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L454ade.  v3:= temp @kind object;
  #L454ae0.  v3:= (`org.simpleframework.xml.stream.OutputNode`) v3 @kind object;
  #L454ae4.  v4:= `@@org.simpleframework.xml.stream.Mode.INHERIT` @type ^`org.simpleframework.xml.stream.Mode` @kind object;
  #L454ae8.  if v0 == v4 then goto L454aee;
  #L454aec.  goto L454af8;
  #L454aee.  call temp:= `getMode`(v3) @signature `Lorg/simpleframework/xml/stream/OutputNode;.getMode:()Lorg/simpleframework/xml/stream/Mode;` @kind interface;
  #L454af4.  v0:= temp @kind object;
  #L454af6.  goto L454acc;
  #L454af8.  v2:= v5.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L454afc.  call `writeText`(v2, v1, v0) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeText:(Ljava/lang/String;Lorg/simpleframework/xml/stream/Mode;)V` @kind virtual;
  #L454b02.  v0:= 0I;
  #L454b04.  call `setValue`(v6, v0) @signature `Lorg/simpleframework/xml/stream/OutputNode;.setValue:(Ljava/lang/String;)V` @kind interface;
  #L454b0a.  return @kind void;
}
procedure `void` `commit`(`org.simpleframework.xml.stream.NodeWriter` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.commit:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L454864.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L454868.  call temp:= `contains`(v0, v3) @signature `Ljava/util/ArrayList;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L45486e.  v0:= temp;
  #L454870.  if v0 == 0 then goto L4548c6;
  #L454874.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L454878.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L45487e.  v0:= temp @kind object;
  #L454880.  call temp:= `isCommitted`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.isCommitted:(Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L454886.  v1:= temp;
  #L454888.  if v1 != 0 then goto L454892;
  #L45488c.  call `g`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.g:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L454892.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L454896.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L45489c.  v0:= temp @kind object;
  #L45489e.  if v0 == v3 then goto L4548b6;
  #L4548a2.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L4548a6.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.pop:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L4548ac.  v0:= temp @kind object;
  #L4548ae.  call `c`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.c:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L4548b4.  goto L454892;
  #L4548b6.  call `c`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.c:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L4548bc.  v3:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L4548c0.  call temp:= `pop`(v3) @signature `Lorg/simpleframework/xml/stream/OutputStack;.pop:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L4548c6.  return @kind void;
}
procedure `boolean` `isCommitted`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.isCommitted:(Lorg/simpleframework/xml/stream/OutputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L454678.  v0:= v1.`org.simpleframework.xml.stream.NodeWriter.c` @type ^`java.util.Set` @kind object;
  #L45467c.  call temp:= `contains`(v0, v2) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L454682.  v2:= temp;
  #L454684.  v2:= v2 ^~ 1;
  #L454688.  return v2;
}
procedure `boolean` `isRoot`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.isRoot:(Lorg/simpleframework/xml/stream/OutputNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45469c.  v0:= v1.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L4546a0.  call temp:= `bottom`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.bottom:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L4546a6.  v0:= temp @kind object;
  #L4546a8.  if v0 != v2 then goto L4546b0;
  #L4546ac.  v2:= 1I;
  #L4546ae.  goto L4546b2;
  #L4546b0.  v2:= 0I;
  #L4546b2.  return v2;
}
procedure `void` `remove`(`org.simpleframework.xml.stream.NodeWriter` v1 @kind this, `org.simpleframework.xml.stream.OutputNode` v2 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.remove:(Lorg/simpleframework/xml/stream/OutputNode;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4548d8.  v0:= v1.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L4548dc.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L4548e2.  v0:= temp @kind object;
  #L4548e4.  if v0 != v2 then goto L4548f4;
  #L4548e8.  v2:= v1.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L4548ec.  call temp:= `pop`(v2) @signature `Lorg/simpleframework/xml/stream/OutputStack;.pop:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L4548f2.  return @kind void;
  #L4548f4.  v2:= new `org.simpleframework.xml.stream.NodeException`;
  #L4548f8.  v0:= "Cannot remove node" @kind object;
  #L4548fc.  call `<init>`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L454902.  throw v2;
}
procedure `org.simpleframework.xml.stream.OutputNode` `writeElement`(`org.simpleframework.xml.stream.NodeWriter` v2 @kind this, `org.simpleframework.xml.stream.OutputNode` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeElement:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4546c4.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L4546c8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L4546ce.  v0:= temp;
  #L4546d0.  if v0 == 0 then goto L4546de;
  #L4546d4.  call temp:= `f`(v2, v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.f:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind direct;
  #L4546da.  v3:= temp @kind object;
  #L4546dc.  return v3 @kind object;
  #L4546de.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L4546e2.  call temp:= `contains`(v0, v3) @signature `Ljava/util/ArrayList;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L4546e8.  v0:= temp;
  #L4546ea.  if v0 == 0 then goto L454750;
  #L4546ee.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L4546f2.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L4546f8.  v0:= temp @kind object;
  #L4546fa.  call temp:= `isCommitted`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.isCommitted:(Lorg/simpleframework/xml/stream/OutputNode;)Z` @kind virtual;
  #L454700.  v1:= temp;
  #L454702.  if v1 != 0 then goto L45470c;
  #L454706.  call `g`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.g:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L45470c.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L454710.  call temp:= `top`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.top:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L454716.  v0:= temp @kind object;
  #L454718.  if v0 == v3 then goto L454730;
  #L45471c.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L454720.  call temp:= `pop`(v0) @signature `Lorg/simpleframework/xml/stream/OutputStack;.pop:()Lorg/simpleframework/xml/stream/OutputNode;` @kind virtual;
  #L454726.  v0:= temp @kind object;
  #L454728.  call `c`(v2, v0) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.c:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L45472e.  goto L45470c;
  #L454730.  v0:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L454734.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L45473a.  v0:= temp;
  #L45473c.  if v0 != 0 then goto L454746;
  #L454740.  call `h`(v2, v3) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.h:(Lorg/simpleframework/xml/stream/OutputNode;)V` @kind direct;
  #L454746.  call temp:= `f`(v2, v3, v4) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.f:(Lorg/simpleframework/xml/stream/OutputNode;Ljava/lang/String;)Lorg/simpleframework/xml/stream/OutputNode;` @kind direct;
  #L45474c.  v3:= temp @kind object;
  #L45474e.  return v3 @kind object;
  #L454750.  v3:= 0I;
  #L454752.  return v3 @kind object;
}
procedure `org.simpleframework.xml.stream.OutputNode` `writeRoot`(`org.simpleframework.xml.stream.NodeWriter` v2 @kind this) @signature `Lorg/simpleframework/xml/stream/NodeWriter;.writeRoot:()Lorg/simpleframework/xml/stream/OutputNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L454764.  v0:= new `org.simpleframework.xml.stream.OutputDocument`;
  #L454768.  v1:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L45476c.  call `<init>`(v0, v2, v1) @signature `Lorg/simpleframework/xml/stream/OutputDocument;.<init>:(Lorg/simpleframework/xml/stream/NodeWriter;Lorg/simpleframework/xml/stream/OutputStack;)V` @kind direct;
  #L454772.  v1:= v2.`org.simpleframework.xml.stream.NodeWriter.a` @type ^`org.simpleframework.xml.stream.OutputStack` @kind object;
  #L454776.  call temp:= `isEmpty`(v1) @signature `Ljava/util/ArrayList;.isEmpty:()Z` @kind virtual;
  #L45477c.  v1:= temp;
  #L45477e.  if v1 == 0 then goto L45478c;
  #L454782.  v1:= v2.`org.simpleframework.xml.stream.NodeWriter.b` @type ^`org.simpleframework.xml.stream.Formatter` @kind object;
  #L454786.  call `writeProlog`(v1) @signature `Lorg/simpleframework/xml/stream/Formatter;.writeProlog:()V` @kind virtual;
  #L45478c.  return v0 @kind object;
}
