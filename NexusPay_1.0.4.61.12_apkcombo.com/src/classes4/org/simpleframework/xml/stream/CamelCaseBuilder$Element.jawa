record `org.simpleframework.xml.stream.CamelCaseBuilder$Element` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.stream.CamelCaseBuilder$Attribute` @kind class {
  `boolean` `org.simpleframework.xml.stream.CamelCaseBuilder$Element.b` @AccessFlag PRIVATE;
  `org.simpleframework.xml.stream.CamelCaseBuilder` `org.simpleframework.xml.stream.CamelCaseBuilder$Element.this$0` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.CamelCaseBuilder$Element` v1 @kind this, `org.simpleframework.xml.stream.CamelCaseBuilder` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Element;.<init>:(Lorg/simpleframework/xml/stream/CamelCaseBuilder;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L452244.  v1.`org.simpleframework.xml.stream.CamelCaseBuilder$Element.this$0` @type ^`org.simpleframework.xml.stream.CamelCaseBuilder` := v2 @kind object;
  #L452248.  v0:= 0I;
  #L45224a.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Attribute;.<init>:(Lorg/simpleframework/xml/stream/CamelCaseBuilder;Ljava/lang/String;Lorg/simpleframework/xml/stream/CamelCaseBuilder$1;)V` @kind direct;
  #L452250.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.stream.CamelCaseBuilder$Element` v0 @kind this, `org.simpleframework.xml.stream.CamelCaseBuilder` v1 @kind object, `java.lang.String` v2 @kind object, `org.simpleframework.xml.stream.CamelCaseBuilder$1` v3 @kind object) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Element;.<init>:(Lorg/simpleframework/xml/stream/CamelCaseBuilder;Ljava/lang/String;Lorg/simpleframework/xml/stream/CamelCaseBuilder$1;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L452264.  call `<init>`(v0, v1, v2) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Element;.<init>:(Lorg/simpleframework/xml/stream/CamelCaseBuilder;Ljava/lang/String;)V` @kind direct;
  #L45226a.  return @kind void;
}
procedure `void` `parse`(`org.simpleframework.xml.stream.CamelCaseBuilder$Element` v0 @kind this, `char`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lorg/simpleframework/xml/stream/CamelCaseBuilder$Element;.parse:([CII)V` @AccessFlag PUBLIC {
    temp;

  #L45227c.  v3:= v0.`org.simpleframework.xml.stream.CamelCaseBuilder$Element.this$0` @type ^`org.simpleframework.xml.stream.CamelCaseBuilder` @kind object;
  #L452280.  v3:= v3.`org.simpleframework.xml.stream.CamelCaseBuilder.element` @type ^`boolean` @kind boolean;
  #L452284.  if v3 != 0 then goto L452290;
  #L452288.  v3:= v0.`org.simpleframework.xml.stream.CamelCaseBuilder$Element.b` @type ^`boolean` @kind boolean;
  #L45228c.  if v3 == 0 then goto L4522a0;
  #L452290.  v3:= v1[v2] @kind char;
  #L452294.  call temp:= `toUpper`(v0, v3) @signature `Lorg/simpleframework/xml/stream/Splitter;.toUpper:(C)C` @kind virtual;
  #L45229a.  v3:= temp;
  #L45229c.  v1[v2]:= v3 @kind char;
  #L4522a0.  v1:= 1I;
  #L4522a2.  v0.`org.simpleframework.xml.stream.CamelCaseBuilder$Element.b` @type ^`boolean` := v1 @kind boolean;
  #L4522a6.  return @kind void;
}
