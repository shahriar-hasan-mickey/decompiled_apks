record `org.simpleframework.xml.transform.DateType` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `org.simpleframework.xml.transform.DateType$DateFormat` `org.simpleframework.xml.transform.DateType.format` @AccessFlag PRIVATE;
}
global `org.simpleframework.xml.transform.DateType`[] `@@org.simpleframework.xml.transform.DateType.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `org.simpleframework.xml.transform.DateType` `@@org.simpleframework.xml.transform.DateType.FULL` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.simpleframework.xml.transform.DateType` `@@org.simpleframework.xml.transform.DateType.LONG` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.simpleframework.xml.transform.DateType` `@@org.simpleframework.xml.transform.DateType.NORMAL` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `org.simpleframework.xml.transform.DateType` `@@org.simpleframework.xml.transform.DateType.SHORT` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lorg/simpleframework/xml/transform/DateType;.<clinit>:()V` @AccessFlag PUBLIC_STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L457394.  v0:= new `org.simpleframework.xml.transform.DateType`;
  #L457398.  v1:= "FULL" @kind object;
  #L45739c.  v2:= 0I;
  #L45739e.  v3:= "yyyy-MM-dd HH:mm:ss.S z" @kind object;
  #L4573a2.  call `<init>`(v0, v1, v2, v3) @signature `Lorg/simpleframework/xml/transform/DateType;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L4573a8.  `@@org.simpleframework.xml.transform.DateType.FULL` @type ^`org.simpleframework.xml.transform.DateType` := v0 @kind object;
  #L4573ac.  v1:= new `org.simpleframework.xml.transform.DateType`;
  #L4573b0.  v3:= "LONG" @kind object;
  #L4573b4.  v4:= 1I;
  #L4573b6.  v5:= "yyyy-MM-dd HH:mm:ss z" @kind object;
  #L4573ba.  call `<init>`(v1, v3, v4, v5) @signature `Lorg/simpleframework/xml/transform/DateType;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L4573c0.  `@@org.simpleframework.xml.transform.DateType.LONG` @type ^`org.simpleframework.xml.transform.DateType` := v1 @kind object;
  #L4573c4.  v3:= new `org.simpleframework.xml.transform.DateType`;
  #L4573c8.  v5:= "NORMAL" @kind object;
  #L4573cc.  v6:= 2I;
  #L4573ce.  v7:= "yyyy-MM-dd z" @kind object;
  #L4573d2.  call `<init>`(v3, v5, v6, v7) @signature `Lorg/simpleframework/xml/transform/DateType;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L4573d8.  `@@org.simpleframework.xml.transform.DateType.NORMAL` @type ^`org.simpleframework.xml.transform.DateType` := v3 @kind object;
  #L4573dc.  v5:= new `org.simpleframework.xml.transform.DateType`;
  #L4573e0.  v7:= "SHORT" @kind object;
  #L4573e4.  v8:= 3I;
  #L4573e6.  v9:= "yyyy-MM-dd" @kind object;
  #L4573ea.  call `<init>`(v5, v7, v8, v9) @signature `Lorg/simpleframework/xml/transform/DateType;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L4573f0.  `@@org.simpleframework.xml.transform.DateType.SHORT` @type ^`org.simpleframework.xml.transform.DateType` := v5 @kind object;
  #L4573f4.  v7:= 4I;
  #L4573f6.  v7:= new `org.simpleframework.xml.transform.DateType`[v7];
  #L4573fa.  v7[v2]:= v0 @kind object;
  #L4573fe.  v7[v4]:= v1 @kind object;
  #L457402.  v7[v6]:= v3 @kind object;
  #L457406.  v7[v8]:= v5 @kind object;
  #L45740a.  `@@org.simpleframework.xml.transform.DateType.$VALUES` @type ^`org.simpleframework.xml.transform.DateType`[] := v7 @kind object;
  #L45740e.  return @kind void;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.DateType` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/DateType;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L457420.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L457426.  v1:= new `org.simpleframework.xml.transform.DateType$DateFormat`;
  #L45742a.  call `<init>`(v1, v3) @signature `Lorg/simpleframework/xml/transform/DateType$DateFormat;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L457430.  v0.`org.simpleframework.xml.transform.DateType.format` @type ^`org.simpleframework.xml.transform.DateType$DateFormat` := v1 @kind object;
  #L457434.  return @kind void;
}
procedure `java.util.Date` `getDate`(`java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/DateType;.getDate:(Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4572c0.  call temp:= `getType`(v1) @signature `Lorg/simpleframework/xml/transform/DateType;.getType:(Ljava/lang/String;)Lorg/simpleframework/xml/transform/DateType;` @kind static;
  #L4572c6.  v0:= temp @kind object;
  #L4572c8.  call temp:= `getFormat`(v0) @signature `Lorg/simpleframework/xml/transform/DateType;.getFormat:()Lorg/simpleframework/xml/transform/DateType$DateFormat;` @kind direct;
  #L4572ce.  v0:= temp @kind object;
  #L4572d0.  call temp:= `getDate`(v0, v1) @signature `Lorg/simpleframework/xml/transform/DateType$DateFormat;.getDate:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L4572d6.  v1:= temp @kind object;
  #L4572d8.  return v1 @kind object;
}
procedure `org.simpleframework.xml.transform.DateType$DateFormat` `getFormat`(`org.simpleframework.xml.transform.DateType` v1 @kind this) @signature `Lorg/simpleframework/xml/transform/DateType;.getFormat:()Lorg/simpleframework/xml/transform/DateType$DateFormat;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L457358.  v0:= v1.`org.simpleframework.xml.transform.DateType.format` @type ^`org.simpleframework.xml.transform.DateType$DateFormat` @kind object;
  #L45735c.  return v0 @kind object;
}
procedure `java.lang.String` `getText`(`java.util.Date` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/DateType;.getText:(Ljava/util/Date;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L457298.  v0:= `@@org.simpleframework.xml.transform.DateType.FULL` @type ^`org.simpleframework.xml.transform.DateType` @kind object;
  #L45729c.  call temp:= `getFormat`(v0) @signature `Lorg/simpleframework/xml/transform/DateType;.getFormat:()Lorg/simpleframework/xml/transform/DateType$DateFormat;` @kind direct;
  #L4572a2.  v0:= temp @kind object;
  #L4572a4.  call temp:= `getText`(v0, v1) @signature `Lorg/simpleframework/xml/transform/DateType$DateFormat;.getText:(Ljava/util/Date;)Ljava/lang/String;` @kind virtual;
  #L4572aa.  v1:= temp @kind object;
  #L4572ac.  return v1 @kind object;
}
procedure `org.simpleframework.xml.transform.DateType` `getType`(`java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/DateType;.getType:(Ljava/lang/String;)Lorg/simpleframework/xml/transform/DateType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4572ec.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4572f2.  v1:= temp;
  #L4572f4.  v0:= 23I;
  #L4572f8.  if v1 <= v0 then goto L457302;
  #L4572fc.  v1:= `@@org.simpleframework.xml.transform.DateType.FULL` @type ^`org.simpleframework.xml.transform.DateType` @kind object;
  #L457300.  return v1 @kind object;
  #L457302.  v0:= 20I;
  #L457306.  if v1 <= v0 then goto L457310;
  #L45730a.  v1:= `@@org.simpleframework.xml.transform.DateType.LONG` @type ^`org.simpleframework.xml.transform.DateType` @kind object;
  #L45730e.  return v1 @kind object;
  #L457310.  v0:= 11I;
  #L457314.  if v1 <= v0 then goto L45731e;
  #L457318.  v1:= `@@org.simpleframework.xml.transform.DateType.NORMAL` @type ^`org.simpleframework.xml.transform.DateType` @kind object;
  #L45731c.  return v1 @kind object;
  #L45731e.  v1:= `@@org.simpleframework.xml.transform.DateType.SHORT` @type ^`org.simpleframework.xml.transform.DateType` @kind object;
  #L457322.  return v1 @kind object;
}
procedure `org.simpleframework.xml.transform.DateType` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/DateType;.valueOf:(Ljava/lang/String;)Lorg/simpleframework/xml/transform/DateType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L457334.  v0:= constclass @type ^`org.simpleframework.xml.transform.DateType` @kind object;
  #L457338.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L45733e.  v1:= temp @kind object;
  #L457340.  v1:= (`org.simpleframework.xml.transform.DateType`) v1 @kind object;
  #L457344.  return v1 @kind object;
}
procedure `org.simpleframework.xml.transform.DateType`[] `values`() @signature `Lorg/simpleframework/xml/transform/DateType;.values:()[Lorg/simpleframework/xml/transform/DateType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L457370.  v0:= `@@org.simpleframework.xml.transform.DateType.$VALUES` @type ^`org.simpleframework.xml.transform.DateType`[] @kind object;
  #L457374.  call temp:= `clone`(v0) @signature `[Lorg/simpleframework/xml/transform/DateType;.clone:()Ljava/lang/Object;` @kind virtual;
  #L45737a.  v0:= temp @kind object;
  #L45737c.  v0:= (`org.simpleframework.xml.transform.DateType`[]) v0 @kind object;
  #L457380.  return v0 @kind object;
}
