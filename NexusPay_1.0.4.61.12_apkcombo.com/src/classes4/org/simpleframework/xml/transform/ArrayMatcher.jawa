record `org.simpleframework.xml.transform.ArrayMatcher` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Matcher` @kind interface {
  `org.simpleframework.xml.transform.Matcher` `org.simpleframework.xml.transform.ArrayMatcher.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.ArrayMatcher` v0 @kind this, `org.simpleframework.xml.transform.Matcher` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/ArrayMatcher;.<init>:(Lorg/simpleframework/xml/transform/Matcher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4567f8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4567fe.  v0.`org.simpleframework.xml.transform.ArrayMatcher.a` @type ^`org.simpleframework.xml.transform.Matcher` := v1 @kind object;
  #L456802.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `a`(`org.simpleframework.xml.transform.ArrayMatcher` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/ArrayMatcher;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4567c8.  v0:= v2.`org.simpleframework.xml.transform.ArrayMatcher.a` @type ^`org.simpleframework.xml.transform.Matcher` @kind object;
  #L4567cc.  call temp:= `match`(v0, v3) @signature `Lorg/simpleframework/xml/transform/Matcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind interface;
  #L4567d2.  v0:= temp @kind object;
  #L4567d4.  if v0 != 0 then goto L4567dc;
  #L4567d8.  v3:= 0I;
  #L4567da.  return v3 @kind object;
  #L4567dc.  v1:= new `org.simpleframework.xml.transform.ArrayTransform`;
  #L4567e0.  call `<init>`(v1, v0, v3) @signature `Lorg/simpleframework/xml/transform/ArrayTransform;.<init>:(Lorg/simpleframework/xml/transform/Transform;Ljava/lang/Class;)V` @kind direct;
  #L4567e6.  return v1 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `match`(`org.simpleframework.xml.transform.ArrayMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/ArrayMatcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456768.  call temp:= `getComponentType`(v2) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L45676e.  v2:= temp @kind object;
  #L456770.  v0:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L456774.  if v2 != v0 then goto L456784;
  #L456778.  v0:= new `org.simpleframework.xml.transform.CharacterArrayTransform`;
  #L45677c.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L456782.  return v0 @kind object;
  #L456784.  v0:= constclass @type ^`java.lang.Character` @kind object;
  #L456788.  if v2 != v0 then goto L456798;
  #L45678c.  v0:= new `org.simpleframework.xml.transform.CharacterArrayTransform`;
  #L456790.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L456796.  return v0 @kind object;
  #L456798.  v0:= constclass @type ^`java.lang.String` @kind object;
  #L45679c.  if v2 != v0 then goto L4567ac;
  #L4567a0.  v2:= new `org.simpleframework.xml.transform.StringArrayTransform`;
  #L4567a4.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/StringArrayTransform;.<init>:()V` @kind direct;
  #L4567aa.  return v2 @kind object;
  #L4567ac.  call temp:= `a`(v1, v2) @signature `Lorg/simpleframework/xml/transform/ArrayMatcher;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L4567b2.  v2:= temp @kind object;
  #L4567b4.  return v2 @kind object;
}
