record `org.simpleframework.xml.transform.CharacterTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.CharacterTransform` v0 @kind this) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L456e3c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L456e42.  return @kind void;
}
procedure `java.lang.Character` `read`(`org.simpleframework.xml.transform.CharacterTransform` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.read:(Ljava/lang/String;)Ljava/lang/Character;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L456d98.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L456d9e.  v0:= temp;
  #L456da0.  v1:= 0I;
  #L456da2.  v2:= 1I;
  #L456da4.  if v0 != v2 then goto L456dba;
  #L456da8.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L456dae.  v4:= temp;
  #L456db0.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L456db6.  v4:= temp @kind object;
  #L456db8.  return v4 @kind object;
  #L456dba.  v0:= new `org.simpleframework.xml.transform.InvalidFormatException`;
  #L456dbe.  v2:= new `java.lang.Object`[v2];
  #L456dc2.  v2[v1]:= v4 @kind object;
  #L456dc6.  v4:= "Cannot convert '%s' to a character" @kind object;
  #L456dca.  call `<init>`(v0, v4, v2) @signature `Lorg/simpleframework/xml/transform/InvalidFormatException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L456dd0.  throw v0;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.CharacterTransform` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L456de4.  call temp:= `read`(v0, v1) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.read:(Ljava/lang/String;)Ljava/lang/Character;` @kind virtual;
  #L456dea.  v1:= temp @kind object;
  #L456dec.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.CharacterTransform` v0 @kind this, `java.lang.Character` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.write:(Ljava/lang/Character;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L456e00.  call temp:= `toString`(v1) @signature `Ljava/lang/Character;.toString:()Ljava/lang/String;` @kind virtual;
  #L456e06.  v1:= temp @kind object;
  #L456e08.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.CharacterTransform` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L456e1c.  v1:= (`java.lang.Character`) v1 @kind object;
  #L456e20.  call temp:= `write`(v0, v1) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.write:(Ljava/lang/Character;)Ljava/lang/String;` @kind virtual;
  #L456e26.  v1:= temp @kind object;
  #L456e28.  return v1 @kind object;
}
