record `org.simpleframework.xml.transform.PrimitiveMatcher` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Matcher` @kind interface {
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.PrimitiveMatcher` v0 @kind this) @signature `Lorg/simpleframework/xml/transform/PrimitiveMatcher;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L457f2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L457f32.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `match`(`org.simpleframework.xml.transform.PrimitiveMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PrimitiveMatcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L457e78.  v0:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L457e7c.  if v2 != v0 then goto L457e8c;
  #L457e80.  v2:= new `org.simpleframework.xml.transform.IntegerTransform`;
  #L457e84.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/IntegerTransform;.<init>:()V` @kind direct;
  #L457e8a.  return v2 @kind object;
  #L457e8c.  v0:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L457e90.  if v2 != v0 then goto L457ea0;
  #L457e94.  v2:= new `org.simpleframework.xml.transform.BooleanTransform`;
  #L457e98.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/BooleanTransform;.<init>:()V` @kind direct;
  #L457e9e.  return v2 @kind object;
  #L457ea0.  v0:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L457ea4.  if v2 != v0 then goto L457eb4;
  #L457ea8.  v2:= new `org.simpleframework.xml.transform.LongTransform`;
  #L457eac.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/LongTransform;.<init>:()V` @kind direct;
  #L457eb2.  return v2 @kind object;
  #L457eb4.  v0:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L457eb8.  if v2 != v0 then goto L457ec8;
  #L457ebc.  v2:= new `org.simpleframework.xml.transform.DoubleTransform`;
  #L457ec0.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/DoubleTransform;.<init>:()V` @kind direct;
  #L457ec6.  return v2 @kind object;
  #L457ec8.  v0:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L457ecc.  if v2 != v0 then goto L457edc;
  #L457ed0.  v2:= new `org.simpleframework.xml.transform.FloatTransform`;
  #L457ed4.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/FloatTransform;.<init>:()V` @kind direct;
  #L457eda.  return v2 @kind object;
  #L457edc.  v0:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L457ee0.  if v2 != v0 then goto L457ef0;
  #L457ee4.  v2:= new `org.simpleframework.xml.transform.ShortTransform`;
  #L457ee8.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/ShortTransform;.<init>:()V` @kind direct;
  #L457eee.  return v2 @kind object;
  #L457ef0.  v0:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L457ef4.  if v2 != v0 then goto L457f04;
  #L457ef8.  v2:= new `org.simpleframework.xml.transform.ByteTransform`;
  #L457efc.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/ByteTransform;.<init>:()V` @kind direct;
  #L457f02.  return v2 @kind object;
  #L457f04.  v0:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L457f08.  if v2 != v0 then goto L457f18;
  #L457f0c.  v2:= new `org.simpleframework.xml.transform.CharacterTransform`;
  #L457f10.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.<init>:()V` @kind direct;
  #L457f16.  return v2 @kind object;
  #L457f18.  v2:= 0I;
  #L457f1a.  return v2 @kind object;
}
