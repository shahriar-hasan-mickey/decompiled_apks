record `org.simpleframework.xml.transform.DefaultMatcher` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Matcher` @kind interface {
  `org.simpleframework.xml.transform.Matcher` `org.simpleframework.xml.transform.DefaultMatcher.a` @AccessFlag PRIVATE;
  `org.simpleframework.xml.transform.Matcher` `org.simpleframework.xml.transform.DefaultMatcher.b` @AccessFlag PRIVATE;
  `org.simpleframework.xml.transform.Matcher` `org.simpleframework.xml.transform.DefaultMatcher.c` @AccessFlag PRIVATE;
  `org.simpleframework.xml.transform.Matcher` `org.simpleframework.xml.transform.DefaultMatcher.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.DefaultMatcher` v1 @kind this, `org.simpleframework.xml.transform.Matcher` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/DefaultMatcher;.<init>:(Lorg/simpleframework/xml/transform/Matcher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4574c8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4574ce.  v0:= new `org.simpleframework.xml.transform.PrimitiveMatcher`;
  #L4574d2.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/transform/PrimitiveMatcher;.<init>:()V` @kind direct;
  #L4574d8.  v1.`org.simpleframework.xml.transform.DefaultMatcher.a` @type ^`org.simpleframework.xml.transform.Matcher` := v0 @kind object;
  #L4574dc.  v0:= new `org.simpleframework.xml.transform.PackageMatcher`;
  #L4574e0.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.<init>:()V` @kind direct;
  #L4574e6.  v1.`org.simpleframework.xml.transform.DefaultMatcher.c` @type ^`org.simpleframework.xml.transform.Matcher` := v0 @kind object;
  #L4574ea.  v0:= new `org.simpleframework.xml.transform.ArrayMatcher`;
  #L4574ee.  call `<init>`(v0, v1) @signature `Lorg/simpleframework/xml/transform/ArrayMatcher;.<init>:(Lorg/simpleframework/xml/transform/Matcher;)V` @kind direct;
  #L4574f4.  v1.`org.simpleframework.xml.transform.DefaultMatcher.d` @type ^`org.simpleframework.xml.transform.Matcher` := v0 @kind object;
  #L4574f8.  v1.`org.simpleframework.xml.transform.DefaultMatcher.b` @type ^`org.simpleframework.xml.transform.Matcher` := v2 @kind object;
  #L4574fc.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `a`(`org.simpleframework.xml.transform.DefaultMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/DefaultMatcher;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L457474.  call temp:= `isArray`(v2) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L45747a.  v0:= temp;
  #L45747c.  if v0 == 0 then goto L45748e;
  #L457480.  v0:= v1.`org.simpleframework.xml.transform.DefaultMatcher.d` @type ^`org.simpleframework.xml.transform.Matcher` @kind object;
  #L457484.  call temp:= `match`(v0, v2) @signature `Lorg/simpleframework/xml/transform/Matcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind interface;
  #L45748a.  v2:= temp @kind object;
  #L45748c.  return v2 @kind object;
  #L45748e.  call temp:= `isPrimitive`(v2) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L457494.  v0:= temp;
  #L457496.  if v0 == 0 then goto L4574a8;
  #L45749a.  v0:= v1.`org.simpleframework.xml.transform.DefaultMatcher.a` @type ^`org.simpleframework.xml.transform.Matcher` @kind object;
  #L45749e.  call temp:= `match`(v0, v2) @signature `Lorg/simpleframework/xml/transform/Matcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind interface;
  #L4574a4.  v2:= temp @kind object;
  #L4574a6.  return v2 @kind object;
  #L4574a8.  v0:= v1.`org.simpleframework.xml.transform.DefaultMatcher.c` @type ^`org.simpleframework.xml.transform.Matcher` @kind object;
  #L4574ac.  call temp:= `match`(v0, v2) @signature `Lorg/simpleframework/xml/transform/Matcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind interface;
  #L4574b2.  v2:= temp @kind object;
  #L4574b4.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `match`(`org.simpleframework.xml.transform.DefaultMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/DefaultMatcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L457448.  v0:= v1.`org.simpleframework.xml.transform.DefaultMatcher.b` @type ^`org.simpleframework.xml.transform.Matcher` @kind object;
  #L45744c.  call temp:= `match`(v0, v2) @signature `Lorg/simpleframework/xml/transform/Matcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind interface;
  #L457452.  v0:= temp @kind object;
  #L457454.  if v0 == 0 then goto L45745a;
  #L457458.  return v0 @kind object;
  #L45745a.  call temp:= `a`(v1, v2) @signature `Lorg/simpleframework/xml/transform/DefaultMatcher;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L457460.  v2:= temp @kind object;
  #L457462.  return v2 @kind object;
}
