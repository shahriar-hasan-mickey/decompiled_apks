record `org.simpleframework.xml.transform.RegistryMatcher` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Matcher` @kind interface {
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.transform.RegistryMatcher.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.transform.RegistryMatcher.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L457fd4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L457fda.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L457fde.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L457fe4.  v1.`org.simpleframework.xml.transform.RegistryMatcher.a` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L457fe8.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L457fec.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L457ff2.  v1.`org.simpleframework.xml.transform.RegistryMatcher.b` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L457ff6.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `a`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L457f44.  v0:= v1.`org.simpleframework.xml.transform.RegistryMatcher.b` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L457f48.  call temp:= `fetch`(v0, v2) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L457f4e.  v0:= temp @kind object;
  #L457f50.  v0:= (`java.lang.Class`) v0 @kind object;
  #L457f54.  if v0 == 0 then goto L457f62;
  #L457f58.  call temp:= `b`(v1, v2, v0) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.b:(Ljava/lang/Class;Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L457f5e.  v2:= temp @kind object;
  #L457f60.  return v2 @kind object;
  #L457f62.  v2:= 0I;
  #L457f64.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `b`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.b:(Ljava/lang/Class;Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L457f78.  call temp:= `newInstance`(v3) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L457f7e.  v3:= temp @kind object;
  #L457f80.  v3:= (`org.simpleframework.xml.transform.Transform`) v3 @kind object;
  #L457f84.  if v3 == 0 then goto L457f92;
  #L457f88.  v0:= v1.`org.simpleframework.xml.transform.RegistryMatcher.a` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L457f8c.  call `cache`(v0, v2, v3) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L457f92.  return v3 @kind object;
}
procedure `void` `bind`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.bind:(Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458008.  v0:= v1.`org.simpleframework.xml.transform.RegistryMatcher.b` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L45800c.  call `cache`(v0, v2, v3) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L458012.  return @kind void;
}
procedure `void` `bind`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this, `java.lang.Class` v2 @kind object, `org.simpleframework.xml.transform.Transform` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.bind:(Ljava/lang/Class;Lorg/simpleframework/xml/transform/Transform;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458024.  v0:= v1.`org.simpleframework.xml.transform.RegistryMatcher.a` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L458028.  call `cache`(v0, v2, v3) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L45802e.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `match`(`org.simpleframework.xml.transform.RegistryMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L457fa4.  v0:= v1.`org.simpleframework.xml.transform.RegistryMatcher.a` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L457fa8.  call temp:= `fetch`(v0, v2) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L457fae.  v0:= temp @kind object;
  #L457fb0.  v0:= (`org.simpleframework.xml.transform.Transform`) v0 @kind object;
  #L457fb4.  if v0 != 0 then goto L457fc2;
  #L457fb8.  call temp:= `a`(v1, v2) @signature `Lorg/simpleframework/xml/transform/RegistryMatcher;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L457fbe.  v2:= temp @kind object;
  #L457fc0.  return v2 @kind object;
  #L457fc2.  return v0 @kind object;
}
