record `org.simpleframework.xml.transform.DateTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
  `org.simpleframework.xml.transform.DateFactory` `org.simpleframework.xml.transform.DateTransform.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.DateTransform` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/DateTransform;.<init>:(Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4571e0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4571e6.  v0:= new `org.simpleframework.xml.transform.DateFactory`;
  #L4571ea.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DateFactory;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L4571f0.  v1.`org.simpleframework.xml.transform.DateTransform.a` @type ^`org.simpleframework.xml.transform.DateFactory` := v0 @kind object;
  #L4571f4.  return @kind void;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.DateTransform` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/DateTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L45711c.  call temp:= `read`(v0, v1) @signature `Lorg/simpleframework/xml/transform/DateTransform;.read:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L457122.  v1:= temp @kind object;
  #L457124.  return v1 @kind object;
}
procedure `java.util.Date` `read`(`org.simpleframework.xml.transform.DateTransform` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/DateTransform;.read:(Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L457188.  @monitorenter v3
  #L45718a.  call temp:= `getDate`(v4) @signature `Lorg/simpleframework/xml/transform/DateType;.getDate:(Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L457190.  v4:= temp @kind object;
  #L457192.  call temp:= `getTime`(v4) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L457198.  v0:= temp @kind wide;
  #L45719a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4571a0.  v4:= temp @kind object;
  #L4571a2.  v0:= v3.`org.simpleframework.xml.transform.DateTransform.a` @type ^`org.simpleframework.xml.transform.DateFactory` @kind object;
  #L4571a6.  v1:= 1I;
  #L4571a8.  v1:= new `java.lang.Object`[v1];
  #L4571ac.  v2:= 0I;
  #L4571ae.  v1[v2]:= v4 @kind object;
  #L4571b2.  call temp:= `getInstance`(v0, v1) @signature `Lorg/simpleframework/xml/transform/DateFactory;.getInstance:([Ljava/lang/Object;)Ljava/util/Date;` @kind virtual;
  #L4571b8.  v4:= temp @kind object;
  #L4571ba.  @monitorexit v3
  #L4571bc.  return v4 @kind object;
  #L4571be.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4571c0.  @monitorexit v3
  #L4571c2.  throw v4;
  catch `java.lang.Throwable` @[L45718a..L4571ba] goto L4571be;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.DateTransform` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/DateTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L457138.  v1:= (`java.util.Date`) v1 @kind object;
  #L45713c.  call temp:= `write`(v0, v1) @signature `Lorg/simpleframework/xml/transform/DateTransform;.write:(Ljava/util/Date;)Ljava/lang/String;` @kind virtual;
  #L457142.  v1:= temp @kind object;
  #L457144.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.DateTransform` v0 @kind this, `java.util.Date` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/DateTransform;.write:(Ljava/util/Date;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L457158.  @monitorenter v0
  #L45715a.  call temp:= `getText`(v1) @signature `Lorg/simpleframework/xml/transform/DateType;.getText:(Ljava/util/Date;)Ljava/lang/String;` @kind static;
  #L457160.  v1:= temp @kind object;
  #L457162.  @monitorexit v0
  #L457164.  return v1 @kind object;
  #L457166.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L457168.  @monitorexit v0
  #L45716a.  throw v1;
  catch `java.lang.Throwable` @[L45715a..L457162] goto L457166;
}
