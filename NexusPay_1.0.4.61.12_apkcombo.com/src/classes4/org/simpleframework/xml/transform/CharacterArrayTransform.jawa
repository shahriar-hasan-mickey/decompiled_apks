record `org.simpleframework.xml.transform.CharacterArrayTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
  `java.lang.Class` `org.simpleframework.xml.transform.CharacterArrayTransform.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.CharacterArrayTransform` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.<init>:(Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L456d7c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L456d82.  v0.`org.simpleframework.xml.transform.CharacterArrayTransform.a` @type ^`java.lang.Class` := v1 @kind object;
  #L456d86.  return @kind void;
}
procedure `java.lang.Object` `a`(`org.simpleframework.xml.transform.CharacterArrayTransform` v3 @kind this, `char`[] v4 @kind object, `int` v5 ) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.a:([CI)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L456c88.  v0:= v3.`org.simpleframework.xml.transform.CharacterArrayTransform.a` @type ^`java.lang.Class` @kind object;
  #L456c8c.  call temp:= `newInstance`(v0, v5) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L456c92.  v0:= temp @kind object;
  #L456c94.  v1:= 0I;
  #L456c96.  if v1 >= v5 then goto L456cb2;
  #L456c9a.  v2:= v4[v1] @kind char;
  #L456c9e.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L456ca4.  v2:= temp @kind object;
  #L456ca6.  call `set`(v0, v1, v2) @signature `Ljava/lang/reflect/Array;.set:(Ljava/lang/Object;ILjava/lang/Object;)V` @kind static;
  #L456cac.  v1:= v1 + 1;
  #L456cb0.  goto L456c96;
  #L456cb2.  return v0 @kind object;
}
procedure `java.lang.String` `b`(`org.simpleframework.xml.transform.CharacterArrayTransform` v3 @kind this, `java.lang.Object` v4 @kind object, `int` v5 ) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.b:(Ljava/lang/Object;I)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L456d38.  v0:= new `java.lang.StringBuilder`;
  #L456d3c.  call `<init>`(v0, v5) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L456d42.  v1:= 0I;
  #L456d44.  if v1 >= v5 then goto L456d60;
  #L456d48.  call temp:= `get`(v4, v1) @signature `Ljava/lang/reflect/Array;.get:(Ljava/lang/Object;I)Ljava/lang/Object;` @kind static;
  #L456d4e.  v2:= temp @kind object;
  #L456d50.  if v2 == 0 then goto L456d5a;
  #L456d54.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L456d5a.  v1:= v1 + 1;
  #L456d5e.  goto L456d44;
  #L456d60.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L456d66.  v4:= temp @kind object;
  #L456d68.  return v4 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.CharacterArrayTransform` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L456cc4.  call temp:= `toCharArray`(v4) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L456cca.  v4:= temp @kind object;
  #L456ccc.  v0:= length @variable v4;
  #L456cce.  v1:= v3.`org.simpleframework.xml.transform.CharacterArrayTransform.a` @type ^`java.lang.Class` @kind object;
  #L456cd2.  v2:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L456cd6.  if v1 != v2 then goto L456cdc;
  #L456cda.  return v4 @kind object;
  #L456cdc.  call temp:= `a`(v3, v4, v0) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.a:([CI)Ljava/lang/Object;` @kind direct;
  #L456ce2.  v4:= temp @kind object;
  #L456ce4.  return v4 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.CharacterArrayTransform` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L456cf8.  call temp:= `getLength`(v4) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L456cfe.  v0:= temp;
  #L456d00.  v1:= v3.`org.simpleframework.xml.transform.CharacterArrayTransform.a` @type ^`java.lang.Class` @kind object;
  #L456d04.  v2:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L456d08.  if v1 != v2 then goto L456d1c;
  #L456d0c.  v4:= (`char`[]) v4 @kind object;
  #L456d10.  v0:= new `java.lang.String`;
  #L456d14.  call `<init>`(v0, v4) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L456d1a.  return v0 @kind object;
  #L456d1c.  call temp:= `b`(v3, v4, v0) @signature `Lorg/simpleframework/xml/transform/CharacterArrayTransform;.b:(Ljava/lang/Object;I)Ljava/lang/String;` @kind direct;
  #L456d22.  v4:= temp @kind object;
  #L456d24.  return v4 @kind object;
}
