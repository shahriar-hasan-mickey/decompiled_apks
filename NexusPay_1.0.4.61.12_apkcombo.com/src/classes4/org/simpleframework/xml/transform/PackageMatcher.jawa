record `org.simpleframework.xml.transform.PackageMatcher` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Matcher` @kind interface {
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.PackageMatcher` v0 @kind this) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L457e60.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L457e66.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `a`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L457bb8.  call temp:= `getSuperclass`(v2) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L457bbe.  v0:= temp @kind object;
  #L457bc0.  if v0 == 0 then goto L457bf4;
  #L457bc4.  call temp:= `isEnum`(v0) @signature `Ljava/lang/Class;.isEnum:()Z` @kind virtual;
  #L457bca.  v0:= temp;
  #L457bcc.  if v0 == 0 then goto L457bdc;
  #L457bd0.  v0:= new `org.simpleframework.xml.transform.EnumTransform`;
  #L457bd4.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/EnumTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L457bda.  return v0 @kind object;
  #L457bdc.  call temp:= `isEnum`(v2) @signature `Ljava/lang/Class;.isEnum:()Z` @kind virtual;
  #L457be2.  v0:= temp;
  #L457be4.  if v0 == 0 then goto L457bf4;
  #L457be8.  v0:= new `org.simpleframework.xml.transform.EnumTransform`;
  #L457bec.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/EnumTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L457bf2.  return v0 @kind object;
  #L457bf4.  v2:= 0I;
  #L457bf6.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `b`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L457c08.  v0:= constclass @type ^`java.io.File` @kind object;
  #L457c0c.  if v2 != v0 then goto L457c1c;
  #L457c10.  v2:= new `org.simpleframework.xml.transform.FileTransform`;
  #L457c14.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/FileTransform;.<init>:()V` @kind direct;
  #L457c1a.  return v2 @kind object;
  #L457c1c.  v2:= 0I;
  #L457c1e.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `c`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.c:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L457c30.  v0:= constclass @type ^`java.lang.Boolean` @kind object;
  #L457c34.  if v2 != v0 then goto L457c44;
  #L457c38.  v2:= new `org.simpleframework.xml.transform.BooleanTransform`;
  #L457c3c.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/BooleanTransform;.<init>:()V` @kind direct;
  #L457c42.  return v2 @kind object;
  #L457c44.  v0:= constclass @type ^`java.lang.Integer` @kind object;
  #L457c48.  if v2 != v0 then goto L457c58;
  #L457c4c.  v2:= new `org.simpleframework.xml.transform.IntegerTransform`;
  #L457c50.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/IntegerTransform;.<init>:()V` @kind direct;
  #L457c56.  return v2 @kind object;
  #L457c58.  v0:= constclass @type ^`java.lang.Long` @kind object;
  #L457c5c.  if v2 != v0 then goto L457c6c;
  #L457c60.  v2:= new `org.simpleframework.xml.transform.LongTransform`;
  #L457c64.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/LongTransform;.<init>:()V` @kind direct;
  #L457c6a.  return v2 @kind object;
  #L457c6c.  v0:= constclass @type ^`java.lang.Double` @kind object;
  #L457c70.  if v2 != v0 then goto L457c80;
  #L457c74.  v2:= new `org.simpleframework.xml.transform.DoubleTransform`;
  #L457c78.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/DoubleTransform;.<init>:()V` @kind direct;
  #L457c7e.  return v2 @kind object;
  #L457c80.  v0:= constclass @type ^`java.lang.Float` @kind object;
  #L457c84.  if v2 != v0 then goto L457c94;
  #L457c88.  v2:= new `org.simpleframework.xml.transform.FloatTransform`;
  #L457c8c.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/FloatTransform;.<init>:()V` @kind direct;
  #L457c92.  return v2 @kind object;
  #L457c94.  v0:= constclass @type ^`java.lang.Short` @kind object;
  #L457c98.  if v2 != v0 then goto L457ca8;
  #L457c9c.  v2:= new `org.simpleframework.xml.transform.ShortTransform`;
  #L457ca0.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/ShortTransform;.<init>:()V` @kind direct;
  #L457ca6.  return v2 @kind object;
  #L457ca8.  v0:= constclass @type ^`java.lang.Byte` @kind object;
  #L457cac.  if v2 != v0 then goto L457cbc;
  #L457cb0.  v2:= new `org.simpleframework.xml.transform.ByteTransform`;
  #L457cb4.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/ByteTransform;.<init>:()V` @kind direct;
  #L457cba.  return v2 @kind object;
  #L457cbc.  v0:= constclass @type ^`java.lang.Character` @kind object;
  #L457cc0.  if v2 != v0 then goto L457cd0;
  #L457cc4.  v2:= new `org.simpleframework.xml.transform.CharacterTransform`;
  #L457cc8.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/CharacterTransform;.<init>:()V` @kind direct;
  #L457cce.  return v2 @kind object;
  #L457cd0.  v0:= constclass @type ^`java.lang.String` @kind object;
  #L457cd4.  if v2 != v0 then goto L457ce4;
  #L457cd8.  v2:= new `org.simpleframework.xml.transform.StringTransform`;
  #L457cdc.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/StringTransform;.<init>:()V` @kind direct;
  #L457ce2.  return v2 @kind object;
  #L457ce4.  v0:= constclass @type ^`java.lang.Class` @kind object;
  #L457ce8.  if v2 != v0 then goto L457cf8;
  #L457cec.  v2:= new `org.simpleframework.xml.transform.ClassTransform`;
  #L457cf0.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.<init>:()V` @kind direct;
  #L457cf6.  return v2 @kind object;
  #L457cf8.  v2:= 0I;
  #L457cfa.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `d`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.d:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L457d0c.  v0:= constclass @type ^`java.math.BigDecimal` @kind object;
  #L457d10.  if v2 != v0 then goto L457d20;
  #L457d14.  v2:= new `org.simpleframework.xml.transform.BigDecimalTransform`;
  #L457d18.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/BigDecimalTransform;.<init>:()V` @kind direct;
  #L457d1e.  return v2 @kind object;
  #L457d20.  v0:= constclass @type ^`java.math.BigInteger` @kind object;
  #L457d24.  if v2 != v0 then goto L457d34;
  #L457d28.  v2:= new `org.simpleframework.xml.transform.BigIntegerTransform`;
  #L457d2c.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/BigIntegerTransform;.<init>:()V` @kind direct;
  #L457d32.  return v2 @kind object;
  #L457d34.  v2:= 0I;
  #L457d36.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `e`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.e:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L457d48.  v0:= constclass @type ^`java.sql.Time` @kind object;
  #L457d4c.  if v2 != v0 then goto L457d5c;
  #L457d50.  v0:= new `org.simpleframework.xml.transform.DateTransform`;
  #L457d54.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DateTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L457d5a.  return v0 @kind object;
  #L457d5c.  v0:= constclass @type ^`java.sql.Date` @kind object;
  #L457d60.  if v2 != v0 then goto L457d70;
  #L457d64.  v0:= new `org.simpleframework.xml.transform.DateTransform`;
  #L457d68.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DateTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L457d6e.  return v0 @kind object;
  #L457d70.  v0:= constclass @type ^`java.sql.Timestamp` @kind object;
  #L457d74.  if v2 != v0 then goto L457d84;
  #L457d78.  v0:= new `org.simpleframework.xml.transform.DateTransform`;
  #L457d7c.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DateTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L457d82.  return v0 @kind object;
  #L457d84.  v2:= 0I;
  #L457d86.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `f`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.f:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L457d98.  v0:= constclass @type ^`java.net.URL` @kind object;
  #L457d9c.  if v2 != v0 then goto L457dac;
  #L457da0.  v2:= new `org.simpleframework.xml.transform.URLTransform`;
  #L457da4.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/URLTransform;.<init>:()V` @kind direct;
  #L457daa.  return v2 @kind object;
  #L457dac.  v2:= 0I;
  #L457dae.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `g`(`org.simpleframework.xml.transform.PackageMatcher` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.g:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L457dc0.  v0:= constclass @type ^`java.util.Date` @kind object;
  #L457dc4.  if v2 != v0 then goto L457dd4;
  #L457dc8.  v0:= new `org.simpleframework.xml.transform.DateTransform`;
  #L457dcc.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DateTransform;.<init>:(Ljava/lang/Class;)V` @kind direct;
  #L457dd2.  return v0 @kind object;
  #L457dd4.  v0:= constclass @type ^`java.util.Locale` @kind object;
  #L457dd8.  if v2 != v0 then goto L457de8;
  #L457ddc.  v2:= new `org.simpleframework.xml.transform.LocaleTransform`;
  #L457de0.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/LocaleTransform;.<init>:()V` @kind direct;
  #L457de6.  return v2 @kind object;
  #L457de8.  v0:= constclass @type ^`java.util.Currency` @kind object;
  #L457dec.  if v2 != v0 then goto L457dfc;
  #L457df0.  v2:= new `org.simpleframework.xml.transform.CurrencyTransform`;
  #L457df4.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/CurrencyTransform;.<init>:()V` @kind direct;
  #L457dfa.  return v2 @kind object;
  #L457dfc.  v0:= constclass @type ^`java.util.GregorianCalendar` @kind object;
  #L457e00.  if v2 != v0 then goto L457e10;
  #L457e04.  v2:= new `org.simpleframework.xml.transform.GregorianCalendarTransform`;
  #L457e08.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/GregorianCalendarTransform;.<init>:()V` @kind direct;
  #L457e0e.  return v2 @kind object;
  #L457e10.  v0:= constclass @type ^`java.util.TimeZone` @kind object;
  #L457e14.  if v2 != v0 then goto L457e24;
  #L457e18.  v2:= new `org.simpleframework.xml.transform.TimeZoneTransform`;
  #L457e1c.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/TimeZoneTransform;.<init>:()V` @kind direct;
  #L457e22.  return v2 @kind object;
  #L457e24.  v0:= constclass @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L457e28.  if v2 != v0 then goto L457e38;
  #L457e2c.  v2:= new `org.simpleframework.xml.transform.AtomicIntegerTransform`;
  #L457e30.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/AtomicIntegerTransform;.<init>:()V` @kind direct;
  #L457e36.  return v2 @kind object;
  #L457e38.  v0:= constclass @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L457e3c.  if v2 != v0 then goto L457e4c;
  #L457e40.  v2:= new `org.simpleframework.xml.transform.AtomicLongTransform`;
  #L457e44.  call `<init>`(v2) @signature `Lorg/simpleframework/xml/transform/AtomicLongTransform;.<init>:()V` @kind direct;
  #L457e4a.  return v2 @kind object;
  #L457e4c.  v2:= 0I;
  #L457e4e.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `match`(`org.simpleframework.xml.transform.PackageMatcher` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L457af8.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L457afe.  v0:= temp @kind object;
  #L457b00.  v1:= "java.lang" @kind object;
  #L457b04.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L457b0a.  v1:= temp;
  #L457b0c.  if v1 == 0 then goto L457b1a;
  #L457b10.  call temp:= `c`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.c:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L457b16.  v3:= temp @kind object;
  #L457b18.  return v3 @kind object;
  #L457b1a.  v1:= "java.util" @kind object;
  #L457b1e.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L457b24.  v1:= temp;
  #L457b26.  if v1 == 0 then goto L457b34;
  #L457b2a.  call temp:= `g`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.g:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L457b30.  v3:= temp @kind object;
  #L457b32.  return v3 @kind object;
  #L457b34.  v1:= "java.net" @kind object;
  #L457b38.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L457b3e.  v1:= temp;
  #L457b40.  if v1 == 0 then goto L457b4e;
  #L457b44.  call temp:= `f`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.f:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L457b4a.  v3:= temp @kind object;
  #L457b4c.  return v3 @kind object;
  #L457b4e.  v1:= "java.io" @kind object;
  #L457b52.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L457b58.  v1:= temp;
  #L457b5a.  if v1 == 0 then goto L457b68;
  #L457b5e.  call temp:= `b`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L457b64.  v3:= temp @kind object;
  #L457b66.  return v3 @kind object;
  #L457b68.  v1:= "java.sql" @kind object;
  #L457b6c.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L457b72.  v1:= temp;
  #L457b74.  if v1 == 0 then goto L457b82;
  #L457b78.  call temp:= `e`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.e:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L457b7e.  v3:= temp @kind object;
  #L457b80.  return v3 @kind object;
  #L457b82.  v1:= "java.math" @kind object;
  #L457b86.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L457b8c.  v0:= temp;
  #L457b8e.  if v0 == 0 then goto L457b9c;
  #L457b92.  call temp:= `d`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.d:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L457b98.  v3:= temp @kind object;
  #L457b9a.  return v3 @kind object;
  #L457b9c.  call temp:= `a`(v2, v3) @signature `Lorg/simpleframework/xml/transform/PackageMatcher;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L457ba2.  v3:= temp @kind object;
  #L457ba4.  return v3 @kind object;
}
