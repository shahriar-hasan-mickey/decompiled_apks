record `org.simpleframework.xml.transform.ClassTransform` @kind class @AccessFlag PUBLIC extends `org.simpleframework.xml.transform.Transform` @kind interface {
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.ClassTransform` v0 @kind this) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L457008.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45700e.  return @kind void;
}
procedure `java.lang.ClassLoader` `a`(`org.simpleframework.xml.transform.ClassTransform` v1 @kind this) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.a:()Ljava/lang/ClassLoader;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L456f6c.  v0:= constclass @type ^`org.simpleframework.xml.transform.ClassTransform` @kind object;
  #L456f70.  call temp:= `getClassLoader`(v0) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L456f76.  v0:= temp @kind object;
  #L456f78.  return v0 @kind object;
}
procedure `java.lang.ClassLoader` `b`() @signature `Lorg/simpleframework/xml/transform/ClassTransform;.b:()Ljava/lang/ClassLoader;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L456f8c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L456f92.  v0:= temp @kind object;
  #L456f94.  call temp:= `getContextClassLoader`(v0) @signature `Ljava/lang/Thread;.getContextClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L456f9a.  v0:= temp @kind object;
  #L456f9c.  return v0 @kind object;
}
procedure `java.lang.Class` `c`(`org.simpleframework.xml.transform.ClassTransform` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.c:(Ljava/lang/String;)Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L456e90.  v0:= "byte" @kind object;
  #L456e94.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L456e9a.  v0:= temp;
  #L456e9c.  if v0 == 0 then goto L456ea6;
  #L456ea0.  v2:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L456ea4.  return v2 @kind object;
  #L456ea6.  v0:= "short" @kind object;
  #L456eaa.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L456eb0.  v0:= temp;
  #L456eb2.  if v0 == 0 then goto L456ebc;
  #L456eb6.  v2:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L456eba.  return v2 @kind object;
  #L456ebc.  v0:= "int" @kind object;
  #L456ec0.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L456ec6.  v0:= temp;
  #L456ec8.  if v0 == 0 then goto L456ed2;
  #L456ecc.  v2:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L456ed0.  return v2 @kind object;
  #L456ed2.  v0:= "long" @kind object;
  #L456ed6.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L456edc.  v0:= temp;
  #L456ede.  if v0 == 0 then goto L456ee8;
  #L456ee2.  v2:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L456ee6.  return v2 @kind object;
  #L456ee8.  v0:= "char" @kind object;
  #L456eec.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L456ef2.  v0:= temp;
  #L456ef4.  if v0 == 0 then goto L456efe;
  #L456ef8.  v2:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L456efc.  return v2 @kind object;
  #L456efe.  v0:= "float" @kind object;
  #L456f02.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L456f08.  v0:= temp;
  #L456f0a.  if v0 == 0 then goto L456f14;
  #L456f0e.  v2:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L456f12.  return v2 @kind object;
  #L456f14.  v0:= "double" @kind object;
  #L456f18.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L456f1e.  v0:= temp;
  #L456f20.  if v0 == 0 then goto L456f2a;
  #L456f24.  v2:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L456f28.  return v2 @kind object;
  #L456f2a.  v0:= "boolean" @kind object;
  #L456f2e.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L456f34.  v0:= temp;
  #L456f36.  if v0 == 0 then goto L456f40;
  #L456f3a.  v2:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L456f3e.  return v2 @kind object;
  #L456f40.  v0:= "void" @kind object;
  #L456f44.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L456f4a.  v2:= temp;
  #L456f4c.  if v2 == 0 then goto L456f56;
  #L456f50.  v2:= `@@java.lang.Void.TYPE` @type ^`java.lang.Class` @kind object;
  #L456f54.  return v2 @kind object;
  #L456f56.  v2:= 0I;
  #L456f58.  return v2 @kind object;
}
procedure `java.lang.Class` `read`(`org.simpleframework.xml.transform.ClassTransform` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.read:(Ljava/lang/String;)Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456e54.  call temp:= `c`(v1, v2) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.c:(Ljava/lang/String;)Ljava/lang/Class;` @kind direct;
  #L456e5a.  v0:= temp @kind object;
  #L456e5c.  if v0 != 0 then goto L456e7e;
  #L456e60.  call temp:= `b`() @signature `Lorg/simpleframework/xml/transform/ClassTransform;.b:()Ljava/lang/ClassLoader;` @kind static;
  #L456e66.  v0:= temp @kind object;
  #L456e68.  if v0 != 0 then goto L456e74;
  #L456e6c.  call temp:= `a`(v1) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.a:()Ljava/lang/ClassLoader;` @kind direct;
  #L456e72.  v0:= temp @kind object;
  #L456e74.  call temp:= `loadClass`(v0, v2) @signature `Ljava/lang/ClassLoader;.loadClass:(Ljava/lang/String;)Ljava/lang/Class;` @kind virtual;
  #L456e7a.  v2:= temp @kind object;
  #L456e7c.  return v2 @kind object;
  #L456e7e.  return v0 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.ClassTransform` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L456fb0.  call temp:= `read`(v0, v1) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.read:(Ljava/lang/String;)Ljava/lang/Class;` @kind virtual;
  #L456fb6.  v1:= temp @kind object;
  #L456fb8.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.ClassTransform` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.write:(Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L456fcc.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L456fd2.  v1:= temp @kind object;
  #L456fd4.  return v1 @kind object;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.ClassTransform` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L456fe8.  v1:= (`java.lang.Class`) v1 @kind object;
  #L456fec.  call temp:= `write`(v0, v1) @signature `Lorg/simpleframework/xml/transform/ClassTransform;.write:(Ljava/lang/Class;)Ljava/lang/String;` @kind virtual;
  #L456ff2.  v1:= temp @kind object;
  #L456ff4.  return v1 @kind object;
}
