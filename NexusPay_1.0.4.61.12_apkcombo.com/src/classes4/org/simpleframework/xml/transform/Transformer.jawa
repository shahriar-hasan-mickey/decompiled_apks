record `org.simpleframework.xml.transform.Transformer` @kind class @AccessFlag PUBLIC {
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.transform.Transformer.a` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.util.Cache` `org.simpleframework.xml.transform.Transformer.b` @AccessFlag PRIVATE_FINAL;
  `org.simpleframework.xml.transform.Matcher` `org.simpleframework.xml.transform.Transformer.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.simpleframework.xml.transform.Transformer` v1 @kind this, `org.simpleframework.xml.transform.Matcher` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.<init>:(Lorg/simpleframework/xml/transform/Matcher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4584ac.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4584b2.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L4584b6.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L4584bc.  v1.`org.simpleframework.xml.transform.Transformer.a` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L4584c0.  v0:= new `org.simpleframework.xml.util.ConcurrentCache`;
  #L4584c4.  call `<init>`(v0) @signature `Lorg/simpleframework/xml/util/ConcurrentCache;.<init>:()V` @kind direct;
  #L4584ca.  v1.`org.simpleframework.xml.transform.Transformer.b` @type ^`org.simpleframework.xml.util.Cache` := v0 @kind object;
  #L4584ce.  v0:= new `org.simpleframework.xml.transform.DefaultMatcher`;
  #L4584d2.  call `<init>`(v0, v2) @signature `Lorg/simpleframework/xml/transform/DefaultMatcher;.<init>:(Lorg/simpleframework/xml/transform/Matcher;)V` @kind direct;
  #L4584d8.  v1.`org.simpleframework.xml.transform.Transformer.c` @type ^`org.simpleframework.xml.transform.Matcher` := v0 @kind object;
  #L4584dc.  return @kind void;
}
procedure `org.simpleframework.xml.transform.Transform` `a`(`org.simpleframework.xml.transform.Transformer` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L458430.  v0:= v1.`org.simpleframework.xml.transform.Transformer.b` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L458434.  call temp:= `contains`(v0, v2) @signature `Lorg/simpleframework/xml/util/Cache;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L45843a.  v0:= temp;
  #L45843c.  if v0 != 0 then goto L458460;
  #L458440.  v0:= v1.`org.simpleframework.xml.transform.Transformer.a` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L458444.  call temp:= `fetch`(v0, v2) @signature `Lorg/simpleframework/xml/util/Cache;.fetch:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45844a.  v0:= temp @kind object;
  #L45844c.  v0:= (`org.simpleframework.xml.transform.Transform`) v0 @kind object;
  #L458450.  if v0 == 0 then goto L458456;
  #L458454.  return v0 @kind object;
  #L458456.  call temp:= `b`(v1, v2) @signature `Lorg/simpleframework/xml/transform/Transformer;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L45845c.  v2:= temp @kind object;
  #L45845e.  return v2 @kind object;
  #L458460.  v2:= 0I;
  #L458462.  return v2 @kind object;
}
procedure `org.simpleframework.xml.transform.Transform` `b`(`org.simpleframework.xml.transform.Transformer` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.b:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L458474.  v0:= v2.`org.simpleframework.xml.transform.Transformer.c` @type ^`org.simpleframework.xml.transform.Matcher` @kind object;
  #L458478.  call temp:= `match`(v0, v3) @signature `Lorg/simpleframework/xml/transform/Matcher;.match:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind interface;
  #L45847e.  v0:= temp @kind object;
  #L458480.  if v0 == 0 then goto L458490;
  #L458484.  v1:= v2.`org.simpleframework.xml.transform.Transformer.a` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L458488.  call `cache`(v1, v3, v0) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L45848e.  goto L45849a;
  #L458490.  v1:= v2.`org.simpleframework.xml.transform.Transformer.b` @type ^`org.simpleframework.xml.util.Cache` @kind object;
  #L458494.  call `cache`(v1, v3, v2) @signature `Lorg/simpleframework/xml/util/Cache;.cache:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L45849a.  return v0 @kind object;
}
procedure `java.lang.Object` `read`(`org.simpleframework.xml.transform.Transformer` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.read:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4583a8.  call temp:= `a`(v2, v4) @signature `Lorg/simpleframework/xml/transform/Transformer;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L4583ae.  v0:= temp @kind object;
  #L4583b0.  if v0 == 0 then goto L4583be;
  #L4583b4.  call temp:= `read`(v0, v3) @signature `Lorg/simpleframework/xml/transform/Transform;.read:(Ljava/lang/String;)Ljava/lang/Object;` @kind interface;
  #L4583ba.  v3:= temp @kind object;
  #L4583bc.  return v3 @kind object;
  #L4583be.  v3:= new `org.simpleframework.xml.transform.TransformException`;
  #L4583c2.  v0:= 1I;
  #L4583c4.  v0:= new `java.lang.Object`[v0];
  #L4583c8.  v1:= 0I;
  #L4583ca.  v0[v1]:= v4 @kind object;
  #L4583ce.  v4:= "Transform of %s not supported" @kind object;
  #L4583d2.  call `<init>`(v3, v4, v0) @signature `Lorg/simpleframework/xml/transform/TransformException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L4583d8.  throw v3;
}
procedure `boolean` `valid`(`org.simpleframework.xml.transform.Transformer` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.valid:(Ljava/lang/Class;)Z` @AccessFlag PUBLIC {
    temp;

  #L458384.  call temp:= `a`(v0, v1) @signature `Lorg/simpleframework/xml/transform/Transformer;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L45838a.  v1:= temp @kind object;
  #L45838c.  if v1 == 0 then goto L458394;
  #L458390.  v1:= 1I;
  #L458392.  goto L458396;
  #L458394.  v1:= 0I;
  #L458396.  return v1;
}
procedure `java.lang.String` `write`(`org.simpleframework.xml.transform.Transformer` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lorg/simpleframework/xml/transform/Transformer;.write:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4583ec.  call temp:= `a`(v2, v4) @signature `Lorg/simpleframework/xml/transform/Transformer;.a:(Ljava/lang/Class;)Lorg/simpleframework/xml/transform/Transform;` @kind direct;
  #L4583f2.  v0:= temp @kind object;
  #L4583f4.  if v0 == 0 then goto L458402;
  #L4583f8.  call temp:= `write`(v0, v3) @signature `Lorg/simpleframework/xml/transform/Transform;.write:(Ljava/lang/Object;)Ljava/lang/String;` @kind interface;
  #L4583fe.  v3:= temp @kind object;
  #L458400.  return v3 @kind object;
  #L458402.  v3:= new `org.simpleframework.xml.transform.TransformException`;
  #L458406.  v0:= 1I;
  #L458408.  v0:= new `java.lang.Object`[v0];
  #L45840c.  v1:= 0I;
  #L45840e.  v0[v1]:= v4 @kind object;
  #L458412.  v4:= "Transform of %s not supported" @kind object;
  #L458416.  call `<init>`(v3, v4, v0) @signature `Lorg/simpleframework/xml/transform/TransformException;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L45841c.  throw v3;
}
