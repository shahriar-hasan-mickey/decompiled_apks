record `org.mozilla.javascript.Interpreter$b` @kind class @AccessFlag  extends `java.lang.Cloneable` @kind interface, `java.io.Serializable` @kind interface {
  `org.mozilla.javascript.Interpreter$b` `org.mozilla.javascript.Interpreter$b.a` @AccessFlag ;
  `int` `org.mozilla.javascript.Interpreter$b.b` @AccessFlag ;
  `boolean` `org.mozilla.javascript.Interpreter$b.c` @AccessFlag ;
  `org.mozilla.javascript.h` `org.mozilla.javascript.Interpreter$b.d` @AccessFlag ;
  `org.mozilla.javascript.i` `org.mozilla.javascript.Interpreter$b.e` @AccessFlag ;
  `java.lang.Object`[] `org.mozilla.javascript.Interpreter$b.f` @AccessFlag ;
  `int`[] `org.mozilla.javascript.Interpreter$b.g` @AccessFlag ;
  `double`[] `org.mozilla.javascript.Interpreter$b.h` @AccessFlag ;
  `org.mozilla.javascript.Interpreter$b` `org.mozilla.javascript.Interpreter$b.i` @AccessFlag ;
  `int` `org.mozilla.javascript.Interpreter$b.j` @AccessFlag ;
  `int` `org.mozilla.javascript.Interpreter$b.k` @AccessFlag ;
  `org.mozilla.javascript.debug.DebugFrame` `org.mozilla.javascript.Interpreter$b.l` @AccessFlag ;
  `boolean` `org.mozilla.javascript.Interpreter$b.m` @AccessFlag ;
  `boolean` `org.mozilla.javascript.Interpreter$b.n` @AccessFlag ;
  `org.mozilla.javascript.Scriptable` `org.mozilla.javascript.Interpreter$b.o` @AccessFlag ;
  `java.lang.Object` `org.mozilla.javascript.Interpreter$b.p` @AccessFlag ;
  `double` `org.mozilla.javascript.Interpreter$b.q` @AccessFlag ;
  `int` `org.mozilla.javascript.Interpreter$b.r` @AccessFlag ;
  `int` `org.mozilla.javascript.Interpreter$b.s` @AccessFlag ;
  `int` `org.mozilla.javascript.Interpreter$b.t` @AccessFlag ;
  `org.mozilla.javascript.Scriptable` `org.mozilla.javascript.Interpreter$b.u` @AccessFlag ;
  `int` `org.mozilla.javascript.Interpreter$b.v` @AccessFlag ;
  `int` `org.mozilla.javascript.Interpreter$b.w` @AccessFlag ;
  `java.lang.Object` `org.mozilla.javascript.Interpreter$b.x` @AccessFlag ;
}
global `long` `@@org.mozilla.javascript.Interpreter$b.serialVersionUID` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`org.mozilla.javascript.Interpreter$b` v0 @kind this) @signature `Lorg/mozilla/javascript/Interpreter$b;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3fd074.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fd07a.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.Interpreter$b` v0 @kind this, `org.mozilla.javascript.Interpreter$a` v1 @kind object) @signature `Lorg/mozilla/javascript/Interpreter$b;.<init>:(Lorg/mozilla/javascript/Interpreter$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L3fd08c.  call `<init>`(v0) @signature `Lorg/mozilla/javascript/Interpreter$b;.<init>:()V` @kind direct;
  #L3fd092.  return @kind void;
}
procedure `org.mozilla.javascript.Interpreter$b` `a`(`org.mozilla.javascript.Interpreter$b` v2 @kind this) @signature `Lorg/mozilla/javascript/Interpreter$b;.a:()Lorg/mozilla/javascript/Interpreter$b;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3fcfe8.  v0:= v2.`org.mozilla.javascript.Interpreter$b.c` @type ^`boolean` @kind boolean;
  #L3fcfec.  if v0 != 0 then goto L3fcff6;
  #L3fcff0.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/Kit;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L3fcff6.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3fcffc.  v0:= temp @kind object;
  #L3fcffe.  v0:= (`org.mozilla.javascript.Interpreter$b`) v0 @kind object;
  #L3fd002.  v1:= v2.`org.mozilla.javascript.Interpreter$b.f` @type ^`java.lang.Object`[] @kind object;
  #L3fd006.  call temp:= `clone`(v1) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3fd00c.  v1:= temp @kind object;
  #L3fd00e.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L3fd012.  v0.`org.mozilla.javascript.Interpreter$b.f` @type ^`java.lang.Object`[] := v1 @kind object;
  #L3fd016.  v1:= v2.`org.mozilla.javascript.Interpreter$b.g` @type ^`int`[] @kind object;
  #L3fd01a.  call temp:= `clone`(v1) @signature `[I.clone:()Ljava/lang/Object;` @kind virtual;
  #L3fd020.  v1:= temp @kind object;
  #L3fd022.  v1:= (`int`[]) v1 @kind object;
  #L3fd026.  v0.`org.mozilla.javascript.Interpreter$b.g` @type ^`int`[] := v1 @kind object;
  #L3fd02a.  v1:= v2.`org.mozilla.javascript.Interpreter$b.h` @type ^`double`[] @kind object;
  #L3fd02e.  call temp:= `clone`(v1) @signature `[D.clone:()Ljava/lang/Object;` @kind virtual;
  #L3fd034.  v1:= temp @kind object;
  #L3fd036.  v1:= (`double`[]) v1 @kind object;
  #L3fd03a.  v0.`org.mozilla.javascript.Interpreter$b.h` @type ^`double`[] := v1 @kind object;
  #L3fd03e.  v1:= 0I;
  #L3fd040.  v0.`org.mozilla.javascript.Interpreter$b.c` @type ^`boolean` := v1 @kind boolean;
  #L3fd044.  return v0 @kind object;
  #L3fd046.  v0:= new `java.lang.IllegalStateException`;
  #L3fd04a.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L3fd050.  throw v0;
  catch `java.lang.CloneNotSupportedException` @[L3fcff6..L3fd002] goto L3fd046;
}
