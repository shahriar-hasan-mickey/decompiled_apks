record `org.mozilla.javascript.json.JsonParser` @kind class @AccessFlag PUBLIC {
  `org.mozilla.javascript.Context` `org.mozilla.javascript.json.JsonParser.a` @AccessFlag PRIVATE;
  `org.mozilla.javascript.Scriptable` `org.mozilla.javascript.json.JsonParser.b` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.json.JsonParser.c` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.json.JsonParser.d` @AccessFlag PRIVATE;
  `java.lang.String` `org.mozilla.javascript.json.JsonParser.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.json.JsonParser` v0 @kind this, `org.mozilla.javascript.Context` v1 @kind object, `org.mozilla.javascript.Scriptable` v2 @kind object) @signature `Lorg/mozilla/javascript/json/JsonParser;.<init>:(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L433928.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43392e.  v0.`org.mozilla.javascript.json.JsonParser.a` @type ^`org.mozilla.javascript.Context` := v1 @kind object;
  #L433932.  v0.`org.mozilla.javascript.json.JsonParser.b` @type ^`org.mozilla.javascript.Scriptable` := v2 @kind object;
  #L433936.  return @kind void;
}
procedure `void` `a`(`org.mozilla.javascript.json.JsonParser` v4 @kind this, `char` v5 ) @signature `Lorg/mozilla/javascript/json/JsonParser;.a:(C)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L433948.  call `b`(v4) @signature `Lorg/mozilla/javascript/json/JsonParser;.b:()V` @kind direct;
  #L43394e.  v0:= v4.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L433952.  v1:= v4.`org.mozilla.javascript.json.JsonParser.d` @type ^`int`;
  #L433956.  v2:= "Expected " @kind object;
  #L43395a.  if v0 >= v1 then goto L4339b2;
  #L43395e.  v1:= v4.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L433962.  v3:= v0 + 1;
  #L433966.  v4.`org.mozilla.javascript.json.JsonParser.c` @type ^`int` := v3;
  #L43396a.  call temp:= `charAt`(v1, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L433970.  v0:= temp;
  #L433972.  if v0 != v5 then goto L433978;
  #L433976.  return @kind void;
  #L433978.  v1:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L43397c.  v3:= new `java.lang.StringBuilder`;
  #L433980.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L433986.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43398c.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L433992.  v5:= " found " @kind object;
  #L433996.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43399c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4339a2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4339a8.  v5:= temp @kind object;
  #L4339aa.  call `<init>`(v1, v5) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4339b0.  throw v1;
  #L4339b2.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L4339b6.  v1:= new `java.lang.StringBuilder`;
  #L4339ba.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4339c0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4339c6.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4339cc.  v5:= " but reached end of stream" @kind object;
  #L4339d0.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4339d6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4339dc.  v5:= temp @kind object;
  #L4339de.  call `<init>`(v0, v5) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4339e4.  throw v0;
}
procedure `void` `b`(`org.mozilla.javascript.json.JsonParser` v2 @kind this) @signature `Lorg/mozilla/javascript/json/JsonParser;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4339f8.  v0:= v2.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L4339fc.  v1:= v2.`org.mozilla.javascript.json.JsonParser.d` @type ^`int`;
  #L433a00.  if v0 >= v1 then goto L433a40;
  #L433a04.  v1:= v2.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L433a08.  call temp:= `charAt`(v1, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L433a0e.  v0:= temp;
  #L433a10.  v1:= 9I;
  #L433a14.  if v0 == v1 then goto L433a32;
  #L433a18.  v1:= 10I;
  #L433a1c.  if v0 == v1 then goto L433a32;
  #L433a20.  v1:= 13I;
  #L433a24.  if v0 == v1 then goto L433a32;
  #L433a28.  v1:= 32I;
  #L433a2c.  if v0 == v1 then goto L433a32;
  #L433a30.  return @kind void;
  #L433a32.  v0:= v2.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L433a36.  v0:= v0 + 1;
  #L433a3a.  v2.`org.mozilla.javascript.json.JsonParser.c` @type ^`int` := v0;
  #L433a3e.  goto L4339f8;
  #L433a40.  return @kind void;
}
procedure `java.lang.Object` `c`(`org.mozilla.javascript.json.JsonParser` v6 @kind this) @signature `Lorg/mozilla/javascript/json/JsonParser;.c:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L43334c.  v0:= new `java.util.ArrayList`;
  #L433350.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L433356.  call `b`(v6) @signature `Lorg/mozilla/javascript/json/JsonParser;.b:()V` @kind direct;
  #L43335c.  v1:= 0I;
  #L43335e.  v2:= 0I;
  #L433360.  v3:= v6.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L433364.  v4:= v6.`org.mozilla.javascript.json.JsonParser.d` @type ^`int`;
  #L433368.  if v3 >= v4 then goto L4333fc;
  #L43336c.  v4:= v6.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L433370.  call temp:= `charAt`(v4, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L433376.  v3:= temp;
  #L433378.  v4:= 44I;
  #L43337c.  v5:= 1I;
  #L43337e.  if v3 == v4 then goto L4333d4;
  #L433382.  v4:= 93I;
  #L433386.  if v3 == v4 then goto L4333b0;
  #L43338a.  if v2 != 0 then goto L4333a0;
  #L43338e.  call temp:= `j`(v6) @signature `Lorg/mozilla/javascript/json/JsonParser;.j:()Ljava/lang/Object;` @kind direct;
  #L433394.  v2:= temp @kind object;
  #L433396.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L43339c.  v2:= 1I;
  #L43339e.  goto L4333e4;
  #L4333a0.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L4333a4.  v1:= "Missing comma in array literal" @kind object;
  #L4333a8.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4333ae.  throw v0;
  #L4333b0.  v1:= v6.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L4333b4.  v1:= v1 + v5 @kind int;
  #L4333b6.  v6.`org.mozilla.javascript.json.JsonParser.c` @type ^`int` := v1;
  #L4333ba.  v1:= v6.`org.mozilla.javascript.json.JsonParser.a` @type ^`org.mozilla.javascript.Context` @kind object;
  #L4333be.  v2:= v6.`org.mozilla.javascript.json.JsonParser.b` @type ^`org.mozilla.javascript.Scriptable` @kind object;
  #L4333c2.  call temp:= `toArray`(v0) @signature `Ljava/util/List;.toArray:()[Ljava/lang/Object;` @kind interface;
  #L4333c8.  v0:= temp @kind object;
  #L4333ca.  call temp:= `newArray`(v1, v2, v0) @signature `Lorg/mozilla/javascript/Context;.newArray:(Lorg/mozilla/javascript/Scriptable;[Ljava/lang/Object;)Lorg/mozilla/javascript/Scriptable;` @kind virtual;
  #L4333d0.  v0:= temp @kind object;
  #L4333d2.  return v0 @kind object;
  #L4333d4.  if v2 == 0 then goto L4333ec;
  #L4333d8.  v2:= v6.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L4333dc.  v2:= v2 + v5 @kind int;
  #L4333de.  v6.`org.mozilla.javascript.json.JsonParser.c` @type ^`int` := v2;
  #L4333e2.  v2:= 0I;
  #L4333e4.  call `b`(v6) @signature `Lorg/mozilla/javascript/json/JsonParser;.b:()V` @kind direct;
  #L4333ea.  goto L433360;
  #L4333ec.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L4333f0.  v1:= "Unexpected comma in array literal" @kind object;
  #L4333f4.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4333fa.  throw v0;
  #L4333fc.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L433400.  v1:= "Unterminated array literal" @kind object;
  #L433404.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43340a.  throw v0;
}
procedure `java.lang.Boolean` `d`(`org.mozilla.javascript.json.JsonParser` v3 @kind this) @signature `Lorg/mozilla/javascript/json/JsonParser;.d:()Ljava/lang/Boolean;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L433008.  v0:= v3.`org.mozilla.javascript.json.JsonParser.d` @type ^`int`;
  #L43300c.  v1:= v3.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L433010.  v0:= v0 - v1 @kind int;
  #L433012.  v2:= 4I;
  #L433014.  if v0 < v2 then goto L433090;
  #L433018.  v0:= v3.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L43301c.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L433022.  v0:= temp;
  #L433024.  v1:= 97I;
  #L433028.  if v0 != v1 then goto L433090;
  #L43302c.  v0:= v3.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L433030.  v1:= v3.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L433034.  v1:= v1 + 1;
  #L433038.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L43303e.  v0:= temp;
  #L433040.  v1:= 108I;
  #L433044.  if v0 != v1 then goto L433090;
  #L433048.  v0:= v3.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L43304c.  v1:= v3.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L433050.  v1:= v1 + 2;
  #L433054.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L43305a.  v0:= temp;
  #L43305c.  v1:= 115I;
  #L433060.  if v0 != v1 then goto L433090;
  #L433064.  v0:= v3.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L433068.  v1:= v3.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L43306c.  v1:= v1 + 3;
  #L433070.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L433076.  v0:= temp;
  #L433078.  v1:= 101I;
  #L43307c.  if v0 != v1 then goto L433090;
  #L433080.  v0:= v3.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L433084.  v0:= v0 + v2 @kind int;
  #L433086.  v3.`org.mozilla.javascript.json.JsonParser.c` @type ^`int` := v0;
  #L43308a.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L43308e.  return v0 @kind object;
  #L433090.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L433094.  v1:= "Unexpected token: f" @kind object;
  #L433098.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43309e.  throw v0;
}
procedure `java.lang.Object` `e`(`org.mozilla.javascript.json.JsonParser` v4 @kind this) @signature `Lorg/mozilla/javascript/json/JsonParser;.e:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43341c.  v0:= v4.`org.mozilla.javascript.json.JsonParser.d` @type ^`int`;
  #L433420.  v1:= v4.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L433424.  v0:= v0 - v1 @kind int;
  #L433426.  v2:= 3I;
  #L433428.  if v0 < v2 then goto L433482;
  #L43342c.  v0:= v4.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L433430.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L433436.  v0:= temp;
  #L433438.  v1:= 117I;
  #L43343c.  if v0 != v1 then goto L433482;
  #L433440.  v0:= v4.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L433444.  v1:= v4.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L433448.  v1:= v1 + 1;
  #L43344c.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L433452.  v0:= temp;
  #L433454.  v1:= 108I;
  #L433458.  if v0 != v1 then goto L433482;
  #L43345c.  v0:= v4.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L433460.  v3:= v4.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L433464.  v3:= v3 + 2;
  #L433468.  call temp:= `charAt`(v0, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L43346e.  v0:= temp;
  #L433470.  if v0 != v1 then goto L433482;
  #L433474.  v0:= v4.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L433478.  v0:= v0 + v2 @kind int;
  #L43347a.  v4.`org.mozilla.javascript.json.JsonParser.c` @type ^`int` := v0;
  #L43347e.  v0:= 0I;
  #L433480.  return v0 @kind object;
  #L433482.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L433486.  v1:= "Unexpected token: n" @kind object;
  #L43348a.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L433490.  throw v0;
}
procedure `java.lang.Number` `f`(`org.mozilla.javascript.json.JsonParser` v7 @kind this, `char` v8 ) @signature `Lorg/mozilla/javascript/json/JsonParser;.f:(C)Ljava/lang/Number;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L43313c.  v0:= new `java.lang.StringBuilder`;
  #L433140.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L433146.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L43314c.  v8:= v7.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L433150.  v1:= v7.`org.mozilla.javascript.json.JsonParser.d` @type ^`int`;
  #L433154.  if v8 >= v1 then goto L4331ae;
  #L433158.  v1:= v7.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L43315c.  call temp:= `charAt`(v1, v8) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L433162.  v8:= temp;
  #L433164.  call temp:= `isDigit`(v8) @signature `Ljava/lang/Character;.isDigit:(C)Z` @kind static;
  #L43316a.  v1:= temp;
  #L43316c.  if v1 != 0 then goto L43319a;
  #L433170.  v1:= 45I;
  #L433174.  if v8 == v1 then goto L43319a;
  #L433178.  v1:= 43I;
  #L43317c.  if v8 == v1 then goto L43319a;
  #L433180.  v1:= 46I;
  #L433184.  if v8 == v1 then goto L43319a;
  #L433188.  v1:= 101I;
  #L43318c.  if v8 == v1 then goto L43319a;
  #L433190.  v1:= 69I;
  #L433194.  if v8 == v1 then goto L43319a;
  #L433198.  goto L4331ae;
  #L43319a.  v1:= v7.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L43319e.  v1:= v1 + 1;
  #L4331a2.  v7.`org.mozilla.javascript.json.JsonParser.c` @type ^`int` := v1;
  #L4331a6.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4331ac.  goto L43314c;
  #L4331ae.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4331b4.  v8:= temp @kind object;
  #L4331b6.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4331bc.  v0:= temp;
  #L4331be.  v1:= 0I;
  #L4331c0.  v2:= "Unsupported number format: " @kind object;
  #L4331c4.  if v1 >= v0 then goto L433232;
  #L4331c8.  call temp:= `charAt`(v8, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4331ce.  v3:= temp;
  #L4331d0.  call temp:= `isDigit`(v3) @signature `Ljava/lang/Character;.isDigit:(C)Z` @kind static;
  #L4331d6.  v4:= temp;
  #L4331d8.  if v4 == 0 then goto L43322c;
  #L4331dc.  v4:= 48I;
  #L4331e0.  if v3 != v4 then goto L433232;
  #L4331e4.  v1:= v1 + 1;
  #L4331e8.  if v0 <= v1 then goto L433232;
  #L4331ec.  call temp:= `charAt`(v8, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4331f2.  v0:= temp;
  #L4331f4.  call temp:= `isDigit`(v0) @signature `Ljava/lang/Character;.isDigit:(C)Z` @kind static;
  #L4331fa.  v0:= temp;
  #L4331fc.  if v0 != 0 then goto L433202;
  #L433200.  goto L433232;
  #L433202.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L433206.  v1:= new `java.lang.StringBuilder`;
  #L43320a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L433210.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L433216.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43321c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L433222.  v1:= temp @kind object;
  #L433224.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43322a.  throw v0;
  #L43322c.  v1:= v1 + 1;
  #L433230.  goto L4331c0;
  #L433232.  call temp:= `parseDouble`(v8) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L433238.  v0:= temp @kind wide;
  #L43323a.  v3:= (`int`) v0 @kind d2i;
  #L43323c.  v4:= (`double`) v3 @kind i2d;
  #L43323e.  v6:= dcmpl(v4, v0);
  #L433242.  if v6 != 0 then goto L433250;
  #L433246.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43324c.  v8:= temp @kind object;
  #L43324e.  return v8 @kind object;
  #L433250.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L433256.  v8:= temp @kind object;
  #L433258.  return v8 @kind object;
  #L43325a.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L43325e.  v1:= new `java.lang.StringBuilder`;
  #L433262.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L433268.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43326e.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L433274.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43327a.  v8:= temp @kind object;
  #L43327c.  call `<init>`(v0, v8) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L433282.  throw v0;
  catch `java.lang.NumberFormatException` @[L4331c8..L433258] goto L43325a;
}
procedure `java.lang.Object` `g`(`org.mozilla.javascript.json.JsonParser` v9 @kind this) @signature `Lorg/mozilla/javascript/json/JsonParser;.g:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4334a4.  v0:= v9.`org.mozilla.javascript.json.JsonParser.a` @type ^`org.mozilla.javascript.Context` @kind object;
  #L4334a8.  v1:= v9.`org.mozilla.javascript.json.JsonParser.b` @type ^`org.mozilla.javascript.Scriptable` @kind object;
  #L4334ac.  call temp:= `newObject`(v0, v1) @signature `Lorg/mozilla/javascript/Context;.newObject:(Lorg/mozilla/javascript/Scriptable;)Lorg/mozilla/javascript/Scriptable;` @kind virtual;
  #L4334b2.  v0:= temp @kind object;
  #L4334b4.  call `b`(v9) @signature `Lorg/mozilla/javascript/json/JsonParser;.b:()V` @kind direct;
  #L4334ba.  v1:= 0I;
  #L4334bc.  v2:= 0I;
  #L4334be.  v3:= v9.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L4334c2.  v4:= v9.`org.mozilla.javascript.json.JsonParser.d` @type ^`int`;
  #L4334c6.  if v3 >= v4 then goto L43357c;
  #L4334ca.  v4:= v9.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L4334ce.  v5:= v3 + 1;
  #L4334d2.  v9.`org.mozilla.javascript.json.JsonParser.c` @type ^`int` := v5;
  #L4334d6.  call temp:= `charAt`(v4, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4334dc.  v3:= temp;
  #L4334de.  v4:= 34I;
  #L4334e2.  if v3 == v4 then goto L433520;
  #L4334e6.  v4:= 44I;
  #L4334ea.  if v3 == v4 then goto L433508;
  #L4334ee.  v1:= 125I;
  #L4334f2.  if v3 != v1 then goto L4334f8;
  #L4334f6.  return v0 @kind object;
  #L4334f8.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L4334fc.  v1:= "Unexpected token in object literal" @kind object;
  #L433500.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L433506.  throw v0;
  #L433508.  if v2 == 0 then goto L433510;
  #L43350c.  v2:= 0I;
  #L43350e.  goto L433564;
  #L433510.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L433514.  v1:= "Unexpected comma in object literal" @kind object;
  #L433518.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43351e.  throw v0;
  #L433520.  if v2 != 0 then goto L43356c;
  #L433524.  call temp:= `h`(v9) @signature `Lorg/mozilla/javascript/json/JsonParser;.h:()Ljava/lang/String;` @kind direct;
  #L43352a.  v2:= temp @kind object;
  #L43352c.  v3:= 58I;
  #L433530.  call `a`(v9, v3) @signature `Lorg/mozilla/javascript/json/JsonParser;.a:(C)V` @kind direct;
  #L433536.  call temp:= `j`(v9) @signature `Lorg/mozilla/javascript/json/JsonParser;.j:()Ljava/lang/Object;` @kind direct;
  #L43353c.  v3:= temp @kind object;
  #L43353e.  call temp:= `indexFromString`(v2) @signature `Lorg/mozilla/javascript/ScriptRuntime;.indexFromString:(Ljava/lang/String;)J` @kind static;
  #L433544.  v4:= temp @kind wide;
  #L433546.  v6:= 0L;
  #L43354a.  v8:= lcmp(v4, v6);
  #L43354e.  if v8 >= 0 then goto L43355a;
  #L433552.  call `put`(v0, v2, v0, v3) @signature `Lorg/mozilla/javascript/Scriptable;.put:(Ljava/lang/String;Lorg/mozilla/javascript/Scriptable;Ljava/lang/Object;)V` @kind interface;
  #L433558.  goto L433562;
  #L43355a.  v2:= (`int`) v4 @kind l2i;
  #L43355c.  call `put`(v0, v2, v0, v3) @signature `Lorg/mozilla/javascript/Scriptable;.put:(ILorg/mozilla/javascript/Scriptable;Ljava/lang/Object;)V` @kind interface;
  #L433562.  v2:= 1I;
  #L433564.  call `b`(v9) @signature `Lorg/mozilla/javascript/json/JsonParser;.b:()V` @kind direct;
  #L43356a.  goto L4334be;
  #L43356c.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L433570.  v1:= "Missing comma in object literal" @kind object;
  #L433574.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43357a.  throw v0;
  #L43357c.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L433580.  v1:= "Unterminated object literal" @kind object;
  #L433584.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43358a.  throw v0;
}
procedure `java.lang.String` `h`(`org.mozilla.javascript.json.JsonParser` v6 @kind this) @signature `Lorg/mozilla/javascript/json/JsonParser;.h:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4336c4.  v0:= new `java.lang.StringBuilder`;
  #L4336c8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4336ce.  v1:= v6.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L4336d2.  v2:= v6.`org.mozilla.javascript.json.JsonParser.d` @type ^`int`;
  #L4336d6.  if v1 >= v2 then goto L4338f6;
  #L4336da.  v2:= v6.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L4336de.  v3:= v1 + 1;
  #L4336e2.  v6.`org.mozilla.javascript.json.JsonParser.c` @type ^`int` := v3;
  #L4336e6.  call temp:= `charAt`(v2, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4336ec.  v1:= temp;
  #L4336ee.  v2:= 31I;
  #L4336f2.  if v1 <= v2 then goto L4338e6;
  #L4336f6.  v2:= 34I;
  #L4336fa.  if v1 == v2 then goto L4338dc;
  #L4336fe.  v3:= 92I;
  #L433702.  if v1 == v3 then goto L43370e;
  #L433706.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L43370c.  goto L4336ce;
  #L43370e.  v1:= v6.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L433712.  v4:= v6.`org.mozilla.javascript.json.JsonParser.d` @type ^`int`;
  #L433716.  if v1 >= v4 then goto L4338cc;
  #L43371a.  v4:= v6.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L43371e.  v5:= v1 + 1;
  #L433722.  v6.`org.mozilla.javascript.json.JsonParser.c` @type ^`int` := v5;
  #L433726.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L43372c.  v1:= temp;
  #L43372e.  if v1 == v2 then goto L4338c2;
  #L433732.  v2:= 47I;
  #L433736.  if v1 == v2 then goto L4338b8;
  #L43373a.  if v1 == v3 then goto L4338ae;
  #L43373e.  v2:= 98I;
  #L433742.  if v1 == v2 then goto L4338a0;
  #L433746.  v2:= 102I;
  #L43374a.  if v1 == v2 then goto L433892;
  #L43374e.  v2:= 110I;
  #L433752.  if v1 == v2 then goto L433884;
  #L433756.  v2:= 114I;
  #L43375a.  if v1 == v2 then goto L433876;
  #L43375e.  v2:= 116I;
  #L433762.  if v1 == v2 then goto L433868;
  #L433766.  v2:= 117I;
  #L43376a.  if v1 != v2 then goto L433830;
  #L43376e.  v1:= v6.`org.mozilla.javascript.json.JsonParser.d` @type ^`int`;
  #L433772.  v2:= v6.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L433776.  v1:= v1 - v2 @kind int;
  #L433778.  v3:= 5I;
  #L43377a.  if v1 < v3 then goto L4337f2;
  #L43377e.  v1:= v6.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L433782.  v3:= v2 + 4;
  #L433786.  call temp:= `substring`(v1, v2, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L43378c.  v1:= temp @kind object;
  #L43378e.  v2:= 16I;
  #L433792.  call temp:= `parseInt`(v1, v2) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;I)I` @kind static;
  #L433798.  v1:= temp;
  #L43379a.  v1:= (`char`) v1 @kind i2c;
  #L43379c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4337a2.  v1:= v6.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L4337a6.  v1:= v1 + 4;
  #L4337aa.  v6.`org.mozilla.javascript.json.JsonParser.c` @type ^`int` := v1;
  #L4337ae.  goto L4336ce;
  #L4337b0.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L4337b4.  v1:= new `java.lang.StringBuilder`;
  #L4337b8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4337be.  v2:= "Invalid character code: " @kind object;
  #L4337c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4337c8.  v2:= v6.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L4337cc.  v3:= v6.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L4337d0.  v4:= v3 + 4;
  #L4337d4.  call temp:= `substring`(v2, v3, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L4337da.  v2:= temp @kind object;
  #L4337dc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4337e2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4337e8.  v1:= temp @kind object;
  #L4337ea.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4337f0.  throw v0;
  #L4337f2.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L4337f6.  v1:= new `java.lang.StringBuilder`;
  #L4337fa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L433800.  v2:= "Invalid character code: \\u" @kind object;
  #L433804.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43380a.  v2:= v6.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L43380e.  v3:= v6.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L433812.  call temp:= `substring`(v2, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L433818.  v2:= temp @kind object;
  #L43381a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L433820.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L433826.  v1:= temp @kind object;
  #L433828.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43382e.  throw v0;
  #L433830.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L433834.  v2:= new `java.lang.StringBuilder`;
  #L433838.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43383e.  v3:= "Unexcpected character in string: '\\" @kind object;
  #L433842.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L433848.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L43384e.  v1:= "'" @kind object;
  #L433852.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L433858.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43385e.  v1:= temp @kind object;
  #L433860.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L433866.  throw v0;
  #L433868.  v1:= 9I;
  #L43386c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L433872.  goto L4336ce;
  #L433876.  v1:= 13I;
  #L43387a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L433880.  goto L4336ce;
  #L433884.  v1:= 10I;
  #L433888.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L43388e.  goto L4336ce;
  #L433892.  v1:= 12I;
  #L433896.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L43389c.  goto L4336ce;
  #L4338a0.  v1:= 8I;
  #L4338a4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4338aa.  goto L4336ce;
  #L4338ae.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4338b4.  goto L4336ce;
  #L4338b8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4338be.  goto L4336ce;
  #L4338c2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4338c8.  goto L4336ce;
  #L4338cc.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L4338d0.  v1:= "Unterminated string" @kind object;
  #L4338d4.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4338da.  throw v0;
  #L4338dc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4338e2.  v0:= temp @kind object;
  #L4338e4.  return v0 @kind object;
  #L4338e6.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L4338ea.  v1:= "String contains control character" @kind object;
  #L4338ee.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4338f4.  throw v0;
  #L4338f6.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L4338fa.  v1:= "Unterminated string literal" @kind object;
  #L4338fe.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L433904.  throw v0;
  catch `java.lang.NumberFormatException` @[L43377e..L4337ae] goto L4337b0;
}
procedure `java.lang.Boolean` `i`(`org.mozilla.javascript.json.JsonParser` v3 @kind this) @signature `Lorg/mozilla/javascript/json/JsonParser;.i:()Ljava/lang/Boolean;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4330b0.  v0:= v3.`org.mozilla.javascript.json.JsonParser.d` @type ^`int`;
  #L4330b4.  v1:= v3.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L4330b8.  v0:= v0 - v1 @kind int;
  #L4330ba.  v2:= 3I;
  #L4330bc.  if v0 < v2 then goto L43311c;
  #L4330c0.  v0:= v3.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L4330c4.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4330ca.  v0:= temp;
  #L4330cc.  v1:= 114I;
  #L4330d0.  if v0 != v1 then goto L43311c;
  #L4330d4.  v0:= v3.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L4330d8.  v1:= v3.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L4330dc.  v1:= v1 + 1;
  #L4330e0.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4330e6.  v0:= temp;
  #L4330e8.  v1:= 117I;
  #L4330ec.  if v0 != v1 then goto L43311c;
  #L4330f0.  v0:= v3.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L4330f4.  v1:= v3.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L4330f8.  v1:= v1 + 2;
  #L4330fc.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L433102.  v0:= temp;
  #L433104.  v1:= 101I;
  #L433108.  if v0 != v1 then goto L43311c;
  #L43310c.  v0:= v3.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L433110.  v0:= v0 + v2 @kind int;
  #L433112.  v3.`org.mozilla.javascript.json.JsonParser.c` @type ^`int` := v0;
  #L433116.  v0:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L43311a.  return v0 @kind object;
  #L43311c.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L433120.  v1:= "Unexpected token: t" @kind object;
  #L433124.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43312a.  throw v0;
}
procedure `java.lang.Object` `j`(`org.mozilla.javascript.json.JsonParser` v4 @kind this) @signature `Lorg/mozilla/javascript/json/JsonParser;.j:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43359c.  call `b`(v4) @signature `Lorg/mozilla/javascript/json/JsonParser;.b:()V` @kind direct;
  #L4335a2.  v0:= v4.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L4335a6.  v1:= v4.`org.mozilla.javascript.json.JsonParser.d` @type ^`int`;
  #L4335aa.  if v0 >= v1 then goto L433674;
  #L4335ae.  v1:= v4.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` @kind object;
  #L4335b2.  v2:= v0 + 1;
  #L4335b6.  v4.`org.mozilla.javascript.json.JsonParser.c` @type ^`int` := v2;
  #L4335ba.  call temp:= `charAt`(v1, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4335c0.  v0:= temp;
  #L4335c2.  v1:= 34I;
  #L4335c6.  if v0 == v1 then goto L43366a;
  #L4335ca.  v1:= 45I;
  #L4335ce.  if v0 == v1 then goto L433660;
  #L4335d2.  v1:= 91I;
  #L4335d6.  if v0 == v1 then goto L433656;
  #L4335da.  v1:= 102I;
  #L4335de.  if v0 == v1 then goto L43364c;
  #L4335e2.  v1:= 110I;
  #L4335e6.  if v0 == v1 then goto L433642;
  #L4335ea.  v1:= 116I;
  #L4335ee.  if v0 == v1 then goto L433638;
  #L4335f2.  v1:= 123I;
  #L4335f6.  if v0 == v1 then goto L43362e;
  #L4335fa.  goto L433684;
  #L433600.  v1:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L433604.  v2:= new `java.lang.StringBuilder`;
  #L433608.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43360e.  v3:= "Unexpected token: " @kind object;
  #L433612.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L433618.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L43361e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L433624.  v0:= temp @kind object;
  #L433626.  call `<init>`(v1, v0) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43362c.  throw v1;
  #L43362e.  call temp:= `g`(v4) @signature `Lorg/mozilla/javascript/json/JsonParser;.g:()Ljava/lang/Object;` @kind direct;
  #L433634.  v0:= temp @kind object;
  #L433636.  return v0 @kind object;
  #L433638.  call temp:= `i`(v4) @signature `Lorg/mozilla/javascript/json/JsonParser;.i:()Ljava/lang/Boolean;` @kind direct;
  #L43363e.  v0:= temp @kind object;
  #L433640.  return v0 @kind object;
  #L433642.  call temp:= `e`(v4) @signature `Lorg/mozilla/javascript/json/JsonParser;.e:()Ljava/lang/Object;` @kind direct;
  #L433648.  v0:= temp @kind object;
  #L43364a.  return v0 @kind object;
  #L43364c.  call temp:= `d`(v4) @signature `Lorg/mozilla/javascript/json/JsonParser;.d:()Ljava/lang/Boolean;` @kind direct;
  #L433652.  v0:= temp @kind object;
  #L433654.  return v0 @kind object;
  #L433656.  call temp:= `c`(v4) @signature `Lorg/mozilla/javascript/json/JsonParser;.c:()Ljava/lang/Object;` @kind direct;
  #L43365c.  v0:= temp @kind object;
  #L43365e.  return v0 @kind object;
  #L433660.  call temp:= `f`(v4, v0) @signature `Lorg/mozilla/javascript/json/JsonParser;.f:(C)Ljava/lang/Number;` @kind direct;
  #L433666.  v0:= temp @kind object;
  #L433668.  return v0 @kind object;
  #L43366a.  call temp:= `h`(v4) @signature `Lorg/mozilla/javascript/json/JsonParser;.h:()Ljava/lang/String;` @kind direct;
  #L433670.  v0:= temp @kind object;
  #L433672.  return v0 @kind object;
  #L433674.  v0:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L433678.  v1:= "Empty JSON string" @kind object;
  #L43367c.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L433682.  throw v0;
  #L433684.  switch v0
                  | 48 => goto L433660
                  | 49 => goto L433660
                  | 50 => goto L433660
                  | 51 => goto L433660
                  | 52 => goto L433660
                  | 53 => goto L433660
                  | 54 => goto L433660
                  | 55 => goto L433660
                  | 56 => goto L433660
                  | 57 => goto L433660
                  | else => goto L433600;
}
procedure `java.lang.Object` `parseValue`(`org.mozilla.javascript.json.JsonParser` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/mozilla/javascript/json/JsonParser;.parseValue:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4332a4.  @monitorenter v2
  #L4332a6.  if v3 == 0 then goto L433314;
  #L4332aa.  v0:= 0I;
  #L4332ac.  v2.`org.mozilla.javascript.json.JsonParser.c` @type ^`int` := v0;
  #L4332b0.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4332b6.  v0:= temp;
  #L4332b8.  v2.`org.mozilla.javascript.json.JsonParser.d` @type ^`int` := v0;
  #L4332bc.  v2.`org.mozilla.javascript.json.JsonParser.e` @type ^`java.lang.String` := v3 @kind object;
  #L4332c0.  call temp:= `j`(v2) @signature `Lorg/mozilla/javascript/json/JsonParser;.j:()Ljava/lang/Object;` @kind direct;
  #L4332c6.  v3:= temp @kind object;
  #L4332c8.  call `b`(v2) @signature `Lorg/mozilla/javascript/json/JsonParser;.b:()V` @kind direct;
  #L4332ce.  v0:= v2.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L4332d2.  v1:= v2.`org.mozilla.javascript.json.JsonParser.d` @type ^`int`;
  #L4332d6.  if v0 < v1 then goto L4332de;
  #L4332da.  @monitorexit v2
  #L4332dc.  return v3 @kind object;
  #L4332de.  v3:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L4332e2.  v0:= new `java.lang.StringBuilder`;
  #L4332e6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4332ec.  v1:= "Expected end of stream at char " @kind object;
  #L4332f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4332f6.  v1:= v2.`org.mozilla.javascript.json.JsonParser.c` @type ^`int`;
  #L4332fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L433300.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L433306.  v0:= temp @kind object;
  #L433308.  call `<init>`(v3, v0) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43330e.  throw v3;
  #L433310.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433312.  goto L433324;
  #L433314.  v3:= new `org.mozilla.javascript.json.JsonParser$ParseException`;
  #L433318.  v0:= "Input string may not be null" @kind object;
  #L43331c.  call `<init>`(v3, v0) @signature `Lorg/mozilla/javascript/json/JsonParser$ParseException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L433322.  throw v3;
  #L433324.  @monitorexit v2
  #L433326.  throw v3;
  catch `java.lang.Throwable` @[L4332ac..L4332d6] goto L433310;
  catch `java.lang.Throwable` @[L4332de..L433324] goto L433310;
}
