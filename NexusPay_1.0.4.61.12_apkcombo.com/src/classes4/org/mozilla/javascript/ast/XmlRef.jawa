record `org.mozilla.javascript.ast.XmlRef` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `int` `org.mozilla.javascript.ast.XmlRef.atPos` @AccessFlag PROTECTED;
  `int` `org.mozilla.javascript.ast.XmlRef.colonPos` @AccessFlag PROTECTED;
  `org.mozilla.javascript.ast.Name` `org.mozilla.javascript.ast.XmlRef.namespace` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.XmlRef` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/XmlRef;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4329f4.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L4329fa.  v0:= -1I;
  #L4329fc.  v1.`org.mozilla.javascript.ast.XmlRef.atPos` @type ^`int` := v0;
  #L432a00.  v1.`org.mozilla.javascript.ast.XmlRef.colonPos` @type ^`int` := v0;
  #L432a04.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.XmlRef` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/XmlRef;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L432a18.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(I)V` @kind direct;
  #L432a1e.  v1:= -1I;
  #L432a20.  v0.`org.mozilla.javascript.ast.XmlRef.atPos` @type ^`int` := v1;
  #L432a24.  v0.`org.mozilla.javascript.ast.XmlRef.colonPos` @type ^`int` := v1;
  #L432a28.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.XmlRef` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/XmlRef;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L432a3c.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L432a42.  v1:= -1I;
  #L432a44.  v0.`org.mozilla.javascript.ast.XmlRef.atPos` @type ^`int` := v1;
  #L432a48.  v0.`org.mozilla.javascript.ast.XmlRef.colonPos` @type ^`int` := v1;
  #L432a4c.  return @kind void;
}
procedure `int` `getAtPos`(`org.mozilla.javascript.ast.XmlRef` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/XmlRef;.getAtPos:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4329ac.  v0:= v1.`org.mozilla.javascript.ast.XmlRef.atPos` @type ^`int`;
  #L4329b0.  return v0;
}
procedure `int` `getColonPos`(`org.mozilla.javascript.ast.XmlRef` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/XmlRef;.getColonPos:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4329c4.  v0:= v1.`org.mozilla.javascript.ast.XmlRef.colonPos` @type ^`int`;
  #L4329c8.  return v0;
}
procedure `org.mozilla.javascript.ast.Name` `getNamespace`(`org.mozilla.javascript.ast.XmlRef` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/XmlRef;.getNamespace:()Lorg/mozilla/javascript/ast/Name;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4329dc.  v0:= v1.`org.mozilla.javascript.ast.XmlRef.namespace` @type ^`org.mozilla.javascript.ast.Name` @kind object;
  #L4329e0.  return v0 @kind object;
}
procedure `boolean` `isAttributeAccess`(`org.mozilla.javascript.ast.XmlRef` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/XmlRef;.isAttributeAccess:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43298c.  v0:= v1.`org.mozilla.javascript.ast.XmlRef.atPos` @type ^`int`;
  #L432990.  if v0 < 0 then goto L432998;
  #L432994.  v0:= 1I;
  #L432996.  goto L43299a;
  #L432998.  v0:= 0I;
  #L43299a.  return v0;
}
procedure `void` `setAtPos`(`org.mozilla.javascript.ast.XmlRef` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/XmlRef;.setAtPos:(I)V` @AccessFlag PUBLIC {
    temp;

  #L432a60.  v0.`org.mozilla.javascript.ast.XmlRef.atPos` @type ^`int` := v1;
  #L432a64.  return @kind void;
}
procedure `void` `setColonPos`(`org.mozilla.javascript.ast.XmlRef` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/XmlRef;.setColonPos:(I)V` @AccessFlag PUBLIC {
    temp;

  #L432a78.  v0.`org.mozilla.javascript.ast.XmlRef.colonPos` @type ^`int` := v1;
  #L432a7c.  return @kind void;
}
procedure `void` `setNamespace`(`org.mozilla.javascript.ast.XmlRef` v0 @kind this, `org.mozilla.javascript.ast.Name` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/XmlRef;.setNamespace:(Lorg/mozilla/javascript/ast/Name;)V` @AccessFlag PUBLIC {
    temp;

  #L432a90.  v0.`org.mozilla.javascript.ast.XmlRef.namespace` @type ^`org.mozilla.javascript.ast.Name` := v1 @kind object;
  #L432a94.  if v1 == 0 then goto L432a9e;
  #L432a98.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L432a9e.  return @kind void;
}
