record `org.mozilla.javascript.ast.IfStatement` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.IfStatement.c` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.IfStatement.d` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.IfStatement.e` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.IfStatement.f` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.IfStatement.g` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.IfStatement.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.IfStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/IfStatement;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42d818.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L42d81e.  v0:= -1I;
  #L42d820.  v1.`org.mozilla.javascript.ast.IfStatement.e` @type ^`int` := v0;
  #L42d824.  v1.`org.mozilla.javascript.ast.IfStatement.g` @type ^`int` := v0;
  #L42d828.  v1.`org.mozilla.javascript.ast.IfStatement.h` @type ^`int` := v0;
  #L42d82c.  v0:= 112I;
  #L42d830.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42d834.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.IfStatement` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/IfStatement;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42d848.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(I)V` @kind direct;
  #L42d84e.  v1:= -1I;
  #L42d850.  v0.`org.mozilla.javascript.ast.IfStatement.e` @type ^`int` := v1;
  #L42d854.  v0.`org.mozilla.javascript.ast.IfStatement.g` @type ^`int` := v1;
  #L42d858.  v0.`org.mozilla.javascript.ast.IfStatement.h` @type ^`int` := v1;
  #L42d85c.  v1:= 112I;
  #L42d860.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42d864.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.IfStatement` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/IfStatement;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42d878.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L42d87e.  v1:= -1I;
  #L42d880.  v0.`org.mozilla.javascript.ast.IfStatement.e` @type ^`int` := v1;
  #L42d884.  v0.`org.mozilla.javascript.ast.IfStatement.g` @type ^`int` := v1;
  #L42d888.  v0.`org.mozilla.javascript.ast.IfStatement.h` @type ^`int` := v1;
  #L42d88c.  v1:= 112I;
  #L42d890.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42d894.  return @kind void;
}
procedure `org.mozilla.javascript.ast.AstNode` `getCondition`(`org.mozilla.javascript.ast.IfStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/IfStatement;.getCondition:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d7d0.  v0:= v1.`org.mozilla.javascript.ast.IfStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d7d4.  return v0 @kind object;
}
procedure `org.mozilla.javascript.ast.AstNode` `getElsePart`(`org.mozilla.javascript.ast.IfStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/IfStatement;.getElsePart:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d7e8.  v0:= v1.`org.mozilla.javascript.ast.IfStatement.f` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d7ec.  return v0 @kind object;
}
procedure `int` `getElsePosition`(`org.mozilla.javascript.ast.IfStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/IfStatement;.getElsePosition:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d690.  v0:= v1.`org.mozilla.javascript.ast.IfStatement.e` @type ^`int`;
  #L42d694.  return v0;
}
procedure `int` `getLp`(`org.mozilla.javascript.ast.IfStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/IfStatement;.getLp:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d6a8.  v0:= v1.`org.mozilla.javascript.ast.IfStatement.g` @type ^`int`;
  #L42d6ac.  return v0;
}
procedure `int` `getRp`(`org.mozilla.javascript.ast.IfStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/IfStatement;.getRp:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d6c0.  v0:= v1.`org.mozilla.javascript.ast.IfStatement.h` @type ^`int`;
  #L42d6c4.  return v0;
}
procedure `org.mozilla.javascript.ast.AstNode` `getThenPart`(`org.mozilla.javascript.ast.IfStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/IfStatement;.getThenPart:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d800.  v0:= v1.`org.mozilla.javascript.ast.IfStatement.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d804.  return v0 @kind object;
}
procedure `void` `setCondition`(`org.mozilla.javascript.ast.IfStatement` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/IfStatement;.setCondition:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L42d8a8.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42d8ae.  v0.`org.mozilla.javascript.ast.IfStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42d8b2.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42d8b8.  return @kind void;
}
procedure `void` `setElsePart`(`org.mozilla.javascript.ast.IfStatement` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/IfStatement;.setElsePart:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L42d8cc.  v0.`org.mozilla.javascript.ast.IfStatement.f` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42d8d0.  if v1 == 0 then goto L42d8da;
  #L42d8d4.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42d8da.  return @kind void;
}
procedure `void` `setElsePosition`(`org.mozilla.javascript.ast.IfStatement` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/IfStatement;.setElsePosition:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42d8ec.  v0.`org.mozilla.javascript.ast.IfStatement.e` @type ^`int` := v1;
  #L42d8f0.  return @kind void;
}
procedure `void` `setLp`(`org.mozilla.javascript.ast.IfStatement` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/IfStatement;.setLp:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42d904.  v0.`org.mozilla.javascript.ast.IfStatement.g` @type ^`int` := v1;
  #L42d908.  return @kind void;
}
procedure `void` `setParens`(`org.mozilla.javascript.ast.IfStatement` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/IfStatement;.setParens:(II)V` @AccessFlag PUBLIC {
    temp;

  #L42d91c.  v0.`org.mozilla.javascript.ast.IfStatement.g` @type ^`int` := v1;
  #L42d920.  v0.`org.mozilla.javascript.ast.IfStatement.h` @type ^`int` := v2;
  #L42d924.  return @kind void;
}
procedure `void` `setRp`(`org.mozilla.javascript.ast.IfStatement` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/IfStatement;.setRp:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42d938.  v0.`org.mozilla.javascript.ast.IfStatement.h` @type ^`int` := v1;
  #L42d93c.  return @kind void;
}
procedure `void` `setThenPart`(`org.mozilla.javascript.ast.IfStatement` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/IfStatement;.setThenPart:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L42d950.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42d956.  v0.`org.mozilla.javascript.ast.IfStatement.d` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42d95a.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42d960.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.IfStatement` v5 @kind this, `int` v6 ) @signature `Lorg/mozilla/javascript/ast/IfStatement;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42d6d8.  call temp:= `makeIndent`(v5, v6) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42d6de.  v0:= temp @kind object;
  #L42d6e0.  v1:= new `java.lang.StringBuilder`;
  #L42d6e4.  v2:= 32I;
  #L42d6e8.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L42d6ee.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d6f4.  v0:= "if (" @kind object;
  #L42d6f8.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d6fe.  v0:= v5.`org.mozilla.javascript.ast.IfStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d702.  v2:= 0I;
  #L42d704.  call temp:= `toSource`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42d70a.  v0:= temp @kind object;
  #L42d70c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d712.  v0:= ") " @kind object;
  #L42d716.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d71c.  v0:= v5.`org.mozilla.javascript.ast.IfStatement.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d720.  v0:= instanceof @variable v0 @type ^`org.mozilla.javascript.ast.Block` @kind boolean;
  #L42d724.  v2:= "\n" @kind object;
  #L42d728.  if v0 != 0 then goto L42d740;
  #L42d72c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d732.  call temp:= `makeIndent`(v5, v6) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42d738.  v0:= temp @kind object;
  #L42d73a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d740.  v0:= v5.`org.mozilla.javascript.ast.IfStatement.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d744.  call temp:= `toSource`(v0, v6) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42d74a.  v0:= temp @kind object;
  #L42d74c.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L42d752.  v0:= temp @kind object;
  #L42d754.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d75a.  v0:= v5.`org.mozilla.javascript.ast.IfStatement.f` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d75e.  v3:= instanceof @variable v0 @type ^`org.mozilla.javascript.ast.IfStatement` @kind boolean;
  #L42d762.  v4:= " else " @kind object;
  #L42d766.  if v3 == 0 then goto L42d78c;
  #L42d76a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d770.  v0:= v5.`org.mozilla.javascript.ast.IfStatement.f` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d774.  call temp:= `toSource`(v0, v6) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42d77a.  v6:= temp @kind object;
  #L42d77c.  call temp:= `trim`(v6) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L42d782.  v6:= temp @kind object;
  #L42d784.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d78a.  goto L42d7b0;
  #L42d78c.  if v0 == 0 then goto L42d7b0;
  #L42d790.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d796.  v0:= v5.`org.mozilla.javascript.ast.IfStatement.f` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d79a.  call temp:= `toSource`(v0, v6) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42d7a0.  v6:= temp @kind object;
  #L42d7a2.  call temp:= `trim`(v6) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L42d7a8.  v6:= temp @kind object;
  #L42d7aa.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d7b0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d7b6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42d7bc.  v6:= temp @kind object;
  #L42d7be.  return v6 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.IfStatement` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/IfStatement;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d974.  call temp:= `visit`(v2, v1) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L42d97a.  v0:= temp;
  #L42d97c.  if v0 == 0 then goto L42d9a2;
  #L42d980.  v0:= v1.`org.mozilla.javascript.ast.IfStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d984.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42d98a.  v0:= v1.`org.mozilla.javascript.ast.IfStatement.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d98e.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42d994.  v0:= v1.`org.mozilla.javascript.ast.IfStatement.f` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d998.  if v0 == 0 then goto L42d9a2;
  #L42d99c.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42d9a2.  return @kind void;
}
