record `org.mozilla.javascript.ast.ForInLoop` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.Loop` @kind class {
  `int` `org.mozilla.javascript.ast.ForInLoop.eachPosition` @AccessFlag PROTECTED;
  `int` `org.mozilla.javascript.ast.ForInLoop.inPosition` @AccessFlag PROTECTED;
  `boolean` `org.mozilla.javascript.ast.ForInLoop.isForEach` @AccessFlag PROTECTED;
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.ForInLoop.iteratedObject` @AccessFlag PROTECTED;
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.ForInLoop.iterator` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ForInLoop` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42c39c.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/Loop;.<init>:()V` @kind direct;
  #L42c3a2.  v0:= -1I;
  #L42c3a4.  v1.`org.mozilla.javascript.ast.ForInLoop.inPosition` @type ^`int` := v0;
  #L42c3a8.  v1.`org.mozilla.javascript.ast.ForInLoop.eachPosition` @type ^`int` := v0;
  #L42c3ac.  v0:= 119I;
  #L42c3b0.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42c3b4.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ForInLoop` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42c3c8.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/Loop;.<init>:(I)V` @kind direct;
  #L42c3ce.  v1:= -1I;
  #L42c3d0.  v0.`org.mozilla.javascript.ast.ForInLoop.inPosition` @type ^`int` := v1;
  #L42c3d4.  v0.`org.mozilla.javascript.ast.ForInLoop.eachPosition` @type ^`int` := v1;
  #L42c3d8.  v1:= 119I;
  #L42c3dc.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42c3e0.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ForInLoop` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42c3f4.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/Loop;.<init>:(II)V` @kind direct;
  #L42c3fa.  v1:= -1I;
  #L42c3fc.  v0.`org.mozilla.javascript.ast.ForInLoop.inPosition` @type ^`int` := v1;
  #L42c400.  v0.`org.mozilla.javascript.ast.ForInLoop.eachPosition` @type ^`int` := v1;
  #L42c404.  v1:= 119I;
  #L42c408.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42c40c.  return @kind void;
}
procedure `int` `getEachPosition`(`org.mozilla.javascript.ast.ForInLoop` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.getEachPosition:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c25c.  v0:= v1.`org.mozilla.javascript.ast.ForInLoop.eachPosition` @type ^`int`;
  #L42c260.  return v0;
}
procedure `int` `getInPosition`(`org.mozilla.javascript.ast.ForInLoop` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.getInPosition:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c274.  v0:= v1.`org.mozilla.javascript.ast.ForInLoop.inPosition` @type ^`int`;
  #L42c278.  return v0;
}
procedure `org.mozilla.javascript.ast.AstNode` `getIteratedObject`(`org.mozilla.javascript.ast.ForInLoop` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.getIteratedObject:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c36c.  v0:= v1.`org.mozilla.javascript.ast.ForInLoop.iteratedObject` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42c370.  return v0 @kind object;
}
procedure `org.mozilla.javascript.ast.AstNode` `getIterator`(`org.mozilla.javascript.ast.ForInLoop` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.getIterator:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c384.  v0:= v1.`org.mozilla.javascript.ast.ForInLoop.iterator` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42c388.  return v0 @kind object;
}
procedure `boolean` `isForEach`(`org.mozilla.javascript.ast.ForInLoop` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.isForEach:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c244.  v0:= v1.`org.mozilla.javascript.ast.ForInLoop.isForEach` @type ^`boolean` @kind boolean;
  #L42c248.  return v0;
}
procedure `void` `setEachPosition`(`org.mozilla.javascript.ast.ForInLoop` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.setEachPosition:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42c420.  v0.`org.mozilla.javascript.ast.ForInLoop.eachPosition` @type ^`int` := v1;
  #L42c424.  return @kind void;
}
procedure `void` `setInPosition`(`org.mozilla.javascript.ast.ForInLoop` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.setInPosition:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42c438.  v0.`org.mozilla.javascript.ast.ForInLoop.inPosition` @type ^`int` := v1;
  #L42c43c.  return @kind void;
}
procedure `void` `setIsForEach`(`org.mozilla.javascript.ast.ForInLoop` v0 @kind this, `boolean` v1 ) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.setIsForEach:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L42c450.  v0.`org.mozilla.javascript.ast.ForInLoop.isForEach` @type ^`boolean` := v1 @kind boolean;
  #L42c454.  return @kind void;
}
procedure `void` `setIteratedObject`(`org.mozilla.javascript.ast.ForInLoop` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.setIteratedObject:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L42c468.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42c46e.  v0.`org.mozilla.javascript.ast.ForInLoop.iteratedObject` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42c472.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42c478.  return @kind void;
}
procedure `void` `setIterator`(`org.mozilla.javascript.ast.ForInLoop` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.setIterator:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L42c48c.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42c492.  v0.`org.mozilla.javascript.ast.ForInLoop.iterator` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42c496.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42c49c.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.ForInLoop` v4 @kind this, `int` v5 ) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42c28c.  v0:= new `java.lang.StringBuilder`;
  #L42c290.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42c296.  call temp:= `makeIndent`(v4, v5) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42c29c.  v1:= temp @kind object;
  #L42c29e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c2a4.  v1:= "for " @kind object;
  #L42c2a8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c2ae.  call temp:= `isForEach`(v4) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.isForEach:()Z` @kind virtual;
  #L42c2b4.  v1:= temp;
  #L42c2b6.  if v1 == 0 then goto L42c2c4;
  #L42c2ba.  v1:= "each " @kind object;
  #L42c2be.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c2c4.  v1:= "(" @kind object;
  #L42c2c8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c2ce.  v1:= v4.`org.mozilla.javascript.ast.ForInLoop.iterator` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42c2d2.  v2:= 0I;
  #L42c2d4.  call temp:= `toSource`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42c2da.  v1:= temp @kind object;
  #L42c2dc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c2e2.  v1:= " in " @kind object;
  #L42c2e6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c2ec.  v1:= v4.`org.mozilla.javascript.ast.ForInLoop.iteratedObject` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42c2f0.  call temp:= `toSource`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42c2f6.  v1:= temp @kind object;
  #L42c2f8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c2fe.  v1:= ") " @kind object;
  #L42c302.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c308.  v1:= v4.`org.mozilla.javascript.ast.Loop.body` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42c30c.  v2:= instanceof @variable v1 @type ^`org.mozilla.javascript.ast.Block` @kind boolean;
  #L42c310.  v3:= "\n" @kind object;
  #L42c314.  if v2 == 0 then goto L42c336;
  #L42c318.  call temp:= `toSource`(v1, v5) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42c31e.  v5:= temp @kind object;
  #L42c320.  call temp:= `trim`(v5) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L42c326.  v5:= temp @kind object;
  #L42c328.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c32e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c334.  goto L42c352;
  #L42c336.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c33c.  v1:= v4.`org.mozilla.javascript.ast.Loop.body` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42c340.  v5:= v5 + 1;
  #L42c344.  call temp:= `toSource`(v1, v5) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42c34a.  v5:= temp @kind object;
  #L42c34c.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c352.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42c358.  v5:= temp @kind object;
  #L42c35a.  return v5 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.ForInLoop` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c4b0.  call temp:= `visit`(v2, v1) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L42c4b6.  v0:= temp;
  #L42c4b8.  if v0 == 0 then goto L42c4da;
  #L42c4bc.  v0:= v1.`org.mozilla.javascript.ast.ForInLoop.iterator` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42c4c0.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42c4c6.  v0:= v1.`org.mozilla.javascript.ast.ForInLoop.iteratedObject` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42c4ca.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42c4d0.  v0:= v1.`org.mozilla.javascript.ast.Loop.body` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42c4d4.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42c4da.  return @kind void;
}
