record `org.mozilla.javascript.ast.ConditionalExpression` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.ConditionalExpression.c` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.ConditionalExpression.d` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.ConditionalExpression.e` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.ConditionalExpression.f` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.ConditionalExpression.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ConditionalExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ConditionalExpression;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42b5f8.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L42b5fe.  v0:= -1I;
  #L42b600.  v1.`org.mozilla.javascript.ast.ConditionalExpression.f` @type ^`int` := v0;
  #L42b604.  v1.`org.mozilla.javascript.ast.ConditionalExpression.g` @type ^`int` := v0;
  #L42b608.  v0:= 102I;
  #L42b60c.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42b610.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ConditionalExpression` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/ConditionalExpression;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42b624.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(I)V` @kind direct;
  #L42b62a.  v1:= -1I;
  #L42b62c.  v0.`org.mozilla.javascript.ast.ConditionalExpression.f` @type ^`int` := v1;
  #L42b630.  v0.`org.mozilla.javascript.ast.ConditionalExpression.g` @type ^`int` := v1;
  #L42b634.  v1:= 102I;
  #L42b638.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42b63c.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ConditionalExpression` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/ConditionalExpression;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42b650.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L42b656.  v1:= -1I;
  #L42b658.  v0.`org.mozilla.javascript.ast.ConditionalExpression.f` @type ^`int` := v1;
  #L42b65c.  v0.`org.mozilla.javascript.ast.ConditionalExpression.g` @type ^`int` := v1;
  #L42b660.  v1:= 102I;
  #L42b664.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42b668.  return @kind void;
}
procedure `int` `getColonPosition`(`org.mozilla.javascript.ast.ConditionalExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ConditionalExpression;.getColonPosition:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b500.  v0:= v1.`org.mozilla.javascript.ast.ConditionalExpression.g` @type ^`int`;
  #L42b504.  return v0;
}
procedure `org.mozilla.javascript.ast.AstNode` `getFalseExpression`(`org.mozilla.javascript.ast.ConditionalExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ConditionalExpression;.getFalseExpression:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b5b0.  v0:= v1.`org.mozilla.javascript.ast.ConditionalExpression.e` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b5b4.  return v0 @kind object;
}
procedure `int` `getQuestionMarkPosition`(`org.mozilla.javascript.ast.ConditionalExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ConditionalExpression;.getQuestionMarkPosition:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b518.  v0:= v1.`org.mozilla.javascript.ast.ConditionalExpression.f` @type ^`int`;
  #L42b51c.  return v0;
}
procedure `org.mozilla.javascript.ast.AstNode` `getTestExpression`(`org.mozilla.javascript.ast.ConditionalExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ConditionalExpression;.getTestExpression:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b5c8.  v0:= v1.`org.mozilla.javascript.ast.ConditionalExpression.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b5cc.  return v0 @kind object;
}
procedure `org.mozilla.javascript.ast.AstNode` `getTrueExpression`(`org.mozilla.javascript.ast.ConditionalExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ConditionalExpression;.getTrueExpression:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b5e0.  v0:= v1.`org.mozilla.javascript.ast.ConditionalExpression.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b5e4.  return v0 @kind object;
}
procedure `boolean` `hasSideEffects`(`org.mozilla.javascript.ast.ConditionalExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ConditionalExpression;.hasSideEffects:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b4a8.  v0:= v1.`org.mozilla.javascript.ast.ConditionalExpression.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b4ac.  if v0 == 0 then goto L42b4c0;
  #L42b4b0.  v0:= v1.`org.mozilla.javascript.ast.ConditionalExpression.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b4b4.  if v0 == 0 then goto L42b4c0;
  #L42b4b8.  v0:= v1.`org.mozilla.javascript.ast.ConditionalExpression.e` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b4bc.  if v0 != 0 then goto L42b4c6;
  #L42b4c0.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42b4c6.  v0:= v1.`org.mozilla.javascript.ast.ConditionalExpression.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b4ca.  call temp:= `hasSideEffects`(v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.hasSideEffects:()Z` @kind virtual;
  #L42b4d0.  v0:= temp;
  #L42b4d2.  if v0 == 0 then goto L42b4ea;
  #L42b4d6.  v0:= v1.`org.mozilla.javascript.ast.ConditionalExpression.e` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b4da.  call temp:= `hasSideEffects`(v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.hasSideEffects:()Z` @kind virtual;
  #L42b4e0.  v0:= temp;
  #L42b4e2.  if v0 == 0 then goto L42b4ea;
  #L42b4e6.  v0:= 1I;
  #L42b4e8.  goto L42b4ec;
  #L42b4ea.  v0:= 0I;
  #L42b4ec.  return v0;
}
procedure `void` `setColonPosition`(`org.mozilla.javascript.ast.ConditionalExpression` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/ConditionalExpression;.setColonPosition:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42b67c.  v0.`org.mozilla.javascript.ast.ConditionalExpression.g` @type ^`int` := v1;
  #L42b680.  return @kind void;
}
procedure `void` `setFalseExpression`(`org.mozilla.javascript.ast.ConditionalExpression` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/ConditionalExpression;.setFalseExpression:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L42b694.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42b69a.  v0.`org.mozilla.javascript.ast.ConditionalExpression.e` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42b69e.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42b6a4.  return @kind void;
}
procedure `void` `setQuestionMarkPosition`(`org.mozilla.javascript.ast.ConditionalExpression` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/ConditionalExpression;.setQuestionMarkPosition:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42b6b8.  v0.`org.mozilla.javascript.ast.ConditionalExpression.f` @type ^`int` := v1;
  #L42b6bc.  return @kind void;
}
procedure `void` `setTestExpression`(`org.mozilla.javascript.ast.ConditionalExpression` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/ConditionalExpression;.setTestExpression:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L42b6d0.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42b6d6.  v0.`org.mozilla.javascript.ast.ConditionalExpression.c` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42b6da.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42b6e0.  return @kind void;
}
procedure `void` `setTrueExpression`(`org.mozilla.javascript.ast.ConditionalExpression` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/ConditionalExpression;.setTrueExpression:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L42b6f4.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42b6fa.  v0.`org.mozilla.javascript.ast.ConditionalExpression.d` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42b6fe.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42b704.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.ConditionalExpression` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/ConditionalExpression;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42b530.  v0:= new `java.lang.StringBuilder`;
  #L42b534.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42b53a.  call temp:= `makeIndent`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42b540.  v1:= temp @kind object;
  #L42b542.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b548.  v1:= v2.`org.mozilla.javascript.ast.ConditionalExpression.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b54c.  call temp:= `toSource`(v1, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42b552.  v3:= temp @kind object;
  #L42b554.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b55a.  v3:= " ? " @kind object;
  #L42b55e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b564.  v3:= v2.`org.mozilla.javascript.ast.ConditionalExpression.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b568.  v1:= 0I;
  #L42b56a.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42b570.  v3:= temp @kind object;
  #L42b572.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b578.  v3:= " : " @kind object;
  #L42b57c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b582.  v3:= v2.`org.mozilla.javascript.ast.ConditionalExpression.e` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b586.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42b58c.  v3:= temp @kind object;
  #L42b58e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b594.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42b59a.  v3:= temp @kind object;
  #L42b59c.  return v3 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.ConditionalExpression` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/ConditionalExpression;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b718.  call temp:= `visit`(v2, v1) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L42b71e.  v0:= temp;
  #L42b720.  if v0 == 0 then goto L42b742;
  #L42b724.  v0:= v1.`org.mozilla.javascript.ast.ConditionalExpression.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b728.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42b72e.  v0:= v1.`org.mozilla.javascript.ast.ConditionalExpression.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b732.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42b738.  v0:= v1.`org.mozilla.javascript.ast.ConditionalExpression.e` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b73c.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42b742.  return @kind void;
}
