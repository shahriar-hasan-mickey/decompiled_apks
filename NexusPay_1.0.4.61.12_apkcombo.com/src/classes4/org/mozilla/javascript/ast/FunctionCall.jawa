record `org.mozilla.javascript.ast.FunctionCall` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `java.util.List` `org.mozilla.javascript.ast.FunctionCall.arguments` @AccessFlag PROTECTED;
  `int` `org.mozilla.javascript.ast.FunctionCall.lp` @AccessFlag PROTECTED;
  `int` `org.mozilla.javascript.ast.FunctionCall.rp` @AccessFlag PROTECTED;
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.FunctionCall.target` @AccessFlag PROTECTED;
}
global `java.util.List` `@@org.mozilla.javascript.ast.FunctionCall.NO_ARGS` @AccessFlag PROTECTED_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/mozilla/javascript/ast/FunctionCall;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L42c7f0.  v0:= new `java.util.ArrayList`;
  #L42c7f4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L42c7fa.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L42c800.  v0:= temp @kind object;
  #L42c802.  `@@org.mozilla.javascript.ast.FunctionCall.NO_ARGS` @type ^`java.util.List` := v0 @kind object;
  #L42c806.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.FunctionCall` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42c818.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L42c81e.  v0:= -1I;
  #L42c820.  v1.`org.mozilla.javascript.ast.FunctionCall.lp` @type ^`int` := v0;
  #L42c824.  v1.`org.mozilla.javascript.ast.FunctionCall.rp` @type ^`int` := v0;
  #L42c828.  v0:= 38I;
  #L42c82c.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42c830.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.FunctionCall` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42c844.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(I)V` @kind direct;
  #L42c84a.  v1:= -1I;
  #L42c84c.  v0.`org.mozilla.javascript.ast.FunctionCall.lp` @type ^`int` := v1;
  #L42c850.  v0.`org.mozilla.javascript.ast.FunctionCall.rp` @type ^`int` := v1;
  #L42c854.  v1:= 38I;
  #L42c858.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42c85c.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.FunctionCall` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42c870.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L42c876.  v1:= -1I;
  #L42c878.  v0.`org.mozilla.javascript.ast.FunctionCall.lp` @type ^`int` := v1;
  #L42c87c.  v0.`org.mozilla.javascript.ast.FunctionCall.rp` @type ^`int` := v1;
  #L42c880.  v1:= 38I;
  #L42c884.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42c888.  return @kind void;
}
procedure `void` `addArgument`(`org.mozilla.javascript.ast.FunctionCall` v1 @kind this, `org.mozilla.javascript.ast.AstNode` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.addArgument:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c89c.  call `assertNotNull`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42c8a2.  v0:= v1.`org.mozilla.javascript.ast.FunctionCall.arguments` @type ^`java.util.List` @kind object;
  #L42c8a6.  if v0 != 0 then goto L42c8b8;
  #L42c8aa.  v0:= new `java.util.ArrayList`;
  #L42c8ae.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L42c8b4.  v1.`org.mozilla.javascript.ast.FunctionCall.arguments` @type ^`java.util.List` := v0 @kind object;
  #L42c8b8.  v0:= v1.`org.mozilla.javascript.ast.FunctionCall.arguments` @type ^`java.util.List` @kind object;
  #L42c8bc.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L42c8c2.  call `setParent`(v2, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42c8c8.  return @kind void;
}
procedure `java.util.List` `getArguments`(`org.mozilla.javascript.ast.FunctionCall` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.getArguments:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c7b8.  v0:= v1.`org.mozilla.javascript.ast.FunctionCall.arguments` @type ^`java.util.List` @kind object;
  #L42c7bc.  if v0 == 0 then goto L42c7c2;
  #L42c7c0.  goto L42c7c6;
  #L42c7c2.  v0:= `@@org.mozilla.javascript.ast.FunctionCall.NO_ARGS` @type ^`java.util.List` @kind object;
  #L42c7c6.  return v0 @kind object;
}
procedure `int` `getLp`(`org.mozilla.javascript.ast.FunctionCall` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.getLp:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c720.  v0:= v1.`org.mozilla.javascript.ast.FunctionCall.lp` @type ^`int`;
  #L42c724.  return v0;
}
procedure `int` `getRp`(`org.mozilla.javascript.ast.FunctionCall` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.getRp:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c738.  v0:= v1.`org.mozilla.javascript.ast.FunctionCall.rp` @type ^`int`;
  #L42c73c.  return v0;
}
procedure `org.mozilla.javascript.ast.AstNode` `getTarget`(`org.mozilla.javascript.ast.FunctionCall` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.getTarget:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c7d8.  v0:= v1.`org.mozilla.javascript.ast.FunctionCall.target` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42c7dc.  return v0 @kind object;
}
procedure `void` `setArguments`(`org.mozilla.javascript.ast.FunctionCall` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.setArguments:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c8dc.  if v2 != 0 then goto L42c8e8;
  #L42c8e0.  v2:= 0I;
  #L42c8e2.  v1.`org.mozilla.javascript.ast.FunctionCall.arguments` @type ^`java.util.List` := v2 @kind object;
  #L42c8e6.  goto L42c91e;
  #L42c8e8.  v0:= v1.`org.mozilla.javascript.ast.FunctionCall.arguments` @type ^`java.util.List` @kind object;
  #L42c8ec.  if v0 == 0 then goto L42c8f6;
  #L42c8f0.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L42c8f6.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42c8fc.  v2:= temp @kind object;
  #L42c8fe.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42c904.  v0:= temp;
  #L42c906.  if v0 == 0 then goto L42c91e;
  #L42c90a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42c910.  v0:= temp @kind object;
  #L42c912.  v0:= (`org.mozilla.javascript.ast.AstNode`) v0 @kind object;
  #L42c916.  call `addArgument`(v1, v0) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.addArgument:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42c91c.  goto L42c8fe;
  #L42c91e.  return @kind void;
}
procedure `void` `setLp`(`org.mozilla.javascript.ast.FunctionCall` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.setLp:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42c930.  v0.`org.mozilla.javascript.ast.FunctionCall.lp` @type ^`int` := v1;
  #L42c934.  return @kind void;
}
procedure `void` `setParens`(`org.mozilla.javascript.ast.FunctionCall` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.setParens:(II)V` @AccessFlag PUBLIC {
    temp;

  #L42c948.  v0.`org.mozilla.javascript.ast.FunctionCall.lp` @type ^`int` := v1;
  #L42c94c.  v0.`org.mozilla.javascript.ast.FunctionCall.rp` @type ^`int` := v2;
  #L42c950.  return @kind void;
}
procedure `void` `setRp`(`org.mozilla.javascript.ast.FunctionCall` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.setRp:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42c964.  v0.`org.mozilla.javascript.ast.FunctionCall.rp` @type ^`int` := v1;
  #L42c968.  return @kind void;
}
procedure `void` `setTarget`(`org.mozilla.javascript.ast.FunctionCall` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.setTarget:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L42c97c.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42c982.  v0.`org.mozilla.javascript.ast.FunctionCall.target` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42c986.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42c98c.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.FunctionCall` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42c750.  v0:= new `java.lang.StringBuilder`;
  #L42c754.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42c75a.  call temp:= `makeIndent`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42c760.  v3:= temp @kind object;
  #L42c762.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c768.  v3:= v2.`org.mozilla.javascript.ast.FunctionCall.target` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42c76c.  v1:= 0I;
  #L42c76e.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42c774.  v3:= temp @kind object;
  #L42c776.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c77c.  v3:= "(" @kind object;
  #L42c780.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c786.  v3:= v2.`org.mozilla.javascript.ast.FunctionCall.arguments` @type ^`java.util.List` @kind object;
  #L42c78a.  if v3 == 0 then goto L42c794;
  #L42c78e.  call `printList`(v2, v3, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.printList:(Ljava/util/List;Ljava/lang/StringBuilder;)V` @kind virtual;
  #L42c794.  v3:= ")" @kind object;
  #L42c798.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c79e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42c7a4.  v3:= temp @kind object;
  #L42c7a6.  return v3 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.FunctionCall` v2 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42c9a0.  call temp:= `visit`(v3, v2) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L42c9a6.  v0:= temp;
  #L42c9a8.  if v0 == 0 then goto L42c9e6;
  #L42c9ac.  v0:= v2.`org.mozilla.javascript.ast.FunctionCall.target` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42c9b0.  call `visit`(v0, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42c9b6.  call temp:= `getArguments`(v2) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.getArguments:()Ljava/util/List;` @kind virtual;
  #L42c9bc.  v0:= temp @kind object;
  #L42c9be.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42c9c4.  v0:= temp @kind object;
  #L42c9c6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42c9cc.  v1:= temp;
  #L42c9ce.  if v1 == 0 then goto L42c9e6;
  #L42c9d2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42c9d8.  v1:= temp @kind object;
  #L42c9da.  v1:= (`org.mozilla.javascript.ast.AstNode`) v1 @kind object;
  #L42c9de.  call `visit`(v1, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42c9e4.  goto L42c9c6;
  #L42c9e6.  return @kind void;
}
