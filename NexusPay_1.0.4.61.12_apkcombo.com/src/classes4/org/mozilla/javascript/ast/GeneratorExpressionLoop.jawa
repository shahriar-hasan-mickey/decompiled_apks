record `org.mozilla.javascript.ast.GeneratorExpressionLoop` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.ForInLoop` @kind class {
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.GeneratorExpressionLoop` v0 @kind this) @signature `Lorg/mozilla/javascript/ast/GeneratorExpressionLoop;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42d29c.  call `<init>`(v0) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.<init>:()V` @kind direct;
  #L42d2a2.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.GeneratorExpressionLoop` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/GeneratorExpressionLoop;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42d2b4.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.<init>:(I)V` @kind direct;
  #L42d2ba.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.GeneratorExpressionLoop` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/GeneratorExpressionLoop;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42d2cc.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/ForInLoop;.<init>:(II)V` @kind direct;
  #L42d2d2.  return @kind void;
}
procedure `boolean` `isForEach`(`org.mozilla.javascript.ast.GeneratorExpressionLoop` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/GeneratorExpressionLoop;.isForEach:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d1ec.  v0:= 0I;
  #L42d1ee.  return v0;
}
procedure `void` `setIsForEach`(`org.mozilla.javascript.ast.GeneratorExpressionLoop` v1 @kind this, `boolean` v2 ) @signature `Lorg/mozilla/javascript/ast/GeneratorExpressionLoop;.setIsForEach:(Z)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d2e4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L42d2e8.  v0:= "this node type does not support for each" @kind object;
  #L42d2ec.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d2f2.  throw v2;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.GeneratorExpressionLoop` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/GeneratorExpressionLoop;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42d200.  v0:= new `java.lang.StringBuilder`;
  #L42d204.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42d20a.  call temp:= `makeIndent`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42d210.  v3:= temp @kind object;
  #L42d212.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d218.  v3:= " for " @kind object;
  #L42d21c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d222.  call temp:= `isForEach`(v2) @signature `Lorg/mozilla/javascript/ast/GeneratorExpressionLoop;.isForEach:()Z` @kind virtual;
  #L42d228.  v3:= temp;
  #L42d22a.  if v3 == 0 then goto L42d234;
  #L42d22e.  v3:= "each " @kind object;
  #L42d232.  goto L42d238;
  #L42d234.  v3:= "" @kind object;
  #L42d238.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d23e.  v3:= "(" @kind object;
  #L42d242.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d248.  v3:= v2.`org.mozilla.javascript.ast.ForInLoop.iterator` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d24c.  v1:= 0I;
  #L42d24e.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42d254.  v3:= temp @kind object;
  #L42d256.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d25c.  v3:= " in " @kind object;
  #L42d260.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d266.  v3:= v2.`org.mozilla.javascript.ast.ForInLoop.iteratedObject` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d26a.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42d270.  v3:= temp @kind object;
  #L42d272.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d278.  v3:= ")" @kind object;
  #L42d27c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42d282.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42d288.  v3:= temp @kind object;
  #L42d28a.  return v3 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.GeneratorExpressionLoop` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/GeneratorExpressionLoop;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d304.  call temp:= `visit`(v2, v1) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L42d30a.  v0:= temp;
  #L42d30c.  if v0 == 0 then goto L42d324;
  #L42d310.  v0:= v1.`org.mozilla.javascript.ast.ForInLoop.iterator` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d314.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42d31a.  v0:= v1.`org.mozilla.javascript.ast.ForInLoop.iteratedObject` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d31e.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42d324.  return @kind void;
}
