record `org.mozilla.javascript.ast.XmlLiteral` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `java.util.List` `org.mozilla.javascript.ast.XmlLiteral.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.XmlLiteral` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/XmlLiteral;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L432548.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L43254e.  v0:= new `java.util.ArrayList`;
  #L432552.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L432558.  v1.`org.mozilla.javascript.ast.XmlLiteral.c` @type ^`java.util.List` := v0 @kind object;
  #L43255c.  v0:= 145I;
  #L432560.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L432564.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.XmlLiteral` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/XmlLiteral;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L432578.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(I)V` @kind direct;
  #L43257e.  v1:= new `java.util.ArrayList`;
  #L432582.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L432588.  v0.`org.mozilla.javascript.ast.XmlLiteral.c` @type ^`java.util.List` := v1 @kind object;
  #L43258c.  v1:= 145I;
  #L432590.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L432594.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.XmlLiteral` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/XmlLiteral;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4325a8.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L4325ae.  v1:= new `java.util.ArrayList`;
  #L4325b2.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4325b8.  v0.`org.mozilla.javascript.ast.XmlLiteral.c` @type ^`java.util.List` := v1 @kind object;
  #L4325bc.  v1:= 145I;
  #L4325c0.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L4325c4.  return @kind void;
}
procedure `void` `addFragment`(`org.mozilla.javascript.ast.XmlLiteral` v1 @kind this, `org.mozilla.javascript.ast.XmlFragment` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/XmlLiteral;.addFragment:(Lorg/mozilla/javascript/ast/XmlFragment;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4325d8.  call `assertNotNull`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L4325de.  v0:= v1.`org.mozilla.javascript.ast.XmlLiteral.c` @type ^`java.util.List` @kind object;
  #L4325e2.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4325e8.  call `setParent`(v2, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L4325ee.  return @kind void;
}
procedure `java.util.List` `getFragments`(`org.mozilla.javascript.ast.XmlLiteral` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/XmlLiteral;.getFragments:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432530.  v0:= v1.`org.mozilla.javascript.ast.XmlLiteral.c` @type ^`java.util.List` @kind object;
  #L432534.  return v0 @kind object;
}
procedure `void` `setFragments`(`org.mozilla.javascript.ast.XmlLiteral` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/XmlLiteral;.setFragments:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432600.  call `assertNotNull`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L432606.  v0:= v1.`org.mozilla.javascript.ast.XmlLiteral.c` @type ^`java.util.List` @kind object;
  #L43260a.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L432610.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L432616.  v2:= temp @kind object;
  #L432618.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43261e.  v0:= temp;
  #L432620.  if v0 == 0 then goto L432638;
  #L432624.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43262a.  v0:= temp @kind object;
  #L43262c.  v0:= (`org.mozilla.javascript.ast.XmlFragment`) v0 @kind object;
  #L432630.  call `addFragment`(v1, v0) @signature `Lorg/mozilla/javascript/ast/XmlLiteral;.addFragment:(Lorg/mozilla/javascript/ast/XmlFragment;)V` @kind virtual;
  #L432636.  goto L432618;
  #L432638.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.XmlLiteral` v3 @kind this, `int` v4 ) @signature `Lorg/mozilla/javascript/ast/XmlLiteral;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4324d0.  v4:= new `java.lang.StringBuilder`;
  #L4324d4.  v0:= 250I;
  #L4324d8.  call `<init>`(v4, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L4324de.  v0:= v3.`org.mozilla.javascript.ast.XmlLiteral.c` @type ^`java.util.List` @kind object;
  #L4324e2.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4324e8.  v0:= temp @kind object;
  #L4324ea.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4324f0.  v1:= temp;
  #L4324f2.  if v1 == 0 then goto L432514;
  #L4324f6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4324fc.  v1:= temp @kind object;
  #L4324fe.  v1:= (`org.mozilla.javascript.ast.XmlFragment`) v1 @kind object;
  #L432502.  v2:= 0I;
  #L432504.  call temp:= `toSource`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L43250a.  v1:= temp @kind object;
  #L43250c.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L432512.  goto L4324ea;
  #L432514.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43251a.  v4:= temp @kind object;
  #L43251c.  return v4 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.XmlLiteral` v2 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/XmlLiteral;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43264c.  call temp:= `visit`(v3, v2) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L432652.  v0:= temp;
  #L432654.  if v0 == 0 then goto L432684;
  #L432658.  v0:= v2.`org.mozilla.javascript.ast.XmlLiteral.c` @type ^`java.util.List` @kind object;
  #L43265c.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L432662.  v0:= temp @kind object;
  #L432664.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43266a.  v1:= temp;
  #L43266c.  if v1 == 0 then goto L432684;
  #L432670.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L432676.  v1:= temp @kind object;
  #L432678.  v1:= (`org.mozilla.javascript.ast.XmlFragment`) v1 @kind object;
  #L43267c.  call `visit`(v1, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L432682.  goto L432664;
  #L432684.  return @kind void;
}
