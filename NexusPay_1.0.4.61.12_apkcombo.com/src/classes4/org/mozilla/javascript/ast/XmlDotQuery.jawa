record `org.mozilla.javascript.ast.XmlDotQuery` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.InfixExpression` @kind class {
  `int` `org.mozilla.javascript.ast.XmlDotQuery.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.XmlDotQuery` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/XmlDotQuery;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L432088.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.<init>:()V` @kind direct;
  #L43208e.  v0:= -1I;
  #L432090.  v1.`org.mozilla.javascript.ast.XmlDotQuery.c` @type ^`int` := v0;
  #L432094.  v0:= 146I;
  #L432098.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L43209c.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.XmlDotQuery` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/XmlDotQuery;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4320b0.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.<init>:(I)V` @kind direct;
  #L4320b6.  v1:= -1I;
  #L4320b8.  v0.`org.mozilla.javascript.ast.XmlDotQuery.c` @type ^`int` := v1;
  #L4320bc.  v1:= 146I;
  #L4320c0.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L4320c4.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.XmlDotQuery` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/XmlDotQuery;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4320d8.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.<init>:(II)V` @kind direct;
  #L4320de.  v1:= -1I;
  #L4320e0.  v0.`org.mozilla.javascript.ast.XmlDotQuery.c` @type ^`int` := v1;
  #L4320e4.  v1:= 146I;
  #L4320e8.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L4320ec.  return @kind void;
}
procedure `int` `getRp`(`org.mozilla.javascript.ast.XmlDotQuery` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/XmlDotQuery;.getRp:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431ffc.  v0:= v1.`org.mozilla.javascript.ast.XmlDotQuery.c` @type ^`int`;
  #L432000.  return v0;
}
procedure `void` `setRp`(`org.mozilla.javascript.ast.XmlDotQuery` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/XmlDotQuery;.setRp:(I)V` @AccessFlag PUBLIC {
    temp;

  #L432100.  v0.`org.mozilla.javascript.ast.XmlDotQuery.c` @type ^`int` := v1;
  #L432104.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.XmlDotQuery` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/XmlDotQuery;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L432014.  v0:= new `java.lang.StringBuilder`;
  #L432018.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43201e.  call temp:= `makeIndent`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L432024.  v3:= temp @kind object;
  #L432026.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43202c.  call temp:= `getLeft`(v2) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.getLeft:()Lorg/mozilla/javascript/ast/AstNode;` @kind virtual;
  #L432032.  v3:= temp @kind object;
  #L432034.  v1:= 0I;
  #L432036.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L43203c.  v3:= temp @kind object;
  #L43203e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L432044.  v3:= ".(" @kind object;
  #L432048.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43204e.  call temp:= `getRight`(v2) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.getRight:()Lorg/mozilla/javascript/ast/AstNode;` @kind virtual;
  #L432054.  v3:= temp @kind object;
  #L432056.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L43205c.  v3:= temp @kind object;
  #L43205e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L432064.  v3:= ")" @kind object;
  #L432068.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43206e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L432074.  v3:= temp @kind object;
  #L432076.  return v3 @kind object;
}
