record `org.mozilla.javascript.ast.Jump` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `org.mozilla.javascript.Node` `org.mozilla.javascript.ast.Jump.c` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.Jump` `org.mozilla.javascript.ast.Jump.d` @AccessFlag PRIVATE;
  `org.mozilla.javascript.Node` `org.mozilla.javascript.ast.Jump.target` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.Jump` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/Jump;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42de3c.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L42de42.  v0:= -1I;
  #L42de44.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42de48.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.Jump` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/Jump;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42de5c.  call `<init>`(v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L42de62.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42de66.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.Jump` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/Jump;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42de78.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/Jump;.<init>:(I)V` @kind direct;
  #L42de7e.  call `setLineno`(v0, v2) @signature `Lorg/mozilla/javascript/Node;.setLineno:(I)V` @kind virtual;
  #L42de84.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.Jump` v0 @kind this, `int` v1 , `org.mozilla.javascript.Node` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/Jump;.<init>:(ILorg/mozilla/javascript/Node;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42de98.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/Jump;.<init>:(I)V` @kind direct;
  #L42de9e.  call `addChildToBack`(v0, v2) @signature `Lorg/mozilla/javascript/Node;.addChildToBack:(Lorg/mozilla/javascript/Node;)V` @kind virtual;
  #L42dea4.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.Jump` v0 @kind this, `int` v1 , `org.mozilla.javascript.Node` v2 @kind object, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/Jump;.<init>:(ILorg/mozilla/javascript/Node;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42deb8.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/Jump;.<init>:(ILorg/mozilla/javascript/Node;)V` @kind direct;
  #L42debe.  call `setLineno`(v0, v3) @signature `Lorg/mozilla/javascript/Node;.setLineno:(I)V` @kind virtual;
  #L42dec4.  return @kind void;
}
procedure `org.mozilla.javascript.Node` `getContinue`(`org.mozilla.javascript.ast.Jump` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/Jump;.getContinue:()Lorg/mozilla/javascript/Node;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42dd6c.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L42dd70.  v1:= 132I;
  #L42dd74.  if v0 == v1 then goto L42dd7e;
  #L42dd78.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42dd7e.  v0:= v2.`org.mozilla.javascript.ast.Jump.c` @type ^`org.mozilla.javascript.Node` @kind object;
  #L42dd82.  return v0 @kind object;
}
procedure `org.mozilla.javascript.Node` `getDefault`(`org.mozilla.javascript.ast.Jump` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/Jump;.getDefault:()Lorg/mozilla/javascript/Node;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42dd94.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L42dd98.  v1:= 114I;
  #L42dd9c.  if v0 == v1 then goto L42dda6;
  #L42dda0.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42dda6.  v0:= v2.`org.mozilla.javascript.ast.Jump.c` @type ^`org.mozilla.javascript.Node` @kind object;
  #L42ddaa.  return v0 @kind object;
}
procedure `org.mozilla.javascript.Node` `getFinally`(`org.mozilla.javascript.ast.Jump` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/Jump;.getFinally:()Lorg/mozilla/javascript/Node;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ddbc.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L42ddc0.  v1:= 81I;
  #L42ddc4.  if v0 == v1 then goto L42ddce;
  #L42ddc8.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42ddce.  v0:= v2.`org.mozilla.javascript.ast.Jump.c` @type ^`org.mozilla.javascript.Node` @kind object;
  #L42ddd2.  return v0 @kind object;
}
procedure `org.mozilla.javascript.ast.Jump` `getJumpStatement`(`org.mozilla.javascript.ast.Jump` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/Jump;.getJumpStatement:()Lorg/mozilla/javascript/ast/Jump;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42dde4.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L42dde8.  v1:= 120I;
  #L42ddec.  if v0 == v1 then goto L42ddfe;
  #L42ddf0.  v1:= 121I;
  #L42ddf4.  if v0 == v1 then goto L42ddfe;
  #L42ddf8.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42ddfe.  v0:= v2.`org.mozilla.javascript.ast.Jump.d` @type ^`org.mozilla.javascript.ast.Jump` @kind object;
  #L42de02.  return v0 @kind object;
}
procedure `org.mozilla.javascript.ast.Jump` `getLoop`(`org.mozilla.javascript.ast.Jump` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/Jump;.getLoop:()Lorg/mozilla/javascript/ast/Jump;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42de14.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L42de18.  v1:= 130I;
  #L42de1c.  if v0 == v1 then goto L42de26;
  #L42de20.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42de26.  v0:= v2.`org.mozilla.javascript.ast.Jump.d` @type ^`org.mozilla.javascript.ast.Jump` @kind object;
  #L42de2a.  return v0 @kind object;
}
procedure `void` `setContinue`(`org.mozilla.javascript.ast.Jump` v2 @kind this, `org.mozilla.javascript.Node` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/Jump;.setContinue:(Lorg/mozilla/javascript/Node;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ded8.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L42dedc.  v1:= 132I;
  #L42dee0.  if v0 == v1 then goto L42deea;
  #L42dee4.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42deea.  call temp:= `getType`(v3) @signature `Lorg/mozilla/javascript/Node;.getType:()I` @kind virtual;
  #L42def0.  v0:= temp;
  #L42def2.  v1:= 131I;
  #L42def6.  if v0 == v1 then goto L42df00;
  #L42defa.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42df00.  v0:= v2.`org.mozilla.javascript.ast.Jump.c` @type ^`org.mozilla.javascript.Node` @kind object;
  #L42df04.  if v0 == 0 then goto L42df0e;
  #L42df08.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42df0e.  v2.`org.mozilla.javascript.ast.Jump.c` @type ^`org.mozilla.javascript.Node` := v3 @kind object;
  #L42df12.  return @kind void;
}
procedure `void` `setDefault`(`org.mozilla.javascript.ast.Jump` v2 @kind this, `org.mozilla.javascript.Node` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/Jump;.setDefault:(Lorg/mozilla/javascript/Node;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42df24.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L42df28.  v1:= 114I;
  #L42df2c.  if v0 == v1 then goto L42df36;
  #L42df30.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42df36.  call temp:= `getType`(v3) @signature `Lorg/mozilla/javascript/Node;.getType:()I` @kind virtual;
  #L42df3c.  v0:= temp;
  #L42df3e.  v1:= 131I;
  #L42df42.  if v0 == v1 then goto L42df4c;
  #L42df46.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42df4c.  v0:= v2.`org.mozilla.javascript.ast.Jump.c` @type ^`org.mozilla.javascript.Node` @kind object;
  #L42df50.  if v0 == 0 then goto L42df5a;
  #L42df54.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42df5a.  v2.`org.mozilla.javascript.ast.Jump.c` @type ^`org.mozilla.javascript.Node` := v3 @kind object;
  #L42df5e.  return @kind void;
}
procedure `void` `setFinally`(`org.mozilla.javascript.ast.Jump` v2 @kind this, `org.mozilla.javascript.Node` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/Jump;.setFinally:(Lorg/mozilla/javascript/Node;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42df70.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L42df74.  v1:= 81I;
  #L42df78.  if v0 == v1 then goto L42df82;
  #L42df7c.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42df82.  call temp:= `getType`(v3) @signature `Lorg/mozilla/javascript/Node;.getType:()I` @kind virtual;
  #L42df88.  v0:= temp;
  #L42df8a.  v1:= 131I;
  #L42df8e.  if v0 == v1 then goto L42df98;
  #L42df92.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42df98.  v0:= v2.`org.mozilla.javascript.ast.Jump.c` @type ^`org.mozilla.javascript.Node` @kind object;
  #L42df9c.  if v0 == 0 then goto L42dfa6;
  #L42dfa0.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42dfa6.  v2.`org.mozilla.javascript.ast.Jump.c` @type ^`org.mozilla.javascript.Node` := v3 @kind object;
  #L42dfaa.  return @kind void;
}
procedure `void` `setJumpStatement`(`org.mozilla.javascript.ast.Jump` v2 @kind this, `org.mozilla.javascript.ast.Jump` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/Jump;.setJumpStatement:(Lorg/mozilla/javascript/ast/Jump;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42dfbc.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L42dfc0.  v1:= 120I;
  #L42dfc4.  if v0 == v1 then goto L42dfd6;
  #L42dfc8.  v1:= 121I;
  #L42dfcc.  if v0 == v1 then goto L42dfd6;
  #L42dfd0.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42dfd6.  if v3 != 0 then goto L42dfe0;
  #L42dfda.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42dfe0.  v0:= v2.`org.mozilla.javascript.ast.Jump.d` @type ^`org.mozilla.javascript.ast.Jump` @kind object;
  #L42dfe4.  if v0 == 0 then goto L42dfee;
  #L42dfe8.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42dfee.  v2.`org.mozilla.javascript.ast.Jump.d` @type ^`org.mozilla.javascript.ast.Jump` := v3 @kind object;
  #L42dff2.  return @kind void;
}
procedure `void` `setLoop`(`org.mozilla.javascript.ast.Jump` v2 @kind this, `org.mozilla.javascript.ast.Jump` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/Jump;.setLoop:(Lorg/mozilla/javascript/ast/Jump;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42e004.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L42e008.  v1:= 130I;
  #L42e00c.  if v0 == v1 then goto L42e016;
  #L42e010.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42e016.  if v3 != 0 then goto L42e020;
  #L42e01a.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42e020.  v0:= v2.`org.mozilla.javascript.ast.Jump.d` @type ^`org.mozilla.javascript.ast.Jump` @kind object;
  #L42e024.  if v0 == 0 then goto L42e02e;
  #L42e028.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42e02e.  v2.`org.mozilla.javascript.ast.Jump.d` @type ^`org.mozilla.javascript.ast.Jump` := v3 @kind object;
  #L42e032.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.Jump` v1 @kind this, `int` v2 ) @signature `Lorg/mozilla/javascript/ast/Jump;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42dd48.  v2:= new `java.lang.UnsupportedOperationException`;
  #L42dd4c.  call temp:= `toString`(v1) @signature `Lorg/mozilla/javascript/Node;.toString:()Ljava/lang/String;` @kind virtual;
  #L42dd52.  v0:= temp @kind object;
  #L42dd54.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42dd5a.  throw v2;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.Jump` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/Jump;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e044.  v2:= new `java.lang.UnsupportedOperationException`;
  #L42e048.  call temp:= `toString`(v1) @signature `Lorg/mozilla/javascript/Node;.toString:()Ljava/lang/String;` @kind virtual;
  #L42e04e.  v0:= temp @kind object;
  #L42e050.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42e056.  throw v2;
}
