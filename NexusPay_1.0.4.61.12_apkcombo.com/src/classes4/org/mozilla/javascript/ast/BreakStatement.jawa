record `org.mozilla.javascript.ast.BreakStatement` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.Jump` @kind class {
  `org.mozilla.javascript.ast.Name` `org.mozilla.javascript.ast.BreakStatement.e` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.BreakStatement.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.BreakStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/BreakStatement;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42b040.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/Jump;.<init>:()V` @kind direct;
  #L42b046.  v0:= 120I;
  #L42b04a.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42b04e.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.BreakStatement` v1 @kind this, `int` v2 ) @signature `Lorg/mozilla/javascript/ast/BreakStatement;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42b060.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/Jump;.<init>:()V` @kind direct;
  #L42b066.  v0:= 120I;
  #L42b06a.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42b06e.  v1.`org.mozilla.javascript.ast.AstNode.position` @type ^`int` := v2;
  #L42b072.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.BreakStatement` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/mozilla/javascript/ast/BreakStatement;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42b084.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/Jump;.<init>:()V` @kind direct;
  #L42b08a.  v0:= 120I;
  #L42b08e.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42b092.  v1.`org.mozilla.javascript.ast.AstNode.position` @type ^`int` := v2;
  #L42b096.  v1.`org.mozilla.javascript.ast.AstNode.length` @type ^`int` := v3;
  #L42b09a.  return @kind void;
}
procedure `org.mozilla.javascript.ast.Name` `getBreakLabel`(`org.mozilla.javascript.ast.BreakStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/BreakStatement;.getBreakLabel:()Lorg/mozilla/javascript/ast/Name;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b028.  v0:= v1.`org.mozilla.javascript.ast.BreakStatement.e` @type ^`org.mozilla.javascript.ast.Name` @kind object;
  #L42b02c.  return v0 @kind object;
}
procedure `org.mozilla.javascript.ast.AstNode` `getBreakTarget`(`org.mozilla.javascript.ast.BreakStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/BreakStatement;.getBreakTarget:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b010.  v0:= v1.`org.mozilla.javascript.ast.BreakStatement.f` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b014.  return v0 @kind object;
}
procedure `void` `setBreakLabel`(`org.mozilla.javascript.ast.BreakStatement` v0 @kind this, `org.mozilla.javascript.ast.Name` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/BreakStatement;.setBreakLabel:(Lorg/mozilla/javascript/ast/Name;)V` @AccessFlag PUBLIC {
    temp;

  #L42b0ac.  v0.`org.mozilla.javascript.ast.BreakStatement.e` @type ^`org.mozilla.javascript.ast.Name` := v1 @kind object;
  #L42b0b0.  if v1 == 0 then goto L42b0ba;
  #L42b0b4.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42b0ba.  return @kind void;
}
procedure `void` `setBreakTarget`(`org.mozilla.javascript.ast.BreakStatement` v0 @kind this, `org.mozilla.javascript.ast.Jump` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/BreakStatement;.setBreakTarget:(Lorg/mozilla/javascript/ast/Jump;)V` @AccessFlag PUBLIC {
    temp;

  #L42b0cc.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42b0d2.  v0.`org.mozilla.javascript.ast.BreakStatement.f` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42b0d6.  call `setJumpStatement`(v0, v1) @signature `Lorg/mozilla/javascript/ast/Jump;.setJumpStatement:(Lorg/mozilla/javascript/ast/Jump;)V` @kind virtual;
  #L42b0dc.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.BreakStatement` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/BreakStatement;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42afa4.  v0:= new `java.lang.StringBuilder`;
  #L42afa8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42afae.  call temp:= `makeIndent`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42afb4.  v3:= temp @kind object;
  #L42afb6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42afbc.  v3:= "break" @kind object;
  #L42afc0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42afc6.  v3:= v2.`org.mozilla.javascript.ast.BreakStatement.e` @type ^`org.mozilla.javascript.ast.Name` @kind object;
  #L42afca.  if v3 == 0 then goto L42afec;
  #L42afce.  v3:= " " @kind object;
  #L42afd2.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42afd8.  v3:= v2.`org.mozilla.javascript.ast.BreakStatement.e` @type ^`org.mozilla.javascript.ast.Name` @kind object;
  #L42afdc.  v1:= 0I;
  #L42afde.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/Name;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42afe4.  v3:= temp @kind object;
  #L42afe6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42afec.  v3:= ";\n" @kind object;
  #L42aff0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42aff6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42affc.  v3:= temp @kind object;
  #L42affe.  return v3 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.BreakStatement` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/BreakStatement;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b0f0.  call temp:= `visit`(v2, v1) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L42b0f6.  v0:= temp;
  #L42b0f8.  if v0 == 0 then goto L42b10a;
  #L42b0fc.  v0:= v1.`org.mozilla.javascript.ast.BreakStatement.e` @type ^`org.mozilla.javascript.ast.Name` @kind object;
  #L42b100.  if v0 == 0 then goto L42b10a;
  #L42b104.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/Name;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42b10a.  return @kind void;
}
