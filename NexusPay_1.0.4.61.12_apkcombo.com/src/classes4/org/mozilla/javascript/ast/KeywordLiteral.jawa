record `org.mozilla.javascript.ast.KeywordLiteral` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.KeywordLiteral` v0 @kind this) @signature `Lorg/mozilla/javascript/ast/KeywordLiteral;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42e1f4.  call `<init>`(v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L42e1fa.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.KeywordLiteral` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/KeywordLiteral;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42e20c.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(I)V` @kind direct;
  #L42e212.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.KeywordLiteral` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/KeywordLiteral;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42e224.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L42e22a.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.KeywordLiteral` v0 @kind this, `int` v1 , `int` v2 , `int` v3 ) @signature `Lorg/mozilla/javascript/ast/KeywordLiteral;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42e23c.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L42e242.  call temp:= `setType`(v0, v3) @signature `Lorg/mozilla/javascript/ast/KeywordLiteral;.setType:(I)Lorg/mozilla/javascript/ast/KeywordLiteral;` @kind virtual;
  #L42e248.  return @kind void;
}
procedure `boolean` `isBooleanLiteral`(`org.mozilla.javascript.ast.KeywordLiteral` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/KeywordLiteral;.isBooleanLiteral:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42e068.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L42e06c.  v1:= 45I;
  #L42e070.  if v0 == v1 then goto L42e082;
  #L42e074.  v1:= 44I;
  #L42e078.  if v0 != v1 then goto L42e07e;
  #L42e07c.  goto L42e082;
  #L42e07e.  v0:= 0I;
  #L42e080.  goto L42e084;
  #L42e082.  v0:= 1I;
  #L42e084.  return v0;
}
procedure `org.mozilla.javascript.Node` `setType`(`org.mozilla.javascript.ast.KeywordLiteral` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/KeywordLiteral;.setType:(I)Lorg/mozilla/javascript/Node;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42e168.  call temp:= `setType`(v0, v1) @signature `Lorg/mozilla/javascript/ast/KeywordLiteral;.setType:(I)Lorg/mozilla/javascript/ast/KeywordLiteral;` @kind virtual;
  #L42e16e.  v1:= temp @kind object;
  #L42e170.  return v1 @kind object;
}
procedure `org.mozilla.javascript.ast.KeywordLiteral` `setType`(`org.mozilla.javascript.ast.KeywordLiteral` v3 @kind this, `int` v4 ) @signature `Lorg/mozilla/javascript/ast/KeywordLiteral;.setType:(I)Lorg/mozilla/javascript/ast/KeywordLiteral;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42e184.  v0:= 43I;
  #L42e188.  if v4 == v0 then goto L42e1dc;
  #L42e18c.  v0:= 42I;
  #L42e190.  if v4 == v0 then goto L42e1dc;
  #L42e194.  v0:= 45I;
  #L42e198.  if v4 == v0 then goto L42e1dc;
  #L42e19c.  v0:= 44I;
  #L42e1a0.  if v4 == v0 then goto L42e1dc;
  #L42e1a4.  v0:= 160I;
  #L42e1a8.  if v4 != v0 then goto L42e1ae;
  #L42e1ac.  goto L42e1dc;
  #L42e1ae.  v0:= new `java.lang.IllegalArgumentException`;
  #L42e1b2.  v1:= new `java.lang.StringBuilder`;
  #L42e1b6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42e1bc.  v2:= "Invalid node type: " @kind object;
  #L42e1c0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42e1c6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42e1cc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42e1d2.  v4:= temp @kind object;
  #L42e1d4.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42e1da.  throw v0;
  #L42e1dc.  v3.`org.mozilla.javascript.Node.type` @type ^`int` := v4;
  #L42e1e0.  return v3 @kind object;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.KeywordLiteral` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/KeywordLiteral;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42e098.  v0:= new `java.lang.StringBuilder`;
  #L42e09c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42e0a2.  call temp:= `makeIndent`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42e0a8.  v3:= temp @kind object;
  #L42e0aa.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42e0b0.  call temp:= `getType`(v2) @signature `Lorg/mozilla/javascript/Node;.getType:()I` @kind virtual;
  #L42e0b6.  v3:= temp;
  #L42e0b8.  v1:= 160I;
  #L42e0bc.  if v3 == v1 then goto L42e12c;
  #L42e0c0.  goto L42e140;
  #L42e0c6.  v3:= new `java.lang.IllegalStateException`;
  #L42e0ca.  v0:= new `java.lang.StringBuilder`;
  #L42e0ce.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42e0d4.  v1:= "Invalid keyword literal type: " @kind object;
  #L42e0d8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42e0de.  call temp:= `getType`(v2) @signature `Lorg/mozilla/javascript/Node;.getType:()I` @kind virtual;
  #L42e0e4.  v1:= temp;
  #L42e0e6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42e0ec.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42e0f2.  v0:= temp @kind object;
  #L42e0f4.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42e0fa.  throw v3;
  #L42e0fc.  v3:= "true" @kind object;
  #L42e100.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42e106.  goto L42e136;
  #L42e108.  v3:= "false" @kind object;
  #L42e10c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42e112.  goto L42e136;
  #L42e114.  v3:= "this" @kind object;
  #L42e118.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42e11e.  goto L42e136;
  #L42e120.  v3:= "null" @kind object;
  #L42e124.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42e12a.  goto L42e136;
  #L42e12c.  v3:= "debugger;\n" @kind object;
  #L42e130.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42e136.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42e13c.  v3:= temp @kind object;
  #L42e13e.  return v3 @kind object;
  #L42e140.  switch v3
                  | 42 => goto L42e120
                  | 43 => goto L42e114
                  | 44 => goto L42e108
                  | 45 => goto L42e0fc
                  | else => goto L42e0c6;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.KeywordLiteral` v0 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/KeywordLiteral;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;

  #L42e25c.  call temp:= `visit`(v1, v0) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L42e262.  return @kind void;
}
