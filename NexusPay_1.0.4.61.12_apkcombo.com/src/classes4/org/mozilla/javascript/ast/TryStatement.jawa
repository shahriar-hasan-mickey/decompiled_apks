record `org.mozilla.javascript.ast.TryStatement` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.TryStatement.c` @AccessFlag PRIVATE;
  `java.util.List` `org.mozilla.javascript.ast.TryStatement.d` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.TryStatement.e` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.TryStatement.f` @AccessFlag PRIVATE;
}
global `java.util.List` `@@org.mozilla.javascript.ast.TryStatement.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/mozilla/javascript/ast/TryStatement;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4312fc.  v0:= new `java.util.ArrayList`;
  #L431300.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L431306.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L43130c.  v0:= temp @kind object;
  #L43130e.  `@@org.mozilla.javascript.ast.TryStatement.g` @type ^`java.util.List` := v0 @kind object;
  #L431312.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.TryStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/TryStatement;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L431324.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L43132a.  v0:= -1I;
  #L43132c.  v1.`org.mozilla.javascript.ast.TryStatement.f` @type ^`int` := v0;
  #L431330.  v0:= 81I;
  #L431334.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L431338.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.TryStatement` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/TryStatement;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43134c.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(I)V` @kind direct;
  #L431352.  v1:= -1I;
  #L431354.  v0.`org.mozilla.javascript.ast.TryStatement.f` @type ^`int` := v1;
  #L431358.  v1:= 81I;
  #L43135c.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L431360.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.TryStatement` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/TryStatement;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L431374.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L43137a.  v1:= -1I;
  #L43137c.  v0.`org.mozilla.javascript.ast.TryStatement.f` @type ^`int` := v1;
  #L431380.  v1:= 81I;
  #L431384.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L431388.  return @kind void;
}
procedure `void` `addCatchClause`(`org.mozilla.javascript.ast.TryStatement` v1 @kind this, `org.mozilla.javascript.ast.CatchClause` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/TryStatement;.addCatchClause:(Lorg/mozilla/javascript/ast/CatchClause;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43139c.  call `assertNotNull`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L4313a2.  v0:= v1.`org.mozilla.javascript.ast.TryStatement.d` @type ^`java.util.List` @kind object;
  #L4313a6.  if v0 != 0 then goto L4313b8;
  #L4313aa.  v0:= new `java.util.ArrayList`;
  #L4313ae.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4313b4.  v1.`org.mozilla.javascript.ast.TryStatement.d` @type ^`java.util.List` := v0 @kind object;
  #L4313b8.  v0:= v1.`org.mozilla.javascript.ast.TryStatement.d` @type ^`java.util.List` @kind object;
  #L4313bc.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4313c2.  call `setParent`(v2, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L4313c8.  return @kind void;
}
procedure `java.util.List` `getCatchClauses`(`org.mozilla.javascript.ast.TryStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/TryStatement;.getCatchClauses:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4312ac.  v0:= v1.`org.mozilla.javascript.ast.TryStatement.d` @type ^`java.util.List` @kind object;
  #L4312b0.  if v0 == 0 then goto L4312b6;
  #L4312b4.  goto L4312ba;
  #L4312b6.  v0:= `@@org.mozilla.javascript.ast.TryStatement.g` @type ^`java.util.List` @kind object;
  #L4312ba.  return v0 @kind object;
}
procedure `org.mozilla.javascript.ast.AstNode` `getFinallyBlock`(`org.mozilla.javascript.ast.TryStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/TryStatement;.getFinallyBlock:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4312cc.  v0:= v1.`org.mozilla.javascript.ast.TryStatement.e` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L4312d0.  return v0 @kind object;
}
procedure `int` `getFinallyPosition`(`org.mozilla.javascript.ast.TryStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/TryStatement;.getFinallyPosition:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4311dc.  v0:= v1.`org.mozilla.javascript.ast.TryStatement.f` @type ^`int`;
  #L4311e0.  return v0;
}
procedure `org.mozilla.javascript.ast.AstNode` `getTryBlock`(`org.mozilla.javascript.ast.TryStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/TryStatement;.getTryBlock:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4312e4.  v0:= v1.`org.mozilla.javascript.ast.TryStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L4312e8.  return v0 @kind object;
}
procedure `void` `setCatchClauses`(`org.mozilla.javascript.ast.TryStatement` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/TryStatement;.setCatchClauses:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4313dc.  if v2 != 0 then goto L4313e8;
  #L4313e0.  v2:= 0I;
  #L4313e2.  v1.`org.mozilla.javascript.ast.TryStatement.d` @type ^`java.util.List` := v2 @kind object;
  #L4313e6.  goto L43141e;
  #L4313e8.  v0:= v1.`org.mozilla.javascript.ast.TryStatement.d` @type ^`java.util.List` @kind object;
  #L4313ec.  if v0 == 0 then goto L4313f6;
  #L4313f0.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4313f6.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4313fc.  v2:= temp @kind object;
  #L4313fe.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L431404.  v0:= temp;
  #L431406.  if v0 == 0 then goto L43141e;
  #L43140a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L431410.  v0:= temp @kind object;
  #L431412.  v0:= (`org.mozilla.javascript.ast.CatchClause`) v0 @kind object;
  #L431416.  call `addCatchClause`(v1, v0) @signature `Lorg/mozilla/javascript/ast/TryStatement;.addCatchClause:(Lorg/mozilla/javascript/ast/CatchClause;)V` @kind virtual;
  #L43141c.  goto L4313fe;
  #L43141e.  return @kind void;
}
procedure `void` `setFinallyBlock`(`org.mozilla.javascript.ast.TryStatement` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/TryStatement;.setFinallyBlock:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L431430.  v0.`org.mozilla.javascript.ast.TryStatement.e` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L431434.  if v1 == 0 then goto L43143e;
  #L431438.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L43143e.  return @kind void;
}
procedure `void` `setFinallyPosition`(`org.mozilla.javascript.ast.TryStatement` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/TryStatement;.setFinallyPosition:(I)V` @AccessFlag PUBLIC {
    temp;

  #L431450.  v0.`org.mozilla.javascript.ast.TryStatement.f` @type ^`int` := v1;
  #L431454.  return @kind void;
}
procedure `void` `setTryBlock`(`org.mozilla.javascript.ast.TryStatement` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/TryStatement;.setTryBlock:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L431468.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L43146e.  v0.`org.mozilla.javascript.ast.TryStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L431472.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L431478.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.TryStatement` v3 @kind this, `int` v4 ) @signature `Lorg/mozilla/javascript/ast/TryStatement;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4311f4.  v0:= new `java.lang.StringBuilder`;
  #L4311f8.  v1:= 250I;
  #L4311fc.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L431202.  call temp:= `makeIndent`(v3, v4) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L431208.  v1:= temp @kind object;
  #L43120a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431210.  v1:= "try " @kind object;
  #L431214.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43121a.  v1:= v3.`org.mozilla.javascript.ast.TryStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L43121e.  call temp:= `toSource`(v1, v4) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L431224.  v1:= temp @kind object;
  #L431226.  call temp:= `trim`(v1) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L43122c.  v1:= temp @kind object;
  #L43122e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431234.  call temp:= `getCatchClauses`(v3) @signature `Lorg/mozilla/javascript/ast/TryStatement;.getCatchClauses:()Ljava/util/List;` @kind virtual;
  #L43123a.  v1:= temp @kind object;
  #L43123c.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L431242.  v1:= temp @kind object;
  #L431244.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43124a.  v2:= temp;
  #L43124c.  if v2 == 0 then goto L43126c;
  #L431250.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L431256.  v2:= temp @kind object;
  #L431258.  v2:= (`org.mozilla.javascript.ast.CatchClause`) v2 @kind object;
  #L43125c.  call temp:= `toSource`(v2, v4) @signature `Lorg/mozilla/javascript/ast/CatchClause;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L431262.  v2:= temp @kind object;
  #L431264.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43126a.  goto L431244;
  #L43126c.  v1:= v3.`org.mozilla.javascript.ast.TryStatement.e` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431270.  if v1 == 0 then goto L431290;
  #L431274.  v1:= " finally " @kind object;
  #L431278.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43127e.  v1:= v3.`org.mozilla.javascript.ast.TryStatement.e` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431282.  call temp:= `toSource`(v1, v4) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L431288.  v4:= temp @kind object;
  #L43128a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431290.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L431296.  v4:= temp @kind object;
  #L431298.  return v4 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.TryStatement` v2 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/TryStatement;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43148c.  call temp:= `visit`(v3, v2) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L431492.  v0:= temp;
  #L431494.  if v0 == 0 then goto L4314e0;
  #L431498.  v0:= v2.`org.mozilla.javascript.ast.TryStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L43149c.  call `visit`(v0, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L4314a2.  call temp:= `getCatchClauses`(v2) @signature `Lorg/mozilla/javascript/ast/TryStatement;.getCatchClauses:()Ljava/util/List;` @kind virtual;
  #L4314a8.  v0:= temp @kind object;
  #L4314aa.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4314b0.  v0:= temp @kind object;
  #L4314b2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4314b8.  v1:= temp;
  #L4314ba.  if v1 == 0 then goto L4314d2;
  #L4314be.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4314c4.  v1:= temp @kind object;
  #L4314c6.  v1:= (`org.mozilla.javascript.ast.CatchClause`) v1 @kind object;
  #L4314ca.  call `visit`(v1, v3) @signature `Lorg/mozilla/javascript/ast/CatchClause;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L4314d0.  goto L4314b2;
  #L4314d2.  v0:= v2.`org.mozilla.javascript.ast.TryStatement.e` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L4314d6.  if v0 == 0 then goto L4314e0;
  #L4314da.  call `visit`(v0, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L4314e0.  return @kind void;
}
