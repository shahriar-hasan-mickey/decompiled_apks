record `org.mozilla.javascript.ast.NewExpression` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.FunctionCall` @kind class {
  `org.mozilla.javascript.ast.ObjectLiteral` `org.mozilla.javascript.ast.NewExpression.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.NewExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/NewExpression;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42ec74.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.<init>:()V` @kind direct;
  #L42ec7a.  v0:= 30I;
  #L42ec7e.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42ec82.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.NewExpression` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/NewExpression;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42ec94.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.<init>:(I)V` @kind direct;
  #L42ec9a.  v1:= 30I;
  #L42ec9e.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42eca2.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.NewExpression` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/NewExpression;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42ecb4.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.<init>:(II)V` @kind direct;
  #L42ecba.  v1:= 30I;
  #L42ecbe.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42ecc2.  return @kind void;
}
procedure `org.mozilla.javascript.ast.ObjectLiteral` `getInitializer`(`org.mozilla.javascript.ast.NewExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/NewExpression;.getInitializer:()Lorg/mozilla/javascript/ast/ObjectLiteral;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42ec5c.  v0:= v1.`org.mozilla.javascript.ast.NewExpression.c` @type ^`org.mozilla.javascript.ast.ObjectLiteral` @kind object;
  #L42ec60.  return v0 @kind object;
}
procedure `void` `setInitializer`(`org.mozilla.javascript.ast.NewExpression` v0 @kind this, `org.mozilla.javascript.ast.ObjectLiteral` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/NewExpression;.setInitializer:(Lorg/mozilla/javascript/ast/ObjectLiteral;)V` @AccessFlag PUBLIC {
    temp;

  #L42ecd4.  v0.`org.mozilla.javascript.ast.NewExpression.c` @type ^`org.mozilla.javascript.ast.ObjectLiteral` := v1 @kind object;
  #L42ecd8.  if v1 == 0 then goto L42ece2;
  #L42ecdc.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42ece2.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.NewExpression` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/NewExpression;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ebc4.  v0:= new `java.lang.StringBuilder`;
  #L42ebc8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42ebce.  call temp:= `makeIndent`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42ebd4.  v3:= temp @kind object;
  #L42ebd6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ebdc.  v3:= "new " @kind object;
  #L42ebe0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ebe6.  v3:= v2.`org.mozilla.javascript.ast.FunctionCall.target` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42ebea.  v1:= 0I;
  #L42ebec.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42ebf2.  v3:= temp @kind object;
  #L42ebf4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ebfa.  v3:= "(" @kind object;
  #L42ebfe.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ec04.  v3:= v2.`org.mozilla.javascript.ast.FunctionCall.arguments` @type ^`java.util.List` @kind object;
  #L42ec08.  if v3 == 0 then goto L42ec12;
  #L42ec0c.  call `printList`(v2, v3, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.printList:(Ljava/util/List;Ljava/lang/StringBuilder;)V` @kind virtual;
  #L42ec12.  v3:= ")" @kind object;
  #L42ec16.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ec1c.  v3:= v2.`org.mozilla.javascript.ast.NewExpression.c` @type ^`org.mozilla.javascript.ast.ObjectLiteral` @kind object;
  #L42ec20.  if v3 == 0 then goto L42ec40;
  #L42ec24.  v3:= " " @kind object;
  #L42ec28.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ec2e.  v3:= v2.`org.mozilla.javascript.ast.NewExpression.c` @type ^`org.mozilla.javascript.ast.ObjectLiteral` @kind object;
  #L42ec32.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/ObjectLiteral;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42ec38.  v3:= temp @kind object;
  #L42ec3a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ec40.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42ec46.  v3:= temp @kind object;
  #L42ec48.  return v3 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.NewExpression` v2 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/NewExpression;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ecf4.  call temp:= `visit`(v3, v2) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L42ecfa.  v0:= temp;
  #L42ecfc.  if v0 == 0 then goto L42ed48;
  #L42ed00.  v0:= v2.`org.mozilla.javascript.ast.FunctionCall.target` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42ed04.  call `visit`(v0, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42ed0a.  call temp:= `getArguments`(v2) @signature `Lorg/mozilla/javascript/ast/FunctionCall;.getArguments:()Ljava/util/List;` @kind virtual;
  #L42ed10.  v0:= temp @kind object;
  #L42ed12.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42ed18.  v0:= temp @kind object;
  #L42ed1a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42ed20.  v1:= temp;
  #L42ed22.  if v1 == 0 then goto L42ed3a;
  #L42ed26.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42ed2c.  v1:= temp @kind object;
  #L42ed2e.  v1:= (`org.mozilla.javascript.ast.AstNode`) v1 @kind object;
  #L42ed32.  call `visit`(v1, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42ed38.  goto L42ed1a;
  #L42ed3a.  v0:= v2.`org.mozilla.javascript.ast.NewExpression.c` @type ^`org.mozilla.javascript.ast.ObjectLiteral` @kind object;
  #L42ed3e.  if v0 == 0 then goto L42ed48;
  #L42ed42.  call `visit`(v0, v3) @signature `Lorg/mozilla/javascript/ast/ObjectLiteral;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42ed48.  return @kind void;
}
