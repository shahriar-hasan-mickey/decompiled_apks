record `org.mozilla.javascript.ast.SwitchCase` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.SwitchCase.c` @AccessFlag PRIVATE;
  `java.util.List` `org.mozilla.javascript.ast.SwitchCase.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.SwitchCase` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/SwitchCase;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L430968.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L43096e.  v0:= 115I;
  #L430972.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L430976.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.SwitchCase` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/SwitchCase;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L430988.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(I)V` @kind direct;
  #L43098e.  v1:= 115I;
  #L430992.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L430996.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.SwitchCase` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/SwitchCase;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4309a8.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L4309ae.  v1:= 115I;
  #L4309b2.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L4309b6.  return @kind void;
}
procedure `void` `addStatement`(`org.mozilla.javascript.ast.SwitchCase` v2 @kind this, `org.mozilla.javascript.ast.AstNode` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/SwitchCase;.addStatement:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4309c8.  call `assertNotNull`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L4309ce.  v0:= v2.`org.mozilla.javascript.ast.SwitchCase.d` @type ^`java.util.List` @kind object;
  #L4309d2.  if v0 != 0 then goto L4309e4;
  #L4309d6.  v0:= new `java.util.ArrayList`;
  #L4309da.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4309e0.  v2.`org.mozilla.javascript.ast.SwitchCase.d` @type ^`java.util.List` := v0 @kind object;
  #L4309e4.  call temp:= `getPosition`(v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.getPosition:()I` @kind virtual;
  #L4309ea.  v0:= temp;
  #L4309ec.  call temp:= `getLength`(v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.getLength:()I` @kind virtual;
  #L4309f2.  v1:= temp;
  #L4309f4.  v0:= v0 + v1 @kind int;
  #L4309f6.  call temp:= `getPosition`(v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.getPosition:()I` @kind virtual;
  #L4309fc.  v1:= temp;
  #L4309fe.  v0:= v0 - v1 @kind int;
  #L430a00.  call `setLength`(v2, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setLength:(I)V` @kind virtual;
  #L430a06.  v0:= v2.`org.mozilla.javascript.ast.SwitchCase.d` @type ^`java.util.List` @kind object;
  #L430a0a.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L430a10.  call `setParent`(v3, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L430a16.  return @kind void;
}
procedure `org.mozilla.javascript.ast.AstNode` `getExpression`(`org.mozilla.javascript.ast.SwitchCase` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/SwitchCase;.getExpression:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430950.  v0:= v1.`org.mozilla.javascript.ast.SwitchCase.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L430954.  return v0 @kind object;
}
procedure `java.util.List` `getStatements`(`org.mozilla.javascript.ast.SwitchCase` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/SwitchCase;.getStatements:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430938.  v0:= v1.`org.mozilla.javascript.ast.SwitchCase.d` @type ^`java.util.List` @kind object;
  #L43093c.  return v0 @kind object;
}
procedure `boolean` `isDefault`(`org.mozilla.javascript.ast.SwitchCase` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/SwitchCase;.isDefault:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43086c.  v0:= v1.`org.mozilla.javascript.ast.SwitchCase.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L430870.  if v0 != 0 then goto L430878;
  #L430874.  v0:= 1I;
  #L430876.  goto L43087a;
  #L430878.  v0:= 0I;
  #L43087a.  return v0;
}
procedure `void` `setExpression`(`org.mozilla.javascript.ast.SwitchCase` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/SwitchCase;.setExpression:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L430a28.  v0.`org.mozilla.javascript.ast.SwitchCase.c` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L430a2c.  if v1 == 0 then goto L430a36;
  #L430a30.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L430a36.  return @kind void;
}
procedure `void` `setStatements`(`org.mozilla.javascript.ast.SwitchCase` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/SwitchCase;.setStatements:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430a48.  v0:= v1.`org.mozilla.javascript.ast.SwitchCase.d` @type ^`java.util.List` @kind object;
  #L430a4c.  if v0 == 0 then goto L430a56;
  #L430a50.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L430a56.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L430a5c.  v2:= temp @kind object;
  #L430a5e.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L430a64.  v0:= temp;
  #L430a66.  if v0 == 0 then goto L430a7e;
  #L430a6a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L430a70.  v0:= temp @kind object;
  #L430a72.  v0:= (`org.mozilla.javascript.ast.AstNode`) v0 @kind object;
  #L430a76.  call `addStatement`(v1, v0) @signature `Lorg/mozilla/javascript/ast/SwitchCase;.addStatement:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L430a7c.  goto L430a5e;
  #L430a7e.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.SwitchCase` v4 @kind this, `int` v5 ) @signature `Lorg/mozilla/javascript/ast/SwitchCase;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43088c.  v0:= new `java.lang.StringBuilder`;
  #L430890.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L430896.  call temp:= `makeIndent`(v4, v5) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L43089c.  v1:= temp @kind object;
  #L43089e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4308a4.  v1:= v4.`org.mozilla.javascript.ast.SwitchCase.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L4308a8.  if v1 != 0 then goto L4308b8;
  #L4308ac.  v1:= "default:\n" @kind object;
  #L4308b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4308b6.  goto L4308e0;
  #L4308b8.  v1:= "case " @kind object;
  #L4308bc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4308c2.  v1:= v4.`org.mozilla.javascript.ast.SwitchCase.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L4308c6.  v2:= 0I;
  #L4308c8.  call temp:= `toSource`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L4308ce.  v1:= temp @kind object;
  #L4308d0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4308d6.  v1:= ":\n" @kind object;
  #L4308da.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4308e0.  v1:= v4.`org.mozilla.javascript.ast.SwitchCase.d` @type ^`java.util.List` @kind object;
  #L4308e4.  if v1 == 0 then goto L43091c;
  #L4308e8.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4308ee.  v1:= temp @kind object;
  #L4308f0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4308f6.  v2:= temp;
  #L4308f8.  if v2 == 0 then goto L43091c;
  #L4308fc.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L430902.  v2:= temp @kind object;
  #L430904.  v2:= (`org.mozilla.javascript.ast.AstNode`) v2 @kind object;
  #L430908.  v3:= v5 + 1;
  #L43090c.  call temp:= `toSource`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L430912.  v2:= temp @kind object;
  #L430914.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43091a.  goto L4308f0;
  #L43091c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L430922.  v5:= temp @kind object;
  #L430924.  return v5 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.SwitchCase` v2 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/SwitchCase;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430a90.  call temp:= `visit`(v3, v2) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L430a96.  v0:= temp;
  #L430a98.  if v0 == 0 then goto L430ada;
  #L430a9c.  v0:= v2.`org.mozilla.javascript.ast.SwitchCase.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L430aa0.  if v0 == 0 then goto L430aaa;
  #L430aa4.  call `visit`(v0, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L430aaa.  v0:= v2.`org.mozilla.javascript.ast.SwitchCase.d` @type ^`java.util.List` @kind object;
  #L430aae.  if v0 == 0 then goto L430ada;
  #L430ab2.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L430ab8.  v0:= temp @kind object;
  #L430aba.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L430ac0.  v1:= temp;
  #L430ac2.  if v1 == 0 then goto L430ada;
  #L430ac6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L430acc.  v1:= temp @kind object;
  #L430ace.  v1:= (`org.mozilla.javascript.ast.AstNode`) v1 @kind object;
  #L430ad2.  call `visit`(v1, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L430ad8.  goto L430aba;
  #L430ada.  return @kind void;
}
