record `org.mozilla.javascript.ast.CatchClause` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `org.mozilla.javascript.ast.Name` `org.mozilla.javascript.ast.CatchClause.c` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.CatchClause.d` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.Block` `org.mozilla.javascript.ast.CatchClause.e` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.CatchClause.f` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.CatchClause.g` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.CatchClause.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.CatchClause` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/CatchClause;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42b23c.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L42b242.  v0:= -1I;
  #L42b244.  v1.`org.mozilla.javascript.ast.CatchClause.f` @type ^`int` := v0;
  #L42b248.  v1.`org.mozilla.javascript.ast.CatchClause.g` @type ^`int` := v0;
  #L42b24c.  v1.`org.mozilla.javascript.ast.CatchClause.h` @type ^`int` := v0;
  #L42b250.  v0:= 124I;
  #L42b254.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42b258.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.CatchClause` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/CatchClause;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42b26c.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(I)V` @kind direct;
  #L42b272.  v1:= -1I;
  #L42b274.  v0.`org.mozilla.javascript.ast.CatchClause.f` @type ^`int` := v1;
  #L42b278.  v0.`org.mozilla.javascript.ast.CatchClause.g` @type ^`int` := v1;
  #L42b27c.  v0.`org.mozilla.javascript.ast.CatchClause.h` @type ^`int` := v1;
  #L42b280.  v1:= 124I;
  #L42b284.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42b288.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.CatchClause` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/CatchClause;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42b29c.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L42b2a2.  v1:= -1I;
  #L42b2a4.  v0.`org.mozilla.javascript.ast.CatchClause.f` @type ^`int` := v1;
  #L42b2a8.  v0.`org.mozilla.javascript.ast.CatchClause.g` @type ^`int` := v1;
  #L42b2ac.  v0.`org.mozilla.javascript.ast.CatchClause.h` @type ^`int` := v1;
  #L42b2b0.  v1:= 124I;
  #L42b2b4.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42b2b8.  return @kind void;
}
procedure `org.mozilla.javascript.ast.Block` `getBody`(`org.mozilla.javascript.ast.CatchClause` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/CatchClause;.getBody:()Lorg/mozilla/javascript/ast/Block;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b20c.  v0:= v1.`org.mozilla.javascript.ast.CatchClause.e` @type ^`org.mozilla.javascript.ast.Block` @kind object;
  #L42b210.  return v0 @kind object;
}
procedure `org.mozilla.javascript.ast.AstNode` `getCatchCondition`(`org.mozilla.javascript.ast.CatchClause` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/CatchClause;.getCatchCondition:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b1f4.  v0:= v1.`org.mozilla.javascript.ast.CatchClause.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b1f8.  return v0 @kind object;
}
procedure `int` `getIfPosition`(`org.mozilla.javascript.ast.CatchClause` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/CatchClause;.getIfPosition:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b11c.  v0:= v1.`org.mozilla.javascript.ast.CatchClause.f` @type ^`int`;
  #L42b120.  return v0;
}
procedure `int` `getLp`(`org.mozilla.javascript.ast.CatchClause` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/CatchClause;.getLp:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b134.  v0:= v1.`org.mozilla.javascript.ast.CatchClause.g` @type ^`int`;
  #L42b138.  return v0;
}
procedure `int` `getRp`(`org.mozilla.javascript.ast.CatchClause` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/CatchClause;.getRp:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b14c.  v0:= v1.`org.mozilla.javascript.ast.CatchClause.h` @type ^`int`;
  #L42b150.  return v0;
}
procedure `org.mozilla.javascript.ast.Name` `getVarName`(`org.mozilla.javascript.ast.CatchClause` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/CatchClause;.getVarName:()Lorg/mozilla/javascript/ast/Name;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b224.  v0:= v1.`org.mozilla.javascript.ast.CatchClause.c` @type ^`org.mozilla.javascript.ast.Name` @kind object;
  #L42b228.  return v0 @kind object;
}
procedure `void` `setBody`(`org.mozilla.javascript.ast.CatchClause` v0 @kind this, `org.mozilla.javascript.ast.Block` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/CatchClause;.setBody:(Lorg/mozilla/javascript/ast/Block;)V` @AccessFlag PUBLIC {
    temp;

  #L42b2cc.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42b2d2.  v0.`org.mozilla.javascript.ast.CatchClause.e` @type ^`org.mozilla.javascript.ast.Block` := v1 @kind object;
  #L42b2d6.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42b2dc.  return @kind void;
}
procedure `void` `setCatchCondition`(`org.mozilla.javascript.ast.CatchClause` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/CatchClause;.setCatchCondition:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L42b2f0.  v0.`org.mozilla.javascript.ast.CatchClause.d` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42b2f4.  if v1 == 0 then goto L42b2fe;
  #L42b2f8.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42b2fe.  return @kind void;
}
procedure `void` `setIfPosition`(`org.mozilla.javascript.ast.CatchClause` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/CatchClause;.setIfPosition:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42b310.  v0.`org.mozilla.javascript.ast.CatchClause.f` @type ^`int` := v1;
  #L42b314.  return @kind void;
}
procedure `void` `setLp`(`org.mozilla.javascript.ast.CatchClause` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/CatchClause;.setLp:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42b328.  v0.`org.mozilla.javascript.ast.CatchClause.g` @type ^`int` := v1;
  #L42b32c.  return @kind void;
}
procedure `void` `setParens`(`org.mozilla.javascript.ast.CatchClause` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/CatchClause;.setParens:(II)V` @AccessFlag PUBLIC {
    temp;

  #L42b340.  v0.`org.mozilla.javascript.ast.CatchClause.g` @type ^`int` := v1;
  #L42b344.  v0.`org.mozilla.javascript.ast.CatchClause.h` @type ^`int` := v2;
  #L42b348.  return @kind void;
}
procedure `void` `setRp`(`org.mozilla.javascript.ast.CatchClause` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/CatchClause;.setRp:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42b35c.  v0.`org.mozilla.javascript.ast.CatchClause.h` @type ^`int` := v1;
  #L42b360.  return @kind void;
}
procedure `void` `setVarName`(`org.mozilla.javascript.ast.CatchClause` v0 @kind this, `org.mozilla.javascript.ast.Name` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/CatchClause;.setVarName:(Lorg/mozilla/javascript/ast/Name;)V` @AccessFlag PUBLIC {
    temp;

  #L42b374.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42b37a.  v0.`org.mozilla.javascript.ast.CatchClause.c` @type ^`org.mozilla.javascript.ast.Name` := v1 @kind object;
  #L42b37e.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42b384.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.CatchClause` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/CatchClause;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42b164.  v0:= new `java.lang.StringBuilder`;
  #L42b168.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42b16e.  call temp:= `makeIndent`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42b174.  v3:= temp @kind object;
  #L42b176.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b17c.  v3:= "catch (" @kind object;
  #L42b180.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b186.  v3:= v2.`org.mozilla.javascript.ast.CatchClause.c` @type ^`org.mozilla.javascript.ast.Name` @kind object;
  #L42b18a.  v1:= 0I;
  #L42b18c.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/Name;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42b192.  v3:= temp @kind object;
  #L42b194.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b19a.  v3:= v2.`org.mozilla.javascript.ast.CatchClause.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b19e.  if v3 == 0 then goto L42b1be;
  #L42b1a2.  v3:= " if " @kind object;
  #L42b1a6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b1ac.  v3:= v2.`org.mozilla.javascript.ast.CatchClause.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b1b0.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42b1b6.  v3:= temp @kind object;
  #L42b1b8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b1be.  v3:= ") " @kind object;
  #L42b1c2.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b1c8.  v3:= v2.`org.mozilla.javascript.ast.CatchClause.e` @type ^`org.mozilla.javascript.ast.Block` @kind object;
  #L42b1cc.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/Block;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42b1d2.  v3:= temp @kind object;
  #L42b1d4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42b1da.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42b1e0.  v3:= temp @kind object;
  #L42b1e2.  return v3 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.CatchClause` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/CatchClause;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b398.  call temp:= `visit`(v2, v1) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L42b39e.  v0:= temp;
  #L42b3a0.  if v0 == 0 then goto L42b3c6;
  #L42b3a4.  v0:= v1.`org.mozilla.javascript.ast.CatchClause.c` @type ^`org.mozilla.javascript.ast.Name` @kind object;
  #L42b3a8.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/Name;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42b3ae.  v0:= v1.`org.mozilla.javascript.ast.CatchClause.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42b3b2.  if v0 == 0 then goto L42b3bc;
  #L42b3b6.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42b3bc.  v0:= v1.`org.mozilla.javascript.ast.CatchClause.e` @type ^`org.mozilla.javascript.ast.Block` @kind object;
  #L42b3c0.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/Block;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42b3c6.  return @kind void;
}
