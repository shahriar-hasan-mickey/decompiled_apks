record `org.mozilla.javascript.ast.ObjectProperty` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.InfixExpression` @kind class {
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ObjectProperty` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ObjectProperty;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42f1f8.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.<init>:()V` @kind direct;
  #L42f1fe.  v0:= 103I;
  #L42f202.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42f206.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ObjectProperty` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/ObjectProperty;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42f218.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.<init>:(I)V` @kind direct;
  #L42f21e.  v1:= 103I;
  #L42f222.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42f226.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ObjectProperty` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/ObjectProperty;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42f238.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.<init>:(II)V` @kind direct;
  #L42f23e.  v1:= 103I;
  #L42f242.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42f246.  return @kind void;
}
procedure `boolean` `isGetter`(`org.mozilla.javascript.ast.ObjectProperty` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/ObjectProperty;.isGetter:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42f114.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L42f118.  v1:= 151I;
  #L42f11c.  if v0 != v1 then goto L42f124;
  #L42f120.  v0:= 1I;
  #L42f122.  goto L42f126;
  #L42f124.  v0:= 0I;
  #L42f126.  return v0;
}
procedure `boolean` `isSetter`(`org.mozilla.javascript.ast.ObjectProperty` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/ObjectProperty;.isSetter:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42f138.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L42f13c.  v1:= 152I;
  #L42f140.  if v0 != v1 then goto L42f148;
  #L42f144.  v0:= 1I;
  #L42f146.  goto L42f14a;
  #L42f148.  v0:= 0I;
  #L42f14a.  return v0;
}
procedure `void` `setIsGetter`(`org.mozilla.javascript.ast.ObjectProperty` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ObjectProperty;.setIsGetter:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f258.  v0:= 151I;
  #L42f25c.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42f260.  return @kind void;
}
procedure `void` `setIsSetter`(`org.mozilla.javascript.ast.ObjectProperty` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ObjectProperty;.setIsSetter:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f274.  v0:= 152I;
  #L42f278.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42f27c.  return @kind void;
}
procedure `void` `setNodeType`(`org.mozilla.javascript.ast.ObjectProperty` v3 @kind this, `int` v4 ) @signature `Lorg/mozilla/javascript/ast/ObjectProperty;.setNodeType:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42f290.  v0:= 103I;
  #L42f294.  if v4 == v0 then goto L42f2d8;
  #L42f298.  v0:= 151I;
  #L42f29c.  if v4 == v0 then goto L42f2d8;
  #L42f2a0.  v0:= 152I;
  #L42f2a4.  if v4 != v0 then goto L42f2aa;
  #L42f2a8.  goto L42f2d8;
  #L42f2aa.  v0:= new `java.lang.IllegalArgumentException`;
  #L42f2ae.  v1:= new `java.lang.StringBuilder`;
  #L42f2b2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42f2b8.  v2:= "invalid node type: " @kind object;
  #L42f2bc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42f2c2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42f2c8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42f2ce.  v4:= temp @kind object;
  #L42f2d0.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42f2d6.  throw v0;
  #L42f2d8.  call temp:= `setType`(v3, v4) @signature `Lorg/mozilla/javascript/Node;.setType:(I)Lorg/mozilla/javascript/Node;` @kind virtual;
  #L42f2de.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.ObjectProperty` v3 @kind this, `int` v4 ) @signature `Lorg/mozilla/javascript/ast/ObjectProperty;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42f15c.  v0:= new `java.lang.StringBuilder`;
  #L42f160.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42f166.  call temp:= `makeIndent`(v3, v4) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42f16c.  v4:= temp @kind object;
  #L42f16e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42f174.  call temp:= `isGetter`(v3) @signature `Lorg/mozilla/javascript/ast/ObjectProperty;.isGetter:()Z` @kind virtual;
  #L42f17a.  v4:= temp;
  #L42f17c.  if v4 == 0 then goto L42f18c;
  #L42f180.  v4:= "get " @kind object;
  #L42f184.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42f18a.  goto L42f1a2;
  #L42f18c.  call temp:= `isSetter`(v3) @signature `Lorg/mozilla/javascript/ast/ObjectProperty;.isSetter:()Z` @kind virtual;
  #L42f192.  v4:= temp;
  #L42f194.  if v4 == 0 then goto L42f1a2;
  #L42f198.  v4:= "set " @kind object;
  #L42f19c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42f1a2.  v4:= v3.`org.mozilla.javascript.ast.InfixExpression.left` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42f1a6.  v1:= 0I;
  #L42f1a8.  call temp:= `toSource`(v4, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42f1ae.  v4:= temp @kind object;
  #L42f1b0.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42f1b6.  v4:= v3.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L42f1ba.  v2:= 103I;
  #L42f1be.  if v4 != v2 then goto L42f1cc;
  #L42f1c2.  v4:= ": " @kind object;
  #L42f1c6.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42f1cc.  v4:= v3.`org.mozilla.javascript.ast.InfixExpression.right` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42f1d0.  call temp:= `toSource`(v4, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42f1d6.  v4:= temp @kind object;
  #L42f1d8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42f1de.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42f1e4.  v4:= temp @kind object;
  #L42f1e6.  return v4 @kind object;
}
