record `org.mozilla.javascript.ast.ReturnStatement` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.ReturnStatement.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ReturnStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ReturnStatement;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42fa78.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L42fa7e.  v0:= 4I;
  #L42fa80.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42fa84.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ReturnStatement` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/ReturnStatement;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42fa98.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(I)V` @kind direct;
  #L42fa9e.  v1:= 4I;
  #L42faa0.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42faa4.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ReturnStatement` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/ReturnStatement;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42fab8.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L42fabe.  v1:= 4I;
  #L42fac0.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42fac4.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ReturnStatement` v0 @kind this, `int` v1 , `int` v2 , `org.mozilla.javascript.ast.AstNode` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/ReturnStatement;.<init>:(IILorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42fad8.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L42fade.  v1:= 4I;
  #L42fae0.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42fae4.  call `setReturnValue`(v0, v3) @signature `Lorg/mozilla/javascript/ast/ReturnStatement;.setReturnValue:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42faea.  return @kind void;
}
procedure `org.mozilla.javascript.ast.AstNode` `getReturnValue`(`org.mozilla.javascript.ast.ReturnStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ReturnStatement;.getReturnValue:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fa60.  v0:= v1.`org.mozilla.javascript.ast.ReturnStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42fa64.  return v0 @kind object;
}
procedure `void` `setReturnValue`(`org.mozilla.javascript.ast.ReturnStatement` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/ReturnStatement;.setReturnValue:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L42fafc.  v0.`org.mozilla.javascript.ast.ReturnStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42fb00.  if v1 == 0 then goto L42fb0a;
  #L42fb04.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42fb0a.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.ReturnStatement` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/ReturnStatement;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42f9f4.  v0:= new `java.lang.StringBuilder`;
  #L42f9f8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42f9fe.  call temp:= `makeIndent`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42fa04.  v3:= temp @kind object;
  #L42fa06.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42fa0c.  v3:= "return" @kind object;
  #L42fa10.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42fa16.  v3:= v2.`org.mozilla.javascript.ast.ReturnStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42fa1a.  if v3 == 0 then goto L42fa3c;
  #L42fa1e.  v3:= " " @kind object;
  #L42fa22.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42fa28.  v3:= v2.`org.mozilla.javascript.ast.ReturnStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42fa2c.  v1:= 0I;
  #L42fa2e.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42fa34.  v3:= temp @kind object;
  #L42fa36.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42fa3c.  v3:= ";\n" @kind object;
  #L42fa40.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42fa46.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42fa4c.  v3:= temp @kind object;
  #L42fa4e.  return v3 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.ReturnStatement` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/ReturnStatement;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fb1c.  call temp:= `visit`(v2, v1) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L42fb22.  v0:= temp;
  #L42fb24.  if v0 == 0 then goto L42fb36;
  #L42fb28.  v0:= v1.`org.mozilla.javascript.ast.ReturnStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42fb2c.  if v0 == 0 then goto L42fb36;
  #L42fb30.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42fb36.  return @kind void;
}
