record `org.mozilla.javascript.ast.SwitchStatement` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.Jump` @kind class {
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.SwitchStatement.e` @AccessFlag PRIVATE;
  `java.util.List` `org.mozilla.javascript.ast.SwitchStatement.f` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.SwitchStatement.g` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.SwitchStatement.h` @AccessFlag PRIVATE;
}
global `java.util.List` `@@org.mozilla.javascript.ast.SwitchStatement.i` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L430bf8.  v0:= new `java.util.ArrayList`;
  #L430bfc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L430c02.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L430c08.  v0:= temp @kind object;
  #L430c0a.  `@@org.mozilla.javascript.ast.SwitchStatement.i` @type ^`java.util.List` := v0 @kind object;
  #L430c0e.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.SwitchStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L430c20.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/Jump;.<init>:()V` @kind direct;
  #L430c26.  v0:= -1I;
  #L430c28.  v1.`org.mozilla.javascript.ast.SwitchStatement.g` @type ^`int` := v0;
  #L430c2c.  v1.`org.mozilla.javascript.ast.SwitchStatement.h` @type ^`int` := v0;
  #L430c30.  v0:= 114I;
  #L430c34.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L430c38.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.SwitchStatement` v1 @kind this, `int` v2 ) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L430c4c.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/Jump;.<init>:()V` @kind direct;
  #L430c52.  v0:= -1I;
  #L430c54.  v1.`org.mozilla.javascript.ast.SwitchStatement.g` @type ^`int` := v0;
  #L430c58.  v1.`org.mozilla.javascript.ast.SwitchStatement.h` @type ^`int` := v0;
  #L430c5c.  v0:= 114I;
  #L430c60.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L430c64.  v1.`org.mozilla.javascript.ast.AstNode.position` @type ^`int` := v2;
  #L430c68.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.SwitchStatement` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L430c7c.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/Jump;.<init>:()V` @kind direct;
  #L430c82.  v0:= -1I;
  #L430c84.  v1.`org.mozilla.javascript.ast.SwitchStatement.g` @type ^`int` := v0;
  #L430c88.  v1.`org.mozilla.javascript.ast.SwitchStatement.h` @type ^`int` := v0;
  #L430c8c.  v0:= 114I;
  #L430c90.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L430c94.  v1.`org.mozilla.javascript.ast.AstNode.position` @type ^`int` := v2;
  #L430c98.  v1.`org.mozilla.javascript.ast.AstNode.length` @type ^`int` := v3;
  #L430c9c.  return @kind void;
}
procedure `void` `addCase`(`org.mozilla.javascript.ast.SwitchStatement` v1 @kind this, `org.mozilla.javascript.ast.SwitchCase` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.addCase:(Lorg/mozilla/javascript/ast/SwitchCase;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430cb0.  call `assertNotNull`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L430cb6.  v0:= v1.`org.mozilla.javascript.ast.SwitchStatement.f` @type ^`java.util.List` @kind object;
  #L430cba.  if v0 != 0 then goto L430ccc;
  #L430cbe.  v0:= new `java.util.ArrayList`;
  #L430cc2.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L430cc8.  v1.`org.mozilla.javascript.ast.SwitchStatement.f` @type ^`java.util.List` := v0 @kind object;
  #L430ccc.  v0:= v1.`org.mozilla.javascript.ast.SwitchStatement.f` @type ^`java.util.List` @kind object;
  #L430cd0.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L430cd6.  call `setParent`(v2, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L430cdc.  return @kind void;
}
procedure `java.util.List` `getCases`(`org.mozilla.javascript.ast.SwitchStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.getCases:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430bc0.  v0:= v1.`org.mozilla.javascript.ast.SwitchStatement.f` @type ^`java.util.List` @kind object;
  #L430bc4.  if v0 == 0 then goto L430bca;
  #L430bc8.  goto L430bce;
  #L430bca.  v0:= `@@org.mozilla.javascript.ast.SwitchStatement.i` @type ^`java.util.List` @kind object;
  #L430bce.  return v0 @kind object;
}
procedure `org.mozilla.javascript.ast.AstNode` `getExpression`(`org.mozilla.javascript.ast.SwitchStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.getExpression:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430be0.  v0:= v1.`org.mozilla.javascript.ast.SwitchStatement.e` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L430be4.  return v0 @kind object;
}
procedure `int` `getLp`(`org.mozilla.javascript.ast.SwitchStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.getLp:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430aec.  v0:= v1.`org.mozilla.javascript.ast.SwitchStatement.g` @type ^`int`;
  #L430af0.  return v0;
}
procedure `int` `getRp`(`org.mozilla.javascript.ast.SwitchStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.getRp:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430b04.  v0:= v1.`org.mozilla.javascript.ast.SwitchStatement.h` @type ^`int`;
  #L430b08.  return v0;
}
procedure `void` `setCases`(`org.mozilla.javascript.ast.SwitchStatement` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.setCases:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430cf0.  if v2 != 0 then goto L430cfc;
  #L430cf4.  v2:= 0I;
  #L430cf6.  v1.`org.mozilla.javascript.ast.SwitchStatement.f` @type ^`java.util.List` := v2 @kind object;
  #L430cfa.  goto L430d32;
  #L430cfc.  v0:= v1.`org.mozilla.javascript.ast.SwitchStatement.f` @type ^`java.util.List` @kind object;
  #L430d00.  if v0 == 0 then goto L430d0a;
  #L430d04.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L430d0a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L430d10.  v2:= temp @kind object;
  #L430d12.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L430d18.  v0:= temp;
  #L430d1a.  if v0 == 0 then goto L430d32;
  #L430d1e.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L430d24.  v0:= temp @kind object;
  #L430d26.  v0:= (`org.mozilla.javascript.ast.SwitchCase`) v0 @kind object;
  #L430d2a.  call `addCase`(v1, v0) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.addCase:(Lorg/mozilla/javascript/ast/SwitchCase;)V` @kind virtual;
  #L430d30.  goto L430d12;
  #L430d32.  return @kind void;
}
procedure `void` `setExpression`(`org.mozilla.javascript.ast.SwitchStatement` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.setExpression:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L430d44.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L430d4a.  v0.`org.mozilla.javascript.ast.SwitchStatement.e` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L430d4e.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L430d54.  return @kind void;
}
procedure `void` `setLp`(`org.mozilla.javascript.ast.SwitchStatement` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.setLp:(I)V` @AccessFlag PUBLIC {
    temp;

  #L430d68.  v0.`org.mozilla.javascript.ast.SwitchStatement.g` @type ^`int` := v1;
  #L430d6c.  return @kind void;
}
procedure `void` `setParens`(`org.mozilla.javascript.ast.SwitchStatement` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.setParens:(II)V` @AccessFlag PUBLIC {
    temp;

  #L430d80.  v0.`org.mozilla.javascript.ast.SwitchStatement.g` @type ^`int` := v1;
  #L430d84.  v0.`org.mozilla.javascript.ast.SwitchStatement.h` @type ^`int` := v2;
  #L430d88.  return @kind void;
}
procedure `void` `setRp`(`org.mozilla.javascript.ast.SwitchStatement` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.setRp:(I)V` @AccessFlag PUBLIC {
    temp;

  #L430d9c.  v0.`org.mozilla.javascript.ast.SwitchStatement.h` @type ^`int` := v1;
  #L430da0.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.SwitchStatement` v5 @kind this, `int` v6 ) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L430b1c.  call temp:= `makeIndent`(v5, v6) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L430b22.  v0:= temp @kind object;
  #L430b24.  v1:= new `java.lang.StringBuilder`;
  #L430b28.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L430b2e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L430b34.  v2:= "switch (" @kind object;
  #L430b38.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L430b3e.  v2:= v5.`org.mozilla.javascript.ast.SwitchStatement.e` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L430b42.  v3:= 0I;
  #L430b44.  call temp:= `toSource`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L430b4a.  v2:= temp @kind object;
  #L430b4c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L430b52.  v2:= ") {\n" @kind object;
  #L430b56.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L430b5c.  v2:= v5.`org.mozilla.javascript.ast.SwitchStatement.f` @type ^`java.util.List` @kind object;
  #L430b60.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L430b66.  v2:= temp @kind object;
  #L430b68.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L430b6e.  v3:= temp;
  #L430b70.  if v3 == 0 then goto L430b94;
  #L430b74.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L430b7a.  v3:= temp @kind object;
  #L430b7c.  v3:= (`org.mozilla.javascript.ast.SwitchCase`) v3 @kind object;
  #L430b80.  v4:= v6 + 1;
  #L430b84.  call temp:= `toSource`(v3, v4) @signature `Lorg/mozilla/javascript/ast/SwitchCase;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L430b8a.  v3:= temp @kind object;
  #L430b8c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L430b92.  goto L430b68;
  #L430b94.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L430b9a.  v6:= "}\n" @kind object;
  #L430b9e.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L430ba4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L430baa.  v6:= temp @kind object;
  #L430bac.  return v6 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.SwitchStatement` v2 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430db4.  call temp:= `visit`(v3, v2) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L430dba.  v0:= temp;
  #L430dbc.  if v0 == 0 then goto L430dfa;
  #L430dc0.  v0:= v2.`org.mozilla.javascript.ast.SwitchStatement.e` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L430dc4.  call `visit`(v0, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L430dca.  call temp:= `getCases`(v2) @signature `Lorg/mozilla/javascript/ast/SwitchStatement;.getCases:()Ljava/util/List;` @kind virtual;
  #L430dd0.  v0:= temp @kind object;
  #L430dd2.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L430dd8.  v0:= temp @kind object;
  #L430dda.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L430de0.  v1:= temp;
  #L430de2.  if v1 == 0 then goto L430dfa;
  #L430de6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L430dec.  v1:= temp @kind object;
  #L430dee.  v1:= (`org.mozilla.javascript.ast.SwitchCase`) v1 @kind object;
  #L430df2.  call `visit`(v1, v3) @signature `Lorg/mozilla/javascript/ast/SwitchCase;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L430df8.  goto L430dda;
  #L430dfa.  return @kind void;
}
