record `org.mozilla.javascript.ast.RegExpLiteral` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `java.lang.String` `org.mozilla.javascript.ast.RegExpLiteral.c` @AccessFlag PRIVATE;
  `java.lang.String` `org.mozilla.javascript.ast.RegExpLiteral.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.RegExpLiteral` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/RegExpLiteral;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42f948.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L42f94e.  v0:= 48I;
  #L42f952.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42f956.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.RegExpLiteral` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/RegExpLiteral;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42f968.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(I)V` @kind direct;
  #L42f96e.  v1:= 48I;
  #L42f972.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42f976.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.RegExpLiteral` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/RegExpLiteral;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42f988.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L42f98e.  v1:= 48I;
  #L42f992.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42f996.  return @kind void;
}
procedure `java.lang.String` `getFlags`(`org.mozilla.javascript.ast.RegExpLiteral` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/RegExpLiteral;.getFlags:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f8b8.  v0:= v1.`org.mozilla.javascript.ast.RegExpLiteral.d` @type ^`java.lang.String` @kind object;
  #L42f8bc.  return v0 @kind object;
}
procedure `java.lang.String` `getValue`(`org.mozilla.javascript.ast.RegExpLiteral` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/RegExpLiteral;.getValue:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f8d0.  v0:= v1.`org.mozilla.javascript.ast.RegExpLiteral.c` @type ^`java.lang.String` @kind object;
  #L42f8d4.  return v0 @kind object;
}
procedure `void` `setFlags`(`org.mozilla.javascript.ast.RegExpLiteral` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/RegExpLiteral;.setFlags:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L42f9a8.  v0.`org.mozilla.javascript.ast.RegExpLiteral.d` @type ^`java.lang.String` := v1 @kind object;
  #L42f9ac.  return @kind void;
}
procedure `void` `setValue`(`org.mozilla.javascript.ast.RegExpLiteral` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/RegExpLiteral;.setValue:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L42f9c0.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42f9c6.  v0.`org.mozilla.javascript.ast.RegExpLiteral.c` @type ^`java.lang.String` := v1 @kind object;
  #L42f9ca.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.RegExpLiteral` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/RegExpLiteral;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42f8e8.  v0:= new `java.lang.StringBuilder`;
  #L42f8ec.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42f8f2.  call temp:= `makeIndent`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42f8f8.  v3:= temp @kind object;
  #L42f8fa.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42f900.  v3:= "/" @kind object;
  #L42f904.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42f90a.  v1:= v2.`org.mozilla.javascript.ast.RegExpLiteral.c` @type ^`java.lang.String` @kind object;
  #L42f90e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42f914.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42f91a.  v3:= v2.`org.mozilla.javascript.ast.RegExpLiteral.d` @type ^`java.lang.String` @kind object;
  #L42f91e.  if v3 != 0 then goto L42f926;
  #L42f922.  v3:= "" @kind object;
  #L42f926.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42f92c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42f932.  v3:= temp @kind object;
  #L42f934.  return v3 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.RegExpLiteral` v0 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/RegExpLiteral;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;

  #L42f9dc.  call temp:= `visit`(v1, v0) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L42f9e2.  return @kind void;
}
