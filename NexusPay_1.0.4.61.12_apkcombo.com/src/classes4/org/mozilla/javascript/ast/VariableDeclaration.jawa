record `org.mozilla.javascript.ast.VariableDeclaration` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `java.util.List` `org.mozilla.javascript.ast.VariableDeclaration.c` @AccessFlag PRIVATE;
  `boolean` `org.mozilla.javascript.ast.VariableDeclaration.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.VariableDeclaration` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L431904.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L43190a.  v0:= new `java.util.ArrayList`;
  #L43190e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L431914.  v1.`org.mozilla.javascript.ast.VariableDeclaration.c` @type ^`java.util.List` := v0 @kind object;
  #L431918.  v0:= 122I;
  #L43191c.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L431920.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.VariableDeclaration` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L431934.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(I)V` @kind direct;
  #L43193a.  v1:= new `java.util.ArrayList`;
  #L43193e.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L431944.  v0.`org.mozilla.javascript.ast.VariableDeclaration.c` @type ^`java.util.List` := v1 @kind object;
  #L431948.  v1:= 122I;
  #L43194c.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L431950.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.VariableDeclaration` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L431964.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L43196a.  v1:= new `java.util.ArrayList`;
  #L43196e.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L431974.  v0.`org.mozilla.javascript.ast.VariableDeclaration.c` @type ^`java.util.List` := v1 @kind object;
  #L431978.  v1:= 122I;
  #L43197c.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L431980.  return @kind void;
}
procedure `java.lang.String` `m`(`org.mozilla.javascript.ast.VariableDeclaration` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.m:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4317f4.  v0:= v1.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L4317f8.  call temp:= `typeToName`(v0) @signature `Lorg/mozilla/javascript/Token;.typeToName:(I)Ljava/lang/String;` @kind static;
  #L4317fe.  v0:= temp @kind object;
  #L431800.  call temp:= `toLowerCase`(v0) @signature `Ljava/lang/String;.toLowerCase:()Ljava/lang/String;` @kind virtual;
  #L431806.  v0:= temp @kind object;
  #L431808.  return v0 @kind object;
}
procedure `void` `addVariable`(`org.mozilla.javascript.ast.VariableDeclaration` v1 @kind this, `org.mozilla.javascript.ast.VariableInitializer` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.addVariable:(Lorg/mozilla/javascript/ast/VariableInitializer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431994.  call `assertNotNull`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L43199a.  v0:= v1.`org.mozilla.javascript.ast.VariableDeclaration.c` @type ^`java.util.List` @kind object;
  #L43199e.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4319a4.  call `setParent`(v2, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L4319aa.  return @kind void;
}
procedure `java.util.List` `getVariables`(`org.mozilla.javascript.ast.VariableDeclaration` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.getVariables:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431888.  v0:= v1.`org.mozilla.javascript.ast.VariableDeclaration.c` @type ^`java.util.List` @kind object;
  #L43188c.  return v0 @kind object;
}
procedure `boolean` `isConst`(`org.mozilla.javascript.ast.VariableDeclaration` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.isConst:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431770.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L431774.  v1:= 154I;
  #L431778.  if v0 != v1 then goto L431780;
  #L43177c.  v0:= 1I;
  #L43177e.  goto L431782;
  #L431780.  v0:= 0I;
  #L431782.  return v0;
}
procedure `boolean` `isLet`(`org.mozilla.javascript.ast.VariableDeclaration` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.isLet:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431794.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L431798.  v1:= 153I;
  #L43179c.  if v0 != v1 then goto L4317a4;
  #L4317a0.  v0:= 1I;
  #L4317a2.  goto L4317a6;
  #L4317a4.  v0:= 0I;
  #L4317a6.  return v0;
}
procedure `boolean` `isStatement`(`org.mozilla.javascript.ast.VariableDeclaration` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.isStatement:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4317b8.  v0:= v1.`org.mozilla.javascript.ast.VariableDeclaration.d` @type ^`boolean` @kind boolean;
  #L4317bc.  return v0;
}
procedure `boolean` `isVar`(`org.mozilla.javascript.ast.VariableDeclaration` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.isVar:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4317d0.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L4317d4.  v1:= 122I;
  #L4317d8.  if v0 != v1 then goto L4317e0;
  #L4317dc.  v0:= 1I;
  #L4317de.  goto L4317e2;
  #L4317e0.  v0:= 0I;
  #L4317e2.  return v0;
}
procedure `void` `setIsStatement`(`org.mozilla.javascript.ast.VariableDeclaration` v0 @kind this, `boolean` v1 ) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.setIsStatement:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L4319bc.  v0.`org.mozilla.javascript.ast.VariableDeclaration.d` @type ^`boolean` := v1 @kind boolean;
  #L4319c0.  return @kind void;
}
procedure `org.mozilla.javascript.Node` `setType`(`org.mozilla.javascript.ast.VariableDeclaration` v3 @kind this, `int` v4 ) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.setType:(I)Lorg/mozilla/javascript/Node;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4318a0.  v0:= 122I;
  #L4318a4.  if v4 == v0 then goto L4318e8;
  #L4318a8.  v0:= 154I;
  #L4318ac.  if v4 == v0 then goto L4318e8;
  #L4318b0.  v0:= 153I;
  #L4318b4.  if v4 != v0 then goto L4318ba;
  #L4318b8.  goto L4318e8;
  #L4318ba.  v0:= new `java.lang.IllegalArgumentException`;
  #L4318be.  v1:= new `java.lang.StringBuilder`;
  #L4318c2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4318c8.  v2:= "invalid decl type: " @kind object;
  #L4318cc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4318d2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4318d8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4318de.  v4:= temp @kind object;
  #L4318e0.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4318e6.  throw v0;
  #L4318e8.  call temp:= `setType`(v3, v4) @signature `Lorg/mozilla/javascript/Node;.setType:(I)Lorg/mozilla/javascript/Node;` @kind super;
  #L4318ee.  v4:= temp @kind object;
  #L4318f0.  return v4 @kind object;
}
procedure `void` `setVariables`(`org.mozilla.javascript.ast.VariableDeclaration` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.setVariables:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4319d4.  call `assertNotNull`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L4319da.  v0:= v1.`org.mozilla.javascript.ast.VariableDeclaration.c` @type ^`java.util.List` @kind object;
  #L4319de.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4319e4.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4319ea.  v2:= temp @kind object;
  #L4319ec.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4319f2.  v0:= temp;
  #L4319f4.  if v0 == 0 then goto L431a0c;
  #L4319f8.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4319fe.  v0:= temp @kind object;
  #L431a00.  v0:= (`org.mozilla.javascript.ast.VariableInitializer`) v0 @kind object;
  #L431a04.  call `addVariable`(v1, v0) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.addVariable:(Lorg/mozilla/javascript/ast/VariableInitializer;)V` @kind virtual;
  #L431a0a.  goto L4319ec;
  #L431a0c.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.VariableDeclaration` v1 @kind this, `int` v2 ) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43181c.  v0:= new `java.lang.StringBuilder`;
  #L431820.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L431826.  call temp:= `makeIndent`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L43182c.  v2:= temp @kind object;
  #L43182e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431834.  call temp:= `m`(v1) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.m:()Ljava/lang/String;` @kind direct;
  #L43183a.  v2:= temp @kind object;
  #L43183c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431842.  v2:= " " @kind object;
  #L431846.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43184c.  v2:= v1.`org.mozilla.javascript.ast.VariableDeclaration.c` @type ^`java.util.List` @kind object;
  #L431850.  call `printList`(v1, v2, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.printList:(Ljava/util/List;Ljava/lang/StringBuilder;)V` @kind virtual;
  #L431856.  call temp:= `isStatement`(v1) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.isStatement:()Z` @kind virtual;
  #L43185c.  v2:= temp;
  #L43185e.  if v2 == 0 then goto L43186c;
  #L431862.  v2:= ";\n" @kind object;
  #L431866.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43186c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L431872.  v2:= temp @kind object;
  #L431874.  return v2 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.VariableDeclaration` v2 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431a20.  call temp:= `visit`(v3, v2) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L431a26.  v0:= temp;
  #L431a28.  if v0 == 0 then goto L431a58;
  #L431a2c.  v0:= v2.`org.mozilla.javascript.ast.VariableDeclaration.c` @type ^`java.util.List` @kind object;
  #L431a30.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L431a36.  v0:= temp @kind object;
  #L431a38.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L431a3e.  v1:= temp;
  #L431a40.  if v1 == 0 then goto L431a58;
  #L431a44.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L431a4a.  v1:= temp @kind object;
  #L431a4c.  v1:= (`org.mozilla.javascript.ast.AstNode`) v1 @kind object;
  #L431a50.  call `visit`(v1, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L431a56.  goto L431a38;
  #L431a58.  return @kind void;
}
