record `org.mozilla.javascript.ast.UnaryExpression` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.UnaryExpression.c` @AccessFlag PRIVATE;
  `boolean` `org.mozilla.javascript.ast.UnaryExpression.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.UnaryExpression` v0 @kind this) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4315f4.  call `<init>`(v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L4315fa.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.UnaryExpression` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43160c.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(I)V` @kind direct;
  #L431612.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.UnaryExpression` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L431624.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L43162a.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.UnaryExpression` v1 @kind this, `int` v2 , `int` v3 , `org.mozilla.javascript.ast.AstNode` v4 @kind object) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.<init>:(IILorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L43163c.  v0:= 0I;
  #L43163e.  call `<init>`(v1, v2, v3, v4, v0) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.<init>:(IILorg/mozilla/javascript/ast/AstNode;Z)V` @kind direct;
  #L431644.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.UnaryExpression` v2 @kind this, `int` v3 , `int` v4 , `org.mozilla.javascript.ast.AstNode` v5 @kind object, `boolean` v6 ) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.<init>:(IILorg/mozilla/javascript/ast/AstNode;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L431658.  call `<init>`(v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L43165e.  call `assertNotNull`(v2, v5) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L431664.  if v6 == 0 then goto L431672;
  #L431668.  call temp:= `getPosition`(v5) @signature `Lorg/mozilla/javascript/ast/AstNode;.getPosition:()I` @kind virtual;
  #L43166e.  v0:= temp;
  #L431670.  goto L431674;
  #L431672.  v0:= v4;
  #L431674.  if v6 == 0 then goto L43167e;
  #L431678.  v4:= v4 + 2;
  #L43167c.  goto L431690;
  #L43167e.  call temp:= `getPosition`(v5) @signature `Lorg/mozilla/javascript/ast/AstNode;.getPosition:()I` @kind virtual;
  #L431684.  v4:= temp;
  #L431686.  call temp:= `getLength`(v5) @signature `Lorg/mozilla/javascript/ast/AstNode;.getLength:()I` @kind virtual;
  #L43168c.  v1:= temp;
  #L43168e.  v4:= v4 + v1 @kind int;
  #L431690.  call `setBounds`(v2, v0, v4) @signature `Lorg/mozilla/javascript/ast/AstNode;.setBounds:(II)V` @kind virtual;
  #L431696.  call `setOperator`(v2, v3) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.setOperator:(I)V` @kind virtual;
  #L43169c.  call `setOperand`(v2, v5) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.setOperand:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L4316a2.  v2.`org.mozilla.javascript.ast.UnaryExpression.d` @type ^`boolean` := v6 @kind boolean;
  #L4316a6.  return @kind void;
}
procedure `org.mozilla.javascript.ast.AstNode` `getOperand`(`org.mozilla.javascript.ast.UnaryExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.getOperand:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4315dc.  v0:= v1.`org.mozilla.javascript.ast.UnaryExpression.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L4315e0.  return v0 @kind object;
}
procedure `int` `getOperator`(`org.mozilla.javascript.ast.UnaryExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.getOperator:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431528.  v0:= v1.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L43152c.  return v0;
}
procedure `boolean` `isPostfix`(`org.mozilla.javascript.ast.UnaryExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.isPostfix:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4314f4.  v0:= v1.`org.mozilla.javascript.ast.UnaryExpression.d` @type ^`boolean` @kind boolean;
  #L4314f8.  return v0;
}
procedure `boolean` `isPrefix`(`org.mozilla.javascript.ast.UnaryExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.isPrefix:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43150c.  v0:= v1.`org.mozilla.javascript.ast.UnaryExpression.d` @type ^`boolean` @kind boolean;
  #L431510.  v0:= v0 ^~ 1;
  #L431514.  return v0;
}
procedure `void` `setIsPostfix`(`org.mozilla.javascript.ast.UnaryExpression` v0 @kind this, `boolean` v1 ) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.setIsPostfix:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L4316b8.  v0.`org.mozilla.javascript.ast.UnaryExpression.d` @type ^`boolean` := v1 @kind boolean;
  #L4316bc.  return @kind void;
}
procedure `void` `setOperand`(`org.mozilla.javascript.ast.UnaryExpression` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.setOperand:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L4316d0.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L4316d6.  v0.`org.mozilla.javascript.ast.UnaryExpression.c` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L4316da.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L4316e0.  return @kind void;
}
procedure `void` `setOperator`(`org.mozilla.javascript.ast.UnaryExpression` v3 @kind this, `int` v4 ) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.setOperator:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4316f4.  call temp:= `isValidToken`(v4) @signature `Lorg/mozilla/javascript/Token;.isValidToken:(I)Z` @kind static;
  #L4316fa.  v0:= temp;
  #L4316fc.  if v0 == 0 then goto L431708;
  #L431700.  call temp:= `setType`(v3, v4) @signature `Lorg/mozilla/javascript/Node;.setType:(I)Lorg/mozilla/javascript/Node;` @kind virtual;
  #L431706.  return @kind void;
  #L431708.  v0:= new `java.lang.IllegalArgumentException`;
  #L43170c.  v1:= new `java.lang.StringBuilder`;
  #L431710.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L431716.  v2:= "Invalid token: " @kind object;
  #L43171a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431720.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L431726.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43172c.  v4:= temp @kind object;
  #L43172e.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L431734.  throw v0;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.UnaryExpression` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431540.  v0:= new `java.lang.StringBuilder`;
  #L431544.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43154a.  call temp:= `makeIndent`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L431550.  v3:= temp @kind object;
  #L431552.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431558.  call temp:= `getType`(v2) @signature `Lorg/mozilla/javascript/Node;.getType:()I` @kind virtual;
  #L43155e.  v3:= temp;
  #L431560.  v1:= v2.`org.mozilla.javascript.ast.UnaryExpression.d` @type ^`boolean` @kind boolean;
  #L431564.  if v1 != 0 then goto L431598;
  #L431568.  call temp:= `operatorToString`(v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.operatorToString:(I)Ljava/lang/String;` @kind static;
  #L43156e.  v1:= temp @kind object;
  #L431570.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431576.  v1:= 32I;
  #L43157a.  if v3 == v1 then goto L43158e;
  #L43157e.  v1:= 31I;
  #L431582.  if v3 == v1 then goto L43158e;
  #L431586.  v1:= 126I;
  #L43158a.  if v3 != v1 then goto L431598;
  #L43158e.  v1:= " " @kind object;
  #L431592.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431598.  v1:= v2.`org.mozilla.javascript.ast.UnaryExpression.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L43159c.  call temp:= `toSource`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:()Ljava/lang/String;` @kind virtual;
  #L4315a2.  v1:= temp @kind object;
  #L4315a4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4315aa.  v1:= v2.`org.mozilla.javascript.ast.UnaryExpression.d` @type ^`boolean` @kind boolean;
  #L4315ae.  if v1 == 0 then goto L4315c0;
  #L4315b2.  call temp:= `operatorToString`(v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.operatorToString:(I)Ljava/lang/String;` @kind static;
  #L4315b8.  v3:= temp @kind object;
  #L4315ba.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4315c0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4315c6.  v3:= temp @kind object;
  #L4315c8.  return v3 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.UnaryExpression` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/UnaryExpression;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431748.  call temp:= `visit`(v2, v1) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L43174e.  v0:= temp;
  #L431750.  if v0 == 0 then goto L43175e;
  #L431754.  v0:= v1.`org.mozilla.javascript.ast.UnaryExpression.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431758.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L43175e.  return @kind void;
}
