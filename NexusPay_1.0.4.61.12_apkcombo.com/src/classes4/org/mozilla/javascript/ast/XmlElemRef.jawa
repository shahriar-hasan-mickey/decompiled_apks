record `org.mozilla.javascript.ast.XmlElemRef` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.XmlRef` @kind class {
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.XmlElemRef.c` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.XmlElemRef.d` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.XmlElemRef.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.XmlElemRef` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/XmlElemRef;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4321f0.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/XmlRef;.<init>:()V` @kind direct;
  #L4321f6.  v0:= -1I;
  #L4321f8.  v1.`org.mozilla.javascript.ast.XmlElemRef.d` @type ^`int` := v0;
  #L4321fc.  v1.`org.mozilla.javascript.ast.XmlElemRef.e` @type ^`int` := v0;
  #L432200.  v0:= 77I;
  #L432204.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L432208.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.XmlElemRef` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/XmlElemRef;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43221c.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/XmlRef;.<init>:(I)V` @kind direct;
  #L432222.  v1:= -1I;
  #L432224.  v0.`org.mozilla.javascript.ast.XmlElemRef.d` @type ^`int` := v1;
  #L432228.  v0.`org.mozilla.javascript.ast.XmlElemRef.e` @type ^`int` := v1;
  #L43222c.  v1:= 77I;
  #L432230.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L432234.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.XmlElemRef` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/XmlElemRef;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L432248.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/XmlRef;.<init>:(II)V` @kind direct;
  #L43224e.  v1:= -1I;
  #L432250.  v0.`org.mozilla.javascript.ast.XmlElemRef.d` @type ^`int` := v1;
  #L432254.  v0.`org.mozilla.javascript.ast.XmlElemRef.e` @type ^`int` := v1;
  #L432258.  v1:= 77I;
  #L43225c.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L432260.  return @kind void;
}
procedure `org.mozilla.javascript.ast.AstNode` `getExpression`(`org.mozilla.javascript.ast.XmlElemRef` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/XmlElemRef;.getExpression:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4321d8.  v0:= v1.`org.mozilla.javascript.ast.XmlElemRef.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L4321dc.  return v0 @kind object;
}
procedure `int` `getLb`(`org.mozilla.javascript.ast.XmlElemRef` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/XmlElemRef;.getLb:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432118.  v0:= v1.`org.mozilla.javascript.ast.XmlElemRef.d` @type ^`int`;
  #L43211c.  return v0;
}
procedure `int` `getRb`(`org.mozilla.javascript.ast.XmlElemRef` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/XmlElemRef;.getRb:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432130.  v0:= v1.`org.mozilla.javascript.ast.XmlElemRef.e` @type ^`int`;
  #L432134.  return v0;
}
procedure `void` `setBrackets`(`org.mozilla.javascript.ast.XmlElemRef` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/XmlElemRef;.setBrackets:(II)V` @AccessFlag PUBLIC {
    temp;

  #L432274.  v0.`org.mozilla.javascript.ast.XmlElemRef.d` @type ^`int` := v1;
  #L432278.  v0.`org.mozilla.javascript.ast.XmlElemRef.e` @type ^`int` := v2;
  #L43227c.  return @kind void;
}
procedure `void` `setExpression`(`org.mozilla.javascript.ast.XmlElemRef` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/XmlElemRef;.setExpression:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L432290.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L432296.  v0.`org.mozilla.javascript.ast.XmlElemRef.c` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L43229a.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L4322a0.  return @kind void;
}
procedure `void` `setLb`(`org.mozilla.javascript.ast.XmlElemRef` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/XmlElemRef;.setLb:(I)V` @AccessFlag PUBLIC {
    temp;

  #L4322b4.  v0.`org.mozilla.javascript.ast.XmlElemRef.d` @type ^`int` := v1;
  #L4322b8.  return @kind void;
}
procedure `void` `setRb`(`org.mozilla.javascript.ast.XmlElemRef` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/XmlElemRef;.setRb:(I)V` @AccessFlag PUBLIC {
    temp;

  #L4322cc.  v0.`org.mozilla.javascript.ast.XmlElemRef.e` @type ^`int` := v1;
  #L4322d0.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.XmlElemRef` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/XmlElemRef;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L432148.  v0:= new `java.lang.StringBuilder`;
  #L43214c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L432152.  call temp:= `makeIndent`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L432158.  v3:= temp @kind object;
  #L43215a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L432160.  call temp:= `isAttributeAccess`(v2) @signature `Lorg/mozilla/javascript/ast/XmlRef;.isAttributeAccess:()Z` @kind virtual;
  #L432166.  v3:= temp;
  #L432168.  if v3 == 0 then goto L432176;
  #L43216c.  v3:= "@" @kind object;
  #L432170.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L432176.  v3:= v2.`org.mozilla.javascript.ast.XmlRef.namespace` @type ^`org.mozilla.javascript.ast.Name` @kind object;
  #L43217a.  v1:= 0I;
  #L43217c.  if v3 == 0 then goto L432198;
  #L432180.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/Name;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L432186.  v3:= temp @kind object;
  #L432188.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43218e.  v3:= "::" @kind object;
  #L432192.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L432198.  v3:= "[" @kind object;
  #L43219c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4321a2.  v3:= v2.`org.mozilla.javascript.ast.XmlElemRef.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L4321a6.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L4321ac.  v3:= temp @kind object;
  #L4321ae.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4321b4.  v3:= "]" @kind object;
  #L4321b8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4321be.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4321c4.  v3:= temp @kind object;
  #L4321c6.  return v3 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.XmlElemRef` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/XmlElemRef;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4322e4.  call temp:= `visit`(v2, v1) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L4322ea.  v0:= temp;
  #L4322ec.  if v0 == 0 then goto L432308;
  #L4322f0.  v0:= v1.`org.mozilla.javascript.ast.XmlRef.namespace` @type ^`org.mozilla.javascript.ast.Name` @kind object;
  #L4322f4.  if v0 == 0 then goto L4322fe;
  #L4322f8.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/Name;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L4322fe.  v0:= v1.`org.mozilla.javascript.ast.XmlElemRef.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L432302.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L432308.  return @kind void;
}
