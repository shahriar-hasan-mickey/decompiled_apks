record `org.mozilla.javascript.ast.Scope` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.Jump` @kind class {
  `java.util.List` `org.mozilla.javascript.ast.Scope.e` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.Scope` `org.mozilla.javascript.ast.Scope.parentScope` @AccessFlag PROTECTED;
  `java.util.Map` `org.mozilla.javascript.ast.Scope.symbolTable` @AccessFlag PROTECTED;
  `org.mozilla.javascript.ast.ScriptNode` `org.mozilla.javascript.ast.Scope.top` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.Scope` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/Scope;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42fd68.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/Jump;.<init>:()V` @kind direct;
  #L42fd6e.  v0:= 129I;
  #L42fd72.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42fd76.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.Scope` v1 @kind this, `int` v2 ) @signature `Lorg/mozilla/javascript/ast/Scope;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42fd88.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/Jump;.<init>:()V` @kind direct;
  #L42fd8e.  v0:= 129I;
  #L42fd92.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42fd96.  v1.`org.mozilla.javascript.ast.AstNode.position` @type ^`int` := v2;
  #L42fd9a.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.Scope` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/Scope;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42fdac.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/Scope;.<init>:(I)V` @kind direct;
  #L42fdb2.  v0.`org.mozilla.javascript.ast.AstNode.length` @type ^`int` := v2;
  #L42fdb6.  return @kind void;
}
procedure `void` `joinScopes`(`org.mozilla.javascript.ast.Scope` v3 @kind object, `org.mozilla.javascript.ast.Scope` v4 @kind object) @signature `Lorg/mozilla/javascript/ast/Scope;.joinScopes:(Lorg/mozilla/javascript/ast/Scope;Lorg/mozilla/javascript/ast/Scope;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L42fe18.  call temp:= `m`(v3) @signature `Lorg/mozilla/javascript/ast/Scope;.m:()Ljava/util/Map;` @kind direct;
  #L42fe1e.  v3:= temp @kind object;
  #L42fe20.  call temp:= `m`(v4) @signature `Lorg/mozilla/javascript/ast/Scope;.m:()Ljava/util/Map;` @kind direct;
  #L42fe26.  v0:= temp @kind object;
  #L42fe28.  call temp:= `keySet`(v3) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L42fe2e.  v1:= temp @kind object;
  #L42fe30.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L42fe36.  v2:= temp @kind object;
  #L42fe38.  call temp:= `disjoint`(v1, v2) @signature `Ljava/util/Collections;.disjoint:(Ljava/util/Collection;Ljava/util/Collection;)Z` @kind static;
  #L42fe3e.  v1:= temp;
  #L42fe40.  if v1 != 0 then goto L42fe4a;
  #L42fe44.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L42fe4a.  call temp:= `entrySet`(v3) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L42fe50.  v3:= temp @kind object;
  #L42fe52.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42fe58.  v3:= temp @kind object;
  #L42fe5a.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42fe60.  v1:= temp;
  #L42fe62.  if v1 == 0 then goto L42fe94;
  #L42fe66.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42fe6c.  v1:= temp @kind object;
  #L42fe6e.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L42fe72.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L42fe78.  v2:= temp @kind object;
  #L42fe7a.  v2:= (`org.mozilla.javascript.ast.Symbol`) v2 @kind object;
  #L42fe7e.  call `setContainingTable`(v2, v4) @signature `Lorg/mozilla/javascript/ast/Symbol;.setContainingTable:(Lorg/mozilla/javascript/ast/Scope;)V` @kind virtual;
  #L42fe84.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L42fe8a.  v1:= temp @kind object;
  #L42fe8c.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42fe92.  goto L42fe5a;
  #L42fe94.  return @kind void;
}
procedure `java.util.Map` `m`(`org.mozilla.javascript.ast.Scope` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/Scope;.m:()Ljava/util/Map;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L42fc2c.  v0:= v2.`org.mozilla.javascript.ast.Scope.symbolTable` @type ^`java.util.Map` @kind object;
  #L42fc30.  if v0 != 0 then goto L42fc44;
  #L42fc34.  v0:= new `java.util.LinkedHashMap`;
  #L42fc38.  v1:= 5I;
  #L42fc3a.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(I)V` @kind direct;
  #L42fc40.  v2.`org.mozilla.javascript.ast.Scope.symbolTable` @type ^`java.util.Map` := v0 @kind object;
  #L42fc44.  v0:= v2.`org.mozilla.javascript.ast.Scope.symbolTable` @type ^`java.util.Map` @kind object;
  #L42fc48.  return v0 @kind object;
}
procedure `org.mozilla.javascript.ast.Scope` `splitScope`(`org.mozilla.javascript.ast.Scope` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/Scope;.splitScope:(Lorg/mozilla/javascript/ast/Scope;)Lorg/mozilla/javascript/ast/Scope;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L42fcc8.  v0:= new `org.mozilla.javascript.ast.Scope`;
  #L42fccc.  call temp:= `getType`(v2) @signature `Lorg/mozilla/javascript/Node;.getType:()I` @kind virtual;
  #L42fcd2.  v1:= temp;
  #L42fcd4.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/Scope;.<init>:(I)V` @kind direct;
  #L42fcda.  v1:= v2.`org.mozilla.javascript.ast.Scope.symbolTable` @type ^`java.util.Map` @kind object;
  #L42fcde.  v0.`org.mozilla.javascript.ast.Scope.symbolTable` @type ^`java.util.Map` := v1 @kind object;
  #L42fce2.  v1:= 0I;
  #L42fce4.  v2.`org.mozilla.javascript.ast.Scope.symbolTable` @type ^`java.util.Map` := v1 @kind object;
  #L42fce8.  v1:= v2.`org.mozilla.javascript.ast.AstNode.parent` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42fcec.  v0.`org.mozilla.javascript.ast.AstNode.parent` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42fcf0.  call temp:= `getParentScope`(v2) @signature `Lorg/mozilla/javascript/ast/Scope;.getParentScope:()Lorg/mozilla/javascript/ast/Scope;` @kind virtual;
  #L42fcf6.  v1:= temp @kind object;
  #L42fcf8.  call `setParentScope`(v0, v1) @signature `Lorg/mozilla/javascript/ast/Scope;.setParentScope:(Lorg/mozilla/javascript/ast/Scope;)V` @kind virtual;
  #L42fcfe.  call `setParentScope`(v0, v0) @signature `Lorg/mozilla/javascript/ast/Scope;.setParentScope:(Lorg/mozilla/javascript/ast/Scope;)V` @kind virtual;
  #L42fd04.  v2.`org.mozilla.javascript.ast.AstNode.parent` @type ^`org.mozilla.javascript.ast.AstNode` := v0 @kind object;
  #L42fd08.  v2:= v2.`org.mozilla.javascript.ast.Scope.top` @type ^`org.mozilla.javascript.ast.ScriptNode` @kind object;
  #L42fd0c.  v0.`org.mozilla.javascript.ast.Scope.top` @type ^`org.mozilla.javascript.ast.ScriptNode` := v2 @kind object;
  #L42fd10.  return v0 @kind object;
}
procedure `void` `addChildScope`(`org.mozilla.javascript.ast.Scope` v1 @kind this, `org.mozilla.javascript.ast.Scope` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/Scope;.addChildScope:(Lorg/mozilla/javascript/ast/Scope;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fdc8.  v0:= v1.`org.mozilla.javascript.ast.Scope.e` @type ^`java.util.List` @kind object;
  #L42fdcc.  if v0 != 0 then goto L42fdde;
  #L42fdd0.  v0:= new `java.util.ArrayList`;
  #L42fdd4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L42fdda.  v1.`org.mozilla.javascript.ast.Scope.e` @type ^`java.util.List` := v0 @kind object;
  #L42fdde.  v0:= v1.`org.mozilla.javascript.ast.Scope.e` @type ^`java.util.List` @kind object;
  #L42fde2.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L42fde8.  call `setParentScope`(v2, v1) @signature `Lorg/mozilla/javascript/ast/Scope;.setParentScope:(Lorg/mozilla/javascript/ast/Scope;)V` @kind virtual;
  #L42fdee.  return @kind void;
}
procedure `void` `clearParentScope`(`org.mozilla.javascript.ast.Scope` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/Scope;.clearParentScope:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fe00.  v0:= 0I;
  #L42fe02.  v1.`org.mozilla.javascript.ast.Scope.parentScope` @type ^`org.mozilla.javascript.ast.Scope` := v0 @kind object;
  #L42fe06.  return @kind void;
}
procedure `java.util.List` `getChildScopes`(`org.mozilla.javascript.ast.Scope` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/Scope;.getChildScopes:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fbd4.  v0:= v1.`org.mozilla.javascript.ast.Scope.e` @type ^`java.util.List` @kind object;
  #L42fbd8.  return v0 @kind object;
}
procedure `org.mozilla.javascript.ast.Scope` `getDefiningScope`(`org.mozilla.javascript.ast.Scope` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/Scope;.getDefiningScope:(Ljava/lang/String;)Lorg/mozilla/javascript/ast/Scope;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42fc74.  v0:= v2 @kind object;
  #L42fc76.  if v0 == 0 then goto L42fc9a;
  #L42fc7a.  call temp:= `getSymbolTable`(v0) @signature `Lorg/mozilla/javascript/ast/Scope;.getSymbolTable:()Ljava/util/Map;` @kind virtual;
  #L42fc80.  v1:= temp @kind object;
  #L42fc82.  if v1 == 0 then goto L42fc94;
  #L42fc86.  call temp:= `containsKey`(v1, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L42fc8c.  v1:= temp;
  #L42fc8e.  if v1 == 0 then goto L42fc94;
  #L42fc92.  return v0 @kind object;
  #L42fc94.  v0:= v0.`org.mozilla.javascript.ast.Scope.parentScope` @type ^`org.mozilla.javascript.ast.Scope` @kind object;
  #L42fc98.  goto L42fc76;
  #L42fc9a.  v3:= 0I;
  #L42fc9c.  return v3 @kind object;
}
procedure `org.mozilla.javascript.ast.Scope` `getParentScope`(`org.mozilla.javascript.ast.Scope` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/Scope;.getParentScope:()Lorg/mozilla/javascript/ast/Scope;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fcb0.  v0:= v1.`org.mozilla.javascript.ast.Scope.parentScope` @type ^`org.mozilla.javascript.ast.Scope` @kind object;
  #L42fcb4.  return v0 @kind object;
}
procedure `java.util.List` `getStatements`(`org.mozilla.javascript.ast.Scope` v3 @kind this) @signature `Lorg/mozilla/javascript/ast/Scope;.getStatements:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42fbec.  v0:= new `java.util.ArrayList`;
  #L42fbf0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L42fbf6.  call temp:= `getFirstChild`(v3) @signature `Lorg/mozilla/javascript/Node;.getFirstChild:()Lorg/mozilla/javascript/Node;` @kind virtual;
  #L42fbfc.  v1:= temp @kind object;
  #L42fbfe.  if v1 == 0 then goto L42fc18;
  #L42fc02.  v2:= v1 @kind object;
  #L42fc04.  v2:= (`org.mozilla.javascript.ast.AstNode`) v2 @kind object;
  #L42fc08.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L42fc0e.  call temp:= `getNext`(v1) @signature `Lorg/mozilla/javascript/Node;.getNext:()Lorg/mozilla/javascript/Node;` @kind virtual;
  #L42fc14.  v1:= temp @kind object;
  #L42fc16.  goto L42fbfe;
  #L42fc18.  return v0 @kind object;
}
procedure `org.mozilla.javascript.ast.Symbol` `getSymbol`(`org.mozilla.javascript.ast.Scope` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/Scope;.getSymbol:(Ljava/lang/String;)Lorg/mozilla/javascript/ast/Symbol;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fd3c.  v0:= v1.`org.mozilla.javascript.ast.Scope.symbolTable` @type ^`java.util.Map` @kind object;
  #L42fd40.  if v0 != 0 then goto L42fd48;
  #L42fd44.  v2:= 0I;
  #L42fd46.  goto L42fd54;
  #L42fd48.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42fd4e.  v2:= temp @kind object;
  #L42fd50.  v2:= (`org.mozilla.javascript.ast.Symbol`) v2 @kind object;
  #L42fd54.  return v2 @kind object;
}
procedure `java.util.Map` `getSymbolTable`(`org.mozilla.javascript.ast.Scope` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/Scope;.getSymbolTable:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fc5c.  v0:= v1.`org.mozilla.javascript.ast.Scope.symbolTable` @type ^`java.util.Map` @kind object;
  #L42fc60.  return v0 @kind object;
}
procedure `org.mozilla.javascript.ast.ScriptNode` `getTop`(`org.mozilla.javascript.ast.Scope` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/Scope;.getTop:()Lorg/mozilla/javascript/ast/ScriptNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fd24.  v0:= v1.`org.mozilla.javascript.ast.Scope.top` @type ^`org.mozilla.javascript.ast.ScriptNode` @kind object;
  #L42fd28.  return v0 @kind object;
}
procedure `void` `putSymbol`(`org.mozilla.javascript.ast.Scope` v2 @kind this, `org.mozilla.javascript.ast.Symbol` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/Scope;.putSymbol:(Lorg/mozilla/javascript/ast/Symbol;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42fea8.  call temp:= `getName`(v3) @signature `Lorg/mozilla/javascript/ast/Symbol;.getName:()Ljava/lang/String;` @kind virtual;
  #L42feae.  v0:= temp @kind object;
  #L42feb0.  if v0 == 0 then goto L42fede;
  #L42feb4.  call temp:= `m`(v2) @signature `Lorg/mozilla/javascript/ast/Scope;.m:()Ljava/util/Map;` @kind direct;
  #L42feba.  v0:= v2.`org.mozilla.javascript.ast.Scope.symbolTable` @type ^`java.util.Map` @kind object;
  #L42febe.  call temp:= `getName`(v3) @signature `Lorg/mozilla/javascript/ast/Symbol;.getName:()Ljava/lang/String;` @kind virtual;
  #L42fec4.  v1:= temp @kind object;
  #L42fec6.  call temp:= `put`(v0, v1, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42fecc.  call `setContainingTable`(v3, v2) @signature `Lorg/mozilla/javascript/ast/Symbol;.setContainingTable:(Lorg/mozilla/javascript/ast/Scope;)V` @kind virtual;
  #L42fed2.  v0:= v2.`org.mozilla.javascript.ast.Scope.top` @type ^`org.mozilla.javascript.ast.ScriptNode` @kind object;
  #L42fed6.  call `n`(v0, v3) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.n:(Lorg/mozilla/javascript/ast/Symbol;)V` @kind virtual;
  #L42fedc.  return @kind void;
  #L42fede.  v3:= new `java.lang.IllegalArgumentException`;
  #L42fee2.  v0:= "null symbol name" @kind object;
  #L42fee6.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42feec.  throw v3;
}
procedure `void` `replaceWith`(`org.mozilla.javascript.ast.Scope` v2 @kind this, `org.mozilla.javascript.ast.Scope` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/Scope;.replaceWith:(Lorg/mozilla/javascript/ast/Scope;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ff00.  v0:= v2.`org.mozilla.javascript.ast.Scope.e` @type ^`java.util.List` @kind object;
  #L42ff04.  if v0 == 0 then goto L42ff40;
  #L42ff08.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42ff0e.  v0:= temp @kind object;
  #L42ff10.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42ff16.  v1:= temp;
  #L42ff18.  if v1 == 0 then goto L42ff30;
  #L42ff1c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42ff22.  v1:= temp @kind object;
  #L42ff24.  v1:= (`org.mozilla.javascript.ast.Scope`) v1 @kind object;
  #L42ff28.  call `addChildScope`(v3, v1) @signature `Lorg/mozilla/javascript/ast/Scope;.addChildScope:(Lorg/mozilla/javascript/ast/Scope;)V` @kind virtual;
  #L42ff2e.  goto L42ff10;
  #L42ff30.  v0:= v2.`org.mozilla.javascript.ast.Scope.e` @type ^`java.util.List` @kind object;
  #L42ff34.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L42ff3a.  v0:= 0I;
  #L42ff3c.  v2.`org.mozilla.javascript.ast.Scope.e` @type ^`java.util.List` := v0 @kind object;
  #L42ff40.  v0:= v2.`org.mozilla.javascript.ast.Scope.symbolTable` @type ^`java.util.Map` @kind object;
  #L42ff44.  if v0 == 0 then goto L42ff5a;
  #L42ff48.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L42ff4e.  v0:= temp;
  #L42ff50.  if v0 != 0 then goto L42ff5a;
  #L42ff54.  call `joinScopes`(v2, v3) @signature `Lorg/mozilla/javascript/ast/Scope;.joinScopes:(Lorg/mozilla/javascript/ast/Scope;Lorg/mozilla/javascript/ast/Scope;)V` @kind static;
  #L42ff5a.  return @kind void;
}
procedure `void` `setParentScope`(`org.mozilla.javascript.ast.Scope` v0 @kind this, `org.mozilla.javascript.ast.Scope` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/Scope;.setParentScope:(Lorg/mozilla/javascript/ast/Scope;)V` @AccessFlag PUBLIC {
    temp;

  #L42ff6c.  v0.`org.mozilla.javascript.ast.Scope.parentScope` @type ^`org.mozilla.javascript.ast.Scope` := v1 @kind object;
  #L42ff70.  if v1 != 0 then goto L42ff7c;
  #L42ff74.  v1:= v0 @kind object;
  #L42ff76.  v1:= (`org.mozilla.javascript.ast.ScriptNode`) v1 @kind object;
  #L42ff7a.  goto L42ff80;
  #L42ff7c.  v1:= v1.`org.mozilla.javascript.ast.Scope.top` @type ^`org.mozilla.javascript.ast.ScriptNode` @kind object;
  #L42ff80.  v0.`org.mozilla.javascript.ast.Scope.top` @type ^`org.mozilla.javascript.ast.ScriptNode` := v1 @kind object;
  #L42ff84.  return @kind void;
}
procedure `void` `setSymbolTable`(`org.mozilla.javascript.ast.Scope` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/Scope;.setSymbolTable:(Ljava/util/Map;)V` @AccessFlag PUBLIC {
    temp;

  #L42ff98.  v0.`org.mozilla.javascript.ast.Scope.symbolTable` @type ^`java.util.Map` := v1 @kind object;
  #L42ff9c.  return @kind void;
}
procedure `void` `setTop`(`org.mozilla.javascript.ast.Scope` v0 @kind this, `org.mozilla.javascript.ast.ScriptNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/Scope;.setTop:(Lorg/mozilla/javascript/ast/ScriptNode;)V` @AccessFlag PUBLIC {
    temp;

  #L42ffb0.  v0.`org.mozilla.javascript.ast.Scope.top` @type ^`org.mozilla.javascript.ast.ScriptNode` := v1 @kind object;
  #L42ffb4.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.Scope` v4 @kind this, `int` v5 ) @signature `Lorg/mozilla/javascript/ast/Scope;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42fb48.  v0:= new `java.lang.StringBuilder`;
  #L42fb4c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42fb52.  call temp:= `makeIndent`(v4, v5) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42fb58.  v1:= temp @kind object;
  #L42fb5a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42fb60.  v1:= "{\n" @kind object;
  #L42fb64.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42fb6a.  call temp:= `iterator`(v4) @signature `Lorg/mozilla/javascript/Node;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L42fb70.  v1:= temp @kind object;
  #L42fb72.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42fb78.  v2:= temp;
  #L42fb7a.  if v2 == 0 then goto L42fba2;
  #L42fb7e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42fb84.  v2:= temp @kind object;
  #L42fb86.  v2:= (`org.mozilla.javascript.Node`) v2 @kind object;
  #L42fb8a.  v2:= (`org.mozilla.javascript.ast.AstNode`) v2 @kind object;
  #L42fb8e.  v3:= v5 + 1;
  #L42fb92.  call temp:= `toSource`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42fb98.  v2:= temp @kind object;
  #L42fb9a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42fba0.  goto L42fb72;
  #L42fba2.  call temp:= `makeIndent`(v4, v5) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42fba8.  v5:= temp @kind object;
  #L42fbaa.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42fbb0.  v5:= "}\n" @kind object;
  #L42fbb4.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42fbba.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42fbc0.  v5:= temp @kind object;
  #L42fbc2.  return v5 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.Scope` v2 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/Scope;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42ffc8.  call temp:= `visit`(v3, v2) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L42ffce.  v0:= temp;
  #L42ffd0.  if v0 == 0 then goto L430000;
  #L42ffd4.  call temp:= `iterator`(v2) @signature `Lorg/mozilla/javascript/Node;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L42ffda.  v0:= temp @kind object;
  #L42ffdc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42ffe2.  v1:= temp;
  #L42ffe4.  if v1 == 0 then goto L430000;
  #L42ffe8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42ffee.  v1:= temp @kind object;
  #L42fff0.  v1:= (`org.mozilla.javascript.Node`) v1 @kind object;
  #L42fff4.  v1:= (`org.mozilla.javascript.ast.AstNode`) v1 @kind object;
  #L42fff8.  call `visit`(v1, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42fffe.  goto L42ffdc;
  #L430000.  return @kind void;
}
