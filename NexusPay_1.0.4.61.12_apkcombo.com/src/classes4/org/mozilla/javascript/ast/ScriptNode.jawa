record `org.mozilla.javascript.ast.ScriptNode` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.Scope` @kind class {
  `int` `org.mozilla.javascript.ast.ScriptNode.f` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.ScriptNode.g` @AccessFlag PRIVATE;
  `java.lang.String` `org.mozilla.javascript.ast.ScriptNode.h` @AccessFlag PRIVATE;
  `java.lang.String` `org.mozilla.javascript.ast.ScriptNode.i` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.ScriptNode.j` @AccessFlag PRIVATE;
  `java.util.List` `org.mozilla.javascript.ast.ScriptNode.k` @AccessFlag PRIVATE;
  `java.util.List` `org.mozilla.javascript.ast.ScriptNode.l` @AccessFlag PRIVATE;
  `java.util.List` `org.mozilla.javascript.ast.ScriptNode.m` @AccessFlag PRIVATE;
  `java.util.List` `org.mozilla.javascript.ast.ScriptNode.n` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.ScriptNode.o` @AccessFlag PRIVATE;
  `java.lang.String`[] `org.mozilla.javascript.ast.ScriptNode.p` @AccessFlag PRIVATE;
  `boolean`[] `org.mozilla.javascript.ast.ScriptNode.q` @AccessFlag PRIVATE;
  `java.lang.Object` `org.mozilla.javascript.ast.ScriptNode.r` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.ScriptNode.s` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ScriptNode` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L430354.  call `<init>`(v2) @signature `Lorg/mozilla/javascript/ast/Scope;.<init>:()V` @kind direct;
  #L43035a.  v0:= -1I;
  #L43035c.  v2.`org.mozilla.javascript.ast.ScriptNode.f` @type ^`int` := v0;
  #L430360.  v2.`org.mozilla.javascript.ast.ScriptNode.g` @type ^`int` := v0;
  #L430364.  v2.`org.mozilla.javascript.ast.ScriptNode.j` @type ^`int` := v0;
  #L430368.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L43036e.  v0:= temp @kind object;
  #L430370.  v2.`org.mozilla.javascript.ast.ScriptNode.m` @type ^`java.util.List` := v0 @kind object;
  #L430374.  v0:= new `java.util.ArrayList`;
  #L430378.  v1:= 4I;
  #L43037a.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L430380.  v2.`org.mozilla.javascript.ast.ScriptNode.n` @type ^`java.util.List` := v0 @kind object;
  #L430384.  v0:= 0I;
  #L430386.  v2.`org.mozilla.javascript.ast.ScriptNode.o` @type ^`int` := v0;
  #L43038a.  v2.`org.mozilla.javascript.ast.ScriptNode.s` @type ^`int` := v0;
  #L43038e.  v2.`org.mozilla.javascript.ast.Scope.top` @type ^`org.mozilla.javascript.ast.ScriptNode` := v2 @kind object;
  #L430392.  v0:= 136I;
  #L430396.  v2.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L43039a.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this, `int` v2 ) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4303ac.  call `<init>`(v1, v2) @signature `Lorg/mozilla/javascript/ast/Scope;.<init>:(I)V` @kind direct;
  #L4303b2.  v2:= -1I;
  #L4303b4.  v1.`org.mozilla.javascript.ast.ScriptNode.f` @type ^`int` := v2;
  #L4303b8.  v1.`org.mozilla.javascript.ast.ScriptNode.g` @type ^`int` := v2;
  #L4303bc.  v1.`org.mozilla.javascript.ast.ScriptNode.j` @type ^`int` := v2;
  #L4303c0.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L4303c6.  v2:= temp @kind object;
  #L4303c8.  v1.`org.mozilla.javascript.ast.ScriptNode.m` @type ^`java.util.List` := v2 @kind object;
  #L4303cc.  v2:= new `java.util.ArrayList`;
  #L4303d0.  v0:= 4I;
  #L4303d2.  call `<init>`(v2, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4303d8.  v1.`org.mozilla.javascript.ast.ScriptNode.n` @type ^`java.util.List` := v2 @kind object;
  #L4303dc.  v2:= 0I;
  #L4303de.  v1.`org.mozilla.javascript.ast.ScriptNode.o` @type ^`int` := v2;
  #L4303e2.  v1.`org.mozilla.javascript.ast.ScriptNode.s` @type ^`int` := v2;
  #L4303e6.  v1.`org.mozilla.javascript.ast.Scope.top` @type ^`org.mozilla.javascript.ast.ScriptNode` := v1 @kind object;
  #L4303ea.  v2:= 136I;
  #L4303ee.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v2;
  #L4303f2.  return @kind void;
}
procedure `int` `addFunction`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this, `org.mozilla.javascript.ast.FunctionNode` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.addFunction:(Lorg/mozilla/javascript/ast/FunctionNode;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430038.  if v2 != 0 then goto L430042;
  #L43003c.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L430042.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.k` @type ^`java.util.List` @kind object;
  #L430046.  if v0 != 0 then goto L430058;
  #L43004a.  v0:= new `java.util.ArrayList`;
  #L43004e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L430054.  v1.`org.mozilla.javascript.ast.ScriptNode.k` @type ^`java.util.List` := v0 @kind object;
  #L430058.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.k` @type ^`java.util.List` @kind object;
  #L43005c.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L430062.  v2:= v1.`org.mozilla.javascript.ast.ScriptNode.k` @type ^`java.util.List` @kind object;
  #L430066.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L43006c.  v2:= temp;
  #L43006e.  v2:= v2 + -1;
  #L430072.  return v2;
}
procedure `void` `addRegExp`(`org.mozilla.javascript.ast.ScriptNode` v2 @kind this, `org.mozilla.javascript.ast.RegExpLiteral` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.addRegExp:(Lorg/mozilla/javascript/ast/RegExpLiteral;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430404.  if v3 != 0 then goto L43040e;
  #L430408.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L43040e.  v0:= v2.`org.mozilla.javascript.ast.ScriptNode.l` @type ^`java.util.List` @kind object;
  #L430412.  if v0 != 0 then goto L430424;
  #L430416.  v0:= new `java.util.ArrayList`;
  #L43041a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L430420.  v2.`org.mozilla.javascript.ast.ScriptNode.l` @type ^`java.util.List` := v0 @kind object;
  #L430424.  v0:= v2.`org.mozilla.javascript.ast.ScriptNode.l` @type ^`java.util.List` @kind object;
  #L430428.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L43042e.  v0:= 4I;
  #L430430.  v1:= v2.`org.mozilla.javascript.ast.ScriptNode.l` @type ^`java.util.List` @kind object;
  #L430434.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L43043a.  v1:= temp;
  #L43043c.  v1:= v1 + -1;
  #L430440.  call `putIntProp`(v3, v0, v1) @signature `Lorg/mozilla/javascript/Node;.putIntProp:(II)V` @kind virtual;
  #L430446.  return @kind void;
}
procedure `void` `flattenSymbolTable`(`org.mozilla.javascript.ast.ScriptNode` v5 @kind this, `boolean` v6 ) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.flattenSymbolTable:(Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4304a0.  v0:= 0I;
  #L4304a2.  if v6 != 0 then goto L4304f6;
  #L4304a6.  v6:= new `java.util.ArrayList`;
  #L4304aa.  call `<init>`(v6) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4304b0.  v1:= v5.`org.mozilla.javascript.ast.Scope.symbolTable` @type ^`java.util.Map` @kind object;
  #L4304b4.  if v1 == 0 then goto L4304f2;
  #L4304b8.  v1:= 0I;
  #L4304ba.  v2:= v5.`org.mozilla.javascript.ast.ScriptNode.n` @type ^`java.util.List` @kind object;
  #L4304be.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4304c4.  v2:= temp;
  #L4304c6.  if v1 >= v2 then goto L4304f2;
  #L4304ca.  v2:= v5.`org.mozilla.javascript.ast.ScriptNode.n` @type ^`java.util.List` @kind object;
  #L4304ce.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4304d4.  v2:= temp @kind object;
  #L4304d6.  v2:= (`org.mozilla.javascript.ast.Symbol`) v2 @kind object;
  #L4304da.  call temp:= `getContainingTable`(v2) @signature `Lorg/mozilla/javascript/ast/Symbol;.getContainingTable:()Lorg/mozilla/javascript/ast/Scope;` @kind virtual;
  #L4304e0.  v3:= temp @kind object;
  #L4304e2.  if v3 != v5 then goto L4304ec;
  #L4304e6.  call temp:= `add`(v6, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4304ec.  v1:= v1 + 1;
  #L4304f0.  goto L4304ba;
  #L4304f2.  v5.`org.mozilla.javascript.ast.ScriptNode.n` @type ^`java.util.List` := v6 @kind object;
  #L4304f6.  v6:= v5.`org.mozilla.javascript.ast.ScriptNode.n` @type ^`java.util.List` @kind object;
  #L4304fa.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L430500.  v6:= temp;
  #L430502.  v6:= new `java.lang.String`[v6];
  #L430506.  v5.`org.mozilla.javascript.ast.ScriptNode.p` @type ^`java.lang.String`[] := v6 @kind object;
  #L43050a.  v6:= v5.`org.mozilla.javascript.ast.ScriptNode.n` @type ^`java.util.List` @kind object;
  #L43050e.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L430514.  v6:= temp;
  #L430516.  v6:= new `boolean`[v6];
  #L43051a.  v5.`org.mozilla.javascript.ast.ScriptNode.q` @type ^`boolean`[] := v6 @kind object;
  #L43051e.  v6:= 0I;
  #L430520.  v1:= v5.`org.mozilla.javascript.ast.ScriptNode.n` @type ^`java.util.List` @kind object;
  #L430524.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L43052a.  v1:= temp;
  #L43052c.  if v6 >= v1 then goto L43057a;
  #L430530.  v1:= v5.`org.mozilla.javascript.ast.ScriptNode.n` @type ^`java.util.List` @kind object;
  #L430534.  call temp:= `get`(v1, v6) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L43053a.  v1:= temp @kind object;
  #L43053c.  v1:= (`org.mozilla.javascript.ast.Symbol`) v1 @kind object;
  #L430540.  v2:= v5.`org.mozilla.javascript.ast.ScriptNode.p` @type ^`java.lang.String`[] @kind object;
  #L430544.  call temp:= `getName`(v1) @signature `Lorg/mozilla/javascript/ast/Symbol;.getName:()Ljava/lang/String;` @kind virtual;
  #L43054a.  v3:= temp @kind object;
  #L43054c.  v2[v6]:= v3 @kind object;
  #L430550.  v2:= v5.`org.mozilla.javascript.ast.ScriptNode.q` @type ^`boolean`[] @kind object;
  #L430554.  call temp:= `getDeclType`(v1) @signature `Lorg/mozilla/javascript/ast/Symbol;.getDeclType:()I` @kind virtual;
  #L43055a.  v3:= temp;
  #L43055c.  v4:= 154I;
  #L430560.  if v3 != v4 then goto L430568;
  #L430564.  v3:= 1I;
  #L430566.  goto L43056a;
  #L430568.  v3:= 0I;
  #L43056a.  v2[v6]:= v3 @kind boolean;
  #L43056e.  call `setIndex`(v1, v6) @signature `Lorg/mozilla/javascript/ast/Symbol;.setIndex:(I)V` @kind virtual;
  #L430574.  v6:= v6 + 1;
  #L430578.  goto L430520;
  #L43057a.  return @kind void;
}
procedure `int` `getBaseLineno`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getBaseLineno:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430084.  v0:= v1.`org.mozilla.javascript.Node.lineno` @type ^`int`;
  #L430088.  return v0;
}
procedure `java.lang.Object` `getCompilerData`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getCompilerData:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4301cc.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.r` @type ^`java.lang.Object` @kind object;
  #L4301d0.  return v0 @kind object;
}
procedure `java.lang.String` `getEncodedSource`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getEncodedSource:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4301e4.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.i` @type ^`java.lang.String` @kind object;
  #L4301e8.  return v0 @kind object;
}
procedure `int` `getEncodedSourceEnd`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getEncodedSourceEnd:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43009c.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.g` @type ^`int`;
  #L4300a0.  return v0;
}
procedure `int` `getEncodedSourceStart`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getEncodedSourceStart:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4300b4.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.f` @type ^`int`;
  #L4300b8.  return v0;
}
procedure `int` `getEndLineno`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getEndLineno:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4300cc.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.j` @type ^`int`;
  #L4300d0.  return v0;
}
procedure `int` `getFunctionCount`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getFunctionCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4300e4.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.k` @type ^`java.util.List` @kind object;
  #L4300e8.  if v0 != 0 then goto L4300f0;
  #L4300ec.  v0:= 0I;
  #L4300ee.  goto L4300f8;
  #L4300f0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4300f6.  v0:= temp;
  #L4300f8.  return v0;
}
procedure `org.mozilla.javascript.ast.FunctionNode` `getFunctionNode`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this, `int` v2 ) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getFunctionNode:(I)Lorg/mozilla/javascript/ast/FunctionNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430330.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.k` @type ^`java.util.List` @kind object;
  #L430334.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L43033a.  v2:= temp @kind object;
  #L43033c.  v2:= (`org.mozilla.javascript.ast.FunctionNode`) v2 @kind object;
  #L430340.  return v2 @kind object;
}
procedure `java.util.List` `getFunctions`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getFunctions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4302f8.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.k` @type ^`java.util.List` @kind object;
  #L4302fc.  if v0 != 0 then goto L430304;
  #L430300.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.m` @type ^`java.util.List` @kind object;
  #L430304.  return v0 @kind object;
}
procedure `int` `getIndexForNameNode`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this, `org.mozilla.javascript.Node` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getIndexForNameNode:(Lorg/mozilla/javascript/Node;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43010c.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.p` @type ^`java.lang.String`[] @kind object;
  #L430110.  if v0 != 0 then goto L43011a;
  #L430114.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L43011a.  call temp:= `getScope`(v2) @signature `Lorg/mozilla/javascript/Node;.getScope:()Lorg/mozilla/javascript/ast/Scope;` @kind virtual;
  #L430120.  v0:= temp @kind object;
  #L430122.  if v0 != 0 then goto L43012a;
  #L430126.  v2:= 0I;
  #L430128.  goto L43013e;
  #L43012a.  v2:= (`org.mozilla.javascript.ast.Name`) v2 @kind object;
  #L43012e.  call temp:= `getIdentifier`(v2) @signature `Lorg/mozilla/javascript/ast/Name;.getIdentifier:()Ljava/lang/String;` @kind virtual;
  #L430134.  v2:= temp @kind object;
  #L430136.  call temp:= `getSymbol`(v0, v2) @signature `Lorg/mozilla/javascript/ast/Scope;.getSymbol:(Ljava/lang/String;)Lorg/mozilla/javascript/ast/Symbol;` @kind virtual;
  #L43013c.  v2:= temp @kind object;
  #L43013e.  if v2 != 0 then goto L430146;
  #L430142.  v2:= -1I;
  #L430144.  goto L43014e;
  #L430146.  call temp:= `getIndex`(v2) @signature `Lorg/mozilla/javascript/ast/Symbol;.getIndex:()I` @kind virtual;
  #L43014c.  v2:= temp;
  #L43014e.  return v2;
}
procedure `java.lang.String` `getNextTempName`(`org.mozilla.javascript.ast.ScriptNode` v3 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getNextTempName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4301fc.  v0:= new `java.lang.StringBuilder`;
  #L430200.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L430206.  v1:= "$" @kind object;
  #L43020a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L430210.  v1:= v3.`org.mozilla.javascript.ast.ScriptNode.s` @type ^`int`;
  #L430214.  v2:= v1 + 1;
  #L430218.  v3.`org.mozilla.javascript.ast.ScriptNode.s` @type ^`int` := v2;
  #L43021c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L430222.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L430228.  v0:= temp @kind object;
  #L43022a.  return v0 @kind object;
}
procedure `boolean`[] `getParamAndVarConst`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getParamAndVarConst:()[Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430014.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.p` @type ^`java.lang.String`[] @kind object;
  #L430018.  if v0 != 0 then goto L430022;
  #L43001c.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L430022.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.q` @type ^`boolean`[] @kind object;
  #L430026.  return v0 @kind object;
}
procedure `int` `getParamAndVarCount`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getParamAndVarCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430160.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.p` @type ^`java.lang.String`[] @kind object;
  #L430164.  if v0 != 0 then goto L43016e;
  #L430168.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L43016e.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.n` @type ^`java.util.List` @kind object;
  #L430172.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L430178.  v0:= temp;
  #L43017a.  return v0;
}
procedure `java.lang.String`[] `getParamAndVarNames`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getParamAndVarNames:()[Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4302d4.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.p` @type ^`java.lang.String`[] @kind object;
  #L4302d8.  if v0 != 0 then goto L4302e2;
  #L4302dc.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L4302e2.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.p` @type ^`java.lang.String`[] @kind object;
  #L4302e6.  return v0 @kind object;
}
procedure `int` `getParamCount`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getParamCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43018c.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.o` @type ^`int`;
  #L430190.  return v0;
}
procedure `java.lang.String` `getParamOrVarName`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this, `int` v2 ) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getParamOrVarName:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43023c.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.p` @type ^`java.lang.String`[] @kind object;
  #L430240.  if v0 != 0 then goto L43024a;
  #L430244.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L43024a.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.p` @type ^`java.lang.String`[] @kind object;
  #L43024e.  v2:= v0[v2] @kind object;
  #L430252.  return v2 @kind object;
}
procedure `int` `getRegexpCount`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getRegexpCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4301a4.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.l` @type ^`java.util.List` @kind object;
  #L4301a8.  if v0 != 0 then goto L4301b0;
  #L4301ac.  v0:= 0I;
  #L4301ae.  goto L4301b8;
  #L4301b0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4301b6.  v0:= temp;
  #L4301b8.  return v0;
}
procedure `java.lang.String` `getRegexpFlags`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this, `int` v2 ) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getRegexpFlags:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430264.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.l` @type ^`java.util.List` @kind object;
  #L430268.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L43026e.  v2:= temp @kind object;
  #L430270.  v2:= (`org.mozilla.javascript.ast.RegExpLiteral`) v2 @kind object;
  #L430274.  call temp:= `getFlags`(v2) @signature `Lorg/mozilla/javascript/ast/RegExpLiteral;.getFlags:()Ljava/lang/String;` @kind virtual;
  #L43027a.  v2:= temp @kind object;
  #L43027c.  return v2 @kind object;
}
procedure `java.lang.String` `getRegexpString`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this, `int` v2 ) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getRegexpString:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430290.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.l` @type ^`java.util.List` @kind object;
  #L430294.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L43029a.  v2:= temp @kind object;
  #L43029c.  v2:= (`org.mozilla.javascript.ast.RegExpLiteral`) v2 @kind object;
  #L4302a0.  call temp:= `getValue`(v2) @signature `Lorg/mozilla/javascript/ast/RegExpLiteral;.getValue:()Ljava/lang/String;` @kind virtual;
  #L4302a6.  v2:= temp @kind object;
  #L4302a8.  return v2 @kind object;
}
procedure `java.lang.String` `getSourceName`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getSourceName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4302bc.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.h` @type ^`java.lang.String` @kind object;
  #L4302c0.  return v0 @kind object;
}
procedure `java.util.List` `getSymbols`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getSymbols:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430318.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.n` @type ^`java.util.List` @kind object;
  #L43031c.  return v0 @kind object;
}
procedure `void` `n`(`org.mozilla.javascript.ast.ScriptNode` v2 @kind this, `org.mozilla.javascript.ast.Symbol` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.n:(Lorg/mozilla/javascript/ast/Symbol;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L430458.  v0:= v2.`org.mozilla.javascript.ast.ScriptNode.p` @type ^`java.lang.String`[] @kind object;
  #L43045c.  if v0 == 0 then goto L430466;
  #L430460.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L430466.  call temp:= `getDeclType`(v3) @signature `Lorg/mozilla/javascript/ast/Symbol;.getDeclType:()I` @kind virtual;
  #L43046c.  v0:= temp;
  #L43046e.  v1:= 87I;
  #L430472.  if v0 != v1 then goto L430482;
  #L430476.  v0:= v2.`org.mozilla.javascript.ast.ScriptNode.o` @type ^`int`;
  #L43047a.  v0:= v0 + 1;
  #L43047e.  v2.`org.mozilla.javascript.ast.ScriptNode.o` @type ^`int` := v0;
  #L430482.  v0:= v2.`org.mozilla.javascript.ast.ScriptNode.n` @type ^`java.util.List` @kind object;
  #L430486.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L43048c.  return @kind void;
}
procedure `void` `setBaseLineno`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this, `int` v2 ) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.setBaseLineno:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43058c.  if v2 < 0 then goto L430598;
  #L430590.  v0:= v1.`org.mozilla.javascript.Node.lineno` @type ^`int`;
  #L430594.  if v0 < 0 then goto L43059e;
  #L430598.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L43059e.  v1.`org.mozilla.javascript.Node.lineno` @type ^`int` := v2;
  #L4305a2.  return @kind void;
}
procedure `void` `setCompilerData`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.setCompilerData:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4305b4.  call `assertNotNull`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L4305ba.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.r` @type ^`java.lang.Object` @kind object;
  #L4305be.  if v0 != 0 then goto L4305c8;
  #L4305c2.  v1.`org.mozilla.javascript.ast.ScriptNode.r` @type ^`java.lang.Object` := v2 @kind object;
  #L4305c6.  return @kind void;
  #L4305c8.  v2:= new `java.lang.IllegalStateException`;
  #L4305cc.  call `<init>`(v2) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L4305d2.  throw v2;
}
procedure `void` `setEncodedSource`(`org.mozilla.javascript.ast.ScriptNode` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.setEncodedSource:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L4305e4.  v0.`org.mozilla.javascript.ast.ScriptNode.i` @type ^`java.lang.String` := v1 @kind object;
  #L4305e8.  return @kind void;
}
procedure `void` `setEncodedSourceBounds`(`org.mozilla.javascript.ast.ScriptNode` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.setEncodedSourceBounds:(II)V` @AccessFlag PUBLIC {
    temp;

  #L4305fc.  v0.`org.mozilla.javascript.ast.ScriptNode.f` @type ^`int` := v1;
  #L430600.  v0.`org.mozilla.javascript.ast.ScriptNode.g` @type ^`int` := v2;
  #L430604.  return @kind void;
}
procedure `void` `setEncodedSourceEnd`(`org.mozilla.javascript.ast.ScriptNode` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.setEncodedSourceEnd:(I)V` @AccessFlag PUBLIC {
    temp;

  #L430618.  v0.`org.mozilla.javascript.ast.ScriptNode.g` @type ^`int` := v1;
  #L43061c.  return @kind void;
}
procedure `void` `setEncodedSourceStart`(`org.mozilla.javascript.ast.ScriptNode` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.setEncodedSourceStart:(I)V` @AccessFlag PUBLIC {
    temp;

  #L430630.  v0.`org.mozilla.javascript.ast.ScriptNode.f` @type ^`int` := v1;
  #L430634.  return @kind void;
}
procedure `void` `setEndLineno`(`org.mozilla.javascript.ast.ScriptNode` v1 @kind this, `int` v2 ) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.setEndLineno:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430648.  if v2 < 0 then goto L430654;
  #L43064c.  v0:= v1.`org.mozilla.javascript.ast.ScriptNode.j` @type ^`int`;
  #L430650.  if v0 < 0 then goto L43065a;
  #L430654.  call temp:= `codeBug`() @signature `Lorg/mozilla/javascript/ast/AstNode;.codeBug:()Ljava/lang/RuntimeException;` @kind static;
  #L43065a.  v1.`org.mozilla.javascript.ast.ScriptNode.j` @type ^`int` := v2;
  #L43065e.  return @kind void;
}
procedure `void` `setSourceName`(`org.mozilla.javascript.ast.ScriptNode` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.setSourceName:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L430670.  v0.`org.mozilla.javascript.ast.ScriptNode.h` @type ^`java.lang.String` := v1 @kind object;
  #L430674.  return @kind void;
}
procedure `void` `setSymbols`(`org.mozilla.javascript.ast.ScriptNode` v0 @kind this, `java.util.List` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.setSymbols:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L430688.  v0.`org.mozilla.javascript.ast.ScriptNode.n` @type ^`java.util.List` := v1 @kind object;
  #L43068c.  return @kind void;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.ScriptNode` v2 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4306a0.  call temp:= `visit`(v3, v2) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L4306a6.  v0:= temp;
  #L4306a8.  if v0 == 0 then goto L4306d8;
  #L4306ac.  call temp:= `iterator`(v2) @signature `Lorg/mozilla/javascript/Node;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L4306b2.  v0:= temp @kind object;
  #L4306b4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4306ba.  v1:= temp;
  #L4306bc.  if v1 == 0 then goto L4306d8;
  #L4306c0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4306c6.  v1:= temp @kind object;
  #L4306c8.  v1:= (`org.mozilla.javascript.Node`) v1 @kind object;
  #L4306cc.  v1:= (`org.mozilla.javascript.ast.AstNode`) v1 @kind object;
  #L4306d0.  call `visit`(v1, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L4306d6.  goto L4306b4;
  #L4306d8.  return @kind void;
}
