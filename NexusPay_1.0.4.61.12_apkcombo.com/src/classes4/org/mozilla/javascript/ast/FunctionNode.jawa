record `org.mozilla.javascript.ast.FunctionNode` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.ScriptNode` @kind class {
  `int` `org.mozilla.javascript.ast.FunctionNode.A` @AccessFlag PRIVATE;
  `boolean` `org.mozilla.javascript.ast.FunctionNode.B` @AccessFlag PRIVATE;
  `boolean` `org.mozilla.javascript.ast.FunctionNode.C` @AccessFlag PRIVATE;
  `java.util.List` `org.mozilla.javascript.ast.FunctionNode.D` @AccessFlag PRIVATE;
  `java.util.Map` `org.mozilla.javascript.ast.FunctionNode.E` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.FunctionNode.F` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.Name` `org.mozilla.javascript.ast.FunctionNode.t` @AccessFlag PRIVATE;
  `java.util.List` `org.mozilla.javascript.ast.FunctionNode.u` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.FunctionNode.v` @AccessFlag PRIVATE;
  `boolean` `org.mozilla.javascript.ast.FunctionNode.w` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.FunctionNode$Form` `org.mozilla.javascript.ast.FunctionNode.x` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.FunctionNode.y` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.FunctionNode.z` @AccessFlag PRIVATE;
}
global `int` `@@org.mozilla.javascript.ast.FunctionNode.FUNCTION_EXPRESSION` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@org.mozilla.javascript.ast.FunctionNode.FUNCTION_EXPRESSION_STATEMENT` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@org.mozilla.javascript.ast.FunctionNode.FUNCTION_STATEMENT` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.List` `@@org.mozilla.javascript.ast.FunctionNode.H` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/mozilla/javascript/ast/FunctionNode;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L42ce14.  v0:= new `java.util.ArrayList`;
  #L42ce18.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L42ce1e.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L42ce24.  v0:= temp @kind object;
  #L42ce26.  `@@org.mozilla.javascript.ast.FunctionNode.H` @type ^`java.util.List` := v0 @kind object;
  #L42ce2a.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42ce3c.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.<init>:()V` @kind direct;
  #L42ce42.  v0:= `@@org.mozilla.javascript.ast.FunctionNode$Form.FUNCTION` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` @kind object;
  #L42ce46.  v1.`org.mozilla.javascript.ast.FunctionNode.x` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` := v0 @kind object;
  #L42ce4a.  v0:= -1I;
  #L42ce4c.  v1.`org.mozilla.javascript.ast.FunctionNode.y` @type ^`int` := v0;
  #L42ce50.  v1.`org.mozilla.javascript.ast.FunctionNode.z` @type ^`int` := v0;
  #L42ce54.  v0:= 109I;
  #L42ce58.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42ce5c.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.FunctionNode` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42ce70.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.<init>:(I)V` @kind direct;
  #L42ce76.  v1:= `@@org.mozilla.javascript.ast.FunctionNode$Form.FUNCTION` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` @kind object;
  #L42ce7a.  v0.`org.mozilla.javascript.ast.FunctionNode.x` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` := v1 @kind object;
  #L42ce7e.  v1:= -1I;
  #L42ce80.  v0.`org.mozilla.javascript.ast.FunctionNode.y` @type ^`int` := v1;
  #L42ce84.  v0.`org.mozilla.javascript.ast.FunctionNode.z` @type ^`int` := v1;
  #L42ce88.  v1:= 109I;
  #L42ce8c.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42ce90.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.FunctionNode` v0 @kind this, `int` v1 , `org.mozilla.javascript.ast.Name` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.<init>:(ILorg/mozilla/javascript/ast/Name;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42cea4.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.<init>:(I)V` @kind direct;
  #L42ceaa.  v1:= `@@org.mozilla.javascript.ast.FunctionNode$Form.FUNCTION` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` @kind object;
  #L42ceae.  v0.`org.mozilla.javascript.ast.FunctionNode.x` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` := v1 @kind object;
  #L42ceb2.  v1:= -1I;
  #L42ceb4.  v0.`org.mozilla.javascript.ast.FunctionNode.y` @type ^`int` := v1;
  #L42ceb8.  v0.`org.mozilla.javascript.ast.FunctionNode.z` @type ^`int` := v1;
  #L42cebc.  v1:= 109I;
  #L42cec0.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42cec4.  call `setFunctionName`(v0, v2) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.setFunctionName:(Lorg/mozilla/javascript/ast/Name;)V` @kind virtual;
  #L42ceca.  return @kind void;
}
procedure `int` `addFunction`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this, `org.mozilla.javascript.ast.FunctionNode` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.addFunction:(Lorg/mozilla/javascript/ast/FunctionNode;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cbac.  call temp:= `addFunction`(v1, v2) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.addFunction:(Lorg/mozilla/javascript/ast/FunctionNode;)I` @kind super;
  #L42cbb2.  v2:= temp;
  #L42cbb4.  call temp:= `getFunctionCount`(v1) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.getFunctionCount:()I` @kind virtual;
  #L42cbba.  v0:= temp;
  #L42cbbc.  if v0 <= 0 then goto L42cbc6;
  #L42cbc0.  v0:= 1I;
  #L42cbc2.  v1.`org.mozilla.javascript.ast.FunctionNode.B` @type ^`boolean` := v0 @kind boolean;
  #L42cbc6.  return v2;
}
procedure `void` `addLiveLocals`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this, `org.mozilla.javascript.Node` v2 @kind object, `int`[] v3 @kind object) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.addLiveLocals:(Lorg/mozilla/javascript/Node;[I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cedc.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.E` @type ^`java.util.Map` @kind object;
  #L42cee0.  if v0 != 0 then goto L42cef2;
  #L42cee4.  v0:= new `java.util.HashMap`;
  #L42cee8.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L42ceee.  v1.`org.mozilla.javascript.ast.FunctionNode.E` @type ^`java.util.Map` := v0 @kind object;
  #L42cef2.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.E` @type ^`java.util.Map` @kind object;
  #L42cef6.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L42cefc.  return @kind void;
}
procedure `void` `addParam`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this, `org.mozilla.javascript.ast.AstNode` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.addParam:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cf10.  call `assertNotNull`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42cf16.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.u` @type ^`java.util.List` @kind object;
  #L42cf1a.  if v0 != 0 then goto L42cf2c;
  #L42cf1e.  v0:= new `java.util.ArrayList`;
  #L42cf22.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L42cf28.  v1.`org.mozilla.javascript.ast.FunctionNode.u` @type ^`java.util.List` := v0 @kind object;
  #L42cf2c.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.u` @type ^`java.util.List` @kind object;
  #L42cf30.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L42cf36.  call `setParent`(v2, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42cf3c.  return @kind void;
}
procedure `void` `addResumptionPoint`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this, `org.mozilla.javascript.Node` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.addResumptionPoint:(Lorg/mozilla/javascript/Node;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cf50.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.D` @type ^`java.util.List` @kind object;
  #L42cf54.  if v0 != 0 then goto L42cf66;
  #L42cf58.  v0:= new `java.util.ArrayList`;
  #L42cf5c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L42cf62.  v1.`org.mozilla.javascript.ast.FunctionNode.D` @type ^`java.util.List` := v0 @kind object;
  #L42cf66.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.D` @type ^`java.util.List` @kind object;
  #L42cf6a.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L42cf70.  return @kind void;
}
procedure `org.mozilla.javascript.ast.AstNode` `getBody`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.getBody:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cdcc.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.v` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42cdd0.  return v0 @kind object;
}
procedure `org.mozilla.javascript.ast.Name` `getFunctionName`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.getFunctionName:()Lorg/mozilla/javascript/ast/Name;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cdfc.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.t` @type ^`org.mozilla.javascript.ast.Name` @kind object;
  #L42ce00.  return v0 @kind object;
}
procedure `int` `getFunctionType`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.getFunctionType:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cbd8.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.A` @type ^`int`;
  #L42cbdc.  return v0;
}
procedure `java.util.Map` `getLiveLocals`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.getLiveLocals:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cdb4.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.E` @type ^`java.util.Map` @kind object;
  #L42cdb8.  return v0 @kind object;
}
procedure `int` `getLp`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.getLp:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cbf0.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.y` @type ^`int`;
  #L42cbf4.  return v0;
}
procedure `org.mozilla.javascript.ast.AstNode` `getMemberExprNode`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.getMemberExprNode:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cde4.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.F` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42cde8.  return v0 @kind object;
}
procedure `java.lang.String` `getName`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cc20.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.t` @type ^`org.mozilla.javascript.ast.Name` @kind object;
  #L42cc24.  if v0 == 0 then goto L42cc32;
  #L42cc28.  call temp:= `getIdentifier`(v0) @signature `Lorg/mozilla/javascript/ast/Name;.getIdentifier:()Ljava/lang/String;` @kind virtual;
  #L42cc2e.  v0:= temp @kind object;
  #L42cc30.  goto L42cc36;
  #L42cc32.  v0:= "" @kind object;
  #L42cc36.  return v0 @kind object;
}
procedure `java.util.List` `getParams`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.getParams:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cd7c.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.u` @type ^`java.util.List` @kind object;
  #L42cd80.  if v0 == 0 then goto L42cd86;
  #L42cd84.  goto L42cd8a;
  #L42cd86.  v0:= `@@org.mozilla.javascript.ast.FunctionNode.H` @type ^`java.util.List` @kind object;
  #L42cd8a.  return v0 @kind object;
}
procedure `java.util.List` `getResumptionPoints`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.getResumptionPoints:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cd9c.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.D` @type ^`java.util.List` @kind object;
  #L42cda0.  return v0 @kind object;
}
procedure `int` `getRp`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.getRp:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cc08.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.z` @type ^`int`;
  #L42cc0c.  return v0;
}
procedure `boolean` `isExpressionClosure`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.isExpressionClosure:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cac4.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.w` @type ^`boolean` @kind boolean;
  #L42cac8.  return v0;
}
procedure `boolean` `isGenerator`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.isGenerator:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cadc.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.C` @type ^`boolean` @kind boolean;
  #L42cae0.  return v0;
}
procedure `boolean` `isGetter`(`org.mozilla.javascript.ast.FunctionNode` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.isGetter:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42caf4.  v0:= v2.`org.mozilla.javascript.ast.FunctionNode.x` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` @kind object;
  #L42caf8.  v1:= `@@org.mozilla.javascript.ast.FunctionNode$Form.GETTER` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` @kind object;
  #L42cafc.  if v0 != v1 then goto L42cb04;
  #L42cb00.  v0:= 1I;
  #L42cb02.  goto L42cb06;
  #L42cb04.  v0:= 0I;
  #L42cb06.  return v0;
}
procedure `boolean` `isGetterOrSetter`(`org.mozilla.javascript.ast.FunctionNode` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.isGetterOrSetter:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42cb18.  v0:= v2.`org.mozilla.javascript.ast.FunctionNode.x` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` @kind object;
  #L42cb1c.  v1:= `@@org.mozilla.javascript.ast.FunctionNode$Form.GETTER` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` @kind object;
  #L42cb20.  if v0 == v1 then goto L42cb32;
  #L42cb24.  v1:= `@@org.mozilla.javascript.ast.FunctionNode$Form.SETTER` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` @kind object;
  #L42cb28.  if v0 != v1 then goto L42cb2e;
  #L42cb2c.  goto L42cb32;
  #L42cb2e.  v0:= 0I;
  #L42cb30.  goto L42cb34;
  #L42cb32.  v0:= 1I;
  #L42cb34.  return v0;
}
procedure `boolean` `isParam`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this, `org.mozilla.javascript.ast.AstNode` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.isParam:(Lorg/mozilla/javascript/ast/AstNode;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cb48.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.u` @type ^`java.util.List` @kind object;
  #L42cb4c.  if v0 != 0 then goto L42cb54;
  #L42cb50.  v2:= 0I;
  #L42cb52.  goto L42cb5c;
  #L42cb54.  call temp:= `contains`(v0, v2) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L42cb5a.  v2:= temp;
  #L42cb5c.  return v2;
}
procedure `boolean` `isSetter`(`org.mozilla.javascript.ast.FunctionNode` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.isSetter:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42cb70.  v0:= v2.`org.mozilla.javascript.ast.FunctionNode.x` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` @kind object;
  #L42cb74.  v1:= `@@org.mozilla.javascript.ast.FunctionNode$Form.SETTER` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` @kind object;
  #L42cb78.  if v0 != v1 then goto L42cb80;
  #L42cb7c.  v0:= 1I;
  #L42cb7e.  goto L42cb82;
  #L42cb80.  v0:= 0I;
  #L42cb82.  return v0;
}
procedure `boolean` `requiresActivation`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.requiresActivation:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cb94.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.B` @type ^`boolean` @kind boolean;
  #L42cb98.  return v0;
}
procedure `void` `setBody`(`org.mozilla.javascript.ast.FunctionNode` v2 @kind this, `org.mozilla.javascript.ast.AstNode` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.setBody:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42cf84.  call `assertNotNull`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42cf8a.  v2.`org.mozilla.javascript.ast.FunctionNode.v` @type ^`org.mozilla.javascript.ast.AstNode` := v3 @kind object;
  #L42cf8e.  v0:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L42cf92.  v1:= 25I;
  #L42cf96.  call temp:= `getProp`(v3, v1) @signature `Lorg/mozilla/javascript/Node;.getProp:(I)Ljava/lang/Object;` @kind virtual;
  #L42cf9c.  v1:= temp @kind object;
  #L42cf9e.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Boolean;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L42cfa4.  v0:= temp;
  #L42cfa6.  if v0 == 0 then goto L42cfb2;
  #L42cfaa.  v0:= 1I;
  #L42cfac.  call `setIsExpressionClosure`(v2, v0) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.setIsExpressionClosure:(Z)V` @kind virtual;
  #L42cfb2.  call temp:= `getPosition`(v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.getPosition:()I` @kind virtual;
  #L42cfb8.  v0:= temp;
  #L42cfba.  call temp:= `getLength`(v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.getLength:()I` @kind virtual;
  #L42cfc0.  v1:= temp;
  #L42cfc2.  v0:= v0 + v1 @kind int;
  #L42cfc4.  call `setParent`(v3, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42cfca.  v3:= v2.`org.mozilla.javascript.ast.AstNode.position` @type ^`int`;
  #L42cfce.  v3:= v0 - v3 @kind int;
  #L42cfd2.  call `setLength`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.setLength:(I)V` @kind virtual;
  #L42cfd8.  v3:= v2.`org.mozilla.javascript.ast.AstNode.position` @type ^`int`;
  #L42cfdc.  call `setEncodedSourceBounds`(v2, v3, v0) @signature `Lorg/mozilla/javascript/ast/ScriptNode;.setEncodedSourceBounds:(II)V` @kind virtual;
  #L42cfe2.  return @kind void;
}
procedure `void` `setFunctionIsGetter`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.setFunctionIsGetter:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cff4.  v0:= `@@org.mozilla.javascript.ast.FunctionNode$Form.GETTER` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` @kind object;
  #L42cff8.  v1.`org.mozilla.javascript.ast.FunctionNode.x` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` := v0 @kind object;
  #L42cffc.  return @kind void;
}
procedure `void` `setFunctionIsSetter`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.setFunctionIsSetter:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d010.  v0:= `@@org.mozilla.javascript.ast.FunctionNode$Form.SETTER` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` @kind object;
  #L42d014.  v1.`org.mozilla.javascript.ast.FunctionNode.x` @type ^`org.mozilla.javascript.ast.FunctionNode$Form` := v0 @kind object;
  #L42d018.  return @kind void;
}
procedure `void` `setFunctionName`(`org.mozilla.javascript.ast.FunctionNode` v0 @kind this, `org.mozilla.javascript.ast.Name` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.setFunctionName:(Lorg/mozilla/javascript/ast/Name;)V` @AccessFlag PUBLIC {
    temp;

  #L42d02c.  v0.`org.mozilla.javascript.ast.FunctionNode.t` @type ^`org.mozilla.javascript.ast.Name` := v1 @kind object;
  #L42d030.  if v1 == 0 then goto L42d03a;
  #L42d034.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42d03a.  return @kind void;
}
procedure `void` `setFunctionType`(`org.mozilla.javascript.ast.FunctionNode` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.setFunctionType:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42d04c.  v0.`org.mozilla.javascript.ast.FunctionNode.A` @type ^`int` := v1;
  #L42d050.  return @kind void;
}
procedure `void` `setIsExpressionClosure`(`org.mozilla.javascript.ast.FunctionNode` v0 @kind this, `boolean` v1 ) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.setIsExpressionClosure:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L42d064.  v0.`org.mozilla.javascript.ast.FunctionNode.w` @type ^`boolean` := v1 @kind boolean;
  #L42d068.  return @kind void;
}
procedure `void` `setIsGenerator`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.setIsGenerator:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d07c.  v0:= 1I;
  #L42d07e.  v1.`org.mozilla.javascript.ast.FunctionNode.C` @type ^`boolean` := v0 @kind boolean;
  #L42d082.  return @kind void;
}
procedure `void` `setLp`(`org.mozilla.javascript.ast.FunctionNode` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.setLp:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42d094.  v0.`org.mozilla.javascript.ast.FunctionNode.y` @type ^`int` := v1;
  #L42d098.  return @kind void;
}
procedure `void` `setMemberExprNode`(`org.mozilla.javascript.ast.FunctionNode` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.setMemberExprNode:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L42d0ac.  v0.`org.mozilla.javascript.ast.FunctionNode.F` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42d0b0.  if v1 == 0 then goto L42d0ba;
  #L42d0b4.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42d0ba.  return @kind void;
}
procedure `void` `setParams`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.setParams:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d0cc.  if v2 != 0 then goto L42d0d8;
  #L42d0d0.  v2:= 0I;
  #L42d0d2.  v1.`org.mozilla.javascript.ast.FunctionNode.u` @type ^`java.util.List` := v2 @kind object;
  #L42d0d6.  goto L42d10e;
  #L42d0d8.  v0:= v1.`org.mozilla.javascript.ast.FunctionNode.u` @type ^`java.util.List` @kind object;
  #L42d0dc.  if v0 == 0 then goto L42d0e6;
  #L42d0e0.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L42d0e6.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42d0ec.  v2:= temp @kind object;
  #L42d0ee.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42d0f4.  v0:= temp;
  #L42d0f6.  if v0 == 0 then goto L42d10e;
  #L42d0fa.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42d100.  v0:= temp @kind object;
  #L42d102.  v0:= (`org.mozilla.javascript.ast.AstNode`) v0 @kind object;
  #L42d106.  call `addParam`(v1, v0) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.addParam:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42d10c.  goto L42d0ee;
  #L42d10e.  return @kind void;
}
procedure `void` `setParens`(`org.mozilla.javascript.ast.FunctionNode` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.setParens:(II)V` @AccessFlag PUBLIC {
    temp;

  #L42d120.  v0.`org.mozilla.javascript.ast.FunctionNode.y` @type ^`int` := v1;
  #L42d124.  v0.`org.mozilla.javascript.ast.FunctionNode.z` @type ^`int` := v2;
  #L42d128.  return @kind void;
}
procedure `void` `setRequiresActivation`(`org.mozilla.javascript.ast.FunctionNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.setRequiresActivation:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d13c.  v0:= 1I;
  #L42d13e.  v1.`org.mozilla.javascript.ast.FunctionNode.B` @type ^`boolean` := v0 @kind boolean;
  #L42d142.  return @kind void;
}
procedure `void` `setRp`(`org.mozilla.javascript.ast.FunctionNode` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.setRp:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42d154.  v0.`org.mozilla.javascript.ast.FunctionNode.z` @type ^`int` := v1;
  #L42d158.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.FunctionNode` v5 @kind this, `int` v6 ) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42cc48.  v0:= new `java.lang.StringBuilder`;
  #L42cc4c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42cc52.  call temp:= `makeIndent`(v5, v6) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42cc58.  v1:= temp @kind object;
  #L42cc5a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42cc60.  v1:= "function" @kind object;
  #L42cc64.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42cc6a.  v1:= v5.`org.mozilla.javascript.ast.FunctionNode.t` @type ^`org.mozilla.javascript.ast.Name` @kind object;
  #L42cc6e.  v2:= " " @kind object;
  #L42cc72.  v3:= 0I;
  #L42cc74.  if v1 == 0 then goto L42cc90;
  #L42cc78.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42cc7e.  v1:= v5.`org.mozilla.javascript.ast.FunctionNode.t` @type ^`org.mozilla.javascript.ast.Name` @kind object;
  #L42cc82.  call temp:= `toSource`(v1, v3) @signature `Lorg/mozilla/javascript/ast/Name;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42cc88.  v1:= temp @kind object;
  #L42cc8a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42cc90.  v1:= v5.`org.mozilla.javascript.ast.FunctionNode.u` @type ^`java.util.List` @kind object;
  #L42cc94.  if v1 != 0 then goto L42cca4;
  #L42cc98.  v1:= "() " @kind object;
  #L42cc9c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42cca2.  goto L42ccc2;
  #L42cca4.  v1:= "(" @kind object;
  #L42cca8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ccae.  v1:= v5.`org.mozilla.javascript.ast.FunctionNode.u` @type ^`java.util.List` @kind object;
  #L42ccb2.  call `printList`(v5, v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.printList:(Ljava/util/List;Ljava/lang/StringBuilder;)V` @kind virtual;
  #L42ccb8.  v1:= ") " @kind object;
  #L42ccbc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42ccc2.  v1:= v5.`org.mozilla.javascript.ast.FunctionNode.w` @type ^`boolean` @kind boolean;
  #L42ccc6.  v4:= 1I;
  #L42ccc8.  if v1 == 0 then goto L42cd30;
  #L42cccc.  call temp:= `getBody`(v5) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.getBody:()Lorg/mozilla/javascript/ast/AstNode;` @kind virtual;
  #L42ccd2.  v6:= temp @kind object;
  #L42ccd4.  call temp:= `getLastChild`(v6) @signature `Lorg/mozilla/javascript/Node;.getLastChild:()Lorg/mozilla/javascript/Node;` @kind virtual;
  #L42ccda.  v1:= temp @kind object;
  #L42ccdc.  v1:= instanceof @variable v1 @type ^`org.mozilla.javascript.ast.ReturnStatement` @kind boolean;
  #L42cce0.  if v1 == 0 then goto L42cd1a;
  #L42cce4.  call temp:= `getLastChild`(v6) @signature `Lorg/mozilla/javascript/Node;.getLastChild:()Lorg/mozilla/javascript/Node;` @kind virtual;
  #L42ccea.  v6:= temp @kind object;
  #L42ccec.  v6:= (`org.mozilla.javascript.ast.ReturnStatement`) v6 @kind object;
  #L42ccf0.  call temp:= `getReturnValue`(v6) @signature `Lorg/mozilla/javascript/ast/ReturnStatement;.getReturnValue:()Lorg/mozilla/javascript/ast/AstNode;` @kind virtual;
  #L42ccf6.  v6:= temp @kind object;
  #L42ccf8.  call temp:= `toSource`(v6, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42ccfe.  v6:= temp @kind object;
  #L42cd00.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42cd06.  v6:= v5.`org.mozilla.javascript.ast.FunctionNode.A` @type ^`int`;
  #L42cd0a.  if v6 != v4 then goto L42cd4e;
  #L42cd0e.  v6:= ";" @kind object;
  #L42cd12.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42cd18.  goto L42cd4e;
  #L42cd1a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42cd20.  call temp:= `toSource`(v6, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42cd26.  v6:= temp @kind object;
  #L42cd28.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42cd2e.  goto L42cd4e;
  #L42cd30.  call temp:= `getBody`(v5) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.getBody:()Lorg/mozilla/javascript/ast/AstNode;` @kind virtual;
  #L42cd36.  v1:= temp @kind object;
  #L42cd38.  call temp:= `toSource`(v1, v6) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42cd3e.  v6:= temp @kind object;
  #L42cd40.  call temp:= `trim`(v6) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L42cd46.  v6:= temp @kind object;
  #L42cd48.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42cd4e.  v6:= v5.`org.mozilla.javascript.ast.FunctionNode.A` @type ^`int`;
  #L42cd52.  if v6 != v4 then goto L42cd60;
  #L42cd56.  v6:= "\n" @kind object;
  #L42cd5a.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42cd60.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42cd66.  v6:= temp @kind object;
  #L42cd68.  return v6 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.FunctionNode` v2 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42d16c.  call temp:= `visit`(v3, v2) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L42d172.  v0:= temp;
  #L42d174.  if v0 == 0 then goto L42d1da;
  #L42d178.  v0:= v2.`org.mozilla.javascript.ast.FunctionNode.t` @type ^`org.mozilla.javascript.ast.Name` @kind object;
  #L42d17c.  if v0 == 0 then goto L42d186;
  #L42d180.  call `visit`(v0, v3) @signature `Lorg/mozilla/javascript/ast/Name;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42d186.  call temp:= `getParams`(v2) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.getParams:()Ljava/util/List;` @kind virtual;
  #L42d18c.  v0:= temp @kind object;
  #L42d18e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42d194.  v0:= temp @kind object;
  #L42d196.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42d19c.  v1:= temp;
  #L42d19e.  if v1 == 0 then goto L42d1b6;
  #L42d1a2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42d1a8.  v1:= temp @kind object;
  #L42d1aa.  v1:= (`org.mozilla.javascript.ast.AstNode`) v1 @kind object;
  #L42d1ae.  call `visit`(v1, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42d1b4.  goto L42d196;
  #L42d1b6.  call temp:= `getBody`(v2) @signature `Lorg/mozilla/javascript/ast/FunctionNode;.getBody:()Lorg/mozilla/javascript/ast/AstNode;` @kind virtual;
  #L42d1bc.  v0:= temp @kind object;
  #L42d1be.  call `visit`(v0, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42d1c4.  v0:= v2.`org.mozilla.javascript.ast.FunctionNode.w` @type ^`boolean` @kind boolean;
  #L42d1c8.  if v0 != 0 then goto L42d1da;
  #L42d1cc.  v0:= v2.`org.mozilla.javascript.ast.FunctionNode.F` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d1d0.  if v0 == 0 then goto L42d1da;
  #L42d1d4.  call `visit`(v0, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42d1da.  return @kind void;
}
