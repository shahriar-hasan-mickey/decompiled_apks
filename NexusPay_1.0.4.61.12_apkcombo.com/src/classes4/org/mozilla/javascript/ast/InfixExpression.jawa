record `org.mozilla.javascript.ast.InfixExpression` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.InfixExpression.left` @AccessFlag PROTECTED;
  `int` `org.mozilla.javascript.ast.InfixExpression.operatorPosition` @AccessFlag PROTECTED;
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.InfixExpression.right` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.InfixExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42db1c.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L42db22.  v0:= -1I;
  #L42db24.  v1.`org.mozilla.javascript.ast.InfixExpression.operatorPosition` @type ^`int` := v0;
  #L42db28.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.InfixExpression` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42db3c.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(I)V` @kind direct;
  #L42db42.  v1:= -1I;
  #L42db44.  v0.`org.mozilla.javascript.ast.InfixExpression.operatorPosition` @type ^`int` := v1;
  #L42db48.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.InfixExpression` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42db5c.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L42db62.  v1:= -1I;
  #L42db64.  v0.`org.mozilla.javascript.ast.InfixExpression.operatorPosition` @type ^`int` := v1;
  #L42db68.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.InfixExpression` v0 @kind this, `int` v1 , `int` v2 , `org.mozilla.javascript.ast.AstNode` v3 @kind object, `org.mozilla.javascript.ast.AstNode` v4 @kind object) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.<init>:(IILorg/mozilla/javascript/ast/AstNode;Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42db7c.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L42db82.  v1:= -1I;
  #L42db84.  v0.`org.mozilla.javascript.ast.InfixExpression.operatorPosition` @type ^`int` := v1;
  #L42db88.  call `setLeft`(v0, v3) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.setLeft:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42db8e.  call `setRight`(v0, v4) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.setRight:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42db94.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.InfixExpression` v1 @kind this, `int` v2 , `org.mozilla.javascript.ast.AstNode` v3 @kind object, `org.mozilla.javascript.ast.AstNode` v4 @kind object, `int` v5 ) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.<init>:(ILorg/mozilla/javascript/ast/AstNode;Lorg/mozilla/javascript/ast/AstNode;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42dba8.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L42dbae.  v0:= -1I;
  #L42dbb0.  v1.`org.mozilla.javascript.ast.InfixExpression.operatorPosition` @type ^`int` := v0;
  #L42dbb4.  call temp:= `setType`(v1, v2) @signature `Lorg/mozilla/javascript/Node;.setType:(I)Lorg/mozilla/javascript/Node;` @kind virtual;
  #L42dbba.  call temp:= `getPosition`(v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.getPosition:()I` @kind virtual;
  #L42dbc0.  v2:= temp;
  #L42dbc2.  v5:= v5 - v2 @kind int;
  #L42dbc4.  call `setOperatorPosition`(v1, v5) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.setOperatorPosition:(I)V` @kind virtual;
  #L42dbca.  call `setLeftAndRight`(v1, v3, v4) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.setLeftAndRight:(Lorg/mozilla/javascript/ast/AstNode;Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42dbd0.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.InfixExpression` v1 @kind this, `org.mozilla.javascript.ast.AstNode` v2 @kind object, `org.mozilla.javascript.ast.AstNode` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.<init>:(Lorg/mozilla/javascript/ast/AstNode;Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42dbe4.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L42dbea.  v0:= -1I;
  #L42dbec.  v1.`org.mozilla.javascript.ast.InfixExpression.operatorPosition` @type ^`int` := v0;
  #L42dbf0.  call `setLeftAndRight`(v1, v2, v3) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.setLeftAndRight:(Lorg/mozilla/javascript/ast/AstNode;Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42dbf6.  return @kind void;
}
procedure `org.mozilla.javascript.ast.AstNode` `getLeft`(`org.mozilla.javascript.ast.InfixExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.getLeft:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42daec.  v0:= v1.`org.mozilla.javascript.ast.InfixExpression.left` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42daf0.  return v0 @kind object;
}
procedure `int` `getOperator`(`org.mozilla.javascript.ast.InfixExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.getOperator:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42da3c.  call temp:= `getType`(v1) @signature `Lorg/mozilla/javascript/Node;.getType:()I` @kind virtual;
  #L42da42.  v0:= temp;
  #L42da44.  return v0;
}
procedure `int` `getOperatorPosition`(`org.mozilla.javascript.ast.InfixExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.getOperatorPosition:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42da58.  v0:= v1.`org.mozilla.javascript.ast.InfixExpression.operatorPosition` @type ^`int`;
  #L42da5c.  return v0;
}
procedure `org.mozilla.javascript.ast.AstNode` `getRight`(`org.mozilla.javascript.ast.InfixExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.getRight:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42db04.  v0:= v1.`org.mozilla.javascript.ast.InfixExpression.right` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42db08.  return v0 @kind object;
}
procedure `boolean` `hasSideEffects`(`org.mozilla.javascript.ast.InfixExpression` v4 @kind this) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.hasSideEffects:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42d9b4.  call temp:= `getType`(v4) @signature `Lorg/mozilla/javascript/Node;.getType:()I` @kind virtual;
  #L42d9ba.  v0:= temp;
  #L42d9bc.  v1:= 89I;
  #L42d9c0.  v2:= 1I;
  #L42d9c2.  v3:= 0I;
  #L42d9c4.  if v0 == v1 then goto L42da10;
  #L42d9c8.  v1:= 104I;
  #L42d9cc.  if v0 == v1 then goto L42d9e2;
  #L42d9d0.  v1:= 105I;
  #L42d9d4.  if v0 == v1 then goto L42d9e2;
  #L42d9d8.  call temp:= `hasSideEffects`(v4) @signature `Lorg/mozilla/javascript/ast/AstNode;.hasSideEffects:()Z` @kind super;
  #L42d9de.  v0:= temp;
  #L42d9e0.  return v0;
  #L42d9e2.  v0:= v4.`org.mozilla.javascript.ast.InfixExpression.left` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d9e6.  if v0 == 0 then goto L42d9f6;
  #L42d9ea.  call temp:= `hasSideEffects`(v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.hasSideEffects:()Z` @kind virtual;
  #L42d9f0.  v0:= temp;
  #L42d9f2.  if v0 != 0 then goto L42da0e;
  #L42d9f6.  v0:= v4.`org.mozilla.javascript.ast.InfixExpression.right` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42d9fa.  if v0 == 0 then goto L42da0c;
  #L42d9fe.  call temp:= `hasSideEffects`(v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.hasSideEffects:()Z` @kind virtual;
  #L42da04.  v0:= temp;
  #L42da06.  if v0 == 0 then goto L42da0c;
  #L42da0a.  goto L42da0e;
  #L42da0c.  v2:= 0I;
  #L42da0e.  return v2;
  #L42da10.  v0:= v4.`org.mozilla.javascript.ast.InfixExpression.right` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42da14.  if v0 == 0 then goto L42da26;
  #L42da18.  call temp:= `hasSideEffects`(v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.hasSideEffects:()Z` @kind virtual;
  #L42da1e.  v0:= temp;
  #L42da20.  if v0 == 0 then goto L42da26;
  #L42da24.  goto L42da28;
  #L42da26.  v2:= 0I;
  #L42da28.  return v2;
}
procedure `void` `setLeft`(`org.mozilla.javascript.ast.InfixExpression` v1 @kind this, `org.mozilla.javascript.ast.AstNode` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.setLeft:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42dc08.  call `assertNotNull`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42dc0e.  v1.`org.mozilla.javascript.ast.InfixExpression.left` @type ^`org.mozilla.javascript.ast.AstNode` := v2 @kind object;
  #L42dc12.  call temp:= `getLineno`(v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.getLineno:()I` @kind virtual;
  #L42dc18.  v0:= temp;
  #L42dc1a.  call `setLineno`(v1, v0) @signature `Lorg/mozilla/javascript/Node;.setLineno:(I)V` @kind virtual;
  #L42dc20.  call `setParent`(v2, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42dc26.  return @kind void;
}
procedure `void` `setLeftAndRight`(`org.mozilla.javascript.ast.InfixExpression` v3 @kind this, `org.mozilla.javascript.ast.AstNode` v4 @kind object, `org.mozilla.javascript.ast.AstNode` v5 @kind object) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.setLeftAndRight:(Lorg/mozilla/javascript/ast/AstNode;Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42dc38.  call `assertNotNull`(v3, v4) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42dc3e.  call `assertNotNull`(v3, v5) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42dc44.  call temp:= `getPosition`(v4) @signature `Lorg/mozilla/javascript/ast/AstNode;.getPosition:()I` @kind virtual;
  #L42dc4a.  v0:= temp;
  #L42dc4c.  call temp:= `getPosition`(v5) @signature `Lorg/mozilla/javascript/ast/AstNode;.getPosition:()I` @kind virtual;
  #L42dc52.  v1:= temp;
  #L42dc54.  call temp:= `getLength`(v5) @signature `Lorg/mozilla/javascript/ast/AstNode;.getLength:()I` @kind virtual;
  #L42dc5a.  v2:= temp;
  #L42dc5c.  v1:= v1 + v2 @kind int;
  #L42dc5e.  call `setBounds`(v3, v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.setBounds:(II)V` @kind virtual;
  #L42dc64.  call `setLeft`(v3, v4) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.setLeft:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42dc6a.  call `setRight`(v3, v5) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.setRight:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42dc70.  return @kind void;
}
procedure `void` `setOperator`(`org.mozilla.javascript.ast.InfixExpression` v3 @kind this, `int` v4 ) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.setOperator:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42dc84.  call temp:= `isValidToken`(v4) @signature `Lorg/mozilla/javascript/Token;.isValidToken:(I)Z` @kind static;
  #L42dc8a.  v0:= temp;
  #L42dc8c.  if v0 == 0 then goto L42dc98;
  #L42dc90.  call temp:= `setType`(v3, v4) @signature `Lorg/mozilla/javascript/Node;.setType:(I)Lorg/mozilla/javascript/Node;` @kind virtual;
  #L42dc96.  return @kind void;
  #L42dc98.  v0:= new `java.lang.IllegalArgumentException`;
  #L42dc9c.  v1:= new `java.lang.StringBuilder`;
  #L42dca0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42dca6.  v2:= "Invalid token: " @kind object;
  #L42dcaa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42dcb0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42dcb6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42dcbc.  v4:= temp @kind object;
  #L42dcbe.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42dcc4.  throw v0;
}
procedure `void` `setOperatorPosition`(`org.mozilla.javascript.ast.InfixExpression` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.setOperatorPosition:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42dcd8.  v0.`org.mozilla.javascript.ast.InfixExpression.operatorPosition` @type ^`int` := v1;
  #L42dcdc.  return @kind void;
}
procedure `void` `setRight`(`org.mozilla.javascript.ast.InfixExpression` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.setRight:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L42dcf0.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42dcf6.  v0.`org.mozilla.javascript.ast.InfixExpression.right` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42dcfa.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42dd00.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.InfixExpression` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42da70.  v0:= new `java.lang.StringBuilder`;
  #L42da74.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42da7a.  call temp:= `makeIndent`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42da80.  v3:= temp @kind object;
  #L42da82.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42da88.  v3:= v2.`org.mozilla.javascript.ast.InfixExpression.left` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42da8c.  call temp:= `toSource`(v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:()Ljava/lang/String;` @kind virtual;
  #L42da92.  v3:= temp @kind object;
  #L42da94.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42da9a.  v3:= " " @kind object;
  #L42da9e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42daa4.  call temp:= `getType`(v2) @signature `Lorg/mozilla/javascript/Node;.getType:()I` @kind virtual;
  #L42daaa.  v1:= temp;
  #L42daac.  call temp:= `operatorToString`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.operatorToString:(I)Ljava/lang/String;` @kind static;
  #L42dab2.  v1:= temp @kind object;
  #L42dab4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42daba.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42dac0.  v3:= v2.`org.mozilla.javascript.ast.InfixExpression.right` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42dac4.  call temp:= `toSource`(v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:()Ljava/lang/String;` @kind virtual;
  #L42daca.  v3:= temp @kind object;
  #L42dacc.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42dad2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42dad8.  v3:= temp @kind object;
  #L42dada.  return v3 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.InfixExpression` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/InfixExpression;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42dd14.  call temp:= `visit`(v2, v1) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L42dd1a.  v0:= temp;
  #L42dd1c.  if v0 == 0 then goto L42dd34;
  #L42dd20.  v0:= v1.`org.mozilla.javascript.ast.InfixExpression.left` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42dd24.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42dd2a.  v0:= v1.`org.mozilla.javascript.ast.InfixExpression.right` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42dd2e.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42dd34.  return @kind void;
}
