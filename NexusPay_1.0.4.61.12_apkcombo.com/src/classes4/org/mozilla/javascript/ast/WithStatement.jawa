record `org.mozilla.javascript.ast.WithStatement` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.WithStatement.c` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.WithStatement.d` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.WithStatement.e` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.WithStatement.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.WithStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/WithStatement;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L431eb0.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L431eb6.  v0:= -1I;
  #L431eb8.  v1.`org.mozilla.javascript.ast.WithStatement.e` @type ^`int` := v0;
  #L431ebc.  v1.`org.mozilla.javascript.ast.WithStatement.f` @type ^`int` := v0;
  #L431ec0.  v0:= 123I;
  #L431ec4.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L431ec8.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.WithStatement` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/WithStatement;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L431edc.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(I)V` @kind direct;
  #L431ee2.  v1:= -1I;
  #L431ee4.  v0.`org.mozilla.javascript.ast.WithStatement.e` @type ^`int` := v1;
  #L431ee8.  v0.`org.mozilla.javascript.ast.WithStatement.f` @type ^`int` := v1;
  #L431eec.  v1:= 123I;
  #L431ef0.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L431ef4.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.WithStatement` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/WithStatement;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L431f08.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L431f0e.  v1:= -1I;
  #L431f10.  v0.`org.mozilla.javascript.ast.WithStatement.e` @type ^`int` := v1;
  #L431f14.  v0.`org.mozilla.javascript.ast.WithStatement.f` @type ^`int` := v1;
  #L431f18.  v1:= 123I;
  #L431f1c.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L431f20.  return @kind void;
}
procedure `org.mozilla.javascript.ast.AstNode` `getExpression`(`org.mozilla.javascript.ast.WithStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/WithStatement;.getExpression:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431e80.  v0:= v1.`org.mozilla.javascript.ast.WithStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431e84.  return v0 @kind object;
}
procedure `int` `getLp`(`org.mozilla.javascript.ast.WithStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/WithStatement;.getLp:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431dc8.  v0:= v1.`org.mozilla.javascript.ast.WithStatement.e` @type ^`int`;
  #L431dcc.  return v0;
}
procedure `int` `getRp`(`org.mozilla.javascript.ast.WithStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/WithStatement;.getRp:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431de0.  v0:= v1.`org.mozilla.javascript.ast.WithStatement.f` @type ^`int`;
  #L431de4.  return v0;
}
procedure `org.mozilla.javascript.ast.AstNode` `getStatement`(`org.mozilla.javascript.ast.WithStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/WithStatement;.getStatement:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431e98.  v0:= v1.`org.mozilla.javascript.ast.WithStatement.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431e9c.  return v0 @kind object;
}
procedure `void` `setExpression`(`org.mozilla.javascript.ast.WithStatement` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/WithStatement;.setExpression:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L431f34.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L431f3a.  v0.`org.mozilla.javascript.ast.WithStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L431f3e.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L431f44.  return @kind void;
}
procedure `void` `setLp`(`org.mozilla.javascript.ast.WithStatement` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/WithStatement;.setLp:(I)V` @AccessFlag PUBLIC {
    temp;

  #L431f58.  v0.`org.mozilla.javascript.ast.WithStatement.e` @type ^`int` := v1;
  #L431f5c.  return @kind void;
}
procedure `void` `setParens`(`org.mozilla.javascript.ast.WithStatement` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/WithStatement;.setParens:(II)V` @AccessFlag PUBLIC {
    temp;

  #L431f70.  v0.`org.mozilla.javascript.ast.WithStatement.e` @type ^`int` := v1;
  #L431f74.  v0.`org.mozilla.javascript.ast.WithStatement.f` @type ^`int` := v2;
  #L431f78.  return @kind void;
}
procedure `void` `setRp`(`org.mozilla.javascript.ast.WithStatement` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/WithStatement;.setRp:(I)V` @AccessFlag PUBLIC {
    temp;

  #L431f8c.  v0.`org.mozilla.javascript.ast.WithStatement.f` @type ^`int` := v1;
  #L431f90.  return @kind void;
}
procedure `void` `setStatement`(`org.mozilla.javascript.ast.WithStatement` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/WithStatement;.setStatement:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L431fa4.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L431faa.  v0.`org.mozilla.javascript.ast.WithStatement.d` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L431fae.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L431fb4.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.WithStatement` v3 @kind this, `int` v4 ) @signature `Lorg/mozilla/javascript/ast/WithStatement;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L431df8.  v0:= new `java.lang.StringBuilder`;
  #L431dfc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L431e02.  call temp:= `makeIndent`(v3, v4) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L431e08.  v1:= temp @kind object;
  #L431e0a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431e10.  v1:= "with (" @kind object;
  #L431e14.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431e1a.  v1:= v3.`org.mozilla.javascript.ast.WithStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431e1e.  v2:= 0I;
  #L431e20.  call temp:= `toSource`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L431e26.  v1:= temp @kind object;
  #L431e28.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431e2e.  v1:= ") " @kind object;
  #L431e32.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431e38.  v1:= v3.`org.mozilla.javascript.ast.WithStatement.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431e3c.  v4:= v4 + 1;
  #L431e40.  call temp:= `toSource`(v1, v4) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L431e46.  v4:= temp @kind object;
  #L431e48.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431e4e.  v4:= v3.`org.mozilla.javascript.ast.WithStatement.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431e52.  v4:= instanceof @variable v4 @type ^`org.mozilla.javascript.ast.Block` @kind boolean;
  #L431e56.  if v4 != 0 then goto L431e64;
  #L431e5a.  v4:= ";\n" @kind object;
  #L431e5e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431e64.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L431e6a.  v4:= temp @kind object;
  #L431e6c.  return v4 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.WithStatement` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/WithStatement;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431fc8.  call temp:= `visit`(v2, v1) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L431fce.  v0:= temp;
  #L431fd0.  if v0 == 0 then goto L431fe8;
  #L431fd4.  v0:= v1.`org.mozilla.javascript.ast.WithStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431fd8.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L431fde.  v0:= v1.`org.mozilla.javascript.ast.WithStatement.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431fe2.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L431fe8.  return @kind void;
}
