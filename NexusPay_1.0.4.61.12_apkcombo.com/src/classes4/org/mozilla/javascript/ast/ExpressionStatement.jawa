record `org.mozilla.javascript.ast.ExpressionStatement` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.ExpressionStatement.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ExpressionStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ExpressionStatement;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42c11c.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L42c122.  v0:= 133I;
  #L42c126.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42c12a.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ExpressionStatement` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/ExpressionStatement;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42c13c.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L42c142.  v1:= 133I;
  #L42c146.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42c14a.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ExpressionStatement` v0 @kind this, `int` v1 , `int` v2 , `org.mozilla.javascript.ast.AstNode` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/ExpressionStatement;.<init>:(IILorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42c15c.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L42c162.  v1:= 133I;
  #L42c166.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42c16a.  call `setExpression`(v0, v3) @signature `Lorg/mozilla/javascript/ast/ExpressionStatement;.setExpression:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42c170.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ExpressionStatement` v2 @kind this, `org.mozilla.javascript.ast.AstNode` v3 @kind object) @signature `Lorg/mozilla/javascript/ast/ExpressionStatement;.<init>:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L42c184.  call temp:= `getPosition`(v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.getPosition:()I` @kind virtual;
  #L42c18a.  v0:= temp;
  #L42c18c.  call temp:= `getLength`(v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.getLength:()I` @kind virtual;
  #L42c192.  v1:= temp;
  #L42c194.  call `<init>`(v2, v0, v1, v3) @signature `Lorg/mozilla/javascript/ast/ExpressionStatement;.<init>:(IILorg/mozilla/javascript/ast/AstNode;)V` @kind direct;
  #L42c19a.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.ExpressionStatement` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object, `boolean` v2 ) @signature `Lorg/mozilla/javascript/ast/ExpressionStatement;.<init>:(Lorg/mozilla/javascript/ast/AstNode;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42c1ac.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/ExpressionStatement;.<init>:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind direct;
  #L42c1b2.  if v2 == 0 then goto L42c1bc;
  #L42c1b6.  call `setHasResult`(v0) @signature `Lorg/mozilla/javascript/ast/ExpressionStatement;.setHasResult:()V` @kind virtual;
  #L42c1bc.  return @kind void;
}
procedure `org.mozilla.javascript.ast.AstNode` `getExpression`(`org.mozilla.javascript.ast.ExpressionStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ExpressionStatement;.getExpression:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c104.  v0:= v1.`org.mozilla.javascript.ast.ExpressionStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42c108.  return v0 @kind object;
}
procedure `boolean` `hasSideEffects`(`org.mozilla.javascript.ast.ExpressionStatement` v2 @kind this) @signature `Lorg/mozilla/javascript/ast/ExpressionStatement;.hasSideEffects:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42c08c.  v0:= v2.`org.mozilla.javascript.Node.type` @type ^`int`;
  #L42c090.  v1:= 134I;
  #L42c094.  if v0 == v1 then goto L42c0ae;
  #L42c098.  v0:= v2.`org.mozilla.javascript.ast.ExpressionStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42c09c.  call temp:= `hasSideEffects`(v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.hasSideEffects:()Z` @kind virtual;
  #L42c0a2.  v0:= temp;
  #L42c0a4.  if v0 == 0 then goto L42c0aa;
  #L42c0a8.  goto L42c0ae;
  #L42c0aa.  v0:= 0I;
  #L42c0ac.  goto L42c0b0;
  #L42c0ae.  v0:= 1I;
  #L42c0b0.  return v0;
}
procedure `void` `setExpression`(`org.mozilla.javascript.ast.ExpressionStatement` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/ExpressionStatement;.setExpression:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L42c1d0.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42c1d6.  v0.`org.mozilla.javascript.ast.ExpressionStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42c1da.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42c1e0.  call temp:= `getLineno`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.getLineno:()I` @kind virtual;
  #L42c1e6.  v1:= temp;
  #L42c1e8.  call `setLineno`(v0, v1) @signature `Lorg/mozilla/javascript/Node;.setLineno:(I)V` @kind virtual;
  #L42c1ee.  return @kind void;
}
procedure `void` `setHasResult`(`org.mozilla.javascript.ast.ExpressionStatement` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/ExpressionStatement;.setHasResult:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c200.  v0:= 134I;
  #L42c204.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42c208.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.ExpressionStatement` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/ExpressionStatement;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42c0c4.  v0:= new `java.lang.StringBuilder`;
  #L42c0c8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42c0ce.  v1:= v2.`org.mozilla.javascript.ast.ExpressionStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42c0d2.  call temp:= `toSource`(v1, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42c0d8.  v3:= temp @kind object;
  #L42c0da.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c0e0.  v3:= ";\n" @kind object;
  #L42c0e4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42c0ea.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42c0f0.  v3:= temp @kind object;
  #L42c0f2.  return v3 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.ExpressionStatement` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/ExpressionStatement;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c21c.  call temp:= `visit`(v2, v1) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L42c222.  v0:= temp;
  #L42c224.  if v0 == 0 then goto L42c232;
  #L42c228.  v0:= v1.`org.mozilla.javascript.ast.ExpressionStatement.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42c22c.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42c232.  return @kind void;
}
