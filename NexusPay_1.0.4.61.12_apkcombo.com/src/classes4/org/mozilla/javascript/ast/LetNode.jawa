record `org.mozilla.javascript.ast.LetNode` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.Scope` @kind class {
  `org.mozilla.javascript.ast.VariableDeclaration` `org.mozilla.javascript.ast.LetNode.f` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.LetNode.g` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.LetNode.h` @AccessFlag PRIVATE;
  `int` `org.mozilla.javascript.ast.LetNode.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.LetNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/LetNode;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42e720.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/Scope;.<init>:()V` @kind direct;
  #L42e726.  v0:= -1I;
  #L42e728.  v1.`org.mozilla.javascript.ast.LetNode.h` @type ^`int` := v0;
  #L42e72c.  v1.`org.mozilla.javascript.ast.LetNode.i` @type ^`int` := v0;
  #L42e730.  v0:= 158I;
  #L42e734.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L42e738.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.LetNode` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/LetNode;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42e74c.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/Scope;.<init>:(I)V` @kind direct;
  #L42e752.  v1:= -1I;
  #L42e754.  v0.`org.mozilla.javascript.ast.LetNode.h` @type ^`int` := v1;
  #L42e758.  v0.`org.mozilla.javascript.ast.LetNode.i` @type ^`int` := v1;
  #L42e75c.  v1:= 158I;
  #L42e760.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42e764.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.LetNode` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/LetNode;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42e778.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/Scope;.<init>:(II)V` @kind direct;
  #L42e77e.  v1:= -1I;
  #L42e780.  v0.`org.mozilla.javascript.ast.LetNode.h` @type ^`int` := v1;
  #L42e784.  v0.`org.mozilla.javascript.ast.LetNode.i` @type ^`int` := v1;
  #L42e788.  v1:= 158I;
  #L42e78c.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L42e790.  return @kind void;
}
procedure `org.mozilla.javascript.ast.AstNode` `getBody`(`org.mozilla.javascript.ast.LetNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/LetNode;.getBody:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e6f0.  v0:= v1.`org.mozilla.javascript.ast.LetNode.g` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42e6f4.  return v0 @kind object;
}
procedure `int` `getLp`(`org.mozilla.javascript.ast.LetNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/LetNode;.getLp:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e650.  v0:= v1.`org.mozilla.javascript.ast.LetNode.h` @type ^`int`;
  #L42e654.  return v0;
}
procedure `int` `getRp`(`org.mozilla.javascript.ast.LetNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/LetNode;.getRp:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e668.  v0:= v1.`org.mozilla.javascript.ast.LetNode.i` @type ^`int`;
  #L42e66c.  return v0;
}
procedure `org.mozilla.javascript.ast.VariableDeclaration` `getVariables`(`org.mozilla.javascript.ast.LetNode` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/LetNode;.getVariables:()Lorg/mozilla/javascript/ast/VariableDeclaration;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e708.  v0:= v1.`org.mozilla.javascript.ast.LetNode.f` @type ^`org.mozilla.javascript.ast.VariableDeclaration` @kind object;
  #L42e70c.  return v0 @kind object;
}
procedure `void` `setBody`(`org.mozilla.javascript.ast.LetNode` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/LetNode;.setBody:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L42e7a4.  v0.`org.mozilla.javascript.ast.LetNode.g` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L42e7a8.  if v1 == 0 then goto L42e7b2;
  #L42e7ac.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42e7b2.  return @kind void;
}
procedure `void` `setLp`(`org.mozilla.javascript.ast.LetNode` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/LetNode;.setLp:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42e7c4.  v0.`org.mozilla.javascript.ast.LetNode.h` @type ^`int` := v1;
  #L42e7c8.  return @kind void;
}
procedure `void` `setParens`(`org.mozilla.javascript.ast.LetNode` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/LetNode;.setParens:(II)V` @AccessFlag PUBLIC {
    temp;

  #L42e7dc.  v0.`org.mozilla.javascript.ast.LetNode.h` @type ^`int` := v1;
  #L42e7e0.  v0.`org.mozilla.javascript.ast.LetNode.i` @type ^`int` := v2;
  #L42e7e4.  return @kind void;
}
procedure `void` `setRp`(`org.mozilla.javascript.ast.LetNode` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/LetNode;.setRp:(I)V` @AccessFlag PUBLIC {
    temp;

  #L42e7f8.  v0.`org.mozilla.javascript.ast.LetNode.i` @type ^`int` := v1;
  #L42e7fc.  return @kind void;
}
procedure `void` `setVariables`(`org.mozilla.javascript.ast.LetNode` v0 @kind this, `org.mozilla.javascript.ast.VariableDeclaration` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/LetNode;.setVariables:(Lorg/mozilla/javascript/ast/VariableDeclaration;)V` @AccessFlag PUBLIC {
    temp;

  #L42e810.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L42e816.  v0.`org.mozilla.javascript.ast.LetNode.f` @type ^`org.mozilla.javascript.ast.VariableDeclaration` := v1 @kind object;
  #L42e81a.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L42e820.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.LetNode` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/LetNode;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42e680.  call temp:= `makeIndent`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L42e686.  v0:= temp @kind object;
  #L42e688.  v1:= new `java.lang.StringBuilder`;
  #L42e68c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42e692.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42e698.  v0:= "let (" @kind object;
  #L42e69c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42e6a2.  v0:= v2.`org.mozilla.javascript.ast.LetNode.f` @type ^`org.mozilla.javascript.ast.VariableDeclaration` @kind object;
  #L42e6a6.  call temp:= `getVariables`(v0) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.getVariables:()Ljava/util/List;` @kind virtual;
  #L42e6ac.  v0:= temp @kind object;
  #L42e6ae.  call `printList`(v2, v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.printList:(Ljava/util/List;Ljava/lang/StringBuilder;)V` @kind virtual;
  #L42e6b4.  v0:= ") " @kind object;
  #L42e6b8.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42e6be.  v0:= v2.`org.mozilla.javascript.ast.LetNode.g` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42e6c2.  if v0 == 0 then goto L42e6d4;
  #L42e6c6.  call temp:= `toSource`(v0, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L42e6cc.  v3:= temp @kind object;
  #L42e6ce.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42e6d4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42e6da.  v3:= temp @kind object;
  #L42e6dc.  return v3 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.LetNode` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/LetNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e834.  call temp:= `visit`(v2, v1) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L42e83a.  v0:= temp;
  #L42e83c.  if v0 == 0 then goto L42e858;
  #L42e840.  v0:= v1.`org.mozilla.javascript.ast.LetNode.f` @type ^`org.mozilla.javascript.ast.VariableDeclaration` @kind object;
  #L42e844.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/VariableDeclaration;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42e84a.  v0:= v1.`org.mozilla.javascript.ast.LetNode.g` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L42e84e.  if v0 == 0 then goto L42e858;
  #L42e852.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L42e858.  return @kind void;
}
