record `org.mozilla.javascript.ast.XmlExpression` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.XmlFragment` @kind class {
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.XmlExpression.c` @AccessFlag PRIVATE;
  `boolean` `org.mozilla.javascript.ast.XmlExpression.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.XmlExpression` v0 @kind this) @signature `Lorg/mozilla/javascript/ast/XmlExpression;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4323a4.  call `<init>`(v0) @signature `Lorg/mozilla/javascript/ast/XmlFragment;.<init>:()V` @kind direct;
  #L4323aa.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.XmlExpression` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/XmlExpression;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4323bc.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/XmlFragment;.<init>:(I)V` @kind direct;
  #L4323c2.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.XmlExpression` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/XmlExpression;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4323d4.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/XmlFragment;.<init>:(II)V` @kind direct;
  #L4323da.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.XmlExpression` v0 @kind this, `int` v1 , `org.mozilla.javascript.ast.AstNode` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/XmlExpression;.<init>:(ILorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4323ec.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/XmlFragment;.<init>:(I)V` @kind direct;
  #L4323f2.  call `setExpression`(v0, v2) @signature `Lorg/mozilla/javascript/ast/XmlExpression;.setExpression:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L4323f8.  return @kind void;
}
procedure `org.mozilla.javascript.ast.AstNode` `getExpression`(`org.mozilla.javascript.ast.XmlExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/XmlExpression;.getExpression:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43238c.  v0:= v1.`org.mozilla.javascript.ast.XmlExpression.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L432390.  return v0 @kind object;
}
procedure `boolean` `isXmlAttribute`(`org.mozilla.javascript.ast.XmlExpression` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/XmlExpression;.isXmlAttribute:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43231c.  v0:= v1.`org.mozilla.javascript.ast.XmlExpression.d` @type ^`boolean` @kind boolean;
  #L432320.  return v0;
}
procedure `void` `setExpression`(`org.mozilla.javascript.ast.XmlExpression` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/XmlExpression;.setExpression:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L43240c.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L432412.  v0.`org.mozilla.javascript.ast.XmlExpression.c` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L432416.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L43241c.  return @kind void;
}
procedure `void` `setIsXmlAttribute`(`org.mozilla.javascript.ast.XmlExpression` v0 @kind this, `boolean` v1 ) @signature `Lorg/mozilla/javascript/ast/XmlExpression;.setIsXmlAttribute:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L432430.  v0.`org.mozilla.javascript.ast.XmlExpression.d` @type ^`boolean` := v1 @kind boolean;
  #L432434.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.XmlExpression` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/XmlExpression;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L432334.  v0:= new `java.lang.StringBuilder`;
  #L432338.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43233e.  call temp:= `makeIndent`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L432344.  v1:= temp @kind object;
  #L432346.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43234c.  v1:= "{" @kind object;
  #L432350.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L432356.  v1:= v2.`org.mozilla.javascript.ast.XmlExpression.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L43235a.  call temp:= `toSource`(v1, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L432360.  v3:= temp @kind object;
  #L432362.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L432368.  v3:= "}" @kind object;
  #L43236c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L432372.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L432378.  v3:= temp @kind object;
  #L43237a.  return v3 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.XmlExpression` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/XmlExpression;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432448.  call temp:= `visit`(v2, v1) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L43244e.  v0:= temp;
  #L432450.  if v0 == 0 then goto L43245e;
  #L432454.  v0:= v1.`org.mozilla.javascript.ast.XmlExpression.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L432458.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L43245e.  return @kind void;
}
