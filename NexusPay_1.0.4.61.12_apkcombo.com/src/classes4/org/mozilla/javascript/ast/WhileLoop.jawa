record `org.mozilla.javascript.ast.WhileLoop` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.Loop` @kind class {
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.WhileLoop.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.WhileLoop` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/WhileLoop;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L431d10.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/Loop;.<init>:()V` @kind direct;
  #L431d16.  v0:= 117I;
  #L431d1a.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L431d1e.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.WhileLoop` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/WhileLoop;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L431d30.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/Loop;.<init>:(I)V` @kind direct;
  #L431d36.  v1:= 117I;
  #L431d3a.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L431d3e.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.WhileLoop` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/WhileLoop;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L431d50.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/Loop;.<init>:(II)V` @kind direct;
  #L431d56.  v1:= 117I;
  #L431d5a.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L431d5e.  return @kind void;
}
procedure `org.mozilla.javascript.ast.AstNode` `getCondition`(`org.mozilla.javascript.ast.WhileLoop` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/WhileLoop;.getCondition:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431cf8.  v0:= v1.`org.mozilla.javascript.ast.WhileLoop.f` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431cfc.  return v0 @kind object;
}
procedure `void` `setCondition`(`org.mozilla.javascript.ast.WhileLoop` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/WhileLoop;.setCondition:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L431d70.  call `assertNotNull`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.assertNotNull:(Ljava/lang/Object;)V` @kind virtual;
  #L431d76.  v0.`org.mozilla.javascript.ast.WhileLoop.f` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L431d7a.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L431d80.  return @kind void;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.WhileLoop` v4 @kind this, `int` v5 ) @signature `Lorg/mozilla/javascript/ast/WhileLoop;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L431c54.  v0:= new `java.lang.StringBuilder`;
  #L431c58.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L431c5e.  call temp:= `makeIndent`(v4, v5) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L431c64.  v1:= temp @kind object;
  #L431c66.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431c6c.  v1:= "while (" @kind object;
  #L431c70.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431c76.  v1:= v4.`org.mozilla.javascript.ast.WhileLoop.f` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431c7a.  v2:= 0I;
  #L431c7c.  call temp:= `toSource`(v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L431c82.  v1:= temp @kind object;
  #L431c84.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431c8a.  v1:= ") " @kind object;
  #L431c8e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431c94.  v1:= v4.`org.mozilla.javascript.ast.Loop.body` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431c98.  v2:= instanceof @variable v1 @type ^`org.mozilla.javascript.ast.Block` @kind boolean;
  #L431c9c.  v3:= "\n" @kind object;
  #L431ca0.  if v2 == 0 then goto L431cc2;
  #L431ca4.  call temp:= `toSource`(v1, v5) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L431caa.  v5:= temp @kind object;
  #L431cac.  call temp:= `trim`(v5) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L431cb2.  v5:= temp @kind object;
  #L431cb4.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431cba.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431cc0.  goto L431cde;
  #L431cc2.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431cc8.  v1:= v4.`org.mozilla.javascript.ast.Loop.body` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431ccc.  v5:= v5 + 1;
  #L431cd0.  call temp:= `toSource`(v1, v5) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L431cd6.  v5:= temp @kind object;
  #L431cd8.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431cde.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L431ce4.  v5:= temp @kind object;
  #L431ce6.  return v5 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.WhileLoop` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/WhileLoop;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431d94.  call temp:= `visit`(v2, v1) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L431d9a.  v0:= temp;
  #L431d9c.  if v0 == 0 then goto L431db4;
  #L431da0.  v0:= v1.`org.mozilla.javascript.ast.WhileLoop.f` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431da4.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L431daa.  v0:= v1.`org.mozilla.javascript.ast.Loop.body` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431dae.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L431db4.  return @kind void;
}
