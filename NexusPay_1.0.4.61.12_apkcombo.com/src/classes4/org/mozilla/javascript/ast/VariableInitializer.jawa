record `org.mozilla.javascript.ast.VariableInitializer` @kind class @AccessFlag PUBLIC extends `org.mozilla.javascript.ast.AstNode` @kind class {
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.VariableInitializer.c` @AccessFlag PRIVATE;
  `org.mozilla.javascript.ast.AstNode` `org.mozilla.javascript.ast.VariableInitializer.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.VariableInitializer` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/VariableInitializer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L431b28.  call `<init>`(v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:()V` @kind direct;
  #L431b2e.  v0:= 122I;
  #L431b32.  v1.`org.mozilla.javascript.Node.type` @type ^`int` := v0;
  #L431b36.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.VariableInitializer` v0 @kind this, `int` v1 ) @signature `Lorg/mozilla/javascript/ast/VariableInitializer;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L431b48.  call `<init>`(v0, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(I)V` @kind direct;
  #L431b4e.  v1:= 122I;
  #L431b52.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L431b56.  return @kind void;
}
procedure `void` `<init>`(`org.mozilla.javascript.ast.VariableInitializer` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lorg/mozilla/javascript/ast/VariableInitializer;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L431b68.  call `<init>`(v0, v1, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.<init>:(II)V` @kind direct;
  #L431b6e.  v1:= 122I;
  #L431b72.  v0.`org.mozilla.javascript.Node.type` @type ^`int` := v1;
  #L431b76.  return @kind void;
}
procedure `org.mozilla.javascript.ast.AstNode` `getInitializer`(`org.mozilla.javascript.ast.VariableInitializer` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/VariableInitializer;.getInitializer:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431af8.  v0:= v1.`org.mozilla.javascript.ast.VariableInitializer.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431afc.  return v0 @kind object;
}
procedure `org.mozilla.javascript.ast.AstNode` `getTarget`(`org.mozilla.javascript.ast.VariableInitializer` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/VariableInitializer;.getTarget:()Lorg/mozilla/javascript/ast/AstNode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431b10.  v0:= v1.`org.mozilla.javascript.ast.VariableInitializer.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431b14.  return v0 @kind object;
}
procedure `boolean` `isDestructuring`(`org.mozilla.javascript.ast.VariableInitializer` v1 @kind this) @signature `Lorg/mozilla/javascript/ast/VariableInitializer;.isDestructuring:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431a6c.  v0:= v1.`org.mozilla.javascript.ast.VariableInitializer.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431a70.  v0:= instanceof @variable v0 @type ^`org.mozilla.javascript.ast.Name` @kind boolean;
  #L431a74.  v0:= v0 ^~ 1;
  #L431a78.  return v0;
}
procedure `void` `setInitializer`(`org.mozilla.javascript.ast.VariableInitializer` v0 @kind this, `org.mozilla.javascript.ast.AstNode` v1 @kind object) @signature `Lorg/mozilla/javascript/ast/VariableInitializer;.setInitializer:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;

  #L431b88.  v0.`org.mozilla.javascript.ast.VariableInitializer.d` @type ^`org.mozilla.javascript.ast.AstNode` := v1 @kind object;
  #L431b8c.  if v1 == 0 then goto L431b96;
  #L431b90.  call `setParent`(v1, v0) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L431b96.  return @kind void;
}
procedure `void` `setNodeType`(`org.mozilla.javascript.ast.VariableInitializer` v1 @kind this, `int` v2 ) @signature `Lorg/mozilla/javascript/ast/VariableInitializer;.setNodeType:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431ba8.  v0:= 122I;
  #L431bac.  if v2 == v0 then goto L431bd2;
  #L431bb0.  v0:= 154I;
  #L431bb4.  if v2 == v0 then goto L431bd2;
  #L431bb8.  v0:= 153I;
  #L431bbc.  if v2 != v0 then goto L431bc2;
  #L431bc0.  goto L431bd2;
  #L431bc2.  v2:= new `java.lang.IllegalArgumentException`;
  #L431bc6.  v0:= "invalid node type" @kind object;
  #L431bca.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L431bd0.  throw v2;
  #L431bd2.  call temp:= `setType`(v1, v2) @signature `Lorg/mozilla/javascript/Node;.setType:(I)Lorg/mozilla/javascript/Node;` @kind virtual;
  #L431bd8.  return @kind void;
}
procedure `void` `setTarget`(`org.mozilla.javascript.ast.VariableInitializer` v1 @kind this, `org.mozilla.javascript.ast.AstNode` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/VariableInitializer;.setTarget:(Lorg/mozilla/javascript/ast/AstNode;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431bec.  if v2 == 0 then goto L431bfc;
  #L431bf0.  v1.`org.mozilla.javascript.ast.VariableInitializer.c` @type ^`org.mozilla.javascript.ast.AstNode` := v2 @kind object;
  #L431bf4.  call `setParent`(v2, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.setParent:(Lorg/mozilla/javascript/ast/AstNode;)V` @kind virtual;
  #L431bfa.  return @kind void;
  #L431bfc.  v2:= new `java.lang.IllegalArgumentException`;
  #L431c00.  v0:= "invalid target arg" @kind object;
  #L431c04.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L431c0a.  throw v2;
}
procedure `java.lang.String` `toSource`(`org.mozilla.javascript.ast.VariableInitializer` v2 @kind this, `int` v3 ) @signature `Lorg/mozilla/javascript/ast/VariableInitializer;.toSource:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431a8c.  v0:= new `java.lang.StringBuilder`;
  #L431a90.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L431a96.  call temp:= `makeIndent`(v2, v3) @signature `Lorg/mozilla/javascript/ast/AstNode;.makeIndent:(I)Ljava/lang/String;` @kind virtual;
  #L431a9c.  v3:= temp @kind object;
  #L431a9e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431aa4.  v3:= v2.`org.mozilla.javascript.ast.VariableInitializer.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431aa8.  v1:= 0I;
  #L431aaa.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L431ab0.  v3:= temp @kind object;
  #L431ab2.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431ab8.  v3:= v2.`org.mozilla.javascript.ast.VariableInitializer.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431abc.  if v3 == 0 then goto L431adc;
  #L431ac0.  v3:= " = " @kind object;
  #L431ac4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431aca.  v3:= v2.`org.mozilla.javascript.ast.VariableInitializer.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431ace.  call temp:= `toSource`(v3, v1) @signature `Lorg/mozilla/javascript/ast/AstNode;.toSource:(I)Ljava/lang/String;` @kind virtual;
  #L431ad4.  v3:= temp @kind object;
  #L431ad6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L431adc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L431ae2.  v3:= temp @kind object;
  #L431ae4.  return v3 @kind object;
}
procedure `void` `visit`(`org.mozilla.javascript.ast.VariableInitializer` v1 @kind this, `org.mozilla.javascript.ast.NodeVisitor` v2 @kind object) @signature `Lorg/mozilla/javascript/ast/VariableInitializer;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431c1c.  call temp:= `visit`(v2, v1) @signature `Lorg/mozilla/javascript/ast/NodeVisitor;.visit:(Lorg/mozilla/javascript/ast/AstNode;)Z` @kind interface;
  #L431c22.  v0:= temp;
  #L431c24.  if v0 == 0 then goto L431c40;
  #L431c28.  v0:= v1.`org.mozilla.javascript.ast.VariableInitializer.c` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431c2c.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L431c32.  v0:= v1.`org.mozilla.javascript.ast.VariableInitializer.d` @type ^`org.mozilla.javascript.ast.AstNode` @kind object;
  #L431c36.  if v0 == 0 then goto L431c40;
  #L431c3a.  call `visit`(v0, v2) @signature `Lorg/mozilla/javascript/ast/AstNode;.visit:(Lorg/mozilla/javascript/ast/NodeVisitor;)V` @kind virtual;
  #L431c40.  return @kind void;
}
