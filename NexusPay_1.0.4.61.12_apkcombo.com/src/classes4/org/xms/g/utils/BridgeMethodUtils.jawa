record `org.xms.g.utils.BridgeMethodUtils` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.Map` `@@org.xms.g.utils.BridgeMethodUtils.bridgeMethodCache` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/xms/g/utils/BridgeMethodUtils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L47ad58.  v0:= new `java.util.HashMap`;
  #L47ad5c.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L47ad62.  `@@org.xms.g.utils.BridgeMethodUtils.bridgeMethodCache` @type ^`java.util.Map` := v0 @kind object;
  #L47ad66.  return @kind void;
}
procedure `void` `<init>`(`org.xms.g.utils.BridgeMethodUtils` v0 @kind this) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L47ad78.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47ad7e.  return @kind void;
}
procedure `java.lang.reflect.Method` `getBridgeMethod`(`java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getBridgeMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L47aa3c.  if v1 == 0 then goto L47aa82;
  #L47aa40.  if v2 == 0 then goto L47aa72;
  #L47aa44.  call temp:= `isEmpty`(v2) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L47aa4a.  v0:= temp;
  #L47aa4c.  if v0 != 0 then goto L47aa72;
  #L47aa50.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L47aa56.  v1:= temp @kind object;
  #L47aa58.  call temp:= `isBridge`(v1) @signature `Ljava/lang/reflect/Method;.isBridge:()Z` @kind virtual;
  #L47aa5e.  v2:= temp;
  #L47aa60.  if v2 == 0 then goto L47aa66;
  #L47aa64.  return v1 @kind object;
  #L47aa66.  v1:= new `java.lang.NoSuchMethodException`;
  #L47aa6a.  call `<init>`(v1) @signature `Ljava/lang/NoSuchMethodException;.<init>:()V` @kind direct;
  #L47aa70.  throw v1;
  #L47aa72.  v1:= new `java.lang.IllegalStateException`;
  #L47aa76.  v2:= "method name is null or empty!" @kind object;
  #L47aa7a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47aa80.  throw v1;
  #L47aa82.  v1:= new `java.lang.IllegalStateException`;
  #L47aa86.  v2:= "bad clazz" @kind object;
  #L47aa8a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47aa90.  throw v1;
}
procedure `java.lang.reflect.Method` `getBridgedMethod`(`java.lang.reflect.Method` v3 @kind object) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getBridgedMethod:(Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L47aaa4.  call temp:= `isBridge`(v3) @signature `Ljava/lang/reflect/Method;.isBridge:()Z` @kind virtual;
  #L47aaaa.  v0:= temp;
  #L47aaac.  if v0 != 0 then goto L47aab2;
  #L47aab0.  return v3 @kind object;
  #L47aab2.  call temp:= `getCachedBridgedMethod`(v3) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getCachedBridgedMethod:(Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;` @kind static;
  #L47aab8.  v0:= temp @kind object;
  #L47aaba.  if v0 == 0 then goto L47aac0;
  #L47aabe.  return v0 @kind object;
  #L47aac0.  v1:= new `java.util.ArrayList`;
  #L47aac4.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L47aaca.  call temp:= `getDeclaringClass`(v3) @signature `Ljava/lang/reflect/Method;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L47aad0.  v2:= temp @kind object;
  #L47aad2.  call `getCandidateBridgedMethods`(v2, v3, v1) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getCandidateBridgedMethods:(Ljava/lang/Class;Ljava/lang/reflect/Method;Ljava/util/List;)V` @kind static;
  #L47aad8.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L47aade.  v2:= temp;
  #L47aae0.  if v2 != 0 then goto L47aaec;
  #L47aae4.  call temp:= `getBridgedMethodByCandidates`(v1, v3) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getBridgedMethodByCandidates:(Ljava/util/List;Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;` @kind static;
  #L47aaea.  v0:= temp @kind object;
  #L47aaec.  if v0 != 0 then goto L47aaf2;
  #L47aaf0.  v0:= v3 @kind object;
  #L47aaf2.  call `setCachedBridgedMethodCache`(v3, v0) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.setCachedBridgedMethodCache:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @kind static;
  #L47aaf8.  return v0 @kind object;
}
procedure `java.lang.reflect.Method` `getBridgedMethodByCandidates`(`java.util.List` v9 @kind object, `java.lang.reflect.Method` v10 @kind object) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getBridgedMethodByCandidates:(Ljava/util/List;Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L47ab0c.  call temp:= `getGenericMethod`(v10) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getGenericMethod:(Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;` @kind static;
  #L47ab12.  v0:= temp @kind object;
  #L47ab14.  v1:= 0I;
  #L47ab16.  if v0 == 0 then goto L47ab98;
  #L47ab1a.  call temp:= `iterator`(v9) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L47ab20.  v2:= temp @kind object;
  #L47ab22.  v3:= 1I;
  #L47ab24.  v5:= v1 @kind object;
  #L47ab26.  v4:= 1I;
  #L47ab28.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47ab2e.  v6:= temp;
  #L47ab30.  v7:= 0I;
  #L47ab32.  if v6 == 0 then goto L47ab86;
  #L47ab36.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L47ab3c.  v6:= temp @kind object;
  #L47ab3e.  v6:= (`java.lang.reflect.Method`) v6 @kind object;
  #L47ab42.  call temp:= `getDeclaringClass`(v10) @signature `Ljava/lang/reflect/Method;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L47ab48.  v8:= temp @kind object;
  #L47ab4a.  call temp:= `isBridgedMethod`(v0, v6, v8) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.isBridgedMethod:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class;)Z` @kind static;
  #L47ab50.  v8:= temp;
  #L47ab52.  if v8 == 0 then goto L47ab58;
  #L47ab56.  return v6 @kind object;
  #L47ab58.  if v5 == 0 then goto L47ab82;
  #L47ab5c.  if v4 == 0 then goto L47ab80;
  #L47ab60.  call temp:= `getGenericParameterTypes`(v6) @signature `Ljava/lang/reflect/Method;.getGenericParameterTypes:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L47ab66.  v4:= temp @kind object;
  #L47ab68.  call temp:= `getGenericParameterTypes`(v5) @signature `Ljava/lang/reflect/Method;.getGenericParameterTypes:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L47ab6e.  v5:= temp @kind object;
  #L47ab70.  call temp:= `equals`(v4, v5) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L47ab76.  v4:= temp;
  #L47ab78.  if v4 == 0 then goto L47ab80;
  #L47ab7c.  v4:= 1I;
  #L47ab7e.  goto L47ab82;
  #L47ab80.  v4:= 0I;
  #L47ab82.  v5:= v6 @kind object;
  #L47ab84.  goto L47ab28;
  #L47ab86.  if v4 == 0 then goto L47ab98;
  #L47ab8a.  call temp:= `get`(v9, v7) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L47ab90.  v9:= temp @kind object;
  #L47ab92.  v9:= (`java.lang.reflect.Method`) v9 @kind object;
  #L47ab96.  return v9 @kind object;
  #L47ab98.  return v1 @kind object;
}
procedure `java.lang.reflect.Method` `getCachedBridgedMethod`(`java.lang.reflect.Method` v2 @kind object) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getCachedBridgedMethod:(Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L47abac.  v0:= constclass @type ^`org.xms.g.utils.BridgeMethodUtils` @kind object;
  #L47abb0.  @monitorenter v0
  #L47abb2.  v1:= `@@org.xms.g.utils.BridgeMethodUtils.bridgeMethodCache` @type ^`java.util.Map` @kind object;
  #L47abb6.  call temp:= `containsKey`(v1, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L47abbc.  v1:= temp;
  #L47abbe.  if v1 == 0 then goto L47abd6;
  #L47abc2.  v1:= `@@org.xms.g.utils.BridgeMethodUtils.bridgeMethodCache` @type ^`java.util.Map` @kind object;
  #L47abc6.  call temp:= `get`(v1, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47abcc.  v2:= temp @kind object;
  #L47abce.  v2:= (`java.lang.reflect.Method`) v2 @kind object;
  #L47abd2.  @monitorexit v0
  #L47abd4.  return v2 @kind object;
  #L47abd6.  v2:= 0I;
  #L47abd8.  @monitorexit v0
  #L47abda.  return v2 @kind object;
  #L47abdc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47abde.  @monitorexit v0
  #L47abe0.  throw v2;
  catch `java.lang.Throwable` @[L47abb2..L47abd2] goto L47abdc;
}
procedure `void` `getCandidateBridgedMethods`(`java.lang.Class` v7 @kind object, `java.lang.reflect.Method` v8 @kind object, `java.util.List` v9 @kind object) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getCandidateBridgedMethods:(Ljava/lang/Class;Ljava/lang/reflect/Method;Ljava/util/List;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L47ad90.  call temp:= `getMethods`(v7) @signature `Ljava/lang/Class;.getMethods:()[Ljava/lang/reflect/Method;` @kind virtual;
  #L47ad96.  v0:= temp @kind object;
  #L47ad98.  v1:= length @variable v0;
  #L47ad9a.  v2:= 0I;
  #L47ad9c.  v3:= 0I;
  #L47ad9e.  if v3 >= v1 then goto L47ae00;
  #L47ada2.  v4:= v0[v3] @kind object;
  #L47ada6.  call temp:= `isBridge`(v4) @signature `Ljava/lang/reflect/Method;.isBridge:()Z` @kind virtual;
  #L47adac.  v5:= temp;
  #L47adae.  if v5 != 0 then goto L47adfa;
  #L47adb2.  call temp:= `equals`(v4, v8) @signature `Ljava/lang/reflect/Method;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L47adb8.  v5:= temp;
  #L47adba.  if v5 != 0 then goto L47adfa;
  #L47adbe.  call temp:= `getParameterTypes`(v4) @signature `Ljava/lang/reflect/Method;.getParameterTypes:()[Ljava/lang/Class;` @kind virtual;
  #L47adc4.  v5:= temp @kind object;
  #L47adc6.  v5:= length @variable v5;
  #L47adc8.  call temp:= `getParameterTypes`(v8) @signature `Ljava/lang/reflect/Method;.getParameterTypes:()[Ljava/lang/Class;` @kind virtual;
  #L47adce.  v6:= temp @kind object;
  #L47add0.  v6:= length @variable v6;
  #L47add2.  if v5 == v6 then goto L47add8;
  #L47add6.  goto L47adfa;
  #L47add8.  call temp:= `getName`(v4) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L47adde.  v5:= temp @kind object;
  #L47ade0.  call temp:= `getName`(v8) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L47ade6.  v6:= temp @kind object;
  #L47ade8.  call temp:= `equals`(v5, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L47adee.  v5:= temp;
  #L47adf0.  if v5 == 0 then goto L47adfa;
  #L47adf4.  call temp:= `add`(v9, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L47adfa.  v3:= v3 + 1;
  #L47adfe.  goto L47ad9e;
  #L47ae00.  call temp:= `getSuperclass`(v7) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L47ae06.  v0:= temp @kind object;
  #L47ae08.  if v0 == 0 then goto L47ae32;
  #L47ae0c.  call temp:= `getSuperclass`(v7) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L47ae12.  v0:= temp @kind object;
  #L47ae14.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L47ae18.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L47ae1e.  v0:= temp;
  #L47ae20.  if v0 != 0 then goto L47ae32;
  #L47ae24.  call temp:= `getSuperclass`(v7) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L47ae2a.  v0:= temp @kind object;
  #L47ae2c.  call `getCandidateBridgedMethods`(v0, v8, v9) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getCandidateBridgedMethods:(Ljava/lang/Class;Ljava/lang/reflect/Method;Ljava/util/List;)V` @kind static;
  #L47ae32.  call temp:= `isInterface`(v7) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L47ae38.  v0:= temp;
  #L47ae3a.  if v0 == 0 then goto L47ae5c;
  #L47ae3e.  call temp:= `getInterfaces`(v7) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L47ae44.  v7:= temp @kind object;
  #L47ae46.  v0:= length @variable v7;
  #L47ae48.  if v2 >= v0 then goto L47ae5c;
  #L47ae4c.  v1:= v7[v2] @kind object;
  #L47ae50.  call `getCandidateBridgedMethods`(v1, v8, v9) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getCandidateBridgedMethods:(Ljava/lang/Class;Ljava/lang/reflect/Method;Ljava/util/List;)V` @kind static;
  #L47ae56.  v2:= v2 + 1;
  #L47ae5a.  goto L47ae48;
  #L47ae5c.  return @kind void;
}
procedure `java.lang.reflect.Method` `getDeclaredMethod`(`java.lang.Class` v1 @kind object, `java.lang.reflect.Method` v2 @kind object) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getDeclaredMethod:(Ljava/lang/Class;Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L47ac00.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L47ac06.  v0:= temp @kind object;
  #L47ac08.  call temp:= `getParameterTypes`(v2) @signature `Ljava/lang/reflect/Method;.getParameterTypes:()[Ljava/lang/Class;` @kind virtual;
  #L47ac0e.  v2:= temp @kind object;
  #L47ac10.  call temp:= `getDeclaredMethod`(v1, v0, v2) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L47ac16.  v1:= temp @kind object;
  #L47ac18.  return v1 @kind object;
  #L47ac1a.  v1:= 0I;
  #L47ac1c.  return v1 @kind object;
  catch `java.lang.NoSuchMethodException` @[L47ac00..L47ac18] goto L47ac1a;
}
procedure `java.lang.reflect.Method` `getGenericMethod`(`java.lang.reflect.Method` v7 @kind object) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getGenericMethod:(Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L47ac40.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L47ac44.  call temp:= `getDeclaringClass`(v7) @signature `Ljava/lang/reflect/Method;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L47ac4a.  v1:= temp @kind object;
  #L47ac4c.  call temp:= `getSuperclass`(v1) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L47ac52.  v1:= temp @kind object;
  #L47ac54.  if v1 == 0 then goto L47ac88;
  #L47ac58.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L47ac5e.  v2:= temp;
  #L47ac60.  if v2 != 0 then goto L47ac88;
  #L47ac64.  call temp:= `getDeclaredMethod`(v1, v7) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getDeclaredMethod:(Ljava/lang/Class;Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;` @kind static;
  #L47ac6a.  v2:= temp @kind object;
  #L47ac6c.  if v2 == 0 then goto L47ac7e;
  #L47ac70.  call temp:= `isBridge`(v2) @signature `Ljava/lang/reflect/Method;.isBridge:()Z` @kind virtual;
  #L47ac76.  v3:= temp;
  #L47ac78.  if v3 != 0 then goto L47ac7e;
  #L47ac7c.  return v2 @kind object;
  #L47ac7e.  call temp:= `getSuperclass`(v1) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L47ac84.  v1:= temp @kind object;
  #L47ac86.  goto L47ac54;
  #L47ac88.  v1:= new `java.util.LinkedHashSet`;
  #L47ac8c.  call `<init>`(v1) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L47ac92.  call temp:= `getDeclaringClass`(v7) @signature `Ljava/lang/reflect/Method;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L47ac98.  v2:= temp @kind object;
  #L47ac9a.  v3:= 0I;
  #L47ac9c.  if v2 == 0 then goto L47acd4;
  #L47aca0.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L47aca6.  v4:= temp;
  #L47aca8.  if v4 != 0 then goto L47acd4;
  #L47acac.  call temp:= `getInterfaces`(v2) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L47acb2.  v4:= temp @kind object;
  #L47acb4.  v5:= length @variable v4;
  #L47acb6.  if v3 >= v5 then goto L47acca;
  #L47acba.  v6:= v4[v3] @kind object;
  #L47acbe.  call temp:= `add`(v1, v6) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L47acc4.  v3:= v3 + 1;
  #L47acc8.  goto L47acb6;
  #L47acca.  call temp:= `getSuperclass`(v2) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L47acd0.  v2:= temp @kind object;
  #L47acd2.  goto L47ac9a;
  #L47acd4.  v0:= new `java.lang.Class`[v3];
  #L47acd8.  call temp:= `toArray`(v1, v0) @signature `Ljava/util/Set;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L47acde.  v0:= temp @kind object;
  #L47ace0.  v0:= (`java.lang.Class`[]) v0 @kind object;
  #L47ace4.  call temp:= `getMethodByInterfaces`(v0, v7) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getMethodByInterfaces:([Ljava/lang/Class;Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;` @kind static;
  #L47acea.  v7:= temp @kind object;
  #L47acec.  return v7 @kind object;
}
procedure `java.lang.reflect.Method` `getMethodByInterfaces`(`java.lang.Class`[] v5 @kind object, `java.lang.reflect.Method` v6 @kind object) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getMethodByInterfaces:([Ljava/lang/Class;Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47ad00.  v0:= length @variable v5;
  #L47ad02.  v1:= 0I;
  #L47ad04.  if v1 >= v0 then goto L47ad42;
  #L47ad08.  v2:= v5[v1] @kind object;
  #L47ad0c.  call temp:= `getDeclaredMethod`(v2, v6) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getDeclaredMethod:(Ljava/lang/Class;Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;` @kind static;
  #L47ad12.  v3:= temp @kind object;
  #L47ad14.  if v3 == 0 then goto L47ad26;
  #L47ad18.  call temp:= `isBridge`(v3) @signature `Ljava/lang/reflect/Method;.isBridge:()Z` @kind virtual;
  #L47ad1e.  v4:= temp;
  #L47ad20.  if v4 != 0 then goto L47ad26;
  #L47ad24.  return v3 @kind object;
  #L47ad26.  call temp:= `getInterfaces`(v2) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L47ad2c.  v2:= temp @kind object;
  #L47ad2e.  call temp:= `getMethodByInterfaces`(v2, v6) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.getMethodByInterfaces:([Ljava/lang/Class;Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method;` @kind static;
  #L47ad34.  v2:= temp @kind object;
  #L47ad36.  if v2 == 0 then goto L47ad3c;
  #L47ad3a.  return v2 @kind object;
  #L47ad3c.  v1:= v1 + 1;
  #L47ad40.  goto L47ad04;
  #L47ad42.  v5:= 0I;
  #L47ad44.  return v5 @kind object;
}
procedure `boolean` `isBridgedMethod`(`java.lang.reflect.Method` v6 @kind object, `java.lang.reflect.Method` v7 @kind object, `java.lang.Class` v8 @kind object) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.isBridgedMethod:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47a9b0.  call temp:= `getParameterTypes`(v7) @signature `Ljava/lang/reflect/Method;.getParameterTypes:()[Ljava/lang/Class;` @kind virtual;
  #L47a9b6.  v7:= temp @kind object;
  #L47a9b8.  v0:= 0I;
  #L47a9ba.  v1:= 0I;
  #L47a9bc.  v2:= length @variable v7;
  #L47a9be.  if v1 >= v2 then goto L47aa28;
  #L47a9c2.  v2:= new `org.xms.g.utils.Parameter`;
  #L47a9c6.  call `<init>`(v2, v6, v1, v8) @signature `Lorg/xms/g/utils/Parameter;.<init>:(Ljava/lang/reflect/Method;ILjava/lang/Class;)V` @kind direct;
  #L47a9cc.  v3:= 0I;
  #L47a9ce.  call temp:= `createMethodParameterType`(v2, v3) @signature `Lorg/xms/g/utils/TypeNode;.createMethodParameterType:(Lorg/xms/g/utils/Parameter;Ljava/lang/reflect/Type;)Lorg/xms/g/utils/TypeNode;` @kind static;
  #L47a9d4.  v2:= temp @kind object;
  #L47a9d6.  v3:= v7[v1] @kind object;
  #L47a9da.  call temp:= `isArray`(v3) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L47a9e0.  v4:= temp;
  #L47a9e2.  if v4 == 0 then goto L47aa0c;
  #L47a9e6.  call temp:= `getComponentType`(v3) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L47a9ec.  v4:= temp @kind object;
  #L47a9ee.  call temp:= `resolveComponentType`(v2) @signature `Lorg/xms/g/utils/TypeNode;.resolveComponentType:()Lorg/xms/g/utils/TypeNode;` @kind virtual;
  #L47a9f4.  v5:= temp @kind object;
  #L47a9f6.  call temp:= `getClazz`(v5) @signature `Lorg/xms/g/utils/TypeNode;.getClazz:()Ljava/lang/Class;` @kind virtual;
  #L47a9fc.  v5:= temp @kind object;
  #L47a9fe.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L47aa04.  v4:= temp;
  #L47aa06.  if v4 != 0 then goto L47aa0c;
  #L47aa0a.  return v0;
  #L47aa0c.  call temp:= `getClazz`(v2) @signature `Lorg/xms/g/utils/TypeNode;.getClazz:()Ljava/lang/Class;` @kind virtual;
  #L47aa12.  v2:= temp @kind object;
  #L47aa14.  call temp:= `equals`(v3, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L47aa1a.  v2:= temp;
  #L47aa1c.  if v2 != 0 then goto L47aa22;
  #L47aa20.  return v0;
  #L47aa22.  v1:= v1 + 1;
  #L47aa26.  goto L47a9bc;
  #L47aa28.  v6:= 1I;
  #L47aa2a.  return v6;
}
procedure `void` `setCachedBridgedMethodCache`(`java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Method` v3 @kind object) @signature `Lorg/xms/g/utils/BridgeMethodUtils;.setCachedBridgedMethodCache:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L47ae70.  v0:= constclass @type ^`org.xms.g.utils.BridgeMethodUtils` @kind object;
  #L47ae74.  @monitorenter v0
  #L47ae76.  v1:= `@@org.xms.g.utils.BridgeMethodUtils.bridgeMethodCache` @type ^`java.util.Map` @kind object;
  #L47ae7a.  call temp:= `put`(v1, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47ae80.  @monitorexit v0
  #L47ae82.  return @kind void;
  #L47ae84.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47ae86.  @monitorexit v0
  #L47ae88.  throw v2;
  catch `java.lang.Throwable` @[L47ae76..L47ae80] goto L47ae84;
}
