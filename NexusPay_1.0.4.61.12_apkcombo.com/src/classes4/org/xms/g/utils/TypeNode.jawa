record `org.xms.g.utils.TypeNode` @kind class @AccessFlag PUBLIC extends `java.io.Serializable` @kind interface {
  `java.lang.Class` `org.xms.g.utils.TypeNode.clazz` @AccessFlag PRIVATE;
  `org.xms.g.utils.TypeNode` `org.xms.g.utils.TypeNode.componentType` @AccessFlag PRIVATE;
  `java.util.List` `org.xms.g.utils.TypeNode.interfaceTypes` @AccessFlag PRIVATE;
  `org.xms.g.utils.TypeNode` `org.xms.g.utils.TypeNode.owner` @AccessFlag PRIVATE;
  `org.xms.g.utils.Parameter` `org.xms.g.utils.TypeNode.parameter` @AccessFlag PRIVATE;
  `org.xms.g.utils.TypeNode` `org.xms.g.utils.TypeNode.superClassType` @AccessFlag PRIVATE;
  `java.lang.reflect.Type` `org.xms.g.utils.TypeNode.type` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.xms.g.utils.TypeNode` v0 @kind this, `java.lang.reflect.Type` v1 @kind object, `org.xms.g.utils.Parameter` v2 @kind object, `org.xms.g.utils.TypeNode` v3 @kind object) @signature `Lorg/xms/g/utils/TypeNode;.<init>:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L47b5f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47b5fa.  v0.`org.xms.g.utils.TypeNode.type` @type ^`java.lang.reflect.Type` := v1 @kind object;
  #L47b5fe.  v0.`org.xms.g.utils.TypeNode.parameter` @type ^`org.xms.g.utils.Parameter` := v2 @kind object;
  #L47b602.  v0.`org.xms.g.utils.TypeNode.owner` @type ^`org.xms.g.utils.TypeNode` := v3 @kind object;
  #L47b606.  call temp:= `getClassByType`(v0) @signature `Lorg/xms/g/utils/TypeNode;.getClassByType:()Ljava/lang/Class;` @kind direct;
  #L47b60c.  v1:= temp @kind object;
  #L47b60e.  v0.`org.xms.g.utils.TypeNode.clazz` @type ^`java.lang.Class` := v1 @kind object;
  #L47b612.  return @kind void;
}
procedure `org.xms.g.utils.TypeNode` `createMethodParameterType`(`org.xms.g.utils.Parameter` v2 @kind object, `java.lang.reflect.Type` v3 @kind object) @signature `Lorg/xms/g/utils/TypeNode;.createMethodParameterType:(Lorg/xms/g/utils/Parameter;Ljava/lang/reflect/Type;)Lorg/xms/g/utils/TypeNode;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L47b29c.  call temp:= `getReceiverClass`(v2) @signature `Lorg/xms/g/utils/Parameter;.getReceiverClass:()Ljava/lang/Class;` @kind virtual;
  #L47b2a2.  v0:= temp @kind object;
  #L47b2a4.  v1:= 0I;
  #L47b2a6.  call temp:= `createTypeNode`(v0, v1, v1) @signature `Lorg/xms/g/utils/TypeNode;.createTypeNode:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)Lorg/xms/g/utils/TypeNode;` @kind static;
  #L47b2ac.  v0:= temp @kind object;
  #L47b2ae.  call temp:= `getDeclaringClass`(v2) @signature `Lorg/xms/g/utils/Parameter;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L47b2b4.  v1:= temp @kind object;
  #L47b2b6.  call temp:= `findTypeNodeFromOwner`(v0, v1) @signature `Lorg/xms/g/utils/TypeNode;.findTypeNodeFromOwner:(Ljava/lang/Class;)Lorg/xms/g/utils/TypeNode;` @kind direct;
  #L47b2bc.  v0:= temp @kind object;
  #L47b2be.  call temp:= `createTypeNode`(v3, v2, v0) @signature `Lorg/xms/g/utils/TypeNode;.createTypeNode:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)Lorg/xms/g/utils/TypeNode;` @kind static;
  #L47b2c4.  v2:= temp @kind object;
  #L47b2c6.  return v2 @kind object;
}
procedure `org.xms.g.utils.TypeNode` `createTypeNode`(`java.lang.reflect.Type` v1 @kind object, `org.xms.g.utils.Parameter` v2 @kind object, `org.xms.g.utils.TypeNode` v3 @kind object) @signature `Lorg/xms/g/utils/TypeNode;.createTypeNode:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)Lorg/xms/g/utils/TypeNode;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L47b2d8.  if v1 != 0 then goto L47b2e8;
  #L47b2dc.  if v2 == 0 then goto L47b2e8;
  #L47b2e0.  call temp:= `toGenericType`(v2) @signature `Lorg/xms/g/utils/Parameter;.toGenericType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L47b2e6.  v1:= temp @kind object;
  #L47b2e8.  v0:= new `org.xms.g.utils.TypeNode`;
  #L47b2ec.  call `<init>`(v0, v1, v2, v3) @signature `Lorg/xms/g/utils/TypeNode;.<init>:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)V` @kind direct;
  #L47b2f2.  return v0 @kind object;
}
procedure `org.xms.g.utils.TypeNode` `findTypeNodeFromOwner`(`org.xms.g.utils.TypeNode` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lorg/xms/g/utils/TypeNode;.findTypeNodeFromOwner:(Ljava/lang/Class;)Lorg/xms/g/utils/TypeNode;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L47b304.  v0:= v3.`org.xms.g.utils.TypeNode.type` @type ^`java.lang.reflect.Type` @kind object;
  #L47b308.  if v0 == 0 then goto L47b36a;
  #L47b30c.  v0:= v3.`org.xms.g.utils.TypeNode.clazz` @type ^`java.lang.Class` @kind object;
  #L47b310.  if v0 == 0 then goto L47b36a;
  #L47b314.  if v0 != v4 then goto L47b31a;
  #L47b318.  goto L47b36a;
  #L47b31a.  call temp:= `getInterfaces`(v3) @signature `Lorg/xms/g/utils/TypeNode;.getInterfaces:()Ljava/util/List;` @kind direct;
  #L47b320.  v0:= temp @kind object;
  #L47b322.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L47b328.  v0:= temp @kind object;
  #L47b32a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47b330.  v1:= temp;
  #L47b332.  if v1 == 0 then goto L47b358;
  #L47b336.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L47b33c.  v1:= temp @kind object;
  #L47b33e.  v1:= (`org.xms.g.utils.TypeNode`) v1 @kind object;
  #L47b342.  call temp:= `findTypeNodeFromOwner`(v1, v4) @signature `Lorg/xms/g/utils/TypeNode;.findTypeNodeFromOwner:(Ljava/lang/Class;)Lorg/xms/g/utils/TypeNode;` @kind direct;
  #L47b348.  v1:= temp @kind object;
  #L47b34a.  call temp:= `getType`(v1) @signature `Lorg/xms/g/utils/TypeNode;.getType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L47b350.  v2:= temp @kind object;
  #L47b352.  if v2 == 0 then goto L47b32a;
  #L47b356.  return v1 @kind object;
  #L47b358.  call temp:= `getSuperClassType`(v3) @signature `Lorg/xms/g/utils/TypeNode;.getSuperClassType:()Lorg/xms/g/utils/TypeNode;` @kind direct;
  #L47b35e.  v0:= temp @kind object;
  #L47b360.  call temp:= `findTypeNodeFromOwner`(v0, v4) @signature `Lorg/xms/g/utils/TypeNode;.findTypeNodeFromOwner:(Ljava/lang/Class;)Lorg/xms/g/utils/TypeNode;` @kind direct;
  #L47b366.  v4:= temp @kind object;
  #L47b368.  return v4 @kind object;
  #L47b36a.  return v3 @kind object;
}
procedure `java.lang.reflect.Type` `getBounds`(`org.xms.g.utils.TypeNode` v4 @kind this, `java.lang.reflect.Type`[] v5 @kind object) @signature `Lorg/xms/g/utils/TypeNode;.getBounds:([Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L47b1e0.  v0:= length @variable v5;
  #L47b1e2.  v1:= 0I;
  #L47b1e4.  if v0 != 0 then goto L47b1ea;
  #L47b1e8.  return v1 @kind object;
  #L47b1ea.  v0:= 0I;
  #L47b1ec.  v2:= v5[v0] @kind object;
  #L47b1f0.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L47b1f4.  if v2 != v3 then goto L47b1fa;
  #L47b1f8.  return v1 @kind object;
  #L47b1fa.  v5:= v5[v0] @kind object;
  #L47b1fe.  return v5 @kind object;
}
procedure `java.lang.Class` `getClassByType`(`org.xms.g.utils.TypeNode` v3 @kind this) @signature `Lorg/xms/g/utils/TypeNode;.getClassByType:()Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L47b158.  v0:= v3.`org.xms.g.utils.TypeNode.type` @type ^`java.lang.reflect.Type` @kind object;
  #L47b15c.  v1:= 0I;
  #L47b15e.  if v0 != 0 then goto L47b164;
  #L47b162.  return v1 @kind object;
  #L47b164.  v2:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L47b168.  if v2 == 0 then goto L47b172;
  #L47b16c.  v0:= (`java.lang.Class`) v0 @kind object;
  #L47b170.  return v0 @kind object;
  #L47b172.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L47b176.  if v0 == 0 then goto L47b1a4;
  #L47b17a.  call temp:= `resolveComponentType`(v3) @signature `Lorg/xms/g/utils/TypeNode;.resolveComponentType:()Lorg/xms/g/utils/TypeNode;` @kind virtual;
  #L47b180.  v0:= temp @kind object;
  #L47b182.  call temp:= `getClazz`(v0) @signature `Lorg/xms/g/utils/TypeNode;.getClazz:()Ljava/lang/Class;` @kind virtual;
  #L47b188.  v0:= temp @kind object;
  #L47b18a.  if v0 != 0 then goto L47b190;
  #L47b18e.  return v1 @kind object;
  #L47b190.  v1:= 0I;
  #L47b192.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L47b198.  v0:= temp @kind object;
  #L47b19a.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L47b1a0.  v0:= temp @kind object;
  #L47b1a2.  return v0 @kind object;
  #L47b1a4.  call temp:= `handleSpecialType`(v3) @signature `Lorg/xms/g/utils/TypeNode;.handleSpecialType:()Lorg/xms/g/utils/TypeNode;` @kind direct;
  #L47b1aa.  v0:= temp @kind object;
  #L47b1ac.  call temp:= `getClazz`(v0) @signature `Lorg/xms/g/utils/TypeNode;.getClazz:()Ljava/lang/Class;` @kind virtual;
  #L47b1b2.  v0:= temp @kind object;
  #L47b1b4.  return v0 @kind object;
}
procedure `java.util.List` `getInterfaces`(`org.xms.g.utils.TypeNode` v5 @kind this) @signature `Lorg/xms/g/utils/TypeNode;.getInterfaces:()Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47b228.  v0:= v5.`org.xms.g.utils.TypeNode.clazz` @type ^`java.lang.Class` @kind object;
  #L47b22c.  if v0 != 0 then goto L47b23c;
  #L47b230.  v0:= new `java.util.ArrayList`;
  #L47b234.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L47b23a.  return v0 @kind object;
  #L47b23c.  v0:= v5.`org.xms.g.utils.TypeNode.interfaceTypes` @type ^`java.util.List` @kind object;
  #L47b240.  if v0 != 0 then goto L47b284;
  #L47b244.  v0:= new `java.util.ArrayList`;
  #L47b248.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L47b24e.  v5.`org.xms.g.utils.TypeNode.interfaceTypes` @type ^`java.util.List` := v0 @kind object;
  #L47b252.  v0:= v5.`org.xms.g.utils.TypeNode.clazz` @type ^`java.lang.Class` @kind object;
  #L47b256.  call temp:= `getGenericInterfaces`(v0) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L47b25c.  v0:= temp @kind object;
  #L47b25e.  v1:= 0I;
  #L47b260.  v2:= length @variable v0;
  #L47b262.  if v1 >= v2 then goto L47b284;
  #L47b266.  v2:= v5.`org.xms.g.utils.TypeNode.interfaceTypes` @type ^`java.util.List` @kind object;
  #L47b26a.  v3:= v0[v1] @kind object;
  #L47b26e.  v4:= 0I;
  #L47b270.  call temp:= `createTypeNode`(v3, v4, v5) @signature `Lorg/xms/g/utils/TypeNode;.createTypeNode:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)Lorg/xms/g/utils/TypeNode;` @kind static;
  #L47b276.  v3:= temp @kind object;
  #L47b278.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L47b27e.  v1:= v1 + 1;
  #L47b282.  goto L47b260;
  #L47b284.  v0:= v5.`org.xms.g.utils.TypeNode.interfaceTypes` @type ^`java.util.List` @kind object;
  #L47b288.  return v0 @kind object;
}
procedure `org.xms.g.utils.TypeNode` `getSuperClassType`(`org.xms.g.utils.TypeNode` v2 @kind this) @signature `Lorg/xms/g/utils/TypeNode;.getSuperClassType:()Lorg/xms/g/utils/TypeNode;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L47b37c.  v0:= v2.`org.xms.g.utils.TypeNode.clazz` @type ^`java.lang.Class` @kind object;
  #L47b380.  v1:= 0I;
  #L47b382.  if v0 == 0 then goto L47b3ba;
  #L47b386.  call temp:= `getGenericSuperclass`(v0) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L47b38c.  v0:= temp @kind object;
  #L47b38e.  if v0 != 0 then goto L47b394;
  #L47b392.  goto L47b3ba;
  #L47b394.  v0:= v2.`org.xms.g.utils.TypeNode.superClassType` @type ^`org.xms.g.utils.TypeNode` @kind object;
  #L47b398.  if v0 != 0 then goto L47b3b4;
  #L47b39c.  v0:= v2.`org.xms.g.utils.TypeNode.clazz` @type ^`java.lang.Class` @kind object;
  #L47b3a0.  call temp:= `getGenericSuperclass`(v0) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L47b3a6.  v0:= temp @kind object;
  #L47b3a8.  call temp:= `createTypeNode`(v0, v1, v2) @signature `Lorg/xms/g/utils/TypeNode;.createTypeNode:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)Lorg/xms/g/utils/TypeNode;` @kind static;
  #L47b3ae.  v0:= temp @kind object;
  #L47b3b0.  v2.`org.xms.g.utils.TypeNode.superClassType` @type ^`org.xms.g.utils.TypeNode` := v0 @kind object;
  #L47b3b4.  v0:= v2.`org.xms.g.utils.TypeNode.superClassType` @type ^`org.xms.g.utils.TypeNode` @kind object;
  #L47b3b8.  return v0 @kind object;
  #L47b3ba.  call temp:= `createTypeNode`(v1, v1, v1) @signature `Lorg/xms/g/utils/TypeNode;.createTypeNode:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)Lorg/xms/g/utils/TypeNode;` @kind static;
  #L47b3c0.  v0:= temp @kind object;
  #L47b3c2.  return v0 @kind object;
}
procedure `org.xms.g.utils.TypeNode` `handleSpecialType`(`org.xms.g.utils.TypeNode` v4 @kind this) @signature `Lorg/xms/g/utils/TypeNode;.handleSpecialType:()Lorg/xms/g/utils/TypeNode;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L47b3d4.  v0:= v4.`org.xms.g.utils.TypeNode.type` @type ^`java.lang.reflect.Type` @kind object;
  #L47b3d8.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L47b3dc.  v2:= 0I;
  #L47b3de.  if v1 == 0 then goto L47b422;
  #L47b3e2.  v0:= (`java.lang.reflect.TypeVariable`) v0 @kind object;
  #L47b3e6.  v1:= v4.`org.xms.g.utils.TypeNode.owner` @type ^`org.xms.g.utils.TypeNode` @kind object;
  #L47b3ea.  if v1 == 0 then goto L47b404;
  #L47b3ee.  call temp:= `handleVariable`(v1, v0) @signature `Lorg/xms/g/utils/TypeNode;.handleVariable:(Ljava/lang/reflect/TypeVariable;)Lorg/xms/g/utils/TypeNode;` @kind direct;
  #L47b3f4.  v1:= temp @kind object;
  #L47b3f6.  call temp:= `getType`(v1) @signature `Lorg/xms/g/utils/TypeNode;.getType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L47b3fc.  v3:= temp @kind object;
  #L47b3fe.  if v3 == 0 then goto L47b404;
  #L47b402.  return v1 @kind object;
  #L47b404.  call temp:= `getBounds`(v0) @signature `Ljava/lang/reflect/TypeVariable;.getBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L47b40a.  v0:= temp @kind object;
  #L47b40c.  call temp:= `getBounds`(v4, v0) @signature `Lorg/xms/g/utils/TypeNode;.getBounds:([Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind direct;
  #L47b412.  v0:= temp @kind object;
  #L47b414.  v1:= v4.`org.xms.g.utils.TypeNode.owner` @type ^`org.xms.g.utils.TypeNode` @kind object;
  #L47b418.  call temp:= `createTypeNode`(v0, v2, v1) @signature `Lorg/xms/g/utils/TypeNode;.createTypeNode:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)Lorg/xms/g/utils/TypeNode;` @kind static;
  #L47b41e.  v0:= temp @kind object;
  #L47b420.  return v0 @kind object;
  #L47b422.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L47b426.  if v1 == 0 then goto L47b460;
  #L47b42a.  v0:= (`java.lang.reflect.WildcardType`) v0 @kind object;
  #L47b42e.  call temp:= `getUpperBounds`(v0) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L47b434.  v1:= temp @kind object;
  #L47b436.  call temp:= `getBounds`(v4, v1) @signature `Lorg/xms/g/utils/TypeNode;.getBounds:([Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind direct;
  #L47b43c.  v1:= temp @kind object;
  #L47b43e.  if v1 != 0 then goto L47b452;
  #L47b442.  call temp:= `getLowerBounds`(v0) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L47b448.  v0:= temp @kind object;
  #L47b44a.  call temp:= `getBounds`(v4, v0) @signature `Lorg/xms/g/utils/TypeNode;.getBounds:([Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind direct;
  #L47b450.  v1:= temp @kind object;
  #L47b452.  v0:= v4.`org.xms.g.utils.TypeNode.owner` @type ^`org.xms.g.utils.TypeNode` @kind object;
  #L47b456.  call temp:= `createTypeNode`(v1, v2, v0) @signature `Lorg/xms/g/utils/TypeNode;.createTypeNode:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)Lorg/xms/g/utils/TypeNode;` @kind static;
  #L47b45c.  v0:= temp @kind object;
  #L47b45e.  return v0 @kind object;
  #L47b460.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L47b464.  if v1 == 0 then goto L47b482;
  #L47b468.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L47b46c.  call temp:= `getRawType`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L47b472.  v0:= temp @kind object;
  #L47b474.  v1:= v4.`org.xms.g.utils.TypeNode.owner` @type ^`org.xms.g.utils.TypeNode` @kind object;
  #L47b478.  call temp:= `createTypeNode`(v0, v2, v1) @signature `Lorg/xms/g/utils/TypeNode;.createTypeNode:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)Lorg/xms/g/utils/TypeNode;` @kind static;
  #L47b47e.  v0:= temp @kind object;
  #L47b480.  return v0 @kind object;
  #L47b482.  call temp:= `createTypeNode`(v2, v2, v2) @signature `Lorg/xms/g/utils/TypeNode;.createTypeNode:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)Lorg/xms/g/utils/TypeNode;` @kind static;
  #L47b488.  v0:= temp @kind object;
  #L47b48a.  return v0 @kind object;
}
procedure `org.xms.g.utils.TypeNode` `handleVariable`(`org.xms.g.utils.TypeNode` v6 @kind this, `java.lang.reflect.TypeVariable` v7 @kind object) @signature `Lorg/xms/g/utils/TypeNode;.handleVariable:(Ljava/lang/reflect/TypeVariable;)Lorg/xms/g/utils/TypeNode;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47b49c.  v0:= v6.`org.xms.g.utils.TypeNode.type` @type ^`java.lang.reflect.Type` @kind object;
  #L47b4a0.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L47b4a4.  if v1 == 0 then goto L47b4ba;
  #L47b4a8.  call temp:= `handleSpecialType`(v6) @signature `Lorg/xms/g/utils/TypeNode;.handleSpecialType:()Lorg/xms/g/utils/TypeNode;` @kind direct;
  #L47b4ae.  v0:= temp @kind object;
  #L47b4b0.  call temp:= `handleVariable`(v0, v7) @signature `Lorg/xms/g/utils/TypeNode;.handleVariable:(Ljava/lang/reflect/TypeVariable;)Lorg/xms/g/utils/TypeNode;` @kind direct;
  #L47b4b6.  v7:= temp @kind object;
  #L47b4b8.  return v7 @kind object;
  #L47b4ba.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L47b4be.  v2:= 0I;
  #L47b4c0.  if v1 == 0 then goto L47b54c;
  #L47b4c4.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L47b4c8.  v1:= v6.`org.xms.g.utils.TypeNode.clazz` @type ^`java.lang.Class` @kind object;
  #L47b4cc.  if v1 != 0 then goto L47b4da;
  #L47b4d0.  call temp:= `createTypeNode`(v2, v2, v2) @signature `Lorg/xms/g/utils/TypeNode;.createTypeNode:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)Lorg/xms/g/utils/TypeNode;` @kind static;
  #L47b4d6.  v7:= temp @kind object;
  #L47b4d8.  return v7 @kind object;
  #L47b4da.  call temp:= `getTypeParameters`(v1) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L47b4e0.  v1:= temp @kind object;
  #L47b4e2.  v3:= 0I;
  #L47b4e4.  v4:= length @variable v1;
  #L47b4e6.  if v3 >= v4 then goto L47b52a;
  #L47b4ea.  v4:= v1[v3] @kind object;
  #L47b4ee.  call temp:= `getName`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L47b4f4.  v4:= temp @kind object;
  #L47b4f6.  call temp:= `getName`(v7) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L47b4fc.  v5:= temp @kind object;
  #L47b4fe.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L47b504.  v4:= temp;
  #L47b506.  if v4 == 0 then goto L47b524;
  #L47b50a.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L47b510.  v7:= temp @kind object;
  #L47b512.  v7:= v7[v3] @kind object;
  #L47b516.  v0:= v6.`org.xms.g.utils.TypeNode.owner` @type ^`org.xms.g.utils.TypeNode` @kind object;
  #L47b51a.  call temp:= `createTypeNode`(v7, v2, v0) @signature `Lorg/xms/g/utils/TypeNode;.createTypeNode:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)Lorg/xms/g/utils/TypeNode;` @kind static;
  #L47b520.  v7:= temp @kind object;
  #L47b522.  return v7 @kind object;
  #L47b524.  v3:= v3 + 1;
  #L47b528.  goto L47b4e4;
  #L47b52a.  call temp:= `getOwnerType`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L47b530.  v0:= temp @kind object;
  #L47b532.  if v0 == 0 then goto L47b54c;
  #L47b536.  v1:= v6.`org.xms.g.utils.TypeNode.owner` @type ^`org.xms.g.utils.TypeNode` @kind object;
  #L47b53a.  call temp:= `createTypeNode`(v0, v2, v1) @signature `Lorg/xms/g/utils/TypeNode;.createTypeNode:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)Lorg/xms/g/utils/TypeNode;` @kind static;
  #L47b540.  v0:= temp @kind object;
  #L47b542.  call temp:= `handleVariable`(v0, v7) @signature `Lorg/xms/g/utils/TypeNode;.handleVariable:(Ljava/lang/reflect/TypeVariable;)Lorg/xms/g/utils/TypeNode;` @kind direct;
  #L47b548.  v7:= temp @kind object;
  #L47b54a.  return v7 @kind object;
  #L47b54c.  v0:= v6.`org.xms.g.utils.TypeNode.owner` @type ^`org.xms.g.utils.TypeNode` @kind object;
  #L47b550.  if v0 == 0 then goto L47b55e;
  #L47b554.  call temp:= `handleVariable`(v0, v7) @signature `Lorg/xms/g/utils/TypeNode;.handleVariable:(Ljava/lang/reflect/TypeVariable;)Lorg/xms/g/utils/TypeNode;` @kind direct;
  #L47b55a.  v7:= temp @kind object;
  #L47b55c.  return v7 @kind object;
  #L47b55e.  call temp:= `createTypeNode`(v2, v2, v2) @signature `Lorg/xms/g/utils/TypeNode;.createTypeNode:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)Lorg/xms/g/utils/TypeNode;` @kind static;
  #L47b564.  v7:= temp @kind object;
  #L47b566.  return v7 @kind object;
}
procedure `boolean` `isArray`(`org.xms.g.utils.TypeNode` v2 @kind this) @signature `Lorg/xms/g/utils/TypeNode;.isArray:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L47b108.  v0:= v2.`org.xms.g.utils.TypeNode.type` @type ^`java.lang.reflect.Type` @kind object;
  #L47b10c.  if v0 != 0 then goto L47b114;
  #L47b110.  v0:= 0I;
  #L47b112.  return v0;
  #L47b114.  v1:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L47b118.  if v1 == 0 then goto L47b12a;
  #L47b11c.  v0:= (`java.lang.Class`) v0 @kind object;
  #L47b120.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L47b126.  v0:= temp;
  #L47b128.  return v0;
  #L47b12a.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L47b12e.  if v0 == 0 then goto L47b136;
  #L47b132.  v0:= 1I;
  #L47b134.  return v0;
  #L47b136.  call temp:= `handleSpecialType`(v2) @signature `Lorg/xms/g/utils/TypeNode;.handleSpecialType:()Lorg/xms/g/utils/TypeNode;` @kind direct;
  #L47b13c.  v0:= temp @kind object;
  #L47b13e.  call temp:= `isArray`(v0) @signature `Lorg/xms/g/utils/TypeNode;.isArray:()Z` @kind direct;
  #L47b144.  v0:= temp;
  #L47b146.  return v0;
}
procedure `java.lang.Class` `getClazz`(`org.xms.g.utils.TypeNode` v1 @kind this) @signature `Lorg/xms/g/utils/TypeNode;.getClazz:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47b1c8.  v0:= v1.`org.xms.g.utils.TypeNode.clazz` @type ^`java.lang.Class` @kind object;
  #L47b1cc.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getType`(`org.xms.g.utils.TypeNode` v1 @kind this) @signature `Lorg/xms/g/utils/TypeNode;.getType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47b210.  v0:= v1.`org.xms.g.utils.TypeNode.type` @type ^`java.lang.reflect.Type` @kind object;
  #L47b214.  return v0 @kind object;
}
procedure `org.xms.g.utils.TypeNode` `resolveComponentType`(`org.xms.g.utils.TypeNode` v3 @kind this) @signature `Lorg/xms/g/utils/TypeNode;.resolveComponentType:()Lorg/xms/g/utils/TypeNode;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47b578.  v0:= v3.`org.xms.g.utils.TypeNode.type` @type ^`java.lang.reflect.Type` @kind object;
  #L47b57c.  v1:= 0I;
  #L47b57e.  if v0 != 0 then goto L47b584;
  #L47b582.  return v1 @kind object;
  #L47b584.  v2:= v3.`org.xms.g.utils.TypeNode.componentType` @type ^`org.xms.g.utils.TypeNode` @kind object;
  #L47b588.  if v2 == 0 then goto L47b58e;
  #L47b58c.  return v2 @kind object;
  #L47b58e.  v2:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L47b592.  if v2 == 0 then goto L47b5b0;
  #L47b596.  v0:= (`java.lang.Class`) v0 @kind object;
  #L47b59a.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L47b5a0.  v0:= temp @kind object;
  #L47b5a2.  v2:= v3.`org.xms.g.utils.TypeNode.owner` @type ^`org.xms.g.utils.TypeNode` @kind object;
  #L47b5a6.  call temp:= `createTypeNode`(v0, v1, v2) @signature `Lorg/xms/g/utils/TypeNode;.createTypeNode:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)Lorg/xms/g/utils/TypeNode;` @kind static;
  #L47b5ac.  v0:= temp @kind object;
  #L47b5ae.  return v0 @kind object;
  #L47b5b0.  v2:= instanceof @variable v0 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L47b5b4.  if v2 == 0 then goto L47b5d2;
  #L47b5b8.  v0:= (`java.lang.reflect.GenericArrayType`) v0 @kind object;
  #L47b5bc.  call temp:= `getGenericComponentType`(v0) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L47b5c2.  v0:= temp @kind object;
  #L47b5c4.  v2:= v3.`org.xms.g.utils.TypeNode.owner` @type ^`org.xms.g.utils.TypeNode` @kind object;
  #L47b5c8.  call temp:= `createTypeNode`(v0, v1, v2) @signature `Lorg/xms/g/utils/TypeNode;.createTypeNode:(Ljava/lang/reflect/Type;Lorg/xms/g/utils/Parameter;Lorg/xms/g/utils/TypeNode;)Lorg/xms/g/utils/TypeNode;` @kind static;
  #L47b5ce.  v0:= temp @kind object;
  #L47b5d0.  return v0 @kind object;
  #L47b5d2.  call temp:= `handleSpecialType`(v3) @signature `Lorg/xms/g/utils/TypeNode;.handleSpecialType:()Lorg/xms/g/utils/TypeNode;` @kind direct;
  #L47b5d8.  v0:= temp @kind object;
  #L47b5da.  call temp:= `resolveComponentType`(v0) @signature `Lorg/xms/g/utils/TypeNode;.resolveComponentType:()Lorg/xms/g/utils/TypeNode;` @kind virtual;
  #L47b5e0.  v0:= temp @kind object;
  #L47b5e2.  return v0 @kind object;
}
