record `okio.SegmentedByteString` @kind class @AccessFlag PUBLIC_FINAL extends `okio.ByteString` @kind class {
  `byte`[][] `okio.SegmentedByteString.d` @AccessFlag PRIVATE_FINAL_TRANSIENT;
  `int`[] `okio.SegmentedByteString.e` @AccessFlag PRIVATE_FINAL_TRANSIENT;
}
procedure `void` `<init>`(`okio.SegmentedByteString` v1 @kind this, `byte`[][] v2 @kind object, `int`[] v3 @kind object) @signature `Lokio/SegmentedByteString;.<init>:([[B[I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d6ee4.  v0:= "segments" @kind object;
  #L1d6ee8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d6eee.  v0:= "directory" @kind object;
  #L1d6ef2.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d6ef8.  v0:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L1d6efc.  call temp:= `getData$okio`(v0) @signature `Lokio/ByteString;.getData$okio:()[B` @kind virtual;
  #L1d6f02.  v0:= temp @kind object;
  #L1d6f04.  call `<init>`(v1, v0) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L1d6f0a.  v1.`okio.SegmentedByteString.d` @type ^`byte`[][] := v2 @kind object;
  #L1d6f0e.  v1.`okio.SegmentedByteString.e` @type ^`int`[] := v3 @kind object;
  #L1d6f12.  return @kind void;
}
procedure `okio.ByteString` `a`(`okio.SegmentedByteString` v2 @kind this) @signature `Lokio/SegmentedByteString;.a:()Lokio/ByteString;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1d6ec0.  v0:= new `okio.ByteString`;
  #L1d6ec4.  call temp:= `toByteArray`(v2) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @kind virtual;
  #L1d6eca.  v1:= temp @kind object;
  #L1d6ecc.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L1d6ed2.  return v0 @kind object;
}
procedure `java.lang.Object` `writeReplace`(`okio.SegmentedByteString` v2 @kind this) @signature `Lokio/SegmentedByteString;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1d6a08.  call temp:= `a`(v2) @signature `Lokio/SegmentedByteString;.a:()Lokio/ByteString;` @kind direct;
  #L1d6a0e.  v0:= temp @kind object;
  #L1d6a10.  if v0 == 0 then goto L1d6a16;
  #L1d6a14.  return v0 @kind object;
  #L1d6a16.  v0:= new `java.lang.NullPointerException`;
  #L1d6a1a.  v1:= "null cannot be cast to non-null type java.lang.Object" @kind object;
  #L1d6a1e.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d6a24.  throw v0;
}
procedure `java.nio.ByteBuffer` `asByteBuffer`(`okio.SegmentedByteString` v2 @kind this) @signature `Lokio/SegmentedByteString;.asByteBuffer:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d6af4.  call temp:= `toByteArray`(v2) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @kind virtual;
  #L1d6afa.  v0:= temp @kind object;
  #L1d6afc.  call temp:= `wrap`(v0) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L1d6b02.  v0:= temp @kind object;
  #L1d6b04.  call temp:= `asReadOnlyBuffer`(v0) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L1d6b0a.  v0:= temp @kind object;
  #L1d6b0c.  v1:= "ByteBuffer.wrap(toByteArray()).asReadOnlyBuffer()" @kind object;
  #L1d6b10.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d6b16.  return v0 @kind object;
}
procedure `java.lang.String` `base64`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.base64:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d6a38.  call temp:= `a`(v1) @signature `Lokio/SegmentedByteString;.a:()Lokio/ByteString;` @kind direct;
  #L1d6a3e.  v0:= temp @kind object;
  #L1d6a40.  call temp:= `base64`(v0) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L1d6a46.  v0:= temp @kind object;
  #L1d6a48.  return v0 @kind object;
}
procedure `java.lang.String` `base64Url`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.base64Url:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d6a5c.  call temp:= `a`(v1) @signature `Lokio/SegmentedByteString;.a:()Lokio/ByteString;` @kind direct;
  #L1d6a62.  v0:= temp @kind object;
  #L1d6a64.  call temp:= `base64Url`(v0) @signature `Lokio/ByteString;.base64Url:()Ljava/lang/String;` @kind virtual;
  #L1d6a6a.  v0:= temp @kind object;
  #L1d6a6c.  return v0 @kind object;
}
procedure `okio.ByteString` `digest$okio`(`okio.SegmentedByteString` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Lokio/SegmentedByteString;.digest$okio:(Ljava/lang/String;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1d6b28.  v0:= "algorithm" @kind object;
  #L1d6b2c.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d6b32.  call temp:= `getInstance`(v7) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L1d6b38.  v7:= temp @kind object;
  #L1d6b3a.  call temp:= `getSegments$okio`(v6) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d6b40.  v0:= temp @kind object;
  #L1d6b42.  v0:= length @variable v0;
  #L1d6b44.  v1:= 0I;
  #L1d6b46.  v2:= 0I;
  #L1d6b48.  if v1 >= v0 then goto L1d6b86;
  #L1d6b4c.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6b52.  v3:= temp @kind object;
  #L1d6b54.  v4:= v0 + v1 @kind int;
  #L1d6b58.  v3:= v3[v4];
  #L1d6b5c.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6b62.  v4:= temp @kind object;
  #L1d6b64.  v4:= v4[v1];
  #L1d6b68.  call temp:= `getSegments$okio`(v6) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d6b6e.  v5:= temp @kind object;
  #L1d6b70.  v5:= v5[v1] @kind object;
  #L1d6b74.  v2:= v4 - v2 @kind int;
  #L1d6b78.  call `update`(v7, v5, v3, v2) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L1d6b7e.  v1:= v1 + 1;
  #L1d6b82.  v2:= v4;
  #L1d6b84.  goto L1d6b48;
  #L1d6b86.  call temp:= `digest`(v7) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L1d6b8c.  v7:= temp @kind object;
  #L1d6b8e.  v0:= new `okio.ByteString`;
  #L1d6b92.  v1:= "digestBytes" @kind object;
  #L1d6b96.  call `checkNotNullExpressionValue`(v7, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d6b9c.  call `<init>`(v0, v7) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L1d6ba2.  return v0 @kind object;
}
procedure `boolean` `equals`(`okio.SegmentedByteString` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lokio/SegmentedByteString;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d65e4.  v0:= 1I;
  #L1d65e6.  v1:= 0I;
  #L1d65e8.  if v5 != v4 then goto L1d65ee;
  #L1d65ec.  goto L1d6626;
  #L1d65ee.  v2:= instanceof @variable v5 @type ^`okio.ByteString` @kind boolean;
  #L1d65f2.  if v2 == 0 then goto L1d6624;
  #L1d65f6.  v5:= (`okio.ByteString`) v5 @kind object;
  #L1d65fa.  call temp:= `size`(v5) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1d6600.  v2:= temp;
  #L1d6602.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1d6608.  v3:= temp;
  #L1d660a.  if v2 != v3 then goto L1d6624;
  #L1d660e.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1d6614.  v2:= temp;
  #L1d6616.  call temp:= `rangeEquals`(v4, v1, v5, v1, v2) @signature `Lokio/SegmentedByteString;.rangeEquals:(ILokio/ByteString;II)Z` @kind virtual;
  #L1d661c.  v5:= temp;
  #L1d661e.  if v5 == 0 then goto L1d6624;
  #L1d6622.  goto L1d6626;
  #L1d6624.  v0:= 0I;
  #L1d6626.  return v0;
}
procedure `int`[] `getDirectory$okio`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d69f0.  v0:= v1.`okio.SegmentedByteString.e` @type ^`int`[] @kind object;
  #L1d69f4.  return v0 @kind object;
}
procedure `byte`[][] `getSegments$okio`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d68cc.  v0:= v1.`okio.SegmentedByteString.d` @type ^`byte`[][] @kind object;
  #L1d68d0.  return v0 @kind object;
}
procedure `int` `getSize$okio`(`okio.SegmentedByteString` v2 @kind this) @signature `Lokio/SegmentedByteString;.getSize$okio:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d68e4.  call temp:= `getDirectory$okio`(v2) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d68ea.  v0:= temp @kind object;
  #L1d68ec.  call temp:= `getSegments$okio`(v2) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d68f2.  v1:= temp @kind object;
  #L1d68f4.  v1:= length @variable v1;
  #L1d68f6.  v1:= v1 + -1;
  #L1d68fa.  v0:= v0[v1];
  #L1d68fe.  return v0;
}
procedure `int` `hashCode`(`okio.SegmentedByteString` v8 @kind this) @signature `Lokio/SegmentedByteString;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1d6910.  call temp:= `getHashCode$okio`(v8) @signature `Lokio/ByteString;.getHashCode$okio:()I` @kind virtual;
  #L1d6916.  v0:= temp;
  #L1d6918.  if v0 == 0 then goto L1d691e;
  #L1d691c.  goto L1d6984;
  #L1d691e.  call temp:= `getSegments$okio`(v8) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d6924.  v0:= temp @kind object;
  #L1d6926.  v0:= length @variable v0;
  #L1d6928.  v1:= 0I;
  #L1d692a.  v2:= 1I;
  #L1d692c.  v3:= 0I;
  #L1d692e.  if v1 >= v0 then goto L1d697c;
  #L1d6932.  call temp:= `getDirectory$okio`(v8) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6938.  v4:= temp @kind object;
  #L1d693a.  v5:= v0 + v1 @kind int;
  #L1d693e.  v4:= v4[v5];
  #L1d6942.  call temp:= `getDirectory$okio`(v8) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6948.  v5:= temp @kind object;
  #L1d694a.  v5:= v5[v1];
  #L1d694e.  call temp:= `getSegments$okio`(v8) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d6954.  v6:= temp @kind object;
  #L1d6956.  v6:= v6[v1] @kind object;
  #L1d695a.  v3:= v5 - v3 @kind int;
  #L1d695e.  v3:= v3 + v4 @kind int;
  #L1d6960.  if v4 >= v3 then goto L1d6974;
  #L1d6964.  v2:= v2 * 31;
  #L1d6968.  v7:= v6[v4] @kind byte;
  #L1d696c.  v2:= v2 + v7 @kind int;
  #L1d696e.  v4:= v4 + 1;
  #L1d6972.  goto L1d6960;
  #L1d6974.  v1:= v1 + 1;
  #L1d6978.  v3:= v5;
  #L1d697a.  goto L1d692e;
  #L1d697c.  call `setHashCode$okio`(v8, v2) @signature `Lokio/ByteString;.setHashCode$okio:(I)V` @kind virtual;
  #L1d6982.  v0:= v2;
  #L1d6984.  return v0;
}
procedure `java.lang.String` `hex`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.hex:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d6a80.  call temp:= `a`(v1) @signature `Lokio/SegmentedByteString;.a:()Lokio/ByteString;` @kind direct;
  #L1d6a86.  v0:= temp @kind object;
  #L1d6a88.  call temp:= `hex`(v0) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L1d6a8e.  v0:= temp @kind object;
  #L1d6a90.  return v0 @kind object;
}
procedure `okio.ByteString` `hmac$okio`(`okio.SegmentedByteString` v5 @kind this, `java.lang.String` v6 @kind object, `okio.ByteString` v7 @kind object) @signature `Lokio/SegmentedByteString;.hmac$okio:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d6bb4.  v0:= "algorithm" @kind object;
  #L1d6bb8.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d6bbe.  v0:= "key" @kind object;
  #L1d6bc2.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d6bc8.  call temp:= `getInstance`(v6) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L1d6bce.  v0:= temp @kind object;
  #L1d6bd0.  v1:= new `javax.crypto.spec.SecretKeySpec`;
  #L1d6bd4.  call temp:= `toByteArray`(v7) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L1d6bda.  v7:= temp @kind object;
  #L1d6bdc.  call `<init>`(v1, v7, v6) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L1d6be2.  call `init`(v0, v1) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L1d6be8.  call temp:= `getSegments$okio`(v5) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d6bee.  v6:= temp @kind object;
  #L1d6bf0.  v6:= length @variable v6;
  #L1d6bf2.  v7:= 0I;
  #L1d6bf4.  v1:= 0I;
  #L1d6bf6.  if v7 >= v6 then goto L1d6c34;
  #L1d6bfa.  call temp:= `getDirectory$okio`(v5) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6c00.  v2:= temp @kind object;
  #L1d6c02.  v3:= v6 + v7 @kind int;
  #L1d6c06.  v2:= v2[v3];
  #L1d6c0a.  call temp:= `getDirectory$okio`(v5) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6c10.  v3:= temp @kind object;
  #L1d6c12.  v3:= v3[v7];
  #L1d6c16.  call temp:= `getSegments$okio`(v5) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d6c1c.  v4:= temp @kind object;
  #L1d6c1e.  v4:= v4[v7] @kind object;
  #L1d6c22.  v1:= v3 - v1 @kind int;
  #L1d6c26.  call `update`(v0, v4, v2, v1) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L1d6c2c.  v7:= v7 + 1;
  #L1d6c30.  v1:= v3;
  #L1d6c32.  goto L1d6bf6;
  #L1d6c34.  v6:= new `okio.ByteString`;
  #L1d6c38.  call temp:= `doFinal`(v0) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L1d6c3e.  v7:= temp @kind object;
  #L1d6c40.  v0:= "mac.doFinal()" @kind object;
  #L1d6c44.  call `checkNotNullExpressionValue`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d6c4a.  call `<init>`(v6, v7) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L1d6c50.  return v6 @kind object;
  #L1d6c52.  v6:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L1d6c54.  v7:= new `java.lang.IllegalArgumentException`;
  #L1d6c58.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1d6c5e.  throw v7;
  catch `java.security.InvalidKeyException` @[L1d6bc8..L1d6c50] goto L1d6c52;
}
procedure `int` `indexOf`(`okio.SegmentedByteString` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Lokio/SegmentedByteString;.indexOf:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d6998.  v0:= "other" @kind object;
  #L1d699c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d69a2.  call temp:= `a`(v1) @signature `Lokio/SegmentedByteString;.a:()Lokio/ByteString;` @kind direct;
  #L1d69a8.  v0:= temp @kind object;
  #L1d69aa.  call temp:= `indexOf`(v0, v2, v3) @signature `Lokio/ByteString;.indexOf:([BI)I` @kind virtual;
  #L1d69b0.  v2:= temp;
  #L1d69b2.  return v2;
}
procedure `byte`[] `internalArray$okio`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.internalArray$okio:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d683c.  call temp:= `toByteArray`(v1) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @kind virtual;
  #L1d6842.  v0:= temp @kind object;
  #L1d6844.  return v0 @kind object;
}
procedure `byte` `internalGet$okio`(`okio.SegmentedByteString` v7 @kind this, `int` v8 ) @signature `Lokio/SegmentedByteString;.internalGet$okio:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1d67b4.  call temp:= `getDirectory$okio`(v7) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d67ba.  v0:= temp @kind object;
  #L1d67bc.  call temp:= `getSegments$okio`(v7) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d67c2.  v1:= temp @kind object;
  #L1d67c4.  v1:= length @variable v1;
  #L1d67c6.  v1:= v1 + -1;
  #L1d67ca.  v0:= v0[v1];
  #L1d67ce.  v1:= (`long`) v0 @kind i2l;
  #L1d67d0.  v3:= (`long`) v8 @kind i2l;
  #L1d67d2.  v5:= 1L;
  #L1d67d6.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1d67dc.  call temp:= `segment`(v7, v8) @signature `Lokio/internal/SegmentedByteStringKt;.segment:(Lokio/SegmentedByteString;I)I` @kind static;
  #L1d67e2.  v0:= temp;
  #L1d67e4.  if v0 != 0 then goto L1d67ec;
  #L1d67e8.  v1:= 0I;
  #L1d67ea.  goto L1d67fc;
  #L1d67ec.  call temp:= `getDirectory$okio`(v7) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d67f2.  v1:= temp @kind object;
  #L1d67f4.  v2:= v0 + -1;
  #L1d67f8.  v1:= v1[v2];
  #L1d67fc.  call temp:= `getDirectory$okio`(v7) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6802.  v2:= temp @kind object;
  #L1d6804.  call temp:= `getSegments$okio`(v7) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d680a.  v3:= temp @kind object;
  #L1d680c.  v3:= length @variable v3;
  #L1d680e.  v3:= v3 + v0 @kind int;
  #L1d6810.  v2:= v2[v3];
  #L1d6814.  call temp:= `getSegments$okio`(v7) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d681a.  v3:= temp @kind object;
  #L1d681c.  v0:= v3[v0] @kind object;
  #L1d6820.  v8:= v8 - v1 @kind int;
  #L1d6822.  v8:= v8 + v2 @kind int;
  #L1d6824.  v8:= v0[v8] @kind byte;
  #L1d6828.  return v8;
}
procedure `int` `lastIndexOf`(`okio.SegmentedByteString` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Lokio/SegmentedByteString;.lastIndexOf:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d69c4.  v0:= "other" @kind object;
  #L1d69c8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d69ce.  call temp:= `a`(v1) @signature `Lokio/SegmentedByteString;.a:()Lokio/ByteString;` @kind direct;
  #L1d69d4.  v0:= temp @kind object;
  #L1d69d6.  call temp:= `lastIndexOf`(v0, v2, v3) @signature `Lokio/ByteString;.lastIndexOf:([BI)I` @kind virtual;
  #L1d69dc.  v2:= temp;
  #L1d69de.  return v2;
}
procedure `boolean` `rangeEquals`(`okio.SegmentedByteString` v6 @kind this, `int` v7 , `okio.ByteString` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/SegmentedByteString;.rangeEquals:(ILokio/ByteString;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1d66fc.  v0:= "other" @kind object;
  #L1d6700.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d6706.  v0:= 0I;
  #L1d6708.  if v7 < 0 then goto L1d67a0;
  #L1d670c.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1d6712.  v1:= temp;
  #L1d6714.  v1:= v1 - v10 @kind int;
  #L1d6716.  if v7 <= v1 then goto L1d671c;
  #L1d671a.  goto L1d67a0;
  #L1d671c.  v10:= v10 + v7 @kind int;
  #L1d671e.  call temp:= `segment`(v6, v7) @signature `Lokio/internal/SegmentedByteStringKt;.segment:(Lokio/SegmentedByteString;I)I` @kind static;
  #L1d6724.  v1:= temp;
  #L1d6726.  if v7 >= v10 then goto L1d679e;
  #L1d672a.  if v1 != 0 then goto L1d6732;
  #L1d672e.  v2:= 0I;
  #L1d6730.  goto L1d6742;
  #L1d6732.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6738.  v2:= temp @kind object;
  #L1d673a.  v3:= v1 + -1;
  #L1d673e.  v2:= v2[v3];
  #L1d6742.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6748.  v3:= temp @kind object;
  #L1d674a.  v3:= v3[v1];
  #L1d674e.  v3:= v3 - v2 @kind int;
  #L1d6750.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6756.  v4:= temp @kind object;
  #L1d6758.  call temp:= `getSegments$okio`(v6) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d675e.  v5:= temp @kind object;
  #L1d6760.  v5:= length @variable v5;
  #L1d6762.  v5:= v5 + v1 @kind int;
  #L1d6764.  v4:= v4[v5];
  #L1d6768.  v3:= v3 + v2 @kind int;
  #L1d676a.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d6770.  v3:= temp;
  #L1d6772.  v3:= v3 - v7 @kind int;
  #L1d6774.  v2:= v7 - v2 @kind int;
  #L1d6778.  v4:= v4 + v2 @kind int;
  #L1d677a.  call temp:= `getSegments$okio`(v6) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d6780.  v2:= temp @kind object;
  #L1d6782.  v2:= v2[v1] @kind object;
  #L1d6786.  call temp:= `rangeEquals`(v8, v9, v2, v4, v3) @signature `Lokio/ByteString;.rangeEquals:(I[BII)Z` @kind virtual;
  #L1d678c.  v2:= temp;
  #L1d678e.  if v2 != 0 then goto L1d6794;
  #L1d6792.  goto L1d67a0;
  #L1d6794.  v9:= v9 + v3 @kind int;
  #L1d6796.  v7:= v7 + v3 @kind int;
  #L1d6798.  v1:= v1 + 1;
  #L1d679c.  goto L1d6726;
  #L1d679e.  v0:= 1I;
  #L1d67a0.  return v0;
}
procedure `boolean` `rangeEquals`(`okio.SegmentedByteString` v6 @kind this, `int` v7 , `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/SegmentedByteString;.rangeEquals:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1d6638.  v0:= "other" @kind object;
  #L1d663c.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d6642.  v0:= 0I;
  #L1d6644.  if v7 < 0 then goto L1d66e8;
  #L1d6648.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1d664e.  v1:= temp;
  #L1d6650.  v1:= v1 - v10 @kind int;
  #L1d6652.  if v7 > v1 then goto L1d66e8;
  #L1d6656.  if v9 < 0 then goto L1d66e8;
  #L1d665a.  v1:= length @variable v8;
  #L1d665c.  v1:= v1 - v10 @kind int;
  #L1d665e.  if v9 <= v1 then goto L1d6664;
  #L1d6662.  goto L1d66e8;
  #L1d6664.  v10:= v10 + v7 @kind int;
  #L1d6666.  call temp:= `segment`(v6, v7) @signature `Lokio/internal/SegmentedByteStringKt;.segment:(Lokio/SegmentedByteString;I)I` @kind static;
  #L1d666c.  v1:= temp;
  #L1d666e.  if v7 >= v10 then goto L1d66e6;
  #L1d6672.  if v1 != 0 then goto L1d667a;
  #L1d6676.  v2:= 0I;
  #L1d6678.  goto L1d668a;
  #L1d667a.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6680.  v2:= temp @kind object;
  #L1d6682.  v3:= v1 + -1;
  #L1d6686.  v2:= v2[v3];
  #L1d668a.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6690.  v3:= temp @kind object;
  #L1d6692.  v3:= v3[v1];
  #L1d6696.  v3:= v3 - v2 @kind int;
  #L1d6698.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d669e.  v4:= temp @kind object;
  #L1d66a0.  call temp:= `getSegments$okio`(v6) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d66a6.  v5:= temp @kind object;
  #L1d66a8.  v5:= length @variable v5;
  #L1d66aa.  v5:= v5 + v1 @kind int;
  #L1d66ac.  v4:= v4[v5];
  #L1d66b0.  v3:= v3 + v2 @kind int;
  #L1d66b2.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d66b8.  v3:= temp;
  #L1d66ba.  v3:= v3 - v7 @kind int;
  #L1d66bc.  v2:= v7 - v2 @kind int;
  #L1d66c0.  v4:= v4 + v2 @kind int;
  #L1d66c2.  call temp:= `getSegments$okio`(v6) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d66c8.  v2:= temp @kind object;
  #L1d66ca.  v2:= v2[v1] @kind object;
  #L1d66ce.  call temp:= `arrayRangeEquals`(v2, v4, v8, v9, v3) @signature `Lokio/-Util;.arrayRangeEquals:([BI[BII)Z` @kind static;
  #L1d66d4.  v2:= temp;
  #L1d66d6.  if v2 != 0 then goto L1d66dc;
  #L1d66da.  goto L1d66e8;
  #L1d66dc.  v9:= v9 + v3 @kind int;
  #L1d66de.  v7:= v7 + v3 @kind int;
  #L1d66e0.  v1:= v1 + 1;
  #L1d66e4.  goto L1d666e;
  #L1d66e6.  v0:= 1I;
  #L1d66e8.  return v0;
}
procedure `java.lang.String` `string`(`okio.SegmentedByteString` v1 @kind this, `java.nio.charset.Charset` v2 @kind object) @signature `Lokio/SegmentedByteString;.string:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d6aa4.  v0:= "charset" @kind object;
  #L1d6aa8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d6aae.  call temp:= `a`(v1) @signature `Lokio/SegmentedByteString;.a:()Lokio/ByteString;` @kind direct;
  #L1d6ab4.  v0:= temp @kind object;
  #L1d6ab6.  call temp:= `string`(v0, v2) @signature `Lokio/ByteString;.string:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L1d6abc.  v2:= temp @kind object;
  #L1d6abe.  return v2 @kind object;
}
procedure `okio.ByteString` `substring`(`okio.SegmentedByteString` v11 @kind this, `int` v12 , `int` v13 ) @signature `Lokio/SegmentedByteString;.substring:(II)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1d6c80.  v0:= 0I;
  #L1d6c82.  v1:= 1I;
  #L1d6c84.  if v12 < 0 then goto L1d6c8c;
  #L1d6c88.  v2:= 1I;
  #L1d6c8a.  goto L1d6c8e;
  #L1d6c8c.  v2:= 0I;
  #L1d6c8e.  if v2 == 0 then goto L1d6e26;
  #L1d6c92.  call temp:= `size`(v11) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1d6c98.  v2:= temp;
  #L1d6c9a.  if v13 > v2 then goto L1d6ca2;
  #L1d6c9e.  v2:= 1I;
  #L1d6ca0.  goto L1d6ca4;
  #L1d6ca2.  v2:= 0I;
  #L1d6ca4.  v3:= "endIndex=" @kind object;
  #L1d6ca8.  if v2 == 0 then goto L1d6dd2;
  #L1d6cac.  v2:= v13 - v12 @kind int;
  #L1d6cb0.  if v2 < 0 then goto L1d6cb8;
  #L1d6cb4.  v4:= 1I;
  #L1d6cb6.  goto L1d6cba;
  #L1d6cb8.  v4:= 0I;
  #L1d6cba.  if v4 == 0 then goto L1d6d90;
  #L1d6cbe.  if v12 != 0 then goto L1d6cd2;
  #L1d6cc2.  call temp:= `size`(v11) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1d6cc8.  v3:= temp;
  #L1d6cca.  if v13 != v3 then goto L1d6cd2;
  #L1d6cce.  v12:= v11 @kind object;
  #L1d6cd0.  goto L1d6d8e;
  #L1d6cd2.  if v12 != v13 then goto L1d6cdc;
  #L1d6cd6.  v12:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L1d6cda.  goto L1d6d8e;
  #L1d6cdc.  call temp:= `segment`(v11, v12) @signature `Lokio/internal/SegmentedByteStringKt;.segment:(Lokio/SegmentedByteString;I)I` @kind static;
  #L1d6ce2.  v3:= temp;
  #L1d6ce4.  v13:= v13 - v1 @kind int;
  #L1d6ce6.  call temp:= `segment`(v11, v13) @signature `Lokio/internal/SegmentedByteStringKt;.segment:(Lokio/SegmentedByteString;I)I` @kind static;
  #L1d6cec.  v13:= temp;
  #L1d6cee.  call temp:= `getSegments$okio`(v11) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d6cf4.  v4:= temp @kind object;
  #L1d6cf6.  v5:= v13 + 1;
  #L1d6cfa.  call temp:= `copyOfRange`(v4, v3, v5) @signature `Lkotlin/collections/ArraysKt;.copyOfRange:([Ljava/lang/Object;II)[Ljava/lang/Object;` @kind static;
  #L1d6d00.  v4:= temp @kind object;
  #L1d6d02.  v4:= (`byte`[][]) v4 @kind object;
  #L1d6d06.  v5:= length @variable v4;
  #L1d6d08.  v5:= v5 * 2;
  #L1d6d0c.  v5:= new `int`[v5];
  #L1d6d10.  if v3 > v13 then goto L1d6d62;
  #L1d6d14.  v7:= v3;
  #L1d6d16.  v6:= 0I;
  #L1d6d18.  call temp:= `getDirectory$okio`(v11) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6d1e.  v8:= temp @kind object;
  #L1d6d20.  v8:= v8[v7];
  #L1d6d24.  v8:= v8 - v12 @kind int;
  #L1d6d26.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d6d2c.  v8:= temp;
  #L1d6d2e.  v5[v6]:= v8;
  #L1d6d32.  v8:= v6 + 1;
  #L1d6d36.  v9:= length @variable v4;
  #L1d6d38.  v6:= v6 + v9 @kind int;
  #L1d6d3a.  call temp:= `getDirectory$okio`(v11) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6d40.  v9:= temp @kind object;
  #L1d6d42.  call temp:= `getSegments$okio`(v11) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d6d48.  v10:= temp @kind object;
  #L1d6d4a.  v10:= length @variable v10;
  #L1d6d4c.  v10:= v10 + v7 @kind int;
  #L1d6d4e.  v9:= v9[v10];
  #L1d6d52.  v5[v6]:= v9;
  #L1d6d56.  if v7 == v13 then goto L1d6d62;
  #L1d6d5a.  v7:= v7 + 1;
  #L1d6d5e.  v6:= v8;
  #L1d6d60.  goto L1d6d18;
  #L1d6d62.  if v3 != 0 then goto L1d6d68;
  #L1d6d66.  goto L1d6d76;
  #L1d6d68.  call temp:= `getDirectory$okio`(v11) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6d6e.  v13:= temp @kind object;
  #L1d6d70.  v3:= v3 - v1 @kind int;
  #L1d6d72.  v0:= v13[v3];
  #L1d6d76.  v13:= length @variable v4;
  #L1d6d78.  v1:= v5[v13];
  #L1d6d7c.  v12:= v12 - v0 @kind int;
  #L1d6d7e.  v1:= v1 + v12 @kind int;
  #L1d6d80.  v5[v13]:= v1;
  #L1d6d84.  v12:= new `okio.SegmentedByteString`;
  #L1d6d88.  call `<init>`(v12, v4, v5) @signature `Lokio/SegmentedByteString;.<init>:([[B[I)V` @kind direct;
  #L1d6d8e.  return v12 @kind object;
  #L1d6d90.  v0:= new `java.lang.StringBuilder`;
  #L1d6d94.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d6d9a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6da0.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6da6.  v13:= " < beginIndex=" @kind object;
  #L1d6daa.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6db0.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6db6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d6dbc.  v12:= temp @kind object;
  #L1d6dbe.  v13:= new `java.lang.IllegalArgumentException`;
  #L1d6dc2.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d6dc8.  v12:= temp @kind object;
  #L1d6dca.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d6dd0.  throw v13;
  #L1d6dd2.  v12:= new `java.lang.StringBuilder`;
  #L1d6dd6.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d6ddc.  call temp:= `append`(v12, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6de2.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6de8.  v13:= " > length(" @kind object;
  #L1d6dec.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6df2.  call temp:= `size`(v11) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1d6df8.  v13:= temp;
  #L1d6dfa.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6e00.  v13:= 41I;
  #L1d6e04.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6e0a.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d6e10.  v12:= temp @kind object;
  #L1d6e12.  v13:= new `java.lang.IllegalArgumentException`;
  #L1d6e16.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d6e1c.  v12:= temp @kind object;
  #L1d6e1e.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d6e24.  throw v13;
  #L1d6e26.  v13:= new `java.lang.StringBuilder`;
  #L1d6e2a.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d6e30.  v0:= "beginIndex=" @kind object;
  #L1d6e34.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6e3a.  call temp:= `append`(v13, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6e40.  v12:= " < 0" @kind object;
  #L1d6e44.  call temp:= `append`(v13, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d6e4a.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d6e50.  v12:= temp @kind object;
  #L1d6e52.  v13:= new `java.lang.IllegalArgumentException`;
  #L1d6e56.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d6e5c.  v12:= temp @kind object;
  #L1d6e5e.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d6e64.  throw v13;
}
procedure `okio.ByteString` `toAsciiLowercase`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.toAsciiLowercase:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d6e78.  call temp:= `a`(v1) @signature `Lokio/SegmentedByteString;.a:()Lokio/ByteString;` @kind direct;
  #L1d6e7e.  v0:= temp @kind object;
  #L1d6e80.  call temp:= `toAsciiLowercase`(v0) @signature `Lokio/ByteString;.toAsciiLowercase:()Lokio/ByteString;` @kind virtual;
  #L1d6e86.  v0:= temp @kind object;
  #L1d6e88.  return v0 @kind object;
}
procedure `okio.ByteString` `toAsciiUppercase`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.toAsciiUppercase:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d6e9c.  call temp:= `a`(v1) @signature `Lokio/SegmentedByteString;.a:()Lokio/ByteString;` @kind direct;
  #L1d6ea2.  v0:= temp @kind object;
  #L1d6ea4.  call temp:= `toAsciiUppercase`(v0) @signature `Lokio/ByteString;.toAsciiUppercase:()Lokio/ByteString;` @kind virtual;
  #L1d6eaa.  v0:= temp @kind object;
  #L1d6eac.  return v0 @kind object;
}
procedure `byte`[] `toByteArray`(`okio.SegmentedByteString` v9 @kind this) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1d6858.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1d685e.  v0:= temp;
  #L1d6860.  v0:= new `byte`[v0];
  #L1d6864.  call temp:= `getSegments$okio`(v9) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d686a.  v1:= temp @kind object;
  #L1d686c.  v1:= length @variable v1;
  #L1d686e.  v2:= 0I;
  #L1d6870.  v3:= 0I;
  #L1d6872.  v4:= 0I;
  #L1d6874.  if v2 >= v1 then goto L1d68b8;
  #L1d6878.  call temp:= `getDirectory$okio`(v9) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d687e.  v5:= temp @kind object;
  #L1d6880.  v6:= v1 + v2 @kind int;
  #L1d6884.  v5:= v5[v6];
  #L1d6888.  call temp:= `getDirectory$okio`(v9) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d688e.  v6:= temp @kind object;
  #L1d6890.  v6:= v6[v2];
  #L1d6894.  call temp:= `getSegments$okio`(v9) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d689a.  v7:= temp @kind object;
  #L1d689c.  v7:= v7[v2] @kind object;
  #L1d68a0.  v3:= v6 - v3 @kind int;
  #L1d68a4.  v8:= v5 + v3 @kind int;
  #L1d68a8.  call temp:= `copyInto`(v7, v0, v4, v5, v8) @signature `Lkotlin/collections/ArraysKt;.copyInto:([B[BIII)[B` @kind static;
  #L1d68ae.  v4:= v4 + v3 @kind int;
  #L1d68b0.  v2:= v2 + 1;
  #L1d68b4.  v3:= v6;
  #L1d68b6.  goto L1d6874;
  #L1d68b8.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d6ad0.  call temp:= `a`(v1) @signature `Lokio/SegmentedByteString;.a:()Lokio/ByteString;` @kind direct;
  #L1d6ad6.  v0:= temp @kind object;
  #L1d6ad8.  call temp:= `toString`(v0) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d6ade.  v0:= temp @kind object;
  #L1d6ae0.  return v0 @kind object;
}
procedure `void` `write`(`okio.SegmentedByteString` v6 @kind this, `java.io.OutputStream` v7 @kind object) @signature `Lokio/SegmentedByteString;.write:(Ljava/io/OutputStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1d7008.  v0:= "out" @kind object;
  #L1d700c.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d7012.  call temp:= `getSegments$okio`(v6) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d7018.  v0:= temp @kind object;
  #L1d701a.  v0:= length @variable v0;
  #L1d701c.  v1:= 0I;
  #L1d701e.  v2:= 0I;
  #L1d7020.  if v1 >= v0 then goto L1d705e;
  #L1d7024.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d702a.  v3:= temp @kind object;
  #L1d702c.  v4:= v0 + v1 @kind int;
  #L1d7030.  v3:= v3[v4];
  #L1d7034.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d703a.  v4:= temp @kind object;
  #L1d703c.  v4:= v4[v1];
  #L1d7040.  call temp:= `getSegments$okio`(v6) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d7046.  v5:= temp @kind object;
  #L1d7048.  v5:= v5[v1] @kind object;
  #L1d704c.  v2:= v4 - v2 @kind int;
  #L1d7050.  call `write`(v7, v5, v3, v2) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L1d7056.  v1:= v1 + 1;
  #L1d705a.  v2:= v4;
  #L1d705c.  goto L1d7020;
  #L1d705e.  return @kind void;
}
procedure `void` `write$okio`(`okio.SegmentedByteString` v11 @kind this, `okio.Buffer` v12 @kind object, `int` v13 , `int` v14 ) @signature `Lokio/SegmentedByteString;.write$okio:(Lokio/Buffer;II)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1d6f24.  v0:= "buffer" @kind object;
  #L1d6f28.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d6f2e.  v0:= v13 + v14 @kind int;
  #L1d6f32.  call temp:= `segment`(v11, v13) @signature `Lokio/internal/SegmentedByteStringKt;.segment:(Lokio/SegmentedByteString;I)I` @kind static;
  #L1d6f38.  v1:= temp;
  #L1d6f3a.  if v13 >= v0 then goto L1d6fe4;
  #L1d6f3e.  if v1 != 0 then goto L1d6f46;
  #L1d6f42.  v2:= 0I;
  #L1d6f44.  goto L1d6f56;
  #L1d6f46.  call temp:= `getDirectory$okio`(v11) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6f4c.  v2:= temp @kind object;
  #L1d6f4e.  v3:= v1 + -1;
  #L1d6f52.  v2:= v2[v3];
  #L1d6f56.  call temp:= `getDirectory$okio`(v11) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6f5c.  v3:= temp @kind object;
  #L1d6f5e.  v3:= v3[v1];
  #L1d6f62.  v3:= v3 - v2 @kind int;
  #L1d6f64.  call temp:= `getDirectory$okio`(v11) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1d6f6a.  v4:= temp @kind object;
  #L1d6f6c.  call temp:= `getSegments$okio`(v11) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d6f72.  v5:= temp @kind object;
  #L1d6f74.  v5:= length @variable v5;
  #L1d6f76.  v5:= v5 + v1 @kind int;
  #L1d6f78.  v4:= v4[v5];
  #L1d6f7c.  v3:= v3 + v2 @kind int;
  #L1d6f7e.  call temp:= `min`(v0, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d6f84.  v3:= temp;
  #L1d6f86.  v3:= v3 - v13 @kind int;
  #L1d6f88.  v2:= v13 - v2 @kind int;
  #L1d6f8c.  v7:= v4 + v2 @kind int;
  #L1d6f90.  call temp:= `getSegments$okio`(v11) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1d6f96.  v2:= temp @kind object;
  #L1d6f98.  v6:= v2[v1] @kind object;
  #L1d6f9c.  v2:= new `okio.Segment`;
  #L1d6fa0.  v8:= v7 + v3 @kind int;
  #L1d6fa4.  v9:= 1I;
  #L1d6fa6.  v10:= 0I;
  #L1d6fa8.  v5:= v2 @kind object;
  #L1d6faa.  call `<init>`(v5, v6, v7, v8, v9, v10) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @kind direct;
  #L1d6fb0.  v4:= v12.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d6fb4.  if v4 != 0 then goto L1d6fc6;
  #L1d6fb8.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v2 @kind object;
  #L1d6fbc.  v2.`okio.Segment.next` @type ^`okio.Segment` := v2 @kind object;
  #L1d6fc0.  v12.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L1d6fc4.  goto L1d6fdc;
  #L1d6fc6.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d6fcc.  v4:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1d6fd0.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d6fd6.  call temp:= `push`(v4, v2) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1d6fdc.  v13:= v13 + v3 @kind int;
  #L1d6fde.  v1:= v1 + 1;
  #L1d6fe2.  goto L1d6f3a;
  #L1d6fe4.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d6fea.  v0:= temp @kind wide;
  #L1d6fec.  v13:= (`long`) v14 @kind i2l;
  #L1d6fee.  v0:= v0 + v13 @kind long;
  #L1d6ff0.  call `setSize$okio`(v12, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1d6ff6.  return @kind void;
}
