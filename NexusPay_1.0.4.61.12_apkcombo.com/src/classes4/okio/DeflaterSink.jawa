record `okio.DeflaterSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Sink` @kind interface {
  `boolean` `okio.DeflaterSink.a` @AccessFlag PRIVATE;
  `okio.BufferedSink` `okio.DeflaterSink.b` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Deflater` `okio.DeflaterSink.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.DeflaterSink` v1 @kind this, `okio.BufferedSink` v2 @kind object, `java.util.zip.Deflater` v3 @kind object) @signature `Lokio/DeflaterSink;.<init>:(Lokio/BufferedSink;Ljava/util/zip/Deflater;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d05d0.  v0:= "sink" @kind object;
  #L1d05d4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d05da.  v0:= "deflater" @kind object;
  #L1d05de.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d05e4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d05ea.  v1.`okio.DeflaterSink.b` @type ^`okio.BufferedSink` := v2 @kind object;
  #L1d05ee.  v1.`okio.DeflaterSink.c` @type ^`java.util.zip.Deflater` := v3 @kind object;
  #L1d05f2.  return @kind void;
}
procedure `void` `<init>`(`okio.DeflaterSink` v1 @kind this, `okio.Sink` v2 @kind object, `java.util.zip.Deflater` v3 @kind object) @signature `Lokio/DeflaterSink;.<init>:(Lokio/Sink;Ljava/util/zip/Deflater;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d0604.  v0:= "sink" @kind object;
  #L1d0608.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d060e.  v0:= "deflater" @kind object;
  #L1d0612.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d0618.  call temp:= `buffer`(v2) @signature `Lokio/Okio;.buffer:(Lokio/Sink;)Lokio/BufferedSink;` @kind static;
  #L1d061e.  v2:= temp @kind object;
  #L1d0620.  call `<init>`(v1, v2, v3) @signature `Lokio/DeflaterSink;.<init>:(Lokio/BufferedSink;Ljava/util/zip/Deflater;)V` @kind direct;
  #L1d0626.  return @kind void;
}
procedure `void` `a`(`okio.DeflaterSink` v7 @kind this, `boolean` v8 ) @signature `Lokio/DeflaterSink;.a:(Z)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1d06b4.  v0:= v7.`okio.DeflaterSink.b` @type ^`okio.BufferedSink` @kind object;
  #L1d06b8.  call temp:= `getBuffer`(v0) @signature `Lokio/BufferedSink;.getBuffer:()Lokio/Buffer;` @kind interface;
  #L1d06be.  v0:= temp @kind object;
  #L1d06c0.  v1:= 1I;
  #L1d06c2.  call temp:= `writableSegment$okio`(v0, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1d06c8.  v1:= temp @kind object;
  #L1d06ca.  if v8 == 0 then goto L1d06ea;
  #L1d06ce.  v2:= v7.`okio.DeflaterSink.c` @type ^`java.util.zip.Deflater` @kind object;
  #L1d06d2.  v3:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d06d6.  v4:= v1.`okio.Segment.limit` @type ^`int`;
  #L1d06da.  v5:= v4 - 8192;
  #L1d06de.  v6:= 2I;
  #L1d06e0.  call temp:= `deflate`(v2, v3, v4, v5, v6) @signature `Ljava/util/zip/Deflater;.deflate:([BIII)I` @kind virtual;
  #L1d06e6.  v2:= temp;
  #L1d06e8.  goto L1d0702;
  #L1d06ea.  v2:= v7.`okio.DeflaterSink.c` @type ^`java.util.zip.Deflater` @kind object;
  #L1d06ee.  v3:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d06f2.  v4:= v1.`okio.Segment.limit` @type ^`int`;
  #L1d06f6.  v5:= v4 - 8192;
  #L1d06fa.  call temp:= `deflate`(v2, v3, v4, v5) @signature `Ljava/util/zip/Deflater;.deflate:([BII)I` @kind virtual;
  #L1d0700.  v2:= temp;
  #L1d0702.  if v2 <= 0 then goto L1d072e;
  #L1d0706.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L1d070a.  v3:= v3 + v2 @kind int;
  #L1d070c.  v1.`okio.Segment.limit` @type ^`int` := v3;
  #L1d0710.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d0716.  v3:= temp @kind wide;
  #L1d0718.  v1:= (`long`) v2 @kind i2l;
  #L1d071a.  v3:= v3 + v1 @kind long;
  #L1d071c.  call `setSize$okio`(v0, v3) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1d0722.  v1:= v7.`okio.DeflaterSink.b` @type ^`okio.BufferedSink` @kind object;
  #L1d0726.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/BufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind interface;
  #L1d072c.  goto L1d06c0;
  #L1d072e.  v2:= v7.`okio.DeflaterSink.c` @type ^`java.util.zip.Deflater` @kind object;
  #L1d0732.  call temp:= `needsInput`(v2) @signature `Ljava/util/zip/Deflater;.needsInput:()Z` @kind virtual;
  #L1d0738.  v2:= temp;
  #L1d073a.  if v2 == 0 then goto L1d06c0;
  #L1d073e.  v8:= v1.`okio.Segment.pos` @type ^`int`;
  #L1d0742.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L1d0746.  if v8 != v2 then goto L1d075c;
  #L1d074a.  call temp:= `pop`(v1) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1d0750.  v8:= temp @kind object;
  #L1d0752.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L1d0756.  call `recycle`(v1) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1d075c.  return @kind void;
}
procedure `void` `close`(`okio.DeflaterSink` v2 @kind this) @signature `Lokio/DeflaterSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d0638.  v0:= v2.`okio.DeflaterSink.a` @type ^`boolean` @kind boolean;
  #L1d063c.  if v0 == 0 then goto L1d0642;
  #L1d0640.  return @kind void;
  #L1d0642.  v0:= 0I;
  #L1d0644.  call `finishDeflate$okio`(v2) @signature `Lokio/DeflaterSink;.finishDeflate$okio:()V` @kind virtual;
  #L1d064a.  goto L1d064e;
  #L1d064c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d064e.  v1:= v2.`okio.DeflaterSink.c` @type ^`java.util.zip.Deflater` @kind object;
  #L1d0652.  call `end`(v1) @signature `Ljava/util/zip/Deflater;.end:()V` @kind virtual;
  #L1d0658.  goto L1d0662;
  #L1d065a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d065c.  if v0 != 0 then goto L1d0662;
  #L1d0660.  v0:= v1 @kind object;
  #L1d0662.  v1:= v2.`okio.DeflaterSink.b` @type ^`okio.BufferedSink` @kind object;
  #L1d0666.  call `close`(v1) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L1d066c.  goto L1d0676;
  #L1d066e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d0670.  if v0 != 0 then goto L1d0676;
  #L1d0674.  v0:= v1 @kind object;
  #L1d0676.  v1:= 1I;
  #L1d0678.  v2.`okio.DeflaterSink.a` @type ^`boolean` := v1 @kind boolean;
  #L1d067c.  if v0 != 0 then goto L1d0682;
  #L1d0680.  return @kind void;
  #L1d0682.  throw v0;
  catch `java.lang.Throwable` @[L1d0644..L1d064a] goto L1d064c;
  catch `java.lang.Throwable` @[L1d064e..L1d0658] goto L1d065a;
  catch `java.lang.Throwable` @[L1d0662..L1d066c] goto L1d066e;
}
procedure `void` `finishDeflate$okio`(`okio.DeflaterSink` v1 @kind this) @signature `Lokio/DeflaterSink;.finishDeflate$okio:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d0770.  v0:= v1.`okio.DeflaterSink.c` @type ^`java.util.zip.Deflater` @kind object;
  #L1d0774.  call `finish`(v0) @signature `Ljava/util/zip/Deflater;.finish:()V` @kind virtual;
  #L1d077a.  v0:= 0I;
  #L1d077c.  call `a`(v1, v0) @signature `Lokio/DeflaterSink;.a:(Z)V` @kind direct;
  #L1d0782.  return @kind void;
}
procedure `void` `flush`(`okio.DeflaterSink` v1 @kind this) @signature `Lokio/DeflaterSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d0794.  v0:= 1I;
  #L1d0796.  call `a`(v1, v0) @signature `Lokio/DeflaterSink;.a:(Z)V` @kind direct;
  #L1d079c.  v0:= v1.`okio.DeflaterSink.b` @type ^`okio.BufferedSink` @kind object;
  #L1d07a0.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L1d07a6.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.DeflaterSink` v1 @kind this) @signature `Lokio/DeflaterSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d05b0.  v0:= v1.`okio.DeflaterSink.b` @type ^`okio.BufferedSink` @kind object;
  #L1d05b4.  call temp:= `timeout`(v0) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L1d05ba.  v0:= temp @kind object;
  #L1d05bc.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.DeflaterSink` v2 @kind this) @signature `Lokio/DeflaterSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d056c.  v0:= new `java.lang.StringBuilder`;
  #L1d0570.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d0576.  v1:= "DeflaterSink(" @kind object;
  #L1d057a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d0580.  v1:= v2.`okio.DeflaterSink.b` @type ^`okio.BufferedSink` @kind object;
  #L1d0584.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d058a.  v1:= 41I;
  #L1d058e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d0594.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d059a.  v0:= temp @kind object;
  #L1d059c.  return v0 @kind object;
}
procedure `void` `write`(`okio.DeflaterSink` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokio/DeflaterSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1d07b8.  v0:= "source" @kind object;
  #L1d07bc.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d07c2.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d07c8.  v1:= temp @kind wide;
  #L1d07ca.  v3:= 0L;
  #L1d07ce.  v5:= v9 @kind wide;
  #L1d07d0.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1d07d6.  v0:= 0L;
  #L1d07da.  v2:= lcmp(v9, v0);
  #L1d07de.  if v2 <= 0 then goto L1d0856;
  #L1d07e2.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d07e6.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d07ec.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d07f0.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d07f4.  v1:= v1 - v2 @kind int;
  #L1d07f6.  v1:= (`long`) v1 @kind i2l;
  #L1d07f8.  call temp:= `min`(v9, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1d07fe.  v1:= temp @kind wide;
  #L1d0800.  v2:= (`int`) v1 @kind l2i;
  #L1d0802.  v1:= v7.`okio.DeflaterSink.c` @type ^`java.util.zip.Deflater` @kind object;
  #L1d0806.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d080a.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d080e.  call `setInput`(v1, v3, v4, v2) @signature `Ljava/util/zip/Deflater;.setInput:([BII)V` @kind virtual;
  #L1d0814.  v1:= 0I;
  #L1d0816.  call `a`(v7, v1) @signature `Lokio/DeflaterSink;.a:(Z)V` @kind direct;
  #L1d081c.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d0822.  v3:= temp @kind wide;
  #L1d0824.  v5:= (`long`) v2 @kind i2l;
  #L1d0826.  v3:= v3 - v5 @kind long;
  #L1d0828.  call `setSize$okio`(v8, v3) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1d082e.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d0832.  v1:= v1 + v2 @kind int;
  #L1d0834.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L1d0838.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d083c.  if v1 != v2 then goto L1d0852;
  #L1d0840.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1d0846.  v1:= temp @kind object;
  #L1d0848.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L1d084c.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1d0852.  v9:= v9 - v5 @kind long;
  #L1d0854.  goto L1d07d6;
  #L1d0856.  return @kind void;
}
