record `okio.Pipe$source$1` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Source` @kind interface {
  `okio.Timeout` `okio.Pipe$source$1.a` @AccessFlag PRIVATE_FINAL;
  `okio.Pipe` `okio.Pipe$source$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Pipe$source$1` v0 @kind this, `okio.Pipe` v1 @kind object) @signature `Lokio/Pipe$source$1;.<init>:(Lokio/Pipe;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1d3ecc.  v0.`okio.Pipe$source$1.b` @type ^`okio.Pipe` := v1 @kind object;
  #L1d3ed0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d3ed6.  v1:= new `okio.Timeout`;
  #L1d3eda.  call `<init>`(v1) @signature `Lokio/Timeout;.<init>:()V` @kind direct;
  #L1d3ee0.  v0.`okio.Pipe$source$1.a` @type ^`okio.Timeout` := v1 @kind object;
  #L1d3ee4.  return @kind void;
}
procedure `void` `close`(`okio.Pipe$source$1` v3 @kind this) @signature `Lokio/Pipe$source$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d3ef8.  v0:= v3.`okio.Pipe$source$1.b` @type ^`okio.Pipe` @kind object;
  #L1d3efc.  call temp:= `getBuffer$okio`(v0) @signature `Lokio/Pipe;.getBuffer$okio:()Lokio/Buffer;` @kind virtual;
  #L1d3f02.  v0:= temp @kind object;
  #L1d3f04.  @monitorenter v0
  #L1d3f06.  v1:= v3.`okio.Pipe$source$1.b` @type ^`okio.Pipe` @kind object;
  #L1d3f0a.  v2:= 1I;
  #L1d3f0c.  call `setSourceClosed$okio`(v1, v2) @signature `Lokio/Pipe;.setSourceClosed$okio:(Z)V` @kind virtual;
  #L1d3f12.  v1:= v3.`okio.Pipe$source$1.b` @type ^`okio.Pipe` @kind object;
  #L1d3f16.  call temp:= `getBuffer$okio`(v1) @signature `Lokio/Pipe;.getBuffer$okio:()Lokio/Buffer;` @kind virtual;
  #L1d3f1c.  v1:= temp @kind object;
  #L1d3f1e.  if v1 == 0 then goto L1d3f30;
  #L1d3f22.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1d3f28.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L1d3f2c.  @monitorexit v0
  #L1d3f2e.  return @kind void;
  #L1d3f30.  v1:= new `java.lang.NullPointerException`;
  #L1d3f34.  v2:= "null cannot be cast to non-null type java.lang.Object" @kind object;
  #L1d3f38.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d3f3e.  throw v1;
  #L1d3f40.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d3f42.  @monitorexit v0
  #L1d3f44.  throw v1;
  catch `java.lang.Throwable` @[L1d3f06..L1d3f2c] goto L1d3f40;
  catch `java.lang.Throwable` @[L1d3f30..L1d3f40] goto L1d3f40;
}
procedure `long` `read`(`okio.Pipe$source$1` v6 @kind this, `okio.Buffer` v7 @kind object, `long` v8 ) @signature `Lokio/Pipe$source$1;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1d3d70.  v0:= "sink" @kind object;
  #L1d3d74.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d3d7a.  v0:= v6.`okio.Pipe$source$1.b` @type ^`okio.Pipe` @kind object;
  #L1d3d7e.  call temp:= `getBuffer$okio`(v0) @signature `Lokio/Pipe;.getBuffer$okio:()Lokio/Buffer;` @kind virtual;
  #L1d3d84.  v0:= temp @kind object;
  #L1d3d86.  @monitorenter v0
  #L1d3d88.  v1:= v6.`okio.Pipe$source$1.b` @type ^`okio.Pipe` @kind object;
  #L1d3d8c.  call temp:= `getSourceClosed$okio`(v1) @signature `Lokio/Pipe;.getSourceClosed$okio:()Z` @kind virtual;
  #L1d3d92.  v1:= temp;
  #L1d3d94.  v1:= v1 ^~ 1;
  #L1d3d98.  if v1 == 0 then goto L1d3e6a;
  #L1d3d9c.  v1:= v6.`okio.Pipe$source$1.b` @type ^`okio.Pipe` @kind object;
  #L1d3da0.  call temp:= `getCanceled$okio`(v1) @signature `Lokio/Pipe;.getCanceled$okio:()Z` @kind virtual;
  #L1d3da6.  v1:= temp;
  #L1d3da8.  if v1 != 0 then goto L1d3e5a;
  #L1d3dac.  v1:= v6.`okio.Pipe$source$1.b` @type ^`okio.Pipe` @kind object;
  #L1d3db0.  call temp:= `getBuffer$okio`(v1) @signature `Lokio/Pipe;.getBuffer$okio:()Lokio/Buffer;` @kind virtual;
  #L1d3db6.  v1:= temp @kind object;
  #L1d3db8.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d3dbe.  v1:= temp @kind wide;
  #L1d3dc0.  v3:= 0L;
  #L1d3dc4.  v5:= lcmp(v1, v3);
  #L1d3dc8.  if v5 != 0 then goto L1d3e1c;
  #L1d3dcc.  v1:= v6.`okio.Pipe$source$1.b` @type ^`okio.Pipe` @kind object;
  #L1d3dd0.  call temp:= `getSinkClosed$okio`(v1) @signature `Lokio/Pipe;.getSinkClosed$okio:()Z` @kind virtual;
  #L1d3dd6.  v1:= temp;
  #L1d3dd8.  if v1 == 0 then goto L1d3de4;
  #L1d3ddc.  v7:= -1L;
  #L1d3de0.  @monitorexit v0
  #L1d3de2.  return v7 @kind wide;
  #L1d3de4.  v1:= v6.`okio.Pipe$source$1.a` @type ^`okio.Timeout` @kind object;
  #L1d3de8.  v2:= v6.`okio.Pipe$source$1.b` @type ^`okio.Pipe` @kind object;
  #L1d3dec.  call temp:= `getBuffer$okio`(v2) @signature `Lokio/Pipe;.getBuffer$okio:()Lokio/Buffer;` @kind virtual;
  #L1d3df2.  v2:= temp @kind object;
  #L1d3df4.  call `waitUntilNotified`(v1, v2) @signature `Lokio/Timeout;.waitUntilNotified:(Ljava/lang/Object;)V` @kind virtual;
  #L1d3dfa.  v1:= v6.`okio.Pipe$source$1.b` @type ^`okio.Pipe` @kind object;
  #L1d3dfe.  call temp:= `getCanceled$okio`(v1) @signature `Lokio/Pipe;.getCanceled$okio:()Z` @kind virtual;
  #L1d3e04.  v1:= temp;
  #L1d3e06.  if v1 != 0 then goto L1d3e0c;
  #L1d3e0a.  goto L1d3dac;
  #L1d3e0c.  v7:= new `java.io.IOException`;
  #L1d3e10.  v8:= "canceled" @kind object;
  #L1d3e14.  call `<init>`(v7, v8) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d3e1a.  throw v7;
  #L1d3e1c.  v1:= v6.`okio.Pipe$source$1.b` @type ^`okio.Pipe` @kind object;
  #L1d3e20.  call temp:= `getBuffer$okio`(v1) @signature `Lokio/Pipe;.getBuffer$okio:()Lokio/Buffer;` @kind virtual;
  #L1d3e26.  v1:= temp @kind object;
  #L1d3e28.  call temp:= `read`(v1, v7, v8) @signature `Lokio/Buffer;.read:(Lokio/Buffer;J)J` @kind virtual;
  #L1d3e2e.  v7:= temp @kind wide;
  #L1d3e30.  v9:= v6.`okio.Pipe$source$1.b` @type ^`okio.Pipe` @kind object;
  #L1d3e34.  call temp:= `getBuffer$okio`(v9) @signature `Lokio/Pipe;.getBuffer$okio:()Lokio/Buffer;` @kind virtual;
  #L1d3e3a.  v9:= temp @kind object;
  #L1d3e3c.  if v9 == 0 then goto L1d3e4a;
  #L1d3e40.  call `notifyAll`(v9) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1d3e46.  @monitorexit v0
  #L1d3e48.  return v7 @kind wide;
  #L1d3e4a.  v7:= new `java.lang.NullPointerException`;
  #L1d3e4e.  v8:= "null cannot be cast to non-null type java.lang.Object" @kind object;
  #L1d3e52.  call `<init>`(v7, v8) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d3e58.  throw v7;
  #L1d3e5a.  v7:= new `java.io.IOException`;
  #L1d3e5e.  v8:= "canceled" @kind object;
  #L1d3e62.  call `<init>`(v7, v8) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d3e68.  throw v7;
  #L1d3e6a.  v7:= "closed" @kind object;
  #L1d3e6e.  v8:= new `java.lang.IllegalStateException`;
  #L1d3e72.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d3e78.  v7:= temp @kind object;
  #L1d3e7a.  call `<init>`(v8, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d3e80.  throw v8;
  #L1d3e82.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d3e84.  @monitorexit v0
  #L1d3e86.  throw v7;
  catch `java.lang.Throwable` @[L1d3d88..L1d3dd8] goto L1d3e82;
  catch `java.lang.Throwable` @[L1d3de4..L1d3e46] goto L1d3e82;
  catch `java.lang.Throwable` @[L1d3e4a..L1d3e82] goto L1d3e82;
}
procedure `okio.Timeout` `timeout`(`okio.Pipe$source$1` v1 @kind this) @signature `Lokio/Pipe$source$1;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d3eb4.  v0:= v1.`okio.Pipe$source$1.a` @type ^`okio.Timeout` @kind object;
  #L1d3eb8.  return v0 @kind object;
}
