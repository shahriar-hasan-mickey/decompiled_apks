record `okio.CipherSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Source` @kind interface {
  `int` `okio.CipherSource.a` @AccessFlag PRIVATE_FINAL;
  `okio.Buffer` `okio.CipherSource.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `okio.CipherSource.c` @AccessFlag PRIVATE;
  `boolean` `okio.CipherSource.d` @AccessFlag PRIVATE;
  `okio.BufferedSource` `okio.CipherSource.e` @AccessFlag PRIVATE_FINAL;
  `javax.crypto.Cipher` `okio.CipherSource.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.CipherSource` v1 @kind this, `okio.BufferedSource` v2 @kind object, `javax.crypto.Cipher` v3 @kind object) @signature `Lokio/CipherSource;.<init>:(Lokio/BufferedSource;Ljavax/crypto/Cipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d02a8.  v0:= "source" @kind object;
  #L1d02ac.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d02b2.  v0:= "cipher" @kind object;
  #L1d02b6.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d02bc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d02c2.  v1.`okio.CipherSource.e` @type ^`okio.BufferedSource` := v2 @kind object;
  #L1d02c6.  v1.`okio.CipherSource.f` @type ^`javax.crypto.Cipher` := v3 @kind object;
  #L1d02ca.  call temp:= `getBlockSize`(v3) @signature `Ljavax/crypto/Cipher;.getBlockSize:()I` @kind virtual;
  #L1d02d0.  v2:= temp;
  #L1d02d2.  v1.`okio.CipherSource.a` @type ^`int` := v2;
  #L1d02d6.  v2:= new `okio.Buffer`;
  #L1d02da.  call `<init>`(v2) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1d02e0.  v1.`okio.CipherSource.b` @type ^`okio.Buffer` := v2 @kind object;
  #L1d02e4.  v2:= v1.`okio.CipherSource.a` @type ^`int`;
  #L1d02e8.  if v2 <= 0 then goto L1d02f0;
  #L1d02ec.  v2:= 1I;
  #L1d02ee.  goto L1d02f2;
  #L1d02f0.  v2:= 0I;
  #L1d02f2.  if v2 == 0 then goto L1d02f8;
  #L1d02f6.  return @kind void;
  #L1d02f8.  v2:= new `java.lang.StringBuilder`;
  #L1d02fc.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d0302.  v3:= "Block cipher required " @kind object;
  #L1d0306.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d030c.  v3:= v1.`okio.CipherSource.f` @type ^`javax.crypto.Cipher` @kind object;
  #L1d0310.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d0316.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d031c.  v2:= temp @kind object;
  #L1d031e.  v3:= new `java.lang.IllegalArgumentException`;
  #L1d0322.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d0328.  v2:= temp @kind object;
  #L1d032a.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d0330.  throw v3;
}
procedure `void` `a`(`okio.CipherSource` v7 @kind this) @signature `Lokio/CipherSource;.a:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1d0368.  v0:= v7.`okio.CipherSource.f` @type ^`javax.crypto.Cipher` @kind object;
  #L1d036c.  v1:= 0I;
  #L1d036e.  call temp:= `getOutputSize`(v0, v1) @signature `Ljavax/crypto/Cipher;.getOutputSize:(I)I` @kind virtual;
  #L1d0374.  v0:= temp;
  #L1d0376.  if v0 != 0 then goto L1d037c;
  #L1d037a.  return @kind void;
  #L1d037c.  v1:= v7.`okio.CipherSource.b` @type ^`okio.Buffer` @kind object;
  #L1d0380.  call temp:= `writableSegment$okio`(v1, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1d0386.  v0:= temp @kind object;
  #L1d0388.  v1:= v7.`okio.CipherSource.f` @type ^`javax.crypto.Cipher` @kind object;
  #L1d038c.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d0390.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d0394.  call temp:= `doFinal`(v1, v2, v3) @signature `Ljavax/crypto/Cipher;.doFinal:([BI)I` @kind virtual;
  #L1d039a.  v1:= temp;
  #L1d039c.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d03a0.  v2:= v2 + v1 @kind int;
  #L1d03a2.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L1d03a6.  v2:= v7.`okio.CipherSource.b` @type ^`okio.Buffer` @kind object;
  #L1d03aa.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d03b0.  v3:= temp @kind wide;
  #L1d03b2.  v5:= (`long`) v1 @kind i2l;
  #L1d03b4.  v3:= v3 + v5 @kind long;
  #L1d03b6.  call `setSize$okio`(v2, v3) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1d03bc.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d03c0.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d03c4.  if v1 != v2 then goto L1d03de;
  #L1d03c8.  v1:= v7.`okio.CipherSource.b` @type ^`okio.Buffer` @kind object;
  #L1d03cc.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1d03d2.  v2:= temp @kind object;
  #L1d03d4.  v1.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L1d03d8.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1d03de.  return @kind void;
}
procedure `void` `b`(`okio.CipherSource` v5 @kind this) @signature `Lokio/CipherSource;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d03f0.  v0:= v5.`okio.CipherSource.b` @type ^`okio.Buffer` @kind object;
  #L1d03f4.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d03fa.  v0:= temp @kind wide;
  #L1d03fc.  v2:= 0L;
  #L1d0400.  v4:= lcmp(v0, v2);
  #L1d0404.  if v4 != 0 then goto L1d042e;
  #L1d0408.  v0:= v5.`okio.CipherSource.e` @type ^`okio.BufferedSource` @kind object;
  #L1d040c.  call temp:= `exhausted`(v0) @signature `Lokio/BufferedSource;.exhausted:()Z` @kind interface;
  #L1d0412.  v0:= temp;
  #L1d0414.  if v0 == 0 then goto L1d0426;
  #L1d0418.  v0:= 1I;
  #L1d041a.  v5.`okio.CipherSource.c` @type ^`boolean` := v0 @kind boolean;
  #L1d041e.  call `a`(v5) @signature `Lokio/CipherSource;.a:()V` @kind direct;
  #L1d0424.  goto L1d042e;
  #L1d0426.  call `c`(v5) @signature `Lokio/CipherSource;.c:()V` @kind direct;
  #L1d042c.  goto L1d03f0;
  #L1d042e.  return @kind void;
}
procedure `void` `c`(`okio.CipherSource` v9 @kind this) @signature `Lokio/CipherSource;.c:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1d0440.  v0:= v9.`okio.CipherSource.e` @type ^`okio.BufferedSource` @kind object;
  #L1d0444.  call temp:= `getBuffer`(v0) @signature `Lokio/BufferedSource;.getBuffer:()Lokio/Buffer;` @kind interface;
  #L1d044a.  v0:= temp @kind object;
  #L1d044c.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d0450.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d0456.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d045a.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d045e.  v1:= v1 - v2 @kind int;
  #L1d0460.  v2:= v9.`okio.CipherSource.f` @type ^`javax.crypto.Cipher` @kind object;
  #L1d0464.  call temp:= `getOutputSize`(v2, v1) @signature `Ljavax/crypto/Cipher;.getOutputSize:(I)I` @kind virtual;
  #L1d046a.  v2:= temp;
  #L1d046c.  v3:= 8192I;
  #L1d0470.  if v2 <= v3 then goto L1d04e0;
  #L1d0474.  v3:= v9.`okio.CipherSource.a` @type ^`int`;
  #L1d0478.  if v1 <= v3 then goto L1d0480;
  #L1d047c.  v3:= 1I;
  #L1d047e.  goto L1d0482;
  #L1d0480.  v3:= 0I;
  #L1d0482.  if v3 == 0 then goto L1d049a;
  #L1d0486.  v2:= v9.`okio.CipherSource.a` @type ^`int`;
  #L1d048a.  v1:= v1 - v2 @kind int;
  #L1d048c.  v2:= v9.`okio.CipherSource.f` @type ^`javax.crypto.Cipher` @kind object;
  #L1d0490.  call temp:= `getOutputSize`(v2, v1) @signature `Ljavax/crypto/Cipher;.getOutputSize:(I)I` @kind virtual;
  #L1d0496.  v2:= temp;
  #L1d0498.  goto L1d046c;
  #L1d049a.  v0:= new `java.lang.StringBuilder`;
  #L1d049e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d04a4.  v3:= "Unexpected output size " @kind object;
  #L1d04a8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d04ae.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d04b4.  v2:= " for input size " @kind object;
  #L1d04b8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d04be.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d04c4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d04ca.  v0:= temp @kind object;
  #L1d04cc.  v1:= new `java.lang.IllegalStateException`;
  #L1d04d0.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d04d6.  v0:= temp @kind object;
  #L1d04d8.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d04de.  throw v1;
  #L1d04e0.  v3:= v9.`okio.CipherSource.b` @type ^`okio.Buffer` @kind object;
  #L1d04e4.  call temp:= `writableSegment$okio`(v3, v2) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1d04ea.  v2:= temp @kind object;
  #L1d04ec.  v3:= v9.`okio.CipherSource.f` @type ^`javax.crypto.Cipher` @kind object;
  #L1d04f0.  v4:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d04f4.  v5:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d04f8.  v7:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d04fc.  v8:= v2.`okio.Segment.pos` @type ^`int`;
  #L1d0500.  v6:= v1;
  #L1d0502.  call temp:= `update`(v3, v4, v5, v6, v7, v8) @signature `Ljavax/crypto/Cipher;.update:([BII[BI)I` @kind virtual;
  #L1d0508.  v0:= temp;
  #L1d050a.  v3:= v9.`okio.CipherSource.e` @type ^`okio.BufferedSource` @kind object;
  #L1d050e.  v4:= (`long`) v1 @kind i2l;
  #L1d0510.  call `skip`(v3, v4) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L1d0516.  v1:= v2.`okio.Segment.limit` @type ^`int`;
  #L1d051a.  v1:= v1 + v0 @kind int;
  #L1d051c.  v2.`okio.Segment.limit` @type ^`int` := v1;
  #L1d0520.  v1:= v9.`okio.CipherSource.b` @type ^`okio.Buffer` @kind object;
  #L1d0524.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d052a.  v3:= temp @kind wide;
  #L1d052c.  v5:= (`long`) v0 @kind i2l;
  #L1d052e.  v3:= v3 + v5 @kind long;
  #L1d0530.  call `setSize$okio`(v1, v3) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1d0536.  v0:= v2.`okio.Segment.pos` @type ^`int`;
  #L1d053a.  v1:= v2.`okio.Segment.limit` @type ^`int`;
  #L1d053e.  if v0 != v1 then goto L1d0558;
  #L1d0542.  v0:= v9.`okio.CipherSource.b` @type ^`okio.Buffer` @kind object;
  #L1d0546.  call temp:= `pop`(v2) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1d054c.  v1:= temp @kind object;
  #L1d054e.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L1d0552.  call `recycle`(v2) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1d0558.  return @kind void;
}
procedure `void` `close`(`okio.CipherSource` v1 @kind this) @signature `Lokio/CipherSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d0344.  v0:= 1I;
  #L1d0346.  v1.`okio.CipherSource.d` @type ^`boolean` := v0 @kind boolean;
  #L1d034a.  v0:= v1.`okio.CipherSource.e` @type ^`okio.BufferedSource` @kind object;
  #L1d034e.  call `close`(v0) @signature `Lokio/Source;.close:()V` @kind interface;
  #L1d0354.  return @kind void;
}
procedure `javax.crypto.Cipher` `getCipher`(`okio.CipherSource` v1 @kind this) @signature `Lokio/CipherSource;.getCipher:()Ljavax/crypto/Cipher;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d01b4.  v0:= v1.`okio.CipherSource.f` @type ^`javax.crypto.Cipher` @kind object;
  #L1d01b8.  return v0 @kind object;
}
procedure `long` `read`(`okio.CipherSource` v5 @kind this, `okio.Buffer` v6 @kind object, `long` v7 ) @signature `Lokio/CipherSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d01cc.  v0:= "sink" @kind object;
  #L1d01d0.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d01d6.  v0:= 1I;
  #L1d01d8.  v1:= 0L;
  #L1d01dc.  v3:= lcmp(v7, v1);
  #L1d01e0.  if v3 < 0 then goto L1d01e8;
  #L1d01e4.  v4:= 1I;
  #L1d01e6.  goto L1d01ea;
  #L1d01e8.  v4:= 0I;
  #L1d01ea.  if v4 == 0 then goto L1d0240;
  #L1d01ee.  v4:= v5.`okio.CipherSource.d` @type ^`boolean` @kind boolean;
  #L1d01f2.  v0:= v0 ^~ v4 @kind int;
  #L1d01f4.  if v0 == 0 then goto L1d0228;
  #L1d01f8.  if v3 != 0 then goto L1d01fe;
  #L1d01fc.  return v1 @kind wide;
  #L1d01fe.  v0:= v5.`okio.CipherSource.c` @type ^`boolean` @kind boolean;
  #L1d0202.  if v0 == 0 then goto L1d0214;
  #L1d0206.  v0:= v5.`okio.CipherSource.b` @type ^`okio.Buffer` @kind object;
  #L1d020a.  call temp:= `read`(v0, v6, v7) @signature `Lokio/Buffer;.read:(Lokio/Buffer;J)J` @kind virtual;
  #L1d0210.  v6:= temp @kind wide;
  #L1d0212.  return v6 @kind wide;
  #L1d0214.  call `b`(v5) @signature `Lokio/CipherSource;.b:()V` @kind direct;
  #L1d021a.  v0:= v5.`okio.CipherSource.b` @type ^`okio.Buffer` @kind object;
  #L1d021e.  call temp:= `read`(v0, v6, v7) @signature `Lokio/Buffer;.read:(Lokio/Buffer;J)J` @kind virtual;
  #L1d0224.  v6:= temp @kind wide;
  #L1d0226.  return v6 @kind wide;
  #L1d0228.  v6:= new `java.lang.IllegalStateException`;
  #L1d022c.  v7:= "closed" @kind object;
  #L1d0230.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d0236.  v7:= temp @kind object;
  #L1d0238.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d023e.  throw v6;
  #L1d0240.  v6:= new `java.lang.StringBuilder`;
  #L1d0244.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d024a.  v0:= "byteCount < 0: " @kind object;
  #L1d024e.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d0254.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d025a.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d0260.  v6:= temp @kind object;
  #L1d0262.  v7:= new `java.lang.IllegalArgumentException`;
  #L1d0266.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d026c.  v6:= temp @kind object;
  #L1d026e.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d0274.  throw v7;
}
procedure `okio.Timeout` `timeout`(`okio.CipherSource` v1 @kind this) @signature `Lokio/CipherSource;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d0288.  v0:= v1.`okio.CipherSource.e` @type ^`okio.BufferedSource` @kind object;
  #L1d028c.  call temp:= `timeout`(v0) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L1d0292.  v0:= temp @kind object;
  #L1d0294.  return v0 @kind object;
}
