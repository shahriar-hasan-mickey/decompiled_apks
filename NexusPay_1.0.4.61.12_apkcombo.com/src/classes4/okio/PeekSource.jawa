record `okio.PeekSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Source` @kind interface {
  `okio.Buffer` `okio.PeekSource.a` @AccessFlag PRIVATE_FINAL;
  `okio.Segment` `okio.PeekSource.b` @AccessFlag PRIVATE;
  `int` `okio.PeekSource.c` @AccessFlag PRIVATE;
  `boolean` `okio.PeekSource.d` @AccessFlag PRIVATE;
  `long` `okio.PeekSource.e` @AccessFlag PRIVATE;
  `okio.BufferedSource` `okio.PeekSource.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.PeekSource` v1 @kind this, `okio.BufferedSource` v2 @kind object) @signature `Lokio/PeekSource;.<init>:(Lokio/BufferedSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d35b0.  v0:= "upstream" @kind object;
  #L1d35b4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d35ba.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d35c0.  v1.`okio.PeekSource.f` @type ^`okio.BufferedSource` := v2 @kind object;
  #L1d35c4.  call temp:= `getBuffer`(v2) @signature `Lokio/BufferedSource;.getBuffer:()Lokio/Buffer;` @kind interface;
  #L1d35ca.  v2:= temp @kind object;
  #L1d35cc.  v1.`okio.PeekSource.a` @type ^`okio.Buffer` := v2 @kind object;
  #L1d35d0.  v2:= v2.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d35d4.  v1.`okio.PeekSource.b` @type ^`okio.Segment` := v2 @kind object;
  #L1d35d8.  if v2 == 0 then goto L1d35e2;
  #L1d35dc.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L1d35e0.  goto L1d35e4;
  #L1d35e2.  v2:= -1I;
  #L1d35e4.  v1.`okio.PeekSource.c` @type ^`int` := v2;
  #L1d35e8.  return @kind void;
}
procedure `void` `close`(`okio.PeekSource` v1 @kind this) @signature `Lokio/PeekSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d35fc.  v0:= 1I;
  #L1d35fe.  v1.`okio.PeekSource.d` @type ^`boolean` := v0 @kind boolean;
  #L1d3602.  return @kind void;
}
procedure `long` `read`(`okio.PeekSource` v8 @kind this, `okio.Buffer` v9 @kind object, `long` v10 ) @signature `Lokio/PeekSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1d343c.  v0:= "sink" @kind object;
  #L1d3440.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d3446.  v0:= 0I;
  #L1d3448.  v1:= 0L;
  #L1d344c.  v3:= 1I;
  #L1d344e.  v4:= lcmp(v10, v1);
  #L1d3452.  if v4 < 0 then goto L1d345a;
  #L1d3456.  v5:= 1I;
  #L1d3458.  goto L1d345c;
  #L1d345a.  v5:= 0I;
  #L1d345c.  if v5 == 0 then goto L1d354a;
  #L1d3460.  v5:= v8.`okio.PeekSource.d` @type ^`boolean` @kind boolean;
  #L1d3464.  v5:= v5 ^~ v3 @kind int;
  #L1d3466.  if v5 == 0 then goto L1d3532;
  #L1d346a.  v5:= v8.`okio.PeekSource.b` @type ^`okio.Segment` @kind object;
  #L1d346e.  if v5 == 0 then goto L1d3490;
  #L1d3472.  v6:= v8.`okio.PeekSource.a` @type ^`okio.Buffer` @kind object;
  #L1d3476.  v6:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d347a.  if v5 != v6 then goto L1d3492;
  #L1d347e.  v5:= v8.`okio.PeekSource.c` @type ^`int`;
  #L1d3482.  call `checkNotNull`(v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d3488.  v6:= v6.`okio.Segment.pos` @type ^`int`;
  #L1d348c.  if v5 != v6 then goto L1d3492;
  #L1d3490.  v0:= 1I;
  #L1d3492.  if v0 == 0 then goto L1d351a;
  #L1d3496.  if v4 != 0 then goto L1d349c;
  #L1d349a.  return v1 @kind wide;
  #L1d349c.  v0:= v8.`okio.PeekSource.f` @type ^`okio.BufferedSource` @kind object;
  #L1d34a0.  v1:= v8.`okio.PeekSource.e` @type ^`long` @kind wide;
  #L1d34a4.  v3:= 1L;
  #L1d34a8.  v1:= v1 + v3 @kind long;
  #L1d34aa.  call temp:= `request`(v0, v1) @signature `Lokio/BufferedSource;.request:(J)Z` @kind interface;
  #L1d34b0.  v0:= temp;
  #L1d34b2.  if v0 != 0 then goto L1d34bc;
  #L1d34b6.  v9:= -1L;
  #L1d34ba.  return v9 @kind wide;
  #L1d34bc.  v0:= v8.`okio.PeekSource.b` @type ^`okio.Segment` @kind object;
  #L1d34c0.  if v0 != 0 then goto L1d34e2;
  #L1d34c4.  v0:= v8.`okio.PeekSource.a` @type ^`okio.Buffer` @kind object;
  #L1d34c8.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d34cc.  if v0 == 0 then goto L1d34e2;
  #L1d34d0.  v8.`okio.PeekSource.b` @type ^`okio.Segment` := v0 @kind object;
  #L1d34d4.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d34da.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d34de.  v8.`okio.PeekSource.c` @type ^`int` := v0;
  #L1d34e2.  v0:= v8.`okio.PeekSource.a` @type ^`okio.Buffer` @kind object;
  #L1d34e6.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d34ec.  v0:= temp @kind wide;
  #L1d34ee.  v2:= v8.`okio.PeekSource.e` @type ^`long` @kind wide;
  #L1d34f2.  v0:= v0 - v2 @kind long;
  #L1d34f4.  call temp:= `min`(v10, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1d34fa.  v10:= temp @kind wide;
  #L1d34fc.  v2:= v8.`okio.PeekSource.a` @type ^`okio.Buffer` @kind object;
  #L1d3500.  v4:= v8.`okio.PeekSource.e` @type ^`long` @kind wide;
  #L1d3504.  v3:= v9 @kind object;
  #L1d3506.  v6:= v10 @kind wide;
  #L1d3508.  call temp:= `copyTo`(v2, v3, v4, v6) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L1d350e.  v0:= v8.`okio.PeekSource.e` @type ^`long` @kind wide;
  #L1d3512.  v0:= v0 + v10 @kind long;
  #L1d3514.  v8.`okio.PeekSource.e` @type ^`long` := v0 @kind wide;
  #L1d3518.  return v10 @kind wide;
  #L1d351a.  v9:= new `java.lang.IllegalStateException`;
  #L1d351e.  v10:= "Peek source is invalid because upstream source was used" @kind object;
  #L1d3522.  call temp:= `toString`(v10) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d3528.  v10:= temp @kind object;
  #L1d352a.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d3530.  throw v9;
  #L1d3532.  v9:= new `java.lang.IllegalStateException`;
  #L1d3536.  v10:= "closed" @kind object;
  #L1d353a.  call temp:= `toString`(v10) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d3540.  v10:= temp @kind object;
  #L1d3542.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d3548.  throw v9;
  #L1d354a.  v9:= new `java.lang.StringBuilder`;
  #L1d354e.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d3554.  v0:= "byteCount < 0: " @kind object;
  #L1d3558.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d355e.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d3564.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d356a.  v9:= temp @kind object;
  #L1d356c.  v10:= new `java.lang.IllegalArgumentException`;
  #L1d3570.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d3576.  v9:= temp @kind object;
  #L1d3578.  call `<init>`(v10, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d357e.  throw v10;
}
procedure `okio.Timeout` `timeout`(`okio.PeekSource` v1 @kind this) @signature `Lokio/PeekSource;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d3590.  v0:= v1.`okio.PeekSource.f` @type ^`okio.BufferedSource` @kind object;
  #L1d3594.  call temp:= `timeout`(v0) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L1d359a.  v0:= temp @kind object;
  #L1d359c.  return v0 @kind object;
}
