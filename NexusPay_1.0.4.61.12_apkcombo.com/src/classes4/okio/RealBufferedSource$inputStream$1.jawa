record `okio.RealBufferedSource$inputStream$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.InputStream` @kind class {
  `okio.RealBufferedSource` `okio.RealBufferedSource$inputStream$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.RealBufferedSource$inputStream$1` v0 @kind this, `okio.RealBufferedSource` v1 @kind object) @signature `Lokio/RealBufferedSource$inputStream$1;.<init>:(Lokio/RealBufferedSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1d5108.  v0.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` := v1 @kind object;
  #L1d510c.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L1d5112.  return @kind void;
}
procedure `int` `available`(`okio.RealBufferedSource$inputStream$1` v4 @kind this) @signature `Lokio/RealBufferedSource$inputStream$1;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d4f64.  v0:= v4.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L1d4f68.  v1:= v0.`okio.RealBufferedSource.closed` @type ^`boolean` @kind boolean;
  #L1d4f6c.  if v1 != 0 then goto L1d4f90;
  #L1d4f70.  v0:= v0.`okio.RealBufferedSource.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4f74.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d4f7a.  v0:= temp @kind wide;
  #L1d4f7c.  v2:= 2147483647I;
  #L1d4f82.  v2:= (`long`) v2 @kind i2l;
  #L1d4f84.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1d4f8a.  v0:= temp @kind wide;
  #L1d4f8c.  v1:= (`int`) v0 @kind l2i;
  #L1d4f8e.  return v1;
  #L1d4f90.  v0:= new `java.io.IOException`;
  #L1d4f94.  v1:= "closed" @kind object;
  #L1d4f98.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4f9e.  throw v0;
}
procedure `void` `close`(`okio.RealBufferedSource$inputStream$1` v1 @kind this) @signature `Lokio/RealBufferedSource$inputStream$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d5124.  v0:= v1.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L1d5128.  call `close`(v0) @signature `Lokio/RealBufferedSource;.close:()V` @kind virtual;
  #L1d512e.  return @kind void;
}
procedure `int` `read`(`okio.RealBufferedSource$inputStream$1` v5 @kind this) @signature `Lokio/RealBufferedSource$inputStream$1;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d4fb0.  v0:= v5.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L1d4fb4.  v1:= v0.`okio.RealBufferedSource.closed` @type ^`boolean` @kind boolean;
  #L1d4fb8.  if v1 != 0 then goto L1d5014;
  #L1d4fbc.  v0:= v0.`okio.RealBufferedSource.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4fc0.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d4fc6.  v0:= temp @kind wide;
  #L1d4fc8.  v2:= 0L;
  #L1d4fcc.  v4:= lcmp(v0, v2);
  #L1d4fd0.  if v4 != 0 then goto L1d4ffe;
  #L1d4fd4.  v0:= v5.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L1d4fd8.  v1:= v0.`okio.RealBufferedSource.source` @type ^`okio.Source` @kind object;
  #L1d4fdc.  v0:= v0.`okio.RealBufferedSource.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4fe0.  v2:= 8192I;
  #L1d4fe4.  v2:= (`long`) v2 @kind i2l;
  #L1d4fe6.  call temp:= `read`(v1, v0, v2) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L1d4fec.  v0:= temp @kind wide;
  #L1d4fee.  v2:= -1L;
  #L1d4ff2.  v4:= lcmp(v0, v2);
  #L1d4ff6.  if v4 != 0 then goto L1d4ffe;
  #L1d4ffa.  v0:= -1I;
  #L1d4ffc.  return v0;
  #L1d4ffe.  v0:= v5.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L1d5002.  v0:= v0.`okio.RealBufferedSource.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d5006.  call temp:= `readByte`(v0) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1d500c.  v0:= temp;
  #L1d500e.  v0:= v0 ^& 255;
  #L1d5012.  return v0;
  #L1d5014.  v0:= new `java.io.IOException`;
  #L1d5018.  v1:= "closed" @kind object;
  #L1d501c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d5022.  throw v0;
}
procedure `int` `read`(`okio.RealBufferedSource$inputStream$1` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/RealBufferedSource$inputStream$1;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1d5034.  v0:= "data" @kind object;
  #L1d5038.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d503e.  v0:= v7.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L1d5042.  v0:= v0.`okio.RealBufferedSource.closed` @type ^`boolean` @kind boolean;
  #L1d5046.  if v0 != 0 then goto L1d50b0;
  #L1d504a.  v0:= length @variable v8;
  #L1d504c.  v1:= (`long`) v0 @kind i2l;
  #L1d504e.  v3:= (`long`) v9 @kind i2l;
  #L1d5050.  v5:= (`long`) v10 @kind i2l;
  #L1d5052.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1d5058.  v0:= v7.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L1d505c.  v0:= v0.`okio.RealBufferedSource.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d5060.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d5066.  v0:= temp @kind wide;
  #L1d5068.  v2:= 0L;
  #L1d506c.  v4:= lcmp(v0, v2);
  #L1d5070.  if v4 != 0 then goto L1d509e;
  #L1d5074.  v0:= v7.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L1d5078.  v1:= v0.`okio.RealBufferedSource.source` @type ^`okio.Source` @kind object;
  #L1d507c.  v0:= v0.`okio.RealBufferedSource.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d5080.  v2:= 8192I;
  #L1d5084.  v2:= (`long`) v2 @kind i2l;
  #L1d5086.  call temp:= `read`(v1, v0, v2) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L1d508c.  v0:= temp @kind wide;
  #L1d508e.  v2:= -1L;
  #L1d5092.  v4:= lcmp(v0, v2);
  #L1d5096.  if v4 != 0 then goto L1d509e;
  #L1d509a.  v8:= -1I;
  #L1d509c.  return v8;
  #L1d509e.  v0:= v7.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L1d50a2.  v0:= v0.`okio.RealBufferedSource.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d50a6.  call temp:= `read`(v0, v8, v9, v10) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L1d50ac.  v8:= temp;
  #L1d50ae.  return v8;
  #L1d50b0.  v8:= new `java.io.IOException`;
  #L1d50b4.  v9:= "closed" @kind object;
  #L1d50b8.  call `<init>`(v8, v9) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d50be.  throw v8;
}
procedure `java.lang.String` `toString`(`okio.RealBufferedSource$inputStream$1` v2 @kind this) @signature `Lokio/RealBufferedSource$inputStream$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d50d0.  v0:= new `java.lang.StringBuilder`;
  #L1d50d4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d50da.  v1:= v2.`okio.RealBufferedSource$inputStream$1.a` @type ^`okio.RealBufferedSource` @kind object;
  #L1d50de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d50e4.  v1:= ".inputStream()" @kind object;
  #L1d50e8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d50ee.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d50f4.  v0:= temp @kind object;
  #L1d50f6.  return v0 @kind object;
}
