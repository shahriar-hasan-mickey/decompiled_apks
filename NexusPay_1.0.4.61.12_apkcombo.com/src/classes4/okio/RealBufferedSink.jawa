record `okio.RealBufferedSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.BufferedSink` @kind interface {
  `okio.Buffer` `okio.RealBufferedSink.bufferField` @AccessFlag PUBLIC_FINAL;
  `boolean` `okio.RealBufferedSink.closed` @AccessFlag PUBLIC;
  `okio.Sink` `okio.RealBufferedSink.sink` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`okio.RealBufferedSink` v1 @kind this, `okio.Sink` v2 @kind object) @signature `Lokio/RealBufferedSink;.<init>:(Lokio/Sink;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d4dd0.  v0:= "sink" @kind object;
  #L1d4dd4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d4dda.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d4de0.  v1.`okio.RealBufferedSink.sink` @type ^`okio.Sink` := v2 @kind object;
  #L1d4de4.  v2:= new `okio.Buffer`;
  #L1d4de8.  call `<init>`(v2) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1d4dee.  v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` := v2 @kind object;
  #L1d4df2.  return @kind void;
}
procedure `void` `getBuffer$annotations`() @signature `Lokio/RealBufferedSink;.getBuffer$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1d4f00.  return @kind void;
}
procedure `okio.Buffer` `buffer`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d46f0.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d46f4.  return v0 @kind object;
}
procedure `void` `close`(`okio.RealBufferedSink` v6 @kind this) @signature `Lokio/RealBufferedSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1d4e04.  v0:= v6.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4e08.  if v0 == 0 then goto L1d4e0e;
  #L1d4e0c.  goto L1d4e64;
  #L1d4e0e.  v0:= 0I;
  #L1d4e10.  v1:= v6.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4e14.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d4e1a.  v1:= temp @kind wide;
  #L1d4e1c.  v3:= 0L;
  #L1d4e20.  v5:= lcmp(v1, v3);
  #L1d4e24.  if v5 <= 0 then goto L1d4e46;
  #L1d4e28.  v1:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L1d4e2c.  v2:= v6.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4e30.  v3:= v6.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4e34.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d4e3a.  v3:= temp @kind wide;
  #L1d4e3c.  call `write`(v1, v2, v3) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L1d4e42.  goto L1d4e46;
  #L1d4e44.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d4e46.  v1:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L1d4e4a.  call `close`(v1) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L1d4e50.  goto L1d4e5a;
  #L1d4e52.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d4e54.  if v0 != 0 then goto L1d4e5a;
  #L1d4e58.  v0:= v1 @kind object;
  #L1d4e5a.  v1:= 1I;
  #L1d4e5c.  v6.`okio.RealBufferedSink.closed` @type ^`boolean` := v1 @kind boolean;
  #L1d4e60.  if v0 != 0 then goto L1d4e66;
  #L1d4e64.  return @kind void;
  #L1d4e66.  throw v0;
  catch `java.lang.Throwable` @[L1d4e10..L1d4e42] goto L1d4e44;
  catch `java.lang.Throwable` @[L1d4e46..L1d4e50] goto L1d4e52;
}
procedure `okio.BufferedSink` `emit`(`okio.RealBufferedSink` v5 @kind this) @signature `Lokio/RealBufferedSink;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d4720.  v0:= v5.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4724.  v0:= v0 ^~ 1;
  #L1d4728.  if v0 == 0 then goto L1d4754;
  #L1d472c.  v0:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4730.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d4736.  v0:= temp @kind wide;
  #L1d4738.  v2:= 0L;
  #L1d473c.  v4:= lcmp(v0, v2);
  #L1d4740.  if v4 <= 0 then goto L1d4752;
  #L1d4744.  v2:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L1d4748.  v3:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d474c.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L1d4752.  return v5 @kind object;
  #L1d4754.  v0:= new `java.lang.IllegalStateException`;
  #L1d4758.  v1:= "closed" @kind object;
  #L1d475c.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4762.  v1:= temp @kind object;
  #L1d4764.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d476a.  throw v0;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.RealBufferedSink` v5 @kind this) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d477c.  v0:= v5.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4780.  v0:= v0 ^~ 1;
  #L1d4784.  if v0 == 0 then goto L1d47b0;
  #L1d4788.  v0:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d478c.  call temp:= `completeSegmentByteCount`(v0) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @kind virtual;
  #L1d4792.  v0:= temp @kind wide;
  #L1d4794.  v2:= 0L;
  #L1d4798.  v4:= lcmp(v0, v2);
  #L1d479c.  if v4 <= 0 then goto L1d47ae;
  #L1d47a0.  v2:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L1d47a4.  v3:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d47a8.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L1d47ae.  return v5 @kind object;
  #L1d47b0.  v0:= new `java.lang.IllegalStateException`;
  #L1d47b4.  v1:= "closed" @kind object;
  #L1d47b8.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d47be.  v1:= temp @kind object;
  #L1d47c0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d47c6.  throw v0;
}
procedure `void` `flush`(`okio.RealBufferedSink` v5 @kind this) @signature `Lokio/RealBufferedSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d4e90.  v0:= v5.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4e94.  v0:= v0 ^~ 1;
  #L1d4e98.  if v0 == 0 then goto L1d4ed6;
  #L1d4e9c.  v0:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4ea0.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d4ea6.  v0:= temp @kind wide;
  #L1d4ea8.  v2:= 0L;
  #L1d4eac.  v4:= lcmp(v0, v2);
  #L1d4eb0.  if v4 <= 0 then goto L1d4eca;
  #L1d4eb4.  v0:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L1d4eb8.  v1:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4ebc.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d4ec2.  v2:= temp @kind wide;
  #L1d4ec4.  call `write`(v0, v1, v2) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L1d4eca.  v0:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L1d4ece.  call `flush`(v0) @signature `Lokio/Sink;.flush:()V` @kind interface;
  #L1d4ed4.  return @kind void;
  #L1d4ed6.  v0:= new `java.lang.IllegalStateException`;
  #L1d4eda.  v1:= "closed" @kind object;
  #L1d4ede.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4ee4.  v1:= temp @kind object;
  #L1d4ee6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4eec.  throw v0;
}
procedure `okio.Buffer` `getBuffer`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.getBuffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4708.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d470c.  return v0 @kind object;
}
procedure `boolean` `isOpen`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d45d8.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d45dc.  v0:= v0 ^~ 1;
  #L1d45e0.  return v0;
}
procedure `java.io.OutputStream` `outputStream`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4648.  v0:= new `okio.RealBufferedSink$outputStream$1`;
  #L1d464c.  call `<init>`(v0, v1) @signature `Lokio/RealBufferedSink$outputStream$1;.<init>:(Lokio/RealBufferedSink;)V` @kind direct;
  #L1d4652.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4db0.  v0:= v1.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L1d4db4.  call temp:= `timeout`(v0) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L1d4dba.  v0:= temp @kind object;
  #L1d4dbc.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.RealBufferedSink` v2 @kind this) @signature `Lokio/RealBufferedSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d4664.  v0:= new `java.lang.StringBuilder`;
  #L1d4668.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d466e.  v1:= "buffer(" @kind object;
  #L1d4672.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d4678.  v1:= v2.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L1d467c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d4682.  v1:= 41I;
  #L1d4686.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d468c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4692.  v0:= temp @kind object;
  #L1d4694.  return v0 @kind object;
}
procedure `int` `write`(`okio.RealBufferedSink` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lokio/RealBufferedSink;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d45f4.  v0:= "source" @kind object;
  #L1d45f8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d45fe.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4602.  v0:= v0 ^~ 1;
  #L1d4606.  if v0 == 0 then goto L1d461e;
  #L1d460a.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d460e.  call temp:= `write`(v0, v2) @signature `Lokio/Buffer;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L1d4614.  v2:= temp;
  #L1d4616.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d461c.  return v2;
  #L1d461e.  v2:= new `java.lang.IllegalStateException`;
  #L1d4622.  v0:= "closed" @kind object;
  #L1d4626.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d462c.  v0:= temp @kind object;
  #L1d462e.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4634.  throw v2;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/RealBufferedSink;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4880.  v0:= "byteString" @kind object;
  #L1d4884.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d488a.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d488e.  v0:= v0 ^~ 1;
  #L1d4892.  if v0 == 0 then goto L1d48aa;
  #L1d4896.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d489a.  call temp:= `write`(v0, v2) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L1d48a0.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d48a6.  v2:= temp @kind object;
  #L1d48a8.  return v2 @kind object;
  #L1d48aa.  v2:= new `java.lang.IllegalStateException`;
  #L1d48ae.  v0:= "closed" @kind object;
  #L1d48b2.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d48b8.  v0:= temp @kind object;
  #L1d48ba.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d48c0.  throw v2;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `okio.ByteString` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/RealBufferedSink;.write:(Lokio/ByteString;II)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d48d4.  v0:= "byteString" @kind object;
  #L1d48d8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d48de.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d48e2.  v0:= v0 ^~ 1;
  #L1d48e6.  if v0 == 0 then goto L1d48fe;
  #L1d48ea.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d48ee.  call temp:= `write`(v0, v2, v3, v4) @signature `Lokio/Buffer;.write:(Lokio/ByteString;II)Lokio/Buffer;` @kind virtual;
  #L1d48f4.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d48fa.  v2:= temp @kind object;
  #L1d48fc.  return v2 @kind object;
  #L1d48fe.  v2:= new `java.lang.IllegalStateException`;
  #L1d4902.  v3:= "closed" @kind object;
  #L1d4906.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d490c.  v3:= temp @kind object;
  #L1d490e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4914.  throw v2;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v5 @kind this, `okio.Source` v6 @kind object, `long` v7 ) @signature `Lokio/RealBufferedSink;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d4928.  v0:= "source" @kind object;
  #L1d492c.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d4932.  v0:= 0L;
  #L1d4936.  v2:= lcmp(v7, v0);
  #L1d493a.  if v2 <= 0 then goto L1d496c;
  #L1d493e.  v0:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4942.  call temp:= `read`(v6, v0, v7) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L1d4948.  v0:= temp @kind wide;
  #L1d494a.  v2:= -1L;
  #L1d494e.  v4:= lcmp(v0, v2);
  #L1d4952.  if v4 == 0 then goto L1d4960;
  #L1d4956.  v7:= v7 - v0 @kind long;
  #L1d4958.  call temp:= `emitCompleteSegments`(v5) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d495e.  goto L1d4932;
  #L1d4960.  v6:= new `java.io.EOFException`;
  #L1d4964.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1d496a.  throw v6;
  #L1d496c.  return v5 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `byte`[] v2 @kind object) @signature `Lokio/RealBufferedSink;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d47d8.  v0:= "source" @kind object;
  #L1d47dc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d47e2.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d47e6.  v0:= v0 ^~ 1;
  #L1d47ea.  if v0 == 0 then goto L1d4802;
  #L1d47ee.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d47f2.  call temp:= `write`(v0, v2) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L1d47f8.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d47fe.  v2:= temp @kind object;
  #L1d4800.  return v2 @kind object;
  #L1d4802.  v2:= new `java.lang.IllegalStateException`;
  #L1d4806.  v0:= "closed" @kind object;
  #L1d480a.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4810.  v0:= temp @kind object;
  #L1d4812.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4818.  throw v2;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/RealBufferedSink;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d482c.  v0:= "source" @kind object;
  #L1d4830.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d4836.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d483a.  v0:= v0 ^~ 1;
  #L1d483e.  if v0 == 0 then goto L1d4856;
  #L1d4842.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4846.  call temp:= `write`(v0, v2, v3, v4) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L1d484c.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d4852.  v2:= temp @kind object;
  #L1d4854.  return v2 @kind object;
  #L1d4856.  v2:= new `java.lang.IllegalStateException`;
  #L1d485a.  v3:= "closed" @kind object;
  #L1d485e.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4864.  v3:= temp @kind object;
  #L1d4866.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d486c.  throw v2;
}
procedure `void` `write`(`okio.RealBufferedSink` v1 @kind this, `okio.Buffer` v2 @kind object, `long` v3 ) @signature `Lokio/RealBufferedSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4f14.  v0:= "source" @kind object;
  #L1d4f18.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d4f1e.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4f22.  v0:= v0 ^~ 1;
  #L1d4f26.  if v0 == 0 then goto L1d4f3c;
  #L1d4f2a.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4f2e.  call `write`(v0, v2, v3) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L1d4f34.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d4f3a.  return @kind void;
  #L1d4f3c.  v2:= new `java.lang.IllegalStateException`;
  #L1d4f40.  v3:= "closed" @kind object;
  #L1d4f44.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4f4a.  v3:= temp @kind object;
  #L1d4f4c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4f52.  throw v2;
}
procedure `long` `writeAll`(`okio.RealBufferedSink` v7 @kind this, `okio.Source` v8 @kind object) @signature `Lokio/RealBufferedSink;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1d46a8.  v0:= "source" @kind object;
  #L1d46ac.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d46b2.  v0:= 0L;
  #L1d46b6.  v2:= v7.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d46ba.  v3:= 8192I;
  #L1d46be.  v3:= (`long`) v3 @kind i2l;
  #L1d46c0.  call temp:= `read`(v8, v2, v3) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L1d46c6.  v2:= temp @kind wide;
  #L1d46c8.  v4:= -1L;
  #L1d46cc.  v6:= lcmp(v2, v4);
  #L1d46d0.  if v6 != 0 then goto L1d46d6;
  #L1d46d4.  return v0 @kind wide;
  #L1d46d6.  v0:= v0 + v2 @kind long;
  #L1d46d8.  call temp:= `emitCompleteSegments`(v7) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d46de.  goto L1d46b6;
}
procedure `okio.BufferedSink` `writeByte`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4980.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4984.  v0:= v0 ^~ 1;
  #L1d4988.  if v0 == 0 then goto L1d49a0;
  #L1d498c.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4990.  call temp:= `writeByte`(v0, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1d4996.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d499c.  v2:= temp @kind object;
  #L1d499e.  return v2 @kind object;
  #L1d49a0.  v2:= new `java.lang.IllegalStateException`;
  #L1d49a4.  v0:= "closed" @kind object;
  #L1d49a8.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d49ae.  v0:= temp @kind object;
  #L1d49b0.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d49b6.  throw v2;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d49c8.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d49cc.  v0:= v0 ^~ 1;
  #L1d49d0.  if v0 == 0 then goto L1d49e8;
  #L1d49d4.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d49d8.  call temp:= `writeDecimalLong`(v0, v2) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L1d49de.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d49e4.  v2:= temp @kind object;
  #L1d49e6.  return v2 @kind object;
  #L1d49e8.  v2:= new `java.lang.IllegalStateException`;
  #L1d49ec.  v3:= "closed" @kind object;
  #L1d49f0.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d49f6.  v3:= temp @kind object;
  #L1d49f8.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d49fe.  throw v2;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4a10.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4a14.  v0:= v0 ^~ 1;
  #L1d4a18.  if v0 == 0 then goto L1d4a30;
  #L1d4a1c.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4a20.  call temp:= `writeHexadecimalUnsignedLong`(v0, v2) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L1d4a26.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d4a2c.  v2:= temp @kind object;
  #L1d4a2e.  return v2 @kind object;
  #L1d4a30.  v2:= new `java.lang.IllegalStateException`;
  #L1d4a34.  v3:= "closed" @kind object;
  #L1d4a38.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4a3e.  v3:= temp @kind object;
  #L1d4a40.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4a46.  throw v2;
}
procedure `okio.BufferedSink` `writeInt`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4a58.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4a5c.  v0:= v0 ^~ 1;
  #L1d4a60.  if v0 == 0 then goto L1d4a78;
  #L1d4a64.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4a68.  call temp:= `writeInt`(v0, v2) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L1d4a6e.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d4a74.  v2:= temp @kind object;
  #L1d4a76.  return v2 @kind object;
  #L1d4a78.  v2:= new `java.lang.IllegalStateException`;
  #L1d4a7c.  v0:= "closed" @kind object;
  #L1d4a80.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4a86.  v0:= temp @kind object;
  #L1d4a88.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4a8e.  throw v2;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4aa0.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4aa4.  v0:= v0 ^~ 1;
  #L1d4aa8.  if v0 == 0 then goto L1d4ac0;
  #L1d4aac.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4ab0.  call temp:= `writeIntLe`(v0, v2) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L1d4ab6.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d4abc.  v2:= temp @kind object;
  #L1d4abe.  return v2 @kind object;
  #L1d4ac0.  v2:= new `java.lang.IllegalStateException`;
  #L1d4ac4.  v0:= "closed" @kind object;
  #L1d4ac8.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4ace.  v0:= temp @kind object;
  #L1d4ad0.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4ad6.  throw v2;
}
procedure `okio.BufferedSink` `writeLong`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4ae8.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4aec.  v0:= v0 ^~ 1;
  #L1d4af0.  if v0 == 0 then goto L1d4b08;
  #L1d4af4.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4af8.  call temp:= `writeLong`(v0, v2) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L1d4afe.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d4b04.  v2:= temp @kind object;
  #L1d4b06.  return v2 @kind object;
  #L1d4b08.  v2:= new `java.lang.IllegalStateException`;
  #L1d4b0c.  v3:= "closed" @kind object;
  #L1d4b10.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4b16.  v3:= temp @kind object;
  #L1d4b18.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4b1e.  throw v2;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4b30.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4b34.  v0:= v0 ^~ 1;
  #L1d4b38.  if v0 == 0 then goto L1d4b50;
  #L1d4b3c.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4b40.  call temp:= `writeLongLe`(v0, v2) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L1d4b46.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d4b4c.  v2:= temp @kind object;
  #L1d4b4e.  return v2 @kind object;
  #L1d4b50.  v2:= new `java.lang.IllegalStateException`;
  #L1d4b54.  v3:= "closed" @kind object;
  #L1d4b58.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4b5e.  v3:= temp @kind object;
  #L1d4b60.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4b66.  throw v2;
}
procedure `okio.BufferedSink` `writeShort`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4b78.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4b7c.  v0:= v0 ^~ 1;
  #L1d4b80.  if v0 == 0 then goto L1d4b98;
  #L1d4b84.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4b88.  call temp:= `writeShort`(v0, v2) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L1d4b8e.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d4b94.  v2:= temp @kind object;
  #L1d4b96.  return v2 @kind object;
  #L1d4b98.  v2:= new `java.lang.IllegalStateException`;
  #L1d4b9c.  v0:= "closed" @kind object;
  #L1d4ba0.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4ba6.  v0:= temp @kind object;
  #L1d4ba8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4bae.  throw v2;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4bc0.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4bc4.  v0:= v0 ^~ 1;
  #L1d4bc8.  if v0 == 0 then goto L1d4be0;
  #L1d4bcc.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4bd0.  call temp:= `writeShortLe`(v0, v2) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L1d4bd6.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d4bdc.  v2:= temp @kind object;
  #L1d4bde.  return v2 @kind object;
  #L1d4be0.  v2:= new `java.lang.IllegalStateException`;
  #L1d4be4.  v0:= "closed" @kind object;
  #L1d4be8.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4bee.  v0:= temp @kind object;
  #L1d4bf0.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4bf6.  throw v2;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4c08.  v0:= "string" @kind object;
  #L1d4c0c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d4c12.  v0:= "charset" @kind object;
  #L1d4c16.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d4c1c.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4c20.  v0:= v0 ^~ 1;
  #L1d4c24.  if v0 == 0 then goto L1d4c3c;
  #L1d4c28.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4c2c.  call temp:= `writeString`(v0, v2, v3, v4, v5) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L1d4c32.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d4c38.  v2:= temp @kind object;
  #L1d4c3a.  return v2 @kind object;
  #L1d4c3c.  v2:= new `java.lang.IllegalStateException`;
  #L1d4c40.  v3:= "closed" @kind object;
  #L1d4c44.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4c4a.  v3:= temp @kind object;
  #L1d4c4c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4c52.  throw v2;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object, `java.nio.charset.Charset` v3 @kind object) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4c64.  v0:= "string" @kind object;
  #L1d4c68.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d4c6e.  v0:= "charset" @kind object;
  #L1d4c72.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d4c78.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4c7c.  v0:= v0 ^~ 1;
  #L1d4c80.  if v0 == 0 then goto L1d4c98;
  #L1d4c84.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4c88.  call temp:= `writeString`(v0, v2, v3) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L1d4c8e.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d4c94.  v2:= temp @kind object;
  #L1d4c96.  return v2 @kind object;
  #L1d4c98.  v2:= new `java.lang.IllegalStateException`;
  #L1d4c9c.  v3:= "closed" @kind object;
  #L1d4ca0.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4ca6.  v3:= temp @kind object;
  #L1d4ca8.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4cae.  throw v2;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4cc0.  v0:= "string" @kind object;
  #L1d4cc4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d4cca.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4cce.  v0:= v0 ^~ 1;
  #L1d4cd2.  if v0 == 0 then goto L1d4cea;
  #L1d4cd6.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4cda.  call temp:= `writeUtf8`(v0, v2) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L1d4ce0.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d4ce6.  v2:= temp @kind object;
  #L1d4ce8.  return v2 @kind object;
  #L1d4cea.  v2:= new `java.lang.IllegalStateException`;
  #L1d4cee.  v0:= "closed" @kind object;
  #L1d4cf2.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4cf8.  v0:= temp @kind object;
  #L1d4cfa.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4d00.  throw v2;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4d14.  v0:= "string" @kind object;
  #L1d4d18.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d4d1e.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4d22.  v0:= v0 ^~ 1;
  #L1d4d26.  if v0 == 0 then goto L1d4d3e;
  #L1d4d2a.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4d2e.  call temp:= `writeUtf8`(v0, v2, v3, v4) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L1d4d34.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d4d3a.  v2:= temp @kind object;
  #L1d4d3c.  return v2 @kind object;
  #L1d4d3e.  v2:= new `java.lang.IllegalStateException`;
  #L1d4d42.  v3:= "closed" @kind object;
  #L1d4d46.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4d4c.  v3:= temp @kind object;
  #L1d4d4e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4d54.  throw v2;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d4d68.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1d4d6c.  v0:= v0 ^~ 1;
  #L1d4d70.  if v0 == 0 then goto L1d4d88;
  #L1d4d74.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d4d78.  call temp:= `writeUtf8CodePoint`(v0, v2) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L1d4d7e.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1d4d84.  v2:= temp @kind object;
  #L1d4d86.  return v2 @kind object;
  #L1d4d88.  v2:= new `java.lang.IllegalStateException`;
  #L1d4d8c.  v0:= "closed" @kind object;
  #L1d4d90.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d4d96.  v0:= temp @kind object;
  #L1d4d98.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d4d9e.  throw v2;
}
