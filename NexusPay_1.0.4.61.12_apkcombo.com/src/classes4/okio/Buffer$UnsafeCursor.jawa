record `okio.Buffer$UnsafeCursor` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `okio.Segment` `okio.Buffer$UnsafeCursor.a` @AccessFlag PRIVATE;
  `okio.Buffer` `okio.Buffer$UnsafeCursor.buffer` @AccessFlag PUBLIC;
  `byte`[] `okio.Buffer$UnsafeCursor.data` @AccessFlag PUBLIC;
  `int` `okio.Buffer$UnsafeCursor.end` @AccessFlag PUBLIC;
  `long` `okio.Buffer$UnsafeCursor.offset` @AccessFlag PUBLIC;
  `boolean` `okio.Buffer$UnsafeCursor.readWrite` @AccessFlag PUBLIC;
  `int` `okio.Buffer$UnsafeCursor.start` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`okio.Buffer$UnsafeCursor` v2 @kind this) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1caa60.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1caa66.  v0:= -1L;
  #L1caa6a.  v2.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v0 @kind wide;
  #L1caa6e.  v0:= -1I;
  #L1caa70.  v2.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v0;
  #L1caa74.  v2.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v0;
  #L1caa78.  return @kind void;
}
procedure `void` `close`(`okio.Buffer$UnsafeCursor` v3 @kind this) @signature `Lokio/Buffer$UnsafeCursor;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1caa8c.  v0:= v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1caa90.  if v0 == 0 then goto L1caa98;
  #L1caa94.  v0:= 1I;
  #L1caa96.  goto L1caa9a;
  #L1caa98.  v0:= 0I;
  #L1caa9a.  if v0 == 0 then goto L1caac2;
  #L1caa9e.  v0:= 0I;
  #L1caaa0.  v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v0 @kind object;
  #L1caaa4.  call `setSegment$okio`(v3, v0) @signature `Lokio/Buffer$UnsafeCursor;.setSegment$okio:(Lokio/Segment;)V` @kind virtual;
  #L1caaaa.  v1:= -1L;
  #L1caaae.  v3.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v1 @kind wide;
  #L1caab2.  v3.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v0 @kind object;
  #L1caab6.  v0:= -1I;
  #L1caab8.  v3.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v0;
  #L1caabc.  v3.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v0;
  #L1caac0.  return @kind void;
  #L1caac2.  v0:= new `java.lang.IllegalStateException`;
  #L1caac6.  v1:= "not attached to a buffer" @kind object;
  #L1caaca.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1caad0.  v1:= temp @kind object;
  #L1caad2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1caad8.  throw v0;
}
procedure `long` `expandBuffer`(`okio.Buffer$UnsafeCursor` v9 @kind this, `int` v10 ) @signature `Lokio/Buffer$UnsafeCursor;.expandBuffer:(I)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1ca788.  v0:= 1I;
  #L1ca78a.  v1:= 0I;
  #L1ca78c.  if v10 <= 0 then goto L1ca794;
  #L1ca790.  v2:= 1I;
  #L1ca792.  goto L1ca796;
  #L1ca794.  v2:= 0I;
  #L1ca796.  if v2 == 0 then goto L1ca868;
  #L1ca79a.  v2:= 8192I;
  #L1ca79e.  if v10 > v2 then goto L1ca7a4;
  #L1ca7a2.  goto L1ca7a6;
  #L1ca7a4.  v0:= 0I;
  #L1ca7a6.  if v0 == 0 then goto L1ca832;
  #L1ca7aa.  v0:= v9.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ca7ae.  if v0 == 0 then goto L1ca81a;
  #L1ca7b2.  v1:= v9.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` @kind boolean;
  #L1ca7b6.  if v1 == 0 then goto L1ca802;
  #L1ca7ba.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ca7c0.  v3:= temp @kind wide;
  #L1ca7c2.  call temp:= `writableSegment$okio`(v0, v10) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1ca7c8.  v10:= temp @kind object;
  #L1ca7ca.  v1:= v10.`okio.Segment.limit` @type ^`int`;
  #L1ca7ce.  v1:= v1 - 8192;
  #L1ca7d2.  v10.`okio.Segment.limit` @type ^`int` := v2;
  #L1ca7d6.  v5:= (`long`) v1 @kind i2l;
  #L1ca7d8.  v7:= v3 + v5 @kind long;
  #L1ca7dc.  call `setSize$okio`(v0, v7) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1ca7e2.  call `setSegment$okio`(v9, v10) @signature `Lokio/Buffer$UnsafeCursor;.setSegment$okio:(Lokio/Segment;)V` @kind virtual;
  #L1ca7e8.  v9.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v3 @kind wide;
  #L1ca7ec.  v10:= v10.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ca7f0.  v9.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v10 @kind object;
  #L1ca7f4.  v10:= v1 - 8192;
  #L1ca7f8.  v9.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v10;
  #L1ca7fc.  v9.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v2;
  #L1ca800.  return v5 @kind wide;
  #L1ca802.  v10:= new `java.lang.IllegalStateException`;
  #L1ca806.  v0:= "expandBuffer() only permitted for read/write buffers" @kind object;
  #L1ca80a.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ca810.  v0:= temp @kind object;
  #L1ca812.  call `<init>`(v10, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ca818.  throw v10;
  #L1ca81a.  v10:= new `java.lang.IllegalStateException`;
  #L1ca81e.  v0:= "not attached to a buffer" @kind object;
  #L1ca822.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ca828.  v0:= temp @kind object;
  #L1ca82a.  call `<init>`(v10, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ca830.  throw v10;
  #L1ca832.  v0:= new `java.lang.StringBuilder`;
  #L1ca836.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ca83c.  v1:= "minByteCount > Segment.SIZE: " @kind object;
  #L1ca840.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ca846.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ca84c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ca852.  v10:= temp @kind object;
  #L1ca854.  v0:= new `java.lang.IllegalArgumentException`;
  #L1ca858.  call temp:= `toString`(v10) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ca85e.  v10:= temp @kind object;
  #L1ca860.  call `<init>`(v0, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ca866.  throw v0;
  #L1ca868.  v0:= new `java.lang.StringBuilder`;
  #L1ca86c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ca872.  v1:= "minByteCount <= 0: " @kind object;
  #L1ca876.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ca87c.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ca882.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ca888.  v10:= temp @kind object;
  #L1ca88a.  v0:= new `java.lang.IllegalArgumentException`;
  #L1ca88e.  call temp:= `toString`(v10) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ca894.  v10:= temp @kind object;
  #L1ca896.  call `<init>`(v0, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ca89c.  throw v0;
}
procedure `okio.Segment` `getSegment$okio`(`okio.Buffer$UnsafeCursor` v1 @kind this) @signature `Lokio/Buffer$UnsafeCursor;.getSegment$okio:()Lokio/Segment;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1caa48.  v0:= v1.`okio.Buffer$UnsafeCursor.a` @type ^`okio.Segment` @kind object;
  #L1caa4c.  return v0 @kind object;
}
procedure `int` `next`(`okio.Buffer$UnsafeCursor` v5 @kind this) @signature `Lokio/Buffer$UnsafeCursor;.next:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ca4f0.  v0:= v5.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1ca4f4.  v2:= v5.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ca4f8.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ca4fe.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ca504.  v2:= temp @kind wide;
  #L1ca506.  v4:= lcmp(v0, v2);
  #L1ca50a.  if v4 == 0 then goto L1ca512;
  #L1ca50e.  v0:= 1I;
  #L1ca510.  goto L1ca514;
  #L1ca512.  v0:= 0I;
  #L1ca514.  if v0 == 0 then goto L1ca546;
  #L1ca518.  v0:= v5.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1ca51c.  v2:= -1L;
  #L1ca520.  v4:= lcmp(v0, v2);
  #L1ca524.  if v4 != 0 then goto L1ca52e;
  #L1ca528.  v0:= 0L;
  #L1ca52c.  goto L1ca53c;
  #L1ca52e.  v2:= v5.`okio.Buffer$UnsafeCursor.end` @type ^`int`;
  #L1ca532.  v3:= v5.`okio.Buffer$UnsafeCursor.start` @type ^`int`;
  #L1ca536.  v2:= v2 - v3 @kind int;
  #L1ca538.  v2:= (`long`) v2 @kind i2l;
  #L1ca53a.  v0:= v0 + v2 @kind long;
  #L1ca53c.  call temp:= `seek`(v5, v0) @signature `Lokio/Buffer$UnsafeCursor;.seek:(J)I` @kind virtual;
  #L1ca542.  v0:= temp;
  #L1ca544.  return v0;
  #L1ca546.  v0:= new `java.lang.IllegalStateException`;
  #L1ca54a.  v1:= "no more bytes" @kind object;
  #L1ca54e.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ca554.  v1:= temp @kind object;
  #L1ca556.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ca55c.  throw v0;
}
procedure `long` `resizeBuffer`(`okio.Buffer$UnsafeCursor` v16 @kind this, `long` v17 ) @signature `Lokio/Buffer$UnsafeCursor;.resizeBuffer:(J)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L1ca8b0.  v0:= v16 @kind object;
  #L1ca8b4.  v1:= v17 @kind wide;
  #L1ca8b8.  v3:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ca8bc.  if v3 == 0 then goto L1caa1e;
  #L1ca8c0.  v4:= v0.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` @kind boolean;
  #L1ca8c4.  if v4 == 0 then goto L1caa06;
  #L1ca8c8.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ca8ce.  v4:= temp @kind wide;
  #L1ca8d0.  v7:= 1I;
  #L1ca8d2.  v8:= 0L;
  #L1ca8d6.  v10:= lcmp(v1, v4);
  #L1ca8da.  if v10 > 0 then goto L1ca996;
  #L1ca8de.  v10:= lcmp(v1, v8);
  #L1ca8e2.  if v10 < 0 then goto L1ca8ea;
  #L1ca8e6.  v6:= 1I;
  #L1ca8e8.  goto L1ca8ec;
  #L1ca8ea.  v6:= 0I;
  #L1ca8ec.  if v6 == 0 then goto L1ca960;
  #L1ca8f0.  v6:= v4 - v1 @kind long;
  #L1ca8f4.  v10:= lcmp(v6, v8);
  #L1ca8f8.  if v10 <= 0 then goto L1ca944;
  #L1ca8fc.  v10:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ca900.  call `checkNotNull`(v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ca906.  v10:= v10.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ca90a.  call `checkNotNull`(v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ca910.  v11:= v10.`okio.Segment.limit` @type ^`int`;
  #L1ca914.  v12:= v10.`okio.Segment.pos` @type ^`int`;
  #L1ca918.  v12:= v11 - v12 @kind int;
  #L1ca91c.  v12:= (`long`) v12 @kind i2l;
  #L1ca91e.  v14:= lcmp(v12, v6);
  #L1ca922.  if v14 > 0 then goto L1ca93c;
  #L1ca926.  call temp:= `pop`(v10) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1ca92c.  v11:= temp @kind object;
  #L1ca92e.  v3.`okio.Buffer.head` @type ^`okio.Segment` := v11 @kind object;
  #L1ca932.  call `recycle`(v10) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1ca938.  v6:= v6 - v12 @kind long;
  #L1ca93a.  goto L1ca8f4;
  #L1ca93c.  v7:= (`int`) v6 @kind l2i;
  #L1ca93e.  v11:= v11 - v7 @kind int;
  #L1ca940.  v10.`okio.Segment.limit` @type ^`int` := v11;
  #L1ca944.  v6:= 0I;
  #L1ca946.  call `setSegment$okio`(v0, v6) @signature `Lokio/Buffer$UnsafeCursor;.setSegment$okio:(Lokio/Segment;)V` @kind virtual;
  #L1ca94c.  v0.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v1 @kind wide;
  #L1ca950.  v0.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v6 @kind object;
  #L1ca954.  v6:= -1I;
  #L1ca956.  v0.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v6;
  #L1ca95a.  v0.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v6;
  #L1ca95e.  goto L1ca9fe;
  #L1ca960.  v3:= new `java.lang.StringBuilder`;
  #L1ca964.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ca96a.  v4:= "newSize < 0: " @kind object;
  #L1ca96e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ca974.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ca97a.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ca980.  v1:= temp @kind object;
  #L1ca982.  v2:= new `java.lang.IllegalArgumentException`;
  #L1ca986.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ca98c.  v1:= temp @kind object;
  #L1ca98e.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ca994.  throw v2;
  #L1ca996.  if v10 <= 0 then goto L1ca9fe;
  #L1ca99a.  v10:= v1 - v4 @kind long;
  #L1ca99e.  v12:= 1I;
  #L1ca9a0.  v13:= lcmp(v10, v8);
  #L1ca9a4.  if v13 <= 0 then goto L1ca9fe;
  #L1ca9a8.  call temp:= `writableSegment$okio`(v3, v7) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1ca9ae.  v13:= temp @kind object;
  #L1ca9b0.  v14:= v13.`okio.Segment.limit` @type ^`int`;
  #L1ca9b4.  v14:= v14 - 8192;
  #L1ca9b8.  v14:= (`long`) v14 @kind i2l;
  #L1ca9ba.  call temp:= `min`(v10, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1ca9c0.  v14:= temp @kind wide;
  #L1ca9c2.  v15:= (`int`) v14 @kind l2i;
  #L1ca9c4.  v14:= v13.`okio.Segment.limit` @type ^`int`;
  #L1ca9c8.  v14:= v14 + v15 @kind int;
  #L1ca9ca.  v13.`okio.Segment.limit` @type ^`int` := v14;
  #L1ca9ce.  v6:= (`long`) v15 @kind i2l;
  #L1ca9d0.  v10:= v10 - v6 @kind long;
  #L1ca9d2.  if v12 == 0 then goto L1ca9fa;
  #L1ca9d6.  call `setSegment$okio`(v0, v13) @signature `Lokio/Buffer$UnsafeCursor;.setSegment$okio:(Lokio/Segment;)V` @kind virtual;
  #L1ca9dc.  v0.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v4 @kind wide;
  #L1ca9e0.  v6:= v13.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ca9e4.  v0.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v6 @kind object;
  #L1ca9e8.  v6:= v13.`okio.Segment.limit` @type ^`int`;
  #L1ca9ec.  v7:= v6 - v15 @kind int;
  #L1ca9f0.  v0.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v7;
  #L1ca9f4.  v0.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v6;
  #L1ca9f8.  v12:= 0I;
  #L1ca9fa.  v7:= 1I;
  #L1ca9fc.  goto L1ca9a0;
  #L1ca9fe.  call `setSize$okio`(v3, v1) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1caa04.  return v4 @kind wide;
  #L1caa06.  v1:= new `java.lang.IllegalStateException`;
  #L1caa0a.  v2:= "resizeBuffer() only permitted for read/write buffers" @kind object;
  #L1caa0e.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1caa14.  v2:= temp @kind object;
  #L1caa16.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1caa1c.  throw v1;
  #L1caa1e.  v1:= new `java.lang.IllegalStateException`;
  #L1caa22.  v2:= "not attached to a buffer" @kind object;
  #L1caa26.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1caa2c.  v2:= temp @kind object;
  #L1caa2e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1caa34.  throw v1;
}
procedure `int` `seek`(`okio.Buffer$UnsafeCursor` v17 @kind this, `long` v18 ) @signature `Lokio/Buffer$UnsafeCursor;.seek:(J)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L1ca570.  v0:= v17 @kind object;
  #L1ca574.  v1:= v18 @kind wide;
  #L1ca578.  v3:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ca57c.  if v3 == 0 then goto L1ca760;
  #L1ca580.  v4:= -1I;
  #L1ca582.  v5:= (`long`) v4 @kind i2l;
  #L1ca584.  v7:= lcmp(v1, v5);
  #L1ca588.  if v7 < 0 then goto L1ca71a;
  #L1ca58c.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ca592.  v5:= temp @kind wide;
  #L1ca594.  v7:= lcmp(v1, v5);
  #L1ca598.  if v7 > 0 then goto L1ca71a;
  #L1ca59c.  v5:= -1L;
  #L1ca5a0.  v7:= lcmp(v1, v5);
  #L1ca5a4.  if v7 == 0 then goto L1ca700;
  #L1ca5a8.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ca5ae.  v5:= temp @kind wide;
  #L1ca5b0.  v7:= lcmp(v1, v5);
  #L1ca5b4.  if v7 != 0 then goto L1ca5bc;
  #L1ca5b8.  goto L1ca700;
  #L1ca5bc.  v4:= 0L;
  #L1ca5c0.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ca5c6.  v6:= temp @kind wide;
  #L1ca5c8.  v8:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ca5cc.  call temp:= `getSegment$okio`(v17) @signature `Lokio/Buffer$UnsafeCursor;.getSegment$okio:()Lokio/Segment;` @kind virtual;
  #L1ca5d2.  v9:= temp @kind object;
  #L1ca5d4.  if v9 == 0 then goto L1ca622;
  #L1ca5d8.  v9:= v0.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1ca5dc.  v11:= v0.`okio.Buffer$UnsafeCursor.start` @type ^`int`;
  #L1ca5e0.  call temp:= `getSegment$okio`(v17) @signature `Lokio/Buffer$UnsafeCursor;.getSegment$okio:()Lokio/Segment;` @kind virtual;
  #L1ca5e6.  v12:= temp @kind object;
  #L1ca5e8.  call `checkNotNull`(v12) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ca5ee.  v12:= v12.`okio.Segment.pos` @type ^`int`;
  #L1ca5f2.  v11:= v11 - v12 @kind int;
  #L1ca5f4.  v11:= (`long`) v11 @kind i2l;
  #L1ca5f6.  v9:= v9 - v11 @kind long;
  #L1ca5f8.  v11:= lcmp(v9, v1);
  #L1ca5fc.  if v11 <= 0 then goto L1ca612;
  #L1ca600.  call temp:= `getSegment$okio`(v17) @signature `Lokio/Buffer$UnsafeCursor;.getSegment$okio:()Lokio/Segment;` @kind virtual;
  #L1ca606.  v6:= temp @kind object;
  #L1ca608.  v15:= v8 @kind object;
  #L1ca60a.  v8:= v6 @kind object;
  #L1ca60c.  v6:= v9 @kind wide;
  #L1ca60e.  v9:= v15 @kind object;
  #L1ca610.  goto L1ca624;
  #L1ca612.  call temp:= `getSegment$okio`(v17) @signature `Lokio/Buffer$UnsafeCursor;.getSegment$okio:()Lokio/Segment;` @kind virtual;
  #L1ca618.  v4:= temp @kind object;
  #L1ca61a.  v15:= v9 @kind wide;
  #L1ca61c.  v9:= v4 @kind object;
  #L1ca61e.  v4:= v15 @kind wide;
  #L1ca620.  goto L1ca624;
  #L1ca622.  v9:= v8 @kind object;
  #L1ca624.  v10:= v6 - v1 @kind long;
  #L1ca628.  v12:= v1 - v4 @kind long;
  #L1ca62c.  v14:= lcmp(v10, v12);
  #L1ca630.  if v14 <= 0 then goto L1ca65e;
  #L1ca634.  call `checkNotNull`(v9) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ca63a.  v6:= v9.`okio.Segment.limit` @type ^`int`;
  #L1ca63e.  v7:= v9.`okio.Segment.pos` @type ^`int`;
  #L1ca642.  v8:= v6 - v7 @kind int;
  #L1ca646.  v10:= (`long`) v8 @kind i2l;
  #L1ca648.  v10:= v10 + v4 @kind long;
  #L1ca64a.  v8:= lcmp(v1, v10);
  #L1ca64e.  if v8 < 0 then goto L1ca68a;
  #L1ca652.  v6:= v6 - v7 @kind int;
  #L1ca654.  v6:= (`long`) v6 @kind i2l;
  #L1ca656.  v4:= v4 + v6 @kind long;
  #L1ca658.  v9:= v9.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1ca65c.  goto L1ca634;
  #L1ca65e.  v4:= lcmp(v6, v1);
  #L1ca662.  if v4 <= 0 then goto L1ca686;
  #L1ca666.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ca66c.  v8:= v8.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ca670.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ca676.  v4:= v8.`okio.Segment.limit` @type ^`int`;
  #L1ca67a.  v5:= v8.`okio.Segment.pos` @type ^`int`;
  #L1ca67e.  v4:= v4 - v5 @kind int;
  #L1ca680.  v4:= (`long`) v4 @kind i2l;
  #L1ca682.  v6:= v6 - v4 @kind long;
  #L1ca684.  goto L1ca65e;
  #L1ca686.  v4:= v6 @kind wide;
  #L1ca688.  v9:= v8 @kind object;
  #L1ca68a.  v6:= v0.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` @kind boolean;
  #L1ca68e.  if v6 == 0 then goto L1ca6cc;
  #L1ca692.  call `checkNotNull`(v9) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ca698.  v6:= v9.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L1ca69c.  if v6 == 0 then goto L1ca6cc;
  #L1ca6a0.  call temp:= `unsharedCopy`(v9) @signature `Lokio/Segment;.unsharedCopy:()Lokio/Segment;` @kind virtual;
  #L1ca6a6.  v6:= temp @kind object;
  #L1ca6a8.  v7:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ca6ac.  if v7 != v9 then goto L1ca6b4;
  #L1ca6b0.  v3.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L1ca6b4.  call temp:= `push`(v9, v6) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1ca6ba.  v9:= temp @kind object;
  #L1ca6bc.  v3:= v9.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ca6c0.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ca6c6.  call temp:= `pop`(v3) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1ca6cc.  call `setSegment$okio`(v0, v9) @signature `Lokio/Buffer$UnsafeCursor;.setSegment$okio:(Lokio/Segment;)V` @kind virtual;
  #L1ca6d2.  v0.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v1 @kind wide;
  #L1ca6d6.  call `checkNotNull`(v9) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ca6dc.  v3:= v9.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ca6e0.  v0.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v3 @kind object;
  #L1ca6e4.  v3:= v9.`okio.Segment.pos` @type ^`int`;
  #L1ca6e8.  v1:= v1 - v4 @kind long;
  #L1ca6ea.  v2:= (`int`) v1 @kind l2i;
  #L1ca6ec.  v3:= v3 + v2 @kind int;
  #L1ca6ee.  v0.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v3;
  #L1ca6f2.  v1:= v9.`okio.Segment.limit` @type ^`int`;
  #L1ca6f6.  v0.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v1;
  #L1ca6fa.  v4:= v1 - v3 @kind int;
  #L1ca6fe.  goto L1ca718;
  #L1ca700.  v3:= 0I;
  #L1ca702.  call `setSegment$okio`(v0, v3) @signature `Lokio/Buffer$UnsafeCursor;.setSegment$okio:(Lokio/Segment;)V` @kind virtual;
  #L1ca708.  v0.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v1 @kind wide;
  #L1ca70c.  v0.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v3 @kind object;
  #L1ca710.  v0.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v4;
  #L1ca714.  v0.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v4;
  #L1ca718.  return v4;
  #L1ca71a.  v4:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L1ca71e.  v5:= new `java.lang.StringBuilder`;
  #L1ca722.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ca728.  v6:= "offset=" @kind object;
  #L1ca72c.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ca732.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ca738.  v1:= " > size=" @kind object;
  #L1ca73c.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ca742.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ca748.  v1:= temp @kind wide;
  #L1ca74a.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ca750.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ca756.  v1:= temp @kind object;
  #L1ca758.  call `<init>`(v4, v1) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ca75e.  throw v4;
  #L1ca760.  v1:= new `java.lang.IllegalStateException`;
  #L1ca764.  v2:= "not attached to a buffer" @kind object;
  #L1ca768.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ca76e.  v2:= temp @kind object;
  #L1ca770.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ca776.  throw v1;
}
procedure `void` `setSegment$okio`(`okio.Buffer$UnsafeCursor` v0 @kind this, `okio.Segment` v1 @kind object) @signature `Lokio/Buffer$UnsafeCursor;.setSegment$okio:(Lokio/Segment;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1caaec.  v0.`okio.Buffer$UnsafeCursor.a` @type ^`okio.Segment` := v1 @kind object;
  #L1caaf0.  return @kind void;
}
