record `okio.Buffer$inputStream$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.InputStream` @kind class {
  `okio.Buffer` `okio.Buffer$inputStream$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Buffer$inputStream$1` v0 @kind this, `okio.Buffer` v1 @kind object) @signature `Lokio/Buffer$inputStream$1;.<init>:(Lokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1cabd4.  v0.`okio.Buffer$inputStream$1.a` @type ^`okio.Buffer` := v1 @kind object;
  #L1cabd8.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L1cabde.  return @kind void;
}
procedure `int` `available`(`okio.Buffer$inputStream$1` v4 @kind this) @signature `Lokio/Buffer$inputStream$1;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1cab04.  v0:= v4.`okio.Buffer$inputStream$1.a` @type ^`okio.Buffer` @kind object;
  #L1cab08.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cab0e.  v0:= temp @kind wide;
  #L1cab10.  v2:= 2147483647I;
  #L1cab16.  v2:= (`long`) v2 @kind i2l;
  #L1cab18.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1cab1e.  v0:= temp @kind wide;
  #L1cab20.  v1:= (`int`) v0 @kind l2i;
  #L1cab22.  return v1;
}
procedure `void` `close`(`okio.Buffer$inputStream$1` v0 @kind this) @signature `Lokio/Buffer$inputStream$1;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L1cabf0.  return @kind void;
}
procedure `int` `read`(`okio.Buffer$inputStream$1` v5 @kind this) @signature `Lokio/Buffer$inputStream$1;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1cab34.  v0:= v5.`okio.Buffer$inputStream$1.a` @type ^`okio.Buffer` @kind object;
  #L1cab38.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cab3e.  v0:= temp @kind wide;
  #L1cab40.  v2:= 0L;
  #L1cab44.  v4:= lcmp(v0, v2);
  #L1cab48.  if v4 <= 0 then goto L1cab5e;
  #L1cab4c.  v0:= v5.`okio.Buffer$inputStream$1.a` @type ^`okio.Buffer` @kind object;
  #L1cab50.  call temp:= `readByte`(v0) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1cab56.  v0:= temp;
  #L1cab58.  v0:= v0 ^& 255;
  #L1cab5c.  goto L1cab60;
  #L1cab5e.  v0:= -1I;
  #L1cab60.  return v0;
}
procedure `int` `read`(`okio.Buffer$inputStream$1` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/Buffer$inputStream$1;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cab74.  v0:= "sink" @kind object;
  #L1cab78.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cab7e.  v0:= v1.`okio.Buffer$inputStream$1.a` @type ^`okio.Buffer` @kind object;
  #L1cab82.  call temp:= `read`(v0, v2, v3, v4) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L1cab88.  v2:= temp;
  #L1cab8a.  return v2;
}
procedure `java.lang.String` `toString`(`okio.Buffer$inputStream$1` v2 @kind this) @signature `Lokio/Buffer$inputStream$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cab9c.  v0:= new `java.lang.StringBuilder`;
  #L1caba0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1caba6.  v1:= v2.`okio.Buffer$inputStream$1.a` @type ^`okio.Buffer` @kind object;
  #L1cabaa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cabb0.  v1:= ".inputStream()" @kind object;
  #L1cabb4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cabba.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cabc0.  v0:= temp @kind object;
  #L1cabc2.  return v0 @kind object;
}
