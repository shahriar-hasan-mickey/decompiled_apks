record `okio.Buffer` @kind class @AccessFlag PUBLIC_FINAL extends `okio.BufferedSource` @kind interface, `okio.BufferedSink` @kind interface, `java.lang.Cloneable` @kind interface, `java.nio.channels.ByteChannel` @kind interface {
  `long` `okio.Buffer.a` @AccessFlag PRIVATE;
  `okio.Segment` `okio.Buffer.head` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ce4d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ce4da.  return @kind void;
}
procedure `okio.ByteString` `a`(`okio.Buffer` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lokio/Buffer;.a:(Ljava/lang/String;)Lokio/ByteString;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1cded4.  call temp:= `getInstance`(v6) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L1cdeda.  v6:= temp @kind object;
  #L1cdedc.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cdee0.  if v0 == 0 then goto L1cdf26;
  #L1cdee4.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cdee8.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cdeec.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L1cdef0.  v3:= v3 - v2 @kind int;
  #L1cdef2.  call `update`(v6, v1, v2, v3) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L1cdef8.  v1:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cdefc.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cdf02.  if v1 == v0 then goto L1cdf26;
  #L1cdf06.  v2:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cdf0a.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L1cdf0e.  v4:= v1.`okio.Segment.limit` @type ^`int`;
  #L1cdf12.  v4:= v4 - v3 @kind int;
  #L1cdf14.  call `update`(v6, v2, v3, v4) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L1cdf1a.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cdf1e.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cdf24.  goto L1cdf02;
  #L1cdf26.  v0:= new `okio.ByteString`;
  #L1cdf2a.  call temp:= `digest`(v6) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L1cdf30.  v6:= temp @kind object;
  #L1cdf32.  v1:= "messageDigest.digest()" @kind object;
  #L1cdf36.  call `checkNotNullExpressionValue`(v6, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cdf3c.  call `<init>`(v0, v6) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L1cdf42.  return v0 @kind object;
}
procedure `okio.ByteString` `b`(`okio.Buffer` v5 @kind this, `java.lang.String` v6 @kind object, `okio.ByteString` v7 @kind object) @signature `Lokio/Buffer;.b:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1cdf54.  call temp:= `getInstance`(v6) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L1cdf5a.  v0:= temp @kind object;
  #L1cdf5c.  v1:= new `javax.crypto.spec.SecretKeySpec`;
  #L1cdf60.  call temp:= `internalArray$okio`(v7) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L1cdf66.  v7:= temp @kind object;
  #L1cdf68.  call `<init>`(v1, v7, v6) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L1cdf6e.  call `init`(v0, v1) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L1cdf74.  v6:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cdf78.  if v6 == 0 then goto L1cdfc6;
  #L1cdf7c.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cdf80.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L1cdf84.  v2:= v6.`okio.Segment.limit` @type ^`int`;
  #L1cdf88.  v3:= v6.`okio.Segment.pos` @type ^`int`;
  #L1cdf8c.  v2:= v2 - v3 @kind int;
  #L1cdf8e.  call `update`(v0, v7, v1, v2) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L1cdf94.  v7:= v6.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cdf98.  call `checkNotNull`(v7) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cdf9e.  if v7 == v6 then goto L1cdfc6;
  #L1cdfa2.  v1:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cdfa6.  v2:= v7.`okio.Segment.pos` @type ^`int`;
  #L1cdfaa.  v3:= v7.`okio.Segment.limit` @type ^`int`;
  #L1cdfae.  v4:= v7.`okio.Segment.pos` @type ^`int`;
  #L1cdfb2.  v3:= v3 - v4 @kind int;
  #L1cdfb4.  call `update`(v0, v1, v2, v3) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L1cdfba.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cdfbe.  call `checkNotNull`(v7) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cdfc4.  goto L1cdf9e;
  #L1cdfc6.  v6:= new `okio.ByteString`;
  #L1cdfca.  call temp:= `doFinal`(v0) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L1cdfd0.  v7:= temp @kind object;
  #L1cdfd2.  v0:= "mac.doFinal()" @kind object;
  #L1cdfd6.  call `checkNotNullExpressionValue`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cdfdc.  call `<init>`(v6, v7) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L1cdfe2.  return v6 @kind object;
  #L1cdfe4.  v6:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L1cdfe6.  v7:= new `java.lang.IllegalArgumentException`;
  #L1cdfea.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1cdff0.  throw v7;
  catch `java.security.InvalidKeyException` @[L1cdf54..L1cdfe2] goto L1cdfe4;
}
procedure `void` `c`(`okio.Buffer` v4 @kind this, `java.io.InputStream` v5 @kind object, `long` v6 , `boolean` v8 ) @signature `Lokio/Buffer;.c:(Ljava/io/InputStream;JZ)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ce534.  v0:= 0L;
  #L1ce538.  v2:= lcmp(v6, v0);
  #L1ce53c.  if v2 > 0 then goto L1ce548;
  #L1ce540.  if v8 == 0 then goto L1ce546;
  #L1ce544.  goto L1ce548;
  #L1ce546.  return @kind void;
  #L1ce548.  v0:= 1I;
  #L1ce54a.  call temp:= `writableSegment$okio`(v4, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1ce550.  v0:= temp @kind object;
  #L1ce552.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L1ce556.  v1:= v1 - 8192;
  #L1ce55a.  v1:= (`long`) v1 @kind i2l;
  #L1ce55c.  call temp:= `min`(v6, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1ce562.  v1:= temp @kind wide;
  #L1ce564.  v2:= (`int`) v1 @kind l2i;
  #L1ce566.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ce56a.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L1ce56e.  call temp:= `read`(v5, v1, v3, v2) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L1ce574.  v1:= temp;
  #L1ce576.  v2:= -1I;
  #L1ce578.  if v1 != v2 then goto L1ce5ac;
  #L1ce57c.  v5:= v0.`okio.Segment.pos` @type ^`int`;
  #L1ce580.  v6:= v0.`okio.Segment.limit` @type ^`int`;
  #L1ce584.  if v5 != v6 then goto L1ce59a;
  #L1ce588.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1ce58e.  v5:= temp @kind object;
  #L1ce590.  v4.`okio.Buffer.head` @type ^`okio.Segment` := v5 @kind object;
  #L1ce594.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1ce59a.  if v8 == 0 then goto L1ce5a0;
  #L1ce59e.  return @kind void;
  #L1ce5a0.  v5:= new `java.io.EOFException`;
  #L1ce5a4.  call `<init>`(v5) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1ce5aa.  throw v5;
  #L1ce5ac.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1ce5b0.  v2:= v2 + v1 @kind int;
  #L1ce5b2.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L1ce5b6.  v2:= v4.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1ce5ba.  v0:= (`long`) v1 @kind i2l;
  #L1ce5bc.  v2:= v2 + v0 @kind long;
  #L1ce5be.  v4.`okio.Buffer.a` @type ^`long` := v2 @kind wide;
  #L1ce5c2.  v6:= v6 - v0 @kind long;
  #L1ce5c4.  goto L1ce534;
}
procedure `okio.Buffer` `copyTo$default`(`okio.Buffer` v6 @kind object, `java.io.OutputStream` v7 @kind object, `long` v8 , `long` v10 , `int` v12 , `java.lang.Object` v13 @kind object) @signature `Lokio/Buffer;.copyTo$default:(Lokio/Buffer;Ljava/io/OutputStream;JJILjava/lang/Object;)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1cc91c.  v13:= v12 ^& 2;
  #L1cc920.  if v13 == 0 then goto L1cc928;
  #L1cc924.  v8:= 0L;
  #L1cc928.  v2:= v8 @kind wide;
  #L1cc92a.  v8:= v12 ^& 4;
  #L1cc92e.  if v8 == 0 then goto L1cc93a;
  #L1cc932.  v8:= v6.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1cc936.  v10:= v8 - v2 @kind long;
  #L1cc93a.  v4:= v10 @kind wide;
  #L1cc93c.  v0:= v6 @kind object;
  #L1cc93e.  v1:= v7 @kind object;
  #L1cc940.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @kind virtual;
  #L1cc946.  v6:= temp @kind object;
  #L1cc948.  return v6 @kind object;
}
procedure `okio.Buffer` `copyTo$default`(`okio.Buffer` v0 @kind object, `okio.Buffer` v1 @kind object, `long` v2 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lokio/Buffer;.copyTo$default:(Lokio/Buffer;Lokio/Buffer;JILjava/lang/Object;)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1cc95c.  v4:= v4 ^& 2;
  #L1cc960.  if v4 == 0 then goto L1cc968;
  #L1cc964.  v2:= 0L;
  #L1cc968.  call temp:= `copyTo`(v0, v1, v2) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;J)Lokio/Buffer;` @kind virtual;
  #L1cc96e.  v0:= temp @kind object;
  #L1cc970.  return v0 @kind object;
}
procedure `okio.Buffer` `copyTo$default`(`okio.Buffer` v6 @kind object, `okio.Buffer` v7 @kind object, `long` v8 , `long` v10 , `int` v12 , `java.lang.Object` v13 @kind object) @signature `Lokio/Buffer;.copyTo$default:(Lokio/Buffer;Lokio/Buffer;JJILjava/lang/Object;)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1cc984.  v12:= v12 ^& 2;
  #L1cc988.  if v12 == 0 then goto L1cc990;
  #L1cc98c.  v8:= 0L;
  #L1cc990.  v2:= v8 @kind wide;
  #L1cc992.  v0:= v6 @kind object;
  #L1cc994.  v1:= v7 @kind object;
  #L1cc996.  v4:= v10 @kind wide;
  #L1cc998.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L1cc99e.  v6:= temp @kind object;
  #L1cc9a0.  return v6 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe$default`(`okio.Buffer` v0 @kind object, `okio.Buffer$UnsafeCursor` v1 @kind object, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lokio/Buffer;.readAndWriteUnsafe$default:(Lokio/Buffer;Lokio/Buffer$UnsafeCursor;ILjava/lang/Object;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1cdb84.  v2:= v2 ^& 1;
  #L1cdb88.  if v2 == 0 then goto L1cdb96;
  #L1cdb8c.  v1:= new `okio.Buffer$UnsafeCursor`;
  #L1cdb90.  call `<init>`(v1) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @kind direct;
  #L1cdb96.  call temp:= `readAndWriteUnsafe`(v0, v1) @signature `Lokio/Buffer;.readAndWriteUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind virtual;
  #L1cdb9c.  v0:= temp @kind object;
  #L1cdb9e.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe$default`(`okio.Buffer` v0 @kind object, `okio.Buffer$UnsafeCursor` v1 @kind object, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lokio/Buffer;.readUnsafe$default:(Lokio/Buffer;Lokio/Buffer$UnsafeCursor;ILjava/lang/Object;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1cdbf4.  v2:= v2 ^& 1;
  #L1cdbf8.  if v2 == 0 then goto L1cdc06;
  #L1cdbfc.  v1:= new `okio.Buffer$UnsafeCursor`;
  #L1cdc00.  call `<init>`(v1) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @kind direct;
  #L1cdc06.  call temp:= `readUnsafe`(v0, v1) @signature `Lokio/Buffer;.readUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind virtual;
  #L1cdc0c.  v0:= temp @kind object;
  #L1cdc0e.  return v0 @kind object;
}
procedure `okio.Buffer` `writeTo$default`(`okio.Buffer` v0 @kind object, `java.io.OutputStream` v1 @kind object, `long` v2 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lokio/Buffer;.writeTo$default:(Lokio/Buffer;Ljava/io/OutputStream;JILjava/lang/Object;)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1cd588.  v4:= v4 ^& 2;
  #L1cd58c.  if v4 == 0 then goto L1cd594;
  #L1cd590.  v2:= v0.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1cd594.  call temp:= `writeTo`(v0, v1, v2) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @kind virtual;
  #L1cd59a.  v0:= temp @kind object;
  #L1cd59c.  return v0 @kind object;
}
procedure `byte` `-deprecated_getByte`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.-deprecated_getByte:(J)B` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1caef4.  call temp:= `getByte`(v0, v1) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L1caefa.  v1:= temp;
  #L1caefc.  return v1;
}
procedure `long` `-deprecated_size`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.-deprecated_size:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1cba28.  v0:= v2.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1cba2c.  return v0 @kind wide;
}
procedure `okio.Buffer` `buffer`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L1cc860.  return v0 @kind object;
}
procedure `void` `clear`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1ce4ec.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce4f2.  v0:= temp @kind wide;
  #L1ce4f4.  call `skip`(v2, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1ce4fa.  return @kind void;
}
procedure `java.lang.Object` `clone`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1cb674.  call temp:= `clone`(v1) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @kind virtual;
  #L1cb67a.  v0:= temp @kind object;
  #L1cb67c.  return v0 @kind object;
}
procedure `okio.Buffer` `clone`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cc874.  call temp:= `copy`(v1) @signature `Lokio/Buffer;.copy:()Lokio/Buffer;` @kind virtual;
  #L1cc87a.  v0:= temp @kind object;
  #L1cc87c.  return v0 @kind object;
}
procedure `void` `close`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L1ce50c.  return @kind void;
}
procedure `long` `completeSegmentByteCount`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1cba40.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cba46.  v0:= temp @kind wide;
  #L1cba48.  v2:= 0L;
  #L1cba4c.  v4:= lcmp(v0, v2);
  #L1cba50.  if v4 != 0 then goto L1cba56;
  #L1cba54.  goto L1cba8a;
  #L1cba56.  v2:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cba5a.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cba60.  v2:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1cba64.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cba6a.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L1cba6e.  v4:= 8192I;
  #L1cba72.  if v3 >= v4 then goto L1cba88;
  #L1cba76.  v4:= v2.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L1cba7a.  if v4 == 0 then goto L1cba88;
  #L1cba7e.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L1cba82.  v3:= v3 - v2 @kind int;
  #L1cba84.  v2:= (`long`) v3 @kind i2l;
  #L1cba86.  v0:= v0 - v2 @kind long;
  #L1cba88.  v2:= v0 @kind wide;
  #L1cba8a.  return v2 @kind wide;
}
procedure `okio.Buffer` `copy`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.copy:()Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1cc890.  v0:= new `okio.Buffer`;
  #L1cc894.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1cc89a.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc8a0.  v1:= temp @kind wide;
  #L1cc8a2.  v3:= 0L;
  #L1cc8a6.  v5:= lcmp(v1, v3);
  #L1cc8aa.  if v5 != 0 then goto L1cc8b0;
  #L1cc8ae.  goto L1cc908;
  #L1cc8b0.  v1:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cc8b4.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cc8ba.  call temp:= `sharedCopy`(v1) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L1cc8c0.  v2:= temp @kind object;
  #L1cc8c2.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L1cc8c6.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v2 @kind object;
  #L1cc8ca.  v2.`okio.Segment.next` @type ^`okio.Segment` := v2 @kind object;
  #L1cc8ce.  v3:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cc8d2.  if v3 == v1 then goto L1cc8fa;
  #L1cc8d6.  v4:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1cc8da.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cc8e0.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cc8e6.  call temp:= `sharedCopy`(v3) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L1cc8ec.  v5:= temp @kind object;
  #L1cc8ee.  call temp:= `push`(v4, v5) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1cc8f4.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cc8f8.  goto L1cc8d2;
  #L1cc8fa.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc900.  v1:= temp @kind wide;
  #L1cc902.  call `setSize$okio`(v0, v1) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cc908.  return v0 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v8 @kind this, `java.io.OutputStream` v9 @kind object) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1cc9b4.  v2:= 0L;
  #L1cc9b8.  v4:= 0L;
  #L1cc9bc.  v6:= 6I;
  #L1cc9be.  v7:= 0I;
  #L1cc9c0.  v0:= v8 @kind object;
  #L1cc9c2.  v1:= v9 @kind object;
  #L1cc9c4.  call temp:= `copyTo$default`(v0, v1, v2, v4, v6, v7) @signature `Lokio/Buffer;.copyTo$default:(Lokio/Buffer;Ljava/io/OutputStream;JJILjava/lang/Object;)Lokio/Buffer;` @kind static;
  #L1cc9ca.  v9:= temp @kind object;
  #L1cc9cc.  return v9 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v8 @kind this, `java.io.OutputStream` v9 @kind object, `long` v10 ) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1cc9e0.  v4:= 0L;
  #L1cc9e4.  v6:= 4I;
  #L1cc9e6.  v7:= 0I;
  #L1cc9e8.  v0:= v8 @kind object;
  #L1cc9ea.  v1:= v9 @kind object;
  #L1cc9ec.  v2:= v10 @kind wide;
  #L1cc9ee.  call temp:= `copyTo$default`(v0, v1, v2, v4, v6, v7) @signature `Lokio/Buffer;.copyTo$default:(Lokio/Buffer;Ljava/io/OutputStream;JJILjava/lang/Object;)Lokio/Buffer;` @kind static;
  #L1cc9f4.  v9:= temp @kind object;
  #L1cc9f6.  return v9 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v8 @kind this, `java.io.OutputStream` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1cca08.  v0:= "out" @kind object;
  #L1cca0c.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cca12.  v1:= v8.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1cca16.  v3:= v10 @kind wide;
  #L1cca18.  v5:= v12 @kind wide;
  #L1cca1a.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1cca20.  v0:= 0L;
  #L1cca24.  v2:= lcmp(v12, v0);
  #L1cca28.  if v2 != 0 then goto L1cca2e;
  #L1cca2c.  return v8 @kind object;
  #L1cca2e.  v2:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cca32.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cca38.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L1cca3c.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L1cca40.  v5:= v3 - v4 @kind int;
  #L1cca44.  v5:= (`long`) v5 @kind i2l;
  #L1cca46.  v7:= lcmp(v10, v5);
  #L1cca4a.  if v7 < 0 then goto L1cca5a;
  #L1cca4e.  v3:= v3 - v4 @kind int;
  #L1cca50.  v3:= (`long`) v3 @kind i2l;
  #L1cca52.  v10:= v10 - v3 @kind long;
  #L1cca54.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cca58.  goto L1cca32;
  #L1cca5a.  v3:= lcmp(v12, v0);
  #L1cca5e.  if v3 <= 0 then goto L1cca9a;
  #L1cca62.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cca68.  v3:= v2.`okio.Segment.pos` @type ^`int`;
  #L1cca6c.  v3:= (`long`) v3 @kind i2l;
  #L1cca6e.  v3:= v3 + v10 @kind long;
  #L1cca70.  v10:= (`int`) v3 @kind l2i;
  #L1cca72.  v11:= v2.`okio.Segment.limit` @type ^`int`;
  #L1cca76.  v11:= v11 - v10 @kind int;
  #L1cca78.  v3:= (`long`) v11 @kind i2l;
  #L1cca7a.  call temp:= `min`(v3, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1cca80.  v3:= temp @kind wide;
  #L1cca82.  v11:= (`int`) v3 @kind l2i;
  #L1cca84.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cca88.  call `write`(v9, v3, v10, v11) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L1cca8e.  v10:= (`long`) v11 @kind i2l;
  #L1cca90.  v12:= v12 - v10 @kind long;
  #L1cca92.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cca96.  v10:= v0 @kind wide;
  #L1cca98.  goto L1cca5a;
  #L1cca9a.  return v8 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v8 @kind this, `okio.Buffer` v9 @kind object, `long` v10 ) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;J)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1ccaac.  v0:= "out" @kind object;
  #L1ccab0.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ccab6.  v0:= v8.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1ccaba.  v6:= v0 - v10 @kind long;
  #L1ccabe.  v2:= v8 @kind object;
  #L1ccac0.  v3:= v9 @kind object;
  #L1ccac2.  v4:= v10 @kind wide;
  #L1ccac4.  call temp:= `copyTo`(v2, v3, v4, v6) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L1ccaca.  v9:= temp @kind object;
  #L1ccacc.  return v9 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v8 @kind this, `okio.Buffer` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1ccae0.  v0:= "out" @kind object;
  #L1ccae4.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ccaea.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ccaf0.  v1:= temp @kind wide;
  #L1ccaf2.  v3:= v10 @kind wide;
  #L1ccaf4.  v5:= v12 @kind wide;
  #L1ccaf6.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1ccafc.  v0:= 0L;
  #L1ccb00.  v2:= lcmp(v12, v0);
  #L1ccb04.  if v2 != 0 then goto L1ccb0a;
  #L1ccb08.  goto L1ccbbe;
  #L1ccb0a.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ccb10.  v2:= temp @kind wide;
  #L1ccb12.  v2:= v2 + v12 @kind long;
  #L1ccb14.  call `setSize$okio`(v9, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1ccb1a.  v2:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ccb1e.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ccb24.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L1ccb28.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L1ccb2c.  v5:= v3 - v4 @kind int;
  #L1ccb30.  v5:= (`long`) v5 @kind i2l;
  #L1ccb32.  v7:= lcmp(v10, v5);
  #L1ccb36.  if v7 < 0 then goto L1ccb46;
  #L1ccb3a.  v3:= v3 - v4 @kind int;
  #L1ccb3c.  v3:= (`long`) v3 @kind i2l;
  #L1ccb3e.  v10:= v10 - v3 @kind long;
  #L1ccb40.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1ccb44.  goto L1ccb1e;
  #L1ccb46.  v3:= lcmp(v12, v0);
  #L1ccb4a.  if v3 <= 0 then goto L1ccbbe;
  #L1ccb4e.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ccb54.  call temp:= `sharedCopy`(v2) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L1ccb5a.  v3:= temp @kind object;
  #L1ccb5c.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L1ccb60.  v11:= (`int`) v10 @kind l2i;
  #L1ccb62.  v4:= v4 + v11 @kind int;
  #L1ccb64.  v3.`okio.Segment.pos` @type ^`int` := v4;
  #L1ccb68.  v10:= (`int`) v12 @kind l2i;
  #L1ccb6a.  v4:= v4 + v10 @kind int;
  #L1ccb6c.  v10:= v3.`okio.Segment.limit` @type ^`int`;
  #L1ccb70.  call temp:= `min`(v4, v10) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1ccb76.  v10:= temp;
  #L1ccb78.  v3.`okio.Segment.limit` @type ^`int` := v10;
  #L1ccb7c.  v10:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ccb80.  if v10 != 0 then goto L1ccb92;
  #L1ccb84.  v3.`okio.Segment.prev` @type ^`okio.Segment` := v3 @kind object;
  #L1ccb88.  v3.`okio.Segment.next` @type ^`okio.Segment` := v3 @kind object;
  #L1ccb8c.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v3 @kind object;
  #L1ccb90.  goto L1ccba8;
  #L1ccb92.  call `checkNotNull`(v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ccb98.  v10:= v10.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ccb9c.  call `checkNotNull`(v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ccba2.  call temp:= `push`(v10, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1ccba8.  v10:= v3.`okio.Segment.limit` @type ^`int`;
  #L1ccbac.  v11:= v3.`okio.Segment.pos` @type ^`int`;
  #L1ccbb0.  v10:= v10 - v11 @kind int;
  #L1ccbb2.  v10:= (`long`) v10 @kind i2l;
  #L1ccbb4.  v12:= v12 - v10 @kind long;
  #L1ccbb6.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1ccbba.  v10:= v0 @kind wide;
  #L1ccbbc.  goto L1ccb46;
  #L1ccbbe.  return v8 @kind object;
}
procedure `okio.Buffer` `emit`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emit:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L1ccbd0.  return v0 @kind object;
}
procedure `okio.BufferedSink` `emit`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1cdc64.  call temp:= `emit`(v1) @signature `Lokio/Buffer;.emit:()Lokio/Buffer;` @kind virtual;
  #L1cdc6a.  v0:= temp @kind object;
  #L1cdc6c.  return v0 @kind object;
}
procedure `okio.Buffer` `emitCompleteSegments`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L1ccbe4.  return v0 @kind object;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1cdc80.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @kind virtual;
  #L1cdc86.  v0:= temp @kind object;
  #L1cdc88.  return v0 @kind object;
}
procedure `boolean` `equals`(`okio.Buffer` v20 @kind this, `java.lang.Object` v21 @kind object) @signature `Lokio/Buffer;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L1cacc4.  v0:= v20 @kind object;
  #L1cacc8.  v1:= v21 @kind object;
  #L1caccc.  v2:= 0I;
  #L1cacce.  v3:= 1I;
  #L1cacd0.  if v0 != v1 then goto L1cacda;
  #L1cacd4.  v2:= 1I;
  #L1cacd6.  goto L1cadc8;
  #L1cacda.  v4:= instanceof @variable v1 @type ^`okio.Buffer` @kind boolean;
  #L1cacde.  if v4 != 0 then goto L1cace6;
  #L1cace2.  goto L1cadc8;
  #L1cace6.  call temp:= `size`(v20) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cacec.  v4:= temp @kind wide;
  #L1cacee.  v1:= (`okio.Buffer`) v1 @kind object;
  #L1cacf2.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cacf8.  v6:= temp @kind wide;
  #L1cacfa.  v8:= lcmp(v4, v6);
  #L1cacfe.  if v8 == 0 then goto L1cad04;
  #L1cad02.  goto L1cadc8;
  #L1cad04.  call temp:= `size`(v20) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cad0a.  v4:= temp @kind wide;
  #L1cad0c.  v6:= 0L;
  #L1cad10.  v8:= lcmp(v4, v6);
  #L1cad14.  if v8 != 0 then goto L1cad1a;
  #L1cad18.  goto L1cacd4;
  #L1cad1a.  v4:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cad1e.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cad24.  v1:= v1.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cad28.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cad2e.  v5:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cad32.  v8:= v1.`okio.Segment.pos` @type ^`int`;
  #L1cad36.  v9:= v6 @kind wide;
  #L1cad38.  call temp:= `size`(v20) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cad3e.  v11:= temp @kind wide;
  #L1cad40.  v13:= lcmp(v9, v11);
  #L1cad44.  if v13 >= 0 then goto L1cacd4;
  #L1cad48.  v11:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cad4c.  v11:= v11 - v5 @kind int;
  #L1cad4e.  v12:= v1.`okio.Segment.limit` @type ^`int`;
  #L1cad52.  v12:= v12 - v8 @kind int;
  #L1cad54.  call temp:= `min`(v11, v12) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1cad5a.  v11:= temp;
  #L1cad5c.  v11:= (`long`) v11 @kind i2l;
  #L1cad5e.  v13:= v6 @kind wide;
  #L1cad60.  v15:= lcmp(v13, v11);
  #L1cad64.  if v15 >= 0 then goto L1cad98;
  #L1cad68.  v15:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cad6c.  v16:= v5 + 1;
  #L1cad70.  v5:= v15[v5] @kind byte;
  #L1cad74.  v15:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cad78.  v17:= v8 + 1;
  #L1cad7c.  v8:= v15[v8] @kind byte;
  #L1cad80.  if v5 == v8 then goto L1cad86;
  #L1cad84.  goto L1cadc8;
  #L1cad86.  v18:= 1L;
  #L1cad8a.  v13:= v13 + v18 @kind long;
  #L1cad8e.  v5:= v16;
  #L1cad92.  v8:= v17;
  #L1cad96.  goto L1cad60;
  #L1cad98.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cad9c.  if v5 != v13 then goto L1cadae;
  #L1cada0.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cada4.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cadaa.  v5:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cadae.  v13:= v1.`okio.Segment.limit` @type ^`int`;
  #L1cadb2.  if v8 != v13 then goto L1cadc4;
  #L1cadb6.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cadba.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cadc0.  v8:= v1.`okio.Segment.pos` @type ^`int`;
  #L1cadc4.  v9:= v9 + v11 @kind long;
  #L1cadc6.  goto L1cad38;
  #L1cadc8.  return v2;
}
procedure `boolean` `exhausted`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.exhausted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1caddc.  v0:= v5.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1cade0.  v2:= 0L;
  #L1cade4.  v4:= lcmp(v0, v2);
  #L1cade8.  if v4 != 0 then goto L1cadf0;
  #L1cadec.  v0:= 1I;
  #L1cadee.  goto L1cadf2;
  #L1cadf0.  v0:= 0I;
  #L1cadf2.  return v0;
}
procedure `void` `flush`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L1ce520.  return @kind void;
}
procedure `okio.Buffer` `getBuffer`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.getBuffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L1ccbf8.  return v0 @kind object;
}
procedure `byte` `getByte`(`okio.Buffer` v6 @kind this, `long` v7 ) @signature `Lokio/Buffer;.getByte:(J)B` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1caf10.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1caf16.  v0:= temp @kind wide;
  #L1caf18.  v4:= 1L;
  #L1caf1c.  v2:= v7 @kind wide;
  #L1caf1e.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1caf24.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1caf28.  if v0 == 0 then goto L1cafc8;
  #L1caf2c.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1caf32.  v1:= temp @kind wide;
  #L1caf34.  v1:= v1 - v7 @kind long;
  #L1caf36.  v3:= lcmp(v1, v7);
  #L1caf3a.  if v3 >= 0 then goto L1caf84;
  #L1caf3e.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1caf44.  v1:= temp @kind wide;
  #L1caf46.  v3:= lcmp(v1, v7);
  #L1caf4a.  if v3 <= 0 then goto L1caf68;
  #L1caf4e.  v0:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1caf52.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1caf58.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L1caf5c.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L1caf60.  v3:= v3 - v4 @kind int;
  #L1caf62.  v3:= (`long`) v3 @kind i2l;
  #L1caf64.  v1:= v1 - v3 @kind long;
  #L1caf66.  goto L1caf46;
  #L1caf68.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1caf6e.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1caf72.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L1caf76.  v4:= (`long`) v0 @kind i2l;
  #L1caf78.  v4:= v4 + v7 @kind long;
  #L1caf7a.  v4:= v4 - v1 @kind long;
  #L1caf7c.  v7:= (`int`) v4 @kind l2i;
  #L1caf7e.  v7:= v3[v7] @kind byte;
  #L1caf82.  goto L1cafe8;
  #L1caf84.  v1:= 0L;
  #L1caf88.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L1caf8c.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L1caf90.  v3:= v3 - v4 @kind int;
  #L1caf92.  v3:= (`long`) v3 @kind i2l;
  #L1caf94.  v3:= v3 + v1 @kind long;
  #L1caf96.  v5:= lcmp(v3, v7);
  #L1caf9a.  if v5 <= 0 then goto L1cafba;
  #L1caf9e.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cafa4.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cafa8.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cafac.  v4:= (`long`) v0 @kind i2l;
  #L1cafae.  v4:= v4 + v7 @kind long;
  #L1cafb0.  v4:= v4 - v1 @kind long;
  #L1cafb2.  v7:= (`int`) v4 @kind l2i;
  #L1cafb4.  v7:= v3[v7] @kind byte;
  #L1cafb8.  goto L1cafe8;
  #L1cafba.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cafbe.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cafc4.  v1:= v3 @kind wide;
  #L1cafc6.  goto L1caf88;
  #L1cafc8.  v0:= 0I;
  #L1cafca.  v1:= -1L;
  #L1cafce.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cafd4.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cafd8.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cafdc.  v4:= (`long`) v0 @kind i2l;
  #L1cafde.  v4:= v4 + v7 @kind long;
  #L1cafe0.  v4:= v4 - v1 @kind long;
  #L1cafe2.  v7:= (`int`) v4 @kind l2i;
  #L1cafe4.  v7:= v3[v7] @kind byte;
  #L1cafe8.  return v7;
}
procedure `int` `hashCode`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1cb138.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cb13c.  if v0 == 0 then goto L1cb176;
  #L1cb140.  v1:= 1I;
  #L1cb142.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cb146.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L1cb14a.  if v2 >= v3 then goto L1cb162;
  #L1cb14e.  v1:= v1 * 31;
  #L1cb152.  v4:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cb156.  v4:= v4[v2] @kind byte;
  #L1cb15a.  v1:= v1 + v4 @kind int;
  #L1cb15c.  v2:= v2 + 1;
  #L1cb160.  goto L1cb14a;
  #L1cb162.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cb166.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cb16c.  v2:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cb170.  if v0 != v2 then goto L1cb142;
  #L1cb174.  goto L1cb178;
  #L1cb176.  v1:= 0I;
  #L1cb178.  return v1;
}
procedure `okio.ByteString` `hmacSha1`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.hmacSha1:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ce014.  v0:= "key" @kind object;
  #L1ce018.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ce01e.  v0:= "HmacSHA1" @kind object;
  #L1ce022.  call temp:= `b`(v1, v0, v2) @signature `Lokio/Buffer;.b:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L1ce028.  v2:= temp @kind object;
  #L1ce02a.  return v2 @kind object;
}
procedure `okio.ByteString` `hmacSha256`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.hmacSha256:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ce03c.  v0:= "key" @kind object;
  #L1ce040.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ce046.  v0:= "HmacSHA256" @kind object;
  #L1ce04a.  call temp:= `b`(v1, v0, v2) @signature `Lokio/Buffer;.b:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L1ce050.  v2:= temp @kind object;
  #L1ce052.  return v2 @kind object;
}
procedure `okio.ByteString` `hmacSha512`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.hmacSha512:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ce064.  v0:= "key" @kind object;
  #L1ce068.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ce06e.  v0:= "HmacSHA512" @kind object;
  #L1ce072.  call temp:= `b`(v1, v0, v2) @signature `Lokio/Buffer;.b:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L1ce078.  v2:= temp @kind object;
  #L1ce07a.  return v2 @kind object;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 ) @signature `Lokio/Buffer;.indexOf:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1cba9c.  v2:= 0L;
  #L1cbaa0.  v4:= 9223372036854775807L;
  #L1cbaaa.  v0:= v6 @kind object;
  #L1cbaac.  v1:= v7;
  #L1cbaae.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L1cbab4.  v0:= temp @kind wide;
  #L1cbab6.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 , `long` v8 ) @signature `Lokio/Buffer;.indexOf:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1cbac8.  v4:= 9223372036854775807L;
  #L1cbad2.  v0:= v6 @kind object;
  #L1cbad4.  v1:= v7;
  #L1cbad6.  v2:= v8 @kind wide;
  #L1cbad8.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L1cbade.  v7:= temp @kind wide;
  #L1cbae0.  return v7 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v10 @kind this, `byte` v11 , `long` v12 , `long` v14 ) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1cbaf4.  v0:= 0L;
  #L1cbaf8.  v2:= lcmp(v0, v12);
  #L1cbafc.  if v2 <= 0 then goto L1cbb02;
  #L1cbb00.  goto L1cbb0e;
  #L1cbb02.  v2:= lcmp(v14, v12);
  #L1cbb06.  if v2 < 0 then goto L1cbb0e;
  #L1cbb0a.  v2:= 1I;
  #L1cbb0c.  goto L1cbb10;
  #L1cbb0e.  v2:= 0I;
  #L1cbb10.  if v2 == 0 then goto L1cbc7e;
  #L1cbb14.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cbb1a.  v2:= temp @kind wide;
  #L1cbb1c.  v4:= lcmp(v14, v2);
  #L1cbb20.  if v4 <= 0 then goto L1cbb2c;
  #L1cbb24.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cbb2a.  v14:= temp @kind wide;
  #L1cbb2c.  v2:= -1L;
  #L1cbb30.  v4:= lcmp(v12, v14);
  #L1cbb34.  if v4 != 0 then goto L1cbb3c;
  #L1cbb38.  goto L1cbc7c;
  #L1cbb3c.  v4:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cbb40.  if v4 == 0 then goto L1cbc7c;
  #L1cbb44.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cbb4a.  v5:= temp @kind wide;
  #L1cbb4c.  v5:= v5 - v12 @kind long;
  #L1cbb4e.  v7:= lcmp(v5, v12);
  #L1cbb52.  if v7 >= 0 then goto L1cbbf2;
  #L1cbb56.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cbb5c.  v0:= temp @kind wide;
  #L1cbb5e.  v5:= lcmp(v0, v12);
  #L1cbb62.  if v5 <= 0 then goto L1cbb80;
  #L1cbb66.  v4:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1cbb6a.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cbb70.  v5:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cbb74.  v6:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cbb78.  v5:= v5 - v6 @kind int;
  #L1cbb7a.  v5:= (`long`) v5 @kind i2l;
  #L1cbb7c.  v0:= v0 - v5 @kind long;
  #L1cbb7e.  goto L1cbb5e;
  #L1cbb80.  if v4 == 0 then goto L1cbc7c;
  #L1cbb84.  v5:= lcmp(v0, v14);
  #L1cbb88.  if v5 >= 0 then goto L1cbc7c;
  #L1cbb8c.  v5:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cbb90.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cbb94.  v6:= (`long`) v6 @kind i2l;
  #L1cbb96.  v8:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cbb9a.  v8:= (`long`) v8 @kind i2l;
  #L1cbb9c.  v8:= v8 + v14 @kind long;
  #L1cbb9e.  v8:= v8 - v0 @kind long;
  #L1cbba0.  call temp:= `min`(v6, v8) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1cbba6.  v6:= temp @kind wide;
  #L1cbba8.  v7:= (`int`) v6 @kind l2i;
  #L1cbbaa.  v6:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cbbae.  v8:= (`long`) v6 @kind i2l;
  #L1cbbb0.  v8:= v8 + v12 @kind long;
  #L1cbbb2.  v8:= v8 - v0 @kind long;
  #L1cbbb4.  v12:= (`int`) v8 @kind l2i;
  #L1cbbb6.  if v12 >= v7 then goto L1cbbd6;
  #L1cbbba.  v13:= v5[v12] @kind byte;
  #L1cbbbe.  if v13 != v11 then goto L1cbbd0;
  #L1cbbc2.  v11:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cbbc6.  v12:= v12 - v11 @kind int;
  #L1cbbc8.  v11:= (`long`) v12 @kind i2l;
  #L1cbbca.  v2:= v11 + v0 @kind long;
  #L1cbbce.  goto L1cbc7c;
  #L1cbbd0.  v12:= v12 + 1;
  #L1cbbd4.  goto L1cbbb6;
  #L1cbbd6.  v12:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cbbda.  v13:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cbbde.  v12:= v12 - v13 @kind int;
  #L1cbbe0.  v12:= (`long`) v12 @kind i2l;
  #L1cbbe2.  v0:= v0 + v12 @kind long;
  #L1cbbe4.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cbbe8.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cbbee.  v12:= v0 @kind wide;
  #L1cbbf0.  goto L1cbb84;
  #L1cbbf2.  v5:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cbbf6.  v6:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cbbfa.  v5:= v5 - v6 @kind int;
  #L1cbbfc.  v5:= (`long`) v5 @kind i2l;
  #L1cbbfe.  v5:= v5 + v0 @kind long;
  #L1cbc00.  v7:= lcmp(v5, v12);
  #L1cbc04.  if v7 <= 0 then goto L1cbc6e;
  #L1cbc08.  if v4 == 0 then goto L1cbc7c;
  #L1cbc0c.  v5:= lcmp(v0, v14);
  #L1cbc10.  if v5 >= 0 then goto L1cbc7c;
  #L1cbc14.  v5:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cbc18.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cbc1c.  v6:= (`long`) v6 @kind i2l;
  #L1cbc1e.  v8:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cbc22.  v8:= (`long`) v8 @kind i2l;
  #L1cbc24.  v8:= v8 + v14 @kind long;
  #L1cbc26.  v8:= v8 - v0 @kind long;
  #L1cbc28.  call temp:= `min`(v6, v8) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1cbc2e.  v6:= temp @kind wide;
  #L1cbc30.  v7:= (`int`) v6 @kind l2i;
  #L1cbc32.  v6:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cbc36.  v8:= (`long`) v6 @kind i2l;
  #L1cbc38.  v8:= v8 + v12 @kind long;
  #L1cbc3a.  v8:= v8 - v0 @kind long;
  #L1cbc3c.  v12:= (`int`) v8 @kind l2i;
  #L1cbc3e.  if v12 >= v7 then goto L1cbc52;
  #L1cbc42.  v13:= v5[v12] @kind byte;
  #L1cbc46.  if v13 != v11 then goto L1cbc4c;
  #L1cbc4a.  goto L1cbbc2;
  #L1cbc4c.  v12:= v12 + 1;
  #L1cbc50.  goto L1cbc3e;
  #L1cbc52.  v12:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cbc56.  v13:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cbc5a.  v12:= v12 - v13 @kind int;
  #L1cbc5c.  v12:= (`long`) v12 @kind i2l;
  #L1cbc5e.  v0:= v0 + v12 @kind long;
  #L1cbc60.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cbc64.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cbc6a.  v12:= v0 @kind wide;
  #L1cbc6c.  goto L1cbc0c;
  #L1cbc6e.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cbc72.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cbc78.  v0:= v5 @kind wide;
  #L1cbc7a.  goto L1cbbf2;
  #L1cbc7c.  return v2 @kind wide;
  #L1cbc7e.  v11:= new `java.lang.StringBuilder`;
  #L1cbc82.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cbc88.  v0:= "size=" @kind object;
  #L1cbc8c.  call temp:= `append`(v11, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cbc92.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cbc98.  v0:= temp @kind wide;
  #L1cbc9a.  call temp:= `append`(v11, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cbca0.  v0:= " fromIndex=" @kind object;
  #L1cbca4.  call temp:= `append`(v11, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cbcaa.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cbcb0.  v12:= " toIndex=" @kind object;
  #L1cbcb4.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cbcba.  call temp:= `append`(v11, v14) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cbcc0.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cbcc6.  v11:= temp @kind object;
  #L1cbcc8.  v12:= new `java.lang.IllegalArgumentException`;
  #L1cbccc.  call temp:= `toString`(v11) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cbcd2.  v11:= temp @kind object;
  #L1cbcd4.  call `<init>`(v12, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cbcda.  throw v12;
}
procedure `long` `indexOf`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cbcec.  v0:= "bytes" @kind object;
  #L1cbcf0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cbcf6.  v0:= 0L;
  #L1cbcfa.  call temp:= `indexOf`(v2, v3, v0) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @kind virtual;
  #L1cbd00.  v0:= temp @kind wide;
  #L1cbd02.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v17 @kind this, `okio.ByteString` v18 @kind object, `long` v19 ) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L1cbd14.  v0:= v19 @kind wide;
  #L1cbd18.  v2:= "bytes" @kind object;
  #L1cbd1c.  v3:= v18 @kind object;
  #L1cbd20.  call `checkNotNullParameter`(v3, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cbd26.  call temp:= `size`(v18) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1cbd2c.  v2:= temp;
  #L1cbd2e.  v4:= 0I;
  #L1cbd30.  if v2 <= 0 then goto L1cbd38;
  #L1cbd34.  v2:= 1I;
  #L1cbd36.  goto L1cbd3a;
  #L1cbd38.  v2:= 0I;
  #L1cbd3a.  if v2 == 0 then goto L1cbf64;
  #L1cbd3e.  v6:= 0L;
  #L1cbd42.  v2:= lcmp(v0, v6);
  #L1cbd46.  if v2 < 0 then goto L1cbd4e;
  #L1cbd4a.  v2:= 1I;
  #L1cbd4c.  goto L1cbd50;
  #L1cbd4e.  v2:= 0I;
  #L1cbd50.  if v2 == 0 then goto L1cbf2a;
  #L1cbd54.  v2:= v17 @kind object;
  #L1cbd58.  v8:= v2.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cbd5c.  if v8 == 0 then goto L1cbf24;
  #L1cbd60.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cbd66.  v11:= temp @kind wide;
  #L1cbd68.  v11:= v11 - v0 @kind long;
  #L1cbd6a.  v13:= 1L;
  #L1cbd6e.  v15:= lcmp(v11, v0);
  #L1cbd72.  if v15 >= 0 then goto L1cbe50;
  #L1cbd76.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cbd7c.  v6:= temp @kind wide;
  #L1cbd7e.  v11:= lcmp(v6, v0);
  #L1cbd82.  if v11 <= 0 then goto L1cbda0;
  #L1cbd86.  v8:= v8.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1cbd8a.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cbd90.  v11:= v8.`okio.Segment.limit` @type ^`int`;
  #L1cbd94.  v12:= v8.`okio.Segment.pos` @type ^`int`;
  #L1cbd98.  v11:= v11 - v12 @kind int;
  #L1cbd9a.  v11:= (`long`) v11 @kind i2l;
  #L1cbd9c.  v6:= v6 - v11 @kind long;
  #L1cbd9e.  goto L1cbd7e;
  #L1cbda0.  if v8 == 0 then goto L1cbf24;
  #L1cbda4.  call temp:= `internalArray$okio`(v18) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L1cbdaa.  v11:= temp @kind object;
  #L1cbdac.  v4:= v11[v4] @kind byte;
  #L1cbdb0.  call temp:= `size`(v18) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1cbdb6.  v3:= temp;
  #L1cbdb8.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cbdbe.  v15:= temp @kind wide;
  #L1cbdc0.  v9:= (`long`) v3 @kind i2l;
  #L1cbdc2.  v15:= v15 - v9 @kind long;
  #L1cbdc4.  v15:= v15 + v13 @kind long;
  #L1cbdc6.  v9:= lcmp(v6, v15);
  #L1cbdca.  if v9 >= 0 then goto L1cbf24;
  #L1cbdce.  v9:= v8.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cbdd2.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1cbdd6.  v12:= v8.`okio.Segment.pos` @type ^`int`;
  #L1cbdda.  v12:= (`long`) v12 @kind i2l;
  #L1cbddc.  v12:= v12 + v15 @kind long;
  #L1cbdde.  v12:= v12 - v6 @kind long;
  #L1cbde0.  v18:= v6 @kind wide;
  #L1cbde4.  v5:= (`long`) v10 @kind i2l;
  #L1cbde6.  call temp:= `min`(v5, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1cbdec.  v5:= temp @kind wide;
  #L1cbdee.  v6:= (`int`) v5 @kind l2i;
  #L1cbdf0.  v5:= v8.`okio.Segment.pos` @type ^`int`;
  #L1cbdf4.  v12:= (`long`) v5 @kind i2l;
  #L1cbdf6.  v12:= v12 + v0 @kind long;
  #L1cbdf8.  v12:= v12 - v18 @kind long;
  #L1cbdfc.  v0:= (`int`) v12 @kind l2i;
  #L1cbdfe.  if v0 >= v6 then goto L1cbe32;
  #L1cbe02.  v1:= v9[v0] @kind byte;
  #L1cbe06.  if v1 != v4 then goto L1cbe2c;
  #L1cbe0a.  v1:= v0 + 1;
  #L1cbe0e.  v5:= 1I;
  #L1cbe10.  call temp:= `rangeEquals`(v8, v1, v11, v5, v3) @signature `Lokio/internal/BufferKt;.rangeEquals:(Lokio/Segment;I[BII)Z` @kind static;
  #L1cbe16.  v1:= temp;
  #L1cbe18.  if v1 == 0 then goto L1cbe2c;
  #L1cbe1c.  v1:= v8.`okio.Segment.pos` @type ^`int`;
  #L1cbe20.  v0:= v0 - v1 @kind int;
  #L1cbe22.  v0:= (`long`) v0 @kind i2l;
  #L1cbe24.  v9:= v0 + v18 @kind long;
  #L1cbe28.  goto L1cbf28;
  #L1cbe2c.  v0:= v0 + 1;
  #L1cbe30.  goto L1cbdfe;
  #L1cbe32.  v0:= v8.`okio.Segment.limit` @type ^`int`;
  #L1cbe36.  v1:= v8.`okio.Segment.pos` @type ^`int`;
  #L1cbe3a.  v0:= v0 - v1 @kind int;
  #L1cbe3c.  v0:= (`long`) v0 @kind i2l;
  #L1cbe3e.  v6:= v18 + v0 @kind long;
  #L1cbe42.  v8:= v8.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cbe46.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cbe4c.  v0:= v6 @kind wide;
  #L1cbe4e.  goto L1cbdc6;
  #L1cbe50.  v5:= v8.`okio.Segment.limit` @type ^`int`;
  #L1cbe54.  v9:= v8.`okio.Segment.pos` @type ^`int`;
  #L1cbe58.  v5:= v5 - v9 @kind int;
  #L1cbe5a.  v9:= (`long`) v5 @kind i2l;
  #L1cbe5c.  v9:= v9 + v6 @kind long;
  #L1cbe5e.  v5:= lcmp(v9, v0);
  #L1cbe62.  if v5 <= 0 then goto L1cbf14;
  #L1cbe66.  if v8 == 0 then goto L1cbf24;
  #L1cbe6a.  call temp:= `internalArray$okio`(v18) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L1cbe70.  v5:= temp @kind object;
  #L1cbe72.  v4:= v5[v4] @kind byte;
  #L1cbe76.  call temp:= `size`(v18) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1cbe7c.  v3:= temp;
  #L1cbe7e.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cbe84.  v9:= temp @kind wide;
  #L1cbe86.  v11:= (`long`) v3 @kind i2l;
  #L1cbe88.  v9:= v9 - v11 @kind long;
  #L1cbe8a.  v9:= v9 + v13 @kind long;
  #L1cbe8c.  v11:= lcmp(v6, v9);
  #L1cbe90.  if v11 >= 0 then goto L1cbf24;
  #L1cbe94.  v11:= v8.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cbe98.  v12:= v8.`okio.Segment.limit` @type ^`int`;
  #L1cbe9c.  v13:= v8.`okio.Segment.pos` @type ^`int`;
  #L1cbea0.  v13:= (`long`) v13 @kind i2l;
  #L1cbea2.  v13:= v13 + v9 @kind long;
  #L1cbea4.  v13:= v13 - v6 @kind long;
  #L1cbea6.  v15:= v9 @kind wide;
  #L1cbea8.  v9:= (`long`) v12 @kind i2l;
  #L1cbeaa.  call temp:= `min`(v9, v13) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1cbeb0.  v9:= temp @kind wide;
  #L1cbeb2.  v10:= (`int`) v9 @kind l2i;
  #L1cbeb4.  v9:= v8.`okio.Segment.pos` @type ^`int`;
  #L1cbeb8.  v12:= (`long`) v9 @kind i2l;
  #L1cbeba.  v12:= v12 + v0 @kind long;
  #L1cbebc.  v12:= v12 - v6 @kind long;
  #L1cbebe.  v0:= (`int`) v12 @kind l2i;
  #L1cbec0.  if v0 >= v10 then goto L1cbef4;
  #L1cbec4.  v1:= v11[v0] @kind byte;
  #L1cbec8.  if v1 != v4 then goto L1cbeec;
  #L1cbecc.  v1:= v0 + 1;
  #L1cbed0.  v12:= 1I;
  #L1cbed2.  call temp:= `rangeEquals`(v8, v1, v5, v12, v3) @signature `Lokio/internal/BufferKt;.rangeEquals:(Lokio/Segment;I[BII)Z` @kind static;
  #L1cbed8.  v1:= temp;
  #L1cbeda.  if v1 == 0 then goto L1cbeee;
  #L1cbede.  v1:= v8.`okio.Segment.pos` @type ^`int`;
  #L1cbee2.  v0:= v0 - v1 @kind int;
  #L1cbee4.  v0:= (`long`) v0 @kind i2l;
  #L1cbee6.  v9:= v0 + v6 @kind long;
  #L1cbeea.  goto L1cbf28;
  #L1cbeec.  v12:= 1I;
  #L1cbeee.  v0:= v0 + 1;
  #L1cbef2.  goto L1cbec0;
  #L1cbef4.  v12:= 1I;
  #L1cbef6.  v0:= v8.`okio.Segment.limit` @type ^`int`;
  #L1cbefa.  v1:= v8.`okio.Segment.pos` @type ^`int`;
  #L1cbefe.  v0:= v0 - v1 @kind int;
  #L1cbf00.  v0:= (`long`) v0 @kind i2l;
  #L1cbf02.  v6:= v6 + v0 @kind long;
  #L1cbf04.  v8:= v8.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cbf08.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cbf0e.  v0:= v6 @kind wide;
  #L1cbf10.  v9:= v15 @kind wide;
  #L1cbf12.  goto L1cbe8c;
  #L1cbf14.  v12:= 1I;
  #L1cbf16.  v8:= v8.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cbf1a.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cbf20.  v6:= v9 @kind wide;
  #L1cbf22.  goto L1cbe50;
  #L1cbf24.  v9:= -1L;
  #L1cbf28.  return v9 @kind wide;
  #L1cbf2a.  v2:= v17 @kind object;
  #L1cbf2e.  v3:= new `java.lang.StringBuilder`;
  #L1cbf32.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cbf38.  v4:= "fromIndex < 0: " @kind object;
  #L1cbf3c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cbf42.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cbf48.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cbf4e.  v0:= temp @kind object;
  #L1cbf50.  v1:= new `java.lang.IllegalArgumentException`;
  #L1cbf54.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cbf5a.  v0:= temp @kind object;
  #L1cbf5c.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cbf62.  throw v1;
  #L1cbf64.  v2:= v17 @kind object;
  #L1cbf68.  v0:= new `java.lang.IllegalArgumentException`;
  #L1cbf6c.  v1:= "bytes is empty" @kind object;
  #L1cbf70.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cbf76.  v1:= temp @kind object;
  #L1cbf78.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cbf7e.  throw v0;
}
procedure `long` `indexOfElement`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cbf90.  v0:= "targetBytes" @kind object;
  #L1cbf94.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cbf9a.  v0:= 0L;
  #L1cbf9e.  call temp:= `indexOfElement`(v2, v3, v0) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @kind virtual;
  #L1cbfa4.  v0:= temp @kind wide;
  #L1cbfa6.  return v0 @kind wide;
}
procedure `long` `indexOfElement`(`okio.Buffer` v11 @kind this, `okio.ByteString` v12 @kind object, `long` v13 ) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1cbfb8.  v0:= "targetBytes" @kind object;
  #L1cbfbc.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cbfc2.  v0:= 0L;
  #L1cbfc6.  v2:= 0I;
  #L1cbfc8.  v3:= 1I;
  #L1cbfca.  v4:= lcmp(v13, v0);
  #L1cbfce.  if v4 < 0 then goto L1cbfd6;
  #L1cbfd2.  v4:= 1I;
  #L1cbfd4.  goto L1cbfd8;
  #L1cbfd6.  v4:= 0I;
  #L1cbfd8.  if v4 == 0 then goto L1cc232;
  #L1cbfdc.  v4:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cbfe0.  v5:= -1L;
  #L1cbfe4.  if v4 == 0 then goto L1cc230;
  #L1cbfe8.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cbfee.  v7:= temp @kind wide;
  #L1cbff0.  v7:= v7 - v13 @kind long;
  #L1cbff2.  v9:= 2I;
  #L1cbff4.  v10:= lcmp(v7, v13);
  #L1cbff8.  if v10 >= 0 then goto L1cc120;
  #L1cbffc.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc002.  v0:= temp @kind wide;
  #L1cc004.  v7:= lcmp(v0, v13);
  #L1cc008.  if v7 <= 0 then goto L1cc026;
  #L1cc00c.  v4:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1cc010.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cc016.  v7:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cc01a.  v8:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cc01e.  v7:= v7 - v8 @kind int;
  #L1cc020.  v7:= (`long`) v7 @kind i2l;
  #L1cc022.  v0:= v0 - v7 @kind long;
  #L1cc024.  goto L1cc004;
  #L1cc026.  if v4 == 0 then goto L1cc230;
  #L1cc02a.  call temp:= `size`(v12) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1cc030.  v7:= temp;
  #L1cc032.  if v7 != v9 then goto L1cc0ae;
  #L1cc036.  call temp:= `getByte`(v12, v2) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L1cc03c.  v2:= temp;
  #L1cc03e.  call temp:= `getByte`(v12, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L1cc044.  v12:= temp;
  #L1cc046.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc04c.  v7:= temp @kind wide;
  #L1cc04e.  v3:= lcmp(v0, v7);
  #L1cc052.  if v3 >= 0 then goto L1cc230;
  #L1cc056.  v3:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cc05a.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cc05e.  v7:= (`long`) v7 @kind i2l;
  #L1cc060.  v7:= v7 + v13 @kind long;
  #L1cc062.  v7:= v7 - v0 @kind long;
  #L1cc064.  v13:= (`int`) v7 @kind l2i;
  #L1cc066.  v14:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cc06a.  if v13 >= v14 then goto L1cc092;
  #L1cc06e.  v7:= v3[v13] @kind byte;
  #L1cc072.  if v7 == v2 then goto L1cc082;
  #L1cc076.  if v7 != v12 then goto L1cc07c;
  #L1cc07a.  goto L1cc082;
  #L1cc07c.  v13:= v13 + 1;
  #L1cc080.  goto L1cc06a;
  #L1cc082.  v12:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cc086.  v13:= v13 - v12 @kind int;
  #L1cc088.  v12:= (`long`) v13 @kind i2l;
  #L1cc08a.  v5:= v12 + v0 @kind long;
  #L1cc08e.  goto L1cc230;
  #L1cc092.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cc096.  v14:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cc09a.  v13:= v13 - v14 @kind int;
  #L1cc09c.  v13:= (`long`) v13 @kind i2l;
  #L1cc09e.  v0:= v0 + v13 @kind long;
  #L1cc0a0.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cc0a4.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cc0aa.  v13:= v0 @kind wide;
  #L1cc0ac.  goto L1cc046;
  #L1cc0ae.  call temp:= `internalArray$okio`(v12) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L1cc0b4.  v12:= temp @kind object;
  #L1cc0b6.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc0bc.  v7:= temp @kind wide;
  #L1cc0be.  v3:= lcmp(v0, v7);
  #L1cc0c2.  if v3 >= 0 then goto L1cc230;
  #L1cc0c6.  v3:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cc0ca.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cc0ce.  v7:= (`long`) v7 @kind i2l;
  #L1cc0d0.  v7:= v7 + v13 @kind long;
  #L1cc0d2.  v7:= v7 - v0 @kind long;
  #L1cc0d4.  v13:= (`int`) v7 @kind l2i;
  #L1cc0d6.  v14:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cc0da.  if v13 >= v14 then goto L1cc104;
  #L1cc0de.  v7:= v3[v13] @kind byte;
  #L1cc0e2.  v8:= length @variable v12;
  #L1cc0e4.  v9:= 0I;
  #L1cc0e6.  if v9 >= v8 then goto L1cc0fe;
  #L1cc0ea.  v10:= v12[v9] @kind byte;
  #L1cc0ee.  if v7 != v10 then goto L1cc0f8;
  #L1cc0f2.  v12:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cc0f6.  goto L1cc086;
  #L1cc0f8.  v9:= v9 + 1;
  #L1cc0fc.  goto L1cc0e6;
  #L1cc0fe.  v13:= v13 + 1;
  #L1cc102.  goto L1cc0da;
  #L1cc104.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cc108.  v14:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cc10c.  v13:= v13 - v14 @kind int;
  #L1cc10e.  v13:= (`long`) v13 @kind i2l;
  #L1cc110.  v0:= v0 + v13 @kind long;
  #L1cc112.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cc116.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cc11c.  v13:= v0 @kind wide;
  #L1cc11e.  goto L1cc0b6;
  #L1cc120.  v7:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cc124.  v8:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cc128.  v7:= v7 - v8 @kind int;
  #L1cc12a.  v7:= (`long`) v7 @kind i2l;
  #L1cc12c.  v7:= v7 + v0 @kind long;
  #L1cc12e.  v10:= lcmp(v7, v13);
  #L1cc132.  if v10 <= 0 then goto L1cc220;
  #L1cc136.  if v4 == 0 then goto L1cc230;
  #L1cc13a.  call temp:= `size`(v12) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1cc140.  v7:= temp;
  #L1cc142.  if v7 != v9 then goto L1cc1b0;
  #L1cc146.  call temp:= `getByte`(v12, v2) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L1cc14c.  v2:= temp;
  #L1cc14e.  call temp:= `getByte`(v12, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L1cc154.  v12:= temp;
  #L1cc156.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc15c.  v7:= temp @kind wide;
  #L1cc15e.  v3:= lcmp(v0, v7);
  #L1cc162.  if v3 >= 0 then goto L1cc230;
  #L1cc166.  v3:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cc16a.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cc16e.  v7:= (`long`) v7 @kind i2l;
  #L1cc170.  v7:= v7 + v13 @kind long;
  #L1cc172.  v7:= v7 - v0 @kind long;
  #L1cc174.  v13:= (`int`) v7 @kind l2i;
  #L1cc176.  v14:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cc17a.  if v13 >= v14 then goto L1cc194;
  #L1cc17e.  v7:= v3[v13] @kind byte;
  #L1cc182.  if v7 == v2 then goto L1cc082;
  #L1cc186.  if v7 != v12 then goto L1cc18e;
  #L1cc18a.  goto L1cc082;
  #L1cc18e.  v13:= v13 + 1;
  #L1cc192.  goto L1cc17a;
  #L1cc194.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cc198.  v14:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cc19c.  v13:= v13 - v14 @kind int;
  #L1cc19e.  v13:= (`long`) v13 @kind i2l;
  #L1cc1a0.  v0:= v0 + v13 @kind long;
  #L1cc1a2.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cc1a6.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cc1ac.  v13:= v0 @kind wide;
  #L1cc1ae.  goto L1cc156;
  #L1cc1b0.  call temp:= `internalArray$okio`(v12) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L1cc1b6.  v12:= temp @kind object;
  #L1cc1b8.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc1be.  v7:= temp @kind wide;
  #L1cc1c0.  v3:= lcmp(v0, v7);
  #L1cc1c4.  if v3 >= 0 then goto L1cc230;
  #L1cc1c8.  v3:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cc1cc.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cc1d0.  v7:= (`long`) v7 @kind i2l;
  #L1cc1d2.  v7:= v7 + v13 @kind long;
  #L1cc1d4.  v7:= v7 - v0 @kind long;
  #L1cc1d6.  v13:= (`int`) v7 @kind l2i;
  #L1cc1d8.  v14:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cc1dc.  if v13 >= v14 then goto L1cc204;
  #L1cc1e0.  v7:= v3[v13] @kind byte;
  #L1cc1e4.  v8:= length @variable v12;
  #L1cc1e6.  v9:= 0I;
  #L1cc1e8.  if v9 >= v8 then goto L1cc1fe;
  #L1cc1ec.  v10:= v12[v9] @kind byte;
  #L1cc1f0.  if v7 != v10 then goto L1cc1f8;
  #L1cc1f4.  goto L1cc0f2;
  #L1cc1f8.  v9:= v9 + 1;
  #L1cc1fc.  goto L1cc1e8;
  #L1cc1fe.  v13:= v13 + 1;
  #L1cc202.  goto L1cc1dc;
  #L1cc204.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cc208.  v14:= v4.`okio.Segment.pos` @type ^`int`;
  #L1cc20c.  v13:= v13 - v14 @kind int;
  #L1cc20e.  v13:= (`long`) v13 @kind i2l;
  #L1cc210.  v0:= v0 + v13 @kind long;
  #L1cc212.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cc216.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cc21c.  v13:= v0 @kind wide;
  #L1cc21e.  goto L1cc1b8;
  #L1cc220.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1cc224.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cc22a.  v0:= v7 @kind wide;
  #L1cc22c.  goto L1cc120;
  #L1cc230.  return v5 @kind wide;
  #L1cc232.  v12:= new `java.lang.StringBuilder`;
  #L1cc236.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cc23c.  v0:= "fromIndex < 0: " @kind object;
  #L1cc240.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cc246.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cc24c.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cc252.  v12:= temp @kind object;
  #L1cc254.  v13:= new `java.lang.IllegalArgumentException`;
  #L1cc258.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cc25e.  v12:= temp @kind object;
  #L1cc260.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cc266.  throw v13;
}
procedure `java.io.InputStream` `inputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.inputStream:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cb63c.  v0:= new `okio.Buffer$inputStream$1`;
  #L1cb640.  call `<init>`(v0, v1) @signature `Lokio/Buffer$inputStream$1;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L1cb646.  return v0 @kind object;
}
procedure `boolean` `isOpen`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cae04.  v0:= 1I;
  #L1cae06.  return v0;
}
procedure `okio.ByteString` `md5`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.md5:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ce08c.  v0:= "MD5" @kind object;
  #L1ce090.  call temp:= `a`(v1, v0) @signature `Lokio/Buffer;.a:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L1ce096.  v0:= temp @kind object;
  #L1ce098.  return v0 @kind object;
}
procedure `java.io.OutputStream` `outputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cb658.  v0:= new `okio.Buffer$outputStream$1`;
  #L1cb65c.  call `<init>`(v0, v1) @signature `Lokio/Buffer$outputStream$1;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L1cb662.  return v0 @kind object;
}
procedure `okio.BufferedSource` `peek`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.peek:()Lokio/BufferedSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cdeb0.  v0:= new `okio.PeekSource`;
  #L1cdeb4.  call `<init>`(v0, v1) @signature `Lokio/PeekSource;.<init>:(Lokio/BufferedSource;)V` @kind direct;
  #L1cdeba.  call temp:= `buffer`(v0) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L1cdec0.  v0:= temp @kind object;
  #L1cdec2.  return v0 @kind object;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v7 @kind this, `long` v8 , `okio.ByteString` v10 @kind object) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1cae18.  v0:= "bytes" @kind object;
  #L1cae1c.  call `checkNotNullParameter`(v10, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cae22.  call temp:= `size`(v10) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1cae28.  v6:= temp;
  #L1cae2a.  v5:= 0I;
  #L1cae2c.  v1:= v7 @kind object;
  #L1cae2e.  v2:= v8 @kind wide;
  #L1cae30.  v4:= v10 @kind object;
  #L1cae32.  call temp:= `rangeEquals`(v1, v2, v4, v5, v6) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @kind virtual;
  #L1cae38.  v8:= temp;
  #L1cae3a.  return v8;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v6 @kind this, `long` v7 , `okio.ByteString` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1cae4c.  v0:= "bytes" @kind object;
  #L1cae50.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cae56.  v0:= 0I;
  #L1cae58.  v1:= 0L;
  #L1cae5c.  v3:= lcmp(v7, v1);
  #L1cae60.  if v3 < 0 then goto L1caebc;
  #L1cae64.  if v10 < 0 then goto L1caebc;
  #L1cae68.  if v11 < 0 then goto L1caebc;
  #L1cae6c.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cae72.  v1:= temp @kind wide;
  #L1cae74.  v1:= v1 - v7 @kind long;
  #L1cae76.  v3:= (`long`) v11 @kind i2l;
  #L1cae78.  v5:= lcmp(v1, v3);
  #L1cae7c.  if v5 < 0 then goto L1caebc;
  #L1cae80.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1cae86.  v1:= temp;
  #L1cae88.  v1:= v1 - v10 @kind int;
  #L1cae8a.  if v1 >= v11 then goto L1cae90;
  #L1cae8e.  goto L1caebc;
  #L1cae90.  v1:= 0I;
  #L1cae92.  if v1 >= v11 then goto L1caeba;
  #L1cae96.  v2:= (`long`) v1 @kind i2l;
  #L1cae98.  v2:= v2 + v7 @kind long;
  #L1cae9a.  call temp:= `getByte`(v6, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L1caea0.  v2:= temp;
  #L1caea2.  v3:= v10 + v1 @kind int;
  #L1caea6.  call temp:= `getByte`(v9, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L1caeac.  v3:= temp;
  #L1caeae.  if v2 == v3 then goto L1caeb4;
  #L1caeb2.  goto L1caebc;
  #L1caeb4.  v1:= v1 + 1;
  #L1caeb8.  goto L1cae92;
  #L1caeba.  v0:= 1I;
  #L1caebc.  return v0;
}
procedure `int` `read`(`okio.Buffer` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lokio/Buffer;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1cb248.  v0:= "sink" @kind object;
  #L1cb24c.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cb252.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cb256.  if v0 == 0 then goto L1cb2b4;
  #L1cb25a.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1cb260.  v1:= temp;
  #L1cb262.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1cb266.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cb26a.  v2:= v2 - v3 @kind int;
  #L1cb26c.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1cb272.  v1:= temp;
  #L1cb274.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cb278.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cb27c.  call temp:= `put`(v7, v2, v3, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1cb282.  v7:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cb286.  v7:= v7 + v1 @kind int;
  #L1cb288.  v0.`okio.Segment.pos` @type ^`int` := v7;
  #L1cb28c.  v2:= v6.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1cb290.  v4:= (`long`) v1 @kind i2l;
  #L1cb292.  v2:= v2 - v4 @kind long;
  #L1cb294.  v6.`okio.Buffer.a` @type ^`long` := v2 @kind wide;
  #L1cb298.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1cb29c.  if v7 != v2 then goto L1cb2b2;
  #L1cb2a0.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1cb2a6.  v7:= temp @kind object;
  #L1cb2a8.  v6.`okio.Buffer.head` @type ^`okio.Segment` := v7 @kind object;
  #L1cb2ac.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1cb2b2.  return v1;
  #L1cb2b4.  v7:= -1I;
  #L1cb2b6.  return v7;
}
procedure `int` `read`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object) @signature `Lokio/Buffer;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cb18c.  v0:= "sink" @kind object;
  #L1cb190.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cb196.  v0:= length @variable v3;
  #L1cb198.  v1:= 0I;
  #L1cb19a.  call temp:= `read`(v2, v3, v1, v0) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L1cb1a0.  v3:= temp;
  #L1cb1a2.  return v3;
}
procedure `int` `read`(`okio.Buffer` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/Buffer;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1cb1b4.  v0:= "sink" @kind object;
  #L1cb1b8.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cb1be.  v0:= length @variable v8;
  #L1cb1c0.  v1:= (`long`) v0 @kind i2l;
  #L1cb1c2.  v3:= (`long`) v9 @kind i2l;
  #L1cb1c4.  v5:= (`long`) v10 @kind i2l;
  #L1cb1c6.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1cb1cc.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cb1d0.  if v0 == 0 then goto L1cb234;
  #L1cb1d4.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L1cb1d8.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cb1dc.  v1:= v1 - v2 @kind int;
  #L1cb1de.  call temp:= `min`(v10, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1cb1e4.  v10:= temp;
  #L1cb1e6.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cb1ea.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cb1ee.  v3:= v2 + v10 @kind int;
  #L1cb1f2.  call temp:= `copyInto`(v1, v8, v9, v2, v3) @signature `Lkotlin/collections/ArraysKt;.copyInto:([B[BIII)[B` @kind static;
  #L1cb1f8.  v8:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cb1fc.  v8:= v8 + v10 @kind int;
  #L1cb1fe.  v0.`okio.Segment.pos` @type ^`int` := v8;
  #L1cb202.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cb208.  v8:= temp @kind wide;
  #L1cb20a.  v1:= (`long`) v10 @kind i2l;
  #L1cb20c.  v8:= v8 - v1 @kind long;
  #L1cb20e.  call `setSize$okio`(v7, v8) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cb214.  v8:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cb218.  v9:= v0.`okio.Segment.limit` @type ^`int`;
  #L1cb21c.  if v8 != v9 then goto L1cb236;
  #L1cb220.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1cb226.  v8:= temp @kind object;
  #L1cb228.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L1cb22c.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1cb232.  goto L1cb236;
  #L1cb234.  v10:= -1I;
  #L1cb236.  return v10;
}
procedure `long` `read`(`okio.Buffer` v5 @kind this, `okio.Buffer` v6 @kind object, `long` v7 ) @signature `Lokio/Buffer;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1cc278.  v0:= "sink" @kind object;
  #L1cc27c.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cc282.  v0:= 0L;
  #L1cc286.  v2:= lcmp(v7, v0);
  #L1cc28a.  if v2 < 0 then goto L1cc292;
  #L1cc28e.  v2:= 1I;
  #L1cc290.  goto L1cc294;
  #L1cc292.  v2:= 0I;
  #L1cc294.  if v2 == 0 then goto L1cc2d0;
  #L1cc298.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc29e.  v2:= temp @kind wide;
  #L1cc2a0.  v4:= lcmp(v2, v0);
  #L1cc2a4.  if v4 != 0 then goto L1cc2ae;
  #L1cc2a8.  v6:= -1L;
  #L1cc2ac.  goto L1cc2ce;
  #L1cc2ae.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc2b4.  v0:= temp @kind wide;
  #L1cc2b6.  v2:= lcmp(v7, v0);
  #L1cc2ba.  if v2 <= 0 then goto L1cc2c6;
  #L1cc2be.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc2c4.  v7:= temp @kind wide;
  #L1cc2c6.  call `write`(v6, v5, v7) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L1cc2cc.  v6:= v7 @kind wide;
  #L1cc2ce.  return v6 @kind wide;
  #L1cc2d0.  v6:= new `java.lang.StringBuilder`;
  #L1cc2d4.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cc2da.  v0:= "byteCount < 0: " @kind object;
  #L1cc2de.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cc2e4.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cc2ea.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cc2f0.  v6:= temp @kind object;
  #L1cc2f2.  v7:= new `java.lang.IllegalArgumentException`;
  #L1cc2f6.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cc2fc.  v6:= temp @kind object;
  #L1cc2fe.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cc304.  throw v7;
}
procedure `long` `readAll`(`okio.Buffer` v5 @kind this, `okio.Sink` v6 @kind object) @signature `Lokio/Buffer;.readAll:(Lokio/Sink;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1cc318.  v0:= "sink" @kind object;
  #L1cc31c.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cc322.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc328.  v0:= temp @kind wide;
  #L1cc32a.  v2:= 0L;
  #L1cc32e.  v4:= lcmp(v0, v2);
  #L1cc332.  if v4 <= 0 then goto L1cc33c;
  #L1cc336.  call `write`(v6, v5, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L1cc33c.  return v0 @kind wide;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readAndWriteUnsafe:()Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1cdbb0.  v0:= 0I;
  #L1cdbb2.  v1:= 1I;
  #L1cdbb4.  call temp:= `readAndWriteUnsafe$default`(v2, v0, v1, v0) @signature `Lokio/Buffer;.readAndWriteUnsafe$default:(Lokio/Buffer;Lokio/Buffer$UnsafeCursor;ILjava/lang/Object;)Lokio/Buffer$UnsafeCursor;` @kind static;
  #L1cdbba.  v0:= temp @kind object;
  #L1cdbbc.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe`(`okio.Buffer` v1 @kind this, `okio.Buffer$UnsafeCursor` v2 @kind object) @signature `Lokio/Buffer;.readAndWriteUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1cdbd0.  v0:= "unsafeCursor" @kind object;
  #L1cdbd4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cdbda.  call temp:= `commonReadAndWriteUnsafe`(v1, v2) @signature `Lokio/internal/BufferKt;.commonReadAndWriteUnsafe:(Lokio/Buffer;Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind static;
  #L1cdbe0.  v2:= temp @kind object;
  #L1cdbe2.  return v2 @kind object;
}
procedure `byte` `readByte`(`okio.Buffer` v9 @kind this) @signature `Lokio/Buffer;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1caffc.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cb002.  v0:= temp @kind wide;
  #L1cb004.  v2:= 0L;
  #L1cb008.  v4:= lcmp(v0, v2);
  #L1cb00c.  if v4 == 0 then goto L1cb060;
  #L1cb010.  v0:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cb014.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cb01a.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cb01e.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1cb022.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cb026.  v4:= v1 + 1;
  #L1cb02a.  v1:= v3[v1] @kind byte;
  #L1cb02e.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cb034.  v5:= temp @kind wide;
  #L1cb036.  v7:= 1L;
  #L1cb03a.  v5:= v5 - v7 @kind long;
  #L1cb03c.  call `setSize$okio`(v9, v5) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cb042.  if v4 != v2 then goto L1cb05a;
  #L1cb046.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1cb04c.  v2:= temp @kind object;
  #L1cb04e.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L1cb052.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1cb058.  goto L1cb05e;
  #L1cb05a.  v0.`okio.Segment.pos` @type ^`int` := v4;
  #L1cb05e.  return v1;
  #L1cb060.  v0:= new `java.io.EOFException`;
  #L1cb064.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1cb06a.  throw v0;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cb07c.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cb082.  v0:= temp @kind wide;
  #L1cb084.  call temp:= `readByteArray`(v2, v0) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L1cb08a.  v0:= temp @kind object;
  #L1cb08c.  return v0 @kind object;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v3 @kind this, `long` v4 ) @signature `Lokio/Buffer;.readByteArray:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1cb0a0.  v0:= 0L;
  #L1cb0a4.  v2:= lcmp(v4, v0);
  #L1cb0a8.  if v2 < 0 then goto L1cb0c0;
  #L1cb0ac.  v0:= 2147483647I;
  #L1cb0b2.  v0:= (`long`) v0 @kind i2l;
  #L1cb0b4.  v2:= lcmp(v4, v0);
  #L1cb0b8.  if v2 > 0 then goto L1cb0c0;
  #L1cb0bc.  v0:= 1I;
  #L1cb0be.  goto L1cb0c2;
  #L1cb0c0.  v0:= 0I;
  #L1cb0c2.  if v0 == 0 then goto L1cb0f0;
  #L1cb0c6.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cb0cc.  v0:= temp @kind wide;
  #L1cb0ce.  v2:= lcmp(v0, v4);
  #L1cb0d2.  if v2 < 0 then goto L1cb0e4;
  #L1cb0d6.  v5:= (`int`) v4 @kind l2i;
  #L1cb0d8.  v4:= new `byte`[v5];
  #L1cb0dc.  call `readFully`(v3, v4) @signature `Lokio/Buffer;.readFully:([B)V` @kind virtual;
  #L1cb0e2.  return v4 @kind object;
  #L1cb0e4.  v4:= new `java.io.EOFException`;
  #L1cb0e8.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1cb0ee.  throw v4;
  #L1cb0f0.  v0:= new `java.lang.StringBuilder`;
  #L1cb0f4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb0fa.  v1:= "byteCount: " @kind object;
  #L1cb0fe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb104.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb10a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb110.  v4:= temp @kind object;
  #L1cb112.  v5:= new `java.lang.IllegalArgumentException`;
  #L1cb116.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb11c.  v4:= temp @kind object;
  #L1cb11e.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cb124.  throw v5;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ce0ac.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce0b2.  v0:= temp @kind wide;
  #L1ce0b4.  call temp:= `readByteString`(v2, v0) @signature `Lokio/Buffer;.readByteString:(J)Lokio/ByteString;` @kind virtual;
  #L1ce0ba.  v0:= temp @kind object;
  #L1ce0bc.  return v0 @kind object;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v3 @kind this, `long` v4 ) @signature `Lokio/Buffer;.readByteString:(J)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1ce0d0.  v0:= 0L;
  #L1ce0d4.  v2:= lcmp(v4, v0);
  #L1ce0d8.  if v2 < 0 then goto L1ce0f0;
  #L1ce0dc.  v0:= 2147483647I;
  #L1ce0e2.  v0:= (`long`) v0 @kind i2l;
  #L1ce0e4.  v2:= lcmp(v4, v0);
  #L1ce0e8.  if v2 > 0 then goto L1ce0f0;
  #L1ce0ec.  v0:= 1I;
  #L1ce0ee.  goto L1ce0f2;
  #L1ce0f0.  v0:= 0I;
  #L1ce0f2.  if v0 == 0 then goto L1ce146;
  #L1ce0f6.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce0fc.  v0:= temp @kind wide;
  #L1ce0fe.  v2:= lcmp(v0, v4);
  #L1ce102.  if v2 < 0 then goto L1ce13a;
  #L1ce106.  v0:= 4096I;
  #L1ce10a.  v0:= (`long`) v0 @kind i2l;
  #L1ce10c.  v2:= lcmp(v4, v0);
  #L1ce110.  if v2 < 0 then goto L1ce126;
  #L1ce114.  v0:= (`int`) v4 @kind l2i;
  #L1ce116.  call temp:= `snapshot`(v3, v0) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @kind virtual;
  #L1ce11c.  v0:= temp @kind object;
  #L1ce11e.  call `skip`(v3, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1ce124.  goto L1ce138;
  #L1ce126.  v0:= new `okio.ByteString`;
  #L1ce12a.  call temp:= `readByteArray`(v3, v4) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L1ce130.  v4:= temp @kind object;
  #L1ce132.  call `<init>`(v0, v4) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L1ce138.  return v0 @kind object;
  #L1ce13a.  v4:= new `java.io.EOFException`;
  #L1ce13e.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1ce144.  throw v4;
  #L1ce146.  v0:= new `java.lang.StringBuilder`;
  #L1ce14a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ce150.  v1:= "byteCount: " @kind object;
  #L1ce154.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ce15a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ce160.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ce166.  v4:= temp @kind object;
  #L1ce168.  v5:= new `java.lang.IllegalArgumentException`;
  #L1ce16c.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ce172.  v4:= temp @kind object;
  #L1ce174.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ce17a.  throw v5;
}
procedure `long` `readDecimalLong`(`okio.Buffer` v17 @kind this) @signature `Lokio/Buffer;.readDecimalLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L1cc350.  v0:= v17 @kind object;
  #L1cc354.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc35a.  v1:= temp @kind wide;
  #L1cc35c.  v3:= 0L;
  #L1cc360.  v5:= lcmp(v1, v3);
  #L1cc364.  if v5 == 0 then goto L1cc4f0;
  #L1cc368.  v1:= -7L;
  #L1cc36c.  v5:= 0I;
  #L1cc36e.  v6:= 0I;
  #L1cc370.  v7:= 0I;
  #L1cc372.  v8:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cc376.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cc37c.  v9:= v8.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cc380.  v10:= v8.`okio.Segment.pos` @type ^`int`;
  #L1cc384.  v11:= v8.`okio.Segment.limit` @type ^`int`;
  #L1cc388.  v12:= 1I;
  #L1cc38a.  if v10 >= v11 then goto L1cc4a2;
  #L1cc38e.  v13:= v9[v10] @kind byte;
  #L1cc392.  v14:= 48I;
  #L1cc396.  v14:= (`byte`) v14 @kind i2b;
  #L1cc398.  if v13 < v14 then goto L1cc438;
  #L1cc39c.  v15:= 57I;
  #L1cc3a0.  v15:= (`byte`) v15 @kind i2b;
  #L1cc3a2.  if v13 > v15 then goto L1cc438;
  #L1cc3a6.  v14:= v14 - v13 @kind int;
  #L1cc3a8.  v15:= -922337203685477580L;
  #L1cc3b2.  v12:= lcmp(v3, v15);
  #L1cc3b6.  if v12 < 0 then goto L1cc3de;
  #L1cc3ba.  v15:= v7;
  #L1cc3bc.  v16:= v8 @kind object;
  #L1cc3c0.  if v12 != 0 then goto L1cc3d0;
  #L1cc3c4.  v7:= (`long`) v14 @kind i2l;
  #L1cc3c6.  v12:= lcmp(v7, v1);
  #L1cc3ca.  if v12 >= 0 then goto L1cc3d0;
  #L1cc3ce.  goto L1cc3de;
  #L1cc3d0.  v7:= 10L;
  #L1cc3d4.  v3:= v3 * v7 @kind long;
  #L1cc3d8.  v7:= (`long`) v14 @kind i2l;
  #L1cc3da.  v3:= v3 + v7 @kind long;
  #L1cc3dc.  goto L1cc454;
  #L1cc3de.  v1:= new `okio.Buffer`;
  #L1cc3e2.  call `<init>`(v1) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1cc3e8.  call temp:= `writeDecimalLong`(v1, v3) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L1cc3ee.  v1:= temp @kind object;
  #L1cc3f0.  call temp:= `writeByte`(v1, v13) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1cc3f6.  v1:= temp @kind object;
  #L1cc3f8.  if v6 != 0 then goto L1cc402;
  #L1cc3fc.  call temp:= `readByte`(v1) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1cc402.  v2:= new `java.lang.NumberFormatException`;
  #L1cc406.  v3:= new `java.lang.StringBuilder`;
  #L1cc40a.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cc410.  v4:= "Number too large: " @kind object;
  #L1cc414.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cc41a.  call temp:= `readUtf8`(v1) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L1cc420.  v1:= temp @kind object;
  #L1cc422.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cc428.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cc42e.  v1:= temp @kind object;
  #L1cc430.  call `<init>`(v2, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cc436.  throw v2;
  #L1cc438.  v15:= v7;
  #L1cc43a.  v16:= v8 @kind object;
  #L1cc43e.  v7:= 45I;
  #L1cc442.  v7:= (`byte`) v7 @kind i2b;
  #L1cc444.  if v13 != v7 then goto L1cc464;
  #L1cc448.  if v5 != 0 then goto L1cc464;
  #L1cc44c.  v6:= 1L;
  #L1cc450.  v1:= v1 - v6 @kind long;
  #L1cc452.  v6:= 1I;
  #L1cc454.  v10:= v10 + 1;
  #L1cc458.  v5:= v5 + 1;
  #L1cc45c.  v7:= v15;
  #L1cc45e.  v8:= v16 @kind object;
  #L1cc462.  goto L1cc388;
  #L1cc464.  if v5 == 0 then goto L1cc46c;
  #L1cc468.  v7:= 1I;
  #L1cc46a.  goto L1cc4a8;
  #L1cc46c.  v1:= new `java.lang.NumberFormatException`;
  #L1cc470.  v2:= new `java.lang.StringBuilder`;
  #L1cc474.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cc47a.  v3:= "Expected leading [0-9] or '-' character but was 0x" @kind object;
  #L1cc47e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cc484.  call temp:= `toHexString`(v13) @signature `Lokio/-Util;.toHexString:(B)Ljava/lang/String;` @kind static;
  #L1cc48a.  v3:= temp @kind object;
  #L1cc48c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cc492.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cc498.  v2:= temp @kind object;
  #L1cc49a.  call `<init>`(v1, v2) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cc4a0.  throw v1;
  #L1cc4a2.  v15:= v7;
  #L1cc4a4.  v16:= v8 @kind object;
  #L1cc4a8.  if v10 != v11 then goto L1cc4c0;
  #L1cc4ac.  call temp:= `pop`(v16) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1cc4b2.  v8:= temp @kind object;
  #L1cc4b4.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L1cc4b8.  call `recycle`(v16) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1cc4be.  goto L1cc4c8;
  #L1cc4c0.  v8:= v16 @kind object;
  #L1cc4c4.  v8.`okio.Segment.pos` @type ^`int` := v10;
  #L1cc4c8.  if v7 != 0 then goto L1cc4d4;
  #L1cc4cc.  v8:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cc4d0.  if v8 != 0 then goto L1cc372;
  #L1cc4d4.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc4da.  v1:= temp @kind wide;
  #L1cc4dc.  v7:= (`long`) v5 @kind i2l;
  #L1cc4de.  v1:= v1 - v7 @kind long;
  #L1cc4e0.  call `setSize$okio`(v0, v1) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cc4e6.  if v6 == 0 then goto L1cc4ec;
  #L1cc4ea.  goto L1cc4ee;
  #L1cc4ec.  v3:= -v3 @kind long;
  #L1cc4ee.  return v3 @kind wide;
  #L1cc4f0.  v1:= new `java.io.EOFException`;
  #L1cc4f4.  call `<init>`(v1) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1cc4fa.  throw v1;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v3 @kind this, `java.io.InputStream` v4 @kind object) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1ccc0c.  v0:= "input" @kind object;
  #L1ccc10.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ccc16.  v0:= 9223372036854775807L;
  #L1ccc20.  v2:= 1I;
  #L1ccc22.  call `c`(v3, v4, v0, v2) @signature `Lokio/Buffer;.c:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L1ccc28.  return v3 @kind object;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v4 @kind this, `java.io.InputStream` v5 @kind object, `long` v6 ) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ccc3c.  v0:= "input" @kind object;
  #L1ccc40.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ccc46.  v0:= 0I;
  #L1ccc48.  v1:= 0L;
  #L1ccc4c.  v3:= lcmp(v6, v1);
  #L1ccc50.  if v3 < 0 then goto L1ccc58;
  #L1ccc54.  v1:= 1I;
  #L1ccc56.  goto L1ccc5a;
  #L1ccc58.  v1:= 0I;
  #L1ccc5a.  if v1 == 0 then goto L1ccc66;
  #L1ccc5e.  call `c`(v4, v5, v6, v0) @signature `Lokio/Buffer;.c:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L1ccc64.  return v4 @kind object;
  #L1ccc66.  v5:= new `java.lang.StringBuilder`;
  #L1ccc6a.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ccc70.  v0:= "byteCount < 0: " @kind object;
  #L1ccc74.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ccc7a.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ccc80.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ccc86.  v5:= temp @kind object;
  #L1ccc88.  v6:= new `java.lang.IllegalArgumentException`;
  #L1ccc8c.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ccc92.  v5:= temp @kind object;
  #L1ccc94.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ccc9a.  throw v6;
}
procedure `void` `readFully`(`okio.Buffer` v3 @kind this, `okio.Buffer` v4 @kind object, `long` v5 ) @signature `Lokio/Buffer;.readFully:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1ce620.  v0:= "sink" @kind object;
  #L1ce624.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ce62a.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce630.  v0:= temp @kind wide;
  #L1ce632.  v2:= lcmp(v0, v5);
  #L1ce636.  if v2 < 0 then goto L1ce642;
  #L1ce63a.  call `write`(v4, v3, v5) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L1ce640.  return @kind void;
  #L1ce642.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce648.  v5:= temp @kind wide;
  #L1ce64a.  call `write`(v4, v3, v5) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L1ce650.  v4:= new `java.io.EOFException`;
  #L1ce654.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1ce65a.  throw v4;
}
procedure `void` `readFully`(`okio.Buffer` v3 @kind this, `byte`[] v4 @kind object) @signature `Lokio/Buffer;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1ce5d8.  v0:= "sink" @kind object;
  #L1ce5dc.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ce5e2.  v0:= 0I;
  #L1ce5e4.  v1:= length @variable v4;
  #L1ce5e6.  if v0 >= v1 then goto L1ce60c;
  #L1ce5ea.  v1:= length @variable v4;
  #L1ce5ec.  v1:= v1 - v0 @kind int;
  #L1ce5ee.  call temp:= `read`(v3, v4, v0, v1) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L1ce5f4.  v1:= temp;
  #L1ce5f6.  v2:= -1I;
  #L1ce5f8.  if v1 == v2 then goto L1ce600;
  #L1ce5fc.  v0:= v0 + v1 @kind int;
  #L1ce5fe.  goto L1ce5e4;
  #L1ce600.  v4:= new `java.io.EOFException`;
  #L1ce604.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1ce60a.  throw v4;
  #L1ce60c.  return @kind void;
}
procedure `long` `readHexadecimalUnsignedLong`(`okio.Buffer` v15 @kind this) @signature `Lokio/Buffer;.readHexadecimalUnsignedLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L1cc50c.  call temp:= `size`(v15) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc512.  v0:= temp @kind wide;
  #L1cc514.  v2:= 0L;
  #L1cc518.  v4:= lcmp(v0, v2);
  #L1cc51c.  if v4 == 0 then goto L1cc67c;
  #L1cc520.  v0:= 0I;
  #L1cc522.  v4:= v2 @kind wide;
  #L1cc524.  v1:= 0I;
  #L1cc526.  v6:= v15.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cc52a.  call `checkNotNull`(v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cc530.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cc534.  v8:= v6.`okio.Segment.pos` @type ^`int`;
  #L1cc538.  v9:= v6.`okio.Segment.limit` @type ^`int`;
  #L1cc53c.  if v8 >= v9 then goto L1cc640;
  #L1cc540.  v10:= v7[v8] @kind byte;
  #L1cc544.  v11:= 48I;
  #L1cc548.  v11:= (`byte`) v11 @kind i2b;
  #L1cc54a.  if v10 < v11 then goto L1cc55e;
  #L1cc54e.  v12:= 57I;
  #L1cc552.  v12:= (`byte`) v12 @kind i2b;
  #L1cc554.  if v10 > v12 then goto L1cc55e;
  #L1cc558.  v11:= v10 - v11 @kind int;
  #L1cc55c.  goto L1cc592;
  #L1cc55e.  v11:= 97I;
  #L1cc562.  v11:= (`byte`) v11 @kind i2b;
  #L1cc564.  if v10 < v11 then goto L1cc57c;
  #L1cc568.  v12:= 102I;
  #L1cc56c.  v12:= (`byte`) v12 @kind i2b;
  #L1cc56e.  if v10 > v12 then goto L1cc57c;
  #L1cc572.  v11:= v10 - v11 @kind int;
  #L1cc576.  v11:= v11 + 10;
  #L1cc57a.  goto L1cc592;
  #L1cc57c.  v11:= 65I;
  #L1cc580.  v11:= (`byte`) v11 @kind i2b;
  #L1cc582.  if v10 < v11 then goto L1cc602;
  #L1cc586.  v12:= 70I;
  #L1cc58a.  v12:= (`byte`) v12 @kind i2b;
  #L1cc58c.  if v10 > v12 then goto L1cc602;
  #L1cc590.  goto L1cc572;
  #L1cc592.  v12:= -3.105036184601418E231D;
  #L1cc596.  v12:= v12 ^& v4 @kind long;
  #L1cc598.  v14:= lcmp(v12, v2);
  #L1cc59c.  if v14 != 0 then goto L1cc5b2;
  #L1cc5a0.  v10:= 4I;
  #L1cc5a2.  v4:= v4 ^< v10 @kind long;
  #L1cc5a4.  v10:= (`long`) v11 @kind i2l;
  #L1cc5a6.  v4:= v4 ^| v10 @kind long;
  #L1cc5a8.  v8:= v8 + 1;
  #L1cc5ac.  v0:= v0 + 1;
  #L1cc5b0.  goto L1cc53c;
  #L1cc5b2.  v0:= new `okio.Buffer`;
  #L1cc5b6.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1cc5bc.  call temp:= `writeHexadecimalUnsignedLong`(v0, v4) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L1cc5c2.  v0:= temp @kind object;
  #L1cc5c4.  call temp:= `writeByte`(v0, v10) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1cc5ca.  v0:= temp @kind object;
  #L1cc5cc.  v1:= new `java.lang.NumberFormatException`;
  #L1cc5d0.  v2:= new `java.lang.StringBuilder`;
  #L1cc5d4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cc5da.  v3:= "Number too large: " @kind object;
  #L1cc5de.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cc5e4.  call temp:= `readUtf8`(v0) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L1cc5ea.  v0:= temp @kind object;
  #L1cc5ec.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cc5f2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cc5f8.  v0:= temp @kind object;
  #L1cc5fa.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cc600.  throw v1;
  #L1cc602.  if v0 == 0 then goto L1cc60a;
  #L1cc606.  v1:= 1I;
  #L1cc608.  goto L1cc640;
  #L1cc60a.  v0:= new `java.lang.NumberFormatException`;
  #L1cc60e.  v1:= new `java.lang.StringBuilder`;
  #L1cc612.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cc618.  v2:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L1cc61c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cc622.  call temp:= `toHexString`(v10) @signature `Lokio/-Util;.toHexString:(B)Ljava/lang/String;` @kind static;
  #L1cc628.  v2:= temp @kind object;
  #L1cc62a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cc630.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cc636.  v1:= temp @kind object;
  #L1cc638.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cc63e.  throw v0;
  #L1cc640.  if v8 != v9 then goto L1cc658;
  #L1cc644.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1cc64a.  v7:= temp @kind object;
  #L1cc64c.  v15.`okio.Buffer.head` @type ^`okio.Segment` := v7 @kind object;
  #L1cc650.  call `recycle`(v6) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1cc656.  goto L1cc65c;
  #L1cc658.  v6.`okio.Segment.pos` @type ^`int` := v8;
  #L1cc65c.  if v1 != 0 then goto L1cc668;
  #L1cc660.  v6:= v15.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cc664.  if v6 != 0 then goto L1cc526;
  #L1cc668.  call temp:= `size`(v15) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc66e.  v1:= temp @kind wide;
  #L1cc670.  v6:= (`long`) v0 @kind i2l;
  #L1cc672.  v1:= v1 - v6 @kind long;
  #L1cc674.  call `setSize$okio`(v15, v1) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cc67a.  return v4 @kind wide;
  #L1cc67c.  v0:= new `java.io.EOFException`;
  #L1cc680.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1cc686.  throw v0;
}
procedure `int` `readInt`(`okio.Buffer` v8 @kind this) @signature `Lokio/Buffer;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1cb2c8.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cb2ce.  v0:= temp @kind wide;
  #L1cb2d0.  v2:= 4L;
  #L1cb2d4.  v4:= lcmp(v0, v2);
  #L1cb2d8.  if v4 < 0 then goto L1cb3b6;
  #L1cb2dc.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cb2e0.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cb2e6.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cb2ea.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L1cb2ee.  v5:= v4 - v1 @kind int;
  #L1cb2f2.  v5:= (`long`) v5 @kind i2l;
  #L1cb2f4.  v7:= lcmp(v5, v2);
  #L1cb2f8.  if v7 >= 0 then goto L1cb340;
  #L1cb2fc.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1cb302.  v0:= temp;
  #L1cb304.  v0:= v0 ^& 255;
  #L1cb308.  v0:= v0 ^< 24;
  #L1cb30c.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1cb312.  v1:= temp;
  #L1cb314.  v1:= v1 ^& 255;
  #L1cb318.  v1:= v1 ^< 16;
  #L1cb31c.  v0:= v0 ^| v1 @kind int;
  #L1cb31e.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1cb324.  v1:= temp;
  #L1cb326.  v1:= v1 ^& 255;
  #L1cb32a.  v1:= v1 ^< 8;
  #L1cb32e.  v0:= v0 ^| v1 @kind int;
  #L1cb330.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1cb336.  v1:= temp;
  #L1cb338.  v1:= v1 ^& 255;
  #L1cb33c.  v0:= v0 ^| v1 @kind int;
  #L1cb33e.  goto L1cb3b4;
  #L1cb340.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cb344.  v6:= v1 + 1;
  #L1cb348.  v1:= v5[v1] @kind byte;
  #L1cb34c.  v1:= v1 ^& 255;
  #L1cb350.  v1:= v1 ^< 24;
  #L1cb354.  v7:= v6 + 1;
  #L1cb358.  v6:= v5[v6] @kind byte;
  #L1cb35c.  v6:= v6 ^& 255;
  #L1cb360.  v6:= v6 ^< 16;
  #L1cb364.  v1:= v1 ^| v6 @kind int;
  #L1cb366.  v6:= v7 + 1;
  #L1cb36a.  v7:= v5[v7] @kind byte;
  #L1cb36e.  v7:= v7 ^& 255;
  #L1cb372.  v7:= v7 ^< 8;
  #L1cb376.  v1:= v1 ^| v7 @kind int;
  #L1cb378.  v7:= v6 + 1;
  #L1cb37c.  v5:= v5[v6] @kind byte;
  #L1cb380.  v5:= v5 ^& 255;
  #L1cb384.  v1:= v1 ^| v5 @kind int;
  #L1cb386.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cb38c.  v5:= temp @kind wide;
  #L1cb38e.  v5:= v5 - v2 @kind long;
  #L1cb390.  call `setSize$okio`(v8, v5) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cb396.  if v7 != v4 then goto L1cb3ae;
  #L1cb39a.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1cb3a0.  v2:= temp @kind object;
  #L1cb3a2.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L1cb3a6.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1cb3ac.  goto L1cb3b2;
  #L1cb3ae.  v0.`okio.Segment.pos` @type ^`int` := v7;
  #L1cb3b2.  v0:= v1;
  #L1cb3b4.  return v0;
  #L1cb3b6.  v0:= new `java.io.EOFException`;
  #L1cb3ba.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1cb3c0.  throw v0;
}
procedure `int` `readIntLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readIntLe:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cb3d4.  call temp:= `readInt`(v1) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L1cb3da.  v0:= temp;
  #L1cb3dc.  call temp:= `reverseBytes`(v0) @signature `Lokio/-Util;.reverseBytes:(I)I` @kind static;
  #L1cb3e2.  v0:= temp;
  #L1cb3e4.  return v0;
}
procedure `long` `readLong`(`okio.Buffer` v14 @kind this) @signature `Lokio/Buffer;.readLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L1cc698.  call temp:= `size`(v14) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc69e.  v0:= temp @kind wide;
  #L1cc6a0.  v2:= 8L;
  #L1cc6a4.  v4:= lcmp(v0, v2);
  #L1cc6a8.  if v4 < 0 then goto L1cc7c8;
  #L1cc6ac.  v0:= v14.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cc6b0.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cc6b6.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cc6ba.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L1cc6be.  v5:= v4 - v1 @kind int;
  #L1cc6c2.  v5:= (`long`) v5 @kind i2l;
  #L1cc6c4.  v7:= 32I;
  #L1cc6c8.  v8:= lcmp(v5, v2);
  #L1cc6cc.  if v8 >= 0 then goto L1cc6f8;
  #L1cc6d0.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L1cc6d6.  v0:= temp;
  #L1cc6d8.  v0:= (`long`) v0 @kind i2l;
  #L1cc6da.  v2:= 4294967295L;
  #L1cc6e4.  v0:= v0 ^& v2 @kind long;
  #L1cc6e6.  v0:= v0 ^< v7 @kind long;
  #L1cc6e8.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L1cc6ee.  v4:= temp;
  #L1cc6f0.  v4:= (`long`) v4 @kind i2l;
  #L1cc6f2.  v2:= v2 ^& v4 @kind long;
  #L1cc6f4.  v0:= v0 ^| v2 @kind long;
  #L1cc6f6.  goto L1cc7c6;
  #L1cc6f8.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cc6fc.  v6:= v1 + 1;
  #L1cc700.  v1:= v5[v1] @kind byte;
  #L1cc704.  v8:= (`long`) v1 @kind i2l;
  #L1cc706.  v10:= 255L;
  #L1cc70a.  v8:= v8 ^& v10 @kind long;
  #L1cc70c.  v1:= 56I;
  #L1cc710.  v8:= v8 ^< v1 @kind long;
  #L1cc712.  v1:= v6 + 1;
  #L1cc716.  v6:= v5[v6] @kind byte;
  #L1cc71a.  v12:= (`long`) v6 @kind i2l;
  #L1cc71c.  v12:= v12 ^& v10 @kind long;
  #L1cc71e.  v6:= 48I;
  #L1cc722.  v12:= v12 ^< v6 @kind long;
  #L1cc724.  v8:= v8 ^| v12 @kind long;
  #L1cc726.  v6:= v1 + 1;
  #L1cc72a.  v1:= v5[v1] @kind byte;
  #L1cc72e.  v12:= (`long`) v1 @kind i2l;
  #L1cc730.  v12:= v12 ^& v10 @kind long;
  #L1cc732.  v1:= 40I;
  #L1cc736.  v12:= v12 ^< v1 @kind long;
  #L1cc738.  v8:= v8 ^| v12 @kind long;
  #L1cc73a.  v1:= v6 + 1;
  #L1cc73e.  v6:= v5[v6] @kind byte;
  #L1cc742.  v12:= (`long`) v6 @kind i2l;
  #L1cc744.  v12:= v12 ^& v10 @kind long;
  #L1cc746.  v6:= v12 ^< v7 @kind long;
  #L1cc74a.  v6:= v6 ^| v8 @kind long;
  #L1cc74c.  v8:= v1 + 1;
  #L1cc750.  v1:= v5[v1] @kind byte;
  #L1cc754.  v12:= (`long`) v1 @kind i2l;
  #L1cc756.  v12:= v12 ^& v10 @kind long;
  #L1cc758.  v1:= 24I;
  #L1cc75c.  v12:= v12 ^< v1 @kind long;
  #L1cc75e.  v6:= v6 ^| v12 @kind long;
  #L1cc760.  v1:= v8 + 1;
  #L1cc764.  v8:= v5[v8] @kind byte;
  #L1cc768.  v8:= (`long`) v8 @kind i2l;
  #L1cc76a.  v8:= v8 ^& v10 @kind long;
  #L1cc76c.  v12:= 16I;
  #L1cc770.  v8:= v8 ^< v12 @kind long;
  #L1cc772.  v6:= v6 ^| v8 @kind long;
  #L1cc774.  v8:= v1 + 1;
  #L1cc778.  v1:= v5[v1] @kind byte;
  #L1cc77c.  v12:= (`long`) v1 @kind i2l;
  #L1cc77e.  v12:= v12 ^& v10 @kind long;
  #L1cc780.  v1:= 8I;
  #L1cc784.  v12:= v12 ^< v1 @kind long;
  #L1cc786.  v6:= v6 ^| v12 @kind long;
  #L1cc788.  v1:= v8 + 1;
  #L1cc78c.  v5:= v5[v8] @kind byte;
  #L1cc790.  v8:= (`long`) v5 @kind i2l;
  #L1cc792.  v8:= v8 ^& v10 @kind long;
  #L1cc794.  v5:= v6 ^| v8 @kind long;
  #L1cc798.  call temp:= `size`(v14) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cc79e.  v7:= temp @kind wide;
  #L1cc7a0.  v7:= v7 - v2 @kind long;
  #L1cc7a2.  call `setSize$okio`(v14, v7) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cc7a8.  if v1 != v4 then goto L1cc7c0;
  #L1cc7ac.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1cc7b2.  v1:= temp @kind object;
  #L1cc7b4.  v14.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L1cc7b8.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1cc7be.  goto L1cc7c4;
  #L1cc7c0.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L1cc7c4.  v0:= v5 @kind wide;
  #L1cc7c6.  return v0 @kind wide;
  #L1cc7c8.  v0:= new `java.io.EOFException`;
  #L1cc7cc.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1cc7d2.  throw v0;
}
procedure `long` `readLongLe`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readLongLe:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cc7e4.  call temp:= `readLong`(v2) @signature `Lokio/Buffer;.readLong:()J` @kind virtual;
  #L1cc7ea.  v0:= temp @kind wide;
  #L1cc7ec.  call temp:= `reverseBytes`(v0) @signature `Lokio/-Util;.reverseBytes:(J)J` @kind static;
  #L1cc7f2.  v0:= temp @kind wide;
  #L1cc7f4.  return v0 @kind wide;
}
procedure `short` `readShort`(`okio.Buffer` v8 @kind this) @signature `Lokio/Buffer;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1ce3f0.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce3f6.  v0:= temp @kind wide;
  #L1ce3f8.  v2:= 2L;
  #L1ce3fc.  v4:= lcmp(v0, v2);
  #L1ce400.  if v4 < 0 then goto L1ce494;
  #L1ce404.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ce408.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ce40e.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1ce412.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L1ce416.  v5:= v4 - v1 @kind int;
  #L1ce41a.  v6:= 2I;
  #L1ce41c.  if v5 >= v6 then goto L1ce442;
  #L1ce420.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1ce426.  v0:= temp;
  #L1ce428.  v0:= v0 ^& 255;
  #L1ce42c.  v0:= v0 ^< 8;
  #L1ce430.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1ce436.  v1:= temp;
  #L1ce438.  v1:= v1 ^& 255;
  #L1ce43c.  v0:= v0 ^| v1 @kind int;
  #L1ce43e.  v0:= (`short`) v0 @kind i2s;
  #L1ce440.  goto L1ce492;
  #L1ce442.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ce446.  v6:= v1 + 1;
  #L1ce44a.  v1:= v5[v1] @kind byte;
  #L1ce44e.  v1:= v1 ^& 255;
  #L1ce452.  v1:= v1 ^< 8;
  #L1ce456.  v7:= v6 + 1;
  #L1ce45a.  v5:= v5[v6] @kind byte;
  #L1ce45e.  v5:= v5 ^& 255;
  #L1ce462.  v1:= v1 ^| v5 @kind int;
  #L1ce464.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce46a.  v5:= temp @kind wide;
  #L1ce46c.  v5:= v5 - v2 @kind long;
  #L1ce46e.  call `setSize$okio`(v8, v5) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1ce474.  if v7 != v4 then goto L1ce48c;
  #L1ce478.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1ce47e.  v2:= temp @kind object;
  #L1ce480.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L1ce484.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1ce48a.  goto L1ce490;
  #L1ce48c.  v0.`okio.Segment.pos` @type ^`int` := v7;
  #L1ce490.  v0:= (`short`) v1 @kind i2s;
  #L1ce492.  return v0;
  #L1ce494.  v0:= new `java.io.EOFException`;
  #L1ce498.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1ce49e.  throw v0;
}
procedure `short` `readShortLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readShortLe:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ce4b0.  call temp:= `readShort`(v1) @signature `Lokio/Buffer;.readShort:()S` @kind virtual;
  #L1ce4b6.  v0:= temp;
  #L1ce4b8.  call temp:= `reverseBytes`(v0) @signature `Lokio/-Util;.reverseBytes:(S)S` @kind static;
  #L1ce4be.  v0:= temp;
  #L1ce4c0.  return v0;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v7 @kind this, `long` v8 , `java.nio.charset.Charset` v10 @kind object) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1cb6b8.  v0:= "charset" @kind object;
  #L1cb6bc.  call `checkNotNullParameter`(v10, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cb6c2.  v0:= 0L;
  #L1cb6c6.  v2:= lcmp(v8, v0);
  #L1cb6ca.  if v2 < 0 then goto L1cb6e2;
  #L1cb6ce.  v0:= 2147483647I;
  #L1cb6d4.  v0:= (`long`) v0 @kind i2l;
  #L1cb6d6.  v3:= lcmp(v8, v0);
  #L1cb6da.  if v3 > 0 then goto L1cb6e2;
  #L1cb6de.  v0:= 1I;
  #L1cb6e0.  goto L1cb6e4;
  #L1cb6e2.  v0:= 0I;
  #L1cb6e4.  if v0 == 0 then goto L1cb77e;
  #L1cb6e8.  v0:= v7.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1cb6ec.  v3:= lcmp(v0, v8);
  #L1cb6f0.  if v3 < 0 then goto L1cb772;
  #L1cb6f4.  if v2 != 0 then goto L1cb6fe;
  #L1cb6f8.  v8:= "" @kind object;
  #L1cb6fc.  return v8 @kind object;
  #L1cb6fe.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cb702.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cb708.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cb70c.  v2:= (`long`) v1 @kind i2l;
  #L1cb70e.  v2:= v2 + v8 @kind long;
  #L1cb710.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L1cb714.  v4:= (`long`) v4 @kind i2l;
  #L1cb716.  v6:= lcmp(v2, v4);
  #L1cb71a.  if v6 <= 0 then goto L1cb732;
  #L1cb71e.  call temp:= `readByteArray`(v7, v8) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L1cb724.  v8:= temp @kind object;
  #L1cb726.  v9:= new `java.lang.String`;
  #L1cb72a.  call `<init>`(v9, v8, v10) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L1cb730.  return v9 @kind object;
  #L1cb732.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cb736.  v3:= (`int`) v8 @kind l2i;
  #L1cb738.  v4:= new `java.lang.String`;
  #L1cb73c.  call `<init>`(v4, v2, v1, v3, v10) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L1cb742.  v10:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cb746.  v10:= v10 + v3 @kind int;
  #L1cb748.  v0.`okio.Segment.pos` @type ^`int` := v10;
  #L1cb74c.  v1:= v7.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1cb750.  v1:= v1 - v8 @kind long;
  #L1cb752.  v7.`okio.Buffer.a` @type ^`long` := v1 @kind wide;
  #L1cb756.  v8:= v0.`okio.Segment.limit` @type ^`int`;
  #L1cb75a.  if v10 != v8 then goto L1cb770;
  #L1cb75e.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1cb764.  v8:= temp @kind object;
  #L1cb766.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L1cb76a.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1cb770.  return v4 @kind object;
  #L1cb772.  v8:= new `java.io.EOFException`;
  #L1cb776.  call `<init>`(v8) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1cb77c.  throw v8;
  #L1cb77e.  v10:= new `java.lang.StringBuilder`;
  #L1cb782.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb788.  v0:= "byteCount: " @kind object;
  #L1cb78c.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb792.  call temp:= `append`(v10, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb798.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb79e.  v8:= temp @kind object;
  #L1cb7a0.  v9:= new `java.lang.IllegalArgumentException`;
  #L1cb7a4.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb7aa.  v8:= temp @kind object;
  #L1cb7ac.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cb7b2.  throw v9;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Lokio/Buffer;.readString:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cb690.  v0:= "charset" @kind object;
  #L1cb694.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cb69a.  v0:= v2.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1cb69e.  call temp:= `readString`(v2, v0, v3) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L1cb6a4.  v3:= temp @kind object;
  #L1cb6a6.  return v3 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readUnsafe:()Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1cdc20.  v0:= 0I;
  #L1cdc22.  v1:= 1I;
  #L1cdc24.  call temp:= `readUnsafe$default`(v2, v0, v1, v0) @signature `Lokio/Buffer;.readUnsafe$default:(Lokio/Buffer;Lokio/Buffer$UnsafeCursor;ILjava/lang/Object;)Lokio/Buffer$UnsafeCursor;` @kind static;
  #L1cdc2a.  v0:= temp @kind object;
  #L1cdc2c.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe`(`okio.Buffer` v1 @kind this, `okio.Buffer$UnsafeCursor` v2 @kind object) @signature `Lokio/Buffer;.readUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1cdc40.  v0:= "unsafeCursor" @kind object;
  #L1cdc44.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cdc4a.  call temp:= `commonReadUnsafe`(v1, v2) @signature `Lokio/internal/BufferKt;.commonReadUnsafe:(Lokio/Buffer;Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind static;
  #L1cdc50.  v2:= temp @kind object;
  #L1cdc52.  return v2 @kind object;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v3 @kind this) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1cb7c4.  v0:= v3.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1cb7c8.  v2:= `@@kotlin.text.Charsets.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L1cb7cc.  call temp:= `readString`(v3, v0, v2) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L1cb7d2.  v0:= temp @kind object;
  #L1cb7d4.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cb7e8.  v0:= `@@kotlin.text.Charsets.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L1cb7ec.  call temp:= `readString`(v1, v2, v0) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L1cb7f2.  v2:= temp @kind object;
  #L1cb7f4.  return v2 @kind object;
}
procedure `int` `readUtf8CodePoint`(`okio.Buffer` v12 @kind this) @signature `Lokio/Buffer;.readUtf8CodePoint:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1cb3f8.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cb3fe.  v0:= temp @kind wide;
  #L1cb400.  v2:= 0L;
  #L1cb404.  v4:= lcmp(v0, v2);
  #L1cb408.  if v4 == 0 then goto L1cb562;
  #L1cb40c.  call temp:= `getByte`(v12, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L1cb412.  v0:= temp;
  #L1cb414.  v1:= v0 ^& 128;
  #L1cb418.  v2:= 1I;
  #L1cb41a.  v3:= 128I;
  #L1cb41e.  v4:= 65533I;
  #L1cb424.  if v1 != 0 then goto L1cb434;
  #L1cb428.  v1:= v0 ^& 127;
  #L1cb42c.  v5:= 0I;
  #L1cb42e.  v5:= 1I;
  #L1cb430.  v6:= 0I;
  #L1cb432.  goto L1cb47a;
  #L1cb434.  v1:= v0 ^& 224;
  #L1cb438.  v5:= 192I;
  #L1cb43c.  if v1 != v5 then goto L1cb44c;
  #L1cb440.  v1:= v0 ^& 31;
  #L1cb444.  v5:= 2I;
  #L1cb446.  v6:= 128I;
  #L1cb44a.  goto L1cb47a;
  #L1cb44c.  v1:= v0 ^& 240;
  #L1cb450.  v5:= 224I;
  #L1cb454.  if v1 != v5 then goto L1cb464;
  #L1cb458.  v1:= v0 ^& 15;
  #L1cb45c.  v5:= 3I;
  #L1cb45e.  v6:= 2048I;
  #L1cb462.  goto L1cb47a;
  #L1cb464.  v1:= v0 ^& 248;
  #L1cb468.  v5:= 240I;
  #L1cb46c.  if v1 != v5 then goto L1cb556;
  #L1cb470.  v1:= v0 ^& 7;
  #L1cb474.  v5:= 4I;
  #L1cb476.  v6:= 65536I;
  #L1cb47a.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cb480.  v7:= temp @kind wide;
  #L1cb482.  v9:= (`long`) v5 @kind i2l;
  #L1cb484.  v11:= lcmp(v7, v9);
  #L1cb488.  if v11 < 0 then goto L1cb4ee;
  #L1cb48c.  if v2 >= v5 then goto L1cb4ba;
  #L1cb490.  v7:= (`long`) v2 @kind i2l;
  #L1cb492.  call temp:= `getByte`(v12, v7) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L1cb498.  v0:= temp;
  #L1cb49a.  v11:= v0 ^& 192;
  #L1cb49e.  if v11 != v3 then goto L1cb4b2;
  #L1cb4a2.  v1:= v1 ^< 6;
  #L1cb4a6.  v0:= v0 ^& 63;
  #L1cb4aa.  v1:= v1 ^| v0 @kind int;
  #L1cb4ac.  v2:= v2 + 1;
  #L1cb4b0.  goto L1cb48c;
  #L1cb4b2.  call `skip`(v12, v7) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1cb4b8.  goto L1cb560;
  #L1cb4ba.  call `skip`(v12, v9) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1cb4c0.  v0:= 1114111I;
  #L1cb4c6.  if v1 <= v0 then goto L1cb4cc;
  #L1cb4ca.  goto L1cb560;
  #L1cb4cc.  v0:= 57343I;
  #L1cb4d2.  v2:= 55296I;
  #L1cb4d8.  if v2 <= v1 then goto L1cb4de;
  #L1cb4dc.  goto L1cb4e4;
  #L1cb4de.  if v0 < v1 then goto L1cb4e4;
  #L1cb4e2.  goto L1cb560;
  #L1cb4e4.  if v1 >= v6 then goto L1cb4ea;
  #L1cb4e8.  goto L1cb560;
  #L1cb4ea.  v4:= v1;
  #L1cb4ec.  goto L1cb560;
  #L1cb4ee.  v1:= new `java.io.EOFException`;
  #L1cb4f2.  v2:= new `java.lang.StringBuilder`;
  #L1cb4f6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb4fc.  v3:= "size < " @kind object;
  #L1cb500.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb506.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb50c.  v3:= ": " @kind object;
  #L1cb510.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb516.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cb51c.  v3:= temp @kind wide;
  #L1cb51e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb524.  v3:= " (to read code point prefixed 0x" @kind object;
  #L1cb528.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb52e.  call temp:= `toHexString`(v0) @signature `Lokio/-Util;.toHexString:(B)Ljava/lang/String;` @kind static;
  #L1cb534.  v0:= temp @kind object;
  #L1cb536.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb53c.  v0:= 41I;
  #L1cb540.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb546.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb54c.  v0:= temp @kind object;
  #L1cb54e.  call `<init>`(v1, v0) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cb554.  throw v1;
  #L1cb556.  v0:= 1L;
  #L1cb55a.  call `skip`(v12, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1cb560.  return v4;
  #L1cb562.  v0:= new `java.io.EOFException`;
  #L1cb566.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1cb56c.  throw v0;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.readUtf8Line:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1cb808.  v0:= 10I;
  #L1cb80c.  v0:= (`byte`) v0 @kind i2b;
  #L1cb80e.  call temp:= `indexOf`(v5, v0) @signature `Lokio/Buffer;.indexOf:(B)J` @kind virtual;
  #L1cb814.  v0:= temp @kind wide;
  #L1cb816.  v2:= -1L;
  #L1cb81a.  v4:= lcmp(v0, v2);
  #L1cb81e.  if v4 == 0 then goto L1cb82c;
  #L1cb822.  call temp:= `readUtf8Line`(v5, v0) @signature `Lokio/internal/BufferKt;.readUtf8Line:(Lokio/Buffer;J)Ljava/lang/String;` @kind static;
  #L1cb828.  v0:= temp @kind object;
  #L1cb82a.  goto L1cb854;
  #L1cb82c.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cb832.  v0:= temp @kind wide;
  #L1cb834.  v2:= 0L;
  #L1cb838.  v4:= lcmp(v0, v2);
  #L1cb83c.  if v4 == 0 then goto L1cb852;
  #L1cb840.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cb846.  v0:= temp @kind wide;
  #L1cb848.  call temp:= `readUtf8`(v5, v0) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L1cb84e.  v0:= temp @kind object;
  #L1cb850.  goto L1cb854;
  #L1cb852.  v0:= 0I;
  #L1cb854.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readUtf8LineStrict:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cb868.  v0:= 9223372036854775807L;
  #L1cb872.  call temp:= `readUtf8LineStrict`(v2, v0) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @kind virtual;
  #L1cb878.  v0:= temp @kind object;
  #L1cb87a.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v11 @kind this, `long` v12 ) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1cb88c.  v0:= 0L;
  #L1cb890.  v2:= lcmp(v12, v0);
  #L1cb894.  if v2 < 0 then goto L1cb89c;
  #L1cb898.  v0:= 1I;
  #L1cb89a.  goto L1cb89e;
  #L1cb89c.  v0:= 0I;
  #L1cb89e.  if v0 == 0 then goto L1cb9be;
  #L1cb8a2.  v0:= 1L;
  #L1cb8a6.  v2:= 9223372036854775807L;
  #L1cb8b0.  v4:= lcmp(v12, v2);
  #L1cb8b4.  if v4 != 0 then goto L1cb8ba;
  #L1cb8b8.  goto L1cb8be;
  #L1cb8ba.  v2:= v12 + v0 @kind long;
  #L1cb8be.  v4:= 10I;
  #L1cb8c2.  v10:= (`byte`) v4 @kind i2b;
  #L1cb8c4.  v6:= 0L;
  #L1cb8c8.  v4:= v11 @kind object;
  #L1cb8ca.  v5:= v10;
  #L1cb8cc.  v8:= v2 @kind wide;
  #L1cb8ce.  call temp:= `indexOf`(v4, v5, v6, v8) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L1cb8d4.  v4:= temp @kind wide;
  #L1cb8d6.  v6:= -1L;
  #L1cb8da.  v8:= lcmp(v4, v6);
  #L1cb8de.  if v8 == 0 then goto L1cb8ec;
  #L1cb8e2.  call temp:= `readUtf8Line`(v11, v4) @signature `Lokio/internal/BufferKt;.readUtf8Line:(Lokio/Buffer;J)Ljava/lang/String;` @kind static;
  #L1cb8e8.  v12:= temp @kind object;
  #L1cb8ea.  goto L1cb926;
  #L1cb8ec.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cb8f2.  v4:= temp @kind wide;
  #L1cb8f4.  v6:= lcmp(v2, v4);
  #L1cb8f8.  if v6 >= 0 then goto L1cb928;
  #L1cb8fc.  v0:= v2 - v0 @kind long;
  #L1cb900.  call temp:= `getByte`(v11, v0) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L1cb906.  v0:= temp;
  #L1cb908.  v1:= 13I;
  #L1cb90c.  v1:= (`byte`) v1 @kind i2b;
  #L1cb90e.  if v0 != v1 then goto L1cb928;
  #L1cb912.  call temp:= `getByte`(v11, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L1cb918.  v0:= temp;
  #L1cb91a.  if v0 != v10 then goto L1cb928;
  #L1cb91e.  call temp:= `readUtf8Line`(v11, v2) @signature `Lokio/internal/BufferKt;.readUtf8Line:(Lokio/Buffer;J)Ljava/lang/String;` @kind static;
  #L1cb924.  v12:= temp @kind object;
  #L1cb926.  return v12 @kind object;
  #L1cb928.  v6:= new `okio.Buffer`;
  #L1cb92c.  call `<init>`(v6) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1cb932.  v2:= 0L;
  #L1cb936.  v0:= 32I;
  #L1cb93a.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cb940.  v4:= temp @kind wide;
  #L1cb942.  v0:= (`long`) v0 @kind i2l;
  #L1cb944.  call temp:= `min`(v0, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1cb94a.  v4:= temp @kind wide;
  #L1cb94c.  v0:= v11 @kind object;
  #L1cb94e.  v1:= v6 @kind object;
  #L1cb950.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L1cb956.  v0:= new `java.io.EOFException`;
  #L1cb95a.  v1:= new `java.lang.StringBuilder`;
  #L1cb95e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb964.  v2:= "\\n not found: limit=" @kind object;
  #L1cb968.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb96e.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cb974.  v2:= temp @kind wide;
  #L1cb976.  call temp:= `min`(v2, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1cb97c.  v12:= temp @kind wide;
  #L1cb97e.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb984.  v12:= " content=" @kind object;
  #L1cb988.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb98e.  call temp:= `readByteString`(v6) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1cb994.  v12:= temp @kind object;
  #L1cb996.  call temp:= `hex`(v12) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L1cb99c.  v12:= temp @kind object;
  #L1cb99e.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb9a4.  v12:= 8230I;
  #L1cb9a8.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb9ae.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb9b4.  v12:= temp @kind object;
  #L1cb9b6.  call `<init>`(v0, v12) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cb9bc.  throw v0;
  #L1cb9be.  v0:= new `java.lang.StringBuilder`;
  #L1cb9c2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cb9c8.  v1:= "limit < 0: " @kind object;
  #L1cb9cc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb9d2.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cb9d8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb9de.  v12:= temp @kind object;
  #L1cb9e0.  v13:= new `java.lang.IllegalArgumentException`;
  #L1cb9e4.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cb9ea.  v12:= temp @kind object;
  #L1cb9ec.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cb9f2.  throw v13;
}
procedure `boolean` `request`(`okio.Buffer` v3 @kind this, `long` v4 ) @signature `Lokio/Buffer;.request:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1caed0.  v0:= v3.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1caed4.  v2:= lcmp(v0, v4);
  #L1caed8.  if v2 < 0 then goto L1caee0;
  #L1caedc.  v4:= 1I;
  #L1caede.  goto L1caee2;
  #L1caee0.  v4:= 0I;
  #L1caee2.  return v4;
}
procedure `void` `require`(`okio.Buffer` v3 @kind this, `long` v4 ) @signature `Lokio/Buffer;.require:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1ce66c.  v0:= v3.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1ce670.  v2:= lcmp(v0, v4);
  #L1ce674.  if v2 < 0 then goto L1ce67a;
  #L1ce678.  return @kind void;
  #L1ce67a.  v4:= new `java.io.EOFException`;
  #L1ce67e.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1ce684.  throw v4;
}
procedure `int` `select`(`okio.Buffer` v3 @kind this, `okio.Options` v4 @kind object) @signature `Lokio/Buffer;.select:(Lokio/Options;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1cb580.  v0:= "options" @kind object;
  #L1cb584.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cb58a.  v0:= 0I;
  #L1cb58c.  v1:= 2I;
  #L1cb58e.  v2:= 0I;
  #L1cb590.  call temp:= `selectPrefix$default`(v3, v4, v0, v1, v2) @signature `Lokio/internal/BufferKt;.selectPrefix$default:(Lokio/Buffer;Lokio/Options;ZILjava/lang/Object;)I` @kind static;
  #L1cb596.  v0:= temp;
  #L1cb598.  v1:= -1I;
  #L1cb59a.  if v0 != v1 then goto L1cb5a2;
  #L1cb59e.  v0:= -1I;
  #L1cb5a0.  goto L1cb5be;
  #L1cb5a2.  call temp:= `getByteStrings$okio`(v4) @signature `Lokio/Options;.getByteStrings$okio:()[Lokio/ByteString;` @kind virtual;
  #L1cb5a8.  v4:= temp @kind object;
  #L1cb5aa.  v4:= v4[v0] @kind object;
  #L1cb5ae.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1cb5b4.  v4:= temp;
  #L1cb5b6.  v1:= (`long`) v4 @kind i2l;
  #L1cb5b8.  call `skip`(v3, v1) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1cb5be.  return v0;
}
procedure `void` `setSize$okio`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.setSize$okio:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1ce698.  v0.`okio.Buffer.a` @type ^`long` := v1 @kind wide;
  #L1ce69c.  return @kind void;
}
procedure `okio.ByteString` `sha1`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha1:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ce18c.  v0:= "SHA-1" @kind object;
  #L1ce190.  call temp:= `a`(v1, v0) @signature `Lokio/Buffer;.a:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L1ce196.  v0:= temp @kind object;
  #L1ce198.  return v0 @kind object;
}
procedure `okio.ByteString` `sha256`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha256:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ce1ac.  v0:= "SHA-256" @kind object;
  #L1ce1b0.  call temp:= `a`(v1, v0) @signature `Lokio/Buffer;.a:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L1ce1b6.  v0:= temp @kind object;
  #L1ce1b8.  return v0 @kind object;
}
procedure `okio.ByteString` `sha512`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha512:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1ce1cc.  v0:= "SHA-512" @kind object;
  #L1ce1d0.  call temp:= `a`(v1, v0) @signature `Lokio/Buffer;.a:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L1ce1d6.  v0:= temp @kind object;
  #L1ce1d8.  return v0 @kind object;
}
procedure `long` `size`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.size:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1cc808.  v0:= v2.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1cc80c.  return v0 @kind wide;
}
procedure `void` `skip`(`okio.Buffer` v7 @kind this, `long` v8 ) @signature `Lokio/Buffer;.skip:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1ce6b0.  v0:= 0L;
  #L1ce6b4.  v2:= lcmp(v8, v0);
  #L1ce6b8.  if v2 <= 0 then goto L1ce720;
  #L1ce6bc.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ce6c0.  if v0 == 0 then goto L1ce714;
  #L1ce6c4.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L1ce6c8.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1ce6cc.  v1:= v1 - v2 @kind int;
  #L1ce6ce.  v1:= (`long`) v1 @kind i2l;
  #L1ce6d0.  call temp:= `min`(v8, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1ce6d6.  v1:= temp @kind wide;
  #L1ce6d8.  v2:= (`int`) v1 @kind l2i;
  #L1ce6da.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce6e0.  v3:= temp @kind wide;
  #L1ce6e2.  v5:= (`long`) v2 @kind i2l;
  #L1ce6e4.  v3:= v3 - v5 @kind long;
  #L1ce6e6.  call `setSize$okio`(v7, v3) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1ce6ec.  v8:= v8 - v5 @kind long;
  #L1ce6ee.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1ce6f2.  v1:= v1 + v2 @kind int;
  #L1ce6f4.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L1ce6f8.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1ce6fc.  if v1 != v2 then goto L1ce6b0;
  #L1ce700.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1ce706.  v1:= temp @kind object;
  #L1ce708.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L1ce70c.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1ce712.  goto L1ce6b0;
  #L1ce714.  v8:= new `java.io.EOFException`;
  #L1ce718.  call `<init>`(v8) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1ce71e.  throw v8;
  #L1ce720.  return @kind void;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ce1ec.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce1f2.  v0:= temp @kind wide;
  #L1ce1f4.  v2:= 2147483647I;
  #L1ce1fa.  v2:= (`long`) v2 @kind i2l;
  #L1ce1fc.  v4:= lcmp(v0, v2);
  #L1ce200.  if v4 > 0 then goto L1ce208;
  #L1ce204.  v0:= 1I;
  #L1ce206.  goto L1ce20a;
  #L1ce208.  v0:= 0I;
  #L1ce20a.  if v0 == 0 then goto L1ce222;
  #L1ce20e.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce214.  v0:= temp @kind wide;
  #L1ce216.  v1:= (`int`) v0 @kind l2i;
  #L1ce218.  call temp:= `snapshot`(v5, v1) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @kind virtual;
  #L1ce21e.  v0:= temp @kind object;
  #L1ce220.  return v0 @kind object;
  #L1ce222.  v0:= new `java.lang.StringBuilder`;
  #L1ce226.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ce22c.  v1:= "size > Int.MAX_VALUE: " @kind object;
  #L1ce230.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ce236.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce23c.  v1:= temp @kind wide;
  #L1ce23e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ce244.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ce24a.  v0:= temp @kind object;
  #L1ce24c.  v1:= new `java.lang.IllegalStateException`;
  #L1ce250.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ce256.  v0:= temp @kind object;
  #L1ce258.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ce25e.  throw v1;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v8 @kind this, `int` v9 ) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1ce270.  if v9 != 0 then goto L1ce27a;
  #L1ce274.  v9:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L1ce278.  goto L1ce32e;
  #L1ce27a.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce280.  v0:= temp @kind wide;
  #L1ce282.  v2:= 0L;
  #L1ce286.  v4:= (`long`) v9 @kind i2l;
  #L1ce288.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1ce28e.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ce292.  v1:= 0I;
  #L1ce294.  v2:= 0I;
  #L1ce296.  v3:= 0I;
  #L1ce298.  if v2 >= v9 then goto L1ce2cc;
  #L1ce29c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ce2a2.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L1ce2a6.  v5:= v0.`okio.Segment.pos` @type ^`int`;
  #L1ce2aa.  if v4 == v5 then goto L1ce2bc;
  #L1ce2ae.  v4:= v4 - v5 @kind int;
  #L1ce2b0.  v2:= v2 + v4 @kind int;
  #L1ce2b2.  v3:= v3 + 1;
  #L1ce2b6.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1ce2ba.  goto L1ce298;
  #L1ce2bc.  v9:= new `java.lang.AssertionError`;
  #L1ce2c0.  v0:= "s.limit == s.pos" @kind object;
  #L1ce2c4.  call `<init>`(v9, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1ce2ca.  throw v9;
  #L1ce2cc.  v0:= new `byte`[][v3];
  #L1ce2d0.  v2:= v3 * 2;
  #L1ce2d4.  v2:= new `int`[v2];
  #L1ce2d8.  v4:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ce2dc.  v5:= v4 @kind object;
  #L1ce2de.  v4:= 0I;
  #L1ce2e0.  if v1 >= v9 then goto L1ce324;
  #L1ce2e4.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ce2ea.  v6:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ce2ee.  v0[v4]:= v6 @kind object;
  #L1ce2f2.  v6:= v5.`okio.Segment.limit` @type ^`int`;
  #L1ce2f6.  v7:= v5.`okio.Segment.pos` @type ^`int`;
  #L1ce2fa.  v6:= v6 - v7 @kind int;
  #L1ce2fc.  v1:= v1 + v6 @kind int;
  #L1ce2fe.  call temp:= `min`(v1, v9) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1ce304.  v6:= temp;
  #L1ce306.  v2[v4]:= v6;
  #L1ce30a.  v6:= v4 + v3 @kind int;
  #L1ce30e.  v7:= v5.`okio.Segment.pos` @type ^`int`;
  #L1ce312.  v2[v6]:= v7;
  #L1ce316.  v6:= 1I;
  #L1ce318.  v5.`okio.Segment.shared` @type ^`boolean` := v6 @kind boolean;
  #L1ce31c.  v4:= v4 + v6 @kind int;
  #L1ce31e.  v5:= v5.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1ce322.  goto L1ce2e0;
  #L1ce324.  v9:= new `okio.SegmentedByteString`;
  #L1ce328.  call `<init>`(v9, v0, v2) @signature `Lokio/SegmentedByteString;.<init>:([[B[I)V` @kind direct;
  #L1ce32e.  return v9 @kind object;
}
procedure `okio.Timeout` `timeout`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ce3d8.  v0:= `@@okio.Timeout.NONE` @type ^`okio.Timeout` @kind object;
  #L1ce3dc.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1cba04.  call temp:= `snapshot`(v1) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @kind virtual;
  #L1cba0a.  v0:= temp @kind object;
  #L1cba0c.  call temp:= `toString`(v0) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cba12.  v0:= temp @kind object;
  #L1cba14.  return v0 @kind object;
}
procedure `okio.Segment` `writableSegment$okio`(`okio.Buffer` v3 @kind this, `int` v4 ) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1ce340.  v0:= 8192I;
  #L1ce344.  v1:= 1I;
  #L1ce346.  if v4 < v1 then goto L1ce350;
  #L1ce34a.  if v4 > v0 then goto L1ce350;
  #L1ce34e.  goto L1ce352;
  #L1ce350.  v1:= 0I;
  #L1ce352.  if v1 == 0 then goto L1ce3ae;
  #L1ce356.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ce35a.  if v1 != 0 then goto L1ce374;
  #L1ce35e.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L1ce364.  v4:= temp @kind object;
  #L1ce366.  v3.`okio.Buffer.head` @type ^`okio.Segment` := v4 @kind object;
  #L1ce36a.  v4.`okio.Segment.prev` @type ^`okio.Segment` := v4 @kind object;
  #L1ce36e.  v4.`okio.Segment.next` @type ^`okio.Segment` := v4 @kind object;
  #L1ce372.  goto L1ce3ac;
  #L1ce374.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ce37a.  v1:= v1.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ce37e.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ce384.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L1ce388.  v2:= v2 + v4 @kind int;
  #L1ce38a.  if v2 > v0 then goto L1ce39c;
  #L1ce38e.  v4:= v1.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L1ce392.  if v4 != 0 then goto L1ce398;
  #L1ce396.  goto L1ce39c;
  #L1ce398.  v4:= v1 @kind object;
  #L1ce39a.  goto L1ce3ac;
  #L1ce39c.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L1ce3a2.  v4:= temp @kind object;
  #L1ce3a4.  call temp:= `push`(v1, v4) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1ce3aa.  v4:= temp @kind object;
  #L1ce3ac.  return v4 @kind object;
  #L1ce3ae.  v4:= new `java.lang.IllegalArgumentException`;
  #L1ce3b2.  v0:= "unexpected capacity" @kind object;
  #L1ce3b6.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ce3bc.  v0:= temp @kind object;
  #L1ce3be.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ce3c4.  throw v4;
}
procedure `int` `write`(`okio.Buffer` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lokio/Buffer;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1cb5d0.  v0:= "source" @kind object;
  #L1cb5d4.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cb5da.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L1cb5e0.  v0:= temp;
  #L1cb5e2.  v1:= v0;
  #L1cb5e4.  if v1 <= 0 then goto L1cb61e;
  #L1cb5e8.  v2:= 1I;
  #L1cb5ea.  call temp:= `writableSegment$okio`(v6, v2) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1cb5f0.  v2:= temp @kind object;
  #L1cb5f2.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L1cb5f6.  v3:= v3 - 8192;
  #L1cb5fa.  call temp:= `min`(v1, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1cb600.  v3:= temp;
  #L1cb602.  v4:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cb606.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L1cb60a.  call temp:= `get`(v7, v4, v5, v3) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1cb610.  v1:= v1 - v3 @kind int;
  #L1cb612.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L1cb616.  v4:= v4 + v3 @kind int;
  #L1cb618.  v2.`okio.Segment.limit` @type ^`int` := v4;
  #L1cb61c.  goto L1cb5e4;
  #L1cb61e.  v1:= v6.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1cb622.  v3:= (`long`) v0 @kind i2l;
  #L1cb624.  v1:= v1 + v3 @kind long;
  #L1cb626.  v6.`okio.Buffer.a` @type ^`long` := v1 @kind wide;
  #L1cb62a.  return v0;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ccd54.  v0:= "byteString" @kind object;
  #L1ccd58.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ccd5e.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1ccd64.  v0:= temp;
  #L1ccd66.  v1:= 0I;
  #L1ccd68.  call `write$okio`(v3, v2, v1, v0) @signature `Lokio/ByteString;.write$okio:(Lokio/Buffer;II)V` @kind virtual;
  #L1ccd6e.  return v2 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/Buffer;.write:(Lokio/ByteString;II)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ccd80.  v0:= "byteString" @kind object;
  #L1ccd84.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ccd8a.  call `write$okio`(v2, v1, v3, v4) @signature `Lokio/ByteString;.write$okio:(Lokio/Buffer;II)V` @kind virtual;
  #L1ccd90.  return v1 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v5 @kind this, `okio.Source` v6 @kind object, `long` v7 ) @signature `Lokio/Buffer;.write:(Lokio/Source;J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ccda4.  v0:= "source" @kind object;
  #L1ccda8.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ccdae.  v0:= 0L;
  #L1ccdb2.  v2:= lcmp(v7, v0);
  #L1ccdb6.  if v2 <= 0 then goto L1ccdde;
  #L1ccdba.  call temp:= `read`(v6, v5, v7) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L1ccdc0.  v0:= temp @kind wide;
  #L1ccdc2.  v2:= -1L;
  #L1ccdc6.  v4:= lcmp(v0, v2);
  #L1ccdca.  if v4 == 0 then goto L1ccdd2;
  #L1ccdce.  v7:= v7 - v0 @kind long;
  #L1ccdd0.  goto L1ccdae;
  #L1ccdd2.  v6:= new `java.io.EOFException`;
  #L1ccdd6.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1ccddc.  throw v6;
  #L1ccdde.  return v5 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cccac.  v0:= "source" @kind object;
  #L1cccb0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cccb6.  v0:= length @variable v3;
  #L1cccb8.  v1:= 0I;
  #L1cccba.  call temp:= `write`(v2, v3, v1, v0) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L1cccc0.  v3:= temp @kind object;
  #L1cccc2.  return v3 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v9 @kind this, `byte`[] v10 @kind object, `int` v11 , `int` v12 ) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1cccd4.  v0:= "source" @kind object;
  #L1cccd8.  call `checkNotNullParameter`(v10, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cccde.  v0:= length @variable v10;
  #L1ccce0.  v1:= (`long`) v0 @kind i2l;
  #L1ccce2.  v3:= (`long`) v11 @kind i2l;
  #L1ccce4.  v7:= (`long`) v12 @kind i2l;
  #L1ccce6.  v5:= v7 @kind wide;
  #L1ccce8.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1cccee.  v12:= v12 + v11 @kind int;
  #L1cccf0.  if v11 >= v12 then goto L1ccd32;
  #L1cccf4.  v0:= 1I;
  #L1cccf6.  call temp:= `writableSegment$okio`(v9, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1cccfc.  v0:= temp @kind object;
  #L1cccfe.  v1:= v12 - v11 @kind int;
  #L1ccd02.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1ccd06.  v2:= v2 - 8192;
  #L1ccd0a.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1ccd10.  v1:= temp;
  #L1ccd12.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ccd16.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L1ccd1a.  v4:= v11 + v1 @kind int;
  #L1ccd1e.  call temp:= `copyInto`(v10, v2, v3, v11, v4) @signature `Lkotlin/collections/ArraysKt;.copyInto:([B[BIII)[B` @kind static;
  #L1ccd24.  v11:= v0.`okio.Segment.limit` @type ^`int`;
  #L1ccd28.  v11:= v11 + v1 @kind int;
  #L1ccd2a.  v0.`okio.Segment.limit` @type ^`int` := v11;
  #L1ccd2e.  v11:= v4;
  #L1ccd30.  goto L1cccf0;
  #L1ccd32.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ccd38.  v10:= temp @kind wide;
  #L1ccd3a.  v10:= v10 + v7 @kind long;
  #L1ccd3c.  call `setSize$okio`(v9, v10) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1ccd42.  return v9 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `okio.ByteString` v1 @kind object) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cdcd4.  call temp:= `write`(v0, v1) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L1cdcda.  v1:= temp @kind object;
  #L1cdcdc.  return v1 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `okio.ByteString` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lokio/Buffer;.write:(Lokio/ByteString;II)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cdcf0.  call temp:= `write`(v0, v1, v2, v3) @signature `Lokio/Buffer;.write:(Lokio/ByteString;II)Lokio/Buffer;` @kind virtual;
  #L1cdcf6.  v1:= temp @kind object;
  #L1cdcf8.  return v1 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `okio.Source` v1 @kind object, `long` v2 ) @signature `Lokio/Buffer;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cdd0c.  call temp:= `write`(v0, v1, v2) @signature `Lokio/Buffer;.write:(Lokio/Source;J)Lokio/Buffer;` @kind virtual;
  #L1cdd12.  v1:= temp @kind object;
  #L1cdd14.  return v1 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `byte`[] v1 @kind object) @signature `Lokio/Buffer;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cdc9c.  call temp:= `write`(v0, v1) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L1cdca2.  v1:= temp @kind object;
  #L1cdca4.  return v1 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lokio/Buffer;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cdcb8.  call temp:= `write`(v0, v1, v2, v3) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L1cdcbe.  v1:= temp @kind object;
  #L1cdcc0.  return v1 @kind object;
}
procedure `void` `write`(`okio.Buffer` v8 @kind this, `okio.Buffer` v9 @kind object, `long` v10 ) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1ce734.  v0:= "source" @kind object;
  #L1ce738.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ce73e.  v0:= 0I;
  #L1ce740.  if v9 == v8 then goto L1ce748;
  #L1ce744.  v1:= 1I;
  #L1ce746.  goto L1ce74a;
  #L1ce748.  v1:= 0I;
  #L1ce74a.  if v1 == 0 then goto L1ce8ac;
  #L1ce74e.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce754.  v2:= temp @kind wide;
  #L1ce756.  v4:= 0L;
  #L1ce75a.  v6:= v10 @kind wide;
  #L1ce75c.  call `checkOffsetAndCount`(v2, v4, v6) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1ce762.  v1:= 0L;
  #L1ce766.  v3:= lcmp(v10, v1);
  #L1ce76a.  if v3 <= 0 then goto L1ce8aa;
  #L1ce76e.  v1:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ce772.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ce778.  v1:= v1.`okio.Segment.limit` @type ^`int`;
  #L1ce77c.  v2:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ce780.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ce786.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L1ce78a.  v1:= v1 - v2 @kind int;
  #L1ce78c.  v1:= (`long`) v1 @kind i2l;
  #L1ce78e.  v3:= lcmp(v10, v1);
  #L1ce792.  if v3 >= 0 then goto L1ce82e;
  #L1ce796.  v1:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ce79a.  if v1 == 0 then goto L1ce7aa;
  #L1ce79e.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ce7a4.  v1:= v1.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ce7a8.  goto L1ce7ac;
  #L1ce7aa.  v1:= 0I;
  #L1ce7ac.  if v1 == 0 then goto L1ce816;
  #L1ce7b0.  v2:= v1.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L1ce7b4.  if v2 == 0 then goto L1ce816;
  #L1ce7b8.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L1ce7bc.  v2:= (`long`) v2 @kind i2l;
  #L1ce7be.  v2:= v2 + v10 @kind long;
  #L1ce7c0.  v4:= v1.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L1ce7c4.  if v4 == 0 then goto L1ce7cc;
  #L1ce7c8.  v4:= 0I;
  #L1ce7ca.  goto L1ce7d0;
  #L1ce7cc.  v4:= v1.`okio.Segment.pos` @type ^`int`;
  #L1ce7d0.  v4:= (`long`) v4 @kind i2l;
  #L1ce7d2.  v2:= v2 - v4 @kind long;
  #L1ce7d4.  v4:= 8192I;
  #L1ce7d8.  v4:= (`long`) v4 @kind i2l;
  #L1ce7da.  v6:= lcmp(v2, v4);
  #L1ce7de.  if v6 > 0 then goto L1ce816;
  #L1ce7e2.  v0:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ce7e6.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ce7ec.  v2:= (`int`) v10 @kind l2i;
  #L1ce7ee.  call `writeTo`(v0, v1, v2) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L1ce7f4.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce7fa.  v0:= temp @kind wide;
  #L1ce7fc.  v0:= v0 - v10 @kind long;
  #L1ce7fe.  call `setSize$okio`(v9, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1ce804.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce80a.  v0:= temp @kind wide;
  #L1ce80c.  v0:= v0 + v10 @kind long;
  #L1ce80e.  call `setSize$okio`(v8, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1ce814.  goto L1ce8aa;
  #L1ce816.  v1:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ce81a.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ce820.  v2:= (`int`) v10 @kind l2i;
  #L1ce822.  call temp:= `split`(v1, v2) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @kind virtual;
  #L1ce828.  v1:= temp @kind object;
  #L1ce82a.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L1ce82e.  v1:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ce832.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ce838.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L1ce83c.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L1ce840.  v2:= v2 - v3 @kind int;
  #L1ce842.  v2:= (`long`) v2 @kind i2l;
  #L1ce844.  call temp:= `pop`(v1) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1ce84a.  v4:= temp @kind object;
  #L1ce84c.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v4 @kind object;
  #L1ce850.  v4:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ce854.  if v4 != 0 then goto L1ce866;
  #L1ce858.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L1ce85c.  v1.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L1ce860.  v1.`okio.Segment.next` @type ^`okio.Segment` := v1 @kind object;
  #L1ce864.  goto L1ce884;
  #L1ce866.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ce86c.  v4:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ce870.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1ce876.  call temp:= `push`(v4, v1) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1ce87c.  v1:= temp @kind object;
  #L1ce87e.  call `compact`(v1) @signature `Lokio/Segment;.compact:()V` @kind virtual;
  #L1ce884.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce88a.  v4:= temp @kind wide;
  #L1ce88c.  v4:= v4 - v2 @kind long;
  #L1ce88e.  call `setSize$okio`(v9, v4) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1ce894.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ce89a.  v4:= temp @kind wide;
  #L1ce89c.  v4:= v4 + v2 @kind long;
  #L1ce89e.  call `setSize$okio`(v8, v4) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1ce8a4.  v10:= v10 - v2 @kind long;
  #L1ce8a6.  goto L1ce762;
  #L1ce8aa.  return @kind void;
  #L1ce8ac.  v9:= new `java.lang.IllegalArgumentException`;
  #L1ce8b0.  v10:= "source == this" @kind object;
  #L1ce8b4.  call temp:= `toString`(v10) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ce8ba.  v10:= temp @kind object;
  #L1ce8bc.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ce8c2.  throw v9;
}
procedure `long` `writeAll`(`okio.Buffer` v7 @kind this, `okio.Source` v8 @kind object) @signature `Lokio/Buffer;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1cc820.  v0:= "source" @kind object;
  #L1cc824.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cc82a.  v0:= 0L;
  #L1cc82e.  v2:= 8192I;
  #L1cc832.  v2:= (`long`) v2 @kind i2l;
  #L1cc834.  call temp:= `read`(v8, v7, v2) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L1cc83a.  v2:= temp @kind wide;
  #L1cc83c.  v4:= -1L;
  #L1cc840.  v6:= lcmp(v2, v4);
  #L1cc844.  if v6 != 0 then goto L1cc84a;
  #L1cc848.  return v0 @kind wide;
  #L1cc84a.  v0:= v0 + v2 @kind long;
  #L1cc84c.  goto L1cc82e;
}
procedure `okio.Buffer` `writeByte`(`okio.Buffer` v4 @kind this, `int` v5 ) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ccdf0.  v0:= 1I;
  #L1ccdf2.  call temp:= `writableSegment$okio`(v4, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1ccdf8.  v0:= temp @kind object;
  #L1ccdfa.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ccdfe.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1cce02.  v3:= v2 + 1;
  #L1cce06.  v0.`okio.Segment.limit` @type ^`int` := v3;
  #L1cce0a.  v5:= (`byte`) v5 @kind i2b;
  #L1cce0c.  v1[v2]:= v5 @kind byte;
  #L1cce10.  call temp:= `size`(v4) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cce16.  v0:= temp @kind wide;
  #L1cce18.  v2:= 1L;
  #L1cce1c.  v0:= v0 + v2 @kind long;
  #L1cce1e.  call `setSize$okio`(v4, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cce24.  return v4 @kind object;
}
procedure `okio.BufferedSink` `writeByte`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cdd28.  call temp:= `writeByte`(v0, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1cdd2e.  v1:= temp @kind object;
  #L1cdd30.  return v1 @kind object;
}
procedure `okio.Buffer` `writeDecimalLong`(`okio.Buffer` v12 @kind this, `long` v13 ) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1cce38.  v0:= 0L;
  #L1cce3c.  v2:= lcmp(v13, v0);
  #L1cce40.  if v2 != 0 then goto L1cce54;
  #L1cce44.  v13:= 48I;
  #L1cce48.  call temp:= `writeByte`(v12, v13) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1cce4e.  v13:= temp @kind object;
  #L1cce50.  goto L1cd076;
  #L1cce54.  v3:= 0I;
  #L1cce56.  v4:= 1I;
  #L1cce58.  if v2 >= 0 then goto L1cce78;
  #L1cce5c.  v13:= -v13 @kind long;
  #L1cce5e.  v2:= lcmp(v13, v0);
  #L1cce62.  if v2 >= 0 then goto L1cce76;
  #L1cce66.  v13:= "-9223372036854775808" @kind object;
  #L1cce6a.  call temp:= `writeUtf8`(v12, v13) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L1cce70.  v13:= temp @kind object;
  #L1cce72.  goto L1cd076;
  #L1cce76.  v3:= 1I;
  #L1cce78.  v5:= 100000000L;
  #L1cce7e.  v2:= 10I;
  #L1cce82.  v7:= lcmp(v13, v5);
  #L1cce86.  if v7 >= 0 then goto L1ccf14;
  #L1cce8a.  v5:= 10000L;
  #L1cce8e.  v7:= lcmp(v13, v5);
  #L1cce92.  if v7 >= 0 then goto L1cced0;
  #L1cce96.  v5:= 100L;
  #L1cce9a.  v7:= lcmp(v13, v5);
  #L1cce9e.  if v7 >= 0 then goto L1cceb8;
  #L1ccea2.  v5:= 10L;
  #L1ccea6.  v7:= lcmp(v13, v5);
  #L1cceaa.  if v7 >= 0 then goto L1cceb2;
  #L1cceae.  goto L1cd004;
  #L1cceb2.  v4:= 2I;
  #L1cceb4.  goto L1cd004;
  #L1cceb8.  v4:= 1000L;
  #L1ccebc.  v6:= lcmp(v13, v4);
  #L1ccec0.  if v6 >= 0 then goto L1cceca;
  #L1ccec4.  v4:= 3I;
  #L1ccec6.  goto L1cd004;
  #L1cceca.  v4:= 4I;
  #L1ccecc.  goto L1cd004;
  #L1cced0.  v4:= 1000000L;
  #L1cced6.  v6:= lcmp(v13, v4);
  #L1cceda.  if v6 >= 0 then goto L1ccef8;
  #L1ccede.  v4:= 100000L;
  #L1ccee4.  v6:= lcmp(v13, v4);
  #L1ccee8.  if v6 >= 0 then goto L1ccef2;
  #L1cceec.  v4:= 5I;
  #L1cceee.  goto L1cd004;
  #L1ccef2.  v4:= 6I;
  #L1ccef4.  goto L1cd004;
  #L1ccef8.  v4:= 10000000L;
  #L1ccefe.  v6:= lcmp(v13, v4);
  #L1ccf02.  if v6 >= 0 then goto L1ccf0c;
  #L1ccf06.  v4:= 7I;
  #L1ccf08.  goto L1cd004;
  #L1ccf0c.  v4:= 8I;
  #L1ccf10.  goto L1cd004;
  #L1ccf14.  v4:= 1000000000000L;
  #L1ccf1e.  v6:= lcmp(v13, v4);
  #L1ccf22.  if v6 >= 0 then goto L1ccf70;
  #L1ccf26.  v4:= 10000000000L;
  #L1ccf30.  v6:= lcmp(v13, v4);
  #L1ccf34.  if v6 >= 0 then goto L1ccf52;
  #L1ccf38.  v4:= 1000000000L;
  #L1ccf3e.  v6:= lcmp(v13, v4);
  #L1ccf42.  if v6 >= 0 then goto L1ccf4c;
  #L1ccf46.  v4:= 9I;
  #L1ccf4a.  goto L1cd004;
  #L1ccf4c.  v4:= 10I;
  #L1ccf50.  goto L1cd004;
  #L1ccf52.  v4:= 100000000000L;
  #L1ccf5c.  v6:= lcmp(v13, v4);
  #L1ccf60.  if v6 >= 0 then goto L1ccf6a;
  #L1ccf64.  v4:= 11I;
  #L1ccf68.  goto L1cd004;
  #L1ccf6a.  v4:= 12I;
  #L1ccf6e.  goto L1cd004;
  #L1ccf70.  v4:= 1000000000000000L;
  #L1ccf7a.  v6:= lcmp(v13, v4);
  #L1ccf7e.  if v6 >= 0 then goto L1ccfb8;
  #L1ccf82.  v4:= 10000000000000L;
  #L1ccf8c.  v6:= lcmp(v13, v4);
  #L1ccf90.  if v6 >= 0 then goto L1ccf9a;
  #L1ccf94.  v4:= 13I;
  #L1ccf98.  goto L1cd004;
  #L1ccf9a.  v4:= 100000000000000L;
  #L1ccfa4.  v6:= lcmp(v13, v4);
  #L1ccfa8.  if v6 >= 0 then goto L1ccfb2;
  #L1ccfac.  v4:= 14I;
  #L1ccfb0.  goto L1cd004;
  #L1ccfb2.  v4:= 15I;
  #L1ccfb6.  goto L1cd004;
  #L1ccfb8.  v4:= 100000000000000000L;
  #L1ccfc2.  v6:= lcmp(v13, v4);
  #L1ccfc6.  if v6 >= 0 then goto L1ccfe8;
  #L1ccfca.  v4:= 10000000000000000L;
  #L1ccfd4.  v6:= lcmp(v13, v4);
  #L1ccfd8.  if v6 >= 0 then goto L1ccfe2;
  #L1ccfdc.  v4:= 16I;
  #L1ccfe0.  goto L1cd004;
  #L1ccfe2.  v4:= 17I;
  #L1ccfe6.  goto L1cd004;
  #L1ccfe8.  v4:= 1000000000000000000L;
  #L1ccff2.  v6:= lcmp(v13, v4);
  #L1ccff6.  if v6 >= 0 then goto L1cd000;
  #L1ccffa.  v4:= 18I;
  #L1ccffe.  goto L1cd004;
  #L1cd000.  v4:= 19I;
  #L1cd004.  if v3 == 0 then goto L1cd00c;
  #L1cd008.  v4:= v4 + 1;
  #L1cd00c.  call temp:= `writableSegment$okio`(v12, v4) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1cd012.  v5:= temp @kind object;
  #L1cd014.  v6:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cd018.  v7:= v5.`okio.Segment.limit` @type ^`int`;
  #L1cd01c.  v7:= v7 + v4 @kind int;
  #L1cd01e.  v8:= lcmp(v13, v0);
  #L1cd022.  if v8 == 0 then goto L1cd046;
  #L1cd026.  v8:= (`long`) v2 @kind i2l;
  #L1cd028.  v10:= v13 %% v8 @kind long;
  #L1cd02c.  v11:= (`int`) v10 @kind l2i;
  #L1cd02e.  v7:= v7 + -1;
  #L1cd032.  call temp:= `getHEX_DIGIT_BYTES`() @signature `Lokio/internal/BufferKt;.getHEX_DIGIT_BYTES:()[B` @kind static;
  #L1cd038.  v10:= temp @kind object;
  #L1cd03a.  v10:= v10[v11] @kind byte;
  #L1cd03e.  v6[v7]:= v10 @kind byte;
  #L1cd042.  v13:= v13 / v8 @kind long;
  #L1cd044.  goto L1cd01e;
  #L1cd046.  if v3 == 0 then goto L1cd058;
  #L1cd04a.  v7:= v7 + -1;
  #L1cd04e.  v13:= 45I;
  #L1cd052.  v13:= (`byte`) v13 @kind i2b;
  #L1cd054.  v6[v7]:= v13 @kind byte;
  #L1cd058.  v13:= v5.`okio.Segment.limit` @type ^`int`;
  #L1cd05c.  v13:= v13 + v4 @kind int;
  #L1cd05e.  v5.`okio.Segment.limit` @type ^`int` := v13;
  #L1cd062.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cd068.  v13:= temp @kind wide;
  #L1cd06a.  v0:= (`long`) v4 @kind i2l;
  #L1cd06c.  v13:= v13 + v0 @kind long;
  #L1cd06e.  call `setSize$okio`(v12, v13) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cd074.  v13:= v12 @kind object;
  #L1cd076.  return v13 @kind object;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cdd44.  call temp:= `writeDecimalLong`(v0, v1) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L1cdd4a.  v1:= temp @kind object;
  #L1cdd4c.  return v1 @kind object;
}
procedure `okio.Buffer` `writeHexadecimalUnsignedLong`(`okio.Buffer` v12 @kind this, `long` v13 ) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1cd088.  v0:= 0L;
  #L1cd08c.  v2:= lcmp(v13, v0);
  #L1cd090.  if v2 != 0 then goto L1cd0a2;
  #L1cd094.  v13:= 48I;
  #L1cd098.  call temp:= `writeByte`(v12, v13) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1cd09e.  v13:= temp @kind object;
  #L1cd0a0.  goto L1cd18e;
  #L1cd0a2.  v0:= 1I;
  #L1cd0a4.  v1:= v13 ^>> v0 @kind long;
  #L1cd0a8.  v1:= v1 ^| v13 @kind long;
  #L1cd0aa.  v3:= 2I;
  #L1cd0ac.  v4:= v1 ^>> v3 @kind long;
  #L1cd0b0.  v1:= v1 ^| v4 @kind long;
  #L1cd0b2.  v4:= 4I;
  #L1cd0b4.  v5:= v1 ^>> v4 @kind long;
  #L1cd0b8.  v1:= v1 ^| v5 @kind long;
  #L1cd0ba.  v5:= 8I;
  #L1cd0be.  v6:= v1 ^>> v5 @kind long;
  #L1cd0c2.  v1:= v1 ^| v6 @kind long;
  #L1cd0c4.  v6:= 16I;
  #L1cd0c8.  v7:= v1 ^>> v6 @kind long;
  #L1cd0cc.  v1:= v1 ^| v7 @kind long;
  #L1cd0ce.  v7:= 32I;
  #L1cd0d2.  v8:= v1 ^>> v7 @kind long;
  #L1cd0d6.  v1:= v1 ^| v8 @kind long;
  #L1cd0d8.  v8:= v1 ^>> v0 @kind long;
  #L1cd0dc.  v10:= 1.1945305291614955E103D;
  #L1cd0e6.  v8:= v8 ^& v10 @kind long;
  #L1cd0e8.  v1:= v1 - v8 @kind long;
  #L1cd0ea.  v8:= v1 ^>> v3 @kind long;
  #L1cd0ee.  v10:= 4.667261458395856E-62D;
  #L1cd0f8.  v8:= v8 ^& v10 @kind long;
  #L1cd0fa.  v1:= v1 ^& v10 @kind long;
  #L1cd0fc.  v8:= v8 + v1 @kind long;
  #L1cd0fe.  v1:= v8 ^>> v4 @kind long;
  #L1cd102.  v1:= v1 + v8 @kind long;
  #L1cd104.  v8:= 3.815736827118017E-236D;
  #L1cd10e.  v1:= v1 ^& v8 @kind long;
  #L1cd110.  v8:= v1 ^>> v5 @kind long;
  #L1cd114.  v1:= v1 + v8 @kind long;
  #L1cd116.  v5:= v1 ^>> v6 @kind long;
  #L1cd11a.  v1:= v1 + v5 @kind long;
  #L1cd11c.  v5:= 63L;
  #L1cd120.  v8:= v1 ^& v5 @kind long;
  #L1cd124.  v1:= v1 ^>> v7 @kind long;
  #L1cd126.  v1:= v1 ^& v5 @kind long;
  #L1cd128.  v8:= v8 + v1 @kind long;
  #L1cd12a.  v1:= 3I;
  #L1cd12c.  v1:= (`long`) v1 @kind i2l;
  #L1cd12e.  v8:= v8 + v1 @kind long;
  #L1cd130.  v1:= (`long`) v4 @kind i2l;
  #L1cd132.  v8:= v8 / v1 @kind long;
  #L1cd134.  v1:= (`int`) v8 @kind l2i;
  #L1cd136.  call temp:= `writableSegment$okio`(v12, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1cd13c.  v2:= temp @kind object;
  #L1cd13e.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cd142.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L1cd146.  v6:= v5 + v1 @kind int;
  #L1cd14a.  v6:= v6 - v0 @kind int;
  #L1cd14c.  if v6 < v5 then goto L1cd170;
  #L1cd150.  call temp:= `getHEX_DIGIT_BYTES`() @signature `Lokio/internal/BufferKt;.getHEX_DIGIT_BYTES:()[B` @kind static;
  #L1cd156.  v0:= temp @kind object;
  #L1cd158.  v7:= 15L;
  #L1cd15c.  v7:= v7 ^& v13 @kind long;
  #L1cd15e.  v8:= (`int`) v7 @kind l2i;
  #L1cd160.  v0:= v0[v8] @kind byte;
  #L1cd164.  v3[v6]:= v0 @kind byte;
  #L1cd168.  v13:= v13 ^>> v4 @kind long;
  #L1cd16a.  v6:= v6 + -1;
  #L1cd16e.  goto L1cd14c;
  #L1cd170.  v13:= v2.`okio.Segment.limit` @type ^`int`;
  #L1cd174.  v13:= v13 + v1 @kind int;
  #L1cd176.  v2.`okio.Segment.limit` @type ^`int` := v13;
  #L1cd17a.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cd180.  v13:= temp @kind wide;
  #L1cd182.  v0:= (`long`) v1 @kind i2l;
  #L1cd184.  v13:= v13 + v0 @kind long;
  #L1cd186.  call `setSize$okio`(v12, v13) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cd18c.  v13:= v12 @kind object;
  #L1cd18e.  return v13 @kind object;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cdd60.  call temp:= `writeHexadecimalUnsignedLong`(v0, v1) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L1cdd66.  v1:= temp @kind object;
  #L1cdd68.  return v1 @kind object;
}
procedure `okio.Buffer` `writeInt`(`okio.Buffer` v5 @kind this, `int` v6 ) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1cd1a0.  v0:= 4I;
  #L1cd1a2.  call temp:= `writableSegment$okio`(v5, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1cd1a8.  v0:= temp @kind object;
  #L1cd1aa.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cd1ae.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1cd1b2.  v3:= v2 + 1;
  #L1cd1b6.  v4:= v6 ^>> 24;
  #L1cd1ba.  v4:= v4 ^& 255;
  #L1cd1be.  v4:= (`byte`) v4 @kind i2b;
  #L1cd1c0.  v1[v2]:= v4 @kind byte;
  #L1cd1c4.  v2:= v3 + 1;
  #L1cd1c8.  v4:= v6 ^>> 16;
  #L1cd1cc.  v4:= v4 ^& 255;
  #L1cd1d0.  v4:= (`byte`) v4 @kind i2b;
  #L1cd1d2.  v1[v3]:= v4 @kind byte;
  #L1cd1d6.  v3:= v2 + 1;
  #L1cd1da.  v4:= v6 ^>> 8;
  #L1cd1de.  v4:= v4 ^& 255;
  #L1cd1e2.  v4:= (`byte`) v4 @kind i2b;
  #L1cd1e4.  v1[v2]:= v4 @kind byte;
  #L1cd1e8.  v2:= v3 + 1;
  #L1cd1ec.  v6:= v6 ^& 255;
  #L1cd1f0.  v6:= (`byte`) v6 @kind i2b;
  #L1cd1f2.  v1[v3]:= v6 @kind byte;
  #L1cd1f6.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L1cd1fa.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cd200.  v0:= temp @kind wide;
  #L1cd202.  v2:= 4L;
  #L1cd206.  v0:= v0 + v2 @kind long;
  #L1cd208.  call `setSize$okio`(v5, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cd20e.  return v5 @kind object;
}
procedure `okio.BufferedSink` `writeInt`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cdd7c.  call temp:= `writeInt`(v0, v1) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L1cdd82.  v1:= temp @kind object;
  #L1cdd84.  return v1 @kind object;
}
procedure `okio.Buffer` `writeIntLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L1cd220.  call temp:= `reverseBytes`(v1) @signature `Lokio/-Util;.reverseBytes:(I)I` @kind static;
  #L1cd226.  v1:= temp;
  #L1cd228.  call temp:= `writeInt`(v0, v1) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L1cd22e.  v1:= temp @kind object;
  #L1cd230.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cdd98.  call temp:= `writeIntLe`(v0, v1) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L1cdd9e.  v1:= temp @kind object;
  #L1cdda0.  return v1 @kind object;
}
procedure `okio.Buffer` `writeLong`(`okio.Buffer` v9 @kind this, `long` v10 ) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1cd244.  v0:= 8I;
  #L1cd248.  call temp:= `writableSegment$okio`(v9, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1cd24e.  v1:= temp @kind object;
  #L1cd250.  v2:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cd254.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L1cd258.  v4:= v3 + 1;
  #L1cd25c.  v5:= 56I;
  #L1cd260.  v5:= v10 ^>> v5 @kind long;
  #L1cd264.  v7:= 255L;
  #L1cd268.  v5:= v5 ^& v7 @kind long;
  #L1cd26a.  v6:= (`int`) v5 @kind l2i;
  #L1cd26c.  v5:= (`byte`) v6 @kind i2b;
  #L1cd26e.  v2[v3]:= v5 @kind byte;
  #L1cd272.  v3:= v4 + 1;
  #L1cd276.  v5:= 48I;
  #L1cd27a.  v5:= v10 ^>> v5 @kind long;
  #L1cd27e.  v5:= v5 ^& v7 @kind long;
  #L1cd280.  v6:= (`int`) v5 @kind l2i;
  #L1cd282.  v5:= (`byte`) v6 @kind i2b;
  #L1cd284.  v2[v4]:= v5 @kind byte;
  #L1cd288.  v4:= v3 + 1;
  #L1cd28c.  v5:= 40I;
  #L1cd290.  v5:= v10 ^>> v5 @kind long;
  #L1cd294.  v5:= v5 ^& v7 @kind long;
  #L1cd296.  v6:= (`int`) v5 @kind l2i;
  #L1cd298.  v5:= (`byte`) v6 @kind i2b;
  #L1cd29a.  v2[v3]:= v5 @kind byte;
  #L1cd29e.  v3:= v4 + 1;
  #L1cd2a2.  v5:= 32I;
  #L1cd2a6.  v5:= v10 ^>> v5 @kind long;
  #L1cd2aa.  v5:= v5 ^& v7 @kind long;
  #L1cd2ac.  v6:= (`int`) v5 @kind l2i;
  #L1cd2ae.  v5:= (`byte`) v6 @kind i2b;
  #L1cd2b0.  v2[v4]:= v5 @kind byte;
  #L1cd2b4.  v4:= v3 + 1;
  #L1cd2b8.  v5:= 24I;
  #L1cd2bc.  v5:= v10 ^>> v5 @kind long;
  #L1cd2c0.  v5:= v5 ^& v7 @kind long;
  #L1cd2c2.  v6:= (`int`) v5 @kind l2i;
  #L1cd2c4.  v5:= (`byte`) v6 @kind i2b;
  #L1cd2c6.  v2[v3]:= v5 @kind byte;
  #L1cd2ca.  v3:= v4 + 1;
  #L1cd2ce.  v5:= 16I;
  #L1cd2d2.  v5:= v10 ^>> v5 @kind long;
  #L1cd2d6.  v5:= v5 ^& v7 @kind long;
  #L1cd2d8.  v6:= (`int`) v5 @kind l2i;
  #L1cd2da.  v5:= (`byte`) v6 @kind i2b;
  #L1cd2dc.  v2[v4]:= v5 @kind byte;
  #L1cd2e0.  v4:= v3 + 1;
  #L1cd2e4.  v5:= v10 ^>> v0 @kind long;
  #L1cd2e8.  v5:= v5 ^& v7 @kind long;
  #L1cd2ea.  v0:= (`int`) v5 @kind l2i;
  #L1cd2ec.  v0:= (`byte`) v0 @kind i2b;
  #L1cd2ee.  v2[v3]:= v0 @kind byte;
  #L1cd2f2.  v0:= v4 + 1;
  #L1cd2f6.  v10:= v10 ^& v7 @kind long;
  #L1cd2f8.  v11:= (`int`) v10 @kind l2i;
  #L1cd2fa.  v10:= (`byte`) v11 @kind i2b;
  #L1cd2fc.  v2[v4]:= v10 @kind byte;
  #L1cd300.  v1.`okio.Segment.limit` @type ^`int` := v0;
  #L1cd304.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cd30a.  v10:= temp @kind wide;
  #L1cd30c.  v0:= 8L;
  #L1cd310.  v10:= v10 + v0 @kind long;
  #L1cd312.  call `setSize$okio`(v9, v10) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cd318.  return v9 @kind object;
}
procedure `okio.BufferedSink` `writeLong`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cddb4.  call temp:= `writeLong`(v0, v1) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L1cddba.  v1:= temp @kind object;
  #L1cddbc.  return v1 @kind object;
}
procedure `okio.Buffer` `writeLongLe`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L1cd32c.  call temp:= `reverseBytes`(v1) @signature `Lokio/-Util;.reverseBytes:(J)J` @kind static;
  #L1cd332.  v1:= temp @kind wide;
  #L1cd334.  call temp:= `writeLong`(v0, v1) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L1cd33a.  v1:= temp @kind object;
  #L1cd33c.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cddd0.  call temp:= `writeLongLe`(v0, v1) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L1cddd6.  v1:= temp @kind object;
  #L1cddd8.  return v1 @kind object;
}
procedure `okio.Buffer` `writeShort`(`okio.Buffer` v5 @kind this, `int` v6 ) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1cd350.  v0:= 2I;
  #L1cd352.  call temp:= `writableSegment$okio`(v5, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1cd358.  v0:= temp @kind object;
  #L1cd35a.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cd35e.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1cd362.  v3:= v2 + 1;
  #L1cd366.  v4:= v6 ^>> 8;
  #L1cd36a.  v4:= v4 ^& 255;
  #L1cd36e.  v4:= (`byte`) v4 @kind i2b;
  #L1cd370.  v1[v2]:= v4 @kind byte;
  #L1cd374.  v2:= v3 + 1;
  #L1cd378.  v6:= v6 ^& 255;
  #L1cd37c.  v6:= (`byte`) v6 @kind i2b;
  #L1cd37e.  v1[v3]:= v6 @kind byte;
  #L1cd382.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L1cd386.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cd38c.  v0:= temp @kind wide;
  #L1cd38e.  v2:= 2L;
  #L1cd392.  v0:= v0 + v2 @kind long;
  #L1cd394.  call `setSize$okio`(v5, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cd39a.  return v5 @kind object;
}
procedure `okio.BufferedSink` `writeShort`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cddec.  call temp:= `writeShort`(v0, v1) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L1cddf2.  v1:= temp @kind object;
  #L1cddf4.  return v1 @kind object;
}
procedure `okio.Buffer` `writeShortLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L1cd3ac.  v1:= (`short`) v1 @kind i2s;
  #L1cd3ae.  call temp:= `reverseBytes`(v1) @signature `Lokio/-Util;.reverseBytes:(S)S` @kind static;
  #L1cd3b4.  v1:= temp;
  #L1cd3b6.  call temp:= `writeShort`(v0, v1) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L1cd3bc.  v1:= temp @kind object;
  #L1cd3be.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cde08.  call temp:= `writeShortLe`(v0, v1) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L1cde0e.  v1:= temp @kind object;
  #L1cde10.  return v1 @kind object;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v3 @kind this, `java.lang.String` v4 @kind object, `int` v5 , `int` v6 , `java.nio.charset.Charset` v7 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1cd3d0.  v0:= "string" @kind object;
  #L1cd3d4.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cd3da.  v0:= "charset" @kind object;
  #L1cd3de.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cd3e4.  v0:= 1I;
  #L1cd3e6.  v1:= 0I;
  #L1cd3e8.  if v5 < 0 then goto L1cd3f0;
  #L1cd3ec.  v2:= 1I;
  #L1cd3ee.  goto L1cd3f2;
  #L1cd3f0.  v2:= 0I;
  #L1cd3f2.  if v2 == 0 then goto L1cd50a;
  #L1cd3f6.  if v6 < v5 then goto L1cd3fe;
  #L1cd3fa.  v2:= 1I;
  #L1cd3fc.  goto L1cd400;
  #L1cd3fe.  v2:= 0I;
  #L1cd400.  if v2 == 0 then goto L1cd4c4;
  #L1cd404.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1cd40a.  v2:= temp;
  #L1cd40c.  if v6 > v2 then goto L1cd412;
  #L1cd410.  goto L1cd414;
  #L1cd412.  v0:= 0I;
  #L1cd414.  if v0 == 0 then goto L1cd476;
  #L1cd418.  v0:= `@@kotlin.text.Charsets.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L1cd41c.  call temp:= `areEqual`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1cd422.  v0:= temp;
  #L1cd424.  if v0 == 0 then goto L1cd432;
  #L1cd428.  call temp:= `writeUtf8`(v3, v4, v5, v6) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L1cd42e.  v4:= temp @kind object;
  #L1cd430.  return v4 @kind object;
  #L1cd432.  call temp:= `substring`(v4, v5, v6) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1cd438.  v4:= temp @kind object;
  #L1cd43a.  v5:= "(this as java.lang.Strin…ing(startIndex, endIndex)" @kind object;
  #L1cd43e.  call `checkNotNullExpressionValue`(v4, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cd444.  if v4 == 0 then goto L1cd466;
  #L1cd448.  call temp:= `getBytes`(v4, v7) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L1cd44e.  v4:= temp @kind object;
  #L1cd450.  v5:= "(this as java.lang.String).getBytes(charset)" @kind object;
  #L1cd454.  call `checkNotNullExpressionValue`(v4, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cd45a.  v5:= length @variable v4;
  #L1cd45c.  call temp:= `write`(v3, v4, v1, v5) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L1cd462.  v4:= temp @kind object;
  #L1cd464.  return v4 @kind object;
  #L1cd466.  v4:= new `java.lang.NullPointerException`;
  #L1cd46a.  v5:= "null cannot be cast to non-null type java.lang.String" @kind object;
  #L1cd46e.  call `<init>`(v4, v5) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cd474.  throw v4;
  #L1cd476.  v5:= new `java.lang.StringBuilder`;
  #L1cd47a.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cd480.  v7:= "endIndex > string.length: " @kind object;
  #L1cd484.  call temp:= `append`(v5, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd48a.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd490.  v6:= " > " @kind object;
  #L1cd494.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd49a.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1cd4a0.  v4:= temp;
  #L1cd4a2.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd4a8.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cd4ae.  v4:= temp @kind object;
  #L1cd4b0.  v5:= new `java.lang.IllegalArgumentException`;
  #L1cd4b4.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cd4ba.  v4:= temp @kind object;
  #L1cd4bc.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cd4c2.  throw v5;
  #L1cd4c4.  v4:= new `java.lang.StringBuilder`;
  #L1cd4c8.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cd4ce.  v7:= "endIndex < beginIndex: " @kind object;
  #L1cd4d2.  call temp:= `append`(v4, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd4d8.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd4de.  v6:= " < " @kind object;
  #L1cd4e2.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd4e8.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd4ee.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cd4f4.  v4:= temp @kind object;
  #L1cd4f6.  v5:= new `java.lang.IllegalArgumentException`;
  #L1cd4fa.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cd500.  v4:= temp @kind object;
  #L1cd502.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cd508.  throw v5;
  #L1cd50a.  v4:= new `java.lang.StringBuilder`;
  #L1cd50e.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cd514.  v6:= "beginIndex < 0: " @kind object;
  #L1cd518.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd51e.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd524.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cd52a.  v4:= temp @kind object;
  #L1cd52c.  v5:= new `java.lang.IllegalArgumentException`;
  #L1cd530.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cd536.  v4:= temp @kind object;
  #L1cd538.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cd53e.  throw v5;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object, `java.nio.charset.Charset` v4 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cd550.  v0:= "string" @kind object;
  #L1cd554.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cd55a.  v0:= "charset" @kind object;
  #L1cd55e.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cd564.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1cd56a.  v0:= temp;
  #L1cd56c.  v1:= 0I;
  #L1cd56e.  call temp:= `writeString`(v2, v3, v1, v0, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L1cd574.  v3:= temp @kind object;
  #L1cd576.  return v3 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `int` v3 , `java.nio.charset.Charset` v4 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cde24.  call temp:= `writeString`(v0, v1, v2, v3, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L1cde2a.  v1:= temp @kind object;
  #L1cde2c.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object, `java.nio.charset.Charset` v2 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cde40.  call temp:= `writeString`(v0, v1, v2) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L1cde46.  v1:= temp @kind object;
  #L1cde48.  return v1 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v6 @kind this, `java.io.OutputStream` v7 @kind object) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1cd5b0.  v2:= 0L;
  #L1cd5b4.  v4:= 2I;
  #L1cd5b6.  v5:= 0I;
  #L1cd5b8.  v0:= v6 @kind object;
  #L1cd5ba.  v1:= v7 @kind object;
  #L1cd5bc.  call temp:= `writeTo$default`(v0, v1, v2, v4, v5) @signature `Lokio/Buffer;.writeTo$default:(Lokio/Buffer;Ljava/io/OutputStream;JILjava/lang/Object;)Lokio/Buffer;` @kind static;
  #L1cd5c2.  v7:= temp @kind object;
  #L1cd5c4.  return v7 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v7 @kind this, `java.io.OutputStream` v8 @kind object, `long` v9 ) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1cd5d8.  v0:= "out" @kind object;
  #L1cd5dc.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cd5e2.  v1:= v7.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1cd5e6.  v3:= 0L;
  #L1cd5ea.  v5:= v9 @kind wide;
  #L1cd5ec.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1cd5f2.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1cd5f6.  v1:= 0L;
  #L1cd5fa.  v3:= lcmp(v9, v1);
  #L1cd5fe.  if v3 <= 0 then goto L1cd662;
  #L1cd602.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1cd608.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L1cd60c.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cd610.  v1:= v1 - v2 @kind int;
  #L1cd612.  v1:= (`long`) v1 @kind i2l;
  #L1cd614.  call temp:= `min`(v9, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1cd61a.  v1:= temp @kind wide;
  #L1cd61c.  v2:= (`int`) v1 @kind l2i;
  #L1cd61e.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cd622.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cd626.  call `write`(v8, v1, v3, v2) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L1cd62c.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1cd630.  v1:= v1 + v2 @kind int;
  #L1cd632.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L1cd636.  v3:= v7.`okio.Buffer.a` @type ^`long` @kind wide;
  #L1cd63a.  v5:= (`long`) v2 @kind i2l;
  #L1cd63c.  v3:= v3 - v5 @kind long;
  #L1cd63e.  v7.`okio.Buffer.a` @type ^`long` := v3 @kind wide;
  #L1cd642.  v9:= v9 - v5 @kind long;
  #L1cd644.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1cd648.  if v1 != v2 then goto L1cd5f6;
  #L1cd64c.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1cd652.  v1:= temp @kind object;
  #L1cd654.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L1cd658.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1cd65e.  v0:= v1 @kind object;
  #L1cd660.  goto L1cd5f6;
  #L1cd662.  return v7 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1cd674.  v0:= "string" @kind object;
  #L1cd678.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cd67e.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1cd684.  v0:= temp;
  #L1cd686.  v1:= 0I;
  #L1cd688.  call temp:= `writeUtf8`(v2, v3, v1, v0) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L1cd68e.  v3:= temp @kind object;
  #L1cd690.  return v3 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v11 @kind this, `java.lang.String` v12 @kind object, `int` v13 , `int` v14 ) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1cd6a4.  v0:= "string" @kind object;
  #L1cd6a8.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1cd6ae.  v0:= 0I;
  #L1cd6b0.  v1:= 1I;
  #L1cd6b2.  if v13 < 0 then goto L1cd6ba;
  #L1cd6b6.  v2:= 1I;
  #L1cd6b8.  goto L1cd6bc;
  #L1cd6ba.  v2:= 0I;
  #L1cd6bc.  if v2 == 0 then goto L1cd992;
  #L1cd6c0.  if v14 < v13 then goto L1cd6c8;
  #L1cd6c4.  v2:= 1I;
  #L1cd6c6.  goto L1cd6ca;
  #L1cd6c8.  v2:= 0I;
  #L1cd6ca.  if v2 == 0 then goto L1cd94c;
  #L1cd6ce.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1cd6d4.  v2:= temp;
  #L1cd6d6.  if v14 > v2 then goto L1cd6de;
  #L1cd6da.  v2:= 1I;
  #L1cd6dc.  goto L1cd6e0;
  #L1cd6de.  v2:= 0I;
  #L1cd6e0.  if v2 == 0 then goto L1cd8fe;
  #L1cd6e4.  if v13 >= v14 then goto L1cd8fc;
  #L1cd6e8.  call temp:= `charAt`(v12, v13) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1cd6ee.  v2:= temp;
  #L1cd6f0.  v3:= 128I;
  #L1cd6f4.  if v2 >= v3 then goto L1cd768;
  #L1cd6f8.  call temp:= `writableSegment$okio`(v11, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1cd6fe.  v4:= temp @kind object;
  #L1cd700.  v5:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cd704.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cd708.  v6:= v6 - v13 @kind int;
  #L1cd70a.  v7:= v6 - 8192;
  #L1cd70e.  call temp:= `min`(v14, v7) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1cd714.  v7:= temp;
  #L1cd716.  v8:= v13 + 1;
  #L1cd71a.  v13:= v13 + v6 @kind int;
  #L1cd71c.  v2:= (`byte`) v2 @kind i2b;
  #L1cd71e.  v5[v13]:= v2 @kind byte;
  #L1cd722.  if v8 >= v7 then goto L1cd744;
  #L1cd726.  call temp:= `charAt`(v12, v8) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1cd72c.  v13:= temp;
  #L1cd72e.  if v13 < v3 then goto L1cd734;
  #L1cd732.  goto L1cd744;
  #L1cd734.  v2:= v8 + 1;
  #L1cd738.  v8:= v8 + v6 @kind int;
  #L1cd73a.  v13:= (`byte`) v13 @kind i2b;
  #L1cd73c.  v5[v8]:= v13 @kind byte;
  #L1cd740.  v8:= v2;
  #L1cd742.  goto L1cd722;
  #L1cd744.  v6:= v6 + v8 @kind int;
  #L1cd746.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L1cd74a.  v6:= v6 - v13 @kind int;
  #L1cd74c.  v13:= v13 + v6 @kind int;
  #L1cd74e.  v4.`okio.Segment.limit` @type ^`int` := v13;
  #L1cd752.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cd758.  v2:= temp @kind wide;
  #L1cd75a.  v4:= (`long`) v6 @kind i2l;
  #L1cd75c.  v2:= v2 + v4 @kind long;
  #L1cd75e.  call `setSize$okio`(v11, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cd764.  v13:= v8;
  #L1cd766.  goto L1cd6e4;
  #L1cd768.  v4:= 2048I;
  #L1cd76c.  if v2 >= v4 then goto L1cd7c0;
  #L1cd770.  v4:= 2I;
  #L1cd772.  call temp:= `writableSegment$okio`(v11, v4) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1cd778.  v5:= temp @kind object;
  #L1cd77a.  v6:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cd77e.  v7:= v5.`okio.Segment.limit` @type ^`int`;
  #L1cd782.  v8:= v2 ^> 6;
  #L1cd786.  v8:= v8 ^| 192;
  #L1cd78a.  v8:= (`byte`) v8 @kind i2b;
  #L1cd78c.  v6[v7]:= v8 @kind byte;
  #L1cd790.  v8:= v7 + 1;
  #L1cd794.  v2:= v2 ^& 63;
  #L1cd798.  v2:= v2 ^| v3 @kind int;
  #L1cd79a.  v2:= (`byte`) v2 @kind i2b;
  #L1cd79c.  v6[v8]:= v2 @kind byte;
  #L1cd7a0.  v7:= v7 + v4 @kind int;
  #L1cd7a2.  v5.`okio.Segment.limit` @type ^`int` := v7;
  #L1cd7a6.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cd7ac.  v2:= temp @kind wide;
  #L1cd7ae.  v4:= 2L;
  #L1cd7b2.  v2:= v2 + v4 @kind long;
  #L1cd7b4.  call `setSize$okio`(v11, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cd7ba.  v13:= v13 + 1;
  #L1cd7be.  goto L1cd6e4;
  #L1cd7c0.  v4:= 55296I;
  #L1cd7c6.  v5:= 63I;
  #L1cd7ca.  if v2 < v4 then goto L1cd89c;
  #L1cd7ce.  v4:= 57343I;
  #L1cd7d4.  if v2 <= v4 then goto L1cd7da;
  #L1cd7d8.  goto L1cd89c;
  #L1cd7da.  v6:= v13 + 1;
  #L1cd7de.  if v6 >= v14 then goto L1cd7ec;
  #L1cd7e2.  call temp:= `charAt`(v12, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1cd7e8.  v7:= temp;
  #L1cd7ea.  goto L1cd7ee;
  #L1cd7ec.  v7:= 0I;
  #L1cd7ee.  v8:= 56319I;
  #L1cd7f4.  if v2 > v8 then goto L1cd890;
  #L1cd7f8.  v8:= 56320I;
  #L1cd7fe.  if v8 > v7 then goto L1cd890;
  #L1cd802.  if v4 >= v7 then goto L1cd808;
  #L1cd806.  goto L1cd890;
  #L1cd808.  v4:= 65536I;
  #L1cd80c.  v2:= v2 ^& 1023;
  #L1cd810.  v2:= v2 ^< 10;
  #L1cd814.  v6:= v7 ^& 1023;
  #L1cd818.  v2:= v2 ^| v6 @kind int;
  #L1cd81a.  v2:= v2 + v4 @kind int;
  #L1cd81c.  v4:= 4I;
  #L1cd81e.  call temp:= `writableSegment$okio`(v11, v4) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1cd824.  v6:= temp @kind object;
  #L1cd826.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cd82a.  v8:= v6.`okio.Segment.limit` @type ^`int`;
  #L1cd82e.  v9:= v2 ^> 18;
  #L1cd832.  v9:= v9 ^| 240;
  #L1cd836.  v9:= (`byte`) v9 @kind i2b;
  #L1cd838.  v7[v8]:= v9 @kind byte;
  #L1cd83c.  v9:= v8 + 1;
  #L1cd840.  v10:= v2 ^> 12;
  #L1cd844.  v10:= v10 ^& v5 @kind int;
  #L1cd846.  v10:= v10 ^| v3 @kind int;
  #L1cd848.  v10:= (`byte`) v10 @kind i2b;
  #L1cd84a.  v7[v9]:= v10 @kind byte;
  #L1cd84e.  v9:= v8 + 2;
  #L1cd852.  v10:= v2 ^> 6;
  #L1cd856.  v10:= v10 ^& v5 @kind int;
  #L1cd858.  v10:= v10 ^| v3 @kind int;
  #L1cd85a.  v10:= (`byte`) v10 @kind i2b;
  #L1cd85c.  v7[v9]:= v10 @kind byte;
  #L1cd860.  v9:= v8 + 3;
  #L1cd864.  v2:= v2 ^& v5 @kind int;
  #L1cd866.  v2:= v2 ^| v3 @kind int;
  #L1cd868.  v2:= (`byte`) v2 @kind i2b;
  #L1cd86a.  v7[v9]:= v2 @kind byte;
  #L1cd86e.  v8:= v8 + v4 @kind int;
  #L1cd870.  v6.`okio.Segment.limit` @type ^`int` := v8;
  #L1cd874.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cd87a.  v2:= temp @kind wide;
  #L1cd87c.  v4:= 4L;
  #L1cd880.  v2:= v2 + v4 @kind long;
  #L1cd882.  call `setSize$okio`(v11, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cd888.  v13:= v13 + 2;
  #L1cd88c.  goto L1cd6e4;
  #L1cd890.  call temp:= `writeByte`(v11, v5) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1cd896.  v13:= v6;
  #L1cd898.  goto L1cd6e4;
  #L1cd89c.  v4:= 3I;
  #L1cd89e.  call temp:= `writableSegment$okio`(v11, v4) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1cd8a4.  v6:= temp @kind object;
  #L1cd8a6.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cd8aa.  v8:= v6.`okio.Segment.limit` @type ^`int`;
  #L1cd8ae.  v9:= v2 ^> 12;
  #L1cd8b2.  v9:= v9 ^| 224;
  #L1cd8b6.  v9:= (`byte`) v9 @kind i2b;
  #L1cd8b8.  v7[v8]:= v9 @kind byte;
  #L1cd8bc.  v9:= v8 + 1;
  #L1cd8c0.  v10:= v2 ^> 6;
  #L1cd8c4.  v5:= v5 ^& v10 @kind int;
  #L1cd8c6.  v5:= v5 ^| v3 @kind int;
  #L1cd8c8.  v5:= (`byte`) v5 @kind i2b;
  #L1cd8ca.  v7[v9]:= v5 @kind byte;
  #L1cd8ce.  v5:= v8 + 2;
  #L1cd8d2.  v2:= v2 ^& 63;
  #L1cd8d6.  v2:= v2 ^| v3 @kind int;
  #L1cd8d8.  v2:= (`byte`) v2 @kind i2b;
  #L1cd8da.  v7[v5]:= v2 @kind byte;
  #L1cd8de.  v8:= v8 + v4 @kind int;
  #L1cd8e0.  v6.`okio.Segment.limit` @type ^`int` := v8;
  #L1cd8e4.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cd8ea.  v2:= temp @kind wide;
  #L1cd8ec.  v4:= 3L;
  #L1cd8f0.  v2:= v2 + v4 @kind long;
  #L1cd8f2.  call `setSize$okio`(v11, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cd8f8.  goto L1cd7ba;
  #L1cd8fc.  return v11 @kind object;
  #L1cd8fe.  v13:= new `java.lang.StringBuilder`;
  #L1cd902.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cd908.  v0:= "endIndex > string.length: " @kind object;
  #L1cd90c.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd912.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd918.  v14:= " > " @kind object;
  #L1cd91c.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd922.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1cd928.  v12:= temp;
  #L1cd92a.  call temp:= `append`(v13, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd930.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cd936.  v12:= temp @kind object;
  #L1cd938.  v13:= new `java.lang.IllegalArgumentException`;
  #L1cd93c.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cd942.  v12:= temp @kind object;
  #L1cd944.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cd94a.  throw v13;
  #L1cd94c.  v12:= new `java.lang.StringBuilder`;
  #L1cd950.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cd956.  v0:= "endIndex < beginIndex: " @kind object;
  #L1cd95a.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd960.  call temp:= `append`(v12, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd966.  v14:= " < " @kind object;
  #L1cd96a.  call temp:= `append`(v12, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd970.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd976.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cd97c.  v12:= temp @kind object;
  #L1cd97e.  v13:= new `java.lang.IllegalArgumentException`;
  #L1cd982.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cd988.  v12:= temp @kind object;
  #L1cd98a.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cd990.  throw v13;
  #L1cd992.  v12:= new `java.lang.StringBuilder`;
  #L1cd996.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cd99c.  v14:= "beginIndex < 0: " @kind object;
  #L1cd9a0.  call temp:= `append`(v12, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd9a6.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cd9ac.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cd9b2.  v12:= temp @kind object;
  #L1cd9b4.  v13:= new `java.lang.IllegalArgumentException`;
  #L1cd9b8.  call temp:= `toString`(v12) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cd9be.  v12:= temp @kind object;
  #L1cd9c0.  call `<init>`(v13, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cd9c6.  throw v13;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cde5c.  call temp:= `writeUtf8`(v0, v1) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L1cde62.  v1:= temp @kind object;
  #L1cde64.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cde78.  call temp:= `writeUtf8`(v0, v1, v2, v3) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L1cde7e.  v1:= temp @kind object;
  #L1cde80.  return v1 @kind object;
}
procedure `okio.Buffer` `writeUtf8CodePoint`(`okio.Buffer` v8 @kind this, `int` v9 ) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1cd9d8.  v0:= 128I;
  #L1cd9dc.  if v9 >= v0 then goto L1cd9ea;
  #L1cd9e0.  call temp:= `writeByte`(v8, v9) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1cd9e6.  goto L1cdb3a;
  #L1cd9ea.  v1:= 2048I;
  #L1cd9ee.  v2:= 63I;
  #L1cd9f2.  if v9 >= v1 then goto L1cda42;
  #L1cd9f6.  v1:= 2I;
  #L1cd9f8.  call temp:= `writableSegment$okio`(v8, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1cd9fe.  v3:= temp @kind object;
  #L1cda00.  v4:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cda04.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L1cda08.  v6:= v9 ^> 6;
  #L1cda0c.  v6:= v6 ^| 192;
  #L1cda10.  v6:= (`byte`) v6 @kind i2b;
  #L1cda12.  v4[v5]:= v6 @kind byte;
  #L1cda16.  v6:= v5 + 1;
  #L1cda1a.  v9:= v9 ^& v2 @kind int;
  #L1cda1c.  v9:= v9 ^| v0 @kind int;
  #L1cda1e.  v9:= (`byte`) v9 @kind i2b;
  #L1cda20.  v4[v6]:= v9 @kind byte;
  #L1cda24.  v5:= v5 + v1 @kind int;
  #L1cda26.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L1cda2a.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cda30.  v0:= temp @kind wide;
  #L1cda32.  v2:= 2L;
  #L1cda36.  v0:= v0 + v2 @kind long;
  #L1cda38.  call `setSize$okio`(v8, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cda3e.  goto L1cdb3a;
  #L1cda42.  v1:= 57343I;
  #L1cda48.  v3:= 55296I;
  #L1cda4e.  if v3 <= v9 then goto L1cda54;
  #L1cda52.  goto L1cda60;
  #L1cda54.  if v1 < v9 then goto L1cda60;
  #L1cda58.  call temp:= `writeByte`(v8, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1cda5e.  goto L1cdb3a;
  #L1cda60.  v1:= 65536I;
  #L1cda64.  if v9 >= v1 then goto L1cdac4;
  #L1cda68.  v1:= 3I;
  #L1cda6a.  call temp:= `writableSegment$okio`(v8, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1cda70.  v3:= temp @kind object;
  #L1cda72.  v4:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cda76.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L1cda7a.  v6:= v9 ^> 12;
  #L1cda7e.  v6:= v6 ^| 224;
  #L1cda82.  v6:= (`byte`) v6 @kind i2b;
  #L1cda84.  v4[v5]:= v6 @kind byte;
  #L1cda88.  v6:= v5 + 1;
  #L1cda8c.  v7:= v9 ^> 6;
  #L1cda90.  v7:= v7 ^& v2 @kind int;
  #L1cda92.  v7:= v7 ^| v0 @kind int;
  #L1cda94.  v7:= (`byte`) v7 @kind i2b;
  #L1cda96.  v4[v6]:= v7 @kind byte;
  #L1cda9a.  v6:= v5 + 2;
  #L1cda9e.  v9:= v9 ^& v2 @kind int;
  #L1cdaa0.  v9:= v9 ^| v0 @kind int;
  #L1cdaa2.  v9:= (`byte`) v9 @kind i2b;
  #L1cdaa4.  v4[v6]:= v9 @kind byte;
  #L1cdaa8.  v5:= v5 + v1 @kind int;
  #L1cdaaa.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L1cdaae.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cdab4.  v0:= temp @kind wide;
  #L1cdab6.  v2:= 3L;
  #L1cdaba.  v0:= v0 + v2 @kind long;
  #L1cdabc.  call `setSize$okio`(v8, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cdac2.  goto L1cdb3a;
  #L1cdac4.  v1:= 1114111I;
  #L1cdaca.  if v9 > v1 then goto L1cdb3c;
  #L1cdace.  v1:= 4I;
  #L1cdad0.  call temp:= `writableSegment$okio`(v8, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1cdad6.  v3:= temp @kind object;
  #L1cdad8.  v4:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1cdadc.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L1cdae0.  v6:= v9 ^> 18;
  #L1cdae4.  v6:= v6 ^| 240;
  #L1cdae8.  v6:= (`byte`) v6 @kind i2b;
  #L1cdaea.  v4[v5]:= v6 @kind byte;
  #L1cdaee.  v6:= v5 + 1;
  #L1cdaf2.  v7:= v9 ^> 12;
  #L1cdaf6.  v7:= v7 ^& v2 @kind int;
  #L1cdaf8.  v7:= v7 ^| v0 @kind int;
  #L1cdafa.  v7:= (`byte`) v7 @kind i2b;
  #L1cdafc.  v4[v6]:= v7 @kind byte;
  #L1cdb00.  v6:= v5 + 2;
  #L1cdb04.  v7:= v9 ^> 6;
  #L1cdb08.  v7:= v7 ^& v2 @kind int;
  #L1cdb0a.  v7:= v7 ^| v0 @kind int;
  #L1cdb0c.  v7:= (`byte`) v7 @kind i2b;
  #L1cdb0e.  v4[v6]:= v7 @kind byte;
  #L1cdb12.  v6:= v5 + 3;
  #L1cdb16.  v9:= v9 ^& v2 @kind int;
  #L1cdb18.  v9:= v9 ^| v0 @kind int;
  #L1cdb1a.  v9:= (`byte`) v9 @kind i2b;
  #L1cdb1c.  v4[v6]:= v9 @kind byte;
  #L1cdb20.  v5:= v5 + v1 @kind int;
  #L1cdb22.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L1cdb26.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1cdb2c.  v0:= temp @kind wide;
  #L1cdb2e.  v2:= 4L;
  #L1cdb32.  v0:= v0 + v2 @kind long;
  #L1cdb34.  call `setSize$okio`(v8, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1cdb3a.  return v8 @kind object;
  #L1cdb3c.  v0:= new `java.lang.IllegalArgumentException`;
  #L1cdb40.  v1:= new `java.lang.StringBuilder`;
  #L1cdb44.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1cdb4a.  v2:= "Unexpected code point: 0x" @kind object;
  #L1cdb4e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cdb54.  call temp:= `toHexString`(v9) @signature `Lokio/-Util;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L1cdb5a.  v9:= temp @kind object;
  #L1cdb5c.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1cdb62.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1cdb68.  v9:= temp @kind object;
  #L1cdb6a.  call `<init>`(v0, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1cdb70.  throw v0;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1cde94.  call temp:= `writeUtf8CodePoint`(v0, v1) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L1cde9a.  v1:= temp @kind object;
  #L1cde9c.  return v1 @kind object;
}
