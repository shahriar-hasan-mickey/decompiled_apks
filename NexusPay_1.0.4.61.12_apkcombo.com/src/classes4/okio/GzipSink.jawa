record `okio.GzipSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Sink` @kind interface {
  `okio.RealBufferedSink` `okio.GzipSink.a` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Deflater` `okio.GzipSink.b` @AccessFlag PRIVATE_FINAL;
  `okio.DeflaterSink` `okio.GzipSink.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `okio.GzipSink.d` @AccessFlag PRIVATE;
  `java.util.zip.CRC32` `okio.GzipSink.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.GzipSink` v2 @kind this, `okio.Sink` v3 @kind object) @signature `Lokio/GzipSink;.<init>:(Lokio/Sink;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1d0c80.  v0:= "sink" @kind object;
  #L1d0c84.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d0c8a.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d0c90.  v0:= new `okio.RealBufferedSink`;
  #L1d0c94.  call `<init>`(v0, v3) @signature `Lokio/RealBufferedSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L1d0c9a.  v2.`okio.GzipSink.a` @type ^`okio.RealBufferedSink` := v0 @kind object;
  #L1d0c9e.  v3:= new `java.util.zip.Deflater`;
  #L1d0ca2.  v0:= -1I;
  #L1d0ca4.  v1:= 1I;
  #L1d0ca6.  call `<init>`(v3, v0, v1) @signature `Ljava/util/zip/Deflater;.<init>:(IZ)V` @kind direct;
  #L1d0cac.  v2.`okio.GzipSink.b` @type ^`java.util.zip.Deflater` := v3 @kind object;
  #L1d0cb0.  v0:= new `okio.DeflaterSink`;
  #L1d0cb4.  v1:= v2.`okio.GzipSink.a` @type ^`okio.RealBufferedSink` @kind object;
  #L1d0cb8.  call `<init>`(v0, v1, v3) @signature `Lokio/DeflaterSink;.<init>:(Lokio/BufferedSink;Ljava/util/zip/Deflater;)V` @kind direct;
  #L1d0cbe.  v2.`okio.GzipSink.c` @type ^`okio.DeflaterSink` := v0 @kind object;
  #L1d0cc2.  v3:= new `java.util.zip.CRC32`;
  #L1d0cc6.  call `<init>`(v3) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L1d0ccc.  v2.`okio.GzipSink.e` @type ^`java.util.zip.CRC32` := v3 @kind object;
  #L1d0cd0.  v3:= v2.`okio.GzipSink.a` @type ^`okio.RealBufferedSink` @kind object;
  #L1d0cd4.  v3:= v3.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1d0cd8.  v0:= 8075I;
  #L1d0cdc.  call temp:= `writeShort`(v3, v0) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L1d0ce2.  v0:= 8I;
  #L1d0ce6.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1d0cec.  v0:= 0I;
  #L1d0cee.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1d0cf4.  call temp:= `writeInt`(v3, v0) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L1d0cfa.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1d0d00.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1d0d06.  return @kind void;
}
procedure `void` `a`(`okio.GzipSink` v4 @kind this, `okio.Buffer` v5 @kind object, `long` v6 ) @signature `Lokio/GzipSink;.a:(Lokio/Buffer;J)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d0dbc.  v5:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d0dc0.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d0dc6.  v0:= 0L;
  #L1d0dca.  v2:= lcmp(v6, v0);
  #L1d0dce.  if v2 <= 0 then goto L1d0e0a;
  #L1d0dd2.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L1d0dd6.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L1d0dda.  v0:= v0 - v1 @kind int;
  #L1d0ddc.  v0:= (`long`) v0 @kind i2l;
  #L1d0dde.  call temp:= `min`(v6, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1d0de4.  v0:= temp @kind wide;
  #L1d0de6.  v1:= (`int`) v0 @kind l2i;
  #L1d0de8.  v0:= v4.`okio.GzipSink.e` @type ^`java.util.zip.CRC32` @kind object;
  #L1d0dec.  v2:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d0df0.  v3:= v5.`okio.Segment.pos` @type ^`int`;
  #L1d0df4.  call `update`(v0, v2, v3, v1) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L1d0dfa.  v0:= (`long`) v1 @kind i2l;
  #L1d0dfc.  v6:= v6 - v0 @kind long;
  #L1d0dfe.  v5:= v5.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1d0e02.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d0e08.  goto L1d0dc6;
  #L1d0e0a.  return @kind void;
}
procedure `void` `b`(`okio.GzipSink` v3 @kind this) @signature `Lokio/GzipSink;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1d0e9c.  v0:= v3.`okio.GzipSink.a` @type ^`okio.RealBufferedSink` @kind object;
  #L1d0ea0.  v1:= v3.`okio.GzipSink.e` @type ^`java.util.zip.CRC32` @kind object;
  #L1d0ea4.  call temp:= `getValue`(v1) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L1d0eaa.  v1:= temp @kind wide;
  #L1d0eac.  v2:= (`int`) v1 @kind l2i;
  #L1d0eae.  call temp:= `writeIntLe`(v0, v2) @signature `Lokio/RealBufferedSink;.writeIntLe:(I)Lokio/BufferedSink;` @kind virtual;
  #L1d0eb4.  v0:= v3.`okio.GzipSink.a` @type ^`okio.RealBufferedSink` @kind object;
  #L1d0eb8.  v1:= v3.`okio.GzipSink.b` @type ^`java.util.zip.Deflater` @kind object;
  #L1d0ebc.  call temp:= `getBytesRead`(v1) @signature `Ljava/util/zip/Deflater;.getBytesRead:()J` @kind virtual;
  #L1d0ec2.  v1:= temp @kind wide;
  #L1d0ec4.  v2:= (`int`) v1 @kind l2i;
  #L1d0ec6.  call temp:= `writeIntLe`(v0, v2) @signature `Lokio/RealBufferedSink;.writeIntLe:(I)Lokio/BufferedSink;` @kind virtual;
  #L1d0ecc.  return @kind void;
}
procedure `java.util.zip.Deflater` `-deprecated_deflater`(`okio.GzipSink` v1 @kind this) @signature `Lokio/GzipSink;.-deprecated_deflater:()Ljava/util/zip/Deflater;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d0c30.  v0:= v1.`okio.GzipSink.b` @type ^`java.util.zip.Deflater` @kind object;
  #L1d0c34.  return v0 @kind object;
}
procedure `void` `close`(`okio.GzipSink` v2 @kind this) @signature `Lokio/GzipSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d0d18.  v0:= v2.`okio.GzipSink.d` @type ^`boolean` @kind boolean;
  #L1d0d1c.  if v0 == 0 then goto L1d0d22;
  #L1d0d20.  return @kind void;
  #L1d0d22.  v0:= 0I;
  #L1d0d24.  v1:= v2.`okio.GzipSink.c` @type ^`okio.DeflaterSink` @kind object;
  #L1d0d28.  call `finishDeflate$okio`(v1) @signature `Lokio/DeflaterSink;.finishDeflate$okio:()V` @kind virtual;
  #L1d0d2e.  call `b`(v2) @signature `Lokio/GzipSink;.b:()V` @kind direct;
  #L1d0d34.  goto L1d0d38;
  #L1d0d36.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d0d38.  v1:= v2.`okio.GzipSink.b` @type ^`java.util.zip.Deflater` @kind object;
  #L1d0d3c.  call `end`(v1) @signature `Ljava/util/zip/Deflater;.end:()V` @kind virtual;
  #L1d0d42.  goto L1d0d4c;
  #L1d0d44.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d0d46.  if v0 != 0 then goto L1d0d4c;
  #L1d0d4a.  v0:= v1 @kind object;
  #L1d0d4c.  v1:= v2.`okio.GzipSink.a` @type ^`okio.RealBufferedSink` @kind object;
  #L1d0d50.  call `close`(v1) @signature `Lokio/RealBufferedSink;.close:()V` @kind virtual;
  #L1d0d56.  goto L1d0d60;
  #L1d0d58.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1d0d5a.  if v0 != 0 then goto L1d0d60;
  #L1d0d5e.  v0:= v1 @kind object;
  #L1d0d60.  v1:= 1I;
  #L1d0d62.  v2.`okio.GzipSink.d` @type ^`boolean` := v1 @kind boolean;
  #L1d0d66.  if v0 != 0 then goto L1d0d6c;
  #L1d0d6a.  return @kind void;
  #L1d0d6c.  throw v0;
  catch `java.lang.Throwable` @[L1d0d24..L1d0d34] goto L1d0d36;
  catch `java.lang.Throwable` @[L1d0d38..L1d0d42] goto L1d0d44;
  catch `java.lang.Throwable` @[L1d0d4c..L1d0d56] goto L1d0d58;
}
procedure `java.util.zip.Deflater` `deflater`(`okio.GzipSink` v1 @kind this) @signature `Lokio/GzipSink;.deflater:()Ljava/util/zip/Deflater;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d0c48.  v0:= v1.`okio.GzipSink.b` @type ^`java.util.zip.Deflater` @kind object;
  #L1d0c4c.  return v0 @kind object;
}
procedure `void` `flush`(`okio.GzipSink` v1 @kind this) @signature `Lokio/GzipSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d0da0.  v0:= v1.`okio.GzipSink.c` @type ^`okio.DeflaterSink` @kind object;
  #L1d0da4.  call `flush`(v0) @signature `Lokio/DeflaterSink;.flush:()V` @kind virtual;
  #L1d0daa.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.GzipSink` v1 @kind this) @signature `Lokio/GzipSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d0c60.  v0:= v1.`okio.GzipSink.a` @type ^`okio.RealBufferedSink` @kind object;
  #L1d0c64.  call temp:= `timeout`(v0) @signature `Lokio/RealBufferedSink;.timeout:()Lokio/Timeout;` @kind virtual;
  #L1d0c6a.  v0:= temp @kind object;
  #L1d0c6c.  return v0 @kind object;
}
procedure `void` `write`(`okio.GzipSink` v3 @kind this, `okio.Buffer` v4 @kind object, `long` v5 ) @signature `Lokio/GzipSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1d0e1c.  v0:= "source" @kind object;
  #L1d0e20.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d0e26.  v0:= 0L;
  #L1d0e2a.  v2:= lcmp(v5, v0);
  #L1d0e2e.  if v2 < 0 then goto L1d0e36;
  #L1d0e32.  v0:= 1I;
  #L1d0e34.  goto L1d0e38;
  #L1d0e36.  v0:= 0I;
  #L1d0e38.  if v0 == 0 then goto L1d0e54;
  #L1d0e3c.  if v2 != 0 then goto L1d0e42;
  #L1d0e40.  return @kind void;
  #L1d0e42.  call `a`(v3, v4, v5) @signature `Lokio/GzipSink;.a:(Lokio/Buffer;J)V` @kind direct;
  #L1d0e48.  v0:= v3.`okio.GzipSink.c` @type ^`okio.DeflaterSink` @kind object;
  #L1d0e4c.  call `write`(v0, v4, v5) @signature `Lokio/DeflaterSink;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L1d0e52.  return @kind void;
  #L1d0e54.  v4:= new `java.lang.StringBuilder`;
  #L1d0e58.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d0e5e.  v0:= "byteCount < 0: " @kind object;
  #L1d0e62.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d0e68.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d0e6e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d0e74.  v4:= temp @kind object;
  #L1d0e76.  v5:= new `java.lang.IllegalArgumentException`;
  #L1d0e7a.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d0e80.  v4:= temp @kind object;
  #L1d0e82.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d0e88.  throw v5;
}
