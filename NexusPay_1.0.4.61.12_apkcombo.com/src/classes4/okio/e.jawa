record `okio.e` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `java.io.OutputStream` `okio.e.a` @AccessFlag PRIVATE_FINAL;
  `okio.Timeout` `okio.e.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.e` v1 @kind this, `java.io.OutputStream` v2 @kind object, `okio.Timeout` v3 @kind object) @signature `Lokio/e;.<init>:(Ljava/io/OutputStream;Lokio/Timeout;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d3318.  v0:= "out" @kind object;
  #L1d331c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d3322.  v0:= "timeout" @kind object;
  #L1d3326.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d332c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d3332.  v1.`okio.e.a` @type ^`java.io.OutputStream` := v2 @kind object;
  #L1d3336.  v1.`okio.e.b` @type ^`okio.Timeout` := v3 @kind object;
  #L1d333a.  return @kind void;
}
procedure `void` `close`(`okio.e` v1 @kind this) @signature `Lokio/e;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d334c.  v0:= v1.`okio.e.a` @type ^`java.io.OutputStream` @kind object;
  #L1d3350.  call `close`(v0) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L1d3356.  return @kind void;
}
procedure `void` `flush`(`okio.e` v1 @kind this) @signature `Lokio/e;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d3368.  v0:= v1.`okio.e.a` @type ^`java.io.OutputStream` @kind object;
  #L1d336c.  call `flush`(v0) @signature `Ljava/io/OutputStream;.flush:()V` @kind virtual;
  #L1d3372.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.e` v1 @kind this) @signature `Lokio/e;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d3300.  v0:= v1.`okio.e.b` @type ^`okio.Timeout` @kind object;
  #L1d3304.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.e` v2 @kind this) @signature `Lokio/e;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1d32bc.  v0:= new `java.lang.StringBuilder`;
  #L1d32c0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d32c6.  v1:= "sink(" @kind object;
  #L1d32ca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d32d0.  v1:= v2.`okio.e.a` @type ^`java.io.OutputStream` @kind object;
  #L1d32d4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d32da.  v1:= 41I;
  #L1d32de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d32e4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d32ea.  v0:= temp @kind object;
  #L1d32ec.  return v0 @kind object;
}
procedure `void` `write`(`okio.e` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokio/e;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1d3384.  v0:= "source" @kind object;
  #L1d3388.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d338e.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d3394.  v1:= temp @kind wide;
  #L1d3396.  v3:= 0L;
  #L1d339a.  v5:= v9 @kind wide;
  #L1d339c.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1d33a2.  v0:= 0L;
  #L1d33a6.  v2:= lcmp(v9, v0);
  #L1d33aa.  if v2 <= 0 then goto L1d3428;
  #L1d33ae.  v0:= v7.`okio.e.b` @type ^`okio.Timeout` @kind object;
  #L1d33b2.  call `throwIfReached`(v0) @signature `Lokio/Timeout;.throwIfReached:()V` @kind virtual;
  #L1d33b8.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d33bc.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d33c2.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d33c6.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d33ca.  v1:= v1 - v2 @kind int;
  #L1d33cc.  v1:= (`long`) v1 @kind i2l;
  #L1d33ce.  call temp:= `min`(v9, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1d33d4.  v1:= temp @kind wide;
  #L1d33d6.  v2:= (`int`) v1 @kind l2i;
  #L1d33d8.  v1:= v7.`okio.e.a` @type ^`java.io.OutputStream` @kind object;
  #L1d33dc.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d33e0.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d33e4.  call `write`(v1, v3, v4, v2) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L1d33ea.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d33ee.  v1:= v1 + v2 @kind int;
  #L1d33f0.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L1d33f4.  v1:= (`long`) v2 @kind i2l;
  #L1d33f6.  v9:= v9 - v1 @kind long;
  #L1d33f8.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d33fe.  v3:= temp @kind wide;
  #L1d3400.  v3:= v3 - v1 @kind long;
  #L1d3402.  call `setSize$okio`(v8, v3) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1d3408.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d340c.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d3410.  if v1 != v2 then goto L1d33a2;
  #L1d3414.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1d341a.  v1:= temp @kind object;
  #L1d341c.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L1d3420.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1d3426.  goto L1d33a2;
  #L1d3428.  return @kind void;
}
