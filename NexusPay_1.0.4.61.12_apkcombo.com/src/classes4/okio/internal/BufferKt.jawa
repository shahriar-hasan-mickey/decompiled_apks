record `okio.internal.BufferKt` @kind class @AccessFlag PUBLIC_FINAL {
}
global `long` `@@okio.internal.BufferKt.OVERFLOW_DIGIT_START` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@okio.internal.BufferKt.OVERFLOW_ZONE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@okio.internal.BufferKt.SEGMENTING_THRESHOLD` @AccessFlag PUBLIC_STATIC_FINAL;
global `byte`[] `@@okio.internal.BufferKt.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/internal/BufferKt;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1dc154.  v0:= "0123456789abcdef" @kind object;
  #L1dc158.  call temp:= `asUtf8ToByteArray`(v0) @signature `Lokio/-Platform;.asUtf8ToByteArray:(Ljava/lang/String;)[B` @kind static;
  #L1dc15e.  v0:= temp @kind object;
  #L1dc160.  `@@okio.internal.BufferKt.a` @type ^`byte`[] := v0 @kind object;
  #L1dc164.  return @kind void;
}
procedure `void` `commonClear`(`okio.Buffer` v2 @kind object) @signature `Lokio/internal/BufferKt;.commonClear:(Lokio/Buffer;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1dc178.  v0:= "$this$commonClear" @kind object;
  #L1dc17c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dc182.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dc188.  v0:= temp @kind wide;
  #L1dc18a.  call `skip`(v2, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1dc190.  return @kind void;
}
procedure `void` `commonClose`(`okio.Buffer$UnsafeCursor` v3 @kind object) @signature `Lokio/internal/BufferKt;.commonClose:(Lokio/Buffer$UnsafeCursor;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1dc1a4.  v0:= "$this$commonClose" @kind object;
  #L1dc1a8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dc1ae.  v0:= v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1dc1b2.  if v0 == 0 then goto L1dc1ba;
  #L1dc1b6.  v0:= 1I;
  #L1dc1b8.  goto L1dc1bc;
  #L1dc1ba.  v0:= 0I;
  #L1dc1bc.  if v0 == 0 then goto L1dc1e4;
  #L1dc1c0.  v0:= 0I;
  #L1dc1c2.  v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v0 @kind object;
  #L1dc1c6.  call `setSegment$okio`(v3, v0) @signature `Lokio/Buffer$UnsafeCursor;.setSegment$okio:(Lokio/Segment;)V` @kind virtual;
  #L1dc1cc.  v1:= -1L;
  #L1dc1d0.  v3.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v1 @kind wide;
  #L1dc1d4.  v3.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v0 @kind object;
  #L1dc1d8.  v0:= -1I;
  #L1dc1da.  v3.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v0;
  #L1dc1de.  v3.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v0;
  #L1dc1e2.  return @kind void;
  #L1dc1e4.  v3:= new `java.lang.IllegalStateException`;
  #L1dc1e8.  v0:= "not attached to a buffer" @kind object;
  #L1dc1ec.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dc1f2.  v0:= temp @kind object;
  #L1dc1f4.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dc1fa.  throw v3;
}
procedure `long` `commonCompleteSegmentByteCount`(`okio.Buffer` v5 @kind object) @signature `Lokio/internal/BufferKt;.commonCompleteSegmentByteCount:(Lokio/Buffer;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d9eac.  v0:= "$this$commonCompleteSegmentByteCount" @kind object;
  #L1d9eb0.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9eb6.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d9ebc.  v0:= temp @kind wide;
  #L1d9ebe.  v2:= 0L;
  #L1d9ec2.  v4:= lcmp(v0, v2);
  #L1d9ec6.  if v4 != 0 then goto L1d9ecc;
  #L1d9eca.  return v2 @kind wide;
  #L1d9ecc.  v5:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d9ed0.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d9ed6.  v5:= v5.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1d9eda.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d9ee0.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L1d9ee4.  v3:= 8192I;
  #L1d9ee8.  if v2 >= v3 then goto L1d9efe;
  #L1d9eec.  v3:= v5.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L1d9ef0.  if v3 == 0 then goto L1d9efe;
  #L1d9ef4.  v5:= v5.`okio.Segment.pos` @type ^`int`;
  #L1d9ef8.  v2:= v2 - v5 @kind int;
  #L1d9efa.  v2:= (`long`) v2 @kind i2l;
  #L1d9efc.  v0:= v0 - v2 @kind long;
  #L1d9efe.  return v0 @kind wide;
}
procedure `okio.Buffer` `commonCopy`(`okio.Buffer` v6 @kind object) @signature `Lokio/internal/BufferKt;.commonCopy:(Lokio/Buffer;)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1daf20.  v0:= "$this$commonCopy" @kind object;
  #L1daf24.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1daf2a.  v0:= new `okio.Buffer`;
  #L1daf2e.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1daf34.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1daf3a.  v1:= temp @kind wide;
  #L1daf3c.  v3:= 0L;
  #L1daf40.  v5:= lcmp(v1, v3);
  #L1daf44.  if v5 != 0 then goto L1daf4a;
  #L1daf48.  return v0 @kind object;
  #L1daf4a.  v1:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1daf4e.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1daf54.  call temp:= `sharedCopy`(v1) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L1daf5a.  v2:= temp @kind object;
  #L1daf5c.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L1daf60.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v2 @kind object;
  #L1daf64.  v2.`okio.Segment.next` @type ^`okio.Segment` := v2 @kind object;
  #L1daf68.  v3:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1daf6c.  if v3 == v1 then goto L1daf94;
  #L1daf70.  v4:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1daf74.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1daf7a.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1daf80.  call temp:= `sharedCopy`(v3) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L1daf86.  v5:= temp @kind object;
  #L1daf88.  call temp:= `push`(v4, v5) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1daf8e.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1daf92.  goto L1daf6c;
  #L1daf94.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1daf9a.  v1:= temp @kind wide;
  #L1daf9c.  call `setSize$okio`(v0, v1) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1dafa2.  return v0 @kind object;
}
procedure `okio.Buffer` `commonCopyTo`(`okio.Buffer` v8 @kind object, `okio.Buffer` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lokio/internal/BufferKt;.commonCopyTo:(Lokio/Buffer;Lokio/Buffer;JJ)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1dafb4.  v0:= "$this$commonCopyTo" @kind object;
  #L1dafb8.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dafbe.  v0:= "out" @kind object;
  #L1dafc2.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dafc8.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dafce.  v1:= temp @kind wide;
  #L1dafd0.  v3:= v10 @kind wide;
  #L1dafd2.  v5:= v12 @kind wide;
  #L1dafd4.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1dafda.  v0:= 0L;
  #L1dafde.  v2:= lcmp(v12, v0);
  #L1dafe2.  if v2 != 0 then goto L1dafe8;
  #L1dafe6.  return v8 @kind object;
  #L1dafe8.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dafee.  v2:= temp @kind wide;
  #L1daff0.  v2:= v2 + v12 @kind long;
  #L1daff2.  call `setSize$okio`(v9, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1daff8.  v2:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1daffc.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1db002.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L1db006.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L1db00a.  v5:= v3 - v4 @kind int;
  #L1db00e.  v5:= (`long`) v5 @kind i2l;
  #L1db010.  v7:= lcmp(v10, v5);
  #L1db014.  if v7 < 0 then goto L1db024;
  #L1db018.  v3:= v3 - v4 @kind int;
  #L1db01a.  v3:= (`long`) v3 @kind i2l;
  #L1db01c.  v10:= v10 - v3 @kind long;
  #L1db01e.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1db022.  goto L1daffc;
  #L1db024.  v3:= lcmp(v12, v0);
  #L1db028.  if v3 <= 0 then goto L1db09c;
  #L1db02c.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1db032.  call temp:= `sharedCopy`(v2) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L1db038.  v3:= temp @kind object;
  #L1db03a.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L1db03e.  v11:= (`int`) v10 @kind l2i;
  #L1db040.  v4:= v4 + v11 @kind int;
  #L1db042.  v3.`okio.Segment.pos` @type ^`int` := v4;
  #L1db046.  v10:= (`int`) v12 @kind l2i;
  #L1db048.  v4:= v4 + v10 @kind int;
  #L1db04a.  v10:= v3.`okio.Segment.limit` @type ^`int`;
  #L1db04e.  call temp:= `min`(v4, v10) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1db054.  v10:= temp;
  #L1db056.  v3.`okio.Segment.limit` @type ^`int` := v10;
  #L1db05a.  v10:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1db05e.  if v10 != 0 then goto L1db070;
  #L1db062.  v3.`okio.Segment.prev` @type ^`okio.Segment` := v3 @kind object;
  #L1db066.  v3.`okio.Segment.next` @type ^`okio.Segment` := v3 @kind object;
  #L1db06a.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v3 @kind object;
  #L1db06e.  goto L1db086;
  #L1db070.  call `checkNotNull`(v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1db076.  v10:= v10.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1db07a.  call `checkNotNull`(v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1db080.  call temp:= `push`(v10, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1db086.  v10:= v3.`okio.Segment.limit` @type ^`int`;
  #L1db08a.  v11:= v3.`okio.Segment.pos` @type ^`int`;
  #L1db08e.  v10:= v10 - v11 @kind int;
  #L1db090.  v10:= (`long`) v10 @kind i2l;
  #L1db092.  v12:= v12 - v10 @kind long;
  #L1db094.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1db098.  v10:= v0 @kind wide;
  #L1db09a.  goto L1db024;
  #L1db09c.  return v8 @kind object;
}
procedure `boolean` `commonEquals`(`okio.Buffer` v18 @kind object, `java.lang.Object` v19 @kind object) @signature `Lokio/internal/BufferKt;.commonEquals:(Lokio/Buffer;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L1d8d88.  v0:= v18 @kind object;
  #L1d8d8c.  v1:= v19 @kind object;
  #L1d8d90.  v2:= "$this$commonEquals" @kind object;
  #L1d8d94.  call `checkNotNullParameter`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8d9a.  v2:= 1I;
  #L1d8d9c.  if v0 != v1 then goto L1d8da2;
  #L1d8da0.  return v2;
  #L1d8da2.  v3:= instanceof @variable v1 @type ^`okio.Buffer` @kind boolean;
  #L1d8da6.  v4:= 0I;
  #L1d8da8.  if v3 != 0 then goto L1d8dae;
  #L1d8dac.  return v4;
  #L1d8dae.  call temp:= `size`(v18) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d8db4.  v5:= temp @kind wide;
  #L1d8db6.  v1:= (`okio.Buffer`) v1 @kind object;
  #L1d8dba.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d8dc0.  v7:= temp @kind wide;
  #L1d8dc2.  v3:= lcmp(v5, v7);
  #L1d8dc6.  if v3 == 0 then goto L1d8dcc;
  #L1d8dca.  return v4;
  #L1d8dcc.  call temp:= `size`(v18) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d8dd2.  v5:= temp @kind wide;
  #L1d8dd4.  v7:= 0L;
  #L1d8dd8.  v3:= lcmp(v5, v7);
  #L1d8ddc.  if v3 != 0 then goto L1d8de2;
  #L1d8de0.  return v2;
  #L1d8de2.  v3:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d8de6.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d8dec.  v1:= v1.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d8df0.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d8df6.  v5:= v3.`okio.Segment.pos` @type ^`int`;
  #L1d8dfa.  v6:= v1.`okio.Segment.pos` @type ^`int`;
  #L1d8dfe.  v9:= v7 @kind wide;
  #L1d8e00.  call temp:= `size`(v18) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d8e06.  v11:= temp @kind wide;
  #L1d8e08.  v13:= lcmp(v9, v11);
  #L1d8e0c.  if v13 >= 0 then goto L1d8e8e;
  #L1d8e10.  v11:= v3.`okio.Segment.limit` @type ^`int`;
  #L1d8e14.  v11:= v11 - v5 @kind int;
  #L1d8e16.  v12:= v1.`okio.Segment.limit` @type ^`int`;
  #L1d8e1a.  v12:= v12 - v6 @kind int;
  #L1d8e1c.  call temp:= `min`(v11, v12) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d8e22.  v11:= temp;
  #L1d8e24.  v11:= (`long`) v11 @kind i2l;
  #L1d8e26.  v13:= v7 @kind wide;
  #L1d8e28.  v15:= lcmp(v13, v11);
  #L1d8e2c.  if v15 >= 0 then goto L1d8e5e;
  #L1d8e30.  v15:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d8e34.  v16:= v5 + 1;
  #L1d8e38.  v5:= v15[v5] @kind byte;
  #L1d8e3c.  v15:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d8e40.  v17:= v6 + 1;
  #L1d8e44.  v6:= v15[v6] @kind byte;
  #L1d8e48.  if v5 == v6 then goto L1d8e4e;
  #L1d8e4c.  return v4;
  #L1d8e4e.  v5:= 1L;
  #L1d8e52.  v13:= v13 + v5 @kind long;
  #L1d8e54.  v5:= v16;
  #L1d8e58.  v6:= v17;
  #L1d8e5c.  goto L1d8e28;
  #L1d8e5e.  v13:= v3.`okio.Segment.limit` @type ^`int`;
  #L1d8e62.  if v5 != v13 then goto L1d8e74;
  #L1d8e66.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1d8e6a.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d8e70.  v5:= v3.`okio.Segment.pos` @type ^`int`;
  #L1d8e74.  v13:= v1.`okio.Segment.limit` @type ^`int`;
  #L1d8e78.  if v6 != v13 then goto L1d8e8a;
  #L1d8e7c.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1d8e80.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d8e86.  v6:= v1.`okio.Segment.pos` @type ^`int`;
  #L1d8e8a.  v9:= v9 + v11 @kind long;
  #L1d8e8c.  goto L1d8e00;
  #L1d8e8e.  return v2;
}
procedure `long` `commonExpandBuffer`(`okio.Buffer$UnsafeCursor` v9 @kind object, `int` v10 ) @signature `Lokio/internal/BufferKt;.commonExpandBuffer:(Lokio/Buffer$UnsafeCursor;I)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1d9f10.  v0:= "$this$commonExpandBuffer" @kind object;
  #L1d9f14.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9f1a.  v0:= 1I;
  #L1d9f1c.  v1:= 0I;
  #L1d9f1e.  if v10 <= 0 then goto L1d9f26;
  #L1d9f22.  v2:= 1I;
  #L1d9f24.  goto L1d9f28;
  #L1d9f26.  v2:= 0I;
  #L1d9f28.  if v2 == 0 then goto L1d9ffa;
  #L1d9f2c.  v2:= 8192I;
  #L1d9f30.  if v10 > v2 then goto L1d9f36;
  #L1d9f34.  goto L1d9f38;
  #L1d9f36.  v0:= 0I;
  #L1d9f38.  if v0 == 0 then goto L1d9fc4;
  #L1d9f3c.  v0:= v9.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1d9f40.  if v0 == 0 then goto L1d9fac;
  #L1d9f44.  v1:= v9.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` @kind boolean;
  #L1d9f48.  if v1 == 0 then goto L1d9f94;
  #L1d9f4c.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d9f52.  v3:= temp @kind wide;
  #L1d9f54.  call temp:= `writableSegment$okio`(v0, v10) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1d9f5a.  v10:= temp @kind object;
  #L1d9f5c.  v1:= v10.`okio.Segment.limit` @type ^`int`;
  #L1d9f60.  v1:= v1 - 8192;
  #L1d9f64.  v10.`okio.Segment.limit` @type ^`int` := v2;
  #L1d9f68.  v5:= (`long`) v1 @kind i2l;
  #L1d9f6a.  v7:= v3 + v5 @kind long;
  #L1d9f6e.  call `setSize$okio`(v0, v7) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1d9f74.  call `setSegment$okio`(v9, v10) @signature `Lokio/Buffer$UnsafeCursor;.setSegment$okio:(Lokio/Segment;)V` @kind virtual;
  #L1d9f7a.  v9.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v3 @kind wide;
  #L1d9f7e.  v10:= v10.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d9f82.  v9.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v10 @kind object;
  #L1d9f86.  v10:= v1 - 8192;
  #L1d9f8a.  v9.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v10;
  #L1d9f8e.  v9.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v2;
  #L1d9f92.  return v5 @kind wide;
  #L1d9f94.  v9:= new `java.lang.IllegalStateException`;
  #L1d9f98.  v10:= "expandBuffer() only permitted for read/write buffers" @kind object;
  #L1d9f9c.  call temp:= `toString`(v10) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d9fa2.  v10:= temp @kind object;
  #L1d9fa4.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d9faa.  throw v9;
  #L1d9fac.  v9:= new `java.lang.IllegalStateException`;
  #L1d9fb0.  v10:= "not attached to a buffer" @kind object;
  #L1d9fb4.  call temp:= `toString`(v10) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d9fba.  v10:= temp @kind object;
  #L1d9fbc.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d9fc2.  throw v9;
  #L1d9fc4.  v9:= new `java.lang.StringBuilder`;
  #L1d9fc8.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d9fce.  v0:= "minByteCount > Segment.SIZE: " @kind object;
  #L1d9fd2.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d9fd8.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d9fde.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d9fe4.  v9:= temp @kind object;
  #L1d9fe6.  v10:= new `java.lang.IllegalArgumentException`;
  #L1d9fea.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d9ff0.  v9:= temp @kind object;
  #L1d9ff2.  call `<init>`(v10, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d9ff8.  throw v10;
  #L1d9ffa.  v9:= new `java.lang.StringBuilder`;
  #L1d9ffe.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1da004.  v0:= "minByteCount <= 0: " @kind object;
  #L1da008.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da00e.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da014.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1da01a.  v9:= temp @kind object;
  #L1da01c.  v10:= new `java.lang.IllegalArgumentException`;
  #L1da020.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1da026.  v9:= temp @kind object;
  #L1da028.  call `<init>`(v10, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1da02e.  throw v10;
}
procedure `byte` `commonGet`(`okio.Buffer` v7 @kind object, `long` v8 ) @signature `Lokio/internal/BufferKt;.commonGet:(Lokio/Buffer;J)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1d8fa0.  v0:= "$this$commonGet" @kind object;
  #L1d8fa4.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8faa.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d8fb0.  v1:= temp @kind wide;
  #L1d8fb2.  v5:= 1L;
  #L1d8fb6.  v3:= v8 @kind wide;
  #L1d8fb8.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1d8fbe.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d8fc2.  if v0 == 0 then goto L1d9062;
  #L1d8fc6.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d8fcc.  v1:= temp @kind wide;
  #L1d8fce.  v1:= v1 - v8 @kind long;
  #L1d8fd0.  v3:= lcmp(v1, v8);
  #L1d8fd4.  if v3 >= 0 then goto L1d901e;
  #L1d8fd8.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d8fde.  v1:= temp @kind wide;
  #L1d8fe0.  v7:= lcmp(v1, v8);
  #L1d8fe4.  if v7 <= 0 then goto L1d9002;
  #L1d8fe8.  v0:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1d8fec.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d8ff2.  v7:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d8ff6.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d8ffa.  v7:= v7 - v3 @kind int;
  #L1d8ffc.  v3:= (`long`) v7 @kind i2l;
  #L1d8ffe.  v1:= v1 - v3 @kind long;
  #L1d9000.  goto L1d8fe0;
  #L1d9002.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d9008.  v7:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d900c.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d9010.  v3:= (`long`) v0 @kind i2l;
  #L1d9012.  v3:= v3 + v8 @kind long;
  #L1d9014.  v3:= v3 - v1 @kind long;
  #L1d9016.  v8:= (`int`) v3 @kind l2i;
  #L1d9018.  v7:= v7[v8] @kind byte;
  #L1d901c.  return v7;
  #L1d901e.  v1:= 0L;
  #L1d9022.  v7:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d9026.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d902a.  v7:= v7 - v3 @kind int;
  #L1d902c.  v3:= (`long`) v7 @kind i2l;
  #L1d902e.  v3:= v3 + v1 @kind long;
  #L1d9030.  v7:= lcmp(v3, v8);
  #L1d9034.  if v7 <= 0 then goto L1d9054;
  #L1d9038.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d903e.  v7:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d9042.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d9046.  v3:= (`long`) v0 @kind i2l;
  #L1d9048.  v3:= v3 + v8 @kind long;
  #L1d904a.  v3:= v3 - v1 @kind long;
  #L1d904c.  v8:= (`int`) v3 @kind l2i;
  #L1d904e.  v7:= v7[v8] @kind byte;
  #L1d9052.  return v7;
  #L1d9054.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1d9058.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d905e.  v1:= v3 @kind wide;
  #L1d9060.  goto L1d9022;
  #L1d9062.  v7:= 0I;
  #L1d9064.  v0:= -1L;
  #L1d9068.  call `checkNotNull`(v7) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d906e.  v2:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d9072.  v7:= v7.`okio.Segment.pos` @type ^`int`;
  #L1d9076.  v3:= (`long`) v7 @kind i2l;
  #L1d9078.  v3:= v3 + v8 @kind long;
  #L1d907a.  v3:= v3 - v0 @kind long;
  #L1d907c.  v7:= (`int`) v3 @kind l2i;
  #L1d907e.  v7:= v2[v7] @kind byte;
  #L1d9082.  return v7;
}
procedure `int` `commonHashCode`(`okio.Buffer` v5 @kind object) @signature `Lokio/internal/BufferKt;.commonHashCode:(Lokio/Buffer;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d9204.  v0:= "$this$commonHashCode" @kind object;
  #L1d9208.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d920e.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d9212.  if v0 == 0 then goto L1d924c;
  #L1d9216.  v1:= 1I;
  #L1d9218.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d921c.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d9220.  if v2 >= v3 then goto L1d9238;
  #L1d9224.  v1:= v1 * 31;
  #L1d9228.  v4:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d922c.  v4:= v4[v2] @kind byte;
  #L1d9230.  v1:= v1 + v4 @kind int;
  #L1d9232.  v2:= v2 + 1;
  #L1d9236.  goto L1d9220;
  #L1d9238.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1d923c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d9242.  v2:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d9246.  if v0 != v2 then goto L1d9218;
  #L1d924a.  return v1;
  #L1d924c.  v5:= 0I;
  #L1d924e.  return v5;
}
procedure `long` `commonIndexOf`(`okio.Buffer` v9 @kind object, `byte` v10 , `long` v11 , `long` v13 ) @signature `Lokio/internal/BufferKt;.commonIndexOf:(Lokio/Buffer;BJJ)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1da040.  v0:= "$this$commonIndexOf" @kind object;
  #L1da044.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1da04a.  v0:= 0L;
  #L1da04e.  v2:= lcmp(v0, v11);
  #L1da052.  if v2 <= 0 then goto L1da058;
  #L1da056.  goto L1da064;
  #L1da058.  v2:= lcmp(v13, v11);
  #L1da05c.  if v2 < 0 then goto L1da064;
  #L1da060.  v2:= 1I;
  #L1da062.  goto L1da066;
  #L1da064.  v2:= 0I;
  #L1da066.  if v2 == 0 then goto L1da1d4;
  #L1da06a.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da070.  v2:= temp @kind wide;
  #L1da072.  v4:= lcmp(v13, v2);
  #L1da076.  if v4 <= 0 then goto L1da082;
  #L1da07a.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da080.  v13:= temp @kind wide;
  #L1da082.  v2:= -1L;
  #L1da086.  v4:= lcmp(v11, v13);
  #L1da08a.  if v4 != 0 then goto L1da090;
  #L1da08e.  return v2 @kind wide;
  #L1da090.  v4:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1da094.  if v4 == 0 then goto L1da1d2;
  #L1da098.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da09e.  v5:= temp @kind wide;
  #L1da0a0.  v5:= v5 - v11 @kind long;
  #L1da0a2.  v7:= lcmp(v5, v11);
  #L1da0a6.  if v7 >= 0 then goto L1da146;
  #L1da0aa.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da0b0.  v0:= temp @kind wide;
  #L1da0b2.  v9:= lcmp(v0, v11);
  #L1da0b6.  if v9 <= 0 then goto L1da0d4;
  #L1da0ba.  v4:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1da0be.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1da0c4.  v9:= v4.`okio.Segment.limit` @type ^`int`;
  #L1da0c8.  v5:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da0cc.  v9:= v9 - v5 @kind int;
  #L1da0ce.  v5:= (`long`) v9 @kind i2l;
  #L1da0d0.  v0:= v0 - v5 @kind long;
  #L1da0d2.  goto L1da0b2;
  #L1da0d4.  if v4 == 0 then goto L1da144;
  #L1da0d8.  v9:= lcmp(v0, v13);
  #L1da0dc.  if v9 >= 0 then goto L1da144;
  #L1da0e0.  v9:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1da0e4.  v5:= v4.`okio.Segment.limit` @type ^`int`;
  #L1da0e8.  v5:= (`long`) v5 @kind i2l;
  #L1da0ea.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da0ee.  v7:= (`long`) v7 @kind i2l;
  #L1da0f0.  v7:= v7 + v13 @kind long;
  #L1da0f2.  v7:= v7 - v0 @kind long;
  #L1da0f4.  call temp:= `min`(v5, v7) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1da0fa.  v5:= temp @kind wide;
  #L1da0fc.  v6:= (`int`) v5 @kind l2i;
  #L1da0fe.  v5:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da102.  v7:= (`long`) v5 @kind i2l;
  #L1da104.  v7:= v7 + v11 @kind long;
  #L1da106.  v7:= v7 - v0 @kind long;
  #L1da108.  v11:= (`int`) v7 @kind l2i;
  #L1da10a.  if v11 >= v6 then goto L1da128;
  #L1da10e.  v12:= v9[v11] @kind byte;
  #L1da112.  if v12 != v10 then goto L1da122;
  #L1da116.  v9:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da11a.  v11:= v11 - v9 @kind int;
  #L1da11c.  v9:= (`long`) v11 @kind i2l;
  #L1da11e.  v9:= v9 + v0 @kind long;
  #L1da120.  return v9 @kind wide;
  #L1da122.  v11:= v11 + 1;
  #L1da126.  goto L1da10a;
  #L1da128.  v9:= v4.`okio.Segment.limit` @type ^`int`;
  #L1da12c.  v11:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da130.  v9:= v9 - v11 @kind int;
  #L1da132.  v11:= (`long`) v9 @kind i2l;
  #L1da134.  v0:= v0 + v11 @kind long;
  #L1da136.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1da13a.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1da140.  v11:= v0 @kind wide;
  #L1da142.  goto L1da0d8;
  #L1da144.  return v2 @kind wide;
  #L1da146.  v9:= v4.`okio.Segment.limit` @type ^`int`;
  #L1da14a.  v5:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da14e.  v9:= v9 - v5 @kind int;
  #L1da150.  v5:= (`long`) v9 @kind i2l;
  #L1da152.  v5:= v5 + v0 @kind long;
  #L1da154.  v9:= lcmp(v5, v11);
  #L1da158.  if v9 <= 0 then goto L1da1c4;
  #L1da15c.  if v4 == 0 then goto L1da1c2;
  #L1da160.  v9:= lcmp(v0, v13);
  #L1da164.  if v9 >= 0 then goto L1da1c2;
  #L1da168.  v9:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1da16c.  v5:= v4.`okio.Segment.limit` @type ^`int`;
  #L1da170.  v5:= (`long`) v5 @kind i2l;
  #L1da172.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da176.  v7:= (`long`) v7 @kind i2l;
  #L1da178.  v7:= v7 + v13 @kind long;
  #L1da17a.  v7:= v7 - v0 @kind long;
  #L1da17c.  call temp:= `min`(v5, v7) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1da182.  v5:= temp @kind wide;
  #L1da184.  v6:= (`int`) v5 @kind l2i;
  #L1da186.  v5:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da18a.  v7:= (`long`) v5 @kind i2l;
  #L1da18c.  v7:= v7 + v11 @kind long;
  #L1da18e.  v7:= v7 - v0 @kind long;
  #L1da190.  v11:= (`int`) v7 @kind l2i;
  #L1da192.  if v11 >= v6 then goto L1da1a6;
  #L1da196.  v12:= v9[v11] @kind byte;
  #L1da19a.  if v12 != v10 then goto L1da1a0;
  #L1da19e.  goto L1da116;
  #L1da1a0.  v11:= v11 + 1;
  #L1da1a4.  goto L1da192;
  #L1da1a6.  v9:= v4.`okio.Segment.limit` @type ^`int`;
  #L1da1aa.  v11:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da1ae.  v9:= v9 - v11 @kind int;
  #L1da1b0.  v11:= (`long`) v9 @kind i2l;
  #L1da1b2.  v0:= v0 + v11 @kind long;
  #L1da1b4.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1da1b8.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1da1be.  v11:= v0 @kind wide;
  #L1da1c0.  goto L1da160;
  #L1da1c2.  return v2 @kind wide;
  #L1da1c4.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1da1c8.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1da1ce.  v0:= v5 @kind wide;
  #L1da1d0.  goto L1da146;
  #L1da1d2.  return v2 @kind wide;
  #L1da1d4.  v10:= new `java.lang.StringBuilder`;
  #L1da1d8.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1da1de.  v0:= "size=" @kind object;
  #L1da1e2.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da1e8.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da1ee.  v0:= temp @kind wide;
  #L1da1f0.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da1f6.  v9:= " fromIndex=" @kind object;
  #L1da1fa.  call temp:= `append`(v10, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da200.  call temp:= `append`(v10, v11) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da206.  v9:= " toIndex=" @kind object;
  #L1da20a.  call temp:= `append`(v10, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da210.  call temp:= `append`(v10, v13) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da216.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1da21c.  v9:= temp @kind object;
  #L1da21e.  v10:= new `java.lang.IllegalArgumentException`;
  #L1da222.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1da228.  v9:= temp @kind object;
  #L1da22a.  call `<init>`(v10, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1da230.  throw v10;
}
procedure `long` `commonIndexOf`(`okio.Buffer` v17 @kind object, `okio.ByteString` v18 @kind object, `long` v19 ) @signature `Lokio/internal/BufferKt;.commonIndexOf:(Lokio/Buffer;Lokio/ByteString;J)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L1da244.  v0:= v17 @kind object;
  #L1da248.  v1:= v19 @kind wide;
  #L1da24c.  v3:= "$this$commonIndexOf" @kind object;
  #L1da250.  call `checkNotNullParameter`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1da256.  v3:= "bytes" @kind object;
  #L1da25a.  v4:= v18 @kind object;
  #L1da25e.  call `checkNotNullParameter`(v4, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1da264.  call temp:= `size`(v18) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1da26a.  v3:= temp;
  #L1da26c.  v5:= 0I;
  #L1da26e.  v6:= 1I;
  #L1da270.  if v3 <= 0 then goto L1da278;
  #L1da274.  v3:= 1I;
  #L1da276.  goto L1da27a;
  #L1da278.  v3:= 0I;
  #L1da27a.  if v3 == 0 then goto L1da4a8;
  #L1da27e.  v7:= 0L;
  #L1da282.  v3:= lcmp(v1, v7);
  #L1da286.  if v3 < 0 then goto L1da28e;
  #L1da28a.  v3:= 1I;
  #L1da28c.  goto L1da290;
  #L1da28e.  v3:= 0I;
  #L1da290.  if v3 == 0 then goto L1da472;
  #L1da294.  v3:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1da298.  if v3 == 0 then goto L1da46c;
  #L1da29c.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da2a2.  v11:= temp @kind wide;
  #L1da2a4.  v11:= v11 - v1 @kind long;
  #L1da2a6.  v13:= 1L;
  #L1da2aa.  v15:= lcmp(v11, v1);
  #L1da2ae.  if v15 >= 0 then goto L1da38a;
  #L1da2b2.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da2b8.  v7:= temp @kind wide;
  #L1da2ba.  v11:= lcmp(v7, v1);
  #L1da2be.  if v11 <= 0 then goto L1da2dc;
  #L1da2c2.  v3:= v3.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1da2c6.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1da2cc.  v11:= v3.`okio.Segment.limit` @type ^`int`;
  #L1da2d0.  v12:= v3.`okio.Segment.pos` @type ^`int`;
  #L1da2d4.  v11:= v11 - v12 @kind int;
  #L1da2d6.  v11:= (`long`) v11 @kind i2l;
  #L1da2d8.  v7:= v7 - v11 @kind long;
  #L1da2da.  goto L1da2ba;
  #L1da2dc.  if v3 == 0 then goto L1da384;
  #L1da2e0.  call temp:= `internalArray$okio`(v18) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L1da2e6.  v11:= temp @kind object;
  #L1da2e8.  v5:= v11[v5] @kind byte;
  #L1da2ec.  call temp:= `size`(v18) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1da2f2.  v4:= temp;
  #L1da2f4.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da2fa.  v15:= temp @kind wide;
  #L1da2fc.  v9:= (`long`) v4 @kind i2l;
  #L1da2fe.  v15:= v15 - v9 @kind long;
  #L1da300.  v15:= v15 + v13 @kind long;
  #L1da302.  v0:= lcmp(v7, v15);
  #L1da306.  if v0 >= 0 then goto L1da37e;
  #L1da30a.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1da30e.  v9:= v3.`okio.Segment.limit` @type ^`int`;
  #L1da312.  v10:= v3.`okio.Segment.pos` @type ^`int`;
  #L1da316.  v12:= (`long`) v10 @kind i2l;
  #L1da318.  v12:= v12 + v15 @kind long;
  #L1da31a.  v12:= v12 - v7 @kind long;
  #L1da31c.  v9:= (`long`) v9 @kind i2l;
  #L1da31e.  call temp:= `min`(v9, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1da324.  v9:= temp @kind wide;
  #L1da326.  v10:= (`int`) v9 @kind l2i;
  #L1da328.  v9:= v3.`okio.Segment.pos` @type ^`int`;
  #L1da32c.  v12:= (`long`) v9 @kind i2l;
  #L1da32e.  v12:= v12 + v1 @kind long;
  #L1da330.  v12:= v12 - v7 @kind long;
  #L1da332.  v1:= (`int`) v12 @kind l2i;
  #L1da334.  if v1 >= v10 then goto L1da362;
  #L1da338.  v2:= v0[v1] @kind byte;
  #L1da33c.  if v2 != v5 then goto L1da35c;
  #L1da340.  v2:= v1 + 1;
  #L1da344.  call temp:= `rangeEquals`(v3, v2, v11, v6, v4) @signature `Lokio/internal/BufferKt;.rangeEquals:(Lokio/Segment;I[BII)Z` @kind static;
  #L1da34a.  v2:= temp;
  #L1da34c.  if v2 == 0 then goto L1da35c;
  #L1da350.  v0:= v3.`okio.Segment.pos` @type ^`int`;
  #L1da354.  v1:= v1 - v0 @kind int;
  #L1da356.  v0:= (`long`) v1 @kind i2l;
  #L1da358.  v0:= v0 + v7 @kind long;
  #L1da35a.  return v0 @kind wide;
  #L1da35c.  v1:= v1 + 1;
  #L1da360.  goto L1da334;
  #L1da362.  v0:= v3.`okio.Segment.limit` @type ^`int`;
  #L1da366.  v1:= v3.`okio.Segment.pos` @type ^`int`;
  #L1da36a.  v0:= v0 - v1 @kind int;
  #L1da36c.  v0:= (`long`) v0 @kind i2l;
  #L1da36e.  v7:= v7 + v0 @kind long;
  #L1da370.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1da374.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1da37a.  v1:= v7 @kind wide;
  #L1da37c.  goto L1da302;
  #L1da37e.  v0:= -1L;
  #L1da382.  return v0 @kind wide;
  #L1da384.  v0:= -1L;
  #L1da388.  return v0 @kind wide;
  #L1da38a.  v9:= v3.`okio.Segment.limit` @type ^`int`;
  #L1da38e.  v10:= v3.`okio.Segment.pos` @type ^`int`;
  #L1da392.  v9:= v9 - v10 @kind int;
  #L1da394.  v9:= (`long`) v9 @kind i2l;
  #L1da396.  v9:= v9 + v7 @kind long;
  #L1da398.  v11:= lcmp(v9, v1);
  #L1da39c.  if v11 <= 0 then goto L1da456;
  #L1da3a0.  if v3 == 0 then goto L1da450;
  #L1da3a4.  call temp:= `internalArray$okio`(v18) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L1da3aa.  v9:= temp @kind object;
  #L1da3ac.  v5:= v9[v5] @kind byte;
  #L1da3b0.  call temp:= `size`(v18) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1da3b6.  v4:= temp;
  #L1da3b8.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da3be.  v10:= temp @kind wide;
  #L1da3c0.  v15:= v7 @kind wide;
  #L1da3c2.  v6:= (`long`) v4 @kind i2l;
  #L1da3c4.  v10:= v10 - v6 @kind long;
  #L1da3c6.  v10:= v10 + v13 @kind long;
  #L1da3c8.  v7:= v15 @kind wide;
  #L1da3ca.  v0:= lcmp(v7, v10);
  #L1da3ce.  if v0 >= 0 then goto L1da44a;
  #L1da3d2.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1da3d6.  v6:= v3.`okio.Segment.limit` @type ^`int`;
  #L1da3da.  v13:= v3.`okio.Segment.pos` @type ^`int`;
  #L1da3de.  v13:= (`long`) v13 @kind i2l;
  #L1da3e0.  v13:= v13 + v10 @kind long;
  #L1da3e2.  v13:= v13 - v7 @kind long;
  #L1da3e4.  v17:= v10 @kind wide;
  #L1da3e8.  v10:= (`long`) v6 @kind i2l;
  #L1da3ea.  call temp:= `min`(v10, v13) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1da3f0.  v10:= temp @kind wide;
  #L1da3f2.  v6:= (`int`) v10 @kind l2i;
  #L1da3f4.  v10:= v3.`okio.Segment.pos` @type ^`int`;
  #L1da3f8.  v10:= (`long`) v10 @kind i2l;
  #L1da3fa.  v10:= v10 + v1 @kind long;
  #L1da3fc.  v10:= v10 - v7 @kind long;
  #L1da3fe.  v1:= (`int`) v10 @kind l2i;
  #L1da400.  if v1 >= v6 then goto L1da428;
  #L1da404.  v2:= v0[v1] @kind byte;
  #L1da408.  if v2 != v5 then goto L1da420;
  #L1da40c.  v2:= v1 + 1;
  #L1da410.  v11:= 1I;
  #L1da412.  call temp:= `rangeEquals`(v3, v2, v9, v11, v4) @signature `Lokio/internal/BufferKt;.rangeEquals:(Lokio/Segment;I[BII)Z` @kind static;
  #L1da418.  v2:= temp;
  #L1da41a.  if v2 == 0 then goto L1da422;
  #L1da41e.  goto L1da350;
  #L1da420.  v11:= 1I;
  #L1da422.  v1:= v1 + 1;
  #L1da426.  goto L1da400;
  #L1da428.  v11:= 1I;
  #L1da42a.  v0:= v3.`okio.Segment.limit` @type ^`int`;
  #L1da42e.  v1:= v3.`okio.Segment.pos` @type ^`int`;
  #L1da432.  v0:= v0 - v1 @kind int;
  #L1da434.  v0:= (`long`) v0 @kind i2l;
  #L1da436.  v7:= v7 + v0 @kind long;
  #L1da438.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1da43c.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1da442.  v10:= v17 @kind wide;
  #L1da446.  v1:= v7 @kind wide;
  #L1da448.  goto L1da3ca;
  #L1da44a.  v6:= -1L;
  #L1da44e.  return v6 @kind wide;
  #L1da450.  v6:= -1L;
  #L1da454.  return v6 @kind wide;
  #L1da456.  v6:= -1L;
  #L1da45a.  v11:= 1I;
  #L1da45c.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1da460.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1da466.  v7:= v9 @kind wide;
  #L1da468.  v6:= 1I;
  #L1da46a.  goto L1da38a;
  #L1da46c.  v6:= -1L;
  #L1da470.  return v6 @kind wide;
  #L1da472.  v0:= new `java.lang.StringBuilder`;
  #L1da476.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1da47c.  v3:= "fromIndex < 0: " @kind object;
  #L1da480.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da486.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da48c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1da492.  v0:= temp @kind object;
  #L1da494.  v1:= new `java.lang.IllegalArgumentException`;
  #L1da498.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1da49e.  v0:= temp @kind object;
  #L1da4a0.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1da4a6.  throw v1;
  #L1da4a8.  v0:= new `java.lang.IllegalArgumentException`;
  #L1da4ac.  v1:= "bytes is empty" @kind object;
  #L1da4b0.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1da4b6.  v1:= temp @kind object;
  #L1da4b8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1da4be.  throw v0;
}
procedure `long` `commonIndexOfElement`(`okio.Buffer` v11 @kind object, `okio.ByteString` v12 @kind object, `long` v13 ) @signature `Lokio/internal/BufferKt;.commonIndexOfElement:(Lokio/Buffer;Lokio/ByteString;J)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1da4d0.  v0:= "$this$commonIndexOfElement" @kind object;
  #L1da4d4.  call `checkNotNullParameter`(v11, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1da4da.  v0:= "targetBytes" @kind object;
  #L1da4de.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1da4e4.  v0:= 0L;
  #L1da4e8.  v2:= 0I;
  #L1da4ea.  v3:= 1I;
  #L1da4ec.  v4:= lcmp(v13, v0);
  #L1da4f0.  if v4 < 0 then goto L1da4f8;
  #L1da4f4.  v4:= 1I;
  #L1da4f6.  goto L1da4fa;
  #L1da4f8.  v4:= 0I;
  #L1da4fa.  if v4 == 0 then goto L1da754;
  #L1da4fe.  v4:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1da502.  v5:= -1L;
  #L1da506.  if v4 == 0 then goto L1da752;
  #L1da50a.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da510.  v7:= temp @kind wide;
  #L1da512.  v7:= v7 - v13 @kind long;
  #L1da514.  v9:= 2I;
  #L1da516.  v10:= lcmp(v7, v13);
  #L1da51a.  if v10 >= 0 then goto L1da640;
  #L1da51e.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da524.  v0:= temp @kind wide;
  #L1da526.  v7:= lcmp(v0, v13);
  #L1da52a.  if v7 <= 0 then goto L1da548;
  #L1da52e.  v4:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1da532.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1da538.  v7:= v4.`okio.Segment.limit` @type ^`int`;
  #L1da53c.  v8:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da540.  v7:= v7 - v8 @kind int;
  #L1da542.  v7:= (`long`) v7 @kind i2l;
  #L1da544.  v0:= v0 - v7 @kind long;
  #L1da546.  goto L1da526;
  #L1da548.  if v4 == 0 then goto L1da63e;
  #L1da54c.  call temp:= `size`(v12) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1da552.  v7:= temp;
  #L1da554.  if v7 != v9 then goto L1da5cc;
  #L1da558.  call temp:= `getByte`(v12, v2) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L1da55e.  v2:= temp;
  #L1da560.  call temp:= `getByte`(v12, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L1da566.  v12:= temp;
  #L1da568.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da56e.  v7:= temp @kind wide;
  #L1da570.  v3:= lcmp(v0, v7);
  #L1da574.  if v3 >= 0 then goto L1da63e;
  #L1da578.  v3:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1da57c.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da580.  v7:= (`long`) v7 @kind i2l;
  #L1da582.  v7:= v7 + v13 @kind long;
  #L1da584.  v7:= v7 - v0 @kind long;
  #L1da586.  v13:= (`int`) v7 @kind l2i;
  #L1da588.  v14:= v4.`okio.Segment.limit` @type ^`int`;
  #L1da58c.  if v13 >= v14 then goto L1da5b0;
  #L1da590.  v7:= v3[v13] @kind byte;
  #L1da594.  if v7 == v2 then goto L1da5a4;
  #L1da598.  if v7 != v12 then goto L1da59e;
  #L1da59c.  goto L1da5a4;
  #L1da59e.  v13:= v13 + 1;
  #L1da5a2.  goto L1da58c;
  #L1da5a4.  v11:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da5a8.  v13:= v13 - v11 @kind int;
  #L1da5aa.  v11:= (`long`) v13 @kind i2l;
  #L1da5ac.  v11:= v11 + v0 @kind long;
  #L1da5ae.  return v11 @kind wide;
  #L1da5b0.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L1da5b4.  v14:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da5b8.  v13:= v13 - v14 @kind int;
  #L1da5ba.  v13:= (`long`) v13 @kind i2l;
  #L1da5bc.  v0:= v0 + v13 @kind long;
  #L1da5be.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1da5c2.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1da5c8.  v13:= v0 @kind wide;
  #L1da5ca.  goto L1da568;
  #L1da5cc.  call temp:= `internalArray$okio`(v12) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L1da5d2.  v12:= temp @kind object;
  #L1da5d4.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da5da.  v7:= temp @kind wide;
  #L1da5dc.  v3:= lcmp(v0, v7);
  #L1da5e0.  if v3 >= 0 then goto L1da63e;
  #L1da5e4.  v3:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1da5e8.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da5ec.  v7:= (`long`) v7 @kind i2l;
  #L1da5ee.  v7:= v7 + v13 @kind long;
  #L1da5f0.  v7:= v7 - v0 @kind long;
  #L1da5f2.  v13:= (`int`) v7 @kind l2i;
  #L1da5f4.  v14:= v4.`okio.Segment.limit` @type ^`int`;
  #L1da5f8.  if v13 >= v14 then goto L1da622;
  #L1da5fc.  v7:= v3[v13] @kind byte;
  #L1da600.  v8:= length @variable v12;
  #L1da602.  v9:= 0I;
  #L1da604.  if v9 >= v8 then goto L1da61c;
  #L1da608.  v10:= v12[v9] @kind byte;
  #L1da60c.  if v7 != v10 then goto L1da616;
  #L1da610.  v11:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da614.  goto L1da5a8;
  #L1da616.  v9:= v9 + 1;
  #L1da61a.  goto L1da604;
  #L1da61c.  v13:= v13 + 1;
  #L1da620.  goto L1da5f8;
  #L1da622.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L1da626.  v14:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da62a.  v13:= v13 - v14 @kind int;
  #L1da62c.  v13:= (`long`) v13 @kind i2l;
  #L1da62e.  v0:= v0 + v13 @kind long;
  #L1da630.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1da634.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1da63a.  v13:= v0 @kind wide;
  #L1da63c.  goto L1da5d4;
  #L1da63e.  return v5 @kind wide;
  #L1da640.  v7:= v4.`okio.Segment.limit` @type ^`int`;
  #L1da644.  v8:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da648.  v7:= v7 - v8 @kind int;
  #L1da64a.  v7:= (`long`) v7 @kind i2l;
  #L1da64c.  v7:= v7 + v0 @kind long;
  #L1da64e.  v10:= lcmp(v7, v13);
  #L1da652.  if v10 <= 0 then goto L1da742;
  #L1da656.  if v4 == 0 then goto L1da740;
  #L1da65a.  call temp:= `size`(v12) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1da660.  v7:= temp;
  #L1da662.  if v7 != v9 then goto L1da6d0;
  #L1da666.  call temp:= `getByte`(v12, v2) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L1da66c.  v2:= temp;
  #L1da66e.  call temp:= `getByte`(v12, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L1da674.  v12:= temp;
  #L1da676.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da67c.  v7:= temp @kind wide;
  #L1da67e.  v3:= lcmp(v0, v7);
  #L1da682.  if v3 >= 0 then goto L1da740;
  #L1da686.  v3:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1da68a.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da68e.  v7:= (`long`) v7 @kind i2l;
  #L1da690.  v7:= v7 + v13 @kind long;
  #L1da692.  v7:= v7 - v0 @kind long;
  #L1da694.  v13:= (`int`) v7 @kind l2i;
  #L1da696.  v14:= v4.`okio.Segment.limit` @type ^`int`;
  #L1da69a.  if v13 >= v14 then goto L1da6b4;
  #L1da69e.  v7:= v3[v13] @kind byte;
  #L1da6a2.  if v7 == v2 then goto L1da5a4;
  #L1da6a6.  if v7 != v12 then goto L1da6ae;
  #L1da6aa.  goto L1da5a4;
  #L1da6ae.  v13:= v13 + 1;
  #L1da6b2.  goto L1da69a;
  #L1da6b4.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L1da6b8.  v14:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da6bc.  v13:= v13 - v14 @kind int;
  #L1da6be.  v13:= (`long`) v13 @kind i2l;
  #L1da6c0.  v0:= v0 + v13 @kind long;
  #L1da6c2.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1da6c6.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1da6cc.  v13:= v0 @kind wide;
  #L1da6ce.  goto L1da676;
  #L1da6d0.  call temp:= `internalArray$okio`(v12) @signature `Lokio/ByteString;.internalArray$okio:()[B` @kind virtual;
  #L1da6d6.  v12:= temp @kind object;
  #L1da6d8.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da6de.  v7:= temp @kind wide;
  #L1da6e0.  v3:= lcmp(v0, v7);
  #L1da6e4.  if v3 >= 0 then goto L1da740;
  #L1da6e8.  v3:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1da6ec.  v7:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da6f0.  v7:= (`long`) v7 @kind i2l;
  #L1da6f2.  v7:= v7 + v13 @kind long;
  #L1da6f4.  v7:= v7 - v0 @kind long;
  #L1da6f6.  v13:= (`int`) v7 @kind l2i;
  #L1da6f8.  v14:= v4.`okio.Segment.limit` @type ^`int`;
  #L1da6fc.  if v13 >= v14 then goto L1da724;
  #L1da700.  v7:= v3[v13] @kind byte;
  #L1da704.  v8:= length @variable v12;
  #L1da706.  v9:= 0I;
  #L1da708.  if v9 >= v8 then goto L1da71e;
  #L1da70c.  v10:= v12[v9] @kind byte;
  #L1da710.  if v7 != v10 then goto L1da718;
  #L1da714.  goto L1da610;
  #L1da718.  v9:= v9 + 1;
  #L1da71c.  goto L1da708;
  #L1da71e.  v13:= v13 + 1;
  #L1da722.  goto L1da6fc;
  #L1da724.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L1da728.  v14:= v4.`okio.Segment.pos` @type ^`int`;
  #L1da72c.  v13:= v13 - v14 @kind int;
  #L1da72e.  v13:= (`long`) v13 @kind i2l;
  #L1da730.  v0:= v0 + v13 @kind long;
  #L1da732.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1da736.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1da73c.  v13:= v0 @kind wide;
  #L1da73e.  goto L1da6d8;
  #L1da740.  return v5 @kind wide;
  #L1da742.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1da746.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1da74c.  v0:= v7 @kind wide;
  #L1da74e.  goto L1da640;
  #L1da752.  return v5 @kind wide;
  #L1da754.  v11:= new `java.lang.StringBuilder`;
  #L1da758.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1da75e.  v12:= "fromIndex < 0: " @kind object;
  #L1da762.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da768.  call temp:= `append`(v11, v13) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da76e.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1da774.  v11:= temp @kind object;
  #L1da776.  v12:= new `java.lang.IllegalArgumentException`;
  #L1da77a.  call temp:= `toString`(v11) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1da780.  v11:= temp @kind object;
  #L1da782.  call `<init>`(v12, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1da788.  throw v12;
}
procedure `int` `commonNext`(`okio.Buffer$UnsafeCursor` v5 @kind object) @signature `Lokio/internal/BufferKt;.commonNext:(Lokio/Buffer$UnsafeCursor;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d9260.  v0:= "$this$commonNext" @kind object;
  #L1d9264.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d926a.  v0:= v5.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1d926e.  v2:= v5.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1d9272.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d9278.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d927e.  v2:= temp @kind wide;
  #L1d9280.  v4:= lcmp(v0, v2);
  #L1d9284.  if v4 == 0 then goto L1d928c;
  #L1d9288.  v0:= 1I;
  #L1d928a.  goto L1d928e;
  #L1d928c.  v0:= 0I;
  #L1d928e.  if v0 == 0 then goto L1d92c0;
  #L1d9292.  v0:= v5.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1d9296.  v2:= -1L;
  #L1d929a.  v4:= lcmp(v0, v2);
  #L1d929e.  if v4 != 0 then goto L1d92a8;
  #L1d92a2.  v0:= 0L;
  #L1d92a6.  goto L1d92b6;
  #L1d92a8.  v2:= v5.`okio.Buffer$UnsafeCursor.end` @type ^`int`;
  #L1d92ac.  v3:= v5.`okio.Buffer$UnsafeCursor.start` @type ^`int`;
  #L1d92b0.  v2:= v2 - v3 @kind int;
  #L1d92b2.  v2:= (`long`) v2 @kind i2l;
  #L1d92b4.  v0:= v0 + v2 @kind long;
  #L1d92b6.  call temp:= `seek`(v5, v0) @signature `Lokio/Buffer$UnsafeCursor;.seek:(J)I` @kind virtual;
  #L1d92bc.  v5:= temp;
  #L1d92be.  return v5;
  #L1d92c0.  v5:= new `java.lang.IllegalStateException`;
  #L1d92c4.  v0:= "no more bytes" @kind object;
  #L1d92c8.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d92ce.  v0:= temp @kind object;
  #L1d92d0.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d92d6.  throw v5;
}
procedure `boolean` `commonRangeEquals`(`okio.Buffer` v6 @kind object, `long` v7 , `okio.ByteString` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lokio/internal/BufferKt;.commonRangeEquals:(Lokio/Buffer;JLokio/ByteString;II)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1d8ea0.  v0:= "$this$commonRangeEquals" @kind object;
  #L1d8ea4.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8eaa.  v0:= "bytes" @kind object;
  #L1d8eae.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8eb4.  v0:= 0I;
  #L1d8eb6.  v1:= 0L;
  #L1d8eba.  v3:= lcmp(v7, v1);
  #L1d8ebe.  if v3 < 0 then goto L1d8f1c;
  #L1d8ec2.  if v10 < 0 then goto L1d8f1c;
  #L1d8ec6.  if v11 < 0 then goto L1d8f1c;
  #L1d8eca.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d8ed0.  v1:= temp @kind wide;
  #L1d8ed2.  v1:= v1 - v7 @kind long;
  #L1d8ed4.  v3:= (`long`) v11 @kind i2l;
  #L1d8ed6.  v5:= lcmp(v1, v3);
  #L1d8eda.  if v5 < 0 then goto L1d8f1c;
  #L1d8ede.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1d8ee4.  v1:= temp;
  #L1d8ee6.  v1:= v1 - v10 @kind int;
  #L1d8ee8.  if v1 >= v11 then goto L1d8eee;
  #L1d8eec.  goto L1d8f1c;
  #L1d8eee.  v1:= 0I;
  #L1d8ef0.  if v1 >= v11 then goto L1d8f18;
  #L1d8ef4.  v2:= (`long`) v1 @kind i2l;
  #L1d8ef6.  v2:= v2 + v7 @kind long;
  #L1d8ef8.  call temp:= `getByte`(v6, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L1d8efe.  v2:= temp;
  #L1d8f00.  v3:= v10 + v1 @kind int;
  #L1d8f04.  call temp:= `getByte`(v9, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L1d8f0a.  v3:= temp;
  #L1d8f0c.  if v2 == v3 then goto L1d8f12;
  #L1d8f10.  return v0;
  #L1d8f12.  v1:= v1 + 1;
  #L1d8f16.  goto L1d8ef0;
  #L1d8f18.  v6:= 1I;
  #L1d8f1a.  return v6;
  #L1d8f1c.  return v0;
}
procedure `int` `commonRead`(`okio.Buffer` v2 @kind object, `byte`[] v3 @kind object) @signature `Lokio/internal/BufferKt;.commonRead:(Lokio/Buffer;[B)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1d92e8.  v0:= "$this$commonRead" @kind object;
  #L1d92ec.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d92f2.  v0:= "sink" @kind object;
  #L1d92f6.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d92fc.  v0:= length @variable v3;
  #L1d92fe.  v1:= 0I;
  #L1d9300.  call temp:= `read`(v2, v3, v1, v0) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L1d9306.  v2:= temp;
  #L1d9308.  return v2;
}
procedure `int` `commonRead`(`okio.Buffer` v7 @kind object, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/internal/BufferKt;.commonRead:(Lokio/Buffer;[BII)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1d931c.  v0:= "$this$commonRead" @kind object;
  #L1d9320.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9326.  v0:= "sink" @kind object;
  #L1d932a.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9330.  v0:= length @variable v8;
  #L1d9332.  v1:= (`long`) v0 @kind i2l;
  #L1d9334.  v3:= (`long`) v9 @kind i2l;
  #L1d9336.  v5:= (`long`) v10 @kind i2l;
  #L1d9338.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1d933e.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d9342.  if v0 == 0 then goto L1d93a6;
  #L1d9346.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d934a.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d934e.  v1:= v1 - v2 @kind int;
  #L1d9350.  call temp:= `min`(v10, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1d9356.  v10:= temp;
  #L1d9358.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d935c.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d9360.  v3:= v2 + v10 @kind int;
  #L1d9364.  call temp:= `copyInto`(v1, v8, v9, v2, v3) @signature `Lkotlin/collections/ArraysKt;.copyInto:([B[BIII)[B` @kind static;
  #L1d936a.  v8:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d936e.  v8:= v8 + v10 @kind int;
  #L1d9370.  v0.`okio.Segment.pos` @type ^`int` := v8;
  #L1d9374.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d937a.  v8:= temp @kind wide;
  #L1d937c.  v1:= (`long`) v10 @kind i2l;
  #L1d937e.  v8:= v8 - v1 @kind long;
  #L1d9380.  call `setSize$okio`(v7, v8) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1d9386.  v8:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d938a.  v9:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d938e.  if v8 != v9 then goto L1d93a4;
  #L1d9392.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1d9398.  v8:= temp @kind object;
  #L1d939a.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L1d939e.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1d93a4.  return v10;
  #L1d93a6.  v7:= -1I;
  #L1d93a8.  return v7;
}
procedure `long` `commonRead`(`okio.Buffer` v5 @kind object, `okio.Buffer` v6 @kind object, `long` v7 ) @signature `Lokio/internal/BufferKt;.commonRead:(Lokio/Buffer;Lokio/Buffer;J)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1da79c.  v0:= "$this$commonRead" @kind object;
  #L1da7a0.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1da7a6.  v0:= "sink" @kind object;
  #L1da7aa.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1da7b0.  v0:= 0L;
  #L1da7b4.  v2:= lcmp(v7, v0);
  #L1da7b8.  if v2 < 0 then goto L1da7c0;
  #L1da7bc.  v2:= 1I;
  #L1da7be.  goto L1da7c2;
  #L1da7c0.  v2:= 0I;
  #L1da7c2.  if v2 == 0 then goto L1da7fc;
  #L1da7c6.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da7cc.  v2:= temp @kind wide;
  #L1da7ce.  v4:= lcmp(v2, v0);
  #L1da7d2.  if v4 != 0 then goto L1da7dc;
  #L1da7d6.  v5:= -1L;
  #L1da7da.  return v5 @kind wide;
  #L1da7dc.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da7e2.  v0:= temp @kind wide;
  #L1da7e4.  v2:= lcmp(v7, v0);
  #L1da7e8.  if v2 <= 0 then goto L1da7f4;
  #L1da7ec.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da7f2.  v7:= temp @kind wide;
  #L1da7f4.  call `write`(v6, v5, v7) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L1da7fa.  return v7 @kind wide;
  #L1da7fc.  v5:= new `java.lang.StringBuilder`;
  #L1da800.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1da806.  v6:= "byteCount < 0: " @kind object;
  #L1da80a.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da810.  call temp:= `append`(v5, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da816.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1da81c.  v5:= temp @kind object;
  #L1da81e.  v6:= new `java.lang.IllegalArgumentException`;
  #L1da822.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1da828.  v5:= temp @kind object;
  #L1da82a.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1da830.  throw v6;
}
procedure `long` `commonReadAll`(`okio.Buffer` v5 @kind object, `okio.Sink` v6 @kind object) @signature `Lokio/internal/BufferKt;.commonReadAll:(Lokio/Buffer;Lokio/Sink;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1da844.  v0:= "$this$commonReadAll" @kind object;
  #L1da848.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1da84e.  v0:= "sink" @kind object;
  #L1da852.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1da858.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da85e.  v0:= temp @kind wide;
  #L1da860.  v2:= 0L;
  #L1da864.  v4:= lcmp(v0, v2);
  #L1da868.  if v4 <= 0 then goto L1da872;
  #L1da86c.  call `write`(v6, v5, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L1da872.  return v0 @kind wide;
}
procedure `okio.Buffer$UnsafeCursor` `commonReadAndWriteUnsafe`(`okio.Buffer` v2 @kind object, `okio.Buffer$UnsafeCursor` v3 @kind object) @signature `Lokio/internal/BufferKt;.commonReadAndWriteUnsafe:(Lokio/Buffer;Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1dbcd8.  v0:= "$this$commonReadAndWriteUnsafe" @kind object;
  #L1dbcdc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dbce2.  v0:= "unsafeCursor" @kind object;
  #L1dbce6.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dbcec.  v0:= v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1dbcf0.  v1:= 1I;
  #L1dbcf2.  if v0 != 0 then goto L1dbcfa;
  #L1dbcf6.  v0:= 1I;
  #L1dbcf8.  goto L1dbcfc;
  #L1dbcfa.  v0:= 0I;
  #L1dbcfc.  if v0 == 0 then goto L1dbd0a;
  #L1dbd00.  v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v2 @kind object;
  #L1dbd04.  v3.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` := v1 @kind boolean;
  #L1dbd08.  return v3 @kind object;
  #L1dbd0a.  v2:= new `java.lang.IllegalStateException`;
  #L1dbd0e.  v3:= "already attached to a buffer" @kind object;
  #L1dbd12.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dbd18.  v3:= temp @kind object;
  #L1dbd1a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dbd20.  throw v2;
}
procedure `byte` `commonReadByte`(`okio.Buffer` v9 @kind object) @signature `Lokio/internal/BufferKt;.commonReadByte:(Lokio/Buffer;)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1d9094.  v0:= "$this$commonReadByte" @kind object;
  #L1d9098.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d909e.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d90a4.  v0:= temp @kind wide;
  #L1d90a6.  v2:= 0L;
  #L1d90aa.  v4:= lcmp(v0, v2);
  #L1d90ae.  if v4 == 0 then goto L1d9102;
  #L1d90b2.  v0:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d90b6.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d90bc.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d90c0.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d90c4.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d90c8.  v4:= v1 + 1;
  #L1d90cc.  v1:= v3[v1] @kind byte;
  #L1d90d0.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d90d6.  v5:= temp @kind wide;
  #L1d90d8.  v7:= 1L;
  #L1d90dc.  v5:= v5 - v7 @kind long;
  #L1d90de.  call `setSize$okio`(v9, v5) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1d90e4.  if v4 != v2 then goto L1d90fc;
  #L1d90e8.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1d90ee.  v2:= temp @kind object;
  #L1d90f0.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L1d90f4.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1d90fa.  goto L1d9100;
  #L1d90fc.  v0.`okio.Segment.pos` @type ^`int` := v4;
  #L1d9100.  return v1;
  #L1d9102.  v9:= new `java.io.EOFException`;
  #L1d9106.  call `<init>`(v9) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1d910c.  throw v9;
}
procedure `byte`[] `commonReadByteArray`(`okio.Buffer` v2 @kind object) @signature `Lokio/internal/BufferKt;.commonReadByteArray:(Lokio/Buffer;)[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1d9120.  v0:= "$this$commonReadByteArray" @kind object;
  #L1d9124.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d912a.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d9130.  v0:= temp @kind wide;
  #L1d9132.  call temp:= `readByteArray`(v2, v0) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L1d9138.  v2:= temp @kind object;
  #L1d913a.  return v2 @kind object;
}
procedure `byte`[] `commonReadByteArray`(`okio.Buffer` v3 @kind object, `long` v4 ) @signature `Lokio/internal/BufferKt;.commonReadByteArray:(Lokio/Buffer;J)[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1d914c.  v0:= "$this$commonReadByteArray" @kind object;
  #L1d9150.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9156.  v0:= 0L;
  #L1d915a.  v2:= lcmp(v4, v0);
  #L1d915e.  if v2 < 0 then goto L1d9176;
  #L1d9162.  v0:= 2147483647I;
  #L1d9168.  v0:= (`long`) v0 @kind i2l;
  #L1d916a.  v2:= lcmp(v4, v0);
  #L1d916e.  if v2 > 0 then goto L1d9176;
  #L1d9172.  v0:= 1I;
  #L1d9174.  goto L1d9178;
  #L1d9176.  v0:= 0I;
  #L1d9178.  if v0 == 0 then goto L1d91a6;
  #L1d917c.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d9182.  v0:= temp @kind wide;
  #L1d9184.  v2:= lcmp(v0, v4);
  #L1d9188.  if v2 < 0 then goto L1d919a;
  #L1d918c.  v5:= (`int`) v4 @kind l2i;
  #L1d918e.  v4:= new `byte`[v5];
  #L1d9192.  call `readFully`(v3, v4) @signature `Lokio/Buffer;.readFully:([B)V` @kind virtual;
  #L1d9198.  return v4 @kind object;
  #L1d919a.  v3:= new `java.io.EOFException`;
  #L1d919e.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1d91a4.  throw v3;
  #L1d91a6.  v3:= new `java.lang.StringBuilder`;
  #L1d91aa.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d91b0.  v0:= "byteCount: " @kind object;
  #L1d91b4.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d91ba.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d91c0.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d91c6.  v3:= temp @kind object;
  #L1d91c8.  v4:= new `java.lang.IllegalArgumentException`;
  #L1d91cc.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d91d2.  v3:= temp @kind object;
  #L1d91d4.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d91da.  throw v4;
}
procedure `okio.ByteString` `commonReadByteString`(`okio.Buffer` v2 @kind object) @signature `Lokio/internal/BufferKt;.commonReadByteString:(Lokio/Buffer;)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1dbd90.  v0:= "$this$commonReadByteString" @kind object;
  #L1dbd94.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dbd9a.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dbda0.  v0:= temp @kind wide;
  #L1dbda2.  call temp:= `readByteString`(v2, v0) @signature `Lokio/Buffer;.readByteString:(J)Lokio/ByteString;` @kind virtual;
  #L1dbda8.  v2:= temp @kind object;
  #L1dbdaa.  return v2 @kind object;
}
procedure `okio.ByteString` `commonReadByteString`(`okio.Buffer` v3 @kind object, `long` v4 ) @signature `Lokio/internal/BufferKt;.commonReadByteString:(Lokio/Buffer;J)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1dbdbc.  v0:= "$this$commonReadByteString" @kind object;
  #L1dbdc0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dbdc6.  v0:= 0L;
  #L1dbdca.  v2:= lcmp(v4, v0);
  #L1dbdce.  if v2 < 0 then goto L1dbde6;
  #L1dbdd2.  v0:= 2147483647I;
  #L1dbdd8.  v0:= (`long`) v0 @kind i2l;
  #L1dbdda.  v2:= lcmp(v4, v0);
  #L1dbdde.  if v2 > 0 then goto L1dbde6;
  #L1dbde2.  v0:= 1I;
  #L1dbde4.  goto L1dbde8;
  #L1dbde6.  v0:= 0I;
  #L1dbde8.  if v0 == 0 then goto L1dbe3c;
  #L1dbdec.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dbdf2.  v0:= temp @kind wide;
  #L1dbdf4.  v2:= lcmp(v0, v4);
  #L1dbdf8.  if v2 < 0 then goto L1dbe30;
  #L1dbdfc.  v0:= 4096I;
  #L1dbe00.  v0:= (`long`) v0 @kind i2l;
  #L1dbe02.  v2:= lcmp(v4, v0);
  #L1dbe06.  if v2 < 0 then goto L1dbe1c;
  #L1dbe0a.  v0:= (`int`) v4 @kind l2i;
  #L1dbe0c.  call temp:= `snapshot`(v3, v0) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @kind virtual;
  #L1dbe12.  v0:= temp @kind object;
  #L1dbe14.  call `skip`(v3, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1dbe1a.  return v0 @kind object;
  #L1dbe1c.  v0:= new `okio.ByteString`;
  #L1dbe20.  call temp:= `readByteArray`(v3, v4) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L1dbe26.  v3:= temp @kind object;
  #L1dbe28.  call `<init>`(v0, v3) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L1dbe2e.  return v0 @kind object;
  #L1dbe30.  v3:= new `java.io.EOFException`;
  #L1dbe34.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1dbe3a.  throw v3;
  #L1dbe3c.  v3:= new `java.lang.StringBuilder`;
  #L1dbe40.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dbe46.  v0:= "byteCount: " @kind object;
  #L1dbe4a.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbe50.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbe56.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dbe5c.  v3:= temp @kind object;
  #L1dbe5e.  v4:= new `java.lang.IllegalArgumentException`;
  #L1dbe62.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dbe68.  v3:= temp @kind object;
  #L1dbe6a.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dbe70.  throw v4;
}
procedure `long` `commonReadDecimalLong`(`okio.Buffer` v17 @kind object) @signature `Lokio/internal/BufferKt;.commonReadDecimalLong:(Lokio/Buffer;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L1da884.  v0:= v17 @kind object;
  #L1da888.  v1:= "$this$commonReadDecimalLong" @kind object;
  #L1da88c.  call `checkNotNullParameter`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1da892.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1da898.  v1:= temp @kind wide;
  #L1da89a.  v3:= 0L;
  #L1da89e.  v5:= lcmp(v1, v3);
  #L1da8a2.  if v5 == 0 then goto L1daa2e;
  #L1da8a6.  v1:= -7L;
  #L1da8aa.  v5:= 0I;
  #L1da8ac.  v6:= 0I;
  #L1da8ae.  v7:= 0I;
  #L1da8b0.  v8:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1da8b4.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1da8ba.  v9:= v8.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1da8be.  v10:= v8.`okio.Segment.pos` @type ^`int`;
  #L1da8c2.  v11:= v8.`okio.Segment.limit` @type ^`int`;
  #L1da8c6.  v12:= 1I;
  #L1da8c8.  if v10 >= v11 then goto L1da9e0;
  #L1da8cc.  v13:= v9[v10] @kind byte;
  #L1da8d0.  v14:= 48I;
  #L1da8d4.  v14:= (`byte`) v14 @kind i2b;
  #L1da8d6.  if v13 < v14 then goto L1da976;
  #L1da8da.  v15:= 57I;
  #L1da8de.  v15:= (`byte`) v15 @kind i2b;
  #L1da8e0.  if v13 > v15 then goto L1da976;
  #L1da8e4.  v14:= v14 - v13 @kind int;
  #L1da8e6.  v15:= -922337203685477580L;
  #L1da8f0.  v12:= lcmp(v3, v15);
  #L1da8f4.  if v12 < 0 then goto L1da91c;
  #L1da8f8.  v15:= v7;
  #L1da8fa.  v16:= v8 @kind object;
  #L1da8fe.  if v12 != 0 then goto L1da90e;
  #L1da902.  v7:= (`long`) v14 @kind i2l;
  #L1da904.  v12:= lcmp(v7, v1);
  #L1da908.  if v12 >= 0 then goto L1da90e;
  #L1da90c.  goto L1da91c;
  #L1da90e.  v7:= 10L;
  #L1da912.  v3:= v3 * v7 @kind long;
  #L1da916.  v7:= (`long`) v14 @kind i2l;
  #L1da918.  v3:= v3 + v7 @kind long;
  #L1da91a.  goto L1da992;
  #L1da91c.  v0:= new `okio.Buffer`;
  #L1da920.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1da926.  call temp:= `writeDecimalLong`(v0, v3) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L1da92c.  v0:= temp @kind object;
  #L1da92e.  call temp:= `writeByte`(v0, v13) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1da934.  v0:= temp @kind object;
  #L1da936.  if v6 != 0 then goto L1da940;
  #L1da93a.  call temp:= `readByte`(v0) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1da940.  v1:= new `java.lang.NumberFormatException`;
  #L1da944.  v2:= new `java.lang.StringBuilder`;
  #L1da948.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1da94e.  v3:= "Number too large: " @kind object;
  #L1da952.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da958.  call temp:= `readUtf8`(v0) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L1da95e.  v0:= temp @kind object;
  #L1da960.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da966.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1da96c.  v0:= temp @kind object;
  #L1da96e.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1da974.  throw v1;
  #L1da976.  v15:= v7;
  #L1da978.  v16:= v8 @kind object;
  #L1da97c.  v7:= 45I;
  #L1da980.  v7:= (`byte`) v7 @kind i2b;
  #L1da982.  if v13 != v7 then goto L1da9a2;
  #L1da986.  if v5 != 0 then goto L1da9a2;
  #L1da98a.  v6:= 1L;
  #L1da98e.  v1:= v1 - v6 @kind long;
  #L1da990.  v6:= 1I;
  #L1da992.  v10:= v10 + 1;
  #L1da996.  v5:= v5 + 1;
  #L1da99a.  v7:= v15;
  #L1da99c.  v8:= v16 @kind object;
  #L1da9a0.  goto L1da8c6;
  #L1da9a2.  if v5 == 0 then goto L1da9aa;
  #L1da9a6.  v7:= 1I;
  #L1da9a8.  goto L1da9e6;
  #L1da9aa.  v0:= new `java.lang.NumberFormatException`;
  #L1da9ae.  v1:= new `java.lang.StringBuilder`;
  #L1da9b2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1da9b8.  v2:= "Expected leading [0-9] or '-' character but was 0x" @kind object;
  #L1da9bc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da9c2.  call temp:= `toHexString`(v13) @signature `Lokio/-Util;.toHexString:(B)Ljava/lang/String;` @kind static;
  #L1da9c8.  v2:= temp @kind object;
  #L1da9ca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1da9d0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1da9d6.  v1:= temp @kind object;
  #L1da9d8.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1da9de.  throw v0;
  #L1da9e0.  v15:= v7;
  #L1da9e2.  v16:= v8 @kind object;
  #L1da9e6.  if v10 != v11 then goto L1da9fe;
  #L1da9ea.  call temp:= `pop`(v16) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1da9f0.  v8:= temp @kind object;
  #L1da9f2.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L1da9f6.  call `recycle`(v16) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1da9fc.  goto L1daa06;
  #L1da9fe.  v8:= v16 @kind object;
  #L1daa02.  v8.`okio.Segment.pos` @type ^`int` := v10;
  #L1daa06.  if v7 != 0 then goto L1daa12;
  #L1daa0a.  v8:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1daa0e.  if v8 != 0 then goto L1da8b0;
  #L1daa12.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1daa18.  v1:= temp @kind wide;
  #L1daa1a.  v7:= (`long`) v5 @kind i2l;
  #L1daa1c.  v1:= v1 - v7 @kind long;
  #L1daa1e.  call `setSize$okio`(v0, v1) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1daa24.  if v6 == 0 then goto L1daa2a;
  #L1daa28.  goto L1daa2c;
  #L1daa2a.  v3:= -v3 @kind long;
  #L1daa2c.  return v3 @kind wide;
  #L1daa2e.  v0:= new `java.io.EOFException`;
  #L1daa32.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1daa38.  throw v0;
}
procedure `void` `commonReadFully`(`okio.Buffer` v3 @kind object, `okio.Buffer` v4 @kind object, `long` v5 ) @signature `Lokio/internal/BufferKt;.commonReadFully:(Lokio/Buffer;Lokio/Buffer;J)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1dc25c.  v0:= "$this$commonReadFully" @kind object;
  #L1dc260.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dc266.  v0:= "sink" @kind object;
  #L1dc26a.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dc270.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dc276.  v0:= temp @kind wide;
  #L1dc278.  v2:= lcmp(v0, v5);
  #L1dc27c.  if v2 < 0 then goto L1dc288;
  #L1dc280.  call `write`(v4, v3, v5) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L1dc286.  return @kind void;
  #L1dc288.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dc28e.  v5:= temp @kind wide;
  #L1dc290.  call `write`(v4, v3, v5) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L1dc296.  v3:= new `java.io.EOFException`;
  #L1dc29a.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1dc2a0.  throw v3;
}
procedure `void` `commonReadFully`(`okio.Buffer` v3 @kind object, `byte`[] v4 @kind object) @signature `Lokio/internal/BufferKt;.commonReadFully:(Lokio/Buffer;[B)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1dc20c.  v0:= "$this$commonReadFully" @kind object;
  #L1dc210.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dc216.  v0:= "sink" @kind object;
  #L1dc21a.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dc220.  v0:= 0I;
  #L1dc222.  v1:= length @variable v4;
  #L1dc224.  if v0 >= v1 then goto L1dc24a;
  #L1dc228.  v1:= length @variable v4;
  #L1dc22a.  v1:= v1 - v0 @kind int;
  #L1dc22c.  call temp:= `read`(v3, v4, v0, v1) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L1dc232.  v1:= temp;
  #L1dc234.  v2:= -1I;
  #L1dc236.  if v1 == v2 then goto L1dc23e;
  #L1dc23a.  v0:= v0 + v1 @kind int;
  #L1dc23c.  goto L1dc222;
  #L1dc23e.  v3:= new `java.io.EOFException`;
  #L1dc242.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1dc248.  throw v3;
  #L1dc24a.  return @kind void;
}
procedure `long` `commonReadHexadecimalUnsignedLong`(`okio.Buffer` v15 @kind object) @signature `Lokio/internal/BufferKt;.commonReadHexadecimalUnsignedLong:(Lokio/Buffer;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L1daa4c.  v0:= "$this$commonReadHexadecimalUnsignedLong" @kind object;
  #L1daa50.  call `checkNotNullParameter`(v15, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1daa56.  call temp:= `size`(v15) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1daa5c.  v0:= temp @kind wide;
  #L1daa5e.  v2:= 0L;
  #L1daa62.  v4:= lcmp(v0, v2);
  #L1daa66.  if v4 == 0 then goto L1dabc6;
  #L1daa6a.  v0:= 0I;
  #L1daa6c.  v4:= v2 @kind wide;
  #L1daa6e.  v1:= 0I;
  #L1daa70.  v6:= v15.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1daa74.  call `checkNotNull`(v6) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1daa7a.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1daa7e.  v8:= v6.`okio.Segment.pos` @type ^`int`;
  #L1daa82.  v9:= v6.`okio.Segment.limit` @type ^`int`;
  #L1daa86.  if v8 >= v9 then goto L1dab8a;
  #L1daa8a.  v10:= v7[v8] @kind byte;
  #L1daa8e.  v11:= 48I;
  #L1daa92.  v11:= (`byte`) v11 @kind i2b;
  #L1daa94.  if v10 < v11 then goto L1daaa8;
  #L1daa98.  v12:= 57I;
  #L1daa9c.  v12:= (`byte`) v12 @kind i2b;
  #L1daa9e.  if v10 > v12 then goto L1daaa8;
  #L1daaa2.  v11:= v10 - v11 @kind int;
  #L1daaa6.  goto L1daadc;
  #L1daaa8.  v11:= 97I;
  #L1daaac.  v11:= (`byte`) v11 @kind i2b;
  #L1daaae.  if v10 < v11 then goto L1daac6;
  #L1daab2.  v12:= 102I;
  #L1daab6.  v12:= (`byte`) v12 @kind i2b;
  #L1daab8.  if v10 > v12 then goto L1daac6;
  #L1daabc.  v11:= v10 - v11 @kind int;
  #L1daac0.  v11:= v11 + 10;
  #L1daac4.  goto L1daadc;
  #L1daac6.  v11:= 65I;
  #L1daaca.  v11:= (`byte`) v11 @kind i2b;
  #L1daacc.  if v10 < v11 then goto L1dab4c;
  #L1daad0.  v12:= 70I;
  #L1daad4.  v12:= (`byte`) v12 @kind i2b;
  #L1daad6.  if v10 > v12 then goto L1dab4c;
  #L1daada.  goto L1daabc;
  #L1daadc.  v12:= -3.105036184601418E231D;
  #L1daae0.  v12:= v12 ^& v4 @kind long;
  #L1daae2.  v14:= lcmp(v12, v2);
  #L1daae6.  if v14 != 0 then goto L1daafc;
  #L1daaea.  v10:= 4I;
  #L1daaec.  v4:= v4 ^< v10 @kind long;
  #L1daaee.  v10:= (`long`) v11 @kind i2l;
  #L1daaf0.  v4:= v4 ^| v10 @kind long;
  #L1daaf2.  v8:= v8 + 1;
  #L1daaf6.  v0:= v0 + 1;
  #L1daafa.  goto L1daa86;
  #L1daafc.  v15:= new `okio.Buffer`;
  #L1dab00.  call `<init>`(v15) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1dab06.  call temp:= `writeHexadecimalUnsignedLong`(v15, v4) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L1dab0c.  v15:= temp @kind object;
  #L1dab0e.  call temp:= `writeByte`(v15, v10) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1dab14.  v15:= temp @kind object;
  #L1dab16.  v0:= new `java.lang.NumberFormatException`;
  #L1dab1a.  v1:= new `java.lang.StringBuilder`;
  #L1dab1e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dab24.  v2:= "Number too large: " @kind object;
  #L1dab28.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dab2e.  call temp:= `readUtf8`(v15) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L1dab34.  v15:= temp @kind object;
  #L1dab36.  call temp:= `append`(v1, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dab3c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dab42.  v15:= temp @kind object;
  #L1dab44.  call `<init>`(v0, v15) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dab4a.  throw v0;
  #L1dab4c.  if v0 == 0 then goto L1dab54;
  #L1dab50.  v1:= 1I;
  #L1dab52.  goto L1dab8a;
  #L1dab54.  v15:= new `java.lang.NumberFormatException`;
  #L1dab58.  v0:= new `java.lang.StringBuilder`;
  #L1dab5c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dab62.  v1:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L1dab66.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dab6c.  call temp:= `toHexString`(v10) @signature `Lokio/-Util;.toHexString:(B)Ljava/lang/String;` @kind static;
  #L1dab72.  v1:= temp @kind object;
  #L1dab74.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dab7a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dab80.  v0:= temp @kind object;
  #L1dab82.  call `<init>`(v15, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dab88.  throw v15;
  #L1dab8a.  if v8 != v9 then goto L1daba2;
  #L1dab8e.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1dab94.  v7:= temp @kind object;
  #L1dab96.  v15.`okio.Buffer.head` @type ^`okio.Segment` := v7 @kind object;
  #L1dab9a.  call `recycle`(v6) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1daba0.  goto L1daba6;
  #L1daba2.  v6.`okio.Segment.pos` @type ^`int` := v8;
  #L1daba6.  if v1 != 0 then goto L1dabb2;
  #L1dabaa.  v6:= v15.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1dabae.  if v6 != 0 then goto L1daa70;
  #L1dabb2.  call temp:= `size`(v15) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dabb8.  v1:= temp @kind wide;
  #L1dabba.  v6:= (`long`) v0 @kind i2l;
  #L1dabbc.  v1:= v1 - v6 @kind long;
  #L1dabbe.  call `setSize$okio`(v15, v1) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1dabc4.  return v4 @kind wide;
  #L1dabc6.  v15:= new `java.io.EOFException`;
  #L1dabca.  call `<init>`(v15) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1dabd0.  throw v15;
}
procedure `int` `commonReadInt`(`okio.Buffer` v8 @kind object) @signature `Lokio/internal/BufferKt;.commonReadInt:(Lokio/Buffer;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1d93bc.  v0:= "$this$commonReadInt" @kind object;
  #L1d93c0.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d93c6.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d93cc.  v0:= temp @kind wide;
  #L1d93ce.  v2:= 4L;
  #L1d93d2.  v4:= lcmp(v0, v2);
  #L1d93d6.  if v4 < 0 then goto L1d94b2;
  #L1d93da.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d93de.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d93e4.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d93e8.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d93ec.  v5:= v4 - v1 @kind int;
  #L1d93f0.  v5:= (`long`) v5 @kind i2l;
  #L1d93f2.  v7:= lcmp(v5, v2);
  #L1d93f6.  if v7 >= 0 then goto L1d943e;
  #L1d93fa.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1d9400.  v0:= temp;
  #L1d9402.  v0:= v0 ^& 255;
  #L1d9406.  v0:= v0 ^< 24;
  #L1d940a.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1d9410.  v1:= temp;
  #L1d9412.  v1:= v1 ^& 255;
  #L1d9416.  v1:= v1 ^< 16;
  #L1d941a.  v0:= v0 ^| v1 @kind int;
  #L1d941c.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1d9422.  v1:= temp;
  #L1d9424.  v1:= v1 ^& 255;
  #L1d9428.  v1:= v1 ^< 8;
  #L1d942c.  v0:= v0 ^| v1 @kind int;
  #L1d942e.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1d9434.  v8:= temp;
  #L1d9436.  v8:= v8 ^& 255;
  #L1d943a.  v8:= v8 ^| v0 @kind int;
  #L1d943c.  return v8;
  #L1d943e.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d9442.  v6:= v1 + 1;
  #L1d9446.  v1:= v5[v1] @kind byte;
  #L1d944a.  v1:= v1 ^& 255;
  #L1d944e.  v1:= v1 ^< 24;
  #L1d9452.  v7:= v6 + 1;
  #L1d9456.  v6:= v5[v6] @kind byte;
  #L1d945a.  v6:= v6 ^& 255;
  #L1d945e.  v6:= v6 ^< 16;
  #L1d9462.  v1:= v1 ^| v6 @kind int;
  #L1d9464.  v6:= v7 + 1;
  #L1d9468.  v7:= v5[v7] @kind byte;
  #L1d946c.  v7:= v7 ^& 255;
  #L1d9470.  v7:= v7 ^< 8;
  #L1d9474.  v1:= v1 ^| v7 @kind int;
  #L1d9476.  v7:= v6 + 1;
  #L1d947a.  v5:= v5[v6] @kind byte;
  #L1d947e.  v5:= v5 ^& 255;
  #L1d9482.  v1:= v1 ^| v5 @kind int;
  #L1d9484.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d948a.  v5:= temp @kind wide;
  #L1d948c.  v5:= v5 - v2 @kind long;
  #L1d948e.  call `setSize$okio`(v8, v5) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1d9494.  if v7 != v4 then goto L1d94ac;
  #L1d9498.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1d949e.  v2:= temp @kind object;
  #L1d94a0.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L1d94a4.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1d94aa.  goto L1d94b0;
  #L1d94ac.  v0.`okio.Segment.pos` @type ^`int` := v7;
  #L1d94b0.  return v1;
  #L1d94b2.  v8:= new `java.io.EOFException`;
  #L1d94b6.  call `<init>`(v8) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1d94bc.  throw v8;
}
procedure `long` `commonReadLong`(`okio.Buffer` v14 @kind object) @signature `Lokio/internal/BufferKt;.commonReadLong:(Lokio/Buffer;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L1dabe4.  v0:= "$this$commonReadLong" @kind object;
  #L1dabe8.  call `checkNotNullParameter`(v14, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dabee.  call temp:= `size`(v14) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dabf4.  v0:= temp @kind wide;
  #L1dabf6.  v2:= 8L;
  #L1dabfa.  v4:= lcmp(v0, v2);
  #L1dabfe.  if v4 < 0 then goto L1dad1c;
  #L1dac02.  v0:= v14.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1dac06.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1dac0c.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1dac10.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L1dac14.  v5:= v4 - v1 @kind int;
  #L1dac18.  v5:= (`long`) v5 @kind i2l;
  #L1dac1a.  v7:= 32I;
  #L1dac1e.  v8:= lcmp(v5, v2);
  #L1dac22.  if v8 >= 0 then goto L1dac4e;
  #L1dac26.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L1dac2c.  v0:= temp;
  #L1dac2e.  v0:= (`long`) v0 @kind i2l;
  #L1dac30.  v2:= 4294967295L;
  #L1dac3a.  v0:= v0 ^& v2 @kind long;
  #L1dac3c.  v0:= v0 ^< v7 @kind long;
  #L1dac3e.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L1dac44.  v14:= temp;
  #L1dac46.  v4:= (`long`) v14 @kind i2l;
  #L1dac48.  v2:= v2 ^& v4 @kind long;
  #L1dac4a.  v0:= v0 ^| v2 @kind long;
  #L1dac4c.  return v0 @kind wide;
  #L1dac4e.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1dac52.  v6:= v1 + 1;
  #L1dac56.  v1:= v5[v1] @kind byte;
  #L1dac5a.  v8:= (`long`) v1 @kind i2l;
  #L1dac5c.  v10:= 255L;
  #L1dac60.  v8:= v8 ^& v10 @kind long;
  #L1dac62.  v1:= 56I;
  #L1dac66.  v8:= v8 ^< v1 @kind long;
  #L1dac68.  v1:= v6 + 1;
  #L1dac6c.  v6:= v5[v6] @kind byte;
  #L1dac70.  v12:= (`long`) v6 @kind i2l;
  #L1dac72.  v12:= v12 ^& v10 @kind long;
  #L1dac74.  v6:= 48I;
  #L1dac78.  v12:= v12 ^< v6 @kind long;
  #L1dac7a.  v8:= v8 ^| v12 @kind long;
  #L1dac7c.  v6:= v1 + 1;
  #L1dac80.  v1:= v5[v1] @kind byte;
  #L1dac84.  v12:= (`long`) v1 @kind i2l;
  #L1dac86.  v12:= v12 ^& v10 @kind long;
  #L1dac88.  v1:= 40I;
  #L1dac8c.  v12:= v12 ^< v1 @kind long;
  #L1dac8e.  v8:= v8 ^| v12 @kind long;
  #L1dac90.  v1:= v6 + 1;
  #L1dac94.  v6:= v5[v6] @kind byte;
  #L1dac98.  v12:= (`long`) v6 @kind i2l;
  #L1dac9a.  v12:= v12 ^& v10 @kind long;
  #L1dac9c.  v6:= v12 ^< v7 @kind long;
  #L1daca0.  v6:= v6 ^| v8 @kind long;
  #L1daca2.  v8:= v1 + 1;
  #L1daca6.  v1:= v5[v1] @kind byte;
  #L1dacaa.  v12:= (`long`) v1 @kind i2l;
  #L1dacac.  v12:= v12 ^& v10 @kind long;
  #L1dacae.  v1:= 24I;
  #L1dacb2.  v12:= v12 ^< v1 @kind long;
  #L1dacb4.  v6:= v6 ^| v12 @kind long;
  #L1dacb6.  v1:= v8 + 1;
  #L1dacba.  v8:= v5[v8] @kind byte;
  #L1dacbe.  v8:= (`long`) v8 @kind i2l;
  #L1dacc0.  v8:= v8 ^& v10 @kind long;
  #L1dacc2.  v12:= 16I;
  #L1dacc6.  v8:= v8 ^< v12 @kind long;
  #L1dacc8.  v6:= v6 ^| v8 @kind long;
  #L1dacca.  v8:= v1 + 1;
  #L1dacce.  v1:= v5[v1] @kind byte;
  #L1dacd2.  v12:= (`long`) v1 @kind i2l;
  #L1dacd4.  v12:= v12 ^& v10 @kind long;
  #L1dacd6.  v1:= 8I;
  #L1dacda.  v12:= v12 ^< v1 @kind long;
  #L1dacdc.  v6:= v6 ^| v12 @kind long;
  #L1dacde.  v1:= v8 + 1;
  #L1dace2.  v5:= v5[v8] @kind byte;
  #L1dace6.  v8:= (`long`) v5 @kind i2l;
  #L1dace8.  v8:= v8 ^& v10 @kind long;
  #L1dacea.  v5:= v6 ^| v8 @kind long;
  #L1dacee.  call temp:= `size`(v14) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dacf4.  v7:= temp @kind wide;
  #L1dacf6.  v7:= v7 - v2 @kind long;
  #L1dacf8.  call `setSize$okio`(v14, v7) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1dacfe.  if v1 != v4 then goto L1dad16;
  #L1dad02.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1dad08.  v1:= temp @kind object;
  #L1dad0a.  v14.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L1dad0e.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1dad14.  goto L1dad1a;
  #L1dad16.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L1dad1a.  return v5 @kind wide;
  #L1dad1c.  v14:= new `java.io.EOFException`;
  #L1dad20.  call `<init>`(v14) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1dad26.  throw v14;
}
procedure `short` `commonReadShort`(`okio.Buffer` v8 @kind object) @signature `Lokio/internal/BufferKt;.commonReadShort:(Lokio/Buffer;)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1dc088.  v0:= "$this$commonReadShort" @kind object;
  #L1dc08c.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dc092.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dc098.  v0:= temp @kind wide;
  #L1dc09a.  v2:= 2L;
  #L1dc09e.  v4:= lcmp(v0, v2);
  #L1dc0a2.  if v4 < 0 then goto L1dc136;
  #L1dc0a6.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1dc0aa.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1dc0b0.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1dc0b4.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L1dc0b8.  v5:= v4 - v1 @kind int;
  #L1dc0bc.  v6:= 2I;
  #L1dc0be.  if v5 >= v6 then goto L1dc0e4;
  #L1dc0c2.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1dc0c8.  v0:= temp;
  #L1dc0ca.  v0:= v0 ^& 255;
  #L1dc0ce.  v0:= v0 ^< 8;
  #L1dc0d2.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1dc0d8.  v8:= temp;
  #L1dc0da.  v8:= v8 ^& 255;
  #L1dc0de.  v8:= v8 ^| v0 @kind int;
  #L1dc0e0.  v8:= (`short`) v8 @kind i2s;
  #L1dc0e2.  return v8;
  #L1dc0e4.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1dc0e8.  v6:= v1 + 1;
  #L1dc0ec.  v1:= v5[v1] @kind byte;
  #L1dc0f0.  v1:= v1 ^& 255;
  #L1dc0f4.  v1:= v1 ^< 8;
  #L1dc0f8.  v7:= v6 + 1;
  #L1dc0fc.  v5:= v5[v6] @kind byte;
  #L1dc100.  v5:= v5 ^& 255;
  #L1dc104.  v1:= v1 ^| v5 @kind int;
  #L1dc106.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dc10c.  v5:= temp @kind wide;
  #L1dc10e.  v5:= v5 - v2 @kind long;
  #L1dc110.  call `setSize$okio`(v8, v5) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1dc116.  if v7 != v4 then goto L1dc12e;
  #L1dc11a.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1dc120.  v2:= temp @kind object;
  #L1dc122.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L1dc126.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1dc12c.  goto L1dc132;
  #L1dc12e.  v0.`okio.Segment.pos` @type ^`int` := v7;
  #L1dc132.  v8:= (`short`) v1 @kind i2s;
  #L1dc134.  return v8;
  #L1dc136.  v8:= new `java.io.EOFException`;
  #L1dc13a.  call `<init>`(v8) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1dc140.  throw v8;
}
procedure `okio.Buffer$UnsafeCursor` `commonReadUnsafe`(`okio.Buffer` v2 @kind object, `okio.Buffer$UnsafeCursor` v3 @kind object) @signature `Lokio/internal/BufferKt;.commonReadUnsafe:(Lokio/Buffer;Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1dbd34.  v0:= "$this$commonReadUnsafe" @kind object;
  #L1dbd38.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dbd3e.  v0:= "unsafeCursor" @kind object;
  #L1dbd42.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dbd48.  v0:= v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1dbd4c.  v1:= 0I;
  #L1dbd4e.  if v0 != 0 then goto L1dbd56;
  #L1dbd52.  v0:= 1I;
  #L1dbd54.  goto L1dbd58;
  #L1dbd56.  v0:= 0I;
  #L1dbd58.  if v0 == 0 then goto L1dbd66;
  #L1dbd5c.  v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v2 @kind object;
  #L1dbd60.  v3.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` := v1 @kind boolean;
  #L1dbd64.  return v3 @kind object;
  #L1dbd66.  v2:= new `java.lang.IllegalStateException`;
  #L1dbd6a.  v3:= "already attached to a buffer" @kind object;
  #L1dbd6e.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dbd74.  v3:= temp @kind object;
  #L1dbd76.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dbd7c.  throw v2;
}
procedure `java.lang.String` `commonReadUtf8`(`okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokio/internal/BufferKt;.commonReadUtf8:(Lokio/Buffer;J)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1d9b3c.  v0:= "$this$commonReadUtf8" @kind object;
  #L1d9b40.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9b46.  v0:= 0I;
  #L1d9b48.  v1:= 0L;
  #L1d9b4c.  v3:= lcmp(v9, v1);
  #L1d9b50.  if v3 < 0 then goto L1d9b68;
  #L1d9b54.  v1:= 2147483647I;
  #L1d9b5a.  v1:= (`long`) v1 @kind i2l;
  #L1d9b5c.  v4:= lcmp(v9, v1);
  #L1d9b60.  if v4 > 0 then goto L1d9b68;
  #L1d9b64.  v1:= 1I;
  #L1d9b66.  goto L1d9b6a;
  #L1d9b68.  v1:= 0I;
  #L1d9b6a.  if v1 == 0 then goto L1d9c16;
  #L1d9b6e.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d9b74.  v1:= temp @kind wide;
  #L1d9b76.  v4:= lcmp(v1, v9);
  #L1d9b7a.  if v4 < 0 then goto L1d9c0a;
  #L1d9b7e.  if v3 != 0 then goto L1d9b88;
  #L1d9b82.  v8:= "" @kind object;
  #L1d9b86.  return v8 @kind object;
  #L1d9b88.  v1:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d9b8c.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d9b92.  v2:= v1.`okio.Segment.pos` @type ^`int`;
  #L1d9b96.  v3:= (`long`) v2 @kind i2l;
  #L1d9b98.  v3:= v3 + v9 @kind long;
  #L1d9b9a.  v5:= v1.`okio.Segment.limit` @type ^`int`;
  #L1d9b9e.  v5:= (`long`) v5 @kind i2l;
  #L1d9ba0.  v7:= lcmp(v3, v5);
  #L1d9ba4.  if v7 <= 0 then goto L1d9bbe;
  #L1d9ba8.  call temp:= `readByteArray`(v8, v9) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L1d9bae.  v8:= temp @kind object;
  #L1d9bb0.  v9:= 3I;
  #L1d9bb2.  v10:= 0I;
  #L1d9bb4.  call temp:= `commonToUtf8String$default`(v8, v0, v0, v9, v10) @signature `Lokio/internal/_Utf8Kt;.commonToUtf8String$default:([BIIILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1d9bba.  v8:= temp @kind object;
  #L1d9bbc.  return v8 @kind object;
  #L1d9bbe.  v0:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d9bc2.  v3:= (`int`) v9 @kind l2i;
  #L1d9bc4.  v4:= v2 + v3 @kind int;
  #L1d9bc8.  call temp:= `commonToUtf8String`(v0, v2, v4) @signature `Lokio/internal/_Utf8Kt;.commonToUtf8String:([BII)Ljava/lang/String;` @kind static;
  #L1d9bce.  v0:= temp @kind object;
  #L1d9bd0.  v2:= v1.`okio.Segment.pos` @type ^`int`;
  #L1d9bd4.  v2:= v2 + v3 @kind int;
  #L1d9bd6.  v1.`okio.Segment.pos` @type ^`int` := v2;
  #L1d9bda.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d9be0.  v2:= temp @kind wide;
  #L1d9be2.  v2:= v2 - v9 @kind long;
  #L1d9be4.  call `setSize$okio`(v8, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1d9bea.  v9:= v1.`okio.Segment.pos` @type ^`int`;
  #L1d9bee.  v10:= v1.`okio.Segment.limit` @type ^`int`;
  #L1d9bf2.  if v9 != v10 then goto L1d9c08;
  #L1d9bf6.  call temp:= `pop`(v1) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1d9bfc.  v9:= temp @kind object;
  #L1d9bfe.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v9 @kind object;
  #L1d9c02.  call `recycle`(v1) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1d9c08.  return v0 @kind object;
  #L1d9c0a.  v8:= new `java.io.EOFException`;
  #L1d9c0e.  call `<init>`(v8) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1d9c14.  throw v8;
  #L1d9c16.  v8:= new `java.lang.StringBuilder`;
  #L1d9c1a.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d9c20.  v0:= "byteCount: " @kind object;
  #L1d9c24.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d9c2a.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d9c30.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d9c36.  v8:= temp @kind object;
  #L1d9c38.  v9:= new `java.lang.IllegalArgumentException`;
  #L1d9c3c.  call temp:= `toString`(v8) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d9c42.  v8:= temp @kind object;
  #L1d9c44.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d9c4a.  throw v9;
}
procedure `int` `commonReadUtf8CodePoint`(`okio.Buffer` v12 @kind object) @signature `Lokio/internal/BufferKt;.commonReadUtf8CodePoint:(Lokio/Buffer;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1d94d0.  v0:= "$this$commonReadUtf8CodePoint" @kind object;
  #L1d94d4.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d94da.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d94e0.  v0:= temp @kind wide;
  #L1d94e2.  v2:= 0L;
  #L1d94e6.  v4:= lcmp(v0, v2);
  #L1d94ea.  if v4 == 0 then goto L1d9644;
  #L1d94ee.  call temp:= `getByte`(v12, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L1d94f4.  v0:= temp;
  #L1d94f6.  v1:= v0 ^& 128;
  #L1d94fa.  v2:= 1I;
  #L1d94fc.  v3:= 128I;
  #L1d9500.  v4:= 65533I;
  #L1d9506.  if v1 != 0 then goto L1d9516;
  #L1d950a.  v1:= v0 ^& 127;
  #L1d950e.  v5:= 0I;
  #L1d9510.  v5:= 1I;
  #L1d9512.  v6:= 0I;
  #L1d9514.  goto L1d955c;
  #L1d9516.  v1:= v0 ^& 224;
  #L1d951a.  v5:= 192I;
  #L1d951e.  if v1 != v5 then goto L1d952e;
  #L1d9522.  v1:= v0 ^& 31;
  #L1d9526.  v5:= 2I;
  #L1d9528.  v6:= 128I;
  #L1d952c.  goto L1d955c;
  #L1d952e.  v1:= v0 ^& 240;
  #L1d9532.  v5:= 224I;
  #L1d9536.  if v1 != v5 then goto L1d9546;
  #L1d953a.  v1:= v0 ^& 15;
  #L1d953e.  v5:= 3I;
  #L1d9540.  v6:= 2048I;
  #L1d9544.  goto L1d955c;
  #L1d9546.  v1:= v0 ^& 248;
  #L1d954a.  v5:= 240I;
  #L1d954e.  if v1 != v5 then goto L1d9638;
  #L1d9552.  v1:= v0 ^& 7;
  #L1d9556.  v5:= 4I;
  #L1d9558.  v6:= 65536I;
  #L1d955c.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d9562.  v7:= temp @kind wide;
  #L1d9564.  v9:= (`long`) v5 @kind i2l;
  #L1d9566.  v11:= lcmp(v7, v9);
  #L1d956a.  if v11 < 0 then goto L1d95d0;
  #L1d956e.  if v2 >= v5 then goto L1d959c;
  #L1d9572.  v7:= (`long`) v2 @kind i2l;
  #L1d9574.  call temp:= `getByte`(v12, v7) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L1d957a.  v0:= temp;
  #L1d957c.  v11:= v0 ^& 192;
  #L1d9580.  if v11 != v3 then goto L1d9594;
  #L1d9584.  v1:= v1 ^< 6;
  #L1d9588.  v0:= v0 ^& 63;
  #L1d958c.  v1:= v1 ^| v0 @kind int;
  #L1d958e.  v2:= v2 + 1;
  #L1d9592.  goto L1d956e;
  #L1d9594.  call `skip`(v12, v7) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1d959a.  return v4;
  #L1d959c.  call `skip`(v12, v9) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1d95a2.  v12:= 1114111I;
  #L1d95a8.  if v1 <= v12 then goto L1d95ae;
  #L1d95ac.  goto L1d95ce;
  #L1d95ae.  v12:= 57343I;
  #L1d95b4.  v0:= 55296I;
  #L1d95ba.  if v0 <= v1 then goto L1d95c0;
  #L1d95be.  goto L1d95c6;
  #L1d95c0.  if v12 < v1 then goto L1d95c6;
  #L1d95c4.  goto L1d95ce;
  #L1d95c6.  if v1 >= v6 then goto L1d95cc;
  #L1d95ca.  goto L1d95ce;
  #L1d95cc.  v4:= v1;
  #L1d95ce.  return v4;
  #L1d95d0.  v1:= new `java.io.EOFException`;
  #L1d95d4.  v2:= new `java.lang.StringBuilder`;
  #L1d95d8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d95de.  v3:= "size < " @kind object;
  #L1d95e2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d95e8.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d95ee.  v3:= ": " @kind object;
  #L1d95f2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d95f8.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d95fe.  v3:= temp @kind wide;
  #L1d9600.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d9606.  v12:= " (to read code point prefixed 0x" @kind object;
  #L1d960a.  call temp:= `append`(v2, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d9610.  call temp:= `toHexString`(v0) @signature `Lokio/-Util;.toHexString:(B)Ljava/lang/String;` @kind static;
  #L1d9616.  v12:= temp @kind object;
  #L1d9618.  call temp:= `append`(v2, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d961e.  v12:= 41I;
  #L1d9622.  call temp:= `append`(v2, v12) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d9628.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d962e.  v12:= temp @kind object;
  #L1d9630.  call `<init>`(v1, v12) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d9636.  throw v1;
  #L1d9638.  v0:= 1L;
  #L1d963c.  call `skip`(v12, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1d9642.  return v4;
  #L1d9644.  v12:= new `java.io.EOFException`;
  #L1d9648.  call `<init>`(v12) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1d964e.  throw v12;
}
procedure `java.lang.String` `commonReadUtf8Line`(`okio.Buffer` v5 @kind object) @signature `Lokio/internal/BufferKt;.commonReadUtf8Line:(Lokio/Buffer;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d9c5c.  v0:= "$this$commonReadUtf8Line" @kind object;
  #L1d9c60.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9c66.  v0:= 10I;
  #L1d9c6a.  v0:= (`byte`) v0 @kind i2b;
  #L1d9c6c.  call temp:= `indexOf`(v5, v0) @signature `Lokio/Buffer;.indexOf:(B)J` @kind virtual;
  #L1d9c72.  v0:= temp @kind wide;
  #L1d9c74.  v2:= -1L;
  #L1d9c78.  v4:= lcmp(v0, v2);
  #L1d9c7c.  if v4 == 0 then goto L1d9c8a;
  #L1d9c80.  call temp:= `readUtf8Line`(v5, v0) @signature `Lokio/internal/BufferKt;.readUtf8Line:(Lokio/Buffer;J)Ljava/lang/String;` @kind static;
  #L1d9c86.  v5:= temp @kind object;
  #L1d9c88.  goto L1d9cb2;
  #L1d9c8a.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d9c90.  v0:= temp @kind wide;
  #L1d9c92.  v2:= 0L;
  #L1d9c96.  v4:= lcmp(v0, v2);
  #L1d9c9a.  if v4 == 0 then goto L1d9cb0;
  #L1d9c9e.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d9ca4.  v0:= temp @kind wide;
  #L1d9ca6.  call temp:= `readUtf8`(v5, v0) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L1d9cac.  v5:= temp @kind object;
  #L1d9cae.  goto L1d9cb2;
  #L1d9cb0.  v5:= 0I;
  #L1d9cb2.  return v5 @kind object;
}
procedure `java.lang.String` `commonReadUtf8LineStrict`(`okio.Buffer` v11 @kind object, `long` v12 ) @signature `Lokio/internal/BufferKt;.commonReadUtf8LineStrict:(Lokio/Buffer;J)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1d9cc4.  v0:= "$this$commonReadUtf8LineStrict" @kind object;
  #L1d9cc8.  call `checkNotNullParameter`(v11, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9cce.  v0:= 0L;
  #L1d9cd2.  v2:= lcmp(v12, v0);
  #L1d9cd6.  if v2 < 0 then goto L1d9cde;
  #L1d9cda.  v0:= 1I;
  #L1d9cdc.  goto L1d9ce0;
  #L1d9cde.  v0:= 0I;
  #L1d9ce0.  if v0 == 0 then goto L1d9e00;
  #L1d9ce4.  v0:= 1L;
  #L1d9ce8.  v2:= 9223372036854775807L;
  #L1d9cf2.  v4:= lcmp(v12, v2);
  #L1d9cf6.  if v4 != 0 then goto L1d9cfc;
  #L1d9cfa.  goto L1d9d00;
  #L1d9cfc.  v2:= v12 + v0 @kind long;
  #L1d9d00.  v4:= 10I;
  #L1d9d04.  v10:= (`byte`) v4 @kind i2b;
  #L1d9d06.  v6:= 0L;
  #L1d9d0a.  v4:= v11 @kind object;
  #L1d9d0c.  v5:= v10;
  #L1d9d0e.  v8:= v2 @kind wide;
  #L1d9d10.  call temp:= `indexOf`(v4, v5, v6, v8) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L1d9d16.  v4:= temp @kind wide;
  #L1d9d18.  v6:= -1L;
  #L1d9d1c.  v8:= lcmp(v4, v6);
  #L1d9d20.  if v8 == 0 then goto L1d9d2e;
  #L1d9d24.  call temp:= `readUtf8Line`(v11, v4) @signature `Lokio/internal/BufferKt;.readUtf8Line:(Lokio/Buffer;J)Ljava/lang/String;` @kind static;
  #L1d9d2a.  v11:= temp @kind object;
  #L1d9d2c.  return v11 @kind object;
  #L1d9d2e.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d9d34.  v4:= temp @kind wide;
  #L1d9d36.  v6:= lcmp(v2, v4);
  #L1d9d3a.  if v6 >= 0 then goto L1d9d6a;
  #L1d9d3e.  v0:= v2 - v0 @kind long;
  #L1d9d42.  call temp:= `getByte`(v11, v0) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L1d9d48.  v0:= temp;
  #L1d9d4a.  v1:= 13I;
  #L1d9d4e.  v1:= (`byte`) v1 @kind i2b;
  #L1d9d50.  if v0 != v1 then goto L1d9d6a;
  #L1d9d54.  call temp:= `getByte`(v11, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L1d9d5a.  v0:= temp;
  #L1d9d5c.  if v0 != v10 then goto L1d9d6a;
  #L1d9d60.  call temp:= `readUtf8Line`(v11, v2) @signature `Lokio/internal/BufferKt;.readUtf8Line:(Lokio/Buffer;J)Ljava/lang/String;` @kind static;
  #L1d9d66.  v11:= temp @kind object;
  #L1d9d68.  return v11 @kind object;
  #L1d9d6a.  v6:= new `okio.Buffer`;
  #L1d9d6e.  call `<init>`(v6) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1d9d74.  v2:= 0L;
  #L1d9d78.  v0:= 32I;
  #L1d9d7c.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d9d82.  v4:= temp @kind wide;
  #L1d9d84.  v0:= (`long`) v0 @kind i2l;
  #L1d9d86.  call temp:= `min`(v0, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1d9d8c.  v4:= temp @kind wide;
  #L1d9d8e.  v0:= v11 @kind object;
  #L1d9d90.  v1:= v6 @kind object;
  #L1d9d92.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L1d9d98.  v0:= new `java.io.EOFException`;
  #L1d9d9c.  v1:= new `java.lang.StringBuilder`;
  #L1d9da0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d9da6.  v2:= "\\n not found: limit=" @kind object;
  #L1d9daa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d9db0.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d9db6.  v2:= temp @kind wide;
  #L1d9db8.  call temp:= `min`(v2, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1d9dbe.  v11:= temp @kind wide;
  #L1d9dc0.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d9dc6.  v11:= " content=" @kind object;
  #L1d9dca.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d9dd0.  call temp:= `readByteString`(v6) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1d9dd6.  v11:= temp @kind object;
  #L1d9dd8.  call temp:= `hex`(v11) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L1d9dde.  v11:= temp @kind object;
  #L1d9de0.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d9de6.  v11:= 8230I;
  #L1d9dea.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d9df0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d9df6.  v11:= temp @kind object;
  #L1d9df8.  call `<init>`(v0, v11) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d9dfe.  throw v0;
  #L1d9e00.  v11:= new `java.lang.StringBuilder`;
  #L1d9e04.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d9e0a.  v0:= "limit < 0: " @kind object;
  #L1d9e0e.  call temp:= `append`(v11, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d9e14.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d9e1a.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d9e20.  v11:= temp @kind object;
  #L1d9e22.  v12:= new `java.lang.IllegalArgumentException`;
  #L1d9e26.  call temp:= `toString`(v11) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d9e2c.  v11:= temp @kind object;
  #L1d9e2e.  call `<init>`(v12, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d9e34.  throw v12;
}
procedure `long` `commonResizeBuffer`(`okio.Buffer$UnsafeCursor` v16 @kind object, `long` v17 ) @signature `Lokio/internal/BufferKt;.commonResizeBuffer:(Lokio/Buffer$UnsafeCursor;J)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L1dad38.  v0:= v16 @kind object;
  #L1dad3c.  v1:= v17 @kind wide;
  #L1dad40.  v3:= "$this$commonResizeBuffer" @kind object;
  #L1dad44.  call `checkNotNullParameter`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dad4a.  v3:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1dad4e.  if v3 == 0 then goto L1daeb0;
  #L1dad52.  v4:= v0.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` @kind boolean;
  #L1dad56.  if v4 == 0 then goto L1dae98;
  #L1dad5a.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dad60.  v4:= temp @kind wide;
  #L1dad62.  v7:= 1I;
  #L1dad64.  v8:= 0L;
  #L1dad68.  v10:= lcmp(v1, v4);
  #L1dad6c.  if v10 > 0 then goto L1dae28;
  #L1dad70.  v10:= lcmp(v1, v8);
  #L1dad74.  if v10 < 0 then goto L1dad7c;
  #L1dad78.  v6:= 1I;
  #L1dad7a.  goto L1dad7e;
  #L1dad7c.  v6:= 0I;
  #L1dad7e.  if v6 == 0 then goto L1dadf2;
  #L1dad82.  v6:= v4 - v1 @kind long;
  #L1dad86.  v10:= lcmp(v6, v8);
  #L1dad8a.  if v10 <= 0 then goto L1dadd6;
  #L1dad8e.  v10:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1dad92.  call `checkNotNull`(v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1dad98.  v10:= v10.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1dad9c.  call `checkNotNull`(v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1dada2.  v11:= v10.`okio.Segment.limit` @type ^`int`;
  #L1dada6.  v12:= v10.`okio.Segment.pos` @type ^`int`;
  #L1dadaa.  v12:= v11 - v12 @kind int;
  #L1dadae.  v12:= (`long`) v12 @kind i2l;
  #L1dadb0.  v14:= lcmp(v12, v6);
  #L1dadb4.  if v14 > 0 then goto L1dadce;
  #L1dadb8.  call temp:= `pop`(v10) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1dadbe.  v11:= temp @kind object;
  #L1dadc0.  v3.`okio.Buffer.head` @type ^`okio.Segment` := v11 @kind object;
  #L1dadc4.  call `recycle`(v10) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1dadca.  v6:= v6 - v12 @kind long;
  #L1dadcc.  goto L1dad86;
  #L1dadce.  v7:= (`int`) v6 @kind l2i;
  #L1dadd0.  v11:= v11 - v7 @kind int;
  #L1dadd2.  v10.`okio.Segment.limit` @type ^`int` := v11;
  #L1dadd6.  v6:= 0I;
  #L1dadd8.  call `setSegment$okio`(v0, v6) @signature `Lokio/Buffer$UnsafeCursor;.setSegment$okio:(Lokio/Segment;)V` @kind virtual;
  #L1dadde.  v0.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v1 @kind wide;
  #L1dade2.  v0.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v6 @kind object;
  #L1dade6.  v6:= -1I;
  #L1dade8.  v0.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v6;
  #L1dadec.  v0.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v6;
  #L1dadf0.  goto L1dae90;
  #L1dadf2.  v0:= new `java.lang.StringBuilder`;
  #L1dadf6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dadfc.  v3:= "newSize < 0: " @kind object;
  #L1dae00.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dae06.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dae0c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dae12.  v0:= temp @kind object;
  #L1dae14.  v1:= new `java.lang.IllegalArgumentException`;
  #L1dae18.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dae1e.  v0:= temp @kind object;
  #L1dae20.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dae26.  throw v1;
  #L1dae28.  if v10 <= 0 then goto L1dae90;
  #L1dae2c.  v10:= v1 - v4 @kind long;
  #L1dae30.  v12:= 1I;
  #L1dae32.  v13:= lcmp(v10, v8);
  #L1dae36.  if v13 <= 0 then goto L1dae90;
  #L1dae3a.  call temp:= `writableSegment$okio`(v3, v7) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1dae40.  v13:= temp @kind object;
  #L1dae42.  v14:= v13.`okio.Segment.limit` @type ^`int`;
  #L1dae46.  v14:= v14 - 8192;
  #L1dae4a.  v14:= (`long`) v14 @kind i2l;
  #L1dae4c.  call temp:= `min`(v10, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1dae52.  v14:= temp @kind wide;
  #L1dae54.  v15:= (`int`) v14 @kind l2i;
  #L1dae56.  v14:= v13.`okio.Segment.limit` @type ^`int`;
  #L1dae5a.  v14:= v14 + v15 @kind int;
  #L1dae5c.  v13.`okio.Segment.limit` @type ^`int` := v14;
  #L1dae60.  v6:= (`long`) v15 @kind i2l;
  #L1dae62.  v10:= v10 - v6 @kind long;
  #L1dae64.  if v12 == 0 then goto L1dae8c;
  #L1dae68.  call `setSegment$okio`(v0, v13) @signature `Lokio/Buffer$UnsafeCursor;.setSegment$okio:(Lokio/Segment;)V` @kind virtual;
  #L1dae6e.  v0.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v4 @kind wide;
  #L1dae72.  v6:= v13.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1dae76.  v0.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v6 @kind object;
  #L1dae7a.  v6:= v13.`okio.Segment.limit` @type ^`int`;
  #L1dae7e.  v7:= v6 - v15 @kind int;
  #L1dae82.  v0.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v7;
  #L1dae86.  v0.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v6;
  #L1dae8a.  v12:= 0I;
  #L1dae8c.  v7:= 1I;
  #L1dae8e.  goto L1dae32;
  #L1dae90.  call `setSize$okio`(v3, v1) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1dae96.  return v4 @kind wide;
  #L1dae98.  v0:= new `java.lang.IllegalStateException`;
  #L1dae9c.  v1:= "resizeBuffer() only permitted for read/write buffers" @kind object;
  #L1daea0.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1daea6.  v1:= temp @kind object;
  #L1daea8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1daeae.  throw v0;
  #L1daeb0.  v0:= new `java.lang.IllegalStateException`;
  #L1daeb4.  v1:= "not attached to a buffer" @kind object;
  #L1daeb8.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1daebe.  v1:= temp @kind object;
  #L1daec0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1daec6.  throw v0;
}
procedure `int` `commonSeek`(`okio.Buffer$UnsafeCursor` v17 @kind object, `long` v18 ) @signature `Lokio/internal/BufferKt;.commonSeek:(Lokio/Buffer$UnsafeCursor;J)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L1d9660.  v0:= v17 @kind object;
  #L1d9664.  v1:= v18 @kind wide;
  #L1d9668.  v3:= "$this$commonSeek" @kind object;
  #L1d966c.  call `checkNotNullParameter`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9672.  v3:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1d9676.  if v3 == 0 then goto L1d9858;
  #L1d967a.  v4:= -1I;
  #L1d967c.  v5:= (`long`) v4 @kind i2l;
  #L1d967e.  v7:= lcmp(v1, v5);
  #L1d9682.  if v7 < 0 then goto L1d9812;
  #L1d9686.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d968c.  v5:= temp @kind wide;
  #L1d968e.  v7:= lcmp(v1, v5);
  #L1d9692.  if v7 > 0 then goto L1d9812;
  #L1d9696.  v5:= -1L;
  #L1d969a.  v7:= lcmp(v1, v5);
  #L1d969e.  if v7 == 0 then goto L1d97f8;
  #L1d96a2.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d96a8.  v5:= temp @kind wide;
  #L1d96aa.  v7:= lcmp(v1, v5);
  #L1d96ae.  if v7 != 0 then goto L1d96b6;
  #L1d96b2.  goto L1d97f8;
  #L1d96b6.  v4:= 0L;
  #L1d96ba.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d96c0.  v6:= temp @kind wide;
  #L1d96c2.  v8:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d96c6.  call temp:= `getSegment$okio`(v17) @signature `Lokio/Buffer$UnsafeCursor;.getSegment$okio:()Lokio/Segment;` @kind virtual;
  #L1d96cc.  v9:= temp @kind object;
  #L1d96ce.  if v9 == 0 then goto L1d971c;
  #L1d96d2.  v9:= v0.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1d96d6.  v11:= v0.`okio.Buffer$UnsafeCursor.start` @type ^`int`;
  #L1d96da.  call temp:= `getSegment$okio`(v17) @signature `Lokio/Buffer$UnsafeCursor;.getSegment$okio:()Lokio/Segment;` @kind virtual;
  #L1d96e0.  v12:= temp @kind object;
  #L1d96e2.  call `checkNotNull`(v12) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d96e8.  v12:= v12.`okio.Segment.pos` @type ^`int`;
  #L1d96ec.  v11:= v11 - v12 @kind int;
  #L1d96ee.  v11:= (`long`) v11 @kind i2l;
  #L1d96f0.  v9:= v9 - v11 @kind long;
  #L1d96f2.  v11:= lcmp(v9, v1);
  #L1d96f6.  if v11 <= 0 then goto L1d970c;
  #L1d96fa.  call temp:= `getSegment$okio`(v17) @signature `Lokio/Buffer$UnsafeCursor;.getSegment$okio:()Lokio/Segment;` @kind virtual;
  #L1d9700.  v6:= temp @kind object;
  #L1d9702.  v15:= v8 @kind object;
  #L1d9704.  v8:= v6 @kind object;
  #L1d9706.  v6:= v9 @kind wide;
  #L1d9708.  v9:= v15 @kind object;
  #L1d970a.  goto L1d971e;
  #L1d970c.  call temp:= `getSegment$okio`(v17) @signature `Lokio/Buffer$UnsafeCursor;.getSegment$okio:()Lokio/Segment;` @kind virtual;
  #L1d9712.  v4:= temp @kind object;
  #L1d9714.  v15:= v9 @kind wide;
  #L1d9716.  v9:= v4 @kind object;
  #L1d9718.  v4:= v15 @kind wide;
  #L1d971a.  goto L1d971e;
  #L1d971c.  v9:= v8 @kind object;
  #L1d971e.  v10:= v6 - v1 @kind long;
  #L1d9722.  v12:= v1 - v4 @kind long;
  #L1d9726.  v14:= lcmp(v10, v12);
  #L1d972a.  if v14 <= 0 then goto L1d9758;
  #L1d972e.  call `checkNotNull`(v9) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d9734.  v6:= v9.`okio.Segment.limit` @type ^`int`;
  #L1d9738.  v7:= v9.`okio.Segment.pos` @type ^`int`;
  #L1d973c.  v8:= v6 - v7 @kind int;
  #L1d9740.  v10:= (`long`) v8 @kind i2l;
  #L1d9742.  v10:= v10 + v4 @kind long;
  #L1d9744.  v8:= lcmp(v1, v10);
  #L1d9748.  if v8 < 0 then goto L1d9784;
  #L1d974c.  v6:= v6 - v7 @kind int;
  #L1d974e.  v6:= (`long`) v6 @kind i2l;
  #L1d9750.  v4:= v4 + v6 @kind long;
  #L1d9752.  v9:= v9.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1d9756.  goto L1d972e;
  #L1d9758.  v4:= lcmp(v6, v1);
  #L1d975c.  if v4 <= 0 then goto L1d9780;
  #L1d9760.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d9766.  v8:= v8.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1d976a.  call `checkNotNull`(v8) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d9770.  v4:= v8.`okio.Segment.limit` @type ^`int`;
  #L1d9774.  v5:= v8.`okio.Segment.pos` @type ^`int`;
  #L1d9778.  v4:= v4 - v5 @kind int;
  #L1d977a.  v4:= (`long`) v4 @kind i2l;
  #L1d977c.  v6:= v6 - v4 @kind long;
  #L1d977e.  goto L1d9758;
  #L1d9780.  v4:= v6 @kind wide;
  #L1d9782.  v9:= v8 @kind object;
  #L1d9784.  v6:= v0.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` @kind boolean;
  #L1d9788.  if v6 == 0 then goto L1d97c6;
  #L1d978c.  call `checkNotNull`(v9) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d9792.  v6:= v9.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L1d9796.  if v6 == 0 then goto L1d97c6;
  #L1d979a.  call temp:= `unsharedCopy`(v9) @signature `Lokio/Segment;.unsharedCopy:()Lokio/Segment;` @kind virtual;
  #L1d97a0.  v6:= temp @kind object;
  #L1d97a2.  v7:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d97a6.  if v7 != v9 then goto L1d97ae;
  #L1d97aa.  v3.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L1d97ae.  call temp:= `push`(v9, v6) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1d97b4.  v9:= temp @kind object;
  #L1d97b6.  v3:= v9.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1d97ba.  call `checkNotNull`(v3) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d97c0.  call temp:= `pop`(v3) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1d97c6.  call `setSegment$okio`(v0, v9) @signature `Lokio/Buffer$UnsafeCursor;.setSegment$okio:(Lokio/Segment;)V` @kind virtual;
  #L1d97cc.  v0.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v1 @kind wide;
  #L1d97d0.  call `checkNotNull`(v9) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d97d6.  v3:= v9.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d97da.  v0.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v3 @kind object;
  #L1d97de.  v3:= v9.`okio.Segment.pos` @type ^`int`;
  #L1d97e2.  v1:= v1 - v4 @kind long;
  #L1d97e4.  v2:= (`int`) v1 @kind l2i;
  #L1d97e6.  v3:= v3 + v2 @kind int;
  #L1d97e8.  v0.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v3;
  #L1d97ec.  v1:= v9.`okio.Segment.limit` @type ^`int`;
  #L1d97f0.  v0.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v1;
  #L1d97f4.  v1:= v1 - v3 @kind int;
  #L1d97f6.  return v1;
  #L1d97f8.  v3:= 0I;
  #L1d97fa.  call `setSegment$okio`(v0, v3) @signature `Lokio/Buffer$UnsafeCursor;.setSegment$okio:(Lokio/Segment;)V` @kind virtual;
  #L1d9800.  v0.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v1 @kind wide;
  #L1d9804.  v0.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v3 @kind object;
  #L1d9808.  v0.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v4;
  #L1d980c.  v0.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v4;
  #L1d9810.  return v4;
  #L1d9812.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L1d9816.  v4:= new `java.lang.StringBuilder`;
  #L1d981a.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d9820.  v5:= "offset=" @kind object;
  #L1d9824.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d982a.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d9830.  v1:= " > size=" @kind object;
  #L1d9834.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d983a.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d9840.  v1:= temp @kind wide;
  #L1d9842.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d9848.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d984e.  v1:= temp @kind object;
  #L1d9850.  call `<init>`(v0, v1) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d9856.  throw v0;
  #L1d9858.  v0:= new `java.lang.IllegalStateException`;
  #L1d985c.  v1:= "not attached to a buffer" @kind object;
  #L1d9860.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d9866.  v1:= temp @kind object;
  #L1d9868.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d986e.  throw v0;
}
procedure `int` `commonSelect`(`okio.Buffer` v3 @kind object, `okio.Options` v4 @kind object) @signature `Lokio/internal/BufferKt;.commonSelect:(Lokio/Buffer;Lokio/Options;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1d9880.  v0:= "$this$commonSelect" @kind object;
  #L1d9884.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d988a.  v0:= "options" @kind object;
  #L1d988e.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9894.  v0:= 0I;
  #L1d9896.  v1:= 2I;
  #L1d9898.  v2:= 0I;
  #L1d989a.  call temp:= `selectPrefix$default`(v3, v4, v0, v1, v2) @signature `Lokio/internal/BufferKt;.selectPrefix$default:(Lokio/Buffer;Lokio/Options;ZILjava/lang/Object;)I` @kind static;
  #L1d98a0.  v0:= temp;
  #L1d98a2.  v1:= -1I;
  #L1d98a4.  if v0 != v1 then goto L1d98aa;
  #L1d98a8.  return v1;
  #L1d98aa.  call temp:= `getByteStrings$okio`(v4) @signature `Lokio/Options;.getByteStrings$okio:()[Lokio/ByteString;` @kind virtual;
  #L1d98b0.  v4:= temp @kind object;
  #L1d98b2.  v4:= v4[v0] @kind object;
  #L1d98b6.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1d98bc.  v4:= temp;
  #L1d98be.  v1:= (`long`) v4 @kind i2l;
  #L1d98c0.  call `skip`(v3, v1) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1d98c6.  return v0;
}
procedure `void` `commonSkip`(`okio.Buffer` v7 @kind object, `long` v8 ) @signature `Lokio/internal/BufferKt;.commonSkip:(Lokio/Buffer;J)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1dc2b4.  v0:= "$this$commonSkip" @kind object;
  #L1dc2b8.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dc2be.  v0:= 0L;
  #L1dc2c2.  v2:= lcmp(v8, v0);
  #L1dc2c6.  if v2 <= 0 then goto L1dc32e;
  #L1dc2ca.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1dc2ce.  if v0 == 0 then goto L1dc322;
  #L1dc2d2.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L1dc2d6.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L1dc2da.  v1:= v1 - v2 @kind int;
  #L1dc2dc.  v1:= (`long`) v1 @kind i2l;
  #L1dc2de.  call temp:= `min`(v8, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1dc2e4.  v1:= temp @kind wide;
  #L1dc2e6.  v2:= (`int`) v1 @kind l2i;
  #L1dc2e8.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dc2ee.  v3:= temp @kind wide;
  #L1dc2f0.  v5:= (`long`) v2 @kind i2l;
  #L1dc2f2.  v3:= v3 - v5 @kind long;
  #L1dc2f4.  call `setSize$okio`(v7, v3) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1dc2fa.  v8:= v8 - v5 @kind long;
  #L1dc2fc.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1dc300.  v1:= v1 + v2 @kind int;
  #L1dc302.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L1dc306.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1dc30a.  if v1 != v2 then goto L1dc2be;
  #L1dc30e.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1dc314.  v1:= temp @kind object;
  #L1dc316.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L1dc31a.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1dc320.  goto L1dc2be;
  #L1dc322.  v7:= new `java.io.EOFException`;
  #L1dc326.  call `<init>`(v7) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1dc32c.  throw v7;
  #L1dc32e.  return @kind void;
}
procedure `okio.ByteString` `commonSnapshot`(`okio.Buffer` v5 @kind object) @signature `Lokio/internal/BufferKt;.commonSnapshot:(Lokio/Buffer;)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1dbe84.  v0:= "$this$commonSnapshot" @kind object;
  #L1dbe88.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dbe8e.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dbe94.  v0:= temp @kind wide;
  #L1dbe96.  v2:= 2147483647I;
  #L1dbe9c.  v2:= (`long`) v2 @kind i2l;
  #L1dbe9e.  v4:= lcmp(v0, v2);
  #L1dbea2.  if v4 > 0 then goto L1dbeaa;
  #L1dbea6.  v0:= 1I;
  #L1dbea8.  goto L1dbeac;
  #L1dbeaa.  v0:= 0I;
  #L1dbeac.  if v0 == 0 then goto L1dbec4;
  #L1dbeb0.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dbeb6.  v0:= temp @kind wide;
  #L1dbeb8.  v1:= (`int`) v0 @kind l2i;
  #L1dbeba.  call temp:= `snapshot`(v5, v1) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @kind virtual;
  #L1dbec0.  v5:= temp @kind object;
  #L1dbec2.  return v5 @kind object;
  #L1dbec4.  v0:= new `java.lang.StringBuilder`;
  #L1dbec8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dbece.  v1:= "size > Int.MAX_VALUE: " @kind object;
  #L1dbed2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbed8.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dbede.  v1:= temp @kind wide;
  #L1dbee0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbee6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dbeec.  v5:= temp @kind object;
  #L1dbeee.  v0:= new `java.lang.IllegalStateException`;
  #L1dbef2.  call temp:= `toString`(v5) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dbef8.  v5:= temp @kind object;
  #L1dbefa.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dbf00.  throw v0;
}
procedure `okio.ByteString` `commonSnapshot`(`okio.Buffer` v7 @kind object, `int` v8 ) @signature `Lokio/internal/BufferKt;.commonSnapshot:(Lokio/Buffer;I)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1dbf14.  v0:= "$this$commonSnapshot" @kind object;
  #L1dbf18.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dbf1e.  if v8 != 0 then goto L1dbf28;
  #L1dbf22.  v7:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L1dbf26.  return v7 @kind object;
  #L1dbf28.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dbf2e.  v0:= temp @kind wide;
  #L1dbf30.  v2:= 0L;
  #L1dbf34.  v4:= (`long`) v8 @kind i2l;
  #L1dbf36.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1dbf3c.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1dbf40.  v1:= 0I;
  #L1dbf42.  v2:= 0I;
  #L1dbf44.  v3:= 0I;
  #L1dbf46.  if v2 >= v8 then goto L1dbf7a;
  #L1dbf4a.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1dbf50.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L1dbf54.  v5:= v0.`okio.Segment.pos` @type ^`int`;
  #L1dbf58.  if v4 == v5 then goto L1dbf6a;
  #L1dbf5c.  v4:= v4 - v5 @kind int;
  #L1dbf5e.  v2:= v2 + v4 @kind int;
  #L1dbf60.  v3:= v3 + 1;
  #L1dbf64.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1dbf68.  goto L1dbf46;
  #L1dbf6a.  v7:= new `java.lang.AssertionError`;
  #L1dbf6e.  v8:= "s.limit == s.pos" @kind object;
  #L1dbf72.  call `<init>`(v7, v8) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1dbf78.  throw v7;
  #L1dbf7a.  v0:= new `byte`[][v3];
  #L1dbf7e.  v2:= v3 * 2;
  #L1dbf82.  v2:= new `int`[v2];
  #L1dbf86.  v7:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1dbf8a.  v4:= 0I;
  #L1dbf8c.  if v1 >= v8 then goto L1dbfd0;
  #L1dbf90.  call `checkNotNull`(v7) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1dbf96.  v5:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1dbf9a.  v0[v4]:= v5 @kind object;
  #L1dbf9e.  v5:= v7.`okio.Segment.limit` @type ^`int`;
  #L1dbfa2.  v6:= v7.`okio.Segment.pos` @type ^`int`;
  #L1dbfa6.  v5:= v5 - v6 @kind int;
  #L1dbfa8.  v1:= v1 + v5 @kind int;
  #L1dbfaa.  call temp:= `min`(v1, v8) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1dbfb0.  v5:= temp;
  #L1dbfb2.  v2[v4]:= v5;
  #L1dbfb6.  v5:= v4 + v3 @kind int;
  #L1dbfba.  v6:= v7.`okio.Segment.pos` @type ^`int`;
  #L1dbfbe.  v2[v5]:= v6;
  #L1dbfc2.  v5:= 1I;
  #L1dbfc4.  v7.`okio.Segment.shared` @type ^`boolean` := v5 @kind boolean;
  #L1dbfc8.  v4:= v4 + v5 @kind int;
  #L1dbfca.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1dbfce.  goto L1dbf8c;
  #L1dbfd0.  v7:= new `okio.SegmentedByteString`;
  #L1dbfd4.  call `<init>`(v7, v0, v2) @signature `Lokio/SegmentedByteString;.<init>:([[B[I)V` @kind direct;
  #L1dbfda.  return v7 @kind object;
}
procedure `okio.Segment` `commonWritableSegment`(`okio.Buffer` v2 @kind object, `int` v3 ) @signature `Lokio/internal/BufferKt;.commonWritableSegment:(Lokio/Buffer;I)Lokio/Segment;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1dbfec.  v0:= "$this$commonWritableSegment" @kind object;
  #L1dbff0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dbff6.  v0:= 8192I;
  #L1dbffa.  v1:= 1I;
  #L1dbffc.  if v3 < v1 then goto L1dc006;
  #L1dc000.  if v3 > v0 then goto L1dc006;
  #L1dc004.  goto L1dc008;
  #L1dc006.  v1:= 0I;
  #L1dc008.  if v1 == 0 then goto L1dc05e;
  #L1dc00c.  v1:= v2.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1dc010.  if v1 != 0 then goto L1dc02a;
  #L1dc014.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L1dc01a.  v3:= temp @kind object;
  #L1dc01c.  v2.`okio.Buffer.head` @type ^`okio.Segment` := v3 @kind object;
  #L1dc020.  v3.`okio.Segment.prev` @type ^`okio.Segment` := v3 @kind object;
  #L1dc024.  v3.`okio.Segment.next` @type ^`okio.Segment` := v3 @kind object;
  #L1dc028.  return v3 @kind object;
  #L1dc02a.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1dc030.  v2:= v1.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1dc034.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1dc03a.  v1:= v2.`okio.Segment.limit` @type ^`int`;
  #L1dc03e.  v1:= v1 + v3 @kind int;
  #L1dc040.  if v1 > v0 then goto L1dc04c;
  #L1dc044.  v3:= v2.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L1dc048.  if v3 != 0 then goto L1dc05c;
  #L1dc04c.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L1dc052.  v3:= temp @kind object;
  #L1dc054.  call temp:= `push`(v2, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1dc05a.  v2:= temp @kind object;
  #L1dc05c.  return v2 @kind object;
  #L1dc05e.  v2:= new `java.lang.IllegalArgumentException`;
  #L1dc062.  v3:= "unexpected capacity" @kind object;
  #L1dc066.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dc06c.  v3:= temp @kind object;
  #L1dc06e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dc074.  throw v2;
}
procedure `okio.Buffer` `commonWrite`(`okio.Buffer` v1 @kind object, `okio.ByteString` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/internal/BufferKt;.commonWrite:(Lokio/Buffer;Lokio/ByteString;II)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1db1b8.  v0:= "$this$commonWrite" @kind object;
  #L1db1bc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db1c2.  v0:= "byteString" @kind object;
  #L1db1c6.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db1cc.  call `write$okio`(v2, v1, v3, v4) @signature `Lokio/ByteString;.write$okio:(Lokio/Buffer;II)V` @kind virtual;
  #L1db1d2.  return v1 @kind object;
}
procedure `okio.Buffer` `commonWrite`(`okio.Buffer` v5 @kind object, `okio.Source` v6 @kind object, `long` v7 ) @signature `Lokio/internal/BufferKt;.commonWrite:(Lokio/Buffer;Lokio/Source;J)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1db1e4.  v0:= "$this$commonWrite" @kind object;
  #L1db1e8.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db1ee.  v0:= "source" @kind object;
  #L1db1f2.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db1f8.  v0:= 0L;
  #L1db1fc.  v2:= lcmp(v7, v0);
  #L1db200.  if v2 <= 0 then goto L1db228;
  #L1db204.  call temp:= `read`(v6, v5, v7) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L1db20a.  v0:= temp @kind wide;
  #L1db20c.  v2:= -1L;
  #L1db210.  v4:= lcmp(v0, v2);
  #L1db214.  if v4 == 0 then goto L1db21c;
  #L1db218.  v7:= v7 - v0 @kind long;
  #L1db21a.  goto L1db1f8;
  #L1db21c.  v5:= new `java.io.EOFException`;
  #L1db220.  call `<init>`(v5) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1db226.  throw v5;
  #L1db228.  return v5 @kind object;
}
procedure `okio.Buffer` `commonWrite`(`okio.Buffer` v2 @kind object, `byte`[] v3 @kind object) @signature `Lokio/internal/BufferKt;.commonWrite:(Lokio/Buffer;[B)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1db0f8.  v0:= "$this$commonWrite" @kind object;
  #L1db0fc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db102.  v0:= "source" @kind object;
  #L1db106.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db10c.  v0:= length @variable v3;
  #L1db10e.  v1:= 0I;
  #L1db110.  call temp:= `write`(v2, v3, v1, v0) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L1db116.  v2:= temp @kind object;
  #L1db118.  return v2 @kind object;
}
procedure `okio.Buffer` `commonWrite`(`okio.Buffer` v9 @kind object, `byte`[] v10 @kind object, `int` v11 , `int` v12 ) @signature `Lokio/internal/BufferKt;.commonWrite:(Lokio/Buffer;[BII)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1db12c.  v0:= "$this$commonWrite" @kind object;
  #L1db130.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db136.  v0:= "source" @kind object;
  #L1db13a.  call `checkNotNullParameter`(v10, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db140.  v0:= length @variable v10;
  #L1db142.  v1:= (`long`) v0 @kind i2l;
  #L1db144.  v3:= (`long`) v11 @kind i2l;
  #L1db146.  v7:= (`long`) v12 @kind i2l;
  #L1db148.  v5:= v7 @kind wide;
  #L1db14a.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1db150.  v12:= v12 + v11 @kind int;
  #L1db152.  if v11 >= v12 then goto L1db194;
  #L1db156.  v0:= 1I;
  #L1db158.  call temp:= `writableSegment$okio`(v9, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1db15e.  v0:= temp @kind object;
  #L1db160.  v1:= v12 - v11 @kind int;
  #L1db164.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1db168.  v2:= v2 - 8192;
  #L1db16c.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1db172.  v1:= temp;
  #L1db174.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1db178.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L1db17c.  v4:= v11 + v1 @kind int;
  #L1db180.  call temp:= `copyInto`(v10, v2, v3, v11, v4) @signature `Lkotlin/collections/ArraysKt;.copyInto:([B[BIII)[B` @kind static;
  #L1db186.  v11:= v0.`okio.Segment.limit` @type ^`int`;
  #L1db18a.  v11:= v11 + v1 @kind int;
  #L1db18c.  v0.`okio.Segment.limit` @type ^`int` := v11;
  #L1db190.  v11:= v4;
  #L1db192.  goto L1db152;
  #L1db194.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1db19a.  v10:= temp @kind wide;
  #L1db19c.  v10:= v10 + v7 @kind long;
  #L1db19e.  call `setSize$okio`(v9, v10) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1db1a4.  return v9 @kind object;
}
procedure `void` `commonWrite`(`okio.Buffer` v8 @kind object, `okio.Buffer` v9 @kind object, `long` v10 ) @signature `Lokio/internal/BufferKt;.commonWrite:(Lokio/Buffer;Lokio/Buffer;J)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1dc340.  v0:= "$this$commonWrite" @kind object;
  #L1dc344.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dc34a.  v0:= "source" @kind object;
  #L1dc34e.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dc354.  v0:= 0I;
  #L1dc356.  if v9 == v8 then goto L1dc35e;
  #L1dc35a.  v1:= 1I;
  #L1dc35c.  goto L1dc360;
  #L1dc35e.  v1:= 0I;
  #L1dc360.  if v1 == 0 then goto L1dc4c2;
  #L1dc364.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dc36a.  v2:= temp @kind wide;
  #L1dc36c.  v4:= 0L;
  #L1dc370.  v6:= v10 @kind wide;
  #L1dc372.  call `checkOffsetAndCount`(v2, v4, v6) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1dc378.  v1:= 0L;
  #L1dc37c.  v3:= lcmp(v10, v1);
  #L1dc380.  if v3 <= 0 then goto L1dc4c0;
  #L1dc384.  v1:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1dc388.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1dc38e.  v1:= v1.`okio.Segment.limit` @type ^`int`;
  #L1dc392.  v2:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1dc396.  call `checkNotNull`(v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1dc39c.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L1dc3a0.  v1:= v1 - v2 @kind int;
  #L1dc3a2.  v1:= (`long`) v1 @kind i2l;
  #L1dc3a4.  v3:= lcmp(v10, v1);
  #L1dc3a8.  if v3 >= 0 then goto L1dc444;
  #L1dc3ac.  v1:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1dc3b0.  if v1 == 0 then goto L1dc3c0;
  #L1dc3b4.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1dc3ba.  v1:= v1.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1dc3be.  goto L1dc3c2;
  #L1dc3c0.  v1:= 0I;
  #L1dc3c2.  if v1 == 0 then goto L1dc42c;
  #L1dc3c6.  v2:= v1.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L1dc3ca.  if v2 == 0 then goto L1dc42c;
  #L1dc3ce.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L1dc3d2.  v2:= (`long`) v2 @kind i2l;
  #L1dc3d4.  v2:= v2 + v10 @kind long;
  #L1dc3d6.  v4:= v1.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L1dc3da.  if v4 == 0 then goto L1dc3e2;
  #L1dc3de.  v4:= 0I;
  #L1dc3e0.  goto L1dc3e6;
  #L1dc3e2.  v4:= v1.`okio.Segment.pos` @type ^`int`;
  #L1dc3e6.  v4:= (`long`) v4 @kind i2l;
  #L1dc3e8.  v2:= v2 - v4 @kind long;
  #L1dc3ea.  v4:= 8192I;
  #L1dc3ee.  v4:= (`long`) v4 @kind i2l;
  #L1dc3f0.  v6:= lcmp(v2, v4);
  #L1dc3f4.  if v6 > 0 then goto L1dc42c;
  #L1dc3f8.  v0:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1dc3fc.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1dc402.  v2:= (`int`) v10 @kind l2i;
  #L1dc404.  call `writeTo`(v0, v1, v2) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L1dc40a.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dc410.  v0:= temp @kind wide;
  #L1dc412.  v0:= v0 - v10 @kind long;
  #L1dc414.  call `setSize$okio`(v9, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1dc41a.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dc420.  v0:= temp @kind wide;
  #L1dc422.  v0:= v0 + v10 @kind long;
  #L1dc424.  call `setSize$okio`(v8, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1dc42a.  return @kind void;
  #L1dc42c.  v1:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1dc430.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1dc436.  v2:= (`int`) v10 @kind l2i;
  #L1dc438.  call temp:= `split`(v1, v2) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @kind virtual;
  #L1dc43e.  v1:= temp @kind object;
  #L1dc440.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L1dc444.  v1:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1dc448.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1dc44e.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L1dc452.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L1dc456.  v2:= v2 - v3 @kind int;
  #L1dc458.  v2:= (`long`) v2 @kind i2l;
  #L1dc45a.  call temp:= `pop`(v1) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1dc460.  v4:= temp @kind object;
  #L1dc462.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v4 @kind object;
  #L1dc466.  v4:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1dc46a.  if v4 != 0 then goto L1dc47c;
  #L1dc46e.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L1dc472.  v1.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L1dc476.  v1.`okio.Segment.next` @type ^`okio.Segment` := v1 @kind object;
  #L1dc47a.  goto L1dc49a;
  #L1dc47c.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1dc482.  v4:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1dc486.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1dc48c.  call temp:= `push`(v4, v1) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1dc492.  v1:= temp @kind object;
  #L1dc494.  call `compact`(v1) @signature `Lokio/Segment;.compact:()V` @kind virtual;
  #L1dc49a.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dc4a0.  v4:= temp @kind wide;
  #L1dc4a2.  v4:= v4 - v2 @kind long;
  #L1dc4a4.  call `setSize$okio`(v9, v4) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1dc4aa.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dc4b0.  v4:= temp @kind wide;
  #L1dc4b2.  v4:= v4 + v2 @kind long;
  #L1dc4b4.  call `setSize$okio`(v8, v4) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1dc4ba.  v10:= v10 - v2 @kind long;
  #L1dc4bc.  goto L1dc378;
  #L1dc4c0.  return @kind void;
  #L1dc4c2.  v8:= new `java.lang.IllegalArgumentException`;
  #L1dc4c6.  v9:= "source == this" @kind object;
  #L1dc4ca.  call temp:= `toString`(v9) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dc4d0.  v9:= temp @kind object;
  #L1dc4d2.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dc4d8.  throw v8;
}
procedure `okio.Buffer` `commonWrite$default`(`okio.Buffer` v0 @kind object, `okio.ByteString` v1 @kind object, `int` v2 , `int` v3 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lokio/internal/BufferKt;.commonWrite$default:(Lokio/Buffer;Lokio/ByteString;IIILjava/lang/Object;)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1db0b0.  v5:= v4 ^& 2;
  #L1db0b4.  if v5 == 0 then goto L1db0ba;
  #L1db0b8.  v2:= 0I;
  #L1db0ba.  v4:= v4 ^& 4;
  #L1db0be.  if v4 == 0 then goto L1db0ca;
  #L1db0c2.  call temp:= `size`(v1) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1db0c8.  v3:= temp;
  #L1db0ca.  v4:= "$this$commonWrite" @kind object;
  #L1db0ce.  call `checkNotNullParameter`(v0, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db0d4.  v4:= "byteString" @kind object;
  #L1db0d8.  call `checkNotNullParameter`(v1, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db0de.  call `write$okio`(v1, v0, v2, v3) @signature `Lokio/ByteString;.write$okio:(Lokio/Buffer;II)V` @kind virtual;
  #L1db0e4.  return v0 @kind object;
}
procedure `long` `commonWriteAll`(`okio.Buffer` v7 @kind object, `okio.Source` v8 @kind object) @signature `Lokio/internal/BufferKt;.commonWriteAll:(Lokio/Buffer;Lokio/Source;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1daed8.  v0:= "$this$commonWriteAll" @kind object;
  #L1daedc.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1daee2.  v0:= "source" @kind object;
  #L1daee6.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1daeec.  v0:= 0L;
  #L1daef0.  v2:= 8192I;
  #L1daef4.  v2:= (`long`) v2 @kind i2l;
  #L1daef6.  call temp:= `read`(v8, v7, v2) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L1daefc.  v2:= temp @kind wide;
  #L1daefe.  v4:= -1L;
  #L1daf02.  v6:= lcmp(v2, v4);
  #L1daf06.  if v6 != 0 then goto L1daf0c;
  #L1daf0a.  return v0 @kind wide;
  #L1daf0c.  v0:= v0 + v2 @kind long;
  #L1daf0e.  goto L1daef0;
}
procedure `okio.Buffer` `commonWriteByte`(`okio.Buffer` v4 @kind object, `int` v5 ) @signature `Lokio/internal/BufferKt;.commonWriteByte:(Lokio/Buffer;I)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1db23c.  v0:= "$this$commonWriteByte" @kind object;
  #L1db240.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db246.  v0:= 1I;
  #L1db248.  call temp:= `writableSegment$okio`(v4, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1db24e.  v0:= temp @kind object;
  #L1db250.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1db254.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1db258.  v3:= v2 + 1;
  #L1db25c.  v0.`okio.Segment.limit` @type ^`int` := v3;
  #L1db260.  v5:= (`byte`) v5 @kind i2b;
  #L1db262.  v1[v2]:= v5 @kind byte;
  #L1db266.  call temp:= `size`(v4) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1db26c.  v0:= temp @kind wide;
  #L1db26e.  v2:= 1L;
  #L1db272.  v0:= v0 + v2 @kind long;
  #L1db274.  call `setSize$okio`(v4, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1db27a.  return v4 @kind object;
}
procedure `okio.Buffer` `commonWriteDecimalLong`(`okio.Buffer` v12 @kind object, `long` v13 ) @signature `Lokio/internal/BufferKt;.commonWriteDecimalLong:(Lokio/Buffer;J)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1db28c.  v0:= "$this$commonWriteDecimalLong" @kind object;
  #L1db290.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db296.  v0:= 0L;
  #L1db29a.  v2:= lcmp(v13, v0);
  #L1db29e.  if v2 != 0 then goto L1db2b0;
  #L1db2a2.  v13:= 48I;
  #L1db2a6.  call temp:= `writeByte`(v12, v13) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1db2ac.  v12:= temp @kind object;
  #L1db2ae.  return v12 @kind object;
  #L1db2b0.  v3:= 0I;
  #L1db2b2.  v4:= 1I;
  #L1db2b4.  if v2 >= 0 then goto L1db2d2;
  #L1db2b8.  v13:= -v13 @kind long;
  #L1db2ba.  v2:= lcmp(v13, v0);
  #L1db2be.  if v2 >= 0 then goto L1db2d0;
  #L1db2c2.  v13:= "-9223372036854775808" @kind object;
  #L1db2c6.  call temp:= `writeUtf8`(v12, v13) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L1db2cc.  v12:= temp @kind object;
  #L1db2ce.  return v12 @kind object;
  #L1db2d0.  v3:= 1I;
  #L1db2d2.  v5:= 100000000L;
  #L1db2d8.  v2:= 10I;
  #L1db2dc.  v7:= lcmp(v13, v5);
  #L1db2e0.  if v7 >= 0 then goto L1db36e;
  #L1db2e4.  v5:= 10000L;
  #L1db2e8.  v7:= lcmp(v13, v5);
  #L1db2ec.  if v7 >= 0 then goto L1db32a;
  #L1db2f0.  v5:= 100L;
  #L1db2f4.  v7:= lcmp(v13, v5);
  #L1db2f8.  if v7 >= 0 then goto L1db312;
  #L1db2fc.  v5:= 10L;
  #L1db300.  v7:= lcmp(v13, v5);
  #L1db304.  if v7 >= 0 then goto L1db30c;
  #L1db308.  goto L1db45e;
  #L1db30c.  v4:= 2I;
  #L1db30e.  goto L1db45e;
  #L1db312.  v4:= 1000L;
  #L1db316.  v6:= lcmp(v13, v4);
  #L1db31a.  if v6 >= 0 then goto L1db324;
  #L1db31e.  v4:= 3I;
  #L1db320.  goto L1db45e;
  #L1db324.  v4:= 4I;
  #L1db326.  goto L1db45e;
  #L1db32a.  v4:= 1000000L;
  #L1db330.  v6:= lcmp(v13, v4);
  #L1db334.  if v6 >= 0 then goto L1db352;
  #L1db338.  v4:= 100000L;
  #L1db33e.  v6:= lcmp(v13, v4);
  #L1db342.  if v6 >= 0 then goto L1db34c;
  #L1db346.  v4:= 5I;
  #L1db348.  goto L1db45e;
  #L1db34c.  v4:= 6I;
  #L1db34e.  goto L1db45e;
  #L1db352.  v4:= 10000000L;
  #L1db358.  v6:= lcmp(v13, v4);
  #L1db35c.  if v6 >= 0 then goto L1db366;
  #L1db360.  v4:= 7I;
  #L1db362.  goto L1db45e;
  #L1db366.  v4:= 8I;
  #L1db36a.  goto L1db45e;
  #L1db36e.  v4:= 1000000000000L;
  #L1db378.  v6:= lcmp(v13, v4);
  #L1db37c.  if v6 >= 0 then goto L1db3ca;
  #L1db380.  v4:= 10000000000L;
  #L1db38a.  v6:= lcmp(v13, v4);
  #L1db38e.  if v6 >= 0 then goto L1db3ac;
  #L1db392.  v4:= 1000000000L;
  #L1db398.  v6:= lcmp(v13, v4);
  #L1db39c.  if v6 >= 0 then goto L1db3a6;
  #L1db3a0.  v4:= 9I;
  #L1db3a4.  goto L1db45e;
  #L1db3a6.  v4:= 10I;
  #L1db3aa.  goto L1db45e;
  #L1db3ac.  v4:= 100000000000L;
  #L1db3b6.  v6:= lcmp(v13, v4);
  #L1db3ba.  if v6 >= 0 then goto L1db3c4;
  #L1db3be.  v4:= 11I;
  #L1db3c2.  goto L1db45e;
  #L1db3c4.  v4:= 12I;
  #L1db3c8.  goto L1db45e;
  #L1db3ca.  v4:= 1000000000000000L;
  #L1db3d4.  v6:= lcmp(v13, v4);
  #L1db3d8.  if v6 >= 0 then goto L1db412;
  #L1db3dc.  v4:= 10000000000000L;
  #L1db3e6.  v6:= lcmp(v13, v4);
  #L1db3ea.  if v6 >= 0 then goto L1db3f4;
  #L1db3ee.  v4:= 13I;
  #L1db3f2.  goto L1db45e;
  #L1db3f4.  v4:= 100000000000000L;
  #L1db3fe.  v6:= lcmp(v13, v4);
  #L1db402.  if v6 >= 0 then goto L1db40c;
  #L1db406.  v4:= 14I;
  #L1db40a.  goto L1db45e;
  #L1db40c.  v4:= 15I;
  #L1db410.  goto L1db45e;
  #L1db412.  v4:= 100000000000000000L;
  #L1db41c.  v6:= lcmp(v13, v4);
  #L1db420.  if v6 >= 0 then goto L1db442;
  #L1db424.  v4:= 10000000000000000L;
  #L1db42e.  v6:= lcmp(v13, v4);
  #L1db432.  if v6 >= 0 then goto L1db43c;
  #L1db436.  v4:= 16I;
  #L1db43a.  goto L1db45e;
  #L1db43c.  v4:= 17I;
  #L1db440.  goto L1db45e;
  #L1db442.  v4:= 1000000000000000000L;
  #L1db44c.  v6:= lcmp(v13, v4);
  #L1db450.  if v6 >= 0 then goto L1db45a;
  #L1db454.  v4:= 18I;
  #L1db458.  goto L1db45e;
  #L1db45a.  v4:= 19I;
  #L1db45e.  if v3 == 0 then goto L1db466;
  #L1db462.  v4:= v4 + 1;
  #L1db466.  call temp:= `writableSegment$okio`(v12, v4) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1db46c.  v5:= temp @kind object;
  #L1db46e.  v6:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1db472.  v7:= v5.`okio.Segment.limit` @type ^`int`;
  #L1db476.  v7:= v7 + v4 @kind int;
  #L1db478.  v8:= lcmp(v13, v0);
  #L1db47c.  if v8 == 0 then goto L1db4a0;
  #L1db480.  v8:= (`long`) v2 @kind i2l;
  #L1db482.  v10:= v13 %% v8 @kind long;
  #L1db486.  v11:= (`int`) v10 @kind l2i;
  #L1db488.  v7:= v7 + -1;
  #L1db48c.  call temp:= `getHEX_DIGIT_BYTES`() @signature `Lokio/internal/BufferKt;.getHEX_DIGIT_BYTES:()[B` @kind static;
  #L1db492.  v10:= temp @kind object;
  #L1db494.  v10:= v10[v11] @kind byte;
  #L1db498.  v6[v7]:= v10 @kind byte;
  #L1db49c.  v13:= v13 / v8 @kind long;
  #L1db49e.  goto L1db478;
  #L1db4a0.  if v3 == 0 then goto L1db4b2;
  #L1db4a4.  v7:= v7 + -1;
  #L1db4a8.  v13:= 45I;
  #L1db4ac.  v13:= (`byte`) v13 @kind i2b;
  #L1db4ae.  v6[v7]:= v13 @kind byte;
  #L1db4b2.  v13:= v5.`okio.Segment.limit` @type ^`int`;
  #L1db4b6.  v13:= v13 + v4 @kind int;
  #L1db4b8.  v5.`okio.Segment.limit` @type ^`int` := v13;
  #L1db4bc.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1db4c2.  v13:= temp @kind wide;
  #L1db4c4.  v0:= (`long`) v4 @kind i2l;
  #L1db4c6.  v13:= v13 + v0 @kind long;
  #L1db4c8.  call `setSize$okio`(v12, v13) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1db4ce.  return v12 @kind object;
}
procedure `okio.Buffer` `commonWriteHexadecimalUnsignedLong`(`okio.Buffer` v12 @kind object, `long` v13 ) @signature `Lokio/internal/BufferKt;.commonWriteHexadecimalUnsignedLong:(Lokio/Buffer;J)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1db4e0.  v0:= "$this$commonWriteHexadecimalUnsignedLong" @kind object;
  #L1db4e4.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db4ea.  v0:= 0L;
  #L1db4ee.  v2:= lcmp(v13, v0);
  #L1db4f2.  if v2 != 0 then goto L1db504;
  #L1db4f6.  v13:= 48I;
  #L1db4fa.  call temp:= `writeByte`(v12, v13) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1db500.  v12:= temp @kind object;
  #L1db502.  return v12 @kind object;
  #L1db504.  v0:= 1I;
  #L1db506.  v1:= v13 ^>> v0 @kind long;
  #L1db50a.  v1:= v1 ^| v13 @kind long;
  #L1db50c.  v3:= 2I;
  #L1db50e.  v4:= v1 ^>> v3 @kind long;
  #L1db512.  v1:= v1 ^| v4 @kind long;
  #L1db514.  v4:= 4I;
  #L1db516.  v5:= v1 ^>> v4 @kind long;
  #L1db51a.  v1:= v1 ^| v5 @kind long;
  #L1db51c.  v5:= 8I;
  #L1db520.  v6:= v1 ^>> v5 @kind long;
  #L1db524.  v1:= v1 ^| v6 @kind long;
  #L1db526.  v6:= 16I;
  #L1db52a.  v7:= v1 ^>> v6 @kind long;
  #L1db52e.  v1:= v1 ^| v7 @kind long;
  #L1db530.  v7:= 32I;
  #L1db534.  v8:= v1 ^>> v7 @kind long;
  #L1db538.  v1:= v1 ^| v8 @kind long;
  #L1db53a.  v8:= v1 ^>> v0 @kind long;
  #L1db53e.  v10:= 1.1945305291614955E103D;
  #L1db548.  v8:= v8 ^& v10 @kind long;
  #L1db54a.  v1:= v1 - v8 @kind long;
  #L1db54c.  v8:= v1 ^>> v3 @kind long;
  #L1db550.  v10:= 4.667261458395856E-62D;
  #L1db55a.  v8:= v8 ^& v10 @kind long;
  #L1db55c.  v1:= v1 ^& v10 @kind long;
  #L1db55e.  v8:= v8 + v1 @kind long;
  #L1db560.  v1:= v8 ^>> v4 @kind long;
  #L1db564.  v1:= v1 + v8 @kind long;
  #L1db566.  v8:= 3.815736827118017E-236D;
  #L1db570.  v1:= v1 ^& v8 @kind long;
  #L1db572.  v8:= v1 ^>> v5 @kind long;
  #L1db576.  v1:= v1 + v8 @kind long;
  #L1db578.  v5:= v1 ^>> v6 @kind long;
  #L1db57c.  v1:= v1 + v5 @kind long;
  #L1db57e.  v5:= 63L;
  #L1db582.  v8:= v1 ^& v5 @kind long;
  #L1db586.  v1:= v1 ^>> v7 @kind long;
  #L1db588.  v1:= v1 ^& v5 @kind long;
  #L1db58a.  v8:= v8 + v1 @kind long;
  #L1db58c.  v1:= 3I;
  #L1db58e.  v1:= (`long`) v1 @kind i2l;
  #L1db590.  v8:= v8 + v1 @kind long;
  #L1db592.  v1:= (`long`) v4 @kind i2l;
  #L1db594.  v8:= v8 / v1 @kind long;
  #L1db596.  v1:= (`int`) v8 @kind l2i;
  #L1db598.  call temp:= `writableSegment$okio`(v12, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1db59e.  v2:= temp @kind object;
  #L1db5a0.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1db5a4.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L1db5a8.  v6:= v5 + v1 @kind int;
  #L1db5ac.  v6:= v6 - v0 @kind int;
  #L1db5ae.  if v6 < v5 then goto L1db5d2;
  #L1db5b2.  call temp:= `getHEX_DIGIT_BYTES`() @signature `Lokio/internal/BufferKt;.getHEX_DIGIT_BYTES:()[B` @kind static;
  #L1db5b8.  v0:= temp @kind object;
  #L1db5ba.  v7:= 15L;
  #L1db5be.  v7:= v7 ^& v13 @kind long;
  #L1db5c0.  v8:= (`int`) v7 @kind l2i;
  #L1db5c2.  v0:= v0[v8] @kind byte;
  #L1db5c6.  v3[v6]:= v0 @kind byte;
  #L1db5ca.  v13:= v13 ^>> v4 @kind long;
  #L1db5cc.  v6:= v6 + -1;
  #L1db5d0.  goto L1db5ae;
  #L1db5d2.  v13:= v2.`okio.Segment.limit` @type ^`int`;
  #L1db5d6.  v13:= v13 + v1 @kind int;
  #L1db5d8.  v2.`okio.Segment.limit` @type ^`int` := v13;
  #L1db5dc.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1db5e2.  v13:= temp @kind wide;
  #L1db5e4.  v0:= (`long`) v1 @kind i2l;
  #L1db5e6.  v13:= v13 + v0 @kind long;
  #L1db5e8.  call `setSize$okio`(v12, v13) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1db5ee.  return v12 @kind object;
}
procedure `okio.Buffer` `commonWriteInt`(`okio.Buffer` v5 @kind object, `int` v6 ) @signature `Lokio/internal/BufferKt;.commonWriteInt:(Lokio/Buffer;I)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1db600.  v0:= "$this$commonWriteInt" @kind object;
  #L1db604.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db60a.  v0:= 4I;
  #L1db60c.  call temp:= `writableSegment$okio`(v5, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1db612.  v0:= temp @kind object;
  #L1db614.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1db618.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1db61c.  v3:= v2 + 1;
  #L1db620.  v4:= v6 ^>> 24;
  #L1db624.  v4:= v4 ^& 255;
  #L1db628.  v4:= (`byte`) v4 @kind i2b;
  #L1db62a.  v1[v2]:= v4 @kind byte;
  #L1db62e.  v2:= v3 + 1;
  #L1db632.  v4:= v6 ^>> 16;
  #L1db636.  v4:= v4 ^& 255;
  #L1db63a.  v4:= (`byte`) v4 @kind i2b;
  #L1db63c.  v1[v3]:= v4 @kind byte;
  #L1db640.  v3:= v2 + 1;
  #L1db644.  v4:= v6 ^>> 8;
  #L1db648.  v4:= v4 ^& 255;
  #L1db64c.  v4:= (`byte`) v4 @kind i2b;
  #L1db64e.  v1[v2]:= v4 @kind byte;
  #L1db652.  v2:= v3 + 1;
  #L1db656.  v6:= v6 ^& 255;
  #L1db65a.  v6:= (`byte`) v6 @kind i2b;
  #L1db65c.  v1[v3]:= v6 @kind byte;
  #L1db660.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L1db664.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1db66a.  v0:= temp @kind wide;
  #L1db66c.  v2:= 4L;
  #L1db670.  v0:= v0 + v2 @kind long;
  #L1db672.  call `setSize$okio`(v5, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1db678.  return v5 @kind object;
}
procedure `okio.Buffer` `commonWriteLong`(`okio.Buffer` v9 @kind object, `long` v10 ) @signature `Lokio/internal/BufferKt;.commonWriteLong:(Lokio/Buffer;J)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1db68c.  v0:= "$this$commonWriteLong" @kind object;
  #L1db690.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db696.  v0:= 8I;
  #L1db69a.  call temp:= `writableSegment$okio`(v9, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1db6a0.  v1:= temp @kind object;
  #L1db6a2.  v2:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1db6a6.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L1db6aa.  v4:= v3 + 1;
  #L1db6ae.  v5:= 56I;
  #L1db6b2.  v5:= v10 ^>> v5 @kind long;
  #L1db6b6.  v7:= 255L;
  #L1db6ba.  v5:= v5 ^& v7 @kind long;
  #L1db6bc.  v6:= (`int`) v5 @kind l2i;
  #L1db6be.  v5:= (`byte`) v6 @kind i2b;
  #L1db6c0.  v2[v3]:= v5 @kind byte;
  #L1db6c4.  v3:= v4 + 1;
  #L1db6c8.  v5:= 48I;
  #L1db6cc.  v5:= v10 ^>> v5 @kind long;
  #L1db6d0.  v5:= v5 ^& v7 @kind long;
  #L1db6d2.  v6:= (`int`) v5 @kind l2i;
  #L1db6d4.  v5:= (`byte`) v6 @kind i2b;
  #L1db6d6.  v2[v4]:= v5 @kind byte;
  #L1db6da.  v4:= v3 + 1;
  #L1db6de.  v5:= 40I;
  #L1db6e2.  v5:= v10 ^>> v5 @kind long;
  #L1db6e6.  v5:= v5 ^& v7 @kind long;
  #L1db6e8.  v6:= (`int`) v5 @kind l2i;
  #L1db6ea.  v5:= (`byte`) v6 @kind i2b;
  #L1db6ec.  v2[v3]:= v5 @kind byte;
  #L1db6f0.  v3:= v4 + 1;
  #L1db6f4.  v5:= 32I;
  #L1db6f8.  v5:= v10 ^>> v5 @kind long;
  #L1db6fc.  v5:= v5 ^& v7 @kind long;
  #L1db6fe.  v6:= (`int`) v5 @kind l2i;
  #L1db700.  v5:= (`byte`) v6 @kind i2b;
  #L1db702.  v2[v4]:= v5 @kind byte;
  #L1db706.  v4:= v3 + 1;
  #L1db70a.  v5:= 24I;
  #L1db70e.  v5:= v10 ^>> v5 @kind long;
  #L1db712.  v5:= v5 ^& v7 @kind long;
  #L1db714.  v6:= (`int`) v5 @kind l2i;
  #L1db716.  v5:= (`byte`) v6 @kind i2b;
  #L1db718.  v2[v3]:= v5 @kind byte;
  #L1db71c.  v3:= v4 + 1;
  #L1db720.  v5:= 16I;
  #L1db724.  v5:= v10 ^>> v5 @kind long;
  #L1db728.  v5:= v5 ^& v7 @kind long;
  #L1db72a.  v6:= (`int`) v5 @kind l2i;
  #L1db72c.  v5:= (`byte`) v6 @kind i2b;
  #L1db72e.  v2[v4]:= v5 @kind byte;
  #L1db732.  v4:= v3 + 1;
  #L1db736.  v5:= v10 ^>> v0 @kind long;
  #L1db73a.  v5:= v5 ^& v7 @kind long;
  #L1db73c.  v0:= (`int`) v5 @kind l2i;
  #L1db73e.  v0:= (`byte`) v0 @kind i2b;
  #L1db740.  v2[v3]:= v0 @kind byte;
  #L1db744.  v0:= v4 + 1;
  #L1db748.  v10:= v10 ^& v7 @kind long;
  #L1db74a.  v11:= (`int`) v10 @kind l2i;
  #L1db74c.  v10:= (`byte`) v11 @kind i2b;
  #L1db74e.  v2[v4]:= v10 @kind byte;
  #L1db752.  v1.`okio.Segment.limit` @type ^`int` := v0;
  #L1db756.  call temp:= `size`(v9) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1db75c.  v10:= temp @kind wide;
  #L1db75e.  v0:= 8L;
  #L1db762.  v10:= v10 + v0 @kind long;
  #L1db764.  call `setSize$okio`(v9, v10) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1db76a.  return v9 @kind object;
}
procedure `okio.Buffer` `commonWriteShort`(`okio.Buffer` v5 @kind object, `int` v6 ) @signature `Lokio/internal/BufferKt;.commonWriteShort:(Lokio/Buffer;I)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1db77c.  v0:= "$this$commonWriteShort" @kind object;
  #L1db780.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db786.  v0:= 2I;
  #L1db788.  call temp:= `writableSegment$okio`(v5, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1db78e.  v0:= temp @kind object;
  #L1db790.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1db794.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1db798.  v3:= v2 + 1;
  #L1db79c.  v4:= v6 ^>> 8;
  #L1db7a0.  v4:= v4 ^& 255;
  #L1db7a4.  v4:= (`byte`) v4 @kind i2b;
  #L1db7a6.  v1[v2]:= v4 @kind byte;
  #L1db7aa.  v2:= v3 + 1;
  #L1db7ae.  v6:= v6 ^& 255;
  #L1db7b2.  v6:= (`byte`) v6 @kind i2b;
  #L1db7b4.  v1[v3]:= v6 @kind byte;
  #L1db7b8.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L1db7bc.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1db7c2.  v0:= temp @kind wide;
  #L1db7c4.  v2:= 2L;
  #L1db7c8.  v0:= v0 + v2 @kind long;
  #L1db7ca.  call `setSize$okio`(v5, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1db7d0.  return v5 @kind object;
}
procedure `okio.Buffer` `commonWriteUtf8`(`okio.Buffer` v11 @kind object, `java.lang.String` v12 @kind object, `int` v13 , `int` v14 ) @signature `Lokio/internal/BufferKt;.commonWriteUtf8:(Lokio/Buffer;Ljava/lang/String;II)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1db7e4.  v0:= "$this$commonWriteUtf8" @kind object;
  #L1db7e8.  call `checkNotNullParameter`(v11, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db7ee.  v0:= "string" @kind object;
  #L1db7f2.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1db7f8.  v0:= 0I;
  #L1db7fa.  v1:= 1I;
  #L1db7fc.  if v13 < 0 then goto L1db804;
  #L1db800.  v2:= 1I;
  #L1db802.  goto L1db806;
  #L1db804.  v2:= 0I;
  #L1db806.  if v2 == 0 then goto L1dbadc;
  #L1db80a.  if v14 < v13 then goto L1db812;
  #L1db80e.  v2:= 1I;
  #L1db810.  goto L1db814;
  #L1db812.  v2:= 0I;
  #L1db814.  if v2 == 0 then goto L1dba96;
  #L1db818.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1db81e.  v2:= temp;
  #L1db820.  if v14 > v2 then goto L1db828;
  #L1db824.  v2:= 1I;
  #L1db826.  goto L1db82a;
  #L1db828.  v2:= 0I;
  #L1db82a.  if v2 == 0 then goto L1dba48;
  #L1db82e.  if v13 >= v14 then goto L1dba46;
  #L1db832.  call temp:= `charAt`(v12, v13) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1db838.  v2:= temp;
  #L1db83a.  v3:= 128I;
  #L1db83e.  if v2 >= v3 then goto L1db8b2;
  #L1db842.  call temp:= `writableSegment$okio`(v11, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1db848.  v4:= temp @kind object;
  #L1db84a.  v5:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1db84e.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L1db852.  v6:= v6 - v13 @kind int;
  #L1db854.  v7:= v6 - 8192;
  #L1db858.  call temp:= `min`(v14, v7) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1db85e.  v7:= temp;
  #L1db860.  v8:= v13 + 1;
  #L1db864.  v13:= v13 + v6 @kind int;
  #L1db866.  v2:= (`byte`) v2 @kind i2b;
  #L1db868.  v5[v13]:= v2 @kind byte;
  #L1db86c.  if v8 >= v7 then goto L1db88e;
  #L1db870.  call temp:= `charAt`(v12, v8) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1db876.  v13:= temp;
  #L1db878.  if v13 < v3 then goto L1db87e;
  #L1db87c.  goto L1db88e;
  #L1db87e.  v2:= v8 + 1;
  #L1db882.  v8:= v8 + v6 @kind int;
  #L1db884.  v13:= (`byte`) v13 @kind i2b;
  #L1db886.  v5[v8]:= v13 @kind byte;
  #L1db88a.  v8:= v2;
  #L1db88c.  goto L1db86c;
  #L1db88e.  v6:= v6 + v8 @kind int;
  #L1db890.  v13:= v4.`okio.Segment.limit` @type ^`int`;
  #L1db894.  v6:= v6 - v13 @kind int;
  #L1db896.  v13:= v13 + v6 @kind int;
  #L1db898.  v4.`okio.Segment.limit` @type ^`int` := v13;
  #L1db89c.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1db8a2.  v2:= temp @kind wide;
  #L1db8a4.  v4:= (`long`) v6 @kind i2l;
  #L1db8a6.  v2:= v2 + v4 @kind long;
  #L1db8a8.  call `setSize$okio`(v11, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1db8ae.  v13:= v8;
  #L1db8b0.  goto L1db82e;
  #L1db8b2.  v4:= 2048I;
  #L1db8b6.  if v2 >= v4 then goto L1db90a;
  #L1db8ba.  v4:= 2I;
  #L1db8bc.  call temp:= `writableSegment$okio`(v11, v4) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1db8c2.  v5:= temp @kind object;
  #L1db8c4.  v6:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1db8c8.  v7:= v5.`okio.Segment.limit` @type ^`int`;
  #L1db8cc.  v8:= v2 ^> 6;
  #L1db8d0.  v8:= v8 ^| 192;
  #L1db8d4.  v8:= (`byte`) v8 @kind i2b;
  #L1db8d6.  v6[v7]:= v8 @kind byte;
  #L1db8da.  v8:= v7 + 1;
  #L1db8de.  v2:= v2 ^& 63;
  #L1db8e2.  v2:= v2 ^| v3 @kind int;
  #L1db8e4.  v2:= (`byte`) v2 @kind i2b;
  #L1db8e6.  v6[v8]:= v2 @kind byte;
  #L1db8ea.  v7:= v7 + v4 @kind int;
  #L1db8ec.  v5.`okio.Segment.limit` @type ^`int` := v7;
  #L1db8f0.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1db8f6.  v2:= temp @kind wide;
  #L1db8f8.  v4:= 2L;
  #L1db8fc.  v2:= v2 + v4 @kind long;
  #L1db8fe.  call `setSize$okio`(v11, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1db904.  v13:= v13 + 1;
  #L1db908.  goto L1db82e;
  #L1db90a.  v4:= 55296I;
  #L1db910.  v5:= 63I;
  #L1db914.  if v2 < v4 then goto L1db9e6;
  #L1db918.  v4:= 57343I;
  #L1db91e.  if v2 <= v4 then goto L1db924;
  #L1db922.  goto L1db9e6;
  #L1db924.  v6:= v13 + 1;
  #L1db928.  if v6 >= v14 then goto L1db936;
  #L1db92c.  call temp:= `charAt`(v12, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1db932.  v7:= temp;
  #L1db934.  goto L1db938;
  #L1db936.  v7:= 0I;
  #L1db938.  v8:= 56319I;
  #L1db93e.  if v2 > v8 then goto L1db9da;
  #L1db942.  v8:= 56320I;
  #L1db948.  if v8 > v7 then goto L1db9da;
  #L1db94c.  if v4 >= v7 then goto L1db952;
  #L1db950.  goto L1db9da;
  #L1db952.  v4:= 65536I;
  #L1db956.  v2:= v2 ^& 1023;
  #L1db95a.  v2:= v2 ^< 10;
  #L1db95e.  v6:= v7 ^& 1023;
  #L1db962.  v2:= v2 ^| v6 @kind int;
  #L1db964.  v2:= v2 + v4 @kind int;
  #L1db966.  v4:= 4I;
  #L1db968.  call temp:= `writableSegment$okio`(v11, v4) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1db96e.  v6:= temp @kind object;
  #L1db970.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1db974.  v8:= v6.`okio.Segment.limit` @type ^`int`;
  #L1db978.  v9:= v2 ^> 18;
  #L1db97c.  v9:= v9 ^| 240;
  #L1db980.  v9:= (`byte`) v9 @kind i2b;
  #L1db982.  v7[v8]:= v9 @kind byte;
  #L1db986.  v9:= v8 + 1;
  #L1db98a.  v10:= v2 ^> 12;
  #L1db98e.  v10:= v10 ^& v5 @kind int;
  #L1db990.  v10:= v10 ^| v3 @kind int;
  #L1db992.  v10:= (`byte`) v10 @kind i2b;
  #L1db994.  v7[v9]:= v10 @kind byte;
  #L1db998.  v9:= v8 + 2;
  #L1db99c.  v10:= v2 ^> 6;
  #L1db9a0.  v10:= v10 ^& v5 @kind int;
  #L1db9a2.  v10:= v10 ^| v3 @kind int;
  #L1db9a4.  v10:= (`byte`) v10 @kind i2b;
  #L1db9a6.  v7[v9]:= v10 @kind byte;
  #L1db9aa.  v9:= v8 + 3;
  #L1db9ae.  v2:= v2 ^& v5 @kind int;
  #L1db9b0.  v2:= v2 ^| v3 @kind int;
  #L1db9b2.  v2:= (`byte`) v2 @kind i2b;
  #L1db9b4.  v7[v9]:= v2 @kind byte;
  #L1db9b8.  v8:= v8 + v4 @kind int;
  #L1db9ba.  v6.`okio.Segment.limit` @type ^`int` := v8;
  #L1db9be.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1db9c4.  v2:= temp @kind wide;
  #L1db9c6.  v4:= 4L;
  #L1db9ca.  v2:= v2 + v4 @kind long;
  #L1db9cc.  call `setSize$okio`(v11, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1db9d2.  v13:= v13 + 2;
  #L1db9d6.  goto L1db82e;
  #L1db9da.  call temp:= `writeByte`(v11, v5) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1db9e0.  v13:= v6;
  #L1db9e2.  goto L1db82e;
  #L1db9e6.  v4:= 3I;
  #L1db9e8.  call temp:= `writableSegment$okio`(v11, v4) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1db9ee.  v6:= temp @kind object;
  #L1db9f0.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1db9f4.  v8:= v6.`okio.Segment.limit` @type ^`int`;
  #L1db9f8.  v9:= v2 ^> 12;
  #L1db9fc.  v9:= v9 ^| 224;
  #L1dba00.  v9:= (`byte`) v9 @kind i2b;
  #L1dba02.  v7[v8]:= v9 @kind byte;
  #L1dba06.  v9:= v8 + 1;
  #L1dba0a.  v10:= v2 ^> 6;
  #L1dba0e.  v5:= v5 ^& v10 @kind int;
  #L1dba10.  v5:= v5 ^| v3 @kind int;
  #L1dba12.  v5:= (`byte`) v5 @kind i2b;
  #L1dba14.  v7[v9]:= v5 @kind byte;
  #L1dba18.  v5:= v8 + 2;
  #L1dba1c.  v2:= v2 ^& 63;
  #L1dba20.  v2:= v2 ^| v3 @kind int;
  #L1dba22.  v2:= (`byte`) v2 @kind i2b;
  #L1dba24.  v7[v5]:= v2 @kind byte;
  #L1dba28.  v8:= v8 + v4 @kind int;
  #L1dba2a.  v6.`okio.Segment.limit` @type ^`int` := v8;
  #L1dba2e.  call temp:= `size`(v11) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dba34.  v2:= temp @kind wide;
  #L1dba36.  v4:= 3L;
  #L1dba3a.  v2:= v2 + v4 @kind long;
  #L1dba3c.  call `setSize$okio`(v11, v2) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1dba42.  goto L1db904;
  #L1dba46.  return v11 @kind object;
  #L1dba48.  v11:= new `java.lang.StringBuilder`;
  #L1dba4c.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dba52.  v13:= "endIndex > string.length: " @kind object;
  #L1dba56.  call temp:= `append`(v11, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dba5c.  call temp:= `append`(v11, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dba62.  v13:= " > " @kind object;
  #L1dba66.  call temp:= `append`(v11, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dba6c.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1dba72.  v12:= temp;
  #L1dba74.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dba7a.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dba80.  v11:= temp @kind object;
  #L1dba82.  v12:= new `java.lang.IllegalArgumentException`;
  #L1dba86.  call temp:= `toString`(v11) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dba8c.  v11:= temp @kind object;
  #L1dba8e.  call `<init>`(v12, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dba94.  throw v12;
  #L1dba96.  v11:= new `java.lang.StringBuilder`;
  #L1dba9a.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dbaa0.  v12:= "endIndex < beginIndex: " @kind object;
  #L1dbaa4.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbaaa.  call temp:= `append`(v11, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbab0.  v12:= " < " @kind object;
  #L1dbab4.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbaba.  call temp:= `append`(v11, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbac0.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dbac6.  v11:= temp @kind object;
  #L1dbac8.  v12:= new `java.lang.IllegalArgumentException`;
  #L1dbacc.  call temp:= `toString`(v11) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dbad2.  v11:= temp @kind object;
  #L1dbad4.  call `<init>`(v12, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dbada.  throw v12;
  #L1dbadc.  v11:= new `java.lang.StringBuilder`;
  #L1dbae0.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dbae6.  v12:= "beginIndex < 0: " @kind object;
  #L1dbaea.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbaf0.  call temp:= `append`(v11, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbaf6.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dbafc.  v11:= temp @kind object;
  #L1dbafe.  v12:= new `java.lang.IllegalArgumentException`;
  #L1dbb02.  call temp:= `toString`(v11) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dbb08.  v11:= temp @kind object;
  #L1dbb0a.  call `<init>`(v12, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dbb10.  throw v12;
}
procedure `okio.Buffer` `commonWriteUtf8CodePoint`(`okio.Buffer` v8 @kind object, `int` v9 ) @signature `Lokio/internal/BufferKt;.commonWriteUtf8CodePoint:(Lokio/Buffer;I)Lokio/Buffer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1dbb24.  v0:= "$this$commonWriteUtf8CodePoint" @kind object;
  #L1dbb28.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dbb2e.  v0:= 128I;
  #L1dbb32.  if v9 >= v0 then goto L1dbb40;
  #L1dbb36.  call temp:= `writeByte`(v8, v9) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1dbb3c.  goto L1dbc90;
  #L1dbb40.  v1:= 2048I;
  #L1dbb44.  v2:= 63I;
  #L1dbb48.  if v9 >= v1 then goto L1dbb98;
  #L1dbb4c.  v1:= 2I;
  #L1dbb4e.  call temp:= `writableSegment$okio`(v8, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1dbb54.  v3:= temp @kind object;
  #L1dbb56.  v4:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1dbb5a.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L1dbb5e.  v6:= v9 ^> 6;
  #L1dbb62.  v6:= v6 ^| 192;
  #L1dbb66.  v6:= (`byte`) v6 @kind i2b;
  #L1dbb68.  v4[v5]:= v6 @kind byte;
  #L1dbb6c.  v6:= v5 + 1;
  #L1dbb70.  v9:= v9 ^& v2 @kind int;
  #L1dbb72.  v9:= v9 ^| v0 @kind int;
  #L1dbb74.  v9:= (`byte`) v9 @kind i2b;
  #L1dbb76.  v4[v6]:= v9 @kind byte;
  #L1dbb7a.  v5:= v5 + v1 @kind int;
  #L1dbb7c.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L1dbb80.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dbb86.  v0:= temp @kind wide;
  #L1dbb88.  v2:= 2L;
  #L1dbb8c.  v0:= v0 + v2 @kind long;
  #L1dbb8e.  call `setSize$okio`(v8, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1dbb94.  goto L1dbc90;
  #L1dbb98.  v1:= 57343I;
  #L1dbb9e.  v3:= 55296I;
  #L1dbba4.  if v3 <= v9 then goto L1dbbaa;
  #L1dbba8.  goto L1dbbb6;
  #L1dbbaa.  if v1 < v9 then goto L1dbbb6;
  #L1dbbae.  call temp:= `writeByte`(v8, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1dbbb4.  goto L1dbc90;
  #L1dbbb6.  v1:= 65536I;
  #L1dbbba.  if v9 >= v1 then goto L1dbc1a;
  #L1dbbbe.  v1:= 3I;
  #L1dbbc0.  call temp:= `writableSegment$okio`(v8, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1dbbc6.  v3:= temp @kind object;
  #L1dbbc8.  v4:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1dbbcc.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L1dbbd0.  v6:= v9 ^> 12;
  #L1dbbd4.  v6:= v6 ^| 224;
  #L1dbbd8.  v6:= (`byte`) v6 @kind i2b;
  #L1dbbda.  v4[v5]:= v6 @kind byte;
  #L1dbbde.  v6:= v5 + 1;
  #L1dbbe2.  v7:= v9 ^> 6;
  #L1dbbe6.  v7:= v7 ^& v2 @kind int;
  #L1dbbe8.  v7:= v7 ^| v0 @kind int;
  #L1dbbea.  v7:= (`byte`) v7 @kind i2b;
  #L1dbbec.  v4[v6]:= v7 @kind byte;
  #L1dbbf0.  v6:= v5 + 2;
  #L1dbbf4.  v9:= v9 ^& v2 @kind int;
  #L1dbbf6.  v9:= v9 ^| v0 @kind int;
  #L1dbbf8.  v9:= (`byte`) v9 @kind i2b;
  #L1dbbfa.  v4[v6]:= v9 @kind byte;
  #L1dbbfe.  v5:= v5 + v1 @kind int;
  #L1dbc00.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L1dbc04.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dbc0a.  v0:= temp @kind wide;
  #L1dbc0c.  v2:= 3L;
  #L1dbc10.  v0:= v0 + v2 @kind long;
  #L1dbc12.  call `setSize$okio`(v8, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1dbc18.  goto L1dbc90;
  #L1dbc1a.  v1:= 1114111I;
  #L1dbc20.  if v9 > v1 then goto L1dbc92;
  #L1dbc24.  v1:= 4I;
  #L1dbc26.  call temp:= `writableSegment$okio`(v8, v1) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1dbc2c.  v3:= temp @kind object;
  #L1dbc2e.  v4:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1dbc32.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L1dbc36.  v6:= v9 ^> 18;
  #L1dbc3a.  v6:= v6 ^| 240;
  #L1dbc3e.  v6:= (`byte`) v6 @kind i2b;
  #L1dbc40.  v4[v5]:= v6 @kind byte;
  #L1dbc44.  v6:= v5 + 1;
  #L1dbc48.  v7:= v9 ^> 12;
  #L1dbc4c.  v7:= v7 ^& v2 @kind int;
  #L1dbc4e.  v7:= v7 ^| v0 @kind int;
  #L1dbc50.  v7:= (`byte`) v7 @kind i2b;
  #L1dbc52.  v4[v6]:= v7 @kind byte;
  #L1dbc56.  v6:= v5 + 2;
  #L1dbc5a.  v7:= v9 ^> 6;
  #L1dbc5e.  v7:= v7 ^& v2 @kind int;
  #L1dbc60.  v7:= v7 ^| v0 @kind int;
  #L1dbc62.  v7:= (`byte`) v7 @kind i2b;
  #L1dbc64.  v4[v6]:= v7 @kind byte;
  #L1dbc68.  v6:= v5 + 3;
  #L1dbc6c.  v9:= v9 ^& v2 @kind int;
  #L1dbc6e.  v9:= v9 ^| v0 @kind int;
  #L1dbc70.  v9:= (`byte`) v9 @kind i2b;
  #L1dbc72.  v4[v6]:= v9 @kind byte;
  #L1dbc76.  v5:= v5 + v1 @kind int;
  #L1dbc78.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L1dbc7c.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dbc82.  v0:= temp @kind wide;
  #L1dbc84.  v2:= 4L;
  #L1dbc88.  v0:= v0 + v2 @kind long;
  #L1dbc8a.  call `setSize$okio`(v8, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1dbc90.  return v8 @kind object;
  #L1dbc92.  v8:= new `java.lang.IllegalArgumentException`;
  #L1dbc96.  v0:= new `java.lang.StringBuilder`;
  #L1dbc9a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dbca0.  v1:= "Unexpected code point: 0x" @kind object;
  #L1dbca4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbcaa.  call temp:= `toHexString`(v9) @signature `Lokio/-Util;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L1dbcb0.  v9:= temp @kind object;
  #L1dbcb2.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dbcb8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dbcbe.  v9:= temp @kind object;
  #L1dbcc0.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dbcc6.  throw v8;
}
procedure `byte`[] `getHEX_DIGIT_BYTES`() @signature `Lokio/internal/BufferKt;.getHEX_DIGIT_BYTES:()[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1d91ec.  v0:= `@@okio.internal.BufferKt.a` @type ^`byte`[] @kind object;
  #L1d91f0.  return v0 @kind object;
}
procedure `boolean` `rangeEquals`(`okio.Segment` v5 @kind object, `int` v6 , `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lokio/internal/BufferKt;.rangeEquals:(Lokio/Segment;I[BII)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d8f30.  v0:= "segment" @kind object;
  #L1d8f34.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8f3a.  v0:= "bytes" @kind object;
  #L1d8f3e.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d8f44.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L1d8f48.  v1:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d8f4c.  if v8 >= v9 then goto L1d8f8c;
  #L1d8f50.  if v6 != v0 then goto L1d8f72;
  #L1d8f54.  v5:= v5.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1d8f58.  call `checkNotNull`(v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d8f5e.  v6:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d8f62.  v0:= v5.`okio.Segment.pos` @type ^`int`;
  #L1d8f66.  v1:= v5.`okio.Segment.limit` @type ^`int`;
  #L1d8f6a.  v4:= v1;
  #L1d8f6c.  v1:= v6 @kind object;
  #L1d8f6e.  v6:= v0;
  #L1d8f70.  v0:= v4;
  #L1d8f72.  v2:= v1[v6] @kind byte;
  #L1d8f76.  v3:= v7[v8] @kind byte;
  #L1d8f7a.  if v2 == v3 then goto L1d8f82;
  #L1d8f7e.  v5:= 0I;
  #L1d8f80.  return v5;
  #L1d8f82.  v6:= v6 + 1;
  #L1d8f86.  v8:= v8 + 1;
  #L1d8f8a.  goto L1d8f4c;
  #L1d8f8c.  v5:= 1I;
  #L1d8f8e.  return v5;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v6 @kind object, `long` v7 ) @signature `Lokio/internal/BufferKt;.readUtf8Line:(Lokio/Buffer;J)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1d9e48.  v0:= "$this$readUtf8Line" @kind object;
  #L1d9e4c.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9e52.  v0:= 1L;
  #L1d9e56.  v2:= 0L;
  #L1d9e5a.  v4:= lcmp(v7, v2);
  #L1d9e5e.  if v4 <= 0 then goto L1d9e8c;
  #L1d9e62.  v2:= v7 - v0 @kind long;
  #L1d9e66.  call temp:= `getByte`(v6, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L1d9e6c.  v4:= temp;
  #L1d9e6e.  v5:= 13I;
  #L1d9e72.  v5:= (`byte`) v5 @kind i2b;
  #L1d9e74.  if v4 != v5 then goto L1d9e8c;
  #L1d9e78.  call temp:= `readUtf8`(v6, v2) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L1d9e7e.  v7:= temp @kind object;
  #L1d9e80.  v0:= 2L;
  #L1d9e84.  call `skip`(v6, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1d9e8a.  goto L1d9e9a;
  #L1d9e8c.  call temp:= `readUtf8`(v6, v7) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L1d9e92.  v7:= temp @kind object;
  #L1d9e94.  call `skip`(v6, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L1d9e9a.  return v7 @kind object;
}
procedure `java.lang.Object` `seek`(`okio.Buffer` v5 @kind object, `long` v6 , `kotlin.jvm.functions.Function2` v8 @kind object) @signature `Lokio/internal/BufferKt;.seek:(Lokio/Buffer;JLkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d9a70.  v0:= "$this$seek" @kind object;
  #L1d9a74.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9a7a.  v0:= "lambda" @kind object;
  #L1d9a7e.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9a84.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d9a88.  if v0 == 0 then goto L1d9b14;
  #L1d9a8c.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d9a92.  v1:= temp @kind wide;
  #L1d9a94.  v1:= v1 - v6 @kind long;
  #L1d9a96.  v3:= lcmp(v1, v6);
  #L1d9a9a.  if v3 >= 0 then goto L1d9ada;
  #L1d9a9e.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d9aa4.  v1:= temp @kind wide;
  #L1d9aa6.  v5:= lcmp(v1, v6);
  #L1d9aaa.  if v5 <= 0 then goto L1d9ac8;
  #L1d9aae.  v0:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1d9ab2.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d9ab8.  v5:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d9abc.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d9ac0.  v5:= v5 - v3 @kind int;
  #L1d9ac2.  v3:= (`long`) v5 @kind i2l;
  #L1d9ac4.  v1:= v1 - v3 @kind long;
  #L1d9ac6.  goto L1d9aa6;
  #L1d9ac8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1d9ace.  v5:= temp @kind object;
  #L1d9ad0.  call temp:= `invoke`(v8, v0, v5) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1d9ad6.  v5:= temp @kind object;
  #L1d9ad8.  return v5 @kind object;
  #L1d9ada.  v1:= 0L;
  #L1d9ade.  v5:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d9ae2.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d9ae6.  v5:= v5 - v3 @kind int;
  #L1d9ae8.  v3:= (`long`) v5 @kind i2l;
  #L1d9aea.  v3:= v3 + v1 @kind long;
  #L1d9aec.  v5:= lcmp(v3, v6);
  #L1d9af0.  if v5 <= 0 then goto L1d9b06;
  #L1d9af4.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1d9afa.  v5:= temp @kind object;
  #L1d9afc.  call temp:= `invoke`(v8, v0, v5) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1d9b02.  v5:= temp @kind object;
  #L1d9b04.  return v5 @kind object;
  #L1d9b06.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1d9b0a.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d9b10.  v1:= v3 @kind wide;
  #L1d9b12.  goto L1d9ade;
  #L1d9b14.  v5:= 0I;
  #L1d9b16.  v6:= -1L;
  #L1d9b1a.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1d9b20.  v6:= temp @kind object;
  #L1d9b22.  call temp:= `invoke`(v8, v5, v6) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1d9b28.  v5:= temp @kind object;
  #L1d9b2a.  return v5 @kind object;
}
procedure `int` `selectPrefix`(`okio.Buffer` v17 @kind object, `okio.Options` v18 @kind object, `boolean` v19 ) @signature `Lokio/internal/BufferKt;.selectPrefix:(Lokio/Buffer;Lokio/Options;Z)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L1d98fc.  v0:= v17 @kind object;
  #L1d9900.  v1:= "$this$selectPrefix" @kind object;
  #L1d9904.  call `checkNotNullParameter`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d990a.  v1:= "options" @kind object;
  #L1d990e.  v2:= v18 @kind object;
  #L1d9912.  call `checkNotNullParameter`(v2, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d9918.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d991c.  v1:= -2I;
  #L1d991e.  v3:= -1I;
  #L1d9920.  if v0 == 0 then goto L1d9a54;
  #L1d9924.  v4:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d9928.  v5:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d992c.  v6:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d9930.  call temp:= `getTrie$okio`(v18) @signature `Lokio/Options;.getTrie$okio:()[I` @kind virtual;
  #L1d9936.  v2:= temp @kind object;
  #L1d9938.  v7:= 0I;
  #L1d993a.  v9:= v0 @kind object;
  #L1d993c.  v8:= 0I;
  #L1d993e.  v10:= -1I;
  #L1d9940.  v11:= v8 + 1;
  #L1d9944.  v8:= v2[v8];
  #L1d9948.  v12:= v11 + 1;
  #L1d994c.  v11:= v2[v11];
  #L1d9950.  if v11 == v3 then goto L1d9956;
  #L1d9954.  v10:= v11;
  #L1d9956.  if v9 != 0 then goto L1d995c;
  #L1d995a.  goto L1d99b6;
  #L1d995c.  v11:= 0I;
  #L1d995e.  if v8 >= 0 then goto L1d99f6;
  #L1d9962.  v8:= v8 * -1;
  #L1d9966.  v13:= v12 + v8 @kind int;
  #L1d996a.  v8:= v5 + 1;
  #L1d996e.  v5:= v4[v5] @kind byte;
  #L1d9972.  v5:= v5 ^& 255;
  #L1d9976.  v14:= v12 + 1;
  #L1d997a.  v12:= v2[v12];
  #L1d997e.  if v5 == v12 then goto L1d9984;
  #L1d9982.  return v10;
  #L1d9984.  if v14 != v13 then goto L1d998c;
  #L1d9988.  v5:= 1I;
  #L1d998a.  goto L1d998e;
  #L1d998c.  v5:= 0I;
  #L1d998e.  if v8 != v6 then goto L1d99d0;
  #L1d9992.  call `checkNotNull`(v9) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d9998.  v4:= v9.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1d999c.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d99a2.  v6:= v4.`okio.Segment.pos` @type ^`int`;
  #L1d99a6.  v8:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d99aa.  v9:= v4.`okio.Segment.limit` @type ^`int`;
  #L1d99ae.  if v4 != v0 then goto L1d99c4;
  #L1d99b2.  if v5 != 0 then goto L1d99be;
  #L1d99b6.  if v19 == 0 then goto L1d99bc;
  #L1d99ba.  return v1;
  #L1d99bc.  return v10;
  #L1d99be.  v4:= v8 @kind object;
  #L1d99c0.  v8:= v11 @kind object;
  #L1d99c2.  goto L1d99dc;
  #L1d99c4.  v16:= v8 @kind object;
  #L1d99c8.  v8:= v4 @kind object;
  #L1d99ca.  v4:= v16 @kind object;
  #L1d99ce.  goto L1d99dc;
  #L1d99d0.  v16:= v9 @kind object;
  #L1d99d4.  v9:= v6;
  #L1d99d6.  v6:= v8;
  #L1d99d8.  v8:= v16 @kind object;
  #L1d99dc.  if v5 == 0 then goto L1d99ec;
  #L1d99e0.  v5:= v2[v14];
  #L1d99e4.  v13:= v6;
  #L1d99e6.  v6:= v9;
  #L1d99e8.  v9:= v8 @kind object;
  #L1d99ea.  goto L1d9a40;
  #L1d99ec.  v5:= v6;
  #L1d99ee.  v6:= v9;
  #L1d99f0.  v12:= v14;
  #L1d99f2.  v9:= v8 @kind object;
  #L1d99f4.  goto L1d996a;
  #L1d99f6.  v13:= v5 + 1;
  #L1d99fa.  v5:= v4[v5] @kind byte;
  #L1d99fe.  v5:= v5 ^& 255;
  #L1d9a02.  v14:= v12 + v8 @kind int;
  #L1d9a06.  if v12 != v14 then goto L1d9a0c;
  #L1d9a0a.  return v10;
  #L1d9a0c.  v15:= v2[v12];
  #L1d9a10.  if v5 != v15 then goto L1d9a4e;
  #L1d9a14.  v12:= v12 + v8 @kind int;
  #L1d9a16.  v5:= v2[v12];
  #L1d9a1a.  if v13 != v6 then goto L1d9a40;
  #L1d9a1e.  v9:= v9.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1d9a22.  call `checkNotNull`(v9) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d9a28.  v4:= v9.`okio.Segment.pos` @type ^`int`;
  #L1d9a2c.  v6:= v9.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d9a30.  v8:= v9.`okio.Segment.limit` @type ^`int`;
  #L1d9a34.  v13:= v4;
  #L1d9a36.  v4:= v6 @kind object;
  #L1d9a38.  v6:= v8;
  #L1d9a3a.  if v9 != v0 then goto L1d9a40;
  #L1d9a3e.  v9:= v11 @kind object;
  #L1d9a40.  if v5 < 0 then goto L1d9a46;
  #L1d9a44.  return v5;
  #L1d9a46.  v8:= -v5 @kind int;
  #L1d9a48.  v5:= v13;
  #L1d9a4a.  goto L1d9940;
  #L1d9a4e.  v12:= v12 + 1;
  #L1d9a52.  goto L1d9a06;
  #L1d9a54.  if v19 == 0 then goto L1d9a5a;
  #L1d9a58.  goto L1d9a5c;
  #L1d9a5a.  v1:= -1I;
  #L1d9a5c.  return v1;
}
procedure `int` `selectPrefix$default`(`okio.Buffer` v0 @kind object, `okio.Options` v1 @kind object, `boolean` v2 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lokio/internal/BufferKt;.selectPrefix$default:(Lokio/Buffer;Lokio/Options;ZILjava/lang/Object;)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1d98d8.  v3:= v3 ^& 2;
  #L1d98dc.  if v3 == 0 then goto L1d98e2;
  #L1d98e0.  v2:= 0I;
  #L1d98e2.  call temp:= `selectPrefix`(v0, v1, v2) @signature `Lokio/internal/BufferKt;.selectPrefix:(Lokio/Buffer;Lokio/Options;Z)I` @kind static;
  #L1d98e8.  v0:= temp;
  #L1d98ea.  return v0;
}
