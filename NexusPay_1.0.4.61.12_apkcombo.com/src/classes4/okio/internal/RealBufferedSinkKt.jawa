record `okio.internal.RealBufferedSinkKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `commonClose`(`okio.RealBufferedSink` v6 @kind object) @signature `Lokio/internal/RealBufferedSinkKt;.commonClose:(Lokio/RealBufferedSink;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ddd80.  v0:= "$this$commonClose" @kind object;
  #L1ddd84.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ddd8a.  v0:= v6.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1ddd8e.  if v0 == 0 then goto L1ddd94;
  #L1ddd92.  return @kind void;
  #L1ddd94.  v0:= 0I;
  #L1ddd96.  v1:= v6.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1ddd9a.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1ddda0.  v1:= temp @kind wide;
  #L1ddda2.  v3:= 0L;
  #L1ddda6.  v5:= lcmp(v1, v3);
  #L1dddaa.  if v5 <= 0 then goto L1dddcc;
  #L1dddae.  v1:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L1dddb2.  v2:= v6.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dddb6.  v3:= v6.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dddba.  call temp:= `size`(v3) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dddc0.  v3:= temp @kind wide;
  #L1dddc2.  call `write`(v1, v2, v3) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L1dddc8.  goto L1dddcc;
  #L1dddca.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1dddcc.  v1:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L1dddd0.  call `close`(v1) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L1dddd6.  goto L1ddde0;
  #L1dddd8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1dddda.  if v0 != 0 then goto L1ddde0;
  #L1dddde.  v0:= v1 @kind object;
  #L1ddde0.  v1:= 1I;
  #L1ddde2.  v6.`okio.RealBufferedSink.closed` @type ^`boolean` := v1 @kind boolean;
  #L1ddde6.  if v0 != 0 then goto L1dddec;
  #L1dddea.  return @kind void;
  #L1dddec.  throw v0;
  catch `java.lang.Throwable` @[L1ddd96..L1dddc8] goto L1dddca;
  catch `java.lang.Throwable` @[L1dddcc..L1dddd6] goto L1dddd8;
}
procedure `okio.BufferedSink` `commonEmit`(`okio.RealBufferedSink` v5 @kind object) @signature `Lokio/internal/RealBufferedSinkKt;.commonEmit:(Lokio/RealBufferedSink;)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1dd6b8.  v0:= "$this$commonEmit" @kind object;
  #L1dd6bc.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd6c2.  v0:= v5.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1dd6c6.  v0:= v0 ^~ 1;
  #L1dd6ca.  if v0 == 0 then goto L1dd6f6;
  #L1dd6ce.  v0:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dd6d2.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dd6d8.  v0:= temp @kind wide;
  #L1dd6da.  v2:= 0L;
  #L1dd6de.  v4:= lcmp(v0, v2);
  #L1dd6e2.  if v4 <= 0 then goto L1dd6f4;
  #L1dd6e6.  v2:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L1dd6ea.  v3:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dd6ee.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L1dd6f4.  return v5 @kind object;
  #L1dd6f6.  v5:= new `java.lang.IllegalStateException`;
  #L1dd6fa.  v0:= "closed" @kind object;
  #L1dd6fe.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd704.  v0:= temp @kind object;
  #L1dd706.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dd70c.  throw v5;
}
procedure `okio.BufferedSink` `commonEmitCompleteSegments`(`okio.RealBufferedSink` v5 @kind object) @signature `Lokio/internal/RealBufferedSinkKt;.commonEmitCompleteSegments:(Lokio/RealBufferedSink;)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1dd720.  v0:= "$this$commonEmitCompleteSegments" @kind object;
  #L1dd724.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd72a.  v0:= v5.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1dd72e.  v0:= v0 ^~ 1;
  #L1dd732.  if v0 == 0 then goto L1dd75e;
  #L1dd736.  v0:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dd73a.  call temp:= `completeSegmentByteCount`(v0) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @kind virtual;
  #L1dd740.  v0:= temp @kind wide;
  #L1dd742.  v2:= 0L;
  #L1dd746.  v4:= lcmp(v0, v2);
  #L1dd74a.  if v4 <= 0 then goto L1dd75c;
  #L1dd74e.  v2:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L1dd752.  v3:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dd756.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L1dd75c.  return v5 @kind object;
  #L1dd75e.  v5:= new `java.lang.IllegalStateException`;
  #L1dd762.  v0:= "closed" @kind object;
  #L1dd766.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd76c.  v0:= temp @kind object;
  #L1dd76e.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dd774.  throw v5;
}
procedure `void` `commonFlush`(`okio.RealBufferedSink` v5 @kind object) @signature `Lokio/internal/RealBufferedSinkKt;.commonFlush:(Lokio/RealBufferedSink;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1dde18.  v0:= "$this$commonFlush" @kind object;
  #L1dde1c.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dde22.  v0:= v5.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1dde26.  v0:= v0 ^~ 1;
  #L1dde2a.  if v0 == 0 then goto L1dde68;
  #L1dde2e.  v0:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dde32.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dde38.  v0:= temp @kind wide;
  #L1dde3a.  v2:= 0L;
  #L1dde3e.  v4:= lcmp(v0, v2);
  #L1dde42.  if v4 <= 0 then goto L1dde5c;
  #L1dde46.  v0:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L1dde4a.  v1:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dde4e.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1dde54.  v2:= temp @kind wide;
  #L1dde56.  call `write`(v0, v1, v2) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L1dde5c.  v5:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L1dde60.  call `flush`(v5) @signature `Lokio/Sink;.flush:()V` @kind interface;
  #L1dde66.  return @kind void;
  #L1dde68.  v5:= new `java.lang.IllegalStateException`;
  #L1dde6c.  v0:= "closed" @kind object;
  #L1dde70.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dde76.  v0:= temp @kind object;
  #L1dde78.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dde7e.  throw v5;
}
procedure `okio.Timeout` `commonTimeout`(`okio.RealBufferedSink` v1 @kind object) @signature `Lokio/internal/RealBufferedSinkKt;.commonTimeout:(Lokio/RealBufferedSink;)Lokio/Timeout;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1ddd58.  v0:= "$this$commonTimeout" @kind object;
  #L1ddd5c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ddd62.  v1:= v1.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L1ddd66.  call temp:= `timeout`(v1) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L1ddd6c.  v1:= temp @kind object;
  #L1ddd6e.  return v1 @kind object;
}
procedure `java.lang.String` `commonToString`(`okio.RealBufferedSink` v2 @kind object) @signature `Lokio/internal/RealBufferedSinkKt;.commonToString:(Lokio/RealBufferedSink;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1dd618.  v0:= "$this$commonToString" @kind object;
  #L1dd61c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd622.  v0:= new `java.lang.StringBuilder`;
  #L1dd626.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1dd62c.  v1:= "buffer(" @kind object;
  #L1dd630.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd636.  v2:= v2.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L1dd63a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd640.  v2:= 41I;
  #L1dd644.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1dd64a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd650.  v2:= temp @kind object;
  #L1dd652.  return v2 @kind object;
}
procedure `okio.BufferedSink` `commonWrite`(`okio.RealBufferedSink` v1 @kind object, `okio.ByteString` v2 @kind object) @signature `Lokio/internal/RealBufferedSinkKt;.commonWrite:(Lokio/RealBufferedSink;Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1dd840.  v0:= "$this$commonWrite" @kind object;
  #L1dd844.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd84a.  v0:= "byteString" @kind object;
  #L1dd84e.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd854.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1dd858.  v0:= v0 ^~ 1;
  #L1dd85c.  if v0 == 0 then goto L1dd874;
  #L1dd860.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dd864.  call temp:= `write`(v0, v2) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L1dd86a.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1dd870.  v1:= temp @kind object;
  #L1dd872.  return v1 @kind object;
  #L1dd874.  v1:= new `java.lang.IllegalStateException`;
  #L1dd878.  v2:= "closed" @kind object;
  #L1dd87c.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd882.  v2:= temp @kind object;
  #L1dd884.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dd88a.  throw v1;
}
procedure `okio.BufferedSink` `commonWrite`(`okio.RealBufferedSink` v1 @kind object, `okio.ByteString` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/internal/RealBufferedSinkKt;.commonWrite:(Lokio/RealBufferedSink;Lokio/ByteString;II)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1dd89c.  v0:= "$this$commonWrite" @kind object;
  #L1dd8a0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd8a6.  v0:= "byteString" @kind object;
  #L1dd8aa.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd8b0.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1dd8b4.  v0:= v0 ^~ 1;
  #L1dd8b8.  if v0 == 0 then goto L1dd8d0;
  #L1dd8bc.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dd8c0.  call temp:= `write`(v0, v2, v3, v4) @signature `Lokio/Buffer;.write:(Lokio/ByteString;II)Lokio/Buffer;` @kind virtual;
  #L1dd8c6.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1dd8cc.  v1:= temp @kind object;
  #L1dd8ce.  return v1 @kind object;
  #L1dd8d0.  v1:= new `java.lang.IllegalStateException`;
  #L1dd8d4.  v2:= "closed" @kind object;
  #L1dd8d8.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd8de.  v2:= temp @kind object;
  #L1dd8e0.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dd8e6.  throw v1;
}
procedure `okio.BufferedSink` `commonWrite`(`okio.RealBufferedSink` v5 @kind object, `okio.Source` v6 @kind object, `long` v7 ) @signature `Lokio/internal/RealBufferedSinkKt;.commonWrite:(Lokio/RealBufferedSink;Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1dd8f8.  v0:= "$this$commonWrite" @kind object;
  #L1dd8fc.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd902.  v0:= "source" @kind object;
  #L1dd906.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd90c.  v0:= 0L;
  #L1dd910.  v2:= lcmp(v7, v0);
  #L1dd914.  if v2 <= 0 then goto L1dd946;
  #L1dd918.  v0:= v5.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dd91c.  call temp:= `read`(v6, v0, v7) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L1dd922.  v0:= temp @kind wide;
  #L1dd924.  v2:= -1L;
  #L1dd928.  v4:= lcmp(v0, v2);
  #L1dd92c.  if v4 == 0 then goto L1dd93a;
  #L1dd930.  v7:= v7 - v0 @kind long;
  #L1dd932.  call temp:= `emitCompleteSegments`(v5) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1dd938.  goto L1dd90c;
  #L1dd93a.  v5:= new `java.io.EOFException`;
  #L1dd93e.  call `<init>`(v5) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1dd944.  throw v5;
  #L1dd946.  return v5 @kind object;
}
procedure `okio.BufferedSink` `commonWrite`(`okio.RealBufferedSink` v1 @kind object, `byte`[] v2 @kind object) @signature `Lokio/internal/RealBufferedSinkKt;.commonWrite:(Lokio/RealBufferedSink;[B)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1dd788.  v0:= "$this$commonWrite" @kind object;
  #L1dd78c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd792.  v0:= "source" @kind object;
  #L1dd796.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd79c.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1dd7a0.  v0:= v0 ^~ 1;
  #L1dd7a4.  if v0 == 0 then goto L1dd7bc;
  #L1dd7a8.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dd7ac.  call temp:= `write`(v0, v2) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L1dd7b2.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1dd7b8.  v1:= temp @kind object;
  #L1dd7ba.  return v1 @kind object;
  #L1dd7bc.  v1:= new `java.lang.IllegalStateException`;
  #L1dd7c0.  v2:= "closed" @kind object;
  #L1dd7c4.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd7ca.  v2:= temp @kind object;
  #L1dd7cc.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dd7d2.  throw v1;
}
procedure `okio.BufferedSink` `commonWrite`(`okio.RealBufferedSink` v1 @kind object, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/internal/RealBufferedSinkKt;.commonWrite:(Lokio/RealBufferedSink;[BII)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1dd7e4.  v0:= "$this$commonWrite" @kind object;
  #L1dd7e8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd7ee.  v0:= "source" @kind object;
  #L1dd7f2.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd7f8.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1dd7fc.  v0:= v0 ^~ 1;
  #L1dd800.  if v0 == 0 then goto L1dd818;
  #L1dd804.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dd808.  call temp:= `write`(v0, v2, v3, v4) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L1dd80e.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1dd814.  v1:= temp @kind object;
  #L1dd816.  return v1 @kind object;
  #L1dd818.  v1:= new `java.lang.IllegalStateException`;
  #L1dd81c.  v2:= "closed" @kind object;
  #L1dd820.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd826.  v2:= temp @kind object;
  #L1dd828.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dd82e.  throw v1;
}
procedure `void` `commonWrite`(`okio.RealBufferedSink` v1 @kind object, `okio.Buffer` v2 @kind object, `long` v3 ) @signature `Lokio/internal/RealBufferedSinkKt;.commonWrite:(Lokio/RealBufferedSink;Lokio/Buffer;J)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1dde90.  v0:= "$this$commonWrite" @kind object;
  #L1dde94.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dde9a.  v0:= "source" @kind object;
  #L1dde9e.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ddea4.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1ddea8.  v0:= v0 ^~ 1;
  #L1ddeac.  if v0 == 0 then goto L1ddec2;
  #L1ddeb0.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1ddeb4.  call `write`(v0, v2, v3) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L1ddeba.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1ddec0.  return @kind void;
  #L1ddec2.  v1:= new `java.lang.IllegalStateException`;
  #L1ddec6.  v2:= "closed" @kind object;
  #L1ddeca.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dded0.  v2:= temp @kind object;
  #L1dded2.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dded8.  throw v1;
}
procedure `long` `commonWriteAll`(`okio.RealBufferedSink` v7 @kind object, `okio.Source` v8 @kind object) @signature `Lokio/internal/RealBufferedSinkKt;.commonWriteAll:(Lokio/RealBufferedSink;Lokio/Source;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1dd664.  v0:= "$this$commonWriteAll" @kind object;
  #L1dd668.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd66e.  v0:= "source" @kind object;
  #L1dd672.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd678.  v0:= 0L;
  #L1dd67c.  v2:= v7.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dd680.  v3:= 8192I;
  #L1dd684.  v3:= (`long`) v3 @kind i2l;
  #L1dd686.  call temp:= `read`(v8, v2, v3) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L1dd68c.  v2:= temp @kind wide;
  #L1dd68e.  v4:= -1L;
  #L1dd692.  v6:= lcmp(v2, v4);
  #L1dd696.  if v6 != 0 then goto L1dd69c;
  #L1dd69a.  return v0 @kind wide;
  #L1dd69c.  v0:= v0 + v2 @kind long;
  #L1dd69e.  call temp:= `emitCompleteSegments`(v7) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1dd6a4.  goto L1dd67c;
}
procedure `okio.BufferedSink` `commonWriteByte`(`okio.RealBufferedSink` v1 @kind object, `int` v2 ) @signature `Lokio/internal/RealBufferedSinkKt;.commonWriteByte:(Lokio/RealBufferedSink;I)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1dd958.  v0:= "$this$commonWriteByte" @kind object;
  #L1dd95c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd962.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1dd966.  v0:= v0 ^~ 1;
  #L1dd96a.  if v0 == 0 then goto L1dd982;
  #L1dd96e.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dd972.  call temp:= `writeByte`(v0, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1dd978.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1dd97e.  v1:= temp @kind object;
  #L1dd980.  return v1 @kind object;
  #L1dd982.  v1:= new `java.lang.IllegalStateException`;
  #L1dd986.  v2:= "closed" @kind object;
  #L1dd98a.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd990.  v2:= temp @kind object;
  #L1dd992.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dd998.  throw v1;
}
procedure `okio.BufferedSink` `commonWriteDecimalLong`(`okio.RealBufferedSink` v1 @kind object, `long` v2 ) @signature `Lokio/internal/RealBufferedSinkKt;.commonWriteDecimalLong:(Lokio/RealBufferedSink;J)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1dd9ac.  v0:= "$this$commonWriteDecimalLong" @kind object;
  #L1dd9b0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dd9b6.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1dd9ba.  v0:= v0 ^~ 1;
  #L1dd9be.  if v0 == 0 then goto L1dd9d6;
  #L1dd9c2.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dd9c6.  call temp:= `writeDecimalLong`(v0, v2) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L1dd9cc.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1dd9d2.  v1:= temp @kind object;
  #L1dd9d4.  return v1 @kind object;
  #L1dd9d6.  v1:= new `java.lang.IllegalStateException`;
  #L1dd9da.  v2:= "closed" @kind object;
  #L1dd9de.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dd9e4.  v2:= temp @kind object;
  #L1dd9e6.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dd9ec.  throw v1;
}
procedure `okio.BufferedSink` `commonWriteHexadecimalUnsignedLong`(`okio.RealBufferedSink` v1 @kind object, `long` v2 ) @signature `Lokio/internal/RealBufferedSinkKt;.commonWriteHexadecimalUnsignedLong:(Lokio/RealBufferedSink;J)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1dda00.  v0:= "$this$commonWriteHexadecimalUnsignedLong" @kind object;
  #L1dda04.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dda0a.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1dda0e.  v0:= v0 ^~ 1;
  #L1dda12.  if v0 == 0 then goto L1dda2a;
  #L1dda16.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dda1a.  call temp:= `writeHexadecimalUnsignedLong`(v0, v2) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L1dda20.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1dda26.  v1:= temp @kind object;
  #L1dda28.  return v1 @kind object;
  #L1dda2a.  v1:= new `java.lang.IllegalStateException`;
  #L1dda2e.  v2:= "closed" @kind object;
  #L1dda32.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dda38.  v2:= temp @kind object;
  #L1dda3a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dda40.  throw v1;
}
procedure `okio.BufferedSink` `commonWriteInt`(`okio.RealBufferedSink` v1 @kind object, `int` v2 ) @signature `Lokio/internal/RealBufferedSinkKt;.commonWriteInt:(Lokio/RealBufferedSink;I)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1dda54.  v0:= "$this$commonWriteInt" @kind object;
  #L1dda58.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1dda5e.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1dda62.  v0:= v0 ^~ 1;
  #L1dda66.  if v0 == 0 then goto L1dda7e;
  #L1dda6a.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1dda6e.  call temp:= `writeInt`(v0, v2) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L1dda74.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1dda7a.  v1:= temp @kind object;
  #L1dda7c.  return v1 @kind object;
  #L1dda7e.  v1:= new `java.lang.IllegalStateException`;
  #L1dda82.  v2:= "closed" @kind object;
  #L1dda86.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1dda8c.  v2:= temp @kind object;
  #L1dda8e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1dda94.  throw v1;
}
procedure `okio.BufferedSink` `commonWriteIntLe`(`okio.RealBufferedSink` v1 @kind object, `int` v2 ) @signature `Lokio/internal/RealBufferedSinkKt;.commonWriteIntLe:(Lokio/RealBufferedSink;I)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1ddaa8.  v0:= "$this$commonWriteIntLe" @kind object;
  #L1ddaac.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ddab2.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1ddab6.  v0:= v0 ^~ 1;
  #L1ddaba.  if v0 == 0 then goto L1ddad2;
  #L1ddabe.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1ddac2.  call temp:= `writeIntLe`(v0, v2) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L1ddac8.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1ddace.  v1:= temp @kind object;
  #L1ddad0.  return v1 @kind object;
  #L1ddad2.  v1:= new `java.lang.IllegalStateException`;
  #L1ddad6.  v2:= "closed" @kind object;
  #L1ddada.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ddae0.  v2:= temp @kind object;
  #L1ddae2.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ddae8.  throw v1;
}
procedure `okio.BufferedSink` `commonWriteLong`(`okio.RealBufferedSink` v1 @kind object, `long` v2 ) @signature `Lokio/internal/RealBufferedSinkKt;.commonWriteLong:(Lokio/RealBufferedSink;J)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1ddafc.  v0:= "$this$commonWriteLong" @kind object;
  #L1ddb00.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ddb06.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1ddb0a.  v0:= v0 ^~ 1;
  #L1ddb0e.  if v0 == 0 then goto L1ddb26;
  #L1ddb12.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1ddb16.  call temp:= `writeLong`(v0, v2) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L1ddb1c.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1ddb22.  v1:= temp @kind object;
  #L1ddb24.  return v1 @kind object;
  #L1ddb26.  v1:= new `java.lang.IllegalStateException`;
  #L1ddb2a.  v2:= "closed" @kind object;
  #L1ddb2e.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ddb34.  v2:= temp @kind object;
  #L1ddb36.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ddb3c.  throw v1;
}
procedure `okio.BufferedSink` `commonWriteLongLe`(`okio.RealBufferedSink` v1 @kind object, `long` v2 ) @signature `Lokio/internal/RealBufferedSinkKt;.commonWriteLongLe:(Lokio/RealBufferedSink;J)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1ddb50.  v0:= "$this$commonWriteLongLe" @kind object;
  #L1ddb54.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ddb5a.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1ddb5e.  v0:= v0 ^~ 1;
  #L1ddb62.  if v0 == 0 then goto L1ddb7a;
  #L1ddb66.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1ddb6a.  call temp:= `writeLongLe`(v0, v2) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L1ddb70.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1ddb76.  v1:= temp @kind object;
  #L1ddb78.  return v1 @kind object;
  #L1ddb7a.  v1:= new `java.lang.IllegalStateException`;
  #L1ddb7e.  v2:= "closed" @kind object;
  #L1ddb82.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ddb88.  v2:= temp @kind object;
  #L1ddb8a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ddb90.  throw v1;
}
procedure `okio.BufferedSink` `commonWriteShort`(`okio.RealBufferedSink` v1 @kind object, `int` v2 ) @signature `Lokio/internal/RealBufferedSinkKt;.commonWriteShort:(Lokio/RealBufferedSink;I)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1ddba4.  v0:= "$this$commonWriteShort" @kind object;
  #L1ddba8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ddbae.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1ddbb2.  v0:= v0 ^~ 1;
  #L1ddbb6.  if v0 == 0 then goto L1ddbce;
  #L1ddbba.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1ddbbe.  call temp:= `writeShort`(v0, v2) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L1ddbc4.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1ddbca.  v1:= temp @kind object;
  #L1ddbcc.  return v1 @kind object;
  #L1ddbce.  v1:= new `java.lang.IllegalStateException`;
  #L1ddbd2.  v2:= "closed" @kind object;
  #L1ddbd6.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ddbdc.  v2:= temp @kind object;
  #L1ddbde.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ddbe4.  throw v1;
}
procedure `okio.BufferedSink` `commonWriteShortLe`(`okio.RealBufferedSink` v1 @kind object, `int` v2 ) @signature `Lokio/internal/RealBufferedSinkKt;.commonWriteShortLe:(Lokio/RealBufferedSink;I)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1ddbf8.  v0:= "$this$commonWriteShortLe" @kind object;
  #L1ddbfc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ddc02.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1ddc06.  v0:= v0 ^~ 1;
  #L1ddc0a.  if v0 == 0 then goto L1ddc22;
  #L1ddc0e.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1ddc12.  call temp:= `writeShortLe`(v0, v2) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L1ddc18.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1ddc1e.  v1:= temp @kind object;
  #L1ddc20.  return v1 @kind object;
  #L1ddc22.  v1:= new `java.lang.IllegalStateException`;
  #L1ddc26.  v2:= "closed" @kind object;
  #L1ddc2a.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ddc30.  v2:= temp @kind object;
  #L1ddc32.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ddc38.  throw v1;
}
procedure `okio.BufferedSink` `commonWriteUtf8`(`okio.RealBufferedSink` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokio/internal/RealBufferedSinkKt;.commonWriteUtf8:(Lokio/RealBufferedSink;Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1ddc4c.  v0:= "$this$commonWriteUtf8" @kind object;
  #L1ddc50.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ddc56.  v0:= "string" @kind object;
  #L1ddc5a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ddc60.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1ddc64.  v0:= v0 ^~ 1;
  #L1ddc68.  if v0 == 0 then goto L1ddc80;
  #L1ddc6c.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1ddc70.  call temp:= `writeUtf8`(v0, v2) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L1ddc76.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1ddc7c.  v1:= temp @kind object;
  #L1ddc7e.  return v1 @kind object;
  #L1ddc80.  v1:= new `java.lang.IllegalStateException`;
  #L1ddc84.  v2:= "closed" @kind object;
  #L1ddc88.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ddc8e.  v2:= temp @kind object;
  #L1ddc90.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ddc96.  throw v1;
}
procedure `okio.BufferedSink` `commonWriteUtf8`(`okio.RealBufferedSink` v1 @kind object, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/internal/RealBufferedSinkKt;.commonWriteUtf8:(Lokio/RealBufferedSink;Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1ddca8.  v0:= "$this$commonWriteUtf8" @kind object;
  #L1ddcac.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ddcb2.  v0:= "string" @kind object;
  #L1ddcb6.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ddcbc.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1ddcc0.  v0:= v0 ^~ 1;
  #L1ddcc4.  if v0 == 0 then goto L1ddcdc;
  #L1ddcc8.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1ddccc.  call temp:= `writeUtf8`(v0, v2, v3, v4) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L1ddcd2.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1ddcd8.  v1:= temp @kind object;
  #L1ddcda.  return v1 @kind object;
  #L1ddcdc.  v1:= new `java.lang.IllegalStateException`;
  #L1ddce0.  v2:= "closed" @kind object;
  #L1ddce4.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ddcea.  v2:= temp @kind object;
  #L1ddcec.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ddcf2.  throw v1;
}
procedure `okio.BufferedSink` `commonWriteUtf8CodePoint`(`okio.RealBufferedSink` v1 @kind object, `int` v2 ) @signature `Lokio/internal/RealBufferedSinkKt;.commonWriteUtf8CodePoint:(Lokio/RealBufferedSink;I)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1ddd04.  v0:= "$this$commonWriteUtf8CodePoint" @kind object;
  #L1ddd08.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1ddd0e.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L1ddd12.  v0:= v0 ^~ 1;
  #L1ddd16.  if v0 == 0 then goto L1ddd2e;
  #L1ddd1a.  v0:= v1.`okio.RealBufferedSink.bufferField` @type ^`okio.Buffer` @kind object;
  #L1ddd1e.  call temp:= `writeUtf8CodePoint`(v0, v2) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L1ddd24.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L1ddd2a.  v1:= temp @kind object;
  #L1ddd2c.  return v1 @kind object;
  #L1ddd2e.  v1:= new `java.lang.IllegalStateException`;
  #L1ddd32.  v2:= "closed" @kind object;
  #L1ddd36.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ddd3c.  v2:= temp @kind object;
  #L1ddd3e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ddd44.  throw v1;
}
