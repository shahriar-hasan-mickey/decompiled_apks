record `okio.internal.SegmentedByteStringKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `a`(`okio.SegmentedByteString` v5 @kind object, `int` v6 , `int` v7 , `kotlin.jvm.functions.Function3` v8 @kind object) @signature `Lokio/internal/SegmentedByteStringKt;.a:(Lokio/SegmentedByteString;IILkotlin/jvm/functions/Function3;)V` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1df734.  call temp:= `segment`(v5, v6) @signature `Lokio/internal/SegmentedByteStringKt;.segment:(Lokio/SegmentedByteString;I)I` @kind static;
  #L1df73a.  v0:= temp;
  #L1df73c.  if v6 >= v7 then goto L1df7ba;
  #L1df740.  if v0 != 0 then goto L1df748;
  #L1df744.  v1:= 0I;
  #L1df746.  goto L1df758;
  #L1df748.  call temp:= `getDirectory$okio`(v5) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df74e.  v1:= temp @kind object;
  #L1df750.  v2:= v0 + -1;
  #L1df754.  v1:= v1[v2];
  #L1df758.  call temp:= `getDirectory$okio`(v5) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df75e.  v2:= temp @kind object;
  #L1df760.  v2:= v2[v0];
  #L1df764.  v2:= v2 - v1 @kind int;
  #L1df766.  call temp:= `getDirectory$okio`(v5) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df76c.  v3:= temp @kind object;
  #L1df76e.  call temp:= `getSegments$okio`(v5) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df774.  v4:= temp @kind object;
  #L1df776.  v4:= length @variable v4;
  #L1df778.  v4:= v4 + v0 @kind int;
  #L1df77a.  v3:= v3[v4];
  #L1df77e.  v2:= v2 + v1 @kind int;
  #L1df780.  call temp:= `min`(v7, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1df786.  v2:= temp;
  #L1df788.  v2:= v2 - v6 @kind int;
  #L1df78a.  v1:= v6 - v1 @kind int;
  #L1df78e.  v3:= v3 + v1 @kind int;
  #L1df790.  call temp:= `getSegments$okio`(v5) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df796.  v1:= temp @kind object;
  #L1df798.  v1:= v1[v0] @kind object;
  #L1df79c.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1df7a2.  v3:= temp @kind object;
  #L1df7a4.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1df7aa.  v4:= temp @kind object;
  #L1df7ac.  call temp:= `invoke`(v8, v1, v3, v4) @signature `Lkotlin/jvm/functions/Function3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1df7b2.  v6:= v6 + v2 @kind int;
  #L1df7b4.  v0:= v0 + 1;
  #L1df7b8.  goto L1df73c;
  #L1df7ba.  return @kind void;
}
procedure `void` `access$forEachSegment`(`okio.SegmentedByteString` v0 @kind object, `int` v1 , `int` v2 , `kotlin.jvm.functions.Function3` v3 @kind object) @signature `Lokio/internal/SegmentedByteStringKt;.access$forEachSegment:(Lokio/SegmentedByteString;IILkotlin/jvm/functions/Function3;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L1df62c.  call `a`(v0, v1, v2, v3) @signature `Lokio/internal/SegmentedByteStringKt;.a:(Lokio/SegmentedByteString;IILkotlin/jvm/functions/Function3;)V` @kind static;
  #L1df632.  return @kind void;
}
procedure `int` `binarySearch`(`int`[] v2 @kind object, `int` v3 , `int` v4 , `int` v5 ) @signature `Lokio/internal/SegmentedByteStringKt;.binarySearch:([IIII)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1df2d0.  v0:= "$this$binarySearch" @kind object;
  #L1df2d4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1df2da.  v5:= v5 + -1;
  #L1df2de.  if v4 > v5 then goto L1df308;
  #L1df2e2.  v0:= v4 + v5 @kind int;
  #L1df2e6.  v0:= v0 ^>> 1;
  #L1df2ea.  v1:= v2[v0];
  #L1df2ee.  if v1 >= v3 then goto L1df2fa;
  #L1df2f2.  v0:= v0 + 1;
  #L1df2f6.  v4:= v0;
  #L1df2f8.  goto L1df2de;
  #L1df2fa.  if v1 <= v3 then goto L1df306;
  #L1df2fe.  v0:= v0 + -1;
  #L1df302.  v5:= v0;
  #L1df304.  goto L1df2de;
  #L1df306.  return v0;
  #L1df308.  v2:= -v4 @kind int;
  #L1df30a.  v2:= v2 + -1;
  #L1df30e.  return v2;
}
procedure `boolean` `commonEquals`(`okio.SegmentedByteString` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lokio/internal/SegmentedByteStringKt;.commonEquals:(Lokio/SegmentedByteString;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1defd0.  v0:= "$this$commonEquals" @kind object;
  #L1defd4.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1defda.  v0:= 1I;
  #L1defdc.  v1:= 0I;
  #L1defde.  if v5 != v4 then goto L1defe4;
  #L1defe2.  goto L1df01c;
  #L1defe4.  v2:= instanceof @variable v5 @type ^`okio.ByteString` @kind boolean;
  #L1defe8.  if v2 == 0 then goto L1df01a;
  #L1defec.  v5:= (`okio.ByteString`) v5 @kind object;
  #L1deff0.  call temp:= `size`(v5) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1deff6.  v2:= temp;
  #L1deff8.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1deffe.  v3:= temp;
  #L1df000.  if v2 != v3 then goto L1df01a;
  #L1df004.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1df00a.  v2:= temp;
  #L1df00c.  call temp:= `rangeEquals`(v4, v1, v5, v1, v2) @signature `Lokio/SegmentedByteString;.rangeEquals:(ILokio/ByteString;II)Z` @kind virtual;
  #L1df012.  v4:= temp;
  #L1df014.  if v4 == 0 then goto L1df01a;
  #L1df018.  goto L1df01c;
  #L1df01a.  v0:= 0I;
  #L1df01c.  return v0;
}
procedure `int` `commonGetSize`(`okio.SegmentedByteString` v1 @kind object) @signature `Lokio/internal/SegmentedByteStringKt;.commonGetSize:(Lokio/SegmentedByteString;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1df320.  v0:= "$this$commonGetSize" @kind object;
  #L1df324.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1df32a.  call temp:= `getDirectory$okio`(v1) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df330.  v0:= temp @kind object;
  #L1df332.  call temp:= `getSegments$okio`(v1) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df338.  v1:= temp @kind object;
  #L1df33a.  v1:= length @variable v1;
  #L1df33c.  v1:= v1 + -1;
  #L1df340.  v1:= v0[v1];
  #L1df344.  return v1;
}
procedure `int` `commonHashCode`(`okio.SegmentedByteString` v8 @kind object) @signature `Lokio/internal/SegmentedByteStringKt;.commonHashCode:(Lokio/SegmentedByteString;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1df358.  v0:= "$this$commonHashCode" @kind object;
  #L1df35c.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1df362.  call temp:= `getHashCode$okio`(v8) @signature `Lokio/ByteString;.getHashCode$okio:()I` @kind virtual;
  #L1df368.  v0:= temp;
  #L1df36a.  if v0 == 0 then goto L1df370;
  #L1df36e.  return v0;
  #L1df370.  call temp:= `getSegments$okio`(v8) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df376.  v0:= temp @kind object;
  #L1df378.  v0:= length @variable v0;
  #L1df37a.  v1:= 0I;
  #L1df37c.  v2:= 1I;
  #L1df37e.  v2:= 0I;
  #L1df380.  v3:= 1I;
  #L1df382.  if v1 >= v0 then goto L1df3d0;
  #L1df386.  call temp:= `getDirectory$okio`(v8) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df38c.  v4:= temp @kind object;
  #L1df38e.  v5:= v0 + v1 @kind int;
  #L1df392.  v4:= v4[v5];
  #L1df396.  call temp:= `getDirectory$okio`(v8) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df39c.  v5:= temp @kind object;
  #L1df39e.  v5:= v5[v1];
  #L1df3a2.  call temp:= `getSegments$okio`(v8) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df3a8.  v6:= temp @kind object;
  #L1df3aa.  v6:= v6[v1] @kind object;
  #L1df3ae.  v2:= v5 - v2 @kind int;
  #L1df3b2.  v2:= v2 + v4 @kind int;
  #L1df3b4.  if v4 >= v2 then goto L1df3c8;
  #L1df3b8.  v3:= v3 * 31;
  #L1df3bc.  v7:= v6[v4] @kind byte;
  #L1df3c0.  v3:= v3 + v7 @kind int;
  #L1df3c2.  v4:= v4 + 1;
  #L1df3c6.  goto L1df3b4;
  #L1df3c8.  v1:= v1 + 1;
  #L1df3cc.  v2:= v5;
  #L1df3ce.  goto L1df382;
  #L1df3d0.  call `setHashCode$okio`(v8, v3) @signature `Lokio/ByteString;.setHashCode$okio:(I)V` @kind virtual;
  #L1df3d6.  return v3;
}
procedure `byte` `commonInternalGet`(`okio.SegmentedByteString` v7 @kind object, `int` v8 ) @signature `Lokio/internal/SegmentedByteStringKt;.commonInternalGet:(Lokio/SegmentedByteString;I)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1df1c4.  v0:= "$this$commonInternalGet" @kind object;
  #L1df1c8.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1df1ce.  call temp:= `getDirectory$okio`(v7) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df1d4.  v0:= temp @kind object;
  #L1df1d6.  call temp:= `getSegments$okio`(v7) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df1dc.  v1:= temp @kind object;
  #L1df1de.  v1:= length @variable v1;
  #L1df1e0.  v1:= v1 + -1;
  #L1df1e4.  v0:= v0[v1];
  #L1df1e8.  v1:= (`long`) v0 @kind i2l;
  #L1df1ea.  v3:= (`long`) v8 @kind i2l;
  #L1df1ec.  v5:= 1L;
  #L1df1f0.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/-Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L1df1f6.  call temp:= `segment`(v7, v8) @signature `Lokio/internal/SegmentedByteStringKt;.segment:(Lokio/SegmentedByteString;I)I` @kind static;
  #L1df1fc.  v0:= temp;
  #L1df1fe.  if v0 != 0 then goto L1df206;
  #L1df202.  v1:= 0I;
  #L1df204.  goto L1df216;
  #L1df206.  call temp:= `getDirectory$okio`(v7) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df20c.  v1:= temp @kind object;
  #L1df20e.  v2:= v0 + -1;
  #L1df212.  v1:= v1[v2];
  #L1df216.  call temp:= `getDirectory$okio`(v7) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df21c.  v2:= temp @kind object;
  #L1df21e.  call temp:= `getSegments$okio`(v7) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df224.  v3:= temp @kind object;
  #L1df226.  v3:= length @variable v3;
  #L1df228.  v3:= v3 + v0 @kind int;
  #L1df22a.  v2:= v2[v3];
  #L1df22e.  call temp:= `getSegments$okio`(v7) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df234.  v7:= temp @kind object;
  #L1df236.  v7:= v7[v0] @kind object;
  #L1df23a.  v8:= v8 - v1 @kind int;
  #L1df23c.  v8:= v8 + v2 @kind int;
  #L1df23e.  v7:= v7[v8] @kind byte;
  #L1df242.  return v7;
}
procedure `boolean` `commonRangeEquals`(`okio.SegmentedByteString` v6 @kind object, `int` v7 , `okio.ByteString` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/internal/SegmentedByteStringKt;.commonRangeEquals:(Lokio/SegmentedByteString;ILokio/ByteString;II)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1df100.  v0:= "$this$commonRangeEquals" @kind object;
  #L1df104.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1df10a.  v0:= "other" @kind object;
  #L1df10e.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1df114.  v0:= 0I;
  #L1df116.  if v7 < 0 then goto L1df1b0;
  #L1df11a.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1df120.  v1:= temp;
  #L1df122.  v1:= v1 - v10 @kind int;
  #L1df124.  if v7 <= v1 then goto L1df12a;
  #L1df128.  goto L1df1b0;
  #L1df12a.  v10:= v10 + v7 @kind int;
  #L1df12c.  call temp:= `segment`(v6, v7) @signature `Lokio/internal/SegmentedByteStringKt;.segment:(Lokio/SegmentedByteString;I)I` @kind static;
  #L1df132.  v1:= temp;
  #L1df134.  if v7 >= v10 then goto L1df1ac;
  #L1df138.  if v1 != 0 then goto L1df140;
  #L1df13c.  v2:= 0I;
  #L1df13e.  goto L1df150;
  #L1df140.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df146.  v2:= temp @kind object;
  #L1df148.  v3:= v1 + -1;
  #L1df14c.  v2:= v2[v3];
  #L1df150.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df156.  v3:= temp @kind object;
  #L1df158.  v3:= v3[v1];
  #L1df15c.  v3:= v3 - v2 @kind int;
  #L1df15e.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df164.  v4:= temp @kind object;
  #L1df166.  call temp:= `getSegments$okio`(v6) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df16c.  v5:= temp @kind object;
  #L1df16e.  v5:= length @variable v5;
  #L1df170.  v5:= v5 + v1 @kind int;
  #L1df172.  v4:= v4[v5];
  #L1df176.  v3:= v3 + v2 @kind int;
  #L1df178.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1df17e.  v3:= temp;
  #L1df180.  v3:= v3 - v7 @kind int;
  #L1df182.  v2:= v7 - v2 @kind int;
  #L1df186.  v4:= v4 + v2 @kind int;
  #L1df188.  call temp:= `getSegments$okio`(v6) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df18e.  v2:= temp @kind object;
  #L1df190.  v2:= v2[v1] @kind object;
  #L1df194.  call temp:= `rangeEquals`(v8, v9, v2, v4, v3) @signature `Lokio/ByteString;.rangeEquals:(I[BII)Z` @kind virtual;
  #L1df19a.  v2:= temp;
  #L1df19c.  if v2 != 0 then goto L1df1a2;
  #L1df1a0.  return v0;
  #L1df1a2.  v9:= v9 + v3 @kind int;
  #L1df1a4.  v7:= v7 + v3 @kind int;
  #L1df1a6.  v1:= v1 + 1;
  #L1df1aa.  goto L1df134;
  #L1df1ac.  v6:= 1I;
  #L1df1ae.  return v6;
  #L1df1b0.  return v0;
}
procedure `boolean` `commonRangeEquals`(`okio.SegmentedByteString` v6 @kind object, `int` v7 , `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/internal/SegmentedByteStringKt;.commonRangeEquals:(Lokio/SegmentedByteString;I[BII)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1df030.  v0:= "$this$commonRangeEquals" @kind object;
  #L1df034.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1df03a.  v0:= "other" @kind object;
  #L1df03e.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1df044.  v0:= 0I;
  #L1df046.  if v7 < 0 then goto L1df0ec;
  #L1df04a.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1df050.  v1:= temp;
  #L1df052.  v1:= v1 - v10 @kind int;
  #L1df054.  if v7 > v1 then goto L1df0ec;
  #L1df058.  if v9 < 0 then goto L1df0ec;
  #L1df05c.  v1:= length @variable v8;
  #L1df05e.  v1:= v1 - v10 @kind int;
  #L1df060.  if v9 <= v1 then goto L1df066;
  #L1df064.  goto L1df0ec;
  #L1df066.  v10:= v10 + v7 @kind int;
  #L1df068.  call temp:= `segment`(v6, v7) @signature `Lokio/internal/SegmentedByteStringKt;.segment:(Lokio/SegmentedByteString;I)I` @kind static;
  #L1df06e.  v1:= temp;
  #L1df070.  if v7 >= v10 then goto L1df0e8;
  #L1df074.  if v1 != 0 then goto L1df07c;
  #L1df078.  v2:= 0I;
  #L1df07a.  goto L1df08c;
  #L1df07c.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df082.  v2:= temp @kind object;
  #L1df084.  v3:= v1 + -1;
  #L1df088.  v2:= v2[v3];
  #L1df08c.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df092.  v3:= temp @kind object;
  #L1df094.  v3:= v3[v1];
  #L1df098.  v3:= v3 - v2 @kind int;
  #L1df09a.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df0a0.  v4:= temp @kind object;
  #L1df0a2.  call temp:= `getSegments$okio`(v6) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df0a8.  v5:= temp @kind object;
  #L1df0aa.  v5:= length @variable v5;
  #L1df0ac.  v5:= v5 + v1 @kind int;
  #L1df0ae.  v4:= v4[v5];
  #L1df0b2.  v3:= v3 + v2 @kind int;
  #L1df0b4.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1df0ba.  v3:= temp;
  #L1df0bc.  v3:= v3 - v7 @kind int;
  #L1df0be.  v2:= v7 - v2 @kind int;
  #L1df0c2.  v4:= v4 + v2 @kind int;
  #L1df0c4.  call temp:= `getSegments$okio`(v6) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df0ca.  v2:= temp @kind object;
  #L1df0cc.  v2:= v2[v1] @kind object;
  #L1df0d0.  call temp:= `arrayRangeEquals`(v2, v4, v8, v9, v3) @signature `Lokio/-Util;.arrayRangeEquals:([BI[BII)Z` @kind static;
  #L1df0d6.  v2:= temp;
  #L1df0d8.  if v2 != 0 then goto L1df0de;
  #L1df0dc.  return v0;
  #L1df0de.  v9:= v9 + v3 @kind int;
  #L1df0e0.  v7:= v7 + v3 @kind int;
  #L1df0e2.  v1:= v1 + 1;
  #L1df0e6.  goto L1df070;
  #L1df0e8.  v6:= 1I;
  #L1df0ea.  return v6;
  #L1df0ec.  return v0;
}
procedure `okio.ByteString` `commonSubstring`(`okio.SegmentedByteString` v11 @kind object, `int` v12 , `int` v13 ) @signature `Lokio/internal/SegmentedByteStringKt;.commonSubstring:(Lokio/SegmentedByteString;II)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1df42c.  v0:= "$this$commonSubstring" @kind object;
  #L1df430.  call `checkNotNullParameter`(v11, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1df436.  v0:= 0I;
  #L1df438.  v1:= 1I;
  #L1df43a.  if v12 < 0 then goto L1df442;
  #L1df43e.  v2:= 1I;
  #L1df440.  goto L1df444;
  #L1df442.  v2:= 0I;
  #L1df444.  if v2 == 0 then goto L1df5da;
  #L1df448.  call temp:= `size`(v11) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1df44e.  v2:= temp;
  #L1df450.  if v13 > v2 then goto L1df458;
  #L1df454.  v2:= 1I;
  #L1df456.  goto L1df45a;
  #L1df458.  v2:= 0I;
  #L1df45a.  v3:= "endIndex=" @kind object;
  #L1df45e.  if v2 == 0 then goto L1df586;
  #L1df462.  v2:= v13 - v12 @kind int;
  #L1df466.  if v2 < 0 then goto L1df46e;
  #L1df46a.  v4:= 1I;
  #L1df46c.  goto L1df470;
  #L1df46e.  v4:= 0I;
  #L1df470.  if v4 == 0 then goto L1df544;
  #L1df474.  if v12 != 0 then goto L1df486;
  #L1df478.  call temp:= `size`(v11) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1df47e.  v3:= temp;
  #L1df480.  if v13 != v3 then goto L1df486;
  #L1df484.  return v11 @kind object;
  #L1df486.  if v12 != v13 then goto L1df490;
  #L1df48a.  v11:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L1df48e.  return v11 @kind object;
  #L1df490.  call temp:= `segment`(v11, v12) @signature `Lokio/internal/SegmentedByteStringKt;.segment:(Lokio/SegmentedByteString;I)I` @kind static;
  #L1df496.  v3:= temp;
  #L1df498.  v13:= v13 - v1 @kind int;
  #L1df49a.  call temp:= `segment`(v11, v13) @signature `Lokio/internal/SegmentedByteStringKt;.segment:(Lokio/SegmentedByteString;I)I` @kind static;
  #L1df4a0.  v13:= temp;
  #L1df4a2.  call temp:= `getSegments$okio`(v11) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df4a8.  v4:= temp @kind object;
  #L1df4aa.  v5:= v13 + 1;
  #L1df4ae.  call temp:= `copyOfRange`(v4, v3, v5) @signature `Lkotlin/collections/ArraysKt;.copyOfRange:([Ljava/lang/Object;II)[Ljava/lang/Object;` @kind static;
  #L1df4b4.  v4:= temp @kind object;
  #L1df4b6.  v4:= (`byte`[][]) v4 @kind object;
  #L1df4ba.  v5:= length @variable v4;
  #L1df4bc.  v5:= v5 * 2;
  #L1df4c0.  v5:= new `int`[v5];
  #L1df4c4.  if v3 > v13 then goto L1df516;
  #L1df4c8.  v7:= v3;
  #L1df4ca.  v6:= 0I;
  #L1df4cc.  call temp:= `getDirectory$okio`(v11) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df4d2.  v8:= temp @kind object;
  #L1df4d4.  v8:= v8[v7];
  #L1df4d8.  v8:= v8 - v12 @kind int;
  #L1df4da.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1df4e0.  v8:= temp;
  #L1df4e2.  v5[v6]:= v8;
  #L1df4e6.  v8:= v6 + 1;
  #L1df4ea.  v9:= length @variable v4;
  #L1df4ec.  v6:= v6 + v9 @kind int;
  #L1df4ee.  call temp:= `getDirectory$okio`(v11) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df4f4.  v9:= temp @kind object;
  #L1df4f6.  call temp:= `getSegments$okio`(v11) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df4fc.  v10:= temp @kind object;
  #L1df4fe.  v10:= length @variable v10;
  #L1df500.  v10:= v10 + v7 @kind int;
  #L1df502.  v9:= v9[v10];
  #L1df506.  v5[v6]:= v9;
  #L1df50a.  if v7 == v13 then goto L1df516;
  #L1df50e.  v7:= v7 + 1;
  #L1df512.  v6:= v8;
  #L1df514.  goto L1df4cc;
  #L1df516.  if v3 != 0 then goto L1df51c;
  #L1df51a.  goto L1df52a;
  #L1df51c.  call temp:= `getDirectory$okio`(v11) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df522.  v11:= temp @kind object;
  #L1df524.  v3:= v3 - v1 @kind int;
  #L1df526.  v0:= v11[v3];
  #L1df52a.  v11:= length @variable v4;
  #L1df52c.  v13:= v5[v11];
  #L1df530.  v12:= v12 - v0 @kind int;
  #L1df532.  v13:= v13 + v12 @kind int;
  #L1df534.  v5[v11]:= v13;
  #L1df538.  v11:= new `okio.SegmentedByteString`;
  #L1df53c.  call `<init>`(v11, v4, v5) @signature `Lokio/SegmentedByteString;.<init>:([[B[I)V` @kind direct;
  #L1df542.  return v11 @kind object;
  #L1df544.  v11:= new `java.lang.StringBuilder`;
  #L1df548.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1df54e.  call temp:= `append`(v11, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1df554.  call temp:= `append`(v11, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1df55a.  v13:= " < beginIndex=" @kind object;
  #L1df55e.  call temp:= `append`(v11, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1df564.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1df56a.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1df570.  v11:= temp @kind object;
  #L1df572.  v12:= new `java.lang.IllegalArgumentException`;
  #L1df576.  call temp:= `toString`(v11) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1df57c.  v11:= temp @kind object;
  #L1df57e.  call `<init>`(v12, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1df584.  throw v12;
  #L1df586.  v12:= new `java.lang.StringBuilder`;
  #L1df58a.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1df590.  call temp:= `append`(v12, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1df596.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1df59c.  v13:= " > length(" @kind object;
  #L1df5a0.  call temp:= `append`(v12, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1df5a6.  call temp:= `size`(v11) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1df5ac.  v11:= temp;
  #L1df5ae.  call temp:= `append`(v12, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1df5b4.  v11:= 41I;
  #L1df5b8.  call temp:= `append`(v12, v11) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1df5be.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1df5c4.  v11:= temp @kind object;
  #L1df5c6.  v12:= new `java.lang.IllegalArgumentException`;
  #L1df5ca.  call temp:= `toString`(v11) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1df5d0.  v11:= temp @kind object;
  #L1df5d2.  call `<init>`(v12, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1df5d8.  throw v12;
  #L1df5da.  v11:= new `java.lang.StringBuilder`;
  #L1df5de.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1df5e4.  v13:= "beginIndex=" @kind object;
  #L1df5e8.  call temp:= `append`(v11, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1df5ee.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1df5f4.  v12:= " < 0" @kind object;
  #L1df5f8.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1df5fe.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1df604.  v11:= temp @kind object;
  #L1df606.  v12:= new `java.lang.IllegalArgumentException`;
  #L1df60a.  call temp:= `toString`(v11) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1df610.  v11:= temp @kind object;
  #L1df612.  call `<init>`(v12, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1df618.  throw v12;
}
procedure `byte`[] `commonToByteArray`(`okio.SegmentedByteString` v9 @kind object) @signature `Lokio/internal/SegmentedByteStringKt;.commonToByteArray:(Lokio/SegmentedByteString;)[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1df254.  v0:= "$this$commonToByteArray" @kind object;
  #L1df258.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1df25e.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1df264.  v0:= temp;
  #L1df266.  v0:= new `byte`[v0];
  #L1df26a.  call temp:= `getSegments$okio`(v9) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df270.  v1:= temp @kind object;
  #L1df272.  v1:= length @variable v1;
  #L1df274.  v2:= 0I;
  #L1df276.  v3:= 0I;
  #L1df278.  v4:= 0I;
  #L1df27a.  if v2 >= v1 then goto L1df2be;
  #L1df27e.  call temp:= `getDirectory$okio`(v9) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df284.  v5:= temp @kind object;
  #L1df286.  v6:= v1 + v2 @kind int;
  #L1df28a.  v5:= v5[v6];
  #L1df28e.  call temp:= `getDirectory$okio`(v9) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df294.  v6:= temp @kind object;
  #L1df296.  v6:= v6[v2];
  #L1df29a.  call temp:= `getSegments$okio`(v9) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df2a0.  v7:= temp @kind object;
  #L1df2a2.  v7:= v7[v2] @kind object;
  #L1df2a6.  v3:= v6 - v3 @kind int;
  #L1df2aa.  v8:= v5 + v3 @kind int;
  #L1df2ae.  call temp:= `copyInto`(v7, v0, v4, v5, v8) @signature `Lkotlin/collections/ArraysKt;.copyInto:([B[BIII)[B` @kind static;
  #L1df2b4.  v4:= v4 + v3 @kind int;
  #L1df2b6.  v2:= v2 + 1;
  #L1df2ba.  v3:= v6;
  #L1df2bc.  goto L1df27a;
  #L1df2be.  return v0 @kind object;
}
procedure `void` `commonWrite`(`okio.SegmentedByteString` v11 @kind object, `okio.Buffer` v12 @kind object, `int` v13 , `int` v14 ) @signature `Lokio/internal/SegmentedByteStringKt;.commonWrite:(Lokio/SegmentedByteString;Lokio/Buffer;II)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1df644.  v0:= "$this$commonWrite" @kind object;
  #L1df648.  call `checkNotNullParameter`(v11, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1df64e.  v0:= "buffer" @kind object;
  #L1df652.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1df658.  v0:= v13 + v14 @kind int;
  #L1df65c.  call temp:= `segment`(v11, v13) @signature `Lokio/internal/SegmentedByteStringKt;.segment:(Lokio/SegmentedByteString;I)I` @kind static;
  #L1df662.  v1:= temp;
  #L1df664.  if v13 >= v0 then goto L1df70e;
  #L1df668.  if v1 != 0 then goto L1df670;
  #L1df66c.  v2:= 0I;
  #L1df66e.  goto L1df680;
  #L1df670.  call temp:= `getDirectory$okio`(v11) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df676.  v2:= temp @kind object;
  #L1df678.  v3:= v1 + -1;
  #L1df67c.  v2:= v2[v3];
  #L1df680.  call temp:= `getDirectory$okio`(v11) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df686.  v3:= temp @kind object;
  #L1df688.  v3:= v3[v1];
  #L1df68c.  v3:= v3 - v2 @kind int;
  #L1df68e.  call temp:= `getDirectory$okio`(v11) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df694.  v4:= temp @kind object;
  #L1df696.  call temp:= `getSegments$okio`(v11) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df69c.  v5:= temp @kind object;
  #L1df69e.  v5:= length @variable v5;
  #L1df6a0.  v5:= v5 + v1 @kind int;
  #L1df6a2.  v4:= v4[v5];
  #L1df6a6.  v3:= v3 + v2 @kind int;
  #L1df6a8.  call temp:= `min`(v0, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1df6ae.  v3:= temp;
  #L1df6b0.  v3:= v3 - v13 @kind int;
  #L1df6b2.  v2:= v13 - v2 @kind int;
  #L1df6b6.  v7:= v4 + v2 @kind int;
  #L1df6ba.  call temp:= `getSegments$okio`(v11) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df6c0.  v2:= temp @kind object;
  #L1df6c2.  v6:= v2[v1] @kind object;
  #L1df6c6.  v2:= new `okio.Segment`;
  #L1df6ca.  v8:= v7 + v3 @kind int;
  #L1df6ce.  v9:= 1I;
  #L1df6d0.  v10:= 0I;
  #L1df6d2.  v5:= v2 @kind object;
  #L1df6d4.  call `<init>`(v5, v6, v7, v8, v9, v10) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @kind direct;
  #L1df6da.  v4:= v12.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1df6de.  if v4 != 0 then goto L1df6f0;
  #L1df6e2.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v2 @kind object;
  #L1df6e6.  v2.`okio.Segment.next` @type ^`okio.Segment` := v2 @kind object;
  #L1df6ea.  v12.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L1df6ee.  goto L1df706;
  #L1df6f0.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1df6f6.  v4:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1df6fa.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1df700.  call temp:= `push`(v4, v2) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1df706.  v13:= v13 + v3 @kind int;
  #L1df708.  v1:= v1 + 1;
  #L1df70c.  goto L1df664;
  #L1df70e.  call temp:= `size`(v12) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1df714.  v0:= temp @kind wide;
  #L1df716.  v13:= (`long`) v14 @kind i2l;
  #L1df718.  v0:= v0 + v13 @kind long;
  #L1df71a.  call `setSize$okio`(v12, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1df720.  return @kind void;
}
procedure `void` `forEachSegment`(`okio.SegmentedByteString` v6 @kind object, `kotlin.jvm.functions.Function3` v7 @kind object) @signature `Lokio/internal/SegmentedByteStringKt;.forEachSegment:(Lokio/SegmentedByteString;Lkotlin/jvm/functions/Function3;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1df7cc.  v0:= "$this$forEachSegment" @kind object;
  #L1df7d0.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1df7d6.  v0:= "action" @kind object;
  #L1df7da.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1df7e0.  call temp:= `getSegments$okio`(v6) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df7e6.  v0:= temp @kind object;
  #L1df7e8.  v0:= length @variable v0;
  #L1df7ea.  v1:= 0I;
  #L1df7ec.  v2:= 0I;
  #L1df7ee.  if v1 >= v0 then goto L1df83c;
  #L1df7f2.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df7f8.  v3:= temp @kind object;
  #L1df7fa.  v4:= v0 + v1 @kind int;
  #L1df7fe.  v3:= v3[v4];
  #L1df802.  call temp:= `getDirectory$okio`(v6) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df808.  v4:= temp @kind object;
  #L1df80a.  v4:= v4[v1];
  #L1df80e.  call temp:= `getSegments$okio`(v6) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df814.  v5:= temp @kind object;
  #L1df816.  v5:= v5[v1] @kind object;
  #L1df81a.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1df820.  v3:= temp @kind object;
  #L1df822.  v2:= v4 - v2 @kind int;
  #L1df826.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1df82c.  v2:= temp @kind object;
  #L1df82e.  call temp:= `invoke`(v7, v5, v3, v2) @signature `Lkotlin/jvm/functions/Function3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1df834.  v1:= v1 + 1;
  #L1df838.  v2:= v4;
  #L1df83a.  goto L1df7ee;
  #L1df83c.  return @kind void;
}
procedure `int` `segment`(`okio.SegmentedByteString` v2 @kind object, `int` v3 ) @signature `Lokio/internal/SegmentedByteStringKt;.segment:(Lokio/SegmentedByteString;I)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1df3e8.  v0:= "$this$segment" @kind object;
  #L1df3ec.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1df3f2.  call temp:= `getDirectory$okio`(v2) @signature `Lokio/SegmentedByteString;.getDirectory$okio:()[I` @kind virtual;
  #L1df3f8.  v0:= temp @kind object;
  #L1df3fa.  v3:= v3 + 1;
  #L1df3fe.  call temp:= `getSegments$okio`(v2) @signature `Lokio/SegmentedByteString;.getSegments$okio:()[[B` @kind virtual;
  #L1df404.  v2:= temp @kind object;
  #L1df406.  v2:= length @variable v2;
  #L1df408.  v1:= 0I;
  #L1df40a.  call temp:= `binarySearch`(v0, v3, v1, v2) @signature `Lokio/internal/SegmentedByteStringKt;.binarySearch:([IIII)I` @kind static;
  #L1df410.  v2:= temp;
  #L1df412.  if v2 < 0 then goto L1df418;
  #L1df416.  goto L1df41a;
  #L1df418.  v2:= ~v2 @kind int;
  #L1df41a.  return v2;
}
