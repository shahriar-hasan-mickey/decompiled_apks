record `okio.InflaterSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Source` @kind interface {
  `int` `okio.InflaterSource.a` @AccessFlag PRIVATE;
  `boolean` `okio.InflaterSource.b` @AccessFlag PRIVATE;
  `okio.BufferedSource` `okio.InflaterSource.c` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `okio.InflaterSource.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.InflaterSource` v1 @kind this, `okio.BufferedSource` v2 @kind object, `java.util.zip.Inflater` v3 @kind object) @signature `Lokio/InflaterSource;.<init>:(Lokio/BufferedSource;Ljava/util/zip/Inflater;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d1fc0.  v0:= "source" @kind object;
  #L1d1fc4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d1fca.  v0:= "inflater" @kind object;
  #L1d1fce.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d1fd4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d1fda.  v1.`okio.InflaterSource.c` @type ^`okio.BufferedSource` := v2 @kind object;
  #L1d1fde.  v1.`okio.InflaterSource.d` @type ^`java.util.zip.Inflater` := v3 @kind object;
  #L1d1fe2.  return @kind void;
}
procedure `void` `<init>`(`okio.InflaterSource` v1 @kind this, `okio.Source` v2 @kind object, `java.util.zip.Inflater` v3 @kind object) @signature `Lokio/InflaterSource;.<init>:(Lokio/Source;Ljava/util/zip/Inflater;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1d1ff4.  v0:= "source" @kind object;
  #L1d1ff8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d1ffe.  v0:= "inflater" @kind object;
  #L1d2002.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d2008.  call temp:= `buffer`(v2) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L1d200e.  v2:= temp @kind object;
  #L1d2010.  call `<init>`(v1, v2, v3) @signature `Lokio/InflaterSource;.<init>:(Lokio/BufferedSource;Ljava/util/zip/Inflater;)V` @kind direct;
  #L1d2016.  return @kind void;
}
procedure `void` `a`(`okio.InflaterSource` v4 @kind this) @signature `Lokio/InflaterSource;.a:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1d2060.  v0:= v4.`okio.InflaterSource.a` @type ^`int`;
  #L1d2064.  if v0 != 0 then goto L1d206a;
  #L1d2068.  return @kind void;
  #L1d206a.  v1:= v4.`okio.InflaterSource.d` @type ^`java.util.zip.Inflater` @kind object;
  #L1d206e.  call temp:= `getRemaining`(v1) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L1d2074.  v1:= temp;
  #L1d2076.  v0:= v0 - v1 @kind int;
  #L1d2078.  v1:= v4.`okio.InflaterSource.a` @type ^`int`;
  #L1d207c.  v1:= v1 - v0 @kind int;
  #L1d207e.  v4.`okio.InflaterSource.a` @type ^`int` := v1;
  #L1d2082.  v1:= v4.`okio.InflaterSource.c` @type ^`okio.BufferedSource` @kind object;
  #L1d2086.  v2:= (`long`) v0 @kind i2l;
  #L1d2088.  call `skip`(v1, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L1d208e.  return @kind void;
}
procedure `void` `close`(`okio.InflaterSource` v1 @kind this) @signature `Lokio/InflaterSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d2028.  v0:= v1.`okio.InflaterSource.b` @type ^`boolean` @kind boolean;
  #L1d202c.  if v0 == 0 then goto L1d2032;
  #L1d2030.  return @kind void;
  #L1d2032.  v0:= v1.`okio.InflaterSource.d` @type ^`java.util.zip.Inflater` @kind object;
  #L1d2036.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L1d203c.  v0:= 1I;
  #L1d203e.  v1.`okio.InflaterSource.b` @type ^`boolean` := v0 @kind boolean;
  #L1d2042.  v0:= v1.`okio.InflaterSource.c` @type ^`okio.BufferedSource` @kind object;
  #L1d2046.  call `close`(v0) @signature `Lokio/Source;.close:()V` @kind interface;
  #L1d204c.  return @kind void;
}
procedure `long` `read`(`okio.InflaterSource` v5 @kind this, `okio.Buffer` v6 @kind object, `long` v7 ) @signature `Lokio/InflaterSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d1df8.  v0:= "sink" @kind object;
  #L1d1dfc.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d1e02.  call temp:= `readOrInflate`(v5, v6, v7) @signature `Lokio/InflaterSource;.readOrInflate:(Lokio/Buffer;J)J` @kind virtual;
  #L1d1e08.  v0:= temp @kind wide;
  #L1d1e0a.  v2:= 0L;
  #L1d1e0e.  v4:= lcmp(v0, v2);
  #L1d1e12.  if v4 <= 0 then goto L1d1e18;
  #L1d1e16.  return v0 @kind wide;
  #L1d1e18.  v0:= v5.`okio.InflaterSource.d` @type ^`java.util.zip.Inflater` @kind object;
  #L1d1e1c.  call temp:= `finished`(v0) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L1d1e22.  v0:= temp;
  #L1d1e24.  if v0 != 0 then goto L1d1e5c;
  #L1d1e28.  v0:= v5.`okio.InflaterSource.d` @type ^`java.util.zip.Inflater` @kind object;
  #L1d1e2c.  call temp:= `needsDictionary`(v0) @signature `Ljava/util/zip/Inflater;.needsDictionary:()Z` @kind virtual;
  #L1d1e32.  v0:= temp;
  #L1d1e34.  if v0 == 0 then goto L1d1e3a;
  #L1d1e38.  goto L1d1e5c;
  #L1d1e3a.  v0:= v5.`okio.InflaterSource.c` @type ^`okio.BufferedSource` @kind object;
  #L1d1e3e.  call temp:= `exhausted`(v0) @signature `Lokio/BufferedSource;.exhausted:()Z` @kind interface;
  #L1d1e44.  v0:= temp;
  #L1d1e46.  if v0 != 0 then goto L1d1e4c;
  #L1d1e4a.  goto L1d1e02;
  #L1d1e4c.  v6:= new `java.io.EOFException`;
  #L1d1e50.  v7:= "source exhausted prematurely" @kind object;
  #L1d1e54.  call `<init>`(v6, v7) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d1e5a.  throw v6;
  #L1d1e5c.  v6:= -1L;
  #L1d1e60.  return v6 @kind wide;
}
procedure `long` `readOrInflate`(`okio.InflaterSource` v5 @kind this, `okio.Buffer` v6 @kind object, `long` v7 ) @signature `Lokio/InflaterSource;.readOrInflate:(Lokio/Buffer;J)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d1e74.  v0:= "sink" @kind object;
  #L1d1e78.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1d1e7e.  v0:= 1I;
  #L1d1e80.  v1:= 0L;
  #L1d1e84.  v3:= lcmp(v7, v1);
  #L1d1e88.  if v3 < 0 then goto L1d1e90;
  #L1d1e8c.  v4:= 1I;
  #L1d1e8e.  goto L1d1e92;
  #L1d1e90.  v4:= 0I;
  #L1d1e92.  if v4 == 0 then goto L1d1f4a;
  #L1d1e96.  v4:= v5.`okio.InflaterSource.b` @type ^`boolean` @kind boolean;
  #L1d1e9a.  v4:= v4 ^~ v0 @kind int;
  #L1d1e9c.  if v4 == 0 then goto L1d1f32;
  #L1d1ea0.  if v3 != 0 then goto L1d1ea6;
  #L1d1ea4.  return v1 @kind wide;
  #L1d1ea6.  call temp:= `writableSegment$okio`(v6, v0) @signature `Lokio/Buffer;.writableSegment$okio:(I)Lokio/Segment;` @kind virtual;
  #L1d1eac.  v0:= temp @kind object;
  #L1d1eae.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d1eb2.  v3:= v3 - 8192;
  #L1d1eb6.  v3:= (`long`) v3 @kind i2l;
  #L1d1eb8.  call temp:= `min`(v7, v3) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1d1ebe.  v7:= temp @kind wide;
  #L1d1ec0.  v8:= (`int`) v7 @kind l2i;
  #L1d1ec2.  call temp:= `refill`(v5) @signature `Lokio/InflaterSource;.refill:()Z` @kind virtual;
  #L1d1ec8.  v7:= v5.`okio.InflaterSource.d` @type ^`java.util.zip.Inflater` @kind object;
  #L1d1ecc.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d1ed0.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d1ed4.  call temp:= `inflate`(v7, v3, v4, v8) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #L1d1eda.  v7:= temp;
  #L1d1edc.  call `a`(v5) @signature `Lokio/InflaterSource;.a:()V` @kind direct;
  #L1d1ee2.  if v7 <= 0 then goto L1d1f04;
  #L1d1ee6.  v8:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d1eea.  v8:= v8 + v7 @kind int;
  #L1d1eec.  v0.`okio.Segment.limit` @type ^`int` := v8;
  #L1d1ef0.  call temp:= `size`(v6) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1d1ef6.  v0:= temp @kind wide;
  #L1d1ef8.  v7:= (`long`) v7 @kind i2l;
  #L1d1efa.  v0:= v0 + v7 @kind long;
  #L1d1efc.  call `setSize$okio`(v6, v0) @signature `Lokio/Buffer;.setSize$okio:(J)V` @kind virtual;
  #L1d1f02.  return v7 @kind wide;
  #L1d1f04.  v7:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d1f08.  v8:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d1f0c.  if v7 != v8 then goto L1d1f22;
  #L1d1f10.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1d1f16.  v7:= temp @kind object;
  #L1d1f18.  v6.`okio.Buffer.head` @type ^`okio.Segment` := v7 @kind object;
  #L1d1f1c.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1d1f22.  return v1 @kind wide;
  #L1d1f24.  v6:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L1d1f26.  v7:= new `java.io.IOException`;
  #L1d1f2a.  call `<init>`(v7, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1d1f30.  throw v7;
  #L1d1f32.  v6:= new `java.lang.IllegalStateException`;
  #L1d1f36.  v7:= "closed" @kind object;
  #L1d1f3a.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d1f40.  v7:= temp @kind object;
  #L1d1f42.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d1f48.  throw v6;
  #L1d1f4a.  v6:= new `java.lang.StringBuilder`;
  #L1d1f4e.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1d1f54.  v0:= "byteCount < 0: " @kind object;
  #L1d1f58.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d1f5e.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1d1f64.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d1f6a.  v6:= temp @kind object;
  #L1d1f6c.  v7:= new `java.lang.IllegalArgumentException`;
  #L1d1f70.  call temp:= `toString`(v6) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1d1f76.  v6:= temp @kind object;
  #L1d1f78.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1d1f7e.  throw v7;
  catch `java.util.zip.DataFormatException` @[L1d1ea6..L1d1f22] goto L1d1f24;
}
procedure `boolean` `refill`(`okio.InflaterSource` v5 @kind this) @signature `Lokio/InflaterSource;.refill:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d1d8c.  v0:= v5.`okio.InflaterSource.d` @type ^`java.util.zip.Inflater` @kind object;
  #L1d1d90.  call temp:= `needsInput`(v0) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L1d1d96.  v0:= temp;
  #L1d1d98.  v1:= 0I;
  #L1d1d9a.  if v0 != 0 then goto L1d1da0;
  #L1d1d9e.  return v1;
  #L1d1da0.  v0:= v5.`okio.InflaterSource.c` @type ^`okio.BufferedSource` @kind object;
  #L1d1da4.  call temp:= `exhausted`(v0) @signature `Lokio/BufferedSource;.exhausted:()Z` @kind interface;
  #L1d1daa.  v0:= temp;
  #L1d1dac.  if v0 == 0 then goto L1d1db4;
  #L1d1db0.  v0:= 1I;
  #L1d1db2.  return v0;
  #L1d1db4.  v0:= v5.`okio.InflaterSource.c` @type ^`okio.BufferedSource` @kind object;
  #L1d1db8.  call temp:= `getBuffer`(v0) @signature `Lokio/BufferedSource;.getBuffer:()Lokio/Buffer;` @kind interface;
  #L1d1dbe.  v0:= temp @kind object;
  #L1d1dc0.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1d1dc4.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L1d1dca.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L1d1dce.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L1d1dd2.  v2:= v2 - v3 @kind int;
  #L1d1dd4.  v5.`okio.InflaterSource.a` @type ^`int` := v2;
  #L1d1dd8.  v4:= v5.`okio.InflaterSource.d` @type ^`java.util.zip.Inflater` @kind object;
  #L1d1ddc.  v0:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1d1de0.  call `setInput`(v4, v0, v3, v2) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L1d1de6.  return v1;
}
procedure `okio.Timeout` `timeout`(`okio.InflaterSource` v1 @kind this) @signature `Lokio/InflaterSource;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1d1fa0.  v0:= v1.`okio.InflaterSource.c` @type ^`okio.BufferedSource` @kind object;
  #L1d1fa4.  call temp:= `timeout`(v0) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L1d1faa.  v0:= temp @kind object;
  #L1d1fac.  return v0 @kind object;
}
