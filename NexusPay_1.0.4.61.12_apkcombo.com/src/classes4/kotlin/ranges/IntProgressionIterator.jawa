record `kotlin.ranges.IntProgressionIterator` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.IntIterator` @kind class {
  `int` `kotlin.ranges.IntProgressionIterator.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.ranges.IntProgressionIterator.b` @AccessFlag PRIVATE;
  `int` `kotlin.ranges.IntProgressionIterator.c` @AccessFlag PRIVATE;
  `int` `kotlin.ranges.IntProgressionIterator.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.IntProgressionIterator` v2 @kind this, `int` v3 , `int` v4 , `int` v5 ) @signature `Lkotlin/ranges/IntProgressionIterator;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L135360.  call `<init>`(v2) @signature `Lkotlin/collections/IntIterator;.<init>:()V` @kind direct;
  #L135366.  v2.`kotlin.ranges.IntProgressionIterator.d` @type ^`int` := v5;
  #L13536a.  v2.`kotlin.ranges.IntProgressionIterator.a` @type ^`int` := v4;
  #L13536e.  v0:= 1I;
  #L135370.  v1:= 0I;
  #L135372.  if v5 <= 0 then goto L13537c;
  #L135376.  if v3 > v4 then goto L135382;
  #L13537a.  goto L135384;
  #L13537c.  if v3 < v4 then goto L135382;
  #L135380.  goto L135384;
  #L135382.  v0:= 0I;
  #L135384.  v2.`kotlin.ranges.IntProgressionIterator.b` @type ^`boolean` := v0 @kind boolean;
  #L135388.  if v0 == 0 then goto L13538e;
  #L13538c.  goto L135392;
  #L13538e.  v3:= v2.`kotlin.ranges.IntProgressionIterator.a` @type ^`int`;
  #L135392.  v2.`kotlin.ranges.IntProgressionIterator.c` @type ^`int` := v3;
  #L135396.  return @kind void;
}
procedure `int` `getStep`(`kotlin.ranges.IntProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/IntProgressionIterator;.getStep:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L135304.  v0:= v1.`kotlin.ranges.IntProgressionIterator.d` @type ^`int`;
  #L135308.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.ranges.IntProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/IntProgressionIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1352ec.  v0:= v1.`kotlin.ranges.IntProgressionIterator.b` @type ^`boolean` @kind boolean;
  #L1352f0.  return v0;
}
procedure `int` `nextInt`(`kotlin.ranges.IntProgressionIterator` v2 @kind this) @signature `Lkotlin/ranges/IntProgressionIterator;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13531c.  v0:= v2.`kotlin.ranges.IntProgressionIterator.c` @type ^`int`;
  #L135320.  v1:= v2.`kotlin.ranges.IntProgressionIterator.a` @type ^`int`;
  #L135324.  if v0 != v1 then goto L135344;
  #L135328.  v1:= v2.`kotlin.ranges.IntProgressionIterator.b` @type ^`boolean` @kind boolean;
  #L13532c.  if v1 == 0 then goto L135338;
  #L135330.  v1:= 0I;
  #L135332.  v2.`kotlin.ranges.IntProgressionIterator.b` @type ^`boolean` := v1 @kind boolean;
  #L135336.  goto L13534e;
  #L135338.  v0:= new `java.util.NoSuchElementException`;
  #L13533c.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L135342.  throw v0;
  #L135344.  v1:= v2.`kotlin.ranges.IntProgressionIterator.d` @type ^`int`;
  #L135348.  v1:= v1 + v0 @kind int;
  #L13534a.  v2.`kotlin.ranges.IntProgressionIterator.c` @type ^`int` := v1;
  #L13534e.  return v0;
}
