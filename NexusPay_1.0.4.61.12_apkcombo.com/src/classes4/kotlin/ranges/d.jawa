record `kotlin.ranges.d` @kind class @AccessFlag  {
}
procedure `void` `<init>`(`kotlin.ranges.d` v0 @kind this) @signature `Lkotlin/ranges/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L136000.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L136006.  return @kind void;
}
procedure `void` `checkStepIsPositive`(`boolean` v2 , `java.lang.Number` v3 @kind object) @signature `Lkotlin/ranges/d;.checkStepIsPositive:(ZLjava/lang/Number;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L136018.  v0:= "step" @kind object;
  #L13601c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136022.  if v2 == 0 then goto L136028;
  #L136026.  return @kind void;
  #L136028.  v2:= new `java.lang.IllegalArgumentException`;
  #L13602c.  v0:= new `java.lang.StringBuilder`;
  #L136030.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L136036.  v1:= "Step must be positive, was: " @kind object;
  #L13603a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L136040.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L136046.  v3:= 46I;
  #L13604a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L136050.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L136056.  v3:= temp @kind object;
  #L136058.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13605e.  throw v2;
}
procedure `kotlin.ranges.ClosedFloatingPointRange` `rangeTo`(`double` v1 , `double` v3 ) @signature `Lkotlin/ranges/d;.rangeTo:(DD)Lkotlin/ranges/ClosedFloatingPointRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L135f98.  v0:= new `kotlin.ranges.a`;
  #L135f9c.  call `<init>`(v0, v1, v3) @signature `Lkotlin/ranges/a;.<init>:(DD)V` @kind direct;
  #L135fa2.  return v0 @kind object;
}
procedure `kotlin.ranges.ClosedFloatingPointRange` `rangeTo`(`float` v1 , `float` v2 ) @signature `Lkotlin/ranges/d;.rangeTo:(FF)Lkotlin/ranges/ClosedFloatingPointRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L135fb4.  v0:= new `kotlin.ranges.b`;
  #L135fb8.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/b;.<init>:(FF)V` @kind direct;
  #L135fbe.  return v0 @kind object;
}
procedure `kotlin.ranges.ClosedRange` `rangeTo`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lkotlin/ranges/d;.rangeTo:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Lkotlin/ranges/ClosedRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L135fd0.  v0:= "$this$rangeTo" @kind object;
  #L135fd4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L135fda.  v0:= "that" @kind object;
  #L135fde.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L135fe4.  v0:= new `kotlin.ranges.c`;
  #L135fe8.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/c;.<init>:(Ljava/lang/Comparable;Ljava/lang/Comparable;)V` @kind direct;
  #L135fee.  return v0 @kind object;
}
