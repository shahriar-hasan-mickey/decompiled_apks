record `kotlin.ranges.UIntProgression` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int` `kotlin.ranges.UIntProgression.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.UIntProgression.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.UIntProgression.c` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.ranges.UIntProgression$Companion` `@@kotlin.ranges.UIntProgression.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/UIntProgression;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L13800c.  v0:= new `kotlin.ranges.UIntProgression$Companion`;
  #L138010.  v1:= 0I;
  #L138012.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/UIntProgression$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L138018.  `@@kotlin.ranges.UIntProgression.Companion` @type ^`kotlin.ranges.UIntProgression$Companion` := v0 @kind object;
  #L13801c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.UIntProgression` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lkotlin/ranges/UIntProgression;.<init>:(III)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L138030.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L138036.  if v4 == 0 then goto L138068;
  #L13803a.  v0:= -2147483648I;
  #L13803e.  if v4 == v0 then goto L138058;
  #L138042.  v1.`kotlin.ranges.UIntProgression.a` @type ^`int` := v2;
  #L138046.  call temp:= `getProgressionLastElement-Nkh28Cs`(v2, v3, v4) @signature `Lkotlin/internal/UProgressionUtilKt;.getProgressionLastElement-Nkh28Cs:(III)I` @kind static;
  #L13804c.  v2:= temp;
  #L13804e.  v1.`kotlin.ranges.UIntProgression.b` @type ^`int` := v2;
  #L138052.  v1.`kotlin.ranges.UIntProgression.c` @type ^`int` := v4;
  #L138056.  return @kind void;
  #L138058.  v2:= new `java.lang.IllegalArgumentException`;
  #L13805c.  v3:= "Step must be greater than Int.MIN_VALUE to avoid overflow on negation." @kind object;
  #L138060.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L138066.  throw v2;
  #L138068.  v2:= new `java.lang.IllegalArgumentException`;
  #L13806c.  v3:= "Step must be non-zero." @kind object;
  #L138070.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L138076.  throw v2;
}
procedure `void` `<init>`(`kotlin.ranges.UIntProgression` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `kotlin.jvm.internal.DefaultConstructorMarker` v4 @kind object) @signature `Lkotlin/ranges/UIntProgression;.<init>:(IIILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L138088.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/ranges/UIntProgression;.<init>:(III)V` @kind direct;
  #L13808e.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.ranges.UIntProgression` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ranges/UIntProgression;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L137df4.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.UIntProgression` @kind boolean;
  #L137df8.  if v0 == 0 then goto L137e46;
  #L137dfc.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/UIntProgression;.isEmpty:()Z` @kind virtual;
  #L137e02.  v0:= temp;
  #L137e04.  if v0 == 0 then goto L137e1a;
  #L137e08.  v0:= v3 @kind object;
  #L137e0a.  v0:= (`kotlin.ranges.UIntProgression`) v0 @kind object;
  #L137e0e.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/UIntProgression;.isEmpty:()Z` @kind virtual;
  #L137e14.  v0:= temp;
  #L137e16.  if v0 != 0 then goto L137e42;
  #L137e1a.  v0:= v2.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L137e1e.  v3:= (`kotlin.ranges.UIntProgression`) v3 @kind object;
  #L137e22.  v1:= v3.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L137e26.  if v0 != v1 then goto L137e46;
  #L137e2a.  v0:= v2.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L137e2e.  v1:= v3.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L137e32.  if v0 != v1 then goto L137e46;
  #L137e36.  v0:= v2.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L137e3a.  v3:= v3.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L137e3e.  if v0 != v3 then goto L137e46;
  #L137e42.  v3:= 1I;
  #L137e44.  goto L137e48;
  #L137e46.  v3:= 0I;
  #L137e48.  return v3;
}
procedure `int` `getFirst-pVg5ArA`(`kotlin.ranges.UIntProgression` v1 @kind this) @signature `Lkotlin/ranges/UIntProgression;.getFirst-pVg5ArA:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L137ea8.  v0:= v1.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L137eac.  return v0;
}
procedure `int` `getLast-pVg5ArA`(`kotlin.ranges.UIntProgression` v1 @kind this) @signature `Lkotlin/ranges/UIntProgression;.getLast-pVg5ArA:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L137ec0.  v0:= v1.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L137ec4.  return v0;
}
procedure `int` `getStep`(`kotlin.ranges.UIntProgression` v1 @kind this) @signature `Lkotlin/ranges/UIntProgression;.getStep:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L137ed8.  v0:= v1.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L137edc.  return v0;
}
procedure `int` `hashCode`(`kotlin.ranges.UIntProgression` v2 @kind this) @signature `Lkotlin/ranges/UIntProgression;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L137ef0.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/UIntProgression;.isEmpty:()Z` @kind virtual;
  #L137ef6.  v0:= temp;
  #L137ef8.  if v0 == 0 then goto L137f00;
  #L137efc.  v0:= -1I;
  #L137efe.  goto L137f18;
  #L137f00.  v0:= v2.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L137f04.  v0:= v0 * 31;
  #L137f08.  v1:= v2.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L137f0c.  v0:= v0 + v1 @kind int;
  #L137f0e.  v0:= v0 * 31;
  #L137f12.  v1:= v2.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L137f16.  v0:= v0 + v1 @kind int;
  #L137f18.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.UIntProgression` v4 @kind this) @signature `Lkotlin/ranges/UIntProgression;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L137e5c.  v0:= v4.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L137e60.  v1:= 1I;
  #L137e62.  v2:= 0I;
  #L137e64.  if v0 <= 0 then goto L137e7e;
  #L137e68.  v0:= v4.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L137e6c.  v3:= v4.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L137e70.  call temp:= `uintCompare`(v0, v3) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @kind static;
  #L137e76.  v0:= temp;
  #L137e78.  if v0 <= 0 then goto L137e94;
  #L137e7c.  goto L137e96;
  #L137e7e.  v0:= v4.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L137e82.  v3:= v4.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L137e86.  call temp:= `uintCompare`(v0, v3) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @kind static;
  #L137e8c.  v0:= temp;
  #L137e8e.  if v0 >= 0 then goto L137e94;
  #L137e92.  goto L137e96;
  #L137e94.  v1:= 0I;
  #L137e96.  return v1;
}
procedure `java.util.Iterator` `iterator`(`kotlin.ranges.UIntProgression` v5 @kind this) @signature `Lkotlin/ranges/UIntProgression;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L137fe0.  v0:= new `kotlin.ranges.f`;
  #L137fe4.  v1:= v5.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L137fe8.  v2:= v5.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L137fec.  v3:= v5.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L137ff0.  v4:= 0I;
  #L137ff2.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lkotlin/ranges/f;.<init>:(IIILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L137ff8.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.UIntProgression` v3 @kind this) @signature `Lkotlin/ranges/UIntProgression;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L137f2c.  v0:= v3.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L137f30.  v1:= " step " @kind object;
  #L137f34.  if v0 <= 0 then goto L137f7c;
  #L137f38.  v0:= new `java.lang.StringBuilder`;
  #L137f3c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L137f42.  v2:= v3.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L137f46.  call temp:= `toString-impl`(v2) @signature `Lkotlin/UInt;.toString-impl:(I)Ljava/lang/String;` @kind static;
  #L137f4c.  v2:= temp @kind object;
  #L137f4e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L137f54.  v2:= ".." @kind object;
  #L137f58.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L137f5e.  v2:= v3.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L137f62.  call temp:= `toString-impl`(v2) @signature `Lkotlin/UInt;.toString-impl:(I)Ljava/lang/String;` @kind static;
  #L137f68.  v2:= temp @kind object;
  #L137f6a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L137f70.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L137f76.  v1:= v3.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L137f7a.  goto L137fc0;
  #L137f7c.  v0:= new `java.lang.StringBuilder`;
  #L137f80.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L137f86.  v2:= v3.`kotlin.ranges.UIntProgression.a` @type ^`int`;
  #L137f8a.  call temp:= `toString-impl`(v2) @signature `Lkotlin/UInt;.toString-impl:(I)Ljava/lang/String;` @kind static;
  #L137f90.  v2:= temp @kind object;
  #L137f92.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L137f98.  v2:= " downTo " @kind object;
  #L137f9c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L137fa2.  v2:= v3.`kotlin.ranges.UIntProgression.b` @type ^`int`;
  #L137fa6.  call temp:= `toString-impl`(v2) @signature `Lkotlin/UInt;.toString-impl:(I)Ljava/lang/String;` @kind static;
  #L137fac.  v2:= temp @kind object;
  #L137fae.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L137fb4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L137fba.  v1:= v3.`kotlin.ranges.UIntProgression.c` @type ^`int`;
  #L137fbe.  v1:= -v1 @kind int;
  #L137fc0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L137fc6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L137fcc.  v0:= temp @kind object;
  #L137fce.  return v0 @kind object;
}
