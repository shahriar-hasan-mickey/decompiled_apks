record `kotlin.ranges.IntProgression` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int` `kotlin.ranges.IntProgression.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.IntProgression.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.IntProgression.c` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.ranges.IntProgression$Companion` `@@kotlin.ranges.IntProgression.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/IntProgression;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1355a8.  v0:= new `kotlin.ranges.IntProgression$Companion`;
  #L1355ac.  v1:= 0I;
  #L1355ae.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/IntProgression$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L1355b4.  `@@kotlin.ranges.IntProgression.Companion` @type ^`kotlin.ranges.IntProgression$Companion` := v0 @kind object;
  #L1355b8.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.IntProgression` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lkotlin/ranges/IntProgression;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1355cc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1355d2.  if v4 == 0 then goto L135604;
  #L1355d6.  v0:= -2147483648I;
  #L1355da.  if v4 == v0 then goto L1355f4;
  #L1355de.  v1.`kotlin.ranges.IntProgression.a` @type ^`int` := v2;
  #L1355e2.  call temp:= `getProgressionLastElement`(v2, v3, v4) @signature `Lkotlin/internal/ProgressionUtilKt;.getProgressionLastElement:(III)I` @kind static;
  #L1355e8.  v2:= temp;
  #L1355ea.  v1.`kotlin.ranges.IntProgression.b` @type ^`int` := v2;
  #L1355ee.  v1.`kotlin.ranges.IntProgression.c` @type ^`int` := v4;
  #L1355f2.  return @kind void;
  #L1355f4.  v2:= new `java.lang.IllegalArgumentException`;
  #L1355f8.  v3:= "Step must be greater than Int.MIN_VALUE to avoid overflow on negation." @kind object;
  #L1355fc.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L135602.  throw v2;
  #L135604.  v2:= new `java.lang.IllegalArgumentException`;
  #L135608.  v3:= "Step must be non-zero." @kind object;
  #L13560c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L135612.  throw v2;
}
procedure `boolean` `equals`(`kotlin.ranges.IntProgression` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ranges/IntProgression;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1353a8.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.IntProgression` @kind boolean;
  #L1353ac.  if v0 == 0 then goto L1353fa;
  #L1353b0.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/IntProgression;.isEmpty:()Z` @kind virtual;
  #L1353b6.  v0:= temp;
  #L1353b8.  if v0 == 0 then goto L1353ce;
  #L1353bc.  v0:= v3 @kind object;
  #L1353be.  v0:= (`kotlin.ranges.IntProgression`) v0 @kind object;
  #L1353c2.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/IntProgression;.isEmpty:()Z` @kind virtual;
  #L1353c8.  v0:= temp;
  #L1353ca.  if v0 != 0 then goto L1353f6;
  #L1353ce.  v0:= v2.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L1353d2.  v3:= (`kotlin.ranges.IntProgression`) v3 @kind object;
  #L1353d6.  v1:= v3.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L1353da.  if v0 != v1 then goto L1353fa;
  #L1353de.  v0:= v2.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L1353e2.  v1:= v3.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L1353e6.  if v0 != v1 then goto L1353fa;
  #L1353ea.  v0:= v2.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L1353ee.  v3:= v3.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L1353f2.  if v0 != v3 then goto L1353fa;
  #L1353f6.  v3:= 1I;
  #L1353f8.  goto L1353fc;
  #L1353fa.  v3:= 0I;
  #L1353fc.  return v3;
}
procedure `int` `getFirst`(`kotlin.ranges.IntProgression` v1 @kind this) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13544c.  v0:= v1.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L135450.  return v0;
}
procedure `int` `getLast`(`kotlin.ranges.IntProgression` v1 @kind this) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L135464.  v0:= v1.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L135468.  return v0;
}
procedure `int` `getStep`(`kotlin.ranges.IntProgression` v1 @kind this) @signature `Lkotlin/ranges/IntProgression;.getStep:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13547c.  v0:= v1.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L135480.  return v0;
}
procedure `int` `hashCode`(`kotlin.ranges.IntProgression` v2 @kind this) @signature `Lkotlin/ranges/IntProgression;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L135494.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/IntProgression;.isEmpty:()Z` @kind virtual;
  #L13549a.  v0:= temp;
  #L13549c.  if v0 == 0 then goto L1354a4;
  #L1354a0.  v0:= -1I;
  #L1354a2.  goto L1354bc;
  #L1354a4.  v0:= v2.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L1354a8.  v0:= v0 * 31;
  #L1354ac.  v1:= v2.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L1354b0.  v0:= v0 + v1 @kind int;
  #L1354b2.  v0:= v0 * 31;
  #L1354b6.  v1:= v2.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L1354ba.  v0:= v0 + v1 @kind int;
  #L1354bc.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.IntProgression` v4 @kind this) @signature `Lkotlin/ranges/IntProgression;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L135410.  v0:= v4.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L135414.  v1:= 1I;
  #L135416.  v2:= 0I;
  #L135418.  if v0 <= 0 then goto L13542a;
  #L13541c.  v0:= v4.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L135420.  v3:= v4.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L135424.  if v0 <= v3 then goto L135438;
  #L135428.  goto L13543a;
  #L13542a.  v0:= v4.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L13542e.  v3:= v4.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L135432.  if v0 >= v3 then goto L135438;
  #L135436.  goto L13543a;
  #L135438.  v1:= 0I;
  #L13543a.  return v1;
}
procedure `java.util.Iterator` `iterator`(`kotlin.ranges.IntProgression` v1 @kind this) @signature `Lkotlin/ranges/IntProgression;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L135564.  call temp:= `iterator`(v1) @signature `Lkotlin/ranges/IntProgression;.iterator:()Lkotlin/collections/IntIterator;` @kind virtual;
  #L13556a.  v0:= temp @kind object;
  #L13556c.  return v0 @kind object;
}
procedure `kotlin.collections.IntIterator` `iterator`(`kotlin.ranges.IntProgression` v4 @kind this) @signature `Lkotlin/ranges/IntProgression;.iterator:()Lkotlin/collections/IntIterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L135580.  v0:= new `kotlin.ranges.IntProgressionIterator`;
  #L135584.  v1:= v4.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L135588.  v2:= v4.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L13558c.  v3:= v4.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L135590.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/ranges/IntProgressionIterator;.<init>:(III)V` @kind direct;
  #L135596.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.IntProgression` v3 @kind this) @signature `Lkotlin/ranges/IntProgression;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1354d0.  v0:= v3.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L1354d4.  v1:= " step " @kind object;
  #L1354d8.  if v0 <= 0 then goto L135510;
  #L1354dc.  v0:= new `java.lang.StringBuilder`;
  #L1354e0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1354e6.  v2:= v3.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L1354ea.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1354f0.  v2:= ".." @kind object;
  #L1354f4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1354fa.  v2:= v3.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L1354fe.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L135504.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13550a.  v1:= v3.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L13550e.  goto L135544;
  #L135510.  v0:= new `java.lang.StringBuilder`;
  #L135514.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13551a.  v2:= v3.`kotlin.ranges.IntProgression.a` @type ^`int`;
  #L13551e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L135524.  v2:= " downTo " @kind object;
  #L135528.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13552e.  v2:= v3.`kotlin.ranges.IntProgression.b` @type ^`int`;
  #L135532.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L135538.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13553e.  v1:= v3.`kotlin.ranges.IntProgression.c` @type ^`int`;
  #L135542.  v1:= -v1 @kind int;
  #L135544.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L13554a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L135550.  v0:= temp @kind object;
  #L135552.  return v0 @kind object;
}
