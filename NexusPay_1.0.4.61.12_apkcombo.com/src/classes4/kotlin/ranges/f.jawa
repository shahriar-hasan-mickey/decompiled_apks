record `kotlin.ranges.f` @kind class @AccessFlag FINAL extends `kotlin.collections.UIntIterator` @kind class {
  `int` `kotlin.ranges.f.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.ranges.f.b` @AccessFlag PRIVATE;
  `int` `kotlin.ranges.f.c` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.f.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.ranges.f` v2 @kind this, `int` v3 , `int` v4 , `int` v5 ) @signature `Lkotlin/ranges/f;.<init>:(III)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L137d80.  call `<init>`(v2) @signature `Lkotlin/collections/UIntIterator;.<init>:()V` @kind direct;
  #L137d86.  v2.`kotlin.ranges.f.a` @type ^`int` := v4;
  #L137d8a.  v0:= 1I;
  #L137d8c.  v1:= 0I;
  #L137d8e.  call temp:= `uintCompare`(v3, v4) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @kind static;
  #L137d94.  v4:= temp;
  #L137d96.  if v5 <= 0 then goto L137da0;
  #L137d9a.  if v4 > 0 then goto L137da6;
  #L137d9e.  goto L137da8;
  #L137da0.  if v4 < 0 then goto L137da6;
  #L137da4.  goto L137da8;
  #L137da6.  v0:= 0I;
  #L137da8.  v2.`kotlin.ranges.f.b` @type ^`boolean` := v0 @kind boolean;
  #L137dac.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L137db2.  v4:= temp;
  #L137db4.  v2.`kotlin.ranges.f.c` @type ^`int` := v4;
  #L137db8.  v4:= v2.`kotlin.ranges.f.b` @type ^`boolean` @kind boolean;
  #L137dbc.  if v4 == 0 then goto L137dc2;
  #L137dc0.  goto L137dc6;
  #L137dc2.  v3:= v2.`kotlin.ranges.f.a` @type ^`int`;
  #L137dc6.  v2.`kotlin.ranges.f.d` @type ^`int` := v3;
  #L137dca.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.f` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `kotlin.jvm.internal.DefaultConstructorMarker` v4 @kind object) @signature `Lkotlin/ranges/f;.<init>:(IIILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L137ddc.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/ranges/f;.<init>:(III)V` @kind direct;
  #L137de2.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.ranges.f` v1 @kind this) @signature `Lkotlin/ranges/f;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L137d1c.  v0:= v1.`kotlin.ranges.f.b` @type ^`boolean` @kind boolean;
  #L137d20.  return v0;
}
procedure `int` `nextUInt-pVg5ArA`(`kotlin.ranges.f` v2 @kind this) @signature `Lkotlin/ranges/f;.nextUInt-pVg5ArA:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L137d34.  v0:= v2.`kotlin.ranges.f.d` @type ^`int`;
  #L137d38.  v1:= v2.`kotlin.ranges.f.a` @type ^`int`;
  #L137d3c.  if v0 != v1 then goto L137d5c;
  #L137d40.  v1:= v2.`kotlin.ranges.f.b` @type ^`boolean` @kind boolean;
  #L137d44.  if v1 == 0 then goto L137d50;
  #L137d48.  v1:= 0I;
  #L137d4a.  v2.`kotlin.ranges.f.b` @type ^`boolean` := v1 @kind boolean;
  #L137d4e.  goto L137d6e;
  #L137d50.  v0:= new `java.util.NoSuchElementException`;
  #L137d54.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L137d5a.  throw v0;
  #L137d5c.  v1:= v2.`kotlin.ranges.f.c` @type ^`int`;
  #L137d60.  v1:= v1 + v0 @kind int;
  #L137d62.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L137d68.  v1:= temp;
  #L137d6a.  v2.`kotlin.ranges.f.d` @type ^`int` := v1;
  #L137d6e.  return v0;
}
