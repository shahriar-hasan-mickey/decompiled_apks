record `kotlin.ranges.e` @kind class @AccessFlag  extends `kotlin.ranges.d` @kind class {
}
procedure `void` `<init>`(`kotlin.ranges.e` v0 @kind this) @signature `Lkotlin/ranges/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L137b68.  call `<init>`(v0) @signature `Lkotlin/ranges/d;.<init>:()V` @kind direct;
  #L137b6e.  return @kind void;
}
procedure `boolean` `byteRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `double` v2 ) @signature `Lkotlin/ranges/e;.byteRangeContains:(Lkotlin/ranges/ClosedRange;D)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L136070.  v0:= "$this$contains" @kind object;
  #L136074.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13607a.  call temp:= `toByteExactOrNull`(v2) @signature `Lkotlin/ranges/e;.toByteExactOrNull:(D)Ljava/lang/Byte;` @kind static;
  #L136080.  v2:= temp @kind object;
  #L136082.  if v2 == 0 then goto L136090;
  #L136086.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L13608c.  v1:= temp;
  #L13608e.  goto L136092;
  #L136090.  v1:= 0I;
  #L136092.  return v1;
}
procedure `boolean` `byteRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `float` v2 ) @signature `Lkotlin/ranges/e;.byteRangeContains:(Lkotlin/ranges/ClosedRange;F)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L1360a4.  v0:= "$this$contains" @kind object;
  #L1360a8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1360ae.  call temp:= `toByteExactOrNull`(v2) @signature `Lkotlin/ranges/e;.toByteExactOrNull:(F)Ljava/lang/Byte;` @kind static;
  #L1360b4.  v2:= temp @kind object;
  #L1360b6.  if v2 == 0 then goto L1360c4;
  #L1360ba.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L1360c0.  v1:= temp;
  #L1360c2.  goto L1360c6;
  #L1360c4.  v1:= 0I;
  #L1360c6.  return v1;
}
procedure `boolean` `byteRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `int` v2 ) @signature `Lkotlin/ranges/e;.byteRangeContains:(Lkotlin/ranges/ClosedRange;I)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1360d8.  v0:= "$this$contains" @kind object;
  #L1360dc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1360e2.  call temp:= `toByteExactOrNull`(v2) @signature `Lkotlin/ranges/e;.toByteExactOrNull:(I)Ljava/lang/Byte;` @kind static;
  #L1360e8.  v2:= temp @kind object;
  #L1360ea.  if v2 == 0 then goto L1360f8;
  #L1360ee.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L1360f4.  v1:= temp;
  #L1360f6.  goto L1360fa;
  #L1360f8.  v1:= 0I;
  #L1360fa.  return v1;
}
procedure `boolean` `byteRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `long` v2 ) @signature `Lkotlin/ranges/e;.byteRangeContains:(Lkotlin/ranges/ClosedRange;J)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13610c.  v0:= "$this$contains" @kind object;
  #L136110.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136116.  call temp:= `toByteExactOrNull`(v2) @signature `Lkotlin/ranges/e;.toByteExactOrNull:(J)Ljava/lang/Byte;` @kind static;
  #L13611c.  v2:= temp @kind object;
  #L13611e.  if v2 == 0 then goto L13612c;
  #L136122.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L136128.  v1:= temp;
  #L13612a.  goto L13612e;
  #L13612c.  v1:= 0I;
  #L13612e.  return v1;
}
procedure `boolean` `byteRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `short` v2 ) @signature `Lkotlin/ranges/e;.byteRangeContains:(Lkotlin/ranges/ClosedRange;S)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L136140.  v0:= "$this$contains" @kind object;
  #L136144.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13614a.  call temp:= `toByteExactOrNull`(v2) @signature `Lkotlin/ranges/e;.toByteExactOrNull:(S)Ljava/lang/Byte;` @kind static;
  #L136150.  v2:= temp @kind object;
  #L136152.  if v2 == 0 then goto L136160;
  #L136156.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L13615c.  v1:= temp;
  #L13615e.  goto L136162;
  #L136160.  v1:= 0I;
  #L136162.  return v1;
}
procedure `byte` `coerceAtLeast`(`byte` v0 , `byte` v1 ) @signature `Lkotlin/ranges/e;.coerceAtLeast:(BB)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L136640.  if v0 >= v1 then goto L136646;
  #L136644.  v0:= v1;
  #L136646.  return v0;
}
procedure `double` `coerceAtLeast`(`double` v1 , `double` v3 ) @signature `Lkotlin/ranges/e;.coerceAtLeast:(DD)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L136748.  v0:= dcmpg(v1, v3);
  #L13674c.  if v0 >= 0 then goto L136752;
  #L136750.  v1:= v3 @kind wide;
  #L136752.  return v1 @kind wide;
}
procedure `float` `coerceAtLeast`(`float` v1 , `float` v2 ) @signature `Lkotlin/ranges/e;.coerceAtLeast:(FF)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1367f8.  v0:= fcmpg(v1, v2);
  #L1367fc.  if v0 >= 0 then goto L136802;
  #L136800.  v1:= v2;
  #L136802.  return v1;
}
procedure `int` `coerceAtLeast`(`int` v0 , `int` v1 ) @signature `Lkotlin/ranges/e;.coerceAtLeast:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1368a8.  if v0 >= v1 then goto L1368ae;
  #L1368ac.  v0:= v1;
  #L1368ae.  return v0;
}
procedure `long` `coerceAtLeast`(`long` v1 , `long` v3 ) @signature `Lkotlin/ranges/e;.coerceAtLeast:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1378dc.  v0:= lcmp(v1, v3);
  #L1378e0.  if v0 >= 0 then goto L1378e6;
  #L1378e4.  v1:= v3 @kind wide;
  #L1378e6.  return v1 @kind wide;
}
procedure `java.lang.Comparable` `coerceAtLeast`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lkotlin/ranges/e;.coerceAtLeast:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L136c04.  v0:= "$this$coerceAtLeast" @kind object;
  #L136c08.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136c0e.  v0:= "minimumValue" @kind object;
  #L136c12.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136c18.  call temp:= `compareTo`(v1, v2) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L136c1e.  v0:= temp;
  #L136c20.  if v0 >= 0 then goto L136c26;
  #L136c24.  v1:= v2 @kind object;
  #L136c26.  return v1 @kind object;
}
procedure `short` `coerceAtLeast`(`short` v0 , `short` v1 ) @signature `Lkotlin/ranges/e;.coerceAtLeast:(SS)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L137acc.  if v0 >= v1 then goto L137ad2;
  #L137ad0.  v0:= v1;
  #L137ad2.  return v0;
}
procedure `byte` `coerceAtMost`(`byte` v0 , `byte` v1 ) @signature `Lkotlin/ranges/e;.coerceAtMost:(BB)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L136658.  if v0 <= v1 then goto L13665e;
  #L13665c.  v0:= v1;
  #L13665e.  return v0;
}
procedure `double` `coerceAtMost`(`double` v1 , `double` v3 ) @signature `Lkotlin/ranges/e;.coerceAtMost:(DD)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L136764.  v0:= dcmpl(v1, v3);
  #L136768.  if v0 <= 0 then goto L13676e;
  #L13676c.  v1:= v3 @kind wide;
  #L13676e.  return v1 @kind wide;
}
procedure `float` `coerceAtMost`(`float` v1 , `float` v2 ) @signature `Lkotlin/ranges/e;.coerceAtMost:(FF)F` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L136814.  v0:= fcmpl(v1, v2);
  #L136818.  if v0 <= 0 then goto L13681e;
  #L13681c.  v1:= v2;
  #L13681e.  return v1;
}
procedure `int` `coerceAtMost`(`int` v0 , `int` v1 ) @signature `Lkotlin/ranges/e;.coerceAtMost:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1368c0.  if v0 <= v1 then goto L1368c6;
  #L1368c4.  v0:= v1;
  #L1368c6.  return v0;
}
procedure `long` `coerceAtMost`(`long` v1 , `long` v3 ) @signature `Lkotlin/ranges/e;.coerceAtMost:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1378f8.  v0:= lcmp(v1, v3);
  #L1378fc.  if v0 <= 0 then goto L137902;
  #L137900.  v1:= v3 @kind wide;
  #L137902.  return v1 @kind wide;
}
procedure `java.lang.Comparable` `coerceAtMost`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lkotlin/ranges/e;.coerceAtMost:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L136c38.  v0:= "$this$coerceAtMost" @kind object;
  #L136c3c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136c42.  v0:= "maximumValue" @kind object;
  #L136c46.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136c4c.  call temp:= `compareTo`(v1, v2) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L136c52.  v0:= temp;
  #L136c54.  if v0 <= 0 then goto L136c5a;
  #L136c58.  v1:= v2 @kind object;
  #L136c5a.  return v1 @kind object;
}
procedure `short` `coerceAtMost`(`short` v0 , `short` v1 ) @signature `Lkotlin/ranges/e;.coerceAtMost:(SS)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L137ae4.  if v0 <= v1 then goto L137aea;
  #L137ae8.  v0:= v1;
  #L137aea.  return v0;
}
procedure `byte` `coerceIn`(`byte` v2 , `byte` v3 , `byte` v4 ) @signature `Lkotlin/ranges/e;.coerceIn:(BBB)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L136670.  if v3 > v4 then goto L136682;
  #L136674.  if v2 >= v3 then goto L13667a;
  #L136678.  return v3;
  #L13667a.  if v2 <= v4 then goto L136680;
  #L13667e.  return v4;
  #L136680.  return v2;
  #L136682.  v2:= new `java.lang.IllegalArgumentException`;
  #L136686.  v0:= new `java.lang.StringBuilder`;
  #L13668a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L136690.  v1:= "Cannot coerce value to an empty range: maximum " @kind object;
  #L136694.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13669a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1366a0.  v4:= " is less than minimum " @kind object;
  #L1366a4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1366aa.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1366b0.  v3:= 46I;
  #L1366b4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1366ba.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1366c0.  v3:= temp @kind object;
  #L1366c2.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1366c8.  throw v2;
}
procedure `double` `coerceIn`(`double` v1 , `double` v3 , `double` v5 ) @signature `Lkotlin/ranges/e;.coerceIn:(DDD)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L136780.  v0:= dcmpl(v3, v5);
  #L136784.  if v0 > 0 then goto L13679e;
  #L136788.  v0:= dcmpg(v1, v3);
  #L13678c.  if v0 >= 0 then goto L136792;
  #L136790.  return v3 @kind wide;
  #L136792.  v3:= dcmpl(v1, v5);
  #L136796.  if v3 <= 0 then goto L13679c;
  #L13679a.  return v5 @kind wide;
  #L13679c.  return v1 @kind wide;
  #L13679e.  v1:= new `java.lang.IllegalArgumentException`;
  #L1367a2.  v2:= new `java.lang.StringBuilder`;
  #L1367a6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1367ac.  v0:= "Cannot coerce value to an empty range: maximum " @kind object;
  #L1367b0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1367b6.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L1367bc.  v5:= " is less than minimum " @kind object;
  #L1367c0.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1367c6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L1367cc.  v3:= 46I;
  #L1367d0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1367d6.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1367dc.  v2:= temp @kind object;
  #L1367de.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1367e4.  throw v1;
}
procedure `float` `coerceIn`(`float` v2 , `float` v3 , `float` v4 ) @signature `Lkotlin/ranges/e;.coerceIn:(FFF)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L136830.  v0:= fcmpl(v3, v4);
  #L136834.  if v0 > 0 then goto L13684e;
  #L136838.  v0:= fcmpg(v2, v3);
  #L13683c.  if v0 >= 0 then goto L136842;
  #L136840.  return v3;
  #L136842.  v3:= fcmpl(v2, v4);
  #L136846.  if v3 <= 0 then goto L13684c;
  #L13684a.  return v4;
  #L13684c.  return v2;
  #L13684e.  v2:= new `java.lang.IllegalArgumentException`;
  #L136852.  v0:= new `java.lang.StringBuilder`;
  #L136856.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13685c.  v1:= "Cannot coerce value to an empty range: maximum " @kind object;
  #L136860.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L136866.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L13686c.  v4:= " is less than minimum " @kind object;
  #L136870.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L136876.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L13687c.  v3:= 46I;
  #L136880.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L136886.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13688c.  v3:= temp @kind object;
  #L13688e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L136894.  throw v2;
}
procedure `int` `coerceIn`(`int` v2 , `int` v3 , `int` v4 ) @signature `Lkotlin/ranges/e;.coerceIn:(III)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1368d8.  if v3 > v4 then goto L1368ea;
  #L1368dc.  if v2 >= v3 then goto L1368e2;
  #L1368e0.  return v3;
  #L1368e2.  if v2 <= v4 then goto L1368e8;
  #L1368e6.  return v4;
  #L1368e8.  return v2;
  #L1368ea.  v2:= new `java.lang.IllegalArgumentException`;
  #L1368ee.  v0:= new `java.lang.StringBuilder`;
  #L1368f2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1368f8.  v1:= "Cannot coerce value to an empty range: maximum " @kind object;
  #L1368fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L136902.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L136908.  v4:= " is less than minimum " @kind object;
  #L13690c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L136912.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L136918.  v3:= 46I;
  #L13691c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L136922.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L136928.  v3:= temp @kind object;
  #L13692a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L136930.  throw v2;
}
procedure `int` `coerceIn`(`int` v2 , `kotlin.ranges.ClosedRange` v3 @kind object) @signature `Lkotlin/ranges/e;.coerceIn:(ILkotlin/ranges/ClosedRange;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L136944.  v0:= "range" @kind object;
  #L136948.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13694e.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.ClosedFloatingPointRange` @kind boolean;
  #L136952.  if v0 == 0 then goto L136978;
  #L136956.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L13695c.  v2:= temp @kind object;
  #L13695e.  v3:= (`kotlin.ranges.ClosedFloatingPointRange`) v3 @kind object;
  #L136962.  call temp:= `coerceIn`(v2, v3) @signature `Lkotlin/ranges/e;.coerceIn:(Ljava/lang/Comparable;Lkotlin/ranges/ClosedFloatingPointRange;)Ljava/lang/Comparable;` @kind static;
  #L136968.  v2:= temp @kind object;
  #L13696a.  v2:= (`java.lang.Number`) v2 @kind object;
  #L13696e.  call temp:= `intValue`(v2) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L136974.  v2:= temp;
  #L136976.  return v2;
  #L136978.  call temp:= `isEmpty`(v3) @signature `Lkotlin/ranges/ClosedRange;.isEmpty:()Z` @kind interface;
  #L13697e.  v0:= temp;
  #L136980.  if v0 != 0 then goto L1369e0;
  #L136984.  call temp:= `getStart`(v3) @signature `Lkotlin/ranges/ClosedRange;.getStart:()Ljava/lang/Comparable;` @kind interface;
  #L13698a.  v0:= temp @kind object;
  #L13698c.  v0:= (`java.lang.Number`) v0 @kind object;
  #L136990.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L136996.  v0:= temp;
  #L136998.  if v2 >= v0 then goto L1369b2;
  #L13699c.  call temp:= `getStart`(v3) @signature `Lkotlin/ranges/ClosedRange;.getStart:()Ljava/lang/Comparable;` @kind interface;
  #L1369a2.  v2:= temp @kind object;
  #L1369a4.  v2:= (`java.lang.Number`) v2 @kind object;
  #L1369a8.  call temp:= `intValue`(v2) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L1369ae.  v2:= temp;
  #L1369b0.  goto L1369de;
  #L1369b2.  call temp:= `getEndInclusive`(v3) @signature `Lkotlin/ranges/ClosedRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind interface;
  #L1369b8.  v0:= temp @kind object;
  #L1369ba.  v0:= (`java.lang.Number`) v0 @kind object;
  #L1369be.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L1369c4.  v0:= temp;
  #L1369c6.  if v2 <= v0 then goto L1369de;
  #L1369ca.  call temp:= `getEndInclusive`(v3) @signature `Lkotlin/ranges/ClosedRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind interface;
  #L1369d0.  v2:= temp @kind object;
  #L1369d2.  v2:= (`java.lang.Number`) v2 @kind object;
  #L1369d6.  call temp:= `intValue`(v2) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L1369dc.  v2:= temp;
  #L1369de.  return v2;
  #L1369e0.  v2:= new `java.lang.IllegalArgumentException`;
  #L1369e4.  v0:= new `java.lang.StringBuilder`;
  #L1369e8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1369ee.  v1:= "Cannot coerce value to an empty range: " @kind object;
  #L1369f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1369f8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1369fe.  v3:= 46I;
  #L136a02.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L136a08.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L136a0e.  v3:= temp @kind object;
  #L136a10.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L136a16.  throw v2;
}
procedure `long` `coerceIn`(`long` v1 , `long` v3 , `long` v5 ) @signature `Lkotlin/ranges/e;.coerceIn:(JJJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L137a00.  v0:= lcmp(v3, v5);
  #L137a04.  if v0 > 0 then goto L137a1e;
  #L137a08.  v0:= lcmp(v1, v3);
  #L137a0c.  if v0 >= 0 then goto L137a12;
  #L137a10.  return v3 @kind wide;
  #L137a12.  v3:= lcmp(v1, v5);
  #L137a16.  if v3 <= 0 then goto L137a1c;
  #L137a1a.  return v5 @kind wide;
  #L137a1c.  return v1 @kind wide;
  #L137a1e.  v1:= new `java.lang.IllegalArgumentException`;
  #L137a22.  v2:= new `java.lang.StringBuilder`;
  #L137a26.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L137a2c.  v0:= "Cannot coerce value to an empty range: maximum " @kind object;
  #L137a30.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L137a36.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L137a3c.  v5:= " is less than minimum " @kind object;
  #L137a40.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L137a46.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L137a4c.  v3:= 46I;
  #L137a50.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L137a56.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L137a5c.  v2:= temp @kind object;
  #L137a5e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L137a64.  throw v1;
}
procedure `long` `coerceIn`(`long` v3 , `kotlin.ranges.ClosedRange` v5 @kind object) @signature `Lkotlin/ranges/e;.coerceIn:(JLkotlin/ranges/ClosedRange;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L137914.  v0:= "range" @kind object;
  #L137918.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13791e.  v0:= instanceof @variable v5 @type ^`kotlin.ranges.ClosedFloatingPointRange` @kind boolean;
  #L137922.  if v0 == 0 then goto L137948;
  #L137926.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L13792c.  v3:= temp @kind object;
  #L13792e.  v5:= (`kotlin.ranges.ClosedFloatingPointRange`) v5 @kind object;
  #L137932.  call temp:= `coerceIn`(v3, v5) @signature `Lkotlin/ranges/e;.coerceIn:(Ljava/lang/Comparable;Lkotlin/ranges/ClosedFloatingPointRange;)Ljava/lang/Comparable;` @kind static;
  #L137938.  v3:= temp @kind object;
  #L13793a.  v3:= (`java.lang.Number`) v3 @kind object;
  #L13793e.  call temp:= `longValue`(v3) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L137944.  v3:= temp @kind wide;
  #L137946.  return v3 @kind wide;
  #L137948.  call temp:= `isEmpty`(v5) @signature `Lkotlin/ranges/ClosedRange;.isEmpty:()Z` @kind interface;
  #L13794e.  v0:= temp;
  #L137950.  if v0 != 0 then goto L1379b8;
  #L137954.  call temp:= `getStart`(v5) @signature `Lkotlin/ranges/ClosedRange;.getStart:()Ljava/lang/Comparable;` @kind interface;
  #L13795a.  v0:= temp @kind object;
  #L13795c.  v0:= (`java.lang.Number`) v0 @kind object;
  #L137960.  call temp:= `longValue`(v0) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L137966.  v0:= temp @kind wide;
  #L137968.  v2:= lcmp(v3, v0);
  #L13796c.  if v2 >= 0 then goto L137986;
  #L137970.  call temp:= `getStart`(v5) @signature `Lkotlin/ranges/ClosedRange;.getStart:()Ljava/lang/Comparable;` @kind interface;
  #L137976.  v3:= temp @kind object;
  #L137978.  v3:= (`java.lang.Number`) v3 @kind object;
  #L13797c.  call temp:= `longValue`(v3) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L137982.  v3:= temp @kind wide;
  #L137984.  goto L1379b6;
  #L137986.  call temp:= `getEndInclusive`(v5) @signature `Lkotlin/ranges/ClosedRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind interface;
  #L13798c.  v0:= temp @kind object;
  #L13798e.  v0:= (`java.lang.Number`) v0 @kind object;
  #L137992.  call temp:= `longValue`(v0) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L137998.  v0:= temp @kind wide;
  #L13799a.  v2:= lcmp(v3, v0);
  #L13799e.  if v2 <= 0 then goto L1379b6;
  #L1379a2.  call temp:= `getEndInclusive`(v5) @signature `Lkotlin/ranges/ClosedRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind interface;
  #L1379a8.  v3:= temp @kind object;
  #L1379aa.  v3:= (`java.lang.Number`) v3 @kind object;
  #L1379ae.  call temp:= `longValue`(v3) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L1379b4.  v3:= temp @kind wide;
  #L1379b6.  return v3 @kind wide;
  #L1379b8.  v3:= new `java.lang.IllegalArgumentException`;
  #L1379bc.  v4:= new `java.lang.StringBuilder`;
  #L1379c0.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1379c6.  v0:= "Cannot coerce value to an empty range: " @kind object;
  #L1379ca.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1379d0.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1379d6.  v5:= 46I;
  #L1379da.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1379e0.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1379e6.  v4:= temp @kind object;
  #L1379e8.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1379ee.  throw v3;
}
procedure `java.lang.Comparable` `coerceIn`(`java.lang.Comparable` v2 @kind object, `java.lang.Comparable` v3 @kind object, `java.lang.Comparable` v4 @kind object) @signature `Lkotlin/ranges/e;.coerceIn:(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L136c6c.  v0:= "$this$coerceIn" @kind object;
  #L136c70.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136c76.  if v3 == 0 then goto L136cee;
  #L136c7a.  if v4 == 0 then goto L136cee;
  #L136c7e.  call temp:= `compareTo`(v3, v4) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L136c84.  v0:= temp;
  #L136c86.  if v0 > 0 then goto L136ca6;
  #L136c8a.  call temp:= `compareTo`(v2, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L136c90.  v0:= temp;
  #L136c92.  if v0 >= 0 then goto L136c98;
  #L136c96.  return v3 @kind object;
  #L136c98.  call temp:= `compareTo`(v2, v4) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L136c9e.  v3:= temp;
  #L136ca0.  if v3 <= 0 then goto L136d12;
  #L136ca4.  return v4 @kind object;
  #L136ca6.  v2:= new `java.lang.IllegalArgumentException`;
  #L136caa.  v0:= new `java.lang.StringBuilder`;
  #L136cae.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L136cb4.  v1:= "Cannot coerce value to an empty range: maximum " @kind object;
  #L136cb8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L136cbe.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L136cc4.  v4:= " is less than minimum " @kind object;
  #L136cc8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L136cce.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L136cd4.  v3:= 46I;
  #L136cd8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L136cde.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L136ce4.  v3:= temp @kind object;
  #L136ce6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L136cec.  throw v2;
  #L136cee.  if v3 == 0 then goto L136d00;
  #L136cf2.  call temp:= `compareTo`(v2, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L136cf8.  v0:= temp;
  #L136cfa.  if v0 >= 0 then goto L136d00;
  #L136cfe.  return v3 @kind object;
  #L136d00.  if v4 == 0 then goto L136d12;
  #L136d04.  call temp:= `compareTo`(v2, v4) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L136d0a.  v3:= temp;
  #L136d0c.  if v3 <= 0 then goto L136d12;
  #L136d10.  return v4 @kind object;
  #L136d12.  return v2 @kind object;
}
procedure `java.lang.Comparable` `coerceIn`(`java.lang.Comparable` v2 @kind object, `kotlin.ranges.ClosedFloatingPointRange` v3 @kind object) @signature `Lkotlin/ranges/e;.coerceIn:(Ljava/lang/Comparable;Lkotlin/ranges/ClosedFloatingPointRange;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L136d24.  v0:= "$this$coerceIn" @kind object;
  #L136d28.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136d2e.  v0:= "range" @kind object;
  #L136d32.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136d38.  call temp:= `isEmpty`(v3) @signature `Lkotlin/ranges/ClosedFloatingPointRange;.isEmpty:()Z` @kind interface;
  #L136d3e.  v0:= temp;
  #L136d40.  if v0 != 0 then goto L136da8;
  #L136d44.  call temp:= `getStart`(v3) @signature `Lkotlin/ranges/ClosedRange;.getStart:()Ljava/lang/Comparable;` @kind interface;
  #L136d4a.  v0:= temp @kind object;
  #L136d4c.  call temp:= `lessThanOrEquals`(v3, v2, v0) @signature `Lkotlin/ranges/ClosedFloatingPointRange;.lessThanOrEquals:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @kind interface;
  #L136d52.  v0:= temp;
  #L136d54.  if v0 == 0 then goto L136d76;
  #L136d58.  call temp:= `getStart`(v3) @signature `Lkotlin/ranges/ClosedRange;.getStart:()Ljava/lang/Comparable;` @kind interface;
  #L136d5e.  v0:= temp @kind object;
  #L136d60.  call temp:= `lessThanOrEquals`(v3, v0, v2) @signature `Lkotlin/ranges/ClosedFloatingPointRange;.lessThanOrEquals:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @kind interface;
  #L136d66.  v0:= temp;
  #L136d68.  if v0 != 0 then goto L136d76;
  #L136d6c.  call temp:= `getStart`(v3) @signature `Lkotlin/ranges/ClosedRange;.getStart:()Ljava/lang/Comparable;` @kind interface;
  #L136d72.  v2:= temp @kind object;
  #L136d74.  goto L136da6;
  #L136d76.  call temp:= `getEndInclusive`(v3) @signature `Lkotlin/ranges/ClosedRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind interface;
  #L136d7c.  v0:= temp @kind object;
  #L136d7e.  call temp:= `lessThanOrEquals`(v3, v0, v2) @signature `Lkotlin/ranges/ClosedFloatingPointRange;.lessThanOrEquals:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @kind interface;
  #L136d84.  v0:= temp;
  #L136d86.  if v0 == 0 then goto L136da6;
  #L136d8a.  call temp:= `getEndInclusive`(v3) @signature `Lkotlin/ranges/ClosedRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind interface;
  #L136d90.  v0:= temp @kind object;
  #L136d92.  call temp:= `lessThanOrEquals`(v3, v2, v0) @signature `Lkotlin/ranges/ClosedFloatingPointRange;.lessThanOrEquals:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @kind interface;
  #L136d98.  v0:= temp;
  #L136d9a.  if v0 != 0 then goto L136da6;
  #L136d9e.  call temp:= `getEndInclusive`(v3) @signature `Lkotlin/ranges/ClosedRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind interface;
  #L136da4.  v2:= temp @kind object;
  #L136da6.  return v2 @kind object;
  #L136da8.  v2:= new `java.lang.IllegalArgumentException`;
  #L136dac.  v0:= new `java.lang.StringBuilder`;
  #L136db0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L136db6.  v1:= "Cannot coerce value to an empty range: " @kind object;
  #L136dba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L136dc0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L136dc6.  v3:= 46I;
  #L136dca.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L136dd0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L136dd6.  v3:= temp @kind object;
  #L136dd8.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L136dde.  throw v2;
}
procedure `java.lang.Comparable` `coerceIn`(`java.lang.Comparable` v2 @kind object, `kotlin.ranges.ClosedRange` v3 @kind object) @signature `Lkotlin/ranges/e;.coerceIn:(Ljava/lang/Comparable;Lkotlin/ranges/ClosedRange;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L136df0.  v0:= "$this$coerceIn" @kind object;
  #L136df4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136dfa.  v0:= "range" @kind object;
  #L136dfe.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136e04.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.ClosedFloatingPointRange` @kind boolean;
  #L136e08.  if v0 == 0 then goto L136e1a;
  #L136e0c.  v3:= (`kotlin.ranges.ClosedFloatingPointRange`) v3 @kind object;
  #L136e10.  call temp:= `coerceIn`(v2, v3) @signature `Lkotlin/ranges/e;.coerceIn:(Ljava/lang/Comparable;Lkotlin/ranges/ClosedFloatingPointRange;)Ljava/lang/Comparable;` @kind static;
  #L136e16.  v2:= temp @kind object;
  #L136e18.  return v2 @kind object;
  #L136e1a.  call temp:= `isEmpty`(v3) @signature `Lkotlin/ranges/ClosedRange;.isEmpty:()Z` @kind interface;
  #L136e20.  v0:= temp;
  #L136e22.  if v0 != 0 then goto L136e62;
  #L136e26.  call temp:= `getStart`(v3) @signature `Lkotlin/ranges/ClosedRange;.getStart:()Ljava/lang/Comparable;` @kind interface;
  #L136e2c.  v0:= temp @kind object;
  #L136e2e.  call temp:= `compareTo`(v2, v0) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L136e34.  v0:= temp;
  #L136e36.  if v0 >= 0 then goto L136e44;
  #L136e3a.  call temp:= `getStart`(v3) @signature `Lkotlin/ranges/ClosedRange;.getStart:()Ljava/lang/Comparable;` @kind interface;
  #L136e40.  v2:= temp @kind object;
  #L136e42.  goto L136e60;
  #L136e44.  call temp:= `getEndInclusive`(v3) @signature `Lkotlin/ranges/ClosedRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind interface;
  #L136e4a.  v0:= temp @kind object;
  #L136e4c.  call temp:= `compareTo`(v2, v0) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L136e52.  v0:= temp;
  #L136e54.  if v0 <= 0 then goto L136e60;
  #L136e58.  call temp:= `getEndInclusive`(v3) @signature `Lkotlin/ranges/ClosedRange;.getEndInclusive:()Ljava/lang/Comparable;` @kind interface;
  #L136e5e.  v2:= temp @kind object;
  #L136e60.  return v2 @kind object;
  #L136e62.  v2:= new `java.lang.IllegalArgumentException`;
  #L136e66.  v0:= new `java.lang.StringBuilder`;
  #L136e6a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L136e70.  v1:= "Cannot coerce value to an empty range: " @kind object;
  #L136e74.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L136e7a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L136e80.  v3:= 46I;
  #L136e84.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L136e8a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L136e90.  v3:= temp @kind object;
  #L136e92.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L136e98.  throw v2;
}
procedure `short` `coerceIn`(`short` v2 , `short` v3 , `short` v4 ) @signature `Lkotlin/ranges/e;.coerceIn:(SSS)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L137afc.  if v3 > v4 then goto L137b0e;
  #L137b00.  if v2 >= v3 then goto L137b06;
  #L137b04.  return v3;
  #L137b06.  if v2 <= v4 then goto L137b0c;
  #L137b0a.  return v4;
  #L137b0c.  return v2;
  #L137b0e.  v2:= new `java.lang.IllegalArgumentException`;
  #L137b12.  v0:= new `java.lang.StringBuilder`;
  #L137b16.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L137b1c.  v1:= "Cannot coerce value to an empty range: maximum " @kind object;
  #L137b20.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L137b26.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L137b2c.  v4:= " is less than minimum " @kind object;
  #L137b30.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L137b36.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L137b3c.  v3:= 46I;
  #L137b40.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L137b46.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L137b4c.  v3:= temp @kind object;
  #L137b4e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L137b54.  throw v2;
}
procedure `boolean` `doubleRangeContains`(`kotlin.ranges.ClosedRange` v2 @kind object, `byte` v3 ) @signature `Lkotlin/ranges/e;.doubleRangeContains:(Lkotlin/ranges/ClosedRange;B)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L136174.  v0:= "$this$contains" @kind object;
  #L136178.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13617e.  v0:= (`double`) v3 @kind i2d;
  #L136180.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L136186.  v3:= temp @kind object;
  #L136188.  call temp:= `contains`(v2, v3) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L13618e.  v2:= temp;
  #L136190.  return v2;
}
procedure `boolean` `doubleRangeContains`(`kotlin.ranges.ClosedRange` v2 @kind object, `float` v3 ) @signature `Lkotlin/ranges/e;.doubleRangeContains:(Lkotlin/ranges/ClosedRange;F)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1361a4.  v0:= "$this$contains" @kind object;
  #L1361a8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1361ae.  v0:= (`double`) v3 @kind f2d;
  #L1361b0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L1361b6.  v3:= temp @kind object;
  #L1361b8.  call temp:= `contains`(v2, v3) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L1361be.  v2:= temp;
  #L1361c0.  return v2;
}
procedure `boolean` `doubleRangeContains`(`kotlin.ranges.ClosedRange` v2 @kind object, `int` v3 ) @signature `Lkotlin/ranges/e;.doubleRangeContains:(Lkotlin/ranges/ClosedRange;I)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L1361d4.  v0:= "$this$contains" @kind object;
  #L1361d8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1361de.  v0:= (`double`) v3 @kind i2d;
  #L1361e0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L1361e6.  v3:= temp @kind object;
  #L1361e8.  call temp:= `contains`(v2, v3) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L1361ee.  v2:= temp;
  #L1361f0.  return v2;
}
procedure `boolean` `doubleRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `long` v2 ) @signature `Lkotlin/ranges/e;.doubleRangeContains:(Lkotlin/ranges/ClosedRange;J)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L136204.  v0:= "$this$contains" @kind object;
  #L136208.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13620e.  v2:= (`double`) v2 @kind l2d;
  #L136210.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L136216.  v2:= temp @kind object;
  #L136218.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L13621e.  v1:= temp;
  #L136220.  return v1;
}
procedure `boolean` `doubleRangeContains`(`kotlin.ranges.ClosedRange` v2 @kind object, `short` v3 ) @signature `Lkotlin/ranges/e;.doubleRangeContains:(Lkotlin/ranges/ClosedRange;S)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L136234.  v0:= "$this$contains" @kind object;
  #L136238.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13623e.  v0:= (`double`) v3 @kind i2d;
  #L136240.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L136246.  v3:= temp @kind object;
  #L136248.  call temp:= `contains`(v2, v3) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L13624e.  v2:= temp;
  #L136250.  return v2;
}
procedure `kotlin.ranges.CharProgression` `downTo`(`char` v2 , `char` v3 ) @signature `Lkotlin/ranges/e;.downTo:(CC)Lkotlin/ranges/CharProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L137178.  v0:= `@@kotlin.ranges.CharProgression.Companion` @type ^`kotlin.ranges.CharProgression$Companion` @kind object;
  #L13717c.  v1:= -1I;
  #L13717e.  call temp:= `fromClosedRange`(v0, v2, v3, v1) @signature `Lkotlin/ranges/CharProgression$Companion;.fromClosedRange:(CCI)Lkotlin/ranges/CharProgression;` @kind virtual;
  #L137184.  v2:= temp @kind object;
  #L137186.  return v2 @kind object;
}
procedure `kotlin.ranges.IntProgression` `downTo`(`byte` v2 , `byte` v3 ) @signature `Lkotlin/ranges/e;.downTo:(BB)Lkotlin/ranges/IntProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13727c.  v0:= `@@kotlin.ranges.IntProgression.Companion` @type ^`kotlin.ranges.IntProgression$Companion` @kind object;
  #L137280.  v1:= -1I;
  #L137282.  call temp:= `fromClosedRange`(v0, v2, v3, v1) @signature `Lkotlin/ranges/IntProgression$Companion;.fromClosedRange:(III)Lkotlin/ranges/IntProgression;` @kind virtual;
  #L137288.  v2:= temp @kind object;
  #L13728a.  return v2 @kind object;
}
procedure `kotlin.ranges.IntProgression` `downTo`(`byte` v2 , `int` v3 ) @signature `Lkotlin/ranges/e;.downTo:(BI)Lkotlin/ranges/IntProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13729c.  v0:= `@@kotlin.ranges.IntProgression.Companion` @type ^`kotlin.ranges.IntProgression$Companion` @kind object;
  #L1372a0.  v1:= -1I;
  #L1372a2.  call temp:= `fromClosedRange`(v0, v2, v3, v1) @signature `Lkotlin/ranges/IntProgression$Companion;.fromClosedRange:(III)Lkotlin/ranges/IntProgression;` @kind virtual;
  #L1372a8.  v2:= temp @kind object;
  #L1372aa.  return v2 @kind object;
}
procedure `kotlin.ranges.IntProgression` `downTo`(`byte` v2 , `short` v3 ) @signature `Lkotlin/ranges/e;.downTo:(BS)Lkotlin/ranges/IntProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1372bc.  v0:= `@@kotlin.ranges.IntProgression.Companion` @type ^`kotlin.ranges.IntProgression$Companion` @kind object;
  #L1372c0.  v1:= -1I;
  #L1372c2.  call temp:= `fromClosedRange`(v0, v2, v3, v1) @signature `Lkotlin/ranges/IntProgression$Companion;.fromClosedRange:(III)Lkotlin/ranges/IntProgression;` @kind virtual;
  #L1372c8.  v2:= temp @kind object;
  #L1372ca.  return v2 @kind object;
}
procedure `kotlin.ranges.IntProgression` `downTo`(`int` v2 , `byte` v3 ) @signature `Lkotlin/ranges/e;.downTo:(IB)Lkotlin/ranges/IntProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1372dc.  v0:= `@@kotlin.ranges.IntProgression.Companion` @type ^`kotlin.ranges.IntProgression$Companion` @kind object;
  #L1372e0.  v1:= -1I;
  #L1372e2.  call temp:= `fromClosedRange`(v0, v2, v3, v1) @signature `Lkotlin/ranges/IntProgression$Companion;.fromClosedRange:(III)Lkotlin/ranges/IntProgression;` @kind virtual;
  #L1372e8.  v2:= temp @kind object;
  #L1372ea.  return v2 @kind object;
}
procedure `kotlin.ranges.IntProgression` `downTo`(`int` v2 , `int` v3 ) @signature `Lkotlin/ranges/e;.downTo:(II)Lkotlin/ranges/IntProgression;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1372fc.  v0:= `@@kotlin.ranges.IntProgression.Companion` @type ^`kotlin.ranges.IntProgression$Companion` @kind object;
  #L137300.  v1:= -1I;
  #L137302.  call temp:= `fromClosedRange`(v0, v2, v3, v1) @signature `Lkotlin/ranges/IntProgression$Companion;.fromClosedRange:(III)Lkotlin/ranges/IntProgression;` @kind virtual;
  #L137308.  v2:= temp @kind object;
  #L13730a.  return v2 @kind object;
}
procedure `kotlin.ranges.IntProgression` `downTo`(`int` v2 , `short` v3 ) @signature `Lkotlin/ranges/e;.downTo:(IS)Lkotlin/ranges/IntProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13731c.  v0:= `@@kotlin.ranges.IntProgression.Companion` @type ^`kotlin.ranges.IntProgression$Companion` @kind object;
  #L137320.  v1:= -1I;
  #L137322.  call temp:= `fromClosedRange`(v0, v2, v3, v1) @signature `Lkotlin/ranges/IntProgression$Companion;.fromClosedRange:(III)Lkotlin/ranges/IntProgression;` @kind virtual;
  #L137328.  v2:= temp @kind object;
  #L13732a.  return v2 @kind object;
}
procedure `kotlin.ranges.IntProgression` `downTo`(`short` v2 , `byte` v3 ) @signature `Lkotlin/ranges/e;.downTo:(SB)Lkotlin/ranges/IntProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13733c.  v0:= `@@kotlin.ranges.IntProgression.Companion` @type ^`kotlin.ranges.IntProgression$Companion` @kind object;
  #L137340.  v1:= -1I;
  #L137342.  call temp:= `fromClosedRange`(v0, v2, v3, v1) @signature `Lkotlin/ranges/IntProgression$Companion;.fromClosedRange:(III)Lkotlin/ranges/IntProgression;` @kind virtual;
  #L137348.  v2:= temp @kind object;
  #L13734a.  return v2 @kind object;
}
procedure `kotlin.ranges.IntProgression` `downTo`(`short` v2 , `int` v3 ) @signature `Lkotlin/ranges/e;.downTo:(SI)Lkotlin/ranges/IntProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13735c.  v0:= `@@kotlin.ranges.IntProgression.Companion` @type ^`kotlin.ranges.IntProgression$Companion` @kind object;
  #L137360.  v1:= -1I;
  #L137362.  call temp:= `fromClosedRange`(v0, v2, v3, v1) @signature `Lkotlin/ranges/IntProgression$Companion;.fromClosedRange:(III)Lkotlin/ranges/IntProgression;` @kind virtual;
  #L137368.  v2:= temp @kind object;
  #L13736a.  return v2 @kind object;
}
procedure `kotlin.ranges.IntProgression` `downTo`(`short` v2 , `short` v3 ) @signature `Lkotlin/ranges/e;.downTo:(SS)Lkotlin/ranges/IntProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13737c.  v0:= `@@kotlin.ranges.IntProgression.Companion` @type ^`kotlin.ranges.IntProgression$Companion` @kind object;
  #L137380.  v1:= -1I;
  #L137382.  call temp:= `fromClosedRange`(v0, v2, v3, v1) @signature `Lkotlin/ranges/IntProgression$Companion;.fromClosedRange:(III)Lkotlin/ranges/IntProgression;` @kind virtual;
  #L137388.  v2:= temp @kind object;
  #L13738a.  return v2 @kind object;
}
procedure `kotlin.ranges.LongProgression` `downTo`(`byte` v7 , `long` v8 ) @signature `Lkotlin/ranges/e;.downTo:(BJ)Lkotlin/ranges/LongProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1375a8.  v0:= `@@kotlin.ranges.LongProgression.Companion` @type ^`kotlin.ranges.LongProgression$Companion` @kind object;
  #L1375ac.  v1:= (`long`) v7 @kind i2l;
  #L1375ae.  v5:= -1L;
  #L1375b2.  v3:= v8 @kind wide;
  #L1375b4.  call temp:= `fromClosedRange`(v0, v1, v3, v5) @signature `Lkotlin/ranges/LongProgression$Companion;.fromClosedRange:(JJJ)Lkotlin/ranges/LongProgression;` @kind virtual;
  #L1375ba.  v7:= temp @kind object;
  #L1375bc.  return v7 @kind object;
}
procedure `kotlin.ranges.LongProgression` `downTo`(`int` v7 , `long` v8 ) @signature `Lkotlin/ranges/e;.downTo:(IJ)Lkotlin/ranges/LongProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1375d0.  v0:= `@@kotlin.ranges.LongProgression.Companion` @type ^`kotlin.ranges.LongProgression$Companion` @kind object;
  #L1375d4.  v1:= (`long`) v7 @kind i2l;
  #L1375d6.  v5:= -1L;
  #L1375da.  v3:= v8 @kind wide;
  #L1375dc.  call temp:= `fromClosedRange`(v0, v1, v3, v5) @signature `Lkotlin/ranges/LongProgression$Companion;.fromClosedRange:(JJJ)Lkotlin/ranges/LongProgression;` @kind virtual;
  #L1375e2.  v7:= temp @kind object;
  #L1375e4.  return v7 @kind object;
}
procedure `kotlin.ranges.LongProgression` `downTo`(`long` v7 , `byte` v9 ) @signature `Lkotlin/ranges/e;.downTo:(JB)Lkotlin/ranges/LongProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1375f8.  v0:= `@@kotlin.ranges.LongProgression.Companion` @type ^`kotlin.ranges.LongProgression$Companion` @kind object;
  #L1375fc.  v3:= (`long`) v9 @kind i2l;
  #L1375fe.  v5:= -1L;
  #L137602.  v1:= v7 @kind wide;
  #L137604.  call temp:= `fromClosedRange`(v0, v1, v3, v5) @signature `Lkotlin/ranges/LongProgression$Companion;.fromClosedRange:(JJJ)Lkotlin/ranges/LongProgression;` @kind virtual;
  #L13760a.  v7:= temp @kind object;
  #L13760c.  return v7 @kind object;
}
procedure `kotlin.ranges.LongProgression` `downTo`(`long` v7 , `int` v9 ) @signature `Lkotlin/ranges/e;.downTo:(JI)Lkotlin/ranges/LongProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L137620.  v0:= `@@kotlin.ranges.LongProgression.Companion` @type ^`kotlin.ranges.LongProgression$Companion` @kind object;
  #L137624.  v3:= (`long`) v9 @kind i2l;
  #L137626.  v5:= -1L;
  #L13762a.  v1:= v7 @kind wide;
  #L13762c.  call temp:= `fromClosedRange`(v0, v1, v3, v5) @signature `Lkotlin/ranges/LongProgression$Companion;.fromClosedRange:(JJJ)Lkotlin/ranges/LongProgression;` @kind virtual;
  #L137632.  v7:= temp @kind object;
  #L137634.  return v7 @kind object;
}
procedure `kotlin.ranges.LongProgression` `downTo`(`long` v7 , `long` v9 ) @signature `Lkotlin/ranges/e;.downTo:(JJ)Lkotlin/ranges/LongProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L137648.  v0:= `@@kotlin.ranges.LongProgression.Companion` @type ^`kotlin.ranges.LongProgression$Companion` @kind object;
  #L13764c.  v5:= -1L;
  #L137650.  v1:= v7 @kind wide;
  #L137652.  v3:= v9 @kind wide;
  #L137654.  call temp:= `fromClosedRange`(v0, v1, v3, v5) @signature `Lkotlin/ranges/LongProgression$Companion;.fromClosedRange:(JJJ)Lkotlin/ranges/LongProgression;` @kind virtual;
  #L13765a.  v7:= temp @kind object;
  #L13765c.  return v7 @kind object;
}
procedure `kotlin.ranges.LongProgression` `downTo`(`long` v7 , `short` v9 ) @signature `Lkotlin/ranges/e;.downTo:(JS)Lkotlin/ranges/LongProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L137670.  v0:= `@@kotlin.ranges.LongProgression.Companion` @type ^`kotlin.ranges.LongProgression$Companion` @kind object;
  #L137674.  v3:= (`long`) v9 @kind i2l;
  #L137676.  v5:= -1L;
  #L13767a.  v1:= v7 @kind wide;
  #L13767c.  call temp:= `fromClosedRange`(v0, v1, v3, v5) @signature `Lkotlin/ranges/LongProgression$Companion;.fromClosedRange:(JJJ)Lkotlin/ranges/LongProgression;` @kind virtual;
  #L137682.  v7:= temp @kind object;
  #L137684.  return v7 @kind object;
}
procedure `kotlin.ranges.LongProgression` `downTo`(`short` v7 , `long` v8 ) @signature `Lkotlin/ranges/e;.downTo:(SJ)Lkotlin/ranges/LongProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L137698.  v0:= `@@kotlin.ranges.LongProgression.Companion` @type ^`kotlin.ranges.LongProgression$Companion` @kind object;
  #L13769c.  v1:= (`long`) v7 @kind i2l;
  #L13769e.  v5:= -1L;
  #L1376a2.  v3:= v8 @kind wide;
  #L1376a4.  call temp:= `fromClosedRange`(v0, v1, v3, v5) @signature `Lkotlin/ranges/LongProgression$Companion;.fromClosedRange:(JJJ)Lkotlin/ranges/LongProgression;` @kind virtual;
  #L1376aa.  v7:= temp @kind object;
  #L1376ac.  return v7 @kind object;
}
procedure `boolean` `floatRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `byte` v2 ) @signature `Lkotlin/ranges/e;.floatRangeContains:(Lkotlin/ranges/ClosedRange;B)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L136264.  v0:= "$this$contains" @kind object;
  #L136268.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13626e.  v2:= (`float`) v2 @kind i2f;
  #L136270.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L136276.  v2:= temp @kind object;
  #L136278.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L13627e.  v1:= temp;
  #L136280.  return v1;
}
procedure `boolean` `floatRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `double` v2 ) @signature `Lkotlin/ranges/e;.floatRangeContains:(Lkotlin/ranges/ClosedRange;D)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L136294.  v0:= "$this$contains" @kind object;
  #L136298.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13629e.  v2:= (`float`) v2 @kind d2f;
  #L1362a0.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L1362a6.  v2:= temp @kind object;
  #L1362a8.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L1362ae.  v1:= temp;
  #L1362b0.  return v1;
}
procedure `boolean` `floatRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `int` v2 ) @signature `Lkotlin/ranges/e;.floatRangeContains:(Lkotlin/ranges/ClosedRange;I)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L1362c4.  v0:= "$this$contains" @kind object;
  #L1362c8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1362ce.  v2:= (`float`) v2 @kind i2f;
  #L1362d0.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L1362d6.  v2:= temp @kind object;
  #L1362d8.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L1362de.  v1:= temp;
  #L1362e0.  return v1;
}
procedure `boolean` `floatRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `long` v2 ) @signature `Lkotlin/ranges/e;.floatRangeContains:(Lkotlin/ranges/ClosedRange;J)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L1362f4.  v0:= "$this$contains" @kind object;
  #L1362f8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1362fe.  v2:= (`float`) v2 @kind l2f;
  #L136300.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L136306.  v2:= temp @kind object;
  #L136308.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L13630e.  v1:= temp;
  #L136310.  return v1;
}
procedure `boolean` `floatRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `short` v2 ) @signature `Lkotlin/ranges/e;.floatRangeContains:(Lkotlin/ranges/ClosedRange;S)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L136324.  v0:= "$this$contains" @kind object;
  #L136328.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13632e.  v2:= (`float`) v2 @kind i2f;
  #L136330.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L136336.  v2:= temp @kind object;
  #L136338.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L13633e.  v1:= temp;
  #L136340.  return v1;
}
procedure `boolean` `intRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `byte` v2 ) @signature `Lkotlin/ranges/e;.intRangeContains:(Lkotlin/ranges/ClosedRange;B)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L136354.  v0:= "$this$contains" @kind object;
  #L136358.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13635e.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L136364.  v2:= temp @kind object;
  #L136366.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L13636c.  v1:= temp;
  #L13636e.  return v1;
}
procedure `boolean` `intRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `double` v2 ) @signature `Lkotlin/ranges/e;.intRangeContains:(Lkotlin/ranges/ClosedRange;D)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L136380.  v0:= "$this$contains" @kind object;
  #L136384.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13638a.  call temp:= `toIntExactOrNull`(v2) @signature `Lkotlin/ranges/e;.toIntExactOrNull:(D)Ljava/lang/Integer;` @kind static;
  #L136390.  v2:= temp @kind object;
  #L136392.  if v2 == 0 then goto L1363a0;
  #L136396.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L13639c.  v1:= temp;
  #L13639e.  goto L1363a2;
  #L1363a0.  v1:= 0I;
  #L1363a2.  return v1;
}
procedure `boolean` `intRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `float` v2 ) @signature `Lkotlin/ranges/e;.intRangeContains:(Lkotlin/ranges/ClosedRange;F)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L1363b4.  v0:= "$this$contains" @kind object;
  #L1363b8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1363be.  call temp:= `toIntExactOrNull`(v2) @signature `Lkotlin/ranges/e;.toIntExactOrNull:(F)Ljava/lang/Integer;` @kind static;
  #L1363c4.  v2:= temp @kind object;
  #L1363c6.  if v2 == 0 then goto L1363d4;
  #L1363ca.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L1363d0.  v1:= temp;
  #L1363d2.  goto L1363d6;
  #L1363d4.  v1:= 0I;
  #L1363d6.  return v1;
}
procedure `boolean` `intRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `long` v2 ) @signature `Lkotlin/ranges/e;.intRangeContains:(Lkotlin/ranges/ClosedRange;J)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1363e8.  v0:= "$this$contains" @kind object;
  #L1363ec.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1363f2.  call temp:= `toIntExactOrNull`(v2) @signature `Lkotlin/ranges/e;.toIntExactOrNull:(J)Ljava/lang/Integer;` @kind static;
  #L1363f8.  v2:= temp @kind object;
  #L1363fa.  if v2 == 0 then goto L136408;
  #L1363fe.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L136404.  v1:= temp;
  #L136406.  goto L13640a;
  #L136408.  v1:= 0I;
  #L13640a.  return v1;
}
procedure `boolean` `intRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `short` v2 ) @signature `Lkotlin/ranges/e;.intRangeContains:(Lkotlin/ranges/ClosedRange;S)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13641c.  v0:= "$this$contains" @kind object;
  #L136420.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136426.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L13642c.  v2:= temp @kind object;
  #L13642e.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L136434.  v1:= temp;
  #L136436.  return v1;
}
procedure `boolean` `longRangeContains`(`kotlin.ranges.ClosedRange` v2 @kind object, `byte` v3 ) @signature `Lkotlin/ranges/e;.longRangeContains:(Lkotlin/ranges/ClosedRange;B)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L136448.  v0:= "$this$contains" @kind object;
  #L13644c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136452.  v0:= (`long`) v3 @kind i2l;
  #L136454.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L13645a.  v3:= temp @kind object;
  #L13645c.  call temp:= `contains`(v2, v3) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L136462.  v2:= temp;
  #L136464.  return v2;
}
procedure `boolean` `longRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `double` v2 ) @signature `Lkotlin/ranges/e;.longRangeContains:(Lkotlin/ranges/ClosedRange;D)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L136478.  v0:= "$this$contains" @kind object;
  #L13647c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136482.  call temp:= `toLongExactOrNull`(v2) @signature `Lkotlin/ranges/e;.toLongExactOrNull:(D)Ljava/lang/Long;` @kind static;
  #L136488.  v2:= temp @kind object;
  #L13648a.  if v2 == 0 then goto L136498;
  #L13648e.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L136494.  v1:= temp;
  #L136496.  goto L13649a;
  #L136498.  v1:= 0I;
  #L13649a.  return v1;
}
procedure `boolean` `longRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `float` v2 ) @signature `Lkotlin/ranges/e;.longRangeContains:(Lkotlin/ranges/ClosedRange;F)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L1364ac.  v0:= "$this$contains" @kind object;
  #L1364b0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1364b6.  call temp:= `toLongExactOrNull`(v2) @signature `Lkotlin/ranges/e;.toLongExactOrNull:(F)Ljava/lang/Long;` @kind static;
  #L1364bc.  v2:= temp @kind object;
  #L1364be.  if v2 == 0 then goto L1364cc;
  #L1364c2.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L1364c8.  v1:= temp;
  #L1364ca.  goto L1364ce;
  #L1364cc.  v1:= 0I;
  #L1364ce.  return v1;
}
procedure `boolean` `longRangeContains`(`kotlin.ranges.ClosedRange` v2 @kind object, `int` v3 ) @signature `Lkotlin/ranges/e;.longRangeContains:(Lkotlin/ranges/ClosedRange;I)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1364e0.  v0:= "$this$contains" @kind object;
  #L1364e4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1364ea.  v0:= (`long`) v3 @kind i2l;
  #L1364ec.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1364f2.  v3:= temp @kind object;
  #L1364f4.  call temp:= `contains`(v2, v3) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L1364fa.  v2:= temp;
  #L1364fc.  return v2;
}
procedure `boolean` `longRangeContains`(`kotlin.ranges.ClosedRange` v2 @kind object, `short` v3 ) @signature `Lkotlin/ranges/e;.longRangeContains:(Lkotlin/ranges/ClosedRange;S)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L136510.  v0:= "$this$contains" @kind object;
  #L136514.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13651a.  v0:= (`long`) v3 @kind i2l;
  #L13651c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L136522.  v3:= temp @kind object;
  #L136524.  call temp:= `contains`(v2, v3) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L13652a.  v2:= temp;
  #L13652c.  return v2;
}
procedure `char` `random`(`kotlin.ranges.CharRange` v1 @kind object, `kotlin.random.Random` v2 @kind object) @signature `Lkotlin/ranges/e;.random:(Lkotlin/ranges/CharRange;Lkotlin/random/Random;)C` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1366dc.  v0:= "$this$random" @kind object;
  #L1366e0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1366e6.  v0:= "random" @kind object;
  #L1366ea.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1366f0.  call temp:= `getFirst`(v1) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L1366f6.  v0:= temp;
  #L1366f8.  call temp:= `getLast`(v1) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L1366fe.  v1:= temp;
  #L136700.  v1:= v1 + 1;
  #L136704.  call temp:= `nextInt`(v2, v0, v1) @signature `Lkotlin/random/Random;.nextInt:(II)I` @kind virtual;
  #L13670a.  v1:= temp;
  #L13670c.  v1:= (`char`) v1 @kind i2c;
  #L13670e.  return v1;
  #L136710.  v1:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L136712.  v2:= new `java.util.NoSuchElementException`;
  #L136716.  call temp:= `getMessage`(v1) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L13671c.  v1:= temp @kind object;
  #L13671e.  call `<init>`(v2, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L136724.  throw v2;
  catch `java.lang.IllegalArgumentException` @[L1366f0..L13670c] goto L136710;
}
procedure `int` `random`(`kotlin.ranges.IntRange` v1 @kind object, `kotlin.random.Random` v2 @kind object) @signature `Lkotlin/ranges/e;.random:(Lkotlin/ranges/IntRange;Lkotlin/random/Random;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L136a28.  v0:= "$this$random" @kind object;
  #L136a2c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136a32.  v0:= "random" @kind object;
  #L136a36.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136a3c.  call temp:= `nextInt`(v2, v1) @signature `Lkotlin/random/RandomKt;.nextInt:(Lkotlin/random/Random;Lkotlin/ranges/IntRange;)I` @kind static;
  #L136a42.  v1:= temp;
  #L136a44.  return v1;
  #L136a46.  v1:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L136a48.  v2:= new `java.util.NoSuchElementException`;
  #L136a4c.  call temp:= `getMessage`(v1) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L136a52.  v1:= temp @kind object;
  #L136a54.  call `<init>`(v2, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L136a5a.  throw v2;
  catch `java.lang.IllegalArgumentException` @[L136a3c..L136a44] goto L136a46;
}
procedure `long` `random`(`kotlin.ranges.LongRange` v1 @kind object, `kotlin.random.Random` v2 @kind object) @signature `Lkotlin/ranges/e;.random:(Lkotlin/ranges/LongRange;Lkotlin/random/Random;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L137a78.  v0:= "$this$random" @kind object;
  #L137a7c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L137a82.  v0:= "random" @kind object;
  #L137a86.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L137a8c.  call temp:= `nextLong`(v2, v1) @signature `Lkotlin/random/RandomKt;.nextLong:(Lkotlin/random/Random;Lkotlin/ranges/LongRange;)J` @kind static;
  #L137a92.  v1:= temp @kind wide;
  #L137a94.  return v1 @kind wide;
  #L137a96.  v1:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L137a98.  v2:= new `java.util.NoSuchElementException`;
  #L137a9c.  call temp:= `getMessage`(v1) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L137aa2.  v1:= temp @kind object;
  #L137aa4.  call `<init>`(v2, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L137aaa.  throw v2;
  catch `java.lang.IllegalArgumentException` @[L137a8c..L137a94] goto L137a96;
}
procedure `java.lang.Character` `randomOrNull`(`kotlin.ranges.CharRange` v1 @kind object, `kotlin.random.Random` v2 @kind object) @signature `Lkotlin/ranges/e;.randomOrNull:(Lkotlin/ranges/CharRange;Lkotlin/random/Random;)Ljava/lang/Character;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L136ba8.  v0:= "$this$randomOrNull" @kind object;
  #L136bac.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136bb2.  v0:= "random" @kind object;
  #L136bb6.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136bbc.  call temp:= `isEmpty`(v1) @signature `Lkotlin/ranges/CharRange;.isEmpty:()Z` @kind virtual;
  #L136bc2.  v0:= temp;
  #L136bc4.  if v0 == 0 then goto L136bcc;
  #L136bc8.  v1:= 0I;
  #L136bca.  return v1 @kind object;
  #L136bcc.  call temp:= `getFirst`(v1) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L136bd2.  v0:= temp;
  #L136bd4.  call temp:= `getLast`(v1) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L136bda.  v1:= temp;
  #L136bdc.  v1:= v1 + 1;
  #L136be0.  call temp:= `nextInt`(v2, v0, v1) @signature `Lkotlin/random/Random;.nextInt:(II)I` @kind virtual;
  #L136be6.  v1:= temp;
  #L136be8.  v1:= (`char`) v1 @kind i2c;
  #L136bea.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L136bf0.  v1:= temp @kind object;
  #L136bf2.  return v1 @kind object;
}
procedure `java.lang.Integer` `randomOrNull`(`kotlin.ranges.IntRange` v1 @kind object, `kotlin.random.Random` v2 @kind object) @signature `Lkotlin/ranges/e;.randomOrNull:(Lkotlin/ranges/IntRange;Lkotlin/random/Random;)Ljava/lang/Integer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L136eac.  v0:= "$this$randomOrNull" @kind object;
  #L136eb0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136eb6.  v0:= "random" @kind object;
  #L136eba.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136ec0.  call temp:= `isEmpty`(v1) @signature `Lkotlin/ranges/IntRange;.isEmpty:()Z` @kind virtual;
  #L136ec6.  v0:= temp;
  #L136ec8.  if v0 == 0 then goto L136ed0;
  #L136ecc.  v1:= 0I;
  #L136ece.  return v1 @kind object;
  #L136ed0.  call temp:= `nextInt`(v2, v1) @signature `Lkotlin/random/RandomKt;.nextInt:(Lkotlin/random/Random;Lkotlin/ranges/IntRange;)I` @kind static;
  #L136ed6.  v1:= temp;
  #L136ed8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L136ede.  v1:= temp @kind object;
  #L136ee0.  return v1 @kind object;
}
procedure `java.lang.Long` `randomOrNull`(`kotlin.ranges.LongRange` v1 @kind object, `kotlin.random.Random` v2 @kind object) @signature `Lkotlin/ranges/e;.randomOrNull:(Lkotlin/ranges/LongRange;Lkotlin/random/Random;)Ljava/lang/Long;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L136fb4.  v0:= "$this$randomOrNull" @kind object;
  #L136fb8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136fbe.  v0:= "random" @kind object;
  #L136fc2.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136fc8.  call temp:= `isEmpty`(v1) @signature `Lkotlin/ranges/LongRange;.isEmpty:()Z` @kind virtual;
  #L136fce.  v0:= temp;
  #L136fd0.  if v0 == 0 then goto L136fd8;
  #L136fd4.  v1:= 0I;
  #L136fd6.  return v1 @kind object;
  #L136fd8.  call temp:= `nextLong`(v2, v1) @signature `Lkotlin/random/RandomKt;.nextLong:(Lkotlin/random/Random;Lkotlin/ranges/LongRange;)J` @kind static;
  #L136fde.  v1:= temp @kind wide;
  #L136fe0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L136fe6.  v1:= temp @kind object;
  #L136fe8.  return v1 @kind object;
}
procedure `kotlin.ranges.CharProgression` `reversed`(`kotlin.ranges.CharProgression` v3 @kind object) @signature `Lkotlin/ranges/e;.reversed:(Lkotlin/ranges/CharProgression;)Lkotlin/ranges/CharProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L137198.  v0:= "$this$reversed" @kind object;
  #L13719c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1371a2.  v0:= `@@kotlin.ranges.CharProgression.Companion` @type ^`kotlin.ranges.CharProgression$Companion` @kind object;
  #L1371a6.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L1371ac.  v1:= temp;
  #L1371ae.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L1371b4.  v2:= temp;
  #L1371b6.  call temp:= `getStep`(v3) @signature `Lkotlin/ranges/CharProgression;.getStep:()I` @kind virtual;
  #L1371bc.  v3:= temp;
  #L1371be.  v3:= -v3 @kind int;
  #L1371c0.  call temp:= `fromClosedRange`(v0, v1, v2, v3) @signature `Lkotlin/ranges/CharProgression$Companion;.fromClosedRange:(CCI)Lkotlin/ranges/CharProgression;` @kind virtual;
  #L1371c6.  v3:= temp @kind object;
  #L1371c8.  return v3 @kind object;
}
procedure `kotlin.ranges.IntProgression` `reversed`(`kotlin.ranges.IntProgression` v3 @kind object) @signature `Lkotlin/ranges/e;.reversed:(Lkotlin/ranges/IntProgression;)Lkotlin/ranges/IntProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13739c.  v0:= "$this$reversed" @kind object;
  #L1373a0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1373a6.  v0:= `@@kotlin.ranges.IntProgression.Companion` @type ^`kotlin.ranges.IntProgression$Companion` @kind object;
  #L1373aa.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L1373b0.  v1:= temp;
  #L1373b2.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L1373b8.  v2:= temp;
  #L1373ba.  call temp:= `getStep`(v3) @signature `Lkotlin/ranges/IntProgression;.getStep:()I` @kind virtual;
  #L1373c0.  v3:= temp;
  #L1373c2.  v3:= -v3 @kind int;
  #L1373c4.  call temp:= `fromClosedRange`(v0, v1, v2, v3) @signature `Lkotlin/ranges/IntProgression$Companion;.fromClosedRange:(III)Lkotlin/ranges/IntProgression;` @kind virtual;
  #L1373ca.  v3:= temp @kind object;
  #L1373cc.  return v3 @kind object;
}
procedure `kotlin.ranges.LongProgression` `reversed`(`kotlin.ranges.LongProgression` v8 @kind object) @signature `Lkotlin/ranges/e;.reversed:(Lkotlin/ranges/LongProgression;)Lkotlin/ranges/LongProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1376c0.  v0:= "$this$reversed" @kind object;
  #L1376c4.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1376ca.  v1:= `@@kotlin.ranges.LongProgression.Companion` @type ^`kotlin.ranges.LongProgression$Companion` @kind object;
  #L1376ce.  call temp:= `getLast`(v8) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L1376d4.  v2:= temp @kind wide;
  #L1376d6.  call temp:= `getFirst`(v8) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L1376dc.  v4:= temp @kind wide;
  #L1376de.  call temp:= `getStep`(v8) @signature `Lkotlin/ranges/LongProgression;.getStep:()J` @kind virtual;
  #L1376e4.  v6:= temp @kind wide;
  #L1376e6.  v6:= -v6 @kind long;
  #L1376e8.  call temp:= `fromClosedRange`(v1, v2, v4, v6) @signature `Lkotlin/ranges/LongProgression$Companion;.fromClosedRange:(JJJ)Lkotlin/ranges/LongProgression;` @kind virtual;
  #L1376ee.  v8:= temp @kind object;
  #L1376f0.  return v8 @kind object;
}
procedure `boolean` `shortRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `byte` v2 ) @signature `Lkotlin/ranges/e;.shortRangeContains:(Lkotlin/ranges/ClosedRange;B)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L136540.  v0:= "$this$contains" @kind object;
  #L136544.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13654a.  v2:= (`short`) v2 @kind i2s;
  #L13654c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Short;.valueOf:(S)Ljava/lang/Short;` @kind static;
  #L136552.  v2:= temp @kind object;
  #L136554.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L13655a.  v1:= temp;
  #L13655c.  return v1;
}
procedure `boolean` `shortRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `double` v2 ) @signature `Lkotlin/ranges/e;.shortRangeContains:(Lkotlin/ranges/ClosedRange;D)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L136570.  v0:= "$this$contains" @kind object;
  #L136574.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13657a.  call temp:= `toShortExactOrNull`(v2) @signature `Lkotlin/ranges/e;.toShortExactOrNull:(D)Ljava/lang/Short;` @kind static;
  #L136580.  v2:= temp @kind object;
  #L136582.  if v2 == 0 then goto L136590;
  #L136586.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L13658c.  v1:= temp;
  #L13658e.  goto L136592;
  #L136590.  v1:= 0I;
  #L136592.  return v1;
}
procedure `boolean` `shortRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `float` v2 ) @signature `Lkotlin/ranges/e;.shortRangeContains:(Lkotlin/ranges/ClosedRange;F)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L1365a4.  v0:= "$this$contains" @kind object;
  #L1365a8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1365ae.  call temp:= `toShortExactOrNull`(v2) @signature `Lkotlin/ranges/e;.toShortExactOrNull:(F)Ljava/lang/Short;` @kind static;
  #L1365b4.  v2:= temp @kind object;
  #L1365b6.  if v2 == 0 then goto L1365c4;
  #L1365ba.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L1365c0.  v1:= temp;
  #L1365c2.  goto L1365c6;
  #L1365c4.  v1:= 0I;
  #L1365c6.  return v1;
}
procedure `boolean` `shortRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `int` v2 ) @signature `Lkotlin/ranges/e;.shortRangeContains:(Lkotlin/ranges/ClosedRange;I)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1365d8.  v0:= "$this$contains" @kind object;
  #L1365dc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1365e2.  call temp:= `toShortExactOrNull`(v2) @signature `Lkotlin/ranges/e;.toShortExactOrNull:(I)Ljava/lang/Short;` @kind static;
  #L1365e8.  v2:= temp @kind object;
  #L1365ea.  if v2 == 0 then goto L1365f8;
  #L1365ee.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L1365f4.  v1:= temp;
  #L1365f6.  goto L1365fa;
  #L1365f8.  v1:= 0I;
  #L1365fa.  return v1;
}
procedure `boolean` `shortRangeContains`(`kotlin.ranges.ClosedRange` v1 @kind object, `long` v2 ) @signature `Lkotlin/ranges/e;.shortRangeContains:(Lkotlin/ranges/ClosedRange;J)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13660c.  v0:= "$this$contains" @kind object;
  #L136610.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L136616.  call temp:= `toShortExactOrNull`(v2) @signature `Lkotlin/ranges/e;.toShortExactOrNull:(J)Ljava/lang/Short;` @kind static;
  #L13661c.  v2:= temp @kind object;
  #L13661e.  if v2 == 0 then goto L13662c;
  #L136622.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange;.contains:(Ljava/lang/Comparable;)Z` @kind interface;
  #L136628.  v1:= temp;
  #L13662a.  goto L13662e;
  #L13662c.  v1:= 0I;
  #L13662e.  return v1;
}
procedure `kotlin.ranges.CharProgression` `step`(`kotlin.ranges.CharProgression` v3 @kind object, `int` v4 ) @signature `Lkotlin/ranges/e;.step:(Lkotlin/ranges/CharProgression;I)Lkotlin/ranges/CharProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1371dc.  v0:= "$this$step" @kind object;
  #L1371e0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1371e6.  if v4 <= 0 then goto L1371ee;
  #L1371ea.  v0:= 1I;
  #L1371ec.  goto L1371f0;
  #L1371ee.  v0:= 0I;
  #L1371f0.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1371f6.  v1:= temp @kind object;
  #L1371f8.  call `checkStepIsPositive`(v0, v1) @signature `Lkotlin/ranges/d;.checkStepIsPositive:(ZLjava/lang/Number;)V` @kind static;
  #L1371fe.  v0:= `@@kotlin.ranges.CharProgression.Companion` @type ^`kotlin.ranges.CharProgression$Companion` @kind object;
  #L137202.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L137208.  v1:= temp;
  #L13720a.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L137210.  v2:= temp;
  #L137212.  call temp:= `getStep`(v3) @signature `Lkotlin/ranges/CharProgression;.getStep:()I` @kind virtual;
  #L137218.  v3:= temp;
  #L13721a.  if v3 <= 0 then goto L137220;
  #L13721e.  goto L137222;
  #L137220.  v4:= -v4 @kind int;
  #L137222.  call temp:= `fromClosedRange`(v0, v1, v2, v4) @signature `Lkotlin/ranges/CharProgression$Companion;.fromClosedRange:(CCI)Lkotlin/ranges/CharProgression;` @kind virtual;
  #L137228.  v3:= temp @kind object;
  #L13722a.  return v3 @kind object;
}
procedure `kotlin.ranges.IntProgression` `step`(`kotlin.ranges.IntProgression` v3 @kind object, `int` v4 ) @signature `Lkotlin/ranges/e;.step:(Lkotlin/ranges/IntProgression;I)Lkotlin/ranges/IntProgression;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1373e0.  v0:= "$this$step" @kind object;
  #L1373e4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1373ea.  if v4 <= 0 then goto L1373f2;
  #L1373ee.  v0:= 1I;
  #L1373f0.  goto L1373f4;
  #L1373f2.  v0:= 0I;
  #L1373f4.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1373fa.  v1:= temp @kind object;
  #L1373fc.  call `checkStepIsPositive`(v0, v1) @signature `Lkotlin/ranges/d;.checkStepIsPositive:(ZLjava/lang/Number;)V` @kind static;
  #L137402.  v0:= `@@kotlin.ranges.IntProgression.Companion` @type ^`kotlin.ranges.IntProgression$Companion` @kind object;
  #L137406.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L13740c.  v1:= temp;
  #L13740e.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L137414.  v2:= temp;
  #L137416.  call temp:= `getStep`(v3) @signature `Lkotlin/ranges/IntProgression;.getStep:()I` @kind virtual;
  #L13741c.  v3:= temp;
  #L13741e.  if v3 <= 0 then goto L137424;
  #L137422.  goto L137426;
  #L137424.  v4:= -v4 @kind int;
  #L137426.  call temp:= `fromClosedRange`(v0, v1, v2, v4) @signature `Lkotlin/ranges/IntProgression$Companion;.fromClosedRange:(III)Lkotlin/ranges/IntProgression;` @kind virtual;
  #L13742c.  v3:= temp @kind object;
  #L13742e.  return v3 @kind object;
}
procedure `kotlin.ranges.LongProgression` `step`(`kotlin.ranges.LongProgression` v11 @kind object, `long` v12 ) @signature `Lkotlin/ranges/e;.step:(Lkotlin/ranges/LongProgression;J)Lkotlin/ranges/LongProgression;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L137704.  v0:= "$this$step" @kind object;
  #L137708.  call `checkNotNullParameter`(v11, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13770e.  v0:= 0L;
  #L137712.  v2:= lcmp(v12, v0);
  #L137716.  if v2 <= 0 then goto L13771e;
  #L13771a.  v2:= 1I;
  #L13771c.  goto L137720;
  #L13771e.  v2:= 0I;
  #L137720.  call temp:= `valueOf`(v12) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L137726.  v3:= temp @kind object;
  #L137728.  call `checkStepIsPositive`(v2, v3) @signature `Lkotlin/ranges/d;.checkStepIsPositive:(ZLjava/lang/Number;)V` @kind static;
  #L13772e.  v4:= `@@kotlin.ranges.LongProgression.Companion` @type ^`kotlin.ranges.LongProgression$Companion` @kind object;
  #L137732.  call temp:= `getFirst`(v11) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L137738.  v5:= temp @kind wide;
  #L13773a.  call temp:= `getLast`(v11) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L137740.  v7:= temp @kind wide;
  #L137742.  call temp:= `getStep`(v11) @signature `Lkotlin/ranges/LongProgression;.getStep:()J` @kind virtual;
  #L137748.  v2:= temp @kind wide;
  #L13774a.  v11:= lcmp(v2, v0);
  #L13774e.  if v11 <= 0 then goto L137754;
  #L137752.  goto L137756;
  #L137754.  v12:= -v12 @kind long;
  #L137756.  v9:= v12 @kind wide;
  #L137758.  call temp:= `fromClosedRange`(v4, v5, v7, v9) @signature `Lkotlin/ranges/LongProgression$Companion;.fromClosedRange:(JJJ)Lkotlin/ranges/LongProgression;` @kind virtual;
  #L13775e.  v11:= temp @kind object;
  #L137760.  return v11 @kind object;
}
procedure `java.lang.Byte` `toByteExactOrNull`(`double` v5 ) @signature `Lkotlin/ranges/e;.toByteExactOrNull:(D)Ljava/lang/Byte;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L136a7c.  v0:= -128I;
  #L136a80.  v0:= (`double`) v0 @kind i2d;
  #L136a82.  v2:= 127I;
  #L136a86.  v2:= (`double`) v2 @kind i2d;
  #L136a88.  v4:= dcmpl(v5, v0);
  #L136a8c.  if v4 < 0 then goto L136aa6;
  #L136a90.  v0:= dcmpg(v5, v2);
  #L136a94.  if v0 > 0 then goto L136aa6;
  #L136a98.  v5:= (`int`) v5 @kind d2i;
  #L136a9a.  v5:= (`byte`) v5 @kind i2b;
  #L136a9c.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L136aa2.  v5:= temp @kind object;
  #L136aa4.  goto L136aa8;
  #L136aa6.  v5:= 0I;
  #L136aa8.  return v5 @kind object;
}
procedure `java.lang.Byte` `toByteExactOrNull`(`float` v2 ) @signature `Lkotlin/ranges/e;.toByteExactOrNull:(F)Ljava/lang/Byte;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L136abc.  v0:= -128I;
  #L136ac0.  v0:= (`float`) v0 @kind i2f;
  #L136ac2.  v1:= 127I;
  #L136ac6.  v1:= (`float`) v1 @kind i2f;
  #L136ac8.  v0:= fcmpl(v2, v0);
  #L136acc.  if v0 < 0 then goto L136ae6;
  #L136ad0.  v0:= fcmpg(v2, v1);
  #L136ad4.  if v0 > 0 then goto L136ae6;
  #L136ad8.  v2:= (`int`) v2 @kind f2i;
  #L136ada.  v2:= (`byte`) v2 @kind i2b;
  #L136adc.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L136ae2.  v2:= temp @kind object;
  #L136ae4.  goto L136ae8;
  #L136ae6.  v2:= 0I;
  #L136ae8.  return v2 @kind object;
}
procedure `java.lang.Byte` `toByteExactOrNull`(`int` v1 ) @signature `Lkotlin/ranges/e;.toByteExactOrNull:(I)Ljava/lang/Byte;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L136afc.  v0:= -128I;
  #L136b00.  if v0 <= v1 then goto L136b06;
  #L136b04.  goto L136b1a;
  #L136b06.  v0:= 127I;
  #L136b0a.  if v0 < v1 then goto L136b1a;
  #L136b0e.  v1:= (`byte`) v1 @kind i2b;
  #L136b10.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L136b16.  v1:= temp @kind object;
  #L136b18.  goto L136b1c;
  #L136b1a.  v1:= 0I;
  #L136b1c.  return v1 @kind object;
}
procedure `java.lang.Byte` `toByteExactOrNull`(`long` v5 ) @signature `Lkotlin/ranges/e;.toByteExactOrNull:(J)Ljava/lang/Byte;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L136b30.  v0:= -128I;
  #L136b34.  v0:= (`long`) v0 @kind i2l;
  #L136b36.  v2:= 127I;
  #L136b3a.  v2:= (`long`) v2 @kind i2l;
  #L136b3c.  v4:= lcmp(v0, v5);
  #L136b40.  if v4 <= 0 then goto L136b46;
  #L136b44.  goto L136b5c;
  #L136b46.  v0:= lcmp(v2, v5);
  #L136b4a.  if v0 < 0 then goto L136b5c;
  #L136b4e.  v6:= (`int`) v5 @kind l2i;
  #L136b50.  v5:= (`byte`) v6 @kind i2b;
  #L136b52.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L136b58.  v5:= temp @kind object;
  #L136b5a.  goto L136b5e;
  #L136b5c.  v5:= 0I;
  #L136b5e.  return v5 @kind object;
}
procedure `java.lang.Byte` `toByteExactOrNull`(`short` v2 ) @signature `Lkotlin/ranges/e;.toByteExactOrNull:(S)Ljava/lang/Byte;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L136b70.  v0:= -128I;
  #L136b74.  v0:= (`short`) v0 @kind i2s;
  #L136b76.  v1:= 127I;
  #L136b7a.  v1:= (`short`) v1 @kind i2s;
  #L136b7c.  if v0 <= v2 then goto L136b82;
  #L136b80.  goto L136b92;
  #L136b82.  if v1 < v2 then goto L136b92;
  #L136b86.  v2:= (`byte`) v2 @kind i2b;
  #L136b88.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L136b8e.  v2:= temp @kind object;
  #L136b90.  goto L136b94;
  #L136b92.  v2:= 0I;
  #L136b94.  return v2 @kind object;
}
procedure `java.lang.Integer` `toIntExactOrNull`(`double` v5 ) @signature `Lkotlin/ranges/e;.toIntExactOrNull:(D)Ljava/lang/Integer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L136ef4.  v0:= -2147483648I;
  #L136ef8.  v0:= (`double`) v0 @kind i2d;
  #L136efa.  v2:= 2147483647I;
  #L136f00.  v2:= (`double`) v2 @kind i2d;
  #L136f02.  v4:= dcmpl(v5, v0);
  #L136f06.  if v4 < 0 then goto L136f1e;
  #L136f0a.  v0:= dcmpg(v5, v2);
  #L136f0e.  if v0 > 0 then goto L136f1e;
  #L136f12.  v5:= (`int`) v5 @kind d2i;
  #L136f14.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L136f1a.  v5:= temp @kind object;
  #L136f1c.  goto L136f20;
  #L136f1e.  v5:= 0I;
  #L136f20.  return v5 @kind object;
}
procedure `java.lang.Integer` `toIntExactOrNull`(`float` v2 ) @signature `Lkotlin/ranges/e;.toIntExactOrNull:(F)Ljava/lang/Integer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L136f34.  v0:= -2147483648I;
  #L136f38.  v0:= (`float`) v0 @kind i2f;
  #L136f3a.  v1:= 2147483647I;
  #L136f40.  v1:= (`float`) v1 @kind i2f;
  #L136f42.  v0:= fcmpl(v2, v0);
  #L136f46.  if v0 < 0 then goto L136f5e;
  #L136f4a.  v0:= fcmpg(v2, v1);
  #L136f4e.  if v0 > 0 then goto L136f5e;
  #L136f52.  v2:= (`int`) v2 @kind f2i;
  #L136f54.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L136f5a.  v2:= temp @kind object;
  #L136f5c.  goto L136f60;
  #L136f5e.  v2:= 0I;
  #L136f60.  return v2 @kind object;
}
procedure `java.lang.Integer` `toIntExactOrNull`(`long` v5 ) @signature `Lkotlin/ranges/e;.toIntExactOrNull:(J)Ljava/lang/Integer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L136f74.  v0:= -2147483648I;
  #L136f78.  v0:= (`long`) v0 @kind i2l;
  #L136f7a.  v2:= 2147483647I;
  #L136f80.  v2:= (`long`) v2 @kind i2l;
  #L136f82.  v4:= lcmp(v0, v5);
  #L136f86.  if v4 <= 0 then goto L136f8c;
  #L136f8a.  goto L136fa0;
  #L136f8c.  v0:= lcmp(v2, v5);
  #L136f90.  if v0 < 0 then goto L136fa0;
  #L136f94.  v6:= (`int`) v5 @kind l2i;
  #L136f96.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L136f9c.  v5:= temp @kind object;
  #L136f9e.  goto L136fa2;
  #L136fa0.  v5:= 0I;
  #L136fa2.  return v5 @kind object;
}
procedure `java.lang.Long` `toLongExactOrNull`(`double` v5 ) @signature `Lkotlin/ranges/e;.toLongExactOrNull:(D)Ljava/lang/Long;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L136ffc.  v0:= -9223372036854775808L;
  #L137000.  v0:= (`double`) v0 @kind l2d;
  #L137002.  v2:= 9223372036854775807L;
  #L13700c.  v2:= (`double`) v2 @kind l2d;
  #L13700e.  v4:= dcmpl(v5, v0);
  #L137012.  if v4 < 0 then goto L13702a;
  #L137016.  v0:= dcmpg(v5, v2);
  #L13701a.  if v0 > 0 then goto L13702a;
  #L13701e.  v5:= (`long`) v5 @kind d2l;
  #L137020.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L137026.  v5:= temp @kind object;
  #L137028.  goto L13702c;
  #L13702a.  v5:= 0I;
  #L13702c.  return v5 @kind object;
}
procedure `java.lang.Long` `toLongExactOrNull`(`float` v3 ) @signature `Lkotlin/ranges/e;.toLongExactOrNull:(F)Ljava/lang/Long;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L137040.  v0:= -9223372036854775808L;
  #L137044.  v0:= (`float`) v0 @kind l2f;
  #L137046.  v1:= 9223372036854775807L;
  #L137050.  v1:= (`float`) v1 @kind l2f;
  #L137052.  v0:= fcmpl(v3, v0);
  #L137056.  if v0 < 0 then goto L13706e;
  #L13705a.  v0:= fcmpg(v3, v1);
  #L13705e.  if v0 > 0 then goto L13706e;
  #L137062.  v0:= (`long`) v3 @kind f2l;
  #L137064.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L13706a.  v3:= temp @kind object;
  #L13706c.  goto L137070;
  #L13706e.  v3:= 0I;
  #L137070.  return v3 @kind object;
}
procedure `java.lang.Short` `toShortExactOrNull`(`double` v5 ) @signature `Lkotlin/ranges/e;.toShortExactOrNull:(D)Ljava/lang/Short;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L137084.  v0:= -32768I;
  #L137088.  v0:= (`double`) v0 @kind i2d;
  #L13708a.  v2:= 32767I;
  #L13708e.  v2:= (`double`) v2 @kind i2d;
  #L137090.  v4:= dcmpl(v5, v0);
  #L137094.  if v4 < 0 then goto L1370ae;
  #L137098.  v0:= dcmpg(v5, v2);
  #L13709c.  if v0 > 0 then goto L1370ae;
  #L1370a0.  v5:= (`int`) v5 @kind d2i;
  #L1370a2.  v5:= (`short`) v5 @kind i2s;
  #L1370a4.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Short;.valueOf:(S)Ljava/lang/Short;` @kind static;
  #L1370aa.  v5:= temp @kind object;
  #L1370ac.  goto L1370b0;
  #L1370ae.  v5:= 0I;
  #L1370b0.  return v5 @kind object;
}
procedure `java.lang.Short` `toShortExactOrNull`(`float` v2 ) @signature `Lkotlin/ranges/e;.toShortExactOrNull:(F)Ljava/lang/Short;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1370c4.  v0:= -32768I;
  #L1370c8.  v0:= (`float`) v0 @kind i2f;
  #L1370ca.  v1:= 32767I;
  #L1370ce.  v1:= (`float`) v1 @kind i2f;
  #L1370d0.  v0:= fcmpl(v2, v0);
  #L1370d4.  if v0 < 0 then goto L1370ee;
  #L1370d8.  v0:= fcmpg(v2, v1);
  #L1370dc.  if v0 > 0 then goto L1370ee;
  #L1370e0.  v2:= (`int`) v2 @kind f2i;
  #L1370e2.  v2:= (`short`) v2 @kind i2s;
  #L1370e4.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Short;.valueOf:(S)Ljava/lang/Short;` @kind static;
  #L1370ea.  v2:= temp @kind object;
  #L1370ec.  goto L1370f0;
  #L1370ee.  v2:= 0I;
  #L1370f0.  return v2 @kind object;
}
procedure `java.lang.Short` `toShortExactOrNull`(`int` v1 ) @signature `Lkotlin/ranges/e;.toShortExactOrNull:(I)Ljava/lang/Short;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L137104.  v0:= -32768I;
  #L137108.  if v0 <= v1 then goto L13710e;
  #L13710c.  goto L137122;
  #L13710e.  v0:= 32767I;
  #L137112.  if v0 < v1 then goto L137122;
  #L137116.  v1:= (`short`) v1 @kind i2s;
  #L137118.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Short;.valueOf:(S)Ljava/lang/Short;` @kind static;
  #L13711e.  v1:= temp @kind object;
  #L137120.  goto L137124;
  #L137122.  v1:= 0I;
  #L137124.  return v1 @kind object;
}
procedure `java.lang.Short` `toShortExactOrNull`(`long` v5 ) @signature `Lkotlin/ranges/e;.toShortExactOrNull:(J)Ljava/lang/Short;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L137138.  v0:= -32768I;
  #L13713c.  v0:= (`long`) v0 @kind i2l;
  #L13713e.  v2:= 32767I;
  #L137142.  v2:= (`long`) v2 @kind i2l;
  #L137144.  v4:= lcmp(v0, v5);
  #L137148.  if v4 <= 0 then goto L13714e;
  #L13714c.  goto L137164;
  #L13714e.  v0:= lcmp(v2, v5);
  #L137152.  if v0 < 0 then goto L137164;
  #L137156.  v6:= (`int`) v5 @kind l2i;
  #L137158.  v5:= (`short`) v6 @kind i2s;
  #L13715a.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Short;.valueOf:(S)Ljava/lang/Short;` @kind static;
  #L137160.  v5:= temp @kind object;
  #L137162.  goto L137166;
  #L137164.  v5:= 0I;
  #L137166.  return v5 @kind object;
}
procedure `kotlin.ranges.CharRange` `until`(`char` v1 , `char` v2 ) @signature `Lkotlin/ranges/e;.until:(CC)Lkotlin/ranges/CharRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13723c.  v0:= 0I;
  #L13723e.  call temp:= `compare`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L137244.  v0:= temp;
  #L137246.  if v0 > 0 then goto L137258;
  #L13724a.  v1:= `@@kotlin.ranges.CharRange.Companion` @type ^`kotlin.ranges.CharRange$Companion` @kind object;
  #L13724e.  call temp:= `getEMPTY`(v1) @signature `Lkotlin/ranges/CharRange$Companion;.getEMPTY:()Lkotlin/ranges/CharRange;` @kind virtual;
  #L137254.  v1:= temp @kind object;
  #L137256.  return v1 @kind object;
  #L137258.  v0:= new `kotlin.ranges.CharRange`;
  #L13725c.  v2:= v2 + -1;
  #L137260.  v2:= (`char`) v2 @kind i2c;
  #L137262.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/CharRange;.<init>:(CC)V` @kind direct;
  #L137268.  return v0 @kind object;
}
procedure `kotlin.ranges.IntRange` `until`(`byte` v1 , `byte` v2 ) @signature `Lkotlin/ranges/e;.until:(BB)Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L137440.  v0:= new `kotlin.ranges.IntRange`;
  #L137444.  v2:= v2 + -1;
  #L137448.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L13744e.  return v0 @kind object;
}
procedure `kotlin.ranges.IntRange` `until`(`byte` v1 , `int` v2 ) @signature `Lkotlin/ranges/e;.until:(BI)Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L137460.  v0:= -2147483648I;
  #L137464.  if v2 > v0 then goto L137476;
  #L137468.  v1:= `@@kotlin.ranges.IntRange.Companion` @type ^`kotlin.ranges.IntRange$Companion` @kind object;
  #L13746c.  call temp:= `getEMPTY`(v1) @signature `Lkotlin/ranges/IntRange$Companion;.getEMPTY:()Lkotlin/ranges/IntRange;` @kind virtual;
  #L137472.  v1:= temp @kind object;
  #L137474.  return v1 @kind object;
  #L137476.  v0:= new `kotlin.ranges.IntRange`;
  #L13747a.  v2:= v2 + -1;
  #L13747e.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L137484.  return v0 @kind object;
}
procedure `kotlin.ranges.IntRange` `until`(`byte` v1 , `short` v2 ) @signature `Lkotlin/ranges/e;.until:(BS)Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L137498.  v0:= new `kotlin.ranges.IntRange`;
  #L13749c.  v2:= v2 + -1;
  #L1374a0.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L1374a6.  return v0 @kind object;
}
procedure `kotlin.ranges.IntRange` `until`(`int` v1 , `byte` v2 ) @signature `Lkotlin/ranges/e;.until:(IB)Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1374b8.  v0:= new `kotlin.ranges.IntRange`;
  #L1374bc.  v2:= v2 + -1;
  #L1374c0.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L1374c6.  return v0 @kind object;
}
procedure `kotlin.ranges.IntRange` `until`(`int` v1 , `int` v2 ) @signature `Lkotlin/ranges/e;.until:(II)Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1374d8.  v0:= -2147483648I;
  #L1374dc.  if v2 > v0 then goto L1374ee;
  #L1374e0.  v1:= `@@kotlin.ranges.IntRange.Companion` @type ^`kotlin.ranges.IntRange$Companion` @kind object;
  #L1374e4.  call temp:= `getEMPTY`(v1) @signature `Lkotlin/ranges/IntRange$Companion;.getEMPTY:()Lkotlin/ranges/IntRange;` @kind virtual;
  #L1374ea.  v1:= temp @kind object;
  #L1374ec.  return v1 @kind object;
  #L1374ee.  v0:= new `kotlin.ranges.IntRange`;
  #L1374f2.  v2:= v2 + -1;
  #L1374f6.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L1374fc.  return v0 @kind object;
}
procedure `kotlin.ranges.IntRange` `until`(`int` v1 , `short` v2 ) @signature `Lkotlin/ranges/e;.until:(IS)Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L137510.  v0:= new `kotlin.ranges.IntRange`;
  #L137514.  v2:= v2 + -1;
  #L137518.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L13751e.  return v0 @kind object;
}
procedure `kotlin.ranges.IntRange` `until`(`short` v1 , `byte` v2 ) @signature `Lkotlin/ranges/e;.until:(SB)Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L137530.  v0:= new `kotlin.ranges.IntRange`;
  #L137534.  v2:= v2 + -1;
  #L137538.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L13753e.  return v0 @kind object;
}
procedure `kotlin.ranges.IntRange` `until`(`short` v1 , `int` v2 ) @signature `Lkotlin/ranges/e;.until:(SI)Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L137550.  v0:= -2147483648I;
  #L137554.  if v2 > v0 then goto L137566;
  #L137558.  v1:= `@@kotlin.ranges.IntRange.Companion` @type ^`kotlin.ranges.IntRange$Companion` @kind object;
  #L13755c.  call temp:= `getEMPTY`(v1) @signature `Lkotlin/ranges/IntRange$Companion;.getEMPTY:()Lkotlin/ranges/IntRange;` @kind virtual;
  #L137562.  v1:= temp @kind object;
  #L137564.  return v1 @kind object;
  #L137566.  v0:= new `kotlin.ranges.IntRange`;
  #L13756a.  v2:= v2 + -1;
  #L13756e.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L137574.  return v0 @kind object;
}
procedure `kotlin.ranges.IntRange` `until`(`short` v1 , `short` v2 ) @signature `Lkotlin/ranges/e;.until:(SS)Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L137588.  v0:= new `kotlin.ranges.IntRange`;
  #L13758c.  v2:= v2 + -1;
  #L137590.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L137596.  return v0 @kind object;
}
procedure `kotlin.ranges.LongRange` `until`(`byte` v4 , `long` v5 ) @signature `Lkotlin/ranges/e;.until:(BJ)Lkotlin/ranges/LongRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L137774.  v0:= -9223372036854775808L;
  #L137778.  v2:= lcmp(v5, v0);
  #L13777c.  if v2 > 0 then goto L13778e;
  #L137780.  v4:= `@@kotlin.ranges.LongRange.Companion` @type ^`kotlin.ranges.LongRange$Companion` @kind object;
  #L137784.  call temp:= `getEMPTY`(v4) @signature `Lkotlin/ranges/LongRange$Companion;.getEMPTY:()Lkotlin/ranges/LongRange;` @kind virtual;
  #L13778a.  v4:= temp @kind object;
  #L13778c.  return v4 @kind object;
  #L13778e.  v0:= (`long`) v4 @kind i2l;
  #L137790.  v4:= new `kotlin.ranges.LongRange`;
  #L137794.  v2:= 1L;
  #L137798.  v5:= v5 - v2 @kind long;
  #L13779a.  call `<init>`(v4, v0, v5) @signature `Lkotlin/ranges/LongRange;.<init>:(JJ)V` @kind direct;
  #L1377a0.  return v4 @kind object;
}
procedure `kotlin.ranges.LongRange` `until`(`int` v4 , `long` v5 ) @signature `Lkotlin/ranges/e;.until:(IJ)Lkotlin/ranges/LongRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1377b4.  v0:= -9223372036854775808L;
  #L1377b8.  v2:= lcmp(v5, v0);
  #L1377bc.  if v2 > 0 then goto L1377ce;
  #L1377c0.  v4:= `@@kotlin.ranges.LongRange.Companion` @type ^`kotlin.ranges.LongRange$Companion` @kind object;
  #L1377c4.  call temp:= `getEMPTY`(v4) @signature `Lkotlin/ranges/LongRange$Companion;.getEMPTY:()Lkotlin/ranges/LongRange;` @kind virtual;
  #L1377ca.  v4:= temp @kind object;
  #L1377cc.  return v4 @kind object;
  #L1377ce.  v0:= (`long`) v4 @kind i2l;
  #L1377d0.  v4:= new `kotlin.ranges.LongRange`;
  #L1377d4.  v2:= 1L;
  #L1377d8.  v5:= v5 - v2 @kind long;
  #L1377da.  call `<init>`(v4, v0, v5) @signature `Lkotlin/ranges/LongRange;.<init>:(JJ)V` @kind direct;
  #L1377e0.  return v4 @kind object;
}
procedure `kotlin.ranges.LongRange` `until`(`long` v5 , `byte` v7 ) @signature `Lkotlin/ranges/e;.until:(JB)Lkotlin/ranges/LongRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1377f4.  v0:= new `kotlin.ranges.LongRange`;
  #L1377f8.  v1:= (`long`) v7 @kind i2l;
  #L1377fa.  v3:= 1L;
  #L1377fe.  v1:= v1 - v3 @kind long;
  #L137800.  call `<init>`(v0, v5, v1) @signature `Lkotlin/ranges/LongRange;.<init>:(JJ)V` @kind direct;
  #L137806.  return v0 @kind object;
}
procedure `kotlin.ranges.LongRange` `until`(`long` v5 , `int` v7 ) @signature `Lkotlin/ranges/e;.until:(JI)Lkotlin/ranges/LongRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L137818.  v0:= new `kotlin.ranges.LongRange`;
  #L13781c.  v1:= (`long`) v7 @kind i2l;
  #L13781e.  v3:= 1L;
  #L137822.  v1:= v1 - v3 @kind long;
  #L137824.  call `<init>`(v0, v5, v1) @signature `Lkotlin/ranges/LongRange;.<init>:(JJ)V` @kind direct;
  #L13782a.  return v0 @kind object;
}
procedure `kotlin.ranges.LongRange` `until`(`long` v3 , `long` v5 ) @signature `Lkotlin/ranges/e;.until:(JJ)Lkotlin/ranges/LongRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13783c.  v0:= -9223372036854775808L;
  #L137840.  v2:= lcmp(v5, v0);
  #L137844.  if v2 > 0 then goto L137856;
  #L137848.  v3:= `@@kotlin.ranges.LongRange.Companion` @type ^`kotlin.ranges.LongRange$Companion` @kind object;
  #L13784c.  call temp:= `getEMPTY`(v3) @signature `Lkotlin/ranges/LongRange$Companion;.getEMPTY:()Lkotlin/ranges/LongRange;` @kind virtual;
  #L137852.  v3:= temp @kind object;
  #L137854.  return v3 @kind object;
  #L137856.  v0:= new `kotlin.ranges.LongRange`;
  #L13785a.  v1:= 1L;
  #L13785e.  v5:= v5 - v1 @kind long;
  #L137860.  call `<init>`(v0, v3, v5) @signature `Lkotlin/ranges/LongRange;.<init>:(JJ)V` @kind direct;
  #L137866.  return v0 @kind object;
}
procedure `kotlin.ranges.LongRange` `until`(`long` v5 , `short` v7 ) @signature `Lkotlin/ranges/e;.until:(JS)Lkotlin/ranges/LongRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L137878.  v0:= new `kotlin.ranges.LongRange`;
  #L13787c.  v1:= (`long`) v7 @kind i2l;
  #L13787e.  v3:= 1L;
  #L137882.  v1:= v1 - v3 @kind long;
  #L137884.  call `<init>`(v0, v5, v1) @signature `Lkotlin/ranges/LongRange;.<init>:(JJ)V` @kind direct;
  #L13788a.  return v0 @kind object;
}
procedure `kotlin.ranges.LongRange` `until`(`short` v4 , `long` v5 ) @signature `Lkotlin/ranges/e;.until:(SJ)Lkotlin/ranges/LongRange;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13789c.  v0:= -9223372036854775808L;
  #L1378a0.  v2:= lcmp(v5, v0);
  #L1378a4.  if v2 > 0 then goto L1378b6;
  #L1378a8.  v4:= `@@kotlin.ranges.LongRange.Companion` @type ^`kotlin.ranges.LongRange$Companion` @kind object;
  #L1378ac.  call temp:= `getEMPTY`(v4) @signature `Lkotlin/ranges/LongRange$Companion;.getEMPTY:()Lkotlin/ranges/LongRange;` @kind virtual;
  #L1378b2.  v4:= temp @kind object;
  #L1378b4.  return v4 @kind object;
  #L1378b6.  v0:= (`long`) v4 @kind i2l;
  #L1378b8.  v4:= new `kotlin.ranges.LongRange`;
  #L1378bc.  v2:= 1L;
  #L1378c0.  v5:= v5 - v2 @kind long;
  #L1378c2.  call `<init>`(v4, v0, v5) @signature `Lkotlin/ranges/LongRange;.<init>:(JJ)V` @kind direct;
  #L1378c8.  return v4 @kind object;
}
