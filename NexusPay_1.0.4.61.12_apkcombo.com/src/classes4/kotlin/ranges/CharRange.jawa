record `kotlin.ranges.CharRange` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.ranges.CharProgression` @kind class, `kotlin.ranges.ClosedRange` @kind interface {
}
global `kotlin.ranges.CharRange$Companion` `@@kotlin.ranges.CharRange.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.ranges.CharRange` `@@kotlin.ranges.CharRange.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/CharRange;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L134ad4.  v0:= new `kotlin.ranges.CharRange$Companion`;
  #L134ad8.  v1:= 0I;
  #L134ada.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/CharRange$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L134ae0.  `@@kotlin.ranges.CharRange.Companion` @type ^`kotlin.ranges.CharRange$Companion` := v0 @kind object;
  #L134ae4.  v0:= new `kotlin.ranges.CharRange`;
  #L134ae8.  v1:= 1I;
  #L134aea.  v1:= (`char`) v1 @kind i2c;
  #L134aec.  v2:= 0I;
  #L134aee.  v2:= (`char`) v2 @kind i2c;
  #L134af0.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/CharRange;.<init>:(CC)V` @kind direct;
  #L134af6.  `@@kotlin.ranges.CharRange.d` @type ^`kotlin.ranges.CharRange` := v0 @kind object;
  #L134afa.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.CharRange` v1 @kind this, `char` v2 , `char` v3 ) @signature `Lkotlin/ranges/CharRange;.<init>:(CC)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L134b0c.  v0:= 1I;
  #L134b0e.  call `<init>`(v1, v2, v3, v0) @signature `Lkotlin/ranges/CharProgression;.<init>:(CCI)V` @kind direct;
  #L134b14.  return @kind void;
}
procedure `kotlin.ranges.CharRange` `access$getEMPTY$cp`() @signature `Lkotlin/ranges/CharRange;.access$getEMPTY$cp:()Lkotlin/ranges/CharRange;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L134abc.  v0:= `@@kotlin.ranges.CharRange.d` @type ^`kotlin.ranges.CharRange` @kind object;
  #L134ac0.  return v0 @kind object;
}
procedure `boolean` `contains`(`kotlin.ranges.CharRange` v1 @kind this, `char` v2 ) @signature `Lkotlin/ranges/CharRange;.contains:(C)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1348b0.  call temp:= `getFirst`(v1) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L1348b6.  v0:= temp;
  #L1348b8.  call temp:= `compare`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L1348be.  v0:= temp;
  #L1348c0.  if v0 > 0 then goto L1348dc;
  #L1348c4.  call temp:= `getLast`(v1) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L1348ca.  v0:= temp;
  #L1348cc.  call temp:= `compare`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L1348d2.  v2:= temp;
  #L1348d4.  if v2 > 0 then goto L1348dc;
  #L1348d8.  v2:= 1I;
  #L1348da.  goto L1348de;
  #L1348dc.  v2:= 0I;
  #L1348de.  return v2;
}
procedure `boolean` `contains`(`kotlin.ranges.CharRange` v0 @kind this, `java.lang.Comparable` v1 @kind object) @signature `Lkotlin/ranges/CharRange;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1348f0.  v1:= (`java.lang.Character`) v1 @kind object;
  #L1348f4.  call temp:= `charValue`(v1) @signature `Ljava/lang/Character;.charValue:()C` @kind virtual;
  #L1348fa.  v1:= temp;
  #L1348fc.  call temp:= `contains`(v0, v1) @signature `Lkotlin/ranges/CharRange;.contains:(C)Z` @kind virtual;
  #L134902.  v1:= temp;
  #L134904.  return v1;
}
procedure `boolean` `equals`(`kotlin.ranges.CharRange` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ranges/CharRange;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L134918.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.CharRange` @kind boolean;
  #L13491c.  if v0 == 0 then goto L13496e;
  #L134920.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/CharRange;.isEmpty:()Z` @kind virtual;
  #L134926.  v0:= temp;
  #L134928.  if v0 == 0 then goto L13493e;
  #L13492c.  v0:= v3 @kind object;
  #L13492e.  v0:= (`kotlin.ranges.CharRange`) v0 @kind object;
  #L134932.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/CharRange;.isEmpty:()Z` @kind virtual;
  #L134938.  v0:= temp;
  #L13493a.  if v0 != 0 then goto L13496a;
  #L13493e.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L134944.  v0:= temp;
  #L134946.  v3:= (`kotlin.ranges.CharRange`) v3 @kind object;
  #L13494a.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L134950.  v1:= temp;
  #L134952.  if v0 != v1 then goto L13496e;
  #L134956.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L13495c.  v0:= temp;
  #L13495e.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L134964.  v3:= temp;
  #L134966.  if v0 != v3 then goto L13496e;
  #L13496a.  v3:= 1I;
  #L13496c.  goto L134970;
  #L13496e.  v3:= 0I;
  #L134970.  return v3;
}
procedure `java.lang.Character` `getEndInclusive`(`kotlin.ranges.CharRange` v1 @kind this) @signature `Lkotlin/ranges/CharRange;.getEndInclusive:()Ljava/lang/Character;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1349f0.  call temp:= `getLast`(v1) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L1349f6.  v0:= temp;
  #L1349f8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L1349fe.  v0:= temp @kind object;
  #L134a00.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.CharRange` v1 @kind this) @signature `Lkotlin/ranges/CharRange;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L134a38.  call temp:= `getEndInclusive`(v1) @signature `Lkotlin/ranges/CharRange;.getEndInclusive:()Ljava/lang/Character;` @kind virtual;
  #L134a3e.  v0:= temp @kind object;
  #L134a40.  return v0 @kind object;
}
procedure `java.lang.Character` `getStart`(`kotlin.ranges.CharRange` v1 @kind this) @signature `Lkotlin/ranges/CharRange;.getStart:()Ljava/lang/Character;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L134a14.  call temp:= `getFirst`(v1) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L134a1a.  v0:= temp;
  #L134a1c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L134a22.  v0:= temp @kind object;
  #L134a24.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.CharRange` v1 @kind this) @signature `Lkotlin/ranges/CharRange;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L134a54.  call temp:= `getStart`(v1) @signature `Lkotlin/ranges/CharRange;.getStart:()Ljava/lang/Character;` @kind virtual;
  #L134a5a.  v0:= temp @kind object;
  #L134a5c.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.CharRange` v2 @kind this) @signature `Lkotlin/ranges/CharRange;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1349b8.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/CharRange;.isEmpty:()Z` @kind virtual;
  #L1349be.  v0:= temp;
  #L1349c0.  if v0 == 0 then goto L1349c8;
  #L1349c4.  v0:= -1I;
  #L1349c6.  goto L1349de;
  #L1349c8.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L1349ce.  v0:= temp;
  #L1349d0.  v0:= v0 * 31;
  #L1349d4.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L1349da.  v1:= temp;
  #L1349dc.  v0:= v0 + v1 @kind int;
  #L1349de.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.CharRange` v2 @kind this) @signature `Lkotlin/ranges/CharRange;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L134984.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L13498a.  v0:= temp;
  #L13498c.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L134992.  v1:= temp;
  #L134994.  call temp:= `compare`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L13499a.  v0:= temp;
  #L13499c.  if v0 <= 0 then goto L1349a4;
  #L1349a0.  v0:= 1I;
  #L1349a2.  goto L1349a6;
  #L1349a4.  v0:= 0I;
  #L1349a6.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.CharRange` v2 @kind this) @signature `Lkotlin/ranges/CharRange;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L134a70.  v0:= new `java.lang.StringBuilder`;
  #L134a74.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L134a7a.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/CharProgression;.getFirst:()C` @kind virtual;
  #L134a80.  v1:= temp;
  #L134a82.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L134a88.  v1:= ".." @kind object;
  #L134a8c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134a92.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/CharProgression;.getLast:()C` @kind virtual;
  #L134a98.  v1:= temp;
  #L134a9a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L134aa0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L134aa6.  v0:= temp @kind object;
  #L134aa8.  return v0 @kind object;
}
