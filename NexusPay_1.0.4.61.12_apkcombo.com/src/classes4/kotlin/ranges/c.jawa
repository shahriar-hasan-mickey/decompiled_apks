record `kotlin.ranges.c` @kind class @AccessFlag  extends `kotlin.ranges.ClosedRange` @kind interface {
  `java.lang.Comparable` `kotlin.ranges.c.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Comparable` `kotlin.ranges.c.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.c` v1 @kind this, `java.lang.Comparable` v2 @kind object, `java.lang.Comparable` v3 @kind object) @signature `Lkotlin/ranges/c;.<init>:(Ljava/lang/Comparable;Ljava/lang/Comparable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L13526c.  v0:= "start" @kind object;
  #L135270.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L135276.  v0:= "endInclusive" @kind object;
  #L13527a.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L135280.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L135286.  v1.`kotlin.ranges.c.a` @type ^`java.lang.Comparable` := v2 @kind object;
  #L13528a.  v1.`kotlin.ranges.c.b` @type ^`java.lang.Comparable` := v3 @kind object;
  #L13528e.  return @kind void;
}
procedure `boolean` `contains`(`kotlin.ranges.c` v1 @kind this, `java.lang.Comparable` v2 @kind object) @signature `Lkotlin/ranges/c;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1350ec.  v0:= "value" @kind object;
  #L1350f0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1350f6.  call temp:= `contains`(v1, v2) @signature `Lkotlin/ranges/ClosedRange$DefaultImpls;.contains:(Lkotlin/ranges/ClosedRange;Ljava/lang/Comparable;)Z` @kind static;
  #L1350fc.  v2:= temp;
  #L1350fe.  return v2;
}
procedure `boolean` `equals`(`kotlin.ranges.c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ranges/c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L135110.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.c` @kind boolean;
  #L135114.  if v0 == 0 then goto L135176;
  #L135118.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/c;.isEmpty:()Z` @kind virtual;
  #L13511e.  v0:= temp;
  #L135120.  if v0 == 0 then goto L135136;
  #L135124.  v0:= v3 @kind object;
  #L135126.  v0:= (`kotlin.ranges.c`) v0 @kind object;
  #L13512a.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/c;.isEmpty:()Z` @kind virtual;
  #L135130.  v0:= temp;
  #L135132.  if v0 != 0 then goto L135172;
  #L135136.  call temp:= `getStart`(v2) @signature `Lkotlin/ranges/c;.getStart:()Ljava/lang/Comparable;` @kind virtual;
  #L13513c.  v0:= temp @kind object;
  #L13513e.  v3:= (`kotlin.ranges.c`) v3 @kind object;
  #L135142.  call temp:= `getStart`(v3) @signature `Lkotlin/ranges/c;.getStart:()Ljava/lang/Comparable;` @kind virtual;
  #L135148.  v1:= temp @kind object;
  #L13514a.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L135150.  v0:= temp;
  #L135152.  if v0 == 0 then goto L135176;
  #L135156.  call temp:= `getEndInclusive`(v2) @signature `Lkotlin/ranges/c;.getEndInclusive:()Ljava/lang/Comparable;` @kind virtual;
  #L13515c.  v0:= temp @kind object;
  #L13515e.  call temp:= `getEndInclusive`(v3) @signature `Lkotlin/ranges/c;.getEndInclusive:()Ljava/lang/Comparable;` @kind virtual;
  #L135164.  v3:= temp @kind object;
  #L135166.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L13516c.  v3:= temp;
  #L13516e.  if v3 == 0 then goto L135176;
  #L135172.  v3:= 1I;
  #L135174.  goto L135178;
  #L135176.  v3:= 0I;
  #L135178.  return v3;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.c` v1 @kind this) @signature `Lkotlin/ranges/c;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1351f0.  v0:= v1.`kotlin.ranges.c.b` @type ^`java.lang.Comparable` @kind object;
  #L1351f4.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.c` v1 @kind this) @signature `Lkotlin/ranges/c;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L135208.  v0:= v1.`kotlin.ranges.c.a` @type ^`java.lang.Comparable` @kind object;
  #L13520c.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.c` v2 @kind this) @signature `Lkotlin/ranges/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1351a8.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/c;.isEmpty:()Z` @kind virtual;
  #L1351ae.  v0:= temp;
  #L1351b0.  if v0 == 0 then goto L1351b8;
  #L1351b4.  v0:= -1I;
  #L1351b6.  goto L1351de;
  #L1351b8.  call temp:= `getStart`(v2) @signature `Lkotlin/ranges/c;.getStart:()Ljava/lang/Comparable;` @kind virtual;
  #L1351be.  v0:= temp @kind object;
  #L1351c0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1351c6.  v0:= temp;
  #L1351c8.  v0:= v0 * 31;
  #L1351cc.  call temp:= `getEndInclusive`(v2) @signature `Lkotlin/ranges/c;.getEndInclusive:()Ljava/lang/Comparable;` @kind virtual;
  #L1351d2.  v1:= temp @kind object;
  #L1351d4.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1351da.  v1:= temp;
  #L1351dc.  v0:= v0 + v1 @kind int;
  #L1351de.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.c` v1 @kind this) @signature `Lkotlin/ranges/c;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13518c.  call temp:= `isEmpty`(v1) @signature `Lkotlin/ranges/ClosedRange$DefaultImpls;.isEmpty:(Lkotlin/ranges/ClosedRange;)Z` @kind static;
  #L135192.  v0:= temp;
  #L135194.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.c` v2 @kind this) @signature `Lkotlin/ranges/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L135220.  v0:= new `java.lang.StringBuilder`;
  #L135224.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13522a.  call temp:= `getStart`(v2) @signature `Lkotlin/ranges/c;.getStart:()Ljava/lang/Comparable;` @kind virtual;
  #L135230.  v1:= temp @kind object;
  #L135232.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L135238.  v1:= ".." @kind object;
  #L13523c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L135242.  call temp:= `getEndInclusive`(v2) @signature `Lkotlin/ranges/c;.getEndInclusive:()Ljava/lang/Comparable;` @kind virtual;
  #L135248.  v1:= temp @kind object;
  #L13524a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L135250.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L135256.  v0:= temp @kind object;
  #L135258.  return v0 @kind object;
}
