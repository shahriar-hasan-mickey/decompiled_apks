record `kotlin.ranges.RangesKt` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.ranges.e` @kind class {
}
procedure `void` `<init>`(`kotlin.ranges.RangesKt` v0 @kind this) @signature `Lkotlin/ranges/RangesKt;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L137cb4.  call `<init>`(v0) @signature `Lkotlin/ranges/e;.<init>:()V` @kind direct;
  #L137cba.  return @kind void;
}
procedure `int` `coerceAtLeast`(`int` v0 , `int` v1 ) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L137b9c.  call temp:= `coerceAtLeast`(v0, v1) @signature `Lkotlin/ranges/e;.coerceAtLeast:(II)I` @kind static;
  #L137ba2.  v0:= temp;
  #L137ba4.  return v0;
}
procedure `long` `coerceAtLeast`(`long` v0 , `long` v2 ) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(JJ)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L137c44.  call temp:= `coerceAtLeast`(v0, v2) @signature `Lkotlin/ranges/e;.coerceAtLeast:(JJ)J` @kind static;
  #L137c4a.  v0:= temp @kind wide;
  #L137c4c.  return v0 @kind wide;
}
procedure `float` `coerceAtMost`(`float` v0 , `float` v1 ) @signature `Lkotlin/ranges/RangesKt;.coerceAtMost:(FF)F` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L137b80.  call temp:= `coerceAtMost`(v0, v1) @signature `Lkotlin/ranges/e;.coerceAtMost:(FF)F` @kind static;
  #L137b86.  v0:= temp;
  #L137b88.  return v0;
}
procedure `int` `coerceAtMost`(`int` v0 , `int` v1 ) @signature `Lkotlin/ranges/RangesKt;.coerceAtMost:(II)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L137bb8.  call temp:= `coerceAtMost`(v0, v1) @signature `Lkotlin/ranges/e;.coerceAtMost:(II)I` @kind static;
  #L137bbe.  v0:= temp;
  #L137bc0.  return v0;
}
procedure `long` `coerceAtMost`(`long` v0 , `long` v2 ) @signature `Lkotlin/ranges/RangesKt;.coerceAtMost:(JJ)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L137c60.  call temp:= `coerceAtMost`(v0, v2) @signature `Lkotlin/ranges/e;.coerceAtMost:(JJ)J` @kind static;
  #L137c66.  v0:= temp @kind wide;
  #L137c68.  return v0 @kind wide;
}
procedure `int` `coerceIn`(`int` v0 , `int` v1 , `int` v2 ) @signature `Lkotlin/ranges/RangesKt;.coerceIn:(III)I` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L137bd4.  call temp:= `coerceIn`(v0, v1, v2) @signature `Lkotlin/ranges/e;.coerceIn:(III)I` @kind static;
  #L137bda.  v0:= temp;
  #L137bdc.  return v0;
}
procedure `long` `coerceIn`(`long` v0 , `long` v2 , `long` v4 ) @signature `Lkotlin/ranges/RangesKt;.coerceIn:(JJJ)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L137c98.  call temp:= `coerceIn`(v0, v2, v4) @signature `Lkotlin/ranges/e;.coerceIn:(JJJ)J` @kind static;
  #L137c9e.  v0:= temp @kind wide;
  #L137ca0.  return v0 @kind wide;
}
procedure `long` `coerceIn`(`long` v0 , `kotlin.ranges.ClosedRange` v2 @kind object) @signature `Lkotlin/ranges/RangesKt;.coerceIn:(JLkotlin/ranges/ClosedRange;)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L137c7c.  call temp:= `coerceIn`(v0, v2) @signature `Lkotlin/ranges/e;.coerceIn:(JLkotlin/ranges/ClosedRange;)J` @kind static;
  #L137c82.  v0:= temp @kind wide;
  #L137c84.  return v0 @kind wide;
}
procedure `kotlin.ranges.IntProgression` `downTo`(`int` v0 , `int` v1 ) @signature `Lkotlin/ranges/RangesKt;.downTo:(II)Lkotlin/ranges/IntProgression;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L137bf0.  call temp:= `downTo`(v0, v1) @signature `Lkotlin/ranges/e;.downTo:(II)Lkotlin/ranges/IntProgression;` @kind static;
  #L137bf6.  v0:= temp @kind object;
  #L137bf8.  return v0 @kind object;
}
procedure `kotlin.ranges.IntProgression` `step`(`kotlin.ranges.IntProgression` v0 @kind object, `int` v1 ) @signature `Lkotlin/ranges/RangesKt;.step:(Lkotlin/ranges/IntProgression;I)Lkotlin/ranges/IntProgression;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L137c0c.  call temp:= `step`(v0, v1) @signature `Lkotlin/ranges/e;.step:(Lkotlin/ranges/IntProgression;I)Lkotlin/ranges/IntProgression;` @kind static;
  #L137c12.  v0:= temp @kind object;
  #L137c14.  return v0 @kind object;
}
procedure `kotlin.ranges.IntRange` `until`(`int` v0 , `int` v1 ) @signature `Lkotlin/ranges/RangesKt;.until:(II)Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L137c28.  call temp:= `until`(v0, v1) @signature `Lkotlin/ranges/e;.until:(II)Lkotlin/ranges/IntRange;` @kind static;
  #L137c2e.  v0:= temp @kind object;
  #L137c30.  return v0 @kind object;
}
