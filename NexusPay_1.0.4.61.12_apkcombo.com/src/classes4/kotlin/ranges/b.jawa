record `kotlin.ranges.b` @kind class @AccessFlag FINAL extends `kotlin.ranges.ClosedFloatingPointRange` @kind interface {
  `float` `kotlin.ranges.b.a` @AccessFlag PRIVATE_FINAL;
  `float` `kotlin.ranges.b.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.b` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lkotlin/ranges/b;.<init>:(FF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L134fd0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L134fd6.  v0.`kotlin.ranges.b.a` @type ^`float` := v1;
  #L134fda.  v0.`kotlin.ranges.b.b` @type ^`float` := v2;
  #L134fde.  return @kind void;
}
procedure `boolean` `a`(`kotlin.ranges.b` v1 @kind this, `float` v2 ) @signature `Lkotlin/ranges/b;.a:(F)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L134d8c.  v0:= v1.`kotlin.ranges.b.a` @type ^`float`;
  #L134d90.  v0:= fcmpl(v2, v0);
  #L134d94.  if v0 < 0 then goto L134da8;
  #L134d98.  v0:= v1.`kotlin.ranges.b.b` @type ^`float`;
  #L134d9c.  v2:= fcmpg(v2, v0);
  #L134da0.  if v2 > 0 then goto L134da8;
  #L134da4.  v2:= 1I;
  #L134da6.  goto L134daa;
  #L134da8.  v2:= 0I;
  #L134daa.  return v2;
}
procedure `java.lang.Float` `b`(`kotlin.ranges.b` v1 @kind this) @signature `Lkotlin/ranges/b;.b:()Ljava/lang/Float;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L134f4c.  v0:= v1.`kotlin.ranges.b.b` @type ^`float`;
  #L134f50.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L134f56.  v0:= temp @kind object;
  #L134f58.  return v0 @kind object;
}
procedure `java.lang.Float` `c`(`kotlin.ranges.b` v1 @kind this) @signature `Lkotlin/ranges/b;.c:()Ljava/lang/Float;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L134f6c.  v0:= v1.`kotlin.ranges.b.a` @type ^`float`;
  #L134f70.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L134f76.  v0:= temp @kind object;
  #L134f78.  return v0 @kind object;
}
procedure `boolean` `contains`(`kotlin.ranges.b` v0 @kind this, `java.lang.Comparable` v1 @kind object) @signature `Lkotlin/ranges/b;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L134dbc.  v1:= (`java.lang.Number`) v1 @kind object;
  #L134dc0.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L134dc6.  v1:= temp;
  #L134dc8.  call temp:= `a`(v0, v1) @signature `Lkotlin/ranges/b;.a:(F)Z` @kind virtual;
  #L134dce.  v1:= temp;
  #L134dd0.  return v1;
}
procedure `boolean` `d`(`kotlin.ranges.b` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lkotlin/ranges/b;.d:(FF)Z` @AccessFlag PUBLIC {
    temp;

  #L134e70.  v1:= fcmpg(v1, v2);
  #L134e74.  if v1 > 0 then goto L134e7c;
  #L134e78.  v1:= 1I;
  #L134e7a.  goto L134e7e;
  #L134e7c.  v1:= 0I;
  #L134e7e.  return v1;
}
procedure `boolean` `equals`(`kotlin.ranges.b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ranges/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L134de4.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.b` @kind boolean;
  #L134de8.  if v0 == 0 then goto L134e32;
  #L134dec.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/b;.isEmpty:()Z` @kind virtual;
  #L134df2.  v0:= temp;
  #L134df4.  if v0 == 0 then goto L134e0a;
  #L134df8.  v0:= v3 @kind object;
  #L134dfa.  v0:= (`kotlin.ranges.b`) v0 @kind object;
  #L134dfe.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/b;.isEmpty:()Z` @kind virtual;
  #L134e04.  v0:= temp;
  #L134e06.  if v0 != 0 then goto L134e2e;
  #L134e0a.  v0:= v2.`kotlin.ranges.b.a` @type ^`float`;
  #L134e0e.  v3:= (`kotlin.ranges.b`) v3 @kind object;
  #L134e12.  v1:= v3.`kotlin.ranges.b.a` @type ^`float`;
  #L134e16.  v0:= fcmpg(v0, v1);
  #L134e1a.  if v0 != 0 then goto L134e32;
  #L134e1e.  v0:= v2.`kotlin.ranges.b.b` @type ^`float`;
  #L134e22.  v3:= v3.`kotlin.ranges.b.b` @type ^`float`;
  #L134e26.  v3:= fcmpg(v0, v3);
  #L134e2a.  if v3 != 0 then goto L134e32;
  #L134e2e.  v3:= 1I;
  #L134e30.  goto L134e34;
  #L134e32.  v3:= 0I;
  #L134e34.  return v3;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.b` v1 @kind this) @signature `Lkotlin/ranges/b;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L134f14.  call temp:= `b`(v1) @signature `Lkotlin/ranges/b;.b:()Ljava/lang/Float;` @kind virtual;
  #L134f1a.  v0:= temp @kind object;
  #L134f1c.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.b` v1 @kind this) @signature `Lkotlin/ranges/b;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L134f30.  call temp:= `c`(v1) @signature `Lkotlin/ranges/b;.c:()Ljava/lang/Float;` @kind virtual;
  #L134f36.  v0:= temp @kind object;
  #L134f38.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.b` v2 @kind this) @signature `Lkotlin/ranges/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L134ec4.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/b;.isEmpty:()Z` @kind virtual;
  #L134eca.  v0:= temp;
  #L134ecc.  if v0 == 0 then goto L134ed4;
  #L134ed0.  v0:= -1I;
  #L134ed2.  goto L134f02;
  #L134ed4.  v0:= v2.`kotlin.ranges.b.a` @type ^`float`;
  #L134ed8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L134ede.  v0:= temp @kind object;
  #L134ee0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L134ee6.  v0:= temp;
  #L134ee8.  v0:= v0 * 31;
  #L134eec.  v1:= v2.`kotlin.ranges.b.b` @type ^`float`;
  #L134ef0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L134ef6.  v1:= temp @kind object;
  #L134ef8.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L134efe.  v1:= temp;
  #L134f00.  v0:= v0 + v1 @kind int;
  #L134f02.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.b` v2 @kind this) @signature `Lkotlin/ranges/b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L134e48.  v0:= v2.`kotlin.ranges.b.a` @type ^`float`;
  #L134e4c.  v1:= v2.`kotlin.ranges.b.b` @type ^`float`;
  #L134e50.  v0:= fcmpg(v0, v1);
  #L134e54.  if v0 <= 0 then goto L134e5c;
  #L134e58.  v0:= 1I;
  #L134e5a.  goto L134e5e;
  #L134e5c.  v0:= 0I;
  #L134e5e.  return v0;
}
procedure `boolean` `lessThanOrEquals`(`kotlin.ranges.b` v0 @kind this, `java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lkotlin/ranges/b;.lessThanOrEquals:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L134e90.  v1:= (`java.lang.Number`) v1 @kind object;
  #L134e94.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L134e9a.  v1:= temp;
  #L134e9c.  v2:= (`java.lang.Number`) v2 @kind object;
  #L134ea0.  call temp:= `floatValue`(v2) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L134ea6.  v2:= temp;
  #L134ea8.  call temp:= `d`(v0, v1, v2) @signature `Lkotlin/ranges/b;.d:(FF)Z` @kind virtual;
  #L134eae.  v1:= temp;
  #L134eb0.  return v1;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.b` v2 @kind this) @signature `Lkotlin/ranges/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L134f8c.  v0:= new `java.lang.StringBuilder`;
  #L134f90.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L134f96.  v1:= v2.`kotlin.ranges.b.a` @type ^`float`;
  #L134f9a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L134fa0.  v1:= ".." @kind object;
  #L134fa4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134faa.  v1:= v2.`kotlin.ranges.b.b` @type ^`float`;
  #L134fae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L134fb4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L134fba.  v0:= temp @kind object;
  #L134fbc.  return v0 @kind object;
}
