record `kotlin.ranges.LongRange` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.ranges.LongProgression` @kind class, `kotlin.ranges.ClosedRange` @kind interface {
}
global `kotlin.ranges.LongRange$Companion` `@@kotlin.ranges.LongRange.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.ranges.LongRange` `@@kotlin.ranges.LongRange.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/LongRange;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L135f3c.  v0:= new `kotlin.ranges.LongRange$Companion`;
  #L135f40.  v1:= 0I;
  #L135f42.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/LongRange$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L135f48.  `@@kotlin.ranges.LongRange.Companion` @type ^`kotlin.ranges.LongRange$Companion` := v0 @kind object;
  #L135f4c.  v0:= new `kotlin.ranges.LongRange`;
  #L135f50.  v1:= 1L;
  #L135f54.  v3:= 0L;
  #L135f58.  call `<init>`(v0, v1, v3) @signature `Lkotlin/ranges/LongRange;.<init>:(JJ)V` @kind direct;
  #L135f5e.  `@@kotlin.ranges.LongRange.d` @type ^`kotlin.ranges.LongRange` := v0 @kind object;
  #L135f62.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.LongRange` v7 @kind this, `long` v8 , `long` v10 ) @signature `Lkotlin/ranges/LongRange;.<init>:(JJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L135f74.  v5:= 1L;
  #L135f78.  v0:= v7 @kind object;
  #L135f7a.  v1:= v8 @kind wide;
  #L135f7c.  v3:= v10 @kind wide;
  #L135f7e.  call `<init>`(v0, v1, v3, v5) @signature `Lkotlin/ranges/LongProgression;.<init>:(JJJ)V` @kind direct;
  #L135f84.  return @kind void;
}
procedure `kotlin.ranges.LongRange` `access$getEMPTY$cp`() @signature `Lkotlin/ranges/LongRange;.access$getEMPTY$cp:()Lkotlin/ranges/LongRange;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L135f24.  v0:= `@@kotlin.ranges.LongRange.d` @type ^`kotlin.ranges.LongRange` @kind object;
  #L135f28.  return v0 @kind object;
}
procedure `boolean` `contains`(`kotlin.ranges.LongRange` v3 @kind this, `long` v4 ) @signature `Lkotlin/ranges/LongRange;.contains:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L135d20.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L135d26.  v0:= temp @kind wide;
  #L135d28.  v2:= lcmp(v0, v4);
  #L135d2c.  if v2 > 0 then goto L135d44;
  #L135d30.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L135d36.  v0:= temp @kind wide;
  #L135d38.  v2:= lcmp(v4, v0);
  #L135d3c.  if v2 > 0 then goto L135d44;
  #L135d40.  v4:= 1I;
  #L135d42.  goto L135d46;
  #L135d44.  v4:= 0I;
  #L135d46.  return v4;
}
procedure `boolean` `contains`(`kotlin.ranges.LongRange` v2 @kind this, `java.lang.Comparable` v3 @kind object) @signature `Lkotlin/ranges/LongRange;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L135cf8.  v3:= (`java.lang.Number`) v3 @kind object;
  #L135cfc.  call temp:= `longValue`(v3) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L135d02.  v0:= temp @kind wide;
  #L135d04.  call temp:= `contains`(v2, v0) @signature `Lkotlin/ranges/LongRange;.contains:(J)Z` @kind virtual;
  #L135d0a.  v3:= temp;
  #L135d0c.  return v3;
}
procedure `boolean` `equals`(`kotlin.ranges.LongRange` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlin/ranges/LongRange;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L135d58.  v0:= instanceof @variable v6 @type ^`kotlin.ranges.LongRange` @kind boolean;
  #L135d5c.  if v0 == 0 then goto L135db6;
  #L135d60.  call temp:= `isEmpty`(v5) @signature `Lkotlin/ranges/LongRange;.isEmpty:()Z` @kind virtual;
  #L135d66.  v0:= temp;
  #L135d68.  if v0 == 0 then goto L135d7e;
  #L135d6c.  v0:= v6 @kind object;
  #L135d6e.  v0:= (`kotlin.ranges.LongRange`) v0 @kind object;
  #L135d72.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/LongRange;.isEmpty:()Z` @kind virtual;
  #L135d78.  v0:= temp;
  #L135d7a.  if v0 != 0 then goto L135db2;
  #L135d7e.  call temp:= `getFirst`(v5) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L135d84.  v0:= temp @kind wide;
  #L135d86.  v6:= (`kotlin.ranges.LongRange`) v6 @kind object;
  #L135d8a.  call temp:= `getFirst`(v6) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L135d90.  v2:= temp @kind wide;
  #L135d92.  v4:= lcmp(v0, v2);
  #L135d96.  if v4 != 0 then goto L135db6;
  #L135d9a.  call temp:= `getLast`(v5) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L135da0.  v0:= temp @kind wide;
  #L135da2.  call temp:= `getLast`(v6) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L135da8.  v2:= temp @kind wide;
  #L135daa.  v6:= lcmp(v0, v2);
  #L135dae.  if v6 != 0 then goto L135db6;
  #L135db2.  v6:= 1I;
  #L135db4.  goto L135db8;
  #L135db6.  v6:= 0I;
  #L135db8.  return v6;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.LongRange` v1 @kind this) @signature `Lkotlin/ranges/LongRange;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L135e58.  call temp:= `getEndInclusive`(v1) @signature `Lkotlin/ranges/LongRange;.getEndInclusive:()Ljava/lang/Long;` @kind virtual;
  #L135e5e.  v0:= temp @kind object;
  #L135e60.  return v0 @kind object;
}
procedure `java.lang.Long` `getEndInclusive`(`kotlin.ranges.LongRange` v2 @kind this) @signature `Lkotlin/ranges/LongRange;.getEndInclusive:()Ljava/lang/Long;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L135e90.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L135e96.  v0:= temp @kind wide;
  #L135e98.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L135e9e.  v0:= temp @kind object;
  #L135ea0.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.LongRange` v1 @kind this) @signature `Lkotlin/ranges/LongRange;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L135e74.  call temp:= `getStart`(v1) @signature `Lkotlin/ranges/LongRange;.getStart:()Ljava/lang/Long;` @kind virtual;
  #L135e7a.  v0:= temp @kind object;
  #L135e7c.  return v0 @kind object;
}
procedure `java.lang.Long` `getStart`(`kotlin.ranges.LongRange` v2 @kind this) @signature `Lkotlin/ranges/LongRange;.getStart:()Ljava/lang/Long;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L135eb4.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L135eba.  v0:= temp @kind wide;
  #L135ebc.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L135ec2.  v0:= temp @kind object;
  #L135ec4.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.LongRange` v7 @kind this) @signature `Lkotlin/ranges/LongRange;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L135dfc.  call temp:= `isEmpty`(v7) @signature `Lkotlin/ranges/LongRange;.isEmpty:()Z` @kind virtual;
  #L135e02.  v0:= temp;
  #L135e04.  if v0 == 0 then goto L135e0c;
  #L135e08.  v0:= -1I;
  #L135e0a.  goto L135e46;
  #L135e0c.  v0:= 31I;
  #L135e10.  v0:= (`long`) v0 @kind i2l;
  #L135e12.  call temp:= `getFirst`(v7) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L135e18.  v2:= temp @kind wide;
  #L135e1a.  call temp:= `getFirst`(v7) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L135e20.  v4:= temp @kind wide;
  #L135e22.  v6:= 32I;
  #L135e26.  v4:= v4 ^>> v6 @kind long;
  #L135e28.  v2:= v2 ^~ v4 @kind long;
  #L135e2a.  v0:= v0 * v2 @kind long;
  #L135e2e.  call temp:= `getLast`(v7) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L135e34.  v2:= temp @kind wide;
  #L135e36.  call temp:= `getLast`(v7) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L135e3c.  v4:= temp @kind wide;
  #L135e3e.  v4:= v4 ^>> v6 @kind long;
  #L135e40.  v2:= v2 ^~ v4 @kind long;
  #L135e42.  v0:= v0 + v2 @kind long;
  #L135e44.  v0:= (`int`) v0 @kind l2i;
  #L135e46.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.LongRange` v5 @kind this) @signature `Lkotlin/ranges/LongRange;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L135dcc.  call temp:= `getFirst`(v5) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L135dd2.  v0:= temp @kind wide;
  #L135dd4.  call temp:= `getLast`(v5) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L135dda.  v2:= temp @kind wide;
  #L135ddc.  v4:= lcmp(v0, v2);
  #L135de0.  if v4 <= 0 then goto L135de8;
  #L135de4.  v0:= 1I;
  #L135de6.  goto L135dea;
  #L135de8.  v0:= 0I;
  #L135dea.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.LongRange` v3 @kind this) @signature `Lkotlin/ranges/LongRange;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L135ed8.  v0:= new `java.lang.StringBuilder`;
  #L135edc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L135ee2.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L135ee8.  v1:= temp @kind wide;
  #L135eea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L135ef0.  v1:= ".." @kind object;
  #L135ef4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L135efa.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L135f00.  v1:= temp @kind wide;
  #L135f02.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L135f08.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L135f0e.  v0:= temp @kind object;
  #L135f10.  return v0 @kind object;
}
