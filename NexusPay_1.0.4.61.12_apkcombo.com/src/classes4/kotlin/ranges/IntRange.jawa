record `kotlin.ranges.IntRange` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.ranges.IntProgression` @kind class, `kotlin.ranges.ClosedRange` @kind interface {
}
global `kotlin.ranges.IntRange$Companion` `@@kotlin.ranges.IntRange.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.ranges.IntRange` `@@kotlin.ranges.IntRange.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/IntRange;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L13587c.  v0:= new `kotlin.ranges.IntRange$Companion`;
  #L135880.  v1:= 0I;
  #L135882.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/IntRange$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L135888.  `@@kotlin.ranges.IntRange.Companion` @type ^`kotlin.ranges.IntRange$Companion` := v0 @kind object;
  #L13588c.  v0:= new `kotlin.ranges.IntRange`;
  #L135890.  v1:= 1I;
  #L135892.  v2:= 0I;
  #L135894.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L13589a.  `@@kotlin.ranges.IntRange.d` @type ^`kotlin.ranges.IntRange` := v0 @kind object;
  #L13589e.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.IntRange` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1358b0.  v0:= 1I;
  #L1358b2.  call `<init>`(v1, v2, v3, v0) @signature `Lkotlin/ranges/IntProgression;.<init>:(III)V` @kind direct;
  #L1358b8.  return @kind void;
}
procedure `kotlin.ranges.IntRange` `access$getEMPTY$cp`() @signature `Lkotlin/ranges/IntRange;.access$getEMPTY$cp:()Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L135864.  v0:= `@@kotlin.ranges.IntRange.d` @type ^`kotlin.ranges.IntRange` @kind object;
  #L135868.  return v0 @kind object;
}
procedure `boolean` `contains`(`kotlin.ranges.IntRange` v1 @kind this, `int` v2 ) @signature `Lkotlin/ranges/IntRange;.contains:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L135670.  call temp:= `getFirst`(v1) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L135676.  v0:= temp;
  #L135678.  if v0 > v2 then goto L13568c;
  #L13567c.  call temp:= `getLast`(v1) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L135682.  v0:= temp;
  #L135684.  if v2 > v0 then goto L13568c;
  #L135688.  v2:= 1I;
  #L13568a.  goto L13568e;
  #L13568c.  v2:= 0I;
  #L13568e.  return v2;
}
procedure `boolean` `contains`(`kotlin.ranges.IntRange` v0 @kind this, `java.lang.Comparable` v1 @kind object) @signature `Lkotlin/ranges/IntRange;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1356a0.  v1:= (`java.lang.Number`) v1 @kind object;
  #L1356a4.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L1356aa.  v1:= temp;
  #L1356ac.  call temp:= `contains`(v0, v1) @signature `Lkotlin/ranges/IntRange;.contains:(I)Z` @kind virtual;
  #L1356b2.  v1:= temp;
  #L1356b4.  return v1;
}
procedure `boolean` `equals`(`kotlin.ranges.IntRange` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ranges/IntRange;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1356c8.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.IntRange` @kind boolean;
  #L1356cc.  if v0 == 0 then goto L13571e;
  #L1356d0.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/IntRange;.isEmpty:()Z` @kind virtual;
  #L1356d6.  v0:= temp;
  #L1356d8.  if v0 == 0 then goto L1356ee;
  #L1356dc.  v0:= v3 @kind object;
  #L1356de.  v0:= (`kotlin.ranges.IntRange`) v0 @kind object;
  #L1356e2.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/IntRange;.isEmpty:()Z` @kind virtual;
  #L1356e8.  v0:= temp;
  #L1356ea.  if v0 != 0 then goto L13571a;
  #L1356ee.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L1356f4.  v0:= temp;
  #L1356f6.  v3:= (`kotlin.ranges.IntRange`) v3 @kind object;
  #L1356fa.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L135700.  v1:= temp;
  #L135702.  if v0 != v1 then goto L13571e;
  #L135706.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L13570c.  v0:= temp;
  #L13570e.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L135714.  v3:= temp;
  #L135716.  if v0 != v3 then goto L13571e;
  #L13571a.  v3:= 1I;
  #L13571c.  goto L135720;
  #L13571e.  v3:= 0I;
  #L135720.  return v3;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.IntRange` v1 @kind this) @signature `Lkotlin/ranges/IntRange;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L135798.  call temp:= `getEndInclusive`(v1) @signature `Lkotlin/ranges/IntRange;.getEndInclusive:()Ljava/lang/Integer;` @kind virtual;
  #L13579e.  v0:= temp @kind object;
  #L1357a0.  return v0 @kind object;
}
procedure `java.lang.Integer` `getEndInclusive`(`kotlin.ranges.IntRange` v1 @kind this) @signature `Lkotlin/ranges/IntRange;.getEndInclusive:()Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1357d0.  call temp:= `getLast`(v1) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L1357d6.  v0:= temp;
  #L1357d8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1357de.  v0:= temp @kind object;
  #L1357e0.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.IntRange` v1 @kind this) @signature `Lkotlin/ranges/IntRange;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1357b4.  call temp:= `getStart`(v1) @signature `Lkotlin/ranges/IntRange;.getStart:()Ljava/lang/Integer;` @kind virtual;
  #L1357ba.  v0:= temp @kind object;
  #L1357bc.  return v0 @kind object;
}
procedure `java.lang.Integer` `getStart`(`kotlin.ranges.IntRange` v1 @kind this) @signature `Lkotlin/ranges/IntRange;.getStart:()Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1357f4.  call temp:= `getFirst`(v1) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L1357fa.  v0:= temp;
  #L1357fc.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L135802.  v0:= temp @kind object;
  #L135804.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.IntRange` v2 @kind this) @signature `Lkotlin/ranges/IntRange;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L135760.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/IntRange;.isEmpty:()Z` @kind virtual;
  #L135766.  v0:= temp;
  #L135768.  if v0 == 0 then goto L135770;
  #L13576c.  v0:= -1I;
  #L13576e.  goto L135786;
  #L135770.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L135776.  v0:= temp;
  #L135778.  v0:= v0 * 31;
  #L13577c.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L135782.  v1:= temp;
  #L135784.  v0:= v0 + v1 @kind int;
  #L135786.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.IntRange` v2 @kind this) @signature `Lkotlin/ranges/IntRange;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L135734.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L13573a.  v0:= temp;
  #L13573c.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L135742.  v1:= temp;
  #L135744.  if v0 <= v1 then goto L13574c;
  #L135748.  v0:= 1I;
  #L13574a.  goto L13574e;
  #L13574c.  v0:= 0I;
  #L13574e.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.IntRange` v2 @kind this) @signature `Lkotlin/ranges/IntRange;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L135818.  v0:= new `java.lang.StringBuilder`;
  #L13581c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L135822.  call temp:= `getFirst`(v2) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L135828.  v1:= temp;
  #L13582a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L135830.  v1:= ".." @kind object;
  #L135834.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13583a.  call temp:= `getLast`(v2) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L135840.  v1:= temp;
  #L135842.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L135848.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13584e.  v0:= temp @kind object;
  #L135850.  return v0 @kind object;
}
