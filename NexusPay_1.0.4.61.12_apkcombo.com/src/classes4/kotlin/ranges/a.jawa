record `kotlin.ranges.a` @kind class @AccessFlag FINAL extends `kotlin.ranges.ClosedFloatingPointRange` @kind interface {
  `double` `kotlin.ranges.a.a` @AccessFlag PRIVATE_FINAL;
  `double` `kotlin.ranges.a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.a` v0 @kind this, `double` v1 , `double` v3 ) @signature `Lkotlin/ranges/a;.<init>:(DD)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L134d6c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L134d72.  v0.`kotlin.ranges.a.a` @type ^`double` := v1 @kind wide;
  #L134d76.  v0.`kotlin.ranges.a.b` @type ^`double` := v3 @kind wide;
  #L134d7a.  return @kind void;
}
procedure `boolean` `a`(`kotlin.ranges.a` v3 @kind this, `double` v4 ) @signature `Lkotlin/ranges/a;.a:(D)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L134b28.  v0:= v3.`kotlin.ranges.a.a` @type ^`double` @kind wide;
  #L134b2c.  v2:= dcmpl(v4, v0);
  #L134b30.  if v2 < 0 then goto L134b44;
  #L134b34.  v0:= v3.`kotlin.ranges.a.b` @type ^`double` @kind wide;
  #L134b38.  v2:= dcmpg(v4, v0);
  #L134b3c.  if v2 > 0 then goto L134b44;
  #L134b40.  v4:= 1I;
  #L134b42.  goto L134b46;
  #L134b44.  v4:= 0I;
  #L134b46.  return v4;
}
procedure `java.lang.Double` `b`(`kotlin.ranges.a` v2 @kind this) @signature `Lkotlin/ranges/a;.b:()Ljava/lang/Double;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L134ce8.  v0:= v2.`kotlin.ranges.a.b` @type ^`double` @kind wide;
  #L134cec.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L134cf2.  v0:= temp @kind object;
  #L134cf4.  return v0 @kind object;
}
procedure `java.lang.Double` `c`(`kotlin.ranges.a` v2 @kind this) @signature `Lkotlin/ranges/a;.c:()Ljava/lang/Double;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L134d08.  v0:= v2.`kotlin.ranges.a.a` @type ^`double` @kind wide;
  #L134d0c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L134d12.  v0:= temp @kind object;
  #L134d14.  return v0 @kind object;
}
procedure `boolean` `contains`(`kotlin.ranges.a` v2 @kind this, `java.lang.Comparable` v3 @kind object) @signature `Lkotlin/ranges/a;.contains:(Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L134b58.  v3:= (`java.lang.Number`) v3 @kind object;
  #L134b5c.  call temp:= `doubleValue`(v3) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L134b62.  v0:= temp @kind wide;
  #L134b64.  call temp:= `a`(v2, v0) @signature `Lkotlin/ranges/a;.a:(D)Z` @kind virtual;
  #L134b6a.  v3:= temp;
  #L134b6c.  return v3;
}
procedure `boolean` `d`(`kotlin.ranges.a` v1 @kind this, `double` v2 , `double` v4 ) @signature `Lkotlin/ranges/a;.d:(DD)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L134c0c.  v0:= dcmpg(v2, v4);
  #L134c10.  if v0 > 0 then goto L134c18;
  #L134c14.  v2:= 1I;
  #L134c16.  goto L134c1a;
  #L134c18.  v2:= 0I;
  #L134c1a.  return v2;
}
procedure `boolean` `equals`(`kotlin.ranges.a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlin/ranges/a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L134b80.  v0:= instanceof @variable v6 @type ^`kotlin.ranges.a` @kind boolean;
  #L134b84.  if v0 == 0 then goto L134bce;
  #L134b88.  call temp:= `isEmpty`(v5) @signature `Lkotlin/ranges/a;.isEmpty:()Z` @kind virtual;
  #L134b8e.  v0:= temp;
  #L134b90.  if v0 == 0 then goto L134ba6;
  #L134b94.  v0:= v6 @kind object;
  #L134b96.  v0:= (`kotlin.ranges.a`) v0 @kind object;
  #L134b9a.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/a;.isEmpty:()Z` @kind virtual;
  #L134ba0.  v0:= temp;
  #L134ba2.  if v0 != 0 then goto L134bca;
  #L134ba6.  v0:= v5.`kotlin.ranges.a.a` @type ^`double` @kind wide;
  #L134baa.  v6:= (`kotlin.ranges.a`) v6 @kind object;
  #L134bae.  v2:= v6.`kotlin.ranges.a.a` @type ^`double` @kind wide;
  #L134bb2.  v4:= dcmpg(v0, v2);
  #L134bb6.  if v4 != 0 then goto L134bce;
  #L134bba.  v0:= v5.`kotlin.ranges.a.b` @type ^`double` @kind wide;
  #L134bbe.  v2:= v6.`kotlin.ranges.a.b` @type ^`double` @kind wide;
  #L134bc2.  v6:= dcmpg(v0, v2);
  #L134bc6.  if v6 != 0 then goto L134bce;
  #L134bca.  v6:= 1I;
  #L134bcc.  goto L134bd0;
  #L134bce.  v6:= 0I;
  #L134bd0.  return v6;
}
procedure `java.lang.Comparable` `getEndInclusive`(`kotlin.ranges.a` v1 @kind this) @signature `Lkotlin/ranges/a;.getEndInclusive:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L134cb0.  call temp:= `b`(v1) @signature `Lkotlin/ranges/a;.b:()Ljava/lang/Double;` @kind virtual;
  #L134cb6.  v0:= temp @kind object;
  #L134cb8.  return v0 @kind object;
}
procedure `java.lang.Comparable` `getStart`(`kotlin.ranges.a` v1 @kind this) @signature `Lkotlin/ranges/a;.getStart:()Ljava/lang/Comparable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L134ccc.  call temp:= `c`(v1) @signature `Lkotlin/ranges/a;.c:()Ljava/lang/Double;` @kind virtual;
  #L134cd2.  v0:= temp @kind object;
  #L134cd4.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.ranges.a` v3 @kind this) @signature `Lkotlin/ranges/a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L134c60.  call temp:= `isEmpty`(v3) @signature `Lkotlin/ranges/a;.isEmpty:()Z` @kind virtual;
  #L134c66.  v0:= temp;
  #L134c68.  if v0 == 0 then goto L134c70;
  #L134c6c.  v0:= -1I;
  #L134c6e.  goto L134c9e;
  #L134c70.  v0:= v3.`kotlin.ranges.a.a` @type ^`double` @kind wide;
  #L134c74.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L134c7a.  v0:= temp @kind object;
  #L134c7c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L134c82.  v0:= temp;
  #L134c84.  v0:= v0 * 31;
  #L134c88.  v1:= v3.`kotlin.ranges.a.b` @type ^`double` @kind wide;
  #L134c8c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L134c92.  v1:= temp @kind object;
  #L134c94.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L134c9a.  v1:= temp;
  #L134c9c.  v0:= v0 + v1 @kind int;
  #L134c9e.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.a` v5 @kind this) @signature `Lkotlin/ranges/a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L134be4.  v0:= v5.`kotlin.ranges.a.a` @type ^`double` @kind wide;
  #L134be8.  v2:= v5.`kotlin.ranges.a.b` @type ^`double` @kind wide;
  #L134bec.  v4:= dcmpg(v0, v2);
  #L134bf0.  if v4 <= 0 then goto L134bf8;
  #L134bf4.  v0:= 1I;
  #L134bf6.  goto L134bfa;
  #L134bf8.  v0:= 0I;
  #L134bfa.  return v0;
}
procedure `boolean` `lessThanOrEquals`(`kotlin.ranges.a` v2 @kind this, `java.lang.Comparable` v3 @kind object, `java.lang.Comparable` v4 @kind object) @signature `Lkotlin/ranges/a;.lessThanOrEquals:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L134c2c.  v3:= (`java.lang.Number`) v3 @kind object;
  #L134c30.  call temp:= `doubleValue`(v3) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L134c36.  v0:= temp @kind wide;
  #L134c38.  v4:= (`java.lang.Number`) v4 @kind object;
  #L134c3c.  call temp:= `doubleValue`(v4) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L134c42.  v3:= temp @kind wide;
  #L134c44.  call temp:= `d`(v2, v0, v3) @signature `Lkotlin/ranges/a;.d:(DD)Z` @kind virtual;
  #L134c4a.  v3:= temp;
  #L134c4c.  return v3;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.a` v3 @kind this) @signature `Lkotlin/ranges/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L134d28.  v0:= new `java.lang.StringBuilder`;
  #L134d2c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L134d32.  v1:= v3.`kotlin.ranges.a.a` @type ^`double` @kind wide;
  #L134d36.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L134d3c.  v1:= ".." @kind object;
  #L134d40.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134d46.  v1:= v3.`kotlin.ranges.a.b` @type ^`double` @kind wide;
  #L134d4a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L134d50.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L134d56.  v0:= temp @kind object;
  #L134d58.  return v0 @kind object;
}
