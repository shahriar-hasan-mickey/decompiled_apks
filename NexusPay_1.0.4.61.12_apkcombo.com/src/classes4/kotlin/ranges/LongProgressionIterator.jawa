record `kotlin.ranges.LongProgressionIterator` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.LongIterator` @kind class {
  `long` `kotlin.ranges.LongProgressionIterator.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.ranges.LongProgressionIterator.b` @AccessFlag PRIVATE;
  `long` `kotlin.ranges.LongProgressionIterator.c` @AccessFlag PRIVATE;
  `long` `kotlin.ranges.LongProgressionIterator.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.LongProgressionIterator` v5 @kind this, `long` v6 , `long` v8 , `long` v10 ) @signature `Lkotlin/ranges/LongProgressionIterator;.<init>:(JJJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L135998.  call `<init>`(v5) @signature `Lkotlin/collections/LongIterator;.<init>:()V` @kind direct;
  #L13599e.  v5.`kotlin.ranges.LongProgressionIterator.d` @type ^`long` := v10 @kind wide;
  #L1359a2.  v5.`kotlin.ranges.LongProgressionIterator.a` @type ^`long` := v8 @kind wide;
  #L1359a6.  v0:= 1I;
  #L1359a8.  v1:= 0I;
  #L1359aa.  v2:= 0L;
  #L1359ae.  v4:= lcmp(v10, v2);
  #L1359b2.  v10:= lcmp(v6, v8);
  #L1359b6.  if v4 <= 0 then goto L1359c0;
  #L1359ba.  if v10 > 0 then goto L1359c6;
  #L1359be.  goto L1359c8;
  #L1359c0.  if v10 < 0 then goto L1359c6;
  #L1359c4.  goto L1359c8;
  #L1359c6.  v0:= 0I;
  #L1359c8.  v5.`kotlin.ranges.LongProgressionIterator.b` @type ^`boolean` := v0 @kind boolean;
  #L1359cc.  if v0 == 0 then goto L1359d2;
  #L1359d0.  goto L1359d6;
  #L1359d2.  v6:= v5.`kotlin.ranges.LongProgressionIterator.a` @type ^`long` @kind wide;
  #L1359d6.  v5.`kotlin.ranges.LongProgressionIterator.c` @type ^`long` := v6 @kind wide;
  #L1359da.  return @kind void;
}
procedure `long` `getStep`(`kotlin.ranges.LongProgressionIterator` v2 @kind this) @signature `Lkotlin/ranges/LongProgressionIterator;.getStep:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L135938.  v0:= v2.`kotlin.ranges.LongProgressionIterator.d` @type ^`long` @kind wide;
  #L13593c.  return v0 @kind wide;
}
procedure `boolean` `hasNext`(`kotlin.ranges.LongProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/LongProgressionIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L135920.  v0:= v1.`kotlin.ranges.LongProgressionIterator.b` @type ^`boolean` @kind boolean;
  #L135924.  return v0;
}
procedure `long` `nextLong`(`kotlin.ranges.LongProgressionIterator` v5 @kind this) @signature `Lkotlin/ranges/LongProgressionIterator;.nextLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L135950.  v0:= v5.`kotlin.ranges.LongProgressionIterator.c` @type ^`long` @kind wide;
  #L135954.  v2:= v5.`kotlin.ranges.LongProgressionIterator.a` @type ^`long` @kind wide;
  #L135958.  v4:= lcmp(v0, v2);
  #L13595c.  if v4 != 0 then goto L13597c;
  #L135960.  v2:= v5.`kotlin.ranges.LongProgressionIterator.b` @type ^`boolean` @kind boolean;
  #L135964.  if v2 == 0 then goto L135970;
  #L135968.  v2:= 0I;
  #L13596a.  v5.`kotlin.ranges.LongProgressionIterator.b` @type ^`boolean` := v2 @kind boolean;
  #L13596e.  goto L135986;
  #L135970.  v0:= new `java.util.NoSuchElementException`;
  #L135974.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L13597a.  throw v0;
  #L13597c.  v2:= v5.`kotlin.ranges.LongProgressionIterator.d` @type ^`long` @kind wide;
  #L135980.  v2:= v2 + v0 @kind long;
  #L135982.  v5.`kotlin.ranges.LongProgressionIterator.c` @type ^`long` := v2 @kind wide;
  #L135986.  return v0 @kind wide;
}
