record `kotlin.ranges.LongProgression` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `long` `kotlin.ranges.LongProgression.a` @AccessFlag PRIVATE_FINAL;
  `long` `kotlin.ranges.LongProgression.b` @AccessFlag PRIVATE_FINAL;
  `long` `kotlin.ranges.LongProgression.c` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.ranges.LongProgression$Companion` `@@kotlin.ranges.LongProgression.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/LongProgression;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L135c24.  v0:= new `kotlin.ranges.LongProgression$Companion`;
  #L135c28.  v1:= 0I;
  #L135c2a.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/LongProgression$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L135c30.  `@@kotlin.ranges.LongProgression.Companion` @type ^`kotlin.ranges.LongProgression$Companion` := v0 @kind object;
  #L135c34.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.LongProgression` v3 @kind this, `long` v4 , `long` v6 , `long` v8 ) @signature `Lkotlin/ranges/LongProgression;.<init>:(JJJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L135c48.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L135c4e.  v0:= 0L;
  #L135c52.  v2:= lcmp(v8, v0);
  #L135c56.  if v2 == 0 then goto L135c8c;
  #L135c5a.  v0:= -9223372036854775808L;
  #L135c5e.  v2:= lcmp(v8, v0);
  #L135c62.  if v2 == 0 then goto L135c7c;
  #L135c66.  v3.`kotlin.ranges.LongProgression.a` @type ^`long` := v4 @kind wide;
  #L135c6a.  call temp:= `getProgressionLastElement`(v4, v6, v8) @signature `Lkotlin/internal/ProgressionUtilKt;.getProgressionLastElement:(JJJ)J` @kind static;
  #L135c70.  v4:= temp @kind wide;
  #L135c72.  v3.`kotlin.ranges.LongProgression.b` @type ^`long` := v4 @kind wide;
  #L135c76.  v3.`kotlin.ranges.LongProgression.c` @type ^`long` := v8 @kind wide;
  #L135c7a.  return @kind void;
  #L135c7c.  v4:= new `java.lang.IllegalArgumentException`;
  #L135c80.  v5:= "Step must be greater than Long.MIN_VALUE to avoid overflow on negation." @kind object;
  #L135c84.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L135c8a.  throw v4;
  #L135c8c.  v4:= new `java.lang.IllegalArgumentException`;
  #L135c90.  v5:= "Step must be non-zero." @kind object;
  #L135c94.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L135c9a.  throw v4;
}
procedure `boolean` `equals`(`kotlin.ranges.LongProgression` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlin/ranges/LongProgression;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1359ec.  v0:= instanceof @variable v6 @type ^`kotlin.ranges.LongProgression` @kind boolean;
  #L1359f0.  if v0 == 0 then goto L135a4a;
  #L1359f4.  call temp:= `isEmpty`(v5) @signature `Lkotlin/ranges/LongProgression;.isEmpty:()Z` @kind virtual;
  #L1359fa.  v0:= temp;
  #L1359fc.  if v0 == 0 then goto L135a12;
  #L135a00.  v0:= v6 @kind object;
  #L135a02.  v0:= (`kotlin.ranges.LongProgression`) v0 @kind object;
  #L135a06.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/LongProgression;.isEmpty:()Z` @kind virtual;
  #L135a0c.  v0:= temp;
  #L135a0e.  if v0 != 0 then goto L135a46;
  #L135a12.  v0:= v5.`kotlin.ranges.LongProgression.a` @type ^`long` @kind wide;
  #L135a16.  v6:= (`kotlin.ranges.LongProgression`) v6 @kind object;
  #L135a1a.  v2:= v6.`kotlin.ranges.LongProgression.a` @type ^`long` @kind wide;
  #L135a1e.  v4:= lcmp(v0, v2);
  #L135a22.  if v4 != 0 then goto L135a4a;
  #L135a26.  v0:= v5.`kotlin.ranges.LongProgression.b` @type ^`long` @kind wide;
  #L135a2a.  v2:= v6.`kotlin.ranges.LongProgression.b` @type ^`long` @kind wide;
  #L135a2e.  v4:= lcmp(v0, v2);
  #L135a32.  if v4 != 0 then goto L135a4a;
  #L135a36.  v0:= v5.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L135a3a.  v2:= v6.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L135a3e.  v6:= lcmp(v0, v2);
  #L135a42.  if v6 != 0 then goto L135a4a;
  #L135a46.  v6:= 1I;
  #L135a48.  goto L135a4c;
  #L135a4a.  v6:= 0I;
  #L135a4c.  return v6;
}
procedure `long` `getFirst`(`kotlin.ranges.LongProgression` v2 @kind this) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L135bdc.  v0:= v2.`kotlin.ranges.LongProgression.a` @type ^`long` @kind wide;
  #L135be0.  return v0 @kind wide;
}
procedure `long` `getLast`(`kotlin.ranges.LongProgression` v2 @kind this) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L135bf4.  v0:= v2.`kotlin.ranges.LongProgression.b` @type ^`long` @kind wide;
  #L135bf8.  return v0 @kind wide;
}
procedure `long` `getStep`(`kotlin.ranges.LongProgression` v2 @kind this) @signature `Lkotlin/ranges/LongProgression;.getStep:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L135c0c.  v0:= v2.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L135c10.  return v0 @kind wide;
}
procedure `int` `hashCode`(`kotlin.ranges.LongProgression` v9 @kind this) @signature `Lkotlin/ranges/LongProgression;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L135aa4.  call temp:= `isEmpty`(v9) @signature `Lkotlin/ranges/LongProgression;.isEmpty:()Z` @kind virtual;
  #L135aaa.  v0:= temp;
  #L135aac.  if v0 == 0 then goto L135ab4;
  #L135ab0.  v0:= -1I;
  #L135ab2.  goto L135aea;
  #L135ab4.  v0:= 31I;
  #L135ab8.  v0:= (`long`) v0 @kind i2l;
  #L135aba.  v2:= v9.`kotlin.ranges.LongProgression.a` @type ^`long` @kind wide;
  #L135abe.  v4:= 32I;
  #L135ac2.  v5:= v2 ^>> v4 @kind long;
  #L135ac6.  v2:= v2 ^~ v5 @kind long;
  #L135ac8.  v2:= v2 * v0 @kind long;
  #L135acc.  v5:= v9.`kotlin.ranges.LongProgression.b` @type ^`long` @kind wide;
  #L135ad0.  v7:= v5 ^>> v4 @kind long;
  #L135ad4.  v5:= v5 ^~ v7 @kind long;
  #L135ad6.  v2:= v2 + v5 @kind long;
  #L135ad8.  v0:= v0 * v2 @kind long;
  #L135adc.  v2:= v9.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L135ae0.  v4:= v2 ^>> v4 @kind long;
  #L135ae4.  v2:= v2 ^~ v4 @kind long;
  #L135ae6.  v0:= v0 + v2 @kind long;
  #L135ae8.  v0:= (`int`) v0 @kind l2i;
  #L135aea.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.LongProgression` v7 @kind this) @signature `Lkotlin/ranges/LongProgression;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L135a60.  v0:= v7.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L135a64.  v2:= 1I;
  #L135a66.  v3:= 0I;
  #L135a68.  v4:= 0L;
  #L135a6c.  v6:= lcmp(v0, v4);
  #L135a70.  v0:= v7.`kotlin.ranges.LongProgression.a` @type ^`long` @kind wide;
  #L135a74.  v4:= v7.`kotlin.ranges.LongProgression.b` @type ^`long` @kind wide;
  #L135a78.  if v6 <= 0 then goto L135a86;
  #L135a7c.  v6:= lcmp(v0, v4);
  #L135a80.  if v6 <= 0 then goto L135a90;
  #L135a84.  goto L135a92;
  #L135a86.  v6:= lcmp(v0, v4);
  #L135a8a.  if v6 >= 0 then goto L135a90;
  #L135a8e.  goto L135a92;
  #L135a90.  v2:= 0I;
  #L135a92.  return v2;
}
procedure `java.util.Iterator` `iterator`(`kotlin.ranges.LongProgression` v1 @kind this) @signature `Lkotlin/ranges/LongProgression;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L135b94.  call temp:= `iterator`(v1) @signature `Lkotlin/ranges/LongProgression;.iterator:()Lkotlin/collections/LongIterator;` @kind virtual;
  #L135b9a.  v0:= temp @kind object;
  #L135b9c.  return v0 @kind object;
}
procedure `kotlin.collections.LongIterator` `iterator`(`kotlin.ranges.LongProgression` v8 @kind this) @signature `Lkotlin/ranges/LongProgression;.iterator:()Lkotlin/collections/LongIterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L135bb0.  v7:= new `kotlin.ranges.LongProgressionIterator`;
  #L135bb4.  v1:= v8.`kotlin.ranges.LongProgression.a` @type ^`long` @kind wide;
  #L135bb8.  v3:= v8.`kotlin.ranges.LongProgression.b` @type ^`long` @kind wide;
  #L135bbc.  v5:= v8.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L135bc0.  v0:= v7 @kind object;
  #L135bc2.  call `<init>`(v0, v1, v3, v5) @signature `Lkotlin/ranges/LongProgressionIterator;.<init>:(JJJ)V` @kind direct;
  #L135bc8.  return v7 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.LongProgression` v6 @kind this) @signature `Lkotlin/ranges/LongProgression;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L135afc.  v0:= v6.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L135b00.  v2:= " step " @kind object;
  #L135b04.  v3:= 0L;
  #L135b08.  v5:= lcmp(v0, v3);
  #L135b0c.  v0:= new `java.lang.StringBuilder`;
  #L135b10.  if v5 <= 0 then goto L135b44;
  #L135b14.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L135b1a.  v3:= v6.`kotlin.ranges.LongProgression.a` @type ^`long` @kind wide;
  #L135b1e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L135b24.  v1:= ".." @kind object;
  #L135b28.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L135b2e.  v3:= v6.`kotlin.ranges.LongProgression.b` @type ^`long` @kind wide;
  #L135b32.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L135b38.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L135b3e.  v1:= v6.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L135b42.  goto L135b74;
  #L135b44.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L135b4a.  v3:= v6.`kotlin.ranges.LongProgression.a` @type ^`long` @kind wide;
  #L135b4e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L135b54.  v1:= " downTo " @kind object;
  #L135b58.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L135b5e.  v3:= v6.`kotlin.ranges.LongProgression.b` @type ^`long` @kind wide;
  #L135b62.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L135b68.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L135b6e.  v1:= v6.`kotlin.ranges.LongProgression.c` @type ^`long` @kind wide;
  #L135b72.  v1:= -v1 @kind long;
  #L135b74.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L135b7a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L135b80.  v0:= temp @kind object;
  #L135b82.  return v0 @kind object;
}
