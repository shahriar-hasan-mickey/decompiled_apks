record `kotlin.ranges.CharProgressionIterator` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.CharIterator` @kind class {
  `int` `kotlin.ranges.CharProgressionIterator.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.ranges.CharProgressionIterator.b` @AccessFlag PRIVATE;
  `int` `kotlin.ranges.CharProgressionIterator.c` @AccessFlag PRIVATE;
  `int` `kotlin.ranges.CharProgressionIterator.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.ranges.CharProgressionIterator` v2 @kind this, `char` v3 , `char` v4 , `int` v5 ) @signature `Lkotlin/ranges/CharProgressionIterator;.<init>:(CCI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L134584.  call `<init>`(v2) @signature `Lkotlin/collections/CharIterator;.<init>:()V` @kind direct;
  #L13458a.  v2.`kotlin.ranges.CharProgressionIterator.d` @type ^`int` := v5;
  #L13458e.  v2.`kotlin.ranges.CharProgressionIterator.a` @type ^`int` := v4;
  #L134592.  v0:= 1I;
  #L134594.  v1:= 0I;
  #L134596.  call temp:= `compare`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L13459c.  v4:= temp;
  #L13459e.  if v5 <= 0 then goto L1345a8;
  #L1345a2.  if v4 > 0 then goto L1345ae;
  #L1345a6.  goto L1345b0;
  #L1345a8.  if v4 < 0 then goto L1345ae;
  #L1345ac.  goto L1345b0;
  #L1345ae.  v0:= 0I;
  #L1345b0.  v2.`kotlin.ranges.CharProgressionIterator.b` @type ^`boolean` := v0 @kind boolean;
  #L1345b4.  if v0 == 0 then goto L1345ba;
  #L1345b8.  goto L1345be;
  #L1345ba.  v3:= v2.`kotlin.ranges.CharProgressionIterator.a` @type ^`int`;
  #L1345be.  v2.`kotlin.ranges.CharProgressionIterator.c` @type ^`int` := v3;
  #L1345c2.  return @kind void;
}
procedure `int` `getStep`(`kotlin.ranges.CharProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/CharProgressionIterator;.getStep:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13456c.  v0:= v1.`kotlin.ranges.CharProgressionIterator.d` @type ^`int`;
  #L134570.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.ranges.CharProgressionIterator` v1 @kind this) @signature `Lkotlin/ranges/CharProgressionIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13450c.  v0:= v1.`kotlin.ranges.CharProgressionIterator.b` @type ^`boolean` @kind boolean;
  #L134510.  return v0;
}
procedure `char` `nextChar`(`kotlin.ranges.CharProgressionIterator` v2 @kind this) @signature `Lkotlin/ranges/CharProgressionIterator;.nextChar:()C` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L134524.  v0:= v2.`kotlin.ranges.CharProgressionIterator.c` @type ^`int`;
  #L134528.  v1:= v2.`kotlin.ranges.CharProgressionIterator.a` @type ^`int`;
  #L13452c.  if v0 != v1 then goto L13454c;
  #L134530.  v1:= v2.`kotlin.ranges.CharProgressionIterator.b` @type ^`boolean` @kind boolean;
  #L134534.  if v1 == 0 then goto L134540;
  #L134538.  v1:= 0I;
  #L13453a.  v2.`kotlin.ranges.CharProgressionIterator.b` @type ^`boolean` := v1 @kind boolean;
  #L13453e.  goto L134556;
  #L134540.  v0:= new `java.util.NoSuchElementException`;
  #L134544.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L13454a.  throw v0;
  #L13454c.  v1:= v2.`kotlin.ranges.CharProgressionIterator.d` @type ^`int`;
  #L134550.  v1:= v1 + v0 @kind int;
  #L134552.  v2.`kotlin.ranges.CharProgressionIterator.c` @type ^`int` := v1;
  #L134556.  v0:= (`char`) v0 @kind i2c;
  #L134558.  return v0;
}
