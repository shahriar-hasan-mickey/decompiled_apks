record `kotlin.reflect.b` @kind class @AccessFlag FINAL extends `java.lang.reflect.ParameterizedType` @kind interface, `java.lang.reflect.Type` @kind interface {
  `java.lang.reflect.Type`[] `kotlin.reflect.b.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `kotlin.reflect.b.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `kotlin.reflect.b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.reflect.b` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.reflect.Type` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lkotlin/reflect/b;.<init>:(Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L13a400.  v0:= "rawType" @kind object;
  #L13a404.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13a40a.  v0:= "typeArguments" @kind object;
  #L13a40e.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13a414.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13a41a.  v1.`kotlin.reflect.b.b` @type ^`java.lang.Class` := v2 @kind object;
  #L13a41e.  v1.`kotlin.reflect.b.c` @type ^`java.lang.reflect.Type` := v3 @kind object;
  #L13a422.  v2:= 0I;
  #L13a424.  v2:= new `java.lang.reflect.Type`[v2];
  #L13a428.  call temp:= `toArray`(v4, v2) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L13a42e.  v2:= temp @kind object;
  #L13a430.  if v2 == 0 then goto L13a43e;
  #L13a434.  v2:= (`java.lang.reflect.Type`[]) v2 @kind object;
  #L13a438.  v1.`kotlin.reflect.b.a` @type ^`java.lang.reflect.Type`[] := v2 @kind object;
  #L13a43c.  return @kind void;
  #L13a43e.  v2:= new `java.lang.NullPointerException`;
  #L13a442.  v3:= "null cannot be cast to non-null type kotlin.Array<T>" @kind object;
  #L13a446.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13a44c.  throw v2;
}
procedure `boolean` `equals`(`kotlin.reflect.b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/reflect/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13a234.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L13a238.  if v0 == 0 then goto L13a290;
  #L13a23c.  v0:= v2.`kotlin.reflect.b.b` @type ^`java.lang.Class` @kind object;
  #L13a240.  v3:= (`java.lang.reflect.ParameterizedType`) v3 @kind object;
  #L13a244.  call temp:= `getRawType`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13a24a.  v1:= temp @kind object;
  #L13a24c.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L13a252.  v0:= temp;
  #L13a254.  if v0 == 0 then goto L13a290;
  #L13a258.  v0:= v2.`kotlin.reflect.b.c` @type ^`java.lang.reflect.Type` @kind object;
  #L13a25c.  call temp:= `getOwnerType`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13a262.  v1:= temp @kind object;
  #L13a264.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L13a26a.  v0:= temp;
  #L13a26c.  if v0 == 0 then goto L13a290;
  #L13a270.  call temp:= `getActualTypeArguments`(v2) @signature `Lkotlin/reflect/b;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L13a276.  v0:= temp @kind object;
  #L13a278.  call temp:= `getActualTypeArguments`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13a27e.  v3:= temp @kind object;
  #L13a280.  call temp:= `equals`(v0, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L13a286.  v3:= temp;
  #L13a288.  if v3 == 0 then goto L13a290;
  #L13a28c.  v3:= 1I;
  #L13a28e.  goto L13a292;
  #L13a290.  v3:= 0I;
  #L13a292.  return v3;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`kotlin.reflect.b` v1 @kind this) @signature `Lkotlin/reflect/b;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13a3e8.  v0:= v1.`kotlin.reflect.b.a` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13a3ec.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`kotlin.reflect.b` v1 @kind this) @signature `Lkotlin/reflect/b;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13a3b8.  v0:= v1.`kotlin.reflect.b.c` @type ^`java.lang.reflect.Type` @kind object;
  #L13a3bc.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`kotlin.reflect.b` v1 @kind this) @signature `Lkotlin/reflect/b;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13a3d0.  v0:= v1.`kotlin.reflect.b.b` @type ^`java.lang.Class` @kind object;
  #L13a3d4.  return v0 @kind object;
}
procedure `java.lang.String` `getTypeName`(`kotlin.reflect.b` v11 @kind this) @signature `Lkotlin/reflect/b;.getTypeName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L13a2ec.  v10:= new `java.lang.StringBuilder`;
  #L13a2f0.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13a2f6.  v0:= v11.`kotlin.reflect.b.c` @type ^`java.lang.reflect.Type` @kind object;
  #L13a2fa.  if v0 == 0 then goto L13a32a;
  #L13a2fe.  call temp:= `access$typeToString`(v0) @signature `Lkotlin/reflect/TypesJVMKt;.access$typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L13a304.  v0:= temp @kind object;
  #L13a306.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a30c.  v0:= "$" @kind object;
  #L13a310.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a316.  v0:= v11.`kotlin.reflect.b.b` @type ^`java.lang.Class` @kind object;
  #L13a31a.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L13a320.  v0:= temp @kind object;
  #L13a322.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a328.  goto L13a33c;
  #L13a32a.  v0:= v11.`kotlin.reflect.b.b` @type ^`java.lang.Class` @kind object;
  #L13a32e.  call temp:= `access$typeToString`(v0) @signature `Lkotlin/reflect/TypesJVMKt;.access$typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L13a334.  v0:= temp @kind object;
  #L13a336.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a33c.  v0:= v11.`kotlin.reflect.b.a` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13a340.  v0:= length @variable v0;
  #L13a342.  v1:= 1I;
  #L13a344.  if v0 != 0 then goto L13a34c;
  #L13a348.  v0:= 1I;
  #L13a34a.  goto L13a34e;
  #L13a34c.  v0:= 0I;
  #L13a34e.  v0:= v0 ^~ v1 @kind int;
  #L13a350.  if v0 == 0 then goto L13a378;
  #L13a354.  v0:= v11.`kotlin.reflect.b.a` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13a358.  v2:= 0I;
  #L13a35a.  v5:= 0I;
  #L13a35c.  v6:= 0I;
  #L13a35e.  v7:= `@@kotlin.reflect.b$a.h` @type ^`kotlin.reflect.b$a` @kind object;
  #L13a362.  v8:= 50I;
  #L13a366.  v9:= 0I;
  #L13a368.  v3:= "<" @kind object;
  #L13a36c.  v4:= ">" @kind object;
  #L13a370.  v1:= v10 @kind object;
  #L13a372.  call temp:= `joinTo$default`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lkotlin/collections/ArraysKt;.joinTo$default:([Ljava/lang/Object;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/Appendable;` @kind static;
  #L13a378.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13a37e.  v0:= temp @kind object;
  #L13a380.  v1:= "StringBuilder().apply(builderAction).toString()" @kind object;
  #L13a384.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13a38a.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.reflect.b` v2 @kind this) @signature `Lkotlin/reflect/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13a2a4.  v0:= v2.`kotlin.reflect.b.b` @type ^`java.lang.Class` @kind object;
  #L13a2a8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Class;.hashCode:()I` @kind virtual;
  #L13a2ae.  v0:= temp;
  #L13a2b0.  v1:= v2.`kotlin.reflect.b.c` @type ^`java.lang.reflect.Type` @kind object;
  #L13a2b4.  if v1 == 0 then goto L13a2c2;
  #L13a2b8.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L13a2be.  v1:= temp;
  #L13a2c0.  goto L13a2c4;
  #L13a2c2.  v1:= 0I;
  #L13a2c4.  v0:= v0 ^~ v1 @kind int;
  #L13a2c6.  call temp:= `getActualTypeArguments`(v2) @signature `Lkotlin/reflect/b;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L13a2cc.  v1:= temp @kind object;
  #L13a2ce.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L13a2d4.  v1:= temp;
  #L13a2d6.  v0:= v0 ^~ v1 @kind int;
  #L13a2d8.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.reflect.b` v1 @kind this) @signature `Lkotlin/reflect/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13a39c.  call temp:= `getTypeName`(v1) @signature `Lkotlin/reflect/b;.getTypeName:()Ljava/lang/String;` @kind virtual;
  #L13a3a2.  v0:= temp @kind object;
  #L13a3a4.  return v0 @kind object;
}
