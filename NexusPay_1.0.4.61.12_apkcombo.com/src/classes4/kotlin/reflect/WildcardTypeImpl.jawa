record `kotlin.reflect.WildcardTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.WildcardType` @kind interface, `java.lang.reflect.Type` @kind interface {
  `java.lang.reflect.Type` `kotlin.reflect.WildcardTypeImpl.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `kotlin.reflect.WildcardTypeImpl.b` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.reflect.WildcardTypeImpl` `@@kotlin.reflect.WildcardTypeImpl.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `kotlin.reflect.WildcardTypeImpl$Companion` `@@kotlin.reflect.WildcardTypeImpl.d` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/reflect/WildcardTypeImpl;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L13ae58.  v0:= new `kotlin.reflect.WildcardTypeImpl$Companion`;
  #L13ae5c.  v1:= 0I;
  #L13ae5e.  call `<init>`(v0, v1) @signature `Lkotlin/reflect/WildcardTypeImpl$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L13ae64.  `@@kotlin.reflect.WildcardTypeImpl.d` @type ^`kotlin.reflect.WildcardTypeImpl$Companion` := v0 @kind object;
  #L13ae68.  v0:= new `kotlin.reflect.WildcardTypeImpl`;
  #L13ae6c.  call `<init>`(v0, v1, v1) @signature `Lkotlin/reflect/WildcardTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V` @kind direct;
  #L13ae72.  `@@kotlin.reflect.WildcardTypeImpl.c` @type ^`kotlin.reflect.WildcardTypeImpl` := v0 @kind object;
  #L13ae76.  return @kind void;
}
procedure `void` `<init>`(`kotlin.reflect.WildcardTypeImpl` v0 @kind this, `java.lang.reflect.Type` v1 @kind object, `java.lang.reflect.Type` v2 @kind object) @signature `Lkotlin/reflect/WildcardTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L13ae88.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13ae8e.  v0.`kotlin.reflect.WildcardTypeImpl.a` @type ^`java.lang.reflect.Type` := v1 @kind object;
  #L13ae92.  v0.`kotlin.reflect.WildcardTypeImpl.b` @type ^`java.lang.reflect.Type` := v2 @kind object;
  #L13ae96.  return @kind void;
}
procedure `kotlin.reflect.WildcardTypeImpl` `a`() @signature `Lkotlin/reflect/WildcardTypeImpl;.a:()Lkotlin/reflect/WildcardTypeImpl;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L13ae40.  v0:= `@@kotlin.reflect.WildcardTypeImpl.c` @type ^`kotlin.reflect.WildcardTypeImpl` @kind object;
  #L13ae44.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlin.reflect.WildcardTypeImpl` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/reflect/WildcardTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13ac9c.  v0:= instanceof @variable v3 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L13aca0.  if v0 == 0 then goto L13ace4;
  #L13aca4.  call temp:= `getUpperBounds`(v2) @signature `Lkotlin/reflect/WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L13acaa.  v0:= temp @kind object;
  #L13acac.  v3:= (`java.lang.reflect.WildcardType`) v3 @kind object;
  #L13acb0.  call temp:= `getUpperBounds`(v3) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13acb6.  v1:= temp @kind object;
  #L13acb8.  call temp:= `equals`(v0, v1) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L13acbe.  v0:= temp;
  #L13acc0.  if v0 == 0 then goto L13ace4;
  #L13acc4.  call temp:= `getLowerBounds`(v2) @signature `Lkotlin/reflect/WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L13acca.  v0:= temp @kind object;
  #L13accc.  call temp:= `getLowerBounds`(v3) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13acd2.  v3:= temp @kind object;
  #L13acd4.  call temp:= `equals`(v0, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L13acda.  v3:= temp;
  #L13acdc.  if v3 == 0 then goto L13ace4;
  #L13ace0.  v3:= 1I;
  #L13ace2.  goto L13ace6;
  #L13ace4.  v3:= 0I;
  #L13ace6.  return v3;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`kotlin.reflect.WildcardTypeImpl` v3 @kind this) @signature `Lkotlin/reflect/WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13ade4.  v0:= v3.`kotlin.reflect.WildcardTypeImpl.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13ade8.  v1:= 0I;
  #L13adea.  if v0 != 0 then goto L13adf4;
  #L13adee.  v0:= new `java.lang.reflect.Type`[v1];
  #L13adf2.  goto L13ae00;
  #L13adf4.  v2:= 1I;
  #L13adf6.  v2:= new `java.lang.reflect.Type`[v2];
  #L13adfa.  v2[v1]:= v0 @kind object;
  #L13adfe.  v0:= v2 @kind object;
  #L13ae00.  return v0 @kind object;
}
procedure `java.lang.String` `getTypeName`(`kotlin.reflect.WildcardTypeImpl` v2 @kind this) @signature `Lkotlin/reflect/WildcardTypeImpl;.getTypeName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13ad2c.  v0:= v2.`kotlin.reflect.WildcardTypeImpl.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13ad30.  if v0 == 0 then goto L13ad64;
  #L13ad34.  v0:= new `java.lang.StringBuilder`;
  #L13ad38.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13ad3e.  v1:= "? super " @kind object;
  #L13ad42.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13ad48.  v1:= v2.`kotlin.reflect.WildcardTypeImpl.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13ad4c.  call temp:= `access$typeToString`(v1) @signature `Lkotlin/reflect/TypesJVMKt;.access$typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L13ad52.  v1:= temp @kind object;
  #L13ad54.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13ad5a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13ad60.  v0:= temp @kind object;
  #L13ad62.  goto L13adb4;
  #L13ad64.  v0:= v2.`kotlin.reflect.WildcardTypeImpl.a` @type ^`java.lang.reflect.Type` @kind object;
  #L13ad68.  if v0 == 0 then goto L13adb0;
  #L13ad6c.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L13ad70.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L13ad76.  v0:= temp;
  #L13ad78.  v0:= v0 ^~ 1;
  #L13ad7c.  if v0 == 0 then goto L13adb0;
  #L13ad80.  v0:= new `java.lang.StringBuilder`;
  #L13ad84.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13ad8a.  v1:= "? extends " @kind object;
  #L13ad8e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13ad94.  v1:= v2.`kotlin.reflect.WildcardTypeImpl.a` @type ^`java.lang.reflect.Type` @kind object;
  #L13ad98.  call temp:= `access$typeToString`(v1) @signature `Lkotlin/reflect/TypesJVMKt;.access$typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L13ad9e.  v1:= temp @kind object;
  #L13ada0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13ada6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13adac.  v0:= temp @kind object;
  #L13adae.  goto L13adb4;
  #L13adb0.  v0:= "?" @kind object;
  #L13adb4.  return v0 @kind object;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`kotlin.reflect.WildcardTypeImpl` v3 @kind this) @signature `Lkotlin/reflect/WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13ae14.  v0:= 1I;
  #L13ae16.  v0:= new `java.lang.reflect.Type`[v0];
  #L13ae1a.  v1:= v3.`kotlin.reflect.WildcardTypeImpl.a` @type ^`java.lang.reflect.Type` @kind object;
  #L13ae1e.  if v1 == 0 then goto L13ae24;
  #L13ae22.  goto L13ae28;
  #L13ae24.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L13ae28.  v2:= 0I;
  #L13ae2a.  v0[v2]:= v1 @kind object;
  #L13ae2e.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.reflect.WildcardTypeImpl` v2 @kind this) @signature `Lkotlin/reflect/WildcardTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13acf8.  call temp:= `getUpperBounds`(v2) @signature `Lkotlin/reflect/WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L13acfe.  v0:= temp @kind object;
  #L13ad00.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L13ad06.  v0:= temp;
  #L13ad08.  call temp:= `getLowerBounds`(v2) @signature `Lkotlin/reflect/WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L13ad0e.  v1:= temp @kind object;
  #L13ad10.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L13ad16.  v1:= temp;
  #L13ad18.  v0:= v0 ^~ v1 @kind int;
  #L13ad1a.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.reflect.WildcardTypeImpl` v1 @kind this) @signature `Lkotlin/reflect/WildcardTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13adc8.  call temp:= `getTypeName`(v1) @signature `Lkotlin/reflect/WildcardTypeImpl;.getTypeName:()Ljava/lang/String;` @kind virtual;
  #L13adce.  v0:= temp @kind object;
  #L13add0.  return v0 @kind object;
}
