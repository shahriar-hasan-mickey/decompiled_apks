record `kotlin.reflect.c` @kind class @AccessFlag FINAL extends `java.lang.reflect.TypeVariable` @kind interface, `java.lang.reflect.Type` @kind interface {
  `kotlin.reflect.KTypeParameter` `kotlin.reflect.c.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.reflect.c` v1 @kind this, `kotlin.reflect.KTypeParameter` v2 @kind object) @signature `Lkotlin/reflect/c;.<init>:(Lkotlin/reflect/KTypeParameter;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L13a638.  v0:= "typeParameter" @kind object;
  #L13a63c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13a642.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13a648.  v1.`kotlin.reflect.c.a` @type ^`kotlin.reflect.KTypeParameter` := v2 @kind object;
  #L13a64c.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.reflect.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/reflect/c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13a480.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L13a484.  if v0 == 0 then goto L13a4b4;
  #L13a488.  call temp:= `getName`(v1) @signature `Lkotlin/reflect/c;.getName:()Ljava/lang/String;` @kind virtual;
  #L13a48e.  v0:= temp @kind object;
  #L13a490.  v2:= (`java.lang.reflect.TypeVariable`) v2 @kind object;
  #L13a494.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L13a49a.  v2:= temp @kind object;
  #L13a49c.  call temp:= `areEqual`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L13a4a2.  v2:= temp;
  #L13a4a4.  if v2 != 0 then goto L13a4aa;
  #L13a4a8.  goto L13a4b4;
  #L13a4aa.  call temp:= `getGenericDeclaration`(v1) @signature `Lkotlin/reflect/c;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind virtual;
  #L13a4b0.  v2:= 0I;
  #L13a4b2.  throw v2;
  #L13a4b4.  v2:= 0I;
  #L13a4b6.  return v2;
}
procedure `java.lang.reflect.Type`[] `getBounds`(`kotlin.reflect.c` v4 @kind this) @signature `Lkotlin/reflect/c;.getBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13a5ac.  v0:= v4.`kotlin.reflect.c.a` @type ^`kotlin.reflect.KTypeParameter` @kind object;
  #L13a5b0.  call temp:= `getUpperBounds`(v0) @signature `Lkotlin/reflect/KTypeParameter;.getUpperBounds:()Ljava/util/List;` @kind interface;
  #L13a5b6.  v0:= temp @kind object;
  #L13a5b8.  v1:= new `java.util.ArrayList`;
  #L13a5bc.  v2:= 10I;
  #L13a5c0.  call temp:= `collectionSizeOrDefault`(v0, v2) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L13a5c6.  v2:= temp;
  #L13a5c8.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L13a5ce.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13a5d4.  v0:= temp @kind object;
  #L13a5d6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13a5dc.  v2:= temp;
  #L13a5de.  if v2 == 0 then goto L13a600;
  #L13a5e2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13a5e8.  v2:= temp @kind object;
  #L13a5ea.  v2:= (`kotlin.reflect.KType`) v2 @kind object;
  #L13a5ee.  v3:= 1I;
  #L13a5f0.  call temp:= `access$computeJavaType`(v2, v3) @signature `Lkotlin/reflect/TypesJVMKt;.access$computeJavaType:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L13a5f6.  v2:= temp @kind object;
  #L13a5f8.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L13a5fe.  goto L13a5d6;
  #L13a600.  v0:= 0I;
  #L13a602.  v0:= new `java.lang.reflect.Type`[v0];
  #L13a606.  call temp:= `toArray`(v1, v0) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L13a60c.  v0:= temp @kind object;
  #L13a60e.  if v0 == 0 then goto L13a618;
  #L13a612.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L13a616.  return v0 @kind object;
  #L13a618.  v0:= new `java.lang.NullPointerException`;
  #L13a61c.  v1:= "null cannot be cast to non-null type kotlin.Array<T>" @kind object;
  #L13a620.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13a626.  throw v0;
}
procedure `java.lang.reflect.GenericDeclaration` `getGenericDeclaration`(`kotlin.reflect.c` v4 @kind this) @signature `Lkotlin/reflect/c;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13a548.  v0:= new `java.lang.StringBuilder`;
  #L13a54c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13a552.  v1:= "getGenericDeclaration() is not yet supported for type variables created from KType: " @kind object;
  #L13a556.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a55c.  v1:= v4.`kotlin.reflect.c.a` @type ^`kotlin.reflect.KTypeParameter` @kind object;
  #L13a560.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a566.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13a56c.  v0:= temp @kind object;
  #L13a56e.  v1:= new `kotlin.NotImplementedError`;
  #L13a572.  v2:= new `java.lang.StringBuilder`;
  #L13a576.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13a57c.  v3:= "An operation is not implemented: " @kind object;
  #L13a580.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a586.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a58c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13a592.  v0:= temp @kind object;
  #L13a594.  call `<init>`(v1, v0) @signature `Lkotlin/NotImplementedError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13a59a.  throw v1;
}
procedure `java.lang.String` `getName`(`kotlin.reflect.c` v1 @kind this) @signature `Lkotlin/reflect/c;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13a4f0.  v0:= v1.`kotlin.reflect.c.a` @type ^`kotlin.reflect.KTypeParameter` @kind object;
  #L13a4f4.  call temp:= `getName`(v0) @signature `Lkotlin/reflect/KTypeParameter;.getName:()Ljava/lang/String;` @kind interface;
  #L13a4fa.  v0:= temp @kind object;
  #L13a4fc.  return v0 @kind object;
}
procedure `java.lang.String` `getTypeName`(`kotlin.reflect.c` v1 @kind this) @signature `Lkotlin/reflect/c;.getTypeName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13a510.  call temp:= `getName`(v1) @signature `Lkotlin/reflect/c;.getName:()Ljava/lang/String;` @kind virtual;
  #L13a516.  v0:= temp @kind object;
  #L13a518.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.reflect.c` v1 @kind this) @signature `Lkotlin/reflect/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13a4c8.  call temp:= `getName`(v1) @signature `Lkotlin/reflect/c;.getName:()Ljava/lang/String;` @kind virtual;
  #L13a4ce.  v0:= temp @kind object;
  #L13a4d0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L13a4d6.  call temp:= `getGenericDeclaration`(v1) @signature `Lkotlin/reflect/c;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind virtual;
  #L13a4dc.  v0:= 0I;
  #L13a4de.  throw v0;
}
procedure `java.lang.String` `toString`(`kotlin.reflect.c` v1 @kind this) @signature `Lkotlin/reflect/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13a52c.  call temp:= `getTypeName`(v1) @signature `Lkotlin/reflect/c;.getTypeName:()Ljava/lang/String;` @kind virtual;
  #L13a532.  v0:= temp @kind object;
  #L13a534.  return v0 @kind object;
}
