record `kotlin.reflect.TypesJVMKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.reflect.Type` `a`(`kotlin.reflect.KType` v3 @kind object, `boolean` v4 ) @signature `Lkotlin/reflect/TypesJVMKt;.a:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13a894.  call temp:= `getClassifier`(v3) @signature `Lkotlin/reflect/KType;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind interface;
  #L13a89a.  v0:= temp @kind object;
  #L13a89c.  v1:= instanceof @variable v0 @type ^`kotlin.reflect.KTypeParameter` @kind boolean;
  #L13a8a0.  if v1 == 0 then goto L13a8b4;
  #L13a8a4.  v3:= new `kotlin.reflect.c`;
  #L13a8a8.  v0:= (`kotlin.reflect.KTypeParameter`) v0 @kind object;
  #L13a8ac.  call `<init>`(v3, v0) @signature `Lkotlin/reflect/c;.<init>:(Lkotlin/reflect/KTypeParameter;)V` @kind direct;
  #L13a8b2.  return v3 @kind object;
  #L13a8b4.  v1:= instanceof @variable v0 @type ^`kotlin.reflect.KClass` @kind boolean;
  #L13a8b8.  if v1 == 0 then goto L13a9ce;
  #L13a8bc.  v0:= (`kotlin.reflect.KClass`) v0 @kind object;
  #L13a8c0.  if v4 == 0 then goto L13a8ce;
  #L13a8c4.  call temp:= `getJavaObjectType`(v0) @signature `Lkotlin/jvm/JvmClassMappingKt;.getJavaObjectType:(Lkotlin/reflect/KClass;)Ljava/lang/Class;` @kind static;
  #L13a8ca.  v4:= temp @kind object;
  #L13a8cc.  goto L13a8d6;
  #L13a8ce.  call temp:= `getJavaClass`(v0) @signature `Lkotlin/jvm/JvmClassMappingKt;.getJavaClass:(Lkotlin/reflect/KClass;)Ljava/lang/Class;` @kind static;
  #L13a8d4.  v4:= temp @kind object;
  #L13a8d6.  call temp:= `getArguments`(v3) @signature `Lkotlin/reflect/KType;.getArguments:()Ljava/util/List;` @kind interface;
  #L13a8dc.  v0:= temp @kind object;
  #L13a8de.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L13a8e4.  v1:= temp;
  #L13a8e6.  if v1 == 0 then goto L13a8ec;
  #L13a8ea.  return v4 @kind object;
  #L13a8ec.  call temp:= `isArray`(v4) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L13a8f2.  v1:= temp;
  #L13a8f4.  if v1 == 0 then goto L13a9c4;
  #L13a8f8.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L13a8fe.  v1:= temp @kind object;
  #L13a900.  v2:= "jClass.componentType" @kind object;
  #L13a904.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13a90a.  call temp:= `isPrimitive`(v1) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L13a910.  v1:= temp;
  #L13a912.  if v1 == 0 then goto L13a918;
  #L13a916.  return v4 @kind object;
  #L13a918.  call temp:= `singleOrNull`(v0) @signature `Lkotlin/collections/CollectionsKt;.singleOrNull:(Ljava/util/List;)Ljava/lang/Object;` @kind static;
  #L13a91e.  v0:= temp @kind object;
  #L13a920.  v0:= (`kotlin.reflect.KTypeProjection`) v0 @kind object;
  #L13a924.  if v0 == 0 then goto L13a996;
  #L13a928.  call temp:= `component1`(v0) @signature `Lkotlin/reflect/KTypeProjection;.component1:()Lkotlin/reflect/KVariance;` @kind virtual;
  #L13a92e.  v3:= temp @kind object;
  #L13a930.  call temp:= `component2`(v0) @signature `Lkotlin/reflect/KTypeProjection;.component2:()Lkotlin/reflect/KType;` @kind virtual;
  #L13a936.  v0:= temp @kind object;
  #L13a938.  if v3 != 0 then goto L13a93e;
  #L13a93c.  goto L13a994;
  #L13a93e.  v1:= `@@kotlin.reflect.TypesJVMKt$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L13a942.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L13a948.  v3:= temp;
  #L13a94a.  v3:= v1[v3];
  #L13a94e.  v1:= 1I;
  #L13a950.  if v3 == v1 then goto L13a994;
  #L13a954.  v2:= 2I;
  #L13a956.  if v3 == v2 then goto L13a96e;
  #L13a95a.  v2:= 3I;
  #L13a95c.  if v3 != v2 then goto L13a962;
  #L13a960.  goto L13a96e;
  #L13a962.  v3:= new `kotlin.NoWhenBranchMatchedException`;
  #L13a966.  call `<init>`(v3) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L13a96c.  throw v3;
  #L13a96e.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L13a974.  v3:= 0I;
  #L13a976.  v2:= 0I;
  #L13a978.  call temp:= `b`(v0, v3, v1, v2) @signature `Lkotlin/reflect/TypesJVMKt;.b:(Lkotlin/reflect/KType;ZILjava/lang/Object;)Ljava/lang/reflect/Type;` @kind static;
  #L13a97e.  v3:= temp @kind object;
  #L13a980.  v0:= instanceof @variable v3 @type ^`java.lang.Class` @kind boolean;
  #L13a984.  if v0 == 0 then goto L13a98a;
  #L13a988.  goto L13a994;
  #L13a98a.  v4:= new `kotlin.reflect.a`;
  #L13a98e.  call `<init>`(v4, v3) @signature `Lkotlin/reflect/a;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L13a994.  return v4 @kind object;
  #L13a996.  v4:= new `java.lang.IllegalArgumentException`;
  #L13a99a.  v0:= new `java.lang.StringBuilder`;
  #L13a99e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13a9a4.  v1:= "kotlin.Array must have exactly one type argument: " @kind object;
  #L13a9a8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a9ae.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a9b4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13a9ba.  v3:= temp @kind object;
  #L13a9bc.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13a9c2.  throw v4;
  #L13a9c4.  call temp:= `c`(v4, v0) @signature `Lkotlin/reflect/TypesJVMKt;.c:(Ljava/lang/Class;Ljava/util/List;)Ljava/lang/reflect/Type;` @kind static;
  #L13a9ca.  v3:= temp @kind object;
  #L13a9cc.  return v3 @kind object;
  #L13a9ce.  v4:= new `java.lang.UnsupportedOperationException`;
  #L13a9d2.  v0:= new `java.lang.StringBuilder`;
  #L13a9d6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13a9dc.  v1:= "Unsupported type classifier: " @kind object;
  #L13a9e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a9e6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a9ec.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13a9f2.  v3:= temp @kind object;
  #L13a9f4.  call `<init>`(v4, v3) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13a9fa.  throw v4;
}
procedure `java.lang.reflect.Type` `access$computeJavaType`(`kotlin.reflect.KType` v0 @kind object, `boolean` v1 ) @signature `Lkotlin/reflect/TypesJVMKt;.access$computeJavaType:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L13a854.  call temp:= `a`(v0, v1) @signature `Lkotlin/reflect/TypesJVMKt;.a:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L13a85a.  v0:= temp @kind object;
  #L13a85c.  return v0 @kind object;
}
procedure `java.lang.String` `access$typeToString`(`java.lang.reflect.Type` v0 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.access$typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L13a79c.  call temp:= `e`(v0) @signature `Lkotlin/reflect/TypesJVMKt;.e:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L13a7a2.  v0:= temp @kind object;
  #L13a7a4.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `b`(`kotlin.reflect.KType` v0 @kind object, `boolean` v1 , `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.b:(Lkotlin/reflect/KType;ZILjava/lang/Object;)Ljava/lang/reflect/Type;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L13a870.  v2:= v2 ^& 1;
  #L13a874.  if v2 == 0 then goto L13a87a;
  #L13a878.  v1:= 0I;
  #L13a87a.  call temp:= `a`(v0, v1) @signature `Lkotlin/reflect/TypesJVMKt;.a:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L13a880.  v0:= temp @kind object;
  #L13a882.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `c`(`java.lang.Class` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.c:(Ljava/lang/Class;Ljava/util/List;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13aa0c.  call temp:= `getDeclaringClass`(v4) @signature `Ljava/lang/Class;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L13aa12.  v0:= temp @kind object;
  #L13aa14.  v1:= 10I;
  #L13aa18.  if v0 == 0 then goto L13aaf8;
  #L13aa1c.  call temp:= `getModifiers`(v4) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L13aa22.  v2:= temp;
  #L13aa24.  call temp:= `isStatic`(v2) @signature `Ljava/lang/reflect/Modifier;.isStatic:(I)Z` @kind static;
  #L13aa2a.  v2:= temp;
  #L13aa2c.  if v2 == 0 then goto L13aa7e;
  #L13aa30.  v2:= new `java.util.ArrayList`;
  #L13aa34.  call temp:= `collectionSizeOrDefault`(v5, v1) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L13aa3a.  v1:= temp;
  #L13aa3c.  call `<init>`(v2, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L13aa42.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13aa48.  v5:= temp @kind object;
  #L13aa4a.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13aa50.  v1:= temp;
  #L13aa52.  if v1 == 0 then goto L13aa72;
  #L13aa56.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13aa5c.  v1:= temp @kind object;
  #L13aa5e.  v1:= (`kotlin.reflect.KTypeProjection`) v1 @kind object;
  #L13aa62.  call temp:= `d`(v1) @signature `Lkotlin/reflect/TypesJVMKt;.d:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/reflect/Type;` @kind static;
  #L13aa68.  v1:= temp @kind object;
  #L13aa6a.  call temp:= `add`(v2, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L13aa70.  goto L13aa4a;
  #L13aa72.  v5:= new `kotlin.reflect.b`;
  #L13aa76.  call `<init>`(v5, v4, v0, v2) @signature `Lkotlin/reflect/b;.<init>:(Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/List;)V` @kind direct;
  #L13aa7c.  return v5 @kind object;
  #L13aa7e.  call temp:= `getTypeParameters`(v4) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L13aa84.  v2:= temp @kind object;
  #L13aa86.  v2:= length @variable v2;
  #L13aa88.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L13aa8e.  v3:= temp;
  #L13aa90.  call temp:= `subList`(v5, v2, v3) @signature `Ljava/util/List;.subList:(II)Ljava/util/List;` @kind interface;
  #L13aa96.  v3:= temp @kind object;
  #L13aa98.  call temp:= `c`(v0, v3) @signature `Lkotlin/reflect/TypesJVMKt;.c:(Ljava/lang/Class;Ljava/util/List;)Ljava/lang/reflect/Type;` @kind static;
  #L13aa9e.  v0:= temp @kind object;
  #L13aaa0.  v3:= 0I;
  #L13aaa2.  call temp:= `subList`(v5, v3, v2) @signature `Ljava/util/List;.subList:(II)Ljava/util/List;` @kind interface;
  #L13aaa8.  v5:= temp @kind object;
  #L13aaaa.  v2:= new `java.util.ArrayList`;
  #L13aaae.  call temp:= `collectionSizeOrDefault`(v5, v1) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L13aab4.  v1:= temp;
  #L13aab6.  call `<init>`(v2, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L13aabc.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13aac2.  v5:= temp @kind object;
  #L13aac4.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13aaca.  v1:= temp;
  #L13aacc.  if v1 == 0 then goto L13aaec;
  #L13aad0.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13aad6.  v1:= temp @kind object;
  #L13aad8.  v1:= (`kotlin.reflect.KTypeProjection`) v1 @kind object;
  #L13aadc.  call temp:= `d`(v1) @signature `Lkotlin/reflect/TypesJVMKt;.d:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/reflect/Type;` @kind static;
  #L13aae2.  v1:= temp @kind object;
  #L13aae4.  call temp:= `add`(v2, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L13aaea.  goto L13aac4;
  #L13aaec.  v5:= new `kotlin.reflect.b`;
  #L13aaf0.  call `<init>`(v5, v4, v0, v2) @signature `Lkotlin/reflect/b;.<init>:(Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/List;)V` @kind direct;
  #L13aaf6.  return v5 @kind object;
  #L13aaf8.  v0:= 0I;
  #L13aafa.  v2:= new `java.util.ArrayList`;
  #L13aafe.  call temp:= `collectionSizeOrDefault`(v5, v1) @signature `Lkotlin/collections/CollectionsKt;.collectionSizeOrDefault:(Ljava/lang/Iterable;I)I` @kind static;
  #L13ab04.  v1:= temp;
  #L13ab06.  call `<init>`(v2, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L13ab0c.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13ab12.  v5:= temp @kind object;
  #L13ab14.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13ab1a.  v1:= temp;
  #L13ab1c.  if v1 == 0 then goto L13ab3c;
  #L13ab20.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13ab26.  v1:= temp @kind object;
  #L13ab28.  v1:= (`kotlin.reflect.KTypeProjection`) v1 @kind object;
  #L13ab2c.  call temp:= `d`(v1) @signature `Lkotlin/reflect/TypesJVMKt;.d:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/reflect/Type;` @kind static;
  #L13ab32.  v1:= temp @kind object;
  #L13ab34.  call temp:= `add`(v2, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L13ab3a.  goto L13ab14;
  #L13ab3c.  v5:= new `kotlin.reflect.b`;
  #L13ab40.  call `<init>`(v5, v4, v0, v2) @signature `Lkotlin/reflect/b;.<init>:(Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/List;)V` @kind direct;
  #L13ab46.  return v5 @kind object;
}
procedure `java.lang.reflect.Type` `d`(`kotlin.reflect.KTypeProjection` v4 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.d:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13aba0.  call temp:= `getVariance`(v4) @signature `Lkotlin/reflect/KTypeProjection;.getVariance:()Lkotlin/reflect/KVariance;` @kind virtual;
  #L13aba6.  v0:= temp @kind object;
  #L13aba8.  if v0 == 0 then goto L13ac1c;
  #L13abac.  call temp:= `getType`(v4) @signature `Lkotlin/reflect/KTypeProjection;.getType:()Lkotlin/reflect/KType;` @kind virtual;
  #L13abb2.  v4:= temp @kind object;
  #L13abb4.  call `checkNotNull`(v4) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L13abba.  v1:= `@@kotlin.reflect.TypesJVMKt$WhenMappings.$EnumSwitchMapping$1` @type ^`int`[] @kind object;
  #L13abbe.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L13abc4.  v0:= temp;
  #L13abc6.  v0:= v1[v0];
  #L13abca.  v1:= 1I;
  #L13abcc.  if v0 == v1 then goto L13ac12;
  #L13abd0.  v2:= 2I;
  #L13abd2.  v3:= 0I;
  #L13abd4.  if v0 == v2 then goto L13abfe;
  #L13abd8.  v2:= 3I;
  #L13abda.  if v0 != v2 then goto L13abf2;
  #L13abde.  v0:= new `kotlin.reflect.WildcardTypeImpl`;
  #L13abe2.  call temp:= `a`(v4, v1) @signature `Lkotlin/reflect/TypesJVMKt;.a:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L13abe8.  v4:= temp @kind object;
  #L13abea.  call `<init>`(v0, v4, v3) @signature `Lkotlin/reflect/WildcardTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V` @kind direct;
  #L13abf0.  goto L13ac1a;
  #L13abf2.  v4:= new `kotlin.NoWhenBranchMatchedException`;
  #L13abf6.  call `<init>`(v4) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L13abfc.  throw v4;
  #L13abfe.  v0:= new `kotlin.reflect.WildcardTypeImpl`;
  #L13ac02.  call temp:= `a`(v4, v1) @signature `Lkotlin/reflect/TypesJVMKt;.a:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L13ac08.  v4:= temp @kind object;
  #L13ac0a.  call `<init>`(v0, v3, v4) @signature `Lkotlin/reflect/WildcardTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V` @kind direct;
  #L13ac10.  goto L13ac1a;
  #L13ac12.  call temp:= `a`(v4, v1) @signature `Lkotlin/reflect/TypesJVMKt;.a:(Lkotlin/reflect/KType;Z)Ljava/lang/reflect/Type;` @kind static;
  #L13ac18.  v0:= temp @kind object;
  #L13ac1a.  return v0 @kind object;
  #L13ac1c.  v4:= `@@kotlin.reflect.WildcardTypeImpl.d` @type ^`kotlin.reflect.WildcardTypeImpl$Companion` @kind object;
  #L13ac20.  call temp:= `getSTAR`(v4) @signature `Lkotlin/reflect/WildcardTypeImpl$Companion;.getSTAR:()Lkotlin/reflect/WildcardTypeImpl;` @kind virtual;
  #L13ac26.  v4:= temp @kind object;
  #L13ac28.  return v4 @kind object;
}
procedure `java.lang.String` `e`(`java.lang.reflect.Type` v2 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.e:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13a7b8.  v0:= instanceof @variable v2 @type ^`java.lang.Class` @kind boolean;
  #L13a7bc.  if v0 == 0 then goto L13a83a;
  #L13a7c0.  v0:= v2 @kind object;
  #L13a7c2.  v0:= (`java.lang.Class`) v0 @kind object;
  #L13a7c6.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L13a7cc.  v1:= temp;
  #L13a7ce.  if v1 == 0 then goto L13a826;
  #L13a7d2.  v0:= `@@kotlin.reflect.TypesJVMKt$a.h` @type ^`kotlin.reflect.TypesJVMKt$a` @kind object;
  #L13a7d6.  call temp:= `generateSequence`(v2, v0) @signature `Lkotlin/sequences/SequencesKt;.generateSequence:(Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L13a7dc.  v2:= temp @kind object;
  #L13a7de.  v0:= new `java.lang.StringBuilder`;
  #L13a7e2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13a7e8.  call temp:= `last`(v2) @signature `Lkotlin/sequences/SequencesKt;.last:(Lkotlin/sequences/Sequence;)Ljava/lang/Object;` @kind static;
  #L13a7ee.  v1:= temp @kind object;
  #L13a7f0.  v1:= (`java.lang.Class`) v1 @kind object;
  #L13a7f4.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L13a7fa.  v1:= temp @kind object;
  #L13a7fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a802.  call temp:= `count`(v2) @signature `Lkotlin/sequences/SequencesKt;.count:(Lkotlin/sequences/Sequence;)I` @kind static;
  #L13a808.  v2:= temp;
  #L13a80a.  v1:= "[]" @kind object;
  #L13a80e.  call temp:= `repeat`(v1, v2) @signature `Lkotlin/text/StringsKt;.repeat:(Ljava/lang/CharSequence;I)Ljava/lang/String;` @kind static;
  #L13a814.  v2:= temp @kind object;
  #L13a816.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a81c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13a822.  v2:= temp @kind object;
  #L13a824.  goto L13a82e;
  #L13a826.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L13a82c.  v2:= temp @kind object;
  #L13a82e.  v0:= "if (type.isArray) {\n    …\n        } else type.name" @kind object;
  #L13a832.  call `checkNotNullExpressionValue`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13a838.  goto L13a842;
  #L13a83a.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L13a840.  v2:= temp @kind object;
  #L13a842.  return v2 @kind object;
}
procedure `java.lang.reflect.Type` `getJavaType`(`kotlin.reflect.KType` v3 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.getJavaType:(Lkotlin/reflect/KType;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13ab58.  v0:= "$this$javaType" @kind object;
  #L13ab5c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ab62.  v0:= instanceof @variable v3 @type ^`kotlin.jvm.internal.KTypeBase` @kind boolean;
  #L13ab66.  if v0 == 0 then goto L13ab7e;
  #L13ab6a.  v0:= v3 @kind object;
  #L13ab6c.  v0:= (`kotlin.jvm.internal.KTypeBase`) v0 @kind object;
  #L13ab70.  call temp:= `getJavaType`(v0) @signature `Lkotlin/jvm/internal/KTypeBase;.getJavaType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13ab76.  v0:= temp @kind object;
  #L13ab78.  if v0 == 0 then goto L13ab7e;
  #L13ab7c.  return v0 @kind object;
  #L13ab7e.  v0:= 0I;
  #L13ab80.  v1:= 1I;
  #L13ab82.  v2:= 0I;
  #L13ab84.  call temp:= `b`(v3, v0, v1, v2) @signature `Lkotlin/reflect/TypesJVMKt;.b:(Lkotlin/reflect/KType;ZILjava/lang/Object;)Ljava/lang/reflect/Type;` @kind static;
  #L13ab8a.  v3:= temp @kind object;
  #L13ab8c.  return v3 @kind object;
}
procedure `void` `getJavaType$annotations`(`kotlin.reflect.KType` v0 @kind object) @signature `Lkotlin/reflect/TypesJVMKt;.getJavaType$annotations:(Lkotlin/reflect/KType;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L13ac3c.  return @kind void;
}
