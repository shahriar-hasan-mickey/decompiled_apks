record `kotlin.reflect.KTypeProjection` @kind class @AccessFlag PUBLIC_FINAL {
  `kotlin.reflect.KVariance` `kotlin.reflect.KTypeProjection.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.reflect.KType` `kotlin.reflect.KTypeProjection.b` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.reflect.KTypeProjection$Companion` `@@kotlin.reflect.KTypeProjection.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.reflect.KTypeProjection` `@@kotlin.reflect.KTypeProjection.star` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/reflect/KTypeProjection;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L139f38.  v0:= new `kotlin.reflect.KTypeProjection$Companion`;
  #L139f3c.  v1:= 0I;
  #L139f3e.  call `<init>`(v0, v1) @signature `Lkotlin/reflect/KTypeProjection$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L139f44.  `@@kotlin.reflect.KTypeProjection.Companion` @type ^`kotlin.reflect.KTypeProjection$Companion` := v0 @kind object;
  #L139f48.  v0:= new `kotlin.reflect.KTypeProjection`;
  #L139f4c.  call `<init>`(v0, v1, v1) @signature `Lkotlin/reflect/KTypeProjection;.<init>:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)V` @kind direct;
  #L139f52.  `@@kotlin.reflect.KTypeProjection.star` @type ^`kotlin.reflect.KTypeProjection` := v0 @kind object;
  #L139f56.  return @kind void;
}
procedure `void` `<init>`(`kotlin.reflect.KTypeProjection` v2 @kind this, `kotlin.reflect.KVariance` v3 @kind object, `kotlin.reflect.KType` v4 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.<init>:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L139f68.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L139f6e.  v2.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` := v3 @kind object;
  #L139f72.  v2.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` := v4 @kind object;
  #L139f76.  v4:= 1I;
  #L139f78.  v0:= 0I;
  #L139f7a.  if v3 != 0 then goto L139f82;
  #L139f7e.  v3:= 1I;
  #L139f80.  goto L139f84;
  #L139f82.  v3:= 0I;
  #L139f84.  v1:= v2.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L139f88.  if v1 != 0 then goto L139f90;
  #L139f8c.  v1:= 1I;
  #L139f8e.  goto L139f92;
  #L139f90.  v1:= 0I;
  #L139f92.  if v3 != v1 then goto L139f98;
  #L139f96.  goto L139f9a;
  #L139f98.  v4:= 0I;
  #L139f9a.  if v4 != 0 then goto L139ff0;
  #L139f9e.  v3:= v2.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` @kind object;
  #L139fa2.  if v3 != 0 then goto L139fac;
  #L139fa6.  v3:= "Star projection must have no type specified." @kind object;
  #L139faa.  goto L139fdc;
  #L139fac.  v3:= new `java.lang.StringBuilder`;
  #L139fb0.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L139fb6.  v4:= "The projection variance " @kind object;
  #L139fba.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L139fc0.  v4:= v2.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` @kind object;
  #L139fc4.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L139fca.  v4:= " requires type to be specified." @kind object;
  #L139fce.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L139fd4.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L139fda.  v3:= temp @kind object;
  #L139fdc.  v4:= new `java.lang.IllegalArgumentException`;
  #L139fe0.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L139fe6.  v3:= temp @kind object;
  #L139fe8.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L139fee.  throw v4;
  #L139ff0.  return @kind void;
}
procedure `kotlin.reflect.KTypeProjection` `contravariant`(`kotlin.reflect.KType` v1 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.contravariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L139e58.  v0:= `@@kotlin.reflect.KTypeProjection.Companion` @type ^`kotlin.reflect.KTypeProjection$Companion` @kind object;
  #L139e5c.  call temp:= `contravariant`(v0, v1) @signature `Lkotlin/reflect/KTypeProjection$Companion;.contravariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @kind virtual;
  #L139e62.  v1:= temp @kind object;
  #L139e64.  return v1 @kind object;
}
procedure `kotlin.reflect.KTypeProjection` `copy$default`(`kotlin.reflect.KTypeProjection` v0 @kind object, `kotlin.reflect.KVariance` v1 @kind object, `kotlin.reflect.KType` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.copy$default:(Lkotlin/reflect/KTypeProjection;Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;ILjava/lang/Object;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L139e78.  v4:= v3 ^& 1;
  #L139e7c.  if v4 == 0 then goto L139e84;
  #L139e80.  v1:= v0.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` @kind object;
  #L139e84.  v3:= v3 ^& 2;
  #L139e88.  if v3 == 0 then goto L139e90;
  #L139e8c.  v2:= v0.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L139e90.  call temp:= `copy`(v0, v1, v2) @signature `Lkotlin/reflect/KTypeProjection;.copy:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @kind virtual;
  #L139e96.  v0:= temp @kind object;
  #L139e98.  return v0 @kind object;
}
procedure `kotlin.reflect.KTypeProjection` `covariant`(`kotlin.reflect.KType` v1 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.covariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L139ec8.  v0:= `@@kotlin.reflect.KTypeProjection.Companion` @type ^`kotlin.reflect.KTypeProjection$Companion` @kind object;
  #L139ecc.  call temp:= `covariant`(v0, v1) @signature `Lkotlin/reflect/KTypeProjection$Companion;.covariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @kind virtual;
  #L139ed2.  v1:= temp @kind object;
  #L139ed4.  return v1 @kind object;
}
procedure `kotlin.reflect.KTypeProjection` `invariant`(`kotlin.reflect.KType` v1 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.invariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L139ee8.  v0:= `@@kotlin.reflect.KTypeProjection.Companion` @type ^`kotlin.reflect.KTypeProjection$Companion` @kind object;
  #L139eec.  call temp:= `invariant`(v0, v1) @signature `Lkotlin/reflect/KTypeProjection$Companion;.invariant:(Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @kind virtual;
  #L139ef2.  v1:= temp @kind object;
  #L139ef4.  return v1 @kind object;
}
procedure `kotlin.reflect.KVariance` `component1`(`kotlin.reflect.KTypeProjection` v1 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.component1:()Lkotlin/reflect/KVariance;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L139f08.  v0:= v1.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` @kind object;
  #L139f0c.  return v0 @kind object;
}
procedure `kotlin.reflect.KType` `component2`(`kotlin.reflect.KTypeProjection` v1 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.component2:()Lkotlin/reflect/KType;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L139e28.  v0:= v1.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L139e2c.  return v0 @kind object;
}
procedure `kotlin.reflect.KTypeProjection` `copy`(`kotlin.reflect.KTypeProjection` v1 @kind this, `kotlin.reflect.KVariance` v2 @kind object, `kotlin.reflect.KType` v3 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.copy:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)Lkotlin/reflect/KTypeProjection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L139eac.  v0:= new `kotlin.reflect.KTypeProjection`;
  #L139eb0.  call `<init>`(v0, v2, v3) @signature `Lkotlin/reflect/KTypeProjection;.<init>:(Lkotlin/reflect/KVariance;Lkotlin/reflect/KType;)V` @kind direct;
  #L139eb6.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlin.reflect.KTypeProjection` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/reflect/KTypeProjection;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L139ce8.  if v2 == v3 then goto L139d26;
  #L139cec.  v0:= instanceof @variable v3 @type ^`kotlin.reflect.KTypeProjection` @kind boolean;
  #L139cf0.  if v0 == 0 then goto L139d22;
  #L139cf4.  v3:= (`kotlin.reflect.KTypeProjection`) v3 @kind object;
  #L139cf8.  v0:= v2.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` @kind object;
  #L139cfc.  v1:= v3.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` @kind object;
  #L139d00.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L139d06.  v0:= temp;
  #L139d08.  if v0 == 0 then goto L139d22;
  #L139d0c.  v0:= v2.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L139d10.  v3:= v3.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L139d14.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L139d1a.  v3:= temp;
  #L139d1c.  if v3 == 0 then goto L139d22;
  #L139d20.  goto L139d26;
  #L139d22.  v3:= 0I;
  #L139d24.  return v3;
  #L139d26.  v3:= 1I;
  #L139d28.  return v3;
}
procedure `kotlin.reflect.KType` `getType`(`kotlin.reflect.KTypeProjection` v1 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.getType:()Lkotlin/reflect/KType;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L139e40.  v0:= v1.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L139e44.  return v0 @kind object;
}
procedure `kotlin.reflect.KVariance` `getVariance`(`kotlin.reflect.KTypeProjection` v1 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.getVariance:()Lkotlin/reflect/KVariance;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L139f20.  v0:= v1.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` @kind object;
  #L139f24.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.reflect.KTypeProjection` v3 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L139d3c.  v0:= v3.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` @kind object;
  #L139d40.  v1:= 0I;
  #L139d42.  if v0 == 0 then goto L139d50;
  #L139d46.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L139d4c.  v0:= temp;
  #L139d4e.  goto L139d52;
  #L139d50.  v0:= 0I;
  #L139d52.  v0:= v0 * 31;
  #L139d56.  v2:= v3.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L139d5a.  if v2 == 0 then goto L139d66;
  #L139d5e.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L139d64.  v1:= temp;
  #L139d66.  v0:= v0 + v1 @kind int;
  #L139d68.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.reflect.KTypeProjection` v2 @kind this) @signature `Lkotlin/reflect/KTypeProjection;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L139d7c.  v0:= v2.`kotlin.reflect.KTypeProjection.a` @type ^`kotlin.reflect.KVariance` @kind object;
  #L139d80.  if v0 != 0 then goto L139d8a;
  #L139d84.  v0:= "*" @kind object;
  #L139d88.  goto L139e14;
  #L139d8a.  v1:= `@@kotlin.reflect.KTypeProjection$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L139d8e.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L139d94.  v0:= temp;
  #L139d96.  v0:= v1[v0];
  #L139d9a.  v1:= 1I;
  #L139d9c.  if v0 == v1 then goto L139e08;
  #L139da0.  v1:= 2I;
  #L139da2.  if v0 == v1 then goto L139de0;
  #L139da6.  v1:= 3I;
  #L139da8.  if v0 != v1 then goto L139dd4;
  #L139dac.  v0:= new `java.lang.StringBuilder`;
  #L139db0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L139db6.  v1:= "out " @kind object;
  #L139dba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L139dc0.  v1:= v2.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L139dc4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L139dca.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L139dd0.  v0:= temp @kind object;
  #L139dd2.  goto L139e14;
  #L139dd4.  v0:= new `kotlin.NoWhenBranchMatchedException`;
  #L139dd8.  call `<init>`(v0) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L139dde.  throw v0;
  #L139de0.  v0:= new `java.lang.StringBuilder`;
  #L139de4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L139dea.  v1:= "in " @kind object;
  #L139dee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L139df4.  v1:= v2.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L139df8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L139dfe.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L139e04.  v0:= temp @kind object;
  #L139e06.  goto L139e14;
  #L139e08.  v0:= v2.`kotlin.reflect.KTypeProjection.b` @type ^`kotlin.reflect.KType` @kind object;
  #L139e0c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L139e12.  v0:= temp @kind object;
  #L139e14.  return v0 @kind object;
}
