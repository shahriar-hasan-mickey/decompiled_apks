record `kotlin.properties.ObservableProperty` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.properties.ReadWriteProperty` @kind interface {
  `java.lang.Object` `kotlin.properties.ObservableProperty.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.properties.ObservableProperty` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/properties/ObservableProperty;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L132d64.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L132d6a.  v0.`kotlin.properties.ObservableProperty.a` @type ^`java.lang.Object` := v1 @kind object;
  #L132d6e.  return @kind void;
}
procedure `void` `afterChange`(`kotlin.properties.ObservableProperty` v0 @kind this, `kotlin.reflect.KProperty` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/properties/ObservableProperty;.afterChange:(Lkotlin/reflect/KProperty;Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L132d80.  v2:= "property" @kind object;
  #L132d84.  call `checkNotNullParameter`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L132d8a.  return @kind void;
}
procedure `boolean` `beforeChange`(`kotlin.properties.ObservableProperty` v0 @kind this, `kotlin.reflect.KProperty` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/properties/ObservableProperty;.beforeChange:(Lkotlin/reflect/KProperty;Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PROTECTED {
    temp;

  #L132d24.  v2:= "property" @kind object;
  #L132d28.  call `checkNotNullParameter`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L132d2e.  v1:= 1I;
  #L132d30.  return v1;
}
procedure `java.lang.Object` `getValue`(`kotlin.properties.ObservableProperty` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.reflect.KProperty` v2 @kind object) @signature `Lkotlin/properties/ObservableProperty;.getValue:(Ljava/lang/Object;Lkotlin/reflect/KProperty;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L132d44.  v1:= "property" @kind object;
  #L132d48.  call `checkNotNullParameter`(v2, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L132d4e.  v1:= v0.`kotlin.properties.ObservableProperty.a` @type ^`java.lang.Object` @kind object;
  #L132d52.  return v1 @kind object;
}
procedure `void` `setValue`(`kotlin.properties.ObservableProperty` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.reflect.KProperty` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlin/properties/ObservableProperty;.setValue:(Ljava/lang/Object;Lkotlin/reflect/KProperty;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L132d9c.  v2:= "property" @kind object;
  #L132da0.  call `checkNotNullParameter`(v3, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L132da6.  v2:= v1.`kotlin.properties.ObservableProperty.a` @type ^`java.lang.Object` @kind object;
  #L132daa.  call temp:= `beforeChange`(v1, v3, v2, v4) @signature `Lkotlin/properties/ObservableProperty;.beforeChange:(Lkotlin/reflect/KProperty;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L132db0.  v0:= temp;
  #L132db2.  if v0 != 0 then goto L132db8;
  #L132db6.  return @kind void;
  #L132db8.  v1.`kotlin.properties.ObservableProperty.a` @type ^`java.lang.Object` := v4 @kind object;
  #L132dbc.  call `afterChange`(v1, v3, v2, v4) @signature `Lkotlin/properties/ObservableProperty;.afterChange:(Lkotlin/reflect/KProperty;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L132dc2.  return @kind void;
}
