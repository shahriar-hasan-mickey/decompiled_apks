record `kotlin.jvm.internal.PrimitiveSpreadBuilder` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `int` `kotlin.jvm.internal.PrimitiveSpreadBuilder.a` @AccessFlag PRIVATE;
  `java.lang.Object`[] `kotlin.jvm.internal.PrimitiveSpreadBuilder.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.jvm.internal.PrimitiveSpreadBuilder.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v0 @kind this, `int` v1 ) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L130060.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L130066.  v0.`kotlin.jvm.internal.PrimitiveSpreadBuilder.c` @type ^`int` := v1;
  #L13006a.  v1:= new `java.lang.Object`[v1];
  #L13006e.  v0.`kotlin.jvm.internal.PrimitiveSpreadBuilder.b` @type ^`java.lang.Object`[] := v1 @kind object;
  #L130072.  return @kind void;
}
procedure `void` `addSpread`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.addSpread:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L130084.  v0:= "spreadArgument" @kind object;
  #L130088.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13008e.  v0:= v3.`kotlin.jvm.internal.PrimitiveSpreadBuilder.b` @type ^`java.lang.Object`[] @kind object;
  #L130092.  v1:= v3.`kotlin.jvm.internal.PrimitiveSpreadBuilder.a` @type ^`int`;
  #L130096.  v2:= v1 + 1;
  #L13009a.  v3.`kotlin.jvm.internal.PrimitiveSpreadBuilder.a` @type ^`int` := v2;
  #L13009e.  v0[v1]:= v4 @kind object;
  #L1300a2.  return @kind void;
}
procedure `int` `getPosition`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v1 @kind this) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getPosition:()I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L12ff74.  v0:= v1.`kotlin.jvm.internal.PrimitiveSpreadBuilder.a` @type ^`int`;
  #L12ff78.  return v0;
}
procedure `int` `getSize`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getSize:(Ljava/lang/Object;)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `setPosition`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v0 @kind this, `int` v1 ) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.setPosition:(I)V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L1300b4.  v0.`kotlin.jvm.internal.PrimitiveSpreadBuilder.a` @type ^`int` := v1;
  #L1300b8.  return @kind void;
}
procedure `int` `size`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v5 @kind this) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.size:()I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L12ff8c.  v0:= v5.`kotlin.jvm.internal.PrimitiveSpreadBuilder.c` @type ^`int`;
  #L12ff90.  v1:= 1I;
  #L12ff92.  v0:= v0 - v1 @kind int;
  #L12ff94.  v2:= 0I;
  #L12ff96.  if v0 < 0 then goto L12ffc0;
  #L12ff9a.  v3:= 0I;
  #L12ff9c.  v4:= v5.`kotlin.jvm.internal.PrimitiveSpreadBuilder.b` @type ^`java.lang.Object`[] @kind object;
  #L12ffa0.  v4:= v4[v3] @kind object;
  #L12ffa4.  if v4 == 0 then goto L12ffb2;
  #L12ffa8.  call temp:= `getSize`(v5, v4) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L12ffae.  v4:= temp;
  #L12ffb0.  goto L12ffb4;
  #L12ffb2.  v4:= 1I;
  #L12ffb4.  v2:= v2 + v4 @kind int;
  #L12ffb6.  if v3 == v0 then goto L12ffc0;
  #L12ffba.  v3:= v3 + 1;
  #L12ffbe.  goto L12ff9c;
  #L12ffc0.  return v2;
}
procedure `java.lang.Object` `toArray`(`kotlin.jvm.internal.PrimitiveSpreadBuilder` v7 @kind this, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.toArray:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L12ffd4.  v0:= "values" @kind object;
  #L12ffd8.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12ffde.  v0:= "result" @kind object;
  #L12ffe2.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12ffe8.  v0:= v7.`kotlin.jvm.internal.PrimitiveSpreadBuilder.c` @type ^`int`;
  #L12ffec.  v0:= v0 + -1;
  #L12fff0.  v1:= 0I;
  #L12fff2.  if v0 < 0 then goto L13003a;
  #L12fff6.  v2:= 0I;
  #L12fff8.  v3:= 0I;
  #L12fffa.  v4:= 0I;
  #L12fffc.  v5:= v7.`kotlin.jvm.internal.PrimitiveSpreadBuilder.b` @type ^`java.lang.Object`[] @kind object;
  #L130000.  v5:= v5[v2] @kind object;
  #L130004.  if v5 == 0 then goto L13002c;
  #L130008.  if v3 >= v2 then goto L130018;
  #L13000c.  v6:= v2 - v3 @kind int;
  #L130010.  call `arraycopy`(v8, v3, v9, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L130016.  v4:= v4 + v6 @kind int;
  #L130018.  call temp:= `getSize`(v7, v5) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getSize:(Ljava/lang/Object;)I` @kind virtual;
  #L13001e.  v3:= temp;
  #L130020.  call `arraycopy`(v5, v1, v9, v4, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L130026.  v4:= v4 + v3 @kind int;
  #L130028.  v3:= v2 + 1;
  #L13002c.  if v2 == v0 then goto L130036;
  #L130030.  v2:= v2 + 1;
  #L130034.  goto L12fffc;
  #L130036.  v1:= v3;
  #L130038.  goto L13003c;
  #L13003a.  v4:= 0I;
  #L13003c.  v0:= v7.`kotlin.jvm.internal.PrimitiveSpreadBuilder.c` @type ^`int`;
  #L130040.  if v1 >= v0 then goto L13004c;
  #L130044.  v0:= v0 - v1 @kind int;
  #L130046.  call `arraycopy`(v8, v1, v9, v4, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L13004c.  return v9 @kind object;
}
