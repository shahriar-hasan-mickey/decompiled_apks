record `kotlin.jvm.internal.CallableReference` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.reflect.KCallable` @kind interface, `java.io.Serializable` @kind interface {
  `kotlin.reflect.KCallable` `kotlin.jvm.internal.CallableReference.a` @AccessFlag PRIVATE_TRANSIENT;
  `java.lang.Class` `kotlin.jvm.internal.CallableReference.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `kotlin.jvm.internal.CallableReference.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `kotlin.jvm.internal.CallableReference.d` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.jvm.internal.CallableReference.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `kotlin.jvm.internal.CallableReference.receiver` @AccessFlag PROTECTED_FINAL;
}
global `java.lang.Object` `@@kotlin.jvm.internal.CallableReference.NO_RECEIVER` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/jvm/internal/CallableReference;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L12c544.  call temp:= `a`() @signature `Lkotlin/jvm/internal/CallableReference$a;.a:()Lkotlin/jvm/internal/CallableReference$a;` @kind static;
  #L12c54a.  v0:= temp @kind object;
  #L12c54c.  `@@kotlin.jvm.internal.CallableReference.NO_RECEIVER` @type ^`java.lang.Object` := v0 @kind object;
  #L12c550.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L12c564.  v0:= `@@kotlin.jvm.internal.CallableReference.NO_RECEIVER` @type ^`java.lang.Object` @kind object;
  #L12c568.  call `<init>`(v1, v0) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L12c56e.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.CallableReference` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L12c580.  v2:= 0I;
  #L12c582.  v3:= 0I;
  #L12c584.  v4:= 0I;
  #L12c586.  v5:= 0I;
  #L12c588.  v0:= v6 @kind object;
  #L12c58a.  v1:= v7 @kind object;
  #L12c58c.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Z)V` @kind direct;
  #L12c592.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.CallableReference` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object, `boolean` v5 ) @signature `Lkotlin/jvm/internal/CallableReference;.<init>:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Z)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L12c5a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L12c5aa.  v0.`kotlin.jvm.internal.CallableReference.receiver` @type ^`java.lang.Object` := v1 @kind object;
  #L12c5ae.  v0.`kotlin.jvm.internal.CallableReference.b` @type ^`java.lang.Class` := v2 @kind object;
  #L12c5b2.  v0.`kotlin.jvm.internal.CallableReference.c` @type ^`java.lang.String` := v3 @kind object;
  #L12c5b6.  v0.`kotlin.jvm.internal.CallableReference.d` @type ^`java.lang.String` := v4 @kind object;
  #L12c5ba.  v0.`kotlin.jvm.internal.CallableReference.e` @type ^`boolean` := v5 @kind boolean;
  #L12c5be.  return @kind void;
}
procedure `java.lang.Object` `call`(`kotlin.jvm.internal.CallableReference` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/jvm/internal/CallableReference;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c374.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L12c37a.  v0:= temp @kind object;
  #L12c37c.  call temp:= `call`(v0, v2) @signature `Lkotlin/reflect/KCallable;.call:([Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L12c382.  v2:= temp @kind object;
  #L12c384.  return v2 @kind object;
}
procedure `java.lang.Object` `callBy`(`kotlin.jvm.internal.CallableReference` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lkotlin/jvm/internal/CallableReference;.callBy:(Ljava/util/Map;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c398.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L12c39e.  v0:= temp @kind object;
  #L12c3a0.  call temp:= `callBy`(v0, v2) @signature `Lkotlin/reflect/KCallable;.callBy:(Ljava/util/Map;)Ljava/lang/Object;` @kind interface;
  #L12c3a6.  v2:= temp @kind object;
  #L12c3a8.  return v2 @kind object;
}
procedure `kotlin.reflect.KCallable` `compute`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.compute:()Lkotlin/reflect/KCallable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c470.  v0:= v1.`kotlin.jvm.internal.CallableReference.a` @type ^`kotlin.reflect.KCallable` @kind object;
  #L12c474.  if v0 != 0 then goto L12c484;
  #L12c478.  call temp:= `computeReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.computeReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L12c47e.  v0:= temp @kind object;
  #L12c480.  v1.`kotlin.jvm.internal.CallableReference.a` @type ^`kotlin.reflect.KCallable` := v0 @kind object;
  #L12c484.  return v0 @kind object;
}
procedure `kotlin.reflect.KCallable` `computeReflected`() @signature `Lkotlin/jvm/internal/CallableReference;.computeReflected:()Lkotlin/reflect/KCallable;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.util.List` `getAnnotations`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getAnnotations:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c404.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L12c40a.  v0:= temp @kind object;
  #L12c40c.  call temp:= `getAnnotations`(v0) @signature `Lkotlin/reflect/KAnnotatedElement;.getAnnotations:()Ljava/util/List;` @kind interface;
  #L12c412.  v0:= temp @kind object;
  #L12c414.  return v0 @kind object;
}
procedure `java.lang.Object` `getBoundReceiver`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getBoundReceiver:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c3bc.  v0:= v1.`kotlin.jvm.internal.CallableReference.receiver` @type ^`java.lang.Object` @kind object;
  #L12c3c0.  return v0 @kind object;
}
procedure `java.lang.String` `getName`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c3d4.  v0:= v1.`kotlin.jvm.internal.CallableReference.c` @type ^`java.lang.String` @kind object;
  #L12c3d8.  return v0 @kind object;
}
procedure `kotlin.reflect.KDeclarationContainer` `getOwner`(`kotlin.jvm.internal.CallableReference` v2 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getOwner:()Lkotlin/reflect/KDeclarationContainer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L12c4c4.  v0:= v2.`kotlin.jvm.internal.CallableReference.b` @type ^`java.lang.Class` @kind object;
  #L12c4c8.  if v0 != 0 then goto L12c4d0;
  #L12c4cc.  v0:= 0I;
  #L12c4ce.  goto L12c4ea;
  #L12c4d0.  v1:= v2.`kotlin.jvm.internal.CallableReference.e` @type ^`boolean` @kind boolean;
  #L12c4d4.  if v1 == 0 then goto L12c4e2;
  #L12c4d8.  call temp:= `getOrCreateKotlinPackage`(v0) @signature `Lkotlin/jvm/internal/Reflection;.getOrCreateKotlinPackage:(Ljava/lang/Class;)Lkotlin/reflect/KDeclarationContainer;` @kind static;
  #L12c4de.  v0:= temp @kind object;
  #L12c4e0.  goto L12c4ea;
  #L12c4e2.  call temp:= `getOrCreateKotlinClass`(v0) @signature `Lkotlin/jvm/internal/Reflection;.getOrCreateKotlinClass:(Ljava/lang/Class;)Lkotlin/reflect/KClass;` @kind static;
  #L12c4e8.  v0:= temp @kind object;
  #L12c4ea.  return v0 @kind object;
}
procedure `java.util.List` `getParameters`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getParameters:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c428.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L12c42e.  v0:= temp @kind object;
  #L12c430.  call temp:= `getParameters`(v0) @signature `Lkotlin/reflect/KCallable;.getParameters:()Ljava/util/List;` @kind interface;
  #L12c436.  v0:= temp @kind object;
  #L12c438.  return v0 @kind object;
}
procedure `kotlin.reflect.KCallable` `getReflected`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L12c498.  call temp:= `compute`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.compute:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L12c49e.  v0:= temp @kind object;
  #L12c4a0.  if v0 == v1 then goto L12c4a6;
  #L12c4a4.  return v0 @kind object;
  #L12c4a6.  v0:= new `kotlin.jvm.KotlinReflectionNotSupportedError`;
  #L12c4aa.  call `<init>`(v0) @signature `Lkotlin/jvm/KotlinReflectionNotSupportedError;.<init>:()V` @kind direct;
  #L12c4b0.  throw v0;
}
procedure `kotlin.reflect.KType` `getReturnType`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getReturnType:()Lkotlin/reflect/KType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c4fc.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L12c502.  v0:= temp @kind object;
  #L12c504.  call temp:= `getReturnType`(v0) @signature `Lkotlin/reflect/KCallable;.getReturnType:()Lkotlin/reflect/KType;` @kind interface;
  #L12c50a.  v0:= temp @kind object;
  #L12c50c.  return v0 @kind object;
}
procedure `java.lang.String` `getSignature`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getSignature:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c3ec.  v0:= v1.`kotlin.jvm.internal.CallableReference.d` @type ^`java.lang.String` @kind object;
  #L12c3f0.  return v0 @kind object;
}
procedure `java.util.List` `getTypeParameters`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getTypeParameters:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c44c.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L12c452.  v0:= temp @kind object;
  #L12c454.  call temp:= `getTypeParameters`(v0) @signature `Lkotlin/reflect/KCallable;.getTypeParameters:()Ljava/util/List;` @kind interface;
  #L12c45a.  v0:= temp @kind object;
  #L12c45c.  return v0 @kind object;
}
procedure `kotlin.reflect.KVisibility` `getVisibility`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.getVisibility:()Lkotlin/reflect/KVisibility;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c520.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L12c526.  v0:= temp @kind object;
  #L12c528.  call temp:= `getVisibility`(v0) @signature `Lkotlin/reflect/KCallable;.getVisibility:()Lkotlin/reflect/KVisibility;` @kind interface;
  #L12c52e.  v0:= temp @kind object;
  #L12c530.  return v0 @kind object;
}
procedure `boolean` `isAbstract`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.isAbstract:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c2e4.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L12c2ea.  v0:= temp @kind object;
  #L12c2ec.  call temp:= `isAbstract`(v0) @signature `Lkotlin/reflect/KCallable;.isAbstract:()Z` @kind interface;
  #L12c2f2.  v0:= temp;
  #L12c2f4.  return v0;
}
procedure `boolean` `isFinal`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.isFinal:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c308.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L12c30e.  v0:= temp @kind object;
  #L12c310.  call temp:= `isFinal`(v0) @signature `Lkotlin/reflect/KCallable;.isFinal:()Z` @kind interface;
  #L12c316.  v0:= temp;
  #L12c318.  return v0;
}
procedure `boolean` `isOpen`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c32c.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L12c332.  v0:= temp @kind object;
  #L12c334.  call temp:= `isOpen`(v0) @signature `Lkotlin/reflect/KCallable;.isOpen:()Z` @kind interface;
  #L12c33a.  v0:= temp;
  #L12c33c.  return v0;
}
procedure `boolean` `isSuspend`(`kotlin.jvm.internal.CallableReference` v1 @kind this) @signature `Lkotlin/jvm/internal/CallableReference;.isSuspend:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c350.  call temp:= `getReflected`(v1) @signature `Lkotlin/jvm/internal/CallableReference;.getReflected:()Lkotlin/reflect/KCallable;` @kind virtual;
  #L12c356.  v0:= temp @kind object;
  #L12c358.  call temp:= `isSuspend`(v0) @signature `Lkotlin/reflect/KCallable;.isSuspend:()Z` @kind interface;
  #L12c35e.  v0:= temp;
  #L12c360.  return v0;
}
