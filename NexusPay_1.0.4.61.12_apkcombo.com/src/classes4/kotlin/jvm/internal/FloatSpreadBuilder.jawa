record `kotlin.jvm.internal.FloatSpreadBuilder` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.jvm.internal.PrimitiveSpreadBuilder` @kind class {
  `float`[] `kotlin.jvm.internal.FloatSpreadBuilder.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.jvm.internal.FloatSpreadBuilder` v0 @kind this, `int` v1 ) @signature `Lkotlin/jvm/internal/FloatSpreadBuilder;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L12da54.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.<init>:(I)V` @kind direct;
  #L12da5a.  v1:= new `float`[v1];
  #L12da5e.  v0.`kotlin.jvm.internal.FloatSpreadBuilder.d` @type ^`float`[] := v1 @kind object;
  #L12da62.  return @kind void;
}
procedure `void` `add`(`kotlin.jvm.internal.FloatSpreadBuilder` v3 @kind this, `float` v4 ) @signature `Lkotlin/jvm/internal/FloatSpreadBuilder;.add:(F)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L12da74.  v0:= v3.`kotlin.jvm.internal.FloatSpreadBuilder.d` @type ^`float`[] @kind object;
  #L12da78.  call temp:= `getPosition`(v3) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getPosition:()I` @kind virtual;
  #L12da7e.  v1:= temp;
  #L12da80.  v2:= v1 + 1;
  #L12da84.  call `setPosition`(v3, v2) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.setPosition:(I)V` @kind virtual;
  #L12da8a.  v0[v1]:= v4;
  #L12da8e.  return @kind void;
}
procedure `int` `getSize`(`kotlin.jvm.internal.FloatSpreadBuilder` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/FloatSpreadBuilder;.getSize:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L12da34.  v1:= (`float`[]) v1 @kind object;
  #L12da38.  call temp:= `getSize`(v0, v1) @signature `Lkotlin/jvm/internal/FloatSpreadBuilder;.getSize:([F)I` @kind virtual;
  #L12da3e.  v1:= temp;
  #L12da40.  return v1;
}
procedure `int` `getSize`(`kotlin.jvm.internal.FloatSpreadBuilder` v1 @kind this, `float`[] v2 @kind object) @signature `Lkotlin/jvm/internal/FloatSpreadBuilder;.getSize:([F)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L12da14.  v0:= "$this$getSize" @kind object;
  #L12da18.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12da1e.  v2:= length @variable v2;
  #L12da20.  return v2;
}
procedure `float`[] `toArray`(`kotlin.jvm.internal.FloatSpreadBuilder` v2 @kind this) @signature `Lkotlin/jvm/internal/FloatSpreadBuilder;.toArray:()[F` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L12d9e4.  v0:= v2.`kotlin.jvm.internal.FloatSpreadBuilder.d` @type ^`float`[] @kind object;
  #L12d9e8.  call temp:= `size`(v2) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.size:()I` @kind virtual;
  #L12d9ee.  v1:= temp;
  #L12d9f0.  v1:= new `float`[v1];
  #L12d9f4.  call temp:= `toArray`(v2, v0, v1) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.toArray:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L12d9fa.  v0:= temp @kind object;
  #L12d9fc.  v0:= (`float`[]) v0 @kind object;
  #L12da00.  return v0 @kind object;
}
