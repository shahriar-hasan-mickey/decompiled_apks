record `kotlin.jvm.internal.IntSpreadBuilder` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.jvm.internal.PrimitiveSpreadBuilder` @kind class {
  `int`[] `kotlin.jvm.internal.IntSpreadBuilder.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.jvm.internal.IntSpreadBuilder` v0 @kind this, `int` v1 ) @signature `Lkotlin/jvm/internal/IntSpreadBuilder;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L12eb04.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.<init>:(I)V` @kind direct;
  #L12eb0a.  v1:= new `int`[v1];
  #L12eb0e.  v0.`kotlin.jvm.internal.IntSpreadBuilder.d` @type ^`int`[] := v1 @kind object;
  #L12eb12.  return @kind void;
}
procedure `void` `add`(`kotlin.jvm.internal.IntSpreadBuilder` v3 @kind this, `int` v4 ) @signature `Lkotlin/jvm/internal/IntSpreadBuilder;.add:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L12eb24.  v0:= v3.`kotlin.jvm.internal.IntSpreadBuilder.d` @type ^`int`[] @kind object;
  #L12eb28.  call temp:= `getPosition`(v3) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.getPosition:()I` @kind virtual;
  #L12eb2e.  v1:= temp;
  #L12eb30.  v2:= v1 + 1;
  #L12eb34.  call `setPosition`(v3, v2) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.setPosition:(I)V` @kind virtual;
  #L12eb3a.  v0[v1]:= v4;
  #L12eb3e.  return @kind void;
}
procedure `int` `getSize`(`kotlin.jvm.internal.IntSpreadBuilder` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/jvm/internal/IntSpreadBuilder;.getSize:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L12eab4.  v1:= (`int`[]) v1 @kind object;
  #L12eab8.  call temp:= `getSize`(v0, v1) @signature `Lkotlin/jvm/internal/IntSpreadBuilder;.getSize:([I)I` @kind virtual;
  #L12eabe.  v1:= temp;
  #L12eac0.  return v1;
}
procedure `int` `getSize`(`kotlin.jvm.internal.IntSpreadBuilder` v1 @kind this, `int`[] v2 @kind object) @signature `Lkotlin/jvm/internal/IntSpreadBuilder;.getSize:([I)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L12ea94.  v0:= "$this$getSize" @kind object;
  #L12ea98.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12ea9e.  v2:= length @variable v2;
  #L12eaa0.  return v2;
}
procedure `int`[] `toArray`(`kotlin.jvm.internal.IntSpreadBuilder` v2 @kind this) @signature `Lkotlin/jvm/internal/IntSpreadBuilder;.toArray:()[I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L12ead4.  v0:= v2.`kotlin.jvm.internal.IntSpreadBuilder.d` @type ^`int`[] @kind object;
  #L12ead8.  call temp:= `size`(v2) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.size:()I` @kind virtual;
  #L12eade.  v1:= temp;
  #L12eae0.  v1:= new `int`[v1];
  #L12eae4.  call temp:= `toArray`(v2, v0, v1) @signature `Lkotlin/jvm/internal/PrimitiveSpreadBuilder;.toArray:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L12eaea.  v0:= temp @kind object;
  #L12eaec.  v0:= (`int`[]) v0 @kind object;
  #L12eaf0.  return v0 @kind object;
}
