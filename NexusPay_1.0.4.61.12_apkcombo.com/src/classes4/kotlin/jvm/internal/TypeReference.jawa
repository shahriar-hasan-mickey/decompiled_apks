record `kotlin.jvm.internal.TypeReference` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.reflect.KType` @kind interface {
  `kotlin.reflect.KClassifier` `kotlin.jvm.internal.TypeReference.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `kotlin.jvm.internal.TypeReference.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.jvm.internal.TypeReference.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.jvm.internal.TypeReference` v1 @kind this, `kotlin.reflect.KClassifier` v2 @kind object, `java.util.List` v3 @kind object, `boolean` v4 ) @signature `Lkotlin/jvm/internal/TypeReference;.<init>:(Lkotlin/reflect/KClassifier;Ljava/util/List;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L132478.  v0:= "classifier" @kind object;
  #L13247c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L132482.  v0:= "arguments" @kind object;
  #L132486.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13248c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L132492.  v1.`kotlin.jvm.internal.TypeReference.a` @type ^`kotlin.reflect.KClassifier` := v2 @kind object;
  #L132496.  v1.`kotlin.jvm.internal.TypeReference.b` @type ^`java.util.List` := v3 @kind object;
  #L13249a.  v1.`kotlin.jvm.internal.TypeReference.c` @type ^`boolean` := v4 @kind boolean;
  #L13249e.  return @kind void;
}
procedure `java.lang.String` `a`(`kotlin.jvm.internal.TypeReference` v12 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.a:()Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L132160.  call temp:= `getClassifier`(v12) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L132166.  v0:= temp @kind object;
  #L132168.  v1:= instanceof @variable v0 @type ^`kotlin.reflect.KClass` @kind boolean;
  #L13216c.  v2:= 0I;
  #L13216e.  if v1 != 0 then goto L132174;
  #L132172.  v0:= v2 @kind object;
  #L132174.  v0:= (`kotlin.reflect.KClass`) v0 @kind object;
  #L132178.  if v0 == 0 then goto L132184;
  #L13217c.  call temp:= `getJavaClass`(v0) @signature `Lkotlin/jvm/JvmClassMappingKt;.getJavaClass:(Lkotlin/reflect/KClass;)Ljava/lang/Class;` @kind static;
  #L132182.  v2:= temp @kind object;
  #L132184.  if v2 != 0 then goto L13219a;
  #L132188.  call temp:= `getClassifier`(v12) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L13218e.  v0:= temp @kind object;
  #L132190.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L132196.  v0:= temp @kind object;
  #L132198.  goto L1321b8;
  #L13219a.  call temp:= `isArray`(v2) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1321a0.  v0:= temp;
  #L1321a2.  if v0 == 0 then goto L1321b0;
  #L1321a6.  call temp:= `c`(v12, v2) @signature `Lkotlin/jvm/internal/TypeReference;.c:(Ljava/lang/Class;)Ljava/lang/String;` @kind direct;
  #L1321ac.  v0:= temp @kind object;
  #L1321ae.  goto L1321b8;
  #L1321b0.  call temp:= `getName`(v2) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1321b6.  v0:= temp @kind object;
  #L1321b8.  call temp:= `getArguments`(v12) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @kind virtual;
  #L1321be.  v1:= temp @kind object;
  #L1321c0.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1321c6.  v1:= temp;
  #L1321c8.  v2:= "" @kind object;
  #L1321cc.  if v1 == 0 then goto L1321d4;
  #L1321d0.  v1:= v2 @kind object;
  #L1321d2.  goto L132204;
  #L1321d4.  call temp:= `getArguments`(v12) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @kind virtual;
  #L1321da.  v3:= temp @kind object;
  #L1321dc.  v7:= 0I;
  #L1321de.  v8:= 0I;
  #L1321e0.  v9:= new `kotlin.jvm.internal.TypeReference$a`;
  #L1321e4.  call `<init>`(v9, v12) @signature `Lkotlin/jvm/internal/TypeReference$a;.<init>:(Lkotlin/jvm/internal/TypeReference;)V` @kind direct;
  #L1321ea.  v10:= 24I;
  #L1321ee.  v11:= 0I;
  #L1321f0.  v4:= ", " @kind object;
  #L1321f4.  v5:= "<" @kind object;
  #L1321f8.  v6:= ">" @kind object;
  #L1321fc.  call temp:= `joinToString$default`(v3, v4, v5, v6, v7, v8, v9, v10, v11) @signature `Lkotlin/collections/CollectionsKt;.joinToString$default:(Ljava/lang/Iterable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L132202.  v1:= temp @kind object;
  #L132204.  call temp:= `isMarkedNullable`(v12) @signature `Lkotlin/jvm/internal/TypeReference;.isMarkedNullable:()Z` @kind virtual;
  #L13220a.  v3:= temp;
  #L13220c.  if v3 == 0 then goto L132214;
  #L132210.  v2:= "?" @kind object;
  #L132214.  v3:= new `java.lang.StringBuilder`;
  #L132218.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13221e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L132224.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13222a.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L132230.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L132236.  v0:= temp @kind object;
  #L132238.  return v0 @kind object;
}
procedure `java.lang.String` `access$asString`(`kotlin.jvm.internal.TypeReference` v0 @kind object, `kotlin.reflect.KTypeProjection` v1 @kind object) @signature `Lkotlin/jvm/internal/TypeReference;.access$asString:(Lkotlin/jvm/internal/TypeReference;Lkotlin/reflect/KTypeProjection;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L132144.  call temp:= `b`(v0, v1) @signature `Lkotlin/jvm/internal/TypeReference;.b:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/String;` @kind direct;
  #L13214a.  v0:= temp @kind object;
  #L13214c.  return v0 @kind object;
}
procedure `java.lang.String` `b`(`kotlin.jvm.internal.TypeReference` v2 @kind this, `kotlin.reflect.KTypeProjection` v3 @kind object) @signature `Lkotlin/jvm/internal/TypeReference;.b:(Lkotlin/reflect/KTypeProjection;)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L13224c.  call temp:= `getVariance`(v3) @signature `Lkotlin/reflect/KTypeProjection;.getVariance:()Lkotlin/reflect/KVariance;` @kind virtual;
  #L132252.  v0:= temp @kind object;
  #L132254.  if v0 != 0 then goto L13225e;
  #L132258.  v3:= "*" @kind object;
  #L13225c.  return v3 @kind object;
  #L13225e.  call temp:= `getType`(v3) @signature `Lkotlin/reflect/KTypeProjection;.getType:()Lkotlin/reflect/KType;` @kind virtual;
  #L132264.  v0:= temp @kind object;
  #L132266.  v1:= instanceof @variable v0 @type ^`kotlin.jvm.internal.TypeReference` @kind boolean;
  #L13226a.  if v1 != 0 then goto L132270;
  #L13226e.  v0:= 0I;
  #L132270.  v0:= (`kotlin.jvm.internal.TypeReference`) v0 @kind object;
  #L132274.  if v0 == 0 then goto L132286;
  #L132278.  call temp:= `a`(v0) @signature `Lkotlin/jvm/internal/TypeReference;.a:()Ljava/lang/String;` @kind direct;
  #L13227e.  v0:= temp @kind object;
  #L132280.  if v0 == 0 then goto L132286;
  #L132284.  goto L132296;
  #L132286.  call temp:= `getType`(v3) @signature `Lkotlin/reflect/KTypeProjection;.getType:()Lkotlin/reflect/KType;` @kind virtual;
  #L13228c.  v0:= temp @kind object;
  #L13228e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L132294.  v0:= temp @kind object;
  #L132296.  call temp:= `getVariance`(v3) @signature `Lkotlin/reflect/KTypeProjection;.getVariance:()Lkotlin/reflect/KVariance;` @kind virtual;
  #L13229c.  v3:= temp @kind object;
  #L13229e.  if v3 == 0 then goto L13230c;
  #L1322a2.  v1:= `@@kotlin.jvm.internal.TypeReference$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L1322a6.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L1322ac.  v3:= temp;
  #L1322ae.  v3:= v1[v3];
  #L1322b2.  v1:= 1I;
  #L1322b4.  if v3 == v1 then goto L13230a;
  #L1322b8.  v1:= 2I;
  #L1322ba.  if v3 == v1 then goto L1322e8;
  #L1322be.  v1:= 3I;
  #L1322c0.  if v3 != v1 then goto L13230c;
  #L1322c4.  v3:= new `java.lang.StringBuilder`;
  #L1322c8.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1322ce.  v1:= "out " @kind object;
  #L1322d2.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1322d8.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1322de.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1322e4.  v0:= temp @kind object;
  #L1322e6.  goto L13230a;
  #L1322e8.  v3:= new `java.lang.StringBuilder`;
  #L1322ec.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1322f2.  v1:= "in " @kind object;
  #L1322f6.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1322fc.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L132302.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L132308.  v0:= temp @kind object;
  #L13230a.  return v0 @kind object;
  #L13230c.  v3:= new `kotlin.NoWhenBranchMatchedException`;
  #L132310.  call `<init>`(v3) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L132316.  throw v3;
}
procedure `java.lang.String` `c`(`kotlin.jvm.internal.TypeReference` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lkotlin/jvm/internal/TypeReference;.c:(Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L132328.  v0:= constclass @type ^`boolean`[] @kind object;
  #L13232c.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L132332.  v0:= temp;
  #L132334.  if v0 == 0 then goto L13233e;
  #L132338.  v2:= "kotlin.BooleanArray" @kind object;
  #L13233c.  goto L1323dc;
  #L13233e.  v0:= constclass @type ^`char`[] @kind object;
  #L132342.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L132348.  v0:= temp;
  #L13234a.  if v0 == 0 then goto L132354;
  #L13234e.  v2:= "kotlin.CharArray" @kind object;
  #L132352.  goto L1323dc;
  #L132354.  v0:= constclass @type ^`byte`[] @kind object;
  #L132358.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L13235e.  v0:= temp;
  #L132360.  if v0 == 0 then goto L13236a;
  #L132364.  v2:= "kotlin.ByteArray" @kind object;
  #L132368.  goto L1323dc;
  #L13236a.  v0:= constclass @type ^`short`[] @kind object;
  #L13236e.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L132374.  v0:= temp;
  #L132376.  if v0 == 0 then goto L132380;
  #L13237a.  v2:= "kotlin.ShortArray" @kind object;
  #L13237e.  goto L1323dc;
  #L132380.  v0:= constclass @type ^`int`[] @kind object;
  #L132384.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L13238a.  v0:= temp;
  #L13238c.  if v0 == 0 then goto L132396;
  #L132390.  v2:= "kotlin.IntArray" @kind object;
  #L132394.  goto L1323dc;
  #L132396.  v0:= constclass @type ^`float`[] @kind object;
  #L13239a.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1323a0.  v0:= temp;
  #L1323a2.  if v0 == 0 then goto L1323ac;
  #L1323a6.  v2:= "kotlin.FloatArray" @kind object;
  #L1323aa.  goto L1323dc;
  #L1323ac.  v0:= constclass @type ^`long`[] @kind object;
  #L1323b0.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1323b6.  v0:= temp;
  #L1323b8.  if v0 == 0 then goto L1323c2;
  #L1323bc.  v2:= "kotlin.LongArray" @kind object;
  #L1323c0.  goto L1323dc;
  #L1323c2.  v0:= constclass @type ^`double`[] @kind object;
  #L1323c6.  call temp:= `areEqual`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1323cc.  v2:= temp;
  #L1323ce.  if v2 == 0 then goto L1323d8;
  #L1323d2.  v2:= "kotlin.DoubleArray" @kind object;
  #L1323d6.  goto L1323dc;
  #L1323d8.  v2:= "kotlin.Array" @kind object;
  #L1323dc.  return v2 @kind object;
}
procedure `boolean` `equals`(`kotlin.jvm.internal.TypeReference` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/jvm/internal/TypeReference;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L132064.  v0:= instanceof @variable v3 @type ^`kotlin.jvm.internal.TypeReference` @kind boolean;
  #L132068.  if v0 == 0 then goto L1320c0;
  #L13206c.  call temp:= `getClassifier`(v2) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L132072.  v0:= temp @kind object;
  #L132074.  v3:= (`kotlin.jvm.internal.TypeReference`) v3 @kind object;
  #L132078.  call temp:= `getClassifier`(v3) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L13207e.  v1:= temp @kind object;
  #L132080.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L132086.  v0:= temp;
  #L132088.  if v0 == 0 then goto L1320c0;
  #L13208c.  call temp:= `getArguments`(v2) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @kind virtual;
  #L132092.  v0:= temp @kind object;
  #L132094.  call temp:= `getArguments`(v3) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @kind virtual;
  #L13209a.  v1:= temp @kind object;
  #L13209c.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1320a2.  v0:= temp;
  #L1320a4.  if v0 == 0 then goto L1320c0;
  #L1320a8.  call temp:= `isMarkedNullable`(v2) @signature `Lkotlin/jvm/internal/TypeReference;.isMarkedNullable:()Z` @kind virtual;
  #L1320ae.  v0:= temp;
  #L1320b0.  call temp:= `isMarkedNullable`(v3) @signature `Lkotlin/jvm/internal/TypeReference;.isMarkedNullable:()Z` @kind virtual;
  #L1320b6.  v3:= temp;
  #L1320b8.  if v0 != v3 then goto L1320c0;
  #L1320bc.  v3:= 1I;
  #L1320be.  goto L1320c2;
  #L1320c0.  v3:= 0I;
  #L1320c2.  return v3;
}
procedure `java.util.List` `getAnnotations`(`kotlin.jvm.internal.TypeReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.getAnnotations:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13242c.  call temp:= `emptyList`() @signature `Lkotlin/collections/CollectionsKt;.emptyList:()Ljava/util/List;` @kind static;
  #L132432.  v0:= temp @kind object;
  #L132434.  return v0 @kind object;
}
procedure `java.util.List` `getArguments`(`kotlin.jvm.internal.TypeReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L132448.  v0:= v1.`kotlin.jvm.internal.TypeReference.b` @type ^`java.util.List` @kind object;
  #L13244c.  return v0 @kind object;
}
procedure `kotlin.reflect.KClassifier` `getClassifier`(`kotlin.jvm.internal.TypeReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L132460.  v0:= v1.`kotlin.jvm.internal.TypeReference.a` @type ^`kotlin.reflect.KClassifier` @kind object;
  #L132464.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.jvm.internal.TypeReference` v2 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1320ec.  call temp:= `getClassifier`(v2) @signature `Lkotlin/jvm/internal/TypeReference;.getClassifier:()Lkotlin/reflect/KClassifier;` @kind virtual;
  #L1320f2.  v0:= temp @kind object;
  #L1320f4.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1320fa.  v0:= temp;
  #L1320fc.  v0:= v0 * 31;
  #L132100.  call temp:= `getArguments`(v2) @signature `Lkotlin/jvm/internal/TypeReference;.getArguments:()Ljava/util/List;` @kind virtual;
  #L132106.  v1:= temp @kind object;
  #L132108.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L13210e.  v1:= temp;
  #L132110.  v0:= v0 + v1 @kind int;
  #L132112.  v0:= v0 * 31;
  #L132116.  call temp:= `isMarkedNullable`(v2) @signature `Lkotlin/jvm/internal/TypeReference;.isMarkedNullable:()Z` @kind virtual;
  #L13211c.  v1:= temp;
  #L13211e.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L132124.  v1:= temp @kind object;
  #L132126.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L13212c.  v1:= temp;
  #L13212e.  v0:= v0 + v1 @kind int;
  #L132130.  return v0;
}
procedure `boolean` `isMarkedNullable`(`kotlin.jvm.internal.TypeReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.isMarkedNullable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1320d4.  v0:= v1.`kotlin.jvm.internal.TypeReference.c` @type ^`boolean` @kind boolean;
  #L1320d8.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.jvm.internal.TypeReference` v2 @kind this) @signature `Lkotlin/jvm/internal/TypeReference;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1323f0.  v0:= new `java.lang.StringBuilder`;
  #L1323f4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1323fa.  call temp:= `a`(v2) @signature `Lkotlin/jvm/internal/TypeReference;.a:()Ljava/lang/String;` @kind direct;
  #L132400.  v1:= temp @kind object;
  #L132402.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L132408.  v1:= " (Kotlin reflection is not available)" @kind object;
  #L13240c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L132412.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L132418.  v0:= temp @kind object;
  #L13241a.  return v0 @kind object;
}
