record `kotlin.jvm.internal.ClassReference$Companion` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`kotlin.jvm.internal.ClassReference$Companion` v0 @kind this) @signature `Lkotlin/jvm/internal/ClassReference$Companion;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L12ca08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L12ca0e.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.ClassReference$Companion` v0 @kind this, `kotlin.jvm.internal.DefaultConstructorMarker` v1 @kind object) @signature `Lkotlin/jvm/internal/ClassReference$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L12ca20.  call `<init>`(v0) @signature `Lkotlin/jvm/internal/ClassReference$Companion;.<init>:()V` @kind direct;
  #L12ca26.  return @kind void;
}
procedure `java.lang.String` `getClassQualifiedName`(`kotlin.jvm.internal.ClassReference$Companion` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lkotlin/jvm/internal/ClassReference$Companion;.getClassQualifiedName:(Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L12c794.  v0:= "jClass" @kind object;
  #L12c798.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12c79e.  call temp:= `isAnonymousClass`(v3) @signature `Ljava/lang/Class;.isAnonymousClass:()Z` @kind virtual;
  #L12c7a4.  v0:= temp;
  #L12c7a6.  v1:= 0I;
  #L12c7a8.  if v0 == 0 then goto L12c7ae;
  #L12c7ac.  goto L12c862;
  #L12c7ae.  call temp:= `isLocalClass`(v3) @signature `Ljava/lang/Class;.isLocalClass:()Z` @kind virtual;
  #L12c7b4.  v0:= temp;
  #L12c7b6.  if v0 == 0 then goto L12c7bc;
  #L12c7ba.  goto L12c862;
  #L12c7bc.  call temp:= `isArray`(v3) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L12c7c2.  v0:= temp;
  #L12c7c4.  if v0 == 0 then goto L12c836;
  #L12c7c8.  call temp:= `getComponentType`(v3) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L12c7ce.  v3:= temp @kind object;
  #L12c7d0.  v0:= "componentType" @kind object;
  #L12c7d4.  call `checkNotNullExpressionValue`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12c7da.  call temp:= `isPrimitive`(v3) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L12c7e0.  v0:= temp;
  #L12c7e2.  if v0 == 0 then goto L12c82a;
  #L12c7e6.  call temp:= `access$getClassFqNames$cp`() @signature `Lkotlin/jvm/internal/ClassReference;.access$getClassFqNames$cp:()Ljava/util/HashMap;` @kind static;
  #L12c7ec.  v0:= temp @kind object;
  #L12c7ee.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L12c7f4.  v3:= temp @kind object;
  #L12c7f6.  call temp:= `get`(v0, v3) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L12c7fc.  v3:= temp @kind object;
  #L12c7fe.  v3:= (`java.lang.String`) v3 @kind object;
  #L12c802.  if v3 == 0 then goto L12c82a;
  #L12c806.  v0:= new `java.lang.StringBuilder`;
  #L12c80a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12c810.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c816.  v3:= "Array" @kind object;
  #L12c81a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c820.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L12c826.  v3:= temp @kind object;
  #L12c828.  v1:= v3 @kind object;
  #L12c82a.  if v1 == 0 then goto L12c830;
  #L12c82e.  goto L12c862;
  #L12c830.  v1:= "kotlin.Array" @kind object;
  #L12c834.  goto L12c862;
  #L12c836.  call temp:= `access$getClassFqNames$cp`() @signature `Lkotlin/jvm/internal/ClassReference;.access$getClassFqNames$cp:()Ljava/util/HashMap;` @kind static;
  #L12c83c.  v0:= temp @kind object;
  #L12c83e.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L12c844.  v1:= temp @kind object;
  #L12c846.  call temp:= `get`(v0, v1) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L12c84c.  v0:= temp @kind object;
  #L12c84e.  v1:= v0 @kind object;
  #L12c850.  v1:= (`java.lang.String`) v1 @kind object;
  #L12c854.  if v1 == 0 then goto L12c85a;
  #L12c858.  goto L12c862;
  #L12c85a.  call temp:= `getCanonicalName`(v3) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L12c860.  v1:= temp @kind object;
  #L12c862.  return v1 @kind object;
}
procedure `java.lang.String` `getClassSimpleName`(`kotlin.jvm.internal.ClassReference$Companion` v7 @kind this, `java.lang.Class` v8 @kind object) @signature `Lkotlin/jvm/internal/ClassReference$Companion;.getClassSimpleName:(Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L12c874.  v0:= "jClass" @kind object;
  #L12c878.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12c87e.  call temp:= `isAnonymousClass`(v8) @signature `Ljava/lang/Class;.isAnonymousClass:()Z` @kind virtual;
  #L12c884.  v0:= temp;
  #L12c886.  v1:= "Array" @kind object;
  #L12c88a.  v2:= 0I;
  #L12c88c.  if v0 == 0 then goto L12c896;
  #L12c890.  v1:= v2 @kind object;
  #L12c892.  goto L12c9f6;
  #L12c896.  call temp:= `isLocalClass`(v8) @signature `Ljava/lang/Class;.isLocalClass:()Z` @kind virtual;
  #L12c89c.  v0:= temp;
  #L12c89e.  if v0 == 0 then goto L12c95a;
  #L12c8a2.  call temp:= `getSimpleName`(v8) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L12c8a8.  v0:= temp @kind object;
  #L12c8aa.  call temp:= `getEnclosingMethod`(v8) @signature `Ljava/lang/Class;.getEnclosingMethod:()Ljava/lang/reflect/Method;` @kind virtual;
  #L12c8b0.  v1:= temp @kind object;
  #L12c8b2.  v3:= "$" @kind object;
  #L12c8b6.  v4:= 2I;
  #L12c8b8.  v5:= "name" @kind object;
  #L12c8bc.  if v1 == 0 then goto L12c8fa;
  #L12c8c0.  call `checkNotNullExpressionValue`(v0, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12c8c6.  v6:= new `java.lang.StringBuilder`;
  #L12c8ca.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12c8d0.  call temp:= `getName`(v1) @signature `Ljava/lang/reflect/Method;.getName:()Ljava/lang/String;` @kind virtual;
  #L12c8d6.  v1:= temp @kind object;
  #L12c8d8.  call temp:= `append`(v6, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c8de.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c8e4.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L12c8ea.  v1:= temp @kind object;
  #L12c8ec.  call temp:= `substringAfter$default`(v0, v1, v2, v4, v2) @signature `Lkotlin/text/StringsKt;.substringAfter$default:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L12c8f2.  v1:= temp @kind object;
  #L12c8f4.  if v1 == 0 then goto L12c8fa;
  #L12c8f8.  goto L12c940;
  #L12c8fa.  call temp:= `getEnclosingConstructor`(v8) @signature `Ljava/lang/Class;.getEnclosingConstructor:()Ljava/lang/reflect/Constructor;` @kind virtual;
  #L12c900.  v8:= temp @kind object;
  #L12c902.  if v8 == 0 then goto L12c93e;
  #L12c906.  call `checkNotNullExpressionValue`(v0, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12c90c.  v1:= new `java.lang.StringBuilder`;
  #L12c910.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12c916.  call temp:= `getName`(v8) @signature `Ljava/lang/reflect/Constructor;.getName:()Ljava/lang/String;` @kind virtual;
  #L12c91c.  v8:= temp @kind object;
  #L12c91e.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c924.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c92a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L12c930.  v8:= temp @kind object;
  #L12c932.  call temp:= `substringAfter$default`(v0, v8, v2, v4, v2) @signature `Lkotlin/text/StringsKt;.substringAfter$default:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L12c938.  v8:= temp @kind object;
  #L12c93a.  v1:= v8 @kind object;
  #L12c93c.  goto L12c940;
  #L12c93e.  v1:= v2 @kind object;
  #L12c940.  if v1 == 0 then goto L12c946;
  #L12c944.  goto L12c9f6;
  #L12c946.  call `checkNotNullExpressionValue`(v0, v5) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12c94c.  v8:= 36I;
  #L12c950.  call temp:= `substringAfter$default`(v0, v8, v2, v4, v2) @signature `Lkotlin/text/StringsKt;.substringAfter$default:(Ljava/lang/String;CLjava/lang/String;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L12c956.  v1:= temp @kind object;
  #L12c958.  goto L12c9f6;
  #L12c95a.  call temp:= `isArray`(v8) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L12c960.  v0:= temp;
  #L12c962.  if v0 == 0 then goto L12c9ca;
  #L12c966.  call temp:= `getComponentType`(v8) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L12c96c.  v8:= temp @kind object;
  #L12c96e.  v0:= "componentType" @kind object;
  #L12c972.  call `checkNotNullExpressionValue`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12c978.  call temp:= `isPrimitive`(v8) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L12c97e.  v0:= temp;
  #L12c980.  if v0 == 0 then goto L12c9c2;
  #L12c984.  call temp:= `access$getSimpleNames$cp`() @signature `Lkotlin/jvm/internal/ClassReference;.access$getSimpleNames$cp:()Ljava/util/Map;` @kind static;
  #L12c98a.  v0:= temp @kind object;
  #L12c98c.  call temp:= `getName`(v8) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L12c992.  v8:= temp @kind object;
  #L12c994.  call temp:= `get`(v0, v8) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L12c99a.  v8:= temp @kind object;
  #L12c99c.  v8:= (`java.lang.String`) v8 @kind object;
  #L12c9a0.  if v8 == 0 then goto L12c9c2;
  #L12c9a4.  v0:= new `java.lang.StringBuilder`;
  #L12c9a8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12c9ae.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c9b4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c9ba.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L12c9c0.  v2:= temp @kind object;
  #L12c9c2.  if v2 == 0 then goto L12c9f6;
  #L12c9c6.  goto L12c890;
  #L12c9ca.  call temp:= `access$getSimpleNames$cp`() @signature `Lkotlin/jvm/internal/ClassReference;.access$getSimpleNames$cp:()Ljava/util/Map;` @kind static;
  #L12c9d0.  v0:= temp @kind object;
  #L12c9d2.  call temp:= `getName`(v8) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L12c9d8.  v1:= temp @kind object;
  #L12c9da.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L12c9e0.  v0:= temp @kind object;
  #L12c9e2.  v1:= v0 @kind object;
  #L12c9e4.  v1:= (`java.lang.String`) v1 @kind object;
  #L12c9e8.  if v1 == 0 then goto L12c9ee;
  #L12c9ec.  goto L12c9f6;
  #L12c9ee.  call temp:= `getSimpleName`(v8) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L12c9f4.  v1:= temp @kind object;
  #L12c9f6.  return v1 @kind object;
}
procedure `boolean` `isInstance`(`kotlin.jvm.internal.ClassReference$Companion` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lkotlin/jvm/internal/ClassReference$Companion;.isInstance:(Ljava/lang/Object;Ljava/lang/Class;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L12c714.  v0:= "jClass" @kind object;
  #L12c718.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12c71e.  call temp:= `access$getFUNCTION_CLASSES$cp`() @signature `Lkotlin/jvm/internal/ClassReference;.access$getFUNCTION_CLASSES$cp:()Ljava/util/Map;` @kind static;
  #L12c724.  v0:= temp @kind object;
  #L12c726.  if v0 == 0 then goto L12c772;
  #L12c72a.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L12c730.  v0:= temp @kind object;
  #L12c732.  v0:= (`java.lang.Integer`) v0 @kind object;
  #L12c736.  if v0 == 0 then goto L12c74c;
  #L12c73a.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L12c740.  v3:= temp;
  #L12c742.  call temp:= `isFunctionOfArity`(v2, v3) @signature `Lkotlin/jvm/internal/TypeIntrinsics;.isFunctionOfArity:(Ljava/lang/Object;I)Z` @kind static;
  #L12c748.  v2:= temp;
  #L12c74a.  return v2;
  #L12c74c.  call temp:= `isPrimitive`(v3) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L12c752.  v0:= temp;
  #L12c754.  if v0 == 0 then goto L12c768;
  #L12c758.  call temp:= `getKotlinClass`(v3) @signature `Lkotlin/jvm/JvmClassMappingKt;.getKotlinClass:(Ljava/lang/Class;)Lkotlin/reflect/KClass;` @kind static;
  #L12c75e.  v3:= temp @kind object;
  #L12c760.  call temp:= `getJavaObjectType`(v3) @signature `Lkotlin/jvm/JvmClassMappingKt;.getJavaObjectType:(Lkotlin/reflect/KClass;)Ljava/lang/Class;` @kind static;
  #L12c766.  v3:= temp @kind object;
  #L12c768.  call temp:= `isInstance`(v3, v2) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L12c76e.  v2:= temp;
  #L12c770.  return v2;
  #L12c772.  v2:= new `java.lang.NullPointerException`;
  #L12c776.  v3:= "null cannot be cast to non-null type kotlin.collections.Map<K, V>" @kind object;
  #L12c77a.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12c780.  throw v2;
}
