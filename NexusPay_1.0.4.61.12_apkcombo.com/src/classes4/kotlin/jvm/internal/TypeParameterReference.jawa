record `kotlin.jvm.internal.TypeParameterReference` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.reflect.KTypeParameter` @kind interface {
  `java.util.List` `kotlin.jvm.internal.TypeParameterReference.a` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `kotlin.jvm.internal.TypeParameterReference.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `kotlin.jvm.internal.TypeParameterReference.c` @AccessFlag PRIVATE_FINAL;
  `kotlin.reflect.KVariance` `kotlin.jvm.internal.TypeParameterReference.d` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.jvm.internal.TypeParameterReference.e` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.jvm.internal.TypeParameterReference$Companion` `@@kotlin.jvm.internal.TypeParameterReference.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/jvm/internal/TypeParameterReference;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L131ebc.  v0:= new `kotlin.jvm.internal.TypeParameterReference$Companion`;
  #L131ec0.  v1:= 0I;
  #L131ec2.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/TypeParameterReference$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L131ec8.  `@@kotlin.jvm.internal.TypeParameterReference.Companion` @type ^`kotlin.jvm.internal.TypeParameterReference$Companion` := v0 @kind object;
  #L131ecc.  return @kind void;
}
procedure `void` `<init>`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.String` v3 @kind object, `kotlin.reflect.KVariance` v4 @kind object, `boolean` v5 ) @signature `Lkotlin/jvm/internal/TypeParameterReference;.<init>:(Ljava/lang/Object;Ljava/lang/String;Lkotlin/reflect/KVariance;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L131ee0.  v0:= "name" @kind object;
  #L131ee4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L131eea.  v0:= "variance" @kind object;
  #L131eee.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L131ef4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L131efa.  v1.`kotlin.jvm.internal.TypeParameterReference.b` @type ^`java.lang.Object` := v2 @kind object;
  #L131efe.  v1.`kotlin.jvm.internal.TypeParameterReference.c` @type ^`java.lang.String` := v3 @kind object;
  #L131f02.  v1.`kotlin.jvm.internal.TypeParameterReference.d` @type ^`kotlin.reflect.KVariance` := v4 @kind object;
  #L131f06.  v1.`kotlin.jvm.internal.TypeParameterReference.e` @type ^`boolean` := v5 @kind boolean;
  #L131f0a.  return @kind void;
}
procedure `void` `getUpperBounds$annotations`() @signature `Lkotlin/jvm/internal/TypeParameterReference;.getUpperBounds$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L131f1c.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.jvm.internal.TypeParameterReference` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/jvm/internal/TypeParameterReference;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L131d90.  v0:= instanceof @variable v3 @type ^`kotlin.jvm.internal.TypeParameterReference` @kind boolean;
  #L131d94.  if v0 == 0 then goto L131dd0;
  #L131d98.  v0:= v2.`kotlin.jvm.internal.TypeParameterReference.b` @type ^`java.lang.Object` @kind object;
  #L131d9c.  v3:= (`kotlin.jvm.internal.TypeParameterReference`) v3 @kind object;
  #L131da0.  v1:= v3.`kotlin.jvm.internal.TypeParameterReference.b` @type ^`java.lang.Object` @kind object;
  #L131da4.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L131daa.  v0:= temp;
  #L131dac.  if v0 == 0 then goto L131dd0;
  #L131db0.  call temp:= `getName`(v2) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getName:()Ljava/lang/String;` @kind virtual;
  #L131db6.  v0:= temp @kind object;
  #L131db8.  call temp:= `getName`(v3) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getName:()Ljava/lang/String;` @kind virtual;
  #L131dbe.  v3:= temp @kind object;
  #L131dc0.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L131dc6.  v3:= temp;
  #L131dc8.  if v3 == 0 then goto L131dd0;
  #L131dcc.  v3:= 1I;
  #L131dce.  goto L131dd2;
  #L131dd0.  v3:= 0I;
  #L131dd2.  return v3;
}
procedure `java.lang.String` `getName`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L131e38.  v0:= v1.`kotlin.jvm.internal.TypeParameterReference.c` @type ^`java.lang.String` @kind object;
  #L131e3c.  return v0 @kind object;
}
procedure `java.util.List` `getUpperBounds`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getUpperBounds:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L131e70.  v0:= v1.`kotlin.jvm.internal.TypeParameterReference.a` @type ^`java.util.List` @kind object;
  #L131e74.  if v0 == 0 then goto L131e7a;
  #L131e78.  goto L131e92;
  #L131e7a.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L131e7e.  call temp:= `nullableTypeOf`(v0) @signature `Lkotlin/jvm/internal/Reflection;.nullableTypeOf:(Ljava/lang/Class;)Lkotlin/reflect/KType;` @kind static;
  #L131e84.  v0:= temp @kind object;
  #L131e86.  call temp:= `listOf`(v0) @signature `Lkotlin/collections/CollectionsKt;.listOf:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L131e8c.  v0:= temp @kind object;
  #L131e8e.  v1.`kotlin.jvm.internal.TypeParameterReference.a` @type ^`java.util.List` := v0 @kind object;
  #L131e92.  return v0 @kind object;
}
procedure `kotlin.reflect.KVariance` `getVariance`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getVariance:()Lkotlin/reflect/KVariance;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L131ea4.  v0:= v1.`kotlin.jvm.internal.TypeParameterReference.d` @type ^`kotlin.reflect.KVariance` @kind object;
  #L131ea8.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.jvm.internal.TypeParameterReference` v2 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L131dfc.  v0:= v2.`kotlin.jvm.internal.TypeParameterReference.b` @type ^`java.lang.Object` @kind object;
  #L131e00.  if v0 == 0 then goto L131e0e;
  #L131e04.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L131e0a.  v0:= temp;
  #L131e0c.  goto L131e10;
  #L131e0e.  v0:= 0I;
  #L131e10.  v0:= v0 * 31;
  #L131e14.  call temp:= `getName`(v2) @signature `Lkotlin/jvm/internal/TypeParameterReference;.getName:()Ljava/lang/String;` @kind virtual;
  #L131e1a.  v1:= temp @kind object;
  #L131e1c.  call temp:= `hashCode`(v1) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L131e22.  v1:= temp;
  #L131e24.  v0:= v0 + v1 @kind int;
  #L131e26.  return v0;
}
procedure `boolean` `isReified`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.isReified:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L131de4.  v0:= v1.`kotlin.jvm.internal.TypeParameterReference.e` @type ^`boolean` @kind boolean;
  #L131de8.  return v0;
}
procedure `void` `setUpperBounds`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lkotlin/jvm/internal/TypeParameterReference;.setUpperBounds:(Ljava/util/List;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L131f30.  v0:= "upperBounds" @kind object;
  #L131f34.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L131f3a.  v0:= v1.`kotlin.jvm.internal.TypeParameterReference.a` @type ^`java.util.List` @kind object;
  #L131f3e.  if v0 != 0 then goto L131f48;
  #L131f42.  v1.`kotlin.jvm.internal.TypeParameterReference.a` @type ^`java.util.List` := v2 @kind object;
  #L131f46.  return @kind void;
  #L131f48.  v2:= new `java.lang.StringBuilder`;
  #L131f4c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L131f52.  v0:= "Upper bounds of type parameter '" @kind object;
  #L131f56.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L131f5c.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L131f62.  v0:= "' have already been initialized." @kind object;
  #L131f66.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L131f6c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L131f72.  v2:= temp @kind object;
  #L131f74.  v0:= new `java.lang.IllegalStateException`;
  #L131f78.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L131f7e.  v2:= temp @kind object;
  #L131f80.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L131f86.  throw v0;
}
procedure `java.lang.String` `toString`(`kotlin.jvm.internal.TypeParameterReference` v1 @kind this) @signature `Lkotlin/jvm/internal/TypeParameterReference;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L131e50.  v0:= `@@kotlin.jvm.internal.TypeParameterReference.Companion` @type ^`kotlin.jvm.internal.TypeParameterReference$Companion` @kind object;
  #L131e54.  call temp:= `toString`(v0, v1) @signature `Lkotlin/jvm/internal/TypeParameterReference$Companion;.toString:(Lkotlin/reflect/KTypeParameter;)Ljava/lang/String;` @kind virtual;
  #L131e5a.  v0:= temp @kind object;
  #L131e5c.  return v0 @kind object;
}
