record `kotlin.jvm.internal.PackageReference` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.jvm.internal.ClassBasedDeclarationContainer` @kind interface {
  `java.lang.Class` `kotlin.jvm.internal.PackageReference.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.jvm.internal.PackageReference` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lkotlin/jvm/internal/PackageReference;.<init>:(Ljava/lang/Class;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L12ff44.  v0:= "jClass" @kind object;
  #L12ff48.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12ff4e.  v0:= "moduleName" @kind object;
  #L12ff52.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L12ff58.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L12ff5e.  v1.`kotlin.jvm.internal.PackageReference.a` @type ^`java.lang.Class` := v2 @kind object;
  #L12ff62.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.jvm.internal.PackageReference` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/jvm/internal/PackageReference;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12fe68.  v0:= instanceof @variable v2 @type ^`kotlin.jvm.internal.PackageReference` @kind boolean;
  #L12fe6c.  if v0 == 0 then goto L12fe94;
  #L12fe70.  call temp:= `getJClass`(v1) @signature `Lkotlin/jvm/internal/PackageReference;.getJClass:()Ljava/lang/Class;` @kind virtual;
  #L12fe76.  v0:= temp @kind object;
  #L12fe78.  v2:= (`kotlin.jvm.internal.PackageReference`) v2 @kind object;
  #L12fe7c.  call temp:= `getJClass`(v2) @signature `Lkotlin/jvm/internal/PackageReference;.getJClass:()Ljava/lang/Class;` @kind virtual;
  #L12fe82.  v2:= temp @kind object;
  #L12fe84.  call temp:= `areEqual`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L12fe8a.  v2:= temp;
  #L12fe8c.  if v2 == 0 then goto L12fe94;
  #L12fe90.  v2:= 1I;
  #L12fe92.  goto L12fe96;
  #L12fe94.  v2:= 0I;
  #L12fe96.  return v2;
}
procedure `java.lang.Class` `getJClass`(`kotlin.jvm.internal.PackageReference` v1 @kind this) @signature `Lkotlin/jvm/internal/PackageReference;.getJClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12fecc.  v0:= v1.`kotlin.jvm.internal.PackageReference.a` @type ^`java.lang.Class` @kind object;
  #L12fed0.  return v0 @kind object;
}
procedure `java.util.Collection` `getMembers`(`kotlin.jvm.internal.PackageReference` v1 @kind this) @signature `Lkotlin/jvm/internal/PackageReference;.getMembers:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12ff28.  v0:= new `kotlin.jvm.KotlinReflectionNotSupportedError`;
  #L12ff2c.  call `<init>`(v0) @signature `Lkotlin/jvm/KotlinReflectionNotSupportedError;.<init>:()V` @kind direct;
  #L12ff32.  throw v0;
}
procedure `int` `hashCode`(`kotlin.jvm.internal.PackageReference` v1 @kind this) @signature `Lkotlin/jvm/internal/PackageReference;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12fea8.  call temp:= `getJClass`(v1) @signature `Lkotlin/jvm/internal/PackageReference;.getJClass:()Ljava/lang/Class;` @kind virtual;
  #L12feae.  v0:= temp @kind object;
  #L12feb0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Class;.hashCode:()I` @kind virtual;
  #L12feb6.  v0:= temp;
  #L12feb8.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.jvm.internal.PackageReference` v2 @kind this) @signature `Lkotlin/jvm/internal/PackageReference;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L12fee4.  v0:= new `java.lang.StringBuilder`;
  #L12fee8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12feee.  call temp:= `getJClass`(v2) @signature `Lkotlin/jvm/internal/PackageReference;.getJClass:()Ljava/lang/Class;` @kind virtual;
  #L12fef4.  v1:= temp @kind object;
  #L12fef6.  call temp:= `toString`(v1) @signature `Ljava/lang/Class;.toString:()Ljava/lang/String;` @kind virtual;
  #L12fefc.  v1:= temp @kind object;
  #L12fefe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ff04.  v1:= " (Kotlin reflection is not available)" @kind object;
  #L12ff08.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ff0e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L12ff14.  v0:= temp @kind object;
  #L12ff16.  return v0 @kind object;
}
