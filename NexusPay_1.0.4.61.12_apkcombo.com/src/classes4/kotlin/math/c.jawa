record `kotlin.math.c` @kind class @AccessFlag  extends `kotlin.math.b` @kind class {
}
procedure `void` `<init>`(`kotlin.math.c` v0 @kind this) @signature `Lkotlin/math/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L132990.  call `<init>`(v0) @signature `Lkotlin/math/b;.<init>:()V` @kind direct;
  #L132996.  return @kind void;
}
procedure `double` `acosh`(`double` v7 ) @signature `Lkotlin/math/c;.acosh:(D)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L132528.  v0:= 1I;
  #L13252a.  v0:= (`double`) v0 @kind i2d;
  #L13252c.  v2:= dcmpg(v7, v0);
  #L132530.  if v2 >= 0 then goto L13253a;
  #L132534.  v7:= NaND;
  #L132538.  goto L1325b6;
  #L13253a.  v2:= `@@kotlin.math.a.e` @type ^`double` @kind wide;
  #L13253e.  v4:= dcmpl(v7, v2);
  #L132542.  if v4 <= 0 then goto L132556;
  #L132546.  call temp:= `log`(v7) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L13254c.  v7:= temp @kind wide;
  #L13254e.  v0:= `@@kotlin.math.a.a` @type ^`double` @kind wide;
  #L132552.  v7:= v7 + v0 @kind double;
  #L132554.  goto L1325b6;
  #L132556.  v2:= v7 - v0 @kind double;
  #L13255a.  v4:= `@@kotlin.math.a.d` @type ^`double` @kind wide;
  #L13255e.  v6:= dcmpl(v2, v4);
  #L132562.  if v6 < 0 then goto L132580;
  #L132566.  v2:= v7 * v7 @kind double;
  #L13256a.  v2:= v2 - v0 @kind double;
  #L13256c.  call temp:= `sqrt`(v2) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L132572.  v0:= temp @kind wide;
  #L132574.  v7:= v7 + v0 @kind double;
  #L132576.  call temp:= `log`(v7) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L13257c.  v7:= temp @kind wide;
  #L13257e.  goto L1325b6;
  #L132580.  call temp:= `sqrt`(v2) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L132586.  v7:= temp @kind wide;
  #L132588.  v0:= `@@kotlin.math.a.c` @type ^`double` @kind wide;
  #L13258c.  v2:= dcmpl(v7, v0);
  #L132590.  if v2 < 0 then goto L1325a6;
  #L132594.  v0:= v7 * v7 @kind double;
  #L132598.  v0:= v0 * v7 @kind double;
  #L13259c.  v2:= 12I;
  #L1325a0.  v2:= (`double`) v2 @kind i2d;
  #L1325a2.  v0:= v0 / v2 @kind double;
  #L1325a4.  v7:= v7 - v0 @kind double;
  #L1325a6.  v0:= 2.0D;
  #L1325aa.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L1325b0.  v0:= temp @kind wide;
  #L1325b2.  v7:= v7 * v0 @kind double;
  #L1325b6.  return v7 @kind wide;
}
procedure `double` `asinh`(`double` v5 ) @signature `Lkotlin/math/c;.asinh:(D)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1325c8.  v0:= `@@kotlin.math.a.d` @type ^`double` @kind wide;
  #L1325cc.  v2:= dcmpl(v5, v0);
  #L1325d0.  if v2 < 0 then goto L132632;
  #L1325d4.  v0:= `@@kotlin.math.a.f` @type ^`double` @kind wide;
  #L1325d8.  v2:= 1I;
  #L1325da.  v3:= dcmpl(v5, v0);
  #L1325de.  if v3 <= 0 then goto L132616;
  #L1325e2.  v0:= `@@kotlin.math.a.e` @type ^`double` @kind wide;
  #L1325e6.  v3:= dcmpl(v5, v0);
  #L1325ea.  if v3 <= 0 then goto L1325fe;
  #L1325ee.  call temp:= `log`(v5) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L1325f4.  v5:= temp @kind wide;
  #L1325f6.  v0:= `@@kotlin.math.a.a` @type ^`double` @kind wide;
  #L1325fa.  v5:= v5 + v0 @kind double;
  #L1325fc.  goto L13266e;
  #L1325fe.  v0:= 2I;
  #L132600.  v0:= (`double`) v0 @kind i2d;
  #L132602.  v5:= v5 * v0 @kind double;
  #L132606.  v0:= (`double`) v2 @kind i2d;
  #L132608.  v0:= v0 / v5 @kind double;
  #L13260a.  v5:= v5 + v0 @kind double;
  #L13260c.  call temp:= `log`(v5) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L132612.  v5:= temp @kind wide;
  #L132614.  goto L13266e;
  #L132616.  v0:= v5 * v5 @kind double;
  #L13261a.  v2:= (`double`) v2 @kind i2d;
  #L13261c.  v0:= v0 + v2 @kind double;
  #L13261e.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L132624.  v0:= temp @kind wide;
  #L132626.  v5:= v5 + v0 @kind double;
  #L132628.  call temp:= `log`(v5) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L13262e.  v5:= temp @kind wide;
  #L132630.  goto L13266e;
  #L132632.  v0:= -v0 @kind double;
  #L132634.  v2:= dcmpg(v5, v0);
  #L132638.  if v2 > 0 then goto L13264a;
  #L13263c.  v5:= -v5 @kind double;
  #L13263e.  call temp:= `asinh`(v5) @signature `Lkotlin/math/c;.asinh:(D)D` @kind static;
  #L132644.  v5:= temp @kind wide;
  #L132646.  v5:= -v5 @kind double;
  #L132648.  goto L13266e;
  #L13264a.  call temp:= `abs`(v5) @signature `Ljava/lang/Math;.abs:(D)D` @kind static;
  #L132650.  v0:= temp @kind wide;
  #L132652.  v2:= `@@kotlin.math.a.c` @type ^`double` @kind wide;
  #L132656.  v4:= dcmpl(v0, v2);
  #L13265a.  if v4 < 0 then goto L13266e;
  #L13265e.  v0:= v5 * v5 @kind double;
  #L132662.  v0:= v0 * v5 @kind double;
  #L132666.  v2:= 6I;
  #L132668.  v2:= (`double`) v2 @kind i2d;
  #L13266a.  v0:= v0 / v2 @kind double;
  #L13266c.  v5:= v5 - v0 @kind double;
  #L13266e.  return v5 @kind wide;
}
procedure `double` `atanh`(`double` v5 ) @signature `Lkotlin/math/c;.atanh:(D)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L132680.  call temp:= `abs`(v5) @signature `Ljava/lang/Math;.abs:(D)D` @kind static;
  #L132686.  v0:= temp @kind wide;
  #L132688.  v2:= `@@kotlin.math.a.d` @type ^`double` @kind wide;
  #L13268c.  v4:= dcmpg(v0, v2);
  #L132690.  if v4 >= 0 then goto L1326ba;
  #L132694.  call temp:= `abs`(v5) @signature `Ljava/lang/Math;.abs:(D)D` @kind static;
  #L13269a.  v0:= temp @kind wide;
  #L13269c.  v2:= `@@kotlin.math.a.c` @type ^`double` @kind wide;
  #L1326a0.  v4:= dcmpl(v0, v2);
  #L1326a4.  if v4 <= 0 then goto L1326b8;
  #L1326a8.  v0:= v5 * v5 @kind double;
  #L1326ac.  v0:= v0 * v5 @kind double;
  #L1326b0.  v2:= 3I;
  #L1326b2.  v2:= (`double`) v2 @kind i2d;
  #L1326b4.  v0:= v0 / v2 @kind double;
  #L1326b6.  v5:= v5 + v0 @kind double;
  #L1326b8.  return v5 @kind wide;
  #L1326ba.  v0:= 1I;
  #L1326bc.  v0:= (`double`) v0 @kind i2d;
  #L1326be.  v2:= v0 + v5 @kind double;
  #L1326c2.  v0:= v0 - v5 @kind double;
  #L1326c4.  v2:= v2 / v0 @kind double;
  #L1326c6.  call temp:= `log`(v2) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L1326cc.  v5:= temp @kind wide;
  #L1326ce.  v0:= 2I;
  #L1326d0.  v0:= (`double`) v0 @kind i2d;
  #L1326d2.  v5:= v5 / v0 @kind double;
  #L1326d4.  return v5 @kind wide;
}
procedure `void` `getAbsoluteValue$annotations`(`double` v0 ) @signature `Lkotlin/math/c;.getAbsoluteValue$annotations:(D)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1329a8.  return @kind void;
}
procedure `void` `getAbsoluteValue$annotations`(`float` v0 ) @signature `Lkotlin/math/c;.getAbsoluteValue$annotations:(F)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1329bc.  return @kind void;
}
procedure `void` `getAbsoluteValue$annotations`(`int` v0 ) @signature `Lkotlin/math/c;.getAbsoluteValue$annotations:(I)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1329d0.  return @kind void;
}
procedure `void` `getAbsoluteValue$annotations`(`long` v0 ) @signature `Lkotlin/math/c;.getAbsoluteValue$annotations:(J)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1329e4.  return @kind void;
}
procedure `int` `getSign`(`int` v0 ) @signature `Lkotlin/math/c;.getSign:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L132854.  if v0 >= 0 then goto L13285c;
  #L132858.  v0:= -1I;
  #L13285a.  goto L132866;
  #L13285c.  if v0 <= 0 then goto L132864;
  #L132860.  v0:= 1I;
  #L132862.  goto L132866;
  #L132864.  v0:= 0I;
  #L132866.  return v0;
}
procedure `int` `getSign`(`long` v3 ) @signature `Lkotlin/math/c;.getSign:(J)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L132878.  v0:= 0L;
  #L13287c.  v2:= lcmp(v3, v0);
  #L132880.  if v2 >= 0 then goto L132888;
  #L132884.  v3:= -1I;
  #L132886.  goto L132892;
  #L132888.  if v2 <= 0 then goto L132890;
  #L13288c.  v3:= 1I;
  #L13288e.  goto L132892;
  #L132890.  v3:= 0I;
  #L132892.  return v3;
}
procedure `void` `getSign$annotations`(`double` v0 ) @signature `Lkotlin/math/c;.getSign$annotations:(D)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1329f8.  return @kind void;
}
procedure `void` `getSign$annotations`(`float` v0 ) @signature `Lkotlin/math/c;.getSign$annotations:(F)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L132a0c.  return @kind void;
}
procedure `void` `getSign$annotations`(`int` v0 ) @signature `Lkotlin/math/c;.getSign$annotations:(I)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L132a20.  return @kind void;
}
procedure `void` `getSign$annotations`(`long` v0 ) @signature `Lkotlin/math/c;.getSign$annotations:(J)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L132a34.  return @kind void;
}
procedure `void` `getUlp$annotations`(`double` v0 ) @signature `Lkotlin/math/c;.getUlp$annotations:(D)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L132a48.  return @kind void;
}
procedure `void` `getUlp$annotations`(`float` v0 ) @signature `Lkotlin/math/c;.getUlp$annotations:(F)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L132a5c.  return @kind void;
}
procedure `double` `log`(`double` v3 , `double` v5 ) @signature `Lkotlin/math/c;.log:(DD)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1326e8.  v0:= 0L;
  #L1326ec.  v2:= dcmpg(v5, v0);
  #L1326f0.  if v2 <= 0 then goto L132716;
  #L1326f4.  v0:= 1.0D;
  #L1326f8.  v2:= dcmpg(v5, v0);
  #L1326fc.  if v2 != 0 then goto L132702;
  #L132700.  goto L132716;
  #L132702.  call temp:= `log`(v3) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L132708.  v3:= temp @kind wide;
  #L13270a.  call temp:= `log`(v5) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L132710.  v5:= temp @kind wide;
  #L132712.  v3:= v3 / v5 @kind double;
  #L132714.  return v3 @kind wide;
  #L132716.  v3:= NaND;
  #L13271a.  return v3 @kind wide;
}
procedure `float` `log`(`float` v2 , `float` v3 ) @signature `Lkotlin/math/c;.log:(FF)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L132798.  v0:= 0I;
  #L13279a.  v0:= fcmpg(v3, v0);
  #L13279e.  if v0 <= 0 then goto L1327ca;
  #L1327a2.  v0:= 1.0F;
  #L1327a6.  v0:= fcmpg(v3, v0);
  #L1327aa.  if v0 != 0 then goto L1327b0;
  #L1327ae.  goto L1327ca;
  #L1327b0.  v0:= (`double`) v2 @kind f2d;
  #L1327b2.  call temp:= `log`(v0) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L1327b8.  v0:= temp @kind wide;
  #L1327ba.  v2:= (`double`) v3 @kind f2d;
  #L1327bc.  call temp:= `log`(v2) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L1327c2.  v2:= temp @kind wide;
  #L1327c4.  v0:= v0 / v2 @kind double;
  #L1327c6.  v2:= (`float`) v0 @kind d2f;
  #L1327c8.  return v2;
  #L1327ca.  v2:= NaNF;
  #L1327ce.  return v2;
}
procedure `double` `log2`(`double` v2 ) @signature `Lkotlin/math/c;.log2:(D)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13272c.  call temp:= `log`(v2) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L132732.  v2:= temp @kind wide;
  #L132734.  v0:= `@@kotlin.math.a.a` @type ^`double` @kind wide;
  #L132738.  v2:= v2 / v0 @kind double;
  #L13273a.  return v2 @kind wide;
}
procedure `float` `log2`(`float` v4 ) @signature `Lkotlin/math/c;.log2:(F)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1327e0.  v0:= (`double`) v4 @kind f2d;
  #L1327e2.  call temp:= `log`(v0) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L1327e8.  v0:= temp @kind wide;
  #L1327ea.  v2:= `@@kotlin.math.a.a` @type ^`double` @kind wide;
  #L1327ee.  v0:= v0 / v2 @kind double;
  #L1327f0.  v4:= (`float`) v0 @kind d2f;
  #L1327f2.  return v4;
}
procedure `int` `roundToInt`(`double` v5 ) @signature `Lkotlin/math/c;.roundToInt:(D)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1328a4.  call temp:= `isNaN`(v5) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L1328aa.  v0:= temp;
  #L1328ac.  if v0 != 0 then goto L1328e2;
  #L1328b0.  v0:= 2147483647I;
  #L1328b6.  v1:= (`double`) v0 @kind i2d;
  #L1328b8.  v3:= -2147483648I;
  #L1328bc.  v4:= dcmpl(v5, v1);
  #L1328c0.  if v4 <= 0 then goto L1328c6;
  #L1328c4.  goto L1328e0;
  #L1328c6.  v0:= (`double`) v3 @kind i2d;
  #L1328c8.  v2:= dcmpg(v5, v0);
  #L1328cc.  if v2 >= 0 then goto L1328d6;
  #L1328d0.  v0:= -2147483648I;
  #L1328d4.  goto L1328e0;
  #L1328d6.  call temp:= `round`(v5) @signature `Ljava/lang/Math;.round:(D)J` @kind static;
  #L1328dc.  v5:= temp @kind wide;
  #L1328de.  v0:= (`int`) v5 @kind l2i;
  #L1328e0.  return v0;
  #L1328e2.  v5:= new `java.lang.IllegalArgumentException`;
  #L1328e6.  v6:= "Cannot round NaN value." @kind object;
  #L1328ea.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1328f0.  throw v5;
}
procedure `int` `roundToInt`(`float` v1 ) @signature `Lkotlin/math/c;.roundToInt:(F)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L132904.  call temp:= `isNaN`(v1) @signature `Ljava/lang/Float;.isNaN:(F)Z` @kind static;
  #L13290a.  v0:= temp;
  #L13290c.  if v0 != 0 then goto L13291a;
  #L132910.  call temp:= `round`(v1) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L132916.  v1:= temp;
  #L132918.  return v1;
  #L13291a.  v1:= new `java.lang.IllegalArgumentException`;
  #L13291e.  v0:= "Cannot round NaN value." @kind object;
  #L132922.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L132928.  throw v1;
}
procedure `long` `roundToLong`(`double` v1 ) @signature `Lkotlin/math/c;.roundToLong:(D)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13293c.  call temp:= `isNaN`(v1) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L132942.  v0:= temp;
  #L132944.  if v0 != 0 then goto L132952;
  #L132948.  call temp:= `round`(v1) @signature `Ljava/lang/Math;.round:(D)J` @kind static;
  #L13294e.  v1:= temp @kind wide;
  #L132950.  return v1 @kind wide;
  #L132952.  v1:= new `java.lang.IllegalArgumentException`;
  #L132956.  v2:= "Cannot round NaN value." @kind object;
  #L13295a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L132960.  throw v1;
}
procedure `long` `roundToLong`(`float` v2 ) @signature `Lkotlin/math/c;.roundToLong:(F)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L132974.  v0:= (`double`) v2 @kind f2d;
  #L132976.  call temp:= `roundToLong`(v0) @signature `Lkotlin/math/MathKt;.roundToLong:(D)J` @kind static;
  #L13297c.  v0:= temp @kind wide;
  #L13297e.  return v0 @kind wide;
}
procedure `double` `truncate`(`double` v3 ) @signature `Lkotlin/math/c;.truncate:(D)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13274c.  call temp:= `isNaN`(v3) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L132752.  v0:= temp;
  #L132754.  if v0 != 0 then goto L132784;
  #L132758.  call temp:= `isInfinite`(v3) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L13275e.  v0:= temp;
  #L132760.  if v0 == 0 then goto L132766;
  #L132764.  goto L132784;
  #L132766.  v0:= 0I;
  #L132768.  v0:= (`double`) v0 @kind i2d;
  #L13276a.  v2:= dcmpl(v3, v0);
  #L13276e.  if v2 <= 0 then goto L13277c;
  #L132772.  call temp:= `floor`(v3) @signature `Ljava/lang/Math;.floor:(D)D` @kind static;
  #L132778.  v3:= temp @kind wide;
  #L13277a.  goto L132784;
  #L13277c.  call temp:= `ceil`(v3) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L132782.  v3:= temp @kind wide;
  #L132784.  return v3 @kind wide;
}
procedure `float` `truncate`(`float` v2 ) @signature `Lkotlin/math/c;.truncate:(F)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L132804.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Float;.isNaN:(F)Z` @kind static;
  #L13280a.  v0:= temp;
  #L13280c.  if v0 != 0 then goto L132842;
  #L132810.  call temp:= `isInfinite`(v2) @signature `Ljava/lang/Float;.isInfinite:(F)Z` @kind static;
  #L132816.  v0:= temp;
  #L132818.  if v0 == 0 then goto L13281e;
  #L13281c.  goto L132842;
  #L13281e.  v0:= 0I;
  #L132820.  v0:= (`float`) v0 @kind i2f;
  #L132822.  v0:= fcmpl(v2, v0);
  #L132826.  if v0 <= 0 then goto L132836;
  #L13282a.  v0:= (`double`) v2 @kind f2d;
  #L13282c.  call temp:= `floor`(v0) @signature `Ljava/lang/Math;.floor:(D)D` @kind static;
  #L132832.  v0:= temp @kind wide;
  #L132834.  goto L132840;
  #L132836.  v0:= (`double`) v2 @kind f2d;
  #L132838.  call temp:= `ceil`(v0) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L13283e.  v0:= temp @kind wide;
  #L132840.  v2:= (`float`) v0 @kind d2f;
  #L132842.  return v2;
}
