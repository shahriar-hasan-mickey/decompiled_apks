record `kotlin.math.a` @kind class @AccessFlag FINAL {
}
global `double` `@@kotlin.math.a.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `double` `@@kotlin.math.a.b` @AccessFlag PUBLIC_STATIC_FINAL;
global `double` `@@kotlin.math.a.c` @AccessFlag PUBLIC_STATIC_FINAL;
global `double` `@@kotlin.math.a.d` @AccessFlag PUBLIC_STATIC_FINAL;
global `double` `@@kotlin.math.a.e` @AccessFlag PUBLIC_STATIC_FINAL;
global `double` `@@kotlin.math.a.f` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/math/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1324b0.  v0:= 2.0D;
  #L1324b4.  call temp:= `log`(v0) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L1324ba.  v0:= temp @kind wide;
  #L1324bc.  `@@kotlin.math.a.a` @type ^`double` := v0 @kind wide;
  #L1324c0.  v0:= 1.0D;
  #L1324c4.  call temp:= `ulp`(v0) @signature `Ljava/lang/Math;.ulp:(D)D` @kind static;
  #L1324ca.  v0:= temp @kind wide;
  #L1324cc.  `@@kotlin.math.a.b` @type ^`double` := v0 @kind wide;
  #L1324d0.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L1324d6.  v0:= temp @kind wide;
  #L1324d8.  `@@kotlin.math.a.c` @type ^`double` := v0 @kind wide;
  #L1324dc.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L1324e2.  v0:= temp @kind wide;
  #L1324e4.  `@@kotlin.math.a.d` @type ^`double` := v0 @kind wide;
  #L1324e8.  v2:= 1I;
  #L1324ea.  v2:= (`double`) v2 @kind i2d;
  #L1324ec.  v4:= `@@kotlin.math.a.c` @type ^`double` @kind wide;
  #L1324f0.  v4:= v2 / v4 @kind double;
  #L1324f4.  `@@kotlin.math.a.e` @type ^`double` := v4 @kind wide;
  #L1324f8.  v2:= v2 / v0 @kind double;
  #L1324fa.  `@@kotlin.math.a.f` @type ^`double` := v2 @kind wide;
  #L1324fe.  return @kind void;
}
