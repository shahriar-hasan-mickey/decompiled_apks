record `kotlin.sequences.TakeWhileSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.TakeWhileSequence$iterator$1.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.TakeWhileSequence$iterator$1.b` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlin.sequences.TakeWhileSequence$iterator$1.c` @AccessFlag PRIVATE;
  `kotlin.sequences.TakeWhileSequence` `kotlin.sequences.TakeWhileSequence$iterator$1.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.TakeWhileSequence$iterator$1` v0 @kind this, `kotlin.sequences.TakeWhileSequence` v1 @kind object) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.<init>:(Lkotlin/sequences/TakeWhileSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L141f48.  v0.`kotlin.sequences.TakeWhileSequence$iterator$1.d` @type ^`kotlin.sequences.TakeWhileSequence` := v1 @kind object;
  #L141f4c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L141f52.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/TakeWhileSequence;.access$getSequence$p:(Lkotlin/sequences/TakeWhileSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L141f58.  v1:= temp @kind object;
  #L141f5a.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L141f60.  v1:= temp @kind object;
  #L141f62.  v0.`kotlin.sequences.TakeWhileSequence$iterator$1.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L141f66.  v1:= -1I;
  #L141f68.  v0.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int` := v1;
  #L141f6c.  return @kind void;
}
procedure `void` `b`(`kotlin.sequences.TakeWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L141f80.  v0:= v2.`kotlin.sequences.TakeWhileSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L141f84.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L141f8a.  v0:= temp;
  #L141f8c.  if v0 == 0 then goto L141fcc;
  #L141f90.  v0:= v2.`kotlin.sequences.TakeWhileSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L141f94.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L141f9a.  v0:= temp @kind object;
  #L141f9c.  v1:= v2.`kotlin.sequences.TakeWhileSequence$iterator$1.d` @type ^`kotlin.sequences.TakeWhileSequence` @kind object;
  #L141fa0.  call temp:= `access$getPredicate$p`(v1) @signature `Lkotlin/sequences/TakeWhileSequence;.access$getPredicate$p:(Lkotlin/sequences/TakeWhileSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L141fa6.  v1:= temp @kind object;
  #L141fa8.  call temp:= `invoke`(v1, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L141fae.  v1:= temp @kind object;
  #L141fb0.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L141fb4.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L141fba.  v1:= temp;
  #L141fbc.  if v1 == 0 then goto L141fcc;
  #L141fc0.  v1:= 1I;
  #L141fc2.  v2.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int` := v1;
  #L141fc6.  v2.`kotlin.sequences.TakeWhileSequence$iterator$1.c` @type ^`java.lang.Object` := v0 @kind object;
  #L141fca.  return @kind void;
  #L141fcc.  v0:= 0I;
  #L141fce.  v2.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int` := v0;
  #L141fd2.  return @kind void;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.TakeWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L141f30.  v0:= v1.`kotlin.sequences.TakeWhileSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L141f34.  return v0 @kind object;
}
procedure `java.lang.Object` `getNextItem`(`kotlin.sequences.TakeWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.getNextItem:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L141ed4.  v0:= v1.`kotlin.sequences.TakeWhileSequence$iterator$1.c` @type ^`java.lang.Object` @kind object;
  #L141ed8.  return v0 @kind object;
}
procedure `int` `getNextState`(`kotlin.sequences.TakeWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.getNextState:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L141ebc.  v0:= v1.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int`;
  #L141ec0.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.sequences.TakeWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L141e8c.  v0:= v2.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int`;
  #L141e90.  v1:= -1I;
  #L141e92.  if v0 != v1 then goto L141e9c;
  #L141e96.  call `b`(v2) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.b:()V` @kind direct;
  #L141e9c.  v0:= v2.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int`;
  #L141ea0.  v1:= 1I;
  #L141ea2.  if v0 != v1 then goto L141ea8;
  #L141ea6.  goto L141eaa;
  #L141ea8.  v1:= 0I;
  #L141eaa.  return v1;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.TakeWhileSequence$iterator$1` v3 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L141eec.  v0:= v3.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int`;
  #L141ef0.  v1:= -1I;
  #L141ef2.  if v0 != v1 then goto L141efc;
  #L141ef6.  call `b`(v3) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.b:()V` @kind direct;
  #L141efc.  v0:= v3.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int`;
  #L141f00.  if v0 == 0 then goto L141f14;
  #L141f04.  v0:= v3.`kotlin.sequences.TakeWhileSequence$iterator$1.c` @type ^`java.lang.Object` @kind object;
  #L141f08.  v2:= 0I;
  #L141f0a.  v3.`kotlin.sequences.TakeWhileSequence$iterator$1.c` @type ^`java.lang.Object` := v2 @kind object;
  #L141f0e.  v3.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int` := v1;
  #L141f12.  return v0 @kind object;
  #L141f14.  v0:= new `java.util.NoSuchElementException`;
  #L141f18.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L141f1e.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.TakeWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L141fe4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L141fe8.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L141fec.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L141ff2.  throw v0;
}
procedure `void` `setNextItem`(`kotlin.sequences.TakeWhileSequence$iterator$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.setNextItem:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L142004.  v0.`kotlin.sequences.TakeWhileSequence$iterator$1.c` @type ^`java.lang.Object` := v1 @kind object;
  #L142008.  return @kind void;
}
procedure `void` `setNextState`(`kotlin.sequences.TakeWhileSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/TakeWhileSequence$iterator$1;.setNextState:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L14201c.  v0.`kotlin.sequences.TakeWhileSequence$iterator$1.b` @type ^`int` := v1;
  #L142020.  return @kind void;
}
