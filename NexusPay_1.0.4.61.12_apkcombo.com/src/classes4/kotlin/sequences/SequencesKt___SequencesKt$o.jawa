record `kotlin.sequences.SequencesKt___SequencesKt$o` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.RestrictedSuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$o.b` @AccessFlag PRIVATE_SYNTHETIC;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$o.c` @AccessFlag ;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$o.d` @AccessFlag ;
  `int` `kotlin.sequences.SequencesKt___SequencesKt$o.e` @AccessFlag ;
  `kotlin.sequences.Sequence` `kotlin.sequences.SequencesKt___SequencesKt$o.f` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function2` `kotlin.sequences.SequencesKt___SequencesKt$o.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.SequencesKt___SequencesKt$o` v0 @kind this, `kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L13ddbc.  v0.`kotlin.sequences.SequencesKt___SequencesKt$o.f` @type ^`kotlin.sequences.Sequence` := v1 @kind object;
  #L13ddc0.  v0.`kotlin.sequences.SequencesKt___SequencesKt$o.g` @type ^`kotlin.jvm.functions.Function2` := v2 @kind object;
  #L13ddc4.  v1:= 2I;
  #L13ddc6.  call `<init>`(v0, v1, v3) @signature `Lkotlin/coroutines/jvm/internal/RestrictedSuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L13ddcc.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlin.sequences.SequencesKt___SequencesKt$o` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13dd88.  v0:= "completion" @kind object;
  #L13dd8c.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13dd92.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$o`;
  #L13dd96.  v1:= v3.`kotlin.sequences.SequencesKt___SequencesKt$o.f` @type ^`kotlin.sequences.Sequence` @kind object;
  #L13dd9a.  v2:= v3.`kotlin.sequences.SequencesKt___SequencesKt$o.g` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L13dd9e.  call `<init>`(v0, v1, v2, v5) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L13dda4.  v0.`kotlin.sequences.SequencesKt___SequencesKt$o.b` @type ^`java.lang.Object` := v4 @kind object;
  #L13dda8.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.sequences.SequencesKt___SequencesKt$o` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13dc68.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L13dc6c.  call temp:= `create`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L13dc72.  v1:= temp @kind object;
  #L13dc74.  v1:= (`kotlin.sequences.SequencesKt___SequencesKt$o`) v1 @kind object;
  #L13dc78.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L13dc7c.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L13dc82.  v1:= temp @kind object;
  #L13dc84.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlin.sequences.SequencesKt___SequencesKt$o` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13dc98.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L13dc9e.  v0:= temp @kind object;
  #L13dca0.  v1:= v7.`kotlin.sequences.SequencesKt___SequencesKt$o.e` @type ^`int`;
  #L13dca4.  v2:= 2I;
  #L13dca6.  v3:= 1I;
  #L13dca8.  if v1 == 0 then goto L13dce0;
  #L13dcac.  if v1 == v3 then goto L13dcb4;
  #L13dcb0.  if v1 != v2 then goto L13dcd0;
  #L13dcb4.  v1:= v7.`kotlin.sequences.SequencesKt___SequencesKt$o.d` @type ^`java.lang.Object` @kind object;
  #L13dcb8.  v3:= v7.`kotlin.sequences.SequencesKt___SequencesKt$o.c` @type ^`java.lang.Object` @kind object;
  #L13dcbc.  v3:= (`java.util.Iterator`) v3 @kind object;
  #L13dcc0.  v4:= v7.`kotlin.sequences.SequencesKt___SequencesKt$o.b` @type ^`java.lang.Object` @kind object;
  #L13dcc4.  v4:= (`kotlin.sequences.SequenceScope`) v4 @kind object;
  #L13dcc8.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L13dcce.  goto L13dd30;
  #L13dcd0.  v8:= new `java.lang.IllegalStateException`;
  #L13dcd4.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L13dcd8.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13dcde.  throw v8;
  #L13dce0.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L13dce6.  v8:= v7.`kotlin.sequences.SequencesKt___SequencesKt$o.b` @type ^`java.lang.Object` @kind object;
  #L13dcea.  v4:= v8 @kind object;
  #L13dcec.  v4:= (`kotlin.sequences.SequenceScope`) v4 @kind object;
  #L13dcf0.  v8:= v7.`kotlin.sequences.SequencesKt___SequencesKt$o.f` @type ^`kotlin.sequences.Sequence` @kind object;
  #L13dcf4.  call temp:= `iterator`(v8) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13dcfa.  v8:= temp @kind object;
  #L13dcfc.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13dd02.  v1:= temp;
  #L13dd04.  if v1 == 0 then goto L13dd70;
  #L13dd08.  call temp:= `next`(v8) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13dd0e.  v1:= temp @kind object;
  #L13dd10.  v7.`kotlin.sequences.SequencesKt___SequencesKt$o.b` @type ^`java.lang.Object` := v4 @kind object;
  #L13dd14.  v7.`kotlin.sequences.SequencesKt___SequencesKt$o.c` @type ^`java.lang.Object` := v8 @kind object;
  #L13dd18.  v7.`kotlin.sequences.SequencesKt___SequencesKt$o.d` @type ^`java.lang.Object` := v1 @kind object;
  #L13dd1c.  v7.`kotlin.sequences.SequencesKt___SequencesKt$o.e` @type ^`int` := v3;
  #L13dd20.  call temp:= `yield`(v4, v1, v7) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L13dd26.  v3:= temp @kind object;
  #L13dd28.  if v3 != v0 then goto L13dd2e;
  #L13dd2c.  return v0 @kind object;
  #L13dd2e.  v3:= v8 @kind object;
  #L13dd30.  v8:= v7 @kind object;
  #L13dd32.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13dd38.  v5:= temp;
  #L13dd3a.  if v5 == 0 then goto L13dd70;
  #L13dd3e.  v5:= v8.`kotlin.sequences.SequencesKt___SequencesKt$o.g` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L13dd42.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13dd48.  v6:= temp @kind object;
  #L13dd4a.  call temp:= `invoke`(v5, v1, v6) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13dd50.  v1:= temp @kind object;
  #L13dd52.  v8.`kotlin.sequences.SequencesKt___SequencesKt$o.b` @type ^`java.lang.Object` := v4 @kind object;
  #L13dd56.  v8.`kotlin.sequences.SequencesKt___SequencesKt$o.c` @type ^`java.lang.Object` := v3 @kind object;
  #L13dd5a.  v8.`kotlin.sequences.SequencesKt___SequencesKt$o.d` @type ^`java.lang.Object` := v1 @kind object;
  #L13dd5e.  v8.`kotlin.sequences.SequencesKt___SequencesKt$o.e` @type ^`int` := v2;
  #L13dd62.  call temp:= `yield`(v4, v1, v8) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L13dd68.  v5:= temp @kind object;
  #L13dd6a.  if v5 != v0 then goto L13dd32;
  #L13dd6e.  return v0 @kind object;
  #L13dd70.  v8:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L13dd74.  return v8 @kind object;
}
