record `kotlin.sequences.SubSequence` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface, `kotlin.sequences.DropTakeSequence` @kind interface {
  `kotlin.sequences.Sequence` `kotlin.sequences.SubSequence.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.SubSequence.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.SubSequence.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.SubSequence` v1 @kind this, `kotlin.sequences.Sequence` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lkotlin/sequences/SubSequence;.<init>:(Lkotlin/sequences/Sequence;II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L141b30.  v0:= "sequence" @kind object;
  #L141b34.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141b3a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L141b40.  v1.`kotlin.sequences.SubSequence.a` @type ^`kotlin.sequences.Sequence` := v2 @kind object;
  #L141b44.  v1.`kotlin.sequences.SubSequence.b` @type ^`int` := v3;
  #L141b48.  v1.`kotlin.sequences.SubSequence.c` @type ^`int` := v4;
  #L141b4c.  v2:= 1I;
  #L141b4e.  v4:= 0I;
  #L141b50.  if v3 < 0 then goto L141b58;
  #L141b54.  v3:= 1I;
  #L141b56.  goto L141b5a;
  #L141b58.  v3:= 0I;
  #L141b5a.  if v3 == 0 then goto L141c0e;
  #L141b5e.  v3:= v1.`kotlin.sequences.SubSequence.c` @type ^`int`;
  #L141b62.  if v3 < 0 then goto L141b6a;
  #L141b66.  v3:= 1I;
  #L141b68.  goto L141b6c;
  #L141b6a.  v3:= 0I;
  #L141b6c.  if v3 == 0 then goto L141bd4;
  #L141b70.  v3:= v1.`kotlin.sequences.SubSequence.c` @type ^`int`;
  #L141b74.  v0:= v1.`kotlin.sequences.SubSequence.b` @type ^`int`;
  #L141b78.  if v3 < v0 then goto L141b7e;
  #L141b7c.  goto L141b80;
  #L141b7e.  v2:= 0I;
  #L141b80.  if v2 == 0 then goto L141b86;
  #L141b84.  return @kind void;
  #L141b86.  v2:= new `java.lang.StringBuilder`;
  #L141b8a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L141b90.  v3:= "endIndex should be not less than startIndex, but was " @kind object;
  #L141b94.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L141b9a.  v3:= v1.`kotlin.sequences.SubSequence.c` @type ^`int`;
  #L141b9e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L141ba4.  v3:= " < " @kind object;
  #L141ba8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L141bae.  v3:= v1.`kotlin.sequences.SubSequence.b` @type ^`int`;
  #L141bb2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L141bb8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L141bbe.  v2:= temp @kind object;
  #L141bc0.  v3:= new `java.lang.IllegalArgumentException`;
  #L141bc4.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L141bca.  v2:= temp @kind object;
  #L141bcc.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L141bd2.  throw v3;
  #L141bd4.  v2:= new `java.lang.StringBuilder`;
  #L141bd8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L141bde.  v3:= "endIndex should be non-negative, but is " @kind object;
  #L141be2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L141be8.  v3:= v1.`kotlin.sequences.SubSequence.c` @type ^`int`;
  #L141bec.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L141bf2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L141bf8.  v2:= temp @kind object;
  #L141bfa.  v3:= new `java.lang.IllegalArgumentException`;
  #L141bfe.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L141c04.  v2:= temp @kind object;
  #L141c06.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L141c0c.  throw v3;
  #L141c0e.  v2:= new `java.lang.StringBuilder`;
  #L141c12.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L141c18.  v3:= "startIndex should be non-negative, but is " @kind object;
  #L141c1c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L141c22.  v3:= v1.`kotlin.sequences.SubSequence.b` @type ^`int`;
  #L141c26.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L141c2c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L141c32.  v2:= temp @kind object;
  #L141c34.  v3:= new `java.lang.IllegalArgumentException`;
  #L141c38.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L141c3e.  v2:= temp @kind object;
  #L141c40.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L141c46.  throw v3;
}
procedure `int` `a`(`kotlin.sequences.SubSequence` v2 @kind this) @signature `Lkotlin/sequences/SubSequence;.a:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L141a64.  v0:= v2.`kotlin.sequences.SubSequence.c` @type ^`int`;
  #L141a68.  v1:= v2.`kotlin.sequences.SubSequence.b` @type ^`int`;
  #L141a6c.  v0:= v0 - v1 @kind int;
  #L141a6e.  return v0;
}
procedure `int` `access$getEndIndex$p`(`kotlin.sequences.SubSequence` v0 @kind object) @signature `Lkotlin/sequences/SubSequence;.access$getEndIndex$p:(Lkotlin/sequences/SubSequence;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L141a34.  v0:= v0.`kotlin.sequences.SubSequence.c` @type ^`int`;
  #L141a38.  return v0;
}
procedure `kotlin.sequences.Sequence` `access$getSequence$p`(`kotlin.sequences.SubSequence` v0 @kind object) @signature `Lkotlin/sequences/SubSequence;.access$getSequence$p:(Lkotlin/sequences/SubSequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L141a9c.  v0:= v0.`kotlin.sequences.SubSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L141aa0.  return v0 @kind object;
}
procedure `int` `access$getStartIndex$p`(`kotlin.sequences.SubSequence` v0 @kind object) @signature `Lkotlin/sequences/SubSequence;.access$getStartIndex$p:(Lkotlin/sequences/SubSequence;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L141a4c.  v0:= v0.`kotlin.sequences.SubSequence.b` @type ^`int`;
  #L141a50.  return v0;
}
procedure `kotlin.sequences.Sequence` `drop`(`kotlin.sequences.SubSequence` v3 @kind this, `int` v4 ) @signature `Lkotlin/sequences/SubSequence;.drop:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L141ab4.  call temp:= `a`(v3) @signature `Lkotlin/sequences/SubSequence;.a:()I` @kind direct;
  #L141aba.  v0:= temp;
  #L141abc.  if v4 < v0 then goto L141aca;
  #L141ac0.  call temp:= `emptySequence`() @signature `Lkotlin/sequences/SequencesKt;.emptySequence:()Lkotlin/sequences/Sequence;` @kind static;
  #L141ac6.  v4:= temp @kind object;
  #L141ac8.  goto L141ae4;
  #L141aca.  v0:= new `kotlin.sequences.SubSequence`;
  #L141ace.  v1:= v3.`kotlin.sequences.SubSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L141ad2.  v2:= v3.`kotlin.sequences.SubSequence.b` @type ^`int`;
  #L141ad6.  v2:= v2 + v4 @kind int;
  #L141ad8.  v4:= v3.`kotlin.sequences.SubSequence.c` @type ^`int`;
  #L141adc.  call `<init>`(v0, v1, v2, v4) @signature `Lkotlin/sequences/SubSequence;.<init>:(Lkotlin/sequences/Sequence;II)V` @kind direct;
  #L141ae2.  v4:= v0 @kind object;
  #L141ae4.  return v4 @kind object;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.SubSequence` v1 @kind this) @signature `Lkotlin/sequences/SubSequence;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L141a80.  v0:= new `kotlin.sequences.SubSequence$iterator$1`;
  #L141a84.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/SubSequence$iterator$1;.<init>:(Lkotlin/sequences/SubSequence;)V` @kind direct;
  #L141a8a.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `take`(`kotlin.sequences.SubSequence` v3 @kind this, `int` v4 ) @signature `Lkotlin/sequences/SubSequence;.take:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L141af8.  call temp:= `a`(v3) @signature `Lkotlin/sequences/SubSequence;.a:()I` @kind direct;
  #L141afe.  v0:= temp;
  #L141b00.  if v4 < v0 then goto L141b08;
  #L141b04.  v0:= v3 @kind object;
  #L141b06.  goto L141b1c;
  #L141b08.  v0:= new `kotlin.sequences.SubSequence`;
  #L141b0c.  v1:= v3.`kotlin.sequences.SubSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L141b10.  v2:= v3.`kotlin.sequences.SubSequence.b` @type ^`int`;
  #L141b14.  v4:= v4 + v2 @kind int;
  #L141b16.  call `<init>`(v0, v1, v2, v4) @signature `Lkotlin/sequences/SubSequence;.<init>:(Lkotlin/sequences/Sequence;II)V` @kind direct;
  #L141b1c.  return v0 @kind object;
}
