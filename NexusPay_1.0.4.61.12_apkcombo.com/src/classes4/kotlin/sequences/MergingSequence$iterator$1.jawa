record `kotlin.sequences.MergingSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.MergingSequence$iterator$1.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Iterator` `kotlin.sequences.MergingSequence$iterator$1.b` @AccessFlag PRIVATE_FINAL;
  `kotlin.sequences.MergingSequence` `kotlin.sequences.MergingSequence$iterator$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.MergingSequence$iterator$1` v1 @kind this, `kotlin.sequences.MergingSequence` v2 @kind object) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.<init>:(Lkotlin/sequences/MergingSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L13be34.  v1.`kotlin.sequences.MergingSequence$iterator$1.c` @type ^`kotlin.sequences.MergingSequence` := v2 @kind object;
  #L13be38.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13be3e.  call temp:= `access$getSequence1$p`(v2) @signature `Lkotlin/sequences/MergingSequence;.access$getSequence1$p:(Lkotlin/sequences/MergingSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L13be44.  v0:= temp @kind object;
  #L13be46.  call temp:= `iterator`(v0) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13be4c.  v0:= temp @kind object;
  #L13be4e.  v1.`kotlin.sequences.MergingSequence$iterator$1.a` @type ^`java.util.Iterator` := v0 @kind object;
  #L13be52.  call temp:= `access$getSequence2$p`(v2) @signature `Lkotlin/sequences/MergingSequence;.access$getSequence2$p:(Lkotlin/sequences/MergingSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L13be58.  v2:= temp @kind object;
  #L13be5a.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13be60.  v2:= temp @kind object;
  #L13be62.  v1.`kotlin.sequences.MergingSequence$iterator$1.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L13be66.  return @kind void;
}
procedure `java.util.Iterator` `getIterator1`(`kotlin.sequences.MergingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.getIterator1:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13be04.  v0:= v1.`kotlin.sequences.MergingSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13be08.  return v0 @kind object;
}
procedure `java.util.Iterator` `getIterator2`(`kotlin.sequences.MergingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.getIterator2:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13be1c.  v0:= v1.`kotlin.sequences.MergingSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L13be20.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.MergingSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13bd8c.  v0:= v1.`kotlin.sequences.MergingSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13bd90.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13bd96.  v0:= temp;
  #L13bd98.  if v0 == 0 then goto L13bdb0;
  #L13bd9c.  v0:= v1.`kotlin.sequences.MergingSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L13bda0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13bda6.  v0:= temp;
  #L13bda8.  if v0 == 0 then goto L13bdb0;
  #L13bdac.  v0:= 1I;
  #L13bdae.  goto L13bdb2;
  #L13bdb0.  v0:= 0I;
  #L13bdb2.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.MergingSequence$iterator$1` v3 @kind this) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13bdc4.  v0:= v3.`kotlin.sequences.MergingSequence$iterator$1.c` @type ^`kotlin.sequences.MergingSequence` @kind object;
  #L13bdc8.  call temp:= `access$getTransform$p`(v0) @signature `Lkotlin/sequences/MergingSequence;.access$getTransform$p:(Lkotlin/sequences/MergingSequence;)Lkotlin/jvm/functions/Function2;` @kind static;
  #L13bdce.  v0:= temp @kind object;
  #L13bdd0.  v1:= v3.`kotlin.sequences.MergingSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13bdd4.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13bdda.  v1:= temp @kind object;
  #L13bddc.  v2:= v3.`kotlin.sequences.MergingSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L13bde0.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13bde6.  v2:= temp @kind object;
  #L13bde8.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13bdee.  v0:= temp @kind object;
  #L13bdf0.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.sequences.MergingSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13be78.  v0:= new `java.lang.UnsupportedOperationException`;
  #L13be7c.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L13be80.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13be86.  throw v0;
}
