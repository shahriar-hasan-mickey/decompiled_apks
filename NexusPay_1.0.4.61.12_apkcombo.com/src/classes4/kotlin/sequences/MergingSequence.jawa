record `kotlin.sequences.MergingSequence` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface {
  `kotlin.sequences.Sequence` `kotlin.sequences.MergingSequence.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.sequences.Sequence` `kotlin.sequences.MergingSequence.b` @AccessFlag PRIVATE_FINAL;
  `kotlin.jvm.functions.Function2` `kotlin.sequences.MergingSequence.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.MergingSequence` v1 @kind this, `kotlin.sequences.Sequence` v2 @kind object, `kotlin.sequences.Sequence` v3 @kind object, `kotlin.jvm.functions.Function2` v4 @kind object) @signature `Lkotlin/sequences/MergingSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L13befc.  v0:= "sequence1" @kind object;
  #L13bf00.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13bf06.  v0:= "sequence2" @kind object;
  #L13bf0a.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13bf10.  v0:= "transform" @kind object;
  #L13bf14.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13bf1a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13bf20.  v1.`kotlin.sequences.MergingSequence.a` @type ^`kotlin.sequences.Sequence` := v2 @kind object;
  #L13bf24.  v1.`kotlin.sequences.MergingSequence.b` @type ^`kotlin.sequences.Sequence` := v3 @kind object;
  #L13bf28.  v1.`kotlin.sequences.MergingSequence.c` @type ^`kotlin.jvm.functions.Function2` := v4 @kind object;
  #L13bf2c.  return @kind void;
}
procedure `kotlin.sequences.Sequence` `access$getSequence1$p`(`kotlin.sequences.MergingSequence` v0 @kind object) @signature `Lkotlin/sequences/MergingSequence;.access$getSequence1$p:(Lkotlin/sequences/MergingSequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L13becc.  v0:= v0.`kotlin.sequences.MergingSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L13bed0.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `access$getSequence2$p`(`kotlin.sequences.MergingSequence` v0 @kind object) @signature `Lkotlin/sequences/MergingSequence;.access$getSequence2$p:(Lkotlin/sequences/MergingSequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L13bee4.  v0:= v0.`kotlin.sequences.MergingSequence.b` @type ^`kotlin.sequences.Sequence` @kind object;
  #L13bee8.  return v0 @kind object;
}
procedure `kotlin.jvm.functions.Function2` `access$getTransform$p`(`kotlin.sequences.MergingSequence` v0 @kind object) @signature `Lkotlin/sequences/MergingSequence;.access$getTransform$p:(Lkotlin/sequences/MergingSequence;)Lkotlin/jvm/functions/Function2;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L13beb4.  v0:= v0.`kotlin.sequences.MergingSequence.c` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L13beb8.  return v0 @kind object;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.MergingSequence` v1 @kind this) @signature `Lkotlin/sequences/MergingSequence;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13be98.  v0:= new `kotlin.sequences.MergingSequence$iterator$1`;
  #L13be9c.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/MergingSequence$iterator$1;.<init>:(Lkotlin/sequences/MergingSequence;)V` @kind direct;
  #L13bea2.  return v0 @kind object;
}
