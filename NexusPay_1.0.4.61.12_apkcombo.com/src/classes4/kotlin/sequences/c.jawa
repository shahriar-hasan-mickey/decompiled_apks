record `kotlin.sequences.c` @kind class @AccessFlag FINAL extends `kotlin.sequences.SequenceScope` @kind class, `java.util.Iterator` @kind interface, `kotlin.coroutines.Continuation` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int` `kotlin.sequences.c.a` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlin.sequences.c.b` @AccessFlag PRIVATE;
  `java.util.Iterator` `kotlin.sequences.c.c` @AccessFlag PRIVATE;
  `kotlin.coroutines.Continuation` `kotlin.sequences.c.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.sequences.c` v0 @kind this) @signature `Lkotlin/sequences/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L13c1a0.  call `<init>`(v0) @signature `Lkotlin/sequences/SequenceScope;.<init>:()V` @kind direct;
  #L13c1a6.  return @kind void;
}
procedure `java.lang.Throwable` `b`(`kotlin.sequences.c` v3 @kind this) @signature `Lkotlin/sequences/c;.b:()Ljava/lang/Throwable;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13c118.  v0:= v3.`kotlin.sequences.c.a` @type ^`int`;
  #L13c11c.  v1:= 4I;
  #L13c11e.  if v0 == v1 then goto L13c16a;
  #L13c122.  v1:= 5I;
  #L13c124.  if v0 == v1 then goto L13c15a;
  #L13c128.  v0:= new `java.lang.IllegalStateException`;
  #L13c12c.  v1:= new `java.lang.StringBuilder`;
  #L13c130.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13c136.  v2:= "Unexpected state of the iterator: " @kind object;
  #L13c13a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c140.  v2:= v3.`kotlin.sequences.c.a` @type ^`int`;
  #L13c144.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c14a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c150.  v1:= temp @kind object;
  #L13c152.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c158.  goto L13c174;
  #L13c15a.  v0:= new `java.lang.IllegalStateException`;
  #L13c15e.  v1:= "Iterator has failed." @kind object;
  #L13c162.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c168.  goto L13c174;
  #L13c16a.  v0:= new `java.util.NoSuchElementException`;
  #L13c16e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L13c174.  return v0 @kind object;
}
procedure `java.lang.Object` `c`(`kotlin.sequences.c` v1 @kind this) @signature `Lkotlin/sequences/c;.c:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L13c038.  call temp:= `hasNext`(v1) @signature `Lkotlin/sequences/c;.hasNext:()Z` @kind virtual;
  #L13c03e.  v0:= temp;
  #L13c040.  if v0 == 0 then goto L13c04e;
  #L13c044.  call temp:= `next`(v1) @signature `Lkotlin/sequences/c;.next:()Ljava/lang/Object;` @kind virtual;
  #L13c04a.  v0:= temp @kind object;
  #L13c04c.  return v0 @kind object;
  #L13c04e.  v0:= new `java.util.NoSuchElementException`;
  #L13c052.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L13c058.  throw v0;
}
procedure `void` `d`(`kotlin.sequences.c` v0 @kind this, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlin/sequences/c;.d:(Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13c1f8.  v0.`kotlin.sequences.c.d` @type ^`kotlin.coroutines.Continuation` := v1 @kind object;
  #L13c1fc.  return @kind void;
}
procedure `kotlin.coroutines.CoroutineContext` `getContext`(`kotlin.sequences.c` v1 @kind this) @signature `Lkotlin/sequences/c;.getContext:()Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13c188.  v0:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L13c18c.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.c` v4 @kind this) @signature `Lkotlin/sequences/c;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13bf40.  v0:= v4.`kotlin.sequences.c.a` @type ^`int`;
  #L13bf44.  v1:= 0I;
  #L13bf46.  if v0 == 0 then goto L13bf92;
  #L13bf4a.  v2:= 2I;
  #L13bf4c.  v3:= 1I;
  #L13bf4e.  if v0 == v3 then goto L13bf72;
  #L13bf52.  if v0 == v2 then goto L13bf70;
  #L13bf56.  v1:= 3I;
  #L13bf58.  if v0 == v1 then goto L13bf70;
  #L13bf5c.  v1:= 4I;
  #L13bf5e.  if v0 != v1 then goto L13bf66;
  #L13bf62.  v0:= 0I;
  #L13bf64.  return v0;
  #L13bf66.  call temp:= `b`(v4) @signature `Lkotlin/sequences/c;.b:()Ljava/lang/Throwable;` @kind direct;
  #L13bf6c.  v0:= temp @kind object;
  #L13bf6e.  throw v0;
  #L13bf70.  return v3;
  #L13bf72.  v0:= v4.`kotlin.sequences.c.c` @type ^`java.util.Iterator` @kind object;
  #L13bf76.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L13bf7c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13bf82.  v0:= temp;
  #L13bf84.  if v0 == 0 then goto L13bf8e;
  #L13bf88.  v4.`kotlin.sequences.c.a` @type ^`int` := v2;
  #L13bf8c.  return v3;
  #L13bf8e.  v4.`kotlin.sequences.c.c` @type ^`java.util.Iterator` := v1 @kind object;
  #L13bf92.  v0:= 5I;
  #L13bf94.  v4.`kotlin.sequences.c.a` @type ^`int` := v0;
  #L13bf98.  v0:= v4.`kotlin.sequences.c.d` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L13bf9c.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L13bfa2.  v4.`kotlin.sequences.c.d` @type ^`kotlin.coroutines.Continuation` := v1 @kind object;
  #L13bfa6.  v1:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L13bfaa.  v2:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L13bfae.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L13bfb4.  v1:= temp @kind object;
  #L13bfb6.  call `resumeWith`(v0, v1) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L13bfbc.  goto L13bf40;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.c` v3 @kind this) @signature `Lkotlin/sequences/c;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13bfd0.  v0:= v3.`kotlin.sequences.c.a` @type ^`int`;
  #L13bfd4.  if v0 == 0 then goto L13c01e;
  #L13bfd8.  v1:= 1I;
  #L13bfda.  if v0 == v1 then goto L13c01e;
  #L13bfde.  v2:= 2I;
  #L13bfe0.  if v0 == v2 then goto L13c006;
  #L13bfe4.  v1:= 3I;
  #L13bfe6.  if v0 != v1 then goto L13bffc;
  #L13bfea.  v0:= 0I;
  #L13bfec.  v3.`kotlin.sequences.c.a` @type ^`int` := v0;
  #L13bff0.  v0:= v3.`kotlin.sequences.c.b` @type ^`java.lang.Object` @kind object;
  #L13bff4.  v1:= 0I;
  #L13bff6.  v3.`kotlin.sequences.c.b` @type ^`java.lang.Object` := v1 @kind object;
  #L13bffa.  return v0 @kind object;
  #L13bffc.  call temp:= `b`(v3) @signature `Lkotlin/sequences/c;.b:()Ljava/lang/Throwable;` @kind direct;
  #L13c002.  v0:= temp @kind object;
  #L13c004.  throw v0;
  #L13c006.  v3.`kotlin.sequences.c.a` @type ^`int` := v1;
  #L13c00a.  v0:= v3.`kotlin.sequences.c.c` @type ^`java.util.Iterator` @kind object;
  #L13c00e.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L13c014.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13c01a.  v0:= temp @kind object;
  #L13c01c.  return v0 @kind object;
  #L13c01e.  call temp:= `c`(v3) @signature `Lkotlin/sequences/c;.c:()Ljava/lang/Object;` @kind direct;
  #L13c024.  v0:= temp @kind object;
  #L13c026.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.sequences.c` v2 @kind this) @signature `Lkotlin/sequences/c;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13c1b8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L13c1bc.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L13c1c0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c1c6.  throw v0;
}
procedure `void` `resumeWith`(`kotlin.sequences.c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/c;.resumeWith:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L13c1d8.  call `throwOnFailure`(v1) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L13c1de.  v1:= 4I;
  #L13c1e0.  v0.`kotlin.sequences.c.a` @type ^`int` := v1;
  #L13c1e4.  return @kind void;
}
procedure `java.lang.Object` `yield`(`kotlin.sequences.c` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlin/sequences/c;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13c06c.  v1.`kotlin.sequences.c.b` @type ^`java.lang.Object` := v2 @kind object;
  #L13c070.  v2:= 3I;
  #L13c072.  v1.`kotlin.sequences.c.a` @type ^`int` := v2;
  #L13c076.  v1.`kotlin.sequences.c.d` @type ^`kotlin.coroutines.Continuation` := v3 @kind object;
  #L13c07a.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L13c080.  v2:= temp @kind object;
  #L13c082.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L13c088.  v0:= temp @kind object;
  #L13c08a.  if v2 != v0 then goto L13c094;
  #L13c08e.  call `probeCoroutineSuspended`(v3) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L13c094.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L13c09a.  v3:= temp @kind object;
  #L13c09c.  if v2 != v3 then goto L13c0a2;
  #L13c0a0.  return v2 @kind object;
  #L13c0a2.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L13c0a6.  return v2 @kind object;
}
procedure `java.lang.Object` `yieldAll`(`kotlin.sequences.c` v1 @kind this, `java.util.Iterator` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlin/sequences/c;.yieldAll:(Ljava/util/Iterator;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13c0b8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13c0be.  v0:= temp;
  #L13c0c0.  if v0 != 0 then goto L13c0ca;
  #L13c0c4.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L13c0c8.  return v2 @kind object;
  #L13c0ca.  v1.`kotlin.sequences.c.c` @type ^`java.util.Iterator` := v2 @kind object;
  #L13c0ce.  v2:= 2I;
  #L13c0d0.  v1.`kotlin.sequences.c.a` @type ^`int` := v2;
  #L13c0d4.  v1.`kotlin.sequences.c.d` @type ^`kotlin.coroutines.Continuation` := v3 @kind object;
  #L13c0d8.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L13c0de.  v2:= temp @kind object;
  #L13c0e0.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L13c0e6.  v0:= temp @kind object;
  #L13c0e8.  if v2 != v0 then goto L13c0f2;
  #L13c0ec.  call `probeCoroutineSuspended`(v3) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineSuspended:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L13c0f2.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L13c0f8.  v3:= temp @kind object;
  #L13c0fa.  if v2 != v3 then goto L13c100;
  #L13c0fe.  return v2 @kind object;
  #L13c100.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L13c104.  return v2 @kind object;
}
