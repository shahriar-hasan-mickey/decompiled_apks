record `kotlin.sequences.SequencesKt___SequencesKt` @kind class @AccessFlag  extends `kotlin.sequences.e` @kind class {
}
procedure `void` `<init>`(`kotlin.sequences.SequencesKt___SequencesKt` v0 @kind this) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1415d8.  call `<init>`(v0) @signature `Lkotlin/sequences/e;.<init>:()V` @kind direct;
  #L1415de.  return @kind void;
}
procedure `boolean` `all`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.all:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13e27c.  v0:= "$this$all" @kind object;
  #L13e280.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e286.  v0:= "predicate" @kind object;
  #L13e28a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e290.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e296.  v1:= temp @kind object;
  #L13e298.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e29e.  v0:= temp;
  #L13e2a0.  if v0 == 0 then goto L13e2c8;
  #L13e2a4.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e2aa.  v0:= temp @kind object;
  #L13e2ac.  call temp:= `invoke`(v2, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13e2b2.  v0:= temp @kind object;
  #L13e2b4.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L13e2b8.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13e2be.  v0:= temp;
  #L13e2c0.  if v0 != 0 then goto L13e298;
  #L13e2c4.  v1:= 0I;
  #L13e2c6.  return v1;
  #L13e2c8.  v1:= 1I;
  #L13e2ca.  return v1;
}
procedure `boolean` `any`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.any:(Lkotlin/sequences/Sequence;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13e2dc.  v0:= "$this$any" @kind object;
  #L13e2e0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e2e6.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e2ec.  v1:= temp @kind object;
  #L13e2ee.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e2f4.  v1:= temp;
  #L13e2f6.  return v1;
}
procedure `boolean` `any`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.any:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13e308.  v0:= "$this$any" @kind object;
  #L13e30c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e312.  v0:= "predicate" @kind object;
  #L13e316.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e31c.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e322.  v1:= temp @kind object;
  #L13e324.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e32a.  v0:= temp;
  #L13e32c.  if v0 == 0 then goto L13e354;
  #L13e330.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e336.  v0:= temp @kind object;
  #L13e338.  call temp:= `invoke`(v2, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13e33e.  v0:= temp @kind object;
  #L13e340.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L13e344.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13e34a.  v0:= temp;
  #L13e34c.  if v0 == 0 then goto L13e324;
  #L13e350.  v1:= 1I;
  #L13e352.  return v1;
  #L13e354.  v1:= 0I;
  #L13e356.  return v1;
}
procedure `java.lang.Iterable` `asIterable`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.asIterable:(Lkotlin/sequences/Sequence;)Ljava/lang/Iterable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13f064.  v0:= "$this$asIterable" @kind object;
  #L13f068.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f06e.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$asIterable$$inlined$Iterable$1`;
  #L13f072.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$asIterable$$inlined$Iterable$1;.<init>:(Lkotlin/sequences/Sequence;)V` @kind direct;
  #L13f078.  return v0 @kind object;
}
procedure `java.util.Map` `associate`(`kotlin.sequences.Sequence` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.associate:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L14035c.  v0:= "$this$associate" @kind object;
  #L140360.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140366.  v0:= "transform" @kind object;
  #L14036a.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140370.  v0:= new `java.util.LinkedHashMap`;
  #L140374.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L14037a.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L140380.  v3:= temp @kind object;
  #L140382.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L140388.  v1:= temp;
  #L14038a.  if v1 == 0 then goto L1403ba;
  #L14038e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L140394.  v1:= temp @kind object;
  #L140396.  call temp:= `invoke`(v4, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L14039c.  v1:= temp @kind object;
  #L14039e.  v1:= (`kotlin.Pair`) v1 @kind object;
  #L1403a2.  call temp:= `getFirst`(v1) @signature `Lkotlin/Pair;.getFirst:()Ljava/lang/Object;` @kind virtual;
  #L1403a8.  v2:= temp @kind object;
  #L1403aa.  call temp:= `getSecond`(v1) @signature `Lkotlin/Pair;.getSecond:()Ljava/lang/Object;` @kind virtual;
  #L1403b0.  v1:= temp @kind object;
  #L1403b2.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1403b8.  goto L140382;
  #L1403ba.  return v0 @kind object;
}
procedure `java.util.Map` `associateBy`(`kotlin.sequences.Sequence` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.associateBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1403cc.  v0:= "$this$associateBy" @kind object;
  #L1403d0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1403d6.  v0:= "keySelector" @kind object;
  #L1403da.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1403e0.  v0:= new `java.util.LinkedHashMap`;
  #L1403e4.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L1403ea.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1403f0.  v3:= temp @kind object;
  #L1403f2.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1403f8.  v1:= temp;
  #L1403fa.  if v1 == 0 then goto L140416;
  #L1403fe.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L140404.  v1:= temp @kind object;
  #L140406.  call temp:= `invoke`(v4, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L14040c.  v2:= temp @kind object;
  #L14040e.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140414.  goto L1403f2;
  #L140416.  return v0 @kind object;
}
procedure `java.util.Map` `associateBy`(`kotlin.sequences.Sequence` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.associateBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L140428.  v0:= "$this$associateBy" @kind object;
  #L14042c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140432.  v0:= "keySelector" @kind object;
  #L140436.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14043c.  v0:= "valueTransform" @kind object;
  #L140440.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140446.  v0:= new `java.util.LinkedHashMap`;
  #L14044a.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L140450.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L140456.  v3:= temp @kind object;
  #L140458.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L14045e.  v1:= temp;
  #L140460.  if v1 == 0 then goto L140484;
  #L140464.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L14046a.  v1:= temp @kind object;
  #L14046c.  call temp:= `invoke`(v4, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140472.  v2:= temp @kind object;
  #L140474.  call temp:= `invoke`(v5, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L14047a.  v1:= temp @kind object;
  #L14047c.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140482.  goto L140458;
  #L140484.  return v0 @kind object;
}
procedure `java.util.Map` `associateByTo`(`kotlin.sequences.Sequence` v2 @kind object, `java.util.Map` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.associateByTo:(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L140498.  v0:= "$this$associateByTo" @kind object;
  #L14049c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1404a2.  v0:= "destination" @kind object;
  #L1404a6.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1404ac.  v0:= "keySelector" @kind object;
  #L1404b0.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1404b6.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1404bc.  v2:= temp @kind object;
  #L1404be.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1404c4.  v0:= temp;
  #L1404c6.  if v0 == 0 then goto L1404e2;
  #L1404ca.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1404d0.  v0:= temp @kind object;
  #L1404d2.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1404d8.  v1:= temp @kind object;
  #L1404da.  call temp:= `put`(v3, v1, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1404e0.  goto L1404be;
  #L1404e2.  return v3 @kind object;
}
procedure `java.util.Map` `associateByTo`(`kotlin.sequences.Sequence` v2 @kind object, `java.util.Map` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.associateByTo:(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1404f4.  v0:= "$this$associateByTo" @kind object;
  #L1404f8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1404fe.  v0:= "destination" @kind object;
  #L140502.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140508.  v0:= "keySelector" @kind object;
  #L14050c.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140512.  v0:= "valueTransform" @kind object;
  #L140516.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14051c.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L140522.  v2:= temp @kind object;
  #L140524.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L14052a.  v0:= temp;
  #L14052c.  if v0 == 0 then goto L140550;
  #L140530.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L140536.  v0:= temp @kind object;
  #L140538.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L14053e.  v1:= temp @kind object;
  #L140540.  call temp:= `invoke`(v5, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140546.  v0:= temp @kind object;
  #L140548.  call temp:= `put`(v3, v1, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L14054e.  goto L140524;
  #L140550.  return v3 @kind object;
}
procedure `java.util.Map` `associateTo`(`kotlin.sequences.Sequence` v2 @kind object, `java.util.Map` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.associateTo:(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L140564.  v0:= "$this$associateTo" @kind object;
  #L140568.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14056e.  v0:= "destination" @kind object;
  #L140572.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140578.  v0:= "transform" @kind object;
  #L14057c.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140582.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L140588.  v2:= temp @kind object;
  #L14058a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L140590.  v0:= temp;
  #L140592.  if v0 == 0 then goto L1405c2;
  #L140596.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L14059c.  v0:= temp @kind object;
  #L14059e.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1405a4.  v0:= temp @kind object;
  #L1405a6.  v0:= (`kotlin.Pair`) v0 @kind object;
  #L1405aa.  call temp:= `getFirst`(v0) @signature `Lkotlin/Pair;.getFirst:()Ljava/lang/Object;` @kind virtual;
  #L1405b0.  v1:= temp @kind object;
  #L1405b2.  call temp:= `getSecond`(v0) @signature `Lkotlin/Pair;.getSecond:()Ljava/lang/Object;` @kind virtual;
  #L1405b8.  v0:= temp @kind object;
  #L1405ba.  call temp:= `put`(v3, v1, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1405c0.  goto L14058a;
  #L1405c2.  return v3 @kind object;
}
procedure `java.util.Map` `associateWith`(`kotlin.sequences.Sequence` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.associateWith:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1405d4.  v0:= "$this$associateWith" @kind object;
  #L1405d8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1405de.  v0:= "valueSelector" @kind object;
  #L1405e2.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1405e8.  v0:= new `java.util.LinkedHashMap`;
  #L1405ec.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L1405f2.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1405f8.  v3:= temp @kind object;
  #L1405fa.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L140600.  v1:= temp;
  #L140602.  if v1 == 0 then goto L14061e;
  #L140606.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L14060c.  v1:= temp @kind object;
  #L14060e.  call temp:= `invoke`(v4, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140614.  v2:= temp @kind object;
  #L140616.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L14061c.  goto L1405fa;
  #L14061e.  return v0 @kind object;
}
procedure `java.util.Map` `associateWithTo`(`kotlin.sequences.Sequence` v2 @kind object, `java.util.Map` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.associateWithTo:(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L140630.  v0:= "$this$associateWithTo" @kind object;
  #L140634.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14063a.  v0:= "destination" @kind object;
  #L14063e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140644.  v0:= "valueSelector" @kind object;
  #L140648.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14064e.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L140654.  v2:= temp @kind object;
  #L140656.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L14065c.  v0:= temp;
  #L14065e.  if v0 == 0 then goto L14067a;
  #L140662.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L140668.  v0:= temp @kind object;
  #L14066a.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140670.  v1:= temp @kind object;
  #L140672.  call temp:= `put`(v3, v0, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140678.  goto L140656;
  #L14067a.  return v3 @kind object;
}
procedure `double` `averageOfByte`(`kotlin.sequences.Sequence` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.averageOfByte:(Lkotlin/sequences/Sequence;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13e428.  v0:= "$this$average" @kind object;
  #L13e42c.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e432.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e438.  v5:= temp @kind object;
  #L13e43a.  v0:= 0L;
  #L13e43e.  v2:= 0I;
  #L13e440.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e446.  v3:= temp;
  #L13e448.  if v3 == 0 then goto L13e474;
  #L13e44c.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e452.  v3:= temp @kind object;
  #L13e454.  v3:= (`java.lang.Number`) v3 @kind object;
  #L13e458.  call temp:= `byteValue`(v3) @signature `Ljava/lang/Number;.byteValue:()B` @kind virtual;
  #L13e45e.  v3:= temp;
  #L13e460.  v3:= (`double`) v3 @kind i2d;
  #L13e462.  v0:= v0 + v3 @kind double;
  #L13e464.  v2:= v2 + 1;
  #L13e468.  if v2 >= 0 then goto L13e440;
  #L13e46c.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L13e472.  goto L13e440;
  #L13e474.  if v2 != 0 then goto L13e47e;
  #L13e478.  v0:= NaND;
  #L13e47c.  goto L13e482;
  #L13e47e.  v2:= (`double`) v2 @kind i2d;
  #L13e480.  v0:= v0 / v2 @kind double;
  #L13e482.  return v0 @kind wide;
}
procedure `double` `averageOfDouble`(`kotlin.sequences.Sequence` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.averageOfDouble:(Lkotlin/sequences/Sequence;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13e494.  v0:= "$this$average" @kind object;
  #L13e498.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e49e.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e4a4.  v5:= temp @kind object;
  #L13e4a6.  v0:= 0L;
  #L13e4aa.  v2:= 0I;
  #L13e4ac.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e4b2.  v3:= temp;
  #L13e4b4.  if v3 == 0 then goto L13e4de;
  #L13e4b8.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e4be.  v3:= temp @kind object;
  #L13e4c0.  v3:= (`java.lang.Number`) v3 @kind object;
  #L13e4c4.  call temp:= `doubleValue`(v3) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L13e4ca.  v3:= temp @kind wide;
  #L13e4cc.  v0:= v0 + v3 @kind double;
  #L13e4ce.  v2:= v2 + 1;
  #L13e4d2.  if v2 >= 0 then goto L13e4ac;
  #L13e4d6.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L13e4dc.  goto L13e4ac;
  #L13e4de.  if v2 != 0 then goto L13e4e8;
  #L13e4e2.  v0:= NaND;
  #L13e4e6.  goto L13e4ec;
  #L13e4e8.  v2:= (`double`) v2 @kind i2d;
  #L13e4ea.  v0:= v0 / v2 @kind double;
  #L13e4ec.  return v0 @kind wide;
}
procedure `double` `averageOfFloat`(`kotlin.sequences.Sequence` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.averageOfFloat:(Lkotlin/sequences/Sequence;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13e500.  v0:= "$this$average" @kind object;
  #L13e504.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e50a.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e510.  v5:= temp @kind object;
  #L13e512.  v0:= 0L;
  #L13e516.  v2:= 0I;
  #L13e518.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e51e.  v3:= temp;
  #L13e520.  if v3 == 0 then goto L13e54c;
  #L13e524.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e52a.  v3:= temp @kind object;
  #L13e52c.  v3:= (`java.lang.Number`) v3 @kind object;
  #L13e530.  call temp:= `floatValue`(v3) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L13e536.  v3:= temp;
  #L13e538.  v3:= (`double`) v3 @kind f2d;
  #L13e53a.  v0:= v0 + v3 @kind double;
  #L13e53c.  v2:= v2 + 1;
  #L13e540.  if v2 >= 0 then goto L13e518;
  #L13e544.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L13e54a.  goto L13e518;
  #L13e54c.  if v2 != 0 then goto L13e556;
  #L13e550.  v0:= NaND;
  #L13e554.  goto L13e55a;
  #L13e556.  v2:= (`double`) v2 @kind i2d;
  #L13e558.  v0:= v0 / v2 @kind double;
  #L13e55a.  return v0 @kind wide;
}
procedure `double` `averageOfInt`(`kotlin.sequences.Sequence` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.averageOfInt:(Lkotlin/sequences/Sequence;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13e56c.  v0:= "$this$average" @kind object;
  #L13e570.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e576.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e57c.  v5:= temp @kind object;
  #L13e57e.  v0:= 0L;
  #L13e582.  v2:= 0I;
  #L13e584.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e58a.  v3:= temp;
  #L13e58c.  if v3 == 0 then goto L13e5b8;
  #L13e590.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e596.  v3:= temp @kind object;
  #L13e598.  v3:= (`java.lang.Number`) v3 @kind object;
  #L13e59c.  call temp:= `intValue`(v3) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L13e5a2.  v3:= temp;
  #L13e5a4.  v3:= (`double`) v3 @kind i2d;
  #L13e5a6.  v0:= v0 + v3 @kind double;
  #L13e5a8.  v2:= v2 + 1;
  #L13e5ac.  if v2 >= 0 then goto L13e584;
  #L13e5b0.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L13e5b6.  goto L13e584;
  #L13e5b8.  if v2 != 0 then goto L13e5c2;
  #L13e5bc.  v0:= NaND;
  #L13e5c0.  goto L13e5c6;
  #L13e5c2.  v2:= (`double`) v2 @kind i2d;
  #L13e5c4.  v0:= v0 / v2 @kind double;
  #L13e5c6.  return v0 @kind wide;
}
procedure `double` `averageOfLong`(`kotlin.sequences.Sequence` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.averageOfLong:(Lkotlin/sequences/Sequence;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13e5d8.  v0:= "$this$average" @kind object;
  #L13e5dc.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e5e2.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e5e8.  v5:= temp @kind object;
  #L13e5ea.  v0:= 0L;
  #L13e5ee.  v2:= 0I;
  #L13e5f0.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e5f6.  v3:= temp;
  #L13e5f8.  if v3 == 0 then goto L13e624;
  #L13e5fc.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e602.  v3:= temp @kind object;
  #L13e604.  v3:= (`java.lang.Number`) v3 @kind object;
  #L13e608.  call temp:= `longValue`(v3) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L13e60e.  v3:= temp @kind wide;
  #L13e610.  v3:= (`double`) v3 @kind l2d;
  #L13e612.  v0:= v0 + v3 @kind double;
  #L13e614.  v2:= v2 + 1;
  #L13e618.  if v2 >= 0 then goto L13e5f0;
  #L13e61c.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L13e622.  goto L13e5f0;
  #L13e624.  if v2 != 0 then goto L13e62e;
  #L13e628.  v0:= NaND;
  #L13e62c.  goto L13e632;
  #L13e62e.  v2:= (`double`) v2 @kind i2d;
  #L13e630.  v0:= v0 / v2 @kind double;
  #L13e632.  return v0 @kind wide;
}
procedure `double` `averageOfShort`(`kotlin.sequences.Sequence` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.averageOfShort:(Lkotlin/sequences/Sequence;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13e644.  v0:= "$this$average" @kind object;
  #L13e648.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e64e.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e654.  v5:= temp @kind object;
  #L13e656.  v0:= 0L;
  #L13e65a.  v2:= 0I;
  #L13e65c.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e662.  v3:= temp;
  #L13e664.  if v3 == 0 then goto L13e690;
  #L13e668.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e66e.  v3:= temp @kind object;
  #L13e670.  v3:= (`java.lang.Number`) v3 @kind object;
  #L13e674.  call temp:= `shortValue`(v3) @signature `Ljava/lang/Number;.shortValue:()S` @kind virtual;
  #L13e67a.  v3:= temp;
  #L13e67c.  v3:= (`double`) v3 @kind i2d;
  #L13e67e.  v0:= v0 + v3 @kind double;
  #L13e680.  v2:= v2 + 1;
  #L13e684.  if v2 >= 0 then goto L13e65c;
  #L13e688.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L13e68e.  goto L13e65c;
  #L13e690.  if v2 != 0 then goto L13e69a;
  #L13e694.  v0:= NaND;
  #L13e698.  goto L13e69e;
  #L13e69a.  v2:= (`double`) v2 @kind i2d;
  #L13e69c.  v0:= v0 / v2 @kind double;
  #L13e69e.  return v0 @kind wide;
}
procedure `kotlin.sequences.Sequence` `chunked`(`kotlin.sequences.Sequence` v1 @kind object, `int` v2 ) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.chunked:(Lkotlin/sequences/Sequence;I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1409e4.  v0:= "$this$chunked" @kind object;
  #L1409e8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1409ee.  v0:= 1I;
  #L1409f0.  call temp:= `windowed`(v1, v2, v2, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.windowed:(Lkotlin/sequences/Sequence;IIZ)Lkotlin/sequences/Sequence;` @kind static;
  #L1409f6.  v1:= temp @kind object;
  #L1409f8.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `chunked`(`kotlin.sequences.Sequence` v1 @kind object, `int` v2 , `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.chunked:(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140a0c.  v0:= "$this$chunked" @kind object;
  #L140a10.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140a16.  v0:= "transform" @kind object;
  #L140a1a.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140a20.  v0:= 1I;
  #L140a22.  call temp:= `windowed`(v1, v2, v2, v0, v3) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.windowed:(Lkotlin/sequences/Sequence;IIZLkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L140a28.  v1:= temp @kind object;
  #L140a2a.  return v1 @kind object;
}
procedure `boolean` `contains`(`kotlin.sequences.Sequence` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.contains:(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13e368.  v0:= "$this$contains" @kind object;
  #L13e36c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e372.  call temp:= `indexOf`(v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.indexOf:(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I` @kind static;
  #L13e378.  v1:= temp;
  #L13e37a.  if v1 < 0 then goto L13e382;
  #L13e37e.  v1:= 1I;
  #L13e380.  goto L13e384;
  #L13e382.  v1:= 0I;
  #L13e384.  return v1;
}
procedure `int` `count`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.count:(Lkotlin/sequences/Sequence;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L13e7a8.  v0:= "$this$count" @kind object;
  #L13e7ac.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e7b2.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e7b8.  v2:= temp @kind object;
  #L13e7ba.  v0:= 0I;
  #L13e7bc.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e7c2.  v1:= temp;
  #L13e7c4.  if v1 == 0 then goto L13e7de;
  #L13e7c8.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e7ce.  v0:= v0 + 1;
  #L13e7d2.  if v0 >= 0 then goto L13e7bc;
  #L13e7d6.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L13e7dc.  goto L13e7bc;
  #L13e7de.  return v0;
}
procedure `int` `count`(`kotlin.sequences.Sequence` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.count:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13e7f0.  v0:= "$this$count" @kind object;
  #L13e7f4.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e7fa.  v0:= "predicate" @kind object;
  #L13e7fe.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e804.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e80a.  v4:= temp @kind object;
  #L13e80c.  v0:= 0I;
  #L13e80e.  v1:= 0I;
  #L13e810.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e816.  v2:= temp;
  #L13e818.  if v2 == 0 then goto L13e86c;
  #L13e81c.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e822.  v2:= temp @kind object;
  #L13e824.  call temp:= `invoke`(v5, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13e82a.  v2:= temp @kind object;
  #L13e82c.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L13e830.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13e836.  v2:= temp;
  #L13e838.  if v2 == 0 then goto L13e810;
  #L13e83c.  v1:= v1 + 1;
  #L13e840.  if v1 >= 0 then goto L13e810;
  #L13e844.  v2:= 3I;
  #L13e846.  v3:= 1I;
  #L13e848.  call temp:= `apiVersionIsAtLeast`(v3, v2, v0) @signature `Lkotlin/internal/PlatformImplementationsKt;.apiVersionIsAtLeast:(III)Z` @kind static;
  #L13e84e.  v2:= temp;
  #L13e850.  if v2 == 0 then goto L13e85c;
  #L13e854.  call `throwCountOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwCountOverflow:()V` @kind static;
  #L13e85a.  goto L13e810;
  #L13e85c.  v4:= new `java.lang.ArithmeticException`;
  #L13e860.  v5:= "Count overflow has happened." @kind object;
  #L13e864.  call `<init>`(v4, v5) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e86a.  throw v4;
  #L13e86c.  return v1;
}
procedure `kotlin.sequences.Sequence` `distinct`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.distinct:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140a3c.  v0:= "$this$distinct" @kind object;
  #L140a40.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140a46.  v0:= `@@kotlin.sequences.SequencesKt___SequencesKt$a.a` @type ^`kotlin.sequences.SequencesKt___SequencesKt$a` @kind object;
  #L140a4a.  call temp:= `distinctBy`(v1, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.distinctBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L140a50.  v1:= temp @kind object;
  #L140a52.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `distinctBy`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.distinctBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140a64.  v0:= "$this$distinctBy" @kind object;
  #L140a68.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140a6e.  v0:= "selector" @kind object;
  #L140a72.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140a78.  v0:= new `kotlin.sequences.DistinctSequence`;
  #L140a7c.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/DistinctSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L140a82.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `drop`(`kotlin.sequences.Sequence` v1 @kind object, `int` v2 ) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.drop:(Lkotlin/sequences/Sequence;I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L140a94.  v0:= "$this$drop" @kind object;
  #L140a98.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140a9e.  if v2 < 0 then goto L140aa6;
  #L140aa2.  v0:= 1I;
  #L140aa4.  goto L140aa8;
  #L140aa6.  v0:= 0I;
  #L140aa8.  if v0 == 0 then goto L140ad6;
  #L140aac.  if v2 != 0 then goto L140ab2;
  #L140ab0.  goto L140ad4;
  #L140ab2.  v0:= instanceof @variable v1 @type ^`kotlin.sequences.DropTakeSequence` @kind boolean;
  #L140ab6.  if v0 == 0 then goto L140ac8;
  #L140aba.  v1:= (`kotlin.sequences.DropTakeSequence`) v1 @kind object;
  #L140abe.  call temp:= `drop`(v1, v2) @signature `Lkotlin/sequences/DropTakeSequence;.drop:(I)Lkotlin/sequences/Sequence;` @kind interface;
  #L140ac4.  v1:= temp @kind object;
  #L140ac6.  goto L140ad4;
  #L140ac8.  v0:= new `kotlin.sequences.DropSequence`;
  #L140acc.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/DropSequence;.<init>:(Lkotlin/sequences/Sequence;I)V` @kind direct;
  #L140ad2.  v1:= v0 @kind object;
  #L140ad4.  return v1 @kind object;
  #L140ad6.  v1:= new `java.lang.StringBuilder`;
  #L140ada.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L140ae0.  v0:= "Requested element count " @kind object;
  #L140ae4.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L140aea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L140af0.  v2:= " is less than zero." @kind object;
  #L140af4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L140afa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L140b00.  v1:= temp @kind object;
  #L140b02.  v2:= new `java.lang.IllegalArgumentException`;
  #L140b06.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L140b0c.  v1:= temp @kind object;
  #L140b0e.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L140b14.  throw v2;
}
procedure `kotlin.sequences.Sequence` `dropWhile`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.dropWhile:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140b28.  v0:= "$this$dropWhile" @kind object;
  #L140b2c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140b32.  v0:= "predicate" @kind object;
  #L140b36.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140b3c.  v0:= new `kotlin.sequences.DropWhileSequence`;
  #L140b40.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/DropWhileSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L140b46.  return v0 @kind object;
}
procedure `java.lang.Object` `elementAt`(`kotlin.sequences.Sequence` v1 @kind object, `int` v2 ) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.elementAt:(Lkotlin/sequences/Sequence;I)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13f08c.  v0:= "$this$elementAt" @kind object;
  #L13f090.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f096.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$b`;
  #L13f09a.  call `<init>`(v0, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$b;.<init>:(I)V` @kind direct;
  #L13f0a0.  call temp:= `elementAtOrElse`(v1, v2, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.elementAtOrElse:(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @kind static;
  #L13f0a6.  v1:= temp @kind object;
  #L13f0a8.  return v1 @kind object;
}
procedure `java.lang.Object` `elementAtOrElse`(`kotlin.sequences.Sequence` v3 @kind object, `int` v4 , `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.elementAtOrElse:(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13f0bc.  v0:= "$this$elementAtOrElse" @kind object;
  #L13f0c0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f0c6.  v0:= "defaultValue" @kind object;
  #L13f0ca.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f0d0.  if v4 >= 0 then goto L13f0e6;
  #L13f0d4.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L13f0da.  v3:= temp @kind object;
  #L13f0dc.  call temp:= `invoke`(v5, v3) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f0e2.  v3:= temp @kind object;
  #L13f0e4.  return v3 @kind object;
  #L13f0e6.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f0ec.  v3:= temp @kind object;
  #L13f0ee.  v0:= 0I;
  #L13f0f0.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f0f6.  v1:= temp;
  #L13f0f8.  if v1 == 0 then goto L13f112;
  #L13f0fc.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f102.  v1:= temp @kind object;
  #L13f104.  v2:= v0 + 1;
  #L13f108.  if v4 != v0 then goto L13f10e;
  #L13f10c.  return v1 @kind object;
  #L13f10e.  v0:= v2;
  #L13f110.  goto L13f0f0;
  #L13f112.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L13f118.  v3:= temp @kind object;
  #L13f11a.  call temp:= `invoke`(v5, v3) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f120.  v3:= temp @kind object;
  #L13f122.  return v3 @kind object;
}
procedure `java.lang.Object` `elementAtOrNull`(`kotlin.sequences.Sequence` v4 @kind object, `int` v5 ) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.elementAtOrNull:(Lkotlin/sequences/Sequence;I)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13f134.  v0:= "$this$elementAtOrNull" @kind object;
  #L13f138.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f13e.  v0:= 0I;
  #L13f140.  if v5 >= 0 then goto L13f146;
  #L13f144.  return v0 @kind object;
  #L13f146.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f14c.  v4:= temp @kind object;
  #L13f14e.  v1:= 0I;
  #L13f150.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f156.  v2:= temp;
  #L13f158.  if v2 == 0 then goto L13f172;
  #L13f15c.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f162.  v2:= temp @kind object;
  #L13f164.  v3:= v1 + 1;
  #L13f168.  if v5 != v1 then goto L13f16e;
  #L13f16c.  return v2 @kind object;
  #L13f16e.  v1:= v3;
  #L13f170.  goto L13f150;
  #L13f172.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `filter`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filter:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L140b58.  v0:= "$this$filter" @kind object;
  #L140b5c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140b62.  v0:= "predicate" @kind object;
  #L140b66.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140b6c.  v0:= new `kotlin.sequences.FilteringSequence`;
  #L140b70.  v1:= 1I;
  #L140b72.  call `<init>`(v0, v2, v1, v3) @signature `Lkotlin/sequences/FilteringSequence;.<init>:(Lkotlin/sequences/Sequence;ZLkotlin/jvm/functions/Function1;)V` @kind direct;
  #L140b78.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `filterIndexed`(`kotlin.sequences.Sequence` v3 @kind object, `kotlin.jvm.functions.Function2` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L140b8c.  v0:= "$this$filterIndexed" @kind object;
  #L140b90.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140b96.  v0:= "predicate" @kind object;
  #L140b9a.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140ba0.  v0:= new `kotlin.sequences.TransformingSequence`;
  #L140ba4.  v1:= new `kotlin.sequences.FilteringSequence`;
  #L140ba8.  v2:= new `kotlin.sequences.IndexingSequence`;
  #L140bac.  call `<init>`(v2, v3) @signature `Lkotlin/sequences/IndexingSequence;.<init>:(Lkotlin/sequences/Sequence;)V` @kind direct;
  #L140bb2.  v3:= new `kotlin.sequences.SequencesKt___SequencesKt$c`;
  #L140bb6.  call `<init>`(v3, v4) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$c;.<init>:(Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L140bbc.  v4:= 1I;
  #L140bbe.  call `<init>`(v1, v2, v4, v3) @signature `Lkotlin/sequences/FilteringSequence;.<init>:(Lkotlin/sequences/Sequence;ZLkotlin/jvm/functions/Function1;)V` @kind direct;
  #L140bc4.  v3:= `@@kotlin.sequences.SequencesKt___SequencesKt$d.a` @type ^`kotlin.sequences.SequencesKt___SequencesKt$d` @kind object;
  #L140bc8.  call `<init>`(v0, v1, v3) @signature `Lkotlin/sequences/TransformingSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L140bce.  return v0 @kind object;
}
procedure `java.util.Collection` `filterIndexedTo`(`kotlin.sequences.Sequence` v6 @kind object, `java.util.Collection` v7 @kind object, `kotlin.jvm.functions.Function2` v8 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterIndexedTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13fd90.  v0:= "$this$filterIndexedTo" @kind object;
  #L13fd94.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fd9a.  v0:= "destination" @kind object;
  #L13fd9e.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fda4.  v0:= "predicate" @kind object;
  #L13fda8.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fdae.  call temp:= `iterator`(v6) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13fdb4.  v6:= temp @kind object;
  #L13fdb6.  v0:= 0I;
  #L13fdb8.  v1:= 0I;
  #L13fdba.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13fdc0.  v2:= temp;
  #L13fdc2.  if v2 == 0 then goto L13fe28;
  #L13fdc6.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13fdcc.  v2:= temp @kind object;
  #L13fdce.  v3:= v1 + 1;
  #L13fdd2.  if v1 >= 0 then goto L13fdfe;
  #L13fdd6.  v4:= 3I;
  #L13fdd8.  v5:= 1I;
  #L13fdda.  call temp:= `apiVersionIsAtLeast`(v5, v4, v0) @signature `Lkotlin/internal/PlatformImplementationsKt;.apiVersionIsAtLeast:(III)Z` @kind static;
  #L13fde0.  v4:= temp;
  #L13fde2.  if v4 == 0 then goto L13fdee;
  #L13fde6.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L13fdec.  goto L13fdfe;
  #L13fdee.  v6:= new `java.lang.ArithmeticException`;
  #L13fdf2.  v7:= "Index overflow has happened." @kind object;
  #L13fdf6.  call `<init>`(v6, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13fdfc.  throw v6;
  #L13fdfe.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L13fe04.  v1:= temp @kind object;
  #L13fe06.  call temp:= `invoke`(v8, v1, v2) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13fe0c.  v1:= temp @kind object;
  #L13fe0e.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L13fe12.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13fe18.  v1:= temp;
  #L13fe1a.  if v1 == 0 then goto L13fe24;
  #L13fe1e.  call temp:= `add`(v7, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L13fe24.  v1:= v3;
  #L13fe26.  goto L13fdba;
  #L13fe28.  return v7 @kind object;
}
procedure `kotlin.sequences.Sequence` `filterIsInstance`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterIsInstance:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L140be0.  v0:= "$this$filterIsInstance" @kind object;
  #L140be4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140bea.  call `needClassReification`() @signature `Lkotlin/jvm/internal/Intrinsics;.needClassReification:()V` @kind static;
  #L140bf0.  v0:= `@@kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance$1.INSTANCE` @type ^`kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance$1` @kind object;
  #L140bf4.  call temp:= `filter`(v1, v0) @signature `Lkotlin/sequences/SequencesKt;.filter:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L140bfa.  v1:= temp @kind object;
  #L140bfc.  if v1 == 0 then goto L140c02;
  #L140c00.  return v1 @kind object;
  #L140c02.  v1:= new `java.lang.NullPointerException`;
  #L140c06.  v0:= "null cannot be cast to non-null type kotlin.sequences.Sequence<R>" @kind object;
  #L140c0a.  call `<init>`(v1, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L140c10.  throw v1;
}
procedure `java.util.Collection` `filterIsInstanceTo`(`kotlin.sequences.Sequence` v3 @kind object, `java.util.Collection` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterIsInstanceTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L13fe3c.  v0:= "$this$filterIsInstanceTo" @kind object;
  #L13fe40.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fe46.  v0:= "destination" @kind object;
  #L13fe4a.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fe50.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13fe56.  v3:= temp @kind object;
  #L13fe58.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13fe5e.  v0:= temp;
  #L13fe60.  if v0 == 0 then goto L13fe88;
  #L13fe64.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13fe6a.  v0:= temp @kind object;
  #L13fe6c.  v1:= 3I;
  #L13fe6e.  v2:= "R" @kind object;
  #L13fe72.  call `reifiedOperationMarker`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.reifiedOperationMarker:(ILjava/lang/String;)V` @kind static;
  #L13fe78.  v1:= instanceof @variable v0 @type ^`java.lang.Object` @kind boolean;
  #L13fe7c.  if v1 == 0 then goto L13fe58;
  #L13fe80.  call temp:= `add`(v4, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L13fe86.  goto L13fe58;
  #L13fe88.  return v4 @kind object;
}
procedure `kotlin.sequences.Sequence` `filterNot`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterNot:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L140c24.  v0:= "$this$filterNot" @kind object;
  #L140c28.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140c2e.  v0:= "predicate" @kind object;
  #L140c32.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140c38.  v0:= new `kotlin.sequences.FilteringSequence`;
  #L140c3c.  v1:= 0I;
  #L140c3e.  call `<init>`(v0, v2, v1, v3) @signature `Lkotlin/sequences/FilteringSequence;.<init>:(Lkotlin/sequences/Sequence;ZLkotlin/jvm/functions/Function1;)V` @kind direct;
  #L140c44.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `filterNotNull`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterNotNull:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140c58.  v0:= "$this$filterNotNull" @kind object;
  #L140c5c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140c62.  v0:= `@@kotlin.sequences.SequencesKt___SequencesKt$e.a` @type ^`kotlin.sequences.SequencesKt___SequencesKt$e` @kind object;
  #L140c66.  call temp:= `filterNot`(v1, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterNot:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L140c6c.  v1:= temp @kind object;
  #L140c6e.  if v1 == 0 then goto L140c74;
  #L140c72.  return v1 @kind object;
  #L140c74.  v1:= new `java.lang.NullPointerException`;
  #L140c78.  v0:= "null cannot be cast to non-null type kotlin.sequences.Sequence<T>" @kind object;
  #L140c7c.  call `<init>`(v1, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L140c82.  throw v1;
}
procedure `java.util.Collection` `filterNotNullTo`(`kotlin.sequences.Sequence` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterNotNullTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13fe9c.  v0:= "$this$filterNotNullTo" @kind object;
  #L13fea0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fea6.  v0:= "destination" @kind object;
  #L13feaa.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13feb0.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13feb6.  v1:= temp @kind object;
  #L13feb8.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13febe.  v0:= temp;
  #L13fec0.  if v0 == 0 then goto L13fed8;
  #L13fec4.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13feca.  v0:= temp @kind object;
  #L13fecc.  if v0 == 0 then goto L13feb8;
  #L13fed0.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L13fed6.  goto L13feb8;
  #L13fed8.  return v2 @kind object;
}
procedure `java.util.Collection` `filterNotTo`(`kotlin.sequences.Sequence` v2 @kind object, `java.util.Collection` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterNotTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13feec.  v0:= "$this$filterNotTo" @kind object;
  #L13fef0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fef6.  v0:= "destination" @kind object;
  #L13fefa.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ff00.  v0:= "predicate" @kind object;
  #L13ff04.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ff0a.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13ff10.  v2:= temp @kind object;
  #L13ff12.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13ff18.  v0:= temp;
  #L13ff1a.  if v0 == 0 then goto L13ff46;
  #L13ff1e.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13ff24.  v0:= temp @kind object;
  #L13ff26.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13ff2c.  v1:= temp @kind object;
  #L13ff2e.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L13ff32.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13ff38.  v1:= temp;
  #L13ff3a.  if v1 != 0 then goto L13ff12;
  #L13ff3e.  call temp:= `add`(v3, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L13ff44.  goto L13ff12;
  #L13ff46.  return v3 @kind object;
}
procedure `java.util.Collection` `filterTo`(`kotlin.sequences.Sequence` v2 @kind object, `java.util.Collection` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13ff58.  v0:= "$this$filterTo" @kind object;
  #L13ff5c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ff62.  v0:= "destination" @kind object;
  #L13ff66.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ff6c.  v0:= "predicate" @kind object;
  #L13ff70.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ff76.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13ff7c.  v2:= temp @kind object;
  #L13ff7e.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13ff84.  v0:= temp;
  #L13ff86.  if v0 == 0 then goto L13ffb2;
  #L13ff8a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13ff90.  v0:= temp @kind object;
  #L13ff92.  call temp:= `invoke`(v4, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13ff98.  v1:= temp @kind object;
  #L13ff9a.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L13ff9e.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13ffa4.  v1:= temp;
  #L13ffa6.  if v1 == 0 then goto L13ff7e;
  #L13ffaa.  call temp:= `add`(v3, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L13ffb0.  goto L13ff7e;
  #L13ffb2.  return v3 @kind object;
}
procedure `java.lang.Object` `first`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.first:(Lkotlin/sequences/Sequence;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13f184.  v0:= "$this$first" @kind object;
  #L13f188.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f18e.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f194.  v1:= temp @kind object;
  #L13f196.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f19c.  v0:= temp;
  #L13f19e.  if v0 == 0 then goto L13f1ac;
  #L13f1a2.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f1a8.  v1:= temp @kind object;
  #L13f1aa.  return v1 @kind object;
  #L13f1ac.  v1:= new `java.util.NoSuchElementException`;
  #L13f1b0.  v0:= "Sequence is empty." @kind object;
  #L13f1b4.  call `<init>`(v1, v0) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f1ba.  throw v1;
}
procedure `java.lang.Object` `first`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.first:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13f1cc.  v0:= "$this$first" @kind object;
  #L13f1d0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f1d6.  v0:= "predicate" @kind object;
  #L13f1da.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f1e0.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f1e6.  v2:= temp @kind object;
  #L13f1e8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f1ee.  v0:= temp;
  #L13f1f0.  if v0 == 0 then goto L13f216;
  #L13f1f4.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f1fa.  v0:= temp @kind object;
  #L13f1fc.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f202.  v1:= temp @kind object;
  #L13f204.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L13f208.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13f20e.  v1:= temp;
  #L13f210.  if v1 == 0 then goto L13f1e8;
  #L13f214.  return v0 @kind object;
  #L13f216.  v2:= new `java.util.NoSuchElementException`;
  #L13f21a.  v3:= "Sequence contains no element matching the predicate." @kind object;
  #L13f21e.  call `<init>`(v2, v3) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f224.  throw v2;
}
procedure `java.lang.Object` `firstOrNull`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.firstOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13f238.  v0:= "$this$firstOrNull" @kind object;
  #L13f23c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f242.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f248.  v1:= temp @kind object;
  #L13f24a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f250.  v0:= temp;
  #L13f252.  if v0 != 0 then goto L13f25a;
  #L13f256.  v1:= 0I;
  #L13f258.  return v1 @kind object;
  #L13f25a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f260.  v1:= temp @kind object;
  #L13f262.  return v1 @kind object;
}
procedure `java.lang.Object` `firstOrNull`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.firstOrNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13f274.  v0:= "$this$firstOrNull" @kind object;
  #L13f278.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f27e.  v0:= "predicate" @kind object;
  #L13f282.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f288.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f28e.  v2:= temp @kind object;
  #L13f290.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f296.  v0:= temp;
  #L13f298.  if v0 == 0 then goto L13f2be;
  #L13f29c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f2a2.  v0:= temp @kind object;
  #L13f2a4.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f2aa.  v1:= temp @kind object;
  #L13f2ac.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L13f2b0.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13f2b6.  v1:= temp;
  #L13f2b8.  if v1 == 0 then goto L13f290;
  #L13f2bc.  return v0 @kind object;
  #L13f2be.  v2:= 0I;
  #L13f2c0.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `flatMap`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.flatMap:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L140c94.  v0:= "$this$flatMap" @kind object;
  #L140c98.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140c9e.  v0:= "transform" @kind object;
  #L140ca2.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140ca8.  v0:= new `kotlin.sequences.FlatteningSequence`;
  #L140cac.  v1:= `@@kotlin.sequences.SequencesKt___SequencesKt$g.h` @type ^`kotlin.sequences.SequencesKt___SequencesKt$g` @kind object;
  #L140cb0.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlin/sequences/FlatteningSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L140cb6.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `flatMapIndexedIterable`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.flatMapIndexedIterable:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140cc8.  v0:= "$this$flatMapIndexed" @kind object;
  #L140ccc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140cd2.  v0:= "transform" @kind object;
  #L140cd6.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140cdc.  v0:= `@@kotlin.sequences.SequencesKt___SequencesKt$h.h` @type ^`kotlin.sequences.SequencesKt___SequencesKt$h` @kind object;
  #L140ce0.  call temp:= `flatMapIndexed`(v1, v2, v0) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.flatMapIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L140ce6.  v1:= temp @kind object;
  #L140ce8.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `flatMapIndexedSequence`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.flatMapIndexedSequence:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140cfc.  v0:= "$this$flatMapIndexed" @kind object;
  #L140d00.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140d06.  v0:= "transform" @kind object;
  #L140d0a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140d10.  v0:= `@@kotlin.sequences.SequencesKt___SequencesKt$i.h` @type ^`kotlin.sequences.SequencesKt___SequencesKt$i` @kind object;
  #L140d14.  call temp:= `flatMapIndexed`(v1, v2, v0) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.flatMapIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L140d1a.  v1:= temp @kind object;
  #L140d1c.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `flatMapIterable`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.flatMapIterable:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L140d30.  v0:= "$this$flatMap" @kind object;
  #L140d34.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140d3a.  v0:= "transform" @kind object;
  #L140d3e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140d44.  v0:= new `kotlin.sequences.FlatteningSequence`;
  #L140d48.  v1:= `@@kotlin.sequences.SequencesKt___SequencesKt$f.h` @type ^`kotlin.sequences.SequencesKt___SequencesKt$f` @kind object;
  #L140d4c.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlin/sequences/FlatteningSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L140d52.  return v0 @kind object;
}
procedure `java.util.Collection` `flatMapIterableTo`(`kotlin.sequences.Sequence` v1 @kind object, `java.util.Collection` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.flatMapIterableTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13ffc4.  v0:= "$this$flatMapTo" @kind object;
  #L13ffc8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ffce.  v0:= "destination" @kind object;
  #L13ffd2.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ffd8.  v0:= "transform" @kind object;
  #L13ffdc.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ffe2.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13ffe8.  v1:= temp @kind object;
  #L13ffea.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13fff0.  v0:= temp;
  #L13fff2.  if v0 == 0 then goto L140012;
  #L13fff6.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13fffc.  v0:= temp @kind object;
  #L13fffe.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140004.  v0:= temp @kind object;
  #L140006.  v0:= (`java.lang.Iterable`) v0 @kind object;
  #L14000a.  call temp:= `addAll`(v2, v0) @signature `Lkotlin/collections/CollectionsKt;.addAll:(Ljava/util/Collection;Ljava/lang/Iterable;)Z` @kind static;
  #L140010.  goto L13ffea;
  #L140012.  return v2 @kind object;
}
procedure `java.util.Collection` `flatMapTo`(`kotlin.sequences.Sequence` v1 @kind object, `java.util.Collection` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.flatMapTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140024.  v0:= "$this$flatMapTo" @kind object;
  #L140028.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14002e.  v0:= "destination" @kind object;
  #L140032.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140038.  v0:= "transform" @kind object;
  #L14003c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140042.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L140048.  v1:= temp @kind object;
  #L14004a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L140050.  v0:= temp;
  #L140052.  if v0 == 0 then goto L140072;
  #L140056.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L14005c.  v0:= temp @kind object;
  #L14005e.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140064.  v0:= temp @kind object;
  #L140066.  v0:= (`kotlin.sequences.Sequence`) v0 @kind object;
  #L14006a.  call temp:= `addAll`(v2, v0) @signature `Lkotlin/collections/CollectionsKt;.addAll:(Ljava/util/Collection;Lkotlin/sequences/Sequence;)Z` @kind static;
  #L140070.  goto L14004a;
  #L140072.  return v2 @kind object;
}
procedure `java.lang.Object` `fold`(`kotlin.sequences.Sequence` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.fold:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13f2d4.  v0:= "$this$fold" @kind object;
  #L13f2d8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f2de.  v0:= "operation" @kind object;
  #L13f2e2.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f2e8.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f2ee.  v1:= temp @kind object;
  #L13f2f0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f2f6.  v0:= temp;
  #L13f2f8.  if v0 == 0 then goto L13f30e;
  #L13f2fc.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f302.  v0:= temp @kind object;
  #L13f304.  call temp:= `invoke`(v3, v2, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f30a.  v2:= temp @kind object;
  #L13f30c.  goto L13f2f0;
  #L13f30e.  return v2 @kind object;
}
procedure `java.lang.Object` `foldIndexed`(`kotlin.sequences.Sequence` v6 @kind object, `java.lang.Object` v7 @kind object, `kotlin.jvm.functions.Function3` v8 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.foldIndexed:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13f320.  v0:= "$this$foldIndexed" @kind object;
  #L13f324.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f32a.  v0:= "operation" @kind object;
  #L13f32e.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f334.  call temp:= `iterator`(v6) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f33a.  v6:= temp @kind object;
  #L13f33c.  v0:= 0I;
  #L13f33e.  v1:= 0I;
  #L13f340.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f346.  v2:= temp;
  #L13f348.  if v2 == 0 then goto L13f398;
  #L13f34c.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f352.  v2:= temp @kind object;
  #L13f354.  v3:= v1 + 1;
  #L13f358.  if v1 >= 0 then goto L13f384;
  #L13f35c.  v4:= 3I;
  #L13f35e.  v5:= 1I;
  #L13f360.  call temp:= `apiVersionIsAtLeast`(v5, v4, v0) @signature `Lkotlin/internal/PlatformImplementationsKt;.apiVersionIsAtLeast:(III)Z` @kind static;
  #L13f366.  v4:= temp;
  #L13f368.  if v4 == 0 then goto L13f374;
  #L13f36c.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L13f372.  goto L13f384;
  #L13f374.  v6:= new `java.lang.ArithmeticException`;
  #L13f378.  v7:= "Index overflow has happened." @kind object;
  #L13f37c.  call `<init>`(v6, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f382.  throw v6;
  #L13f384.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L13f38a.  v1:= temp @kind object;
  #L13f38c.  call temp:= `invoke`(v8, v1, v7, v2) @signature `Lkotlin/jvm/functions/Function3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f392.  v7:= temp @kind object;
  #L13f394.  v1:= v3;
  #L13f396.  goto L13f340;
  #L13f398.  return v7 @kind object;
}
procedure `void` `forEach`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.forEach:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1415f0.  v0:= "$this$forEach" @kind object;
  #L1415f4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1415fa.  v0:= "action" @kind object;
  #L1415fe.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141604.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L14160a.  v1:= temp @kind object;
  #L14160c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L141612.  v0:= temp;
  #L141614.  if v0 == 0 then goto L141628;
  #L141618.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L14161e.  v0:= temp @kind object;
  #L141620.  call temp:= `invoke`(v2, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L141626.  goto L14160c;
  #L141628.  return @kind void;
}
procedure `void` `forEachIndexed`(`kotlin.sequences.Sequence` v6 @kind object, `kotlin.jvm.functions.Function2` v7 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.forEachIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14163c.  v0:= "$this$forEachIndexed" @kind object;
  #L141640.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141646.  v0:= "action" @kind object;
  #L14164a.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141650.  call temp:= `iterator`(v6) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L141656.  v6:= temp @kind object;
  #L141658.  v0:= 0I;
  #L14165a.  v1:= 0I;
  #L14165c.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L141662.  v2:= temp;
  #L141664.  if v2 == 0 then goto L1416b2;
  #L141668.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L14166e.  v2:= temp @kind object;
  #L141670.  v3:= v1 + 1;
  #L141674.  if v1 >= 0 then goto L1416a0;
  #L141678.  v4:= 3I;
  #L14167a.  v5:= 1I;
  #L14167c.  call temp:= `apiVersionIsAtLeast`(v5, v4, v0) @signature `Lkotlin/internal/PlatformImplementationsKt;.apiVersionIsAtLeast:(III)Z` @kind static;
  #L141682.  v4:= temp;
  #L141684.  if v4 == 0 then goto L141690;
  #L141688.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L14168e.  goto L1416a0;
  #L141690.  v6:= new `java.lang.ArithmeticException`;
  #L141694.  v7:= "Index overflow has happened." @kind object;
  #L141698.  call `<init>`(v6, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14169e.  throw v6;
  #L1416a0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1416a6.  v1:= temp @kind object;
  #L1416a8.  call temp:= `invoke`(v7, v1, v2) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1416ae.  v1:= v3;
  #L1416b0.  goto L14165c;
  #L1416b2.  return @kind void;
}
procedure `java.util.Map` `groupBy`(`kotlin.sequences.Sequence` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.groupBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14068c.  v0:= "$this$groupBy" @kind object;
  #L140690.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140696.  v0:= "keySelector" @kind object;
  #L14069a.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1406a0.  v0:= new `java.util.LinkedHashMap`;
  #L1406a4.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L1406aa.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1406b0.  v4:= temp @kind object;
  #L1406b2.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1406b8.  v1:= temp;
  #L1406ba.  if v1 == 0 then goto L1406f6;
  #L1406be.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1406c4.  v1:= temp @kind object;
  #L1406c6.  call temp:= `invoke`(v5, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1406cc.  v2:= temp @kind object;
  #L1406ce.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1406d4.  v3:= temp @kind object;
  #L1406d6.  if v3 != 0 then goto L1406ea;
  #L1406da.  v3:= new `java.util.ArrayList`;
  #L1406de.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1406e4.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1406ea.  v3:= (`java.util.List`) v3 @kind object;
  #L1406ee.  call temp:= `add`(v3, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1406f4.  goto L1406b2;
  #L1406f6.  return v0 @kind object;
}
procedure `java.util.Map` `groupBy`(`kotlin.sequences.Sequence` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object, `kotlin.jvm.functions.Function1` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.groupBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L140708.  v0:= "$this$groupBy" @kind object;
  #L14070c.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140712.  v0:= "keySelector" @kind object;
  #L140716.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14071c.  v0:= "valueTransform" @kind object;
  #L140720.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140726.  v0:= new `java.util.LinkedHashMap`;
  #L14072a.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L140730.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L140736.  v4:= temp @kind object;
  #L140738.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L14073e.  v1:= temp;
  #L140740.  if v1 == 0 then goto L140784;
  #L140744.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L14074a.  v1:= temp @kind object;
  #L14074c.  call temp:= `invoke`(v5, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140752.  v2:= temp @kind object;
  #L140754.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L14075a.  v3:= temp @kind object;
  #L14075c.  if v3 != 0 then goto L140770;
  #L140760.  v3:= new `java.util.ArrayList`;
  #L140764.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L14076a.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140770.  v3:= (`java.util.List`) v3 @kind object;
  #L140774.  call temp:= `invoke`(v6, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L14077a.  v1:= temp @kind object;
  #L14077c.  call temp:= `add`(v3, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L140782.  goto L140738;
  #L140784.  return v0 @kind object;
}
procedure `java.util.Map` `groupByTo`(`kotlin.sequences.Sequence` v3 @kind object, `java.util.Map` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.groupByTo:(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L140798.  v0:= "$this$groupByTo" @kind object;
  #L14079c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1407a2.  v0:= "destination" @kind object;
  #L1407a6.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1407ac.  v0:= "keySelector" @kind object;
  #L1407b0.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1407b6.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1407bc.  v3:= temp @kind object;
  #L1407be.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1407c4.  v0:= temp;
  #L1407c6.  if v0 == 0 then goto L140802;
  #L1407ca.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1407d0.  v0:= temp @kind object;
  #L1407d2.  call temp:= `invoke`(v5, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1407d8.  v1:= temp @kind object;
  #L1407da.  call temp:= `get`(v4, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1407e0.  v2:= temp @kind object;
  #L1407e2.  if v2 != 0 then goto L1407f6;
  #L1407e6.  v2:= new `java.util.ArrayList`;
  #L1407ea.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1407f0.  call temp:= `put`(v4, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1407f6.  v2:= (`java.util.List`) v2 @kind object;
  #L1407fa.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L140800.  goto L1407be;
  #L140802.  return v4 @kind object;
}
procedure `java.util.Map` `groupByTo`(`kotlin.sequences.Sequence` v3 @kind object, `java.util.Map` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object, `kotlin.jvm.functions.Function1` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.groupByTo:(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L140814.  v0:= "$this$groupByTo" @kind object;
  #L140818.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14081e.  v0:= "destination" @kind object;
  #L140822.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140828.  v0:= "keySelector" @kind object;
  #L14082c.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140832.  v0:= "valueTransform" @kind object;
  #L140836.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14083c.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L140842.  v3:= temp @kind object;
  #L140844.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L14084a.  v0:= temp;
  #L14084c.  if v0 == 0 then goto L140890;
  #L140850.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L140856.  v0:= temp @kind object;
  #L140858.  call temp:= `invoke`(v5, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L14085e.  v1:= temp @kind object;
  #L140860.  call temp:= `get`(v4, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140866.  v2:= temp @kind object;
  #L140868.  if v2 != 0 then goto L14087c;
  #L14086c.  v2:= new `java.util.ArrayList`;
  #L140870.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L140876.  call temp:= `put`(v4, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L14087c.  v2:= (`java.util.List`) v2 @kind object;
  #L140880.  call temp:= `invoke`(v6, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140886.  v0:= temp @kind object;
  #L140888.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L14088e.  goto L140844;
  #L140890.  return v4 @kind object;
}
procedure `kotlin.collections.Grouping` `groupingBy`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.groupingBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/collections/Grouping;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1409b4.  v0:= "$this$groupingBy" @kind object;
  #L1409b8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1409be.  v0:= "keySelector" @kind object;
  #L1409c2.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1409c8.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$groupingBy$1`;
  #L1409cc.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$groupingBy$1;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L1409d2.  return v0 @kind object;
}
procedure `int` `indexOf`(`kotlin.sequences.Sequence` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.indexOf:(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13e880.  v0:= "$this$indexOf" @kind object;
  #L13e884.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e88a.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e890.  v2:= temp @kind object;
  #L13e892.  v0:= 0I;
  #L13e894.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e89a.  v1:= temp;
  #L13e89c.  if v1 == 0 then goto L13e8c6;
  #L13e8a0.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e8a6.  v1:= temp @kind object;
  #L13e8a8.  if v0 >= 0 then goto L13e8b2;
  #L13e8ac.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L13e8b2.  call temp:= `areEqual`(v3, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L13e8b8.  v1:= temp;
  #L13e8ba.  if v1 == 0 then goto L13e8c0;
  #L13e8be.  return v0;
  #L13e8c0.  v0:= v0 + 1;
  #L13e8c4.  goto L13e894;
  #L13e8c6.  v2:= -1I;
  #L13e8c8.  return v2;
}
procedure `int` `indexOfFirst`(`kotlin.sequences.Sequence` v5 @kind object, `kotlin.jvm.functions.Function1` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.indexOfFirst:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13e8dc.  v0:= "$this$indexOfFirst" @kind object;
  #L13e8e0.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e8e6.  v0:= "predicate" @kind object;
  #L13e8ea.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e8f0.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e8f6.  v5:= temp @kind object;
  #L13e8f8.  v0:= 0I;
  #L13e8fa.  v1:= 0I;
  #L13e8fc.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e902.  v2:= temp;
  #L13e904.  if v2 == 0 then goto L13e95c;
  #L13e908.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e90e.  v2:= temp @kind object;
  #L13e910.  if v1 >= 0 then goto L13e93c;
  #L13e914.  v3:= 3I;
  #L13e916.  v4:= 1I;
  #L13e918.  call temp:= `apiVersionIsAtLeast`(v4, v3, v0) @signature `Lkotlin/internal/PlatformImplementationsKt;.apiVersionIsAtLeast:(III)Z` @kind static;
  #L13e91e.  v3:= temp;
  #L13e920.  if v3 == 0 then goto L13e92c;
  #L13e924.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L13e92a.  goto L13e93c;
  #L13e92c.  v5:= new `java.lang.ArithmeticException`;
  #L13e930.  v6:= "Index overflow has happened." @kind object;
  #L13e934.  call `<init>`(v5, v6) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e93a.  throw v5;
  #L13e93c.  call temp:= `invoke`(v6, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13e942.  v2:= temp @kind object;
  #L13e944.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L13e948.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13e94e.  v2:= temp;
  #L13e950.  if v2 == 0 then goto L13e956;
  #L13e954.  return v1;
  #L13e956.  v1:= v1 + 1;
  #L13e95a.  goto L13e8fc;
  #L13e95c.  v5:= -1I;
  #L13e95e.  return v5;
}
procedure `int` `indexOfLast`(`kotlin.sequences.Sequence` v6 @kind object, `kotlin.jvm.functions.Function1` v7 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.indexOfLast:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13e970.  v0:= "$this$indexOfLast" @kind object;
  #L13e974.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e97a.  v0:= "predicate" @kind object;
  #L13e97e.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e984.  call temp:= `iterator`(v6) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e98a.  v6:= temp @kind object;
  #L13e98c.  v0:= 0I;
  #L13e98e.  v1:= -1I;
  #L13e990.  v2:= 0I;
  #L13e992.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e998.  v3:= temp;
  #L13e99a.  if v3 == 0 then goto L13e9f2;
  #L13e99e.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e9a4.  v3:= temp @kind object;
  #L13e9a6.  if v2 >= 0 then goto L13e9d2;
  #L13e9aa.  v4:= 3I;
  #L13e9ac.  v5:= 1I;
  #L13e9ae.  call temp:= `apiVersionIsAtLeast`(v5, v4, v0) @signature `Lkotlin/internal/PlatformImplementationsKt;.apiVersionIsAtLeast:(III)Z` @kind static;
  #L13e9b4.  v4:= temp;
  #L13e9b6.  if v4 == 0 then goto L13e9c2;
  #L13e9ba.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L13e9c0.  goto L13e9d2;
  #L13e9c2.  v6:= new `java.lang.ArithmeticException`;
  #L13e9c6.  v7:= "Index overflow has happened." @kind object;
  #L13e9ca.  call `<init>`(v6, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e9d0.  throw v6;
  #L13e9d2.  call temp:= `invoke`(v7, v3) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13e9d8.  v3:= temp @kind object;
  #L13e9da.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L13e9de.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13e9e4.  v3:= temp;
  #L13e9e6.  if v3 == 0 then goto L13e9ec;
  #L13e9ea.  v1:= v2;
  #L13e9ec.  v2:= v2 + 1;
  #L13e9f0.  goto L13e992;
  #L13e9f2.  return v1;
}
procedure `java.lang.Appendable` `joinTo`(`kotlin.sequences.Sequence` v2 @kind object, `java.lang.Appendable` v3 @kind object, `java.lang.CharSequence` v4 @kind object, `java.lang.CharSequence` v5 @kind object, `java.lang.CharSequence` v6 @kind object, `int` v7 , `java.lang.CharSequence` v8 @kind object, `kotlin.jvm.functions.Function1` v9 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.joinTo:(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13ec24.  v0:= "$this$joinTo" @kind object;
  #L13ec28.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ec2e.  v0:= "buffer" @kind object;
  #L13ec32.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ec38.  v0:= "separator" @kind object;
  #L13ec3c.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ec42.  v0:= "prefix" @kind object;
  #L13ec46.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ec4c.  v0:= "postfix" @kind object;
  #L13ec50.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ec56.  v0:= "truncated" @kind object;
  #L13ec5a.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ec60.  call temp:= `append`(v3, v5) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L13ec66.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13ec6c.  v2:= temp @kind object;
  #L13ec6e.  v5:= 0I;
  #L13ec70.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13ec76.  v0:= temp;
  #L13ec78.  if v0 == 0 then goto L13eca4;
  #L13ec7c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13ec82.  v0:= temp @kind object;
  #L13ec84.  v5:= v5 + 1;
  #L13ec88.  v1:= 1I;
  #L13ec8a.  if v5 <= v1 then goto L13ec94;
  #L13ec8e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L13ec94.  if v7 < 0 then goto L13ec9c;
  #L13ec98.  if v5 > v7 then goto L13eca4;
  #L13ec9c.  call `appendElement`(v3, v0, v9) @signature `Lkotlin/text/StringsKt;.appendElement:(Ljava/lang/Appendable;Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)V` @kind static;
  #L13eca2.  goto L13ec70;
  #L13eca4.  if v7 < 0 then goto L13ecb2;
  #L13eca8.  if v5 <= v7 then goto L13ecb2;
  #L13ecac.  call temp:= `append`(v3, v8) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L13ecb2.  call temp:= `append`(v3, v6) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L13ecb8.  return v3 @kind object;
}
procedure `java.lang.Appendable` `joinTo$default`(`kotlin.sequences.Sequence` v6 @kind object, `java.lang.Appendable` v7 @kind object, `java.lang.CharSequence` v8 @kind object, `java.lang.CharSequence` v9 @kind object, `java.lang.CharSequence` v10 @kind object, `int` v11 , `java.lang.CharSequence` v12 @kind object, `kotlin.jvm.functions.Function1` v13 @kind object, `int` v14 , `java.lang.Object` v15 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.joinTo$default:(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/Appendable;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13eba0.  v0:= v14 ^& 2;
  #L13eba4.  if v0 == 0 then goto L13ebae;
  #L13eba8.  v0:= ", " @kind object;
  #L13ebac.  goto L13ebb0;
  #L13ebae.  v0:= v8 @kind object;
  #L13ebb0.  v1:= v14 ^& 4;
  #L13ebb4.  v2:= "" @kind object;
  #L13ebb8.  if v1 == 0 then goto L13ebc0;
  #L13ebbc.  v1:= v2 @kind object;
  #L13ebbe.  goto L13ebc2;
  #L13ebc0.  v1:= v9 @kind object;
  #L13ebc2.  v3:= v14 ^& 8;
  #L13ebc6.  if v3 == 0 then goto L13ebcc;
  #L13ebca.  goto L13ebce;
  #L13ebcc.  v2:= v10 @kind object;
  #L13ebce.  v3:= v14 ^& 16;
  #L13ebd2.  if v3 == 0 then goto L13ebda;
  #L13ebd6.  v3:= -1I;
  #L13ebd8.  goto L13ebdc;
  #L13ebda.  v3:= v11;
  #L13ebdc.  v4:= v14 ^& 32;
  #L13ebe0.  if v4 == 0 then goto L13ebea;
  #L13ebe4.  v4:= "..." @kind object;
  #L13ebe8.  goto L13ebec;
  #L13ebea.  v4:= v12 @kind object;
  #L13ebec.  v5:= v14 ^& 64;
  #L13ebf0.  if v5 == 0 then goto L13ebf8;
  #L13ebf4.  v5:= 0I;
  #L13ebf6.  goto L13ebfa;
  #L13ebf8.  v5:= v13 @kind object;
  #L13ebfa.  v8:= v6 @kind object;
  #L13ebfc.  v9:= v7 @kind object;
  #L13ebfe.  v10:= v0 @kind object;
  #L13ec00.  v11:= v1 @kind object;
  #L13ec02.  v12:= v2 @kind object;
  #L13ec04.  v13:= v3;
  #L13ec06.  v14:= v4 @kind object;
  #L13ec08.  v15:= v5 @kind object;
  #L13ec0a.  call temp:= `joinTo`(v8, v9, v10, v11, v12, v13, v14, v15) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.joinTo:(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;` @kind static;
  #L13ec10.  v0:= temp @kind object;
  #L13ec12.  return v0 @kind object;
}
procedure `java.lang.String` `joinToString`(`kotlin.sequences.Sequence` v9 @kind object, `java.lang.CharSequence` v10 @kind object, `java.lang.CharSequence` v11 @kind object, `java.lang.CharSequence` v12 @kind object, `int` v13 , `java.lang.CharSequence` v14 @kind object, `kotlin.jvm.functions.Function1` v15 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.joinToString:(Lkotlin/sequences/Sequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L13fd14.  v0:= "$this$joinToString" @kind object;
  #L13fd18.  call `checkNotNullParameter`(v9, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fd1e.  v0:= "separator" @kind object;
  #L13fd22.  call `checkNotNullParameter`(v10, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fd28.  v0:= "prefix" @kind object;
  #L13fd2c.  call `checkNotNullParameter`(v11, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fd32.  v0:= "postfix" @kind object;
  #L13fd36.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fd3c.  v0:= "truncated" @kind object;
  #L13fd40.  call `checkNotNullParameter`(v14, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fd46.  v2:= new `java.lang.StringBuilder`;
  #L13fd4a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13fd50.  v1:= v9 @kind object;
  #L13fd52.  v3:= v10 @kind object;
  #L13fd54.  v4:= v11 @kind object;
  #L13fd56.  v5:= v12 @kind object;
  #L13fd58.  v6:= v13;
  #L13fd5a.  v7:= v14 @kind object;
  #L13fd5c.  v8:= v15 @kind object;
  #L13fd5e.  call temp:= `joinTo`(v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.joinTo:(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;` @kind static;
  #L13fd64.  v9:= temp @kind object;
  #L13fd66.  v9:= (`java.lang.StringBuilder`) v9 @kind object;
  #L13fd6a.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13fd70.  v9:= temp @kind object;
  #L13fd72.  v10:= "joinTo(StringBuilder(), …ed, transform).toString()" @kind object;
  #L13fd76.  call `checkNotNullExpressionValue`(v9, v10) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fd7c.  return v9 @kind object;
}
procedure `java.lang.String` `joinToString$default`(`kotlin.sequences.Sequence` v4 @kind object, `java.lang.CharSequence` v5 @kind object, `java.lang.CharSequence` v6 @kind object, `java.lang.CharSequence` v7 @kind object, `int` v8 , `java.lang.CharSequence` v9 @kind object, `kotlin.jvm.functions.Function1` v10 @kind object, `int` v11 , `java.lang.Object` v12 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.joinToString$default:(Lkotlin/sequences/Sequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13fc98.  v12:= v11 ^& 1;
  #L13fc9c.  if v12 == 0 then goto L13fca4;
  #L13fca0.  v5:= ", " @kind object;
  #L13fca4.  v12:= v11 ^& 2;
  #L13fca8.  v0:= "" @kind object;
  #L13fcac.  if v12 == 0 then goto L13fcb4;
  #L13fcb0.  v12:= v0 @kind object;
  #L13fcb2.  goto L13fcb6;
  #L13fcb4.  v12:= v6 @kind object;
  #L13fcb6.  v6:= v11 ^& 4;
  #L13fcba.  if v6 == 0 then goto L13fcc0;
  #L13fcbe.  goto L13fcc2;
  #L13fcc0.  v0:= v7 @kind object;
  #L13fcc2.  v6:= v11 ^& 8;
  #L13fcc6.  if v6 == 0 then goto L13fcd0;
  #L13fcca.  v8:= -1I;
  #L13fccc.  v1:= -1I;
  #L13fcce.  goto L13fcd2;
  #L13fcd0.  v1:= v8;
  #L13fcd2.  v6:= v11 ^& 16;
  #L13fcd6.  if v6 == 0 then goto L13fcde;
  #L13fcda.  v9:= "..." @kind object;
  #L13fcde.  v2:= v9 @kind object;
  #L13fce0.  v6:= v11 ^& 32;
  #L13fce4.  if v6 == 0 then goto L13fcea;
  #L13fce8.  v10:= 0I;
  #L13fcea.  v3:= v10 @kind object;
  #L13fcec.  v6:= v4 @kind object;
  #L13fcee.  v7:= v5 @kind object;
  #L13fcf0.  v8:= v12 @kind object;
  #L13fcf2.  v9:= v0 @kind object;
  #L13fcf4.  v10:= v1;
  #L13fcf6.  v11:= v2 @kind object;
  #L13fcf8.  v12:= v3 @kind object;
  #L13fcfa.  call temp:= `joinToString`(v6, v7, v8, v9, v10, v11, v12) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.joinToString:(Lkotlin/sequences/Sequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/String;` @kind static;
  #L13fd00.  v4:= temp @kind object;
  #L13fd02.  return v4 @kind object;
}
procedure `java.lang.Object` `last`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.last:(Lkotlin/sequences/Sequence;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L13f3ac.  v0:= "$this$last" @kind object;
  #L13f3b0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f3b6.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f3bc.  v2:= temp @kind object;
  #L13f3be.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f3c4.  v0:= temp;
  #L13f3c6.  if v0 == 0 then goto L13f3ea;
  #L13f3ca.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f3d0.  v0:= temp @kind object;
  #L13f3d2.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f3d8.  v1:= temp;
  #L13f3da.  if v1 == 0 then goto L13f3e8;
  #L13f3de.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f3e4.  v0:= temp @kind object;
  #L13f3e6.  goto L13f3d2;
  #L13f3e8.  return v0 @kind object;
  #L13f3ea.  v2:= new `java.util.NoSuchElementException`;
  #L13f3ee.  v0:= "Sequence is empty." @kind object;
  #L13f3f2.  call `<init>`(v2, v0) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f3f8.  throw v2;
}
procedure `java.lang.Object` `last`(`kotlin.sequences.Sequence` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.last:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13f40c.  v0:= "$this$last" @kind object;
  #L13f410.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f416.  v0:= "predicate" @kind object;
  #L13f41a.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f420.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f426.  v4:= temp @kind object;
  #L13f428.  v0:= 0I;
  #L13f42a.  v1:= 0I;
  #L13f42c.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f432.  v2:= temp;
  #L13f434.  if v2 == 0 then goto L13f460;
  #L13f438.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f43e.  v2:= temp @kind object;
  #L13f440.  call temp:= `invoke`(v5, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f446.  v3:= temp @kind object;
  #L13f448.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L13f44c.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13f452.  v3:= temp;
  #L13f454.  if v3 == 0 then goto L13f42c;
  #L13f458.  v0:= 1I;
  #L13f45a.  v0:= v2 @kind object;
  #L13f45c.  v1:= 1I;
  #L13f45e.  goto L13f42c;
  #L13f460.  if v1 == 0 then goto L13f466;
  #L13f464.  return v0 @kind object;
  #L13f466.  v4:= new `java.util.NoSuchElementException`;
  #L13f46a.  v5:= "Sequence contains no element matching the predicate." @kind object;
  #L13f46e.  call `<init>`(v4, v5) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f474.  throw v4;
}
procedure `int` `lastIndexOf`(`kotlin.sequences.Sequence` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.lastIndexOf:(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13ea04.  v0:= "$this$lastIndexOf" @kind object;
  #L13ea08.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ea0e.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13ea14.  v3:= temp @kind object;
  #L13ea16.  v0:= -1I;
  #L13ea18.  v1:= 0I;
  #L13ea1a.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13ea20.  v2:= temp;
  #L13ea22.  if v2 == 0 then goto L13ea4c;
  #L13ea26.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13ea2c.  v2:= temp @kind object;
  #L13ea2e.  if v1 >= 0 then goto L13ea38;
  #L13ea32.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L13ea38.  call temp:= `areEqual`(v4, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L13ea3e.  v2:= temp;
  #L13ea40.  if v2 == 0 then goto L13ea46;
  #L13ea44.  v0:= v1;
  #L13ea46.  v1:= v1 + 1;
  #L13ea4a.  goto L13ea1a;
  #L13ea4c.  return v0;
}
procedure `java.lang.Object` `lastOrNull`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.lastOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13f488.  v0:= "$this$lastOrNull" @kind object;
  #L13f48c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f492.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f498.  v2:= temp @kind object;
  #L13f49a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f4a0.  v0:= temp;
  #L13f4a2.  if v0 != 0 then goto L13f4aa;
  #L13f4a6.  v2:= 0I;
  #L13f4a8.  return v2 @kind object;
  #L13f4aa.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f4b0.  v0:= temp @kind object;
  #L13f4b2.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f4b8.  v1:= temp;
  #L13f4ba.  if v1 == 0 then goto L13f4c8;
  #L13f4be.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f4c4.  v0:= temp @kind object;
  #L13f4c6.  goto L13f4b2;
  #L13f4c8.  return v0 @kind object;
}
procedure `java.lang.Object` `lastOrNull`(`kotlin.sequences.Sequence` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.lastOrNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13f4dc.  v0:= "$this$lastOrNull" @kind object;
  #L13f4e0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f4e6.  v0:= "predicate" @kind object;
  #L13f4ea.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f4f0.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f4f6.  v3:= temp @kind object;
  #L13f4f8.  v0:= 0I;
  #L13f4fa.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f500.  v1:= temp;
  #L13f502.  if v1 == 0 then goto L13f52a;
  #L13f506.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f50c.  v1:= temp @kind object;
  #L13f50e.  call temp:= `invoke`(v4, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f514.  v2:= temp @kind object;
  #L13f516.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L13f51a.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13f520.  v2:= temp;
  #L13f522.  if v2 == 0 then goto L13f4fa;
  #L13f526.  v0:= v1 @kind object;
  #L13f528.  goto L13f4fa;
  #L13f52a.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `map`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.map:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L140d64.  v0:= "$this$map" @kind object;
  #L140d68.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140d6e.  v0:= "transform" @kind object;
  #L140d72.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140d78.  v0:= new `kotlin.sequences.TransformingSequence`;
  #L140d7c.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/TransformingSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L140d82.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `mapIndexed`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.mapIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140d94.  v0:= "$this$mapIndexed" @kind object;
  #L140d98.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140d9e.  v0:= "transform" @kind object;
  #L140da2.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140da8.  v0:= new `kotlin.sequences.TransformingIndexedSequence`;
  #L140dac.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/TransformingIndexedSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L140db2.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `mapIndexedNotNull`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.mapIndexedNotNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140dc4.  v0:= "$this$mapIndexedNotNull" @kind object;
  #L140dc8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140dce.  v0:= "transform" @kind object;
  #L140dd2.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140dd8.  v0:= new `kotlin.sequences.TransformingIndexedSequence`;
  #L140ddc.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/TransformingIndexedSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L140de2.  call temp:= `filterNotNull`(v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterNotNull:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L140de8.  v1:= temp @kind object;
  #L140dea.  return v1 @kind object;
}
procedure `java.util.Collection` `mapIndexedNotNullTo`(`kotlin.sequences.Sequence` v6 @kind object, `java.util.Collection` v7 @kind object, `kotlin.jvm.functions.Function2` v8 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.mapIndexedNotNullTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L140084.  v0:= "$this$mapIndexedNotNullTo" @kind object;
  #L140088.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14008e.  v0:= "destination" @kind object;
  #L140092.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140098.  v0:= "transform" @kind object;
  #L14009c.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1400a2.  call temp:= `iterator`(v6) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1400a8.  v6:= temp @kind object;
  #L1400aa.  v0:= 0I;
  #L1400ac.  v1:= 0I;
  #L1400ae.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1400b4.  v2:= temp;
  #L1400b6.  if v2 == 0 then goto L140110;
  #L1400ba.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1400c0.  v2:= temp @kind object;
  #L1400c2.  v3:= v1 + 1;
  #L1400c6.  if v1 >= 0 then goto L1400f2;
  #L1400ca.  v4:= 3I;
  #L1400cc.  v5:= 1I;
  #L1400ce.  call temp:= `apiVersionIsAtLeast`(v5, v4, v0) @signature `Lkotlin/internal/PlatformImplementationsKt;.apiVersionIsAtLeast:(III)Z` @kind static;
  #L1400d4.  v4:= temp;
  #L1400d6.  if v4 == 0 then goto L1400e2;
  #L1400da.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L1400e0.  goto L1400f2;
  #L1400e2.  v6:= new `java.lang.ArithmeticException`;
  #L1400e6.  v7:= "Index overflow has happened." @kind object;
  #L1400ea.  call `<init>`(v6, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1400f0.  throw v6;
  #L1400f2.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1400f8.  v1:= temp @kind object;
  #L1400fa.  call temp:= `invoke`(v8, v1, v2) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140100.  v1:= temp @kind object;
  #L140102.  if v1 == 0 then goto L14010c;
  #L140106.  call temp:= `add`(v7, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L14010c.  v1:= v3;
  #L14010e.  goto L1400ae;
  #L140110.  return v7 @kind object;
}
procedure `java.util.Collection` `mapIndexedTo`(`kotlin.sequences.Sequence` v6 @kind object, `java.util.Collection` v7 @kind object, `kotlin.jvm.functions.Function2` v8 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.mapIndexedTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L140124.  v0:= "$this$mapIndexedTo" @kind object;
  #L140128.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14012e.  v0:= "destination" @kind object;
  #L140132.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140138.  v0:= "transform" @kind object;
  #L14013c.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140142.  call temp:= `iterator`(v6) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L140148.  v6:= temp @kind object;
  #L14014a.  v0:= 0I;
  #L14014c.  v1:= 0I;
  #L14014e.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L140154.  v2:= temp;
  #L140156.  if v2 == 0 then goto L1401ac;
  #L14015a.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L140160.  v2:= temp @kind object;
  #L140162.  v3:= v1 + 1;
  #L140166.  if v1 >= 0 then goto L140192;
  #L14016a.  v4:= 3I;
  #L14016c.  v5:= 1I;
  #L14016e.  call temp:= `apiVersionIsAtLeast`(v5, v4, v0) @signature `Lkotlin/internal/PlatformImplementationsKt;.apiVersionIsAtLeast:(III)Z` @kind static;
  #L140174.  v4:= temp;
  #L140176.  if v4 == 0 then goto L140182;
  #L14017a.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L140180.  goto L140192;
  #L140182.  v6:= new `java.lang.ArithmeticException`;
  #L140186.  v7:= "Index overflow has happened." @kind object;
  #L14018a.  call `<init>`(v6, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L140190.  throw v6;
  #L140192.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L140198.  v1:= temp @kind object;
  #L14019a.  call temp:= `invoke`(v8, v1, v2) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1401a0.  v1:= temp @kind object;
  #L1401a2.  call temp:= `add`(v7, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1401a8.  v1:= v3;
  #L1401aa.  goto L14014e;
  #L1401ac.  return v7 @kind object;
}
procedure `kotlin.sequences.Sequence` `mapNotNull`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.mapNotNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140dfc.  v0:= "$this$mapNotNull" @kind object;
  #L140e00.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140e06.  v0:= "transform" @kind object;
  #L140e0a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140e10.  v0:= new `kotlin.sequences.TransformingSequence`;
  #L140e14.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/TransformingSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L140e1a.  call temp:= `filterNotNull`(v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.filterNotNull:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L140e20.  v1:= temp @kind object;
  #L140e22.  return v1 @kind object;
}
procedure `java.util.Collection` `mapNotNullTo`(`kotlin.sequences.Sequence` v1 @kind object, `java.util.Collection` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.mapNotNullTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1401c0.  v0:= "$this$mapNotNullTo" @kind object;
  #L1401c4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1401ca.  v0:= "destination" @kind object;
  #L1401ce.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1401d4.  v0:= "transform" @kind object;
  #L1401d8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1401de.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1401e4.  v1:= temp @kind object;
  #L1401e6.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1401ec.  v0:= temp;
  #L1401ee.  if v0 == 0 then goto L14020e;
  #L1401f2.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1401f8.  v0:= temp @kind object;
  #L1401fa.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140200.  v0:= temp @kind object;
  #L140202.  if v0 == 0 then goto L1401e6;
  #L140206.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L14020c.  goto L1401e6;
  #L14020e.  return v2 @kind object;
}
procedure `java.util.Collection` `mapTo`(`kotlin.sequences.Sequence` v1 @kind object, `java.util.Collection` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.mapTo:(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140220.  v0:= "$this$mapTo" @kind object;
  #L140224.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14022a.  v0:= "destination" @kind object;
  #L14022e.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140234.  v0:= "transform" @kind object;
  #L140238.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14023e.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L140244.  v1:= temp @kind object;
  #L140246.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L14024c.  v0:= temp;
  #L14024e.  if v0 == 0 then goto L14026a;
  #L140252.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L140258.  v0:= temp @kind object;
  #L14025a.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140260.  v0:= temp @kind object;
  #L140262.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L140268.  goto L140246;
  #L14026a.  return v2 @kind object;
}
procedure `java.lang.Comparable` `max`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.max:(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13eccc.  v0:= "$this$max" @kind object;
  #L13ecd0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ecd6.  call temp:= `maxOrNull`(v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;` @kind static;
  #L13ecdc.  v1:= temp @kind object;
  #L13ecde.  return v1 @kind object;
}
procedure `java.lang.Double` `max`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.max:(Lkotlin/sequences/Sequence;)Ljava/lang/Double;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13ede4.  v0:= "$this$max" @kind object;
  #L13ede8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13edee.  call temp:= `maxOrNull`(v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Double;` @kind static;
  #L13edf4.  v1:= temp @kind object;
  #L13edf6.  return v1 @kind object;
}
procedure `java.lang.Float` `max`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.max:(Lkotlin/sequences/Sequence;)Ljava/lang/Float;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13ef24.  v0:= "$this$max" @kind object;
  #L13ef28.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ef2e.  call temp:= `maxOrNull`(v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Float;` @kind static;
  #L13ef34.  v1:= temp @kind object;
  #L13ef36.  return v1 @kind object;
}
procedure `java.lang.Object` `maxBy`(`kotlin.sequences.Sequence` v5 @kind object, `kotlin.jvm.functions.Function1` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13f53c.  v0:= "$this$maxBy" @kind object;
  #L13f540.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f546.  v0:= "selector" @kind object;
  #L13f54a.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f550.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f556.  v5:= temp @kind object;
  #L13f558.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f55e.  v0:= temp;
  #L13f560.  if v0 != 0 then goto L13f568;
  #L13f564.  v5:= 0I;
  #L13f566.  goto L13f5be;
  #L13f568.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f56e.  v0:= temp @kind object;
  #L13f570.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f576.  v1:= temp;
  #L13f578.  if v1 != 0 then goto L13f580;
  #L13f57c.  v5:= v0 @kind object;
  #L13f57e.  goto L13f5be;
  #L13f580.  call temp:= `invoke`(v6, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f586.  v1:= temp @kind object;
  #L13f588.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L13f58c.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f592.  v2:= temp @kind object;
  #L13f594.  call temp:= `invoke`(v6, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f59a.  v3:= temp @kind object;
  #L13f59c.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L13f5a0.  call temp:= `compareTo`(v1, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L13f5a6.  v4:= temp;
  #L13f5a8.  if v4 >= 0 then goto L13f5b0;
  #L13f5ac.  v0:= v2 @kind object;
  #L13f5ae.  v1:= v3 @kind object;
  #L13f5b0.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f5b6.  v2:= temp;
  #L13f5b8.  if v2 != 0 then goto L13f58c;
  #L13f5bc.  goto L13f57c;
  #L13f5be.  return v5 @kind object;
}
procedure `java.lang.Object` `maxByOrNull`(`kotlin.sequences.Sequence` v5 @kind object, `kotlin.jvm.functions.Function1` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxByOrNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13f5d0.  v0:= "$this$maxByOrNull" @kind object;
  #L13f5d4.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f5da.  v0:= "selector" @kind object;
  #L13f5de.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f5e4.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f5ea.  v5:= temp @kind object;
  #L13f5ec.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f5f2.  v0:= temp;
  #L13f5f4.  if v0 != 0 then goto L13f5fc;
  #L13f5f8.  v5:= 0I;
  #L13f5fa.  return v5 @kind object;
  #L13f5fc.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f602.  v0:= temp @kind object;
  #L13f604.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f60a.  v1:= temp;
  #L13f60c.  if v1 != 0 then goto L13f612;
  #L13f610.  return v0 @kind object;
  #L13f612.  call temp:= `invoke`(v6, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f618.  v1:= temp @kind object;
  #L13f61a.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L13f61e.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f624.  v2:= temp @kind object;
  #L13f626.  call temp:= `invoke`(v6, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f62c.  v3:= temp @kind object;
  #L13f62e.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L13f632.  call temp:= `compareTo`(v1, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L13f638.  v4:= temp;
  #L13f63a.  if v4 >= 0 then goto L13f642;
  #L13f63e.  v0:= v2 @kind object;
  #L13f640.  v1:= v3 @kind object;
  #L13f642.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f648.  v2:= temp;
  #L13f64a.  if v2 != 0 then goto L13f61e;
  #L13f64e.  return v0 @kind object;
}
procedure `java.lang.Comparable` `maxOrNull`(`kotlin.sequences.Sequence` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13ecf0.  v0:= "$this$maxOrNull" @kind object;
  #L13ecf4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ecfa.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13ed00.  v3:= temp @kind object;
  #L13ed02.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13ed08.  v0:= temp;
  #L13ed0a.  if v0 != 0 then goto L13ed12;
  #L13ed0e.  v3:= 0I;
  #L13ed10.  return v3 @kind object;
  #L13ed12.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13ed18.  v0:= temp @kind object;
  #L13ed1a.  v0:= (`java.lang.Comparable`) v0 @kind object;
  #L13ed1e.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13ed24.  v1:= temp;
  #L13ed26.  if v1 == 0 then goto L13ed46;
  #L13ed2a.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13ed30.  v1:= temp @kind object;
  #L13ed32.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L13ed36.  call temp:= `compareTo`(v0, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L13ed3c.  v2:= temp;
  #L13ed3e.  if v2 >= 0 then goto L13ed1e;
  #L13ed42.  v0:= v1 @kind object;
  #L13ed44.  goto L13ed1e;
  #L13ed46.  return v0 @kind object;
}
procedure `java.lang.Double` `maxOrNull`(`kotlin.sequences.Sequence` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Double;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13ee08.  v0:= "$this$maxOrNull" @kind object;
  #L13ee0c.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ee12.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13ee18.  v4:= temp @kind object;
  #L13ee1a.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13ee20.  v0:= temp;
  #L13ee22.  if v0 != 0 then goto L13ee2a;
  #L13ee26.  v4:= 0I;
  #L13ee28.  return v4 @kind object;
  #L13ee2a.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13ee30.  v0:= temp @kind object;
  #L13ee32.  v0:= (`java.lang.Number`) v0 @kind object;
  #L13ee36.  call temp:= `doubleValue`(v0) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L13ee3c.  v0:= temp @kind wide;
  #L13ee3e.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13ee44.  v2:= temp;
  #L13ee46.  if v2 == 0 then goto L13ee68;
  #L13ee4a.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13ee50.  v2:= temp @kind object;
  #L13ee52.  v2:= (`java.lang.Number`) v2 @kind object;
  #L13ee56.  call temp:= `doubleValue`(v2) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L13ee5c.  v2:= temp @kind wide;
  #L13ee5e.  call temp:= `max`(v0, v2) @signature `Ljava/lang/Math;.max:(DD)D` @kind static;
  #L13ee64.  v0:= temp @kind wide;
  #L13ee66.  goto L13ee3e;
  #L13ee68.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L13ee6e.  v4:= temp @kind object;
  #L13ee70.  return v4 @kind object;
}
procedure `java.lang.Float` `maxOrNull`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Float;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13ef48.  v0:= "$this$maxOrNull" @kind object;
  #L13ef4c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ef52.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13ef58.  v2:= temp @kind object;
  #L13ef5a.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13ef60.  v0:= temp;
  #L13ef62.  if v0 != 0 then goto L13ef6a;
  #L13ef66.  v2:= 0I;
  #L13ef68.  return v2 @kind object;
  #L13ef6a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13ef70.  v0:= temp @kind object;
  #L13ef72.  v0:= (`java.lang.Number`) v0 @kind object;
  #L13ef76.  call temp:= `floatValue`(v0) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L13ef7c.  v0:= temp;
  #L13ef7e.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13ef84.  v1:= temp;
  #L13ef86.  if v1 == 0 then goto L13efa8;
  #L13ef8a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13ef90.  v1:= temp @kind object;
  #L13ef92.  v1:= (`java.lang.Number`) v1 @kind object;
  #L13ef96.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L13ef9c.  v1:= temp;
  #L13ef9e.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L13efa4.  v0:= temp;
  #L13efa6.  goto L13ef7e;
  #L13efa8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L13efae.  v2:= temp @kind object;
  #L13efb0.  return v2 @kind object;
}
procedure `java.lang.Object` `maxWith`(`kotlin.sequences.Sequence` v1 @kind object, `java.util.Comparator` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxWith:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13f660.  v0:= "$this$maxWith" @kind object;
  #L13f664.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f66a.  v0:= "comparator" @kind object;
  #L13f66e.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f674.  call temp:= `maxWithOrNull`(v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxWithOrNull:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;` @kind static;
  #L13f67a.  v1:= temp @kind object;
  #L13f67c.  return v1 @kind object;
}
procedure `java.lang.Object` `maxWithOrNull`(`kotlin.sequences.Sequence` v3 @kind object, `java.util.Comparator` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.maxWithOrNull:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13f690.  v0:= "$this$maxWithOrNull" @kind object;
  #L13f694.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f69a.  v0:= "comparator" @kind object;
  #L13f69e.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f6a4.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f6aa.  v3:= temp @kind object;
  #L13f6ac.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f6b2.  v0:= temp;
  #L13f6b4.  if v0 != 0 then goto L13f6bc;
  #L13f6b8.  v3:= 0I;
  #L13f6ba.  return v3 @kind object;
  #L13f6bc.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f6c2.  v0:= temp @kind object;
  #L13f6c4.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f6ca.  v1:= temp;
  #L13f6cc.  if v1 == 0 then goto L13f6e8;
  #L13f6d0.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f6d6.  v1:= temp @kind object;
  #L13f6d8.  call temp:= `compare`(v4, v0, v1) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L13f6de.  v2:= temp;
  #L13f6e0.  if v2 >= 0 then goto L13f6c4;
  #L13f6e4.  v0:= v1 @kind object;
  #L13f6e6.  goto L13f6c4;
  #L13f6e8.  return v0 @kind object;
}
procedure `java.lang.Comparable` `min`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.min:(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13ed58.  v0:= "$this$min" @kind object;
  #L13ed5c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ed62.  call temp:= `minOrNull`(v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;` @kind static;
  #L13ed68.  v1:= temp @kind object;
  #L13ed6a.  return v1 @kind object;
}
procedure `java.lang.Double` `min`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.min:(Lkotlin/sequences/Sequence;)Ljava/lang/Double;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13ee84.  v0:= "$this$min" @kind object;
  #L13ee88.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ee8e.  call temp:= `minOrNull`(v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Double;` @kind static;
  #L13ee94.  v1:= temp @kind object;
  #L13ee96.  return v1 @kind object;
}
procedure `java.lang.Float` `min`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.min:(Lkotlin/sequences/Sequence;)Ljava/lang/Float;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13efc4.  v0:= "$this$min" @kind object;
  #L13efc8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13efce.  call temp:= `minOrNull`(v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Float;` @kind static;
  #L13efd4.  v1:= temp @kind object;
  #L13efd6.  return v1 @kind object;
}
procedure `java.lang.Object` `minBy`(`kotlin.sequences.Sequence` v5 @kind object, `kotlin.jvm.functions.Function1` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13f6fc.  v0:= "$this$minBy" @kind object;
  #L13f700.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f706.  v0:= "selector" @kind object;
  #L13f70a.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f710.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f716.  v5:= temp @kind object;
  #L13f718.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f71e.  v0:= temp;
  #L13f720.  if v0 != 0 then goto L13f728;
  #L13f724.  v5:= 0I;
  #L13f726.  goto L13f77e;
  #L13f728.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f72e.  v0:= temp @kind object;
  #L13f730.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f736.  v1:= temp;
  #L13f738.  if v1 != 0 then goto L13f740;
  #L13f73c.  v5:= v0 @kind object;
  #L13f73e.  goto L13f77e;
  #L13f740.  call temp:= `invoke`(v6, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f746.  v1:= temp @kind object;
  #L13f748.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L13f74c.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f752.  v2:= temp @kind object;
  #L13f754.  call temp:= `invoke`(v6, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f75a.  v3:= temp @kind object;
  #L13f75c.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L13f760.  call temp:= `compareTo`(v1, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L13f766.  v4:= temp;
  #L13f768.  if v4 <= 0 then goto L13f770;
  #L13f76c.  v0:= v2 @kind object;
  #L13f76e.  v1:= v3 @kind object;
  #L13f770.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f776.  v2:= temp;
  #L13f778.  if v2 != 0 then goto L13f74c;
  #L13f77c.  goto L13f73c;
  #L13f77e.  return v5 @kind object;
}
procedure `java.lang.Object` `minByOrNull`(`kotlin.sequences.Sequence` v5 @kind object, `kotlin.jvm.functions.Function1` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minByOrNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13f790.  v0:= "$this$minByOrNull" @kind object;
  #L13f794.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f79a.  v0:= "selector" @kind object;
  #L13f79e.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f7a4.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f7aa.  v5:= temp @kind object;
  #L13f7ac.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f7b2.  v0:= temp;
  #L13f7b4.  if v0 != 0 then goto L13f7bc;
  #L13f7b8.  v5:= 0I;
  #L13f7ba.  return v5 @kind object;
  #L13f7bc.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f7c2.  v0:= temp @kind object;
  #L13f7c4.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f7ca.  v1:= temp;
  #L13f7cc.  if v1 != 0 then goto L13f7d2;
  #L13f7d0.  return v0 @kind object;
  #L13f7d2.  call temp:= `invoke`(v6, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f7d8.  v1:= temp @kind object;
  #L13f7da.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L13f7de.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f7e4.  v2:= temp @kind object;
  #L13f7e6.  call temp:= `invoke`(v6, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f7ec.  v3:= temp @kind object;
  #L13f7ee.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L13f7f2.  call temp:= `compareTo`(v1, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L13f7f8.  v4:= temp;
  #L13f7fa.  if v4 <= 0 then goto L13f802;
  #L13f7fe.  v0:= v2 @kind object;
  #L13f800.  v1:= v3 @kind object;
  #L13f802.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f808.  v2:= temp;
  #L13f80a.  if v2 != 0 then goto L13f7de;
  #L13f80e.  return v0 @kind object;
}
procedure `java.lang.Comparable` `minOrNull`(`kotlin.sequences.Sequence` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13ed7c.  v0:= "$this$minOrNull" @kind object;
  #L13ed80.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ed86.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13ed8c.  v3:= temp @kind object;
  #L13ed8e.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13ed94.  v0:= temp;
  #L13ed96.  if v0 != 0 then goto L13ed9e;
  #L13ed9a.  v3:= 0I;
  #L13ed9c.  return v3 @kind object;
  #L13ed9e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13eda4.  v0:= temp @kind object;
  #L13eda6.  v0:= (`java.lang.Comparable`) v0 @kind object;
  #L13edaa.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13edb0.  v1:= temp;
  #L13edb2.  if v1 == 0 then goto L13edd2;
  #L13edb6.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13edbc.  v1:= temp @kind object;
  #L13edbe.  v1:= (`java.lang.Comparable`) v1 @kind object;
  #L13edc2.  call temp:= `compareTo`(v0, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L13edc8.  v2:= temp;
  #L13edca.  if v2 <= 0 then goto L13edaa;
  #L13edce.  v0:= v1 @kind object;
  #L13edd0.  goto L13edaa;
  #L13edd2.  return v0 @kind object;
}
procedure `java.lang.Double` `minOrNull`(`kotlin.sequences.Sequence` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Double;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13eea8.  v0:= "$this$minOrNull" @kind object;
  #L13eeac.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13eeb2.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13eeb8.  v4:= temp @kind object;
  #L13eeba.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13eec0.  v0:= temp;
  #L13eec2.  if v0 != 0 then goto L13eeca;
  #L13eec6.  v4:= 0I;
  #L13eec8.  return v4 @kind object;
  #L13eeca.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13eed0.  v0:= temp @kind object;
  #L13eed2.  v0:= (`java.lang.Number`) v0 @kind object;
  #L13eed6.  call temp:= `doubleValue`(v0) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L13eedc.  v0:= temp @kind wide;
  #L13eede.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13eee4.  v2:= temp;
  #L13eee6.  if v2 == 0 then goto L13ef08;
  #L13eeea.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13eef0.  v2:= temp @kind object;
  #L13eef2.  v2:= (`java.lang.Number`) v2 @kind object;
  #L13eef6.  call temp:= `doubleValue`(v2) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L13eefc.  v2:= temp @kind wide;
  #L13eefe.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(DD)D` @kind static;
  #L13ef04.  v0:= temp @kind wide;
  #L13ef06.  goto L13eede;
  #L13ef08.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L13ef0e.  v4:= temp @kind object;
  #L13ef10.  return v4 @kind object;
}
procedure `java.lang.Float` `minOrNull`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Float;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13efe8.  v0:= "$this$minOrNull" @kind object;
  #L13efec.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13eff2.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13eff8.  v2:= temp @kind object;
  #L13effa.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f000.  v0:= temp;
  #L13f002.  if v0 != 0 then goto L13f00a;
  #L13f006.  v2:= 0I;
  #L13f008.  return v2 @kind object;
  #L13f00a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f010.  v0:= temp @kind object;
  #L13f012.  v0:= (`java.lang.Number`) v0 @kind object;
  #L13f016.  call temp:= `floatValue`(v0) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L13f01c.  v0:= temp;
  #L13f01e.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f024.  v1:= temp;
  #L13f026.  if v1 == 0 then goto L13f048;
  #L13f02a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f030.  v1:= temp @kind object;
  #L13f032.  v1:= (`java.lang.Number`) v1 @kind object;
  #L13f036.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L13f03c.  v1:= temp;
  #L13f03e.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L13f044.  v0:= temp;
  #L13f046.  goto L13f01e;
  #L13f048.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L13f04e.  v2:= temp @kind object;
  #L13f050.  return v2 @kind object;
}
procedure `java.lang.Object` `minWith`(`kotlin.sequences.Sequence` v1 @kind object, `java.util.Comparator` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minWith:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13f820.  v0:= "$this$minWith" @kind object;
  #L13f824.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f82a.  v0:= "comparator" @kind object;
  #L13f82e.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f834.  call temp:= `minWithOrNull`(v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minWithOrNull:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;` @kind static;
  #L13f83a.  v1:= temp @kind object;
  #L13f83c.  return v1 @kind object;
}
procedure `java.lang.Object` `minWithOrNull`(`kotlin.sequences.Sequence` v3 @kind object, `java.util.Comparator` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minWithOrNull:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13f850.  v0:= "$this$minWithOrNull" @kind object;
  #L13f854.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f85a.  v0:= "comparator" @kind object;
  #L13f85e.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f864.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f86a.  v3:= temp @kind object;
  #L13f86c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f872.  v0:= temp;
  #L13f874.  if v0 != 0 then goto L13f87c;
  #L13f878.  v3:= 0I;
  #L13f87a.  return v3 @kind object;
  #L13f87c.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f882.  v0:= temp @kind object;
  #L13f884.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f88a.  v1:= temp;
  #L13f88c.  if v1 == 0 then goto L13f8a8;
  #L13f890.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f896.  v1:= temp @kind object;
  #L13f898.  call temp:= `compare`(v4, v0, v1) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L13f89e.  v2:= temp;
  #L13f8a0.  if v2 <= 0 then goto L13f884;
  #L13f8a4.  v0:= v1 @kind object;
  #L13f8a6.  goto L13f884;
  #L13f8a8.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `minus`(`kotlin.sequences.Sequence` v1 @kind object, `java.lang.Iterable` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minus:(Lkotlin/sequences/Sequence;Ljava/lang/Iterable;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140e34.  v0:= "$this$minus" @kind object;
  #L140e38.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140e3e.  v0:= "elements" @kind object;
  #L140e42.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140e48.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$minus$3`;
  #L140e4c.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$minus$3;.<init>:(Lkotlin/sequences/Sequence;Ljava/lang/Iterable;)V` @kind direct;
  #L140e52.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `minus`(`kotlin.sequences.Sequence` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minus:(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140e64.  v0:= "$this$minus" @kind object;
  #L140e68.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140e6e.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$minus$1`;
  #L140e72.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$minus$1;.<init>:(Lkotlin/sequences/Sequence;Ljava/lang/Object;)V` @kind direct;
  #L140e78.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `minus`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minus:(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140ed0.  v0:= "$this$minus" @kind object;
  #L140ed4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140eda.  v0:= "elements" @kind object;
  #L140ede.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140ee4.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$minus$4`;
  #L140ee8.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$minus$4;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;)V` @kind direct;
  #L140eee.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `minus`(`kotlin.sequences.Sequence` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.minus:(Lkotlin/sequences/Sequence;[Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140e8c.  v0:= "$this$minus" @kind object;
  #L140e90.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140e96.  v0:= "elements" @kind object;
  #L140e9a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140ea0.  v0:= length @variable v2;
  #L140ea2.  if v0 != 0 then goto L140eaa;
  #L140ea6.  v0:= 1I;
  #L140ea8.  goto L140eac;
  #L140eaa.  v0:= 0I;
  #L140eac.  if v0 == 0 then goto L140eb2;
  #L140eb0.  return v1 @kind object;
  #L140eb2.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$minus$2`;
  #L140eb6.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$minus$2;.<init>:(Lkotlin/sequences/Sequence;[Ljava/lang/Object;)V` @kind direct;
  #L140ebc.  return v0 @kind object;
}
procedure `boolean` `none`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.none:(Lkotlin/sequences/Sequence;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13e398.  v0:= "$this$none" @kind object;
  #L13e39c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e3a2.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e3a8.  v1:= temp @kind object;
  #L13e3aa.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e3b0.  v1:= temp;
  #L13e3b2.  v1:= v1 ^~ 1;
  #L13e3b6.  return v1;
}
procedure `boolean` `none`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.none:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13e3c8.  v0:= "$this$none" @kind object;
  #L13e3cc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e3d2.  v0:= "predicate" @kind object;
  #L13e3d6.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e3dc.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e3e2.  v1:= temp @kind object;
  #L13e3e4.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e3ea.  v0:= temp;
  #L13e3ec.  if v0 == 0 then goto L13e414;
  #L13e3f0.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e3f6.  v0:= temp @kind object;
  #L13e3f8.  call temp:= `invoke`(v2, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13e3fe.  v0:= temp @kind object;
  #L13e400.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L13e404.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13e40a.  v0:= temp;
  #L13e40c.  if v0 == 0 then goto L13e3e4;
  #L13e410.  v1:= 0I;
  #L13e412.  return v1;
  #L13e414.  v1:= 1I;
  #L13e416.  return v1;
}
procedure `kotlin.sequences.Sequence` `onEach`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.onEach:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140f00.  v0:= "$this$onEach" @kind object;
  #L140f04.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140f0a.  v0:= "action" @kind object;
  #L140f0e.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140f14.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$j`;
  #L140f18.  call `<init>`(v0, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$j;.<init>:(Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L140f1e.  call temp:= `map`(v1, v0) @signature `Lkotlin/sequences/SequencesKt;.map:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L140f24.  v1:= temp @kind object;
  #L140f26.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `onEachIndexed`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.onEachIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140f38.  v0:= "$this$onEachIndexed" @kind object;
  #L140f3c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140f42.  v0:= "action" @kind object;
  #L140f46.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140f4c.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$k`;
  #L140f50.  call `<init>`(v0, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$k;.<init>:(Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L140f56.  call temp:= `mapIndexed`(v1, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.mapIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L140f5c.  v1:= temp @kind object;
  #L140f5e.  return v1 @kind object;
}
procedure `kotlin.Pair` `partition`(`kotlin.sequences.Sequence` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.partition:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/Pair;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14092c.  v0:= "$this$partition" @kind object;
  #L140930.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140936.  v0:= "predicate" @kind object;
  #L14093a.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140940.  v0:= new `java.util.ArrayList`;
  #L140944.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L14094a.  v1:= new `java.util.ArrayList`;
  #L14094e.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L140954.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L14095a.  v4:= temp @kind object;
  #L14095c.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L140962.  v2:= temp;
  #L140964.  if v2 == 0 then goto L140998;
  #L140968.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L14096e.  v2:= temp @kind object;
  #L140970.  call temp:= `invoke`(v5, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140976.  v3:= temp @kind object;
  #L140978.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L14097c.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L140982.  v3:= temp;
  #L140984.  if v3 == 0 then goto L140990;
  #L140988.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L14098e.  goto L14095c;
  #L140990.  call temp:= `add`(v1, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L140996.  goto L14095c;
  #L140998.  v4:= new `kotlin.Pair`;
  #L14099c.  call `<init>`(v4, v0, v1) @signature `Lkotlin/Pair;.<init>:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind direct;
  #L1409a2.  return v4 @kind object;
}
procedure `kotlin.sequences.Sequence` `plus`(`kotlin.sequences.Sequence` v2 @kind object, `java.lang.Iterable` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.plus:(Lkotlin/sequences/Sequence;Ljava/lang/Iterable;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L140f70.  v0:= "$this$plus" @kind object;
  #L140f74.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140f7a.  v0:= "elements" @kind object;
  #L140f7e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140f84.  v0:= 2I;
  #L140f86.  v0:= new `kotlin.sequences.Sequence`[v0];
  #L140f8a.  v1:= 0I;
  #L140f8c.  v0[v1]:= v2 @kind object;
  #L140f90.  call temp:= `asSequence`(v3) @signature `Lkotlin/collections/CollectionsKt;.asSequence:(Ljava/lang/Iterable;)Lkotlin/sequences/Sequence;` @kind static;
  #L140f96.  v2:= temp @kind object;
  #L140f98.  v3:= 1I;
  #L140f9a.  v0[v3]:= v2 @kind object;
  #L140f9e.  call temp:= `sequenceOf`(v0) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.sequenceOf:([Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @kind static;
  #L140fa4.  v2:= temp @kind object;
  #L140fa6.  call temp:= `flatten`(v2) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.flatten:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L140fac.  v2:= temp @kind object;
  #L140fae.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `plus`(`kotlin.sequences.Sequence` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.plus:(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L140fc0.  v0:= "$this$plus" @kind object;
  #L140fc4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140fca.  v0:= 2I;
  #L140fcc.  v0:= new `kotlin.sequences.Sequence`[v0];
  #L140fd0.  v1:= 0I;
  #L140fd2.  v0[v1]:= v3 @kind object;
  #L140fd6.  v3:= 1I;
  #L140fd8.  v2:= new `java.lang.Object`[v3];
  #L140fdc.  v2[v1]:= v4 @kind object;
  #L140fe0.  call temp:= `sequenceOf`(v2) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.sequenceOf:([Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @kind static;
  #L140fe6.  v4:= temp @kind object;
  #L140fe8.  v0[v3]:= v4 @kind object;
  #L140fec.  call temp:= `sequenceOf`(v0) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.sequenceOf:([Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @kind static;
  #L140ff2.  v3:= temp @kind object;
  #L140ff4.  call temp:= `flatten`(v3) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.flatten:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L140ffa.  v3:= temp @kind object;
  #L140ffc.  return v3 @kind object;
}
procedure `kotlin.sequences.Sequence` `plus`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.sequences.Sequence` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.plus:(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L141048.  v0:= "$this$plus" @kind object;
  #L14104c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141052.  v0:= "elements" @kind object;
  #L141056.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14105c.  v0:= 2I;
  #L14105e.  v0:= new `kotlin.sequences.Sequence`[v0];
  #L141062.  v1:= 0I;
  #L141064.  v0[v1]:= v2 @kind object;
  #L141068.  v2:= 1I;
  #L14106a.  v0[v2]:= v3 @kind object;
  #L14106e.  call temp:= `sequenceOf`(v0) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.sequenceOf:([Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @kind static;
  #L141074.  v2:= temp @kind object;
  #L141076.  call temp:= `flatten`(v2) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.flatten:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L14107c.  v2:= temp @kind object;
  #L14107e.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `plus`(`kotlin.sequences.Sequence` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.plus:(Lkotlin/sequences/Sequence;[Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L141010.  v0:= "$this$plus" @kind object;
  #L141014.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14101a.  v0:= "elements" @kind object;
  #L14101e.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141024.  call temp:= `asList`(v2) @signature `Lkotlin/collections/ArraysKt;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L14102a.  v2:= temp @kind object;
  #L14102c.  call temp:= `plus`(v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.plus:(Lkotlin/sequences/Sequence;Ljava/lang/Iterable;)Lkotlin/sequences/Sequence;` @kind static;
  #L141032.  v1:= temp @kind object;
  #L141034.  return v1 @kind object;
}
procedure `java.lang.Object` `reduce`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.reduce:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13f8bc.  v0:= "$this$reduce" @kind object;
  #L13f8c0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f8c6.  v0:= "operation" @kind object;
  #L13f8ca.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f8d0.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f8d6.  v2:= temp @kind object;
  #L13f8d8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f8de.  v0:= temp;
  #L13f8e0.  if v0 == 0 then goto L13f90c;
  #L13f8e4.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f8ea.  v0:= temp @kind object;
  #L13f8ec.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f8f2.  v1:= temp;
  #L13f8f4.  if v1 == 0 then goto L13f90a;
  #L13f8f8.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f8fe.  v1:= temp @kind object;
  #L13f900.  call temp:= `invoke`(v3, v0, v1) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f906.  v0:= temp @kind object;
  #L13f908.  goto L13f8ec;
  #L13f90a.  return v0 @kind object;
  #L13f90c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L13f910.  v3:= "Empty sequence can't be reduced." @kind object;
  #L13f914.  call `<init>`(v2, v3) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f91a.  throw v2;
}
procedure `java.lang.Object` `reduceIndexed`(`kotlin.sequences.Sequence` v6 @kind object, `kotlin.jvm.functions.Function3` v7 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.reduceIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13f92c.  v0:= "$this$reduceIndexed" @kind object;
  #L13f930.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f936.  v0:= "operation" @kind object;
  #L13f93a.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f940.  call temp:= `iterator`(v6) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f946.  v6:= temp @kind object;
  #L13f948.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f94e.  v0:= temp;
  #L13f950.  if v0 == 0 then goto L13f9ba;
  #L13f954.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f95a.  v0:= temp @kind object;
  #L13f95c.  v1:= 1I;
  #L13f95e.  v2:= 1I;
  #L13f960.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f966.  v3:= temp;
  #L13f968.  if v3 == 0 then goto L13f9b8;
  #L13f96c.  v3:= v2 + 1;
  #L13f970.  if v2 >= 0 then goto L13f99c;
  #L13f974.  v4:= 3I;
  #L13f976.  v5:= 0I;
  #L13f978.  call temp:= `apiVersionIsAtLeast`(v1, v4, v5) @signature `Lkotlin/internal/PlatformImplementationsKt;.apiVersionIsAtLeast:(III)Z` @kind static;
  #L13f97e.  v4:= temp;
  #L13f980.  if v4 == 0 then goto L13f98c;
  #L13f984.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L13f98a.  goto L13f99c;
  #L13f98c.  v6:= new `java.lang.ArithmeticException`;
  #L13f990.  v7:= "Index overflow has happened." @kind object;
  #L13f994.  call `<init>`(v6, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f99a.  throw v6;
  #L13f99c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L13f9a2.  v2:= temp @kind object;
  #L13f9a4.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f9aa.  v4:= temp @kind object;
  #L13f9ac.  call temp:= `invoke`(v7, v2, v0, v4) @signature `Lkotlin/jvm/functions/Function3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13f9b2.  v0:= temp @kind object;
  #L13f9b4.  v2:= v3;
  #L13f9b6.  goto L13f960;
  #L13f9b8.  return v0 @kind object;
  #L13f9ba.  v6:= new `java.lang.UnsupportedOperationException`;
  #L13f9be.  v7:= "Empty sequence can't be reduced." @kind object;
  #L13f9c2.  call `<init>`(v6, v7) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f9c8.  throw v6;
}
procedure `java.lang.Object` `reduceIndexedOrNull`(`kotlin.sequences.Sequence` v6 @kind object, `kotlin.jvm.functions.Function3` v7 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.reduceIndexedOrNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13f9dc.  v0:= "$this$reduceIndexedOrNull" @kind object;
  #L13f9e0.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f9e6.  v0:= "operation" @kind object;
  #L13f9ea.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13f9f0.  call temp:= `iterator`(v6) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13f9f6.  v6:= temp @kind object;
  #L13f9f8.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13f9fe.  v0:= temp;
  #L13fa00.  if v0 != 0 then goto L13fa08;
  #L13fa04.  v6:= 0I;
  #L13fa06.  return v6 @kind object;
  #L13fa08.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13fa0e.  v0:= temp @kind object;
  #L13fa10.  v1:= 1I;
  #L13fa12.  v2:= 1I;
  #L13fa14.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13fa1a.  v3:= temp;
  #L13fa1c.  if v3 == 0 then goto L13fa6c;
  #L13fa20.  v3:= v2 + 1;
  #L13fa24.  if v2 >= 0 then goto L13fa50;
  #L13fa28.  v4:= 3I;
  #L13fa2a.  v5:= 0I;
  #L13fa2c.  call temp:= `apiVersionIsAtLeast`(v1, v4, v5) @signature `Lkotlin/internal/PlatformImplementationsKt;.apiVersionIsAtLeast:(III)Z` @kind static;
  #L13fa32.  v4:= temp;
  #L13fa34.  if v4 == 0 then goto L13fa40;
  #L13fa38.  call `throwIndexOverflow`() @signature `Lkotlin/collections/CollectionsKt;.throwIndexOverflow:()V` @kind static;
  #L13fa3e.  goto L13fa50;
  #L13fa40.  v6:= new `java.lang.ArithmeticException`;
  #L13fa44.  v7:= "Index overflow has happened." @kind object;
  #L13fa48.  call `<init>`(v6, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13fa4e.  throw v6;
  #L13fa50.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L13fa56.  v2:= temp @kind object;
  #L13fa58.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13fa5e.  v4:= temp @kind object;
  #L13fa60.  call temp:= `invoke`(v7, v2, v0, v4) @signature `Lkotlin/jvm/functions/Function3;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13fa66.  v0:= temp @kind object;
  #L13fa68.  v2:= v3;
  #L13fa6a.  goto L13fa14;
  #L13fa6c.  return v0 @kind object;
}
procedure `java.lang.Object` `reduceOrNull`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.reduceOrNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13fa80.  v0:= "$this$reduceOrNull" @kind object;
  #L13fa84.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fa8a.  v0:= "operation" @kind object;
  #L13fa8e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fa94.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13fa9a.  v2:= temp @kind object;
  #L13fa9c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13faa2.  v0:= temp;
  #L13faa4.  if v0 != 0 then goto L13faac;
  #L13faa8.  v2:= 0I;
  #L13faaa.  return v2 @kind object;
  #L13faac.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13fab2.  v0:= temp @kind object;
  #L13fab4.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13faba.  v1:= temp;
  #L13fabc.  if v1 == 0 then goto L13fad2;
  #L13fac0.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13fac6.  v1:= temp @kind object;
  #L13fac8.  call temp:= `invoke`(v3, v0, v1) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13face.  v0:= temp @kind object;
  #L13fad0.  goto L13fab4;
  #L13fad2.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `requireNoNulls`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.requireNoNulls:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L141090.  v0:= "$this$requireNoNulls" @kind object;
  #L141094.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14109a.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$l`;
  #L14109e.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$l;.<init>:(Lkotlin/sequences/Sequence;)V` @kind direct;
  #L1410a4.  call temp:= `map`(v1, v0) @signature `Lkotlin/sequences/SequencesKt;.map:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L1410aa.  v1:= temp @kind object;
  #L1410ac.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `runningFold`(`kotlin.sequences.Sequence` v2 @kind object, `java.lang.Object` v3 @kind object, `kotlin.jvm.functions.Function2` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.runningFold:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1410c0.  v0:= "$this$runningFold" @kind object;
  #L1410c4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1410ca.  v0:= "operation" @kind object;
  #L1410ce.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1410d4.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$m`;
  #L1410d8.  v1:= 0I;
  #L1410da.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$m;.<init>:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L1410e0.  call temp:= `sequence`(v0) @signature `Lkotlin/sequences/SequencesKt;.sequence:(Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L1410e6.  v2:= temp @kind object;
  #L1410e8.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `runningFoldIndexed`(`kotlin.sequences.Sequence` v2 @kind object, `java.lang.Object` v3 @kind object, `kotlin.jvm.functions.Function3` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.runningFoldIndexed:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1410fc.  v0:= "$this$runningFoldIndexed" @kind object;
  #L141100.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141106.  v0:= "operation" @kind object;
  #L14110a.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141110.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$n`;
  #L141114.  v1:= 0I;
  #L141116.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$n;.<init>:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L14111c.  call temp:= `sequence`(v0) @signature `Lkotlin/sequences/SequencesKt;.sequence:(Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L141122.  v2:= temp @kind object;
  #L141124.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `runningReduce`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.runningReduce:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L141138.  v0:= "$this$runningReduce" @kind object;
  #L14113c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141142.  v0:= "operation" @kind object;
  #L141146.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14114c.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$o`;
  #L141150.  v1:= 0I;
  #L141152.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$o;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L141158.  call temp:= `sequence`(v0) @signature `Lkotlin/sequences/SequencesKt;.sequence:(Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L14115e.  v2:= temp @kind object;
  #L141160.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `runningReduceIndexed`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function3` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.runningReduceIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L141174.  v0:= "$this$runningReduceIndexed" @kind object;
  #L141178.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14117e.  v0:= "operation" @kind object;
  #L141182.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141188.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$p`;
  #L14118c.  v1:= 0I;
  #L14118e.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$p;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L141194.  call temp:= `sequence`(v0) @signature `Lkotlin/sequences/SequencesKt;.sequence:(Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L14119a.  v2:= temp @kind object;
  #L14119c.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `scan`(`kotlin.sequences.Sequence` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.scan:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1411b0.  v0:= "$this$scan" @kind object;
  #L1411b4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1411ba.  v0:= "operation" @kind object;
  #L1411be.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1411c4.  call temp:= `runningFold`(v1, v2, v3) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.runningFold:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L1411ca.  v1:= temp @kind object;
  #L1411cc.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `scanIndexed`(`kotlin.sequences.Sequence` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function3` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.scanIndexed:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1411e0.  v0:= "$this$scanIndexed" @kind object;
  #L1411e4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1411ea.  v0:= "operation" @kind object;
  #L1411ee.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1411f4.  call temp:= `runningFoldIndexed`(v1, v2, v3) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.runningFoldIndexed:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Lkotlin/sequences/Sequence;` @kind static;
  #L1411fa.  v1:= temp @kind object;
  #L1411fc.  return v1 @kind object;
}
procedure `java.lang.Object` `single`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.single:(Lkotlin/sequences/Sequence;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13fae4.  v0:= "$this$single" @kind object;
  #L13fae8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13faee.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13faf4.  v1:= temp @kind object;
  #L13faf6.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13fafc.  v0:= temp;
  #L13fafe.  if v0 == 0 then goto L13fb28;
  #L13fb02.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13fb08.  v0:= temp @kind object;
  #L13fb0a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13fb10.  v1:= temp;
  #L13fb12.  if v1 != 0 then goto L13fb18;
  #L13fb16.  return v0 @kind object;
  #L13fb18.  v1:= new `java.lang.IllegalArgumentException`;
  #L13fb1c.  v0:= "Sequence has more than one element." @kind object;
  #L13fb20.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13fb26.  throw v1;
  #L13fb28.  v1:= new `java.util.NoSuchElementException`;
  #L13fb2c.  v0:= "Sequence is empty." @kind object;
  #L13fb30.  call `<init>`(v1, v0) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13fb36.  throw v1;
}
procedure `java.lang.Object` `single`(`kotlin.sequences.Sequence` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.single:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13fb48.  v0:= "$this$single" @kind object;
  #L13fb4c.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fb52.  v0:= "predicate" @kind object;
  #L13fb56.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fb5c.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13fb62.  v4:= temp @kind object;
  #L13fb64.  v0:= 0I;
  #L13fb66.  v1:= 0I;
  #L13fb68.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13fb6e.  v2:= temp;
  #L13fb70.  if v2 == 0 then goto L13fbb0;
  #L13fb74.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13fb7a.  v2:= temp @kind object;
  #L13fb7c.  call temp:= `invoke`(v5, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13fb82.  v3:= temp @kind object;
  #L13fb84.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L13fb88.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13fb8e.  v3:= temp;
  #L13fb90.  if v3 == 0 then goto L13fb68;
  #L13fb94.  if v1 != 0 then goto L13fba0;
  #L13fb98.  v0:= 1I;
  #L13fb9a.  v0:= v2 @kind object;
  #L13fb9c.  v1:= 1I;
  #L13fb9e.  goto L13fb68;
  #L13fba0.  v4:= new `java.lang.IllegalArgumentException`;
  #L13fba4.  v5:= "Sequence contains more than one matching element." @kind object;
  #L13fba8.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13fbae.  throw v4;
  #L13fbb0.  if v1 == 0 then goto L13fbb6;
  #L13fbb4.  return v0 @kind object;
  #L13fbb6.  v4:= new `java.util.NoSuchElementException`;
  #L13fbba.  v5:= "Sequence contains no element matching the predicate." @kind object;
  #L13fbbe.  call `<init>`(v4, v5) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13fbc4.  throw v4;
}
procedure `java.lang.Object` `singleOrNull`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.singleOrNull:(Lkotlin/sequences/Sequence;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13fbd8.  v0:= "$this$singleOrNull" @kind object;
  #L13fbdc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fbe2.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13fbe8.  v2:= temp @kind object;
  #L13fbea.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13fbf0.  v0:= temp;
  #L13fbf2.  v1:= 0I;
  #L13fbf4.  if v0 != 0 then goto L13fbfa;
  #L13fbf8.  return v1 @kind object;
  #L13fbfa.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13fc00.  v0:= temp @kind object;
  #L13fc02.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13fc08.  v2:= temp;
  #L13fc0a.  if v2 == 0 then goto L13fc10;
  #L13fc0e.  return v1 @kind object;
  #L13fc10.  return v0 @kind object;
}
procedure `java.lang.Object` `singleOrNull`(`kotlin.sequences.Sequence` v5 @kind object, `kotlin.jvm.functions.Function1` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.singleOrNull:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13fc24.  v0:= "$this$singleOrNull" @kind object;
  #L13fc28.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fc2e.  v0:= "predicate" @kind object;
  #L13fc32.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13fc38.  call temp:= `iterator`(v5) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13fc3e.  v5:= temp @kind object;
  #L13fc40.  v0:= 0I;
  #L13fc42.  v1:= 0I;
  #L13fc44.  v2:= v0 @kind object;
  #L13fc46.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13fc4c.  v3:= temp;
  #L13fc4e.  if v3 == 0 then goto L13fc7e;
  #L13fc52.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13fc58.  v3:= temp @kind object;
  #L13fc5a.  call temp:= `invoke`(v6, v3) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13fc60.  v4:= temp @kind object;
  #L13fc62.  v4:= (`java.lang.Boolean`) v4 @kind object;
  #L13fc66.  call temp:= `booleanValue`(v4) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13fc6c.  v4:= temp;
  #L13fc6e.  if v4 == 0 then goto L13fc46;
  #L13fc72.  if v1 == 0 then goto L13fc78;
  #L13fc76.  return v0 @kind object;
  #L13fc78.  v1:= 1I;
  #L13fc7a.  v2:= v3 @kind object;
  #L13fc7c.  goto L13fc46;
  #L13fc7e.  if v1 != 0 then goto L13fc84;
  #L13fc82.  return v0 @kind object;
  #L13fc84.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `sorted`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sorted:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L141210.  v0:= "$this$sorted" @kind object;
  #L141214.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14121a.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$sorted$1`;
  #L14121e.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$sorted$1;.<init>:(Lkotlin/sequences/Sequence;)V` @kind direct;
  #L141224.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `sortedBy`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sortedBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L141238.  v0:= "$this$sortedBy" @kind object;
  #L14123c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141242.  v0:= "selector" @kind object;
  #L141246.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14124c.  v0:= new `kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2`;
  #L141250.  call `<init>`(v0, v2) @signature `Lkotlin/comparisons/ComparisonsKt__ComparisonsKt$compareBy$2;.<init>:(Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L141256.  call temp:= `sortedWith`(v1, v0) @signature `Lkotlin/sequences/SequencesKt;.sortedWith:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Lkotlin/sequences/Sequence;` @kind static;
  #L14125c.  v1:= temp @kind object;
  #L14125e.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `sortedByDescending`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sortedByDescending:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L141270.  v0:= "$this$sortedByDescending" @kind object;
  #L141274.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14127a.  v0:= "selector" @kind object;
  #L14127e.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141284.  v0:= new `kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1`;
  #L141288.  call `<init>`(v0, v2) @signature `Lkotlin/comparisons/ComparisonsKt__ComparisonsKt$compareByDescending$1;.<init>:(Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L14128e.  call temp:= `sortedWith`(v1, v0) @signature `Lkotlin/sequences/SequencesKt;.sortedWith:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Lkotlin/sequences/Sequence;` @kind static;
  #L141294.  v1:= temp @kind object;
  #L141296.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `sortedDescending`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sortedDescending:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1412a8.  v0:= "$this$sortedDescending" @kind object;
  #L1412ac.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1412b2.  call temp:= `reverseOrder`() @signature `Lkotlin/comparisons/ComparisonsKt;.reverseOrder:()Ljava/util/Comparator;` @kind static;
  #L1412b8.  v0:= temp @kind object;
  #L1412ba.  call temp:= `sortedWith`(v1, v0) @signature `Lkotlin/sequences/SequencesKt;.sortedWith:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Lkotlin/sequences/Sequence;` @kind static;
  #L1412c0.  v1:= temp @kind object;
  #L1412c2.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `sortedWith`(`kotlin.sequences.Sequence` v1 @kind object, `java.util.Comparator` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sortedWith:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1412d4.  v0:= "$this$sortedWith" @kind object;
  #L1412d8.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1412de.  v0:= "comparator" @kind object;
  #L1412e2.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1412e8.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$sortedWith$1`;
  #L1412ec.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$sortedWith$1;.<init>:(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)V` @kind direct;
  #L1412f2.  return v0 @kind object;
}
procedure `int` `sumBy`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sumBy:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13ea60.  v0:= "$this$sumBy" @kind object;
  #L13ea64.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ea6a.  v0:= "selector" @kind object;
  #L13ea6e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ea74.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13ea7a.  v2:= temp @kind object;
  #L13ea7c.  v0:= 0I;
  #L13ea7e.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13ea84.  v1:= temp;
  #L13ea86.  if v1 == 0 then goto L13eaaa;
  #L13ea8a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13ea90.  v1:= temp @kind object;
  #L13ea92.  call temp:= `invoke`(v3, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13ea98.  v1:= temp @kind object;
  #L13ea9a.  v1:= (`java.lang.Number`) v1 @kind object;
  #L13ea9e.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L13eaa4.  v1:= temp;
  #L13eaa6.  v0:= v0 + v1 @kind int;
  #L13eaa8.  goto L13ea7e;
  #L13eaaa.  return v0;
}
procedure `double` `sumByDouble`(`kotlin.sequences.Sequence` v4 @kind object, `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sumByDouble:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13e6b0.  v0:= "$this$sumByDouble" @kind object;
  #L13e6b4.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e6ba.  v0:= "selector" @kind object;
  #L13e6be.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e6c4.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e6ca.  v4:= temp @kind object;
  #L13e6cc.  v0:= 0L;
  #L13e6d0.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e6d6.  v2:= temp;
  #L13e6d8.  if v2 == 0 then goto L13e6fc;
  #L13e6dc.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e6e2.  v2:= temp @kind object;
  #L13e6e4.  call temp:= `invoke`(v5, v2) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13e6ea.  v2:= temp @kind object;
  #L13e6ec.  v2:= (`java.lang.Number`) v2 @kind object;
  #L13e6f0.  call temp:= `doubleValue`(v2) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L13e6f6.  v2:= temp @kind wide;
  #L13e6f8.  v0:= v0 + v2 @kind double;
  #L13e6fa.  goto L13e6d0;
  #L13e6fc.  return v0 @kind wide;
}
procedure `int` `sumOfByte`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sumOfByte:(Lkotlin/sequences/Sequence;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13eabc.  v0:= "$this$sum" @kind object;
  #L13eac0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13eac6.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13eacc.  v2:= temp @kind object;
  #L13eace.  v0:= 0I;
  #L13ead0.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13ead6.  v1:= temp;
  #L13ead8.  if v1 == 0 then goto L13eaf4;
  #L13eadc.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13eae2.  v1:= temp @kind object;
  #L13eae4.  v1:= (`java.lang.Number`) v1 @kind object;
  #L13eae8.  call temp:= `byteValue`(v1) @signature `Ljava/lang/Number;.byteValue:()B` @kind virtual;
  #L13eaee.  v1:= temp;
  #L13eaf0.  v0:= v0 + v1 @kind int;
  #L13eaf2.  goto L13ead0;
  #L13eaf4.  return v0;
}
procedure `double` `sumOfDouble`(`kotlin.sequences.Sequence` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sumOfDouble:(Lkotlin/sequences/Sequence;)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13e710.  v0:= "$this$sum" @kind object;
  #L13e714.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e71a.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e720.  v4:= temp @kind object;
  #L13e722.  v0:= 0L;
  #L13e726.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e72c.  v2:= temp;
  #L13e72e.  if v2 == 0 then goto L13e74a;
  #L13e732.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e738.  v2:= temp @kind object;
  #L13e73a.  v2:= (`java.lang.Number`) v2 @kind object;
  #L13e73e.  call temp:= `doubleValue`(v2) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L13e744.  v2:= temp @kind wide;
  #L13e746.  v0:= v0 + v2 @kind double;
  #L13e748.  goto L13e726;
  #L13e74a.  return v0 @kind wide;
}
procedure `float` `sumOfFloat`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sumOfFloat:(Lkotlin/sequences/Sequence;)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13e75c.  v0:= "$this$sum" @kind object;
  #L13e760.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13e766.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13e76c.  v2:= temp @kind object;
  #L13e76e.  v0:= 0I;
  #L13e770.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13e776.  v1:= temp;
  #L13e778.  if v1 == 0 then goto L13e794;
  #L13e77c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13e782.  v1:= temp @kind object;
  #L13e784.  v1:= (`java.lang.Number`) v1 @kind object;
  #L13e788.  call temp:= `floatValue`(v1) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L13e78e.  v1:= temp;
  #L13e790.  v0:= v0 + v1 @kind float;
  #L13e792.  goto L13e770;
  #L13e794.  return v0;
}
procedure `int` `sumOfInt`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sumOfInt:(Lkotlin/sequences/Sequence;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13eb08.  v0:= "$this$sum" @kind object;
  #L13eb0c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13eb12.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13eb18.  v2:= temp @kind object;
  #L13eb1a.  v0:= 0I;
  #L13eb1c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13eb22.  v1:= temp;
  #L13eb24.  if v1 == 0 then goto L13eb40;
  #L13eb28.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13eb2e.  v1:= temp @kind object;
  #L13eb30.  v1:= (`java.lang.Number`) v1 @kind object;
  #L13eb34.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L13eb3a.  v1:= temp;
  #L13eb3c.  v0:= v0 + v1 @kind int;
  #L13eb3e.  goto L13eb1c;
  #L13eb40.  return v0;
}
procedure `long` `sumOfLong`(`kotlin.sequences.Sequence` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sumOfLong:(Lkotlin/sequences/Sequence;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14158c.  v0:= "$this$sum" @kind object;
  #L141590.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141596.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L14159c.  v4:= temp @kind object;
  #L14159e.  v0:= 0L;
  #L1415a2.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1415a8.  v2:= temp;
  #L1415aa.  if v2 == 0 then goto L1415c6;
  #L1415ae.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1415b4.  v2:= temp @kind object;
  #L1415b6.  v2:= (`java.lang.Number`) v2 @kind object;
  #L1415ba.  call temp:= `longValue`(v2) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L1415c0.  v2:= temp @kind wide;
  #L1415c2.  v0:= v0 + v2 @kind long;
  #L1415c4.  goto L1415a2;
  #L1415c6.  return v0 @kind wide;
}
procedure `int` `sumOfShort`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.sumOfShort:(Lkotlin/sequences/Sequence;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13eb54.  v0:= "$this$sum" @kind object;
  #L13eb58.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13eb5e.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13eb64.  v2:= temp @kind object;
  #L13eb66.  v0:= 0I;
  #L13eb68.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13eb6e.  v1:= temp;
  #L13eb70.  if v1 == 0 then goto L13eb8c;
  #L13eb74.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13eb7a.  v1:= temp @kind object;
  #L13eb7c.  v1:= (`java.lang.Number`) v1 @kind object;
  #L13eb80.  call temp:= `shortValue`(v1) @signature `Ljava/lang/Number;.shortValue:()S` @kind virtual;
  #L13eb86.  v1:= temp;
  #L13eb88.  v0:= v0 + v1 @kind int;
  #L13eb8a.  goto L13eb68;
  #L13eb8c.  return v0;
}
procedure `kotlin.sequences.Sequence` `take`(`kotlin.sequences.Sequence` v1 @kind object, `int` v2 ) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.take:(Lkotlin/sequences/Sequence;I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L141304.  v0:= "$this$take" @kind object;
  #L141308.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14130e.  if v2 < 0 then goto L141316;
  #L141312.  v0:= 1I;
  #L141314.  goto L141318;
  #L141316.  v0:= 0I;
  #L141318.  if v0 == 0 then goto L14134e;
  #L14131c.  if v2 != 0 then goto L14132a;
  #L141320.  call temp:= `emptySequence`() @signature `Lkotlin/sequences/SequencesKt;.emptySequence:()Lkotlin/sequences/Sequence;` @kind static;
  #L141326.  v1:= temp @kind object;
  #L141328.  goto L14134c;
  #L14132a.  v0:= instanceof @variable v1 @type ^`kotlin.sequences.DropTakeSequence` @kind boolean;
  #L14132e.  if v0 == 0 then goto L141340;
  #L141332.  v1:= (`kotlin.sequences.DropTakeSequence`) v1 @kind object;
  #L141336.  call temp:= `take`(v1, v2) @signature `Lkotlin/sequences/DropTakeSequence;.take:(I)Lkotlin/sequences/Sequence;` @kind interface;
  #L14133c.  v1:= temp @kind object;
  #L14133e.  goto L14134c;
  #L141340.  v0:= new `kotlin.sequences.TakeSequence`;
  #L141344.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/TakeSequence;.<init>:(Lkotlin/sequences/Sequence;I)V` @kind direct;
  #L14134a.  v1:= v0 @kind object;
  #L14134c.  return v1 @kind object;
  #L14134e.  v1:= new `java.lang.StringBuilder`;
  #L141352.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L141358.  v0:= "Requested element count " @kind object;
  #L14135c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L141362.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L141368.  v2:= " is less than zero." @kind object;
  #L14136c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L141372.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L141378.  v1:= temp @kind object;
  #L14137a.  v2:= new `java.lang.IllegalArgumentException`;
  #L14137e.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L141384.  v1:= temp @kind object;
  #L141386.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14138c.  throw v2;
}
procedure `kotlin.sequences.Sequence` `takeWhile`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.takeWhile:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1413a0.  v0:= "$this$takeWhile" @kind object;
  #L1413a4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1413aa.  v0:= "predicate" @kind object;
  #L1413ae.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1413b4.  v0:= new `kotlin.sequences.TakeWhileSequence`;
  #L1413b8.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/TakeWhileSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L1413be.  return v0 @kind object;
}
procedure `java.util.Collection` `toCollection`(`kotlin.sequences.Sequence` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toCollection:(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L14027c.  v0:= "$this$toCollection" @kind object;
  #L140280.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140286.  v0:= "destination" @kind object;
  #L14028a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140290.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L140296.  v1:= temp @kind object;
  #L140298.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L14029e.  v0:= temp;
  #L1402a0.  if v0 == 0 then goto L1402b4;
  #L1402a4.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1402aa.  v0:= temp @kind object;
  #L1402ac.  call temp:= `add`(v2, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1402b2.  goto L140298;
  #L1402b4.  return v2 @kind object;
}
procedure `java.util.HashSet` `toHashSet`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toHashSet:(Lkotlin/sequences/Sequence;)Ljava/util/HashSet;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1402c8.  v0:= "$this$toHashSet" @kind object;
  #L1402cc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1402d2.  v0:= new `java.util.HashSet`;
  #L1402d6.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L1402dc.  call temp:= `toCollection`(v1, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toCollection:(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;` @kind static;
  #L1402e2.  v1:= temp @kind object;
  #L1402e4.  v1:= (`java.util.HashSet`) v1 @kind object;
  #L1402e8.  return v1 @kind object;
}
procedure `java.util.List` `toList`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toList:(Lkotlin/sequences/Sequence;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1402fc.  v0:= "$this$toList" @kind object;
  #L140300.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140306.  call temp:= `toMutableList`(v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toMutableList:(Lkotlin/sequences/Sequence;)Ljava/util/List;` @kind static;
  #L14030c.  v1:= temp @kind object;
  #L14030e.  call temp:= `optimizeReadOnlyList`(v1) @signature `Lkotlin/collections/CollectionsKt;.optimizeReadOnlyList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L140314.  v1:= temp @kind object;
  #L140316.  return v1 @kind object;
}
procedure `java.util.List` `toMutableList`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toMutableList:(Lkotlin/sequences/Sequence;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L140328.  v0:= "$this$toMutableList" @kind object;
  #L14032c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L140332.  v0:= new `java.util.ArrayList`;
  #L140336.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L14033c.  call temp:= `toCollection`(v1, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toCollection:(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;` @kind static;
  #L140342.  v1:= temp @kind object;
  #L140344.  v1:= (`java.util.List`) v1 @kind object;
  #L140348.  return v1 @kind object;
}
procedure `java.util.Set` `toMutableSet`(`kotlin.sequences.Sequence` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toMutableSet:(Lkotlin/sequences/Sequence;)Ljava/util/Set;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1408a4.  v0:= "$this$toMutableSet" @kind object;
  #L1408a8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1408ae.  v0:= new `java.util.LinkedHashSet`;
  #L1408b2.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L1408b8.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1408be.  v2:= temp @kind object;
  #L1408c0.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1408c6.  v1:= temp;
  #L1408c8.  if v1 == 0 then goto L1408dc;
  #L1408cc.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1408d2.  v1:= temp @kind object;
  #L1408d4.  call temp:= `add`(v0, v1) @signature `Ljava/util/LinkedHashSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1408da.  goto L1408c0;
  #L1408dc.  return v0 @kind object;
}
procedure `java.util.Set` `toSet`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toSet:(Lkotlin/sequences/Sequence;)Ljava/util/Set;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1408f0.  v0:= "$this$toSet" @kind object;
  #L1408f4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1408fa.  v0:= new `java.util.LinkedHashSet`;
  #L1408fe.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L140904.  call temp:= `toCollection`(v1, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.toCollection:(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;` @kind static;
  #L14090a.  v1:= temp @kind object;
  #L14090c.  v1:= (`java.util.Set`) v1 @kind object;
  #L140910.  call temp:= `optimizeReadOnlySet`(v1) @signature `Lkotlin/collections/SetsKt;.optimizeReadOnlySet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L140916.  v1:= temp @kind object;
  #L140918.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `windowed`(`kotlin.sequences.Sequence` v1 @kind object, `int` v2 , `int` v3 , `boolean` v4 ) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.windowed:(Lkotlin/sequences/Sequence;IIZ)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L141430.  v0:= "$this$windowed" @kind object;
  #L141434.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14143a.  v0:= 0I;
  #L14143c.  call temp:= `windowedSequence`(v1, v2, v3, v4, v0) @signature `Lkotlin/collections/SlidingWindowKt;.windowedSequence:(Lkotlin/sequences/Sequence;IIZZ)Lkotlin/sequences/Sequence;` @kind static;
  #L141442.  v1:= temp @kind object;
  #L141444.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `windowed`(`kotlin.sequences.Sequence` v1 @kind object, `int` v2 , `int` v3 , `boolean` v4 , `kotlin.jvm.functions.Function1` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.windowed:(Lkotlin/sequences/Sequence;IIZLkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L141458.  v0:= "$this$windowed" @kind object;
  #L14145c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141462.  v0:= "transform" @kind object;
  #L141466.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14146c.  v0:= 1I;
  #L14146e.  call temp:= `windowedSequence`(v1, v2, v3, v4, v0) @signature `Lkotlin/collections/SlidingWindowKt;.windowedSequence:(Lkotlin/sequences/Sequence;IIZZ)Lkotlin/sequences/Sequence;` @kind static;
  #L141474.  v1:= temp @kind object;
  #L141476.  call temp:= `map`(v1, v5) @signature `Lkotlin/sequences/SequencesKt;.map:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L14147c.  v1:= temp @kind object;
  #L14147e.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `windowed$default`(`kotlin.sequences.Sequence` v0 @kind object, `int` v1 , `int` v2 , `boolean` v3 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.windowed$default:(Lkotlin/sequences/Sequence;IIZILjava/lang/Object;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1413d0.  v5:= v4 ^& 2;
  #L1413d4.  if v5 == 0 then goto L1413da;
  #L1413d8.  v2:= 1I;
  #L1413da.  v4:= v4 ^& 4;
  #L1413de.  if v4 == 0 then goto L1413e4;
  #L1413e2.  v3:= 0I;
  #L1413e4.  call temp:= `windowed`(v0, v1, v2, v3) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.windowed:(Lkotlin/sequences/Sequence;IIZ)Lkotlin/sequences/Sequence;` @kind static;
  #L1413ea.  v0:= temp @kind object;
  #L1413ec.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `windowed$default`(`kotlin.sequences.Sequence` v0 @kind object, `int` v1 , `int` v2 , `boolean` v3 , `kotlin.jvm.functions.Function1` v4 @kind object, `int` v5 , `java.lang.Object` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.windowed$default:(Lkotlin/sequences/Sequence;IIZLkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L141400.  v6:= v5 ^& 2;
  #L141404.  if v6 == 0 then goto L14140a;
  #L141408.  v2:= 1I;
  #L14140a.  v5:= v5 ^& 4;
  #L14140e.  if v5 == 0 then goto L141414;
  #L141412.  v3:= 0I;
  #L141414.  call temp:= `windowed`(v0, v1, v2, v3, v4) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.windowed:(Lkotlin/sequences/Sequence;IIZLkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L14141a.  v0:= temp @kind object;
  #L14141c.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `withIndex`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.withIndex:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L141490.  v0:= "$this$withIndex" @kind object;
  #L141494.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14149a.  v0:= new `kotlin.sequences.IndexingSequence`;
  #L14149e.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/IndexingSequence;.<init>:(Lkotlin/sequences/Sequence;)V` @kind direct;
  #L1414a4.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `zip`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.sequences.Sequence` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.zip:(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1414b8.  v0:= "$this$zip" @kind object;
  #L1414bc.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1414c2.  v0:= "other" @kind object;
  #L1414c6.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1414cc.  v0:= new `kotlin.sequences.MergingSequence`;
  #L1414d0.  v1:= `@@kotlin.sequences.SequencesKt___SequencesKt$q.a` @type ^`kotlin.sequences.SequencesKt___SequencesKt$q` @kind object;
  #L1414d4.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlin/sequences/MergingSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L1414da.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `zip`(`kotlin.sequences.Sequence` v1 @kind object, `kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.zip:(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1414ec.  v0:= "$this$zip" @kind object;
  #L1414f0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1414f6.  v0:= "other" @kind object;
  #L1414fa.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141500.  v0:= "transform" @kind object;
  #L141504.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14150a.  v0:= new `kotlin.sequences.MergingSequence`;
  #L14150e.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/sequences/MergingSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L141514.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `zipWithNext`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.zipWithNext:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L141528.  v0:= "$this$zipWithNext" @kind object;
  #L14152c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141532.  v0:= `@@kotlin.sequences.SequencesKt___SequencesKt$r.a` @type ^`kotlin.sequences.SequencesKt___SequencesKt$r` @kind object;
  #L141536.  call temp:= `zipWithNext`(v1, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.zipWithNext:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L14153c.  v1:= temp @kind object;
  #L14153e.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `zipWithNext`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt;.zipWithNext:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L141550.  v0:= "$this$zipWithNext" @kind object;
  #L141554.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14155a.  v0:= "transform" @kind object;
  #L14155e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141564.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$s`;
  #L141568.  v1:= 0I;
  #L14156a.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$s;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L141570.  call temp:= `sequence`(v0) @signature `Lkotlin/sequences/SequencesKt;.sequence:(Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L141576.  v2:= temp @kind object;
  #L141578.  return v2 @kind object;
}
