record `kotlin.sequences.DropSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.DropSequence$iterator$1.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.DropSequence$iterator$1.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.sequences.DropSequence$iterator$1` v1 @kind this, `kotlin.sequences.DropSequence` v2 @kind object) @signature `Lkotlin/sequences/DropSequence$iterator$1;.<init>:(Lkotlin/sequences/DropSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L13b08c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13b092.  call temp:= `access$getSequence$p`(v2) @signature `Lkotlin/sequences/DropSequence;.access$getSequence$p:(Lkotlin/sequences/DropSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L13b098.  v0:= temp @kind object;
  #L13b09a.  call temp:= `iterator`(v0) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13b0a0.  v0:= temp @kind object;
  #L13b0a2.  v1.`kotlin.sequences.DropSequence$iterator$1.a` @type ^`java.util.Iterator` := v0 @kind object;
  #L13b0a6.  call temp:= `access$getCount$p`(v2) @signature `Lkotlin/sequences/DropSequence;.access$getCount$p:(Lkotlin/sequences/DropSequence;)I` @kind static;
  #L13b0ac.  v2:= temp;
  #L13b0ae.  v1.`kotlin.sequences.DropSequence$iterator$1.b` @type ^`int` := v2;
  #L13b0b2.  return @kind void;
}
procedure `void` `b`(`kotlin.sequences.DropSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropSequence$iterator$1;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L13b0c4.  v0:= v1.`kotlin.sequences.DropSequence$iterator$1.b` @type ^`int`;
  #L13b0c8.  if v0 <= 0 then goto L13b0f4;
  #L13b0cc.  v0:= v1.`kotlin.sequences.DropSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13b0d0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13b0d6.  v0:= temp;
  #L13b0d8.  if v0 == 0 then goto L13b0f4;
  #L13b0dc.  v0:= v1.`kotlin.sequences.DropSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13b0e0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13b0e6.  v0:= v1.`kotlin.sequences.DropSequence$iterator$1.b` @type ^`int`;
  #L13b0ea.  v0:= v0 + -1;
  #L13b0ee.  v1.`kotlin.sequences.DropSequence$iterator$1.b` @type ^`int` := v0;
  #L13b0f2.  goto L13b0c4;
  #L13b0f4.  return @kind void;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.DropSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13b074.  v0:= v1.`kotlin.sequences.DropSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13b078.  return v0 @kind object;
}
procedure `int` `getLeft`(`kotlin.sequences.DropSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropSequence$iterator$1;.getLeft:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13b038.  v0:= v1.`kotlin.sequences.DropSequence$iterator$1.b` @type ^`int`;
  #L13b03c.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.sequences.DropSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13b014.  call `b`(v1) @signature `Lkotlin/sequences/DropSequence$iterator$1;.b:()V` @kind direct;
  #L13b01a.  v0:= v1.`kotlin.sequences.DropSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13b01e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13b024.  v0:= temp;
  #L13b026.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.DropSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13b050.  call `b`(v1) @signature `Lkotlin/sequences/DropSequence$iterator$1;.b:()V` @kind direct;
  #L13b056.  v0:= v1.`kotlin.sequences.DropSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13b05a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13b060.  v0:= temp @kind object;
  #L13b062.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.sequences.DropSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/DropSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13b108.  v0:= new `java.lang.UnsupportedOperationException`;
  #L13b10c.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L13b110.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13b116.  throw v0;
}
procedure `void` `setLeft`(`kotlin.sequences.DropSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/DropSequence$iterator$1;.setLeft:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13b128.  v0.`kotlin.sequences.DropSequence$iterator$1.b` @type ^`int` := v1;
  #L13b12c.  return @kind void;
}
