record `kotlin.sequences.DistinctSequence` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface {
  `kotlin.sequences.Sequence` `kotlin.sequences.DistinctSequence.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.jvm.functions.Function1` `kotlin.sequences.DistinctSequence.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.DistinctSequence` v1 @kind this, `kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/DistinctSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L13afe0.  v0:= "source" @kind object;
  #L13afe4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13afea.  v0:= "keySelector" @kind object;
  #L13afee.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13aff4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13affa.  v1.`kotlin.sequences.DistinctSequence.a` @type ^`kotlin.sequences.Sequence` := v2 @kind object;
  #L13affe.  v1.`kotlin.sequences.DistinctSequence.b` @type ^`kotlin.jvm.functions.Function1` := v3 @kind object;
  #L13b002.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.DistinctSequence` v3 @kind this) @signature `Lkotlin/sequences/DistinctSequence;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13afb4.  v0:= new `kotlin.sequences.a`;
  #L13afb8.  v1:= v3.`kotlin.sequences.DistinctSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L13afbc.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13afc2.  v1:= temp @kind object;
  #L13afc4.  v2:= v3.`kotlin.sequences.DistinctSequence.b` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L13afc8.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/a;.<init>:(Ljava/util/Iterator;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L13afce.  return v0 @kind object;
}
