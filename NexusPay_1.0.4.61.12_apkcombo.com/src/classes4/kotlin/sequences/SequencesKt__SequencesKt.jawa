record `kotlin.sequences.SequencesKt__SequencesKt` @kind class @AccessFlag  extends `kotlin.sequences.d` @kind class {
}
procedure `void` `<init>`(`kotlin.sequences.SequencesKt__SequencesKt` v0 @kind this) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L13cd44.  call `<init>`(v0) @signature `Lkotlin/sequences/d;.<init>:()V` @kind direct;
  #L13cd4a.  return @kind void;
}
procedure `kotlin.sequences.Sequence` `a`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.a:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13cb38.  v0:= instanceof @variable v2 @type ^`kotlin.sequences.TransformingSequence` @kind boolean;
  #L13cb3c.  if v0 == 0 then goto L13cb4e;
  #L13cb40.  v2:= (`kotlin.sequences.TransformingSequence`) v2 @kind object;
  #L13cb44.  call temp:= `flatten$kotlin_stdlib`(v2, v3) @signature `Lkotlin/sequences/TransformingSequence;.flatten$kotlin_stdlib:(Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind virtual;
  #L13cb4a.  v2:= temp @kind object;
  #L13cb4c.  return v2 @kind object;
  #L13cb4e.  v0:= new `kotlin.sequences.FlatteningSequence`;
  #L13cb52.  v1:= `@@kotlin.sequences.SequencesKt__SequencesKt$d.a` @type ^`kotlin.sequences.SequencesKt__SequencesKt$d` @kind object;
  #L13cb56.  call `<init>`(v0, v2, v1, v3) @signature `Lkotlin/sequences/FlatteningSequence;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L13cb5c.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `asSequence`(`java.util.Iterator` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.asSequence:(Ljava/util/Iterator;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13ca78.  v0:= "$this$asSequence" @kind object;
  #L13ca7c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ca82.  v0:= new `kotlin.sequences.SequencesKt__SequencesKt$asSequence$$inlined$Sequence$1`;
  #L13ca86.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/SequencesKt__SequencesKt$asSequence$$inlined$Sequence$1;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L13ca8c.  call temp:= `constrainOnce`(v0) @signature `Lkotlin/sequences/SequencesKt;.constrainOnce:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L13ca92.  v1:= temp @kind object;
  #L13ca94.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `constrainOnce`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.constrainOnce:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13caa8.  v0:= "$this$constrainOnce" @kind object;
  #L13caac.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13cab2.  v0:= instanceof @variable v1 @type ^`kotlin.sequences.ConstrainedOnceSequence` @kind boolean;
  #L13cab6.  if v0 == 0 then goto L13cabc;
  #L13caba.  goto L13cac8;
  #L13cabc.  v0:= new `kotlin.sequences.ConstrainedOnceSequence`;
  #L13cac0.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/ConstrainedOnceSequence;.<init>:(Lkotlin/sequences/Sequence;)V` @kind direct;
  #L13cac6.  v1:= v0 @kind object;
  #L13cac8.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `emptySequence`() @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.emptySequence:()Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13cadc.  v0:= `@@kotlin.sequences.b.a` @type ^`kotlin.sequences.b` @kind object;
  #L13cae0.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `flatMapIndexed`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object, `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.flatMapIndexed:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13caf4.  v0:= "source" @kind object;
  #L13caf8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13cafe.  v0:= "transform" @kind object;
  #L13cb02.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13cb08.  v0:= "iterator" @kind object;
  #L13cb0c.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13cb12.  v0:= new `kotlin.sequences.SequencesKt__SequencesKt$a`;
  #L13cb16.  v1:= 0I;
  #L13cb18.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lkotlin/sequences/SequencesKt__SequencesKt$a;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L13cb1e.  call temp:= `sequence`(v0) @signature `Lkotlin/sequences/SequencesKt;.sequence:(Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L13cb24.  v2:= temp @kind object;
  #L13cb26.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `flatten`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.flatten:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13cb70.  v0:= "$this$flatten" @kind object;
  #L13cb74.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13cb7a.  v0:= `@@kotlin.sequences.SequencesKt__SequencesKt$b.a` @type ^`kotlin.sequences.SequencesKt__SequencesKt$b` @kind object;
  #L13cb7e.  call temp:= `a`(v1, v0) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.a:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L13cb84.  v1:= temp @kind object;
  #L13cb86.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `flattenSequenceOfIterable`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.flattenSequenceOfIterable:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13cb98.  v0:= "$this$flatten" @kind object;
  #L13cb9c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13cba2.  v0:= `@@kotlin.sequences.SequencesKt__SequencesKt$c.a` @type ^`kotlin.sequences.SequencesKt__SequencesKt$c` @kind object;
  #L13cba6.  call temp:= `a`(v1, v0) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.a:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L13cbac.  v1:= temp @kind object;
  #L13cbae.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `generateSequence`(`java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.generateSequence:(Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L13cbc0.  v0:= "nextFunction" @kind object;
  #L13cbc4.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13cbca.  if v2 != 0 then goto L13cbd4;
  #L13cbce.  v2:= `@@kotlin.sequences.b.a` @type ^`kotlin.sequences.b` @kind object;
  #L13cbd2.  goto L13cbea;
  #L13cbd4.  v0:= new `kotlin.sequences.GeneratorSequence`;
  #L13cbd8.  v1:= new `kotlin.sequences.SequencesKt__SequencesKt$f`;
  #L13cbdc.  call `<init>`(v1, v2) @signature `Lkotlin/sequences/SequencesKt__SequencesKt$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L13cbe2.  call `<init>`(v0, v1, v3) @signature `Lkotlin/sequences/GeneratorSequence;.<init>:(Lkotlin/jvm/functions/Function0;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L13cbe8.  v2:= v0 @kind object;
  #L13cbea.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `generateSequence`(`kotlin.jvm.functions.Function0` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.generateSequence:(Lkotlin/jvm/functions/Function0;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13cbfc.  v0:= "nextFunction" @kind object;
  #L13cc00.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13cc06.  v0:= new `kotlin.sequences.GeneratorSequence`;
  #L13cc0a.  v1:= new `kotlin.sequences.SequencesKt__SequencesKt$e`;
  #L13cc0e.  call `<init>`(v1, v2) @signature `Lkotlin/sequences/SequencesKt__SequencesKt$e;.<init>:(Lkotlin/jvm/functions/Function0;)V` @kind direct;
  #L13cc14.  call `<init>`(v0, v2, v1) @signature `Lkotlin/sequences/GeneratorSequence;.<init>:(Lkotlin/jvm/functions/Function0;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L13cc1a.  call temp:= `constrainOnce`(v0) @signature `Lkotlin/sequences/SequencesKt;.constrainOnce:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L13cc20.  v2:= temp @kind object;
  #L13cc22.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `generateSequence`(`kotlin.jvm.functions.Function0` v1 @kind object, `kotlin.jvm.functions.Function1` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.generateSequence:(Lkotlin/jvm/functions/Function0;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13cc34.  v0:= "seedFunction" @kind object;
  #L13cc38.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13cc3e.  v0:= "nextFunction" @kind object;
  #L13cc42.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13cc48.  v0:= new `kotlin.sequences.GeneratorSequence`;
  #L13cc4c.  call `<init>`(v0, v1, v2) @signature `Lkotlin/sequences/GeneratorSequence;.<init>:(Lkotlin/jvm/functions/Function0;Lkotlin/jvm/functions/Function1;)V` @kind direct;
  #L13cc52.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `ifEmpty`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.jvm.functions.Function0` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.ifEmpty:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function0;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13cc64.  v0:= "$this$ifEmpty" @kind object;
  #L13cc68.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13cc6e.  v0:= "defaultValue" @kind object;
  #L13cc72.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13cc78.  v0:= new `kotlin.sequences.SequencesKt__SequencesKt$g`;
  #L13cc7c.  v1:= 0I;
  #L13cc7e.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlin/sequences/SequencesKt__SequencesKt$g;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function0;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L13cc84.  call temp:= `sequence`(v0) @signature `Lkotlin/sequences/SequencesKt;.sequence:(Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L13cc8a.  v2:= temp @kind object;
  #L13cc8c.  return v2 @kind object;
}
procedure `kotlin.sequences.Sequence` `sequenceOf`(`java.lang.Object`[] v1 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.sequenceOf:([Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13cca0.  v0:= "elements" @kind object;
  #L13cca4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ccaa.  v0:= length @variable v1;
  #L13ccac.  if v0 != 0 then goto L13ccb4;
  #L13ccb0.  v0:= 1I;
  #L13ccb2.  goto L13ccb6;
  #L13ccb4.  v0:= 0I;
  #L13ccb6.  if v0 == 0 then goto L13ccc4;
  #L13ccba.  call temp:= `emptySequence`() @signature `Lkotlin/sequences/SequencesKt;.emptySequence:()Lkotlin/sequences/Sequence;` @kind static;
  #L13ccc0.  v1:= temp @kind object;
  #L13ccc2.  goto L13cccc;
  #L13ccc4.  call temp:= `asSequence`(v1) @signature `Lkotlin/collections/ArraysKt;.asSequence:([Ljava/lang/Object;)Lkotlin/sequences/Sequence;` @kind static;
  #L13ccca.  v1:= temp @kind object;
  #L13cccc.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `shuffled`(`kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.shuffled:(Lkotlin/sequences/Sequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13cce0.  v0:= "$this$shuffled" @kind object;
  #L13cce4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ccea.  v0:= `@@kotlin.random.Random.Default` @type ^`kotlin.random.Random$Default` @kind object;
  #L13ccee.  call temp:= `shuffled`(v1, v0) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.shuffled:(Lkotlin/sequences/Sequence;Lkotlin/random/Random;)Lkotlin/sequences/Sequence;` @kind static;
  #L13ccf4.  v1:= temp @kind object;
  #L13ccf6.  return v1 @kind object;
}
procedure `kotlin.sequences.Sequence` `shuffled`(`kotlin.sequences.Sequence` v2 @kind object, `kotlin.random.Random` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.shuffled:(Lkotlin/sequences/Sequence;Lkotlin/random/Random;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L13cd08.  v0:= "$this$shuffled" @kind object;
  #L13cd0c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13cd12.  v0:= "random" @kind object;
  #L13cd16.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13cd1c.  v0:= new `kotlin.sequences.SequencesKt__SequencesKt$h`;
  #L13cd20.  v1:= 0I;
  #L13cd22.  call `<init>`(v0, v2, v3, v1) @signature `Lkotlin/sequences/SequencesKt__SequencesKt$h;.<init>:(Lkotlin/sequences/Sequence;Lkotlin/random/Random;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L13cd28.  call temp:= `sequence`(v0) @signature `Lkotlin/sequences/SequencesKt;.sequence:(Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L13cd2e.  v2:= temp @kind object;
  #L13cd30.  return v2 @kind object;
}
procedure `kotlin.Pair` `unzip`(`kotlin.sequences.Sequence` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt__SequencesKt;.unzip:(Lkotlin/sequences/Sequence;)Lkotlin/Pair;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13ca00.  v0:= "$this$unzip" @kind object;
  #L13ca04.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13ca0a.  v0:= new `java.util.ArrayList`;
  #L13ca0e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L13ca14.  v1:= new `java.util.ArrayList`;
  #L13ca18.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L13ca1e.  call temp:= `iterator`(v4) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13ca24.  v4:= temp @kind object;
  #L13ca26.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13ca2c.  v2:= temp;
  #L13ca2e.  if v2 == 0 then goto L13ca5c;
  #L13ca32.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13ca38.  v2:= temp @kind object;
  #L13ca3a.  v2:= (`kotlin.Pair`) v2 @kind object;
  #L13ca3e.  call temp:= `getFirst`(v2) @signature `Lkotlin/Pair;.getFirst:()Ljava/lang/Object;` @kind virtual;
  #L13ca44.  v3:= temp @kind object;
  #L13ca46.  call temp:= `add`(v0, v3) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L13ca4c.  call temp:= `getSecond`(v2) @signature `Lkotlin/Pair;.getSecond:()Ljava/lang/Object;` @kind virtual;
  #L13ca52.  v2:= temp @kind object;
  #L13ca54.  call temp:= `add`(v1, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L13ca5a.  goto L13ca26;
  #L13ca5c.  call temp:= `to`(v0, v1) @signature `Lkotlin/TuplesKt;.to:(Ljava/lang/Object;Ljava/lang/Object;)Lkotlin/Pair;` @kind static;
  #L13ca62.  v4:= temp @kind object;
  #L13ca64.  return v4 @kind object;
}
