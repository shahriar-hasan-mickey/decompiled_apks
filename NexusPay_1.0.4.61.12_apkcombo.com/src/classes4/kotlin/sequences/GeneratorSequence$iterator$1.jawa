record `kotlin.sequences.GeneratorSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.lang.Object` `kotlin.sequences.GeneratorSequence$iterator$1.a` @AccessFlag PRIVATE;
  `int` `kotlin.sequences.GeneratorSequence$iterator$1.b` @AccessFlag PRIVATE;
  `kotlin.sequences.GeneratorSequence` `kotlin.sequences.GeneratorSequence$iterator$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.GeneratorSequence$iterator$1` v0 @kind this, `kotlin.sequences.GeneratorSequence` v1 @kind object) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.<init>:(Lkotlin/sequences/GeneratorSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L13bac8.  v0.`kotlin.sequences.GeneratorSequence$iterator$1.c` @type ^`kotlin.sequences.GeneratorSequence` := v1 @kind object;
  #L13bacc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13bad2.  v1:= -2I;
  #L13bad4.  v0.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int` := v1;
  #L13bad8.  return @kind void;
}
procedure `void` `b`(`kotlin.sequences.GeneratorSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L13baec.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int`;
  #L13baf0.  v1:= -2I;
  #L13baf2.  if v0 != v1 then goto L13bb0c;
  #L13baf6.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.c` @type ^`kotlin.sequences.GeneratorSequence` @kind object;
  #L13bafa.  call temp:= `a`(v0) @signature `Lkotlin/sequences/GeneratorSequence;.a:(Lkotlin/sequences/GeneratorSequence;)Lkotlin/jvm/functions/Function0;` @kind static;
  #L13bb00.  v0:= temp @kind object;
  #L13bb02.  call temp:= `invoke`(v0) @signature `Lkotlin/jvm/functions/Function0;.invoke:()Ljava/lang/Object;` @kind interface;
  #L13bb08.  v0:= temp @kind object;
  #L13bb0a.  goto L13bb2a;
  #L13bb0c.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.c` @type ^`kotlin.sequences.GeneratorSequence` @kind object;
  #L13bb10.  call temp:= `b`(v0) @signature `Lkotlin/sequences/GeneratorSequence;.b:(Lkotlin/sequences/GeneratorSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L13bb16.  v0:= temp @kind object;
  #L13bb18.  v1:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.a` @type ^`java.lang.Object` @kind object;
  #L13bb1c.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L13bb22.  call temp:= `invoke`(v0, v1) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13bb28.  v0:= temp @kind object;
  #L13bb2a.  v2.`kotlin.sequences.GeneratorSequence$iterator$1.a` @type ^`java.lang.Object` := v0 @kind object;
  #L13bb2e.  if v0 != 0 then goto L13bb36;
  #L13bb32.  v0:= 0I;
  #L13bb34.  goto L13bb38;
  #L13bb36.  v0:= 1I;
  #L13bb38.  v2.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int` := v0;
  #L13bb3c.  return @kind void;
}
procedure `java.lang.Object` `getNextItem`(`kotlin.sequences.GeneratorSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.getNextItem:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13ba5c.  v0:= v1.`kotlin.sequences.GeneratorSequence$iterator$1.a` @type ^`java.lang.Object` @kind object;
  #L13ba60.  return v0 @kind object;
}
procedure `int` `getNextState`(`kotlin.sequences.GeneratorSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.getNextState:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13ba44.  v0:= v1.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int`;
  #L13ba48.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.sequences.GeneratorSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13ba14.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int`;
  #L13ba18.  if v0 >= 0 then goto L13ba22;
  #L13ba1c.  call `b`(v2) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.b:()V` @kind direct;
  #L13ba22.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int`;
  #L13ba26.  v1:= 1I;
  #L13ba28.  if v0 != v1 then goto L13ba2e;
  #L13ba2c.  goto L13ba30;
  #L13ba2e.  v1:= 0I;
  #L13ba30.  return v1;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.GeneratorSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13ba74.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int`;
  #L13ba78.  if v0 >= 0 then goto L13ba82;
  #L13ba7c.  call `b`(v2) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.b:()V` @kind direct;
  #L13ba82.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int`;
  #L13ba86.  if v0 == 0 then goto L13baaa;
  #L13ba8a.  v0:= v2.`kotlin.sequences.GeneratorSequence$iterator$1.a` @type ^`java.lang.Object` @kind object;
  #L13ba8e.  if v0 == 0 then goto L13ba9a;
  #L13ba92.  v1:= -1I;
  #L13ba94.  v2.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int` := v1;
  #L13ba98.  return v0 @kind object;
  #L13ba9a.  v0:= new `java.lang.NullPointerException`;
  #L13ba9e.  v1:= "null cannot be cast to non-null type T" @kind object;
  #L13baa2.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13baa8.  throw v0;
  #L13baaa.  v0:= new `java.util.NoSuchElementException`;
  #L13baae.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L13bab4.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.GeneratorSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13bb50.  v0:= new `java.lang.UnsupportedOperationException`;
  #L13bb54.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L13bb58.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13bb5e.  throw v0;
}
procedure `void` `setNextItem`(`kotlin.sequences.GeneratorSequence$iterator$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.setNextItem:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13bb70.  v0.`kotlin.sequences.GeneratorSequence$iterator$1.a` @type ^`java.lang.Object` := v1 @kind object;
  #L13bb74.  return @kind void;
}
procedure `void` `setNextState`(`kotlin.sequences.GeneratorSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/GeneratorSequence$iterator$1;.setNextState:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13bb88.  v0.`kotlin.sequences.GeneratorSequence$iterator$1.b` @type ^`int` := v1;
  #L13bb8c.  return @kind void;
}
