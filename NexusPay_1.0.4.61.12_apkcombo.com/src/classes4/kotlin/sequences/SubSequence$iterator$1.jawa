record `kotlin.sequences.SubSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.SubSequence$iterator$1.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.SubSequence$iterator$1.b` @AccessFlag PRIVATE;
  `kotlin.sequences.SubSequence` `kotlin.sequences.SubSequence$iterator$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.SubSequence$iterator$1` v0 @kind this, `kotlin.sequences.SubSequence` v1 @kind object) @signature `Lkotlin/sequences/SubSequence$iterator$1;.<init>:(Lkotlin/sequences/SubSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L14197c.  v0.`kotlin.sequences.SubSequence$iterator$1.c` @type ^`kotlin.sequences.SubSequence` := v1 @kind object;
  #L141980.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L141986.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/SubSequence;.access$getSequence$p:(Lkotlin/sequences/SubSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L14198c.  v1:= temp @kind object;
  #L14198e.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L141994.  v1:= temp @kind object;
  #L141996.  v0.`kotlin.sequences.SubSequence$iterator$1.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L14199a.  return @kind void;
}
procedure `void` `b`(`kotlin.sequences.SubSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1419ac.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int`;
  #L1419b0.  v1:= v2.`kotlin.sequences.SubSequence$iterator$1.c` @type ^`kotlin.sequences.SubSequence` @kind object;
  #L1419b4.  call temp:= `access$getStartIndex$p`(v1) @signature `Lkotlin/sequences/SubSequence;.access$getStartIndex$p:(Lkotlin/sequences/SubSequence;)I` @kind static;
  #L1419ba.  v1:= temp;
  #L1419bc.  if v0 >= v1 then goto L1419e8;
  #L1419c0.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L1419c4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1419ca.  v0:= temp;
  #L1419cc.  if v0 == 0 then goto L1419e8;
  #L1419d0.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L1419d4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1419da.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int`;
  #L1419de.  v0:= v0 + 1;
  #L1419e2.  v2.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int` := v0;
  #L1419e6.  goto L1419ac;
  #L1419e8.  return @kind void;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.SubSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L141964.  v0:= v1.`kotlin.sequences.SubSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L141968.  return v0 @kind object;
}
procedure `int` `getPosition`(`kotlin.sequences.SubSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.getPosition:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1418fc.  v0:= v1.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int`;
  #L141900.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.sequences.SubSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1418b8.  call `b`(v2) @signature `Lkotlin/sequences/SubSequence$iterator$1;.b:()V` @kind direct;
  #L1418be.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int`;
  #L1418c2.  v1:= v2.`kotlin.sequences.SubSequence$iterator$1.c` @type ^`kotlin.sequences.SubSequence` @kind object;
  #L1418c6.  call temp:= `access$getEndIndex$p`(v1) @signature `Lkotlin/sequences/SubSequence;.access$getEndIndex$p:(Lkotlin/sequences/SubSequence;)I` @kind static;
  #L1418cc.  v1:= temp;
  #L1418ce.  if v0 >= v1 then goto L1418e6;
  #L1418d2.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L1418d6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1418dc.  v0:= temp;
  #L1418de.  if v0 == 0 then goto L1418e6;
  #L1418e2.  v0:= 1I;
  #L1418e4.  goto L1418e8;
  #L1418e6.  v0:= 0I;
  #L1418e8.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.SubSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L141914.  call `b`(v2) @signature `Lkotlin/sequences/SubSequence$iterator$1;.b:()V` @kind direct;
  #L14191a.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int`;
  #L14191e.  v1:= v2.`kotlin.sequences.SubSequence$iterator$1.c` @type ^`kotlin.sequences.SubSequence` @kind object;
  #L141922.  call temp:= `access$getEndIndex$p`(v1) @signature `Lkotlin/sequences/SubSequence;.access$getEndIndex$p:(Lkotlin/sequences/SubSequence;)I` @kind static;
  #L141928.  v1:= temp;
  #L14192a.  if v0 >= v1 then goto L141948;
  #L14192e.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int`;
  #L141932.  v0:= v0 + 1;
  #L141936.  v2.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int` := v0;
  #L14193a.  v0:= v2.`kotlin.sequences.SubSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L14193e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L141944.  v0:= temp @kind object;
  #L141946.  return v0 @kind object;
  #L141948.  v0:= new `java.util.NoSuchElementException`;
  #L14194c.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L141952.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.SubSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/SubSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1419fc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L141a00.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L141a04.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L141a0a.  throw v0;
}
procedure `void` `setPosition`(`kotlin.sequences.SubSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/SubSequence$iterator$1;.setPosition:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L141a1c.  v0.`kotlin.sequences.SubSequence$iterator$1.b` @type ^`int` := v1;
  #L141a20.  return @kind void;
}
