record `kotlin.sequences.DropSequence` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface, `kotlin.sequences.DropTakeSequence` @kind interface {
  `kotlin.sequences.Sequence` `kotlin.sequences.DropSequence.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.DropSequence.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.DropSequence` v1 @kind this, `kotlin.sequences.Sequence` v2 @kind object, `int` v3 ) @signature `Lkotlin/sequences/DropSequence;.<init>:(Lkotlin/sequences/Sequence;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L13b200.  v0:= "sequence" @kind object;
  #L13b204.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13b20a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13b210.  v1.`kotlin.sequences.DropSequence.a` @type ^`kotlin.sequences.Sequence` := v2 @kind object;
  #L13b214.  v1.`kotlin.sequences.DropSequence.b` @type ^`int` := v3;
  #L13b218.  if v3 < 0 then goto L13b220;
  #L13b21c.  v2:= 1I;
  #L13b21e.  goto L13b222;
  #L13b220.  v2:= 0I;
  #L13b222.  if v2 == 0 then goto L13b228;
  #L13b226.  return @kind void;
  #L13b228.  v2:= new `java.lang.StringBuilder`;
  #L13b22c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13b232.  v3:= "count must be non-negative, but was " @kind object;
  #L13b236.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13b23c.  v3:= v1.`kotlin.sequences.DropSequence.b` @type ^`int`;
  #L13b240.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L13b246.  v3:= 46I;
  #L13b24a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13b250.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13b256.  v2:= temp @kind object;
  #L13b258.  v3:= new `java.lang.IllegalArgumentException`;
  #L13b25c.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L13b262.  v2:= temp @kind object;
  #L13b264.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13b26a.  throw v3;
}
procedure `int` `access$getCount$p`(`kotlin.sequences.DropSequence` v0 @kind object) @signature `Lkotlin/sequences/DropSequence;.access$getCount$p:(Lkotlin/sequences/DropSequence;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L13b140.  v0:= v0.`kotlin.sequences.DropSequence.b` @type ^`int`;
  #L13b144.  return v0;
}
procedure `kotlin.sequences.Sequence` `access$getSequence$p`(`kotlin.sequences.DropSequence` v0 @kind object) @signature `Lkotlin/sequences/DropSequence;.access$getSequence$p:(Lkotlin/sequences/DropSequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L13b174.  v0:= v0.`kotlin.sequences.DropSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L13b178.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `drop`(`kotlin.sequences.DropSequence` v2 @kind this, `int` v3 ) @signature `Lkotlin/sequences/DropSequence;.drop:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13b18c.  v0:= v2.`kotlin.sequences.DropSequence.b` @type ^`int`;
  #L13b190.  v0:= v0 + v3 @kind int;
  #L13b192.  if v0 >= 0 then goto L13b1a2;
  #L13b196.  v0:= new `kotlin.sequences.DropSequence`;
  #L13b19a.  call `<init>`(v0, v2, v3) @signature `Lkotlin/sequences/DropSequence;.<init>:(Lkotlin/sequences/Sequence;I)V` @kind direct;
  #L13b1a0.  goto L13b1b2;
  #L13b1a2.  v3:= new `kotlin.sequences.DropSequence`;
  #L13b1a6.  v1:= v2.`kotlin.sequences.DropSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L13b1aa.  call `<init>`(v3, v1, v0) @signature `Lkotlin/sequences/DropSequence;.<init>:(Lkotlin/sequences/Sequence;I)V` @kind direct;
  #L13b1b0.  v0:= v3 @kind object;
  #L13b1b2.  return v0 @kind object;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.DropSequence` v1 @kind this) @signature `Lkotlin/sequences/DropSequence;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13b158.  v0:= new `kotlin.sequences.DropSequence$iterator$1`;
  #L13b15c.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/DropSequence$iterator$1;.<init>:(Lkotlin/sequences/DropSequence;)V` @kind direct;
  #L13b162.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `take`(`kotlin.sequences.DropSequence` v3 @kind this, `int` v4 ) @signature `Lkotlin/sequences/DropSequence;.take:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13b1c4.  v0:= v3.`kotlin.sequences.DropSequence.b` @type ^`int`;
  #L13b1c8.  v1:= v0 + v4 @kind int;
  #L13b1cc.  if v1 >= 0 then goto L13b1dc;
  #L13b1d0.  v0:= new `kotlin.sequences.TakeSequence`;
  #L13b1d4.  call `<init>`(v0, v3, v4) @signature `Lkotlin/sequences/TakeSequence;.<init>:(Lkotlin/sequences/Sequence;I)V` @kind direct;
  #L13b1da.  goto L13b1ec;
  #L13b1dc.  v4:= new `kotlin.sequences.SubSequence`;
  #L13b1e0.  v2:= v3.`kotlin.sequences.DropSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L13b1e4.  call `<init>`(v4, v2, v0, v1) @signature `Lkotlin/sequences/SubSequence;.<init>:(Lkotlin/sequences/Sequence;II)V` @kind direct;
  #L13b1ea.  v0:= v4 @kind object;
  #L13b1ec.  return v0 @kind object;
}
