record `kotlin.sequences.SequencesKt___SequencesKt$minus$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface {
  `kotlin.sequences.Sequence` `kotlin.sequences.SequencesKt___SequencesKt$minus$1.a` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$minus$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.SequencesKt___SequencesKt$minus$1` v0 @kind this, `kotlin.sequences.Sequence` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$minus$1;.<init>:(Lkotlin/sequences/Sequence;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L13d590.  v0.`kotlin.sequences.SequencesKt___SequencesKt$minus$1.a` @type ^`kotlin.sequences.Sequence` := v1 @kind object;
  #L13d594.  v0.`kotlin.sequences.SequencesKt___SequencesKt$minus$1.b` @type ^`java.lang.Object` := v2 @kind object;
  #L13d598.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13d59e.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.SequencesKt___SequencesKt$minus$1` v3 @kind this) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$minus$1;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13d550.  v0:= new `kotlin.jvm.internal.Ref$BooleanRef`;
  #L13d554.  call `<init>`(v0) @signature `Lkotlin/jvm/internal/Ref$BooleanRef;.<init>:()V` @kind direct;
  #L13d55a.  v1:= 0I;
  #L13d55c.  v0.`kotlin.jvm.internal.Ref$BooleanRef.element` @type ^`boolean` := v1 @kind boolean;
  #L13d560.  v1:= v3.`kotlin.sequences.SequencesKt___SequencesKt$minus$1.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L13d564.  v2:= new `kotlin.sequences.SequencesKt___SequencesKt$minus$1$a`;
  #L13d568.  call `<init>`(v2, v3, v0) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$minus$1$a;.<init>:(Lkotlin/sequences/SequencesKt___SequencesKt$minus$1;Lkotlin/jvm/internal/Ref$BooleanRef;)V` @kind direct;
  #L13d56e.  call temp:= `filter`(v1, v2) @signature `Lkotlin/sequences/SequencesKt;.filter:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L13d574.  v0:= temp @kind object;
  #L13d576.  call temp:= `iterator`(v0) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13d57c.  v0:= temp @kind object;
  #L13d57e.  return v0 @kind object;
}
