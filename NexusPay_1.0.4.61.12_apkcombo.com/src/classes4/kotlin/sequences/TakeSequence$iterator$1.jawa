record `kotlin.sequences.TakeSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int` `kotlin.sequences.TakeSequence$iterator$1.a` @AccessFlag PRIVATE;
  `java.util.Iterator` `kotlin.sequences.TakeSequence$iterator$1.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.TakeSequence$iterator$1` v1 @kind this, `kotlin.sequences.TakeSequence` v2 @kind object) @signature `Lkotlin/sequences/TakeSequence$iterator$1;.<init>:(Lkotlin/sequences/TakeSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L141cf4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L141cfa.  call temp:= `access$getCount$p`(v2) @signature `Lkotlin/sequences/TakeSequence;.access$getCount$p:(Lkotlin/sequences/TakeSequence;)I` @kind static;
  #L141d00.  v0:= temp;
  #L141d02.  v1.`kotlin.sequences.TakeSequence$iterator$1.a` @type ^`int` := v0;
  #L141d06.  call temp:= `access$getSequence$p`(v2) @signature `Lkotlin/sequences/TakeSequence;.access$getSequence$p:(Lkotlin/sequences/TakeSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L141d0c.  v2:= temp @kind object;
  #L141d0e.  call temp:= `iterator`(v2) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L141d14.  v2:= temp @kind object;
  #L141d16.  v1.`kotlin.sequences.TakeSequence$iterator$1.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L141d1a.  return @kind void;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.TakeSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L141cdc.  v0:= v1.`kotlin.sequences.TakeSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L141ce0.  return v0 @kind object;
}
procedure `int` `getLeft`(`kotlin.sequences.TakeSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeSequence$iterator$1;.getLeft:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L141c88.  v0:= v1.`kotlin.sequences.TakeSequence$iterator$1.a` @type ^`int`;
  #L141c8c.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.sequences.TakeSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L141c58.  v0:= v1.`kotlin.sequences.TakeSequence$iterator$1.a` @type ^`int`;
  #L141c5c.  if v0 <= 0 then goto L141c74;
  #L141c60.  v0:= v1.`kotlin.sequences.TakeSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L141c64.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L141c6a.  v0:= temp;
  #L141c6c.  if v0 == 0 then goto L141c74;
  #L141c70.  v0:= 1I;
  #L141c72.  goto L141c76;
  #L141c74.  v0:= 0I;
  #L141c76.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.TakeSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/TakeSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L141ca0.  v0:= v1.`kotlin.sequences.TakeSequence$iterator$1.a` @type ^`int`;
  #L141ca4.  if v0 == 0 then goto L141cbe;
  #L141ca8.  v0:= v0 + -1;
  #L141cac.  v1.`kotlin.sequences.TakeSequence$iterator$1.a` @type ^`int` := v0;
  #L141cb0.  v0:= v1.`kotlin.sequences.TakeSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L141cb4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L141cba.  v0:= temp @kind object;
  #L141cbc.  return v0 @kind object;
  #L141cbe.  v0:= new `java.util.NoSuchElementException`;
  #L141cc2.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L141cc8.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.TakeSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/TakeSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L141d2c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L141d30.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L141d34.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L141d3a.  throw v0;
}
procedure `void` `setLeft`(`kotlin.sequences.TakeSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/TakeSequence$iterator$1;.setLeft:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L141d4c.  v0.`kotlin.sequences.TakeSequence$iterator$1.a` @type ^`int` := v1;
  #L141d50.  return @kind void;
}
