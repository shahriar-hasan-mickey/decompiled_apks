record `kotlin.sequences.FilteringSequence` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface {
  `kotlin.sequences.Sequence` `kotlin.sequences.FilteringSequence.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.sequences.FilteringSequence.b` @AccessFlag PRIVATE_FINAL;
  `kotlin.jvm.functions.Function1` `kotlin.sequences.FilteringSequence.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.FilteringSequence` v1 @kind this, `kotlin.sequences.Sequence` v2 @kind object, `boolean` v3 , `kotlin.jvm.functions.Function1` v4 @kind object) @signature `Lkotlin/sequences/FilteringSequence;.<init>:(Lkotlin/sequences/Sequence;ZLkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L13b78c.  v0:= "sequence" @kind object;
  #L13b790.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13b796.  v0:= "predicate" @kind object;
  #L13b79a.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13b7a0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13b7a6.  v1.`kotlin.sequences.FilteringSequence.a` @type ^`kotlin.sequences.Sequence` := v2 @kind object;
  #L13b7aa.  v1.`kotlin.sequences.FilteringSequence.b` @type ^`boolean` := v3 @kind boolean;
  #L13b7ae.  v1.`kotlin.sequences.FilteringSequence.c` @type ^`kotlin.jvm.functions.Function1` := v4 @kind object;
  #L13b7b2.  return @kind void;
}
procedure `void` `<init>`(`kotlin.sequences.FilteringSequence` v0 @kind this, `kotlin.sequences.Sequence` v1 @kind object, `boolean` v2 , `kotlin.jvm.functions.Function1` v3 @kind object, `int` v4 , `kotlin.jvm.internal.DefaultConstructorMarker` v5 @kind object) @signature `Lkotlin/sequences/FilteringSequence;.<init>:(Lkotlin/sequences/Sequence;ZLkotlin/jvm/functions/Function1;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L13b7c4.  v4:= v4 ^& 2;
  #L13b7c8.  if v4 == 0 then goto L13b7ce;
  #L13b7cc.  v2:= 1I;
  #L13b7ce.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/sequences/FilteringSequence;.<init>:(Lkotlin/sequences/Sequence;ZLkotlin/jvm/functions/Function1;)V` @kind direct;
  #L13b7d4.  return @kind void;
}
procedure `kotlin.jvm.functions.Function1` `access$getPredicate$p`(`kotlin.sequences.FilteringSequence` v0 @kind object) @signature `Lkotlin/sequences/FilteringSequence;.access$getPredicate$p:(Lkotlin/sequences/FilteringSequence;)Lkotlin/jvm/functions/Function1;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L13b75c.  v0:= v0.`kotlin.sequences.FilteringSequence.c` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L13b760.  return v0 @kind object;
}
procedure `boolean` `access$getSendWhen$p`(`kotlin.sequences.FilteringSequence` v0 @kind object) @signature `Lkotlin/sequences/FilteringSequence;.access$getSendWhen$p:(Lkotlin/sequences/FilteringSequence;)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L13b728.  v0:= v0.`kotlin.sequences.FilteringSequence.b` @type ^`boolean` @kind boolean;
  #L13b72c.  return v0;
}
procedure `kotlin.sequences.Sequence` `access$getSequence$p`(`kotlin.sequences.FilteringSequence` v0 @kind object) @signature `Lkotlin/sequences/FilteringSequence;.access$getSequence$p:(Lkotlin/sequences/FilteringSequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L13b774.  v0:= v0.`kotlin.sequences.FilteringSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L13b778.  return v0 @kind object;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.FilteringSequence` v1 @kind this) @signature `Lkotlin/sequences/FilteringSequence;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13b740.  v0:= new `kotlin.sequences.FilteringSequence$iterator$1`;
  #L13b744.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.<init>:(Lkotlin/sequences/FilteringSequence;)V` @kind direct;
  #L13b74a.  return v0 @kind object;
}
