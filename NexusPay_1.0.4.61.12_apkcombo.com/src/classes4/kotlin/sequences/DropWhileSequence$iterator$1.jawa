record `kotlin.sequences.DropWhileSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.DropWhileSequence$iterator$1.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.DropWhileSequence$iterator$1.b` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlin.sequences.DropWhileSequence$iterator$1.c` @AccessFlag PRIVATE;
  `kotlin.sequences.DropWhileSequence` `kotlin.sequences.DropWhileSequence$iterator$1.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.DropWhileSequence$iterator$1` v0 @kind this, `kotlin.sequences.DropWhileSequence` v1 @kind object) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.<init>:(Lkotlin/sequences/DropWhileSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L13b350.  v0.`kotlin.sequences.DropWhileSequence$iterator$1.d` @type ^`kotlin.sequences.DropWhileSequence` := v1 @kind object;
  #L13b354.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13b35a.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/DropWhileSequence;.access$getSequence$p:(Lkotlin/sequences/DropWhileSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L13b360.  v1:= temp @kind object;
  #L13b362.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13b368.  v1:= temp @kind object;
  #L13b36a.  v0.`kotlin.sequences.DropWhileSequence$iterator$1.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L13b36e.  v1:= -1I;
  #L13b370.  v0.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int` := v1;
  #L13b374.  return @kind void;
}
procedure `void` `b`(`kotlin.sequences.DropWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L13b388.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13b38c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13b392.  v0:= temp;
  #L13b394.  if v0 == 0 then goto L13b3d4;
  #L13b398.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13b39c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13b3a2.  v0:= temp @kind object;
  #L13b3a4.  v1:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.d` @type ^`kotlin.sequences.DropWhileSequence` @kind object;
  #L13b3a8.  call temp:= `access$getPredicate$p`(v1) @signature `Lkotlin/sequences/DropWhileSequence;.access$getPredicate$p:(Lkotlin/sequences/DropWhileSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L13b3ae.  v1:= temp @kind object;
  #L13b3b0.  call temp:= `invoke`(v1, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13b3b6.  v1:= temp @kind object;
  #L13b3b8.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L13b3bc.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13b3c2.  v1:= temp;
  #L13b3c4.  if v1 != 0 then goto L13b388;
  #L13b3c8.  v2.`kotlin.sequences.DropWhileSequence$iterator$1.c` @type ^`java.lang.Object` := v0 @kind object;
  #L13b3cc.  v0:= 1I;
  #L13b3ce.  v2.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int` := v0;
  #L13b3d2.  return @kind void;
  #L13b3d4.  v0:= 0I;
  #L13b3d6.  v2.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int` := v0;
  #L13b3da.  return @kind void;
}
procedure `int` `getDropState`(`kotlin.sequences.DropWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.getDropState:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13b2bc.  v0:= v1.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int`;
  #L13b2c0.  return v0;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.DropWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13b338.  v0:= v1.`kotlin.sequences.DropWhileSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13b33c.  return v0 @kind object;
}
procedure `java.lang.Object` `getNextItem`(`kotlin.sequences.DropWhileSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.getNextItem:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13b2d4.  v0:= v1.`kotlin.sequences.DropWhileSequence$iterator$1.c` @type ^`java.lang.Object` @kind object;
  #L13b2d8.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.DropWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13b27c.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int`;
  #L13b280.  v1:= -1I;
  #L13b282.  if v0 != v1 then goto L13b28c;
  #L13b286.  call `b`(v2) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.b:()V` @kind direct;
  #L13b28c.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int`;
  #L13b290.  v1:= 1I;
  #L13b292.  if v0 == v1 then goto L13b2aa;
  #L13b296.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13b29a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13b2a0.  v0:= temp;
  #L13b2a2.  if v0 == 0 then goto L13b2a8;
  #L13b2a6.  goto L13b2aa;
  #L13b2a8.  v1:= 0I;
  #L13b2aa.  return v1;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.DropWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13b2ec.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int`;
  #L13b2f0.  v1:= -1I;
  #L13b2f2.  if v0 != v1 then goto L13b2fc;
  #L13b2f6.  call `b`(v2) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.b:()V` @kind direct;
  #L13b2fc.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int`;
  #L13b300.  v1:= 1I;
  #L13b302.  if v0 != v1 then goto L13b318;
  #L13b306.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.c` @type ^`java.lang.Object` @kind object;
  #L13b30a.  v1:= 0I;
  #L13b30c.  v2.`kotlin.sequences.DropWhileSequence$iterator$1.c` @type ^`java.lang.Object` := v1 @kind object;
  #L13b310.  v1:= 0I;
  #L13b312.  v2.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int` := v1;
  #L13b316.  return v0 @kind object;
  #L13b318.  v0:= v2.`kotlin.sequences.DropWhileSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13b31c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13b322.  v0:= temp @kind object;
  #L13b324.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.sequences.DropWhileSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13b3ec.  v0:= new `java.lang.UnsupportedOperationException`;
  #L13b3f0.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L13b3f4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13b3fa.  throw v0;
}
procedure `void` `setDropState`(`kotlin.sequences.DropWhileSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.setDropState:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13b40c.  v0.`kotlin.sequences.DropWhileSequence$iterator$1.b` @type ^`int` := v1;
  #L13b410.  return @kind void;
}
procedure `void` `setNextItem`(`kotlin.sequences.DropWhileSequence$iterator$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/DropWhileSequence$iterator$1;.setNextItem:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13b424.  v0.`kotlin.sequences.DropWhileSequence$iterator$1.c` @type ^`java.lang.Object` := v1 @kind object;
  #L13b428.  return @kind void;
}
