record `kotlin.sequences.FilteringSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.FilteringSequence$iterator$1.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.FilteringSequence$iterator$1.b` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlin.sequences.FilteringSequence$iterator$1.c` @AccessFlag PRIVATE;
  `kotlin.sequences.FilteringSequence` `kotlin.sequences.FilteringSequence$iterator$1.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.FilteringSequence$iterator$1` v0 @kind this, `kotlin.sequences.FilteringSequence` v1 @kind object) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.<init>:(Lkotlin/sequences/FilteringSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L13b630.  v0.`kotlin.sequences.FilteringSequence$iterator$1.d` @type ^`kotlin.sequences.FilteringSequence` := v1 @kind object;
  #L13b634.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13b63a.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/FilteringSequence;.access$getSequence$p:(Lkotlin/sequences/FilteringSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L13b640.  v1:= temp @kind object;
  #L13b642.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13b648.  v1:= temp @kind object;
  #L13b64a.  v0.`kotlin.sequences.FilteringSequence$iterator$1.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L13b64e.  v1:= -1I;
  #L13b650.  v0.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int` := v1;
  #L13b654.  return @kind void;
}
procedure `void` `b`(`kotlin.sequences.FilteringSequence$iterator$1` v3 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L13b668.  v0:= v3.`kotlin.sequences.FilteringSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13b66c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13b672.  v0:= temp;
  #L13b674.  if v0 == 0 then goto L13b6c0;
  #L13b678.  v0:= v3.`kotlin.sequences.FilteringSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13b67c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13b682.  v0:= temp @kind object;
  #L13b684.  v1:= v3.`kotlin.sequences.FilteringSequence$iterator$1.d` @type ^`kotlin.sequences.FilteringSequence` @kind object;
  #L13b688.  call temp:= `access$getPredicate$p`(v1) @signature `Lkotlin/sequences/FilteringSequence;.access$getPredicate$p:(Lkotlin/sequences/FilteringSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L13b68e.  v1:= temp @kind object;
  #L13b690.  call temp:= `invoke`(v1, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13b696.  v1:= temp @kind object;
  #L13b698.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L13b69c.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13b6a2.  v1:= temp;
  #L13b6a4.  v2:= v3.`kotlin.sequences.FilteringSequence$iterator$1.d` @type ^`kotlin.sequences.FilteringSequence` @kind object;
  #L13b6a8.  call temp:= `access$getSendWhen$p`(v2) @signature `Lkotlin/sequences/FilteringSequence;.access$getSendWhen$p:(Lkotlin/sequences/FilteringSequence;)Z` @kind static;
  #L13b6ae.  v2:= temp;
  #L13b6b0.  if v1 != v2 then goto L13b668;
  #L13b6b4.  v3.`kotlin.sequences.FilteringSequence$iterator$1.c` @type ^`java.lang.Object` := v0 @kind object;
  #L13b6b8.  v0:= 1I;
  #L13b6ba.  v3.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int` := v0;
  #L13b6be.  return @kind void;
  #L13b6c0.  v0:= 0I;
  #L13b6c2.  v3.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int` := v0;
  #L13b6c6.  return @kind void;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.FilteringSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13b618.  v0:= v1.`kotlin.sequences.FilteringSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13b61c.  return v0 @kind object;
}
procedure `java.lang.Object` `getNextItem`(`kotlin.sequences.FilteringSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.getNextItem:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13b5bc.  v0:= v1.`kotlin.sequences.FilteringSequence$iterator$1.c` @type ^`java.lang.Object` @kind object;
  #L13b5c0.  return v0 @kind object;
}
procedure `int` `getNextState`(`kotlin.sequences.FilteringSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.getNextState:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13b5a4.  v0:= v1.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int`;
  #L13b5a8.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.sequences.FilteringSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13b574.  v0:= v2.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int`;
  #L13b578.  v1:= -1I;
  #L13b57a.  if v0 != v1 then goto L13b584;
  #L13b57e.  call `b`(v2) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.b:()V` @kind direct;
  #L13b584.  v0:= v2.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int`;
  #L13b588.  v1:= 1I;
  #L13b58a.  if v0 != v1 then goto L13b590;
  #L13b58e.  goto L13b592;
  #L13b590.  v1:= 0I;
  #L13b592.  return v1;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.FilteringSequence$iterator$1` v3 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13b5d4.  v0:= v3.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int`;
  #L13b5d8.  v1:= -1I;
  #L13b5da.  if v0 != v1 then goto L13b5e4;
  #L13b5de.  call `b`(v3) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.b:()V` @kind direct;
  #L13b5e4.  v0:= v3.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int`;
  #L13b5e8.  if v0 == 0 then goto L13b5fc;
  #L13b5ec.  v0:= v3.`kotlin.sequences.FilteringSequence$iterator$1.c` @type ^`java.lang.Object` @kind object;
  #L13b5f0.  v2:= 0I;
  #L13b5f2.  v3.`kotlin.sequences.FilteringSequence$iterator$1.c` @type ^`java.lang.Object` := v2 @kind object;
  #L13b5f6.  v3.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int` := v1;
  #L13b5fa.  return v0 @kind object;
  #L13b5fc.  v0:= new `java.util.NoSuchElementException`;
  #L13b600.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L13b606.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.FilteringSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13b6d8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L13b6dc.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L13b6e0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13b6e6.  throw v0;
}
procedure `void` `setNextItem`(`kotlin.sequences.FilteringSequence$iterator$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.setNextItem:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13b6f8.  v0.`kotlin.sequences.FilteringSequence$iterator$1.c` @type ^`java.lang.Object` := v1 @kind object;
  #L13b6fc.  return @kind void;
}
procedure `void` `setNextState`(`kotlin.sequences.FilteringSequence$iterator$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/sequences/FilteringSequence$iterator$1;.setNextState:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13b710.  v0.`kotlin.sequences.FilteringSequence$iterator$1.b` @type ^`int` := v1;
  #L13b714.  return @kind void;
}
