record `kotlin.sequences.SequencesKt___SequencesKt$m` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.RestrictedSuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$m.b` @AccessFlag PRIVATE_SYNTHETIC;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$m.c` @AccessFlag ;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$m.d` @AccessFlag ;
  `int` `kotlin.sequences.SequencesKt___SequencesKt$m.e` @AccessFlag ;
  `kotlin.sequences.Sequence` `kotlin.sequences.SequencesKt___SequencesKt$m.f` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `kotlin.sequences.SequencesKt___SequencesKt$m.g` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.functions.Function2` `kotlin.sequences.SequencesKt___SequencesKt$m.h` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.SequencesKt___SequencesKt$m` v0 @kind this, `kotlin.sequences.Sequence` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$m;.<init>:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L13da98.  v0.`kotlin.sequences.SequencesKt___SequencesKt$m.f` @type ^`kotlin.sequences.Sequence` := v1 @kind object;
  #L13da9c.  v0.`kotlin.sequences.SequencesKt___SequencesKt$m.g` @type ^`java.lang.Object` := v2 @kind object;
  #L13daa0.  v0.`kotlin.sequences.SequencesKt___SequencesKt$m.h` @type ^`kotlin.jvm.functions.Function2` := v3 @kind object;
  #L13daa4.  v1:= 2I;
  #L13daa6.  call `<init>`(v0, v1, v4) @signature `Lkotlin/coroutines/jvm/internal/RestrictedSuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L13daac.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlin.sequences.SequencesKt___SequencesKt$m` v4 @kind this, `java.lang.Object` v5 @kind object, `kotlin.coroutines.Continuation` v6 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$m;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13da60.  v0:= "completion" @kind object;
  #L13da64.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13da6a.  v0:= new `kotlin.sequences.SequencesKt___SequencesKt$m`;
  #L13da6e.  v1:= v4.`kotlin.sequences.SequencesKt___SequencesKt$m.f` @type ^`kotlin.sequences.Sequence` @kind object;
  #L13da72.  v2:= v4.`kotlin.sequences.SequencesKt___SequencesKt$m.g` @type ^`java.lang.Object` @kind object;
  #L13da76.  v3:= v4.`kotlin.sequences.SequencesKt___SequencesKt$m.h` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L13da7a.  call `<init>`(v0, v1, v2, v3, v6) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$m;.<init>:(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L13da80.  v0.`kotlin.sequences.SequencesKt___SequencesKt$m.b` @type ^`java.lang.Object` := v5 @kind object;
  #L13da84.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlin.sequences.SequencesKt___SequencesKt$m` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$m;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13d940.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L13d944.  call temp:= `create`(v0, v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$m;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L13d94a.  v1:= temp @kind object;
  #L13d94c.  v1:= (`kotlin.sequences.SequencesKt___SequencesKt$m`) v1 @kind object;
  #L13d950.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L13d954.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$m;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L13d95a.  v1:= temp @kind object;
  #L13d95c.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlin.sequences.SequencesKt___SequencesKt$m` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$m;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13d970.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L13d976.  v0:= temp @kind object;
  #L13d978.  v1:= v7.`kotlin.sequences.SequencesKt___SequencesKt$m.e` @type ^`int`;
  #L13d97c.  v2:= 2I;
  #L13d97e.  v3:= 1I;
  #L13d980.  if v1 == 0 then goto L13d9ca;
  #L13d984.  if v1 == v3 then goto L13d9ba;
  #L13d988.  if v1 != v2 then goto L13d9aa;
  #L13d98c.  v1:= v7.`kotlin.sequences.SequencesKt___SequencesKt$m.d` @type ^`java.lang.Object` @kind object;
  #L13d990.  v1:= (`java.util.Iterator`) v1 @kind object;
  #L13d994.  v3:= v7.`kotlin.sequences.SequencesKt___SequencesKt$m.c` @type ^`java.lang.Object` @kind object;
  #L13d998.  v4:= v7.`kotlin.sequences.SequencesKt___SequencesKt$m.b` @type ^`java.lang.Object` @kind object;
  #L13d99c.  v4:= (`kotlin.sequences.SequenceScope`) v4 @kind object;
  #L13d9a0.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L13d9a6.  v8:= v3 @kind object;
  #L13d9a8.  goto L13da08;
  #L13d9aa.  v8:= new `java.lang.IllegalStateException`;
  #L13d9ae.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L13d9b2.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13d9b8.  throw v8;
  #L13d9ba.  v1:= v7.`kotlin.sequences.SequencesKt___SequencesKt$m.b` @type ^`java.lang.Object` @kind object;
  #L13d9be.  v1:= (`kotlin.sequences.SequenceScope`) v1 @kind object;
  #L13d9c2.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L13d9c8.  goto L13d9f4;
  #L13d9ca.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L13d9d0.  v8:= v7.`kotlin.sequences.SequencesKt___SequencesKt$m.b` @type ^`java.lang.Object` @kind object;
  #L13d9d4.  v1:= v8 @kind object;
  #L13d9d6.  v1:= (`kotlin.sequences.SequenceScope`) v1 @kind object;
  #L13d9da.  v8:= v7.`kotlin.sequences.SequencesKt___SequencesKt$m.g` @type ^`java.lang.Object` @kind object;
  #L13d9de.  v7.`kotlin.sequences.SequencesKt___SequencesKt$m.b` @type ^`java.lang.Object` := v1 @kind object;
  #L13d9e2.  v7.`kotlin.sequences.SequencesKt___SequencesKt$m.e` @type ^`int` := v3;
  #L13d9e6.  call temp:= `yield`(v1, v8, v7) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L13d9ec.  v8:= temp @kind object;
  #L13d9ee.  if v8 != v0 then goto L13d9f4;
  #L13d9f2.  return v0 @kind object;
  #L13d9f4.  v8:= v7.`kotlin.sequences.SequencesKt___SequencesKt$m.g` @type ^`java.lang.Object` @kind object;
  #L13d9f8.  v3:= v7.`kotlin.sequences.SequencesKt___SequencesKt$m.f` @type ^`kotlin.sequences.Sequence` @kind object;
  #L13d9fc.  call temp:= `iterator`(v3) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13da02.  v3:= temp @kind object;
  #L13da04.  v4:= v1 @kind object;
  #L13da06.  v1:= v3 @kind object;
  #L13da08.  v3:= v7 @kind object;
  #L13da0a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13da10.  v5:= temp;
  #L13da12.  if v5 == 0 then goto L13da48;
  #L13da16.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13da1c.  v5:= temp @kind object;
  #L13da1e.  v6:= v3.`kotlin.sequences.SequencesKt___SequencesKt$m.h` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L13da22.  call temp:= `invoke`(v6, v8, v5) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13da28.  v8:= temp @kind object;
  #L13da2a.  v3.`kotlin.sequences.SequencesKt___SequencesKt$m.b` @type ^`java.lang.Object` := v4 @kind object;
  #L13da2e.  v3.`kotlin.sequences.SequencesKt___SequencesKt$m.c` @type ^`java.lang.Object` := v8 @kind object;
  #L13da32.  v3.`kotlin.sequences.SequencesKt___SequencesKt$m.d` @type ^`java.lang.Object` := v1 @kind object;
  #L13da36.  v3.`kotlin.sequences.SequencesKt___SequencesKt$m.e` @type ^`int` := v2;
  #L13da3a.  call temp:= `yield`(v4, v8, v3) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L13da40.  v5:= temp @kind object;
  #L13da42.  if v5 != v0 then goto L13da0a;
  #L13da46.  return v0 @kind object;
  #L13da48.  v8:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L13da4c.  return v8 @kind object;
}
