record `kotlin.sequences.TakeSequence` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface, `kotlin.sequences.DropTakeSequence` @kind interface {
  `kotlin.sequences.Sequence` `kotlin.sequences.TakeSequence.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.sequences.TakeSequence.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.sequences.TakeSequence` v1 @kind this, `kotlin.sequences.Sequence` v2 @kind object, `int` v3 ) @signature `Lkotlin/sequences/TakeSequence;.<init>:(Lkotlin/sequences/Sequence;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L141e10.  v0:= "sequence" @kind object;
  #L141e14.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L141e1a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L141e20.  v1.`kotlin.sequences.TakeSequence.a` @type ^`kotlin.sequences.Sequence` := v2 @kind object;
  #L141e24.  v1.`kotlin.sequences.TakeSequence.b` @type ^`int` := v3;
  #L141e28.  if v3 < 0 then goto L141e30;
  #L141e2c.  v2:= 1I;
  #L141e2e.  goto L141e32;
  #L141e30.  v2:= 0I;
  #L141e32.  if v2 == 0 then goto L141e38;
  #L141e36.  return @kind void;
  #L141e38.  v2:= new `java.lang.StringBuilder`;
  #L141e3c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L141e42.  v3:= "count must be non-negative, but was " @kind object;
  #L141e46.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L141e4c.  v3:= v1.`kotlin.sequences.TakeSequence.b` @type ^`int`;
  #L141e50.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L141e56.  v3:= 46I;
  #L141e5a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L141e60.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L141e66.  v2:= temp @kind object;
  #L141e68.  v3:= new `java.lang.IllegalArgumentException`;
  #L141e6c.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L141e72.  v2:= temp @kind object;
  #L141e74.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L141e7a.  throw v3;
}
procedure `int` `access$getCount$p`(`kotlin.sequences.TakeSequence` v0 @kind object) @signature `Lkotlin/sequences/TakeSequence;.access$getCount$p:(Lkotlin/sequences/TakeSequence;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L141d64.  v0:= v0.`kotlin.sequences.TakeSequence.b` @type ^`int`;
  #L141d68.  return v0;
}
procedure `kotlin.sequences.Sequence` `access$getSequence$p`(`kotlin.sequences.TakeSequence` v0 @kind object) @signature `Lkotlin/sequences/TakeSequence;.access$getSequence$p:(Lkotlin/sequences/TakeSequence;)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L141d98.  v0:= v0.`kotlin.sequences.TakeSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L141d9c.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `drop`(`kotlin.sequences.TakeSequence` v3 @kind this, `int` v4 ) @signature `Lkotlin/sequences/TakeSequence;.drop:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L141db0.  v0:= v3.`kotlin.sequences.TakeSequence.b` @type ^`int`;
  #L141db4.  if v4 < v0 then goto L141dc2;
  #L141db8.  call temp:= `emptySequence`() @signature `Lkotlin/sequences/SequencesKt;.emptySequence:()Lkotlin/sequences/Sequence;` @kind static;
  #L141dbe.  v4:= temp @kind object;
  #L141dc0.  goto L141dd2;
  #L141dc2.  v1:= new `kotlin.sequences.SubSequence`;
  #L141dc6.  v2:= v3.`kotlin.sequences.TakeSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L141dca.  call `<init>`(v1, v2, v4, v0) @signature `Lkotlin/sequences/SubSequence;.<init>:(Lkotlin/sequences/Sequence;II)V` @kind direct;
  #L141dd0.  v4:= v1 @kind object;
  #L141dd2.  return v4 @kind object;
}
procedure `java.util.Iterator` `iterator`(`kotlin.sequences.TakeSequence` v1 @kind this) @signature `Lkotlin/sequences/TakeSequence;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L141d7c.  v0:= new `kotlin.sequences.TakeSequence$iterator$1`;
  #L141d80.  call `<init>`(v0, v1) @signature `Lkotlin/sequences/TakeSequence$iterator$1;.<init>:(Lkotlin/sequences/TakeSequence;)V` @kind direct;
  #L141d86.  return v0 @kind object;
}
procedure `kotlin.sequences.Sequence` `take`(`kotlin.sequences.TakeSequence` v2 @kind this, `int` v3 ) @signature `Lkotlin/sequences/TakeSequence;.take:(I)Lkotlin/sequences/Sequence;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L141de4.  v0:= v2.`kotlin.sequences.TakeSequence.b` @type ^`int`;
  #L141de8.  if v3 < v0 then goto L141df0;
  #L141dec.  v0:= v2 @kind object;
  #L141dee.  goto L141dfe;
  #L141df0.  v0:= new `kotlin.sequences.TakeSequence`;
  #L141df4.  v1:= v2.`kotlin.sequences.TakeSequence.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L141df8.  call `<init>`(v0, v1, v3) @signature `Lkotlin/sequences/TakeSequence;.<init>:(Lkotlin/sequences/Sequence;I)V` @kind direct;
  #L141dfe.  return v0 @kind object;
}
