record `kotlin.sequences.SequencesKt___SequencesKt$minus$1$a` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function1` @kind interface {
  `kotlin.sequences.SequencesKt___SequencesKt$minus$1` `kotlin.sequences.SequencesKt___SequencesKt$minus$1$a.a` @AccessFlag FINAL_SYNTHETIC;
  `kotlin.jvm.internal.Ref$BooleanRef` `kotlin.sequences.SequencesKt___SequencesKt$minus$1$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.SequencesKt___SequencesKt$minus$1$a` v0 @kind this, `kotlin.sequences.SequencesKt___SequencesKt$minus$1` v1 @kind object, `kotlin.jvm.internal.Ref$BooleanRef` v2 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$minus$1$a;.<init>:(Lkotlin/sequences/SequencesKt___SequencesKt$minus$1;Lkotlin/jvm/internal/Ref$BooleanRef;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L13d52c.  v0.`kotlin.sequences.SequencesKt___SequencesKt$minus$1$a.a` @type ^`kotlin.sequences.SequencesKt___SequencesKt$minus$1` := v1 @kind object;
  #L13d530.  v0.`kotlin.sequences.SequencesKt___SequencesKt$minus$1$a.b` @type ^`kotlin.jvm.internal.Ref$BooleanRef` := v2 @kind object;
  #L13d534.  v1:= 1I;
  #L13d536.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L13d53c.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlin.sequences.SequencesKt___SequencesKt$minus$1$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$minus$1$a;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L13d508.  call temp:= `invoke`(v0, v1) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$minus$1$a;.invoke:(Ljava/lang/Object;)Z` @kind virtual;
  #L13d50e.  v1:= temp;
  #L13d510.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L13d516.  v1:= temp @kind object;
  #L13d518.  return v1 @kind object;
}
procedure `boolean` `invoke`(`kotlin.sequences.SequencesKt___SequencesKt$minus$1$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/sequences/SequencesKt___SequencesKt$minus$1$a;.invoke:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L13d4c8.  v0:= v2.`kotlin.sequences.SequencesKt___SequencesKt$minus$1$a.b` @type ^`kotlin.jvm.internal.Ref$BooleanRef` @kind object;
  #L13d4cc.  v0:= v0.`kotlin.jvm.internal.Ref$BooleanRef.element` @type ^`boolean` @kind boolean;
  #L13d4d0.  v1:= 1I;
  #L13d4d2.  if v0 != 0 then goto L13d4f4;
  #L13d4d6.  v0:= v2.`kotlin.sequences.SequencesKt___SequencesKt$minus$1$a.a` @type ^`kotlin.sequences.SequencesKt___SequencesKt$minus$1` @kind object;
  #L13d4da.  v0:= v0.`kotlin.sequences.SequencesKt___SequencesKt$minus$1.b` @type ^`java.lang.Object` @kind object;
  #L13d4de.  call temp:= `areEqual`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L13d4e4.  v3:= temp;
  #L13d4e6.  if v3 == 0 then goto L13d4f4;
  #L13d4ea.  v3:= v2.`kotlin.sequences.SequencesKt___SequencesKt$minus$1$a.b` @type ^`kotlin.jvm.internal.Ref$BooleanRef` @kind object;
  #L13d4ee.  v3.`kotlin.jvm.internal.Ref$BooleanRef.element` @type ^`boolean` := v1 @kind boolean;
  #L13d4f2.  v1:= 0I;
  #L13d4f4.  return v1;
}
