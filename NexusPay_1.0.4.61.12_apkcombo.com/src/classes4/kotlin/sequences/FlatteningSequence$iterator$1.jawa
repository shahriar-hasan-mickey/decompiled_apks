record `kotlin.sequences.FlatteningSequence$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.sequences.FlatteningSequence$iterator$1.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Iterator` `kotlin.sequences.FlatteningSequence$iterator$1.b` @AccessFlag PRIVATE;
  `kotlin.sequences.FlatteningSequence` `kotlin.sequences.FlatteningSequence$iterator$1.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.sequences.FlatteningSequence$iterator$1` v0 @kind this, `kotlin.sequences.FlatteningSequence` v1 @kind object) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.<init>:(Lkotlin/sequences/FlatteningSequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L13b904.  v0.`kotlin.sequences.FlatteningSequence$iterator$1.c` @type ^`kotlin.sequences.FlatteningSequence` := v1 @kind object;
  #L13b908.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13b90e.  call temp:= `access$getSequence$p`(v1) @signature `Lkotlin/sequences/FlatteningSequence;.access$getSequence$p:(Lkotlin/sequences/FlatteningSequence;)Lkotlin/sequences/Sequence;` @kind static;
  #L13b914.  v1:= temp @kind object;
  #L13b916.  call temp:= `iterator`(v1) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13b91c.  v1:= temp @kind object;
  #L13b91e.  v0.`kotlin.sequences.FlatteningSequence$iterator$1.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L13b922.  return @kind void;
}
procedure `boolean` `b`(`kotlin.sequences.FlatteningSequence$iterator$1` v4 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.b:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13b7e8.  v0:= v4.`kotlin.sequences.FlatteningSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L13b7ec.  if v0 == 0 then goto L13b802;
  #L13b7f0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13b7f6.  v0:= temp;
  #L13b7f8.  if v0 != 0 then goto L13b802;
  #L13b7fc.  v0:= 0I;
  #L13b7fe.  v4.`kotlin.sequences.FlatteningSequence$iterator$1.b` @type ^`java.util.Iterator` := v0 @kind object;
  #L13b802.  v0:= v4.`kotlin.sequences.FlatteningSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L13b806.  v1:= 1I;
  #L13b808.  if v0 != 0 then goto L13b868;
  #L13b80c.  v0:= v4.`kotlin.sequences.FlatteningSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13b810.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13b816.  v0:= temp;
  #L13b818.  if v0 != 0 then goto L13b820;
  #L13b81c.  v0:= 0I;
  #L13b81e.  return v0;
  #L13b820.  v0:= v4.`kotlin.sequences.FlatteningSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13b824.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13b82a.  v0:= temp @kind object;
  #L13b82c.  v2:= v4.`kotlin.sequences.FlatteningSequence$iterator$1.c` @type ^`kotlin.sequences.FlatteningSequence` @kind object;
  #L13b830.  call temp:= `access$getIterator$p`(v2) @signature `Lkotlin/sequences/FlatteningSequence;.access$getIterator$p:(Lkotlin/sequences/FlatteningSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L13b836.  v2:= temp @kind object;
  #L13b838.  v3:= v4.`kotlin.sequences.FlatteningSequence$iterator$1.c` @type ^`kotlin.sequences.FlatteningSequence` @kind object;
  #L13b83c.  call temp:= `access$getTransformer$p`(v3) @signature `Lkotlin/sequences/FlatteningSequence;.access$getTransformer$p:(Lkotlin/sequences/FlatteningSequence;)Lkotlin/jvm/functions/Function1;` @kind static;
  #L13b842.  v3:= temp @kind object;
  #L13b844.  call temp:= `invoke`(v3, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13b84a.  v0:= temp @kind object;
  #L13b84c.  call temp:= `invoke`(v2, v0) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13b852.  v0:= temp @kind object;
  #L13b854.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L13b858.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13b85e.  v2:= temp;
  #L13b860.  if v2 == 0 then goto L13b802;
  #L13b864.  v4.`kotlin.sequences.FlatteningSequence$iterator$1.b` @type ^`java.util.Iterator` := v0 @kind object;
  #L13b868.  return v1;
}
procedure `java.util.Iterator` `getItemIterator`(`kotlin.sequences.FlatteningSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.getItemIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13b8d4.  v0:= v1.`kotlin.sequences.FlatteningSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L13b8d8.  return v0 @kind object;
}
procedure `java.util.Iterator` `getIterator`(`kotlin.sequences.FlatteningSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.getIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13b8ec.  v0:= v1.`kotlin.sequences.FlatteningSequence$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L13b8f0.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`kotlin.sequences.FlatteningSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13b87c.  call temp:= `b`(v1) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.b:()Z` @kind direct;
  #L13b882.  v0:= temp;
  #L13b884.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.sequences.FlatteningSequence$iterator$1` v1 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13b898.  call temp:= `b`(v1) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.b:()Z` @kind direct;
  #L13b89e.  v0:= temp;
  #L13b8a0.  if v0 == 0 then goto L13b8b8;
  #L13b8a4.  v0:= v1.`kotlin.sequences.FlatteningSequence$iterator$1.b` @type ^`java.util.Iterator` @kind object;
  #L13b8a8.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L13b8ae.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13b8b4.  v0:= temp @kind object;
  #L13b8b6.  return v0 @kind object;
  #L13b8b8.  v0:= new `java.util.NoSuchElementException`;
  #L13b8bc.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L13b8c2.  throw v0;
}
procedure `void` `remove`(`kotlin.sequences.FlatteningSequence$iterator$1` v2 @kind this) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13b934.  v0:= new `java.lang.UnsupportedOperationException`;
  #L13b938.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L13b93c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13b942.  throw v0;
}
procedure `void` `setItemIterator`(`kotlin.sequences.FlatteningSequence$iterator$1` v0 @kind this, `java.util.Iterator` v1 @kind object) @signature `Lkotlin/sequences/FlatteningSequence$iterator$1;.setItemIterator:(Ljava/util/Iterator;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13b954.  v0.`kotlin.sequences.FlatteningSequence$iterator$1.b` @type ^`java.util.Iterator` := v1 @kind object;
  #L13b958.  return @kind void;
}
