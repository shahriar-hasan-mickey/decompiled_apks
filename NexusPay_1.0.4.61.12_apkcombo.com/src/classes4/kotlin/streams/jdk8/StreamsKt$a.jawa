record `kotlin.streams.jdk8.StreamsKt$a` @kind class @AccessFlag FINAL extends `java.util.function.Supplier` @kind interface {
  `kotlin.sequences.Sequence` `kotlin.streams.jdk8.StreamsKt$a.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.streams.jdk8.StreamsKt$a` v0 @kind this, `kotlin.sequences.Sequence` v1 @kind object) @signature `Lkotlin/streams/jdk8/StreamsKt$a;.<init>:(Lkotlin/sequences/Sequence;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L14269c.  v0.`kotlin.streams.jdk8.StreamsKt$a.a` @type ^`kotlin.sequences.Sequence` := v1 @kind object;
  #L1426a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1426a6.  return @kind void;
}
procedure `java.util.Spliterator` `a`(`kotlin.streams.jdk8.StreamsKt$a` v2 @kind this) @signature `Lkotlin/streams/jdk8/StreamsKt$a;.a:()Ljava/util/Spliterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L142670.  v0:= v2.`kotlin.streams.jdk8.StreamsKt$a.a` @type ^`kotlin.sequences.Sequence` @kind object;
  #L142674.  call temp:= `iterator`(v0) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L14267a.  v0:= temp @kind object;
  #L14267c.  v1:= 16I;
  #L142680.  call temp:= `spliteratorUnknownSize`(v0, v1) @signature `Ljava/util/Spliterators;.spliteratorUnknownSize:(Ljava/util/Iterator;I)Ljava/util/Spliterator;` @kind static;
  #L142686.  v0:= temp @kind object;
  #L142688.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`kotlin.streams.jdk8.StreamsKt$a` v1 @kind this) @signature `Lkotlin/streams/jdk8/StreamsKt$a;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L142654.  call temp:= `a`(v1) @signature `Lkotlin/streams/jdk8/StreamsKt$a;.a:()Ljava/util/Spliterator;` @kind virtual;
  #L14265a.  v0:= temp @kind object;
  #L14265c.  return v0 @kind object;
}
