record `kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$2` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.sequences.Sequence` @kind interface {
  `java.util.stream.IntStream` `kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$2.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$2` v0 @kind this, `java.util.stream.IntStream` v1 @kind object) @signature `Lkotlin/streams/jdk8/StreamsKt$asSequence$$inlined$Sequence$2;.<init>:(Ljava/util/stream/IntStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1425b0.  v0.`kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$2.a` @type ^`java.util.stream.IntStream` := v1 @kind object;
  #L1425b4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1425ba.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$2` v2 @kind this) @signature `Lkotlin/streams/jdk8/StreamsKt$asSequence$$inlined$Sequence$2;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L142588.  v0:= v2.`kotlin.streams.jdk8.StreamsKt$asSequence$$inlined$Sequence$2.a` @type ^`java.util.stream.IntStream` @kind object;
  #L14258c.  call temp:= `iterator`(v0) @signature `Ljava/util/stream/IntStream;.iterator:()Ljava/util/PrimitiveIterator$OfInt;` @kind interface;
  #L142592.  v0:= temp @kind object;
  #L142594.  v1:= "iterator()" @kind object;
  #L142598.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14259e.  return v0 @kind object;
}
