record `kotlin.time.TestTimeSource` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.time.AbstractLongTimeSource` @kind class {
  `long` `kotlin.time.TestTimeSource.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.time.TestTimeSource` v1 @kind this) @signature `Lkotlin/time/TestTimeSource;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1527a8.  v0:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1527ac.  call `<init>`(v1, v0) @signature `Lkotlin/time/AbstractLongTimeSource;.<init>:(Ljava/util/concurrent/TimeUnit;)V` @kind direct;
  #L1527b2.  return @kind void;
}
procedure `void` `a`(`kotlin.time.TestTimeSource` v4 @kind this, `long` v5 ) @signature `Lkotlin/time/TestTimeSource;.a:(J)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1527c4.  v0:= new `java.lang.IllegalStateException`;
  #L1527c8.  v1:= new `java.lang.StringBuilder`;
  #L1527cc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1527d2.  v2:= "TestTimeSource will overflow if its reading " @kind object;
  #L1527d6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1527dc.  v2:= v4.`kotlin.time.TestTimeSource.b` @type ^`long` @kind wide;
  #L1527e0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1527e6.  v2:= "ns is advanced by " @kind object;
  #L1527ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1527f0.  call temp:= `toString-impl`(v5) @signature `Lkotlin/time/Duration;.toString-impl:(J)Ljava/lang/String;` @kind static;
  #L1527f6.  v5:= temp @kind object;
  #L1527f8.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1527fe.  v5:= 46I;
  #L152802.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L152808.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15280e.  v5:= temp @kind object;
  #L152810.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L152816.  throw v0;
}
procedure `void` `plusAssign-LRDsOJo`(`kotlin.time.TestTimeSource` v10 @kind this, `long` v11 ) @signature `Lkotlin/time/TestTimeSource;.plusAssign-LRDsOJo:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L152828.  call temp:= `getUnit`(v10) @signature `Lkotlin/time/AbstractLongTimeSource;.getUnit:()Ljava/util/concurrent/TimeUnit;` @kind virtual;
  #L15282e.  v0:= temp @kind object;
  #L152830.  call temp:= `toLong-impl`(v11, v0) @signature `Lkotlin/time/Duration;.toLong-impl:(JLjava/util/concurrent/TimeUnit;)J` @kind static;
  #L152836.  v0:= temp @kind wide;
  #L152838.  v2:= 0I;
  #L15283a.  v3:= 9223372036854775807L;
  #L152844.  v5:= -9223372036854775808L;
  #L152848.  v7:= lcmp(v0, v5);
  #L15284c.  if v7 == 0 then goto L152884;
  #L152850.  v7:= lcmp(v0, v3);
  #L152854.  if v7 == 0 then goto L152884;
  #L152858.  v3:= v10.`kotlin.time.TestTimeSource.b` @type ^`long` @kind wide;
  #L15285c.  v5:= v3 + v0 @kind long;
  #L152860.  v0:= v0 ^~ v3 @kind long;
  #L152862.  v7:= 0L;
  #L152866.  v9:= lcmp(v0, v7);
  #L15286a.  if v9 < 0 then goto L1528b2;
  #L15286e.  v0:= v3 ^~ v5 @kind long;
  #L152872.  v3:= lcmp(v0, v7);
  #L152876.  if v3 < 0 then goto L15287c;
  #L15287a.  goto L1528b2;
  #L15287c.  call `a`(v10, v11) @signature `Lkotlin/time/TestTimeSource;.a:(J)V` @kind direct;
  #L152882.  throw v2;
  #L152884.  call temp:= `getUnit`(v10) @signature `Lkotlin/time/AbstractLongTimeSource;.getUnit:()Ljava/util/concurrent/TimeUnit;` @kind virtual;
  #L15288a.  v0:= temp @kind object;
  #L15288c.  call temp:= `toDouble-impl`(v11, v0) @signature `Lkotlin/time/Duration;.toDouble-impl:(JLjava/util/concurrent/TimeUnit;)D` @kind static;
  #L152892.  v0:= temp @kind wide;
  #L152894.  v7:= v10.`kotlin.time.TestTimeSource.b` @type ^`long` @kind wide;
  #L152898.  v7:= (`double`) v7 @kind l2d;
  #L15289a.  v7:= v7 + v0 @kind double;
  #L15289c.  v0:= (`double`) v3 @kind l2d;
  #L15289e.  v3:= dcmpl(v7, v0);
  #L1528a2.  if v3 > 0 then goto L1528b8;
  #L1528a6.  v0:= (`double`) v5 @kind l2d;
  #L1528a8.  v3:= dcmpg(v7, v0);
  #L1528ac.  if v3 < 0 then goto L1528b8;
  #L1528b0.  v5:= (`long`) v7 @kind d2l;
  #L1528b2.  v10.`kotlin.time.TestTimeSource.b` @type ^`long` := v5 @kind wide;
  #L1528b6.  return @kind void;
  #L1528b8.  call `a`(v10, v11) @signature `Lkotlin/time/TestTimeSource;.a:(J)V` @kind direct;
  #L1528be.  throw v2;
}
procedure `long` `read`(`kotlin.time.TestTimeSource` v2 @kind this) @signature `Lkotlin/time/TestTimeSource;.read:()J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L152790.  v0:= v2.`kotlin.time.TestTimeSource.b` @type ^`long` @kind wide;
  #L152794.  return v0 @kind wide;
}
