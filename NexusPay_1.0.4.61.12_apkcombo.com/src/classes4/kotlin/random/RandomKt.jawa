record `kotlin.random.RandomKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `kotlin.random.Random` `Random`(`int` v2 ) @signature `Lkotlin/random/RandomKt;.Random:(I)Lkotlin/random/Random;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L133694.  v0:= new `kotlin.random.XorWowRandom`;
  #L133698.  v1:= v2 ^> 31;
  #L13369c.  call `<init>`(v0, v2, v1) @signature `Lkotlin/random/XorWowRandom;.<init>:(II)V` @kind direct;
  #L1336a2.  return v0 @kind object;
}
procedure `kotlin.random.Random` `Random`(`long` v3 ) @signature `Lkotlin/random/RandomKt;.Random:(J)Lkotlin/random/Random;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1336b4.  v0:= new `kotlin.random.XorWowRandom`;
  #L1336b8.  v1:= (`int`) v3 @kind l2i;
  #L1336ba.  v2:= 32I;
  #L1336be.  v3:= v3 ^> v2 @kind long;
  #L1336c0.  v4:= (`int`) v3 @kind l2i;
  #L1336c2.  call `<init>`(v0, v1, v4) @signature `Lkotlin/random/XorWowRandom;.<init>:(II)V` @kind direct;
  #L1336c8.  return v0 @kind object;
}
procedure `java.lang.String` `boundsErrorMessage`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/random/RandomKt;.boundsErrorMessage:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L133630.  v0:= "from" @kind object;
  #L133634.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13363a.  v0:= "until" @kind object;
  #L13363e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L133644.  v0:= new `java.lang.StringBuilder`;
  #L133648.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13364e.  v1:= "Random range is empty: [" @kind object;
  #L133652.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133658.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13365e.  v2:= ", " @kind object;
  #L133662.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133668.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13366e.  v2:= ")." @kind object;
  #L133672.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133678.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13367e.  v2:= temp @kind object;
  #L133680.  return v2 @kind object;
}
procedure `void` `checkRangeBounds`(`double` v1 , `double` v3 ) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(DD)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1337b0.  v0:= dcmpl(v3, v1);
  #L1337b4.  if v0 <= 0 then goto L1337bc;
  #L1337b8.  v0:= 1I;
  #L1337ba.  goto L1337be;
  #L1337bc.  v0:= 0I;
  #L1337be.  if v0 == 0 then goto L1337c4;
  #L1337c2.  return @kind void;
  #L1337c4.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L1337ca.  v1:= temp @kind object;
  #L1337cc.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L1337d2.  v2:= temp @kind object;
  #L1337d4.  call temp:= `boundsErrorMessage`(v1, v2) @signature `Lkotlin/random/RandomKt;.boundsErrorMessage:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1337da.  v1:= temp @kind object;
  #L1337dc.  v2:= new `java.lang.IllegalArgumentException`;
  #L1337e0.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1337e6.  v1:= temp @kind object;
  #L1337e8.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1337ee.  throw v2;
}
procedure `void` `checkRangeBounds`(`int` v1 , `int` v2 ) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(II)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L133800.  if v2 <= v1 then goto L133808;
  #L133804.  v0:= 1I;
  #L133806.  goto L13380a;
  #L133808.  v0:= 0I;
  #L13380a.  if v0 == 0 then goto L133810;
  #L13380e.  return @kind void;
  #L133810.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L133816.  v1:= temp @kind object;
  #L133818.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L13381e.  v2:= temp @kind object;
  #L133820.  call temp:= `boundsErrorMessage`(v1, v2) @signature `Lkotlin/random/RandomKt;.boundsErrorMessage:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L133826.  v1:= temp @kind object;
  #L133828.  v2:= new `java.lang.IllegalArgumentException`;
  #L13382c.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L133832.  v1:= temp @kind object;
  #L133834.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13383a.  throw v2;
}
procedure `void` `checkRangeBounds`(`long` v1 , `long` v3 ) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(JJ)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L13384c.  v0:= lcmp(v3, v1);
  #L133850.  if v0 <= 0 then goto L133858;
  #L133854.  v0:= 1I;
  #L133856.  goto L13385a;
  #L133858.  v0:= 0I;
  #L13385a.  if v0 == 0 then goto L133860;
  #L13385e.  return @kind void;
  #L133860.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L133866.  v1:= temp @kind object;
  #L133868.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L13386e.  v2:= temp @kind object;
  #L133870.  call temp:= `boundsErrorMessage`(v1, v2) @signature `Lkotlin/random/RandomKt;.boundsErrorMessage:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L133876.  v1:= temp @kind object;
  #L133878.  v2:= new `java.lang.IllegalArgumentException`;
  #L13387c.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L133882.  v1:= temp @kind object;
  #L133884.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13388a.  throw v2;
}
procedure `int` `fastLog2`(`int` v0 ) @signature `Lkotlin/random/RandomKt;.fastLog2:(I)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L133524.  call temp:= `numberOfLeadingZeros`(v0) @signature `Ljava/lang/Integer;.numberOfLeadingZeros:(I)I` @kind static;
  #L13352a.  v0:= temp;
  #L13352c.  v0:= v0 - 31;
  #L133530.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.Random` v2 @kind object, `kotlin.ranges.IntRange` v3 @kind object) @signature `Lkotlin/random/RandomKt;.nextInt:(Lkotlin/random/Random;Lkotlin/ranges/IntRange;)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L133544.  v0:= "$this$nextInt" @kind object;
  #L133548.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13354e.  v0:= "range" @kind object;
  #L133552.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L133558.  call temp:= `isEmpty`(v3) @signature `Lkotlin/ranges/IntRange;.isEmpty:()Z` @kind virtual;
  #L13355e.  v0:= temp;
  #L133560.  if v0 != 0 then goto L1335d0;
  #L133564.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L13356a.  v0:= temp;
  #L13356c.  v1:= 2147483647I;
  #L133572.  if v0 >= v1 then goto L133594;
  #L133576.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L13357c.  v0:= temp;
  #L13357e.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L133584.  v3:= temp;
  #L133586.  v3:= v3 + 1;
  #L13358a.  call temp:= `nextInt`(v2, v0, v3) @signature `Lkotlin/random/Random;.nextInt:(II)I` @kind virtual;
  #L133590.  v2:= temp;
  #L133592.  goto L1335ce;
  #L133594.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L13359a.  v0:= temp;
  #L13359c.  v1:= -2147483648I;
  #L1335a0.  if v0 <= v1 then goto L1335c6;
  #L1335a4.  call temp:= `getFirst`(v3) @signature `Lkotlin/ranges/IntProgression;.getFirst:()I` @kind virtual;
  #L1335aa.  v0:= temp;
  #L1335ac.  v0:= v0 + -1;
  #L1335b0.  call temp:= `getLast`(v3) @signature `Lkotlin/ranges/IntProgression;.getLast:()I` @kind virtual;
  #L1335b6.  v3:= temp;
  #L1335b8.  call temp:= `nextInt`(v2, v0, v3) @signature `Lkotlin/random/Random;.nextInt:(II)I` @kind virtual;
  #L1335be.  v2:= temp;
  #L1335c0.  v2:= v2 + 1;
  #L1335c4.  goto L1335ce;
  #L1335c6.  call temp:= `nextInt`(v2) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L1335cc.  v2:= temp;
  #L1335ce.  return v2;
  #L1335d0.  v2:= new `java.lang.IllegalArgumentException`;
  #L1335d4.  v0:= new `java.lang.StringBuilder`;
  #L1335d8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1335de.  v1:= "Cannot get random in empty range: " @kind object;
  #L1335e2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1335e8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1335ee.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1335f4.  v3:= temp @kind object;
  #L1335f6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1335fc.  throw v2;
}
procedure `long` `nextLong`(`kotlin.random.Random` v7 @kind object, `kotlin.ranges.LongRange` v8 @kind object) @signature `Lkotlin/random/RandomKt;.nextLong:(Lkotlin/random/Random;Lkotlin/ranges/LongRange;)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1336dc.  v0:= "$this$nextLong" @kind object;
  #L1336e0.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1336e6.  v0:= "range" @kind object;
  #L1336ea.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1336f0.  call temp:= `isEmpty`(v8) @signature `Lkotlin/ranges/LongRange;.isEmpty:()Z` @kind virtual;
  #L1336f6.  v0:= temp;
  #L1336f8.  if v0 != 0 then goto L133772;
  #L1336fc.  call temp:= `getLast`(v8) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L133702.  v0:= temp @kind wide;
  #L133704.  v2:= 9223372036854775807L;
  #L13370e.  v4:= 1L;
  #L133712.  v6:= lcmp(v0, v2);
  #L133716.  if v6 >= 0 then goto L133736;
  #L13371a.  call temp:= `getFirst`(v8) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L133720.  v0:= temp @kind wide;
  #L133722.  call temp:= `getLast`(v8) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L133728.  v2:= temp @kind wide;
  #L13372a.  v2:= v2 + v4 @kind long;
  #L13372c.  call temp:= `nextLong`(v7, v0, v2) @signature `Lkotlin/random/Random;.nextLong:(JJ)J` @kind virtual;
  #L133732.  v7:= temp @kind wide;
  #L133734.  goto L133770;
  #L133736.  call temp:= `getFirst`(v8) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L13373c.  v0:= temp @kind wide;
  #L13373e.  v2:= -9223372036854775808L;
  #L133742.  v6:= lcmp(v0, v2);
  #L133746.  if v6 <= 0 then goto L133768;
  #L13374a.  call temp:= `getFirst`(v8) @signature `Lkotlin/ranges/LongProgression;.getFirst:()J` @kind virtual;
  #L133750.  v0:= temp @kind wide;
  #L133752.  v0:= v0 - v4 @kind long;
  #L133754.  call temp:= `getLast`(v8) @signature `Lkotlin/ranges/LongProgression;.getLast:()J` @kind virtual;
  #L13375a.  v2:= temp @kind wide;
  #L13375c.  call temp:= `nextLong`(v7, v0, v2) @signature `Lkotlin/random/Random;.nextLong:(JJ)J` @kind virtual;
  #L133762.  v7:= temp @kind wide;
  #L133764.  v7:= v7 + v4 @kind long;
  #L133766.  goto L133770;
  #L133768.  call temp:= `nextLong`(v7) @signature `Lkotlin/random/Random;.nextLong:()J` @kind virtual;
  #L13376e.  v7:= temp @kind wide;
  #L133770.  return v7 @kind wide;
  #L133772.  v7:= new `java.lang.IllegalArgumentException`;
  #L133776.  v0:= new `java.lang.StringBuilder`;
  #L13377a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L133780.  v1:= "Cannot get random in empty range: " @kind object;
  #L133784.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13378a.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133790.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L133796.  v8:= temp @kind object;
  #L133798.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13379e.  throw v7;
}
procedure `int` `takeUpperBits`(`int` v1 , `int` v2 ) @signature `Lkotlin/random/RandomKt;.takeUpperBits:(II)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L133610.  v0:= v2 - 32;
  #L133614.  v1:= v1 ^>> v0 @kind int;
  #L133616.  v2:= -v2 @kind int;
  #L133618.  v2:= v2 ^> 31;
  #L13361c.  v1:= v1 ^& v2 @kind int;
  #L13361e.  return v1;
}
