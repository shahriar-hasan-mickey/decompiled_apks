record `kotlin.random.Random$Default` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.random.Random` @kind class, `java.io.Serializable` @kind interface {
}
procedure `void` `<init>`(`kotlin.random.Random$Default` v0 @kind this) @signature `Lkotlin/random/Random$Default;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1334f4.  call `<init>`(v0) @signature `Lkotlin/random/Random;.<init>:()V` @kind direct;
  #L1334fa.  return @kind void;
}
procedure `void` `<init>`(`kotlin.random.Random$Default` v0 @kind this, `kotlin.jvm.internal.DefaultConstructorMarker` v1 @kind object) @signature `Lkotlin/random/Random$Default;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L13350c.  call `<init>`(v0) @signature `Lkotlin/random/Random$Default;.<init>:()V` @kind direct;
  #L133512.  return @kind void;
}
procedure `java.lang.Object` `writeReplace`(`kotlin.random.Random$Default` v1 @kind this) @signature `Lkotlin/random/Random$Default;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L133470.  v0:= `@@kotlin.random.Random$Default$a.a` @type ^`kotlin.random.Random$Default$a` @kind object;
  #L133474.  return v0 @kind object;
}
procedure `int` `nextBits`(`kotlin.random.Random$Default` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/Random$Default;.nextBits:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1333e0.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L1333e6.  v0:= temp @kind object;
  #L1333e8.  call temp:= `nextBits`(v0, v2) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L1333ee.  v2:= temp;
  #L1333f0.  return v2;
}
procedure `boolean` `nextBoolean`(`kotlin.random.Random$Default` v1 @kind this) @signature `Lkotlin/random/Random$Default;.nextBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1332b0.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L1332b6.  v0:= temp @kind object;
  #L1332b8.  call temp:= `nextBoolean`(v0) @signature `Lkotlin/random/Random;.nextBoolean:()Z` @kind virtual;
  #L1332be.  v0:= temp;
  #L1332c0.  return v0;
}
procedure `byte`[] `nextBytes`(`kotlin.random.Random$Default` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/Random$Default;.nextBytes:(I)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13332c.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L133332.  v0:= temp @kind object;
  #L133334.  call temp:= `nextBytes`(v0, v2) @signature `Lkotlin/random/Random;.nextBytes:(I)[B` @kind virtual;
  #L13333a.  v2:= temp @kind object;
  #L13333c.  return v2 @kind object;
}
procedure `byte`[] `nextBytes`(`kotlin.random.Random$Default` v1 @kind this, `byte`[] v2 @kind object) @signature `Lkotlin/random/Random$Default;.nextBytes:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1332d4.  v0:= "array" @kind object;
  #L1332d8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1332de.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L1332e4.  v0:= temp @kind object;
  #L1332e6.  call temp:= `nextBytes`(v0, v2) @signature `Lkotlin/random/Random;.nextBytes:([B)[B` @kind virtual;
  #L1332ec.  v2:= temp @kind object;
  #L1332ee.  return v2 @kind object;
}
procedure `byte`[] `nextBytes`(`kotlin.random.Random$Default` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lkotlin/random/Random$Default;.nextBytes:([BII)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L133300.  v0:= "array" @kind object;
  #L133304.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13330a.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L133310.  v0:= temp @kind object;
  #L133312.  call temp:= `nextBytes`(v0, v2, v3, v4) @signature `Lkotlin/random/Random;.nextBytes:([BII)[B` @kind virtual;
  #L133318.  v2:= temp @kind object;
  #L13331a.  return v2 @kind object;
}
procedure `double` `nextDouble`(`kotlin.random.Random$Default` v2 @kind this) @signature `Lkotlin/random/Random$Default;.nextDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L133350.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L133356.  v0:= temp @kind object;
  #L133358.  call temp:= `nextDouble`(v0) @signature `Lkotlin/random/Random;.nextDouble:()D` @kind virtual;
  #L13335e.  v0:= temp @kind wide;
  #L133360.  return v0 @kind wide;
}
procedure `double` `nextDouble`(`kotlin.random.Random$Default` v1 @kind this, `double` v2 ) @signature `Lkotlin/random/Random$Default;.nextDouble:(D)D` @AccessFlag PUBLIC {
    temp;
    v0;

  #L133374.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L13337a.  v0:= temp @kind object;
  #L13337c.  call temp:= `nextDouble`(v0, v2) @signature `Lkotlin/random/Random;.nextDouble:(D)D` @kind virtual;
  #L133382.  v2:= temp @kind wide;
  #L133384.  return v2 @kind wide;
}
procedure `double` `nextDouble`(`kotlin.random.Random$Default` v1 @kind this, `double` v2 , `double` v4 ) @signature `Lkotlin/random/Random$Default;.nextDouble:(DD)D` @AccessFlag PUBLIC {
    temp;
    v0;

  #L133398.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L13339e.  v0:= temp @kind object;
  #L1333a0.  call temp:= `nextDouble`(v0, v2, v4) @signature `Lkotlin/random/Random;.nextDouble:(DD)D` @kind virtual;
  #L1333a6.  v2:= temp @kind wide;
  #L1333a8.  return v2 @kind wide;
}
procedure `float` `nextFloat`(`kotlin.random.Random$Default` v1 @kind this) @signature `Lkotlin/random/Random$Default;.nextFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1333bc.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L1333c2.  v0:= temp @kind object;
  #L1333c4.  call temp:= `nextFloat`(v0) @signature `Lkotlin/random/Random;.nextFloat:()F` @kind virtual;
  #L1333ca.  v0:= temp;
  #L1333cc.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.Random$Default` v1 @kind this) @signature `Lkotlin/random/Random$Default;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L133404.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L13340a.  v0:= temp @kind object;
  #L13340c.  call temp:= `nextInt`(v0) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L133412.  v0:= temp;
  #L133414.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.Random$Default` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/Random$Default;.nextInt:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L133428.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L13342e.  v0:= temp @kind object;
  #L133430.  call temp:= `nextInt`(v0, v2) @signature `Lkotlin/random/Random;.nextInt:(I)I` @kind virtual;
  #L133436.  v2:= temp;
  #L133438.  return v2;
}
procedure `int` `nextInt`(`kotlin.random.Random$Default` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/random/Random$Default;.nextInt:(II)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13344c.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L133452.  v0:= temp @kind object;
  #L133454.  call temp:= `nextInt`(v0, v2, v3) @signature `Lkotlin/random/Random;.nextInt:(II)I` @kind virtual;
  #L13345a.  v2:= temp;
  #L13345c.  return v2;
}
procedure `long` `nextLong`(`kotlin.random.Random$Default` v2 @kind this) @signature `Lkotlin/random/Random$Default;.nextLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L133488.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L13348e.  v0:= temp @kind object;
  #L133490.  call temp:= `nextLong`(v0) @signature `Lkotlin/random/Random;.nextLong:()J` @kind virtual;
  #L133496.  v0:= temp @kind wide;
  #L133498.  return v0 @kind wide;
}
procedure `long` `nextLong`(`kotlin.random.Random$Default` v1 @kind this, `long` v2 ) @signature `Lkotlin/random/Random$Default;.nextLong:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1334ac.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L1334b2.  v0:= temp @kind object;
  #L1334b4.  call temp:= `nextLong`(v0, v2) @signature `Lkotlin/random/Random;.nextLong:(J)J` @kind virtual;
  #L1334ba.  v2:= temp @kind wide;
  #L1334bc.  return v2 @kind wide;
}
procedure `long` `nextLong`(`kotlin.random.Random$Default` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lkotlin/random/Random$Default;.nextLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1334d0.  call temp:= `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @kind static;
  #L1334d6.  v0:= temp @kind object;
  #L1334d8.  call temp:= `nextLong`(v0, v2, v4) @signature `Lkotlin/random/Random;.nextLong:(JJ)J` @kind virtual;
  #L1334de.  v2:= temp @kind wide;
  #L1334e0.  return v2 @kind wide;
}
