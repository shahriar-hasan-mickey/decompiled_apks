record `kotlin.random.Random` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `kotlin.random.Random$Default` `@@kotlin.random.Random.Default` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.random.Random` `@@kotlin.random.Random.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/random/Random;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L133de4.  v0:= new `kotlin.random.Random$Default`;
  #L133de8.  v1:= 0I;
  #L133dea.  call `<init>`(v0, v1) @signature `Lkotlin/random/Random$Default;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L133df0.  `@@kotlin.random.Random.Default` @type ^`kotlin.random.Random$Default` := v0 @kind object;
  #L133df4.  v0:= `@@kotlin.internal.PlatformImplementationsKt.IMPLEMENTATIONS` @type ^`kotlin.internal.PlatformImplementations` @kind object;
  #L133df8.  call temp:= `defaultPlatformRandom`(v0) @signature `Lkotlin/internal/PlatformImplementations;.defaultPlatformRandom:()Lkotlin/random/Random;` @kind virtual;
  #L133dfe.  v0:= temp @kind object;
  #L133e00.  `@@kotlin.random.Random.a` @type ^`kotlin.random.Random` := v0 @kind object;
  #L133e04.  return @kind void;
}
procedure `void` `<init>`(`kotlin.random.Random` v0 @kind this) @signature `Lkotlin/random/Random;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L133e18.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L133e1e.  return @kind void;
}
procedure `kotlin.random.Random` `access$getDefaultRandom$cp`() @signature `Lkotlin/random/Random;.access$getDefaultRandom$cp:()Lkotlin/random/Random;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L133ca4.  v0:= `@@kotlin.random.Random.a` @type ^`kotlin.random.Random` @kind object;
  #L133ca8.  return v0 @kind object;
}
procedure `byte`[] `nextBytes$default`(`kotlin.random.Random` v0 @kind object, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlin/random/Random;.nextBytes$default:(Lkotlin/random/Random;[BIIILjava/lang/Object;)[B` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L1338c0.  if v5 != 0 then goto L1338e2;
  #L1338c4.  v5:= v4 ^& 2;
  #L1338c8.  if v5 == 0 then goto L1338ce;
  #L1338cc.  v2:= 0I;
  #L1338ce.  v4:= v4 ^& 4;
  #L1338d2.  if v4 == 0 then goto L1338d8;
  #L1338d6.  v3:= length @variable v1;
  #L1338d8.  call temp:= `nextBytes`(v0, v1, v2, v3) @signature `Lkotlin/random/Random;.nextBytes:([BII)[B` @kind virtual;
  #L1338de.  v0:= temp @kind object;
  #L1338e0.  return v0 @kind object;
  #L1338e2.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1338e6.  v1:= "Super calls with default arguments not supported in this target, function: nextBytes" @kind object;
  #L1338ea.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1338f0.  throw v0;
}
procedure `int` `nextBits`(`int` v0 ) @signature `Lkotlin/random/Random;.nextBits:(I)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `nextBoolean`(`kotlin.random.Random` v2 @kind this) @signature `Lkotlin/random/Random;.nextBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13389c.  v0:= 1I;
  #L13389e.  call temp:= `nextBits`(v2, v0) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L1338a4.  v1:= temp;
  #L1338a6.  if v1 == 0 then goto L1338ac;
  #L1338aa.  goto L1338ae;
  #L1338ac.  v0:= 0I;
  #L1338ae.  return v0;
}
procedure `byte`[] `nextBytes`(`kotlin.random.Random` v0 @kind this, `int` v1 ) @signature `Lkotlin/random/Random;.nextBytes:(I)[B` @AccessFlag PUBLIC {
    temp;

  #L133aa4.  v1:= new `byte`[v1];
  #L133aa8.  call temp:= `nextBytes`(v0, v1) @signature `Lkotlin/random/Random;.nextBytes:([B)[B` @kind virtual;
  #L133aae.  v1:= temp @kind object;
  #L133ab0.  return v1 @kind object;
}
procedure `byte`[] `nextBytes`(`kotlin.random.Random` v2 @kind this, `byte`[] v3 @kind object) @signature `Lkotlin/random/Random;.nextBytes:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L133904.  v0:= "array" @kind object;
  #L133908.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L13390e.  v0:= length @variable v3;
  #L133910.  v1:= 0I;
  #L133912.  call temp:= `nextBytes`(v2, v3, v1, v0) @signature `Lkotlin/random/Random;.nextBytes:([BII)[B` @kind virtual;
  #L133918.  v3:= temp @kind object;
  #L13391a.  return v3 @kind object;
}
procedure `byte`[] `nextBytes`(`kotlin.random.Random` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lkotlin/random/Random;.nextBytes:([BII)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13392c.  v0:= "array" @kind object;
  #L133930.  call `checkNotNullParameter`(v7, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L133936.  v0:= length @variable v7;
  #L133938.  v1:= 0I;
  #L13393a.  v2:= 1I;
  #L13393c.  if v8 >= 0 then goto L133942;
  #L133940.  goto L133956;
  #L133942.  if v0 < v8 then goto L133956;
  #L133946.  v0:= length @variable v7;
  #L133948.  if v9 >= 0 then goto L13394e;
  #L13394c.  goto L133956;
  #L13394e.  if v0 < v9 then goto L133956;
  #L133952.  v0:= 1I;
  #L133954.  goto L133958;
  #L133956.  v0:= 0I;
  #L133958.  v3:= "fromIndex (" @kind object;
  #L13395c.  if v0 == 0 then goto L133a34;
  #L133960.  if v8 > v9 then goto L133966;
  #L133964.  goto L133968;
  #L133966.  v2:= 0I;
  #L133968.  if v2 == 0 then goto L1339e8;
  #L13396c.  v0:= v9 - v8 @kind int;
  #L133970.  v0:= v0 / 4;
  #L133974.  v2:= 0I;
  #L133976.  if v2 >= v0 then goto L1339bc;
  #L13397a.  call temp:= `nextInt`(v6) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L133980.  v3:= temp;
  #L133982.  v4:= (`byte`) v3 @kind i2b;
  #L133984.  v7[v8]:= v4 @kind byte;
  #L133988.  v4:= v8 + 1;
  #L13398c.  v5:= v3 ^>> 8;
  #L133990.  v5:= (`byte`) v5 @kind i2b;
  #L133992.  v7[v4]:= v5 @kind byte;
  #L133996.  v4:= v8 + 2;
  #L13399a.  v5:= v3 ^>> 16;
  #L13399e.  v5:= (`byte`) v5 @kind i2b;
  #L1339a0.  v7[v4]:= v5 @kind byte;
  #L1339a4.  v4:= v8 + 3;
  #L1339a8.  v3:= v3 ^>> 24;
  #L1339ac.  v3:= (`byte`) v3 @kind i2b;
  #L1339ae.  v7[v4]:= v3 @kind byte;
  #L1339b2.  v8:= v8 + 4;
  #L1339b6.  v2:= v2 + 1;
  #L1339ba.  goto L133976;
  #L1339bc.  v9:= v9 - v8 @kind int;
  #L1339be.  v0:= v9 * 8;
  #L1339c2.  call temp:= `nextBits`(v6, v0) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L1339c8.  v0:= temp;
  #L1339ca.  if v1 >= v9 then goto L1339e6;
  #L1339ce.  v2:= v8 + v1 @kind int;
  #L1339d2.  v3:= v1 * 8;
  #L1339d6.  v3:= v0 ^>> v3 @kind int;
  #L1339da.  v3:= (`byte`) v3 @kind i2b;
  #L1339dc.  v7[v2]:= v3 @kind byte;
  #L1339e0.  v1:= v1 + 1;
  #L1339e4.  goto L1339ca;
  #L1339e6.  return v7 @kind object;
  #L1339e8.  v7:= new `java.lang.StringBuilder`;
  #L1339ec.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1339f2.  call temp:= `append`(v7, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1339f8.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1339fe.  v8:= ") must be not greater than toIndex (" @kind object;
  #L133a02.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133a08.  call temp:= `append`(v7, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L133a0e.  v8:= ")." @kind object;
  #L133a12.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133a18.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L133a1e.  v7:= temp @kind object;
  #L133a20.  v8:= new `java.lang.IllegalArgumentException`;
  #L133a24.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L133a2a.  v7:= temp @kind object;
  #L133a2c.  call `<init>`(v8, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L133a32.  throw v8;
  #L133a34.  v0:= new `java.lang.StringBuilder`;
  #L133a38.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L133a3e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133a44.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L133a4a.  v8:= ") or toIndex (" @kind object;
  #L133a4e.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133a54.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L133a5a.  v8:= ") are out of range: 0.." @kind object;
  #L133a5e.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133a64.  v7:= length @variable v7;
  #L133a66.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L133a6c.  v7:= 46I;
  #L133a70.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L133a76.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L133a7c.  v7:= temp @kind object;
  #L133a7e.  v8:= new `java.lang.IllegalArgumentException`;
  #L133a82.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L133a88.  v7:= temp @kind object;
  #L133a8a.  call `<init>`(v8, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L133a90.  throw v8;
}
procedure `double` `nextDouble`(`kotlin.random.Random` v2 @kind this) @signature `Lkotlin/random/Random;.nextDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L133ac4.  v0:= 26I;
  #L133ac8.  call temp:= `nextBits`(v2, v0) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L133ace.  v0:= temp;
  #L133ad0.  v1:= 27I;
  #L133ad4.  call temp:= `nextBits`(v2, v1) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L133ada.  v1:= temp;
  #L133adc.  call temp:= `doubleFromParts`(v0, v1) @signature `Lkotlin/random/PlatformRandomKt;.doubleFromParts:(II)D` @kind static;
  #L133ae2.  v0:= temp @kind wide;
  #L133ae4.  return v0 @kind wide;
}
procedure `double` `nextDouble`(`kotlin.random.Random` v2 @kind this, `double` v3 ) @signature `Lkotlin/random/Random;.nextDouble:(D)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L133af8.  v0:= 0L;
  #L133afc.  call temp:= `nextDouble`(v2, v0, v3) @signature `Lkotlin/random/Random;.nextDouble:(DD)D` @kind virtual;
  #L133b02.  v3:= temp @kind wide;
  #L133b04.  return v3 @kind wide;
}
procedure `double` `nextDouble`(`kotlin.random.Random` v6 @kind this, `double` v7 , `double` v9 ) @signature `Lkotlin/random/Random;.nextDouble:(DD)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L133b18.  call `checkRangeBounds`(v7, v9) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(DD)V` @kind static;
  #L133b1e.  v0:= v9 - v7 @kind double;
  #L133b22.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L133b28.  v2:= temp;
  #L133b2a.  if v2 == 0 then goto L133b94;
  #L133b2e.  call temp:= `isInfinite`(v7) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L133b34.  v2:= temp;
  #L133b36.  v3:= 1I;
  #L133b38.  v4:= 0I;
  #L133b3a.  if v2 != 0 then goto L133b4e;
  #L133b3e.  call temp:= `isNaN`(v7) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L133b44.  v2:= temp;
  #L133b46.  if v2 != 0 then goto L133b4e;
  #L133b4a.  v2:= 1I;
  #L133b4c.  goto L133b50;
  #L133b4e.  v2:= 0I;
  #L133b50.  if v2 == 0 then goto L133b94;
  #L133b54.  call temp:= `isInfinite`(v9) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L133b5a.  v2:= temp;
  #L133b5c.  if v2 != 0 then goto L133b6e;
  #L133b60.  call temp:= `isNaN`(v9) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L133b66.  v2:= temp;
  #L133b68.  if v2 != 0 then goto L133b6e;
  #L133b6c.  goto L133b70;
  #L133b6e.  v3:= 0I;
  #L133b70.  if v3 == 0 then goto L133b94;
  #L133b74.  call temp:= `nextDouble`(v6) @signature `Lkotlin/random/Random;.nextDouble:()D` @kind virtual;
  #L133b7a.  v0:= temp @kind wide;
  #L133b7c.  v2:= 2I;
  #L133b7e.  v2:= (`double`) v2 @kind i2d;
  #L133b80.  v4:= v9 / v2 @kind double;
  #L133b84.  v2:= v7 / v2 @kind double;
  #L133b88.  v4:= v4 - v2 @kind double;
  #L133b8a.  v0:= v0 * v4 @kind double;
  #L133b8e.  v7:= v7 + v0 @kind double;
  #L133b90.  v7:= v7 + v0 @kind double;
  #L133b92.  goto L133ba2;
  #L133b94.  call temp:= `nextDouble`(v6) @signature `Lkotlin/random/Random;.nextDouble:()D` @kind virtual;
  #L133b9a.  v2:= temp @kind wide;
  #L133b9c.  v2:= v2 * v0 @kind double;
  #L133ba0.  v7:= v7 + v2 @kind double;
  #L133ba2.  v0:= dcmpl(v7, v9);
  #L133ba6.  if v0 < 0 then goto L133bb6;
  #L133baa.  v7:= -InfinityD;
  #L133bae.  call temp:= `nextAfter`(v9, v7) @signature `Ljava/lang/Math;.nextAfter:(DD)D` @kind static;
  #L133bb4.  v7:= temp @kind wide;
  #L133bb6.  return v7 @kind wide;
}
procedure `float` `nextFloat`(`kotlin.random.Random` v2 @kind this) @signature `Lkotlin/random/Random;.nextFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L133bc8.  v0:= 24I;
  #L133bcc.  call temp:= `nextBits`(v2, v0) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L133bd2.  v0:= temp;
  #L133bd4.  v0:= (`float`) v0 @kind i2f;
  #L133bd6.  v1:= 16777216I;
  #L133bda.  v1:= (`float`) v1 @kind i2f;
  #L133bdc.  v0:= v0 / v1 @kind float;
  #L133bde.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.Random` v1 @kind this) @signature `Lkotlin/random/Random;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L133bf0.  v0:= 32I;
  #L133bf4.  call temp:= `nextBits`(v1, v0) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L133bfa.  v0:= temp;
  #L133bfc.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.Random` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/Random;.nextInt:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L133c10.  v0:= 0I;
  #L133c12.  call temp:= `nextInt`(v1, v0, v2) @signature `Lkotlin/random/Random;.nextInt:(II)I` @kind virtual;
  #L133c18.  v2:= temp;
  #L133c1a.  return v2;
}
procedure `int` `nextInt`(`kotlin.random.Random` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lkotlin/random/Random;.nextInt:(II)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L133c2c.  call `checkRangeBounds`(v4, v5) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(II)V` @kind static;
  #L133c32.  v0:= v5 - v4 @kind int;
  #L133c36.  if v0 > 0 then goto L133c58;
  #L133c3a.  v1:= -2147483648I;
  #L133c3e.  if v0 != v1 then goto L133c44;
  #L133c42.  goto L133c58;
  #L133c44.  call temp:= `nextInt`(v3) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L133c4a.  v0:= temp;
  #L133c4c.  if v4 <= v0 then goto L133c52;
  #L133c50.  goto L133c44;
  #L133c52.  if v5 <= v0 then goto L133c44;
  #L133c56.  return v0;
  #L133c58.  v5:= -v0 @kind int;
  #L133c5a.  v5:= v5 ^& v0 @kind int;
  #L133c5c.  if v5 != v0 then goto L133c72;
  #L133c60.  call temp:= `fastLog2`(v0) @signature `Lkotlin/random/RandomKt;.fastLog2:(I)I` @kind static;
  #L133c66.  v5:= temp;
  #L133c68.  call temp:= `nextBits`(v3, v5) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L133c6e.  v5:= temp;
  #L133c70.  goto L133c90;
  #L133c72.  call temp:= `nextInt`(v3) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L133c78.  v5:= temp;
  #L133c7a.  v5:= v5 ^>> 1;
  #L133c7e.  v1:= v5 %% v0 @kind int;
  #L133c82.  v5:= v5 - v1 @kind int;
  #L133c84.  v2:= v0 + -1;
  #L133c88.  v5:= v5 + v2 @kind int;
  #L133c8a.  if v5 < 0 then goto L133c72;
  #L133c8e.  v5:= v1;
  #L133c90.  v4:= v4 + v5 @kind int;
  #L133c92.  return v4;
}
procedure `long` `nextLong`(`kotlin.random.Random` v4 @kind this) @signature `Lkotlin/random/Random;.nextLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L133cbc.  call temp:= `nextInt`(v4) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L133cc2.  v0:= temp;
  #L133cc4.  v0:= (`long`) v0 @kind i2l;
  #L133cc6.  v2:= 32I;
  #L133cca.  v0:= v0 ^< v2 @kind long;
  #L133ccc.  call temp:= `nextInt`(v4) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L133cd2.  v2:= temp;
  #L133cd4.  v2:= (`long`) v2 @kind i2l;
  #L133cd6.  v0:= v0 + v2 @kind long;
  #L133cd8.  return v0 @kind wide;
}
procedure `long` `nextLong`(`kotlin.random.Random` v2 @kind this, `long` v3 ) @signature `Lkotlin/random/Random;.nextLong:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L133cec.  v0:= 0L;
  #L133cf0.  call temp:= `nextLong`(v2, v0, v3) @signature `Lkotlin/random/Random;.nextLong:(JJ)J` @kind virtual;
  #L133cf6.  v3:= temp @kind wide;
  #L133cf8.  return v3 @kind wide;
}
procedure `long` `nextLong`(`kotlin.random.Random` v9 @kind this, `long` v10 , `long` v12 ) @signature `Lkotlin/random/Random;.nextLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L133d0c.  call `checkRangeBounds`(v10, v12) @signature `Lkotlin/random/RandomKt;.checkRangeBounds:(JJ)V` @kind static;
  #L133d12.  v0:= v12 - v10 @kind long;
  #L133d16.  v2:= 0L;
  #L133d1a.  v4:= lcmp(v0, v2);
  #L133d1e.  if v4 <= 0 then goto L133db8;
  #L133d22.  v12:= -v0 @kind long;
  #L133d24.  v12:= v12 ^& v0 @kind long;
  #L133d26.  v4:= 1I;
  #L133d28.  v5:= lcmp(v12, v0);
  #L133d2c.  if v5 != 0 then goto L133d90;
  #L133d30.  v12:= (`int`) v0 @kind l2i;
  #L133d32.  v13:= 32I;
  #L133d36.  v0:= v0 ^>> v13 @kind long;
  #L133d38.  v1:= (`int`) v0 @kind l2i;
  #L133d3a.  v2:= 4294967295L;
  #L133d44.  if v12 == 0 then goto L133d5e;
  #L133d48.  call temp:= `fastLog2`(v12) @signature `Lkotlin/random/RandomKt;.fastLog2:(I)I` @kind static;
  #L133d4e.  v12:= temp;
  #L133d50.  call temp:= `nextBits`(v9, v12) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L133d56.  v12:= temp;
  #L133d58.  v12:= (`long`) v12 @kind i2l;
  #L133d5a.  v12:= v12 ^& v2 @kind long;
  #L133d5c.  goto L133db4;
  #L133d5e.  if v1 != v4 then goto L133d6c;
  #L133d62.  call temp:= `nextInt`(v9) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L133d68.  v12:= temp;
  #L133d6a.  goto L133d58;
  #L133d6c.  call temp:= `fastLog2`(v1) @signature `Lkotlin/random/RandomKt;.fastLog2:(I)I` @kind static;
  #L133d72.  v12:= temp;
  #L133d74.  call temp:= `nextBits`(v9, v12) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L133d7a.  v12:= temp;
  #L133d7c.  v0:= (`long`) v12 @kind i2l;
  #L133d7e.  v12:= v0 ^< v13 @kind long;
  #L133d82.  call temp:= `nextInt`(v9) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L133d88.  v0:= temp;
  #L133d8a.  v0:= (`long`) v0 @kind i2l;
  #L133d8c.  v12:= v12 + v0 @kind long;
  #L133d8e.  goto L133db4;
  #L133d90.  call temp:= `nextLong`(v9) @signature `Lkotlin/random/Random;.nextLong:()J` @kind virtual;
  #L133d96.  v12:= temp @kind wide;
  #L133d98.  v12:= v12 ^>> v4 @kind long;
  #L133d9a.  v5:= v12 %% v0 @kind long;
  #L133d9e.  v12:= v12 - v5 @kind long;
  #L133da0.  v7:= 1L;
  #L133da4.  v7:= v0 - v7 @kind long;
  #L133da8.  v12:= v12 + v7 @kind long;
  #L133daa.  v7:= lcmp(v12, v2);
  #L133dae.  if v7 < 0 then goto L133d90;
  #L133db2.  v12:= v5 @kind wide;
  #L133db4.  v10:= v10 + v12 @kind long;
  #L133db6.  return v10 @kind wide;
  #L133db8.  call temp:= `nextLong`(v9) @signature `Lkotlin/random/Random;.nextLong:()J` @kind virtual;
  #L133dbe.  v0:= temp @kind wide;
  #L133dc0.  v2:= lcmp(v10, v0);
  #L133dc4.  if v2 <= 0 then goto L133dca;
  #L133dc8.  goto L133db8;
  #L133dca.  v2:= lcmp(v12, v0);
  #L133dce.  if v2 <= 0 then goto L133db8;
  #L133dd2.  return v0 @kind wide;
}
