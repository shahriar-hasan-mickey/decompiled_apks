record `kotlin.random.a` @kind class @AccessFlag FINAL extends `java.util.Random` @kind class {
  `boolean` `kotlin.random.a.a` @AccessFlag PRIVATE;
  `kotlin.random.Random` `kotlin.random.a.b` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@kotlin.random.a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/random/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L1330b8.  return @kind void;
}
procedure `void` `<init>`(`kotlin.random.a` v1 @kind this, `kotlin.random.Random` v2 @kind object) @signature `Lkotlin/random/a;.<init>:(Lkotlin/random/Random;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1330cc.  v0:= "impl" @kind object;
  #L1330d0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1330d6.  call `<init>`(v1) @signature `Ljava/util/Random;.<init>:()V` @kind direct;
  #L1330dc.  v1.`kotlin.random.a.b` @type ^`kotlin.random.Random` := v2 @kind object;
  #L1330e0.  return @kind void;
}
procedure `kotlin.random.Random` `a`(`kotlin.random.a` v1 @kind this) @signature `Lkotlin/random/a;.a:()Lkotlin/random/Random;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L133080.  v0:= v1.`kotlin.random.a.b` @type ^`kotlin.random.Random` @kind object;
  #L133084.  return v0 @kind object;
}
procedure `int` `next`(`kotlin.random.a` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/a;.next:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L133020.  v0:= v1.`kotlin.random.a.b` @type ^`kotlin.random.Random` @kind object;
  #L133024.  call temp:= `nextBits`(v0, v2) @signature `Lkotlin/random/Random;.nextBits:(I)I` @kind virtual;
  #L13302a.  v2:= temp;
  #L13302c.  return v2;
}
procedure `boolean` `nextBoolean`(`kotlin.random.a` v1 @kind this) @signature `Lkotlin/random/a;.nextBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L132fc0.  v0:= v1.`kotlin.random.a.b` @type ^`kotlin.random.Random` @kind object;
  #L132fc4.  call temp:= `nextBoolean`(v0) @signature `Lkotlin/random/Random;.nextBoolean:()Z` @kind virtual;
  #L132fca.  v0:= temp;
  #L132fcc.  return v0;
}
procedure `void` `nextBytes`(`kotlin.random.a` v1 @kind this, `byte`[] v2 @kind object) @signature `Lkotlin/random/a;.nextBytes:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1330f4.  v0:= "bytes" @kind object;
  #L1330f8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1330fe.  v0:= v1.`kotlin.random.a.b` @type ^`kotlin.random.Random` @kind object;
  #L133102.  call temp:= `nextBytes`(v0, v2) @signature `Lkotlin/random/Random;.nextBytes:([B)[B` @kind virtual;
  #L133108.  return @kind void;
}
procedure `double` `nextDouble`(`kotlin.random.a` v2 @kind this) @signature `Lkotlin/random/a;.nextDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L132fe0.  v0:= v2.`kotlin.random.a.b` @type ^`kotlin.random.Random` @kind object;
  #L132fe4.  call temp:= `nextDouble`(v0) @signature `Lkotlin/random/Random;.nextDouble:()D` @kind virtual;
  #L132fea.  v0:= temp @kind wide;
  #L132fec.  return v0 @kind wide;
}
procedure `float` `nextFloat`(`kotlin.random.a` v1 @kind this) @signature `Lkotlin/random/a;.nextFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L133000.  v0:= v1.`kotlin.random.a.b` @type ^`kotlin.random.Random` @kind object;
  #L133004.  call temp:= `nextFloat`(v0) @signature `Lkotlin/random/Random;.nextFloat:()F` @kind virtual;
  #L13300a.  v0:= temp;
  #L13300c.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.a` v1 @kind this) @signature `Lkotlin/random/a;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L133040.  v0:= v1.`kotlin.random.a.b` @type ^`kotlin.random.Random` @kind object;
  #L133044.  call temp:= `nextInt`(v0) @signature `Lkotlin/random/Random;.nextInt:()I` @kind virtual;
  #L13304a.  v0:= temp;
  #L13304c.  return v0;
}
procedure `int` `nextInt`(`kotlin.random.a` v1 @kind this, `int` v2 ) @signature `Lkotlin/random/a;.nextInt:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L133060.  v0:= v1.`kotlin.random.a.b` @type ^`kotlin.random.Random` @kind object;
  #L133064.  call temp:= `nextInt`(v0, v2) @signature `Lkotlin/random/Random;.nextInt:(I)I` @kind virtual;
  #L13306a.  v2:= temp;
  #L13306c.  return v2;
}
procedure `long` `nextLong`(`kotlin.random.a` v2 @kind this) @signature `Lkotlin/random/a;.nextLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L133098.  v0:= v2.`kotlin.random.a.b` @type ^`kotlin.random.Random` @kind object;
  #L13309c.  call temp:= `nextLong`(v0) @signature `Lkotlin/random/Random;.nextLong:()J` @kind virtual;
  #L1330a2.  v0:= temp @kind wide;
  #L1330a4.  return v0 @kind wide;
}
procedure `void` `setSeed`(`kotlin.random.a` v0 @kind this, `long` v1 ) @signature `Lkotlin/random/a;.setSeed:(J)V` @AccessFlag PUBLIC {
    temp;

  #L13311c.  v1:= v0.`kotlin.random.a.a` @type ^`boolean` @kind boolean;
  #L133120.  if v1 != 0 then goto L13312c;
  #L133124.  v1:= 1I;
  #L133126.  v0.`kotlin.random.a.a` @type ^`boolean` := v1 @kind boolean;
  #L13312a.  return @kind void;
  #L13312c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L133130.  v2:= "Setting seed is not supported." @kind object;
  #L133134.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13313a.  throw v1;
}
