record `kotlin.random.b` @kind class @AccessFlag FINAL extends `kotlin.random.AbstractPlatformRandom` @kind class, `java.io.Serializable` @kind interface {
  `java.util.Random` `kotlin.random.b.b` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@kotlin.random.b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/random/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L133224.  return @kind void;
}
procedure `void` `<init>`(`kotlin.random.b` v1 @kind this, `java.util.Random` v2 @kind object) @signature `Lkotlin/random/b;.<init>:(Ljava/util/Random;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L133238.  v0:= "impl" @kind object;
  #L13323c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L133242.  call `<init>`(v1) @signature `Lkotlin/random/AbstractPlatformRandom;.<init>:()V` @kind direct;
  #L133248.  v1.`kotlin.random.b.b` @type ^`java.util.Random` := v2 @kind object;
  #L13324c.  return @kind void;
}
procedure `java.util.Random` `getImpl`(`kotlin.random.b` v1 @kind this) @signature `Lkotlin/random/b;.getImpl:()Ljava/util/Random;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13320c.  v0:= v1.`kotlin.random.b.b` @type ^`java.util.Random` @kind object;
  #L133210.  return v0 @kind object;
}
