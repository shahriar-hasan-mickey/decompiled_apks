record `kotlin.text.Regex$fromInt$$inlined$apply$lambda$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function1` @kind interface {
  `int` `kotlin.text.Regex$fromInt$$inlined$apply$lambda$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.text.Regex$fromInt$$inlined$apply$lambda$1` v0 @kind this, `int` v1 ) @signature `Lkotlin/text/Regex$fromInt$$inlined$apply$lambda$1;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1448d0.  v0.`kotlin.text.Regex$fromInt$$inlined$apply$lambda$1.a` @type ^`int` := v1;
  #L1448d4.  v1:= 1I;
  #L1448d6.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L1448dc.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlin.text.Regex$fromInt$$inlined$apply$lambda$1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/text/Regex$fromInt$$inlined$apply$lambda$1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L1448a8.  v1:= (`java.lang.Enum`) v1 @kind object;
  #L1448ac.  call temp:= `invoke`(v0, v1) @signature `Lkotlin/text/Regex$fromInt$$inlined$apply$lambda$1;.invoke:(Ljava/lang/Enum;)Z` @kind virtual;
  #L1448b2.  v1:= temp;
  #L1448b4.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1448ba.  v1:= temp @kind object;
  #L1448bc.  return v1 @kind object;
}
procedure `boolean` `invoke`(`kotlin.text.Regex$fromInt$$inlined$apply$lambda$1` v2 @kind this, `java.lang.Enum` v3 @kind object) @signature `Lkotlin/text/Regex$fromInt$$inlined$apply$lambda$1;.invoke:(Ljava/lang/Enum;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L144870.  v0:= v2.`kotlin.text.Regex$fromInt$$inlined$apply$lambda$1.a` @type ^`int`;
  #L144874.  v3:= (`kotlin.text.c`) v3 @kind object;
  #L144878.  call temp:= `getMask`(v3) @signature `Lkotlin/text/c;.getMask:()I` @kind interface;
  #L14487e.  v1:= temp;
  #L144880.  v0:= v0 ^& v1 @kind int;
  #L144882.  call temp:= `getValue`(v3) @signature `Lkotlin/text/c;.getValue:()I` @kind interface;
  #L144888.  v3:= temp;
  #L14488a.  if v0 != v3 then goto L144892;
  #L14488e.  v3:= 1I;
  #L144890.  goto L144894;
  #L144892.  v3:= 0I;
  #L144894.  return v3;
}
