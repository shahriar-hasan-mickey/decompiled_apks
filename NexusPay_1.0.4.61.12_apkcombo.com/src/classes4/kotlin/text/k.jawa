record `kotlin.text.k` @kind class @AccessFlag  extends `kotlin.text.j` @kind class {
}
procedure `void` `<init>`(`kotlin.text.k` v0 @kind this) @signature `Lkotlin/text/k;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1463c0.  call `<init>`(v0) @signature `Lkotlin/text/j;.<init>:()V` @kind direct;
  #L1463c6.  return @kind void;
}
procedure `java.math.BigDecimal` `toBigDecimalOrNull`(`java.lang.String` v2 @kind object) @signature `Lkotlin/text/k;.toBigDecimalOrNull:(Ljava/lang/String;)Ljava/math/BigDecimal;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L146264.  v0:= "$this$toBigDecimalOrNull" @kind object;
  #L146268.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14626e.  v0:= 0I;
  #L146270.  v1:= `@@kotlin.text.d.a` @type ^`kotlin.text.Regex` @kind object;
  #L146274.  call temp:= `matches`(v1, v2) @signature `Lkotlin/text/Regex;.matches:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L14627a.  v1:= temp;
  #L14627c.  if v1 == 0 then goto L14628c;
  #L146280.  v1:= new `java.math.BigDecimal`;
  #L146284.  call `<init>`(v1, v2) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14628a.  v0:= v1 @kind object;
  #L14628c.  return v0 @kind object;
  catch `java.lang.NumberFormatException` @[L146270..L14628a] goto L14628c;
}
procedure `java.math.BigDecimal` `toBigDecimalOrNull`(`java.lang.String` v2 @kind object, `java.math.MathContext` v3 @kind object) @signature `Lkotlin/text/k;.toBigDecimalOrNull:(Ljava/lang/String;Ljava/math/MathContext;)Ljava/math/BigDecimal;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L1462b0.  v0:= "$this$toBigDecimalOrNull" @kind object;
  #L1462b4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1462ba.  v0:= "mathContext" @kind object;
  #L1462be.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1462c4.  v0:= 0I;
  #L1462c6.  v1:= `@@kotlin.text.d.a` @type ^`kotlin.text.Regex` @kind object;
  #L1462ca.  call temp:= `matches`(v1, v2) @signature `Lkotlin/text/Regex;.matches:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L1462d0.  v1:= temp;
  #L1462d2.  if v1 == 0 then goto L1462e2;
  #L1462d6.  v1:= new `java.math.BigDecimal`;
  #L1462da.  call `<init>`(v1, v2, v3) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;Ljava/math/MathContext;)V` @kind direct;
  #L1462e0.  v0:= v1 @kind object;
  #L1462e2.  return v0 @kind object;
  catch `java.lang.NumberFormatException` @[L1462c6..L1462e0] goto L1462e2;
}
procedure `java.math.BigInteger` `toBigIntegerOrNull`(`java.lang.String` v1 @kind object) @signature `Lkotlin/text/k;.toBigIntegerOrNull:(Ljava/lang/String;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L146304.  v0:= "$this$toBigIntegerOrNull" @kind object;
  #L146308.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14630e.  v0:= 10I;
  #L146312.  call temp:= `toBigIntegerOrNull`(v1, v0) @signature `Lkotlin/text/k;.toBigIntegerOrNull:(Ljava/lang/String;I)Ljava/math/BigInteger;` @kind static;
  #L146318.  v1:= temp @kind object;
  #L14631a.  return v1 @kind object;
}
procedure `java.math.BigInteger` `toBigIntegerOrNull`(`java.lang.String` v6 @kind object, `int` v7 ) @signature `Lkotlin/text/k;.toBigIntegerOrNull:(Ljava/lang/String;I)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14632c.  v0:= "$this$toBigIntegerOrNull" @kind object;
  #L146330.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L146336.  call temp:= `checkRadix`(v7) @signature `Lkotlin/text/CharsKt;.checkRadix:(I)I` @kind static;
  #L14633c.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L146342.  v0:= temp;
  #L146344.  v1:= 0I;
  #L146346.  if v0 == 0 then goto L1463ae;
  #L14634a.  v2:= 0I;
  #L14634c.  v3:= 1I;
  #L14634e.  if v0 == v3 then goto L146384;
  #L146352.  call temp:= `charAt`(v6, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L146358.  v4:= temp;
  #L14635a.  v5:= 45I;
  #L14635e.  if v4 != v5 then goto L146364;
  #L146362.  v2:= 1I;
  #L146364.  if v2 >= v0 then goto L14639a;
  #L146368.  call temp:= `charAt`(v6, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L14636e.  v3:= temp;
  #L146370.  call temp:= `digitOf`(v3, v7) @signature `Lkotlin/text/a;.digitOf:(CI)I` @kind static;
  #L146376.  v3:= temp;
  #L146378.  if v3 >= 0 then goto L14637e;
  #L14637c.  return v1 @kind object;
  #L14637e.  v2:= v2 + 1;
  #L146382.  goto L146364;
  #L146384.  call temp:= `charAt`(v6, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L14638a.  v0:= temp;
  #L14638c.  call temp:= `digitOf`(v0, v7) @signature `Lkotlin/text/a;.digitOf:(CI)I` @kind static;
  #L146392.  v0:= temp;
  #L146394.  if v0 >= 0 then goto L14639a;
  #L146398.  return v1 @kind object;
  #L14639a.  v0:= new `java.math.BigInteger`;
  #L14639e.  call temp:= `checkRadix`(v7) @signature `Lkotlin/text/CharsKt;.checkRadix:(I)I` @kind static;
  #L1463a4.  v7:= temp;
  #L1463a6.  call `<init>`(v0, v6, v7) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1463ac.  return v0 @kind object;
  #L1463ae.  return v1 @kind object;
}
procedure `java.lang.Double` `toDoubleOrNull`(`java.lang.String` v3 @kind object) @signature `Lkotlin/text/k;.toDoubleOrNull:(Ljava/lang/String;)Ljava/lang/Double;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1461c4.  v0:= "$this$toDoubleOrNull" @kind object;
  #L1461c8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1461ce.  v0:= 0I;
  #L1461d0.  v1:= `@@kotlin.text.d.a` @type ^`kotlin.text.Regex` @kind object;
  #L1461d4.  call temp:= `matches`(v1, v3) @signature `Lkotlin/text/Regex;.matches:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L1461da.  v1:= temp;
  #L1461dc.  if v1 == 0 then goto L1461f2;
  #L1461e0.  call temp:= `parseDouble`(v3) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L1461e6.  v1:= temp @kind wide;
  #L1461e8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L1461ee.  v3:= temp @kind object;
  #L1461f0.  v0:= v3 @kind object;
  #L1461f2.  return v0 @kind object;
  catch `java.lang.NumberFormatException` @[L1461d0..L1461f0] goto L1461f2;
}
procedure `java.lang.Float` `toFloatOrNull`(`java.lang.String` v2 @kind object) @signature `Lkotlin/text/k;.toFloatOrNull:(Ljava/lang/String;)Ljava/lang/Float;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L146214.  v0:= "$this$toFloatOrNull" @kind object;
  #L146218.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14621e.  v0:= 0I;
  #L146220.  v1:= `@@kotlin.text.d.a` @type ^`kotlin.text.Regex` @kind object;
  #L146224.  call temp:= `matches`(v1, v2) @signature `Lkotlin/text/Regex;.matches:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L14622a.  v1:= temp;
  #L14622c.  if v1 == 0 then goto L146242;
  #L146230.  call temp:= `parseFloat`(v2) @signature `Ljava/lang/Float;.parseFloat:(Ljava/lang/String;)F` @kind static;
  #L146236.  v2:= temp;
  #L146238.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L14623e.  v2:= temp @kind object;
  #L146240.  v0:= v2 @kind object;
  #L146242.  return v0 @kind object;
  catch `java.lang.NumberFormatException` @[L146220..L146240] goto L146242;
}
