record `kotlin.text.a` @kind class @AccessFlag  {
}
procedure `void` `<init>`(`kotlin.text.a` v0 @kind this) @signature `Lkotlin/text/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L143534.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L14353a.  return @kind void;
}
procedure `int` `checkRadix`(`int` v5 ) @signature `Lkotlin/text/a;.checkRadix:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1432c0.  v0:= 2I;
  #L1432c2.  v1:= 36I;
  #L1432c6.  if v0 > v5 then goto L1432d0;
  #L1432ca.  if v1 < v5 then goto L1432d0;
  #L1432ce.  return v5;
  #L1432d0.  v2:= new `java.lang.IllegalArgumentException`;
  #L1432d4.  v3:= new `java.lang.StringBuilder`;
  #L1432d8.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1432de.  v4:= "radix " @kind object;
  #L1432e2.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1432e8.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1432ee.  v5:= " was not in valid range " @kind object;
  #L1432f2.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1432f8.  v5:= new `kotlin.ranges.IntRange`;
  #L1432fc.  call `<init>`(v5, v0, v1) @signature `Lkotlin/ranges/IntRange;.<init>:(II)V` @kind direct;
  #L143302.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143308.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14330e.  v5:= temp @kind object;
  #L143310.  call `<init>`(v2, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L143316.  throw v2;
}
procedure `int` `digitOf`(`char` v0 , `int` v1 ) @signature `Lkotlin/text/a;.digitOf:(CI)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L143328.  call temp:= `digit`(v0, v1) @signature `Ljava/lang/Character;.digit:(II)I` @kind static;
  #L14332e.  v0:= temp;
  #L143330.  return v0;
}
procedure `kotlin.text.CharCategory` `getCategory`(`char` v1 ) @signature `Lkotlin/text/a;.getCategory:(C)Lkotlin/text/CharCategory;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1434e4.  v0:= `@@kotlin.text.CharCategory.Companion` @type ^`kotlin.text.CharCategory$Companion` @kind object;
  #L1434e8.  call temp:= `getType`(v1) @signature `Ljava/lang/Character;.getType:(C)I` @kind static;
  #L1434ee.  v1:= temp;
  #L1434f0.  call temp:= `valueOf`(v0, v1) @signature `Lkotlin/text/CharCategory$Companion;.valueOf:(I)Lkotlin/text/CharCategory;` @kind virtual;
  #L1434f6.  v1:= temp @kind object;
  #L1434f8.  return v1 @kind object;
}
procedure `kotlin.text.CharDirectionality` `getDirectionality`(`char` v1 ) @signature `Lkotlin/text/a;.getDirectionality:(C)Lkotlin/text/CharDirectionality;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L14350c.  v0:= `@@kotlin.text.CharDirectionality.Companion` @type ^`kotlin.text.CharDirectionality$Companion` @kind object;
  #L143510.  call temp:= `getDirectionality`(v1) @signature `Ljava/lang/Character;.getDirectionality:(C)B` @kind static;
  #L143516.  v1:= temp;
  #L143518.  call temp:= `valueOf`(v0, v1) @signature `Lkotlin/text/CharDirectionality$Companion;.valueOf:(I)Lkotlin/text/CharDirectionality;` @kind virtual;
  #L14351e.  v1:= temp @kind object;
  #L143520.  return v1 @kind object;
}
procedure `boolean` `isWhitespace`(`char` v1 ) @signature `Lkotlin/text/a;.isWhitespace:(C)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L14328c.  call temp:= `isWhitespace`(v1) @signature `Ljava/lang/Character;.isWhitespace:(C)Z` @kind static;
  #L143292.  v0:= temp;
  #L143294.  if v0 != 0 then goto L1432aa;
  #L143298.  call temp:= `isSpaceChar`(v1) @signature `Ljava/lang/Character;.isSpaceChar:(C)Z` @kind static;
  #L14329e.  v1:= temp;
  #L1432a0.  if v1 == 0 then goto L1432a6;
  #L1432a4.  goto L1432aa;
  #L1432a6.  v1:= 0I;
  #L1432a8.  goto L1432ac;
  #L1432aa.  v1:= 1I;
  #L1432ac.  return v1;
}
procedure `java.lang.String` `lowercase`(`char` v1 , `java.util.Locale` v2 @kind object) @signature `Lkotlin/text/a;.lowercase:(CLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L143344.  v0:= "locale" @kind object;
  #L143348.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14334e.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L143354.  v1:= temp @kind object;
  #L143356.  if v1 == 0 then goto L14336e;
  #L14335a.  call temp:= `toLowerCase`(v1, v2) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L143360.  v1:= temp @kind object;
  #L143362.  v2:= "(this as java.lang.String).toLowerCase(locale)" @kind object;
  #L143366.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14336c.  return v1 @kind object;
  #L14336e.  v1:= new `java.lang.NullPointerException`;
  #L143372.  v2:= "null cannot be cast to non-null type java.lang.String" @kind object;
  #L143376.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14337c.  throw v1;
}
procedure `java.lang.String` `titlecase`(`char` v3 , `java.util.Locale` v4 @kind object) @signature `Lkotlin/text/a;.titlecase:(CLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L143390.  v0:= "locale" @kind object;
  #L143394.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14339a.  call temp:= `uppercase`(v3, v4) @signature `Lkotlin/text/a;.uppercase:(CLjava/util/Locale;)Ljava/lang/String;` @kind static;
  #L1433a0.  v4:= temp @kind object;
  #L1433a2.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1433a8.  v0:= temp;
  #L1433aa.  v1:= "null cannot be cast to non-null type java.lang.String" @kind object;
  #L1433ae.  v2:= 1I;
  #L1433b0.  if v0 <= v2 then goto L143438;
  #L1433b4.  v0:= 329I;
  #L1433b8.  if v3 != v0 then goto L1433be;
  #L1433bc.  goto L14341e;
  #L1433be.  v3:= 0I;
  #L1433c0.  call temp:= `charAt`(v4, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1433c6.  v3:= temp;
  #L1433c8.  if v4 == 0 then goto L14342c;
  #L1433cc.  call temp:= `substring`(v4, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L1433d2.  v4:= temp @kind object;
  #L1433d4.  v0:= "(this as java.lang.String).substring(startIndex)" @kind object;
  #L1433d8.  call `checkNotNullExpressionValue`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1433de.  if v4 == 0 then goto L143420;
  #L1433e2.  v0:= `@@java.util.Locale.ROOT` @type ^`java.util.Locale` @kind object;
  #L1433e6.  call temp:= `toLowerCase`(v4, v0) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L1433ec.  v4:= temp @kind object;
  #L1433ee.  v0:= "(this as java.lang.Strin….toLowerCase(Locale.ROOT)" @kind object;
  #L1433f2.  call `checkNotNullExpressionValue`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1433f8.  v0:= new `java.lang.StringBuilder`;
  #L1433fc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143402.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L143408.  v3:= temp @kind object;
  #L14340a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143410.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143416.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14341c.  v4:= temp @kind object;
  #L14341e.  return v4 @kind object;
  #L143420.  v3:= new `java.lang.NullPointerException`;
  #L143424.  call `<init>`(v3, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14342a.  throw v3;
  #L14342c.  v3:= new `java.lang.NullPointerException`;
  #L143430.  call `<init>`(v3, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L143436.  throw v3;
  #L143438.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L14343e.  v0:= temp @kind object;
  #L143440.  if v0 == 0 then goto L14347c;
  #L143444.  v1:= `@@java.util.Locale.ROOT` @type ^`java.util.Locale` @kind object;
  #L143448.  call temp:= `toUpperCase`(v0, v1) @signature `Ljava/lang/String;.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L14344e.  v0:= temp @kind object;
  #L143450.  v1:= "(this as java.lang.Strin….toUpperCase(Locale.ROOT)" @kind object;
  #L143454.  call `checkNotNullExpressionValue`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14345a.  call temp:= `areEqual`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L143460.  v0:= temp;
  #L143462.  v0:= v0 ^~ v2 @kind int;
  #L143464.  if v0 == 0 then goto L14346a;
  #L143468.  return v4 @kind object;
  #L14346a.  call temp:= `toTitleCase`(v3) @signature `Ljava/lang/Character;.toTitleCase:(C)C` @kind static;
  #L143470.  v3:= temp;
  #L143472.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L143478.  v3:= temp @kind object;
  #L14347a.  return v3 @kind object;
  #L14347c.  v3:= new `java.lang.NullPointerException`;
  #L143480.  call `<init>`(v3, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L143486.  throw v3;
}
procedure `java.lang.String` `uppercase`(`char` v1 , `java.util.Locale` v2 @kind object) @signature `Lkotlin/text/a;.uppercase:(CLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L143498.  v0:= "locale" @kind object;
  #L14349c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1434a2.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L1434a8.  v1:= temp @kind object;
  #L1434aa.  if v1 == 0 then goto L1434c2;
  #L1434ae.  call temp:= `toUpperCase`(v1, v2) @signature `Ljava/lang/String;.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L1434b4.  v1:= temp @kind object;
  #L1434b6.  v2:= "(this as java.lang.String).toUpperCase(locale)" @kind object;
  #L1434ba.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1434c0.  return v1 @kind object;
  #L1434c2.  v1:= new `java.lang.NullPointerException`;
  #L1434c6.  v2:= "null cannot be cast to non-null type java.lang.String" @kind object;
  #L1434ca.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1434d0.  throw v1;
}
