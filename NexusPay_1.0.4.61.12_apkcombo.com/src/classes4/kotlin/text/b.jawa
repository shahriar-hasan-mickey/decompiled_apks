record `kotlin.text.b` @kind class @AccessFlag  extends `kotlin.text.a` @kind class {
}
procedure `void` `<init>`(`kotlin.text.b` v0 @kind this) @signature `Lkotlin/text/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L143864.  call `<init>`(v0) @signature `Lkotlin/text/a;.<init>:()V` @kind direct;
  #L14386a.  return @kind void;
}
procedure `char` `digitToChar`(`int` v3 ) @signature `Lkotlin/text/b;.digitToChar:(I)C` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1435f0.  if v3 < 0 then goto L143604;
  #L1435f4.  v0:= 9I;
  #L1435f8.  if v0 < v3 then goto L143604;
  #L1435fc.  v3:= v3 + 48;
  #L143600.  v3:= (`char`) v3 @kind i2c;
  #L143602.  return v3;
  #L143604.  v0:= new `java.lang.IllegalArgumentException`;
  #L143608.  v1:= new `java.lang.StringBuilder`;
  #L14360c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143612.  v2:= "Int " @kind object;
  #L143616.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14361c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L143622.  v3:= " is not a decimal digit" @kind object;
  #L143626.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14362c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L143632.  v3:= temp @kind object;
  #L143634.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14363a.  throw v0;
}
procedure `char` `digitToChar`(`int` v3 , `int` v4 ) @signature `Lkotlin/text/b;.digitToChar:(II)C` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L14364c.  v0:= 2I;
  #L14364e.  if v0 > v4 then goto L1436ba;
  #L143652.  v0:= 36I;
  #L143656.  if v0 < v4 then goto L1436ba;
  #L14365a.  if v3 < 0 then goto L14367c;
  #L14365e.  if v3 >= v4 then goto L14367c;
  #L143662.  v4:= 10I;
  #L143666.  if v3 >= v4 then goto L143670;
  #L14366a.  v3:= v3 + 48;
  #L14366e.  goto L143678;
  #L143670.  v3:= v3 + 65;
  #L143674.  v3:= (`char`) v3 @kind i2c;
  #L143676.  v3:= v3 - v4 @kind int;
  #L143678.  v3:= (`char`) v3 @kind i2c;
  #L14367a.  return v3;
  #L14367c.  v0:= new `java.lang.IllegalArgumentException`;
  #L143680.  v1:= new `java.lang.StringBuilder`;
  #L143684.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14368a.  v2:= "Digit " @kind object;
  #L14368e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143694.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L14369a.  v3:= " does not represent a valid digit in radix " @kind object;
  #L14369e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1436a4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1436aa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1436b0.  v3:= temp @kind object;
  #L1436b2.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1436b8.  throw v0;
  #L1436ba.  v3:= new `java.lang.IllegalArgumentException`;
  #L1436be.  v0:= new `java.lang.StringBuilder`;
  #L1436c2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1436c8.  v1:= "Invalid radix: " @kind object;
  #L1436cc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1436d2.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1436d8.  v4:= ". Valid radix values are in range 2..36" @kind object;
  #L1436dc.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1436e2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1436e8.  v4:= temp @kind object;
  #L1436ea.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1436f0.  throw v3;
}
procedure `int` `digitToInt`(`char` v3 ) @signature `Lkotlin/text/b;.digitToInt:(C)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L143704.  v0:= 10I;
  #L143708.  call temp:= `digitOf`(v3, v0) @signature `Lkotlin/text/a;.digitOf:(CI)I` @kind static;
  #L14370e.  v0:= temp;
  #L143710.  if v0 < 0 then goto L143716;
  #L143714.  return v0;
  #L143716.  v0:= new `java.lang.IllegalArgumentException`;
  #L14371a.  v1:= new `java.lang.StringBuilder`;
  #L14371e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143724.  v2:= "Char " @kind object;
  #L143728.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14372e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L143734.  v3:= " is not a decimal digit" @kind object;
  #L143738.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14373e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L143744.  v3:= temp @kind object;
  #L143746.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14374c.  throw v0;
}
procedure `int` `digitToInt`(`char` v3 , `int` v4 ) @signature `Lkotlin/text/b;.digitToInt:(CI)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L143760.  call temp:= `digitToIntOrNull`(v3, v4) @signature `Lkotlin/text/b;.digitToIntOrNull:(CI)Ljava/lang/Integer;` @kind static;
  #L143766.  v0:= temp @kind object;
  #L143768.  if v0 == 0 then goto L143776;
  #L14376c.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L143772.  v3:= temp;
  #L143774.  return v3;
  #L143776.  v0:= new `java.lang.IllegalArgumentException`;
  #L14377a.  v1:= new `java.lang.StringBuilder`;
  #L14377e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143784.  v2:= "Char " @kind object;
  #L143788.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14378e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L143794.  v3:= " is not a digit in the given radix=" @kind object;
  #L143798.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14379e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1437a4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1437aa.  v3:= temp @kind object;
  #L1437ac.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1437b2.  throw v0;
}
procedure `java.lang.Integer` `digitToIntOrNull`(`char` v1 ) @signature `Lkotlin/text/b;.digitToIntOrNull:(C)Ljava/lang/Integer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1437c4.  v0:= 10I;
  #L1437c8.  call temp:= `digitOf`(v1, v0) @signature `Lkotlin/text/a;.digitOf:(CI)I` @kind static;
  #L1437ce.  v1:= temp;
  #L1437d0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1437d6.  v1:= temp @kind object;
  #L1437d8.  call temp:= `intValue`(v1) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L1437de.  v0:= temp;
  #L1437e0.  if v0 < 0 then goto L1437e8;
  #L1437e4.  v0:= 1I;
  #L1437e6.  goto L1437ea;
  #L1437e8.  v0:= 0I;
  #L1437ea.  if v0 == 0 then goto L1437f0;
  #L1437ee.  goto L1437f2;
  #L1437f0.  v1:= 0I;
  #L1437f2.  return v1 @kind object;
}
procedure `java.lang.Integer` `digitToIntOrNull`(`char` v0 , `int` v1 ) @signature `Lkotlin/text/b;.digitToIntOrNull:(CI)Ljava/lang/Integer;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L143804.  call temp:= `checkRadix`(v1) @signature `Lkotlin/text/CharsKt;.checkRadix:(I)I` @kind static;
  #L14380a.  call temp:= `digitOf`(v0, v1) @signature `Lkotlin/text/a;.digitOf:(CI)I` @kind static;
  #L143810.  v0:= temp;
  #L143812.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L143818.  v0:= temp @kind object;
  #L14381a.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L143820.  v1:= temp;
  #L143822.  if v1 < 0 then goto L14382a;
  #L143826.  v1:= 1I;
  #L143828.  goto L14382c;
  #L14382a.  v1:= 0I;
  #L14382c.  if v1 == 0 then goto L143832;
  #L143830.  goto L143834;
  #L143832.  v0:= 0I;
  #L143834.  return v0 @kind object;
}
procedure `boolean` `equals`(`char` v2 , `char` v3 , `boolean` v4 ) @signature `Lkotlin/text/b;.equals:(CCZ)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L143570.  v0:= 1I;
  #L143572.  if v2 != v3 then goto L143578;
  #L143576.  return v0;
  #L143578.  v1:= 0I;
  #L14357a.  if v4 != 0 then goto L143580;
  #L14357e.  return v1;
  #L143580.  call temp:= `toUpperCase`(v2) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L143586.  v2:= temp;
  #L143588.  call temp:= `toUpperCase`(v3) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L14358e.  v3:= temp;
  #L143590.  if v2 == v3 then goto L1435ac;
  #L143594.  call temp:= `toLowerCase`(v2) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L14359a.  v2:= temp;
  #L14359c.  call temp:= `toLowerCase`(v3) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L1435a2.  v3:= temp;
  #L1435a4.  if v2 != v3 then goto L1435aa;
  #L1435a8.  goto L1435ac;
  #L1435aa.  v0:= 0I;
  #L1435ac.  return v0;
}
procedure `boolean` `equals$default`(`char` v0 , `char` v1 , `boolean` v2 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlin/text/b;.equals$default:(CCZILjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L14354c.  v3:= v3 ^& 2;
  #L143550.  if v3 == 0 then goto L143556;
  #L143554.  v2:= 0I;
  #L143556.  call temp:= `equals`(v0, v1, v2) @signature `Lkotlin/text/b;.equals:(CCZ)Z` @kind static;
  #L14355c.  v0:= temp;
  #L14355e.  return v0;
}
procedure `boolean` `isSurrogate`(`char` v1 ) @signature `Lkotlin/text/b;.isSurrogate:(C)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L1435c0.  v0:= 55296I;
  #L1435c6.  if v0 <= v1 then goto L1435cc;
  #L1435ca.  goto L1435da;
  #L1435cc.  v0:= 57343I;
  #L1435d2.  if v0 < v1 then goto L1435da;
  #L1435d6.  v1:= 1I;
  #L1435d8.  goto L1435dc;
  #L1435da.  v1:= 0I;
  #L1435dc.  return v1;
}
procedure `java.lang.String` `titlecase`(`char` v0 ) @signature `Lkotlin/text/b;.titlecase:(C)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L143848.  call temp:= `titlecaseImpl`(v0) @signature `Lkotlin/text/_OneToManyTitlecaseMappingsKt;.titlecaseImpl:(C)Ljava/lang/String;` @kind static;
  #L14384e.  v0:= temp @kind object;
  #L143850.  return v0 @kind object;
}
