record `kotlin.text.MatchGroup` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `kotlin.text.MatchGroup.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.ranges.IntRange` `kotlin.text.MatchGroup.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.text.MatchGroup` v1 @kind this, `java.lang.String` v2 @kind object, `kotlin.ranges.IntRange` v3 @kind object) @signature `Lkotlin/text/MatchGroup;.<init>:(Ljava/lang/String;Lkotlin/ranges/IntRange;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L143fe4.  v0:= "value" @kind object;
  #L143fe8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L143fee.  v0:= "range" @kind object;
  #L143ff2.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L143ff8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L143ffe.  v1.`kotlin.text.MatchGroup.a` @type ^`java.lang.String` := v2 @kind object;
  #L144002.  v1.`kotlin.text.MatchGroup.b` @type ^`kotlin.ranges.IntRange` := v3 @kind object;
  #L144006.  return @kind void;
}
procedure `kotlin.text.MatchGroup` `copy$default`(`kotlin.text.MatchGroup` v0 @kind object, `java.lang.String` v1 @kind object, `kotlin.ranges.IntRange` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlin/text/MatchGroup;.copy$default:(Lkotlin/text/MatchGroup;Ljava/lang/String;Lkotlin/ranges/IntRange;ILjava/lang/Object;)Lkotlin/text/MatchGroup;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L143f80.  v4:= v3 ^& 1;
  #L143f84.  if v4 == 0 then goto L143f8c;
  #L143f88.  v1:= v0.`kotlin.text.MatchGroup.a` @type ^`java.lang.String` @kind object;
  #L143f8c.  v3:= v3 ^& 2;
  #L143f90.  if v3 == 0 then goto L143f98;
  #L143f94.  v2:= v0.`kotlin.text.MatchGroup.b` @type ^`kotlin.ranges.IntRange` @kind object;
  #L143f98.  call temp:= `copy`(v0, v1, v2) @signature `Lkotlin/text/MatchGroup;.copy:(Ljava/lang/String;Lkotlin/ranges/IntRange;)Lkotlin/text/MatchGroup;` @kind virtual;
  #L143f9e.  v0:= temp @kind object;
  #L143fa0.  return v0 @kind object;
}
procedure `java.lang.String` `component1`(`kotlin.text.MatchGroup` v1 @kind this) @signature `Lkotlin/text/MatchGroup;.component1:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L143ec8.  v0:= v1.`kotlin.text.MatchGroup.a` @type ^`java.lang.String` @kind object;
  #L143ecc.  return v0 @kind object;
}
procedure `kotlin.ranges.IntRange` `component2`(`kotlin.text.MatchGroup` v1 @kind this) @signature `Lkotlin/text/MatchGroup;.component2:()Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L143f50.  v0:= v1.`kotlin.text.MatchGroup.b` @type ^`kotlin.ranges.IntRange` @kind object;
  #L143f54.  return v0 @kind object;
}
procedure `kotlin.text.MatchGroup` `copy`(`kotlin.text.MatchGroup` v1 @kind this, `java.lang.String` v2 @kind object, `kotlin.ranges.IntRange` v3 @kind object) @signature `Lkotlin/text/MatchGroup;.copy:(Ljava/lang/String;Lkotlin/ranges/IntRange;)Lkotlin/text/MatchGroup;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L143fb4.  v0:= "value" @kind object;
  #L143fb8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L143fbe.  v0:= "range" @kind object;
  #L143fc2.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L143fc8.  v0:= new `kotlin.text.MatchGroup`;
  #L143fcc.  call `<init>`(v0, v2, v3) @signature `Lkotlin/text/MatchGroup;.<init>:(Ljava/lang/String;Lkotlin/ranges/IntRange;)V` @kind direct;
  #L143fd2.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlin.text.MatchGroup` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/text/MatchGroup;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L143e34.  if v2 == v3 then goto L143e72;
  #L143e38.  v0:= instanceof @variable v3 @type ^`kotlin.text.MatchGroup` @kind boolean;
  #L143e3c.  if v0 == 0 then goto L143e6e;
  #L143e40.  v3:= (`kotlin.text.MatchGroup`) v3 @kind object;
  #L143e44.  v0:= v2.`kotlin.text.MatchGroup.a` @type ^`java.lang.String` @kind object;
  #L143e48.  v1:= v3.`kotlin.text.MatchGroup.a` @type ^`java.lang.String` @kind object;
  #L143e4c.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L143e52.  v0:= temp;
  #L143e54.  if v0 == 0 then goto L143e6e;
  #L143e58.  v0:= v2.`kotlin.text.MatchGroup.b` @type ^`kotlin.ranges.IntRange` @kind object;
  #L143e5c.  v3:= v3.`kotlin.text.MatchGroup.b` @type ^`kotlin.ranges.IntRange` @kind object;
  #L143e60.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L143e66.  v3:= temp;
  #L143e68.  if v3 == 0 then goto L143e6e;
  #L143e6c.  goto L143e72;
  #L143e6e.  v3:= 0I;
  #L143e70.  return v3;
  #L143e72.  v3:= 1I;
  #L143e74.  return v3;
}
procedure `kotlin.ranges.IntRange` `getRange`(`kotlin.text.MatchGroup` v1 @kind this) @signature `Lkotlin/text/MatchGroup;.getRange:()Lkotlin/ranges/IntRange;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L143f68.  v0:= v1.`kotlin.text.MatchGroup.b` @type ^`kotlin.ranges.IntRange` @kind object;
  #L143f6c.  return v0 @kind object;
}
procedure `java.lang.String` `getValue`(`kotlin.text.MatchGroup` v1 @kind this) @signature `Lkotlin/text/MatchGroup;.getValue:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L143ee0.  v0:= v1.`kotlin.text.MatchGroup.a` @type ^`java.lang.String` @kind object;
  #L143ee4.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.text.MatchGroup` v3 @kind this) @signature `Lkotlin/text/MatchGroup;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L143e88.  v0:= v3.`kotlin.text.MatchGroup.a` @type ^`java.lang.String` @kind object;
  #L143e8c.  v1:= 0I;
  #L143e8e.  if v0 == 0 then goto L143e9c;
  #L143e92.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L143e98.  v0:= temp;
  #L143e9a.  goto L143e9e;
  #L143e9c.  v0:= 0I;
  #L143e9e.  v0:= v0 * 31;
  #L143ea2.  v2:= v3.`kotlin.text.MatchGroup.b` @type ^`kotlin.ranges.IntRange` @kind object;
  #L143ea6.  if v2 == 0 then goto L143eb2;
  #L143eaa.  call temp:= `hashCode`(v2) @signature `Lkotlin/ranges/IntRange;.hashCode:()I` @kind virtual;
  #L143eb0.  v1:= temp;
  #L143eb2.  v0:= v0 + v1 @kind int;
  #L143eb4.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.text.MatchGroup` v2 @kind this) @signature `Lkotlin/text/MatchGroup;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L143ef8.  v0:= new `java.lang.StringBuilder`;
  #L143efc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143f02.  v1:= "MatchGroup(value=" @kind object;
  #L143f06.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143f0c.  v1:= v2.`kotlin.text.MatchGroup.a` @type ^`java.lang.String` @kind object;
  #L143f10.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143f16.  v1:= ", range=" @kind object;
  #L143f1a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143f20.  v1:= v2.`kotlin.text.MatchGroup.b` @type ^`kotlin.ranges.IntRange` @kind object;
  #L143f24.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143f2a.  v1:= ")" @kind object;
  #L143f2e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143f34.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L143f3a.  v0:= temp @kind object;
  #L143f3c.  return v0 @kind object;
}
