record `kotlin.text.MatcherMatchResult$groups$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.AbstractCollection` @kind class, `kotlin.text.MatchNamedGroupCollection` @kind interface {
  `kotlin.text.MatcherMatchResult` `kotlin.text.MatcherMatchResult$groups$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.text.MatcherMatchResult$groups$1` v0 @kind this, `kotlin.text.MatcherMatchResult` v1 @kind object) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.<init>:(Lkotlin/text/MatcherMatchResult;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1443ec.  v0.`kotlin.text.MatcherMatchResult$groups$1.a` @type ^`kotlin.text.MatcherMatchResult` := v1 @kind object;
  #L1443f0.  call `<init>`(v0) @signature `Lkotlin/collections/AbstractCollection;.<init>:()V` @kind direct;
  #L1443f6.  return @kind void;
}
procedure `boolean` `contains`(`kotlin.text.MatcherMatchResult$groups$1` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L144284.  if v2 == 0 then goto L14428e;
  #L144288.  v0:= instanceof @variable v2 @type ^`kotlin.text.MatchGroup` @kind boolean;
  #L14428c.  goto L144290;
  #L14428e.  v0:= 1I;
  #L144290.  if v0 == 0 then goto L1442a2;
  #L144294.  v2:= (`kotlin.text.MatchGroup`) v2 @kind object;
  #L144298.  call temp:= `contains`(v1, v2) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.contains:(Lkotlin/text/MatchGroup;)Z` @kind virtual;
  #L14429e.  v2:= temp;
  #L1442a0.  return v2;
  #L1442a2.  v2:= 0I;
  #L1442a4.  return v2;
}
procedure `boolean` `contains`(`kotlin.text.MatcherMatchResult$groups$1` v0 @kind this, `kotlin.text.MatchGroup` v1 @kind object) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.contains:(Lkotlin/text/MatchGroup;)Z` @AccessFlag PUBLIC {
    temp;

  #L1442b8.  call temp:= `contains`(v0, v1) @signature `Lkotlin/collections/AbstractCollection;.contains:(Ljava/lang/Object;)Z` @kind super;
  #L1442be.  v1:= temp;
  #L1442c0.  return v1;
}
procedure `kotlin.text.MatchGroup` `get`(`kotlin.text.MatcherMatchResult$groups$1` v3 @kind this, `int` v4 ) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.get:(I)Lkotlin/text/MatchGroup;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L144350.  v0:= v3.`kotlin.text.MatcherMatchResult$groups$1.a` @type ^`kotlin.text.MatcherMatchResult` @kind object;
  #L144354.  call temp:= `a`(v0) @signature `Lkotlin/text/MatcherMatchResult;.a:(Lkotlin/text/MatcherMatchResult;)Ljava/util/regex/MatchResult;` @kind static;
  #L14435a.  v0:= temp @kind object;
  #L14435c.  call temp:= `access$range`(v0, v4) @signature `Lkotlin/text/RegexKt;.access$range:(Ljava/util/regex/MatchResult;I)Lkotlin/ranges/IntRange;` @kind static;
  #L144362.  v0:= temp @kind object;
  #L144364.  call temp:= `getStart`(v0) @signature `Lkotlin/ranges/IntRange;.getStart:()Ljava/lang/Integer;` @kind virtual;
  #L14436a.  v1:= temp @kind object;
  #L14436c.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L144372.  v1:= temp;
  #L144374.  if v1 < 0 then goto L1443a2;
  #L144378.  v1:= new `kotlin.text.MatchGroup`;
  #L14437c.  v2:= v3.`kotlin.text.MatcherMatchResult$groups$1.a` @type ^`kotlin.text.MatcherMatchResult` @kind object;
  #L144380.  call temp:= `a`(v2) @signature `Lkotlin/text/MatcherMatchResult;.a:(Lkotlin/text/MatcherMatchResult;)Ljava/util/regex/MatchResult;` @kind static;
  #L144386.  v2:= temp @kind object;
  #L144388.  call temp:= `group`(v2, v4) @signature `Ljava/util/regex/MatchResult;.group:(I)Ljava/lang/String;` @kind interface;
  #L14438e.  v4:= temp @kind object;
  #L144390.  v2:= "matchResult.group(index)" @kind object;
  #L144394.  call `checkNotNullExpressionValue`(v4, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L14439a.  call `<init>`(v1, v4, v0) @signature `Lkotlin/text/MatchGroup;.<init>:(Ljava/lang/String;Lkotlin/ranges/IntRange;)V` @kind direct;
  #L1443a0.  goto L1443a4;
  #L1443a2.  v1:= 0I;
  #L1443a4.  return v1 @kind object;
}
procedure `kotlin.text.MatchGroup` `get`(`kotlin.text.MatcherMatchResult$groups$1` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.get:(Ljava/lang/String;)Lkotlin/text/MatchGroup;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1443b8.  v0:= "name" @kind object;
  #L1443bc.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L1443c2.  v0:= `@@kotlin.internal.PlatformImplementationsKt.IMPLEMENTATIONS` @type ^`kotlin.internal.PlatformImplementations` @kind object;
  #L1443c6.  v1:= v2.`kotlin.text.MatcherMatchResult$groups$1.a` @type ^`kotlin.text.MatcherMatchResult` @kind object;
  #L1443ca.  call temp:= `a`(v1) @signature `Lkotlin/text/MatcherMatchResult;.a:(Lkotlin/text/MatcherMatchResult;)Ljava/util/regex/MatchResult;` @kind static;
  #L1443d0.  v1:= temp @kind object;
  #L1443d2.  call temp:= `getMatchResultNamedGroup`(v0, v1, v3) @signature `Lkotlin/internal/PlatformImplementations;.getMatchResultNamedGroup:(Ljava/util/regex/MatchResult;Ljava/lang/String;)Lkotlin/text/MatchGroup;` @kind virtual;
  #L1443d8.  v3:= temp @kind object;
  #L1443da.  return v3 @kind object;
}
procedure `int` `getSize`(`kotlin.text.MatcherMatchResult$groups$1` v1 @kind this) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1442e8.  v0:= v1.`kotlin.text.MatcherMatchResult$groups$1.a` @type ^`kotlin.text.MatcherMatchResult` @kind object;
  #L1442ec.  call temp:= `a`(v0) @signature `Lkotlin/text/MatcherMatchResult;.a:(Lkotlin/text/MatcherMatchResult;)Ljava/util/regex/MatchResult;` @kind static;
  #L1442f2.  v0:= temp @kind object;
  #L1442f4.  call temp:= `groupCount`(v0) @signature `Ljava/util/regex/MatchResult;.groupCount:()I` @kind interface;
  #L1442fa.  v0:= temp;
  #L1442fc.  v0:= v0 + 1;
  #L144300.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.text.MatcherMatchResult$groups$1` v1 @kind this) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1442d4.  v0:= 0I;
  #L1442d6.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.text.MatcherMatchResult$groups$1` v2 @kind this) @signature `Lkotlin/text/MatcherMatchResult$groups$1;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L144314.  call temp:= `getIndices`(v2) @signature `Lkotlin/collections/CollectionsKt;.getIndices:(Ljava/util/Collection;)Lkotlin/ranges/IntRange;` @kind static;
  #L14431a.  v0:= temp @kind object;
  #L14431c.  call temp:= `asSequence`(v0) @signature `Lkotlin/collections/CollectionsKt;.asSequence:(Ljava/lang/Iterable;)Lkotlin/sequences/Sequence;` @kind static;
  #L144322.  v0:= temp @kind object;
  #L144324.  v1:= new `kotlin.text.MatcherMatchResult$groups$1$a`;
  #L144328.  call `<init>`(v1, v2) @signature `Lkotlin/text/MatcherMatchResult$groups$1$a;.<init>:(Lkotlin/text/MatcherMatchResult$groups$1;)V` @kind direct;
  #L14432e.  call temp:= `map`(v0, v1) @signature `Lkotlin/sequences/SequencesKt;.map:(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;` @kind static;
  #L144334.  v0:= temp @kind object;
  #L144336.  call temp:= `iterator`(v0) @signature `Lkotlin/sequences/Sequence;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L14433c.  v0:= temp @kind object;
  #L14433e.  return v0 @kind object;
}
