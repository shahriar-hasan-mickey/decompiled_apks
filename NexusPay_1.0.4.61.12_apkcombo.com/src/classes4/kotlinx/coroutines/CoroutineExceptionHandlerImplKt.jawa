record `kotlinx.coroutines.CoroutineExceptionHandlerImplKt` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.List` `@@kotlinx.coroutines.CoroutineExceptionHandlerImplKt.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/CoroutineExceptionHandlerImplKt;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L15664c.  v0:= constclass @type ^`kotlinx.coroutines.CoroutineExceptionHandler` @kind object;
  #L156650.  call temp:= `getClassLoader`(v0) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L156656.  v1:= temp @kind object;
  #L156658.  call temp:= `load`(v0, v1) @signature `Ljava/util/ServiceLoader;.load:(Ljava/lang/Class;Ljava/lang/ClassLoader;)Ljava/util/ServiceLoader;` @kind static;
  #L15665e.  v0:= temp @kind object;
  #L156660.  call temp:= `iterator`(v0) @signature `Ljava/util/ServiceLoader;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L156666.  v0:= temp @kind object;
  #L156668.  call temp:= `asSequence`(v0) @signature `Lkotlin/sequences/SequencesKt;.asSequence:(Ljava/util/Iterator;)Lkotlin/sequences/Sequence;` @kind static;
  #L15666e.  v0:= temp @kind object;
  #L156670.  call temp:= `toList`(v0) @signature `Lkotlin/sequences/SequencesKt;.toList:(Lkotlin/sequences/Sequence;)Ljava/util/List;` @kind static;
  #L156676.  v0:= temp @kind object;
  #L156678.  `@@kotlinx.coroutines.CoroutineExceptionHandlerImplKt.a` @type ^`java.util.List` := v0 @kind object;
  #L15667c.  return @kind void;
}
procedure `void` `handleCoroutineExceptionImpl`(`kotlin.coroutines.CoroutineContext` v4 @kind object, `java.lang.Throwable` v5 @kind object) @signature `Lkotlinx/coroutines/CoroutineExceptionHandlerImplKt;.handleCoroutineExceptionImpl:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L156690.  v0:= `@@kotlinx.coroutines.CoroutineExceptionHandlerImplKt.a` @type ^`java.util.List` @kind object;
  #L156694.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15669a.  v0:= temp @kind object;
  #L15669c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1566a2.  v1:= temp;
  #L1566a4.  if v1 == 0 then goto L1566de;
  #L1566a8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1566ae.  v1:= temp @kind object;
  #L1566b0.  v1:= (`kotlinx.coroutines.CoroutineExceptionHandler`) v1 @kind object;
  #L1566b4.  call `handleException`(v1, v4, v5) @signature `Lkotlinx/coroutines/CoroutineExceptionHandler;.handleException:(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Throwable;)V` @kind interface;
  #L1566ba.  goto L15669c;
  #L1566bc.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1566be.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1566c4.  v2:= temp @kind object;
  #L1566c6.  call temp:= `getUncaughtExceptionHandler`(v2) @signature `Ljava/lang/Thread;.getUncaughtExceptionHandler:()Ljava/lang/Thread$UncaughtExceptionHandler;` @kind virtual;
  #L1566cc.  v3:= temp @kind object;
  #L1566ce.  call temp:= `handlerException`(v5, v1) @signature `Lkotlinx/coroutines/CoroutineExceptionHandlerKt;.handlerException:(Ljava/lang/Throwable;Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind static;
  #L1566d4.  v1:= temp @kind object;
  #L1566d6.  call `uncaughtException`(v3, v2, v1) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L1566dc.  goto L15669c;
  #L1566de.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L1566e4.  v4:= temp @kind object;
  #L1566e6.  call temp:= `getUncaughtExceptionHandler`(v4) @signature `Ljava/lang/Thread;.getUncaughtExceptionHandler:()Ljava/lang/Thread$UncaughtExceptionHandler;` @kind virtual;
  #L1566ec.  v0:= temp @kind object;
  #L1566ee.  call `uncaughtException`(v0, v4, v5) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L1566f4.  return @kind void;
  catch `java.lang.Throwable` @[L1566b4..L1566ba] goto L1566bc;
}
