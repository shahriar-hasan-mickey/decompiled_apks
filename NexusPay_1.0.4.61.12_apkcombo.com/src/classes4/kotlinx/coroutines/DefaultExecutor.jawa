record `kotlinx.coroutines.DefaultExecutor` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.EventLoopImplBase` @kind class, `java.lang.Runnable` @kind interface {
}
global `kotlinx.coroutines.DefaultExecutor` `@@kotlinx.coroutines.DefaultExecutor.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String` `@@kotlinx.coroutines.DefaultExecutor.THREAD_NAME` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.Thread` `@@kotlinx.coroutines.DefaultExecutor._thread` @AccessFlag PRIVATE_STATIC_VOLATILE;
global `int` `@@kotlinx.coroutines.DefaultExecutor.debugStatus` @AccessFlag PRIVATE_STATIC_VOLATILE;
global `long` `@@kotlinx.coroutines.DefaultExecutor.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/DefaultExecutor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15755c.  v0:= new `kotlinx.coroutines.DefaultExecutor`;
  #L157560.  call `<init>`(v0) @signature `Lkotlinx/coroutines/DefaultExecutor;.<init>:()V` @kind direct;
  #L157566.  `@@kotlinx.coroutines.DefaultExecutor.INSTANCE` @type ^`kotlinx.coroutines.DefaultExecutor` := v0 @kind object;
  #L15756a.  v1:= 0I;
  #L15756c.  v2:= 1I;
  #L15756e.  v3:= 0I;
  #L157570.  call `incrementUseCount$default`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/EventLoop;.incrementUseCount$default:(Lkotlinx/coroutines/EventLoop;ZILjava/lang/Object;)V` @kind static;
  #L157576.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L15757a.  v1:= 1000L;
  #L15757e.  v3:= "kotlinx.coroutines.DefaultExecutor.keepAlive" @kind object;
  #L157582.  call temp:= `getLong`(v3, v1) @signature `Ljava/lang/Long;.getLong:(Ljava/lang/String;J)Ljava/lang/Long;` @kind static;
  #L157588.  v1:= temp @kind object;
  #L15758a.  goto L157594;
  #L15758c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L157592.  v1:= temp @kind object;
  #L157594.  call temp:= `longValue`(v1) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L15759a.  v1:= temp @kind wide;
  #L15759c.  call temp:= `toNanos`(v0, v1) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L1575a2.  v0:= temp @kind wide;
  #L1575a4.  `@@kotlinx.coroutines.DefaultExecutor.f` @type ^`long` := v0 @kind wide;
  #L1575a8.  return @kind void;
  catch `java.lang.SecurityException` @[L15757e..L15758a] goto L15758c;
}
procedure `void` `<init>`(`kotlinx.coroutines.DefaultExecutor` v0 @kind this) @signature `Lkotlinx/coroutines/DefaultExecutor;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1575cc.  call `<init>`(v0) @signature `Lkotlinx/coroutines/EventLoopImplBase;.<init>:()V` @kind direct;
  #L1575d2.  return @kind void;
}
procedure `void` `i`(`kotlinx.coroutines.DefaultExecutor` v1 @kind this) @signature `Lkotlinx/coroutines/DefaultExecutor;.i:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L1575e4.  @monitorenter v1
  #L1575e6.  call temp:= `k`(v1) @signature `Lkotlinx/coroutines/DefaultExecutor;.k:()Z` @kind direct;
  #L1575ec.  v0:= temp;
  #L1575ee.  if v0 != 0 then goto L1575f6;
  #L1575f2.  @monitorexit v1
  #L1575f4.  return @kind void;
  #L1575f6.  v0:= 3I;
  #L1575f8.  `@@kotlinx.coroutines.DefaultExecutor.debugStatus` @type ^`int` := v0;
  #L1575fc.  call `resetAll`(v1) @signature `Lkotlinx/coroutines/EventLoopImplBase;.resetAll:()V` @kind virtual;
  #L157602.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L157608.  @monitorexit v1
  #L15760a.  return @kind void;
  #L15760c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15760e.  @monitorexit v1
  #L157610.  throw v0;
  catch `java.lang.Throwable` @[L1575e6..L1575ee] goto L15760c;
  catch `java.lang.Throwable` @[L1575f8..L157608] goto L15760c;
}
procedure `java.lang.Thread` `j`(`kotlinx.coroutines.DefaultExecutor` v2 @kind this) @signature `Lkotlinx/coroutines/DefaultExecutor;.j:()Ljava/lang/Thread;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L1574cc.  @monitorenter v2
  #L1574ce.  v0:= `@@kotlinx.coroutines.DefaultExecutor._thread` @type ^`java.lang.Thread` @kind object;
  #L1574d2.  if v0 != 0 then goto L1574f6;
  #L1574d6.  v0:= new `java.lang.Thread`;
  #L1574da.  v1:= "kotlinx.coroutines.DefaultExecutor" @kind object;
  #L1574de.  call `<init>`(v0, v2, v1) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L1574e4.  `@@kotlinx.coroutines.DefaultExecutor._thread` @type ^`java.lang.Thread` := v0 @kind object;
  #L1574e8.  v1:= 1I;
  #L1574ea.  call `setDaemon`(v0, v1) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L1574f0.  call `start`(v0) @signature `Ljava/lang/Thread;.start:()V` @kind virtual;
  #L1574f6.  @monitorexit v2
  #L1574f8.  return v0 @kind object;
  #L1574fa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1574fc.  @monitorexit v2
  #L1574fe.  throw v0;
  catch `java.lang.Throwable` @[L1574ce..L1574f6] goto L1574fa;
}
procedure `boolean` `k`(`kotlinx.coroutines.DefaultExecutor` v2 @kind this) @signature `Lkotlinx/coroutines/DefaultExecutor;.k:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L157430.  v0:= `@@kotlinx.coroutines.DefaultExecutor.debugStatus` @type ^`int`;
  #L157434.  v1:= 2I;
  #L157436.  if v0 == v1 then goto L157446;
  #L15743a.  v1:= 3I;
  #L15743c.  if v0 != v1 then goto L157442;
  #L157440.  goto L157446;
  #L157442.  v0:= 0I;
  #L157444.  goto L157448;
  #L157446.  v0:= 1I;
  #L157448.  return v0;
}
procedure `boolean` `l`(`kotlinx.coroutines.DefaultExecutor` v1 @kind this) @signature `Lkotlinx/coroutines/DefaultExecutor;.l:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L15747c.  @monitorenter v1
  #L15747e.  call temp:= `k`(v1) @signature `Lkotlinx/coroutines/DefaultExecutor;.k:()Z` @kind direct;
  #L157484.  v0:= temp;
  #L157486.  if v0 == 0 then goto L157490;
  #L15748a.  v0:= 0I;
  #L15748c.  @monitorexit v1
  #L15748e.  return v0;
  #L157490.  v0:= 1I;
  #L157492.  `@@kotlinx.coroutines.DefaultExecutor.debugStatus` @type ^`int` := v0;
  #L157496.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L15749c.  @monitorexit v1
  #L15749e.  return v0;
  #L1574a0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1574a2.  @monitorexit v1
  #L1574a4.  throw v0;
  catch `java.lang.Throwable` @[L15747e..L157486] goto L1574a0;
  catch `java.lang.Throwable` @[L157492..L15749c] goto L1574a0;
}
procedure `void` `ensureStarted$kotlinx_coroutines_core`(`kotlinx.coroutines.DefaultExecutor` v4 @kind this) @signature `Lkotlinx/coroutines/DefaultExecutor;.ensureStarted$kotlinx_coroutines_core:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L157638.  @monitorenter v4
  #L15763a.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L157640.  v0:= temp;
  #L157642.  v1:= 1I;
  #L157644.  v2:= 0I;
  #L157646.  if v0 == 0 then goto L15766a;
  #L15764a.  v0:= `@@kotlinx.coroutines.DefaultExecutor._thread` @type ^`java.lang.Thread` @kind object;
  #L15764e.  if v0 != 0 then goto L157656;
  #L157652.  v0:= 1I;
  #L157654.  goto L157658;
  #L157656.  v0:= 0I;
  #L157658.  if v0 == 0 then goto L15765e;
  #L15765c.  goto L15766a;
  #L15765e.  v0:= new `java.lang.AssertionError`;
  #L157662.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L157668.  throw v0;
  #L15766a.  call temp:= `getASSERTIONS_ENABLED`() @signature `Lkotlinx/coroutines/DebugKt;.getASSERTIONS_ENABLED:()Z` @kind static;
  #L157670.  v0:= temp;
  #L157672.  if v0 == 0 then goto L15769e;
  #L157676.  v0:= `@@kotlinx.coroutines.DefaultExecutor.debugStatus` @type ^`int`;
  #L15767a.  if v0 == 0 then goto L15768c;
  #L15767e.  v0:= `@@kotlinx.coroutines.DefaultExecutor.debugStatus` @type ^`int`;
  #L157682.  v3:= 3I;
  #L157684.  if v0 != v3 then goto L15768a;
  #L157688.  goto L15768c;
  #L15768a.  v1:= 0I;
  #L15768c.  if v1 == 0 then goto L157692;
  #L157690.  goto L15769e;
  #L157692.  v0:= new `java.lang.AssertionError`;
  #L157696.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L15769c.  throw v0;
  #L15769e.  `@@kotlinx.coroutines.DefaultExecutor.debugStatus` @type ^`int` := v2;
  #L1576a2.  call temp:= `j`(v4) @signature `Lkotlinx/coroutines/DefaultExecutor;.j:()Ljava/lang/Thread;` @kind direct;
  #L1576a8.  v0:= `@@kotlinx.coroutines.DefaultExecutor.debugStatus` @type ^`int`;
  #L1576ac.  if v0 != 0 then goto L1576b8;
  #L1576b0.  call `wait`(v4) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #L1576b6.  goto L1576a8;
  #L1576b8.  @monitorexit v4
  #L1576ba.  return @kind void;
  #L1576bc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1576be.  @monitorexit v4
  #L1576c0.  throw v0;
  catch `java.lang.Throwable` @[L15763a..L1576b6] goto L1576bc;
}
procedure `java.lang.Thread` `getThread`(`kotlinx.coroutines.DefaultExecutor` v1 @kind this) @signature `Lkotlinx/coroutines/DefaultExecutor;.getThread:()Ljava/lang/Thread;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15751c.  v0:= `@@kotlinx.coroutines.DefaultExecutor._thread` @type ^`java.lang.Thread` @kind object;
  #L157520.  if v0 != 0 then goto L15752c;
  #L157524.  call temp:= `j`(v1) @signature `Lkotlinx/coroutines/DefaultExecutor;.j:()Ljava/lang/Thread;` @kind direct;
  #L15752a.  v0:= temp @kind object;
  #L15752c.  return v0 @kind object;
}
procedure `kotlinx.coroutines.DisposableHandle` `invokeOnTimeout`(`kotlinx.coroutines.DefaultExecutor` v0 @kind this, `long` v1 , `java.lang.Runnable` v3 @kind object, `kotlin.coroutines.CoroutineContext` v4 @kind object) @signature `Lkotlinx/coroutines/DefaultExecutor;.invokeOnTimeout:(JLjava/lang/Runnable;Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/DisposableHandle;` @AccessFlag PUBLIC {
    temp;

  #L157540.  call temp:= `scheduleInvokeOnTimeout`(v0, v1, v3) @signature `Lkotlinx/coroutines/EventLoopImplBase;.scheduleInvokeOnTimeout:(JLjava/lang/Runnable;)Lkotlinx/coroutines/DisposableHandle;` @kind virtual;
  #L157546.  v1:= temp @kind object;
  #L157548.  return v1 @kind object;
}
procedure `boolean` `isThreadPresent$kotlinx_coroutines_core`(`kotlinx.coroutines.DefaultExecutor` v1 @kind this) @signature `Lkotlinx/coroutines/DefaultExecutor;.isThreadPresent$kotlinx_coroutines_core:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L15745c.  v0:= `@@kotlinx.coroutines.DefaultExecutor._thread` @type ^`java.lang.Thread` @kind object;
  #L157460.  if v0 == 0 then goto L157468;
  #L157464.  v0:= 1I;
  #L157466.  goto L15746a;
  #L157468.  v0:= 0I;
  #L15746a.  return v0;
}
procedure `void` `run`(`kotlinx.coroutines.DefaultExecutor` v12 @kind this) @signature `Lkotlinx/coroutines/DefaultExecutor;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1576e0.  v0:= `@@kotlinx.coroutines.ThreadLocalEventLoop.INSTANCE` @type ^`kotlinx.coroutines.ThreadLocalEventLoop` @kind object;
  #L1576e4.  call `setEventLoop$kotlinx_coroutines_core`(v0, v12) @signature `Lkotlinx/coroutines/ThreadLocalEventLoop;.setEventLoop$kotlinx_coroutines_core:(Lkotlinx/coroutines/EventLoop;)V` @kind virtual;
  #L1576ea.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L1576f0.  v0:= temp @kind object;
  #L1576f2.  if v0 != 0 then goto L1576f8;
  #L1576f6.  goto L1576fe;
  #L1576f8.  call `registerTimeLoopThread`(v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.registerTimeLoopThread:()V` @kind virtual;
  #L1576fe.  v0:= 0I;
  #L157700.  call temp:= `l`(v12) @signature `Lkotlinx/coroutines/DefaultExecutor;.l:()Z` @kind direct;
  #L157706.  v1:= temp;
  #L157708.  if v1 != 0 then goto L15773e;
  #L15770c.  `@@kotlinx.coroutines.DefaultExecutor._thread` @type ^`java.lang.Thread` := v0 @kind object;
  #L157710.  call `i`(v12) @signature `Lkotlinx/coroutines/DefaultExecutor;.i:()V` @kind direct;
  #L157716.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L15771c.  v0:= temp @kind object;
  #L15771e.  if v0 != 0 then goto L157724;
  #L157722.  goto L15772a;
  #L157724.  call `unregisterTimeLoopThread`(v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unregisterTimeLoopThread:()V` @kind virtual;
  #L15772a.  call temp:= `isEmpty`(v12) @signature `Lkotlinx/coroutines/EventLoopImplBase;.isEmpty:()Z` @kind virtual;
  #L157730.  v0:= temp;
  #L157732.  if v0 != 0 then goto L15773c;
  #L157736.  call temp:= `getThread`(v12) @signature `Lkotlinx/coroutines/DefaultExecutor;.getThread:()Ljava/lang/Thread;` @kind virtual;
  #L15773c.  return @kind void;
  #L15773e.  v1:= 9223372036854775807L;
  #L157748.  v3:= v1 @kind wide;
  #L15774a.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L157750.  call temp:= `processNextEvent`(v12) @signature `Lkotlinx/coroutines/EventLoopImplBase;.processNextEvent:()J` @kind virtual;
  #L157756.  v5:= temp @kind wide;
  #L157758.  v7:= 0L;
  #L15775c.  v9:= lcmp(v5, v1);
  #L157760.  if v9 != 0 then goto L1577d8;
  #L157764.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L15776a.  v9:= temp @kind object;
  #L15776c.  if v9 != 0 then goto L15777a;
  #L157770.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L157776.  v9:= temp @kind wide;
  #L157778.  goto L157782;
  #L15777a.  call temp:= `nanoTime`(v9) @signature `Lkotlinx/coroutines/AbstractTimeSource;.nanoTime:()J` @kind virtual;
  #L157780.  v9:= temp @kind wide;
  #L157782.  v11:= lcmp(v3, v1);
  #L157786.  if v11 != 0 then goto L157790;
  #L15778a.  v3:= `@@kotlinx.coroutines.DefaultExecutor.f` @type ^`long` @kind wide;
  #L15778e.  v3:= v3 + v9 @kind long;
  #L157790.  v9:= v3 - v9 @kind long;
  #L157794.  v11:= lcmp(v9, v7);
  #L157798.  if v11 > 0 then goto L1577ce;
  #L15779c.  `@@kotlinx.coroutines.DefaultExecutor._thread` @type ^`java.lang.Thread` := v0 @kind object;
  #L1577a0.  call `i`(v12) @signature `Lkotlinx/coroutines/DefaultExecutor;.i:()V` @kind direct;
  #L1577a6.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L1577ac.  v0:= temp @kind object;
  #L1577ae.  if v0 != 0 then goto L1577b4;
  #L1577b2.  goto L1577ba;
  #L1577b4.  call `unregisterTimeLoopThread`(v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unregisterTimeLoopThread:()V` @kind virtual;
  #L1577ba.  call temp:= `isEmpty`(v12) @signature `Lkotlinx/coroutines/EventLoopImplBase;.isEmpty:()Z` @kind virtual;
  #L1577c0.  v0:= temp;
  #L1577c2.  if v0 != 0 then goto L1577cc;
  #L1577c6.  call temp:= `getThread`(v12) @signature `Lkotlinx/coroutines/DefaultExecutor;.getThread:()Ljava/lang/Thread;` @kind virtual;
  #L1577cc.  return @kind void;
  #L1577ce.  call temp:= `coerceAtMost`(v5, v9) @signature `Lkotlin/ranges/RangesKt;.coerceAtMost:(JJ)J` @kind static;
  #L1577d4.  v5:= temp @kind wide;
  #L1577d6.  goto L1577da;
  #L1577d8.  v3:= v1 @kind wide;
  #L1577da.  v9:= lcmp(v5, v7);
  #L1577de.  if v9 <= 0 then goto L15774a;
  #L1577e2.  call temp:= `k`(v12) @signature `Lkotlinx/coroutines/DefaultExecutor;.k:()Z` @kind direct;
  #L1577e8.  v7:= temp;
  #L1577ea.  if v7 == 0 then goto L157820;
  #L1577ee.  `@@kotlinx.coroutines.DefaultExecutor._thread` @type ^`java.lang.Thread` := v0 @kind object;
  #L1577f2.  call `i`(v12) @signature `Lkotlinx/coroutines/DefaultExecutor;.i:()V` @kind direct;
  #L1577f8.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L1577fe.  v0:= temp @kind object;
  #L157800.  if v0 != 0 then goto L157806;
  #L157804.  goto L15780c;
  #L157806.  call `unregisterTimeLoopThread`(v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unregisterTimeLoopThread:()V` @kind virtual;
  #L15780c.  call temp:= `isEmpty`(v12) @signature `Lkotlinx/coroutines/EventLoopImplBase;.isEmpty:()Z` @kind virtual;
  #L157812.  v0:= temp;
  #L157814.  if v0 != 0 then goto L15781e;
  #L157818.  call temp:= `getThread`(v12) @signature `Lkotlinx/coroutines/DefaultExecutor;.getThread:()Ljava/lang/Thread;` @kind virtual;
  #L15781e.  return @kind void;
  #L157820.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L157826.  v7:= temp @kind object;
  #L157828.  if v7 != 0 then goto L157834;
  #L15782c.  call `parkNanos`(v12, v5) @signature `Ljava/util/concurrent/locks/LockSupport;.parkNanos:(Ljava/lang/Object;J)V` @kind static;
  #L157832.  goto L15774a;
  #L157834.  call `parkNanos`(v7, v12, v5) @signature `Lkotlinx/coroutines/AbstractTimeSource;.parkNanos:(Ljava/lang/Object;J)V` @kind virtual;
  #L15783a.  goto L15774a;
  #L15783c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15783e.  `@@kotlinx.coroutines.DefaultExecutor._thread` @type ^`java.lang.Thread` := v0 @kind object;
  #L157842.  call `i`(v12) @signature `Lkotlinx/coroutines/DefaultExecutor;.i:()V` @kind direct;
  #L157848.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L15784e.  v0:= temp @kind object;
  #L157850.  if v0 != 0 then goto L157856;
  #L157854.  goto L15785c;
  #L157856.  call `unregisterTimeLoopThread`(v0) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unregisterTimeLoopThread:()V` @kind virtual;
  #L15785c.  call temp:= `isEmpty`(v12) @signature `Lkotlinx/coroutines/EventLoopImplBase;.isEmpty:()Z` @kind virtual;
  #L157862.  v0:= temp;
  #L157864.  if v0 != 0 then goto L15786e;
  #L157868.  call temp:= `getThread`(v12) @signature `Lkotlinx/coroutines/DefaultExecutor;.getThread:()Ljava/lang/Thread;` @kind virtual;
  #L15786e.  throw v1;
  catch `java.lang.Throwable` @[L157700..L157708] goto L15783c;
  catch `java.lang.Throwable` @[L15774a..L15778e] goto L15783c;
  catch `java.lang.Throwable` @[L1577ce..L1577ea] goto L15783c;
  catch `java.lang.Throwable` @[L157820..L15783a] goto L15783c;
}
procedure `void` `shutdown`(`kotlinx.coroutines.DefaultExecutor` v7 @kind this, `long` v8 ) @signature `Lkotlinx/coroutines/DefaultExecutor;.shutdown:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1578a4.  @monitorenter v7
  #L1578a6.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L1578ac.  v0:= temp @kind wide;
  #L1578ae.  v0:= v0 + v8 @kind long;
  #L1578b0.  call temp:= `k`(v7) @signature `Lkotlinx/coroutines/DefaultExecutor;.k:()Z` @kind direct;
  #L1578b6.  v2:= temp;
  #L1578b8.  if v2 != 0 then goto L1578c2;
  #L1578bc.  v2:= 2I;
  #L1578be.  `@@kotlinx.coroutines.DefaultExecutor.debugStatus` @type ^`int` := v2;
  #L1578c2.  v2:= `@@kotlinx.coroutines.DefaultExecutor.debugStatus` @type ^`int`;
  #L1578c6.  v3:= 3I;
  #L1578c8.  if v2 == v3 then goto L15791a;
  #L1578cc.  v2:= `@@kotlinx.coroutines.DefaultExecutor._thread` @type ^`java.lang.Thread` @kind object;
  #L1578d0.  if v2 == 0 then goto L15791a;
  #L1578d4.  v2:= `@@kotlinx.coroutines.DefaultExecutor._thread` @type ^`java.lang.Thread` @kind object;
  #L1578d8.  if v2 != 0 then goto L1578de;
  #L1578dc.  goto L1578f8;
  #L1578de.  call temp:= `getTimeSource`() @signature `Lkotlinx/coroutines/AbstractTimeSourceKt;.getTimeSource:()Lkotlinx/coroutines/AbstractTimeSource;` @kind static;
  #L1578e4.  v3:= temp @kind object;
  #L1578e6.  if v3 != 0 then goto L1578f2;
  #L1578ea.  call `unpark`(v2) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L1578f0.  goto L1578f8;
  #L1578f2.  call `unpark`(v3, v2) @signature `Lkotlinx/coroutines/AbstractTimeSource;.unpark:(Ljava/lang/Thread;)V` @kind virtual;
  #L1578f8.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L1578fe.  v2:= temp @kind wide;
  #L157900.  v2:= v0 - v2 @kind long;
  #L157904.  v4:= 0L;
  #L157908.  v6:= lcmp(v2, v4);
  #L15790c.  if v6 > 0 then goto L157912;
  #L157910.  goto L15791a;
  #L157912.  call `wait`(v7, v8) @signature `Ljava/lang/Object;.wait:(J)V` @kind virtual;
  #L157918.  goto L1578c2;
  #L15791a.  v8:= 0I;
  #L15791c.  `@@kotlinx.coroutines.DefaultExecutor.debugStatus` @type ^`int` := v8;
  #L157920.  @monitorexit v7
  #L157922.  return @kind void;
  #L157924.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L157926.  @monitorexit v7
  #L157928.  throw v8;
  catch `java.lang.Throwable` @[L1578a6..L157920] goto L157924;
}
