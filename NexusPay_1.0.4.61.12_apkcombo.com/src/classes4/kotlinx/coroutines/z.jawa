record `kotlinx.coroutines.z` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.g0` @kind class {
  `kotlin.coroutines.Continuation` `kotlinx.coroutines.z.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.z` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlinx/coroutines/z;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15d8c0.  v0:= 0I;
  #L15d8c2.  call `<init>`(v1, v2, v0) @signature `Lkotlinx/coroutines/g0;.<init>:(Lkotlin/coroutines/CoroutineContext;Z)V` @kind direct;
  #L15d8c8.  call temp:= `createCoroutineUnintercepted`(v3, v1, v1) @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.createCoroutineUnintercepted:(Lkotlin/jvm/functions/Function2;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind static;
  #L15d8ce.  v2:= temp @kind object;
  #L15d8d0.  v1.`kotlinx.coroutines.z.c` @type ^`kotlin.coroutines.Continuation` := v2 @kind object;
  #L15d8d4.  return @kind void;
}
procedure `void` `onStart`(`kotlinx.coroutines.z` v1 @kind this) @signature `Lkotlinx/coroutines/z;.onStart:()V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15d8e8.  v0:= v1.`kotlinx.coroutines.z.c` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L15d8ec.  call `startCoroutineCancellable`(v0, v1) @signature `Lkotlinx/coroutines/intrinsics/CancellableKt;.startCoroutineCancellable:(Lkotlin/coroutines/Continuation;Lkotlin/coroutines/Continuation;)V` @kind static;
  #L15d8f2.  return @kind void;
}
