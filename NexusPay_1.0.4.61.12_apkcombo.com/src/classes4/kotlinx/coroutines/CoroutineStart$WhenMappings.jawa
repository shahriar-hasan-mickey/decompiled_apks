record `kotlinx.coroutines.CoroutineStart$WhenMappings` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC {
}
global `int`[] `@@kotlinx.coroutines.CoroutineStart$WhenMappings.$EnumSwitchMapping$0` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/CoroutineStart$WhenMappings;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L156ea8.  call temp:= `values`() @signature `Lkotlinx/coroutines/CoroutineStart;.values:()[Lkotlinx/coroutines/CoroutineStart;` @kind static;
  #L156eae.  v0:= temp @kind object;
  #L156eb0.  v0:= length @variable v0;
  #L156eb2.  v0:= new `int`[v0];
  #L156eb6.  v1:= `@@kotlinx.coroutines.CoroutineStart.DEFAULT` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L156eba.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L156ec0.  v1:= temp;
  #L156ec2.  v2:= 1I;
  #L156ec4.  v0[v1]:= v2;
  #L156ec8.  v1:= `@@kotlinx.coroutines.CoroutineStart.ATOMIC` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L156ecc.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L156ed2.  v1:= temp;
  #L156ed4.  v2:= 2I;
  #L156ed6.  v0[v1]:= v2;
  #L156eda.  v1:= `@@kotlinx.coroutines.CoroutineStart.UNDISPATCHED` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L156ede.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L156ee4.  v1:= temp;
  #L156ee6.  v2:= 3I;
  #L156ee8.  v0[v1]:= v2;
  #L156eec.  v1:= `@@kotlinx.coroutines.CoroutineStart.LAZY` @type ^`kotlinx.coroutines.CoroutineStart` @kind object;
  #L156ef0.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L156ef6.  v1:= temp;
  #L156ef8.  v2:= 4I;
  #L156efa.  v0[v1]:= v2;
  #L156efe.  `@@kotlinx.coroutines.CoroutineStart$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] := v0 @kind object;
  #L156f02.  return @kind void;
}
