record `kotlinx.coroutines.ThreadPoolDispatcher` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.ExecutorCoroutineDispatcherBase` @kind class {
  `int` `kotlinx.coroutines.ThreadPoolDispatcher.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `kotlinx.coroutines.ThreadPoolDispatcher.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `kotlinx.coroutines.ThreadPoolDispatcher.d` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Executor` `kotlinx.coroutines.ThreadPoolDispatcher.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.ThreadPoolDispatcher` v0 @kind this, `int` v1 , `java.lang.String` v2 @kind object) @signature `Lkotlinx/coroutines/ThreadPoolDispatcher;.<init>:(ILjava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15e724.  call `<init>`(v0) @signature `Lkotlinx/coroutines/ExecutorCoroutineDispatcherBase;.<init>:()V` @kind direct;
  #L15e72a.  v0.`kotlinx.coroutines.ThreadPoolDispatcher.b` @type ^`int` := v1;
  #L15e72e.  v0.`kotlinx.coroutines.ThreadPoolDispatcher.c` @type ^`java.lang.String` := v2 @kind object;
  #L15e732.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L15e736.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L15e73c.  v0.`kotlinx.coroutines.ThreadPoolDispatcher.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L15e740.  v1:= v0.`kotlinx.coroutines.ThreadPoolDispatcher.b` @type ^`int`;
  #L15e744.  v2:= new `kotlinx.coroutines.d`;
  #L15e748.  call `<init>`(v2, v0) @signature `Lkotlinx/coroutines/d;.<init>:(Lkotlinx/coroutines/ThreadPoolDispatcher;)V` @kind direct;
  #L15e74e.  call temp:= `newScheduledThreadPool`(v1, v2) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L15e754.  v1:= temp @kind object;
  #L15e756.  v0.`kotlinx.coroutines.ThreadPoolDispatcher.e` @type ^`java.util.concurrent.Executor` := v1 @kind object;
  #L15e75a.  call `initFutureCancellation$kotlinx_coroutines_core`(v0) @signature `Lkotlinx/coroutines/ExecutorCoroutineDispatcherBase;.initFutureCancellation$kotlinx_coroutines_core:()V` @kind virtual;
  #L15e760.  return @kind void;
}
procedure `java.lang.Thread` `c`(`kotlinx.coroutines.ThreadPoolDispatcher` v3 @kind object, `java.lang.Runnable` v4 @kind object) @signature `Lkotlinx/coroutines/ThreadPoolDispatcher;.c:(Lkotlinx/coroutines/ThreadPoolDispatcher;Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L15e68c.  v0:= new `kotlinx.coroutines.PoolThread`;
  #L15e690.  v1:= v3.`kotlinx.coroutines.ThreadPoolDispatcher.b` @type ^`int`;
  #L15e694.  v2:= 1I;
  #L15e696.  if v1 != v2 then goto L15e6a0;
  #L15e69a.  v1:= v3.`kotlinx.coroutines.ThreadPoolDispatcher.c` @type ^`java.lang.String` @kind object;
  #L15e69e.  goto L15e6d8;
  #L15e6a0.  v1:= new `java.lang.StringBuilder`;
  #L15e6a4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e6aa.  v2:= v3.`kotlinx.coroutines.ThreadPoolDispatcher.c` @type ^`java.lang.String` @kind object;
  #L15e6ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e6b4.  v2:= 45I;
  #L15e6b8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e6be.  v2:= v3.`kotlinx.coroutines.ThreadPoolDispatcher.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L15e6c2.  call temp:= `incrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L15e6c8.  v2:= temp;
  #L15e6ca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e6d0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e6d6.  v1:= temp @kind object;
  #L15e6d8.  call `<init>`(v0, v3, v4, v1) @signature `Lkotlinx/coroutines/PoolThread;.<init>:(Lkotlinx/coroutines/ThreadPoolDispatcher;Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L15e6de.  return v0 @kind object;
}
procedure `java.lang.Thread` `d`(`kotlinx.coroutines.ThreadPoolDispatcher` v0 @kind object, `java.lang.Runnable` v1 @kind object) @signature `Lkotlinx/coroutines/ThreadPoolDispatcher;.d:(Lkotlinx/coroutines/ThreadPoolDispatcher;Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L15e6f0.  call temp:= `c`(v0, v1) @signature `Lkotlinx/coroutines/ThreadPoolDispatcher;.c:(Lkotlinx/coroutines/ThreadPoolDispatcher;Ljava/lang/Runnable;)Ljava/lang/Thread;` @kind static;
  #L15e6f6.  v0:= temp @kind object;
  #L15e6f8.  return v0 @kind object;
}
procedure `void` `close`(`kotlinx.coroutines.ThreadPoolDispatcher` v1 @kind this) @signature `Lkotlinx/coroutines/ThreadPoolDispatcher;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e774.  call temp:= `getExecutor`(v1) @signature `Lkotlinx/coroutines/ThreadPoolDispatcher;.getExecutor:()Ljava/util/concurrent/Executor;` @kind virtual;
  #L15e77a.  v0:= temp @kind object;
  #L15e77c.  v0:= (`java.util.concurrent.ExecutorService`) v0 @kind object;
  #L15e780.  call `shutdown`(v0) @signature `Ljava/util/concurrent/ExecutorService;.shutdown:()V` @kind interface;
  #L15e786.  return @kind void;
}
procedure `java.util.concurrent.Executor` `getExecutor`(`kotlinx.coroutines.ThreadPoolDispatcher` v1 @kind this) @signature `Lkotlinx/coroutines/ThreadPoolDispatcher;.getExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e70c.  v0:= v1.`kotlinx.coroutines.ThreadPoolDispatcher.e` @type ^`java.util.concurrent.Executor` @kind object;
  #L15e710.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.ThreadPoolDispatcher` v2 @kind this) @signature `Lkotlinx/coroutines/ThreadPoolDispatcher;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15e634.  v0:= new `java.lang.StringBuilder`;
  #L15e638.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e63e.  v1:= "ThreadPoolDispatcher[" @kind object;
  #L15e642.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e648.  v1:= v2.`kotlinx.coroutines.ThreadPoolDispatcher.b` @type ^`int`;
  #L15e64c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e652.  v1:= ", " @kind object;
  #L15e656.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e65c.  v1:= v2.`kotlinx.coroutines.ThreadPoolDispatcher.c` @type ^`java.lang.String` @kind object;
  #L15e660.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e666.  v1:= 93I;
  #L15e66a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e670.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e676.  v0:= temp @kind object;
  #L15e678.  return v0 @kind object;
}
