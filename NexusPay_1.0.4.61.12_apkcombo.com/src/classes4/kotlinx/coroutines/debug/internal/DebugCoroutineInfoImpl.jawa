record `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` @kind class @AccessFlag PUBLIC_FINAL {
  `kotlinx.coroutines.debug.internal.StackTraceFrame` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.ref.WeakReference` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.c` @AccessFlag PRIVATE;
  `java.lang.ref.WeakReference` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.d` @AccessFlag PRIVATE;
  `java.lang.Thread` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.lastObservedThread` @AccessFlag PUBLIC;
  `long` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.sequenceNumber` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v0 @kind this, `kotlin.coroutines.CoroutineContext` v1 @kind object, `kotlinx.coroutines.debug.internal.StackTraceFrame` v2 @kind object, `long` v3 ) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlinx/coroutines/debug/internal/StackTraceFrame;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L16e010.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L16e016.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.a` @type ^`kotlinx.coroutines.debug.internal.StackTraceFrame` := v2 @kind object;
  #L16e01a.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.sequenceNumber` @type ^`long` := v3 @kind wide;
  #L16e01e.  v2:= new `java.lang.ref.WeakReference`;
  #L16e022.  call `<init>`(v2, v1) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L16e028.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.b` @type ^`java.lang.ref.WeakReference` := v2 @kind object;
  #L16e02c.  v1:= "CREATED" @kind object;
  #L16e030.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.c` @type ^`java.lang.String` := v1 @kind object;
  #L16e034.  return @kind void;
}
procedure `java.util.List` `a`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v3 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.a:()Ljava/util/List;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L16def8.  v0:= v3.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.a` @type ^`kotlinx.coroutines.debug.internal.StackTraceFrame` @kind object;
  #L16defc.  if v0 != 0 then goto L16df0a;
  #L16df00.  call temp:= `emptyList`() @signature `Lkotlin/collections/CollectionsKt;.emptyList:()Ljava/util/List;` @kind static;
  #L16df06.  v0:= temp @kind object;
  #L16df08.  return v0 @kind object;
  #L16df0a.  v1:= new `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a`;
  #L16df0e.  v2:= 0I;
  #L16df10.  call `<init>`(v1, v3, v0, v2) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.<init>:(Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;Lkotlinx/coroutines/debug/internal/StackTraceFrame;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L16df16.  call temp:= `sequence`(v1) @signature `Lkotlin/sequences/SequencesKt;.sequence:(Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;` @kind static;
  #L16df1c.  v0:= temp @kind object;
  #L16df1e.  call temp:= `toList`(v0) @signature `Lkotlin/sequences/SequencesKt;.toList:(Lkotlin/sequences/Sequence;)Ljava/util/List;` @kind static;
  #L16df24.  v0:= temp @kind object;
  #L16df26.  return v0 @kind object;
}
procedure `java.lang.Object` `access$yieldFrames`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v0 @kind object, `kotlin.sequences.SequenceScope` v1 @kind object, `kotlin.coroutines.jvm.internal.CoroutineStackFrame` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.access$yieldFrames:(Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L16dd7c.  call temp:= `b`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.b:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind direct;
  #L16dd82.  v0:= temp @kind object;
  #L16dd84.  return v0 @kind object;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v5 @kind this, `kotlin.sequences.SequenceScope` v6 @kind object, `kotlin.coroutines.jvm.internal.CoroutineStackFrame` v7 @kind object, `kotlin.coroutines.Continuation` v8 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.b:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16dd98.  v0:= instanceof @variable v8 @type ^`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b` @kind boolean;
  #L16dd9c.  if v0 == 0 then goto L16ddbe;
  #L16dda0.  v0:= v8 @kind object;
  #L16dda2.  v0:= (`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b`) v0 @kind object;
  #L16dda6.  v1:= v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.f` @type ^`int`;
  #L16ddaa.  v2:= -2147483648I;
  #L16ddae.  v3:= v1 ^& v2 @kind int;
  #L16ddb2.  if v3 == 0 then goto L16ddbe;
  #L16ddb6.  v1:= v1 - v2 @kind int;
  #L16ddb8.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.f` @type ^`int` := v1;
  #L16ddbc.  goto L16ddc8;
  #L16ddbe.  v0:= new `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b`;
  #L16ddc2.  call `<init>`(v0, v5, v8) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$b;.<init>:(Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L16ddc8.  v8:= v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.d` @type ^`java.lang.Object` @kind object;
  #L16ddcc.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L16ddd2.  v1:= temp @kind object;
  #L16ddd4.  v2:= v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.f` @type ^`int`;
  #L16ddd8.  v3:= 1I;
  #L16ddda.  if v2 == 0 then goto L16de12;
  #L16ddde.  if v2 != v3 then goto L16de02;
  #L16dde2.  v6:= v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.c` @type ^`java.lang.Object` @kind object;
  #L16dde6.  v6:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v6 @kind object;
  #L16ddea.  v7:= v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.b` @type ^`java.lang.Object` @kind object;
  #L16ddee.  v7:= (`kotlin.sequences.SequenceScope`) v7 @kind object;
  #L16ddf2.  v2:= v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.a` @type ^`java.lang.Object` @kind object;
  #L16ddf6.  v2:= (`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl`) v2 @kind object;
  #L16ddfa.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L16de00.  goto L16de56;
  #L16de02.  v6:= new `java.lang.IllegalStateException`;
  #L16de06.  v7:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L16de0a.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16de10.  throw v6;
  #L16de12.  call `throwOnFailure`(v8) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L16de18.  v2:= v5 @kind object;
  #L16de1a.  if v7 != 0 then goto L16de24;
  #L16de1e.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L16de22.  return v6 @kind object;
  #L16de24.  call temp:= `getStackTraceElement`(v7) @signature `Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @kind interface;
  #L16de2a.  v8:= temp @kind object;
  #L16de2c.  if v8 != 0 then goto L16de32;
  #L16de30.  goto L16de5c;
  #L16de32.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.a` @type ^`java.lang.Object` := v2 @kind object;
  #L16de36.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.b` @type ^`java.lang.Object` := v6 @kind object;
  #L16de3a.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.c` @type ^`java.lang.Object` := v7 @kind object;
  #L16de3e.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$b.f` @type ^`int` := v3;
  #L16de42.  call temp:= `yield`(v6, v8, v0) @signature `Lkotlin/sequences/SequenceScope;.yield:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L16de48.  v8:= temp @kind object;
  #L16de4a.  if v8 != v1 then goto L16de50;
  #L16de4e.  return v1 @kind object;
  #L16de50.  v4:= v7 @kind object;
  #L16de52.  v7:= v6 @kind object;
  #L16de54.  v6:= v4 @kind object;
  #L16de56.  v4:= v7 @kind object;
  #L16de58.  v7:= v6 @kind object;
  #L16de5a.  v6:= v4 @kind object;
  #L16de5c.  call temp:= `getCallerFrame`(v7) @signature `Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @kind interface;
  #L16de62.  v7:= temp @kind object;
  #L16de64.  if v7 == 0 then goto L16de6a;
  #L16de68.  goto L16de1a;
  #L16de6a.  v6:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L16de6e.  return v6 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `getContext`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getContext:()Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L16dfa8.  v0:= v1.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.b` @type ^`java.lang.ref.WeakReference` @kind object;
  #L16dfac.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L16dfb2.  v0:= temp @kind object;
  #L16dfb4.  v0:= (`kotlin.coroutines.CoroutineContext`) v0 @kind object;
  #L16dfb8.  return v0 @kind object;
}
procedure `kotlinx.coroutines.debug.internal.StackTraceFrame` `getCreationStackBottom`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getCreationStackBottom:()Lkotlinx/coroutines/debug/internal/StackTraceFrame;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L16dff8.  v0:= v1.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.a` @type ^`kotlinx.coroutines.debug.internal.StackTraceFrame` @kind object;
  #L16dffc.  return v0 @kind object;
}
procedure `java.util.List` `getCreationStackTrace`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getCreationStackTrace:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L16df38.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.a:()Ljava/util/List;` @kind direct;
  #L16df3e.  v0:= temp @kind object;
  #L16df40.  return v0 @kind object;
}
procedure `kotlin.coroutines.jvm.internal.CoroutineStackFrame` `getLastObservedFrame$kotlinx_coroutines_core`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getLastObservedFrame$kotlinx_coroutines_core:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L16dfcc.  v0:= v1.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.d` @type ^`java.lang.ref.WeakReference` @kind object;
  #L16dfd0.  if v0 != 0 then goto L16dfd8;
  #L16dfd4.  v0:= 0I;
  #L16dfd6.  goto L16dfe4;
  #L16dfd8.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L16dfde.  v0:= temp @kind object;
  #L16dfe0.  v0:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v0 @kind object;
  #L16dfe4.  return v0 @kind object;
}
procedure `java.lang.String` `getState`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getState:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L16de80.  v0:= v1.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.c` @type ^`java.lang.String` @kind object;
  #L16de84.  return v0 @kind object;
}
procedure `java.util.List` `lastObservedStackTrace`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v3 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.lastObservedStackTrace:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L16df54.  call temp:= `getLastObservedFrame$kotlinx_coroutines_core`(v3) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getLastObservedFrame$kotlinx_coroutines_core:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @kind virtual;
  #L16df5a.  v0:= temp @kind object;
  #L16df5c.  if v0 != 0 then goto L16df6a;
  #L16df60.  call temp:= `emptyList`() @signature `Lkotlin/collections/CollectionsKt;.emptyList:()Ljava/util/List;` @kind static;
  #L16df66.  v0:= temp @kind object;
  #L16df68.  return v0 @kind object;
  #L16df6a.  v1:= new `java.util.ArrayList`;
  #L16df6e.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L16df74.  if v0 == 0 then goto L16df96;
  #L16df78.  call temp:= `getStackTraceElement`(v0) @signature `Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @kind interface;
  #L16df7e.  v2:= temp @kind object;
  #L16df80.  if v2 != 0 then goto L16df86;
  #L16df84.  goto L16df8c;
  #L16df86.  call temp:= `add`(v1, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L16df8c.  call temp:= `getCallerFrame`(v0) @signature `Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @kind interface;
  #L16df92.  v0:= temp @kind object;
  #L16df94.  goto L16df74;
  #L16df96.  return v1 @kind object;
}
procedure `void` `setLastObservedFrame$kotlinx_coroutines_core`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v1 @kind this, `kotlin.coroutines.jvm.internal.CoroutineStackFrame` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.setLastObservedFrame$kotlinx_coroutines_core:(Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L16e048.  if v2 != 0 then goto L16e050;
  #L16e04c.  v2:= 0I;
  #L16e04e.  goto L16e05c;
  #L16e050.  v0:= new `java.lang.ref.WeakReference`;
  #L16e054.  call `<init>`(v0, v2) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L16e05a.  v2:= v0 @kind object;
  #L16e05c.  v1.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.d` @type ^`java.lang.ref.WeakReference` := v2 @kind object;
  #L16e060.  return @kind void;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16de98.  v0:= new `java.lang.StringBuilder`;
  #L16de9c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16dea2.  v1:= "DebugCoroutineInfo(state=" @kind object;
  #L16dea6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16deac.  call temp:= `getState`(v2) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getState:()Ljava/lang/String;` @kind virtual;
  #L16deb2.  v1:= temp @kind object;
  #L16deb4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16deba.  v1:= ",context=" @kind object;
  #L16debe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16dec4.  call temp:= `getContext`(v2) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind virtual;
  #L16deca.  v1:= temp @kind object;
  #L16decc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ded2.  v1:= 41I;
  #L16ded6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16dedc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16dee2.  v0:= temp @kind object;
  #L16dee4.  return v0 @kind object;
}
procedure `void` `updateState$kotlinx_coroutines_core`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v2 @kind this, `java.lang.String` v3 @kind object, `kotlin.coroutines.Continuation` v4 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.updateState$kotlinx_coroutines_core:(Ljava/lang/String;Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L16e074.  v0:= v2.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.c` @type ^`java.lang.String` @kind object;
  #L16e078.  call temp:= `areEqual`(v0, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L16e07e.  v0:= temp;
  #L16e080.  if v0 == 0 then goto L16e0a2;
  #L16e084.  v0:= "SUSPENDED" @kind object;
  #L16e088.  call temp:= `areEqual`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L16e08e.  v0:= temp;
  #L16e090.  if v0 == 0 then goto L16e0a2;
  #L16e094.  call temp:= `getLastObservedFrame$kotlinx_coroutines_core`(v2) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.getLastObservedFrame$kotlinx_coroutines_core:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @kind virtual;
  #L16e09a.  v0:= temp @kind object;
  #L16e09c.  if v0 == 0 then goto L16e0a2;
  #L16e0a0.  return @kind void;
  #L16e0a2.  v2.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.c` @type ^`java.lang.String` := v3 @kind object;
  #L16e0a6.  v0:= instanceof @variable v4 @type ^`kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind boolean;
  #L16e0aa.  v1:= 0I;
  #L16e0ac.  if v0 == 0 then goto L16e0b6;
  #L16e0b0.  v4:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v4 @kind object;
  #L16e0b4.  goto L16e0b8;
  #L16e0b6.  v4:= v1 @kind object;
  #L16e0b8.  call `setLastObservedFrame$kotlinx_coroutines_core`(v2, v4) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.setLastObservedFrame$kotlinx_coroutines_core:(Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;)V` @kind virtual;
  #L16e0be.  v4:= "RUNNING" @kind object;
  #L16e0c2.  call temp:= `areEqual`(v3, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L16e0c8.  v3:= temp;
  #L16e0ca.  if v3 == 0 then goto L16e0d6;
  #L16e0ce.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L16e0d4.  v1:= temp @kind object;
  #L16e0d6.  v2.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.lastObservedThread` @type ^`java.lang.Thread` := v1 @kind object;
  #L16e0da.  return @kind void;
}
