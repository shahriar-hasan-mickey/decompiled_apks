record `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind class @AccessFlag FINAL {
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @AccessFlag SYNTHETIC;
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @AccessFlag SYNTHETIC;
  `kotlinx.coroutines.debug.internal.ConcurrentWeakMap` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @AccessFlag FINAL_SYNTHETIC;
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.load` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.g` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L16d4b4.  v0:= constclass @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L16d4b8.  v1:= "load" @kind object;
  #L16d4bc.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L16d4c2.  v0:= temp @kind object;
  #L16d4c4.  `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.g` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L16d4c8.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v0 @kind this, `kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L16d4dc.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` := v1 @kind object;
  #L16d4e0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L16d4e6.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`int` := v2;
  #L16d4ea.  call temp:= `numberOfLeadingZeros`(v2) @signature `Ljava/lang/Integer;.numberOfLeadingZeros:(I)I` @kind static;
  #L16d4f0.  v1:= temp;
  #L16d4f2.  v1:= v1 + 1;
  #L16d4f6.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.b` @type ^`int` := v1;
  #L16d4fa.  v1:= v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`int`;
  #L16d4fe.  v1:= v1 * 2;
  #L16d502.  v1:= v1 / 3;
  #L16d506.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.c` @type ^`int` := v1;
  #L16d50a.  v1:= 0I;
  #L16d50c.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.load` @type ^`int` := v1;
  #L16d510.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L16d514.  v2:= v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`int`;
  #L16d518.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L16d51e.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L16d522.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L16d526.  v2:= v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`int`;
  #L16d52a.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L16d530.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L16d534.  return @kind void;
}
procedure `int` `a`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v0 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.a:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L16d1a8.  v0:= v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`int`;
  #L16d1ac.  return v0;
}
procedure `int` `d`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v1 @kind this, `int` v2 ) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.d:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L16d1c0.  v0:= -1640531527I;
  #L16d1c6.  v2:= v2 * v0 @kind int;
  #L16d1ca.  v0:= v1.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.b` @type ^`int`;
  #L16d1ce.  v2:= v2 ^>> v0 @kind int;
  #L16d1d0.  return v2;
}
procedure `java.lang.Object` `g`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v0 @kind object, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlinx.coroutines.debug.internal.HashedWeakRef` v3 @kind object, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.g:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/HashedWeakRef;ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L16d268.  v4:= v4 ^& 4;
  #L16d26c.  if v4 == 0 then goto L16d272;
  #L16d270.  v3:= 0I;
  #L16d272.  call temp:= `f`(v0, v1, v2, v3) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.f:(Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/HashedWeakRef;)Ljava/lang/Object;` @kind virtual;
  #L16d278.  v0:= temp @kind object;
  #L16d27a.  return v0 @kind object;
}
procedure `void` `i`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.i:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L16d594.  v0:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L16d598.  call temp:= `get`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L16d59e.  v0:= temp @kind object;
  #L16d5a0.  if v0 != 0 then goto L16d5a6;
  #L16d5a4.  return @kind void;
  #L16d5a6.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.debug.internal.b` @kind boolean;
  #L16d5aa.  if v1 == 0 then goto L16d5b0;
  #L16d5ae.  return @kind void;
  #L16d5b0.  v1:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L16d5b4.  v2:= 0I;
  #L16d5b6.  call temp:= `compareAndSet`(v1, v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L16d5bc.  v0:= temp;
  #L16d5be.  if v0 == 0 then goto L16d594;
  #L16d5c2.  v4:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L16d5c6.  call `access$decrementSize`(v4) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.access$decrementSize:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;)V` @kind static;
  #L16d5cc.  return @kind void;
}
procedure `void` `b`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v2 @kind this, `kotlinx.coroutines.debug.internal.HashedWeakRef` v3 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.b:(Lkotlinx/coroutines/debug/internal/HashedWeakRef;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L16d548.  v0:= v3.`kotlinx.coroutines.debug.internal.HashedWeakRef.hash` @type ^`int`;
  #L16d54c.  call temp:= `d`(v2, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.d:(I)I` @kind direct;
  #L16d552.  v0:= temp;
  #L16d554.  v1:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L16d558.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L16d55e.  v1:= temp @kind object;
  #L16d560.  v1:= (`kotlinx.coroutines.debug.internal.HashedWeakRef`) v1 @kind object;
  #L16d564.  if v1 != 0 then goto L16d56a;
  #L16d568.  return @kind void;
  #L16d56a.  if v1 != v3 then goto L16d576;
  #L16d56e.  call `i`(v2, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.i:(I)V` @kind direct;
  #L16d574.  return @kind void;
  #L16d576.  if v0 != 0 then goto L16d57e;
  #L16d57a.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`int`;
  #L16d57e.  v0:= v0 + -1;
  #L16d582.  goto L16d554;
}
procedure `java.lang.Object` `c`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L16d1e4.  call temp:= `hashCode`(v4) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L16d1ea.  v0:= temp;
  #L16d1ec.  call temp:= `d`(v3, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.d:(I)I` @kind direct;
  #L16d1f2.  v0:= temp;
  #L16d1f4.  v1:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L16d1f8.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L16d1fe.  v1:= temp @kind object;
  #L16d200.  v1:= (`kotlinx.coroutines.debug.internal.HashedWeakRef`) v1 @kind object;
  #L16d204.  if v1 != 0 then goto L16d20c;
  #L16d208.  v4:= 0I;
  #L16d20a.  return v4 @kind object;
  #L16d20c.  call temp:= `get`(v1) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L16d212.  v1:= temp @kind object;
  #L16d214.  call temp:= `areEqual`(v4, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L16d21a.  v2:= temp;
  #L16d21c.  if v2 == 0 then goto L16d23e;
  #L16d220.  v4:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L16d224.  call temp:= `get`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L16d22a.  v4:= temp @kind object;
  #L16d22c.  v0:= instanceof @variable v4 @type ^`kotlinx.coroutines.debug.internal.b` @kind boolean;
  #L16d230.  if v0 == 0 then goto L16d23c;
  #L16d234.  v4:= (`kotlinx.coroutines.debug.internal.b`) v4 @kind object;
  #L16d238.  v4:= v4.`kotlinx.coroutines.debug.internal.b.a` @type ^`java.lang.Object` @kind object;
  #L16d23c.  return v4 @kind object;
  #L16d23e.  if v1 != 0 then goto L16d248;
  #L16d242.  call `i`(v3, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.i:(I)V` @kind direct;
  #L16d248.  if v0 != 0 then goto L16d250;
  #L16d24c.  v0:= v3.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`int`;
  #L16d250.  v0:= v0 + -1;
  #L16d254.  goto L16d1f4;
}
procedure `java.util.Iterator` `e`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v1 @kind this, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.e:(Lkotlin/jvm/functions/Function2;)Ljava/util/Iterator;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L16d390.  v0:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a`;
  #L16d394.  call `<init>`(v0, v1, v2) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L16d39a.  return v0 @kind object;
}
procedure `java.lang.Object` `f`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `kotlinx.coroutines.debug.internal.HashedWeakRef` v8 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.f:(Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/HashedWeakRef;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16d28c.  call temp:= `hashCode`(v6) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L16d292.  v0:= temp;
  #L16d294.  call temp:= `d`(v5, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.d:(I)I` @kind direct;
  #L16d29a.  v0:= temp;
  #L16d29c.  v1:= 0I;
  #L16d29e.  v2:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L16d2a2.  call temp:= `get`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L16d2a8.  v2:= temp @kind object;
  #L16d2aa.  v2:= (`kotlinx.coroutines.debug.internal.HashedWeakRef`) v2 @kind object;
  #L16d2ae.  if v2 != 0 then goto L16d316;
  #L16d2b2.  v2:= 0I;
  #L16d2b4.  if v7 != 0 then goto L16d2ba;
  #L16d2b8.  return v2 @kind object;
  #L16d2ba.  if v1 != 0 then goto L16d2ea;
  #L16d2be.  v1:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.load` @type ^`int`;
  #L16d2c2.  v3:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.c` @type ^`int`;
  #L16d2c6.  if v1 < v3 then goto L16d2d4;
  #L16d2ca.  call temp:= `access$getREHASH$p`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$getREHASH$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L16d2d0.  v6:= temp @kind object;
  #L16d2d2.  return v6 @kind object;
  #L16d2d4.  v3:= v1 + 1;
  #L16d2d8.  v4:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.g` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L16d2dc.  call temp:= `compareAndSet`(v4, v5, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L16d2e2.  v1:= temp;
  #L16d2e4.  if v1 == 0 then goto L16d2be;
  #L16d2e8.  v1:= 1I;
  #L16d2ea.  if v8 != 0 then goto L16d304;
  #L16d2ee.  v8:= new `kotlinx.coroutines.debug.internal.HashedWeakRef`;
  #L16d2f2.  v3:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L16d2f6.  call temp:= `access$getWeakRefQueue$p`(v3) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;.access$getWeakRefQueue$p:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;)Ljava/lang/ref/ReferenceQueue;` @kind static;
  #L16d2fc.  v3:= temp @kind object;
  #L16d2fe.  call `<init>`(v8, v6, v3) @signature `Lkotlinx/coroutines/debug/internal/HashedWeakRef;.<init>:(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V` @kind direct;
  #L16d304.  v3:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L16d308.  call temp:= `compareAndSet`(v3, v0, v2, v8) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L16d30e.  v2:= temp;
  #L16d310.  if v2 == 0 then goto L16d29e;
  #L16d314.  goto L16d338;
  #L16d316.  call temp:= `get`(v2) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L16d31c.  v2:= temp @kind object;
  #L16d31e.  call temp:= `areEqual`(v6, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L16d324.  v3:= temp;
  #L16d326.  if v3 == 0 then goto L16d368;
  #L16d32a.  if v1 == 0 then goto L16d338;
  #L16d32e.  v6:= `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.g` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L16d332.  call temp:= `decrementAndGet`(v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L16d338.  v6:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L16d33c.  call temp:= `get`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L16d342.  v6:= temp @kind object;
  #L16d344.  v8:= instanceof @variable v6 @type ^`kotlinx.coroutines.debug.internal.b` @kind boolean;
  #L16d348.  if v8 == 0 then goto L16d356;
  #L16d34c.  call temp:= `access$getREHASH$p`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$getREHASH$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L16d352.  v6:= temp @kind object;
  #L16d354.  return v6 @kind object;
  #L16d356.  v8:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L16d35a.  call temp:= `compareAndSet`(v8, v0, v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L16d360.  v8:= temp;
  #L16d362.  if v8 == 0 then goto L16d338;
  #L16d366.  return v6 @kind object;
  #L16d368.  if v2 != 0 then goto L16d372;
  #L16d36c.  call `i`(v5, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.i:(I)V` @kind direct;
  #L16d372.  if v0 != 0 then goto L16d37a;
  #L16d376.  v0:= v5.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`int`;
  #L16d37a.  v0:= v0 + -1;
  #L16d37e.  goto L16d29e;
}
procedure `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` `h`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v10 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.h:()Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L16d3ac.  v0:= v10.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L16d3b0.  call temp:= `size`(v0) @signature `Lkotlin/collections/AbstractMutableMap;.size:()I` @kind virtual;
  #L16d3b6.  v0:= temp;
  #L16d3b8.  v1:= 4I;
  #L16d3ba.  call temp:= `coerceAtLeast`(v0, v1) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @kind static;
  #L16d3c0.  v0:= temp;
  #L16d3c2.  call temp:= `highestOneBit`(v0) @signature `Ljava/lang/Integer;.highestOneBit:(I)I` @kind static;
  #L16d3c8.  v0:= temp;
  #L16d3ca.  v0:= v0 * 4;
  #L16d3ce.  v1:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`;
  #L16d3d2.  v2:= v10.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.f` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L16d3d6.  call `<init>`(v1, v2, v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;I)V` @kind direct;
  #L16d3dc.  v0:= v10.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.a` @type ^`int`;
  #L16d3e0.  if v0 <= 0 then goto L16d4a0;
  #L16d3e4.  v2:= 0I;
  #L16d3e6.  v3:= 0I;
  #L16d3e8.  v4:= v3 + 1;
  #L16d3ec.  v5:= v10.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L16d3f0.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L16d3f6.  v5:= temp @kind object;
  #L16d3f8.  v5:= (`kotlinx.coroutines.debug.internal.HashedWeakRef`) v5 @kind object;
  #L16d3fc.  if v5 != 0 then goto L16d404;
  #L16d400.  v6:= 0I;
  #L16d402.  goto L16d40c;
  #L16d404.  call temp:= `get`(v5) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L16d40a.  v6:= temp @kind object;
  #L16d40c.  if v5 == 0 then goto L16d41a;
  #L16d410.  if v6 != 0 then goto L16d41a;
  #L16d414.  call `i`(v10, v3) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.i:(I)V` @kind direct;
  #L16d41a.  v7:= v10.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L16d41e.  call temp:= `get`(v7, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L16d424.  v7:= temp @kind object;
  #L16d426.  v8:= instanceof @variable v7 @type ^`kotlinx.coroutines.debug.internal.b` @kind boolean;
  #L16d42a.  if v8 == 0 then goto L16d438;
  #L16d42e.  v7:= (`kotlinx.coroutines.debug.internal.b`) v7 @kind object;
  #L16d432.  v7:= v7.`kotlinx.coroutines.debug.internal.b.a` @type ^`java.lang.Object` @kind object;
  #L16d436.  goto L16d450;
  #L16d438.  v8:= v10.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L16d43c.  call temp:= `access$mark`(v7) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$mark:(Ljava/lang/Object;)Lkotlinx/coroutines/debug/internal/b;` @kind static;
  #L16d442.  v9:= temp @kind object;
  #L16d444.  call temp:= `compareAndSet`(v8, v3, v7, v9) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L16d44a.  v8:= temp;
  #L16d44c.  if v8 == 0 then goto L16d41a;
  #L16d450.  if v6 == 0 then goto L16d496;
  #L16d454.  if v7 == 0 then goto L16d496;
  #L16d458.  call temp:= `f`(v1, v6, v7, v5) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.f:(Ljava/lang/Object;Ljava/lang/Object;Lkotlinx/coroutines/debug/internal/HashedWeakRef;)Ljava/lang/Object;` @kind virtual;
  #L16d45e.  v3:= temp @kind object;
  #L16d460.  call temp:= `access$getREHASH$p`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$getREHASH$p:()Lkotlinx/coroutines/internal/Symbol;` @kind static;
  #L16d466.  v5:= temp @kind object;
  #L16d468.  if v3 != v5 then goto L16d46e;
  #L16d46c.  goto L16d3ac;
  #L16d46e.  if v3 != 0 then goto L16d476;
  #L16d472.  v3:= 1I;
  #L16d474.  goto L16d478;
  #L16d476.  v3:= 0I;
  #L16d478.  v5:= `@@kotlin._Assertions.ENABLED` @type ^`boolean` @kind boolean;
  #L16d47c.  if v5 == 0 then goto L16d496;
  #L16d480.  if v3 == 0 then goto L16d486;
  #L16d484.  goto L16d496;
  #L16d486.  v0:= new `java.lang.AssertionError`;
  #L16d48a.  v1:= "Assertion failed" @kind object;
  #L16d48e.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L16d494.  throw v0;
  #L16d496.  if v4 < v0 then goto L16d49c;
  #L16d49a.  goto L16d4a0;
  #L16d49c.  v3:= v4;
  #L16d49e.  goto L16d3e8;
  #L16d4a0.  return v1 @kind object;
}
