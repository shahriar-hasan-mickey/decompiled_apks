record `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$c` @kind class @AccessFlag FINAL extends `kotlin.collections.AbstractMutableSet` @kind class {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$c.a` @AccessFlag PRIVATE_FINAL;
  `kotlinx.coroutines.debug.internal.ConcurrentWeakMap` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$c.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$c` v0 @kind this, `kotlinx.coroutines.debug.internal.ConcurrentWeakMap` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$c;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L16d6c4.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$c.b` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` := v1 @kind object;
  #L16d6c8.  call `<init>`(v0) @signature `Lkotlin/collections/AbstractMutableSet;.<init>:()V` @kind direct;
  #L16d6ce.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$c.a` @type ^`kotlin.jvm.functions.Function2` := v2 @kind object;
  #L16d6d2.  return @kind void;
}
procedure `boolean` `add`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$c;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L16d654.  call temp:= `access$noImpl`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$noImpl:()Ljava/lang/Void;` @kind static;
  #L16d65a.  v1:= new `kotlin.KotlinNothingValueException`;
  #L16d65e.  call `<init>`(v1) @signature `Lkotlin/KotlinNothingValueException;.<init>:()V` @kind direct;
  #L16d664.  throw v1;
}
procedure `int` `getSize`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$c` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$c;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d678.  v0:= v1.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$c.b` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L16d67c.  call temp:= `size`(v0) @signature `Lkotlin/collections/AbstractMutableMap;.size:()I` @kind virtual;
  #L16d682.  v0:= temp;
  #L16d684.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$c` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$c;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16d698.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$c.b` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap` @kind object;
  #L16d69c.  v0:= v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core` @type ^`java.lang.Object` @kind object;
  #L16d6a0.  v0:= (`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a`) v0 @kind object;
  #L16d6a4.  v1:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$c.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L16d6a8.  call temp:= `e`(v0, v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.e:(Lkotlin/jvm/functions/Function2;)Ljava/util/Iterator;` @kind virtual;
  #L16d6ae.  v0:= temp @kind object;
  #L16d6b0.  return v0 @kind object;
}
