record `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMutableIterator` @kind interface {
  `kotlin.jvm.functions.Function2` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.c` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.d` @AccessFlag PRIVATE;
  `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v0 @kind this, `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` v1 @kind object, `kotlin.jvm.functions.Function2` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.<init>:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L16d0d4.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` := v1 @kind object;
  #L16d0d8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L16d0de.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.a` @type ^`kotlin.jvm.functions.Function2` := v2 @kind object;
  #L16d0e2.  v1:= -1I;
  #L16d0e4.  v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @type ^`int` := v1;
  #L16d0e8.  call `b`(v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.b:()V` @kind direct;
  #L16d0ee.  return @kind void;
}
procedure `void` `b`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.b:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L16d100.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @type ^`int`;
  #L16d104.  v0:= v0 + 1;
  #L16d108.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @type ^`int` := v0;
  #L16d10c.  v1:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L16d110.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.a:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;)I` @kind static;
  #L16d116.  v1:= temp;
  #L16d118.  if v0 >= v1 then goto L16d17a;
  #L16d11c.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L16d120.  v0:= v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L16d124.  v1:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @type ^`int`;
  #L16d128.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L16d12e.  v0:= temp @kind object;
  #L16d130.  v0:= (`kotlinx.coroutines.debug.internal.HashedWeakRef`) v0 @kind object;
  #L16d134.  if v0 != 0 then goto L16d13c;
  #L16d138.  v0:= 0I;
  #L16d13a.  goto L16d144;
  #L16d13c.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L16d142.  v0:= temp @kind object;
  #L16d144.  if v0 != 0 then goto L16d14a;
  #L16d148.  goto L16d100;
  #L16d14a.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L16d14e.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L16d152.  v0:= v0.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L16d156.  v1:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @type ^`int`;
  #L16d15a.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L16d160.  v0:= temp @kind object;
  #L16d162.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.debug.internal.b` @kind boolean;
  #L16d166.  if v1 == 0 then goto L16d172;
  #L16d16a.  v0:= (`kotlinx.coroutines.debug.internal.b`) v0 @kind object;
  #L16d16e.  v0:= v0.`kotlinx.coroutines.debug.internal.b.a` @type ^`java.lang.Object` @kind object;
  #L16d172.  if v0 == 0 then goto L16d100;
  #L16d176.  v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.d` @type ^`java.lang.Object` := v0 @kind object;
  #L16d17a.  return @kind void;
}
procedure `java.lang.Void` `c`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.c:()Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d0b0.  call temp:= `access$noImpl`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMapKt;.access$noImpl:()Ljava/lang/Void;` @kind static;
  #L16d0b6.  v0:= new `kotlin.KotlinNothingValueException`;
  #L16d0ba.  call `<init>`(v0) @signature `Lkotlin/KotlinNothingValueException;.<init>:()V` @kind direct;
  #L16d0c0.  throw v0;
}
procedure `boolean` `hasNext`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v2 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16d014.  v0:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @type ^`int`;
  #L16d018.  v1:= v2.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L16d01c.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.a:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;)I` @kind static;
  #L16d022.  v1:= temp;
  #L16d024.  if v0 >= v1 then goto L16d02c;
  #L16d028.  v0:= 1I;
  #L16d02a.  goto L16d02e;
  #L16d02c.  v0:= 0I;
  #L16d02e.  return v0;
}
procedure `java.lang.Object` `next`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v4 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16d040.  v0:= v4.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.b` @type ^`int`;
  #L16d044.  v1:= v4.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.e` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a` @kind object;
  #L16d048.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;.a:(Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a;)I` @kind static;
  #L16d04e.  v1:= temp;
  #L16d050.  if v0 >= v1 then goto L16d092;
  #L16d054.  v0:= v4.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.a` @type ^`kotlin.jvm.functions.Function2` @kind object;
  #L16d058.  v1:= v4.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.c` @type ^`java.lang.Object` @kind object;
  #L16d05c.  v2:= 0I;
  #L16d05e.  if v1 == 0 then goto L16d086;
  #L16d062.  v3:= v4.`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a.d` @type ^`java.lang.Object` @kind object;
  #L16d066.  if v3 == 0 then goto L16d07a;
  #L16d06a.  call temp:= `invoke`(v0, v1, v3) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L16d070.  v0:= temp @kind object;
  #L16d072.  call `b`(v4) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.b:()V` @kind direct;
  #L16d078.  return v0 @kind object;
  #L16d07a.  v0:= "value" @kind object;
  #L16d07e.  call `throwUninitializedPropertyAccessException`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.throwUninitializedPropertyAccessException:(Ljava/lang/String;)V` @kind static;
  #L16d084.  throw v2;
  #L16d086.  v0:= "key" @kind object;
  #L16d08a.  call `throwUninitializedPropertyAccessException`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.throwUninitializedPropertyAccessException:(Ljava/lang/String;)V` @kind static;
  #L16d090.  throw v2;
  #L16d092.  v0:= new `java.util.NoSuchElementException`;
  #L16d096.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L16d09c.  throw v0;
}
procedure `void` `remove`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$a$a` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.remove:()V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L16d18c.  call temp:= `c`(v1) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$a$a;.c:()Ljava/lang/Void;` @kind virtual;
  #L16d192.  v0:= 0I;
  #L16d194.  throw v0;
}
