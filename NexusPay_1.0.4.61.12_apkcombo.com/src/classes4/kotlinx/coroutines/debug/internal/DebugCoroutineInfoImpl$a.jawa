record `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a` @kind class @AccessFlag FINAL extends `kotlin.coroutines.jvm.internal.RestrictedSuspendLambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
  `int` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.b` @AccessFlag ;
  `java.lang.Object` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.c` @AccessFlag PRIVATE_SYNTHETIC;
  `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.d` @AccessFlag FINAL_SYNTHETIC;
  `kotlinx.coroutines.debug.internal.StackTraceFrame` `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a` v0 @kind this, `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` v1 @kind object, `kotlinx.coroutines.debug.internal.StackTraceFrame` v2 @kind object, `kotlin.coroutines.Continuation` v3 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.<init>:(Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;Lkotlinx/coroutines/debug/internal/StackTraceFrame;Lkotlin/coroutines/Continuation;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L16dd08.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.d` @type ^`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` := v1 @kind object;
  #L16dd0c.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.e` @type ^`kotlinx.coroutines.debug.internal.StackTraceFrame` := v2 @kind object;
  #L16dd10.  v1:= 2I;
  #L16dd12.  call `<init>`(v0, v1, v3) @signature `Lkotlin/coroutines/jvm/internal/RestrictedSuspendLambda;.<init>:(ILkotlin/coroutines/Continuation;)V` @kind direct;
  #L16dd18.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a` v0 @kind this, `kotlin.sequences.SequenceScope` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.a:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L16dc40.  call temp:= `create`(v0, v1, v2) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @kind virtual;
  #L16dc46.  v1:= temp @kind object;
  #L16dc48.  v1:= (`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a`) v1 @kind object;
  #L16dc4c.  v2:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L16dc50.  call temp:= `invokeSuspend`(v1, v2) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16dc56.  v1:= temp @kind object;
  #L16dc58.  return v1 @kind object;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a` v3 @kind this, `java.lang.Object` v4 @kind object, `kotlin.coroutines.Continuation` v5 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L16dce0.  v0:= new `kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a`;
  #L16dce4.  v1:= v3.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.d` @type ^`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` @kind object;
  #L16dce8.  v2:= v3.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.e` @type ^`kotlinx.coroutines.debug.internal.StackTraceFrame` @kind object;
  #L16dcec.  call `<init>`(v0, v1, v2, v5) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.<init>:(Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;Lkotlinx/coroutines/debug/internal/StackTraceFrame;Lkotlin/coroutines/Continuation;)V` @kind direct;
  #L16dcf2.  v0.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.c` @type ^`java.lang.Object` := v4 @kind object;
  #L16dcf6.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L16dc1c.  v1:= (`kotlin.sequences.SequenceScope`) v1 @kind object;
  #L16dc20.  v2:= (`kotlin.coroutines.Continuation`) v2 @kind object;
  #L16dc24.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.a:(Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind virtual;
  #L16dc2a.  v1:= temp @kind object;
  #L16dc2c.  return v1 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl$a;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16dc6c.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L16dc72.  v0:= temp @kind object;
  #L16dc74.  v1:= v4.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.b` @type ^`int`;
  #L16dc78.  v2:= 1I;
  #L16dc7a.  if v1 == 0 then goto L16dc9a;
  #L16dc7e.  if v1 != v2 then goto L16dc8a;
  #L16dc82.  call `throwOnFailure`(v5) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L16dc88.  goto L16dcca;
  #L16dc8a.  v5:= new `java.lang.IllegalStateException`;
  #L16dc8e.  v0:= "call to 'resume' before 'invoke' with coroutine" @kind object;
  #L16dc92.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16dc98.  throw v5;
  #L16dc9a.  call `throwOnFailure`(v5) @signature `Lkotlin/ResultKt;.throwOnFailure:(Ljava/lang/Object;)V` @kind static;
  #L16dca0.  v5:= v4.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.c` @type ^`java.lang.Object` @kind object;
  #L16dca4.  v5:= (`kotlin.sequences.SequenceScope`) v5 @kind object;
  #L16dca8.  v1:= v4.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.d` @type ^`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl` @kind object;
  #L16dcac.  v3:= v4.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.e` @type ^`kotlinx.coroutines.debug.internal.StackTraceFrame` @kind object;
  #L16dcb0.  call temp:= `getCallerFrame`(v3) @signature `Lkotlinx/coroutines/debug/internal/StackTraceFrame;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @kind virtual;
  #L16dcb6.  v3:= temp @kind object;
  #L16dcb8.  v4.`kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$a.b` @type ^`int` := v2;
  #L16dcbc.  call temp:= `access$yieldFrames`(v1, v5, v3, v4) @signature `Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;.access$yieldFrames:(Lkotlinx/coroutines/debug/internal/DebugCoroutineInfoImpl;Lkotlin/sequences/SequenceScope;Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;` @kind static;
  #L16dcc2.  v5:= temp @kind object;
  #L16dcc4.  if v5 != v0 then goto L16dcca;
  #L16dcc8.  return v0 @kind object;
  #L16dcca.  v5:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L16dcce.  return v5 @kind object;
}
