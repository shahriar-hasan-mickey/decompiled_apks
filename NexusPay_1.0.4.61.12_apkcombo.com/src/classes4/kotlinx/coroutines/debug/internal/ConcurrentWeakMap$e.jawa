record `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$e` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.Lambda` @kind class, `kotlin.jvm.functions.Function2` @kind interface {
}
global `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$e` `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$e.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L16d76c.  v0:= new `kotlinx.coroutines.debug.internal.ConcurrentWeakMap$e`;
  #L16d770.  call `<init>`(v0) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$e;.<init>:()V` @kind direct;
  #L16d776.  `@@kotlinx.coroutines.debug.internal.ConcurrentWeakMap$e.a` @type ^`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$e` := v0 @kind object;
  #L16d77a.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$e` v1 @kind this) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$e;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L16d78c.  v0:= 2I;
  #L16d78e.  call `<init>`(v1, v0) @signature `Lkotlin/jvm/internal/Lambda;.<init>:(I)V` @kind direct;
  #L16d794.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.debug.internal.ConcurrentWeakMap$e` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlinx/coroutines/debug/internal/ConcurrentWeakMap$e;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L16d758.  return v1 @kind object;
}
